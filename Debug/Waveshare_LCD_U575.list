
Waveshare_LCD_U575.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000238  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000feb0  08000238  08000238  00001238  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001279  080100e8  080100e8  000110e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08011364  08011364  00012364  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0801136c  0801136c  0001236c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08011370  08011370  00012370  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         000001fc  20000000  08011374  00013000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000004ac  200001fc  08011570  000131fc  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  200006a8  08011570  000136a8  2**0
                  ALLOC
  9 .ARM.attributes 00000036  00000000  00000000  000131fc  2**0
                  CONTENTS, READONLY
 10 .debug_info   00025c33  00000000  00000000  00013232  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00004829  00000000  00000000  00038e65  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001dd0  00000000  00000000  0003d690  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 0000172a  00000000  00000000  0003f460  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000379fc  00000000  00000000  00040b8a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00028ede  00000000  00000000  00078586  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    001532a4  00000000  00000000  000a1464  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001f4708  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00009058  00000000  00000000  001f474c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000006d  00000000  00000000  001fd7a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000238 <__do_global_dtors_aux>:
 8000238:	b510      	push	{r4, lr}
 800023a:	4c05      	ldr	r4, [pc, #20]	@ (8000250 <__do_global_dtors_aux+0x18>)
 800023c:	7823      	ldrb	r3, [r4, #0]
 800023e:	b933      	cbnz	r3, 800024e <__do_global_dtors_aux+0x16>
 8000240:	4b04      	ldr	r3, [pc, #16]	@ (8000254 <__do_global_dtors_aux+0x1c>)
 8000242:	b113      	cbz	r3, 800024a <__do_global_dtors_aux+0x12>
 8000244:	4804      	ldr	r0, [pc, #16]	@ (8000258 <__do_global_dtors_aux+0x20>)
 8000246:	f3af 8000 	nop.w
 800024a:	2301      	movs	r3, #1
 800024c:	7023      	strb	r3, [r4, #0]
 800024e:	bd10      	pop	{r4, pc}
 8000250:	200001fc 	.word	0x200001fc
 8000254:	00000000 	.word	0x00000000
 8000258:	080100d0 	.word	0x080100d0

0800025c <frame_dummy>:
 800025c:	b508      	push	{r3, lr}
 800025e:	4b03      	ldr	r3, [pc, #12]	@ (800026c <frame_dummy+0x10>)
 8000260:	b11b      	cbz	r3, 800026a <frame_dummy+0xe>
 8000262:	4903      	ldr	r1, [pc, #12]	@ (8000270 <frame_dummy+0x14>)
 8000264:	4803      	ldr	r0, [pc, #12]	@ (8000274 <frame_dummy+0x18>)
 8000266:	f3af 8000 	nop.w
 800026a:	bd08      	pop	{r3, pc}
 800026c:	00000000 	.word	0x00000000
 8000270:	20000200 	.word	0x20000200
 8000274:	080100d0 	.word	0x080100d0

08000278 <strlen>:
 8000278:	4603      	mov	r3, r0
 800027a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800027e:	2a00      	cmp	r2, #0
 8000280:	d1fb      	bne.n	800027a <strlen+0x2>
 8000282:	1a18      	subs	r0, r3, r0
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr

08000288 <__aeabi_drsub>:
 8000288:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800028c:	e002      	b.n	8000294 <__adddf3>
 800028e:	bf00      	nop

08000290 <__aeabi_dsub>:
 8000290:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000294 <__adddf3>:
 8000294:	b530      	push	{r4, r5, lr}
 8000296:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800029a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800029e:	ea94 0f05 	teq	r4, r5
 80002a2:	bf08      	it	eq
 80002a4:	ea90 0f02 	teqeq	r0, r2
 80002a8:	bf1f      	itttt	ne
 80002aa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002ae:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002b2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002b6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002ba:	f000 80e2 	beq.w	8000482 <__adddf3+0x1ee>
 80002be:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002c2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002c6:	bfb8      	it	lt
 80002c8:	426d      	neglt	r5, r5
 80002ca:	dd0c      	ble.n	80002e6 <__adddf3+0x52>
 80002cc:	442c      	add	r4, r5
 80002ce:	ea80 0202 	eor.w	r2, r0, r2
 80002d2:	ea81 0303 	eor.w	r3, r1, r3
 80002d6:	ea82 0000 	eor.w	r0, r2, r0
 80002da:	ea83 0101 	eor.w	r1, r3, r1
 80002de:	ea80 0202 	eor.w	r2, r0, r2
 80002e2:	ea81 0303 	eor.w	r3, r1, r3
 80002e6:	2d36      	cmp	r5, #54	@ 0x36
 80002e8:	bf88      	it	hi
 80002ea:	bd30      	pophi	{r4, r5, pc}
 80002ec:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002f4:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002fc:	d002      	beq.n	8000304 <__adddf3+0x70>
 80002fe:	4240      	negs	r0, r0
 8000300:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000304:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000308:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800030c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000310:	d002      	beq.n	8000318 <__adddf3+0x84>
 8000312:	4252      	negs	r2, r2
 8000314:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000318:	ea94 0f05 	teq	r4, r5
 800031c:	f000 80a7 	beq.w	800046e <__adddf3+0x1da>
 8000320:	f1a4 0401 	sub.w	r4, r4, #1
 8000324:	f1d5 0e20 	rsbs	lr, r5, #32
 8000328:	db0d      	blt.n	8000346 <__adddf3+0xb2>
 800032a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800032e:	fa22 f205 	lsr.w	r2, r2, r5
 8000332:	1880      	adds	r0, r0, r2
 8000334:	f141 0100 	adc.w	r1, r1, #0
 8000338:	fa03 f20e 	lsl.w	r2, r3, lr
 800033c:	1880      	adds	r0, r0, r2
 800033e:	fa43 f305 	asr.w	r3, r3, r5
 8000342:	4159      	adcs	r1, r3
 8000344:	e00e      	b.n	8000364 <__adddf3+0xd0>
 8000346:	f1a5 0520 	sub.w	r5, r5, #32
 800034a:	f10e 0e20 	add.w	lr, lr, #32
 800034e:	2a01      	cmp	r2, #1
 8000350:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000354:	bf28      	it	cs
 8000356:	f04c 0c02 	orrcs.w	ip, ip, #2
 800035a:	fa43 f305 	asr.w	r3, r3, r5
 800035e:	18c0      	adds	r0, r0, r3
 8000360:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000364:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000368:	d507      	bpl.n	800037a <__adddf3+0xe6>
 800036a:	f04f 0e00 	mov.w	lr, #0
 800036e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000372:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000376:	eb6e 0101 	sbc.w	r1, lr, r1
 800037a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800037e:	d31b      	bcc.n	80003b8 <__adddf3+0x124>
 8000380:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000384:	d30c      	bcc.n	80003a0 <__adddf3+0x10c>
 8000386:	0849      	lsrs	r1, r1, #1
 8000388:	ea5f 0030 	movs.w	r0, r0, rrx
 800038c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000390:	f104 0401 	add.w	r4, r4, #1
 8000394:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000398:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800039c:	f080 809a 	bcs.w	80004d4 <__adddf3+0x240>
 80003a0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003a4:	bf08      	it	eq
 80003a6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003aa:	f150 0000 	adcs.w	r0, r0, #0
 80003ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003b2:	ea41 0105 	orr.w	r1, r1, r5
 80003b6:	bd30      	pop	{r4, r5, pc}
 80003b8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003bc:	4140      	adcs	r0, r0
 80003be:	eb41 0101 	adc.w	r1, r1, r1
 80003c2:	3c01      	subs	r4, #1
 80003c4:	bf28      	it	cs
 80003c6:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003ca:	d2e9      	bcs.n	80003a0 <__adddf3+0x10c>
 80003cc:	f091 0f00 	teq	r1, #0
 80003d0:	bf04      	itt	eq
 80003d2:	4601      	moveq	r1, r0
 80003d4:	2000      	moveq	r0, #0
 80003d6:	fab1 f381 	clz	r3, r1
 80003da:	bf08      	it	eq
 80003dc:	3320      	addeq	r3, #32
 80003de:	f1a3 030b 	sub.w	r3, r3, #11
 80003e2:	f1b3 0220 	subs.w	r2, r3, #32
 80003e6:	da0c      	bge.n	8000402 <__adddf3+0x16e>
 80003e8:	320c      	adds	r2, #12
 80003ea:	dd08      	ble.n	80003fe <__adddf3+0x16a>
 80003ec:	f102 0c14 	add.w	ip, r2, #20
 80003f0:	f1c2 020c 	rsb	r2, r2, #12
 80003f4:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f8:	fa21 f102 	lsr.w	r1, r1, r2
 80003fc:	e00c      	b.n	8000418 <__adddf3+0x184>
 80003fe:	f102 0214 	add.w	r2, r2, #20
 8000402:	bfd8      	it	le
 8000404:	f1c2 0c20 	rsble	ip, r2, #32
 8000408:	fa01 f102 	lsl.w	r1, r1, r2
 800040c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000410:	bfdc      	itt	le
 8000412:	ea41 010c 	orrle.w	r1, r1, ip
 8000416:	4090      	lslle	r0, r2
 8000418:	1ae4      	subs	r4, r4, r3
 800041a:	bfa2      	ittt	ge
 800041c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000420:	4329      	orrge	r1, r5
 8000422:	bd30      	popge	{r4, r5, pc}
 8000424:	ea6f 0404 	mvn.w	r4, r4
 8000428:	3c1f      	subs	r4, #31
 800042a:	da1c      	bge.n	8000466 <__adddf3+0x1d2>
 800042c:	340c      	adds	r4, #12
 800042e:	dc0e      	bgt.n	800044e <__adddf3+0x1ba>
 8000430:	f104 0414 	add.w	r4, r4, #20
 8000434:	f1c4 0220 	rsb	r2, r4, #32
 8000438:	fa20 f004 	lsr.w	r0, r0, r4
 800043c:	fa01 f302 	lsl.w	r3, r1, r2
 8000440:	ea40 0003 	orr.w	r0, r0, r3
 8000444:	fa21 f304 	lsr.w	r3, r1, r4
 8000448:	ea45 0103 	orr.w	r1, r5, r3
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	f1c4 040c 	rsb	r4, r4, #12
 8000452:	f1c4 0220 	rsb	r2, r4, #32
 8000456:	fa20 f002 	lsr.w	r0, r0, r2
 800045a:	fa01 f304 	lsl.w	r3, r1, r4
 800045e:	ea40 0003 	orr.w	r0, r0, r3
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	fa21 f004 	lsr.w	r0, r1, r4
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	f094 0f00 	teq	r4, #0
 8000472:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000476:	bf06      	itte	eq
 8000478:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800047c:	3401      	addeq	r4, #1
 800047e:	3d01      	subne	r5, #1
 8000480:	e74e      	b.n	8000320 <__adddf3+0x8c>
 8000482:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000486:	bf18      	it	ne
 8000488:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800048c:	d029      	beq.n	80004e2 <__adddf3+0x24e>
 800048e:	ea94 0f05 	teq	r4, r5
 8000492:	bf08      	it	eq
 8000494:	ea90 0f02 	teqeq	r0, r2
 8000498:	d005      	beq.n	80004a6 <__adddf3+0x212>
 800049a:	ea54 0c00 	orrs.w	ip, r4, r0
 800049e:	bf04      	itt	eq
 80004a0:	4619      	moveq	r1, r3
 80004a2:	4610      	moveq	r0, r2
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	ea91 0f03 	teq	r1, r3
 80004aa:	bf1e      	ittt	ne
 80004ac:	2100      	movne	r1, #0
 80004ae:	2000      	movne	r0, #0
 80004b0:	bd30      	popne	{r4, r5, pc}
 80004b2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004b6:	d105      	bne.n	80004c4 <__adddf3+0x230>
 80004b8:	0040      	lsls	r0, r0, #1
 80004ba:	4149      	adcs	r1, r1
 80004bc:	bf28      	it	cs
 80004be:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004c2:	bd30      	pop	{r4, r5, pc}
 80004c4:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c8:	bf3c      	itt	cc
 80004ca:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004ce:	bd30      	popcc	{r4, r5, pc}
 80004d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004d4:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004dc:	f04f 0000 	mov.w	r0, #0
 80004e0:	bd30      	pop	{r4, r5, pc}
 80004e2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004e6:	bf1a      	itte	ne
 80004e8:	4619      	movne	r1, r3
 80004ea:	4610      	movne	r0, r2
 80004ec:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f0:	bf1c      	itt	ne
 80004f2:	460b      	movne	r3, r1
 80004f4:	4602      	movne	r2, r0
 80004f6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004fa:	bf06      	itte	eq
 80004fc:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000500:	ea91 0f03 	teqeq	r1, r3
 8000504:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	bf00      	nop

0800050c <__aeabi_ui2d>:
 800050c:	f090 0f00 	teq	r0, #0
 8000510:	bf04      	itt	eq
 8000512:	2100      	moveq	r1, #0
 8000514:	4770      	bxeq	lr
 8000516:	b530      	push	{r4, r5, lr}
 8000518:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800051c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000520:	f04f 0500 	mov.w	r5, #0
 8000524:	f04f 0100 	mov.w	r1, #0
 8000528:	e750      	b.n	80003cc <__adddf3+0x138>
 800052a:	bf00      	nop

0800052c <__aeabi_i2d>:
 800052c:	f090 0f00 	teq	r0, #0
 8000530:	bf04      	itt	eq
 8000532:	2100      	moveq	r1, #0
 8000534:	4770      	bxeq	lr
 8000536:	b530      	push	{r4, r5, lr}
 8000538:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800053c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000540:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000544:	bf48      	it	mi
 8000546:	4240      	negmi	r0, r0
 8000548:	f04f 0100 	mov.w	r1, #0
 800054c:	e73e      	b.n	80003cc <__adddf3+0x138>
 800054e:	bf00      	nop

08000550 <__aeabi_f2d>:
 8000550:	0042      	lsls	r2, r0, #1
 8000552:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000556:	ea4f 0131 	mov.w	r1, r1, rrx
 800055a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800055e:	bf1f      	itttt	ne
 8000560:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000564:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000568:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 800056c:	4770      	bxne	lr
 800056e:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000572:	bf08      	it	eq
 8000574:	4770      	bxeq	lr
 8000576:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800057a:	bf04      	itt	eq
 800057c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000580:	4770      	bxeq	lr
 8000582:	b530      	push	{r4, r5, lr}
 8000584:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000588:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800058c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000590:	e71c      	b.n	80003cc <__adddf3+0x138>
 8000592:	bf00      	nop

08000594 <__aeabi_ul2d>:
 8000594:	ea50 0201 	orrs.w	r2, r0, r1
 8000598:	bf08      	it	eq
 800059a:	4770      	bxeq	lr
 800059c:	b530      	push	{r4, r5, lr}
 800059e:	f04f 0500 	mov.w	r5, #0
 80005a2:	e00a      	b.n	80005ba <__aeabi_l2d+0x16>

080005a4 <__aeabi_l2d>:
 80005a4:	ea50 0201 	orrs.w	r2, r0, r1
 80005a8:	bf08      	it	eq
 80005aa:	4770      	bxeq	lr
 80005ac:	b530      	push	{r4, r5, lr}
 80005ae:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005b2:	d502      	bpl.n	80005ba <__aeabi_l2d+0x16>
 80005b4:	4240      	negs	r0, r0
 80005b6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005ba:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005be:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005c2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005c6:	f43f aed8 	beq.w	800037a <__adddf3+0xe6>
 80005ca:	f04f 0203 	mov.w	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005e2:	f1c2 0320 	rsb	r3, r2, #32
 80005e6:	fa00 fc03 	lsl.w	ip, r0, r3
 80005ea:	fa20 f002 	lsr.w	r0, r0, r2
 80005ee:	fa01 fe03 	lsl.w	lr, r1, r3
 80005f2:	ea40 000e 	orr.w	r0, r0, lr
 80005f6:	fa21 f102 	lsr.w	r1, r1, r2
 80005fa:	4414      	add	r4, r2
 80005fc:	e6bd      	b.n	800037a <__adddf3+0xe6>
 80005fe:	bf00      	nop

08000600 <__aeabi_dmul>:
 8000600:	b570      	push	{r4, r5, r6, lr}
 8000602:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000606:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800060a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800060e:	bf1d      	ittte	ne
 8000610:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000614:	ea94 0f0c 	teqne	r4, ip
 8000618:	ea95 0f0c 	teqne	r5, ip
 800061c:	f000 f8de 	bleq	80007dc <__aeabi_dmul+0x1dc>
 8000620:	442c      	add	r4, r5
 8000622:	ea81 0603 	eor.w	r6, r1, r3
 8000626:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800062a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800062e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000632:	bf18      	it	ne
 8000634:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000638:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800063c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000640:	d038      	beq.n	80006b4 <__aeabi_dmul+0xb4>
 8000642:	fba0 ce02 	umull	ip, lr, r0, r2
 8000646:	f04f 0500 	mov.w	r5, #0
 800064a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800064e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000652:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000656:	f04f 0600 	mov.w	r6, #0
 800065a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800065e:	f09c 0f00 	teq	ip, #0
 8000662:	bf18      	it	ne
 8000664:	f04e 0e01 	orrne.w	lr, lr, #1
 8000668:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 800066c:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000670:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000674:	d204      	bcs.n	8000680 <__aeabi_dmul+0x80>
 8000676:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800067a:	416d      	adcs	r5, r5
 800067c:	eb46 0606 	adc.w	r6, r6, r6
 8000680:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000684:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000688:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800068c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000690:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000694:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000698:	bf88      	it	hi
 800069a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800069e:	d81e      	bhi.n	80006de <__aeabi_dmul+0xde>
 80006a0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006a4:	bf08      	it	eq
 80006a6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006aa:	f150 0000 	adcs.w	r0, r0, #0
 80006ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b8:	ea46 0101 	orr.w	r1, r6, r1
 80006bc:	ea40 0002 	orr.w	r0, r0, r2
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c8:	bfc2      	ittt	gt
 80006ca:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006ce:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006d2:	bd70      	popgt	{r4, r5, r6, pc}
 80006d4:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d8:	f04f 0e00 	mov.w	lr, #0
 80006dc:	3c01      	subs	r4, #1
 80006de:	f300 80ab 	bgt.w	8000838 <__aeabi_dmul+0x238>
 80006e2:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006e6:	bfde      	ittt	le
 80006e8:	2000      	movle	r0, #0
 80006ea:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006ee:	bd70      	pople	{r4, r5, r6, pc}
 80006f0:	f1c4 0400 	rsb	r4, r4, #0
 80006f4:	3c20      	subs	r4, #32
 80006f6:	da35      	bge.n	8000764 <__aeabi_dmul+0x164>
 80006f8:	340c      	adds	r4, #12
 80006fa:	dc1b      	bgt.n	8000734 <__aeabi_dmul+0x134>
 80006fc:	f104 0414 	add.w	r4, r4, #20
 8000700:	f1c4 0520 	rsb	r5, r4, #32
 8000704:	fa00 f305 	lsl.w	r3, r0, r5
 8000708:	fa20 f004 	lsr.w	r0, r0, r4
 800070c:	fa01 f205 	lsl.w	r2, r1, r5
 8000710:	ea40 0002 	orr.w	r0, r0, r2
 8000714:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000718:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800071c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000720:	fa21 f604 	lsr.w	r6, r1, r4
 8000724:	eb42 0106 	adc.w	r1, r2, r6
 8000728:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800072c:	bf08      	it	eq
 800072e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000732:	bd70      	pop	{r4, r5, r6, pc}
 8000734:	f1c4 040c 	rsb	r4, r4, #12
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f304 	lsl.w	r3, r0, r4
 8000740:	fa20 f005 	lsr.w	r0, r0, r5
 8000744:	fa01 f204 	lsl.w	r2, r1, r4
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000750:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000754:	f141 0100 	adc.w	r1, r1, #0
 8000758:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800075c:	bf08      	it	eq
 800075e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000762:	bd70      	pop	{r4, r5, r6, pc}
 8000764:	f1c4 0520 	rsb	r5, r4, #32
 8000768:	fa00 f205 	lsl.w	r2, r0, r5
 800076c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000770:	fa20 f304 	lsr.w	r3, r0, r4
 8000774:	fa01 f205 	lsl.w	r2, r1, r5
 8000778:	ea43 0302 	orr.w	r3, r3, r2
 800077c:	fa21 f004 	lsr.w	r0, r1, r4
 8000780:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000784:	fa21 f204 	lsr.w	r2, r1, r4
 8000788:	ea20 0002 	bic.w	r0, r0, r2
 800078c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f094 0f00 	teq	r4, #0
 80007a0:	d10f      	bne.n	80007c2 <__aeabi_dmul+0x1c2>
 80007a2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007a6:	0040      	lsls	r0, r0, #1
 80007a8:	eb41 0101 	adc.w	r1, r1, r1
 80007ac:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b0:	bf08      	it	eq
 80007b2:	3c01      	subeq	r4, #1
 80007b4:	d0f7      	beq.n	80007a6 <__aeabi_dmul+0x1a6>
 80007b6:	ea41 0106 	orr.w	r1, r1, r6
 80007ba:	f095 0f00 	teq	r5, #0
 80007be:	bf18      	it	ne
 80007c0:	4770      	bxne	lr
 80007c2:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007c6:	0052      	lsls	r2, r2, #1
 80007c8:	eb43 0303 	adc.w	r3, r3, r3
 80007cc:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d0:	bf08      	it	eq
 80007d2:	3d01      	subeq	r5, #1
 80007d4:	d0f7      	beq.n	80007c6 <__aeabi_dmul+0x1c6>
 80007d6:	ea43 0306 	orr.w	r3, r3, r6
 80007da:	4770      	bx	lr
 80007dc:	ea94 0f0c 	teq	r4, ip
 80007e0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007e4:	bf18      	it	ne
 80007e6:	ea95 0f0c 	teqne	r5, ip
 80007ea:	d00c      	beq.n	8000806 <__aeabi_dmul+0x206>
 80007ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f0:	bf18      	it	ne
 80007f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007f6:	d1d1      	bne.n	800079c <__aeabi_dmul+0x19c>
 80007f8:	ea81 0103 	eor.w	r1, r1, r3
 80007fc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000800:	f04f 0000 	mov.w	r0, #0
 8000804:	bd70      	pop	{r4, r5, r6, pc}
 8000806:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800080a:	bf06      	itte	eq
 800080c:	4610      	moveq	r0, r2
 800080e:	4619      	moveq	r1, r3
 8000810:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000814:	d019      	beq.n	800084a <__aeabi_dmul+0x24a>
 8000816:	ea94 0f0c 	teq	r4, ip
 800081a:	d102      	bne.n	8000822 <__aeabi_dmul+0x222>
 800081c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000820:	d113      	bne.n	800084a <__aeabi_dmul+0x24a>
 8000822:	ea95 0f0c 	teq	r5, ip
 8000826:	d105      	bne.n	8000834 <__aeabi_dmul+0x234>
 8000828:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800082c:	bf1c      	itt	ne
 800082e:	4610      	movne	r0, r2
 8000830:	4619      	movne	r1, r3
 8000832:	d10a      	bne.n	800084a <__aeabi_dmul+0x24a>
 8000834:	ea81 0103 	eor.w	r1, r1, r3
 8000838:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800083c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000840:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000844:	f04f 0000 	mov.w	r0, #0
 8000848:	bd70      	pop	{r4, r5, r6, pc}
 800084a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800084e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000852:	bd70      	pop	{r4, r5, r6, pc}

08000854 <__aeabi_ddiv>:
 8000854:	b570      	push	{r4, r5, r6, lr}
 8000856:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800085a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800085e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000862:	bf1d      	ittte	ne
 8000864:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000868:	ea94 0f0c 	teqne	r4, ip
 800086c:	ea95 0f0c 	teqne	r5, ip
 8000870:	f000 f8a7 	bleq	80009c2 <__aeabi_ddiv+0x16e>
 8000874:	eba4 0405 	sub.w	r4, r4, r5
 8000878:	ea81 0e03 	eor.w	lr, r1, r3
 800087c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000880:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000884:	f000 8088 	beq.w	8000998 <__aeabi_ddiv+0x144>
 8000888:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800088c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000890:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000894:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000898:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800089c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008a4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008ac:	429d      	cmp	r5, r3
 80008ae:	bf08      	it	eq
 80008b0:	4296      	cmpeq	r6, r2
 80008b2:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008b6:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008ba:	d202      	bcs.n	80008c2 <__aeabi_ddiv+0x6e>
 80008bc:	085b      	lsrs	r3, r3, #1
 80008be:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c2:	1ab6      	subs	r6, r6, r2
 80008c4:	eb65 0503 	sbc.w	r5, r5, r3
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008d2:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000930:	ea55 0e06 	orrs.w	lr, r5, r6
 8000934:	d018      	beq.n	8000968 <__aeabi_ddiv+0x114>
 8000936:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800093a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800093e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000942:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000946:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800094a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800094e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000952:	d1c0      	bne.n	80008d6 <__aeabi_ddiv+0x82>
 8000954:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000958:	d10b      	bne.n	8000972 <__aeabi_ddiv+0x11e>
 800095a:	ea41 0100 	orr.w	r1, r1, r0
 800095e:	f04f 0000 	mov.w	r0, #0
 8000962:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8000966:	e7b6      	b.n	80008d6 <__aeabi_ddiv+0x82>
 8000968:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 800096c:	bf04      	itt	eq
 800096e:	4301      	orreq	r1, r0
 8000970:	2000      	moveq	r0, #0
 8000972:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000976:	bf88      	it	hi
 8000978:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800097c:	f63f aeaf 	bhi.w	80006de <__aeabi_dmul+0xde>
 8000980:	ebb5 0c03 	subs.w	ip, r5, r3
 8000984:	bf04      	itt	eq
 8000986:	ebb6 0c02 	subseq.w	ip, r6, r2
 800098a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800098e:	f150 0000 	adcs.w	r0, r0, #0
 8000992:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000996:	bd70      	pop	{r4, r5, r6, pc}
 8000998:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800099c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009a4:	bfc2      	ittt	gt
 80009a6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009aa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	popgt	{r4, r5, r6, pc}
 80009b0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009b4:	f04f 0e00 	mov.w	lr, #0
 80009b8:	3c01      	subs	r4, #1
 80009ba:	e690      	b.n	80006de <__aeabi_dmul+0xde>
 80009bc:	ea45 0e06 	orr.w	lr, r5, r6
 80009c0:	e68d      	b.n	80006de <__aeabi_dmul+0xde>
 80009c2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009c6:	ea94 0f0c 	teq	r4, ip
 80009ca:	bf08      	it	eq
 80009cc:	ea95 0f0c 	teqeq	r5, ip
 80009d0:	f43f af3b 	beq.w	800084a <__aeabi_dmul+0x24a>
 80009d4:	ea94 0f0c 	teq	r4, ip
 80009d8:	d10a      	bne.n	80009f0 <__aeabi_ddiv+0x19c>
 80009da:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009de:	f47f af34 	bne.w	800084a <__aeabi_dmul+0x24a>
 80009e2:	ea95 0f0c 	teq	r5, ip
 80009e6:	f47f af25 	bne.w	8000834 <__aeabi_dmul+0x234>
 80009ea:	4610      	mov	r0, r2
 80009ec:	4619      	mov	r1, r3
 80009ee:	e72c      	b.n	800084a <__aeabi_dmul+0x24a>
 80009f0:	ea95 0f0c 	teq	r5, ip
 80009f4:	d106      	bne.n	8000a04 <__aeabi_ddiv+0x1b0>
 80009f6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009fa:	f43f aefd 	beq.w	80007f8 <__aeabi_dmul+0x1f8>
 80009fe:	4610      	mov	r0, r2
 8000a00:	4619      	mov	r1, r3
 8000a02:	e722      	b.n	800084a <__aeabi_dmul+0x24a>
 8000a04:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a08:	bf18      	it	ne
 8000a0a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a0e:	f47f aec5 	bne.w	800079c <__aeabi_dmul+0x19c>
 8000a12:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a16:	f47f af0d 	bne.w	8000834 <__aeabi_dmul+0x234>
 8000a1a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a1e:	f47f aeeb 	bne.w	80007f8 <__aeabi_dmul+0x1f8>
 8000a22:	e712      	b.n	800084a <__aeabi_dmul+0x24a>

08000a24 <__gedf2>:
 8000a24:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a28:	e006      	b.n	8000a38 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__ledf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	e002      	b.n	8000a38 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__cmpdf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a44:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a48:	bf18      	it	ne
 8000a4a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a4e:	d01b      	beq.n	8000a88 <__cmpdf2+0x54>
 8000a50:	b001      	add	sp, #4
 8000a52:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a56:	bf0c      	ite	eq
 8000a58:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a5c:	ea91 0f03 	teqne	r1, r3
 8000a60:	bf02      	ittt	eq
 8000a62:	ea90 0f02 	teqeq	r0, r2
 8000a66:	2000      	moveq	r0, #0
 8000a68:	4770      	bxeq	lr
 8000a6a:	f110 0f00 	cmn.w	r0, #0
 8000a6e:	ea91 0f03 	teq	r1, r3
 8000a72:	bf58      	it	pl
 8000a74:	4299      	cmppl	r1, r3
 8000a76:	bf08      	it	eq
 8000a78:	4290      	cmpeq	r0, r2
 8000a7a:	bf2c      	ite	cs
 8000a7c:	17d8      	asrcs	r0, r3, #31
 8000a7e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a82:	f040 0001 	orr.w	r0, r0, #1
 8000a86:	4770      	bx	lr
 8000a88:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a8c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a90:	d102      	bne.n	8000a98 <__cmpdf2+0x64>
 8000a92:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a96:	d107      	bne.n	8000aa8 <__cmpdf2+0x74>
 8000a98:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a9c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa0:	d1d6      	bne.n	8000a50 <__cmpdf2+0x1c>
 8000aa2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aa6:	d0d3      	beq.n	8000a50 <__cmpdf2+0x1c>
 8000aa8:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aac:	4770      	bx	lr
 8000aae:	bf00      	nop

08000ab0 <__aeabi_cdrcmple>:
 8000ab0:	4684      	mov	ip, r0
 8000ab2:	4610      	mov	r0, r2
 8000ab4:	4662      	mov	r2, ip
 8000ab6:	468c      	mov	ip, r1
 8000ab8:	4619      	mov	r1, r3
 8000aba:	4663      	mov	r3, ip
 8000abc:	e000      	b.n	8000ac0 <__aeabi_cdcmpeq>
 8000abe:	bf00      	nop

08000ac0 <__aeabi_cdcmpeq>:
 8000ac0:	b501      	push	{r0, lr}
 8000ac2:	f7ff ffb7 	bl	8000a34 <__cmpdf2>
 8000ac6:	2800      	cmp	r0, #0
 8000ac8:	bf48      	it	mi
 8000aca:	f110 0f00 	cmnmi.w	r0, #0
 8000ace:	bd01      	pop	{r0, pc}

08000ad0 <__aeabi_dcmpeq>:
 8000ad0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad4:	f7ff fff4 	bl	8000ac0 <__aeabi_cdcmpeq>
 8000ad8:	bf0c      	ite	eq
 8000ada:	2001      	moveq	r0, #1
 8000adc:	2000      	movne	r0, #0
 8000ade:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae2:	bf00      	nop

08000ae4 <__aeabi_dcmplt>:
 8000ae4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae8:	f7ff ffea 	bl	8000ac0 <__aeabi_cdcmpeq>
 8000aec:	bf34      	ite	cc
 8000aee:	2001      	movcc	r0, #1
 8000af0:	2000      	movcs	r0, #0
 8000af2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af6:	bf00      	nop

08000af8 <__aeabi_dcmple>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff ffe0 	bl	8000ac0 <__aeabi_cdcmpeq>
 8000b00:	bf94      	ite	ls
 8000b02:	2001      	movls	r0, #1
 8000b04:	2000      	movhi	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmpge>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffce 	bl	8000ab0 <__aeabi_cdrcmple>
 8000b14:	bf94      	ite	ls
 8000b16:	2001      	movls	r0, #1
 8000b18:	2000      	movhi	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmpgt>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffc4 	bl	8000ab0 <__aeabi_cdrcmple>
 8000b28:	bf34      	ite	cc
 8000b2a:	2001      	movcc	r0, #1
 8000b2c:	2000      	movcs	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpun>:
 8000b34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b3c:	d102      	bne.n	8000b44 <__aeabi_dcmpun+0x10>
 8000b3e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b42:	d10a      	bne.n	8000b5a <__aeabi_dcmpun+0x26>
 8000b44:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b4c:	d102      	bne.n	8000b54 <__aeabi_dcmpun+0x20>
 8000b4e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b52:	d102      	bne.n	8000b5a <__aeabi_dcmpun+0x26>
 8000b54:	f04f 0000 	mov.w	r0, #0
 8000b58:	4770      	bx	lr
 8000b5a:	f04f 0001 	mov.w	r0, #1
 8000b5e:	4770      	bx	lr

08000b60 <__aeabi_d2iz>:
 8000b60:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b64:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b68:	d215      	bcs.n	8000b96 <__aeabi_d2iz+0x36>
 8000b6a:	d511      	bpl.n	8000b90 <__aeabi_d2iz+0x30>
 8000b6c:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b70:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b74:	d912      	bls.n	8000b9c <__aeabi_d2iz+0x3c>
 8000b76:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b7a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b7e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b82:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b86:	fa23 f002 	lsr.w	r0, r3, r2
 8000b8a:	bf18      	it	ne
 8000b8c:	4240      	negne	r0, r0
 8000b8e:	4770      	bx	lr
 8000b90:	f04f 0000 	mov.w	r0, #0
 8000b94:	4770      	bx	lr
 8000b96:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b9a:	d105      	bne.n	8000ba8 <__aeabi_d2iz+0x48>
 8000b9c:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba0:	bf08      	it	eq
 8000ba2:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	bf00      	nop

08000bb0 <__aeabi_d2f>:
 8000bb0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bb4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bb8:	bf24      	itt	cs
 8000bba:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bbe:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bc2:	d90d      	bls.n	8000be0 <__aeabi_d2f+0x30>
 8000bc4:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bc8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bcc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd0:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bd4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd8:	bf08      	it	eq
 8000bda:	f020 0001 	biceq.w	r0, r0, #1
 8000bde:	4770      	bx	lr
 8000be0:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000be4:	d121      	bne.n	8000c2a <__aeabi_d2f+0x7a>
 8000be6:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000bea:	bfbc      	itt	lt
 8000bec:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000bf0:	4770      	bxlt	lr
 8000bf2:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bf6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bfa:	f1c2 0218 	rsb	r2, r2, #24
 8000bfe:	f1c2 0c20 	rsb	ip, r2, #32
 8000c02:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c06:	fa20 f002 	lsr.w	r0, r0, r2
 8000c0a:	bf18      	it	ne
 8000c0c:	f040 0001 	orrne.w	r0, r0, #1
 8000c10:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c14:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c18:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c1c:	ea40 000c 	orr.w	r0, r0, ip
 8000c20:	fa23 f302 	lsr.w	r3, r3, r2
 8000c24:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c28:	e7cc      	b.n	8000bc4 <__aeabi_d2f+0x14>
 8000c2a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c2e:	d107      	bne.n	8000c40 <__aeabi_d2f+0x90>
 8000c30:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c34:	bf1e      	ittt	ne
 8000c36:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c3a:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c3e:	4770      	bxne	lr
 8000c40:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c44:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c48:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c4c:	4770      	bx	lr
 8000c4e:	bf00      	nop

08000c50 <__aeabi_uldivmod>:
 8000c50:	b953      	cbnz	r3, 8000c68 <__aeabi_uldivmod+0x18>
 8000c52:	b94a      	cbnz	r2, 8000c68 <__aeabi_uldivmod+0x18>
 8000c54:	2900      	cmp	r1, #0
 8000c56:	bf08      	it	eq
 8000c58:	2800      	cmpeq	r0, #0
 8000c5a:	bf1c      	itt	ne
 8000c5c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000c60:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000c64:	f000 b9b0 	b.w	8000fc8 <__aeabi_idiv0>
 8000c68:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c6c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c70:	f000 f806 	bl	8000c80 <__udivmoddi4>
 8000c74:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c78:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c7c:	b004      	add	sp, #16
 8000c7e:	4770      	bx	lr

08000c80 <__udivmoddi4>:
 8000c80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000c84:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8000c86:	4688      	mov	r8, r1
 8000c88:	4604      	mov	r4, r0
 8000c8a:	468e      	mov	lr, r1
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d14a      	bne.n	8000d26 <__udivmoddi4+0xa6>
 8000c90:	428a      	cmp	r2, r1
 8000c92:	4617      	mov	r7, r2
 8000c94:	d95f      	bls.n	8000d56 <__udivmoddi4+0xd6>
 8000c96:	fab2 f682 	clz	r6, r2
 8000c9a:	b14e      	cbz	r6, 8000cb0 <__udivmoddi4+0x30>
 8000c9c:	f1c6 0320 	rsb	r3, r6, #32
 8000ca0:	fa01 fe06 	lsl.w	lr, r1, r6
 8000ca4:	40b7      	lsls	r7, r6
 8000ca6:	40b4      	lsls	r4, r6
 8000ca8:	fa20 f303 	lsr.w	r3, r0, r3
 8000cac:	ea43 0e0e 	orr.w	lr, r3, lr
 8000cb0:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000cb4:	fa1f fc87 	uxth.w	ip, r7
 8000cb8:	0c23      	lsrs	r3, r4, #16
 8000cba:	fbbe f1f8 	udiv	r1, lr, r8
 8000cbe:	fb08 ee11 	mls	lr, r8, r1, lr
 8000cc2:	fb01 f20c 	mul.w	r2, r1, ip
 8000cc6:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 8000cca:	429a      	cmp	r2, r3
 8000ccc:	d907      	bls.n	8000cde <__udivmoddi4+0x5e>
 8000cce:	18fb      	adds	r3, r7, r3
 8000cd0:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000cd4:	d202      	bcs.n	8000cdc <__udivmoddi4+0x5c>
 8000cd6:	429a      	cmp	r2, r3
 8000cd8:	f200 8154 	bhi.w	8000f84 <__udivmoddi4+0x304>
 8000cdc:	4601      	mov	r1, r0
 8000cde:	1a9b      	subs	r3, r3, r2
 8000ce0:	b2a2      	uxth	r2, r4
 8000ce2:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ce6:	fb08 3310 	mls	r3, r8, r0, r3
 8000cea:	fb00 fc0c 	mul.w	ip, r0, ip
 8000cee:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8000cf2:	4594      	cmp	ip, r2
 8000cf4:	d90b      	bls.n	8000d0e <__udivmoddi4+0x8e>
 8000cf6:	18ba      	adds	r2, r7, r2
 8000cf8:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8000cfc:	bf2c      	ite	cs
 8000cfe:	2401      	movcs	r4, #1
 8000d00:	2400      	movcc	r4, #0
 8000d02:	4594      	cmp	ip, r2
 8000d04:	d902      	bls.n	8000d0c <__udivmoddi4+0x8c>
 8000d06:	2c00      	cmp	r4, #0
 8000d08:	f000 813f 	beq.w	8000f8a <__udivmoddi4+0x30a>
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d12:	eba2 020c 	sub.w	r2, r2, ip
 8000d16:	2100      	movs	r1, #0
 8000d18:	b11d      	cbz	r5, 8000d22 <__udivmoddi4+0xa2>
 8000d1a:	40f2      	lsrs	r2, r6
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	e9c5 2300 	strd	r2, r3, [r5]
 8000d22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000d26:	428b      	cmp	r3, r1
 8000d28:	d905      	bls.n	8000d36 <__udivmoddi4+0xb6>
 8000d2a:	b10d      	cbz	r5, 8000d30 <__udivmoddi4+0xb0>
 8000d2c:	e9c5 0100 	strd	r0, r1, [r5]
 8000d30:	2100      	movs	r1, #0
 8000d32:	4608      	mov	r0, r1
 8000d34:	e7f5      	b.n	8000d22 <__udivmoddi4+0xa2>
 8000d36:	fab3 f183 	clz	r1, r3
 8000d3a:	2900      	cmp	r1, #0
 8000d3c:	d14e      	bne.n	8000ddc <__udivmoddi4+0x15c>
 8000d3e:	4543      	cmp	r3, r8
 8000d40:	f0c0 8112 	bcc.w	8000f68 <__udivmoddi4+0x2e8>
 8000d44:	4282      	cmp	r2, r0
 8000d46:	f240 810f 	bls.w	8000f68 <__udivmoddi4+0x2e8>
 8000d4a:	4608      	mov	r0, r1
 8000d4c:	2d00      	cmp	r5, #0
 8000d4e:	d0e8      	beq.n	8000d22 <__udivmoddi4+0xa2>
 8000d50:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d54:	e7e5      	b.n	8000d22 <__udivmoddi4+0xa2>
 8000d56:	2a00      	cmp	r2, #0
 8000d58:	f000 80ac 	beq.w	8000eb4 <__udivmoddi4+0x234>
 8000d5c:	fab2 f682 	clz	r6, r2
 8000d60:	2e00      	cmp	r6, #0
 8000d62:	f040 80bb 	bne.w	8000edc <__udivmoddi4+0x25c>
 8000d66:	1a8b      	subs	r3, r1, r2
 8000d68:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8000d6c:	b2bc      	uxth	r4, r7
 8000d6e:	2101      	movs	r1, #1
 8000d70:	0c02      	lsrs	r2, r0, #16
 8000d72:	b280      	uxth	r0, r0
 8000d74:	fbb3 fcfe 	udiv	ip, r3, lr
 8000d78:	fb0e 331c 	mls	r3, lr, ip, r3
 8000d7c:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
 8000d80:	fb04 f20c 	mul.w	r2, r4, ip
 8000d84:	429a      	cmp	r2, r3
 8000d86:	d90e      	bls.n	8000da6 <__udivmoddi4+0x126>
 8000d88:	18fb      	adds	r3, r7, r3
 8000d8a:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 8000d8e:	bf2c      	ite	cs
 8000d90:	f04f 0901 	movcs.w	r9, #1
 8000d94:	f04f 0900 	movcc.w	r9, #0
 8000d98:	429a      	cmp	r2, r3
 8000d9a:	d903      	bls.n	8000da4 <__udivmoddi4+0x124>
 8000d9c:	f1b9 0f00 	cmp.w	r9, #0
 8000da0:	f000 80ec 	beq.w	8000f7c <__udivmoddi4+0x2fc>
 8000da4:	46c4      	mov	ip, r8
 8000da6:	1a9b      	subs	r3, r3, r2
 8000da8:	fbb3 f8fe 	udiv	r8, r3, lr
 8000dac:	fb0e 3318 	mls	r3, lr, r8, r3
 8000db0:	fb04 f408 	mul.w	r4, r4, r8
 8000db4:	ea40 4203 	orr.w	r2, r0, r3, lsl #16
 8000db8:	4294      	cmp	r4, r2
 8000dba:	d90b      	bls.n	8000dd4 <__udivmoddi4+0x154>
 8000dbc:	18ba      	adds	r2, r7, r2
 8000dbe:	f108 33ff 	add.w	r3, r8, #4294967295	@ 0xffffffff
 8000dc2:	bf2c      	ite	cs
 8000dc4:	2001      	movcs	r0, #1
 8000dc6:	2000      	movcc	r0, #0
 8000dc8:	4294      	cmp	r4, r2
 8000dca:	d902      	bls.n	8000dd2 <__udivmoddi4+0x152>
 8000dcc:	2800      	cmp	r0, #0
 8000dce:	f000 80d1 	beq.w	8000f74 <__udivmoddi4+0x2f4>
 8000dd2:	4698      	mov	r8, r3
 8000dd4:	1b12      	subs	r2, r2, r4
 8000dd6:	ea48 400c 	orr.w	r0, r8, ip, lsl #16
 8000dda:	e79d      	b.n	8000d18 <__udivmoddi4+0x98>
 8000ddc:	f1c1 0620 	rsb	r6, r1, #32
 8000de0:	408b      	lsls	r3, r1
 8000de2:	fa08 f401 	lsl.w	r4, r8, r1
 8000de6:	fa00 f901 	lsl.w	r9, r0, r1
 8000dea:	fa22 f706 	lsr.w	r7, r2, r6
 8000dee:	fa28 f806 	lsr.w	r8, r8, r6
 8000df2:	408a      	lsls	r2, r1
 8000df4:	431f      	orrs	r7, r3
 8000df6:	fa20 f306 	lsr.w	r3, r0, r6
 8000dfa:	0c38      	lsrs	r0, r7, #16
 8000dfc:	4323      	orrs	r3, r4
 8000dfe:	fa1f fc87 	uxth.w	ip, r7
 8000e02:	0c1c      	lsrs	r4, r3, #16
 8000e04:	fbb8 fef0 	udiv	lr, r8, r0
 8000e08:	fb00 881e 	mls	r8, r0, lr, r8
 8000e0c:	ea44 4408 	orr.w	r4, r4, r8, lsl #16
 8000e10:	fb0e f80c 	mul.w	r8, lr, ip
 8000e14:	45a0      	cmp	r8, r4
 8000e16:	d90e      	bls.n	8000e36 <__udivmoddi4+0x1b6>
 8000e18:	193c      	adds	r4, r7, r4
 8000e1a:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000e1e:	bf2c      	ite	cs
 8000e20:	f04f 0b01 	movcs.w	fp, #1
 8000e24:	f04f 0b00 	movcc.w	fp, #0
 8000e28:	45a0      	cmp	r8, r4
 8000e2a:	d903      	bls.n	8000e34 <__udivmoddi4+0x1b4>
 8000e2c:	f1bb 0f00 	cmp.w	fp, #0
 8000e30:	f000 80b8 	beq.w	8000fa4 <__udivmoddi4+0x324>
 8000e34:	46d6      	mov	lr, sl
 8000e36:	eba4 0408 	sub.w	r4, r4, r8
 8000e3a:	fa1f f883 	uxth.w	r8, r3
 8000e3e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e42:	fb00 4413 	mls	r4, r0, r3, r4
 8000e46:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e4a:	ea48 4404 	orr.w	r4, r8, r4, lsl #16
 8000e4e:	45a4      	cmp	ip, r4
 8000e50:	d90e      	bls.n	8000e70 <__udivmoddi4+0x1f0>
 8000e52:	193c      	adds	r4, r7, r4
 8000e54:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000e58:	bf2c      	ite	cs
 8000e5a:	f04f 0801 	movcs.w	r8, #1
 8000e5e:	f04f 0800 	movcc.w	r8, #0
 8000e62:	45a4      	cmp	ip, r4
 8000e64:	d903      	bls.n	8000e6e <__udivmoddi4+0x1ee>
 8000e66:	f1b8 0f00 	cmp.w	r8, #0
 8000e6a:	f000 809f 	beq.w	8000fac <__udivmoddi4+0x32c>
 8000e6e:	4603      	mov	r3, r0
 8000e70:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e74:	eba4 040c 	sub.w	r4, r4, ip
 8000e78:	fba0 ec02 	umull	lr, ip, r0, r2
 8000e7c:	4564      	cmp	r4, ip
 8000e7e:	4673      	mov	r3, lr
 8000e80:	46e0      	mov	r8, ip
 8000e82:	d302      	bcc.n	8000e8a <__udivmoddi4+0x20a>
 8000e84:	d107      	bne.n	8000e96 <__udivmoddi4+0x216>
 8000e86:	45f1      	cmp	r9, lr
 8000e88:	d205      	bcs.n	8000e96 <__udivmoddi4+0x216>
 8000e8a:	ebbe 0302 	subs.w	r3, lr, r2
 8000e8e:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000e92:	3801      	subs	r0, #1
 8000e94:	46e0      	mov	r8, ip
 8000e96:	b15d      	cbz	r5, 8000eb0 <__udivmoddi4+0x230>
 8000e98:	ebb9 0203 	subs.w	r2, r9, r3
 8000e9c:	eb64 0408 	sbc.w	r4, r4, r8
 8000ea0:	fa04 f606 	lsl.w	r6, r4, r6
 8000ea4:	fa22 f301 	lsr.w	r3, r2, r1
 8000ea8:	40cc      	lsrs	r4, r1
 8000eaa:	431e      	orrs	r6, r3
 8000eac:	e9c5 6400 	strd	r6, r4, [r5]
 8000eb0:	2100      	movs	r1, #0
 8000eb2:	e736      	b.n	8000d22 <__udivmoddi4+0xa2>
 8000eb4:	fbb1 fcf2 	udiv	ip, r1, r2
 8000eb8:	0c01      	lsrs	r1, r0, #16
 8000eba:	4614      	mov	r4, r2
 8000ebc:	b280      	uxth	r0, r0
 8000ebe:	4696      	mov	lr, r2
 8000ec0:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
 8000ec4:	2620      	movs	r6, #32
 8000ec6:	4690      	mov	r8, r2
 8000ec8:	ea40 4301 	orr.w	r3, r0, r1, lsl #16
 8000ecc:	4610      	mov	r0, r2
 8000ece:	fbb1 f1f2 	udiv	r1, r1, r2
 8000ed2:	eba3 0308 	sub.w	r3, r3, r8
 8000ed6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000eda:	e74b      	b.n	8000d74 <__udivmoddi4+0xf4>
 8000edc:	40b7      	lsls	r7, r6
 8000ede:	f1c6 0320 	rsb	r3, r6, #32
 8000ee2:	fa01 f206 	lsl.w	r2, r1, r6
 8000ee6:	fa21 f803 	lsr.w	r8, r1, r3
 8000eea:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000eee:	fa20 f303 	lsr.w	r3, r0, r3
 8000ef2:	b2bc      	uxth	r4, r7
 8000ef4:	40b0      	lsls	r0, r6
 8000ef6:	4313      	orrs	r3, r2
 8000ef8:	0c02      	lsrs	r2, r0, #16
 8000efa:	0c19      	lsrs	r1, r3, #16
 8000efc:	b280      	uxth	r0, r0
 8000efe:	fbb8 f9fe 	udiv	r9, r8, lr
 8000f02:	fb0e 8819 	mls	r8, lr, r9, r8
 8000f06:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
 8000f0a:	fb09 f804 	mul.w	r8, r9, r4
 8000f0e:	4588      	cmp	r8, r1
 8000f10:	d951      	bls.n	8000fb6 <__udivmoddi4+0x336>
 8000f12:	1879      	adds	r1, r7, r1
 8000f14:	f109 3cff 	add.w	ip, r9, #4294967295	@ 0xffffffff
 8000f18:	bf2c      	ite	cs
 8000f1a:	f04f 0a01 	movcs.w	sl, #1
 8000f1e:	f04f 0a00 	movcc.w	sl, #0
 8000f22:	4588      	cmp	r8, r1
 8000f24:	d902      	bls.n	8000f2c <__udivmoddi4+0x2ac>
 8000f26:	f1ba 0f00 	cmp.w	sl, #0
 8000f2a:	d031      	beq.n	8000f90 <__udivmoddi4+0x310>
 8000f2c:	eba1 0108 	sub.w	r1, r1, r8
 8000f30:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f34:	fb09 f804 	mul.w	r8, r9, r4
 8000f38:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f3c:	b29b      	uxth	r3, r3
 8000f3e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f42:	4543      	cmp	r3, r8
 8000f44:	d235      	bcs.n	8000fb2 <__udivmoddi4+0x332>
 8000f46:	18fb      	adds	r3, r7, r3
 8000f48:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000f4c:	bf2c      	ite	cs
 8000f4e:	f04f 0a01 	movcs.w	sl, #1
 8000f52:	f04f 0a00 	movcc.w	sl, #0
 8000f56:	4543      	cmp	r3, r8
 8000f58:	d2bb      	bcs.n	8000ed2 <__udivmoddi4+0x252>
 8000f5a:	f1ba 0f00 	cmp.w	sl, #0
 8000f5e:	d1b8      	bne.n	8000ed2 <__udivmoddi4+0x252>
 8000f60:	f1a9 0102 	sub.w	r1, r9, #2
 8000f64:	443b      	add	r3, r7
 8000f66:	e7b4      	b.n	8000ed2 <__udivmoddi4+0x252>
 8000f68:	1a84      	subs	r4, r0, r2
 8000f6a:	eb68 0203 	sbc.w	r2, r8, r3
 8000f6e:	2001      	movs	r0, #1
 8000f70:	4696      	mov	lr, r2
 8000f72:	e6eb      	b.n	8000d4c <__udivmoddi4+0xcc>
 8000f74:	443a      	add	r2, r7
 8000f76:	f1a8 0802 	sub.w	r8, r8, #2
 8000f7a:	e72b      	b.n	8000dd4 <__udivmoddi4+0x154>
 8000f7c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f80:	443b      	add	r3, r7
 8000f82:	e710      	b.n	8000da6 <__udivmoddi4+0x126>
 8000f84:	3902      	subs	r1, #2
 8000f86:	443b      	add	r3, r7
 8000f88:	e6a9      	b.n	8000cde <__udivmoddi4+0x5e>
 8000f8a:	443a      	add	r2, r7
 8000f8c:	3802      	subs	r0, #2
 8000f8e:	e6be      	b.n	8000d0e <__udivmoddi4+0x8e>
 8000f90:	eba7 0808 	sub.w	r8, r7, r8
 8000f94:	f1a9 0c02 	sub.w	ip, r9, #2
 8000f98:	4441      	add	r1, r8
 8000f9a:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f9e:	fb09 f804 	mul.w	r8, r9, r4
 8000fa2:	e7c9      	b.n	8000f38 <__udivmoddi4+0x2b8>
 8000fa4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000fa8:	443c      	add	r4, r7
 8000faa:	e744      	b.n	8000e36 <__udivmoddi4+0x1b6>
 8000fac:	3b02      	subs	r3, #2
 8000fae:	443c      	add	r4, r7
 8000fb0:	e75e      	b.n	8000e70 <__udivmoddi4+0x1f0>
 8000fb2:	4649      	mov	r1, r9
 8000fb4:	e78d      	b.n	8000ed2 <__udivmoddi4+0x252>
 8000fb6:	eba1 0108 	sub.w	r1, r1, r8
 8000fba:	46cc      	mov	ip, r9
 8000fbc:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fc0:	fb09 f804 	mul.w	r8, r9, r4
 8000fc4:	e7b8      	b.n	8000f38 <__udivmoddi4+0x2b8>
 8000fc6:	bf00      	nop

08000fc8 <__aeabi_idiv0>:
 8000fc8:	4770      	bx	lr
 8000fca:	bf00      	nop

08000fcc <bme69x_init>:
/* @brief This API reads the chip-id of the sensor which is the first step to
* verify the sensor and also calibrates the sensor
* As this API is the entry point, call this API before using other APIs.
*/
int8_t bme69x_init(struct bme69x_dev *dev)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b084      	sub	sp, #16
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    (void) bme69x_soft_reset(dev);
 8000fd4:	6878      	ldr	r0, [r7, #4]
 8000fd6:	f000 f8fa 	bl	80011ce <bme69x_soft_reset>

    rslt = bme69x_get_regs(BME69X_REG_CHIP_ID, &dev->chip_id, 1, dev);
 8000fda:	6879      	ldr	r1, [r7, #4]
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	2201      	movs	r2, #1
 8000fe0:	20d0      	movs	r0, #208	@ 0xd0
 8000fe2:	f000 f8b0 	bl	8001146 <bme69x_get_regs>
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	73fb      	strb	r3, [r7, #15]

    if (rslt == BME69X_OK)
 8000fea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d114      	bne.n	800101c <bme69x_init+0x50>
    {
        if (dev->chip_id == BME69X_CHIP_ID)
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	781b      	ldrb	r3, [r3, #0]
 8000ff6:	2b61      	cmp	r3, #97	@ 0x61
 8000ff8:	d10e      	bne.n	8001018 <bme69x_init+0x4c>
        {
            /* Read Variant ID */
            rslt = read_variant_id(dev);
 8000ffa:	6878      	ldr	r0, [r7, #4]
 8000ffc:	f001 fff5 	bl	8002fea <read_variant_id>
 8001000:	4603      	mov	r3, r0
 8001002:	73fb      	strb	r3, [r7, #15]

            if (rslt == BME69X_OK)
 8001004:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001008:	2b00      	cmp	r3, #0
 800100a:	d107      	bne.n	800101c <bme69x_init+0x50>
            {
                /* Get the Calibration data */
                rslt = get_calib_data(dev);
 800100c:	6878      	ldr	r0, [r7, #4]
 800100e:	f001 fee5 	bl	8002ddc <get_calib_data>
 8001012:	4603      	mov	r3, r0
 8001014:	73fb      	strb	r3, [r7, #15]
 8001016:	e001      	b.n	800101c <bme69x_init+0x50>
            }
        }
        else
        {
            rslt = BME69X_E_DEV_NOT_FOUND;
 8001018:	23fd      	movs	r3, #253	@ 0xfd
 800101a:	73fb      	strb	r3, [r7, #15]
        }
    }

    return rslt;
 800101c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001020:	4618      	mov	r0, r3
 8001022:	3710      	adds	r7, #16
 8001024:	46bd      	mov	sp, r7
 8001026:	bd80      	pop	{r7, pc}

08001028 <bme69x_set_regs>:

/*
 * @brief This API writes the given data to the register address of the sensor
 */
int8_t bme69x_set_regs(const uint8_t *reg_addr, const uint8_t *reg_data, uint32_t len, struct bme69x_dev *dev)
{
 8001028:	b5b0      	push	{r4, r5, r7, lr}
 800102a:	b08a      	sub	sp, #40	@ 0x28
 800102c:	af00      	add	r7, sp, #0
 800102e:	60f8      	str	r0, [r7, #12]
 8001030:	60b9      	str	r1, [r7, #8]
 8001032:	607a      	str	r2, [r7, #4]
 8001034:	603b      	str	r3, [r7, #0]
    int8_t rslt;

    /* Length of the temporary buffer is 2*(length of register)*/
    uint8_t tmp_buff[BME69X_LEN_INTERLEAVE_BUFF] = { 0 };
 8001036:	f107 0310 	add.w	r3, r7, #16
 800103a:	2200      	movs	r2, #0
 800103c:	601a      	str	r2, [r3, #0]
 800103e:	605a      	str	r2, [r3, #4]
 8001040:	609a      	str	r2, [r3, #8]
 8001042:	60da      	str	r2, [r3, #12]
 8001044:	611a      	str	r2, [r3, #16]
    uint16_t index;

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 8001046:	6838      	ldr	r0, [r7, #0]
 8001048:	f001 fca6 	bl	8002998 <null_ptr_check>
 800104c:	4603      	mov	r3, r0
 800104e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if ((rslt == BME69X_OK) && reg_addr && reg_data)
 8001052:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8001056:	2b00      	cmp	r3, #0
 8001058:	d16c      	bne.n	8001134 <bme69x_set_regs+0x10c>
 800105a:	68fb      	ldr	r3, [r7, #12]
 800105c:	2b00      	cmp	r3, #0
 800105e:	d069      	beq.n	8001134 <bme69x_set_regs+0x10c>
 8001060:	68bb      	ldr	r3, [r7, #8]
 8001062:	2b00      	cmp	r3, #0
 8001064:	d066      	beq.n	8001134 <bme69x_set_regs+0x10c>
    {
        if ((len > 0) && (len <= (BME69X_LEN_INTERLEAVE_BUFF / 2)))
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	2b00      	cmp	r3, #0
 800106a:	d05d      	beq.n	8001128 <bme69x_set_regs+0x100>
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	2b0a      	cmp	r3, #10
 8001070:	d85a      	bhi.n	8001128 <bme69x_set_regs+0x100>
        {
            /* Interleave the 2 arrays */
            for (index = 0; index < len; index++)
 8001072:	2300      	movs	r3, #0
 8001074:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8001076:	e034      	b.n	80010e2 <bme69x_set_regs+0xba>
            {
                if (dev->intf == BME69X_SPI_INTF)
 8001078:	683b      	ldr	r3, [r7, #0]
 800107a:	7b1b      	ldrb	r3, [r3, #12]
 800107c:	2b00      	cmp	r3, #0
 800107e:	d118      	bne.n	80010b2 <bme69x_set_regs+0x8a>
                {
                    /* Set the memory page */
                    rslt = set_mem_page(reg_addr[index], dev);
 8001080:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001082:	68fa      	ldr	r2, [r7, #12]
 8001084:	4413      	add	r3, r2
 8001086:	781b      	ldrb	r3, [r3, #0]
 8001088:	6839      	ldr	r1, [r7, #0]
 800108a:	4618      	mov	r0, r3
 800108c:	f001 fbc3 	bl	8002816 <set_mem_page>
 8001090:	4603      	mov	r3, r0
 8001092:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
                    tmp_buff[(2 * index)] = reg_addr[index] & BME69X_SPI_WR_MSK;
 8001096:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001098:	68fa      	ldr	r2, [r7, #12]
 800109a:	4413      	add	r3, r2
 800109c:	781a      	ldrb	r2, [r3, #0]
 800109e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80010a0:	005b      	lsls	r3, r3, #1
 80010a2:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80010a6:	b2d2      	uxtb	r2, r2
 80010a8:	3328      	adds	r3, #40	@ 0x28
 80010aa:	443b      	add	r3, r7
 80010ac:	f803 2c18 	strb.w	r2, [r3, #-24]
 80010b0:	e009      	b.n	80010c6 <bme69x_set_regs+0x9e>
                }
                else
                {
                    tmp_buff[(2 * index)] = reg_addr[index];
 80010b2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80010b4:	68fa      	ldr	r2, [r7, #12]
 80010b6:	441a      	add	r2, r3
 80010b8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80010ba:	005b      	lsls	r3, r3, #1
 80010bc:	7812      	ldrb	r2, [r2, #0]
 80010be:	3328      	adds	r3, #40	@ 0x28
 80010c0:	443b      	add	r3, r7
 80010c2:	f803 2c18 	strb.w	r2, [r3, #-24]
                }

                tmp_buff[(2 * index) + 1] = reg_data[index];
 80010c6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80010c8:	68ba      	ldr	r2, [r7, #8]
 80010ca:	441a      	add	r2, r3
 80010cc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80010ce:	005b      	lsls	r3, r3, #1
 80010d0:	3301      	adds	r3, #1
 80010d2:	7812      	ldrb	r2, [r2, #0]
 80010d4:	3328      	adds	r3, #40	@ 0x28
 80010d6:	443b      	add	r3, r7
 80010d8:	f803 2c18 	strb.w	r2, [r3, #-24]
            for (index = 0; index < len; index++)
 80010dc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80010de:	3301      	adds	r3, #1
 80010e0:	84bb      	strh	r3, [r7, #36]	@ 0x24
 80010e2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80010e4:	687a      	ldr	r2, [r7, #4]
 80010e6:	429a      	cmp	r2, r3
 80010e8:	d8c6      	bhi.n	8001078 <bme69x_set_regs+0x50>
            }

            /* Write the interleaved array */
            if (rslt == BME69X_OK)
 80010ea:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d11e      	bne.n	8001130 <bme69x_set_regs+0x108>
            {
                dev->intf_rslt = dev->write(tmp_buff[0], &tmp_buff[1], (2 * len) - 1, dev->intf_ptr);
 80010f2:	683b      	ldr	r3, [r7, #0]
 80010f4:	6c1c      	ldr	r4, [r3, #64]	@ 0x40
 80010f6:	7c38      	ldrb	r0, [r7, #16]
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	005b      	lsls	r3, r3, #1
 80010fc:	1e5a      	subs	r2, r3, #1
 80010fe:	683b      	ldr	r3, [r7, #0]
 8001100:	685d      	ldr	r5, [r3, #4]
 8001102:	f107 0310 	add.w	r3, r7, #16
 8001106:	1c59      	adds	r1, r3, #1
 8001108:	462b      	mov	r3, r5
 800110a:	47a0      	blx	r4
 800110c:	4603      	mov	r3, r0
 800110e:	461a      	mov	r2, r3
 8001110:	683b      	ldr	r3, [r7, #0]
 8001112:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
                if (dev->intf_rslt != 0)
 8001116:	683b      	ldr	r3, [r7, #0]
 8001118:	f993 3048 	ldrsb.w	r3, [r3, #72]	@ 0x48
 800111c:	2b00      	cmp	r3, #0
 800111e:	d007      	beq.n	8001130 <bme69x_set_regs+0x108>
                {
                    rslt = BME69X_E_COM_FAIL;
 8001120:	23fe      	movs	r3, #254	@ 0xfe
 8001122:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            if (rslt == BME69X_OK)
 8001126:	e003      	b.n	8001130 <bme69x_set_regs+0x108>
                }
            }
        }
        else
        {
            rslt = BME69X_E_INVALID_LENGTH;
 8001128:	23fc      	movs	r3, #252	@ 0xfc
 800112a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if ((len > 0) && (len <= (BME69X_LEN_INTERLEAVE_BUFF / 2)))
 800112e:	e004      	b.n	800113a <bme69x_set_regs+0x112>
            if (rslt == BME69X_OK)
 8001130:	bf00      	nop
        if ((len > 0) && (len <= (BME69X_LEN_INTERLEAVE_BUFF / 2)))
 8001132:	e002      	b.n	800113a <bme69x_set_regs+0x112>
        }
    }
    else
    {
        rslt = BME69X_E_NULL_PTR;
 8001134:	23ff      	movs	r3, #255	@ 0xff
 8001136:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    return rslt;
 800113a:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 800113e:	4618      	mov	r0, r3
 8001140:	3728      	adds	r7, #40	@ 0x28
 8001142:	46bd      	mov	sp, r7
 8001144:	bdb0      	pop	{r4, r5, r7, pc}

08001146 <bme69x_get_regs>:

/*
 * @brief This API reads the data from the given register address of sensor.
 */
int8_t bme69x_get_regs(uint8_t reg_addr, uint8_t *reg_data, uint32_t len, struct bme69x_dev *dev)
{
 8001146:	b590      	push	{r4, r7, lr}
 8001148:	b087      	sub	sp, #28
 800114a:	af00      	add	r7, sp, #0
 800114c:	60b9      	str	r1, [r7, #8]
 800114e:	607a      	str	r2, [r7, #4]
 8001150:	603b      	str	r3, [r7, #0]
 8001152:	4603      	mov	r3, r0
 8001154:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 8001156:	6838      	ldr	r0, [r7, #0]
 8001158:	f001 fc1e 	bl	8002998 <null_ptr_check>
 800115c:	4603      	mov	r3, r0
 800115e:	75fb      	strb	r3, [r7, #23]
    if ((rslt == BME69X_OK) && reg_data)
 8001160:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001164:	2b00      	cmp	r3, #0
 8001166:	d12a      	bne.n	80011be <bme69x_get_regs+0x78>
 8001168:	68bb      	ldr	r3, [r7, #8]
 800116a:	2b00      	cmp	r3, #0
 800116c:	d027      	beq.n	80011be <bme69x_get_regs+0x78>
    {
        if (dev->intf == BME69X_SPI_INTF)
 800116e:	683b      	ldr	r3, [r7, #0]
 8001170:	7b1b      	ldrb	r3, [r3, #12]
 8001172:	2b00      	cmp	r3, #0
 8001174:	d10e      	bne.n	8001194 <bme69x_get_regs+0x4e>
        {
            /* Set the memory page */
            rslt = set_mem_page(reg_addr, dev);
 8001176:	7bfb      	ldrb	r3, [r7, #15]
 8001178:	6839      	ldr	r1, [r7, #0]
 800117a:	4618      	mov	r0, r3
 800117c:	f001 fb4b 	bl	8002816 <set_mem_page>
 8001180:	4603      	mov	r3, r0
 8001182:	75fb      	strb	r3, [r7, #23]
            if (rslt == BME69X_OK)
 8001184:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001188:	2b00      	cmp	r3, #0
 800118a:	d103      	bne.n	8001194 <bme69x_get_regs+0x4e>
            {
                reg_addr = reg_addr | BME69X_SPI_RD_MSK;
 800118c:	7bfb      	ldrb	r3, [r7, #15]
 800118e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001192:	73fb      	strb	r3, [r7, #15]
            }
        }

        dev->intf_rslt = dev->read(reg_addr, reg_data, len, dev->intf_ptr);
 8001194:	683b      	ldr	r3, [r7, #0]
 8001196:	6bdc      	ldr	r4, [r3, #60]	@ 0x3c
 8001198:	683b      	ldr	r3, [r7, #0]
 800119a:	685b      	ldr	r3, [r3, #4]
 800119c:	7bf8      	ldrb	r0, [r7, #15]
 800119e:	687a      	ldr	r2, [r7, #4]
 80011a0:	68b9      	ldr	r1, [r7, #8]
 80011a2:	47a0      	blx	r4
 80011a4:	4603      	mov	r3, r0
 80011a6:	461a      	mov	r2, r3
 80011a8:	683b      	ldr	r3, [r7, #0]
 80011aa:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
        if (dev->intf_rslt != 0)
 80011ae:	683b      	ldr	r3, [r7, #0]
 80011b0:	f993 3048 	ldrsb.w	r3, [r3, #72]	@ 0x48
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d004      	beq.n	80011c2 <bme69x_get_regs+0x7c>
        {
            rslt = BME69X_E_COM_FAIL;
 80011b8:	23fe      	movs	r3, #254	@ 0xfe
 80011ba:	75fb      	strb	r3, [r7, #23]
        if (dev->intf_rslt != 0)
 80011bc:	e001      	b.n	80011c2 <bme69x_get_regs+0x7c>
        }
    }
    else
    {
        rslt = BME69X_E_NULL_PTR;
 80011be:	23ff      	movs	r3, #255	@ 0xff
 80011c0:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 80011c2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80011c6:	4618      	mov	r0, r3
 80011c8:	371c      	adds	r7, #28
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bd90      	pop	{r4, r7, pc}

080011ce <bme69x_soft_reset>:

/*
 * @brief This API soft-resets the sensor.
 */
int8_t bme69x_soft_reset(struct bme69x_dev *dev)
{
 80011ce:	b580      	push	{r7, lr}
 80011d0:	b084      	sub	sp, #16
 80011d2:	af00      	add	r7, sp, #0
 80011d4:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t reg_addr = BME69X_REG_SOFT_RESET;
 80011d6:	23e0      	movs	r3, #224	@ 0xe0
 80011d8:	73bb      	strb	r3, [r7, #14]

    /* 0xb6 is the soft reset command */
    uint8_t soft_rst_cmd = BME69X_SOFT_RESET_CMD;
 80011da:	23b6      	movs	r3, #182	@ 0xb6
 80011dc:	737b      	strb	r3, [r7, #13]

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 80011de:	6878      	ldr	r0, [r7, #4]
 80011e0:	f001 fbda 	bl	8002998 <null_ptr_check>
 80011e4:	4603      	mov	r3, r0
 80011e6:	73fb      	strb	r3, [r7, #15]
    if (rslt == BME69X_OK)
 80011e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d12b      	bne.n	8001248 <bme69x_soft_reset+0x7a>
    {
        if (dev->intf == BME69X_SPI_INTF)
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	7b1b      	ldrb	r3, [r3, #12]
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d104      	bne.n	8001202 <bme69x_soft_reset+0x34>
        {
            rslt = get_mem_page(dev);
 80011f8:	6878      	ldr	r0, [r7, #4]
 80011fa:	f001 fb71 	bl	80028e0 <get_mem_page>
 80011fe:	4603      	mov	r3, r0
 8001200:	73fb      	strb	r3, [r7, #15]
        }

        /* Reset the device */
        if (rslt == BME69X_OK)
 8001202:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001206:	2b00      	cmp	r3, #0
 8001208:	d11e      	bne.n	8001248 <bme69x_soft_reset+0x7a>
        {
            rslt = bme69x_set_regs(&reg_addr, &soft_rst_cmd, 1, dev);
 800120a:	f107 010d 	add.w	r1, r7, #13
 800120e:	f107 000e 	add.w	r0, r7, #14
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	2201      	movs	r2, #1
 8001216:	f7ff ff07 	bl	8001028 <bme69x_set_regs>
 800121a:	4603      	mov	r3, r0
 800121c:	73fb      	strb	r3, [r7, #15]

            if (rslt == BME69X_OK)
 800121e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001222:	2b00      	cmp	r3, #0
 8001224:	d110      	bne.n	8001248 <bme69x_soft_reset+0x7a>
            {
                /* Wait for 5ms */
                dev->delay_us(BME69X_PERIOD_RESET, dev->intf_ptr);
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800122a:	687a      	ldr	r2, [r7, #4]
 800122c:	6852      	ldr	r2, [r2, #4]
 800122e:	4611      	mov	r1, r2
 8001230:	f242 7010 	movw	r0, #10000	@ 0x2710
 8001234:	4798      	blx	r3

                /* After reset get the memory page */
                if (dev->intf == BME69X_SPI_INTF)
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	7b1b      	ldrb	r3, [r3, #12]
 800123a:	2b00      	cmp	r3, #0
 800123c:	d104      	bne.n	8001248 <bme69x_soft_reset+0x7a>
                {
                    rslt = get_mem_page(dev);
 800123e:	6878      	ldr	r0, [r7, #4]
 8001240:	f001 fb4e 	bl	80028e0 <get_mem_page>
 8001244:	4603      	mov	r3, r0
 8001246:	73fb      	strb	r3, [r7, #15]
                }
            }
        }
    }

    return rslt;
 8001248:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800124c:	4618      	mov	r0, r3
 800124e:	3710      	adds	r7, #16
 8001250:	46bd      	mov	sp, r7
 8001252:	bd80      	pop	{r7, pc}

08001254 <bme69x_set_conf>:

/*
 * @brief This API is used to set the oversampling, filter and odr configuration
 */
int8_t bme69x_set_conf(struct bme69x_conf *conf, struct bme69x_dev *dev)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b088      	sub	sp, #32
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
 800125c:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t odr20 = 0, odr3 = 1;
 800125e:	2300      	movs	r3, #0
 8001260:	77bb      	strb	r3, [r7, #30]
 8001262:	2301      	movs	r3, #1
 8001264:	777b      	strb	r3, [r7, #29]
    uint8_t current_op_mode;

    /* Register data starting from BME69X_REG_CTRL_GAS_1(0x71) up to BME69X_REG_CONFIG(0x75) */
    uint8_t reg_array[BME69X_LEN_CONFIG] = { 0x71, 0x72, 0x73, 0x74, 0x75 };
 8001266:	4a7f      	ldr	r2, [pc, #508]	@ (8001464 <bme69x_set_conf+0x210>)
 8001268:	f107 0314 	add.w	r3, r7, #20
 800126c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001270:	6018      	str	r0, [r3, #0]
 8001272:	3304      	adds	r3, #4
 8001274:	7019      	strb	r1, [r3, #0]
    uint8_t data_array[BME69X_LEN_CONFIG] = { 0 };
 8001276:	f107 030c 	add.w	r3, r7, #12
 800127a:	2200      	movs	r2, #0
 800127c:	601a      	str	r2, [r3, #0]
 800127e:	711a      	strb	r2, [r3, #4]

    rslt = bme69x_get_op_mode(&current_op_mode, dev);
 8001280:	f107 031c 	add.w	r3, r7, #28
 8001284:	6839      	ldr	r1, [r7, #0]
 8001286:	4618      	mov	r0, r3
 8001288:	f000 f94f 	bl	800152a <bme69x_get_op_mode>
 800128c:	4603      	mov	r3, r0
 800128e:	77fb      	strb	r3, [r7, #31]
    if (rslt == BME69X_OK)
 8001290:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001294:	2b00      	cmp	r3, #0
 8001296:	d105      	bne.n	80012a4 <bme69x_set_conf+0x50>
    {
        /* Configure only in the sleep mode */
        rslt = bme69x_set_op_mode(BME69X_SLEEP_MODE, dev);
 8001298:	6839      	ldr	r1, [r7, #0]
 800129a:	2000      	movs	r0, #0
 800129c:	f000 f8e4 	bl	8001468 <bme69x_set_op_mode>
 80012a0:	4603      	mov	r3, r0
 80012a2:	77fb      	strb	r3, [r7, #31]
    }

    if (conf == NULL)
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d102      	bne.n	80012b0 <bme69x_set_conf+0x5c>
    {
        rslt = BME69X_E_NULL_PTR;
 80012aa:	23ff      	movs	r3, #255	@ 0xff
 80012ac:	77fb      	strb	r3, [r7, #31]
 80012ae:	e0b7      	b.n	8001420 <bme69x_set_conf+0x1cc>
    }
    else if (rslt == BME69X_OK)
 80012b0:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	f040 80b3 	bne.w	8001420 <bme69x_set_conf+0x1cc>
    {
        /* Read the whole configuration and write it back once later */
        rslt = bme69x_get_regs(reg_array[0], data_array, BME69X_LEN_CONFIG, dev);
 80012ba:	7d38      	ldrb	r0, [r7, #20]
 80012bc:	f107 010c 	add.w	r1, r7, #12
 80012c0:	683b      	ldr	r3, [r7, #0]
 80012c2:	2205      	movs	r2, #5
 80012c4:	f7ff ff3f 	bl	8001146 <bme69x_get_regs>
 80012c8:	4603      	mov	r3, r0
 80012ca:	77fb      	strb	r3, [r7, #31]
        dev->info_msg = BME69X_OK;
 80012cc:	683b      	ldr	r3, [r7, #0]
 80012ce:	2200      	movs	r2, #0
 80012d0:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49
        if (rslt == BME69X_OK)
 80012d4:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d108      	bne.n	80012ee <bme69x_set_conf+0x9a>
        {
            rslt = boundary_check(&conf->filter, BME69X_FILTER_SIZE_127, dev);
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	3303      	adds	r3, #3
 80012e0:	683a      	ldr	r2, [r7, #0]
 80012e2:	2107      	movs	r1, #7
 80012e4:	4618      	mov	r0, r3
 80012e6:	f001 fb2a 	bl	800293e <boundary_check>
 80012ea:	4603      	mov	r3, r0
 80012ec:	77fb      	strb	r3, [r7, #31]
        }

        if (rslt == BME69X_OK)
 80012ee:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d108      	bne.n	8001308 <bme69x_set_conf+0xb4>
        {
            rslt = boundary_check(&conf->os_temp, BME69X_OS_16X, dev);
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	3301      	adds	r3, #1
 80012fa:	683a      	ldr	r2, [r7, #0]
 80012fc:	2105      	movs	r1, #5
 80012fe:	4618      	mov	r0, r3
 8001300:	f001 fb1d 	bl	800293e <boundary_check>
 8001304:	4603      	mov	r3, r0
 8001306:	77fb      	strb	r3, [r7, #31]
        }

        if (rslt == BME69X_OK)
 8001308:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800130c:	2b00      	cmp	r3, #0
 800130e:	d108      	bne.n	8001322 <bme69x_set_conf+0xce>
        {
            rslt = boundary_check(&conf->os_pres, BME69X_OS_16X, dev);
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	3302      	adds	r3, #2
 8001314:	683a      	ldr	r2, [r7, #0]
 8001316:	2105      	movs	r1, #5
 8001318:	4618      	mov	r0, r3
 800131a:	f001 fb10 	bl	800293e <boundary_check>
 800131e:	4603      	mov	r3, r0
 8001320:	77fb      	strb	r3, [r7, #31]
        }

        if (rslt == BME69X_OK)
 8001322:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001326:	2b00      	cmp	r3, #0
 8001328:	d107      	bne.n	800133a <bme69x_set_conf+0xe6>
        {
            rslt = boundary_check(&conf->os_hum, BME69X_OS_16X, dev);
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	683a      	ldr	r2, [r7, #0]
 800132e:	2105      	movs	r1, #5
 8001330:	4618      	mov	r0, r3
 8001332:	f001 fb04 	bl	800293e <boundary_check>
 8001336:	4603      	mov	r3, r0
 8001338:	77fb      	strb	r3, [r7, #31]
        }

        if (rslt == BME69X_OK)
 800133a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800133e:	2b00      	cmp	r3, #0
 8001340:	d108      	bne.n	8001354 <bme69x_set_conf+0x100>
        {
            rslt = boundary_check(&conf->odr, BME69X_ODR_NONE, dev);
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	3304      	adds	r3, #4
 8001346:	683a      	ldr	r2, [r7, #0]
 8001348:	2108      	movs	r1, #8
 800134a:	4618      	mov	r0, r3
 800134c:	f001 faf7 	bl	800293e <boundary_check>
 8001350:	4603      	mov	r3, r0
 8001352:	77fb      	strb	r3, [r7, #31]
        }

        if (rslt == BME69X_OK)
 8001354:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001358:	2b00      	cmp	r3, #0
 800135a:	d161      	bne.n	8001420 <bme69x_set_conf+0x1cc>
        {
            data_array[4] = BME69X_SET_BITS(data_array[4], BME69X_FILTER, conf->filter);
 800135c:	7c3b      	ldrb	r3, [r7, #16]
 800135e:	b25b      	sxtb	r3, r3
 8001360:	f023 031c 	bic.w	r3, r3, #28
 8001364:	b25a      	sxtb	r2, r3
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	78db      	ldrb	r3, [r3, #3]
 800136a:	b25b      	sxtb	r3, r3
 800136c:	009b      	lsls	r3, r3, #2
 800136e:	b25b      	sxtb	r3, r3
 8001370:	f003 031c 	and.w	r3, r3, #28
 8001374:	b25b      	sxtb	r3, r3
 8001376:	4313      	orrs	r3, r2
 8001378:	b25b      	sxtb	r3, r3
 800137a:	b2db      	uxtb	r3, r3
 800137c:	743b      	strb	r3, [r7, #16]
            data_array[3] = BME69X_SET_BITS(data_array[3], BME69X_OST, conf->os_temp);
 800137e:	7bfb      	ldrb	r3, [r7, #15]
 8001380:	b25b      	sxtb	r3, r3
 8001382:	f003 031f 	and.w	r3, r3, #31
 8001386:	b25a      	sxtb	r2, r3
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	785b      	ldrb	r3, [r3, #1]
 800138c:	b25b      	sxtb	r3, r3
 800138e:	015b      	lsls	r3, r3, #5
 8001390:	b25b      	sxtb	r3, r3
 8001392:	4313      	orrs	r3, r2
 8001394:	b25b      	sxtb	r3, r3
 8001396:	b2db      	uxtb	r3, r3
 8001398:	73fb      	strb	r3, [r7, #15]
            data_array[3] = BME69X_SET_BITS(data_array[3], BME69X_OSP, conf->os_pres);
 800139a:	7bfb      	ldrb	r3, [r7, #15]
 800139c:	b25b      	sxtb	r3, r3
 800139e:	f023 031c 	bic.w	r3, r3, #28
 80013a2:	b25a      	sxtb	r2, r3
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	789b      	ldrb	r3, [r3, #2]
 80013a8:	b25b      	sxtb	r3, r3
 80013aa:	009b      	lsls	r3, r3, #2
 80013ac:	b25b      	sxtb	r3, r3
 80013ae:	f003 031c 	and.w	r3, r3, #28
 80013b2:	b25b      	sxtb	r3, r3
 80013b4:	4313      	orrs	r3, r2
 80013b6:	b25b      	sxtb	r3, r3
 80013b8:	b2db      	uxtb	r3, r3
 80013ba:	73fb      	strb	r3, [r7, #15]
            data_array[1] = BME69X_SET_BITS_POS_0(data_array[1], BME69X_OSH, conf->os_hum);
 80013bc:	7b7b      	ldrb	r3, [r7, #13]
 80013be:	b25b      	sxtb	r3, r3
 80013c0:	f023 0307 	bic.w	r3, r3, #7
 80013c4:	b25a      	sxtb	r2, r3
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	781b      	ldrb	r3, [r3, #0]
 80013ca:	b25b      	sxtb	r3, r3
 80013cc:	f003 0307 	and.w	r3, r3, #7
 80013d0:	b25b      	sxtb	r3, r3
 80013d2:	4313      	orrs	r3, r2
 80013d4:	b25b      	sxtb	r3, r3
 80013d6:	b2db      	uxtb	r3, r3
 80013d8:	737b      	strb	r3, [r7, #13]
            if (conf->odr != BME69X_ODR_NONE)
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	791b      	ldrb	r3, [r3, #4]
 80013de:	2b08      	cmp	r3, #8
 80013e0:	d004      	beq.n	80013ec <bme69x_set_conf+0x198>
            {
                odr20 = conf->odr;
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	791b      	ldrb	r3, [r3, #4]
 80013e6:	77bb      	strb	r3, [r7, #30]
                odr3 = 0;
 80013e8:	2300      	movs	r3, #0
 80013ea:	777b      	strb	r3, [r7, #29]
            }

            data_array[4] = BME69X_SET_BITS(data_array[4], BME69X_ODR20, odr20);
 80013ec:	7c3b      	ldrb	r3, [r7, #16]
 80013ee:	b25b      	sxtb	r3, r3
 80013f0:	f003 031f 	and.w	r3, r3, #31
 80013f4:	b25a      	sxtb	r2, r3
 80013f6:	f997 301e 	ldrsb.w	r3, [r7, #30]
 80013fa:	015b      	lsls	r3, r3, #5
 80013fc:	b25b      	sxtb	r3, r3
 80013fe:	4313      	orrs	r3, r2
 8001400:	b25b      	sxtb	r3, r3
 8001402:	b2db      	uxtb	r3, r3
 8001404:	743b      	strb	r3, [r7, #16]
            data_array[0] = BME69X_SET_BITS(data_array[0], BME69X_ODR3, odr3);
 8001406:	7b3b      	ldrb	r3, [r7, #12]
 8001408:	b25b      	sxtb	r3, r3
 800140a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800140e:	b25a      	sxtb	r2, r3
 8001410:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8001414:	01db      	lsls	r3, r3, #7
 8001416:	b25b      	sxtb	r3, r3
 8001418:	4313      	orrs	r3, r2
 800141a:	b25b      	sxtb	r3, r3
 800141c:	b2db      	uxtb	r3, r3
 800141e:	733b      	strb	r3, [r7, #12]
        }
    }

    if (rslt == BME69X_OK)
 8001420:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001424:	2b00      	cmp	r3, #0
 8001426:	d109      	bne.n	800143c <bme69x_set_conf+0x1e8>
    {
        rslt = bme69x_set_regs(reg_array, data_array, BME69X_LEN_CONFIG, dev);
 8001428:	f107 010c 	add.w	r1, r7, #12
 800142c:	f107 0014 	add.w	r0, r7, #20
 8001430:	683b      	ldr	r3, [r7, #0]
 8001432:	2205      	movs	r2, #5
 8001434:	f7ff fdf8 	bl	8001028 <bme69x_set_regs>
 8001438:	4603      	mov	r3, r0
 800143a:	77fb      	strb	r3, [r7, #31]
    }

    if ((current_op_mode != BME69X_SLEEP_MODE) && (rslt == BME69X_OK))
 800143c:	7f3b      	ldrb	r3, [r7, #28]
 800143e:	2b00      	cmp	r3, #0
 8001440:	d00a      	beq.n	8001458 <bme69x_set_conf+0x204>
 8001442:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001446:	2b00      	cmp	r3, #0
 8001448:	d106      	bne.n	8001458 <bme69x_set_conf+0x204>
    {
        rslt = bme69x_set_op_mode(current_op_mode, dev);
 800144a:	7f3b      	ldrb	r3, [r7, #28]
 800144c:	6839      	ldr	r1, [r7, #0]
 800144e:	4618      	mov	r0, r3
 8001450:	f000 f80a 	bl	8001468 <bme69x_set_op_mode>
 8001454:	4603      	mov	r3, r0
 8001456:	77fb      	strb	r3, [r7, #31]
    }

    return rslt;
 8001458:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800145c:	4618      	mov	r0, r3
 800145e:	3720      	adds	r7, #32
 8001460:	46bd      	mov	sp, r7
 8001462:	bd80      	pop	{r7, pc}
 8001464:	080100e8 	.word	0x080100e8

08001468 <bme69x_set_op_mode>:

/*
 * @brief This API is used to set the operation mode of the sensor
 */
int8_t bme69x_set_op_mode(const uint8_t op_mode, struct bme69x_dev *dev)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b084      	sub	sp, #16
 800146c:	af00      	add	r7, sp, #0
 800146e:	4603      	mov	r3, r0
 8001470:	6039      	str	r1, [r7, #0]
 8001472:	71fb      	strb	r3, [r7, #7]
    int8_t rslt;
    uint8_t tmp_pow_mode;
    uint8_t pow_mode = 0;
 8001474:	2300      	movs	r3, #0
 8001476:	73bb      	strb	r3, [r7, #14]
    uint8_t reg_addr = BME69X_REG_CTRL_MEAS;
 8001478:	2374      	movs	r3, #116	@ 0x74
 800147a:	733b      	strb	r3, [r7, #12]

    /* Call until in sleep */
    do
    {
        rslt = bme69x_get_regs(BME69X_REG_CTRL_MEAS, &tmp_pow_mode, 1, dev);
 800147c:	f107 010d 	add.w	r1, r7, #13
 8001480:	683b      	ldr	r3, [r7, #0]
 8001482:	2201      	movs	r2, #1
 8001484:	2074      	movs	r0, #116	@ 0x74
 8001486:	f7ff fe5e 	bl	8001146 <bme69x_get_regs>
 800148a:	4603      	mov	r3, r0
 800148c:	73fb      	strb	r3, [r7, #15]
        if (rslt == BME69X_OK)
 800148e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001492:	2b00      	cmp	r3, #0
 8001494:	d11d      	bne.n	80014d2 <bme69x_set_op_mode+0x6a>
        {
            /* Put to sleep before changing mode */
            pow_mode = (tmp_pow_mode & BME69X_MODE_MSK);
 8001496:	7b7b      	ldrb	r3, [r7, #13]
 8001498:	f003 0303 	and.w	r3, r3, #3
 800149c:	73bb      	strb	r3, [r7, #14]
            if (pow_mode != BME69X_SLEEP_MODE)
 800149e:	7bbb      	ldrb	r3, [r7, #14]
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d016      	beq.n	80014d2 <bme69x_set_op_mode+0x6a>
            {
                tmp_pow_mode &= ~BME69X_MODE_MSK; /* Set to sleep */
 80014a4:	7b7b      	ldrb	r3, [r7, #13]
 80014a6:	f023 0303 	bic.w	r3, r3, #3
 80014aa:	b2db      	uxtb	r3, r3
 80014ac:	737b      	strb	r3, [r7, #13]
                rslt = bme69x_set_regs(&reg_addr, &tmp_pow_mode, 1, dev);
 80014ae:	f107 010d 	add.w	r1, r7, #13
 80014b2:	f107 000c 	add.w	r0, r7, #12
 80014b6:	683b      	ldr	r3, [r7, #0]
 80014b8:	2201      	movs	r2, #1
 80014ba:	f7ff fdb5 	bl	8001028 <bme69x_set_regs>
 80014be:	4603      	mov	r3, r0
 80014c0:	73fb      	strb	r3, [r7, #15]
                dev->delay_us(BME69X_PERIOD_POLL, dev->intf_ptr);
 80014c2:	683b      	ldr	r3, [r7, #0]
 80014c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014c6:	683a      	ldr	r2, [r7, #0]
 80014c8:	6852      	ldr	r2, [r2, #4]
 80014ca:	4611      	mov	r1, r2
 80014cc:	f242 7010 	movw	r0, #10000	@ 0x2710
 80014d0:	4798      	blx	r3
            }
        }
    } while ((pow_mode != BME69X_SLEEP_MODE) && (rslt == BME69X_OK));
 80014d2:	7bbb      	ldrb	r3, [r7, #14]
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d003      	beq.n	80014e0 <bme69x_set_op_mode+0x78>
 80014d8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d0cd      	beq.n	800147c <bme69x_set_op_mode+0x14>

    /* Already in sleep */
    if ((op_mode != BME69X_SLEEP_MODE) && (rslt == BME69X_OK))
 80014e0:	79fb      	ldrb	r3, [r7, #7]
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d01b      	beq.n	800151e <bme69x_set_op_mode+0xb6>
 80014e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d117      	bne.n	800151e <bme69x_set_op_mode+0xb6>
    {
        tmp_pow_mode = (tmp_pow_mode & ~BME69X_MODE_MSK) | (op_mode & BME69X_MODE_MSK);
 80014ee:	7b7b      	ldrb	r3, [r7, #13]
 80014f0:	b25b      	sxtb	r3, r3
 80014f2:	f023 0303 	bic.w	r3, r3, #3
 80014f6:	b25a      	sxtb	r2, r3
 80014f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014fc:	f003 0303 	and.w	r3, r3, #3
 8001500:	b25b      	sxtb	r3, r3
 8001502:	4313      	orrs	r3, r2
 8001504:	b25b      	sxtb	r3, r3
 8001506:	b2db      	uxtb	r3, r3
 8001508:	737b      	strb	r3, [r7, #13]
        rslt = bme69x_set_regs(&reg_addr, &tmp_pow_mode, 1, dev);
 800150a:	f107 010d 	add.w	r1, r7, #13
 800150e:	f107 000c 	add.w	r0, r7, #12
 8001512:	683b      	ldr	r3, [r7, #0]
 8001514:	2201      	movs	r2, #1
 8001516:	f7ff fd87 	bl	8001028 <bme69x_set_regs>
 800151a:	4603      	mov	r3, r0
 800151c:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 800151e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001522:	4618      	mov	r0, r3
 8001524:	3710      	adds	r7, #16
 8001526:	46bd      	mov	sp, r7
 8001528:	bd80      	pop	{r7, pc}

0800152a <bme69x_get_op_mode>:

/*
 * @brief This API is used to get the operation mode of the sensor.
 */
int8_t bme69x_get_op_mode(uint8_t *op_mode, struct bme69x_dev *dev)
{
 800152a:	b580      	push	{r7, lr}
 800152c:	b084      	sub	sp, #16
 800152e:	af00      	add	r7, sp, #0
 8001530:	6078      	str	r0, [r7, #4]
 8001532:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t mode;

    if (op_mode)
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	2b00      	cmp	r3, #0
 8001538:	d00f      	beq.n	800155a <bme69x_get_op_mode+0x30>
    {
        rslt = bme69x_get_regs(BME69X_REG_CTRL_MEAS, &mode, 1, dev);
 800153a:	f107 010e 	add.w	r1, r7, #14
 800153e:	683b      	ldr	r3, [r7, #0]
 8001540:	2201      	movs	r2, #1
 8001542:	2074      	movs	r0, #116	@ 0x74
 8001544:	f7ff fdff 	bl	8001146 <bme69x_get_regs>
 8001548:	4603      	mov	r3, r0
 800154a:	73fb      	strb	r3, [r7, #15]

        /* Masking the other register bit info*/
        *op_mode = mode & BME69X_MODE_MSK;
 800154c:	7bbb      	ldrb	r3, [r7, #14]
 800154e:	f003 0303 	and.w	r3, r3, #3
 8001552:	b2da      	uxtb	r2, r3
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	701a      	strb	r2, [r3, #0]
 8001558:	e001      	b.n	800155e <bme69x_get_op_mode+0x34>
    }
    else
    {
        rslt = BME69X_E_NULL_PTR;
 800155a:	23ff      	movs	r3, #255	@ 0xff
 800155c:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 800155e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001562:	4618      	mov	r0, r3
 8001564:	3710      	adds	r7, #16
 8001566:	46bd      	mov	sp, r7
 8001568:	bd80      	pop	{r7, pc}
	...

0800156c <bme69x_get_meas_dur>:

/*
 * @brief This API is used to get the remaining duration that can be used for heating.
 */
uint32_t bme69x_get_meas_dur(const uint8_t op_mode, struct bme69x_conf *conf, struct bme69x_dev *dev)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b08a      	sub	sp, #40	@ 0x28
 8001570:	af00      	add	r7, sp, #0
 8001572:	4603      	mov	r3, r0
 8001574:	60b9      	str	r1, [r7, #8]
 8001576:	607a      	str	r2, [r7, #4]
 8001578:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;
    uint32_t meas_dur = 0; /* Calculate in us */
 800157a:	2300      	movs	r3, #0
 800157c:	623b      	str	r3, [r7, #32]
    uint32_t meas_cycles;
    uint8_t os_to_meas_cycles[6] = { 0, 1, 2, 4, 8, 16 };
 800157e:	4a34      	ldr	r2, [pc, #208]	@ (8001650 <bme69x_get_meas_dur+0xe4>)
 8001580:	f107 0314 	add.w	r3, r7, #20
 8001584:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001588:	6018      	str	r0, [r3, #0]
 800158a:	3304      	adds	r3, #4
 800158c:	8019      	strh	r1, [r3, #0]

    if (conf != NULL)
 800158e:	68bb      	ldr	r3, [r7, #8]
 8001590:	2b00      	cmp	r3, #0
 8001592:	d058      	beq.n	8001646 <bme69x_get_meas_dur+0xda>
    {
        /* Boundary check for temperature oversampling */
        rslt = boundary_check(&conf->os_temp, BME69X_OS_16X, dev);
 8001594:	68bb      	ldr	r3, [r7, #8]
 8001596:	3301      	adds	r3, #1
 8001598:	687a      	ldr	r2, [r7, #4]
 800159a:	2105      	movs	r1, #5
 800159c:	4618      	mov	r0, r3
 800159e:	f001 f9ce 	bl	800293e <boundary_check>
 80015a2:	4603      	mov	r3, r0
 80015a4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

        if (rslt == BME69X_OK)
 80015a8:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d109      	bne.n	80015c4 <bme69x_get_meas_dur+0x58>
        {
            /* Boundary check for pressure oversampling */
            rslt = boundary_check(&conf->os_pres, BME69X_OS_16X, dev);
 80015b0:	68bb      	ldr	r3, [r7, #8]
 80015b2:	3302      	adds	r3, #2
 80015b4:	687a      	ldr	r2, [r7, #4]
 80015b6:	2105      	movs	r1, #5
 80015b8:	4618      	mov	r0, r3
 80015ba:	f001 f9c0 	bl	800293e <boundary_check>
 80015be:	4603      	mov	r3, r0
 80015c0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        }

        if (rslt == BME69X_OK)
 80015c4:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d108      	bne.n	80015de <bme69x_get_meas_dur+0x72>
        {
            /* Boundary check for humidity oversampling */
            rslt = boundary_check(&conf->os_hum, BME69X_OS_16X, dev);
 80015cc:	68bb      	ldr	r3, [r7, #8]
 80015ce:	687a      	ldr	r2, [r7, #4]
 80015d0:	2105      	movs	r1, #5
 80015d2:	4618      	mov	r0, r3
 80015d4:	f001 f9b3 	bl	800293e <boundary_check>
 80015d8:	4603      	mov	r3, r0
 80015da:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        }

        if (rslt == BME69X_OK)
 80015de:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d12f      	bne.n	8001646 <bme69x_get_meas_dur+0xda>
        {
            meas_cycles = os_to_meas_cycles[conf->os_temp];
 80015e6:	68bb      	ldr	r3, [r7, #8]
 80015e8:	785b      	ldrb	r3, [r3, #1]
 80015ea:	3328      	adds	r3, #40	@ 0x28
 80015ec:	443b      	add	r3, r7
 80015ee:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 80015f2:	61fb      	str	r3, [r7, #28]
            meas_cycles += os_to_meas_cycles[conf->os_pres];
 80015f4:	68bb      	ldr	r3, [r7, #8]
 80015f6:	789b      	ldrb	r3, [r3, #2]
 80015f8:	3328      	adds	r3, #40	@ 0x28
 80015fa:	443b      	add	r3, r7
 80015fc:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 8001600:	461a      	mov	r2, r3
 8001602:	69fb      	ldr	r3, [r7, #28]
 8001604:	4413      	add	r3, r2
 8001606:	61fb      	str	r3, [r7, #28]
            meas_cycles += os_to_meas_cycles[conf->os_hum];
 8001608:	68bb      	ldr	r3, [r7, #8]
 800160a:	781b      	ldrb	r3, [r3, #0]
 800160c:	3328      	adds	r3, #40	@ 0x28
 800160e:	443b      	add	r3, r7
 8001610:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 8001614:	461a      	mov	r2, r3
 8001616:	69fb      	ldr	r3, [r7, #28]
 8001618:	4413      	add	r3, r2
 800161a:	61fb      	str	r3, [r7, #28]

            /* TPH measurement duration */
            meas_dur = meas_cycles * UINT32_C(1963);
 800161c:	69fb      	ldr	r3, [r7, #28]
 800161e:	f240 72ab 	movw	r2, #1963	@ 0x7ab
 8001622:	fb02 f303 	mul.w	r3, r2, r3
 8001626:	623b      	str	r3, [r7, #32]
            meas_dur += UINT32_C(477 * 4); /* TPH switching duration */
 8001628:	6a3b      	ldr	r3, [r7, #32]
 800162a:	f203 7374 	addw	r3, r3, #1908	@ 0x774
 800162e:	623b      	str	r3, [r7, #32]
            meas_dur += UINT32_C(477 * 5); /* Gas measurement duration */
 8001630:	6a3b      	ldr	r3, [r7, #32]
 8001632:	f603 1351 	addw	r3, r3, #2385	@ 0x951
 8001636:	623b      	str	r3, [r7, #32]

            if (op_mode != BME69X_PARALLEL_MODE)
 8001638:	7bfb      	ldrb	r3, [r7, #15]
 800163a:	2b02      	cmp	r3, #2
 800163c:	d003      	beq.n	8001646 <bme69x_get_meas_dur+0xda>
            {
                meas_dur += UINT32_C(1000); /* Wake up duration of 1ms */
 800163e:	6a3b      	ldr	r3, [r7, #32]
 8001640:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8001644:	623b      	str	r3, [r7, #32]
            }
        }
    }

    return meas_dur;
 8001646:	6a3b      	ldr	r3, [r7, #32]
}
 8001648:	4618      	mov	r0, r3
 800164a:	3728      	adds	r7, #40	@ 0x28
 800164c:	46bd      	mov	sp, r7
 800164e:	bd80      	pop	{r7, pc}
 8001650:	080100f0 	.word	0x080100f0

08001654 <bme69x_get_data>:
 * @brief This API reads the pressure, temperature and humidity and gas data
 * from the sensor, compensates the data and store it in the bme69x_data
 * structure instance passed by the user.
 */
int8_t bme69x_get_data(uint8_t op_mode, struct bme69x_data *data, uint8_t *n_data, struct bme69x_dev *dev)
{
 8001654:	b5b0      	push	{r4, r5, r7, lr}
 8001656:	b09a      	sub	sp, #104	@ 0x68
 8001658:	af00      	add	r7, sp, #0
 800165a:	60b9      	str	r1, [r7, #8]
 800165c:	607a      	str	r2, [r7, #4]
 800165e:	603b      	str	r3, [r7, #0]
 8001660:	4603      	mov	r3, r0
 8001662:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;
    uint8_t i = 0, j = 0, new_fields = 0;
 8001664:	2300      	movs	r3, #0
 8001666:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66
 800166a:	2300      	movs	r3, #0
 800166c:	f887 3065 	strb.w	r3, [r7, #101]	@ 0x65
 8001670:	2300      	movs	r3, #0
 8001672:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
    struct bme69x_data *field_ptr[3] = { 0 };
 8001676:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800167a:	2200      	movs	r2, #0
 800167c:	601a      	str	r2, [r3, #0]
 800167e:	605a      	str	r2, [r3, #4]
 8001680:	609a      	str	r2, [r3, #8]
    struct bme69x_data field_data[3] = { { 0 } };
 8001682:	f107 0310 	add.w	r3, r7, #16
 8001686:	2248      	movs	r2, #72	@ 0x48
 8001688:	2100      	movs	r1, #0
 800168a:	4618      	mov	r0, r3
 800168c:	f00c fbf0 	bl	800de70 <memset>

    field_ptr[0] = &field_data[0];
 8001690:	f107 0310 	add.w	r3, r7, #16
 8001694:	65bb      	str	r3, [r7, #88]	@ 0x58
    field_ptr[1] = &field_data[1];
 8001696:	f107 0310 	add.w	r3, r7, #16
 800169a:	3318      	adds	r3, #24
 800169c:	65fb      	str	r3, [r7, #92]	@ 0x5c
    field_ptr[2] = &field_data[2];
 800169e:	f107 0310 	add.w	r3, r7, #16
 80016a2:	3330      	adds	r3, #48	@ 0x30
 80016a4:	663b      	str	r3, [r7, #96]	@ 0x60

    rslt = null_ptr_check(dev);
 80016a6:	6838      	ldr	r0, [r7, #0]
 80016a8:	f001 f976 	bl	8002998 <null_ptr_check>
 80016ac:	4603      	mov	r3, r0
 80016ae:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
    if ((rslt == BME69X_OK) && (data != NULL))
 80016b2:	f997 3067 	ldrsb.w	r3, [r7, #103]	@ 0x67
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	f040 80c1 	bne.w	800183e <bme69x_get_data+0x1ea>
 80016bc:	68bb      	ldr	r3, [r7, #8]
 80016be:	2b00      	cmp	r3, #0
 80016c0:	f000 80bd 	beq.w	800183e <bme69x_get_data+0x1ea>
    {
        /* Reading the sensor data in forced mode only */
        if (op_mode == BME69X_FORCED_MODE)
 80016c4:	7bfb      	ldrb	r3, [r7, #15]
 80016c6:	2b01      	cmp	r3, #1
 80016c8:	d11c      	bne.n	8001704 <bme69x_get_data+0xb0>
        {
            rslt = read_field_data(0, data, dev);
 80016ca:	683a      	ldr	r2, [r7, #0]
 80016cc:	68b9      	ldr	r1, [r7, #8]
 80016ce:	2000      	movs	r0, #0
 80016d0:	f000 fdcb 	bl	800226a <read_field_data>
 80016d4:	4603      	mov	r3, r0
 80016d6:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
            if (rslt == BME69X_OK)
 80016da:	f997 3067 	ldrsb.w	r3, [r7, #103]	@ 0x67
 80016de:	2b00      	cmp	r3, #0
 80016e0:	f040 80a1 	bne.w	8001826 <bme69x_get_data+0x1d2>
            {
                if (data->status & BME69X_NEW_DATA_MSK)
 80016e4:	68bb      	ldr	r3, [r7, #8]
 80016e6:	781b      	ldrb	r3, [r3, #0]
 80016e8:	b25b      	sxtb	r3, r3
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	da03      	bge.n	80016f6 <bme69x_get_data+0xa2>
                {
                    new_fields = 1;
 80016ee:	2301      	movs	r3, #1
 80016f0:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
 80016f4:	e097      	b.n	8001826 <bme69x_get_data+0x1d2>
                }
                else
                {
                    new_fields = 0;
 80016f6:	2300      	movs	r3, #0
 80016f8:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
                    rslt = BME69X_W_NO_NEW_DATA;
 80016fc:	2302      	movs	r3, #2
 80016fe:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8001702:	e090      	b.n	8001826 <bme69x_get_data+0x1d2>
                }
            }
        }
        else if ((op_mode == BME69X_PARALLEL_MODE) || (op_mode == BME69X_SEQUENTIAL_MODE))
 8001704:	7bfb      	ldrb	r3, [r7, #15]
 8001706:	2b02      	cmp	r3, #2
 8001708:	d003      	beq.n	8001712 <bme69x_get_data+0xbe>
 800170a:	7bfb      	ldrb	r3, [r7, #15]
 800170c:	2b03      	cmp	r3, #3
 800170e:	f040 8087 	bne.w	8001820 <bme69x_get_data+0x1cc>
        {
            /* Read the 3 fields and count the number of new data fields */
            rslt = read_all_field_data(field_ptr, dev);
 8001712:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8001716:	6839      	ldr	r1, [r7, #0]
 8001718:	4618      	mov	r0, r3
 800171a:	f000 feba 	bl	8002492 <read_all_field_data>
 800171e:	4603      	mov	r3, r0
 8001720:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67

            new_fields = 0;
 8001724:	2300      	movs	r3, #0
 8001726:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
            for (i = 0; (i < 3) && (rslt == BME69X_OK); i++)
 800172a:	2300      	movs	r3, #0
 800172c:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66
 8001730:	e014      	b.n	800175c <bme69x_get_data+0x108>
            {
                if (field_ptr[i]->status & BME69X_NEW_DATA_MSK)
 8001732:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
 8001736:	009b      	lsls	r3, r3, #2
 8001738:	3368      	adds	r3, #104	@ 0x68
 800173a:	443b      	add	r3, r7
 800173c:	f853 3c10 	ldr.w	r3, [r3, #-16]
 8001740:	781b      	ldrb	r3, [r3, #0]
 8001742:	b25b      	sxtb	r3, r3
 8001744:	2b00      	cmp	r3, #0
 8001746:	da04      	bge.n	8001752 <bme69x_get_data+0xfe>
                {
                    new_fields++;
 8001748:	f897 3064 	ldrb.w	r3, [r7, #100]	@ 0x64
 800174c:	3301      	adds	r3, #1
 800174e:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
            for (i = 0; (i < 3) && (rslt == BME69X_OK); i++)
 8001752:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
 8001756:	3301      	adds	r3, #1
 8001758:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66
 800175c:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
 8001760:	2b02      	cmp	r3, #2
 8001762:	d803      	bhi.n	800176c <bme69x_get_data+0x118>
 8001764:	f997 3067 	ldrsb.w	r3, [r7, #103]	@ 0x67
 8001768:	2b00      	cmp	r3, #0
 800176a:	d0e2      	beq.n	8001732 <bme69x_get_data+0xde>
                }
            }

            /* Sort the sensor data in parallel & sequential modes*/
            for (i = 0; (i < 2) && (rslt == BME69X_OK); i++)
 800176c:	2300      	movs	r3, #0
 800176e:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66
 8001772:	e01c      	b.n	80017ae <bme69x_get_data+0x15a>
            {
                for (j = i + 1; j < 3; j++)
 8001774:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
 8001778:	3301      	adds	r3, #1
 800177a:	f887 3065 	strb.w	r3, [r7, #101]	@ 0x65
 800177e:	e00d      	b.n	800179c <bme69x_get_data+0x148>
                {
                    sort_sensor_data(i, j, field_ptr);
 8001780:	f107 0258 	add.w	r2, r7, #88	@ 0x58
 8001784:	f897 1065 	ldrb.w	r1, [r7, #101]	@ 0x65
 8001788:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
 800178c:	4618      	mov	r0, r3
 800178e:	f001 faab 	bl	8002ce8 <sort_sensor_data>
                for (j = i + 1; j < 3; j++)
 8001792:	f897 3065 	ldrb.w	r3, [r7, #101]	@ 0x65
 8001796:	3301      	adds	r3, #1
 8001798:	f887 3065 	strb.w	r3, [r7, #101]	@ 0x65
 800179c:	f897 3065 	ldrb.w	r3, [r7, #101]	@ 0x65
 80017a0:	2b02      	cmp	r3, #2
 80017a2:	d9ed      	bls.n	8001780 <bme69x_get_data+0x12c>
            for (i = 0; (i < 2) && (rslt == BME69X_OK); i++)
 80017a4:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
 80017a8:	3301      	adds	r3, #1
 80017aa:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66
 80017ae:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
 80017b2:	2b01      	cmp	r3, #1
 80017b4:	d803      	bhi.n	80017be <bme69x_get_data+0x16a>
 80017b6:	f997 3067 	ldrsb.w	r3, [r7, #103]	@ 0x67
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d0da      	beq.n	8001774 <bme69x_get_data+0x120>
                }
            }

            /* Copy the sorted data */
            for (i = 0; ((i < 3) && (rslt == BME69X_OK)); i++)
 80017be:	2300      	movs	r3, #0
 80017c0:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66
 80017c4:	e01c      	b.n	8001800 <bme69x_get_data+0x1ac>
            {
                data[i] = *field_ptr[i];
 80017c6:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
 80017ca:	009b      	lsls	r3, r3, #2
 80017cc:	3368      	adds	r3, #104	@ 0x68
 80017ce:	443b      	add	r3, r7
 80017d0:	f853 1c10 	ldr.w	r1, [r3, #-16]
 80017d4:	f897 2066 	ldrb.w	r2, [r7, #102]	@ 0x66
 80017d8:	4613      	mov	r3, r2
 80017da:	005b      	lsls	r3, r3, #1
 80017dc:	4413      	add	r3, r2
 80017de:	00db      	lsls	r3, r3, #3
 80017e0:	461a      	mov	r2, r3
 80017e2:	68bb      	ldr	r3, [r7, #8]
 80017e4:	4413      	add	r3, r2
 80017e6:	461c      	mov	r4, r3
 80017e8:	460d      	mov	r5, r1
 80017ea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80017ec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80017ee:	e895 0003 	ldmia.w	r5, {r0, r1}
 80017f2:	e884 0003 	stmia.w	r4, {r0, r1}
            for (i = 0; ((i < 3) && (rslt == BME69X_OK)); i++)
 80017f6:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
 80017fa:	3301      	adds	r3, #1
 80017fc:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66
 8001800:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
 8001804:	2b02      	cmp	r3, #2
 8001806:	d803      	bhi.n	8001810 <bme69x_get_data+0x1bc>
 8001808:	f997 3067 	ldrsb.w	r3, [r7, #103]	@ 0x67
 800180c:	2b00      	cmp	r3, #0
 800180e:	d0da      	beq.n	80017c6 <bme69x_get_data+0x172>
            }

            if (new_fields == 0)
 8001810:	f897 3064 	ldrb.w	r3, [r7, #100]	@ 0x64
 8001814:	2b00      	cmp	r3, #0
 8001816:	d106      	bne.n	8001826 <bme69x_get_data+0x1d2>
            {
                rslt = BME69X_W_NO_NEW_DATA;
 8001818:	2302      	movs	r3, #2
 800181a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
            if (new_fields == 0)
 800181e:	e002      	b.n	8001826 <bme69x_get_data+0x1d2>
            }
        }
        else
        {
            rslt = BME69X_W_DEFINE_OP_MODE;
 8001820:	2301      	movs	r3, #1
 8001822:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
        }

        if (n_data == NULL)
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	2b00      	cmp	r3, #0
 800182a:	d103      	bne.n	8001834 <bme69x_get_data+0x1e0>
        {
            rslt = BME69X_E_NULL_PTR;
 800182c:	23ff      	movs	r3, #255	@ 0xff
 800182e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
        if (n_data == NULL)
 8001832:	e007      	b.n	8001844 <bme69x_get_data+0x1f0>
        }
        else
        {
            *n_data = new_fields;
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	f897 2064 	ldrb.w	r2, [r7, #100]	@ 0x64
 800183a:	701a      	strb	r2, [r3, #0]
        if (n_data == NULL)
 800183c:	e002      	b.n	8001844 <bme69x_get_data+0x1f0>
        }
    }
    else
    {
        rslt = BME69X_E_NULL_PTR;
 800183e:	23ff      	movs	r3, #255	@ 0xff
 8001840:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
    }

    return rslt;
 8001844:	f997 3067 	ldrsb.w	r3, [r7, #103]	@ 0x67
}
 8001848:	4618      	mov	r0, r3
 800184a:	3768      	adds	r7, #104	@ 0x68
 800184c:	46bd      	mov	sp, r7
 800184e:	bdb0      	pop	{r4, r5, r7, pc}

08001850 <bme69x_set_heatr_conf>:

/*
 * @brief This API is used to set the gas configuration of the sensor.
 */
int8_t bme69x_set_heatr_conf(uint8_t op_mode, const struct bme69x_heatr_conf *conf, struct bme69x_dev *dev)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b088      	sub	sp, #32
 8001854:	af00      	add	r7, sp, #0
 8001856:	4603      	mov	r3, r0
 8001858:	60b9      	str	r1, [r7, #8]
 800185a:	607a      	str	r2, [r7, #4]
 800185c:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;
    uint8_t nb_conv = 0;
 800185e:	2300      	movs	r3, #0
 8001860:	773b      	strb	r3, [r7, #28]
    uint8_t hctrl, run_gas = 0;
 8001862:	2300      	movs	r3, #0
 8001864:	777b      	strb	r3, [r7, #29]
    uint8_t ctrl_gas_data[2];
    uint8_t ctrl_gas_addr[2] = { BME69X_REG_CTRL_GAS_0, BME69X_REG_CTRL_GAS_1 };
 8001866:	f247 1370 	movw	r3, #29040	@ 0x7170
 800186a:	82bb      	strh	r3, [r7, #20]

    if (conf != NULL)
 800186c:	68bb      	ldr	r3, [r7, #8]
 800186e:	2b00      	cmp	r3, #0
 8001870:	d069      	beq.n	8001946 <bme69x_set_heatr_conf+0xf6>
    {
        rslt = bme69x_set_op_mode(BME69X_SLEEP_MODE, dev);
 8001872:	6879      	ldr	r1, [r7, #4]
 8001874:	2000      	movs	r0, #0
 8001876:	f7ff fdf7 	bl	8001468 <bme69x_set_op_mode>
 800187a:	4603      	mov	r3, r0
 800187c:	77fb      	strb	r3, [r7, #31]
        if (rslt == BME69X_OK)
 800187e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001882:	2b00      	cmp	r3, #0
 8001884:	d108      	bne.n	8001898 <bme69x_set_heatr_conf+0x48>
        {
            rslt = set_conf(conf, op_mode, &nb_conv, dev);
 8001886:	f107 021c 	add.w	r2, r7, #28
 800188a:	7bf9      	ldrb	r1, [r7, #15]
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	68b8      	ldr	r0, [r7, #8]
 8001890:	f001 f8a1 	bl	80029d6 <set_conf>
 8001894:	4603      	mov	r3, r0
 8001896:	77fb      	strb	r3, [r7, #31]
        }

        if (rslt == BME69X_OK)
 8001898:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800189c:	2b00      	cmp	r3, #0
 800189e:	d154      	bne.n	800194a <bme69x_set_heatr_conf+0xfa>
        {
            rslt = bme69x_get_regs(BME69X_REG_CTRL_GAS_0, ctrl_gas_data, 2, dev);
 80018a0:	f107 0118 	add.w	r1, r7, #24
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	2202      	movs	r2, #2
 80018a8:	2070      	movs	r0, #112	@ 0x70
 80018aa:	f7ff fc4c 	bl	8001146 <bme69x_get_regs>
 80018ae:	4603      	mov	r3, r0
 80018b0:	77fb      	strb	r3, [r7, #31]
            if (rslt == BME69X_OK)
 80018b2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d147      	bne.n	800194a <bme69x_set_heatr_conf+0xfa>
            {
                if (conf->enable == BME69X_ENABLE)
 80018ba:	68bb      	ldr	r3, [r7, #8]
 80018bc:	781b      	ldrb	r3, [r3, #0]
 80018be:	2b01      	cmp	r3, #1
 80018c0:	d104      	bne.n	80018cc <bme69x_set_heatr_conf+0x7c>
                {
                    hctrl = BME69X_ENABLE_HEATER;
 80018c2:	2300      	movs	r3, #0
 80018c4:	77bb      	strb	r3, [r7, #30]
                    run_gas = BME69X_ENABLE_GAS_MEAS;
 80018c6:	2301      	movs	r3, #1
 80018c8:	777b      	strb	r3, [r7, #29]
 80018ca:	e003      	b.n	80018d4 <bme69x_set_heatr_conf+0x84>

                }
                else
                {
                    hctrl = BME69X_DISABLE_HEATER;
 80018cc:	2301      	movs	r3, #1
 80018ce:	77bb      	strb	r3, [r7, #30]
                    run_gas = BME69X_DISABLE_GAS_MEAS;
 80018d0:	2300      	movs	r3, #0
 80018d2:	777b      	strb	r3, [r7, #29]
                }

                ctrl_gas_data[0] = BME69X_SET_BITS(ctrl_gas_data[0], BME69X_HCTRL, hctrl);
 80018d4:	7e3b      	ldrb	r3, [r7, #24]
 80018d6:	b25b      	sxtb	r3, r3
 80018d8:	f023 0308 	bic.w	r3, r3, #8
 80018dc:	b25a      	sxtb	r2, r3
 80018de:	f997 301e 	ldrsb.w	r3, [r7, #30]
 80018e2:	00db      	lsls	r3, r3, #3
 80018e4:	b25b      	sxtb	r3, r3
 80018e6:	f003 0308 	and.w	r3, r3, #8
 80018ea:	b25b      	sxtb	r3, r3
 80018ec:	4313      	orrs	r3, r2
 80018ee:	b25b      	sxtb	r3, r3
 80018f0:	b2db      	uxtb	r3, r3
 80018f2:	763b      	strb	r3, [r7, #24]
                ctrl_gas_data[1] = BME69X_SET_BITS_POS_0(ctrl_gas_data[1], BME69X_NBCONV, nb_conv);
 80018f4:	7e7b      	ldrb	r3, [r7, #25]
 80018f6:	b25b      	sxtb	r3, r3
 80018f8:	f023 030f 	bic.w	r3, r3, #15
 80018fc:	b25a      	sxtb	r2, r3
 80018fe:	7f3b      	ldrb	r3, [r7, #28]
 8001900:	b25b      	sxtb	r3, r3
 8001902:	f003 030f 	and.w	r3, r3, #15
 8001906:	b25b      	sxtb	r3, r3
 8001908:	4313      	orrs	r3, r2
 800190a:	b25b      	sxtb	r3, r3
 800190c:	b2db      	uxtb	r3, r3
 800190e:	767b      	strb	r3, [r7, #25]
                ctrl_gas_data[1] = BME69X_SET_BITS(ctrl_gas_data[1], BME69X_RUN_GAS, run_gas);
 8001910:	7e7b      	ldrb	r3, [r7, #25]
 8001912:	b25b      	sxtb	r3, r3
 8001914:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8001918:	b25a      	sxtb	r2, r3
 800191a:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800191e:	015b      	lsls	r3, r3, #5
 8001920:	b25b      	sxtb	r3, r3
 8001922:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8001926:	b25b      	sxtb	r3, r3
 8001928:	4313      	orrs	r3, r2
 800192a:	b25b      	sxtb	r3, r3
 800192c:	b2db      	uxtb	r3, r3
 800192e:	767b      	strb	r3, [r7, #25]

                rslt = bme69x_set_regs(ctrl_gas_addr, ctrl_gas_data, 2, dev);
 8001930:	f107 0118 	add.w	r1, r7, #24
 8001934:	f107 0014 	add.w	r0, r7, #20
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	2202      	movs	r2, #2
 800193c:	f7ff fb74 	bl	8001028 <bme69x_set_regs>
 8001940:	4603      	mov	r3, r0
 8001942:	77fb      	strb	r3, [r7, #31]
 8001944:	e001      	b.n	800194a <bme69x_set_heatr_conf+0xfa>
            }
        }
    }
    else
    {
        rslt = BME69X_E_NULL_PTR;
 8001946:	23ff      	movs	r3, #255	@ 0xff
 8001948:	77fb      	strb	r3, [r7, #31]
    }

    return rslt;
 800194a:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800194e:	4618      	mov	r0, r3
 8001950:	3720      	adds	r7, #32
 8001952:	46bd      	mov	sp, r7
 8001954:	bd80      	pop	{r7, pc}
	...

08001958 <calc_temperature>:

#else

/* @brief This internal API is used to calculate the temperature value. */
static float calc_temperature(uint32_t temp_adc, const struct bme69x_dev *dev)
{
 8001958:	b5b0      	push	{r4, r5, r7, lr}
 800195a:	b090      	sub	sp, #64	@ 0x40
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
 8001960:	6039      	str	r1, [r7, #0]
    int32_t do1, cf;
    double dtk1, dtk2, temp1, temp2;
    double calc_temp;

    do1 = (int32_t)dev->calib.par_t1 << 8;
 8001962:	683b      	ldr	r3, [r7, #0]
 8001964:	8bdb      	ldrh	r3, [r3, #30]
 8001966:	021b      	lsls	r3, r3, #8
 8001968:	63fb      	str	r3, [r7, #60]	@ 0x3c
    dtk1 = (double)dev->calib.par_t2 / (double)(1ULL << 30);
 800196a:	683b      	ldr	r3, [r7, #0]
 800196c:	8c1b      	ldrh	r3, [r3, #32]
 800196e:	4618      	mov	r0, r3
 8001970:	f7fe fdcc 	bl	800050c <__aeabi_ui2d>
 8001974:	f04f 0200 	mov.w	r2, #0
 8001978:	4b2a      	ldr	r3, [pc, #168]	@ (8001a24 <calc_temperature+0xcc>)
 800197a:	f7fe ff6b 	bl	8000854 <__aeabi_ddiv>
 800197e:	4602      	mov	r2, r0
 8001980:	460b      	mov	r3, r1
 8001982:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    dtk2 = (double)dev->calib.par_t3 / (double)(1ULL << 48);
 8001986:	683b      	ldr	r3, [r7, #0]
 8001988:	f993 3022 	ldrsb.w	r3, [r3, #34]	@ 0x22
 800198c:	4618      	mov	r0, r3
 800198e:	f7fe fdcd 	bl	800052c <__aeabi_i2d>
 8001992:	f04f 0200 	mov.w	r2, #0
 8001996:	4b24      	ldr	r3, [pc, #144]	@ (8001a28 <calc_temperature+0xd0>)
 8001998:	f7fe ff5c 	bl	8000854 <__aeabi_ddiv>
 800199c:	4602      	mov	r2, r0
 800199e:	460b      	mov	r3, r1
 80019a0:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28

    cf = temp_adc - do1;
 80019a4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80019a6:	687a      	ldr	r2, [r7, #4]
 80019a8:	1ad3      	subs	r3, r2, r3
 80019aa:	627b      	str	r3, [r7, #36]	@ 0x24
    temp1 = (double)(cf * dtk1);
 80019ac:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80019ae:	f7fe fdbd 	bl	800052c <__aeabi_i2d>
 80019b2:	4602      	mov	r2, r0
 80019b4:	460b      	mov	r3, r1
 80019b6:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 80019ba:	f7fe fe21 	bl	8000600 <__aeabi_dmul>
 80019be:	4602      	mov	r2, r0
 80019c0:	460b      	mov	r3, r1
 80019c2:	e9c7 2306 	strd	r2, r3, [r7, #24]
    temp2 = (double)cf * (double)cf * dtk2;
 80019c6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80019c8:	f7fe fdb0 	bl	800052c <__aeabi_i2d>
 80019cc:	4604      	mov	r4, r0
 80019ce:	460d      	mov	r5, r1
 80019d0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80019d2:	f7fe fdab 	bl	800052c <__aeabi_i2d>
 80019d6:	4602      	mov	r2, r0
 80019d8:	460b      	mov	r3, r1
 80019da:	4620      	mov	r0, r4
 80019dc:	4629      	mov	r1, r5
 80019de:	f7fe fe0f 	bl	8000600 <__aeabi_dmul>
 80019e2:	4602      	mov	r2, r0
 80019e4:	460b      	mov	r3, r1
 80019e6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80019ea:	f7fe fe09 	bl	8000600 <__aeabi_dmul>
 80019ee:	4602      	mov	r2, r0
 80019f0:	460b      	mov	r3, r1
 80019f2:	e9c7 2304 	strd	r2, r3, [r7, #16]

    calc_temp = temp1 + temp2;
 80019f6:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80019fa:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80019fe:	f7fe fc49 	bl	8000294 <__adddf3>
 8001a02:	4602      	mov	r2, r0
 8001a04:	460b      	mov	r3, r1
 8001a06:	e9c7 2302 	strd	r2, r3, [r7, #8]

    return (float)calc_temp;
 8001a0a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001a0e:	f7ff f8cf 	bl	8000bb0 <__aeabi_d2f>
 8001a12:	4603      	mov	r3, r0
 8001a14:	ee07 3a90 	vmov	s15, r3
}
 8001a18:	eeb0 0a67 	vmov.f32	s0, s15
 8001a1c:	3740      	adds	r7, #64	@ 0x40
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bdb0      	pop	{r4, r5, r7, pc}
 8001a22:	bf00      	nop
 8001a24:	41d00000 	.word	0x41d00000
 8001a28:	42f00000 	.word	0x42f00000

08001a2c <calc_pressure>:

/* @brief This internal API is used to calculate the pressure value. */
static float calc_pressure(uint32_t pres_adc, float comp_temperature, const struct bme69x_dev *dev)
{
 8001a2c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001a30:	b0a4      	sub	sp, #144	@ 0x90
 8001a32:	af00      	add	r7, sp, #0
 8001a34:	60f8      	str	r0, [r7, #12]
 8001a36:	ed87 0a02 	vstr	s0, [r7, #8]
 8001a3a:	6079      	str	r1, [r7, #4]
    double s;
    double tk1s, tk2s, tk3s;
    double nls, tknls, nls3;
    double calc_pres, tmp1, tmp2, tmp3, tmp4;

    o = (uint32_t)dev->calib.par_p1 * (uint32_t)(1ULL << 3);
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001a40:	00db      	lsls	r3, r3, #3
 8001a42:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    tk10 = (double)dev->calib.par_p2 / (double)(1ULL << 6);
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	f7fe fd5e 	bl	800050c <__aeabi_ui2d>
 8001a50:	f04f 0200 	mov.w	r2, #0
 8001a54:	4bd4      	ldr	r3, [pc, #848]	@ (8001da8 <calc_pressure+0x37c>)
 8001a56:	f7fe fefd 	bl	8000854 <__aeabi_ddiv>
 8001a5a:	4602      	mov	r2, r0
 8001a5c:	460b      	mov	r3, r1
 8001a5e:	e9c7 2320 	strd	r2, r3, [r7, #128]	@ 0x80
    tk20 = (double)dev->calib.par_p3 / (double)(1ULL << 8);
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	f993 302e 	ldrsb.w	r3, [r3, #46]	@ 0x2e
 8001a68:	4618      	mov	r0, r3
 8001a6a:	f7fe fd5f 	bl	800052c <__aeabi_i2d>
 8001a6e:	f04f 0200 	mov.w	r2, #0
 8001a72:	4bce      	ldr	r3, [pc, #824]	@ (8001dac <calc_pressure+0x380>)
 8001a74:	f7fe feee 	bl	8000854 <__aeabi_ddiv>
 8001a78:	4602      	mov	r2, r0
 8001a7a:	460b      	mov	r3, r1
 8001a7c:	e9c7 231e 	strd	r2, r3, [r7, #120]	@ 0x78
    tk30 = (double)dev->calib.par_p4 / (double)(1ULL << 15);
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	f993 302f 	ldrsb.w	r3, [r3, #47]	@ 0x2f
 8001a86:	4618      	mov	r0, r3
 8001a88:	f7fe fd50 	bl	800052c <__aeabi_i2d>
 8001a8c:	f04f 0200 	mov.w	r2, #0
 8001a90:	4bc7      	ldr	r3, [pc, #796]	@ (8001db0 <calc_pressure+0x384>)
 8001a92:	f7fe fedf 	bl	8000854 <__aeabi_ddiv>
 8001a96:	4602      	mov	r2, r0
 8001a98:	460b      	mov	r3, r1
 8001a9a:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70

    s = ((double)dev->calib.par_p5 - (double)(1ULL << 14)) / (double)(1ULL << 20);
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	@ 0x24
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	f7fe fd41 	bl	800052c <__aeabi_i2d>
 8001aaa:	f04f 0200 	mov.w	r2, #0
 8001aae:	4bc1      	ldr	r3, [pc, #772]	@ (8001db4 <calc_pressure+0x388>)
 8001ab0:	f7fe fbee 	bl	8000290 <__aeabi_dsub>
 8001ab4:	4602      	mov	r2, r0
 8001ab6:	460b      	mov	r3, r1
 8001ab8:	4610      	mov	r0, r2
 8001aba:	4619      	mov	r1, r3
 8001abc:	f04f 0200 	mov.w	r2, #0
 8001ac0:	4bbd      	ldr	r3, [pc, #756]	@ (8001db8 <calc_pressure+0x38c>)
 8001ac2:	f7fe fec7 	bl	8000854 <__aeabi_ddiv>
 8001ac6:	4602      	mov	r2, r0
 8001ac8:	460b      	mov	r3, r1
 8001aca:	e9c7 231a 	strd	r2, r3, [r7, #104]	@ 0x68
    tk1s = ((double)dev->calib.par_p6 - (double)(1ULL << 14)) / (double)(1ULL << 29);
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	@ 0x26
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	f7fe fd29 	bl	800052c <__aeabi_i2d>
 8001ada:	f04f 0200 	mov.w	r2, #0
 8001ade:	4bb5      	ldr	r3, [pc, #724]	@ (8001db4 <calc_pressure+0x388>)
 8001ae0:	f7fe fbd6 	bl	8000290 <__aeabi_dsub>
 8001ae4:	4602      	mov	r2, r0
 8001ae6:	460b      	mov	r3, r1
 8001ae8:	4610      	mov	r0, r2
 8001aea:	4619      	mov	r1, r3
 8001aec:	f04f 0200 	mov.w	r2, #0
 8001af0:	4bb2      	ldr	r3, [pc, #712]	@ (8001dbc <calc_pressure+0x390>)
 8001af2:	f7fe feaf 	bl	8000854 <__aeabi_ddiv>
 8001af6:	4602      	mov	r2, r0
 8001af8:	460b      	mov	r3, r1
 8001afa:	e9c7 2318 	strd	r2, r3, [r7, #96]	@ 0x60
    tk2s = (double)dev->calib.par_p7 / (double)(1ULL << 32);
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	f993 3028 	ldrsb.w	r3, [r3, #40]	@ 0x28
 8001b04:	4618      	mov	r0, r3
 8001b06:	f7fe fd11 	bl	800052c <__aeabi_i2d>
 8001b0a:	f04f 0200 	mov.w	r2, #0
 8001b0e:	4bac      	ldr	r3, [pc, #688]	@ (8001dc0 <calc_pressure+0x394>)
 8001b10:	f7fe fea0 	bl	8000854 <__aeabi_ddiv>
 8001b14:	4602      	mov	r2, r0
 8001b16:	460b      	mov	r3, r1
 8001b18:	e9c7 2316 	strd	r2, r3, [r7, #88]	@ 0x58
    tk3s = (double)dev->calib.par_p8 / (double)(1ULL << 37);
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	f993 3029 	ldrsb.w	r3, [r3, #41]	@ 0x29
 8001b22:	4618      	mov	r0, r3
 8001b24:	f7fe fd02 	bl	800052c <__aeabi_i2d>
 8001b28:	f04f 0200 	mov.w	r2, #0
 8001b2c:	4ba5      	ldr	r3, [pc, #660]	@ (8001dc4 <calc_pressure+0x398>)
 8001b2e:	f7fe fe91 	bl	8000854 <__aeabi_ddiv>
 8001b32:	4602      	mov	r2, r0
 8001b34:	460b      	mov	r3, r1
 8001b36:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50

    nls = (double)dev->calib.par_p9 / (double)(1ULL << 48);
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8001b40:	4618      	mov	r0, r3
 8001b42:	f7fe fcf3 	bl	800052c <__aeabi_i2d>
 8001b46:	f04f 0200 	mov.w	r2, #0
 8001b4a:	4b9f      	ldr	r3, [pc, #636]	@ (8001dc8 <calc_pressure+0x39c>)
 8001b4c:	f7fe fe82 	bl	8000854 <__aeabi_ddiv>
 8001b50:	4602      	mov	r2, r0
 8001b52:	460b      	mov	r3, r1
 8001b54:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
    tknls = (double)dev->calib.par_p10 / (double)(1ULL << 48);
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	f993 3032 	ldrsb.w	r3, [r3, #50]	@ 0x32
 8001b5e:	4618      	mov	r0, r3
 8001b60:	f7fe fce4 	bl	800052c <__aeabi_i2d>
 8001b64:	f04f 0200 	mov.w	r2, #0
 8001b68:	4b97      	ldr	r3, [pc, #604]	@ (8001dc8 <calc_pressure+0x39c>)
 8001b6a:	f7fe fe73 	bl	8000854 <__aeabi_ddiv>
 8001b6e:	4602      	mov	r2, r0
 8001b70:	460b      	mov	r3, r1
 8001b72:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40

    /*
     * NLS3 = par_p11 / 2^65
     * 2^65 is exceeding the width of 'double' datatype and hence we splitted into two factors since A^(x+y) = A^x * A^y
     */
    nls3 = (double)dev->calib.par_p11 / ((double)(1ULL << 35) * (double)(1ULL << 30));
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	f993 3033 	ldrsb.w	r3, [r3, #51]	@ 0x33
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	f7fe fcd5 	bl	800052c <__aeabi_i2d>
 8001b82:	f04f 0200 	mov.w	r2, #0
 8001b86:	f04f 4388 	mov.w	r3, #1140850688	@ 0x44000000
 8001b8a:	f7fe fe63 	bl	8000854 <__aeabi_ddiv>
 8001b8e:	4602      	mov	r2, r0
 8001b90:	460b      	mov	r3, r1
 8001b92:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38

    tmp1 = (double)o + (tk10 * comp_temperature) + (tk20 * comp_temperature * comp_temperature) +
 8001b96:	f8d7 008c 	ldr.w	r0, [r7, #140]	@ 0x8c
 8001b9a:	f7fe fcb7 	bl	800050c <__aeabi_ui2d>
 8001b9e:	4604      	mov	r4, r0
 8001ba0:	460d      	mov	r5, r1
 8001ba2:	68b8      	ldr	r0, [r7, #8]
 8001ba4:	f7fe fcd4 	bl	8000550 <__aeabi_f2d>
 8001ba8:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
 8001bac:	f7fe fd28 	bl	8000600 <__aeabi_dmul>
 8001bb0:	4602      	mov	r2, r0
 8001bb2:	460b      	mov	r3, r1
 8001bb4:	4620      	mov	r0, r4
 8001bb6:	4629      	mov	r1, r5
 8001bb8:	f7fe fb6c 	bl	8000294 <__adddf3>
 8001bbc:	4602      	mov	r2, r0
 8001bbe:	460b      	mov	r3, r1
 8001bc0:	4614      	mov	r4, r2
 8001bc2:	461d      	mov	r5, r3
 8001bc4:	68b8      	ldr	r0, [r7, #8]
 8001bc6:	f7fe fcc3 	bl	8000550 <__aeabi_f2d>
 8001bca:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	@ 0x78
 8001bce:	f7fe fd17 	bl	8000600 <__aeabi_dmul>
 8001bd2:	4602      	mov	r2, r0
 8001bd4:	460b      	mov	r3, r1
 8001bd6:	4690      	mov	r8, r2
 8001bd8:	4699      	mov	r9, r3
 8001bda:	68b8      	ldr	r0, [r7, #8]
 8001bdc:	f7fe fcb8 	bl	8000550 <__aeabi_f2d>
 8001be0:	4602      	mov	r2, r0
 8001be2:	460b      	mov	r3, r1
 8001be4:	4640      	mov	r0, r8
 8001be6:	4649      	mov	r1, r9
 8001be8:	f7fe fd0a 	bl	8000600 <__aeabi_dmul>
 8001bec:	4602      	mov	r2, r0
 8001bee:	460b      	mov	r3, r1
 8001bf0:	4620      	mov	r0, r4
 8001bf2:	4629      	mov	r1, r5
 8001bf4:	f7fe fb4e 	bl	8000294 <__adddf3>
 8001bf8:	4602      	mov	r2, r0
 8001bfa:	460b      	mov	r3, r1
 8001bfc:	4614      	mov	r4, r2
 8001bfe:	461d      	mov	r5, r3
           (tk30 * comp_temperature * comp_temperature * comp_temperature);
 8001c00:	68b8      	ldr	r0, [r7, #8]
 8001c02:	f7fe fca5 	bl	8000550 <__aeabi_f2d>
 8001c06:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8001c0a:	f7fe fcf9 	bl	8000600 <__aeabi_dmul>
 8001c0e:	4602      	mov	r2, r0
 8001c10:	460b      	mov	r3, r1
 8001c12:	4690      	mov	r8, r2
 8001c14:	4699      	mov	r9, r3
 8001c16:	68b8      	ldr	r0, [r7, #8]
 8001c18:	f7fe fc9a 	bl	8000550 <__aeabi_f2d>
 8001c1c:	4602      	mov	r2, r0
 8001c1e:	460b      	mov	r3, r1
 8001c20:	4640      	mov	r0, r8
 8001c22:	4649      	mov	r1, r9
 8001c24:	f7fe fcec 	bl	8000600 <__aeabi_dmul>
 8001c28:	4602      	mov	r2, r0
 8001c2a:	460b      	mov	r3, r1
 8001c2c:	4690      	mov	r8, r2
 8001c2e:	4699      	mov	r9, r3
 8001c30:	68b8      	ldr	r0, [r7, #8]
 8001c32:	f7fe fc8d 	bl	8000550 <__aeabi_f2d>
 8001c36:	4602      	mov	r2, r0
 8001c38:	460b      	mov	r3, r1
 8001c3a:	4640      	mov	r0, r8
 8001c3c:	4649      	mov	r1, r9
 8001c3e:	f7fe fcdf 	bl	8000600 <__aeabi_dmul>
 8001c42:	4602      	mov	r2, r0
 8001c44:	460b      	mov	r3, r1
    tmp1 = (double)o + (tk10 * comp_temperature) + (tk20 * comp_temperature * comp_temperature) +
 8001c46:	4620      	mov	r0, r4
 8001c48:	4629      	mov	r1, r5
 8001c4a:	f7fe fb23 	bl	8000294 <__adddf3>
 8001c4e:	4602      	mov	r2, r0
 8001c50:	460b      	mov	r3, r1
 8001c52:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30

    tmp2 = (double)pres_adc *
 8001c56:	68f8      	ldr	r0, [r7, #12]
 8001c58:	f7fe fc58 	bl	800050c <__aeabi_ui2d>
 8001c5c:	4604      	mov	r4, r0
 8001c5e:	460d      	mov	r5, r1
           ((double)s + (tk1s * comp_temperature) + (tk2s * comp_temperature * comp_temperature) +
 8001c60:	68b8      	ldr	r0, [r7, #8]
 8001c62:	f7fe fc75 	bl	8000550 <__aeabi_f2d>
 8001c66:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 8001c6a:	f7fe fcc9 	bl	8000600 <__aeabi_dmul>
 8001c6e:	4602      	mov	r2, r0
 8001c70:	460b      	mov	r3, r1
 8001c72:	4610      	mov	r0, r2
 8001c74:	4619      	mov	r1, r3
 8001c76:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 8001c7a:	f7fe fb0b 	bl	8000294 <__adddf3>
 8001c7e:	4602      	mov	r2, r0
 8001c80:	460b      	mov	r3, r1
 8001c82:	4690      	mov	r8, r2
 8001c84:	4699      	mov	r9, r3
 8001c86:	68b8      	ldr	r0, [r7, #8]
 8001c88:	f7fe fc62 	bl	8000550 <__aeabi_f2d>
 8001c8c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8001c90:	f7fe fcb6 	bl	8000600 <__aeabi_dmul>
 8001c94:	4602      	mov	r2, r0
 8001c96:	460b      	mov	r3, r1
 8001c98:	4692      	mov	sl, r2
 8001c9a:	469b      	mov	fp, r3
 8001c9c:	68b8      	ldr	r0, [r7, #8]
 8001c9e:	f7fe fc57 	bl	8000550 <__aeabi_f2d>
 8001ca2:	4602      	mov	r2, r0
 8001ca4:	460b      	mov	r3, r1
 8001ca6:	4650      	mov	r0, sl
 8001ca8:	4659      	mov	r1, fp
 8001caa:	f7fe fca9 	bl	8000600 <__aeabi_dmul>
 8001cae:	4602      	mov	r2, r0
 8001cb0:	460b      	mov	r3, r1
 8001cb2:	4640      	mov	r0, r8
 8001cb4:	4649      	mov	r1, r9
 8001cb6:	f7fe faed 	bl	8000294 <__adddf3>
 8001cba:	4602      	mov	r2, r0
 8001cbc:	460b      	mov	r3, r1
 8001cbe:	4690      	mov	r8, r2
 8001cc0:	4699      	mov	r9, r3
            (tk3s * comp_temperature * comp_temperature * comp_temperature));
 8001cc2:	68b8      	ldr	r0, [r7, #8]
 8001cc4:	f7fe fc44 	bl	8000550 <__aeabi_f2d>
 8001cc8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8001ccc:	f7fe fc98 	bl	8000600 <__aeabi_dmul>
 8001cd0:	4602      	mov	r2, r0
 8001cd2:	460b      	mov	r3, r1
 8001cd4:	4692      	mov	sl, r2
 8001cd6:	469b      	mov	fp, r3
 8001cd8:	68b8      	ldr	r0, [r7, #8]
 8001cda:	f7fe fc39 	bl	8000550 <__aeabi_f2d>
 8001cde:	4602      	mov	r2, r0
 8001ce0:	460b      	mov	r3, r1
 8001ce2:	4650      	mov	r0, sl
 8001ce4:	4659      	mov	r1, fp
 8001ce6:	f7fe fc8b 	bl	8000600 <__aeabi_dmul>
 8001cea:	4602      	mov	r2, r0
 8001cec:	460b      	mov	r3, r1
 8001cee:	4692      	mov	sl, r2
 8001cf0:	469b      	mov	fp, r3
 8001cf2:	68b8      	ldr	r0, [r7, #8]
 8001cf4:	f7fe fc2c 	bl	8000550 <__aeabi_f2d>
 8001cf8:	4602      	mov	r2, r0
 8001cfa:	460b      	mov	r3, r1
 8001cfc:	4650      	mov	r0, sl
 8001cfe:	4659      	mov	r1, fp
 8001d00:	f7fe fc7e 	bl	8000600 <__aeabi_dmul>
 8001d04:	4602      	mov	r2, r0
 8001d06:	460b      	mov	r3, r1
           ((double)s + (tk1s * comp_temperature) + (tk2s * comp_temperature * comp_temperature) +
 8001d08:	4640      	mov	r0, r8
 8001d0a:	4649      	mov	r1, r9
 8001d0c:	f7fe fac2 	bl	8000294 <__adddf3>
 8001d10:	4602      	mov	r2, r0
 8001d12:	460b      	mov	r3, r1
    tmp2 = (double)pres_adc *
 8001d14:	4620      	mov	r0, r4
 8001d16:	4629      	mov	r1, r5
 8001d18:	f7fe fc72 	bl	8000600 <__aeabi_dmul>
 8001d1c:	4602      	mov	r2, r0
 8001d1e:	460b      	mov	r3, r1
 8001d20:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28

    tmp3 = (double)pres_adc * (double)pres_adc * (nls + (tknls * comp_temperature));
 8001d24:	68f8      	ldr	r0, [r7, #12]
 8001d26:	f7fe fbf1 	bl	800050c <__aeabi_ui2d>
 8001d2a:	4604      	mov	r4, r0
 8001d2c:	460d      	mov	r5, r1
 8001d2e:	68f8      	ldr	r0, [r7, #12]
 8001d30:	f7fe fbec 	bl	800050c <__aeabi_ui2d>
 8001d34:	4602      	mov	r2, r0
 8001d36:	460b      	mov	r3, r1
 8001d38:	4620      	mov	r0, r4
 8001d3a:	4629      	mov	r1, r5
 8001d3c:	f7fe fc60 	bl	8000600 <__aeabi_dmul>
 8001d40:	4602      	mov	r2, r0
 8001d42:	460b      	mov	r3, r1
 8001d44:	4614      	mov	r4, r2
 8001d46:	461d      	mov	r5, r3
 8001d48:	68b8      	ldr	r0, [r7, #8]
 8001d4a:	f7fe fc01 	bl	8000550 <__aeabi_f2d>
 8001d4e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8001d52:	f7fe fc55 	bl	8000600 <__aeabi_dmul>
 8001d56:	4602      	mov	r2, r0
 8001d58:	460b      	mov	r3, r1
 8001d5a:	4610      	mov	r0, r2
 8001d5c:	4619      	mov	r1, r3
 8001d5e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8001d62:	f7fe fa97 	bl	8000294 <__adddf3>
 8001d66:	4602      	mov	r2, r0
 8001d68:	460b      	mov	r3, r1
 8001d6a:	4620      	mov	r0, r4
 8001d6c:	4629      	mov	r1, r5
 8001d6e:	f7fe fc47 	bl	8000600 <__aeabi_dmul>
 8001d72:	4602      	mov	r2, r0
 8001d74:	460b      	mov	r3, r1
 8001d76:	e9c7 2308 	strd	r2, r3, [r7, #32]
    tmp4 = (double)pres_adc * (double)pres_adc * (double)pres_adc * nls3;
 8001d7a:	68f8      	ldr	r0, [r7, #12]
 8001d7c:	f7fe fbc6 	bl	800050c <__aeabi_ui2d>
 8001d80:	4604      	mov	r4, r0
 8001d82:	460d      	mov	r5, r1
 8001d84:	68f8      	ldr	r0, [r7, #12]
 8001d86:	f7fe fbc1 	bl	800050c <__aeabi_ui2d>
 8001d8a:	4602      	mov	r2, r0
 8001d8c:	460b      	mov	r3, r1
 8001d8e:	4620      	mov	r0, r4
 8001d90:	4629      	mov	r1, r5
 8001d92:	f7fe fc35 	bl	8000600 <__aeabi_dmul>
 8001d96:	4602      	mov	r2, r0
 8001d98:	460b      	mov	r3, r1
 8001d9a:	4614      	mov	r4, r2
 8001d9c:	461d      	mov	r5, r3
 8001d9e:	68f8      	ldr	r0, [r7, #12]
 8001da0:	f7fe fbb4 	bl	800050c <__aeabi_ui2d>
 8001da4:	4602      	mov	r2, r0
 8001da6:	e011      	b.n	8001dcc <calc_pressure+0x3a0>
 8001da8:	40500000 	.word	0x40500000
 8001dac:	40700000 	.word	0x40700000
 8001db0:	40e00000 	.word	0x40e00000
 8001db4:	40d00000 	.word	0x40d00000
 8001db8:	41300000 	.word	0x41300000
 8001dbc:	41c00000 	.word	0x41c00000
 8001dc0:	41f00000 	.word	0x41f00000
 8001dc4:	42400000 	.word	0x42400000
 8001dc8:	42f00000 	.word	0x42f00000
 8001dcc:	460b      	mov	r3, r1
 8001dce:	4620      	mov	r0, r4
 8001dd0:	4629      	mov	r1, r5
 8001dd2:	f7fe fc15 	bl	8000600 <__aeabi_dmul>
 8001dd6:	4602      	mov	r2, r0
 8001dd8:	460b      	mov	r3, r1
 8001dda:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 8001dde:	f7fe fc0f 	bl	8000600 <__aeabi_dmul>
 8001de2:	4602      	mov	r2, r0
 8001de4:	460b      	mov	r3, r1
 8001de6:	e9c7 2306 	strd	r2, r3, [r7, #24]

    calc_pres = tmp1 + tmp2 + tmp3 + tmp4;
 8001dea:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001dee:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8001df2:	f7fe fa4f 	bl	8000294 <__adddf3>
 8001df6:	4602      	mov	r2, r0
 8001df8:	460b      	mov	r3, r1
 8001dfa:	4610      	mov	r0, r2
 8001dfc:	4619      	mov	r1, r3
 8001dfe:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001e02:	f7fe fa47 	bl	8000294 <__adddf3>
 8001e06:	4602      	mov	r2, r0
 8001e08:	460b      	mov	r3, r1
 8001e0a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001e0e:	f7fe fa41 	bl	8000294 <__adddf3>
 8001e12:	4602      	mov	r2, r0
 8001e14:	460b      	mov	r3, r1
 8001e16:	e9c7 2304 	strd	r2, r3, [r7, #16]

    return (float)calc_pres;
 8001e1a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001e1e:	f7fe fec7 	bl	8000bb0 <__aeabi_d2f>
 8001e22:	4603      	mov	r3, r0
 8001e24:	ee07 3a90 	vmov	s15, r3
}
 8001e28:	eeb0 0a67 	vmov.f32	s0, s15
 8001e2c:	3790      	adds	r7, #144	@ 0x90
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08001e34 <calc_humidity>:

/* This internal API is used to calculate the humidity in integer */
static float calc_humidity(uint16_t hum_adc, float comp_temperature, const struct bme69x_dev *dev)
{
 8001e34:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001e38:	b09a      	sub	sp, #104	@ 0x68
 8001e3a:	af00      	add	r7, sp, #0
 8001e3c:	4603      	mov	r3, r0
 8001e3e:	ed87 0a02 	vstr	s0, [r7, #8]
 8001e42:	6079      	str	r1, [r7, #4]
 8001e44:	81fb      	strh	r3, [r7, #14]
    double oh, tk10h, sh;
    double tk1sh, tk2sh, hlin2;
    double hoff, hsens;
    double temp_comp, calc_hum, temp_var_1;

    temp_comp = (comp_temperature * 5120) - 76800;
 8001e46:	edd7 7a02 	vldr	s15, [r7, #8]
 8001e4a:	ed9f 7a78 	vldr	s14, [pc, #480]	@ 800202c <calc_humidity+0x1f8>
 8001e4e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001e52:	ed9f 7a77 	vldr	s14, [pc, #476]	@ 8002030 <calc_humidity+0x1fc>
 8001e56:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001e5a:	ee17 0a90 	vmov	r0, s15
 8001e5e:	f7fe fb77 	bl	8000550 <__aeabi_f2d>
 8001e62:	4602      	mov	r2, r0
 8001e64:	460b      	mov	r3, r1
 8001e66:	e9c7 2318 	strd	r2, r3, [r7, #96]	@ 0x60

    oh = (double)dev->calib.par_h1 * (double)(1ULL << 6);
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8001e70:	4618      	mov	r0, r3
 8001e72:	f7fe fb5b 	bl	800052c <__aeabi_i2d>
 8001e76:	f04f 0200 	mov.w	r2, #0
 8001e7a:	4b6e      	ldr	r3, [pc, #440]	@ (8002034 <calc_humidity+0x200>)
 8001e7c:	f7fe fbc0 	bl	8000600 <__aeabi_dmul>
 8001e80:	4602      	mov	r2, r0
 8001e82:	460b      	mov	r3, r1
 8001e84:	e9c7 2316 	strd	r2, r3, [r7, #88]	@ 0x58
    sh = (double)dev->calib.par_h5 / (double)(1ULL << 16);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8001e8e:	4618      	mov	r0, r3
 8001e90:	f7fe fb4c 	bl	800052c <__aeabi_i2d>
 8001e94:	f04f 0200 	mov.w	r2, #0
 8001e98:	4b67      	ldr	r3, [pc, #412]	@ (8002038 <calc_humidity+0x204>)
 8001e9a:	f7fe fcdb 	bl	8000854 <__aeabi_ddiv>
 8001e9e:	4602      	mov	r2, r0
 8001ea0:	460b      	mov	r3, r1
 8001ea2:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
    tk10h = (double)dev->calib.par_h2 / (double)(1ULL << 14);
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	f993 3012 	ldrsb.w	r3, [r3, #18]
 8001eac:	4618      	mov	r0, r3
 8001eae:	f7fe fb3d 	bl	800052c <__aeabi_i2d>
 8001eb2:	f04f 0200 	mov.w	r2, #0
 8001eb6:	4b61      	ldr	r3, [pc, #388]	@ (800203c <calc_humidity+0x208>)
 8001eb8:	f7fe fccc 	bl	8000854 <__aeabi_ddiv>
 8001ebc:	4602      	mov	r2, r0
 8001ebe:	460b      	mov	r3, r1
 8001ec0:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
    tk1sh = (double)dev->calib.par_h4 / (double)(1ULL << 26);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	f993 3014 	ldrsb.w	r3, [r3, #20]
 8001eca:	4618      	mov	r0, r3
 8001ecc:	f7fe fb2e 	bl	800052c <__aeabi_i2d>
 8001ed0:	f04f 0200 	mov.w	r2, #0
 8001ed4:	4b5a      	ldr	r3, [pc, #360]	@ (8002040 <calc_humidity+0x20c>)
 8001ed6:	f7fe fcbd 	bl	8000854 <__aeabi_ddiv>
 8001eda:	4602      	mov	r2, r0
 8001edc:	460b      	mov	r3, r1
 8001ede:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
    tk2sh = (double)dev->calib.par_h3 / (double)(1ULL << 26);
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	7cdb      	ldrb	r3, [r3, #19]
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	f7fe fb10 	bl	800050c <__aeabi_ui2d>
 8001eec:	f04f 0200 	mov.w	r2, #0
 8001ef0:	4b53      	ldr	r3, [pc, #332]	@ (8002040 <calc_humidity+0x20c>)
 8001ef2:	f7fe fcaf 	bl	8000854 <__aeabi_ddiv>
 8001ef6:	4602      	mov	r2, r0
 8001ef8:	460b      	mov	r3, r1
 8001efa:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
    hlin2 = (double)dev->calib.par_h6 / (double)(1ULL << 19);
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	7e1b      	ldrb	r3, [r3, #24]
 8001f02:	4618      	mov	r0, r3
 8001f04:	f7fe fb02 	bl	800050c <__aeabi_ui2d>
 8001f08:	f04f 0200 	mov.w	r2, #0
 8001f0c:	4b4d      	ldr	r3, [pc, #308]	@ (8002044 <calc_humidity+0x210>)
 8001f0e:	f7fe fca1 	bl	8000854 <__aeabi_ddiv>
 8001f12:	4602      	mov	r2, r0
 8001f14:	460b      	mov	r3, r1
 8001f16:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30

    hoff = (double)hum_adc - (oh + tk10h * temp_comp);
 8001f1a:	89fb      	ldrh	r3, [r7, #14]
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	f7fe faf5 	bl	800050c <__aeabi_ui2d>
 8001f22:	4604      	mov	r4, r0
 8001f24:	460d      	mov	r5, r1
 8001f26:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 8001f2a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 8001f2e:	f7fe fb67 	bl	8000600 <__aeabi_dmul>
 8001f32:	4602      	mov	r2, r0
 8001f34:	460b      	mov	r3, r1
 8001f36:	4610      	mov	r0, r2
 8001f38:	4619      	mov	r1, r3
 8001f3a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8001f3e:	f7fe f9a9 	bl	8000294 <__adddf3>
 8001f42:	4602      	mov	r2, r0
 8001f44:	460b      	mov	r3, r1
 8001f46:	4620      	mov	r0, r4
 8001f48:	4629      	mov	r1, r5
 8001f4a:	f7fe f9a1 	bl	8000290 <__aeabi_dsub>
 8001f4e:	4602      	mov	r2, r0
 8001f50:	460b      	mov	r3, r1
 8001f52:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    hsens = hoff * sh * (1 + (tk1sh * temp_comp) + (tk1sh * tk2sh * temp_comp * temp_comp));
 8001f56:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8001f5a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8001f5e:	f7fe fb4f 	bl	8000600 <__aeabi_dmul>
 8001f62:	4602      	mov	r2, r0
 8001f64:	460b      	mov	r3, r1
 8001f66:	4614      	mov	r4, r2
 8001f68:	461d      	mov	r5, r3
 8001f6a:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 8001f6e:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 8001f72:	f7fe fb45 	bl	8000600 <__aeabi_dmul>
 8001f76:	4602      	mov	r2, r0
 8001f78:	460b      	mov	r3, r1
 8001f7a:	4610      	mov	r0, r2
 8001f7c:	4619      	mov	r1, r3
 8001f7e:	f04f 0200 	mov.w	r2, #0
 8001f82:	4b31      	ldr	r3, [pc, #196]	@ (8002048 <calc_humidity+0x214>)
 8001f84:	f7fe f986 	bl	8000294 <__adddf3>
 8001f88:	4602      	mov	r2, r0
 8001f8a:	460b      	mov	r3, r1
 8001f8c:	4690      	mov	r8, r2
 8001f8e:	4699      	mov	r9, r3
 8001f90:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8001f94:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 8001f98:	f7fe fb32 	bl	8000600 <__aeabi_dmul>
 8001f9c:	4602      	mov	r2, r0
 8001f9e:	460b      	mov	r3, r1
 8001fa0:	4610      	mov	r0, r2
 8001fa2:	4619      	mov	r1, r3
 8001fa4:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 8001fa8:	f7fe fb2a 	bl	8000600 <__aeabi_dmul>
 8001fac:	4602      	mov	r2, r0
 8001fae:	460b      	mov	r3, r1
 8001fb0:	4610      	mov	r0, r2
 8001fb2:	4619      	mov	r1, r3
 8001fb4:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 8001fb8:	f7fe fb22 	bl	8000600 <__aeabi_dmul>
 8001fbc:	4602      	mov	r2, r0
 8001fbe:	460b      	mov	r3, r1
 8001fc0:	4640      	mov	r0, r8
 8001fc2:	4649      	mov	r1, r9
 8001fc4:	f7fe f966 	bl	8000294 <__adddf3>
 8001fc8:	4602      	mov	r2, r0
 8001fca:	460b      	mov	r3, r1
 8001fcc:	4620      	mov	r0, r4
 8001fce:	4629      	mov	r1, r5
 8001fd0:	f7fe fb16 	bl	8000600 <__aeabi_dmul>
 8001fd4:	4602      	mov	r2, r0
 8001fd6:	460b      	mov	r3, r1
 8001fd8:	e9c7 2308 	strd	r2, r3, [r7, #32]
    temp_var_1 = hsens * (1 - hlin2 * hsens);
 8001fdc:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001fe0:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8001fe4:	f7fe fb0c 	bl	8000600 <__aeabi_dmul>
 8001fe8:	4602      	mov	r2, r0
 8001fea:	460b      	mov	r3, r1
 8001fec:	f04f 0000 	mov.w	r0, #0
 8001ff0:	4915      	ldr	r1, [pc, #84]	@ (8002048 <calc_humidity+0x214>)
 8001ff2:	f7fe f94d 	bl	8000290 <__aeabi_dsub>
 8001ff6:	4602      	mov	r2, r0
 8001ff8:	460b      	mov	r3, r1
 8001ffa:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001ffe:	f7fe faff 	bl	8000600 <__aeabi_dmul>
 8002002:	4602      	mov	r2, r0
 8002004:	460b      	mov	r3, r1
 8002006:	e9c7 2306 	strd	r2, r3, [r7, #24]
    calc_hum = temp_var_1;
 800200a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800200e:	e9c7 2304 	strd	r2, r3, [r7, #16]

    return (float)calc_hum;
 8002012:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002016:	f7fe fdcb 	bl	8000bb0 <__aeabi_d2f>
 800201a:	4603      	mov	r3, r0
 800201c:	ee07 3a90 	vmov	s15, r3
}
 8002020:	eeb0 0a67 	vmov.f32	s0, s15
 8002024:	3768      	adds	r7, #104	@ 0x68
 8002026:	46bd      	mov	sp, r7
 8002028:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800202c:	45a00000 	.word	0x45a00000
 8002030:	47960000 	.word	0x47960000
 8002034:	40500000 	.word	0x40500000
 8002038:	40f00000 	.word	0x40f00000
 800203c:	40d00000 	.word	0x40d00000
 8002040:	41900000 	.word	0x41900000
 8002044:	41200000 	.word	0x41200000
 8002048:	3ff00000 	.word	0x3ff00000

0800204c <calc_gas_resistance>:

/* This internal API is used to calculate the gas resistance value for BME69x variant in float */
static float calc_gas_resistance(uint16_t gas_res_adc, uint8_t gas_range)
{
 800204c:	b480      	push	{r7}
 800204e:	b087      	sub	sp, #28
 8002050:	af00      	add	r7, sp, #0
 8002052:	4603      	mov	r3, r0
 8002054:	460a      	mov	r2, r1
 8002056:	80fb      	strh	r3, [r7, #6]
 8002058:	4613      	mov	r3, r2
 800205a:	717b      	strb	r3, [r7, #5]
    float calc_gas_res;

    uint32_t var1 = UINT32_C(262144) >> gas_range;
 800205c:	797b      	ldrb	r3, [r7, #5]
 800205e:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8002062:	fa22 f303 	lsr.w	r3, r2, r3
 8002066:	617b      	str	r3, [r7, #20]
    int32_t var2 = (int32_t)gas_res_adc - INT32_C(512);
 8002068:	88fb      	ldrh	r3, [r7, #6]
 800206a:	f5a3 7300 	sub.w	r3, r3, #512	@ 0x200
 800206e:	613b      	str	r3, [r7, #16]

    var2 *= INT32_C(3);
 8002070:	693a      	ldr	r2, [r7, #16]
 8002072:	4613      	mov	r3, r2
 8002074:	005b      	lsls	r3, r3, #1
 8002076:	4413      	add	r3, r2
 8002078:	613b      	str	r3, [r7, #16]
    var2 = INT32_C(4096) + var2;
 800207a:	693b      	ldr	r3, [r7, #16]
 800207c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002080:	613b      	str	r3, [r7, #16]

    calc_gas_res = 1000000.0f * (float)var1 / (float)var2;
 8002082:	697b      	ldr	r3, [r7, #20]
 8002084:	ee07 3a90 	vmov	s15, r3
 8002088:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800208c:	ed9f 7a0b 	vldr	s14, [pc, #44]	@ 80020bc <calc_gas_resistance+0x70>
 8002090:	ee67 6a87 	vmul.f32	s13, s15, s14
 8002094:	693b      	ldr	r3, [r7, #16]
 8002096:	ee07 3a90 	vmov	s15, r3
 800209a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800209e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80020a2:	edc7 7a03 	vstr	s15, [r7, #12]

    return calc_gas_res;
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	ee07 3a90 	vmov	s15, r3
}
 80020ac:	eeb0 0a67 	vmov.f32	s0, s15
 80020b0:	371c      	adds	r7, #28
 80020b2:	46bd      	mov	sp, r7
 80020b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b8:	4770      	bx	lr
 80020ba:	bf00      	nop
 80020bc:	49742400 	.word	0x49742400

080020c0 <calc_res_heat>:

/* This internal API is used to calculate the heater resistance value using float */
static uint8_t calc_res_heat(uint16_t temp, const struct bme69x_dev *dev)
{
 80020c0:	b480      	push	{r7}
 80020c2:	b08b      	sub	sp, #44	@ 0x2c
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	4603      	mov	r3, r0
 80020c8:	60b9      	str	r1, [r7, #8]
 80020ca:	81fb      	strh	r3, [r7, #14]
    float var3;
    float var4;
    float var5;
    uint8_t res_heat;

    if (temp > 400) /* Cap temperature */
 80020cc:	89fb      	ldrh	r3, [r7, #14]
 80020ce:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 80020d2:	d902      	bls.n	80020da <calc_res_heat+0x1a>
    {
        temp = 400;
 80020d4:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 80020d8:	81fb      	strh	r3, [r7, #14]
    }

    var1 = (((float)dev->calib.par_g1 / (16.0f)) + 49.0f);
 80020da:	68bb      	ldr	r3, [r7, #8]
 80020dc:	f993 3019 	ldrsb.w	r3, [r3, #25]
 80020e0:	ee07 3a90 	vmov	s15, r3
 80020e4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80020e8:	eef3 6a00 	vmov.f32	s13, #48	@ 0x41800000  16.0
 80020ec:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80020f0:	ed9f 7a44 	vldr	s14, [pc, #272]	@ 8002204 <calc_res_heat+0x144>
 80020f4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80020f8:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
    var2 = ((((float)dev->calib.par_g2 / (32768.0f)) * (0.0005f)) + 0.00235f);
 80020fc:	68bb      	ldr	r3, [r7, #8]
 80020fe:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 8002102:	ee07 3a90 	vmov	s15, r3
 8002106:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800210a:	eddf 6a3f 	vldr	s13, [pc, #252]	@ 8002208 <calc_res_heat+0x148>
 800210e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002112:	ed9f 7a3e 	vldr	s14, [pc, #248]	@ 800220c <calc_res_heat+0x14c>
 8002116:	ee67 7a87 	vmul.f32	s15, s15, s14
 800211a:	ed9f 7a3d 	vldr	s14, [pc, #244]	@ 8002210 <calc_res_heat+0x150>
 800211e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002122:	edc7 7a08 	vstr	s15, [r7, #32]
    var3 = ((float)dev->calib.par_g3 / (1024.0f));
 8002126:	68bb      	ldr	r3, [r7, #8]
 8002128:	f993 301c 	ldrsb.w	r3, [r3, #28]
 800212c:	ee07 3a90 	vmov	s15, r3
 8002130:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002134:	eddf 6a37 	vldr	s13, [pc, #220]	@ 8002214 <calc_res_heat+0x154>
 8002138:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800213c:	edc7 7a07 	vstr	s15, [r7, #28]
    var4 = (var1 * (1.0f + (var2 * (float)temp)));
 8002140:	89fb      	ldrh	r3, [r7, #14]
 8002142:	ee07 3a90 	vmov	s15, r3
 8002146:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800214a:	edd7 7a08 	vldr	s15, [r7, #32]
 800214e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002152:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002156:	ee77 7a87 	vadd.f32	s15, s15, s14
 800215a:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 800215e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002162:	edc7 7a06 	vstr	s15, [r7, #24]
    var5 = (var4 + (var3 * (float)dev->amb_temp));
 8002166:	68bb      	ldr	r3, [r7, #8]
 8002168:	f993 300e 	ldrsb.w	r3, [r3, #14]
 800216c:	ee07 3a90 	vmov	s15, r3
 8002170:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002174:	edd7 7a07 	vldr	s15, [r7, #28]
 8002178:	ee67 7a27 	vmul.f32	s15, s14, s15
 800217c:	ed97 7a06 	vldr	s14, [r7, #24]
 8002180:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002184:	edc7 7a05 	vstr	s15, [r7, #20]
    res_heat =
        (uint8_t)(3.4f *
                  ((var5 * (4 / (4 + (float)dev->calib.res_heat_range)) *
 8002188:	68bb      	ldr	r3, [r7, #8]
 800218a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800218e:	ee07 3a90 	vmov	s15, r3
 8002192:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002196:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 800219a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800219e:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 80021a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80021a6:	edd7 7a05 	vldr	s15, [r7, #20]
 80021aa:	ee27 7a27 	vmul.f32	s14, s14, s15
                    (1 / (1 + ((float)dev->calib.res_heat_val * 0.002f)))) -
 80021ae:	68bb      	ldr	r3, [r7, #8]
 80021b0:	f993 3039 	ldrsb.w	r3, [r3, #57]	@ 0x39
 80021b4:	ee07 3a90 	vmov	s15, r3
 80021b8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80021bc:	eddf 6a16 	vldr	s13, [pc, #88]	@ 8002218 <calc_res_heat+0x158>
 80021c0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80021c4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80021c8:	ee77 6aa6 	vadd.f32	s13, s15, s13
 80021cc:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 80021d0:	eec6 7a26 	vdiv.f32	s15, s12, s13
                  ((var5 * (4 / (4 + (float)dev->calib.res_heat_range)) *
 80021d4:	ee67 7a27 	vmul.f32	s15, s14, s15
                    (1 / (1 + ((float)dev->calib.res_heat_val * 0.002f)))) -
 80021d8:	eeb3 7a09 	vmov.f32	s14, #57	@ 0x41c80000  25.0
 80021dc:	ee77 7ac7 	vsub.f32	s15, s15, s14
        (uint8_t)(3.4f *
 80021e0:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 800221c <calc_res_heat+0x15c>
 80021e4:	ee67 7a87 	vmul.f32	s15, s15, s14
    res_heat =
 80021e8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80021ec:	edc7 7a01 	vstr	s15, [r7, #4]
 80021f0:	793b      	ldrb	r3, [r7, #4]
 80021f2:	74fb      	strb	r3, [r7, #19]
                   25));

    return res_heat;
 80021f4:	7cfb      	ldrb	r3, [r7, #19]
}
 80021f6:	4618      	mov	r0, r3
 80021f8:	372c      	adds	r7, #44	@ 0x2c
 80021fa:	46bd      	mov	sp, r7
 80021fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002200:	4770      	bx	lr
 8002202:	bf00      	nop
 8002204:	42440000 	.word	0x42440000
 8002208:	47000000 	.word	0x47000000
 800220c:	3a03126f 	.word	0x3a03126f
 8002210:	3b1a0275 	.word	0x3b1a0275
 8002214:	44800000 	.word	0x44800000
 8002218:	3b03126f 	.word	0x3b03126f
 800221c:	4059999a 	.word	0x4059999a

08002220 <calc_gas_wait>:

#endif

/* This internal API is used to calculate the gas wait */
static uint8_t calc_gas_wait(uint16_t dur)
{
 8002220:	b480      	push	{r7}
 8002222:	b085      	sub	sp, #20
 8002224:	af00      	add	r7, sp, #0
 8002226:	4603      	mov	r3, r0
 8002228:	80fb      	strh	r3, [r7, #6]
    uint8_t factor = 0;
 800222a:	2300      	movs	r3, #0
 800222c:	73fb      	strb	r3, [r7, #15]
    uint8_t durval;

    if (dur >= 0xfc0)
 800222e:	88fb      	ldrh	r3, [r7, #6]
 8002230:	f5b3 6f7c 	cmp.w	r3, #4032	@ 0xfc0
 8002234:	d308      	bcc.n	8002248 <calc_gas_wait+0x28>
    {
        durval = 0xff; /* Max duration*/
 8002236:	23ff      	movs	r3, #255	@ 0xff
 8002238:	73bb      	strb	r3, [r7, #14]
 800223a:	e00f      	b.n	800225c <calc_gas_wait+0x3c>
    }
    else
    {
        while (dur > 0x3F)
        {
            dur = dur / 4;
 800223c:	88fb      	ldrh	r3, [r7, #6]
 800223e:	089b      	lsrs	r3, r3, #2
 8002240:	80fb      	strh	r3, [r7, #6]
            factor += 1;
 8002242:	7bfb      	ldrb	r3, [r7, #15]
 8002244:	3301      	adds	r3, #1
 8002246:	73fb      	strb	r3, [r7, #15]
        while (dur > 0x3F)
 8002248:	88fb      	ldrh	r3, [r7, #6]
 800224a:	2b3f      	cmp	r3, #63	@ 0x3f
 800224c:	d8f6      	bhi.n	800223c <calc_gas_wait+0x1c>
        }

        durval = (uint8_t)(dur + (factor * 64));
 800224e:	88fb      	ldrh	r3, [r7, #6]
 8002250:	b2da      	uxtb	r2, r3
 8002252:	7bfb      	ldrb	r3, [r7, #15]
 8002254:	019b      	lsls	r3, r3, #6
 8002256:	b2db      	uxtb	r3, r3
 8002258:	4413      	add	r3, r2
 800225a:	73bb      	strb	r3, [r7, #14]
    }

    return durval;
 800225c:	7bbb      	ldrb	r3, [r7, #14]
}
 800225e:	4618      	mov	r0, r3
 8002260:	3714      	adds	r7, #20
 8002262:	46bd      	mov	sp, r7
 8002264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002268:	4770      	bx	lr

0800226a <read_field_data>:

/* This internal API is used to read a single data of the sensor */
static int8_t read_field_data(uint8_t index, struct bme69x_data *data, struct bme69x_dev *dev)
{
 800226a:	b580      	push	{r7, lr}
 800226c:	b08e      	sub	sp, #56	@ 0x38
 800226e:	af00      	add	r7, sp, #0
 8002270:	4603      	mov	r3, r0
 8002272:	60b9      	str	r1, [r7, #8]
 8002274:	607a      	str	r2, [r7, #4]
 8002276:	73fb      	strb	r3, [r7, #15]
    int8_t rslt = BME69X_OK;
 8002278:	2300      	movs	r3, #0
 800227a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    uint8_t buff[BME69X_LEN_FIELD] = { 0 };
 800227e:	f107 0318 	add.w	r3, r7, #24
 8002282:	2200      	movs	r2, #0
 8002284:	601a      	str	r2, [r3, #0]
 8002286:	605a      	str	r2, [r3, #4]
 8002288:	609a      	str	r2, [r3, #8]
 800228a:	60da      	str	r2, [r3, #12]
 800228c:	741a      	strb	r2, [r3, #16]
    uint8_t gas_range;
    uint32_t adc_temp;
    uint32_t adc_pres;
    volatile uint16_t adc_hum;
    uint16_t adc_gas_res;
    uint8_t tries = 5;
 800228e:	2305      	movs	r3, #5
 8002290:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

    while ((tries) && (rslt == BME69X_OK))
 8002294:	e0ee      	b.n	8002474 <read_field_data+0x20a>
    {
        rslt = bme69x_get_regs(((uint8_t)(BME69X_REG_FIELD0 + (index * BME69X_LEN_FIELD_OFFSET))),
 8002296:	7bfb      	ldrb	r3, [r7, #15]
 8002298:	461a      	mov	r2, r3
 800229a:	0112      	lsls	r2, r2, #4
 800229c:	4413      	add	r3, r2
 800229e:	b2db      	uxtb	r3, r3
 80022a0:	331d      	adds	r3, #29
 80022a2:	b2d8      	uxtb	r0, r3
 80022a4:	f107 0118 	add.w	r1, r7, #24
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	2211      	movs	r2, #17
 80022ac:	f7fe ff4b 	bl	8001146 <bme69x_get_regs>
 80022b0:	4603      	mov	r3, r0
 80022b2:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
                               buff,
                               (uint16_t)BME69X_LEN_FIELD,
                               dev);
        if (!data)
 80022b6:	68bb      	ldr	r3, [r7, #8]
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d103      	bne.n	80022c4 <read_field_data+0x5a>
        {
            rslt = BME69X_E_NULL_PTR;
 80022bc:	23ff      	movs	r3, #255	@ 0xff
 80022be:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
            break;
 80022c2:	e0e0      	b.n	8002486 <read_field_data+0x21c>
        }

        data->status = buff[0] & BME69X_NEW_DATA_MSK;
 80022c4:	7e3b      	ldrb	r3, [r7, #24]
 80022c6:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80022ca:	b2da      	uxtb	r2, r3
 80022cc:	68bb      	ldr	r3, [r7, #8]
 80022ce:	701a      	strb	r2, [r3, #0]
        data->gas_index = buff[0] & BME69X_GAS_INDEX_MSK;
 80022d0:	7e3b      	ldrb	r3, [r7, #24]
 80022d2:	f003 030f 	and.w	r3, r3, #15
 80022d6:	b2da      	uxtb	r2, r3
 80022d8:	68bb      	ldr	r3, [r7, #8]
 80022da:	705a      	strb	r2, [r3, #1]
        data->meas_index = buff[1];
 80022dc:	7e7a      	ldrb	r2, [r7, #25]
 80022de:	68bb      	ldr	r3, [r7, #8]
 80022e0:	709a      	strb	r2, [r3, #2]

        /* read the raw data from the sensor */
        adc_pres = (uint32_t)(((uint32_t)buff[2] << 16) | ((uint32_t)buff[3] << 8) | ((uint32_t)buff[4]));
 80022e2:	7ebb      	ldrb	r3, [r7, #26]
 80022e4:	041a      	lsls	r2, r3, #16
 80022e6:	7efb      	ldrb	r3, [r7, #27]
 80022e8:	021b      	lsls	r3, r3, #8
 80022ea:	4313      	orrs	r3, r2
 80022ec:	7f3a      	ldrb	r2, [r7, #28]
 80022ee:	4313      	orrs	r3, r2
 80022f0:	633b      	str	r3, [r7, #48]	@ 0x30
        adc_temp = (uint32_t)(((uint32_t)buff[5] << 16) | ((uint32_t)buff[6] << 8) | ((uint32_t)buff[7]));
 80022f2:	7f7b      	ldrb	r3, [r7, #29]
 80022f4:	041a      	lsls	r2, r3, #16
 80022f6:	7fbb      	ldrb	r3, [r7, #30]
 80022f8:	021b      	lsls	r3, r3, #8
 80022fa:	4313      	orrs	r3, r2
 80022fc:	7ffa      	ldrb	r2, [r7, #31]
 80022fe:	4313      	orrs	r3, r2
 8002300:	62fb      	str	r3, [r7, #44]	@ 0x2c
        adc_hum = (uint16_t)(((uint32_t)buff[8] << 8) | (uint32_t)buff[9]);
 8002302:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002306:	021b      	lsls	r3, r3, #8
 8002308:	b29b      	uxth	r3, r3
 800230a:	f897 2021 	ldrb.w	r2, [r7, #33]	@ 0x21
 800230e:	4313      	orrs	r3, r2
 8002310:	b29b      	uxth	r3, r3
 8002312:	82fb      	strh	r3, [r7, #22]
        adc_gas_res = ((uint16_t)buff[15] << 2) | ((uint16_t)buff[16] >> 6);
 8002314:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002318:	b21b      	sxth	r3, r3
 800231a:	009b      	lsls	r3, r3, #2
 800231c:	b21a      	sxth	r2, r3
 800231e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8002322:	099b      	lsrs	r3, r3, #6
 8002324:	b2db      	uxtb	r3, r3
 8002326:	b21b      	sxth	r3, r3
 8002328:	4313      	orrs	r3, r2
 800232a:	b21b      	sxth	r3, r3
 800232c:	857b      	strh	r3, [r7, #42]	@ 0x2a

        gas_range = buff[16] & BME69X_GAS_RANGE_MSK;
 800232e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8002332:	f003 030f 	and.w	r3, r3, #15
 8002336:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29

        data->status |= buff[16] & BME69X_GASM_VALID_MSK;
 800233a:	68bb      	ldr	r3, [r7, #8]
 800233c:	781b      	ldrb	r3, [r3, #0]
 800233e:	b25a      	sxtb	r2, r3
 8002340:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8002344:	b25b      	sxtb	r3, r3
 8002346:	f003 0320 	and.w	r3, r3, #32
 800234a:	b25b      	sxtb	r3, r3
 800234c:	4313      	orrs	r3, r2
 800234e:	b25b      	sxtb	r3, r3
 8002350:	b2da      	uxtb	r2, r3
 8002352:	68bb      	ldr	r3, [r7, #8]
 8002354:	701a      	strb	r2, [r3, #0]
        data->status |= buff[16] & BME69X_HEAT_STAB_MSK;
 8002356:	68bb      	ldr	r3, [r7, #8]
 8002358:	781b      	ldrb	r3, [r3, #0]
 800235a:	b25a      	sxtb	r2, r3
 800235c:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8002360:	b25b      	sxtb	r3, r3
 8002362:	f003 0310 	and.w	r3, r3, #16
 8002366:	b25b      	sxtb	r3, r3
 8002368:	4313      	orrs	r3, r2
 800236a:	b25b      	sxtb	r3, r3
 800236c:	b2da      	uxtb	r2, r3
 800236e:	68bb      	ldr	r3, [r7, #8]
 8002370:	701a      	strb	r2, [r3, #0]

        if ((data->status & BME69X_NEW_DATA_MSK) && (rslt == BME69X_OK))
 8002372:	68bb      	ldr	r3, [r7, #8]
 8002374:	781b      	ldrb	r3, [r3, #0]
 8002376:	b25b      	sxtb	r3, r3
 8002378:	2b00      	cmp	r3, #0
 800237a:	da6a      	bge.n	8002452 <read_field_data+0x1e8>
 800237c:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 8002380:	2b00      	cmp	r3, #0
 8002382:	d166      	bne.n	8002452 <read_field_data+0x1e8>
        {
            rslt = bme69x_get_regs(BME69X_REG_RES_HEAT0 + data->gas_index, &data->res_heat, 1, dev);
 8002384:	68bb      	ldr	r3, [r7, #8]
 8002386:	785b      	ldrb	r3, [r3, #1]
 8002388:	335a      	adds	r3, #90	@ 0x5a
 800238a:	b2d8      	uxtb	r0, r3
 800238c:	68bb      	ldr	r3, [r7, #8]
 800238e:	1cd9      	adds	r1, r3, #3
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	2201      	movs	r2, #1
 8002394:	f7fe fed7 	bl	8001146 <bme69x_get_regs>
 8002398:	4603      	mov	r3, r0
 800239a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
            if (rslt == BME69X_OK)
 800239e:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d10c      	bne.n	80023c0 <read_field_data+0x156>
            {
                rslt = bme69x_get_regs(BME69X_REG_IDAC_HEAT0 + data->gas_index, &data->idac, 1, dev);
 80023a6:	68bb      	ldr	r3, [r7, #8]
 80023a8:	785b      	ldrb	r3, [r3, #1]
 80023aa:	3350      	adds	r3, #80	@ 0x50
 80023ac:	b2d8      	uxtb	r0, r3
 80023ae:	68bb      	ldr	r3, [r7, #8]
 80023b0:	1d19      	adds	r1, r3, #4
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	2201      	movs	r2, #1
 80023b6:	f7fe fec6 	bl	8001146 <bme69x_get_regs>
 80023ba:	4603      	mov	r3, r0
 80023bc:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
            }

            if (rslt == BME69X_OK)
 80023c0:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d10c      	bne.n	80023e2 <read_field_data+0x178>
            {
                rslt = bme69x_get_regs(BME69X_REG_GAS_WAIT0 + data->gas_index, &data->gas_wait, 1, dev);
 80023c8:	68bb      	ldr	r3, [r7, #8]
 80023ca:	785b      	ldrb	r3, [r3, #1]
 80023cc:	3364      	adds	r3, #100	@ 0x64
 80023ce:	b2d8      	uxtb	r0, r3
 80023d0:	68bb      	ldr	r3, [r7, #8]
 80023d2:	1d59      	adds	r1, r3, #5
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	2201      	movs	r2, #1
 80023d8:	f7fe feb5 	bl	8001146 <bme69x_get_regs>
 80023dc:	4603      	mov	r3, r0
 80023de:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
            }

            if (rslt == BME69X_OK)
 80023e2:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d133      	bne.n	8002452 <read_field_data+0x1e8>
            {
#ifndef BME69X_USE_FPU
                data->temperature = calc_temperature(adc_temp, dev, &data->t_lin);
                data->pressure = calc_pressure(adc_pres, data->t_lin, dev);
#else
                data->temperature = calc_temperature(adc_temp, dev);
 80023ea:	6879      	ldr	r1, [r7, #4]
 80023ec:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80023ee:	f7ff fab3 	bl	8001958 <calc_temperature>
 80023f2:	eef0 7a40 	vmov.f32	s15, s0
 80023f6:	68bb      	ldr	r3, [r7, #8]
 80023f8:	edc3 7a02 	vstr	s15, [r3, #8]
                data->pressure = calc_pressure(adc_pres, data->temperature, dev);
 80023fc:	68bb      	ldr	r3, [r7, #8]
 80023fe:	edd3 7a02 	vldr	s15, [r3, #8]
 8002402:	6879      	ldr	r1, [r7, #4]
 8002404:	eeb0 0a67 	vmov.f32	s0, s15
 8002408:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800240a:	f7ff fb0f 	bl	8001a2c <calc_pressure>
 800240e:	eef0 7a40 	vmov.f32	s15, s0
 8002412:	68bb      	ldr	r3, [r7, #8]
 8002414:	edc3 7a03 	vstr	s15, [r3, #12]
#endif
                data->humidity = calc_humidity(adc_hum, data->temperature, dev);
 8002418:	8afb      	ldrh	r3, [r7, #22]
 800241a:	b29a      	uxth	r2, r3
 800241c:	68bb      	ldr	r3, [r7, #8]
 800241e:	edd3 7a02 	vldr	s15, [r3, #8]
 8002422:	6879      	ldr	r1, [r7, #4]
 8002424:	eeb0 0a67 	vmov.f32	s0, s15
 8002428:	4610      	mov	r0, r2
 800242a:	f7ff fd03 	bl	8001e34 <calc_humidity>
 800242e:	eef0 7a40 	vmov.f32	s15, s0
 8002432:	68bb      	ldr	r3, [r7, #8]
 8002434:	edc3 7a04 	vstr	s15, [r3, #16]
                data->gas_resistance = calc_gas_resistance(adc_gas_res, gas_range);
 8002438:	f897 2029 	ldrb.w	r2, [r7, #41]	@ 0x29
 800243c:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800243e:	4611      	mov	r1, r2
 8002440:	4618      	mov	r0, r3
 8002442:	f7ff fe03 	bl	800204c <calc_gas_resistance>
 8002446:	eef0 7a40 	vmov.f32	s15, s0
 800244a:	68bb      	ldr	r3, [r7, #8]
 800244c:	edc3 7a05 	vstr	s15, [r3, #20]

                break;
 8002450:	e019      	b.n	8002486 <read_field_data+0x21c>
            }
        }

        if (rslt == BME69X_OK)
 8002452:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 8002456:	2b00      	cmp	r3, #0
 8002458:	d107      	bne.n	800246a <read_field_data+0x200>
        {
            dev->delay_us(BME69X_PERIOD_POLL, dev->intf_ptr);
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800245e:	687a      	ldr	r2, [r7, #4]
 8002460:	6852      	ldr	r2, [r2, #4]
 8002462:	4611      	mov	r1, r2
 8002464:	f242 7010 	movw	r0, #10000	@ 0x2710
 8002468:	4798      	blx	r3
        }

        tries--;
 800246a:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800246e:	3b01      	subs	r3, #1
 8002470:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
    while ((tries) && (rslt == BME69X_OK))
 8002474:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8002478:	2b00      	cmp	r3, #0
 800247a:	d004      	beq.n	8002486 <read_field_data+0x21c>
 800247c:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 8002480:	2b00      	cmp	r3, #0
 8002482:	f43f af08 	beq.w	8002296 <read_field_data+0x2c>
    }

    return rslt;
 8002486:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
}
 800248a:	4618      	mov	r0, r3
 800248c:	3738      	adds	r7, #56	@ 0x38
 800248e:	46bd      	mov	sp, r7
 8002490:	bd80      	pop	{r7, pc}

08002492 <read_all_field_data>:

/* This internal API is used to read all data fields of the sensor */
static int8_t read_all_field_data(struct bme69x_data * const data[], struct bme69x_dev *dev)
{
 8002492:	b590      	push	{r4, r7, lr}
 8002494:	b09d      	sub	sp, #116	@ 0x74
 8002496:	af00      	add	r7, sp, #0
 8002498:	6078      	str	r0, [r7, #4]
 800249a:	6039      	str	r1, [r7, #0]
    int8_t rslt = BME69X_OK;
 800249c:	2300      	movs	r3, #0
 800249e:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
    uint8_t buff[BME69X_LEN_FIELD * 3] = { 0 };
 80024a2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80024a6:	2233      	movs	r2, #51	@ 0x33
 80024a8:	2100      	movs	r1, #0
 80024aa:	4618      	mov	r0, r3
 80024ac:	f00b fce0 	bl	800de70 <memset>
    uint32_t adc_temp;
    uint32_t adc_pres;
    uint16_t adc_hum;
    uint16_t adc_gas_res;
    uint8_t off;
    uint8_t set_val[30] = { 0 }; /* idac, res_heat, gas_wait */
 80024b0:	f107 030c 	add.w	r3, r7, #12
 80024b4:	221e      	movs	r2, #30
 80024b6:	2100      	movs	r1, #0
 80024b8:	4618      	mov	r0, r3
 80024ba:	f00b fcd9 	bl	800de70 <memset>
    uint8_t i;

    if (!data[0] && !data[1] && !data[2])
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d10c      	bne.n	80024e0 <read_all_field_data+0x4e>
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	3304      	adds	r3, #4
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d107      	bne.n	80024e0 <read_all_field_data+0x4e>
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	3308      	adds	r3, #8
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d102      	bne.n	80024e0 <read_all_field_data+0x4e>
    {
        rslt = BME69X_E_NULL_PTR;
 80024da:	23ff      	movs	r3, #255	@ 0xff
 80024dc:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
    }

    if (rslt == BME69X_OK)
 80024e0:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d109      	bne.n	80024fc <read_all_field_data+0x6a>
    {
        rslt = bme69x_get_regs(BME69X_REG_FIELD0, buff, (uint32_t) BME69X_LEN_FIELD * 3, dev);
 80024e8:	f107 012c 	add.w	r1, r7, #44	@ 0x2c
 80024ec:	683b      	ldr	r3, [r7, #0]
 80024ee:	2233      	movs	r2, #51	@ 0x33
 80024f0:	201d      	movs	r0, #29
 80024f2:	f7fe fe28 	bl	8001146 <bme69x_get_regs>
 80024f6:	4603      	mov	r3, r0
 80024f8:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
    }

    if (rslt == BME69X_OK)
 80024fc:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 8002500:	2b00      	cmp	r3, #0
 8002502:	d109      	bne.n	8002518 <read_all_field_data+0x86>
    {
        rslt = bme69x_get_regs(BME69X_REG_IDAC_HEAT0, set_val, 30, dev);
 8002504:	f107 010c 	add.w	r1, r7, #12
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	221e      	movs	r2, #30
 800250c:	2050      	movs	r0, #80	@ 0x50
 800250e:	f7fe fe1a 	bl	8001146 <bme69x_get_regs>
 8002512:	4603      	mov	r3, r0
 8002514:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
    }

    for (i = 0; ((i < 3) && (rslt == BME69X_OK)); i++)
 8002518:	2300      	movs	r3, #0
 800251a:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e
 800251e:	e16b      	b.n	80027f8 <read_all_field_data+0x366>
    {
        off = (uint8_t)(i * BME69X_LEN_FIELD);
 8002520:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8002524:	461a      	mov	r2, r3
 8002526:	0112      	lsls	r2, r2, #4
 8002528:	4413      	add	r3, r2
 800252a:	f887 306d 	strb.w	r3, [r7, #109]	@ 0x6d
        data[i]->status = buff[off] & BME69X_NEW_DATA_MSK;
 800252e:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8002532:	3370      	adds	r3, #112	@ 0x70
 8002534:	443b      	add	r3, r7
 8002536:	f813 2c44 	ldrb.w	r2, [r3, #-68]
 800253a:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 800253e:	009b      	lsls	r3, r3, #2
 8002540:	6879      	ldr	r1, [r7, #4]
 8002542:	440b      	add	r3, r1
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f022 027f 	bic.w	r2, r2, #127	@ 0x7f
 800254a:	b2d2      	uxtb	r2, r2
 800254c:	701a      	strb	r2, [r3, #0]
        data[i]->gas_index = buff[off] & BME69X_GAS_INDEX_MSK;
 800254e:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8002552:	3370      	adds	r3, #112	@ 0x70
 8002554:	443b      	add	r3, r7
 8002556:	f813 2c44 	ldrb.w	r2, [r3, #-68]
 800255a:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 800255e:	009b      	lsls	r3, r3, #2
 8002560:	6879      	ldr	r1, [r7, #4]
 8002562:	440b      	add	r3, r1
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f002 020f 	and.w	r2, r2, #15
 800256a:	b2d2      	uxtb	r2, r2
 800256c:	705a      	strb	r2, [r3, #1]
        data[i]->meas_index = buff[off + 1];
 800256e:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8002572:	1c5a      	adds	r2, r3, #1
 8002574:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8002578:	009b      	lsls	r3, r3, #2
 800257a:	6879      	ldr	r1, [r7, #4]
 800257c:	440b      	add	r3, r1
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	3270      	adds	r2, #112	@ 0x70
 8002582:	443a      	add	r2, r7
 8002584:	f812 2c44 	ldrb.w	r2, [r2, #-68]
 8002588:	709a      	strb	r2, [r3, #2]

        /* read the raw data from the sensor */
        adc_pres =
            (uint32_t)(((uint32_t) buff[off + 2] << 16) | ((uint32_t) buff[off + 3] << 8) | ((uint32_t) buff[off + 4]));
 800258a:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 800258e:	3302      	adds	r3, #2
 8002590:	3370      	adds	r3, #112	@ 0x70
 8002592:	443b      	add	r3, r7
 8002594:	f813 3c44 	ldrb.w	r3, [r3, #-68]
 8002598:	041a      	lsls	r2, r3, #16
 800259a:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 800259e:	3303      	adds	r3, #3
 80025a0:	3370      	adds	r3, #112	@ 0x70
 80025a2:	443b      	add	r3, r7
 80025a4:	f813 3c44 	ldrb.w	r3, [r3, #-68]
 80025a8:	021b      	lsls	r3, r3, #8
 80025aa:	4313      	orrs	r3, r2
 80025ac:	f897 206d 	ldrb.w	r2, [r7, #109]	@ 0x6d
 80025b0:	3204      	adds	r2, #4
 80025b2:	3270      	adds	r2, #112	@ 0x70
 80025b4:	443a      	add	r2, r7
 80025b6:	f812 2c44 	ldrb.w	r2, [r2, #-68]
        adc_pres =
 80025ba:	4313      	orrs	r3, r2
 80025bc:	66bb      	str	r3, [r7, #104]	@ 0x68
        adc_temp =
            (uint32_t)(((uint32_t) buff[off + 5] << 16) | ((uint32_t) buff[off + 6] << 8) | ((uint32_t) buff[off + 7]));
 80025be:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 80025c2:	3305      	adds	r3, #5
 80025c4:	3370      	adds	r3, #112	@ 0x70
 80025c6:	443b      	add	r3, r7
 80025c8:	f813 3c44 	ldrb.w	r3, [r3, #-68]
 80025cc:	041a      	lsls	r2, r3, #16
 80025ce:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 80025d2:	3306      	adds	r3, #6
 80025d4:	3370      	adds	r3, #112	@ 0x70
 80025d6:	443b      	add	r3, r7
 80025d8:	f813 3c44 	ldrb.w	r3, [r3, #-68]
 80025dc:	021b      	lsls	r3, r3, #8
 80025de:	4313      	orrs	r3, r2
 80025e0:	f897 206d 	ldrb.w	r2, [r7, #109]	@ 0x6d
 80025e4:	3207      	adds	r2, #7
 80025e6:	3270      	adds	r2, #112	@ 0x70
 80025e8:	443a      	add	r2, r7
 80025ea:	f812 2c44 	ldrb.w	r2, [r2, #-68]
        adc_temp =
 80025ee:	4313      	orrs	r3, r2
 80025f0:	667b      	str	r3, [r7, #100]	@ 0x64
        adc_hum = (uint16_t) (((uint32_t) buff[off + 8] * 256) | (uint32_t) buff[off + 9]);
 80025f2:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 80025f6:	3308      	adds	r3, #8
 80025f8:	3370      	adds	r3, #112	@ 0x70
 80025fa:	443b      	add	r3, r7
 80025fc:	f813 3c44 	ldrb.w	r3, [r3, #-68]
 8002600:	021b      	lsls	r3, r3, #8
 8002602:	b29b      	uxth	r3, r3
 8002604:	f897 206d 	ldrb.w	r2, [r7, #109]	@ 0x6d
 8002608:	3209      	adds	r2, #9
 800260a:	3270      	adds	r2, #112	@ 0x70
 800260c:	443a      	add	r2, r7
 800260e:	f812 2c44 	ldrb.w	r2, [r2, #-68]
 8002612:	4313      	orrs	r3, r2
 8002614:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
        adc_gas_res = ((uint16_t)buff[off + 15] << 2) | ((uint16_t)buff[off + 16] >> 6);
 8002618:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 800261c:	330f      	adds	r3, #15
 800261e:	3370      	adds	r3, #112	@ 0x70
 8002620:	443b      	add	r3, r7
 8002622:	f813 3c44 	ldrb.w	r3, [r3, #-68]
 8002626:	b21b      	sxth	r3, r3
 8002628:	009b      	lsls	r3, r3, #2
 800262a:	b21a      	sxth	r2, r3
 800262c:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8002630:	3310      	adds	r3, #16
 8002632:	3370      	adds	r3, #112	@ 0x70
 8002634:	443b      	add	r3, r7
 8002636:	f813 3c44 	ldrb.w	r3, [r3, #-68]
 800263a:	099b      	lsrs	r3, r3, #6
 800263c:	b2db      	uxtb	r3, r3
 800263e:	b21b      	sxth	r3, r3
 8002640:	4313      	orrs	r3, r2
 8002642:	b21b      	sxth	r3, r3
 8002644:	f8a7 3060 	strh.w	r3, [r7, #96]	@ 0x60
        gas_range = buff[off + 16] & BME69X_GAS_RANGE_MSK;
 8002648:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 800264c:	3310      	adds	r3, #16
 800264e:	3370      	adds	r3, #112	@ 0x70
 8002650:	443b      	add	r3, r7
 8002652:	f813 3c44 	ldrb.w	r3, [r3, #-68]
 8002656:	f003 030f 	and.w	r3, r3, #15
 800265a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

        data[i]->status |= buff[off + 16] & BME69X_GASM_VALID_MSK;
 800265e:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8002662:	009b      	lsls	r3, r3, #2
 8002664:	687a      	ldr	r2, [r7, #4]
 8002666:	4413      	add	r3, r2
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	781b      	ldrb	r3, [r3, #0]
 800266c:	b25a      	sxtb	r2, r3
 800266e:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8002672:	3310      	adds	r3, #16
 8002674:	3370      	adds	r3, #112	@ 0x70
 8002676:	443b      	add	r3, r7
 8002678:	f813 3c44 	ldrb.w	r3, [r3, #-68]
 800267c:	b25b      	sxtb	r3, r3
 800267e:	f003 0320 	and.w	r3, r3, #32
 8002682:	b25b      	sxtb	r3, r3
 8002684:	4313      	orrs	r3, r2
 8002686:	b259      	sxtb	r1, r3
 8002688:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 800268c:	009b      	lsls	r3, r3, #2
 800268e:	687a      	ldr	r2, [r7, #4]
 8002690:	4413      	add	r3, r2
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	b2ca      	uxtb	r2, r1
 8002696:	701a      	strb	r2, [r3, #0]
        data[i]->status |= buff[off + 16] & BME69X_HEAT_STAB_MSK;
 8002698:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 800269c:	009b      	lsls	r3, r3, #2
 800269e:	687a      	ldr	r2, [r7, #4]
 80026a0:	4413      	add	r3, r2
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	781b      	ldrb	r3, [r3, #0]
 80026a6:	b25a      	sxtb	r2, r3
 80026a8:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 80026ac:	3310      	adds	r3, #16
 80026ae:	3370      	adds	r3, #112	@ 0x70
 80026b0:	443b      	add	r3, r7
 80026b2:	f813 3c44 	ldrb.w	r3, [r3, #-68]
 80026b6:	b25b      	sxtb	r3, r3
 80026b8:	f003 0310 	and.w	r3, r3, #16
 80026bc:	b25b      	sxtb	r3, r3
 80026be:	4313      	orrs	r3, r2
 80026c0:	b259      	sxtb	r1, r3
 80026c2:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 80026c6:	009b      	lsls	r3, r3, #2
 80026c8:	687a      	ldr	r2, [r7, #4]
 80026ca:	4413      	add	r3, r2
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	b2ca      	uxtb	r2, r1
 80026d0:	701a      	strb	r2, [r3, #0]

        data[i]->idac = set_val[data[i]->gas_index];
 80026d2:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 80026d6:	009b      	lsls	r3, r3, #2
 80026d8:	687a      	ldr	r2, [r7, #4]
 80026da:	4413      	add	r3, r2
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	785b      	ldrb	r3, [r3, #1]
 80026e0:	4619      	mov	r1, r3
 80026e2:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 80026e6:	009b      	lsls	r3, r3, #2
 80026e8:	687a      	ldr	r2, [r7, #4]
 80026ea:	4413      	add	r3, r2
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f101 0270 	add.w	r2, r1, #112	@ 0x70
 80026f2:	443a      	add	r2, r7
 80026f4:	f812 2c64 	ldrb.w	r2, [r2, #-100]
 80026f8:	711a      	strb	r2, [r3, #4]
        data[i]->res_heat = set_val[10 + data[i]->gas_index];
 80026fa:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 80026fe:	009b      	lsls	r3, r3, #2
 8002700:	687a      	ldr	r2, [r7, #4]
 8002702:	4413      	add	r3, r2
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	785b      	ldrb	r3, [r3, #1]
 8002708:	f103 020a 	add.w	r2, r3, #10
 800270c:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8002710:	009b      	lsls	r3, r3, #2
 8002712:	6879      	ldr	r1, [r7, #4]
 8002714:	440b      	add	r3, r1
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	3270      	adds	r2, #112	@ 0x70
 800271a:	443a      	add	r2, r7
 800271c:	f812 2c64 	ldrb.w	r2, [r2, #-100]
 8002720:	70da      	strb	r2, [r3, #3]
        data[i]->gas_wait = set_val[20 + data[i]->gas_index];
 8002722:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8002726:	009b      	lsls	r3, r3, #2
 8002728:	687a      	ldr	r2, [r7, #4]
 800272a:	4413      	add	r3, r2
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	785b      	ldrb	r3, [r3, #1]
 8002730:	f103 0214 	add.w	r2, r3, #20
 8002734:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8002738:	009b      	lsls	r3, r3, #2
 800273a:	6879      	ldr	r1, [r7, #4]
 800273c:	440b      	add	r3, r1
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	3270      	adds	r2, #112	@ 0x70
 8002742:	443a      	add	r2, r7
 8002744:	f812 2c64 	ldrb.w	r2, [r2, #-100]
 8002748:	715a      	strb	r2, [r3, #5]
         * t_lin is calculated during temperature calculation
         */
        data[i]->temperature = calc_temperature(adc_temp, dev, &data[i]->t_lin);
        data[i]->pressure = calc_pressure(adc_pres, data[i]->t_lin, dev);
#else
        data[i]->temperature = calc_temperature(adc_temp, dev);
 800274a:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 800274e:	009b      	lsls	r3, r3, #2
 8002750:	687a      	ldr	r2, [r7, #4]
 8002752:	4413      	add	r3, r2
 8002754:	681c      	ldr	r4, [r3, #0]
 8002756:	6839      	ldr	r1, [r7, #0]
 8002758:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 800275a:	f7ff f8fd 	bl	8001958 <calc_temperature>
 800275e:	eef0 7a40 	vmov.f32	s15, s0
 8002762:	edc4 7a02 	vstr	s15, [r4, #8]
        data[i]->pressure = calc_pressure(adc_pres, data[i]->temperature, dev);
 8002766:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 800276a:	009b      	lsls	r3, r3, #2
 800276c:	687a      	ldr	r2, [r7, #4]
 800276e:	4413      	add	r3, r2
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	edd3 7a02 	vldr	s15, [r3, #8]
 8002776:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 800277a:	009b      	lsls	r3, r3, #2
 800277c:	687a      	ldr	r2, [r7, #4]
 800277e:	4413      	add	r3, r2
 8002780:	681c      	ldr	r4, [r3, #0]
 8002782:	6839      	ldr	r1, [r7, #0]
 8002784:	eeb0 0a67 	vmov.f32	s0, s15
 8002788:	6eb8      	ldr	r0, [r7, #104]	@ 0x68
 800278a:	f7ff f94f 	bl	8001a2c <calc_pressure>
 800278e:	eef0 7a40 	vmov.f32	s15, s0
 8002792:	edc4 7a03 	vstr	s15, [r4, #12]
#endif
        data[i]->humidity = calc_humidity(adc_hum, data[i]->temperature, dev);
 8002796:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 800279a:	009b      	lsls	r3, r3, #2
 800279c:	687a      	ldr	r2, [r7, #4]
 800279e:	4413      	add	r3, r2
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	edd3 7a02 	vldr	s15, [r3, #8]
 80027a6:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 80027aa:	009b      	lsls	r3, r3, #2
 80027ac:	687a      	ldr	r2, [r7, #4]
 80027ae:	4413      	add	r3, r2
 80027b0:	681c      	ldr	r4, [r3, #0]
 80027b2:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 80027b6:	6839      	ldr	r1, [r7, #0]
 80027b8:	eeb0 0a67 	vmov.f32	s0, s15
 80027bc:	4618      	mov	r0, r3
 80027be:	f7ff fb39 	bl	8001e34 <calc_humidity>
 80027c2:	eef0 7a40 	vmov.f32	s15, s0
 80027c6:	edc4 7a04 	vstr	s15, [r4, #16]
        data[i]->gas_resistance = calc_gas_resistance(adc_gas_res, gas_range);
 80027ca:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 80027ce:	009b      	lsls	r3, r3, #2
 80027d0:	687a      	ldr	r2, [r7, #4]
 80027d2:	4413      	add	r3, r2
 80027d4:	681c      	ldr	r4, [r3, #0]
 80027d6:	f897 205f 	ldrb.w	r2, [r7, #95]	@ 0x5f
 80027da:	f8b7 3060 	ldrh.w	r3, [r7, #96]	@ 0x60
 80027de:	4611      	mov	r1, r2
 80027e0:	4618      	mov	r0, r3
 80027e2:	f7ff fc33 	bl	800204c <calc_gas_resistance>
 80027e6:	eef0 7a40 	vmov.f32	s15, s0
 80027ea:	edc4 7a05 	vstr	s15, [r4, #20]
    for (i = 0; ((i < 3) && (rslt == BME69X_OK)); i++)
 80027ee:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 80027f2:	3301      	adds	r3, #1
 80027f4:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e
 80027f8:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 80027fc:	2b02      	cmp	r3, #2
 80027fe:	d804      	bhi.n	800280a <read_all_field_data+0x378>
 8002800:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 8002804:	2b00      	cmp	r3, #0
 8002806:	f43f ae8b 	beq.w	8002520 <read_all_field_data+0x8e>
    }

    return rslt;
 800280a:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
}
 800280e:	4618      	mov	r0, r3
 8002810:	3774      	adds	r7, #116	@ 0x74
 8002812:	46bd      	mov	sp, r7
 8002814:	bd90      	pop	{r4, r7, pc}

08002816 <set_mem_page>:

/* This internal API is used to switch between SPI memory pages */
static int8_t set_mem_page(uint8_t reg_addr, struct bme69x_dev *dev)
{
 8002816:	b590      	push	{r4, r7, lr}
 8002818:	b085      	sub	sp, #20
 800281a:	af00      	add	r7, sp, #0
 800281c:	4603      	mov	r3, r0
 800281e:	6039      	str	r1, [r7, #0]
 8002820:	71fb      	strb	r3, [r7, #7]
    int8_t rslt;
    uint8_t reg;
    uint8_t mem_page;

    /* Check for null pointers in the device structure*/
    rslt = null_ptr_check(dev);
 8002822:	6838      	ldr	r0, [r7, #0]
 8002824:	f000 f8b8 	bl	8002998 <null_ptr_check>
 8002828:	4603      	mov	r3, r0
 800282a:	73fb      	strb	r3, [r7, #15]
    if (rslt == BME69X_OK)
 800282c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002830:	2b00      	cmp	r3, #0
 8002832:	d14f      	bne.n	80028d4 <set_mem_page+0xbe>
    {
        if (reg_addr > 0x7f)
 8002834:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002838:	2b00      	cmp	r3, #0
 800283a:	da02      	bge.n	8002842 <set_mem_page+0x2c>
        {
            mem_page = BME69X_MEM_PAGE1;
 800283c:	2300      	movs	r3, #0
 800283e:	73bb      	strb	r3, [r7, #14]
 8002840:	e001      	b.n	8002846 <set_mem_page+0x30>
        }
        else
        {
            mem_page = BME69X_MEM_PAGE0;
 8002842:	2310      	movs	r3, #16
 8002844:	73bb      	strb	r3, [r7, #14]
        }

        if (mem_page != dev->mem_page)
 8002846:	683b      	ldr	r3, [r7, #0]
 8002848:	7b5b      	ldrb	r3, [r3, #13]
 800284a:	7bba      	ldrb	r2, [r7, #14]
 800284c:	429a      	cmp	r2, r3
 800284e:	d041      	beq.n	80028d4 <set_mem_page+0xbe>
        {
            dev->mem_page = mem_page;
 8002850:	683b      	ldr	r3, [r7, #0]
 8002852:	7bba      	ldrb	r2, [r7, #14]
 8002854:	735a      	strb	r2, [r3, #13]
            dev->intf_rslt = dev->read(BME69X_REG_MEM_PAGE | BME69X_SPI_RD_MSK, &reg, 1, dev->intf_ptr);
 8002856:	683b      	ldr	r3, [r7, #0]
 8002858:	6bdc      	ldr	r4, [r3, #60]	@ 0x3c
 800285a:	683b      	ldr	r3, [r7, #0]
 800285c:	685b      	ldr	r3, [r3, #4]
 800285e:	f107 010d 	add.w	r1, r7, #13
 8002862:	2201      	movs	r2, #1
 8002864:	20f3      	movs	r0, #243	@ 0xf3
 8002866:	47a0      	blx	r4
 8002868:	4603      	mov	r3, r0
 800286a:	461a      	mov	r2, r3
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
            if (dev->intf_rslt != 0)
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	f993 3048 	ldrsb.w	r3, [r3, #72]	@ 0x48
 8002878:	2b00      	cmp	r3, #0
 800287a:	d001      	beq.n	8002880 <set_mem_page+0x6a>
            {
                rslt = BME69X_E_COM_FAIL;
 800287c:	23fe      	movs	r3, #254	@ 0xfe
 800287e:	73fb      	strb	r3, [r7, #15]
            }

            if (rslt == BME69X_OK)
 8002880:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002884:	2b00      	cmp	r3, #0
 8002886:	d125      	bne.n	80028d4 <set_mem_page+0xbe>
            {
                reg = reg & (~BME69X_MEM_PAGE_MSK);
 8002888:	7b7b      	ldrb	r3, [r7, #13]
 800288a:	f023 0310 	bic.w	r3, r3, #16
 800288e:	b2db      	uxtb	r3, r3
 8002890:	737b      	strb	r3, [r7, #13]
                reg = reg | (dev->mem_page & BME69X_MEM_PAGE_MSK);
 8002892:	683b      	ldr	r3, [r7, #0]
 8002894:	7b5b      	ldrb	r3, [r3, #13]
 8002896:	b25b      	sxtb	r3, r3
 8002898:	f003 0310 	and.w	r3, r3, #16
 800289c:	b25a      	sxtb	r2, r3
 800289e:	7b7b      	ldrb	r3, [r7, #13]
 80028a0:	b25b      	sxtb	r3, r3
 80028a2:	4313      	orrs	r3, r2
 80028a4:	b25b      	sxtb	r3, r3
 80028a6:	b2db      	uxtb	r3, r3
 80028a8:	737b      	strb	r3, [r7, #13]
                dev->intf_rslt = dev->write(BME69X_REG_MEM_PAGE & BME69X_SPI_WR_MSK, &reg, 1, dev->intf_ptr);
 80028aa:	683b      	ldr	r3, [r7, #0]
 80028ac:	6c1c      	ldr	r4, [r3, #64]	@ 0x40
 80028ae:	683b      	ldr	r3, [r7, #0]
 80028b0:	685b      	ldr	r3, [r3, #4]
 80028b2:	f107 010d 	add.w	r1, r7, #13
 80028b6:	2201      	movs	r2, #1
 80028b8:	2073      	movs	r0, #115	@ 0x73
 80028ba:	47a0      	blx	r4
 80028bc:	4603      	mov	r3, r0
 80028be:	461a      	mov	r2, r3
 80028c0:	683b      	ldr	r3, [r7, #0]
 80028c2:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
                if (dev->intf_rslt != 0)
 80028c6:	683b      	ldr	r3, [r7, #0]
 80028c8:	f993 3048 	ldrsb.w	r3, [r3, #72]	@ 0x48
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d001      	beq.n	80028d4 <set_mem_page+0xbe>
                {
                    rslt = BME69X_E_COM_FAIL;
 80028d0:	23fe      	movs	r3, #254	@ 0xfe
 80028d2:	73fb      	strb	r3, [r7, #15]
                }
            }
        }
    }

    return rslt;
 80028d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80028d8:	4618      	mov	r0, r3
 80028da:	3714      	adds	r7, #20
 80028dc:	46bd      	mov	sp, r7
 80028de:	bd90      	pop	{r4, r7, pc}

080028e0 <get_mem_page>:

/* This internal API is used to get the current SPI memory page */
static int8_t get_mem_page(struct bme69x_dev *dev)
{
 80028e0:	b590      	push	{r4, r7, lr}
 80028e2:	b085      	sub	sp, #20
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t reg;

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 80028e8:	6878      	ldr	r0, [r7, #4]
 80028ea:	f000 f855 	bl	8002998 <null_ptr_check>
 80028ee:	4603      	mov	r3, r0
 80028f0:	73fb      	strb	r3, [r7, #15]
    if (rslt == BME69X_OK)
 80028f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d11b      	bne.n	8002932 <get_mem_page+0x52>
    {
        dev->intf_rslt = dev->read(BME69X_REG_MEM_PAGE | BME69X_SPI_RD_MSK, &reg, 1, dev->intf_ptr);
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	6bdc      	ldr	r4, [r3, #60]	@ 0x3c
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	685b      	ldr	r3, [r3, #4]
 8002902:	f107 010e 	add.w	r1, r7, #14
 8002906:	2201      	movs	r2, #1
 8002908:	20f3      	movs	r0, #243	@ 0xf3
 800290a:	47a0      	blx	r4
 800290c:	4603      	mov	r3, r0
 800290e:	461a      	mov	r2, r3
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
        if (dev->intf_rslt != 0)
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	f993 3048 	ldrsb.w	r3, [r3, #72]	@ 0x48
 800291c:	2b00      	cmp	r3, #0
 800291e:	d002      	beq.n	8002926 <get_mem_page+0x46>
        {
            rslt = BME69X_E_COM_FAIL;
 8002920:	23fe      	movs	r3, #254	@ 0xfe
 8002922:	73fb      	strb	r3, [r7, #15]
 8002924:	e005      	b.n	8002932 <get_mem_page+0x52>
        }
        else
        {
            dev->mem_page = reg & BME69X_MEM_PAGE_MSK;
 8002926:	7bbb      	ldrb	r3, [r7, #14]
 8002928:	f003 0310 	and.w	r3, r3, #16
 800292c:	b2da      	uxtb	r2, r3
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	735a      	strb	r2, [r3, #13]
        }
    }

    return rslt;
 8002932:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002936:	4618      	mov	r0, r3
 8002938:	3714      	adds	r7, #20
 800293a:	46bd      	mov	sp, r7
 800293c:	bd90      	pop	{r4, r7, pc}

0800293e <boundary_check>:

/* This internal API is used to limit the max value of a parameter */
static int8_t boundary_check(uint8_t *value, uint8_t max, struct bme69x_dev *dev)
{
 800293e:	b580      	push	{r7, lr}
 8002940:	b086      	sub	sp, #24
 8002942:	af00      	add	r7, sp, #0
 8002944:	60f8      	str	r0, [r7, #12]
 8002946:	460b      	mov	r3, r1
 8002948:	607a      	str	r2, [r7, #4]
 800294a:	72fb      	strb	r3, [r7, #11]
    int8_t rslt;

    rslt = null_ptr_check(dev);
 800294c:	6878      	ldr	r0, [r7, #4]
 800294e:	f000 f823 	bl	8002998 <null_ptr_check>
 8002952:	4603      	mov	r3, r0
 8002954:	75fb      	strb	r3, [r7, #23]
    if ((value != NULL) && (rslt == BME69X_OK))
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	2b00      	cmp	r3, #0
 800295a:	d015      	beq.n	8002988 <boundary_check+0x4a>
 800295c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002960:	2b00      	cmp	r3, #0
 8002962:	d111      	bne.n	8002988 <boundary_check+0x4a>
    {
        /* Check if value is above maximum value */
        if (*value > max)
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	781b      	ldrb	r3, [r3, #0]
 8002968:	7afa      	ldrb	r2, [r7, #11]
 800296a:	429a      	cmp	r2, r3
 800296c:	d20e      	bcs.n	800298c <boundary_check+0x4e>
        {
            /* Auto correct the invalid value to maximum value */
            *value = max;
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	7afa      	ldrb	r2, [r7, #11]
 8002972:	701a      	strb	r2, [r3, #0]
            dev->info_msg |= BME69X_I_PARAM_CORR;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	f893 3049 	ldrb.w	r3, [r3, #73]	@ 0x49
 800297a:	f043 0301 	orr.w	r3, r3, #1
 800297e:	b2da      	uxtb	r2, r3
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49
        if (*value > max)
 8002986:	e001      	b.n	800298c <boundary_check+0x4e>
        }
    }
    else
    {
        rslt = BME69X_E_NULL_PTR;
 8002988:	23ff      	movs	r3, #255	@ 0xff
 800298a:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 800298c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8002990:	4618      	mov	r0, r3
 8002992:	3718      	adds	r7, #24
 8002994:	46bd      	mov	sp, r7
 8002996:	bd80      	pop	{r7, pc}

08002998 <null_ptr_check>:

/* This internal API is used to check the bme69x_dev for null pointers */
static int8_t null_ptr_check(const struct bme69x_dev *dev)
{
 8002998:	b480      	push	{r7}
 800299a:	b085      	sub	sp, #20
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
    int8_t rslt = BME69X_OK;
 80029a0:	2300      	movs	r3, #0
 80029a2:	73fb      	strb	r3, [r7, #15]

    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_us == NULL))
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d00b      	beq.n	80029c2 <null_ptr_check+0x2a>
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d007      	beq.n	80029c2 <null_ptr_check+0x2a>
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d003      	beq.n	80029c2 <null_ptr_check+0x2a>
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d101      	bne.n	80029c6 <null_ptr_check+0x2e>
    {
        /* Device structure pointer is not valid */
        rslt = BME69X_E_NULL_PTR;
 80029c2:	23ff      	movs	r3, #255	@ 0xff
 80029c4:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 80029c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80029ca:	4618      	mov	r0, r3
 80029cc:	3714      	adds	r7, #20
 80029ce:	46bd      	mov	sp, r7
 80029d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d4:	4770      	bx	lr

080029d6 <set_conf>:

/* This internal API is used to set heater configurations */
static int8_t set_conf(const struct bme69x_heatr_conf *conf, uint8_t op_mode, uint8_t *nb_conv, struct bme69x_dev *dev)
{
 80029d6:	b590      	push	{r4, r7, lr}
 80029d8:	b093      	sub	sp, #76	@ 0x4c
 80029da:	af00      	add	r7, sp, #0
 80029dc:	60f8      	str	r0, [r7, #12]
 80029de:	607a      	str	r2, [r7, #4]
 80029e0:	603b      	str	r3, [r7, #0]
 80029e2:	460b      	mov	r3, r1
 80029e4:	72fb      	strb	r3, [r7, #11]
    int8_t rslt = BME69X_OK;
 80029e6:	2300      	movs	r3, #0
 80029e8:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    uint8_t i;
    uint8_t shared_dur;
    uint8_t write_len = 0;
 80029ec:	2300      	movs	r3, #0
 80029ee:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
    uint8_t heater_dur_shared_addr = BME69X_REG_SHD_HEATR_DUR;
 80029f2:	236e      	movs	r3, #110	@ 0x6e
 80029f4:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
    uint8_t rh_reg_addr[10] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
 80029f8:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80029fc:	2200      	movs	r2, #0
 80029fe:	601a      	str	r2, [r3, #0]
 8002a00:	605a      	str	r2, [r3, #4]
 8002a02:	811a      	strh	r2, [r3, #8]
    uint8_t rh_reg_data[10] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
 8002a04:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002a08:	2200      	movs	r2, #0
 8002a0a:	601a      	str	r2, [r3, #0]
 8002a0c:	605a      	str	r2, [r3, #4]
 8002a0e:	811a      	strh	r2, [r3, #8]
    uint8_t gw_reg_addr[10] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
 8002a10:	f107 0320 	add.w	r3, r7, #32
 8002a14:	2200      	movs	r2, #0
 8002a16:	601a      	str	r2, [r3, #0]
 8002a18:	605a      	str	r2, [r3, #4]
 8002a1a:	811a      	strh	r2, [r3, #8]
    uint8_t gw_reg_data[10] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
 8002a1c:	f107 0314 	add.w	r3, r7, #20
 8002a20:	2200      	movs	r2, #0
 8002a22:	601a      	str	r2, [r3, #0]
 8002a24:	605a      	str	r2, [r3, #4]
 8002a26:	811a      	strh	r2, [r3, #8]

    switch (op_mode)
 8002a28:	7afb      	ldrb	r3, [r7, #11]
 8002a2a:	2b03      	cmp	r3, #3
 8002a2c:	d024      	beq.n	8002a78 <set_conf+0xa2>
 8002a2e:	2b03      	cmp	r3, #3
 8002a30:	f300 80f9 	bgt.w	8002c26 <set_conf+0x250>
 8002a34:	2b01      	cmp	r3, #1
 8002a36:	d002      	beq.n	8002a3e <set_conf+0x68>
 8002a38:	2b02      	cmp	r3, #2
 8002a3a:	d07c      	beq.n	8002b36 <set_conf+0x160>
 8002a3c:	e0f3      	b.n	8002c26 <set_conf+0x250>
    {
        case BME69X_FORCED_MODE:
            rh_reg_addr[0] = BME69X_REG_RES_HEAT0;
 8002a3e:	235a      	movs	r3, #90	@ 0x5a
 8002a40:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
            rh_reg_data[0] = calc_res_heat(conf->heatr_temp, dev);
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	885b      	ldrh	r3, [r3, #2]
 8002a48:	6839      	ldr	r1, [r7, #0]
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	f7ff fb38 	bl	80020c0 <calc_res_heat>
 8002a50:	4603      	mov	r3, r0
 8002a52:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
            gw_reg_addr[0] = BME69X_REG_GAS_WAIT0;
 8002a56:	2364      	movs	r3, #100	@ 0x64
 8002a58:	f887 3020 	strb.w	r3, [r7, #32]
            gw_reg_data[0] = calc_gas_wait(conf->heatr_dur);
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	889b      	ldrh	r3, [r3, #4]
 8002a60:	4618      	mov	r0, r3
 8002a62:	f7ff fbdd 	bl	8002220 <calc_gas_wait>
 8002a66:	4603      	mov	r3, r0
 8002a68:	753b      	strb	r3, [r7, #20]
            (*nb_conv) = 0;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	701a      	strb	r2, [r3, #0]
            write_len = 1;
 8002a70:	2301      	movs	r3, #1
 8002a72:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
            break;
 8002a76:	e0db      	b.n	8002c30 <set_conf+0x25a>
        case BME69X_SEQUENTIAL_MODE:
            if ((!conf->heatr_dur_prof) || (!conf->heatr_temp_prof))
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	68db      	ldr	r3, [r3, #12]
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d003      	beq.n	8002a88 <set_conf+0xb2>
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	689b      	ldr	r3, [r3, #8]
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d103      	bne.n	8002a90 <set_conf+0xba>
            {
                rslt = BME69X_E_NULL_PTR;
 8002a88:	23ff      	movs	r3, #255	@ 0xff
 8002a8a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
                break;
 8002a8e:	e0cf      	b.n	8002c30 <set_conf+0x25a>
            }

            for (i = 0; i < conf->profile_len; i++)
 8002a90:	2300      	movs	r3, #0
 8002a92:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
 8002a96:	e03f      	b.n	8002b18 <set_conf+0x142>
            {
                rh_reg_addr[i] = BME69X_REG_RES_HEAT0 + i;
 8002a98:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8002a9c:	f897 2046 	ldrb.w	r2, [r7, #70]	@ 0x46
 8002aa0:	325a      	adds	r2, #90	@ 0x5a
 8002aa2:	b2d2      	uxtb	r2, r2
 8002aa4:	3348      	adds	r3, #72	@ 0x48
 8002aa6:	443b      	add	r3, r7
 8002aa8:	f803 2c10 	strb.w	r2, [r3, #-16]
                rh_reg_data[i] = calc_res_heat(conf->heatr_temp_prof[i], dev);
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	689a      	ldr	r2, [r3, #8]
 8002ab0:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8002ab4:	005b      	lsls	r3, r3, #1
 8002ab6:	4413      	add	r3, r2
 8002ab8:	881b      	ldrh	r3, [r3, #0]
 8002aba:	f897 4046 	ldrb.w	r4, [r7, #70]	@ 0x46
 8002abe:	6839      	ldr	r1, [r7, #0]
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	f7ff fafd 	bl	80020c0 <calc_res_heat>
 8002ac6:	4603      	mov	r3, r0
 8002ac8:	461a      	mov	r2, r3
 8002aca:	f104 0348 	add.w	r3, r4, #72	@ 0x48
 8002ace:	443b      	add	r3, r7
 8002ad0:	f803 2c1c 	strb.w	r2, [r3, #-28]
                gw_reg_addr[i] = BME69X_REG_GAS_WAIT0 + i;
 8002ad4:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8002ad8:	f897 2046 	ldrb.w	r2, [r7, #70]	@ 0x46
 8002adc:	3264      	adds	r2, #100	@ 0x64
 8002ade:	b2d2      	uxtb	r2, r2
 8002ae0:	3348      	adds	r3, #72	@ 0x48
 8002ae2:	443b      	add	r3, r7
 8002ae4:	f803 2c28 	strb.w	r2, [r3, #-40]
                gw_reg_data[i] = calc_gas_wait(conf->heatr_dur_prof[i]);
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	68da      	ldr	r2, [r3, #12]
 8002aec:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8002af0:	005b      	lsls	r3, r3, #1
 8002af2:	4413      	add	r3, r2
 8002af4:	881b      	ldrh	r3, [r3, #0]
 8002af6:	f897 4046 	ldrb.w	r4, [r7, #70]	@ 0x46
 8002afa:	4618      	mov	r0, r3
 8002afc:	f7ff fb90 	bl	8002220 <calc_gas_wait>
 8002b00:	4603      	mov	r3, r0
 8002b02:	461a      	mov	r2, r3
 8002b04:	f104 0348 	add.w	r3, r4, #72	@ 0x48
 8002b08:	443b      	add	r3, r7
 8002b0a:	f803 2c34 	strb.w	r2, [r3, #-52]
            for (i = 0; i < conf->profile_len; i++)
 8002b0e:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8002b12:	3301      	adds	r3, #1
 8002b14:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	7c1b      	ldrb	r3, [r3, #16]
 8002b1c:	f897 2046 	ldrb.w	r2, [r7, #70]	@ 0x46
 8002b20:	429a      	cmp	r2, r3
 8002b22:	d3b9      	bcc.n	8002a98 <set_conf+0xc2>
            }

            (*nb_conv) = conf->profile_len;
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	7c1a      	ldrb	r2, [r3, #16]
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	701a      	strb	r2, [r3, #0]
            write_len = conf->profile_len;
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	7c1b      	ldrb	r3, [r3, #16]
 8002b30:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
            break;
 8002b34:	e07c      	b.n	8002c30 <set_conf+0x25a>
        case BME69X_PARALLEL_MODE:
            if ((!conf->heatr_dur_prof) || (!conf->heatr_temp_prof))
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	68db      	ldr	r3, [r3, #12]
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d003      	beq.n	8002b46 <set_conf+0x170>
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	689b      	ldr	r3, [r3, #8]
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d103      	bne.n	8002b4e <set_conf+0x178>
            {
                rslt = BME69X_E_NULL_PTR;
 8002b46:	23ff      	movs	r3, #255	@ 0xff
 8002b48:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
                break;
 8002b4c:	e070      	b.n	8002c30 <set_conf+0x25a>
            }

            if (conf->shared_heatr_dur == 0)
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	8a5b      	ldrh	r3, [r3, #18]
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d102      	bne.n	8002b5c <set_conf+0x186>
            {
                rslt = BME69X_W_DEFINE_SHD_HEATR_DUR;
 8002b56:	2303      	movs	r3, #3
 8002b58:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
            }

            for (i = 0; i < conf->profile_len; i++)
 8002b5c:	2300      	movs	r3, #0
 8002b5e:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
 8002b62:	e03a      	b.n	8002bda <set_conf+0x204>
            {
                rh_reg_addr[i] = BME69X_REG_RES_HEAT0 + i;
 8002b64:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8002b68:	f897 2046 	ldrb.w	r2, [r7, #70]	@ 0x46
 8002b6c:	325a      	adds	r2, #90	@ 0x5a
 8002b6e:	b2d2      	uxtb	r2, r2
 8002b70:	3348      	adds	r3, #72	@ 0x48
 8002b72:	443b      	add	r3, r7
 8002b74:	f803 2c10 	strb.w	r2, [r3, #-16]
                rh_reg_data[i] = calc_res_heat(conf->heatr_temp_prof[i], dev);
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	689a      	ldr	r2, [r3, #8]
 8002b7c:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8002b80:	005b      	lsls	r3, r3, #1
 8002b82:	4413      	add	r3, r2
 8002b84:	881b      	ldrh	r3, [r3, #0]
 8002b86:	f897 4046 	ldrb.w	r4, [r7, #70]	@ 0x46
 8002b8a:	6839      	ldr	r1, [r7, #0]
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	f7ff fa97 	bl	80020c0 <calc_res_heat>
 8002b92:	4603      	mov	r3, r0
 8002b94:	461a      	mov	r2, r3
 8002b96:	f104 0348 	add.w	r3, r4, #72	@ 0x48
 8002b9a:	443b      	add	r3, r7
 8002b9c:	f803 2c1c 	strb.w	r2, [r3, #-28]
                gw_reg_addr[i] = BME69X_REG_GAS_WAIT0 + i;
 8002ba0:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8002ba4:	f897 2046 	ldrb.w	r2, [r7, #70]	@ 0x46
 8002ba8:	3264      	adds	r2, #100	@ 0x64
 8002baa:	b2d2      	uxtb	r2, r2
 8002bac:	3348      	adds	r3, #72	@ 0x48
 8002bae:	443b      	add	r3, r7
 8002bb0:	f803 2c28 	strb.w	r2, [r3, #-40]
                gw_reg_data[i] = (uint8_t) conf->heatr_dur_prof[i];
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	68da      	ldr	r2, [r3, #12]
 8002bb8:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8002bbc:	005b      	lsls	r3, r3, #1
 8002bbe:	4413      	add	r3, r2
 8002bc0:	881a      	ldrh	r2, [r3, #0]
 8002bc2:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8002bc6:	b2d2      	uxtb	r2, r2
 8002bc8:	3348      	adds	r3, #72	@ 0x48
 8002bca:	443b      	add	r3, r7
 8002bcc:	f803 2c34 	strb.w	r2, [r3, #-52]
            for (i = 0; i < conf->profile_len; i++)
 8002bd0:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8002bd4:	3301      	adds	r3, #1
 8002bd6:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	7c1b      	ldrb	r3, [r3, #16]
 8002bde:	f897 2046 	ldrb.w	r2, [r7, #70]	@ 0x46
 8002be2:	429a      	cmp	r2, r3
 8002be4:	d3be      	bcc.n	8002b64 <set_conf+0x18e>
            }

            (*nb_conv) = conf->profile_len;
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	7c1a      	ldrb	r2, [r3, #16]
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	701a      	strb	r2, [r3, #0]
            write_len = conf->profile_len;
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	7c1b      	ldrb	r3, [r3, #16]
 8002bf2:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
            shared_dur = calc_heatr_dur_shared(conf->shared_heatr_dur);
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	8a5b      	ldrh	r3, [r3, #18]
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	f000 f83e 	bl	8002c7c <calc_heatr_dur_shared>
 8002c00:	4603      	mov	r3, r0
 8002c02:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
            if (rslt == BME69X_OK)
 8002c06:	f997 3047 	ldrsb.w	r3, [r7, #71]	@ 0x47
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d10f      	bne.n	8002c2e <set_conf+0x258>
            {
                rslt = bme69x_set_regs(&heater_dur_shared_addr, &shared_dur, 1, dev);
 8002c0e:	f107 0144 	add.w	r1, r7, #68	@ 0x44
 8002c12:	f107 0043 	add.w	r0, r7, #67	@ 0x43
 8002c16:	683b      	ldr	r3, [r7, #0]
 8002c18:	2201      	movs	r2, #1
 8002c1a:	f7fe fa05 	bl	8001028 <bme69x_set_regs>
 8002c1e:	4603      	mov	r3, r0
 8002c20:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
            }

            break;
 8002c24:	e003      	b.n	8002c2e <set_conf+0x258>
        default:
            rslt = BME69X_W_DEFINE_OP_MODE;
 8002c26:	2301      	movs	r3, #1
 8002c28:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8002c2c:	e000      	b.n	8002c30 <set_conf+0x25a>
            break;
 8002c2e:	bf00      	nop
    }

    if (rslt == BME69X_OK)
 8002c30:	f997 3047 	ldrsb.w	r3, [r7, #71]	@ 0x47
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d10b      	bne.n	8002c50 <set_conf+0x27a>
    {
        rslt = bme69x_set_regs(rh_reg_addr, rh_reg_data, write_len, dev);
 8002c38:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8002c3c:	f107 012c 	add.w	r1, r7, #44	@ 0x2c
 8002c40:	f107 0038 	add.w	r0, r7, #56	@ 0x38
 8002c44:	683b      	ldr	r3, [r7, #0]
 8002c46:	f7fe f9ef 	bl	8001028 <bme69x_set_regs>
 8002c4a:	4603      	mov	r3, r0
 8002c4c:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }

    if (rslt == BME69X_OK)
 8002c50:	f997 3047 	ldrsb.w	r3, [r7, #71]	@ 0x47
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d10b      	bne.n	8002c70 <set_conf+0x29a>
    {
        rslt = bme69x_set_regs(gw_reg_addr, gw_reg_data, write_len, dev);
 8002c58:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8002c5c:	f107 0114 	add.w	r1, r7, #20
 8002c60:	f107 0020 	add.w	r0, r7, #32
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	f7fe f9df 	bl	8001028 <bme69x_set_regs>
 8002c6a:	4603      	mov	r3, r0
 8002c6c:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }

    return rslt;
 8002c70:	f997 3047 	ldrsb.w	r3, [r7, #71]	@ 0x47
}
 8002c74:	4618      	mov	r0, r3
 8002c76:	374c      	adds	r7, #76	@ 0x4c
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	bd90      	pop	{r4, r7, pc}

08002c7c <calc_heatr_dur_shared>:

/* This internal API is used to calculate the register value for
 * shared heater duration */
static uint8_t calc_heatr_dur_shared(uint16_t dur)
{
 8002c7c:	b480      	push	{r7}
 8002c7e:	b085      	sub	sp, #20
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	4603      	mov	r3, r0
 8002c84:	80fb      	strh	r3, [r7, #6]
    uint8_t factor = 0;
 8002c86:	2300      	movs	r3, #0
 8002c88:	73fb      	strb	r3, [r7, #15]
    uint8_t heatdurval;

    if (dur >= 0x783)
 8002c8a:	88fb      	ldrh	r3, [r7, #6]
 8002c8c:	f240 7282 	movw	r2, #1922	@ 0x782
 8002c90:	4293      	cmp	r3, r2
 8002c92:	d902      	bls.n	8002c9a <calc_heatr_dur_shared+0x1e>
    {
        heatdurval = 0xff; /* Max duration */
 8002c94:	23ff      	movs	r3, #255	@ 0xff
 8002c96:	73bb      	strb	r3, [r7, #14]
 8002c98:	e01d      	b.n	8002cd6 <calc_heatr_dur_shared+0x5a>
    }
    else
    {
        /* Step size of 0.477ms */
        dur = (uint16_t)(((uint32_t)dur * 1000) / 477);
 8002c9a:	88fb      	ldrh	r3, [r7, #6]
 8002c9c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002ca0:	fb03 f202 	mul.w	r2, r3, r2
 8002ca4:	4b0f      	ldr	r3, [pc, #60]	@ (8002ce4 <calc_heatr_dur_shared+0x68>)
 8002ca6:	fba3 1302 	umull	r1, r3, r3, r2
 8002caa:	1ad2      	subs	r2, r2, r3
 8002cac:	0852      	lsrs	r2, r2, #1
 8002cae:	4413      	add	r3, r2
 8002cb0:	0a1b      	lsrs	r3, r3, #8
 8002cb2:	80fb      	strh	r3, [r7, #6]
        while (dur > 0x3F)
 8002cb4:	e005      	b.n	8002cc2 <calc_heatr_dur_shared+0x46>
        {
            dur = dur >> 2;
 8002cb6:	88fb      	ldrh	r3, [r7, #6]
 8002cb8:	089b      	lsrs	r3, r3, #2
 8002cba:	80fb      	strh	r3, [r7, #6]
            factor += 1;
 8002cbc:	7bfb      	ldrb	r3, [r7, #15]
 8002cbe:	3301      	adds	r3, #1
 8002cc0:	73fb      	strb	r3, [r7, #15]
        while (dur > 0x3F)
 8002cc2:	88fb      	ldrh	r3, [r7, #6]
 8002cc4:	2b3f      	cmp	r3, #63	@ 0x3f
 8002cc6:	d8f6      	bhi.n	8002cb6 <calc_heatr_dur_shared+0x3a>
        }

        heatdurval = (uint8_t)(dur + (factor * 64));
 8002cc8:	88fb      	ldrh	r3, [r7, #6]
 8002cca:	b2da      	uxtb	r2, r3
 8002ccc:	7bfb      	ldrb	r3, [r7, #15]
 8002cce:	019b      	lsls	r3, r3, #6
 8002cd0:	b2db      	uxtb	r3, r3
 8002cd2:	4413      	add	r3, r2
 8002cd4:	73bb      	strb	r3, [r7, #14]
    }

    return heatdurval;
 8002cd6:	7bbb      	ldrb	r3, [r7, #14]
}
 8002cd8:	4618      	mov	r0, r3
 8002cda:	3714      	adds	r7, #20
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce2:	4770      	bx	lr
 8002ce4:	12c8b89f 	.word	0x12c8b89f

08002ce8 <sort_sensor_data>:

/* This internal API is used sort the sensor data */
static void sort_sensor_data(uint8_t low_index, uint8_t high_index, struct bme69x_data *field[])
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	b084      	sub	sp, #16
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	4603      	mov	r3, r0
 8002cf0:	603a      	str	r2, [r7, #0]
 8002cf2:	71fb      	strb	r3, [r7, #7]
 8002cf4:	460b      	mov	r3, r1
 8002cf6:	71bb      	strb	r3, [r7, #6]
    int16_t meas_index1;
    int16_t meas_index2;

    meas_index1 = (int16_t)field[low_index]->meas_index;
 8002cf8:	79fb      	ldrb	r3, [r7, #7]
 8002cfa:	009b      	lsls	r3, r3, #2
 8002cfc:	683a      	ldr	r2, [r7, #0]
 8002cfe:	4413      	add	r3, r2
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	789b      	ldrb	r3, [r3, #2]
 8002d04:	81fb      	strh	r3, [r7, #14]
    meas_index2 = (int16_t)field[high_index]->meas_index;
 8002d06:	79bb      	ldrb	r3, [r7, #6]
 8002d08:	009b      	lsls	r3, r3, #2
 8002d0a:	683a      	ldr	r2, [r7, #0]
 8002d0c:	4413      	add	r3, r2
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	789b      	ldrb	r3, [r3, #2]
 8002d12:	81bb      	strh	r3, [r7, #12]
    if ((field[low_index]->status & BME69X_NEW_DATA_MSK) && (field[high_index]->status & BME69X_NEW_DATA_MSK))
 8002d14:	79fb      	ldrb	r3, [r7, #7]
 8002d16:	009b      	lsls	r3, r3, #2
 8002d18:	683a      	ldr	r2, [r7, #0]
 8002d1a:	4413      	add	r3, r2
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	781b      	ldrb	r3, [r3, #0]
 8002d20:	b25b      	sxtb	r3, r3
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	da21      	bge.n	8002d6a <sort_sensor_data+0x82>
 8002d26:	79bb      	ldrb	r3, [r7, #6]
 8002d28:	009b      	lsls	r3, r3, #2
 8002d2a:	683a      	ldr	r2, [r7, #0]
 8002d2c:	4413      	add	r3, r2
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	781b      	ldrb	r3, [r3, #0]
 8002d32:	b25b      	sxtb	r3, r3
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	da18      	bge.n	8002d6a <sort_sensor_data+0x82>
    {
        int16_t diff = meas_index2 - meas_index1;
 8002d38:	89ba      	ldrh	r2, [r7, #12]
 8002d3a:	89fb      	ldrh	r3, [r7, #14]
 8002d3c:	1ad3      	subs	r3, r2, r3
 8002d3e:	b29b      	uxth	r3, r3
 8002d40:	817b      	strh	r3, [r7, #10]
        if (((diff > -3) && (diff < 0)) || (diff > 2))
 8002d42:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002d46:	f113 0f02 	cmn.w	r3, #2
 8002d4a:	db03      	blt.n	8002d54 <sort_sensor_data+0x6c>
 8002d4c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	db03      	blt.n	8002d5c <sort_sensor_data+0x74>
 8002d54:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002d58:	2b02      	cmp	r3, #2
 8002d5a:	dd16      	ble.n	8002d8a <sort_sensor_data+0xa2>
        {
            swap_fields(low_index, high_index, field);
 8002d5c:	79b9      	ldrb	r1, [r7, #6]
 8002d5e:	79fb      	ldrb	r3, [r7, #7]
 8002d60:	683a      	ldr	r2, [r7, #0]
 8002d62:	4618      	mov	r0, r3
 8002d64:	f000 f816 	bl	8002d94 <swap_fields>
    {
 8002d68:	e00f      	b.n	8002d8a <sort_sensor_data+0xa2>
        }
    }
    else if (field[high_index]->status & BME69X_NEW_DATA_MSK)
 8002d6a:	79bb      	ldrb	r3, [r7, #6]
 8002d6c:	009b      	lsls	r3, r3, #2
 8002d6e:	683a      	ldr	r2, [r7, #0]
 8002d70:	4413      	add	r3, r2
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	781b      	ldrb	r3, [r3, #0]
 8002d76:	b25b      	sxtb	r3, r3
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	da07      	bge.n	8002d8c <sort_sensor_data+0xa4>
    {
        swap_fields(low_index, high_index, field);
 8002d7c:	79b9      	ldrb	r1, [r7, #6]
 8002d7e:	79fb      	ldrb	r3, [r7, #7]
 8002d80:	683a      	ldr	r2, [r7, #0]
 8002d82:	4618      	mov	r0, r3
 8002d84:	f000 f806 	bl	8002d94 <swap_fields>
     *         - diff > 2, case 4.
     *
     *     Here the limits of -3 and 2 derive from the fact that there are 3 fields.
     *     These values decrease or increase respectively if the number of fields increases.
     */
}
 8002d88:	e000      	b.n	8002d8c <sort_sensor_data+0xa4>
    {
 8002d8a:	bf00      	nop
}
 8002d8c:	bf00      	nop
 8002d8e:	3710      	adds	r7, #16
 8002d90:	46bd      	mov	sp, r7
 8002d92:	bd80      	pop	{r7, pc}

08002d94 <swap_fields>:

/* This internal API is used sort the sensor data */
static void swap_fields(uint8_t index1, uint8_t index2, struct bme69x_data *field[])
{
 8002d94:	b480      	push	{r7}
 8002d96:	b085      	sub	sp, #20
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	4603      	mov	r3, r0
 8002d9c:	603a      	str	r2, [r7, #0]
 8002d9e:	71fb      	strb	r3, [r7, #7]
 8002da0:	460b      	mov	r3, r1
 8002da2:	71bb      	strb	r3, [r7, #6]
    struct bme69x_data *temp;

    temp = field[index1];
 8002da4:	79fb      	ldrb	r3, [r7, #7]
 8002da6:	009b      	lsls	r3, r3, #2
 8002da8:	683a      	ldr	r2, [r7, #0]
 8002daa:	4413      	add	r3, r2
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	60fb      	str	r3, [r7, #12]
    field[index1] = field[index2];
 8002db0:	79bb      	ldrb	r3, [r7, #6]
 8002db2:	009b      	lsls	r3, r3, #2
 8002db4:	683a      	ldr	r2, [r7, #0]
 8002db6:	441a      	add	r2, r3
 8002db8:	79fb      	ldrb	r3, [r7, #7]
 8002dba:	009b      	lsls	r3, r3, #2
 8002dbc:	6839      	ldr	r1, [r7, #0]
 8002dbe:	440b      	add	r3, r1
 8002dc0:	6812      	ldr	r2, [r2, #0]
 8002dc2:	601a      	str	r2, [r3, #0]
    field[index2] = temp;
 8002dc4:	79bb      	ldrb	r3, [r7, #6]
 8002dc6:	009b      	lsls	r3, r3, #2
 8002dc8:	683a      	ldr	r2, [r7, #0]
 8002dca:	4413      	add	r3, r2
 8002dcc:	68fa      	ldr	r2, [r7, #12]
 8002dce:	601a      	str	r2, [r3, #0]
}
 8002dd0:	bf00      	nop
 8002dd2:	3714      	adds	r7, #20
 8002dd4:	46bd      	mov	sp, r7
 8002dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dda:	4770      	bx	lr

08002ddc <get_calib_data>:
    return rslt;
}

/* This internal API is used to read the calibration coefficients */
static int8_t get_calib_data(struct bme69x_dev *dev)
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	b08e      	sub	sp, #56	@ 0x38
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t coeff_array[BME69X_LEN_COEFF_ALL];

    rslt = bme69x_get_regs(BME69X_REG_COEFF1, coeff_array, BME69X_LEN_COEFF1, dev);
 8002de4:	f107 010c 	add.w	r1, r7, #12
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	2217      	movs	r2, #23
 8002dec:	208a      	movs	r0, #138	@ 0x8a
 8002dee:	f7fe f9aa 	bl	8001146 <bme69x_get_regs>
 8002df2:	4603      	mov	r3, r0
 8002df4:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    if (rslt == BME69X_OK)
 8002df8:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d10b      	bne.n	8002e18 <get_calib_data+0x3c>
    {
        rslt = bme69x_get_regs(BME69X_REG_COEFF2, &coeff_array[BME69X_LEN_COEFF1], BME69X_LEN_COEFF2, dev);
 8002e00:	f107 030c 	add.w	r3, r7, #12
 8002e04:	f103 0117 	add.w	r1, r3, #23
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	220e      	movs	r2, #14
 8002e0c:	20e1      	movs	r0, #225	@ 0xe1
 8002e0e:	f7fe f99a 	bl	8001146 <bme69x_get_regs>
 8002e12:	4603      	mov	r3, r0
 8002e14:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    }

    if (rslt == BME69X_OK)
 8002e18:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d10b      	bne.n	8002e38 <get_calib_data+0x5c>
    {
        rslt = bme69x_get_regs(BME69X_REG_COEFF3,
 8002e20:	f107 030c 	add.w	r3, r7, #12
 8002e24:	f103 0125 	add.w	r1, r3, #37	@ 0x25
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	2205      	movs	r2, #5
 8002e2c:	2000      	movs	r0, #0
 8002e2e:	f7fe f98a 	bl	8001146 <bme69x_get_regs>
 8002e32:	4603      	mov	r3, r0
 8002e34:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
                               &coeff_array[BME69X_LEN_COEFF1 + BME69X_LEN_COEFF2],
                               BME69X_LEN_COEFF3,
                               dev);
    }

    if (rslt == BME69X_OK)
 8002e38:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	f040 80ce 	bne.w	8002fde <get_calib_data+0x202>
    {
        /* Temperature related coefficients */
        dev->calib.par_t1 =
            (uint16_t)(BME69X_CONCAT_BYTES(coeff_array[BME69X_IDX_DO_C_MSB], coeff_array[BME69X_IDX_DO_C_LSB]));
 8002e42:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8002e46:	b21b      	sxth	r3, r3
 8002e48:	021b      	lsls	r3, r3, #8
 8002e4a:	b21a      	sxth	r2, r3
 8002e4c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8002e50:	b21b      	sxth	r3, r3
 8002e52:	4313      	orrs	r3, r2
 8002e54:	b21b      	sxth	r3, r3
 8002e56:	b29a      	uxth	r2, r3
        dev->calib.par_t1 =
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	83da      	strh	r2, [r3, #30]
        dev->calib.par_t2 =
            (uint16_t)(BME69X_CONCAT_BYTES(coeff_array[BME69X_IDX_DTK1_C_MSB], coeff_array[BME69X_IDX_DTK1_C_LSB]));
 8002e5c:	7b7b      	ldrb	r3, [r7, #13]
 8002e5e:	b21b      	sxth	r3, r3
 8002e60:	021b      	lsls	r3, r3, #8
 8002e62:	b21a      	sxth	r2, r3
 8002e64:	7b3b      	ldrb	r3, [r7, #12]
 8002e66:	b21b      	sxth	r3, r3
 8002e68:	4313      	orrs	r3, r2
 8002e6a:	b21b      	sxth	r3, r3
 8002e6c:	b29a      	uxth	r2, r3
        dev->calib.par_t2 =
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	841a      	strh	r2, [r3, #32]
        dev->calib.par_t3 = (int8_t)(coeff_array[BME69X_IDX_DTK2_C]);
 8002e72:	7bbb      	ldrb	r3, [r7, #14]
 8002e74:	b25a      	sxtb	r2, r3
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

        /* Pressure related coefficients */
        dev->calib.par_p5 =
            (int16_t)(BME69X_CONCAT_BYTES(coeff_array[BME69X_IDX_S_C_MSB], coeff_array[BME69X_IDX_S_C_LSB]));
 8002e7c:	7c7b      	ldrb	r3, [r7, #17]
 8002e7e:	b21b      	sxth	r3, r3
 8002e80:	021b      	lsls	r3, r3, #8
 8002e82:	b21a      	sxth	r2, r3
 8002e84:	7c3b      	ldrb	r3, [r7, #16]
 8002e86:	b21b      	sxth	r3, r3
 8002e88:	4313      	orrs	r3, r2
 8002e8a:	b21a      	sxth	r2, r3
        dev->calib.par_p5 =
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	849a      	strh	r2, [r3, #36]	@ 0x24
        dev->calib.par_p6 =
            (int16_t)(BME69X_CONCAT_BYTES(coeff_array[BME69X_IDX_TK1S_C_MSB], coeff_array[BME69X_IDX_TK1S_C_LSB]));
 8002e90:	7cfb      	ldrb	r3, [r7, #19]
 8002e92:	b21b      	sxth	r3, r3
 8002e94:	021b      	lsls	r3, r3, #8
 8002e96:	b21a      	sxth	r2, r3
 8002e98:	7cbb      	ldrb	r3, [r7, #18]
 8002e9a:	b21b      	sxth	r3, r3
 8002e9c:	4313      	orrs	r3, r2
 8002e9e:	b21a      	sxth	r2, r3
        dev->calib.par_p6 =
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	84da      	strh	r2, [r3, #38]	@ 0x26
        dev->calib.par_p7 = (int8_t)coeff_array[BME69X_IDX_TK2S_C];
 8002ea4:	7d3b      	ldrb	r3, [r7, #20]
 8002ea6:	b25a      	sxtb	r2, r3
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
        dev->calib.par_p8 = (int8_t)coeff_array[BME69X_IDX_TK3S_C];
 8002eae:	7d7b      	ldrb	r3, [r7, #21]
 8002eb0:	b25a      	sxtb	r2, r3
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

        dev->calib.par_p1 =
            (int16_t)(BME69X_CONCAT_BYTES(coeff_array[BME69X_IDX_O_C_MSB], coeff_array[BME69X_IDX_O_C_LSB]));
 8002eb8:	7dfb      	ldrb	r3, [r7, #23]
 8002eba:	b21b      	sxth	r3, r3
 8002ebc:	021b      	lsls	r3, r3, #8
 8002ebe:	b21a      	sxth	r2, r3
 8002ec0:	7dbb      	ldrb	r3, [r7, #22]
 8002ec2:	b21b      	sxth	r3, r3
 8002ec4:	4313      	orrs	r3, r2
 8002ec6:	b21b      	sxth	r3, r3
 8002ec8:	b29a      	uxth	r2, r3
        dev->calib.par_p1 =
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	855a      	strh	r2, [r3, #42]	@ 0x2a
        dev->calib.par_p2 =
            (uint16_t)(BME69X_CONCAT_BYTES(coeff_array[BME69X_IDX_TK10_C_MSB], coeff_array[BME69X_IDX_TK10_C_LSB]));
 8002ece:	7e7b      	ldrb	r3, [r7, #25]
 8002ed0:	b21b      	sxth	r3, r3
 8002ed2:	021b      	lsls	r3, r3, #8
 8002ed4:	b21a      	sxth	r2, r3
 8002ed6:	7e3b      	ldrb	r3, [r7, #24]
 8002ed8:	b21b      	sxth	r3, r3
 8002eda:	4313      	orrs	r3, r2
 8002edc:	b21b      	sxth	r3, r3
 8002ede:	b29a      	uxth	r2, r3
        dev->calib.par_p2 =
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	859a      	strh	r2, [r3, #44]	@ 0x2c
        dev->calib.par_p3 = (int8_t)(coeff_array[BME69X_IDX_TK20_C]);
 8002ee4:	7ebb      	ldrb	r3, [r7, #26]
 8002ee6:	b25a      	sxtb	r2, r3
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
        dev->calib.par_p4 = (int8_t)(coeff_array[BME69X_IDX_TK30_C]);
 8002eee:	7efb      	ldrb	r3, [r7, #27]
 8002ef0:	b25a      	sxtb	r2, r3
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f

        dev->calib.par_p9 =
            (int16_t)(BME69X_CONCAT_BYTES(coeff_array[BME69X_IDX_NLS_C_MSB], coeff_array[BME69X_IDX_NLS_C_LSB]));
 8002ef8:	7ffb      	ldrb	r3, [r7, #31]
 8002efa:	b21b      	sxth	r3, r3
 8002efc:	021b      	lsls	r3, r3, #8
 8002efe:	b21a      	sxth	r2, r3
 8002f00:	7fbb      	ldrb	r3, [r7, #30]
 8002f02:	b21b      	sxth	r3, r3
 8002f04:	4313      	orrs	r3, r2
 8002f06:	b21a      	sxth	r2, r3
        dev->calib.par_p9 =
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	861a      	strh	r2, [r3, #48]	@ 0x30
        dev->calib.par_p10 = (int8_t)(coeff_array[BME69X_IDX_TKNLS_C]);
 8002f0c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002f10:	b25a      	sxtb	r2, r3
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
        dev->calib.par_p11 = (int8_t)(coeff_array[BME69X_IDX_NLS3_C]);
 8002f18:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8002f1c:	b25a      	sxtb	r2, r3
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33

        /* Humidity related coefficients */
        dev->calib.par_h5 =
            (int16_t)(((int16_t)coeff_array[BME69X_IDX_S_H_MSB] << 4) | (coeff_array[BME69X_IDX_S_H_LSB] >> 4));
 8002f24:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002f28:	b21b      	sxth	r3, r3
 8002f2a:	011b      	lsls	r3, r3, #4
 8002f2c:	b21a      	sxth	r2, r3
 8002f2e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8002f32:	091b      	lsrs	r3, r3, #4
 8002f34:	b2db      	uxtb	r3, r3
 8002f36:	b21b      	sxth	r3, r3
 8002f38:	4313      	orrs	r3, r2
 8002f3a:	b21a      	sxth	r2, r3
        dev->calib.par_h5 =
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	82da      	strh	r2, [r3, #22]
        dev->calib.par_h1 =
            (int16_t)(((int16_t)coeff_array[BME69X_IDX_O_H_MSB] << 4) | (coeff_array[BME69X_IDX_O_H_LSB] & 0x0F));
 8002f40:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8002f44:	b21b      	sxth	r3, r3
 8002f46:	011b      	lsls	r3, r3, #4
 8002f48:	b21a      	sxth	r2, r3
 8002f4a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8002f4e:	b21b      	sxth	r3, r3
 8002f50:	f003 030f 	and.w	r3, r3, #15
 8002f54:	b21b      	sxth	r3, r3
 8002f56:	4313      	orrs	r3, r2
 8002f58:	b21a      	sxth	r2, r3
        dev->calib.par_h1 =
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	821a      	strh	r2, [r3, #16]
        dev->calib.par_h2 = (int8_t)coeff_array[BME69X_IDX_TK10H_C];
 8002f5e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8002f62:	b25a      	sxtb	r2, r3
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	749a      	strb	r2, [r3, #18]
        dev->calib.par_h4 = (int8_t)coeff_array[BME69X_IDX_par_h4];
 8002f68:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002f6c:	b25a      	sxtb	r2, r3
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	751a      	strb	r2, [r3, #20]
        dev->calib.par_h3 = (uint8_t)coeff_array[BME69X_IDX_par_h3];
 8002f72:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	74da      	strb	r2, [r3, #19]
        dev->calib.par_h6 = (uint8_t)coeff_array[BME69X_IDX_HLIN2_C];
 8002f7a:	f897 2029 	ldrb.w	r2, [r7, #41]	@ 0x29
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	761a      	strb	r2, [r3, #24]

        /* Gas heater related coefficients */
        dev->calib.par_g1 = (int8_t)coeff_array[BME69X_IDX_RO_C];
 8002f82:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8002f86:	b25a      	sxtb	r2, r3
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	765a      	strb	r2, [r3, #25]
        dev->calib.par_g2 =
            (int16_t)(BME69X_CONCAT_BYTES(coeff_array[BME69X_IDX_TKR_C_MSB], coeff_array[BME69X_IDX_TKR_C_LSB]));
 8002f8c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8002f90:	b21b      	sxth	r3, r3
 8002f92:	021b      	lsls	r3, r3, #8
 8002f94:	b21a      	sxth	r2, r3
 8002f96:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8002f9a:	b21b      	sxth	r3, r3
 8002f9c:	4313      	orrs	r3, r2
 8002f9e:	b21a      	sxth	r2, r3
        dev->calib.par_g2 =
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	835a      	strh	r2, [r3, #26]
        dev->calib.par_g3 = (int8_t)coeff_array[BME69X_IDX_T_AMB_COMP];
 8002fa4:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8002fa8:	b25a      	sxtb	r2, r3
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	771a      	strb	r2, [r3, #28]

        /* Other coefficients */
        dev->calib.res_heat_range = ((coeff_array[BME69X_IDX_RES_HEAT_RANGE] & BME69X_RHRANGE_MSK) >> 4);
 8002fae:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002fb2:	111b      	asrs	r3, r3, #4
 8002fb4:	b2db      	uxtb	r3, r3
 8002fb6:	f003 0303 	and.w	r3, r3, #3
 8002fba:	b2da      	uxtb	r2, r3
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
        dev->calib.res_heat_val = (int8_t)coeff_array[BME69X_IDX_RES_HEAT_VAL];
 8002fc2:	f897 3031 	ldrb.w	r3, [r7, #49]	@ 0x31
 8002fc6:	b25a      	sxtb	r2, r3
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
        dev->calib.range_sw_err = ((int8_t)(coeff_array[BME69X_IDX_RANGE_SW_ERR] & BME69X_RSERROR_MSK)) / 16;
 8002fce:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8002fd2:	b25b      	sxtb	r3, r3
 8002fd4:	111b      	asrs	r3, r3, #4
 8002fd6:	b25a      	sxtb	r2, r3
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
    }

    return rslt;
 8002fde:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
}
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	3738      	adds	r7, #56	@ 0x38
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	bd80      	pop	{r7, pc}

08002fea <read_variant_id>:

/* This internal API is used to read variant ID information from the register */
static int8_t read_variant_id(struct bme69x_dev *dev)
{
 8002fea:	b580      	push	{r7, lr}
 8002fec:	b084      	sub	sp, #16
 8002fee:	af00      	add	r7, sp, #0
 8002ff0:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t reg_data = 0;
 8002ff2:	2300      	movs	r3, #0
 8002ff4:	73bb      	strb	r3, [r7, #14]

    /* Read variant ID information register */
    rslt = bme69x_get_regs(BME69X_REG_VARIANT_ID, &reg_data, 1, dev);
 8002ff6:	f107 010e 	add.w	r1, r7, #14
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	2201      	movs	r2, #1
 8002ffe:	20f0      	movs	r0, #240	@ 0xf0
 8003000:	f7fe f8a1 	bl	8001146 <bme69x_get_regs>
 8003004:	4603      	mov	r3, r0
 8003006:	73fb      	strb	r3, [r7, #15]

    if (rslt == BME69X_OK)
 8003008:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800300c:	2b00      	cmp	r3, #0
 800300e:	d103      	bne.n	8003018 <read_variant_id+0x2e>
    {
        dev->variant_id = reg_data;
 8003010:	7bbb      	ldrb	r3, [r7, #14]
 8003012:	461a      	mov	r2, r3
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	609a      	str	r2, [r3, #8]
    }

    return rslt;
 8003018:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800301c:	4618      	mov	r0, r3
 800301e:	3710      	adds	r7, #16
 8003020:	46bd      	mov	sp, r7
 8003022:	bd80      	pop	{r7, pc}

08003024 <bme69x_i2c_read>:
 * @param[in] intf_ptr     Pointer to the interface (user-defined handle).
 *
 * @return 0 for success (BME69X_OK), non-zero for failure (BME69X_E_COM_FAIL).
 */
int8_t bme69x_i2c_read(uint8_t reg_addr, uint8_t *reg_data, uint32_t len, void *intf_ptr)
{
 8003024:	b590      	push	{r4, r7, lr}
 8003026:	b08b      	sub	sp, #44	@ 0x2c
 8003028:	af04      	add	r7, sp, #16
 800302a:	60b9      	str	r1, [r7, #8]
 800302c:	607a      	str	r2, [r7, #4]
 800302e:	603b      	str	r3, [r7, #0]
 8003030:	4603      	mov	r3, r0
 8003032:	73fb      	strb	r3, [r7, #15]
    bme69x_i2c_user_handle_t *user_handle = (bme69x_i2c_user_handle_t *)intf_ptr;
 8003034:	683b      	ldr	r3, [r7, #0]
 8003036:	617b      	str	r3, [r7, #20]
    HAL_StatusTypeDef status;

    // The BME69x expects the register address to be sent first, then data is read.
    // HAL_I2C_Mem_Read handles this sequence.
    // The device address needs to be shifted left by 1 for HAL functions.
    status = HAL_I2C_Mem_Read(user_handle->hi2c, (user_handle->i2c_addr << 1), reg_addr, I2C_MEMADD_SIZE_8BIT, reg_data, (uint16_t)len, HAL_MAX_DELAY);
 8003038:	697b      	ldr	r3, [r7, #20]
 800303a:	6818      	ldr	r0, [r3, #0]
 800303c:	697b      	ldr	r3, [r7, #20]
 800303e:	791b      	ldrb	r3, [r3, #4]
 8003040:	005b      	lsls	r3, r3, #1
 8003042:	b299      	uxth	r1, r3
 8003044:	7bfb      	ldrb	r3, [r7, #15]
 8003046:	b29a      	uxth	r2, r3
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	b29b      	uxth	r3, r3
 800304c:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8003050:	9402      	str	r4, [sp, #8]
 8003052:	9301      	str	r3, [sp, #4]
 8003054:	68bb      	ldr	r3, [r7, #8]
 8003056:	9300      	str	r3, [sp, #0]
 8003058:	2301      	movs	r3, #1
 800305a:	f002 fc81 	bl	8005960 <HAL_I2C_Mem_Read>
 800305e:	4603      	mov	r3, r0
 8003060:	74fb      	strb	r3, [r7, #19]

    return (status == HAL_OK) ? (int8_t)BME69X_OK : (int8_t)BME69X_E_COM_FAIL; // Corrected error macro
 8003062:	7cfb      	ldrb	r3, [r7, #19]
 8003064:	2b00      	cmp	r3, #0
 8003066:	d101      	bne.n	800306c <bme69x_i2c_read+0x48>
 8003068:	2300      	movs	r3, #0
 800306a:	e001      	b.n	8003070 <bme69x_i2c_read+0x4c>
 800306c:	f06f 0301 	mvn.w	r3, #1
}
 8003070:	4618      	mov	r0, r3
 8003072:	371c      	adds	r7, #28
 8003074:	46bd      	mov	sp, r7
 8003076:	bd90      	pop	{r4, r7, pc}

08003078 <bme69x_i2c_write>:
 * @param[in] intf_ptr     Pointer to the interface (user-defined handle).
 *
 * @return 0 for success (BME69X_OK), non-zero for failure (BME69X_E_COM_FAIL).
 */
int8_t bme69x_i2c_write(uint8_t reg_addr, const uint8_t *reg_data, uint32_t len, void *intf_ptr)
{
 8003078:	b590      	push	{r4, r7, lr}
 800307a:	b08b      	sub	sp, #44	@ 0x2c
 800307c:	af04      	add	r7, sp, #16
 800307e:	60b9      	str	r1, [r7, #8]
 8003080:	607a      	str	r2, [r7, #4]
 8003082:	603b      	str	r3, [r7, #0]
 8003084:	4603      	mov	r3, r0
 8003086:	73fb      	strb	r3, [r7, #15]
    bme69x_i2c_user_handle_t *user_handle = (bme69x_i2c_user_handle_t *)intf_ptr;
 8003088:	683b      	ldr	r3, [r7, #0]
 800308a:	617b      	str	r3, [r7, #20]
    HAL_StatusTypeDef status;

    // HAL_I2C_Mem_Write handles sending register address, then data.
    // The device address needs to be shifted left by 1 for HAL functions.
    status = HAL_I2C_Mem_Write(user_handle->hi2c, (user_handle->i2c_addr << 1), reg_addr, I2C_MEMADD_SIZE_8BIT, (uint8_t *)reg_data, (uint16_t)len, HAL_MAX_DELAY);
 800308c:	697b      	ldr	r3, [r7, #20]
 800308e:	6818      	ldr	r0, [r3, #0]
 8003090:	697b      	ldr	r3, [r7, #20]
 8003092:	791b      	ldrb	r3, [r3, #4]
 8003094:	005b      	lsls	r3, r3, #1
 8003096:	b299      	uxth	r1, r3
 8003098:	7bfb      	ldrb	r3, [r7, #15]
 800309a:	b29a      	uxth	r2, r3
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	b29b      	uxth	r3, r3
 80030a0:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 80030a4:	9402      	str	r4, [sp, #8]
 80030a6:	9301      	str	r3, [sp, #4]
 80030a8:	68bb      	ldr	r3, [r7, #8]
 80030aa:	9300      	str	r3, [sp, #0]
 80030ac:	2301      	movs	r3, #1
 80030ae:	f002 fb43 	bl	8005738 <HAL_I2C_Mem_Write>
 80030b2:	4603      	mov	r3, r0
 80030b4:	74fb      	strb	r3, [r7, #19]

    return (status == HAL_OK) ? (int8_t)BME69X_OK : (int8_t)BME69X_E_COM_FAIL; // Corrected error macro
 80030b6:	7cfb      	ldrb	r3, [r7, #19]
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d101      	bne.n	80030c0 <bme69x_i2c_write+0x48>
 80030bc:	2300      	movs	r3, #0
 80030be:	e001      	b.n	80030c4 <bme69x_i2c_write+0x4c>
 80030c0:	f06f 0301 	mvn.w	r3, #1
}
 80030c4:	4618      	mov	r0, r3
 80030c6:	371c      	adds	r7, #28
 80030c8:	46bd      	mov	sp, r7
 80030ca:	bd90      	pop	{r4, r7, pc}

080030cc <bme69x_delay_us>:
 *
 * @param[in] period       Delay period in microseconds.
 * @param[in] intf_ptr     Pointer to the interface (user-defined handle).
 */
void bme69x_delay_us(uint32_t period, void *intf_ptr)
{
 80030cc:	b480      	push	{r7}
 80030ce:	b085      	sub	sp, #20
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	6078      	str	r0, [r7, #4]
 80030d4:	6039      	str	r1, [r7, #0]
    // This provides an *approximate* microsecond delay using a busy-wait loop.
    // The magic number '4' is an estimation for cycles per loop iteration on Cortex-M.
    // For a 160MHz CPU, (160,000,000 / 1,000,000) = 160 cycles per microsecond.
    // So, '4' means each loop iteration takes about 4 CPU cycles.
    // This value might need slight calibration for perfect accuracy on your specific board/compiler settings.
    volatile uint32_t num_cycles = period * (SystemCoreClock / 1000000U / 4U);
 80030d6:	4b0b      	ldr	r3, [pc, #44]	@ (8003104 <bme69x_delay_us+0x38>)
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	4a0b      	ldr	r2, [pc, #44]	@ (8003108 <bme69x_delay_us+0x3c>)
 80030dc:	fba2 2303 	umull	r2, r3, r2, r3
 80030e0:	0d1b      	lsrs	r3, r3, #20
 80030e2:	687a      	ldr	r2, [r7, #4]
 80030e4:	fb02 f303 	mul.w	r3, r2, r3
 80030e8:	60fb      	str	r3, [r7, #12]
    while (num_cycles--);
 80030ea:	bf00      	nop
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	1e5a      	subs	r2, r3, #1
 80030f0:	60fa      	str	r2, [r7, #12]
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d1fa      	bne.n	80030ec <bme69x_delay_us+0x20>
}
 80030f6:	bf00      	nop
 80030f8:	bf00      	nop
 80030fa:	3714      	adds	r7, #20
 80030fc:	46bd      	mov	sp, r7
 80030fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003102:	4770      	bx	lr
 8003104:	2000000c 	.word	0x2000000c
 8003108:	431bde83 	.word	0x431bde83

0800310c <MX_GPIO_Init>:
     PA13 (JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PA14 (JTCK/SWCLK)   ------> DEBUG_JTCK-SWCLK
     PB3 (JTDO/TRACESWO)   ------> DEBUG_JTDO-SWO
*/
void MX_GPIO_Init(void)
{
 800310c:	b580      	push	{r7, lr}
 800310e:	b08a      	sub	sp, #40	@ 0x28
 8003110:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003112:	f107 0314 	add.w	r3, r7, #20
 8003116:	2200      	movs	r2, #0
 8003118:	601a      	str	r2, [r3, #0]
 800311a:	605a      	str	r2, [r3, #4]
 800311c:	609a      	str	r2, [r3, #8]
 800311e:	60da      	str	r2, [r3, #12]
 8003120:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003122:	4b5b      	ldr	r3, [pc, #364]	@ (8003290 <MX_GPIO_Init+0x184>)
 8003124:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003128:	4a59      	ldr	r2, [pc, #356]	@ (8003290 <MX_GPIO_Init+0x184>)
 800312a:	f043 0304 	orr.w	r3, r3, #4
 800312e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8003132:	4b57      	ldr	r3, [pc, #348]	@ (8003290 <MX_GPIO_Init+0x184>)
 8003134:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003138:	f003 0304 	and.w	r3, r3, #4
 800313c:	613b      	str	r3, [r7, #16]
 800313e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003140:	4b53      	ldr	r3, [pc, #332]	@ (8003290 <MX_GPIO_Init+0x184>)
 8003142:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003146:	4a52      	ldr	r2, [pc, #328]	@ (8003290 <MX_GPIO_Init+0x184>)
 8003148:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800314c:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8003150:	4b4f      	ldr	r3, [pc, #316]	@ (8003290 <MX_GPIO_Init+0x184>)
 8003152:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003156:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800315a:	60fb      	str	r3, [r7, #12]
 800315c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800315e:	4b4c      	ldr	r3, [pc, #304]	@ (8003290 <MX_GPIO_Init+0x184>)
 8003160:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003164:	4a4a      	ldr	r2, [pc, #296]	@ (8003290 <MX_GPIO_Init+0x184>)
 8003166:	f043 0301 	orr.w	r3, r3, #1
 800316a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800316e:	4b48      	ldr	r3, [pc, #288]	@ (8003290 <MX_GPIO_Init+0x184>)
 8003170:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003174:	f003 0301 	and.w	r3, r3, #1
 8003178:	60bb      	str	r3, [r7, #8]
 800317a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800317c:	4b44      	ldr	r3, [pc, #272]	@ (8003290 <MX_GPIO_Init+0x184>)
 800317e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003182:	4a43      	ldr	r2, [pc, #268]	@ (8003290 <MX_GPIO_Init+0x184>)
 8003184:	f043 0302 	orr.w	r3, r3, #2
 8003188:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800318c:	4b40      	ldr	r3, [pc, #256]	@ (8003290 <MX_GPIO_Init+0x184>)
 800318e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003192:	f003 0302 	and.w	r3, r3, #2
 8003196:	607b      	str	r3, [r7, #4]
 8003198:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800319a:	4b3d      	ldr	r3, [pc, #244]	@ (8003290 <MX_GPIO_Init+0x184>)
 800319c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80031a0:	4a3b      	ldr	r2, [pc, #236]	@ (8003290 <MX_GPIO_Init+0x184>)
 80031a2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80031a6:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80031aa:	4b39      	ldr	r3, [pc, #228]	@ (8003290 <MX_GPIO_Init+0x184>)
 80031ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80031b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80031b4:	603b      	str	r3, [r7, #0]
 80031b6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ST7789_RST_GPIO_Port, ST7789_RST_Pin, GPIO_PIN_RESET);
 80031b8:	2200      	movs	r2, #0
 80031ba:	2101      	movs	r1, #1
 80031bc:	4835      	ldr	r0, [pc, #212]	@ (8003294 <MX_GPIO_Init+0x188>)
 80031be:	f002 f9cb 	bl	8005558 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TP_RST_GPIO_Port, TP_RST_Pin, GPIO_PIN_SET);
 80031c2:	2201      	movs	r2, #1
 80031c4:	2104      	movs	r1, #4
 80031c6:	4833      	ldr	r0, [pc, #204]	@ (8003294 <MX_GPIO_Init+0x188>)
 80031c8:	f002 f9c6 	bl	8005558 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ST7789_CS_GPIO_Port, ST7789_CS_Pin, GPIO_PIN_SET);
 80031cc:	2201      	movs	r2, #1
 80031ce:	2110      	movs	r1, #16
 80031d0:	4831      	ldr	r0, [pc, #196]	@ (8003298 <MX_GPIO_Init+0x18c>)
 80031d2:	f002 f9c1 	bl	8005558 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ST7789_DC_GPIO_Port, ST7789_DC_Pin, GPIO_PIN_RESET);
 80031d6:	2200      	movs	r2, #0
 80031d8:	2101      	movs	r1, #1
 80031da:	4830      	ldr	r0, [pc, #192]	@ (800329c <MX_GPIO_Init+0x190>)
 80031dc:	f002 f9bc 	bl	8005558 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ST7789_BL_Pin|DHT11_DATA_Pin, GPIO_PIN_SET);
 80031e0:	2201      	movs	r2, #1
 80031e2:	f44f 7181 	mov.w	r1, #258	@ 0x102
 80031e6:	482d      	ldr	r0, [pc, #180]	@ (800329c <MX_GPIO_Init+0x190>)
 80031e8:	f002 f9b6 	bl	8005558 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : ST7789_RST_Pin TP_RST_Pin */
  GPIO_InitStruct.Pin = ST7789_RST_Pin|TP_RST_Pin;
 80031ec:	2305      	movs	r3, #5
 80031ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80031f0:	2301      	movs	r3, #1
 80031f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031f4:	2300      	movs	r3, #0
 80031f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80031f8:	2303      	movs	r3, #3
 80031fa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80031fc:	f107 0314 	add.w	r3, r7, #20
 8003200:	4619      	mov	r1, r3
 8003202:	4824      	ldr	r0, [pc, #144]	@ (8003294 <MX_GPIO_Init+0x188>)
 8003204:	f001 ffc8 	bl	8005198 <HAL_GPIO_Init>

  /*Configure GPIO pin : INT_Pin */
  GPIO_InitStruct.Pin = INT_Pin;
 8003208:	2302      	movs	r3, #2
 800320a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800320c:	4b24      	ldr	r3, [pc, #144]	@ (80032a0 <MX_GPIO_Init+0x194>)
 800320e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003210:	2301      	movs	r3, #1
 8003212:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(INT_GPIO_Port, &GPIO_InitStruct);
 8003214:	f107 0314 	add.w	r3, r7, #20
 8003218:	4619      	mov	r1, r3
 800321a:	481e      	ldr	r0, [pc, #120]	@ (8003294 <MX_GPIO_Init+0x188>)
 800321c:	f001 ffbc 	bl	8005198 <HAL_GPIO_Init>

  /*Configure GPIO pin : ST7789_CS_Pin */
  GPIO_InitStruct.Pin = ST7789_CS_Pin;
 8003220:	2310      	movs	r3, #16
 8003222:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003224:	2301      	movs	r3, #1
 8003226:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003228:	2300      	movs	r3, #0
 800322a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800322c:	2303      	movs	r3, #3
 800322e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(ST7789_CS_GPIO_Port, &GPIO_InitStruct);
 8003230:	f107 0314 	add.w	r3, r7, #20
 8003234:	4619      	mov	r1, r3
 8003236:	4818      	ldr	r0, [pc, #96]	@ (8003298 <MX_GPIO_Init+0x18c>)
 8003238:	f001 ffae 	bl	8005198 <HAL_GPIO_Init>

  /*Configure GPIO pins : ST7789_DC_Pin ST7789_BL_Pin */
  GPIO_InitStruct.Pin = ST7789_DC_Pin|ST7789_BL_Pin;
 800323c:	2303      	movs	r3, #3
 800323e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003240:	2301      	movs	r3, #1
 8003242:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003244:	2300      	movs	r3, #0
 8003246:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003248:	2303      	movs	r3, #3
 800324a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800324c:	f107 0314 	add.w	r3, r7, #20
 8003250:	4619      	mov	r1, r3
 8003252:	4812      	ldr	r0, [pc, #72]	@ (800329c <MX_GPIO_Init+0x190>)
 8003254:	f001 ffa0 	bl	8005198 <HAL_GPIO_Init>

  /*Configure GPIO pin : DHT11_DATA_Pin */
  GPIO_InitStruct.Pin = DHT11_DATA_Pin;
 8003258:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800325c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800325e:	2301      	movs	r3, #1
 8003260:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003262:	2300      	movs	r3, #0
 8003264:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003266:	2300      	movs	r3, #0
 8003268:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DHT11_DATA_GPIO_Port, &GPIO_InitStruct);
 800326a:	f107 0314 	add.w	r3, r7, #20
 800326e:	4619      	mov	r1, r3
 8003270:	480a      	ldr	r0, [pc, #40]	@ (800329c <MX_GPIO_Init+0x190>)
 8003272:	f001 ff91 	bl	8005198 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8003276:	2200      	movs	r2, #0
 8003278:	2100      	movs	r1, #0
 800327a:	200c      	movs	r0, #12
 800327c:	f001 fe3e 	bl	8004efc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8003280:	200c      	movs	r0, #12
 8003282:	f001 fe55 	bl	8004f30 <HAL_NVIC_EnableIRQ>

}
 8003286:	bf00      	nop
 8003288:	3728      	adds	r7, #40	@ 0x28
 800328a:	46bd      	mov	sp, r7
 800328c:	bd80      	pop	{r7, pc}
 800328e:	bf00      	nop
 8003290:	46020c00 	.word	0x46020c00
 8003294:	42020800 	.word	0x42020800
 8003298:	42020000 	.word	0x42020000
 800329c:	42020400 	.word	0x42020400
 80032a0:	10210000 	.word	0x10210000

080032a4 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c3;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80032a4:	b580      	push	{r7, lr}
 80032a6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80032a8:	4b1b      	ldr	r3, [pc, #108]	@ (8003318 <MX_I2C1_Init+0x74>)
 80032aa:	4a1c      	ldr	r2, [pc, #112]	@ (800331c <MX_I2C1_Init+0x78>)
 80032ac:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00F07BFF;
 80032ae:	4b1a      	ldr	r3, [pc, #104]	@ (8003318 <MX_I2C1_Init+0x74>)
 80032b0:	4a1b      	ldr	r2, [pc, #108]	@ (8003320 <MX_I2C1_Init+0x7c>)
 80032b2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80032b4:	4b18      	ldr	r3, [pc, #96]	@ (8003318 <MX_I2C1_Init+0x74>)
 80032b6:	2200      	movs	r2, #0
 80032b8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80032ba:	4b17      	ldr	r3, [pc, #92]	@ (8003318 <MX_I2C1_Init+0x74>)
 80032bc:	2201      	movs	r2, #1
 80032be:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80032c0:	4b15      	ldr	r3, [pc, #84]	@ (8003318 <MX_I2C1_Init+0x74>)
 80032c2:	2200      	movs	r2, #0
 80032c4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80032c6:	4b14      	ldr	r3, [pc, #80]	@ (8003318 <MX_I2C1_Init+0x74>)
 80032c8:	2200      	movs	r2, #0
 80032ca:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80032cc:	4b12      	ldr	r3, [pc, #72]	@ (8003318 <MX_I2C1_Init+0x74>)
 80032ce:	2200      	movs	r2, #0
 80032d0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80032d2:	4b11      	ldr	r3, [pc, #68]	@ (8003318 <MX_I2C1_Init+0x74>)
 80032d4:	2200      	movs	r2, #0
 80032d6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80032d8:	4b0f      	ldr	r3, [pc, #60]	@ (8003318 <MX_I2C1_Init+0x74>)
 80032da:	2200      	movs	r2, #0
 80032dc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80032de:	480e      	ldr	r0, [pc, #56]	@ (8003318 <MX_I2C1_Init+0x74>)
 80032e0:	f002 f98e 	bl	8005600 <HAL_I2C_Init>
 80032e4:	4603      	mov	r3, r0
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d001      	beq.n	80032ee <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80032ea:	f000 fc55 	bl	8003b98 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80032ee:	2100      	movs	r1, #0
 80032f0:	4809      	ldr	r0, [pc, #36]	@ (8003318 <MX_I2C1_Init+0x74>)
 80032f2:	f003 fd17 	bl	8006d24 <HAL_I2CEx_ConfigAnalogFilter>
 80032f6:	4603      	mov	r3, r0
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d001      	beq.n	8003300 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80032fc:	f000 fc4c 	bl	8003b98 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8003300:	2100      	movs	r1, #0
 8003302:	4805      	ldr	r0, [pc, #20]	@ (8003318 <MX_I2C1_Init+0x74>)
 8003304:	f003 fd59 	bl	8006dba <HAL_I2CEx_ConfigDigitalFilter>
 8003308:	4603      	mov	r3, r0
 800330a:	2b00      	cmp	r3, #0
 800330c:	d001      	beq.n	8003312 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800330e:	f000 fc43 	bl	8003b98 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8003312:	bf00      	nop
 8003314:	bd80      	pop	{r7, pc}
 8003316:	bf00      	nop
 8003318:	20000218 	.word	0x20000218
 800331c:	40005400 	.word	0x40005400
 8003320:	00f07bff 	.word	0x00f07bff

08003324 <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8003324:	b580      	push	{r7, lr}
 8003326:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8003328:	4b1b      	ldr	r3, [pc, #108]	@ (8003398 <MX_I2C3_Init+0x74>)
 800332a:	4a1c      	ldr	r2, [pc, #112]	@ (800339c <MX_I2C3_Init+0x78>)
 800332c:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x30909DEC;
 800332e:	4b1a      	ldr	r3, [pc, #104]	@ (8003398 <MX_I2C3_Init+0x74>)
 8003330:	4a1b      	ldr	r2, [pc, #108]	@ (80033a0 <MX_I2C3_Init+0x7c>)
 8003332:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8003334:	4b18      	ldr	r3, [pc, #96]	@ (8003398 <MX_I2C3_Init+0x74>)
 8003336:	2200      	movs	r2, #0
 8003338:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800333a:	4b17      	ldr	r3, [pc, #92]	@ (8003398 <MX_I2C3_Init+0x74>)
 800333c:	2201      	movs	r2, #1
 800333e:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003340:	4b15      	ldr	r3, [pc, #84]	@ (8003398 <MX_I2C3_Init+0x74>)
 8003342:	2200      	movs	r2, #0
 8003344:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8003346:	4b14      	ldr	r3, [pc, #80]	@ (8003398 <MX_I2C3_Init+0x74>)
 8003348:	2200      	movs	r2, #0
 800334a:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800334c:	4b12      	ldr	r3, [pc, #72]	@ (8003398 <MX_I2C3_Init+0x74>)
 800334e:	2200      	movs	r2, #0
 8003350:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003352:	4b11      	ldr	r3, [pc, #68]	@ (8003398 <MX_I2C3_Init+0x74>)
 8003354:	2200      	movs	r2, #0
 8003356:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003358:	4b0f      	ldr	r3, [pc, #60]	@ (8003398 <MX_I2C3_Init+0x74>)
 800335a:	2200      	movs	r2, #0
 800335c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800335e:	480e      	ldr	r0, [pc, #56]	@ (8003398 <MX_I2C3_Init+0x74>)
 8003360:	f002 f94e 	bl	8005600 <HAL_I2C_Init>
 8003364:	4603      	mov	r3, r0
 8003366:	2b00      	cmp	r3, #0
 8003368:	d001      	beq.n	800336e <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 800336a:	f000 fc15 	bl	8003b98 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800336e:	2100      	movs	r1, #0
 8003370:	4809      	ldr	r0, [pc, #36]	@ (8003398 <MX_I2C3_Init+0x74>)
 8003372:	f003 fcd7 	bl	8006d24 <HAL_I2CEx_ConfigAnalogFilter>
 8003376:	4603      	mov	r3, r0
 8003378:	2b00      	cmp	r3, #0
 800337a:	d001      	beq.n	8003380 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 800337c:	f000 fc0c 	bl	8003b98 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8003380:	2100      	movs	r1, #0
 8003382:	4805      	ldr	r0, [pc, #20]	@ (8003398 <MX_I2C3_Init+0x74>)
 8003384:	f003 fd19 	bl	8006dba <HAL_I2CEx_ConfigDigitalFilter>
 8003388:	4603      	mov	r3, r0
 800338a:	2b00      	cmp	r3, #0
 800338c:	d001      	beq.n	8003392 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 800338e:	f000 fc03 	bl	8003b98 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8003392:	bf00      	nop
 8003394:	bd80      	pop	{r7, pc}
 8003396:	bf00      	nop
 8003398:	2000026c 	.word	0x2000026c
 800339c:	46002800 	.word	0x46002800
 80033a0:	30909dec 	.word	0x30909dec

080033a4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80033a4:	b580      	push	{r7, lr}
 80033a6:	b0bc      	sub	sp, #240	@ 0xf0
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033ac:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80033b0:	2200      	movs	r2, #0
 80033b2:	601a      	str	r2, [r3, #0]
 80033b4:	605a      	str	r2, [r3, #4]
 80033b6:	609a      	str	r2, [r3, #8]
 80033b8:	60da      	str	r2, [r3, #12]
 80033ba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80033bc:	f107 0318 	add.w	r3, r7, #24
 80033c0:	22c0      	movs	r2, #192	@ 0xc0
 80033c2:	2100      	movs	r1, #0
 80033c4:	4618      	mov	r0, r3
 80033c6:	f00a fd53 	bl	800de70 <memset>
  if(i2cHandle->Instance==I2C1)
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	4a55      	ldr	r2, [pc, #340]	@ (8003524 <HAL_I2C_MspInit+0x180>)
 80033d0:	4293      	cmp	r3, r2
 80033d2:	d157      	bne.n	8003484 <HAL_I2C_MspInit+0xe0>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80033d4:	f04f 0240 	mov.w	r2, #64	@ 0x40
 80033d8:	f04f 0300 	mov.w	r3, #0
 80033dc:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80033e0:	2300      	movs	r3, #0
 80033e2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80033e6:	f107 0318 	add.w	r3, r7, #24
 80033ea:	4618      	mov	r0, r3
 80033ec:	f005 f942 	bl	8008674 <HAL_RCCEx_PeriphCLKConfig>
 80033f0:	4603      	mov	r3, r0
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d001      	beq.n	80033fa <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 80033f6:	f000 fbcf 	bl	8003b98 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80033fa:	4b4b      	ldr	r3, [pc, #300]	@ (8003528 <HAL_I2C_MspInit+0x184>)
 80033fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003400:	4a49      	ldr	r2, [pc, #292]	@ (8003528 <HAL_I2C_MspInit+0x184>)
 8003402:	f043 0302 	orr.w	r3, r3, #2
 8003406:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800340a:	4b47      	ldr	r3, [pc, #284]	@ (8003528 <HAL_I2C_MspInit+0x184>)
 800340c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003410:	f003 0302 	and.w	r3, r3, #2
 8003414:	617b      	str	r3, [r7, #20]
 8003416:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 8003418:	f44f 7310 	mov.w	r3, #576	@ 0x240
 800341c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003420:	2312      	movs	r3, #18
 8003422:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003426:	2300      	movs	r3, #0
 8003428:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800342c:	2300      	movs	r3, #0
 800342e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003432:	2304      	movs	r3, #4
 8003434:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003438:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 800343c:	4619      	mov	r1, r3
 800343e:	483b      	ldr	r0, [pc, #236]	@ (800352c <HAL_I2C_MspInit+0x188>)
 8003440:	f001 feaa 	bl	8005198 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003444:	4b38      	ldr	r3, [pc, #224]	@ (8003528 <HAL_I2C_MspInit+0x184>)
 8003446:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800344a:	4a37      	ldr	r2, [pc, #220]	@ (8003528 <HAL_I2C_MspInit+0x184>)
 800344c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8003450:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8003454:	4b34      	ldr	r3, [pc, #208]	@ (8003528 <HAL_I2C_MspInit+0x184>)
 8003456:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800345a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800345e:	613b      	str	r3, [r7, #16]
 8003460:	693b      	ldr	r3, [r7, #16]

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8003462:	2200      	movs	r2, #0
 8003464:	2100      	movs	r1, #0
 8003466:	2037      	movs	r0, #55	@ 0x37
 8003468:	f001 fd48 	bl	8004efc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 800346c:	2037      	movs	r0, #55	@ 0x37
 800346e:	f001 fd5f 	bl	8004f30 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8003472:	2200      	movs	r2, #0
 8003474:	2100      	movs	r1, #0
 8003476:	2038      	movs	r0, #56	@ 0x38
 8003478:	f001 fd40 	bl	8004efc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 800347c:	2038      	movs	r0, #56	@ 0x38
 800347e:	f001 fd57 	bl	8004f30 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_I2C3_CLK_ENABLE();
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8003482:	e04b      	b.n	800351c <HAL_I2C_MspInit+0x178>
  else if(i2cHandle->Instance==I2C3)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	4a29      	ldr	r2, [pc, #164]	@ (8003530 <HAL_I2C_MspInit+0x18c>)
 800348a:	4293      	cmp	r3, r2
 800348c:	d146      	bne.n	800351c <HAL_I2C_MspInit+0x178>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 800348e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003492:	f04f 0300 	mov.w	r3, #0
 8003496:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK3;
 800349a:	2300      	movs	r3, #0
 800349c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80034a0:	f107 0318 	add.w	r3, r7, #24
 80034a4:	4618      	mov	r0, r3
 80034a6:	f005 f8e5 	bl	8008674 <HAL_RCCEx_PeriphCLKConfig>
 80034aa:	4603      	mov	r3, r0
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d001      	beq.n	80034b4 <HAL_I2C_MspInit+0x110>
      Error_Handler();
 80034b0:	f000 fb72 	bl	8003b98 <Error_Handler>
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80034b4:	4b1c      	ldr	r3, [pc, #112]	@ (8003528 <HAL_I2C_MspInit+0x184>)
 80034b6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80034ba:	4a1b      	ldr	r2, [pc, #108]	@ (8003528 <HAL_I2C_MspInit+0x184>)
 80034bc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80034c0:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80034c4:	4b18      	ldr	r3, [pc, #96]	@ (8003528 <HAL_I2C_MspInit+0x184>)
 80034c6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80034ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80034ce:	60fb      	str	r3, [r7, #12]
 80034d0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 80034d2:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 80034d6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80034da:	2312      	movs	r3, #18
 80034dc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80034e0:	2301      	movs	r3, #1
 80034e2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034e6:	2300      	movs	r3, #0
 80034e8:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80034ec:	2304      	movs	r3, #4
 80034ee:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80034f2:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80034f6:	4619      	mov	r1, r3
 80034f8:	480e      	ldr	r0, [pc, #56]	@ (8003534 <HAL_I2C_MspInit+0x190>)
 80034fa:	f001 fe4d 	bl	8005198 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 80034fe:	4b0a      	ldr	r3, [pc, #40]	@ (8003528 <HAL_I2C_MspInit+0x184>)
 8003500:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8003504:	4a08      	ldr	r2, [pc, #32]	@ (8003528 <HAL_I2C_MspInit+0x184>)
 8003506:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800350a:	f8c2 30a8 	str.w	r3, [r2, #168]	@ 0xa8
 800350e:	4b06      	ldr	r3, [pc, #24]	@ (8003528 <HAL_I2C_MspInit+0x184>)
 8003510:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8003514:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003518:	60bb      	str	r3, [r7, #8]
 800351a:	68bb      	ldr	r3, [r7, #8]
}
 800351c:	bf00      	nop
 800351e:	37f0      	adds	r7, #240	@ 0xf0
 8003520:	46bd      	mov	sp, r7
 8003522:	bd80      	pop	{r7, pc}
 8003524:	40005400 	.word	0x40005400
 8003528:	46020c00 	.word	0x46020c00
 800352c:	42020400 	.word	0x42020400
 8003530:	46002800 	.word	0x46002800
 8003534:	42021800 	.word	0x42021800

08003538 <MX_ICACHE_Init>:

/* USER CODE END 0 */

/* ICACHE init function */
void MX_ICACHE_Init(void)
{
 8003538:	b580      	push	{r7, lr}
 800353a:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache in 1-way (direct mapped cache)
  */
  if (HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY) != HAL_OK)
 800353c:	2000      	movs	r0, #0
 800353e:	f003 fc89 	bl	8006e54 <HAL_ICACHE_ConfigAssociativityMode>
 8003542:	4603      	mov	r3, r0
 8003544:	2b00      	cmp	r3, #0
 8003546:	d001      	beq.n	800354c <MX_ICACHE_Init+0x14>
  {
    Error_Handler();
 8003548:	f000 fb26 	bl	8003b98 <Error_Handler>
  }
  if (HAL_ICACHE_Enable() != HAL_OK)
 800354c:	f003 fca2 	bl	8006e94 <HAL_ICACHE_Enable>
 8003550:	4603      	mov	r3, r0
 8003552:	2b00      	cmp	r3, #0
 8003554:	d001      	beq.n	800355a <MX_ICACHE_Init+0x22>
  {
    Error_Handler();
 8003556:	f000 fb1f 	bl	8003b98 <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 800355a:	bf00      	nop
 800355c:	bd80      	pop	{r7, pc}
	...

08003560 <LCD_Init>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void LCD_Init(void)
{
 8003560:	b580      	push	{r7, lr}
 8003562:	af00      	add	r7, sp, #0
    ST7789_Init(&hspi1);							// Initialize your ST7789 LCD using its dedicated function
 8003564:	4807      	ldr	r0, [pc, #28]	@ (8003584 <LCD_Init+0x24>)
 8003566:	f000 fca7 	bl	8003eb8 <ST7789_Init>

    ST7789_SetRotation(0);							// ST7789_SetRotation takes uint8_t 0,1,2,3 for 0,90,180,270 degrees.
 800356a:	2000      	movs	r0, #0
 800356c:	f000 febc 	bl	80042e8 <ST7789_SetRotation>

    LCD_Clear();									// Call to LCD_Clear
 8003570:	f000 f80e 	bl	8003590 <LCD_Clear>
    printf("ST7789 LCD Initialized!\r\n");
 8003574:	4804      	ldr	r0, [pc, #16]	@ (8003588 <LCD_Init+0x28>)
 8003576:	f00a fc73 	bl	800de60 <puts>
    current_lcd_row = 0;							// Reset line counter on init
 800357a:	4b04      	ldr	r3, [pc, #16]	@ (800358c <LCD_Init+0x2c>)
 800357c:	2200      	movs	r2, #0
 800357e:	701a      	strb	r2, [r3, #0]
}
 8003580:	bf00      	nop
 8003582:	bd80      	pop	{r7, pc}
 8003584:	20000384 	.word	0x20000384
 8003588:	080100f8 	.word	0x080100f8
 800358c:	20000381 	.word	0x20000381

08003590 <LCD_Clear>:

void LCD_Clear(void)
{
 8003590:	b580      	push	{r7, lr}
 8003592:	af00      	add	r7, sp, #0
    ST7789_FillScreen(ST7789_BLACK);				// Clear the screen and fill it with black
 8003594:	2000      	movs	r0, #0
 8003596:	f000 fcf9 	bl	8003f8c <ST7789_FillScreen>
    current_lcd_row = 0;							// Reset row counter when screen is cleared
 800359a:	4b02      	ldr	r3, [pc, #8]	@ (80035a4 <LCD_Clear+0x14>)
 800359c:	2200      	movs	r2, #0
 800359e:	701a      	strb	r2, [r3, #0]
}
 80035a0:	bf00      	nop
 80035a2:	bd80      	pop	{r7, pc}
 80035a4:	20000381 	.word	0x20000381

080035a8 <LCD_SetCursor>:

void LCD_SetCursor(uint8_t row, uint8_t col)
{
 80035a8:	b480      	push	{r7}
 80035aa:	b083      	sub	sp, #12
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	4603      	mov	r3, r0
 80035b0:	460a      	mov	r2, r1
 80035b2:	71fb      	strb	r3, [r7, #7]
 80035b4:	4613      	mov	r3, r2
 80035b6:	71bb      	strb	r3, [r7, #6]
    if (row * current_font->Height < ST7789_HEIGHT)	// For graphical LCDs like ST7789, a "cursor" is often managed by the drawing functions.
 80035b8:	79fb      	ldrb	r3, [r7, #7]
 80035ba:	4a08      	ldr	r2, [pc, #32]	@ (80035dc <LCD_SetCursor+0x34>)
 80035bc:	6812      	ldr	r2, [r2, #0]
 80035be:	88d2      	ldrh	r2, [r2, #6]
 80035c0:	fb02 f303 	mul.w	r3, r2, r3
 80035c4:	f5b3 7f8c 	cmp.w	r3, #280	@ 0x118
 80035c8:	da02      	bge.n	80035d0 <LCD_SetCursor+0x28>
    {												// We'll update our internal `current_lcd_row` for `LCD_PrintString`.
        current_lcd_row = row;
 80035ca:	4a05      	ldr	r2, [pc, #20]	@ (80035e0 <LCD_SetCursor+0x38>)
 80035cc:	79fb      	ldrb	r3, [r7, #7]
 80035ce:	7013      	strb	r3, [r2, #0]
    }
    (void)col;										// Suppress unused parameter warning
}
 80035d0:	bf00      	nop
 80035d2:	370c      	adds	r7, #12
 80035d4:	46bd      	mov	sp, r7
 80035d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035da:	4770      	bx	lr
 80035dc:	20000008 	.word	0x20000008
 80035e0:	20000381 	.word	0x20000381

080035e4 <LCD_PrintString>:

void LCD_PrintString(const char *str)
{
 80035e4:	b580      	push	{r7, lr}
 80035e6:	b086      	sub	sp, #24
 80035e8:	af02      	add	r7, sp, #8
 80035ea:	6078      	str	r0, [r7, #4]
    uint16_t y_pos = current_lcd_row * current_font->Height;	// Calculate the Y position for the current line based on font height
 80035ec:	4b18      	ldr	r3, [pc, #96]	@ (8003650 <LCD_PrintString+0x6c>)
 80035ee:	781b      	ldrb	r3, [r3, #0]
 80035f0:	461a      	mov	r2, r3
 80035f2:	4b18      	ldr	r3, [pc, #96]	@ (8003654 <LCD_PrintString+0x70>)
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	88db      	ldrh	r3, [r3, #6]
 80035f8:	fb12 f303 	smulbb	r3, r2, r3
 80035fc:	81fb      	strh	r3, [r7, #14]
    uint16_t x_pos = 0;											// Start printing from the left edge
 80035fe:	2300      	movs	r3, #0
 8003600:	81bb      	strh	r3, [r7, #12]

    if (y_pos >= ST7789_HEIGHT)									// Ensure we don't write outside the screen height
 8003602:	89fb      	ldrh	r3, [r7, #14]
 8003604:	f5b3 7f8c 	cmp.w	r3, #280	@ 0x118
 8003608:	d306      	bcc.n	8003618 <LCD_PrintString+0x34>
    {
        current_lcd_row = 0;									// If we exceed screen height, wrap around to the top and clear
 800360a:	4b11      	ldr	r3, [pc, #68]	@ (8003650 <LCD_PrintString+0x6c>)
 800360c:	2200      	movs	r2, #0
 800360e:	701a      	strb	r2, [r3, #0]
        y_pos = 0;
 8003610:	2300      	movs	r3, #0
 8003612:	81fb      	strh	r3, [r7, #14]
        LCD_Clear();
 8003614:	f7ff ffbc 	bl	8003590 <LCD_Clear>
    }

    ST7789_WriteString(x_pos, y_pos, (char*)str, current_font, ST7789_WHITE, ST7789_BLACK);		// Text colour WHITE, background BLACK
 8003618:	f9b7 000c 	ldrsh.w	r0, [r7, #12]
 800361c:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 8003620:	4b0c      	ldr	r3, [pc, #48]	@ (8003654 <LCD_PrintString+0x70>)
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	2200      	movs	r2, #0
 8003626:	9201      	str	r2, [sp, #4]
 8003628:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800362c:	9200      	str	r2, [sp, #0]
 800362e:	687a      	ldr	r2, [r7, #4]
 8003630:	f000 fe1a 	bl	8004268 <ST7789_WriteString>

    current_lcd_row++;																			// Move to the next line for the next print
 8003634:	4b06      	ldr	r3, [pc, #24]	@ (8003650 <LCD_PrintString+0x6c>)
 8003636:	781b      	ldrb	r3, [r3, #0]
 8003638:	3301      	adds	r3, #1
 800363a:	b2da      	uxtb	r2, r3
 800363c:	4b04      	ldr	r3, [pc, #16]	@ (8003650 <LCD_PrintString+0x6c>)
 800363e:	701a      	strb	r2, [r3, #0]

    printf("LCD_PrintString: %s\r\n", str);														// For serial debugging
 8003640:	6879      	ldr	r1, [r7, #4]
 8003642:	4805      	ldr	r0, [pc, #20]	@ (8003658 <LCD_PrintString+0x74>)
 8003644:	f00a fba4 	bl	800dd90 <iprintf>
}
 8003648:	bf00      	nop
 800364a:	3710      	adds	r7, #16
 800364c:	46bd      	mov	sp, r7
 800364e:	bd80      	pop	{r7, pc}
 8003650:	20000381 	.word	0x20000381
 8003654:	20000008 	.word	0x20000008
 8003658:	08010114 	.word	0x08010114

0800365c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800365c:	b580      	push	{r7, lr}
 800365e:	b086      	sub	sp, #24
 8003660:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003662:	f001 fb1f 	bl	8004ca4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the System Power */
  SystemPower_Config();
 8003666:	f000 fa75 	bl	8003b54 <SystemPower_Config>

  /* Configure the system clock */
  SystemClock_Config();
 800366a:	f000 fa19 	bl	8003aa0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800366e:	f7ff fd4d 	bl	800310c <MX_GPIO_Init>
  MX_ICACHE_Init();
 8003672:	f7ff ff61 	bl	8003538 <MX_ICACHE_Init>
  MX_SPI1_Init();
 8003676:	f000 fa95 	bl	8003ba4 <MX_SPI1_Init>
  MX_TIM2_Init();
 800367a:	f001 f871 	bl	8004760 <MX_TIM2_Init>
  MX_I2C1_Init();
 800367e:	f7ff fe11 	bl	80032a4 <MX_I2C1_Init>
  MX_I2C3_Init();
 8003682:	f7ff fe4f 	bl	8003324 <MX_I2C3_Init>
  /* USER CODE BEGIN 2 */
  LCD_Init();													// This will call ST7789_Init() internally
 8003686:	f7ff ff6b 	bl	8003560 <LCD_Init>

  bme69x_i2c_user_handle.hi2c = &hi2c3;							// Initialize user-defined I2C handle for BME690
 800368a:	4b8f      	ldr	r3, [pc, #572]	@ (80038c8 <main+0x26c>)
 800368c:	4a8f      	ldr	r2, [pc, #572]	@ (80038cc <main+0x270>)
 800368e:	601a      	str	r2, [r3, #0]
  bme69x_i2c_user_handle.i2c_addr = BME69X_I2C_ADDR_PRIM;
 8003690:	4b8d      	ldr	r3, [pc, #564]	@ (80038c8 <main+0x26c>)
 8003692:	2276      	movs	r2, #118	@ 0x76
 8003694:	711a      	strb	r2, [r3, #4]

  bme69x_sensor.intf_ptr = &bme69x_i2c_user_handle;				// Assign BME69x sensor structure parameters (using the functions from bme69x_user.c)
 8003696:	4b8e      	ldr	r3, [pc, #568]	@ (80038d0 <main+0x274>)
 8003698:	4a8b      	ldr	r2, [pc, #556]	@ (80038c8 <main+0x26c>)
 800369a:	605a      	str	r2, [r3, #4]
  bme69x_sensor.read = bme69x_i2c_read;
 800369c:	4b8c      	ldr	r3, [pc, #560]	@ (80038d0 <main+0x274>)
 800369e:	4a8d      	ldr	r2, [pc, #564]	@ (80038d4 <main+0x278>)
 80036a0:	63da      	str	r2, [r3, #60]	@ 0x3c
  bme69x_sensor.write = bme69x_i2c_write;
 80036a2:	4b8b      	ldr	r3, [pc, #556]	@ (80038d0 <main+0x274>)
 80036a4:	4a8c      	ldr	r2, [pc, #560]	@ (80038d8 <main+0x27c>)
 80036a6:	641a      	str	r2, [r3, #64]	@ 0x40
  bme69x_sensor.delay_us = bme69x_delay_us;
 80036a8:	4b89      	ldr	r3, [pc, #548]	@ (80038d0 <main+0x274>)
 80036aa:	4a8c      	ldr	r2, [pc, #560]	@ (80038dc <main+0x280>)
 80036ac:	645a      	str	r2, [r3, #68]	@ 0x44
  bme69x_sensor.intf = BME69X_I2C_INTF;
 80036ae:	4b88      	ldr	r3, [pc, #544]	@ (80038d0 <main+0x274>)
 80036b0:	2201      	movs	r2, #1
 80036b2:	731a      	strb	r2, [r3, #12]

  /*   Initialize BME69x sensor   */
  rslt = bme69x_init(&bme69x_sensor);
 80036b4:	4886      	ldr	r0, [pc, #536]	@ (80038d0 <main+0x274>)
 80036b6:	f7fd fc89 	bl	8000fcc <bme69x_init>
 80036ba:	4603      	mov	r3, r0
 80036bc:	73fb      	strb	r3, [r7, #15]
  if (rslt != BME69X_OK)
 80036be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d016      	beq.n	80036f4 <main+0x98>
  {
      printf("BME69X Init Failed: %d\r\n", rslt);
 80036c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80036ca:	4619      	mov	r1, r3
 80036cc:	4884      	ldr	r0, [pc, #528]	@ (80038e0 <main+0x284>)
 80036ce:	f00a fb5f 	bl	800dd90 <iprintf>
      snprintf(lcd_buffer, LCD_LINE_MAX_LEN + 1, "BME69X Init Fail: %d", rslt);		// Display error on LCD
 80036d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80036d6:	4a83      	ldr	r2, [pc, #524]	@ (80038e4 <main+0x288>)
 80036d8:	2129      	movs	r1, #41	@ 0x29
 80036da:	4883      	ldr	r0, [pc, #524]	@ (80038e8 <main+0x28c>)
 80036dc:	f00a fa60 	bl	800dba0 <sniprintf>
      LCD_SetCursor(0, 0);
 80036e0:	2100      	movs	r1, #0
 80036e2:	2000      	movs	r0, #0
 80036e4:	f7ff ff60 	bl	80035a8 <LCD_SetCursor>
      LCD_PrintString(lcd_buffer);
 80036e8:	487f      	ldr	r0, [pc, #508]	@ (80038e8 <main+0x28c>)
 80036ea:	f7ff ff7b 	bl	80035e4 <LCD_PrintString>
      Error_Handler();
 80036ee:	f000 fa53 	bl	8003b98 <Error_Handler>
 80036f2:	e012      	b.n	800371a <main+0xbe>
  }
  else
  {
      printf("BME69X Init Success!\r\n");
 80036f4:	487d      	ldr	r0, [pc, #500]	@ (80038ec <main+0x290>)
 80036f6:	f00a fbb3 	bl	800de60 <puts>
      snprintf(lcd_buffer, LCD_LINE_MAX_LEN + 1, "BME69X Init OK");					// Display success on LCD
 80036fa:	4a7d      	ldr	r2, [pc, #500]	@ (80038f0 <main+0x294>)
 80036fc:	2129      	movs	r1, #41	@ 0x29
 80036fe:	487a      	ldr	r0, [pc, #488]	@ (80038e8 <main+0x28c>)
 8003700:	f00a fa4e 	bl	800dba0 <sniprintf>
      LCD_SetCursor(7, 0);
 8003704:	2100      	movs	r1, #0
 8003706:	2007      	movs	r0, #7
 8003708:	f7ff ff4e 	bl	80035a8 <LCD_SetCursor>
      LCD_PrintString(lcd_buffer);
 800370c:	4876      	ldr	r0, [pc, #472]	@ (80038e8 <main+0x28c>)
 800370e:	f7ff ff69 	bl	80035e4 <LCD_PrintString>
      HAL_Delay(500);																// Small delay to show init message
 8003712:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8003716:	f001 fb15 	bl	8004d44 <HAL_Delay>
  }

  /*   TPH Sensor configuration for bme69x_conf (separate struct)   */
  bme69x_conf.os_hum = BME69X_OS_2X;
 800371a:	4b76      	ldr	r3, [pc, #472]	@ (80038f4 <main+0x298>)
 800371c:	2202      	movs	r2, #2
 800371e:	701a      	strb	r2, [r3, #0]
  bme69x_conf.os_pres = BME69X_OS_16X;
 8003720:	4b74      	ldr	r3, [pc, #464]	@ (80038f4 <main+0x298>)
 8003722:	2205      	movs	r2, #5
 8003724:	709a      	strb	r2, [r3, #2]
  bme69x_conf.os_temp = BME69X_OS_4X;
 8003726:	4b73      	ldr	r3, [pc, #460]	@ (80038f4 <main+0x298>)
 8003728:	2203      	movs	r2, #3
 800372a:	705a      	strb	r2, [r3, #1]
  bme69x_conf.filter = BME69X_FILTER_SIZE_3;
 800372c:	4b71      	ldr	r3, [pc, #452]	@ (80038f4 <main+0x298>)
 800372e:	2202      	movs	r2, #2
 8003730:	70da      	strb	r2, [r3, #3]
  bme69x_conf.odr = BME69X_ODR_500_MS;												// Output Data Rate
 8003732:	4b70      	ldr	r3, [pc, #448]	@ (80038f4 <main+0x298>)
 8003734:	2204      	movs	r2, #4
 8003736:	711a      	strb	r2, [r3, #4]

  /*   Set the TPH sensor configuration   */
  rslt = bme69x_set_conf(&bme69x_conf, &bme69x_sensor);
 8003738:	4965      	ldr	r1, [pc, #404]	@ (80038d0 <main+0x274>)
 800373a:	486e      	ldr	r0, [pc, #440]	@ (80038f4 <main+0x298>)
 800373c:	f7fd fd8a 	bl	8001254 <bme69x_set_conf>
 8003740:	4603      	mov	r3, r0
 8003742:	73fb      	strb	r3, [r7, #15]
  if (rslt != BME69X_OK)
 8003744:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003748:	2b00      	cmp	r3, #0
 800374a:	d015      	beq.n	8003778 <main+0x11c>
  {
      printf("BME69X Set TPH Settings Failed: %d\r\n", rslt);
 800374c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003750:	4619      	mov	r1, r3
 8003752:	4869      	ldr	r0, [pc, #420]	@ (80038f8 <main+0x29c>)
 8003754:	f00a fb1c 	bl	800dd90 <iprintf>
      snprintf(lcd_buffer, LCD_LINE_MAX_LEN + 1, "BME69X TPH Conf Fail: %d", rslt);	// Display error on LCD
 8003758:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800375c:	4a67      	ldr	r2, [pc, #412]	@ (80038fc <main+0x2a0>)
 800375e:	2129      	movs	r1, #41	@ 0x29
 8003760:	4861      	ldr	r0, [pc, #388]	@ (80038e8 <main+0x28c>)
 8003762:	f00a fa1d 	bl	800dba0 <sniprintf>
      LCD_SetCursor(1, 0);
 8003766:	2100      	movs	r1, #0
 8003768:	2001      	movs	r0, #1
 800376a:	f7ff ff1d 	bl	80035a8 <LCD_SetCursor>
      LCD_PrintString(lcd_buffer);
 800376e:	485e      	ldr	r0, [pc, #376]	@ (80038e8 <main+0x28c>)
 8003770:	f7ff ff38 	bl	80035e4 <LCD_PrintString>
      Error_Handler();
 8003774:	f000 fa10 	bl	8003b98 <Error_Handler>
  }

  /*   Populate the bme69x_heatr_conf struct   */
  heatr_config.heatr_temp = 320;													// Degree Celsius
 8003778:	4b61      	ldr	r3, [pc, #388]	@ (8003900 <main+0x2a4>)
 800377a:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 800377e:	805a      	strh	r2, [r3, #2]
  heatr_config.heatr_dur = 150;														// Millisecond
 8003780:	4b5f      	ldr	r3, [pc, #380]	@ (8003900 <main+0x2a4>)
 8003782:	2296      	movs	r2, #150	@ 0x96
 8003784:	809a      	strh	r2, [r3, #4]
  heatr_config.enable = BME69X_ENABLE_GAS_MEAS;										// Assuming 'enable' is the field name for running gas
 8003786:	4b5e      	ldr	r3, [pc, #376]	@ (8003900 <main+0x2a4>)
 8003788:	2201      	movs	r2, #1
 800378a:	701a      	strb	r2, [r3, #0]

  /*   Call bme69x_set_heatr_conf with the correct arguments: op_mode, pointer to heatr_config, and device pointer   */
  rslt = bme69x_set_heatr_conf(BME69X_FORCED_MODE, &heatr_config, &bme69x_sensor);
 800378c:	4a50      	ldr	r2, [pc, #320]	@ (80038d0 <main+0x274>)
 800378e:	495c      	ldr	r1, [pc, #368]	@ (8003900 <main+0x2a4>)
 8003790:	2001      	movs	r0, #1
 8003792:	f7fe f85d 	bl	8001850 <bme69x_set_heatr_conf>
 8003796:	4603      	mov	r3, r0
 8003798:	73fb      	strb	r3, [r7, #15]
  if (rslt != BME69X_OK)
 800379a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d015      	beq.n	80037ce <main+0x172>
  {
      printf("BME69X Set Heater Config Failed: %d\r\n", rslt);
 80037a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80037a6:	4619      	mov	r1, r3
 80037a8:	4856      	ldr	r0, [pc, #344]	@ (8003904 <main+0x2a8>)
 80037aa:	f00a faf1 	bl	800dd90 <iprintf>
      snprintf(lcd_buffer, LCD_LINE_MAX_LEN + 1, "BME69X Heater Fail: %d", rslt);	// Display error on LCD
 80037ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80037b2:	4a55      	ldr	r2, [pc, #340]	@ (8003908 <main+0x2ac>)
 80037b4:	2129      	movs	r1, #41	@ 0x29
 80037b6:	484c      	ldr	r0, [pc, #304]	@ (80038e8 <main+0x28c>)
 80037b8:	f00a f9f2 	bl	800dba0 <sniprintf>
      LCD_SetCursor(2, 0);
 80037bc:	2100      	movs	r1, #0
 80037be:	2002      	movs	r0, #2
 80037c0:	f7ff fef2 	bl	80035a8 <LCD_SetCursor>
      LCD_PrintString(lcd_buffer);
 80037c4:	4848      	ldr	r0, [pc, #288]	@ (80038e8 <main+0x28c>)
 80037c6:	f7ff ff0d 	bl	80035e4 <LCD_PrintString>
      Error_Handler();
 80037ca:	f000 f9e5 	bl	8003b98 <Error_Handler>
  }

  /*   Set the power mode to forced mode   */
  rslt = bme69x_set_op_mode(BME69X_FORCED_MODE, &bme69x_sensor);
 80037ce:	4940      	ldr	r1, [pc, #256]	@ (80038d0 <main+0x274>)
 80037d0:	2001      	movs	r0, #1
 80037d2:	f7fd fe49 	bl	8001468 <bme69x_set_op_mode>
 80037d6:	4603      	mov	r3, r0
 80037d8:	73fb      	strb	r3, [r7, #15]
  if (rslt != BME69X_OK)
 80037da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d015      	beq.n	800380e <main+0x1b2>
  {
      printf("BME69X Set Op Mode Failed: %d\r\n", rslt);
 80037e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80037e6:	4619      	mov	r1, r3
 80037e8:	4848      	ldr	r0, [pc, #288]	@ (800390c <main+0x2b0>)
 80037ea:	f00a fad1 	bl	800dd90 <iprintf>
      snprintf(lcd_buffer, LCD_LINE_MAX_LEN + 1, "BME69X Mode Fail: %d", rslt);		// Display error on LCD
 80037ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80037f2:	4a47      	ldr	r2, [pc, #284]	@ (8003910 <main+0x2b4>)
 80037f4:	2129      	movs	r1, #41	@ 0x29
 80037f6:	483c      	ldr	r0, [pc, #240]	@ (80038e8 <main+0x28c>)
 80037f8:	f00a f9d2 	bl	800dba0 <sniprintf>
      LCD_SetCursor(3, 0);
 80037fc:	2100      	movs	r1, #0
 80037fe:	2003      	movs	r0, #3
 8003800:	f7ff fed2 	bl	80035a8 <LCD_SetCursor>
      LCD_PrintString(lcd_buffer);
 8003804:	4838      	ldr	r0, [pc, #224]	@ (80038e8 <main+0x28c>)
 8003806:	f7ff feed 	bl	80035e4 <LCD_PrintString>
      Error_Handler();
 800380a:	f000 f9c5 	bl	8003b98 <Error_Handler>
  }

  /*   Get the recommended measurement period for forced mode in microseconds   */
  meas_period_us = bme69x_get_meas_dur(BME69X_FORCED_MODE, &bme69x_conf, &bme69x_sensor) * 1000;
 800380e:	4a30      	ldr	r2, [pc, #192]	@ (80038d0 <main+0x274>)
 8003810:	4938      	ldr	r1, [pc, #224]	@ (80038f4 <main+0x298>)
 8003812:	2001      	movs	r0, #1
 8003814:	f7fd feaa 	bl	800156c <bme69x_get_meas_dur>
 8003818:	4603      	mov	r3, r0
 800381a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800381e:	fb02 f303 	mul.w	r3, r2, r3
 8003822:	60bb      	str	r3, [r7, #8]

  LCD_Clear(); 																		// Clear display before starting main loop measurements
 8003824:	f7ff feb4 	bl	8003590 <LCD_Clear>

  /* USER CODE END 2 */

  /* Initialize leds */
  BSP_LED_Init(LED_GREEN);
 8003828:	2000      	movs	r0, #0
 800382a:	f001 f831 	bl	8004890 <BSP_LED_Init>
  BSP_LED_Init(LED_BLUE);
 800382e:	2001      	movs	r0, #1
 8003830:	f001 f82e 	bl	8004890 <BSP_LED_Init>
  BSP_LED_Init(LED_RED);
 8003834:	2002      	movs	r0, #2
 8003836:	f001 f82b 	bl	8004890 <BSP_LED_Init>

  /* Initialize USER push-button, will be used to trigger an interrupt each time it's pressed.*/
  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 800383a:	2101      	movs	r1, #1
 800383c:	2000      	movs	r0, #0
 800383e:	f001 f8b7 	bl	80049b0 <BSP_PB_Init>

  /* Initialize COM1 port (115200, 8 bits (7-bit data + 1 stop bit), no parity */
  BspCOMInit.BaudRate   = 115200;
 8003842:	4b34      	ldr	r3, [pc, #208]	@ (8003914 <main+0x2b8>)
 8003844:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8003848:	601a      	str	r2, [r3, #0]
  BspCOMInit.WordLength = COM_WORDLENGTH_8B;
 800384a:	4b32      	ldr	r3, [pc, #200]	@ (8003914 <main+0x2b8>)
 800384c:	2200      	movs	r2, #0
 800384e:	605a      	str	r2, [r3, #4]
  BspCOMInit.StopBits   = COM_STOPBITS_1;
 8003850:	4b30      	ldr	r3, [pc, #192]	@ (8003914 <main+0x2b8>)
 8003852:	2200      	movs	r2, #0
 8003854:	811a      	strh	r2, [r3, #8]
  BspCOMInit.Parity     = COM_PARITY_NONE;
 8003856:	4b2f      	ldr	r3, [pc, #188]	@ (8003914 <main+0x2b8>)
 8003858:	2200      	movs	r2, #0
 800385a:	815a      	strh	r2, [r3, #10]
  BspCOMInit.HwFlowCtl  = COM_HWCONTROL_NONE;
 800385c:	4b2d      	ldr	r3, [pc, #180]	@ (8003914 <main+0x2b8>)
 800385e:	2200      	movs	r2, #0
 8003860:	819a      	strh	r2, [r3, #12]
  if (BSP_COM_Init(COM1, &BspCOMInit) != BSP_ERROR_NONE)
 8003862:	492c      	ldr	r1, [pc, #176]	@ (8003914 <main+0x2b8>)
 8003864:	2000      	movs	r0, #0
 8003866:	f001 f93d 	bl	8004ae4 <BSP_COM_Init>
 800386a:	4603      	mov	r3, r0
 800386c:	2b00      	cmp	r3, #0
 800386e:	d001      	beq.n	8003874 <main+0x218>
  {
    Error_Handler();
 8003870:	f000 f992 	bl	8003b98 <Error_Handler>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    bme69x_delay_us(meas_period_us, bme69x_sensor.intf_ptr);								// Delay for the measurement to complete
 8003874:	4b16      	ldr	r3, [pc, #88]	@ (80038d0 <main+0x274>)
 8003876:	685b      	ldr	r3, [r3, #4]
 8003878:	4619      	mov	r1, r3
 800387a:	68b8      	ldr	r0, [r7, #8]
 800387c:	f7ff fc26 	bl	80030cc <bme69x_delay_us>

    rslt = bme69x_set_op_mode(BME69X_FORCED_MODE, &bme69x_sensor);							// Set sensor to forced mode again before reading
 8003880:	4913      	ldr	r1, [pc, #76]	@ (80038d0 <main+0x274>)
 8003882:	2001      	movs	r0, #1
 8003884:	f7fd fdf0 	bl	8001468 <bme69x_set_op_mode>
 8003888:	4603      	mov	r3, r0
 800388a:	73fb      	strb	r3, [r7, #15]
    if (rslt != BME69X_OK)
 800388c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003890:	2b00      	cmp	r3, #0
 8003892:	d045      	beq.n	8003920 <main+0x2c4>
    {
        printf("BME69X Set Op Mode Failed (loop start): %d\r\n", rslt);
 8003894:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003898:	4619      	mov	r1, r3
 800389a:	481f      	ldr	r0, [pc, #124]	@ (8003918 <main+0x2bc>)
 800389c:	f00a fa78 	bl	800dd90 <iprintf>
        snprintf(lcd_buffer, LCD_LINE_MAX_LEN + 1, "Mode Err (loop): %d", rslt);
 80038a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80038a4:	4a1d      	ldr	r2, [pc, #116]	@ (800391c <main+0x2c0>)
 80038a6:	2129      	movs	r1, #41	@ 0x29
 80038a8:	480f      	ldr	r0, [pc, #60]	@ (80038e8 <main+0x28c>)
 80038aa:	f00a f979 	bl	800dba0 <sniprintf>
        LCD_SetCursor(0, 0);
 80038ae:	2100      	movs	r1, #0
 80038b0:	2000      	movs	r0, #0
 80038b2:	f7ff fe79 	bl	80035a8 <LCD_SetCursor>
        LCD_PrintString(lcd_buffer);
 80038b6:	480c      	ldr	r0, [pc, #48]	@ (80038e8 <main+0x28c>)
 80038b8:	f7ff fe94 	bl	80035e4 <LCD_PrintString>
        HAL_Delay(2000); // Wait before retrying
 80038bc:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80038c0:	f001 fa40 	bl	8004d44 <HAL_Delay>
        continue; // Skip data read if mode setting failed
 80038c4:	e0d2      	b.n	8003a6c <main+0x410>
 80038c6:	bf00      	nop
 80038c8:	20000350 	.word	0x20000350
 80038cc:	2000026c 	.word	0x2000026c
 80038d0:	200002d0 	.word	0x200002d0
 80038d4:	08003025 	.word	0x08003025
 80038d8:	08003079 	.word	0x08003079
 80038dc:	080030cd 	.word	0x080030cd
 80038e0:	0801012c 	.word	0x0801012c
 80038e4:	08010148 	.word	0x08010148
 80038e8:	20000358 	.word	0x20000358
 80038ec:	08010160 	.word	0x08010160
 80038f0:	08010178 	.word	0x08010178
 80038f4:	20000334 	.word	0x20000334
 80038f8:	08010188 	.word	0x08010188
 80038fc:	080101b0 	.word	0x080101b0
 8003900:	2000033c 	.word	0x2000033c
 8003904:	080101cc 	.word	0x080101cc
 8003908:	080101f4 	.word	0x080101f4
 800390c:	0801020c 	.word	0x0801020c
 8003910:	0801022c 	.word	0x0801022c
 8003914:	200002c0 	.word	0x200002c0
 8003918:	08010244 	.word	0x08010244
 800391c:	08010274 	.word	0x08010274
    }

    rslt = bme69x_get_data(BME69X_FORCED_MODE, &bme69x_data, &n_fields, &bme69x_sensor);	// Get sensor data. The 'n_fields' parameter is still required.
 8003920:	1dfa      	adds	r2, r7, #7
 8003922:	4b53      	ldr	r3, [pc, #332]	@ (8003a70 <main+0x414>)
 8003924:	4953      	ldr	r1, [pc, #332]	@ (8003a74 <main+0x418>)
 8003926:	2001      	movs	r0, #1
 8003928:	f7fd fe94 	bl	8001654 <bme69x_get_data>
 800392c:	4603      	mov	r3, r0
 800392e:	73fb      	strb	r3, [r7, #15]

    LCD_Clear(); // Clear LCD before printing new data in each loop iteration
 8003930:	f7ff fe2e 	bl	8003590 <LCD_Clear>

    if (rslt == BME69X_OK)
 8003934:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003938:	2b00      	cmp	r3, #0
 800393a:	d17f      	bne.n	8003a3c <main+0x3e0>
        // Removed specific validity mask checks, as they are undeclared.
        // Data is displayed if the overall read was successful.
        // The BME69X_GASM_VALID_MSK check is retained as it appeared to be declared.

        // Print Temperature
        snprintf(lcd_buffer, LCD_LINE_MAX_LEN + 1, "Temp: %.2f C", bme69x_data.temperature);
 800393c:	4b4d      	ldr	r3, [pc, #308]	@ (8003a74 <main+0x418>)
 800393e:	689b      	ldr	r3, [r3, #8]
 8003940:	4618      	mov	r0, r3
 8003942:	f7fc fe05 	bl	8000550 <__aeabi_f2d>
 8003946:	4602      	mov	r2, r0
 8003948:	460b      	mov	r3, r1
 800394a:	e9cd 2300 	strd	r2, r3, [sp]
 800394e:	4a4a      	ldr	r2, [pc, #296]	@ (8003a78 <main+0x41c>)
 8003950:	2129      	movs	r1, #41	@ 0x29
 8003952:	484a      	ldr	r0, [pc, #296]	@ (8003a7c <main+0x420>)
 8003954:	f00a f924 	bl	800dba0 <sniprintf>
        LCD_SetCursor(3, 0); // Row 0, Col 0
 8003958:	2100      	movs	r1, #0
 800395a:	2003      	movs	r0, #3
 800395c:	f7ff fe24 	bl	80035a8 <LCD_SetCursor>
        LCD_PrintString(lcd_buffer);
 8003960:	4846      	ldr	r0, [pc, #280]	@ (8003a7c <main+0x420>)
 8003962:	f7ff fe3f 	bl	80035e4 <LCD_PrintString>
        printf("%s\r\n", lcd_buffer); // For serial debugging
 8003966:	4945      	ldr	r1, [pc, #276]	@ (8003a7c <main+0x420>)
 8003968:	4845      	ldr	r0, [pc, #276]	@ (8003a80 <main+0x424>)
 800396a:	f00a fa11 	bl	800dd90 <iprintf>

        // Print Humidity
        snprintf(lcd_buffer, LCD_LINE_MAX_LEN + 1, "Hum : %.2f %%RH", bme69x_data.humidity);
 800396e:	4b41      	ldr	r3, [pc, #260]	@ (8003a74 <main+0x418>)
 8003970:	691b      	ldr	r3, [r3, #16]
 8003972:	4618      	mov	r0, r3
 8003974:	f7fc fdec 	bl	8000550 <__aeabi_f2d>
 8003978:	4602      	mov	r2, r0
 800397a:	460b      	mov	r3, r1
 800397c:	e9cd 2300 	strd	r2, r3, [sp]
 8003980:	4a40      	ldr	r2, [pc, #256]	@ (8003a84 <main+0x428>)
 8003982:	2129      	movs	r1, #41	@ 0x29
 8003984:	483d      	ldr	r0, [pc, #244]	@ (8003a7c <main+0x420>)
 8003986:	f00a f90b 	bl	800dba0 <sniprintf>
        LCD_SetCursor(4, 0); // Row 1, Col 0
 800398a:	2100      	movs	r1, #0
 800398c:	2004      	movs	r0, #4
 800398e:	f7ff fe0b 	bl	80035a8 <LCD_SetCursor>
        LCD_PrintString(lcd_buffer);
 8003992:	483a      	ldr	r0, [pc, #232]	@ (8003a7c <main+0x420>)
 8003994:	f7ff fe26 	bl	80035e4 <LCD_PrintString>
        printf("%s\r\n", lcd_buffer);
 8003998:	4938      	ldr	r1, [pc, #224]	@ (8003a7c <main+0x420>)
 800399a:	4839      	ldr	r0, [pc, #228]	@ (8003a80 <main+0x424>)
 800399c:	f00a f9f8 	bl	800dd90 <iprintf>

        // Print Pressure
        snprintf(lcd_buffer, LCD_LINE_MAX_LEN + 1, "Pres: %.2f hPa", bme69x_data.pressure / 100);
 80039a0:	4b34      	ldr	r3, [pc, #208]	@ (8003a74 <main+0x418>)
 80039a2:	edd3 7a03 	vldr	s15, [r3, #12]
 80039a6:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 8003a88 <main+0x42c>
 80039aa:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80039ae:	ee16 0a90 	vmov	r0, s13
 80039b2:	f7fc fdcd 	bl	8000550 <__aeabi_f2d>
 80039b6:	4602      	mov	r2, r0
 80039b8:	460b      	mov	r3, r1
 80039ba:	e9cd 2300 	strd	r2, r3, [sp]
 80039be:	4a33      	ldr	r2, [pc, #204]	@ (8003a8c <main+0x430>)
 80039c0:	2129      	movs	r1, #41	@ 0x29
 80039c2:	482e      	ldr	r0, [pc, #184]	@ (8003a7c <main+0x420>)
 80039c4:	f00a f8ec 	bl	800dba0 <sniprintf>
        LCD_SetCursor(5, 0); // Row 2, Col 0
 80039c8:	2100      	movs	r1, #0
 80039ca:	2005      	movs	r0, #5
 80039cc:	f7ff fdec 	bl	80035a8 <LCD_SetCursor>
        LCD_PrintString(lcd_buffer);
 80039d0:	482a      	ldr	r0, [pc, #168]	@ (8003a7c <main+0x420>)
 80039d2:	f7ff fe07 	bl	80035e4 <LCD_PrintString>
        printf("%s\r\n", lcd_buffer);
 80039d6:	4929      	ldr	r1, [pc, #164]	@ (8003a7c <main+0x420>)
 80039d8:	4829      	ldr	r0, [pc, #164]	@ (8003a80 <main+0x424>)
 80039da:	f00a f9d9 	bl	800dd90 <iprintf>

        // Print Gas Resistance (keeping this check as BME69X_GASM_VALID_MSK seemed defined)
        if (bme69x_data.status & BME69X_GASM_VALID_MSK)
 80039de:	4b25      	ldr	r3, [pc, #148]	@ (8003a74 <main+0x418>)
 80039e0:	781b      	ldrb	r3, [r3, #0]
 80039e2:	f003 0320 	and.w	r3, r3, #32
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d017      	beq.n	8003a1a <main+0x3be>
        {
            snprintf(lcd_buffer, LCD_LINE_MAX_LEN + 1, "Gas : %lu Ohm", (long unsigned int)bme69x_data.gas_resistance);
 80039ea:	4b22      	ldr	r3, [pc, #136]	@ (8003a74 <main+0x418>)
 80039ec:	edd3 7a05 	vldr	s15, [r3, #20]
 80039f0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80039f4:	ee17 3a90 	vmov	r3, s15
 80039f8:	4a25      	ldr	r2, [pc, #148]	@ (8003a90 <main+0x434>)
 80039fa:	2129      	movs	r1, #41	@ 0x29
 80039fc:	481f      	ldr	r0, [pc, #124]	@ (8003a7c <main+0x420>)
 80039fe:	f00a f8cf 	bl	800dba0 <sniprintf>
            LCD_SetCursor(6, 0); // Row 3, Col 0
 8003a02:	2100      	movs	r1, #0
 8003a04:	2006      	movs	r0, #6
 8003a06:	f7ff fdcf 	bl	80035a8 <LCD_SetCursor>
            LCD_PrintString(lcd_buffer);
 8003a0a:	481c      	ldr	r0, [pc, #112]	@ (8003a7c <main+0x420>)
 8003a0c:	f7ff fdea 	bl	80035e4 <LCD_PrintString>
            printf("%s\r\n", lcd_buffer);
 8003a10:	491a      	ldr	r1, [pc, #104]	@ (8003a7c <main+0x420>)
 8003a12:	481b      	ldr	r0, [pc, #108]	@ (8003a80 <main+0x424>)
 8003a14:	f00a f9bc 	bl	800dd90 <iprintf>
 8003a18:	e024      	b.n	8003a64 <main+0x408>
        } else {
             snprintf(lcd_buffer, LCD_LINE_MAX_LEN + 1, "Gas : N/A"); // No gas measurement or invalid
 8003a1a:	4a1e      	ldr	r2, [pc, #120]	@ (8003a94 <main+0x438>)
 8003a1c:	2129      	movs	r1, #41	@ 0x29
 8003a1e:	4817      	ldr	r0, [pc, #92]	@ (8003a7c <main+0x420>)
 8003a20:	f00a f8be 	bl	800dba0 <sniprintf>
             LCD_SetCursor(6, 0);
 8003a24:	2100      	movs	r1, #0
 8003a26:	2006      	movs	r0, #6
 8003a28:	f7ff fdbe 	bl	80035a8 <LCD_SetCursor>
             LCD_PrintString(lcd_buffer);
 8003a2c:	4813      	ldr	r0, [pc, #76]	@ (8003a7c <main+0x420>)
 8003a2e:	f7ff fdd9 	bl	80035e4 <LCD_PrintString>
             printf("%s\r\n", lcd_buffer);
 8003a32:	4912      	ldr	r1, [pc, #72]	@ (8003a7c <main+0x420>)
 8003a34:	4812      	ldr	r0, [pc, #72]	@ (8003a80 <main+0x424>)
 8003a36:	f00a f9ab 	bl	800dd90 <iprintf>
 8003a3a:	e013      	b.n	8003a64 <main+0x408>
        }
    }
    else
    {
        printf("BME69X Get Data Failed: %d\r\n", rslt);
 8003a3c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003a40:	4619      	mov	r1, r3
 8003a42:	4815      	ldr	r0, [pc, #84]	@ (8003a98 <main+0x43c>)
 8003a44:	f00a f9a4 	bl	800dd90 <iprintf>
        snprintf(lcd_buffer, LCD_LINE_MAX_LEN + 1, "BME69X Data Error: %d", rslt);
 8003a48:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003a4c:	4a13      	ldr	r2, [pc, #76]	@ (8003a9c <main+0x440>)
 8003a4e:	2129      	movs	r1, #41	@ 0x29
 8003a50:	480a      	ldr	r0, [pc, #40]	@ (8003a7c <main+0x420>)
 8003a52:	f00a f8a5 	bl	800dba0 <sniprintf>
        LCD_SetCursor(0, 0);
 8003a56:	2100      	movs	r1, #0
 8003a58:	2000      	movs	r0, #0
 8003a5a:	f7ff fda5 	bl	80035a8 <LCD_SetCursor>
        LCD_PrintString(lcd_buffer);
 8003a5e:	4807      	ldr	r0, [pc, #28]	@ (8003a7c <main+0x420>)
 8003a60:	f7ff fdc0 	bl	80035e4 <LCD_PrintString>
    }

    HAL_Delay(500); 												// Delay for 0.5 seconds before next measurement cycle
 8003a64:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8003a68:	f001 f96c 	bl	8004d44 <HAL_Delay>
    bme69x_delay_us(meas_period_us, bme69x_sensor.intf_ptr);								// Delay for the measurement to complete
 8003a6c:	e702      	b.n	8003874 <main+0x218>
 8003a6e:	bf00      	nop
 8003a70:	200002d0 	.word	0x200002d0
 8003a74:	2000031c 	.word	0x2000031c
 8003a78:	08010288 	.word	0x08010288
 8003a7c:	20000358 	.word	0x20000358
 8003a80:	08010298 	.word	0x08010298
 8003a84:	080102a0 	.word	0x080102a0
 8003a88:	42c80000 	.word	0x42c80000
 8003a8c:	080102b0 	.word	0x080102b0
 8003a90:	080102c0 	.word	0x080102c0
 8003a94:	080102d0 	.word	0x080102d0
 8003a98:	080102dc 	.word	0x080102dc
 8003a9c:	080102fc 	.word	0x080102fc

08003aa0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003aa0:	b580      	push	{r7, lr}
 8003aa2:	b09e      	sub	sp, #120	@ 0x78
 8003aa4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003aa6:	f107 0318 	add.w	r3, r7, #24
 8003aaa:	2260      	movs	r2, #96	@ 0x60
 8003aac:	2100      	movs	r1, #0
 8003aae:	4618      	mov	r0, r3
 8003ab0:	f00a f9de 	bl	800de70 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003ab4:	463b      	mov	r3, r7
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	601a      	str	r2, [r3, #0]
 8003aba:	605a      	str	r2, [r3, #4]
 8003abc:	609a      	str	r2, [r3, #8]
 8003abe:	60da      	str	r2, [r3, #12]
 8003ac0:	611a      	str	r2, [r3, #16]
 8003ac2:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8003ac4:	f44f 3040 	mov.w	r0, #196608	@ 0x30000
 8003ac8:	f003 f9f4 	bl	8006eb4 <HAL_PWREx_ControlVoltageScaling>
 8003acc:	4603      	mov	r3, r0
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d001      	beq.n	8003ad6 <SystemClock_Config+0x36>
  {
    Error_Handler();
 8003ad2:	f000 f861 	bl	8003b98 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003ad6:	2302      	movs	r3, #2
 8003ad8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003ada:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003ade:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003ae0:	2310      	movs	r3, #16
 8003ae2:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003ae4:	2302      	movs	r3, #2
 8003ae6:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003ae8:	2302      	movs	r3, #2
 8003aea:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLMBOOST = RCC_PLLMBOOST_DIV1;
 8003aec:	2300      	movs	r3, #0
 8003aee:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8003af0:	2301      	movs	r3, #1
 8003af2:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLN = 10;
 8003af4:	230a      	movs	r3, #10
 8003af6:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLP = 2;
 8003af8:	2302      	movs	r3, #2
 8003afa:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8003afc:	2302      	movs	r3, #2
 8003afe:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLR = 1;
 8003b00:	2301      	movs	r3, #1
 8003b02:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLLVCIRANGE_1;
 8003b04:	230c      	movs	r3, #12
 8003b06:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8003b08:	2300      	movs	r3, #0
 8003b0a:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003b0c:	f107 0318 	add.w	r3, r7, #24
 8003b10:	4618      	mov	r0, r3
 8003b12:	f003 facb 	bl	80070ac <HAL_RCC_OscConfig>
 8003b16:	4603      	mov	r3, r0
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d001      	beq.n	8003b20 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8003b1c:	f000 f83c 	bl	8003b98 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003b20:	231f      	movs	r3, #31
 8003b22:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003b24:	2303      	movs	r3, #3
 8003b26:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003b28:	2300      	movs	r3, #0
 8003b2a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003b2c:	2300      	movs	r3, #0
 8003b2e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003b30:	2300      	movs	r3, #0
 8003b32:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 8003b34:	2300      	movs	r3, #0
 8003b36:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8003b38:	463b      	mov	r3, r7
 8003b3a:	2104      	movs	r1, #4
 8003b3c:	4618      	mov	r0, r3
 8003b3e:	f004 f991 	bl	8007e64 <HAL_RCC_ClockConfig>
 8003b42:	4603      	mov	r3, r0
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d001      	beq.n	8003b4c <SystemClock_Config+0xac>
  {
    Error_Handler();
 8003b48:	f000 f826 	bl	8003b98 <Error_Handler>
  }
}
 8003b4c:	bf00      	nop
 8003b4e:	3778      	adds	r7, #120	@ 0x78
 8003b50:	46bd      	mov	sp, r7
 8003b52:	bd80      	pop	{r7, pc}

08003b54 <SystemPower_Config>:
/**
  * @brief Power Configuration
  * @retval None
  */
static void SystemPower_Config(void)
{
 8003b54:	b580      	push	{r7, lr}
 8003b56:	af00      	add	r7, sp, #0
  HAL_PWREx_EnableVddIO2();
 8003b58:	f003 fa88 	bl	800706c <HAL_PWREx_EnableVddIO2>

  /*
   * Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
   */
  HAL_PWREx_DisableUCPDDeadBattery();
 8003b5c:	f003 fa96 	bl	800708c <HAL_PWREx_DisableUCPDDeadBattery>

  /*
   * Switch to SMPS regulator instead of LDO
   */
  if (HAL_PWREx_ConfigSupply(PWR_SMPS_SUPPLY) != HAL_OK)
 8003b60:	2002      	movs	r0, #2
 8003b62:	f003 fa33 	bl	8006fcc <HAL_PWREx_ConfigSupply>
 8003b66:	4603      	mov	r3, r0
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d001      	beq.n	8003b70 <SystemPower_Config+0x1c>
  {
    Error_Handler();
 8003b6c:	f000 f814 	bl	8003b98 <Error_Handler>
  }
/* USER CODE BEGIN PWR */
/* USER CODE END PWR */
}
 8003b70:	bf00      	nop
 8003b72:	bd80      	pop	{r7, pc}

08003b74 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003b74:	b580      	push	{r7, lr}
 8003b76:	b082      	sub	sp, #8
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM17)
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	4a04      	ldr	r2, [pc, #16]	@ (8003b94 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8003b82:	4293      	cmp	r3, r2
 8003b84:	d101      	bne.n	8003b8a <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8003b86:	f001 f8bd 	bl	8004d04 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8003b8a:	bf00      	nop
 8003b8c:	3708      	adds	r7, #8
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	bd80      	pop	{r7, pc}
 8003b92:	bf00      	nop
 8003b94:	40014800 	.word	0x40014800

08003b98 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003b98:	b480      	push	{r7}
 8003b9a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003b9c:	b672      	cpsid	i
}
 8003b9e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003ba0:	bf00      	nop
 8003ba2:	e7fd      	b.n	8003ba0 <Error_Handler+0x8>

08003ba4 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8003ba4:	b580      	push	{r7, lr}
 8003ba6:	b084      	sub	sp, #16
 8003ba8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 0 */

  /* USER CODE END SPI1_Init 0 */

  SPI_AutonomousModeConfTypeDef HAL_SPI_AutonomousMode_Cfg_Struct = {0};
 8003baa:	1d3b      	adds	r3, r7, #4
 8003bac:	2200      	movs	r2, #0
 8003bae:	601a      	str	r2, [r3, #0]
 8003bb0:	605a      	str	r2, [r3, #4]
 8003bb2:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8003bb4:	4b31      	ldr	r3, [pc, #196]	@ (8003c7c <MX_SPI1_Init+0xd8>)
 8003bb6:	4a32      	ldr	r2, [pc, #200]	@ (8003c80 <MX_SPI1_Init+0xdc>)
 8003bb8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003bba:	4b30      	ldr	r3, [pc, #192]	@ (8003c7c <MX_SPI1_Init+0xd8>)
 8003bbc:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8003bc0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8003bc2:	4b2e      	ldr	r3, [pc, #184]	@ (8003c7c <MX_SPI1_Init+0xd8>)
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003bc8:	4b2c      	ldr	r3, [pc, #176]	@ (8003c7c <MX_SPI1_Init+0xd8>)
 8003bca:	2207      	movs	r2, #7
 8003bcc:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8003bce:	4b2b      	ldr	r3, [pc, #172]	@ (8003c7c <MX_SPI1_Init+0xd8>)
 8003bd0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003bd4:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8003bd6:	4b29      	ldr	r3, [pc, #164]	@ (8003c7c <MX_SPI1_Init+0xd8>)
 8003bd8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003bdc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003bde:	4b27      	ldr	r3, [pc, #156]	@ (8003c7c <MX_SPI1_Init+0xd8>)
 8003be0:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8003be4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8003be6:	4b25      	ldr	r3, [pc, #148]	@ (8003c7c <MX_SPI1_Init+0xd8>)
 8003be8:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8003bec:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003bee:	4b23      	ldr	r3, [pc, #140]	@ (8003c7c <MX_SPI1_Init+0xd8>)
 8003bf0:	2200      	movs	r2, #0
 8003bf2:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003bf4:	4b21      	ldr	r3, [pc, #132]	@ (8003c7c <MX_SPI1_Init+0xd8>)
 8003bf6:	2200      	movs	r2, #0
 8003bf8:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003bfa:	4b20      	ldr	r3, [pc, #128]	@ (8003c7c <MX_SPI1_Init+0xd8>)
 8003bfc:	2200      	movs	r2, #0
 8003bfe:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x7;
 8003c00:	4b1e      	ldr	r3, [pc, #120]	@ (8003c7c <MX_SPI1_Init+0xd8>)
 8003c02:	2207      	movs	r2, #7
 8003c04:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8003c06:	4b1d      	ldr	r3, [pc, #116]	@ (8003c7c <MX_SPI1_Init+0xd8>)
 8003c08:	2200      	movs	r2, #0
 8003c0a:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8003c0c:	4b1b      	ldr	r3, [pc, #108]	@ (8003c7c <MX_SPI1_Init+0xd8>)
 8003c0e:	2200      	movs	r2, #0
 8003c10:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8003c12:	4b1a      	ldr	r3, [pc, #104]	@ (8003c7c <MX_SPI1_Init+0xd8>)
 8003c14:	2200      	movs	r2, #0
 8003c16:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8003c18:	4b18      	ldr	r3, [pc, #96]	@ (8003c7c <MX_SPI1_Init+0xd8>)
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8003c1e:	4b17      	ldr	r3, [pc, #92]	@ (8003c7c <MX_SPI1_Init+0xd8>)
 8003c20:	2200      	movs	r2, #0
 8003c22:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8003c24:	4b15      	ldr	r3, [pc, #84]	@ (8003c7c <MX_SPI1_Init+0xd8>)
 8003c26:	2200      	movs	r2, #0
 8003c28:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8003c2a:	4b14      	ldr	r3, [pc, #80]	@ (8003c7c <MX_SPI1_Init+0xd8>)
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8003c30:	4b12      	ldr	r3, [pc, #72]	@ (8003c7c <MX_SPI1_Init+0xd8>)
 8003c32:	2200      	movs	r2, #0
 8003c34:	659a      	str	r2, [r3, #88]	@ 0x58
  hspi1.Init.ReadyMasterManagement = SPI_RDY_MASTER_MANAGEMENT_INTERNALLY;
 8003c36:	4b11      	ldr	r3, [pc, #68]	@ (8003c7c <MX_SPI1_Init+0xd8>)
 8003c38:	2200      	movs	r2, #0
 8003c3a:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi1.Init.ReadyPolarity = SPI_RDY_POLARITY_HIGH;
 8003c3c:	4b0f      	ldr	r3, [pc, #60]	@ (8003c7c <MX_SPI1_Init+0xd8>)
 8003c3e:	2200      	movs	r2, #0
 8003c40:	661a      	str	r2, [r3, #96]	@ 0x60
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003c42:	480e      	ldr	r0, [pc, #56]	@ (8003c7c <MX_SPI1_Init+0xd8>)
 8003c44:	f007 f9ae 	bl	800afa4 <HAL_SPI_Init>
 8003c48:	4603      	mov	r3, r0
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d001      	beq.n	8003c52 <MX_SPI1_Init+0xae>
  {
    Error_Handler();
 8003c4e:	f7ff ffa3 	bl	8003b98 <Error_Handler>
  }
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerState = SPI_AUTO_MODE_DISABLE;
 8003c52:	2300      	movs	r3, #0
 8003c54:	607b      	str	r3, [r7, #4]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerSelection = SPI_GRP1_GPDMA_CH0_TCF_TRG;
 8003c56:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8003c5a:	60bb      	str	r3, [r7, #8]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerPolarity = SPI_TRIG_POLARITY_RISING;
 8003c5c:	2300      	movs	r3, #0
 8003c5e:	60fb      	str	r3, [r7, #12]
  if (HAL_SPIEx_SetConfigAutonomousMode(&hspi1, &HAL_SPI_AutonomousMode_Cfg_Struct) != HAL_OK)
 8003c60:	1d3b      	adds	r3, r7, #4
 8003c62:	4619      	mov	r1, r3
 8003c64:	4805      	ldr	r0, [pc, #20]	@ (8003c7c <MX_SPI1_Init+0xd8>)
 8003c66:	f007 ffd0 	bl	800bc0a <HAL_SPIEx_SetConfigAutonomousMode>
 8003c6a:	4603      	mov	r3, r0
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d001      	beq.n	8003c74 <MX_SPI1_Init+0xd0>
  {
    Error_Handler();
 8003c70:	f7ff ff92 	bl	8003b98 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8003c74:	bf00      	nop
 8003c76:	3710      	adds	r7, #16
 8003c78:	46bd      	mov	sp, r7
 8003c7a:	bd80      	pop	{r7, pc}
 8003c7c:	20000384 	.word	0x20000384
 8003c80:	40013000 	.word	0x40013000

08003c84 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8003c84:	b580      	push	{r7, lr}
 8003c86:	b0ba      	sub	sp, #232	@ 0xe8
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c8c:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8003c90:	2200      	movs	r2, #0
 8003c92:	601a      	str	r2, [r3, #0]
 8003c94:	605a      	str	r2, [r3, #4]
 8003c96:	609a      	str	r2, [r3, #8]
 8003c98:	60da      	str	r2, [r3, #12]
 8003c9a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003c9c:	f107 0310 	add.w	r3, r7, #16
 8003ca0:	22c0      	movs	r2, #192	@ 0xc0
 8003ca2:	2100      	movs	r1, #0
 8003ca4:	4618      	mov	r0, r3
 8003ca6:	f00a f8e3 	bl	800de70 <memset>
  if(spiHandle->Instance==SPI1)
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	4a2b      	ldr	r2, [pc, #172]	@ (8003d5c <HAL_SPI_MspInit+0xd8>)
 8003cb0:	4293      	cmp	r3, r2
 8003cb2:	d14e      	bne.n	8003d52 <HAL_SPI_MspInit+0xce>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8003cb4:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8003cb8:	f04f 0300 	mov.w	r3, #0
 8003cbc:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.Spi1ClockSelection = RCC_SPI1CLKSOURCE_SYSCLK;
 8003cc0:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8003cc4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003cc8:	f107 0310 	add.w	r3, r7, #16
 8003ccc:	4618      	mov	r0, r3
 8003cce:	f004 fcd1 	bl	8008674 <HAL_RCCEx_PeriphCLKConfig>
 8003cd2:	4603      	mov	r3, r0
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d001      	beq.n	8003cdc <HAL_SPI_MspInit+0x58>
    {
      Error_Handler();
 8003cd8:	f7ff ff5e 	bl	8003b98 <Error_Handler>
    }

    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003cdc:	4b20      	ldr	r3, [pc, #128]	@ (8003d60 <HAL_SPI_MspInit+0xdc>)
 8003cde:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003ce2:	4a1f      	ldr	r2, [pc, #124]	@ (8003d60 <HAL_SPI_MspInit+0xdc>)
 8003ce4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003ce8:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8003cec:	4b1c      	ldr	r3, [pc, #112]	@ (8003d60 <HAL_SPI_MspInit+0xdc>)
 8003cee:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003cf2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003cf6:	60fb      	str	r3, [r7, #12]
 8003cf8:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003cfa:	4b19      	ldr	r3, [pc, #100]	@ (8003d60 <HAL_SPI_MspInit+0xdc>)
 8003cfc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003d00:	4a17      	ldr	r2, [pc, #92]	@ (8003d60 <HAL_SPI_MspInit+0xdc>)
 8003d02:	f043 0301 	orr.w	r3, r3, #1
 8003d06:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8003d0a:	4b15      	ldr	r3, [pc, #84]	@ (8003d60 <HAL_SPI_MspInit+0xdc>)
 8003d0c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003d10:	f003 0301 	and.w	r3, r3, #1
 8003d14:	60bb      	str	r3, [r7, #8]
 8003d16:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8003d18:	23e0      	movs	r3, #224	@ 0xe0
 8003d1a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d1e:	2302      	movs	r3, #2
 8003d20:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d24:	2300      	movs	r3, #0
 8003d26:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d2a:	2300      	movs	r3, #0
 8003d2c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003d30:	2305      	movs	r3, #5
 8003d32:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003d36:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8003d3a:	4619      	mov	r1, r3
 8003d3c:	4809      	ldr	r0, [pc, #36]	@ (8003d64 <HAL_SPI_MspInit+0xe0>)
 8003d3e:	f001 fa2b 	bl	8005198 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8003d42:	2200      	movs	r2, #0
 8003d44:	2100      	movs	r1, #0
 8003d46:	203b      	movs	r0, #59	@ 0x3b
 8003d48:	f001 f8d8 	bl	8004efc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8003d4c:	203b      	movs	r0, #59	@ 0x3b
 8003d4e:	f001 f8ef 	bl	8004f30 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8003d52:	bf00      	nop
 8003d54:	37e8      	adds	r7, #232	@ 0xe8
 8003d56:	46bd      	mov	sp, r7
 8003d58:	bd80      	pop	{r7, pc}
 8003d5a:	bf00      	nop
 8003d5c:	40013000 	.word	0x40013000
 8003d60:	46020c00 	.word	0x46020c00
 8003d64:	42020000 	.word	0x42020000

08003d68 <ST7789_Select>:

// Global SPI handle pointer
SPI_HandleTypeDef *hspi_st7789;

// Internal functions
static void ST7789_Select() {
 8003d68:	b580      	push	{r7, lr}
 8003d6a:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ST7789_CS_GPIO_Port, ST7789_CS_Pin, GPIO_PIN_RESET);
 8003d6c:	2200      	movs	r2, #0
 8003d6e:	2110      	movs	r1, #16
 8003d70:	4802      	ldr	r0, [pc, #8]	@ (8003d7c <ST7789_Select+0x14>)
 8003d72:	f001 fbf1 	bl	8005558 <HAL_GPIO_WritePin>
}
 8003d76:	bf00      	nop
 8003d78:	bd80      	pop	{r7, pc}
 8003d7a:	bf00      	nop
 8003d7c:	42020000 	.word	0x42020000

08003d80 <ST7789_Unselect>:

static void ST7789_Unselect() {
 8003d80:	b580      	push	{r7, lr}
 8003d82:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ST7789_CS_GPIO_Port, ST7789_CS_Pin, GPIO_PIN_SET);
 8003d84:	2201      	movs	r2, #1
 8003d86:	2110      	movs	r1, #16
 8003d88:	4802      	ldr	r0, [pc, #8]	@ (8003d94 <ST7789_Unselect+0x14>)
 8003d8a:	f001 fbe5 	bl	8005558 <HAL_GPIO_WritePin>
}
 8003d8e:	bf00      	nop
 8003d90:	bd80      	pop	{r7, pc}
 8003d92:	bf00      	nop
 8003d94:	42020000 	.word	0x42020000

08003d98 <ST7789_WriteCommand>:

void ST7789_WriteCommand(uint8_t cmd) {
 8003d98:	b580      	push	{r7, lr}
 8003d9a:	b082      	sub	sp, #8
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	4603      	mov	r3, r0
 8003da0:	71fb      	strb	r3, [r7, #7]
    ST7789_Select();
 8003da2:	f7ff ffe1 	bl	8003d68 <ST7789_Select>
    HAL_GPIO_WritePin(ST7789_DC_GPIO_Port, ST7789_DC_Pin, GPIO_PIN_RESET); // Command mode
 8003da6:	2200      	movs	r2, #0
 8003da8:	2101      	movs	r1, #1
 8003daa:	4808      	ldr	r0, [pc, #32]	@ (8003dcc <ST7789_WriteCommand+0x34>)
 8003dac:	f001 fbd4 	bl	8005558 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(hspi_st7789, &cmd, 1, HAL_MAX_DELAY);
 8003db0:	4b07      	ldr	r3, [pc, #28]	@ (8003dd0 <ST7789_WriteCommand+0x38>)
 8003db2:	6818      	ldr	r0, [r3, #0]
 8003db4:	1df9      	adds	r1, r7, #7
 8003db6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003dba:	2201      	movs	r2, #1
 8003dbc:	f007 fa08 	bl	800b1d0 <HAL_SPI_Transmit>
    ST7789_Unselect();
 8003dc0:	f7ff ffde 	bl	8003d80 <ST7789_Unselect>
}
 8003dc4:	bf00      	nop
 8003dc6:	3708      	adds	r7, #8
 8003dc8:	46bd      	mov	sp, r7
 8003dca:	bd80      	pop	{r7, pc}
 8003dcc:	42020400 	.word	0x42020400
 8003dd0:	20000414 	.word	0x20000414

08003dd4 <ST7789_WriteData>:

void ST7789_WriteData(uint8_t *buff, size_t buff_size) {
 8003dd4:	b580      	push	{r7, lr}
 8003dd6:	b082      	sub	sp, #8
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	6078      	str	r0, [r7, #4]
 8003ddc:	6039      	str	r1, [r7, #0]
    ST7789_Select();
 8003dde:	f7ff ffc3 	bl	8003d68 <ST7789_Select>
    HAL_GPIO_WritePin(ST7789_DC_GPIO_Port, ST7789_DC_Pin, GPIO_PIN_SET); // Data mode
 8003de2:	2201      	movs	r2, #1
 8003de4:	2101      	movs	r1, #1
 8003de6:	4809      	ldr	r0, [pc, #36]	@ (8003e0c <ST7789_WriteData+0x38>)
 8003de8:	f001 fbb6 	bl	8005558 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(hspi_st7789, buff, buff_size, HAL_MAX_DELAY);
 8003dec:	4b08      	ldr	r3, [pc, #32]	@ (8003e10 <ST7789_WriteData+0x3c>)
 8003dee:	6818      	ldr	r0, [r3, #0]
 8003df0:	683b      	ldr	r3, [r7, #0]
 8003df2:	b29a      	uxth	r2, r3
 8003df4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003df8:	6879      	ldr	r1, [r7, #4]
 8003dfa:	f007 f9e9 	bl	800b1d0 <HAL_SPI_Transmit>
    ST7789_Unselect();
 8003dfe:	f7ff ffbf 	bl	8003d80 <ST7789_Unselect>
}
 8003e02:	bf00      	nop
 8003e04:	3708      	adds	r7, #8
 8003e06:	46bd      	mov	sp, r7
 8003e08:	bd80      	pop	{r7, pc}
 8003e0a:	bf00      	nop
 8003e0c:	42020400 	.word	0x42020400
 8003e10:	20000414 	.word	0x20000414

08003e14 <ST7789_SetAddressWindow>:

void ST7789_SetAddressWindow(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1) {
 8003e14:	b590      	push	{r4, r7, lr}
 8003e16:	b085      	sub	sp, #20
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	4604      	mov	r4, r0
 8003e1c:	4608      	mov	r0, r1
 8003e1e:	4611      	mov	r1, r2
 8003e20:	461a      	mov	r2, r3
 8003e22:	4623      	mov	r3, r4
 8003e24:	80fb      	strh	r3, [r7, #6]
 8003e26:	4603      	mov	r3, r0
 8003e28:	80bb      	strh	r3, [r7, #4]
 8003e2a:	460b      	mov	r3, r1
 8003e2c:	807b      	strh	r3, [r7, #2]
 8003e2e:	4613      	mov	r3, r2
 8003e30:	803b      	strh	r3, [r7, #0]
    // --- KEY MODIFICATION FOR 240x280 DISPLAY ---
    // For 240x280 ST7789V2, typically a Y-offset is needed.
    // The controller is 240x320, but the panel is 240x280.
    // This centers the 280 pixels vertically within the 320-pixel frame.
    uint16_t y_hardware_offset = 20; // 20 pixels for a 240x280 display
 8003e32:	2314      	movs	r3, #20
 8003e34:	81fb      	strh	r3, [r7, #14]
    // No X-offset for 240-width displays
    // uint16_t x_hardware_offset = 0; // Or remove this line if it was added for 170x320
    // x0 += x_hardware_offset;
    // x1 += x_hardware_offset;

    y0 += y_hardware_offset;
 8003e36:	88ba      	ldrh	r2, [r7, #4]
 8003e38:	89fb      	ldrh	r3, [r7, #14]
 8003e3a:	4413      	add	r3, r2
 8003e3c:	80bb      	strh	r3, [r7, #4]
    y1 += y_hardware_offset;
 8003e3e:	883a      	ldrh	r2, [r7, #0]
 8003e40:	89fb      	ldrh	r3, [r7, #14]
 8003e42:	4413      	add	r3, r2
 8003e44:	803b      	strh	r3, [r7, #0]
    // --- END OF KEY MODIFICATION ---

    uint8_t data[4];

    // Column Address Set (CASET)
    ST7789_WriteCommand(ST7789_CASET);
 8003e46:	202a      	movs	r0, #42	@ 0x2a
 8003e48:	f7ff ffa6 	bl	8003d98 <ST7789_WriteCommand>
    data[0] = (x0 >> 8) & 0xFF;
 8003e4c:	88fb      	ldrh	r3, [r7, #6]
 8003e4e:	0a1b      	lsrs	r3, r3, #8
 8003e50:	b29b      	uxth	r3, r3
 8003e52:	b2db      	uxtb	r3, r3
 8003e54:	723b      	strb	r3, [r7, #8]
    data[1] = x0 & 0xFF;
 8003e56:	88fb      	ldrh	r3, [r7, #6]
 8003e58:	b2db      	uxtb	r3, r3
 8003e5a:	727b      	strb	r3, [r7, #9]
    data[2] = (x1 >> 8) & 0xFF;
 8003e5c:	887b      	ldrh	r3, [r7, #2]
 8003e5e:	0a1b      	lsrs	r3, r3, #8
 8003e60:	b29b      	uxth	r3, r3
 8003e62:	b2db      	uxtb	r3, r3
 8003e64:	72bb      	strb	r3, [r7, #10]
    data[3] = x1 & 0xFF;
 8003e66:	887b      	ldrh	r3, [r7, #2]
 8003e68:	b2db      	uxtb	r3, r3
 8003e6a:	72fb      	strb	r3, [r7, #11]
    ST7789_WriteData(data, 4);
 8003e6c:	f107 0308 	add.w	r3, r7, #8
 8003e70:	2104      	movs	r1, #4
 8003e72:	4618      	mov	r0, r3
 8003e74:	f7ff ffae 	bl	8003dd4 <ST7789_WriteData>

    // Row Address Set (RASET)
    ST7789_WriteCommand(ST7789_RASET);
 8003e78:	202b      	movs	r0, #43	@ 0x2b
 8003e7a:	f7ff ff8d 	bl	8003d98 <ST7789_WriteCommand>
    data[0] = (y0 >> 8) & 0xFF;
 8003e7e:	88bb      	ldrh	r3, [r7, #4]
 8003e80:	0a1b      	lsrs	r3, r3, #8
 8003e82:	b29b      	uxth	r3, r3
 8003e84:	b2db      	uxtb	r3, r3
 8003e86:	723b      	strb	r3, [r7, #8]
    data[1] = y0 & 0xFF;
 8003e88:	88bb      	ldrh	r3, [r7, #4]
 8003e8a:	b2db      	uxtb	r3, r3
 8003e8c:	727b      	strb	r3, [r7, #9]
    data[2] = (y1 >> 8) & 0xFF;
 8003e8e:	883b      	ldrh	r3, [r7, #0]
 8003e90:	0a1b      	lsrs	r3, r3, #8
 8003e92:	b29b      	uxth	r3, r3
 8003e94:	b2db      	uxtb	r3, r3
 8003e96:	72bb      	strb	r3, [r7, #10]
    data[3] = y1 & 0xFF;
 8003e98:	883b      	ldrh	r3, [r7, #0]
 8003e9a:	b2db      	uxtb	r3, r3
 8003e9c:	72fb      	strb	r3, [r7, #11]
    ST7789_WriteData(data, 4);
 8003e9e:	f107 0308 	add.w	r3, r7, #8
 8003ea2:	2104      	movs	r1, #4
 8003ea4:	4618      	mov	r0, r3
 8003ea6:	f7ff ff95 	bl	8003dd4 <ST7789_WriteData>

    ST7789_WriteCommand(ST7789_RAMWR); // Memory Write
 8003eaa:	202c      	movs	r0, #44	@ 0x2c
 8003eac:	f7ff ff74 	bl	8003d98 <ST7789_WriteCommand>
}
 8003eb0:	bf00      	nop
 8003eb2:	3714      	adds	r7, #20
 8003eb4:	46bd      	mov	sp, r7
 8003eb6:	bd90      	pop	{r4, r7, pc}

08003eb8 <ST7789_Init>:

void ST7789_Init(SPI_HandleTypeDef *hspi) {
 8003eb8:	b580      	push	{r7, lr}
 8003eba:	b084      	sub	sp, #16
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	6078      	str	r0, [r7, #4]
    hspi_st7789 = hspi;
 8003ec0:	4a30      	ldr	r2, [pc, #192]	@ (8003f84 <ST7789_Init+0xcc>)
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	6013      	str	r3, [r2, #0]

    // Hardware Reset
    HAL_GPIO_WritePin(ST7789_RST_GPIO_Port, ST7789_RST_Pin, GPIO_PIN_SET);
 8003ec6:	2201      	movs	r2, #1
 8003ec8:	2101      	movs	r1, #1
 8003eca:	482f      	ldr	r0, [pc, #188]	@ (8003f88 <ST7789_Init+0xd0>)
 8003ecc:	f001 fb44 	bl	8005558 <HAL_GPIO_WritePin>
    HAL_Delay(10);
 8003ed0:	200a      	movs	r0, #10
 8003ed2:	f000 ff37 	bl	8004d44 <HAL_Delay>
    HAL_GPIO_WritePin(ST7789_RST_GPIO_Port, ST7789_RST_Pin, GPIO_PIN_RESET);
 8003ed6:	2200      	movs	r2, #0
 8003ed8:	2101      	movs	r1, #1
 8003eda:	482b      	ldr	r0, [pc, #172]	@ (8003f88 <ST7789_Init+0xd0>)
 8003edc:	f001 fb3c 	bl	8005558 <HAL_GPIO_WritePin>
    HAL_Delay(10);
 8003ee0:	200a      	movs	r0, #10
 8003ee2:	f000 ff2f 	bl	8004d44 <HAL_Delay>
    HAL_GPIO_WritePin(ST7789_RST_GPIO_Port, ST7789_RST_Pin, GPIO_PIN_SET);
 8003ee6:	2201      	movs	r2, #1
 8003ee8:	2101      	movs	r1, #1
 8003eea:	4827      	ldr	r0, [pc, #156]	@ (8003f88 <ST7789_Init+0xd0>)
 8003eec:	f001 fb34 	bl	8005558 <HAL_GPIO_WritePin>
    HAL_Delay(120); // Wait for reset to complete
 8003ef0:	2078      	movs	r0, #120	@ 0x78
 8003ef2:	f000 ff27 	bl	8004d44 <HAL_Delay>

    // Backlight ON
    ST7789_SetBacklight(1);
 8003ef6:	2001      	movs	r0, #1
 8003ef8:	f000 fa26 	bl	8004348 <ST7789_SetBacklight>
    HAL_Delay(10);
 8003efc:	200a      	movs	r0, #10
 8003efe:	f000 ff21 	bl	8004d44 <HAL_Delay>

    // Initial sequence for ST7789V2 (common for 1.69inch)
    ST7789_WriteCommand(ST7789_SWRESET); // Software reset
 8003f02:	2001      	movs	r0, #1
 8003f04:	f7ff ff48 	bl	8003d98 <ST7789_WriteCommand>
    HAL_Delay(150);
 8003f08:	2096      	movs	r0, #150	@ 0x96
 8003f0a:	f000 ff1b 	bl	8004d44 <HAL_Delay>

    ST7789_WriteCommand(ST7789_SLPOUT);  // Exit sleep
 8003f0e:	2011      	movs	r0, #17
 8003f10:	f7ff ff42 	bl	8003d98 <ST7789_WriteCommand>
    HAL_Delay(10);
 8003f14:	200a      	movs	r0, #10
 8003f16:	f000 ff15 	bl	8004d44 <HAL_Delay>

    ST7789_WriteCommand(ST7789_COLMOD);  // Set color mode
 8003f1a:	203a      	movs	r0, #58	@ 0x3a
 8003f1c:	f7ff ff3c 	bl	8003d98 <ST7789_WriteCommand>
    uint8_t data_colmod[] = {0x05};      // 16-bit color (RGB565)
 8003f20:	2305      	movs	r3, #5
 8003f22:	733b      	strb	r3, [r7, #12]
    ST7789_WriteData(data_colmod, 1);
 8003f24:	f107 030c 	add.w	r3, r7, #12
 8003f28:	2101      	movs	r1, #1
 8003f2a:	4618      	mov	r0, r3
 8003f2c:	f7ff ff52 	bl	8003dd4 <ST7789_WriteData>
    HAL_Delay(10);
 8003f30:	200a      	movs	r0, #10
 8003f32:	f000 ff07 	bl	8004d44 <HAL_Delay>

    ST7789_WriteCommand(ST7789_MADCTL);  // Memory Data Access Control
 8003f36:	2036      	movs	r0, #54	@ 0x36
 8003f38:	f7ff ff2e 	bl	8003d98 <ST7789_WriteCommand>
    uint8_t data_madctl[] = {0x00};      // Default: MX=0, MY=0, MV=0, ML=0, RGB=0 (Portrait, top-to-bottom, left-to-right)
 8003f3c:	2300      	movs	r3, #0
 8003f3e:	723b      	strb	r3, [r7, #8]
    // 0x60: MV + MX (90deg landscape)
    // 0xA0: MY + MV (270deg landscape)
    // 0xC0: MY + MX + MV + ML (Portrait, 180deg)
    // For 1.69" often 0x00 or 0x60 (landscape)
    // Let's use 0x00 for initial portrait and add rotation function.
    ST7789_WriteData(data_madctl, 1);
 8003f40:	f107 0308 	add.w	r3, r7, #8
 8003f44:	2101      	movs	r1, #1
 8003f46:	4618      	mov	r0, r3
 8003f48:	f7ff ff44 	bl	8003dd4 <ST7789_WriteData>
    HAL_Delay(10);
 8003f4c:	200a      	movs	r0, #10
 8003f4e:	f000 fef9 	bl	8004d44 <HAL_Delay>
    //
    // ST7789_WriteCommand(0xB7); // Gate Control
    // uint8_t data_gate[] = {0x35};
    // ST7789_WriteData(data_gate, 1);

    ST7789_WriteCommand(ST7789_INVON);   // Inversion ON
 8003f52:	2021      	movs	r0, #33	@ 0x21
 8003f54:	f7ff ff20 	bl	8003d98 <ST7789_WriteCommand>
    HAL_Delay(10);
 8003f58:	200a      	movs	r0, #10
 8003f5a:	f000 fef3 	bl	8004d44 <HAL_Delay>

    ST7789_WriteCommand(ST7789_NORON);   // Normal display mode
 8003f5e:	2013      	movs	r0, #19
 8003f60:	f7ff ff1a 	bl	8003d98 <ST7789_WriteCommand>
    HAL_Delay(10);
 8003f64:	200a      	movs	r0, #10
 8003f66:	f000 feed 	bl	8004d44 <HAL_Delay>

    ST7789_WriteCommand(ST7789_DISPON);  // Display ON
 8003f6a:	2029      	movs	r0, #41	@ 0x29
 8003f6c:	f7ff ff14 	bl	8003d98 <ST7789_WriteCommand>
    HAL_Delay(120);
 8003f70:	2078      	movs	r0, #120	@ 0x78
 8003f72:	f000 fee7 	bl	8004d44 <HAL_Delay>

    // Initial fill to black
    ST7789_FillScreen(ST7789_BLACK);
 8003f76:	2000      	movs	r0, #0
 8003f78:	f000 f808 	bl	8003f8c <ST7789_FillScreen>
}
 8003f7c:	bf00      	nop
 8003f7e:	3710      	adds	r7, #16
 8003f80:	46bd      	mov	sp, r7
 8003f82:	bd80      	pop	{r7, pc}
 8003f84:	20000414 	.word	0x20000414
 8003f88:	42020800 	.word	0x42020800

08003f8c <ST7789_FillScreen>:

void ST7789_FillScreen(uint16_t color) {
 8003f8c:	b580      	push	{r7, lr}
 8003f8e:	b084      	sub	sp, #16
 8003f90:	af02      	add	r7, sp, #8
 8003f92:	4603      	mov	r3, r0
 8003f94:	80fb      	strh	r3, [r7, #6]
    ST7789_FillRectangle(0, 0, ST7789_WIDTH, ST7789_HEIGHT, color);
 8003f96:	88fb      	ldrh	r3, [r7, #6]
 8003f98:	9300      	str	r3, [sp, #0]
 8003f9a:	f44f 738c 	mov.w	r3, #280	@ 0x118
 8003f9e:	22f0      	movs	r2, #240	@ 0xf0
 8003fa0:	2100      	movs	r1, #0
 8003fa2:	2000      	movs	r0, #0
 8003fa4:	f000 f83c 	bl	8004020 <ST7789_FillRectangle>
}
 8003fa8:	bf00      	nop
 8003faa:	3708      	adds	r7, #8
 8003fac:	46bd      	mov	sp, r7
 8003fae:	bd80      	pop	{r7, pc}

08003fb0 <ST7789_DrawPixel>:

void ST7789_DrawPixel(int16_t x, int16_t y, uint16_t color) {
 8003fb0:	b580      	push	{r7, lr}
 8003fb2:	b084      	sub	sp, #16
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	4603      	mov	r3, r0
 8003fb8:	80fb      	strh	r3, [r7, #6]
 8003fba:	460b      	mov	r3, r1
 8003fbc:	80bb      	strh	r3, [r7, #4]
 8003fbe:	4613      	mov	r3, r2
 8003fc0:	807b      	strh	r3, [r7, #2]
    if ((x < 0) || (x >= ST7789_WIDTH) || (y < 0) || (y >= ST7789_HEIGHT)) return;
 8003fc2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	db25      	blt.n	8004016 <ST7789_DrawPixel+0x66>
 8003fca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003fce:	2bef      	cmp	r3, #239	@ 0xef
 8003fd0:	dc21      	bgt.n	8004016 <ST7789_DrawPixel+0x66>
 8003fd2:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	db1d      	blt.n	8004016 <ST7789_DrawPixel+0x66>
 8003fda:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8003fde:	f5b3 7f8c 	cmp.w	r3, #280	@ 0x118
 8003fe2:	da18      	bge.n	8004016 <ST7789_DrawPixel+0x66>
    ST7789_SetAddressWindow(x, y, x + 1, y + 1);
 8003fe4:	88f8      	ldrh	r0, [r7, #6]
 8003fe6:	88b9      	ldrh	r1, [r7, #4]
 8003fe8:	88fb      	ldrh	r3, [r7, #6]
 8003fea:	3301      	adds	r3, #1
 8003fec:	b29a      	uxth	r2, r3
 8003fee:	88bb      	ldrh	r3, [r7, #4]
 8003ff0:	3301      	adds	r3, #1
 8003ff2:	b29b      	uxth	r3, r3
 8003ff4:	f7ff ff0e 	bl	8003e14 <ST7789_SetAddressWindow>
    uint8_t data[2];
    data[0] = (uint8_t)(color >> 8);
 8003ff8:	887b      	ldrh	r3, [r7, #2]
 8003ffa:	0a1b      	lsrs	r3, r3, #8
 8003ffc:	b29b      	uxth	r3, r3
 8003ffe:	b2db      	uxtb	r3, r3
 8004000:	733b      	strb	r3, [r7, #12]
    data[1] = (uint8_t)(color & 0xFF);
 8004002:	887b      	ldrh	r3, [r7, #2]
 8004004:	b2db      	uxtb	r3, r3
 8004006:	737b      	strb	r3, [r7, #13]
    ST7789_WriteData(data, 2);
 8004008:	f107 030c 	add.w	r3, r7, #12
 800400c:	2102      	movs	r1, #2
 800400e:	4618      	mov	r0, r3
 8004010:	f7ff fee0 	bl	8003dd4 <ST7789_WriteData>
 8004014:	e000      	b.n	8004018 <ST7789_DrawPixel+0x68>
    if ((x < 0) || (x >= ST7789_WIDTH) || (y < 0) || (y >= ST7789_HEIGHT)) return;
 8004016:	bf00      	nop
}
 8004018:	3710      	adds	r7, #16
 800401a:	46bd      	mov	sp, r7
 800401c:	bd80      	pop	{r7, pc}
	...

08004020 <ST7789_FillRectangle>:

void ST7789_FillRectangle(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color) {
 8004020:	b590      	push	{r4, r7, lr}
 8004022:	b085      	sub	sp, #20
 8004024:	af00      	add	r7, sp, #0
 8004026:	4604      	mov	r4, r0
 8004028:	4608      	mov	r0, r1
 800402a:	4611      	mov	r1, r2
 800402c:	461a      	mov	r2, r3
 800402e:	4623      	mov	r3, r4
 8004030:	80fb      	strh	r3, [r7, #6]
 8004032:	4603      	mov	r3, r0
 8004034:	80bb      	strh	r3, [r7, #4]
 8004036:	460b      	mov	r3, r1
 8004038:	807b      	strh	r3, [r7, #2]
 800403a:	4613      	mov	r3, r2
 800403c:	803b      	strh	r3, [r7, #0]
    if ((x >= ST7789_WIDTH) || (y >= ST7789_HEIGHT)) return;
 800403e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004042:	2bef      	cmp	r3, #239	@ 0xef
 8004044:	dc5a      	bgt.n	80040fc <ST7789_FillRectangle+0xdc>
 8004046:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800404a:	f5b3 7f8c 	cmp.w	r3, #280	@ 0x118
 800404e:	da55      	bge.n	80040fc <ST7789_FillRectangle+0xdc>
    if ((x + w - 1) >= ST7789_WIDTH) w = ST7789_WIDTH - x;
 8004050:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8004054:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004058:	4413      	add	r3, r2
 800405a:	2bf0      	cmp	r3, #240	@ 0xf0
 800405c:	dd04      	ble.n	8004068 <ST7789_FillRectangle+0x48>
 800405e:	88fb      	ldrh	r3, [r7, #6]
 8004060:	f1c3 03f0 	rsb	r3, r3, #240	@ 0xf0
 8004064:	b29b      	uxth	r3, r3
 8004066:	807b      	strh	r3, [r7, #2]
    if ((y + h - 1) >= ST7789_HEIGHT) h = ST7789_HEIGHT - y;
 8004068:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800406c:	f9b7 3000 	ldrsh.w	r3, [r7]
 8004070:	4413      	add	r3, r2
 8004072:	f5b3 7f8c 	cmp.w	r3, #280	@ 0x118
 8004076:	dd04      	ble.n	8004082 <ST7789_FillRectangle+0x62>
 8004078:	88bb      	ldrh	r3, [r7, #4]
 800407a:	f5c3 738c 	rsb	r3, r3, #280	@ 0x118
 800407e:	b29b      	uxth	r3, r3
 8004080:	803b      	strh	r3, [r7, #0]

    ST7789_SetAddressWindow(x, y, x + w - 1, y + h - 1);
 8004082:	88f8      	ldrh	r0, [r7, #6]
 8004084:	88b9      	ldrh	r1, [r7, #4]
 8004086:	88fa      	ldrh	r2, [r7, #6]
 8004088:	887b      	ldrh	r3, [r7, #2]
 800408a:	4413      	add	r3, r2
 800408c:	b29b      	uxth	r3, r3
 800408e:	3b01      	subs	r3, #1
 8004090:	b29c      	uxth	r4, r3
 8004092:	88ba      	ldrh	r2, [r7, #4]
 8004094:	883b      	ldrh	r3, [r7, #0]
 8004096:	4413      	add	r3, r2
 8004098:	b29b      	uxth	r3, r3
 800409a:	3b01      	subs	r3, #1
 800409c:	b29b      	uxth	r3, r3
 800409e:	4622      	mov	r2, r4
 80040a0:	f7ff feb8 	bl	8003e14 <ST7789_SetAddressWindow>

    uint8_t data[2];
    data[0] = (uint8_t)(color >> 8);
 80040a4:	8c3b      	ldrh	r3, [r7, #32]
 80040a6:	0a1b      	lsrs	r3, r3, #8
 80040a8:	b29b      	uxth	r3, r3
 80040aa:	b2db      	uxtb	r3, r3
 80040ac:	723b      	strb	r3, [r7, #8]
    data[1] = (uint8_t)(color & 0xFF);
 80040ae:	8c3b      	ldrh	r3, [r7, #32]
 80040b0:	b2db      	uxtb	r3, r3
 80040b2:	727b      	strb	r3, [r7, #9]

    uint32_t i = 0;
 80040b4:	2300      	movs	r3, #0
 80040b6:	60fb      	str	r3, [r7, #12]
    ST7789_Select();
 80040b8:	f7ff fe56 	bl	8003d68 <ST7789_Select>
    HAL_GPIO_WritePin(ST7789_DC_GPIO_Port, ST7789_DC_Pin, GPIO_PIN_SET); // Data mode
 80040bc:	2201      	movs	r2, #1
 80040be:	2101      	movs	r1, #1
 80040c0:	4810      	ldr	r0, [pc, #64]	@ (8004104 <ST7789_FillRectangle+0xe4>)
 80040c2:	f001 fa49 	bl	8005558 <HAL_GPIO_WritePin>

    // Transmit in chunks if the buffer is large, or just directly
    for (i = 0; i < (uint32_t)w * h; i++) {
 80040c6:	2300      	movs	r3, #0
 80040c8:	60fb      	str	r3, [r7, #12]
 80040ca:	e00b      	b.n	80040e4 <ST7789_FillRectangle+0xc4>
        HAL_SPI_Transmit(hspi_st7789, data, 2, HAL_MAX_DELAY);
 80040cc:	4b0e      	ldr	r3, [pc, #56]	@ (8004108 <ST7789_FillRectangle+0xe8>)
 80040ce:	6818      	ldr	r0, [r3, #0]
 80040d0:	f107 0108 	add.w	r1, r7, #8
 80040d4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80040d8:	2202      	movs	r2, #2
 80040da:	f007 f879 	bl	800b1d0 <HAL_SPI_Transmit>
    for (i = 0; i < (uint32_t)w * h; i++) {
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	3301      	adds	r3, #1
 80040e2:	60fb      	str	r3, [r7, #12]
 80040e4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80040e8:	f9b7 2000 	ldrsh.w	r2, [r7]
 80040ec:	fb02 f303 	mul.w	r3, r2, r3
 80040f0:	68fa      	ldr	r2, [r7, #12]
 80040f2:	429a      	cmp	r2, r3
 80040f4:	d3ea      	bcc.n	80040cc <ST7789_FillRectangle+0xac>
    }
    ST7789_Unselect();
 80040f6:	f7ff fe43 	bl	8003d80 <ST7789_Unselect>
 80040fa:	e000      	b.n	80040fe <ST7789_FillRectangle+0xde>
    if ((x >= ST7789_WIDTH) || (y >= ST7789_HEIGHT)) return;
 80040fc:	bf00      	nop
}
 80040fe:	3714      	adds	r7, #20
 8004100:	46bd      	mov	sp, r7
 8004102:	bd90      	pop	{r4, r7, pc}
 8004104:	42020400 	.word	0x42020400
 8004108:	20000414 	.word	0x20000414

0800410c <ST7789_DrawChar>:
        if (e2 < dy) { err += dx; y0 += sy; }
    }
}

// Corrected ST7789_DrawChar in st7789.c
void ST7789_DrawChar(int16_t x, int16_t y, char ch, const sFONT *font, uint16_t color, uint16_t background_color) {
 800410c:	b590      	push	{r4, r7, lr}
 800410e:	b08f      	sub	sp, #60	@ 0x3c
 8004110:	af02      	add	r7, sp, #8
 8004112:	607b      	str	r3, [r7, #4]
 8004114:	4603      	mov	r3, r0
 8004116:	81fb      	strh	r3, [r7, #14]
 8004118:	460b      	mov	r3, r1
 800411a:	81bb      	strh	r3, [r7, #12]
 800411c:	4613      	mov	r3, r2
 800411e:	72fb      	strb	r3, [r7, #11]

    // Calculate bytes per character
    uint16_t bytes_per_row = (font->Width + 7) / 8;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	889b      	ldrh	r3, [r3, #4]
 8004124:	3307      	adds	r3, #7
 8004126:	2b00      	cmp	r3, #0
 8004128:	da00      	bge.n	800412c <ST7789_DrawChar+0x20>
 800412a:	3307      	adds	r3, #7
 800412c:	10db      	asrs	r3, r3, #3
 800412e:	847b      	strh	r3, [r7, #34]	@ 0x22
    uint16_t bytes_per_char = bytes_per_row * font->Height;
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	88db      	ldrh	r3, [r3, #6]
 8004134:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8004136:	fb12 f303 	smulbb	r3, r2, r3
 800413a:	843b      	strh	r3, [r7, #32]

    // Check if ch is within the font's supported range
    if (ch < FONT_START_ASCII || ch > FONT_END_ASCII) {
 800413c:	7afb      	ldrb	r3, [r7, #11]
 800413e:	2b1f      	cmp	r3, #31
 8004140:	d902      	bls.n	8004148 <ST7789_DrawChar+0x3c>
 8004142:	7afb      	ldrb	r3, [r7, #11]
 8004144:	2b7e      	cmp	r3, #126	@ 0x7e
 8004146:	d910      	bls.n	800416a <ST7789_DrawChar+0x5e>
        // You can choose to draw a blank space for unsupported characters
        // Or draw a specific placeholder character like '?'
        // For now, let's just draw a blank rectangle (using background_color)
        ST7789_FillRectangle(x, y, font->Width, font->Height, background_color);
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	889b      	ldrh	r3, [r3, #4]
 800414c:	b21a      	sxth	r2, r3
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	88db      	ldrh	r3, [r3, #6]
 8004152:	b21c      	sxth	r4, r3
 8004154:	f9b7 100c 	ldrsh.w	r1, [r7, #12]
 8004158:	f9b7 000e 	ldrsh.w	r0, [r7, #14]
 800415c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8004160:	9300      	str	r3, [sp, #0]
 8004162:	4623      	mov	r3, r4
 8004164:	f7ff ff5c 	bl	8004020 <ST7789_FillRectangle>
        return;
 8004168:	e07b      	b.n	8004262 <ST7789_DrawChar+0x156>
    }

    uint16_t char_index = ch - FONT_START_ASCII;
 800416a:	7afb      	ldrb	r3, [r7, #11]
 800416c:	b29b      	uxth	r3, r3
 800416e:	3b20      	subs	r3, #32
 8004170:	83fb      	strh	r3, [r7, #30]

    // Get a pointer to the start of the character's data
    const uint8_t *char_data = font->table + (char_index * bytes_per_char);
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	8bfa      	ldrh	r2, [r7, #30]
 8004178:	8c39      	ldrh	r1, [r7, #32]
 800417a:	fb01 f202 	mul.w	r2, r1, r2
 800417e:	4413      	add	r3, r2
 8004180:	61bb      	str	r3, [r7, #24]

    // Draw the character
    for (int y_px = 0; y_px < font->Height; y_px++) {
 8004182:	2300      	movs	r3, #0
 8004184:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004186:	e066      	b.n	8004256 <ST7789_DrawChar+0x14a>
		for (int x_byte = 0; x_byte < bytes_per_row; x_byte++) {
 8004188:	2300      	movs	r3, #0
 800418a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800418c:	e05c      	b.n	8004248 <ST7789_DrawChar+0x13c>
			// Get the byte of data for the current row and 8-pixel segment
			uint8_t byte_data = char_data[y_px * bytes_per_row + x_byte];
 800418e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8004190:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004192:	fb03 f202 	mul.w	r2, r3, r2
 8004196:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004198:	4413      	add	r3, r2
 800419a:	461a      	mov	r2, r3
 800419c:	69bb      	ldr	r3, [r7, #24]
 800419e:	4413      	add	r3, r2
 80041a0:	781b      	ldrb	r3, [r3, #0]
 80041a2:	75fb      	strb	r3, [r7, #23]

			// Iterate through the 8 bits of the current byte
			for (int x_bit = 0; x_bit < 8; x_bit++) {
 80041a4:	2300      	movs	r3, #0
 80041a6:	627b      	str	r3, [r7, #36]	@ 0x24
 80041a8:	e048      	b.n	800423c <ST7789_DrawChar+0x130>
				// Calculate the absolute X coordinate on the display for the current pixel
				// x: starting X for the character
				// (x_byte * 8): offset for the current 8-bit segment
				// x_bit: offset for the current pixel within the 8-bit segment (0 for leftmost, 7 for rightmost)
				int16_t current_x = x + (x_byte * 8) + x_bit;
 80041aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041ac:	b29b      	uxth	r3, r3
 80041ae:	00db      	lsls	r3, r3, #3
 80041b0:	b29a      	uxth	r2, r3
 80041b2:	89fb      	ldrh	r3, [r7, #14]
 80041b4:	4413      	add	r3, r2
 80041b6:	b29a      	uxth	r2, r3
 80041b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041ba:	b29b      	uxth	r3, r3
 80041bc:	4413      	add	r3, r2
 80041be:	b29b      	uxth	r3, r3
 80041c0:	82bb      	strh	r3, [r7, #20]

				// Calculate the relative X coordinate within the character's full bitmap
				// This is used for boundary checking against font->Width
				int16_t char_pixel_offset_x = (x_byte * 8) + x_bit;
 80041c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041c4:	b29b      	uxth	r3, r3
 80041c6:	00db      	lsls	r3, r3, #3
 80041c8:	b29a      	uxth	r2, r3
 80041ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041cc:	b29b      	uxth	r3, r3
 80041ce:	4413      	add	r3, r2
 80041d0:	b29b      	uxth	r3, r3
 80041d2:	827b      	strh	r3, [r7, #18]

				// Only draw if this pixel is within the defined width of the character
				if (char_pixel_offset_x < font->Width) {
 80041d4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80041d8:	687a      	ldr	r2, [r7, #4]
 80041da:	8892      	ldrh	r2, [r2, #4]
 80041dc:	4293      	cmp	r3, r2
 80041de:	da2a      	bge.n	8004236 <ST7789_DrawChar+0x12a>
					// Example:
					// x_bit=0 (leftmost pixel) -> (byte_data >> 7) & 0x01 (reads MSB)
					// x_bit=1                  -> (byte_data >> 6) & 0x01
					// ...
					// x_bit=7 (rightmost pixel) -> (byte_data >> 0) & 0x01 (reads LSB)
					if ((byte_data >> (7 - x_bit)) & 0x01) { // This is the common MSB-first extraction
 80041e0:	7dfa      	ldrb	r2, [r7, #23]
 80041e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041e4:	f1c3 0307 	rsb	r3, r3, #7
 80041e8:	fa42 f303 	asr.w	r3, r2, r3
 80041ec:	f003 0301 	and.w	r3, r3, #1
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d00d      	beq.n	8004210 <ST7789_DrawChar+0x104>
						ST7789_DrawPixel(current_x, y + y_px, color);
 80041f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80041f6:	b29a      	uxth	r2, r3
 80041f8:	89bb      	ldrh	r3, [r7, #12]
 80041fa:	4413      	add	r3, r2
 80041fc:	b29b      	uxth	r3, r3
 80041fe:	b219      	sxth	r1, r3
 8004200:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 8004204:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8004208:	4618      	mov	r0, r3
 800420a:	f7ff fed1 	bl	8003fb0 <ST7789_DrawPixel>
 800420e:	e012      	b.n	8004236 <ST7789_DrawChar+0x12a>
					} else {
						if (background_color != color) {
 8004210:	f8b7 2044 	ldrh.w	r2, [r7, #68]	@ 0x44
 8004214:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8004218:	429a      	cmp	r2, r3
 800421a:	d00c      	beq.n	8004236 <ST7789_DrawChar+0x12a>
							ST7789_DrawPixel(current_x, y + y_px, background_color);
 800421c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800421e:	b29a      	uxth	r2, r3
 8004220:	89bb      	ldrh	r3, [r7, #12]
 8004222:	4413      	add	r3, r2
 8004224:	b29b      	uxth	r3, r3
 8004226:	b219      	sxth	r1, r3
 8004228:	f8b7 2044 	ldrh.w	r2, [r7, #68]	@ 0x44
 800422c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8004230:	4618      	mov	r0, r3
 8004232:	f7ff febd 	bl	8003fb0 <ST7789_DrawPixel>
			for (int x_bit = 0; x_bit < 8; x_bit++) {
 8004236:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004238:	3301      	adds	r3, #1
 800423a:	627b      	str	r3, [r7, #36]	@ 0x24
 800423c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800423e:	2b07      	cmp	r3, #7
 8004240:	ddb3      	ble.n	80041aa <ST7789_DrawChar+0x9e>
		for (int x_byte = 0; x_byte < bytes_per_row; x_byte++) {
 8004242:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004244:	3301      	adds	r3, #1
 8004246:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004248:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800424a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800424c:	429a      	cmp	r2, r3
 800424e:	db9e      	blt.n	800418e <ST7789_DrawChar+0x82>
    for (int y_px = 0; y_px < font->Height; y_px++) {
 8004250:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004252:	3301      	adds	r3, #1
 8004254:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	88db      	ldrh	r3, [r3, #6]
 800425a:	461a      	mov	r2, r3
 800425c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800425e:	4293      	cmp	r3, r2
 8004260:	db92      	blt.n	8004188 <ST7789_DrawChar+0x7c>
					}
				}
			}
		}
	}
}
 8004262:	3734      	adds	r7, #52	@ 0x34
 8004264:	46bd      	mov	sp, r7
 8004266:	bd90      	pop	{r4, r7, pc}

08004268 <ST7789_WriteString>:
        // Move to the next character in the string
        str++;
    }
}

void ST7789_WriteString(int16_t x, int16_t y, const char* str, const sFONT *font, uint16_t color, uint16_t bgcolor) {
 8004268:	b580      	push	{r7, lr}
 800426a:	b086      	sub	sp, #24
 800426c:	af02      	add	r7, sp, #8
 800426e:	60ba      	str	r2, [r7, #8]
 8004270:	607b      	str	r3, [r7, #4]
 8004272:	4603      	mov	r3, r0
 8004274:	81fb      	strh	r3, [r7, #14]
 8004276:	460b      	mov	r3, r1
 8004278:	81bb      	strh	r3, [r7, #12]
    while (*str) {
 800427a:	e02b      	b.n	80042d4 <ST7789_WriteString+0x6c>
        if (x + font->Width >= ST7789_WIDTH) { // Wrap text if it exceeds screen width
 800427c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004280:	687a      	ldr	r2, [r7, #4]
 8004282:	8892      	ldrh	r2, [r2, #4]
 8004284:	4413      	add	r3, r2
 8004286:	2bef      	cmp	r3, #239	@ 0xef
 8004288:	dd0f      	ble.n	80042aa <ST7789_WriteString+0x42>
            x = 0;
 800428a:	2300      	movs	r3, #0
 800428c:	81fb      	strh	r3, [r7, #14]
            y += font->Height;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	88da      	ldrh	r2, [r3, #6]
 8004292:	89bb      	ldrh	r3, [r7, #12]
 8004294:	4413      	add	r3, r2
 8004296:	b29b      	uxth	r3, r3
 8004298:	81bb      	strh	r3, [r7, #12]
            if (y + font->Height >= ST7789_HEIGHT) break; // Don't draw if going off screen
 800429a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800429e:	687a      	ldr	r2, [r7, #4]
 80042a0:	88d2      	ldrh	r2, [r2, #6]
 80042a2:	4413      	add	r3, r2
 80042a4:	f5b3 7f8c 	cmp.w	r3, #280	@ 0x118
 80042a8:	da19      	bge.n	80042de <ST7789_WriteString+0x76>
        }
        ST7789_DrawChar(x, y, *str++, font, color, bgcolor);
 80042aa:	68bb      	ldr	r3, [r7, #8]
 80042ac:	1c5a      	adds	r2, r3, #1
 80042ae:	60ba      	str	r2, [r7, #8]
 80042b0:	781a      	ldrb	r2, [r3, #0]
 80042b2:	f9b7 100c 	ldrsh.w	r1, [r7, #12]
 80042b6:	f9b7 000e 	ldrsh.w	r0, [r7, #14]
 80042ba:	8bbb      	ldrh	r3, [r7, #28]
 80042bc:	9301      	str	r3, [sp, #4]
 80042be:	8b3b      	ldrh	r3, [r7, #24]
 80042c0:	9300      	str	r3, [sp, #0]
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	f7ff ff22 	bl	800410c <ST7789_DrawChar>
        x += font->Width;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	889a      	ldrh	r2, [r3, #4]
 80042cc:	89fb      	ldrh	r3, [r7, #14]
 80042ce:	4413      	add	r3, r2
 80042d0:	b29b      	uxth	r3, r3
 80042d2:	81fb      	strh	r3, [r7, #14]
    while (*str) {
 80042d4:	68bb      	ldr	r3, [r7, #8]
 80042d6:	781b      	ldrb	r3, [r3, #0]
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d1cf      	bne.n	800427c <ST7789_WriteString+0x14>
    }
}
 80042dc:	e000      	b.n	80042e0 <ST7789_WriteString+0x78>
            if (y + font->Height >= ST7789_HEIGHT) break; // Don't draw if going off screen
 80042de:	bf00      	nop
}
 80042e0:	bf00      	nop
 80042e2:	3710      	adds	r7, #16
 80042e4:	46bd      	mov	sp, r7
 80042e6:	bd80      	pop	{r7, pc}

080042e8 <ST7789_SetRotation>:

void ST7789_SetRotation(uint8_t m) {
 80042e8:	b580      	push	{r7, lr}
 80042ea:	b084      	sub	sp, #16
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	4603      	mov	r3, r0
 80042f0:	71fb      	strb	r3, [r7, #7]
    uint8_t madctl_reg;
    switch (m) {
 80042f2:	79fb      	ldrb	r3, [r7, #7]
 80042f4:	2b03      	cmp	r3, #3
 80042f6:	d817      	bhi.n	8004328 <ST7789_SetRotation+0x40>
 80042f8:	a201      	add	r2, pc, #4	@ (adr r2, 8004300 <ST7789_SetRotation+0x18>)
 80042fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042fe:	bf00      	nop
 8004300:	08004311 	.word	0x08004311
 8004304:	08004317 	.word	0x08004317
 8004308:	0800431d 	.word	0x0800431d
 800430c:	08004323 	.word	0x08004323
        case 0: // Portrait (0 degrees)
            madctl_reg = 0x00; // MY=0, MX=0, MV=0, ML=0, RGB=0
 8004310:	2300      	movs	r3, #0
 8004312:	73fb      	strb	r3, [r7, #15]
            break;
 8004314:	e00b      	b.n	800432e <ST7789_SetRotation+0x46>
        case 1: // Landscape (90 degrees)
            madctl_reg = 0x60; // MY=0, MX=1, MV=1, ML=0, RGB=0
 8004316:	2360      	movs	r3, #96	@ 0x60
 8004318:	73fb      	strb	r3, [r7, #15]
            break;
 800431a:	e008      	b.n	800432e <ST7789_SetRotation+0x46>
        case 2: // Portrait (180 degrees)
            madctl_reg = 0xC0; // MY=1, MX=1, MV=0, ML=0, RGB=0
 800431c:	23c0      	movs	r3, #192	@ 0xc0
 800431e:	73fb      	strb	r3, [r7, #15]
            break;
 8004320:	e005      	b.n	800432e <ST7789_SetRotation+0x46>
        case 3: // Landscape (270 degrees)
            madctl_reg = 0xA0; // MY=1, MX=0, MV=1, ML=0, RGB=0
 8004322:	23a0      	movs	r3, #160	@ 0xa0
 8004324:	73fb      	strb	r3, [r7, #15]
            break;
 8004326:	e002      	b.n	800432e <ST7789_SetRotation+0x46>
        default: // Default to 0 degrees
            madctl_reg = 0x00;
 8004328:	2300      	movs	r3, #0
 800432a:	73fb      	strb	r3, [r7, #15]
            break;
 800432c:	bf00      	nop
    }
    // Consider BGR if your colors are inverted
    // madctl_reg |= 0x08; // Set BGR bit if needed (0x08 for BGR, 0x00 for RGB)

    ST7789_WriteCommand(ST7789_MADCTL);
 800432e:	2036      	movs	r0, #54	@ 0x36
 8004330:	f7ff fd32 	bl	8003d98 <ST7789_WriteCommand>
    ST7789_WriteData(&madctl_reg, 1);
 8004334:	f107 030f 	add.w	r3, r7, #15
 8004338:	2101      	movs	r1, #1
 800433a:	4618      	mov	r0, r3
 800433c:	f7ff fd4a 	bl	8003dd4 <ST7789_WriteData>
}
 8004340:	bf00      	nop
 8004342:	3710      	adds	r7, #16
 8004344:	46bd      	mov	sp, r7
 8004346:	bd80      	pop	{r7, pc}

08004348 <ST7789_SetBacklight>:

void ST7789_DisplayOff(void) {
    ST7789_WriteCommand(ST7789_DISPOFF);
}

void ST7789_SetBacklight(uint8_t state) {
 8004348:	b580      	push	{r7, lr}
 800434a:	b082      	sub	sp, #8
 800434c:	af00      	add	r7, sp, #0
 800434e:	4603      	mov	r3, r0
 8004350:	71fb      	strb	r3, [r7, #7]
    if (state) {
 8004352:	79fb      	ldrb	r3, [r7, #7]
 8004354:	2b00      	cmp	r3, #0
 8004356:	d005      	beq.n	8004364 <ST7789_SetBacklight+0x1c>
        HAL_GPIO_WritePin(ST7789_BL_GPIO_Port, ST7789_BL_Pin, GPIO_PIN_SET);
 8004358:	2201      	movs	r2, #1
 800435a:	2102      	movs	r1, #2
 800435c:	4806      	ldr	r0, [pc, #24]	@ (8004378 <ST7789_SetBacklight+0x30>)
 800435e:	f001 f8fb 	bl	8005558 <HAL_GPIO_WritePin>
    } else {
        HAL_GPIO_WritePin(ST7789_BL_GPIO_Port, ST7789_BL_Pin, GPIO_PIN_RESET);
    }
}
 8004362:	e004      	b.n	800436e <ST7789_SetBacklight+0x26>
        HAL_GPIO_WritePin(ST7789_BL_GPIO_Port, ST7789_BL_Pin, GPIO_PIN_RESET);
 8004364:	2200      	movs	r2, #0
 8004366:	2102      	movs	r1, #2
 8004368:	4803      	ldr	r0, [pc, #12]	@ (8004378 <ST7789_SetBacklight+0x30>)
 800436a:	f001 f8f5 	bl	8005558 <HAL_GPIO_WritePin>
}
 800436e:	bf00      	nop
 8004370:	3708      	adds	r7, #8
 8004372:	46bd      	mov	sp, r7
 8004374:	bd80      	pop	{r7, pc}
 8004376:	bf00      	nop
 8004378:	42020400 	.word	0x42020400

0800437c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800437c:	b580      	push	{r7, lr}
 800437e:	b082      	sub	sp, #8
 8004380:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8004382:	4b0c      	ldr	r3, [pc, #48]	@ (80043b4 <HAL_MspInit+0x38>)
 8004384:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004388:	4a0a      	ldr	r2, [pc, #40]	@ (80043b4 <HAL_MspInit+0x38>)
 800438a:	f043 0304 	orr.w	r3, r3, #4
 800438e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8004392:	4b08      	ldr	r3, [pc, #32]	@ (80043b4 <HAL_MspInit+0x38>)
 8004394:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004398:	f003 0304 	and.w	r3, r3, #4
 800439c:	607b      	str	r3, [r7, #4]
 800439e:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddIO2();
 80043a0:	f002 fe64 	bl	800706c <HAL_PWREx_EnableVddIO2>

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 80043a4:	2004      	movs	r0, #4
 80043a6:	f000 fd9e 	bl	8004ee6 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80043aa:	bf00      	nop
 80043ac:	3708      	adds	r7, #8
 80043ae:	46bd      	mov	sp, r7
 80043b0:	bd80      	pop	{r7, pc}
 80043b2:	bf00      	nop
 80043b4:	46020c00 	.word	0x46020c00

080043b8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80043b8:	b580      	push	{r7, lr}
 80043ba:	b08e      	sub	sp, #56	@ 0x38
 80043bc:	af00      	add	r7, sp, #0
 80043be:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80043c0:	2300      	movs	r3, #0
 80043c2:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t              uwPrescalerValue = 0;
 80043c4:	2300      	movs	r3, #0
 80043c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM17 clock */
  __HAL_RCC_TIM17_CLK_ENABLE();
 80043c8:	4b2e      	ldr	r3, [pc, #184]	@ (8004484 <HAL_InitTick+0xcc>)
 80043ca:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80043ce:	4a2d      	ldr	r2, [pc, #180]	@ (8004484 <HAL_InitTick+0xcc>)
 80043d0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80043d4:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 80043d8:	4b2a      	ldr	r3, [pc, #168]	@ (8004484 <HAL_InitTick+0xcc>)
 80043da:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80043de:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80043e2:	60fb      	str	r3, [r7, #12]
 80043e4:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80043e6:	f107 0210 	add.w	r2, r7, #16
 80043ea:	f107 0314 	add.w	r3, r7, #20
 80043ee:	4611      	mov	r1, r2
 80043f0:	4618      	mov	r0, r3
 80043f2:	f004 f881 	bl	80084f8 <HAL_RCC_GetClockConfig>

  /* Compute TIM17 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 80043f6:	f004 f857 	bl	80084a8 <HAL_RCC_GetPCLK2Freq>
 80043fa:	6338      	str	r0, [r7, #48]	@ 0x30

  /* Compute the prescaler value to have TIM17 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80043fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043fe:	4a22      	ldr	r2, [pc, #136]	@ (8004488 <HAL_InitTick+0xd0>)
 8004400:	fba2 2303 	umull	r2, r3, r2, r3
 8004404:	0c9b      	lsrs	r3, r3, #18
 8004406:	3b01      	subs	r3, #1
 8004408:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Initialize TIM17 */
  htim17.Instance = TIM17;
 800440a:	4b20      	ldr	r3, [pc, #128]	@ (800448c <HAL_InitTick+0xd4>)
 800440c:	4a20      	ldr	r2, [pc, #128]	@ (8004490 <HAL_InitTick+0xd8>)
 800440e:	601a      	str	r2, [r3, #0]
   * Period = [(TIM17CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim17.Init.Period = (1000000U / 1000U) - 1U;
 8004410:	4b1e      	ldr	r3, [pc, #120]	@ (800448c <HAL_InitTick+0xd4>)
 8004412:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8004416:	60da      	str	r2, [r3, #12]
  htim17.Init.Prescaler = uwPrescalerValue;
 8004418:	4a1c      	ldr	r2, [pc, #112]	@ (800448c <HAL_InitTick+0xd4>)
 800441a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800441c:	6053      	str	r3, [r2, #4]
  htim17.Init.ClockDivision = 0;
 800441e:	4b1b      	ldr	r3, [pc, #108]	@ (800448c <HAL_InitTick+0xd4>)
 8004420:	2200      	movs	r2, #0
 8004422:	611a      	str	r2, [r3, #16]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004424:	4b19      	ldr	r3, [pc, #100]	@ (800448c <HAL_InitTick+0xd4>)
 8004426:	2200      	movs	r2, #0
 8004428:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim17);
 800442a:	4818      	ldr	r0, [pc, #96]	@ (800448c <HAL_InitTick+0xd4>)
 800442c:	f007 fc2e 	bl	800bc8c <HAL_TIM_Base_Init>
 8004430:	4603      	mov	r3, r0
 8004432:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  if (status == HAL_OK)
 8004436:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800443a:	2b00      	cmp	r3, #0
 800443c:	d118      	bne.n	8004470 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim17);
 800443e:	4813      	ldr	r0, [pc, #76]	@ (800448c <HAL_InitTick+0xd4>)
 8004440:	f007 fc7c 	bl	800bd3c <HAL_TIM_Base_Start_IT>
 8004444:	4603      	mov	r3, r0
 8004446:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    if (status == HAL_OK)
 800444a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800444e:	2b00      	cmp	r3, #0
 8004450:	d10e      	bne.n	8004470 <HAL_InitTick+0xb8>
    {
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	2b0f      	cmp	r3, #15
 8004456:	d808      	bhi.n	800446a <HAL_InitTick+0xb2>
      {
        /* Enable the TIM17 global Interrupt */
        HAL_NVIC_SetPriority(TIM17_IRQn, TickPriority, 0U);
 8004458:	2200      	movs	r2, #0
 800445a:	6879      	ldr	r1, [r7, #4]
 800445c:	2047      	movs	r0, #71	@ 0x47
 800445e:	f000 fd4d 	bl	8004efc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8004462:	4a0c      	ldr	r2, [pc, #48]	@ (8004494 <HAL_InitTick+0xdc>)
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	6013      	str	r3, [r2, #0]
 8004468:	e002      	b.n	8004470 <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 800446a:	2301      	movs	r3, #1
 800446c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
      }
    }
  }

  /* Enable the TIM17 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM17_IRQn);
 8004470:	2047      	movs	r0, #71	@ 0x47
 8004472:	f000 fd5d 	bl	8004f30 <HAL_NVIC_EnableIRQ>

 /* Return function status */
  return status;
 8004476:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
}
 800447a:	4618      	mov	r0, r3
 800447c:	3738      	adds	r7, #56	@ 0x38
 800447e:	46bd      	mov	sp, r7
 8004480:	bd80      	pop	{r7, pc}
 8004482:	bf00      	nop
 8004484:	46020c00 	.word	0x46020c00
 8004488:	431bde83 	.word	0x431bde83
 800448c:	20000418 	.word	0x20000418
 8004490:	40014800 	.word	0x40014800
 8004494:	2000002c 	.word	0x2000002c

08004498 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004498:	b480      	push	{r7}
 800449a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800449c:	bf00      	nop
 800449e:	e7fd      	b.n	800449c <NMI_Handler+0x4>

080044a0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80044a0:	b480      	push	{r7}
 80044a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80044a4:	bf00      	nop
 80044a6:	e7fd      	b.n	80044a4 <HardFault_Handler+0x4>

080044a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80044a8:	b480      	push	{r7}
 80044aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80044ac:	bf00      	nop
 80044ae:	e7fd      	b.n	80044ac <MemManage_Handler+0x4>

080044b0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80044b0:	b480      	push	{r7}
 80044b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80044b4:	bf00      	nop
 80044b6:	e7fd      	b.n	80044b4 <BusFault_Handler+0x4>

080044b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80044b8:	b480      	push	{r7}
 80044ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80044bc:	bf00      	nop
 80044be:	e7fd      	b.n	80044bc <UsageFault_Handler+0x4>

080044c0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80044c0:	b480      	push	{r7}
 80044c2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80044c4:	bf00      	nop
 80044c6:	46bd      	mov	sp, r7
 80044c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044cc:	4770      	bx	lr

080044ce <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80044ce:	b480      	push	{r7}
 80044d0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80044d2:	bf00      	nop
 80044d4:	46bd      	mov	sp, r7
 80044d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044da:	4770      	bx	lr

080044dc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80044dc:	b480      	push	{r7}
 80044de:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80044e0:	bf00      	nop
 80044e2:	46bd      	mov	sp, r7
 80044e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e8:	4770      	bx	lr

080044ea <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80044ea:	b480      	push	{r7}
 80044ec:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80044ee:	bf00      	nop
 80044f0:	46bd      	mov	sp, r7
 80044f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f6:	4770      	bx	lr

080044f8 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI Line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 80044f8:	b580      	push	{r7, lr}
 80044fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INT_Pin);
 80044fc:	2002      	movs	r0, #2
 80044fe:	f001 f843 	bl	8005588 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8004502:	bf00      	nop
 8004504:	bd80      	pop	{r7, pc}

08004506 <EXTI13_IRQHandler>:

/**
  * @brief This function handles EXTI Line13 interrupt.
  */
void EXTI13_IRQHandler(void)
{
 8004506:	b580      	push	{r7, lr}
 8004508:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI13_IRQn 0 */

  /* USER CODE END EXTI13_IRQn 0 */
  BSP_PB_IRQHandler(BUTTON_USER);
 800450a:	2000      	movs	r0, #0
 800450c:	f000 fac8 	bl	8004aa0 <BSP_PB_IRQHandler>
  /* USER CODE BEGIN EXTI13_IRQn 1 */

  /* USER CODE END EXTI13_IRQn 1 */
}
 8004510:	bf00      	nop
 8004512:	bd80      	pop	{r7, pc}

08004514 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 Event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8004514:	b580      	push	{r7, lr}
 8004516:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8004518:	4802      	ldr	r0, [pc, #8]	@ (8004524 <I2C1_EV_IRQHandler+0x10>)
 800451a:	f001 fb3b 	bl	8005b94 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800451e:	bf00      	nop
 8004520:	bd80      	pop	{r7, pc}
 8004522:	bf00      	nop
 8004524:	20000218 	.word	0x20000218

08004528 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 Error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8004528:	b580      	push	{r7, lr}
 800452a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 800452c:	4802      	ldr	r0, [pc, #8]	@ (8004538 <I2C1_ER_IRQHandler+0x10>)
 800452e:	f001 fb4b 	bl	8005bc8 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8004532:	bf00      	nop
 8004534:	bd80      	pop	{r7, pc}
 8004536:	bf00      	nop
 8004538:	20000218 	.word	0x20000218

0800453c <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 800453c:	b580      	push	{r7, lr}
 800453e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8004540:	4802      	ldr	r0, [pc, #8]	@ (800454c <SPI1_IRQHandler+0x10>)
 8004542:	f007 f859 	bl	800b5f8 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8004546:	bf00      	nop
 8004548:	bd80      	pop	{r7, pc}
 800454a:	bf00      	nop
 800454c:	20000384 	.word	0x20000384

08004550 <TIM17_IRQHandler>:

/**
  * @brief This function handles TIM17 global interrupt.
  */
void TIM17_IRQHandler(void)
{
 8004550:	b580      	push	{r7, lr}
 8004552:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM17_IRQn 0 */

  /* USER CODE END TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8004554:	4802      	ldr	r0, [pc, #8]	@ (8004560 <TIM17_IRQHandler+0x10>)
 8004556:	f007 fc91 	bl	800be7c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM17_IRQn 1 */

  /* USER CODE END TIM17_IRQn 1 */
}
 800455a:	bf00      	nop
 800455c:	bd80      	pop	{r7, pc}
 800455e:	bf00      	nop
 8004560:	20000418 	.word	0x20000418

08004564 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004564:	b480      	push	{r7}
 8004566:	af00      	add	r7, sp, #0
  return 1;
 8004568:	2301      	movs	r3, #1
}
 800456a:	4618      	mov	r0, r3
 800456c:	46bd      	mov	sp, r7
 800456e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004572:	4770      	bx	lr

08004574 <_kill>:

int _kill(int pid, int sig)
{
 8004574:	b580      	push	{r7, lr}
 8004576:	b082      	sub	sp, #8
 8004578:	af00      	add	r7, sp, #0
 800457a:	6078      	str	r0, [r7, #4]
 800457c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800457e:	f009 fc7f 	bl	800de80 <__errno>
 8004582:	4603      	mov	r3, r0
 8004584:	2216      	movs	r2, #22
 8004586:	601a      	str	r2, [r3, #0]
  return -1;
 8004588:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800458c:	4618      	mov	r0, r3
 800458e:	3708      	adds	r7, #8
 8004590:	46bd      	mov	sp, r7
 8004592:	bd80      	pop	{r7, pc}

08004594 <_exit>:

void _exit (int status)
{
 8004594:	b580      	push	{r7, lr}
 8004596:	b082      	sub	sp, #8
 8004598:	af00      	add	r7, sp, #0
 800459a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800459c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80045a0:	6878      	ldr	r0, [r7, #4]
 80045a2:	f7ff ffe7 	bl	8004574 <_kill>
  while (1) {}    /* Make sure we hang here */
 80045a6:	bf00      	nop
 80045a8:	e7fd      	b.n	80045a6 <_exit+0x12>

080045aa <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80045aa:	b580      	push	{r7, lr}
 80045ac:	b086      	sub	sp, #24
 80045ae:	af00      	add	r7, sp, #0
 80045b0:	60f8      	str	r0, [r7, #12]
 80045b2:	60b9      	str	r1, [r7, #8]
 80045b4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80045b6:	2300      	movs	r3, #0
 80045b8:	617b      	str	r3, [r7, #20]
 80045ba:	e00a      	b.n	80045d2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80045bc:	f3af 8000 	nop.w
 80045c0:	4601      	mov	r1, r0
 80045c2:	68bb      	ldr	r3, [r7, #8]
 80045c4:	1c5a      	adds	r2, r3, #1
 80045c6:	60ba      	str	r2, [r7, #8]
 80045c8:	b2ca      	uxtb	r2, r1
 80045ca:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80045cc:	697b      	ldr	r3, [r7, #20]
 80045ce:	3301      	adds	r3, #1
 80045d0:	617b      	str	r3, [r7, #20]
 80045d2:	697a      	ldr	r2, [r7, #20]
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	429a      	cmp	r2, r3
 80045d8:	dbf0      	blt.n	80045bc <_read+0x12>
  }

  return len;
 80045da:	687b      	ldr	r3, [r7, #4]
}
 80045dc:	4618      	mov	r0, r3
 80045de:	3718      	adds	r7, #24
 80045e0:	46bd      	mov	sp, r7
 80045e2:	bd80      	pop	{r7, pc}

080045e4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80045e4:	b580      	push	{r7, lr}
 80045e6:	b086      	sub	sp, #24
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	60f8      	str	r0, [r7, #12]
 80045ec:	60b9      	str	r1, [r7, #8]
 80045ee:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80045f0:	2300      	movs	r3, #0
 80045f2:	617b      	str	r3, [r7, #20]
 80045f4:	e009      	b.n	800460a <_write+0x26>
  {
    __io_putchar(*ptr++);
 80045f6:	68bb      	ldr	r3, [r7, #8]
 80045f8:	1c5a      	adds	r2, r3, #1
 80045fa:	60ba      	str	r2, [r7, #8]
 80045fc:	781b      	ldrb	r3, [r3, #0]
 80045fe:	4618      	mov	r0, r3
 8004600:	f000 fad4 	bl	8004bac <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004604:	697b      	ldr	r3, [r7, #20]
 8004606:	3301      	adds	r3, #1
 8004608:	617b      	str	r3, [r7, #20]
 800460a:	697a      	ldr	r2, [r7, #20]
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	429a      	cmp	r2, r3
 8004610:	dbf1      	blt.n	80045f6 <_write+0x12>
  }
  return len;
 8004612:	687b      	ldr	r3, [r7, #4]
}
 8004614:	4618      	mov	r0, r3
 8004616:	3718      	adds	r7, #24
 8004618:	46bd      	mov	sp, r7
 800461a:	bd80      	pop	{r7, pc}

0800461c <_close>:

int _close(int file)
{
 800461c:	b480      	push	{r7}
 800461e:	b083      	sub	sp, #12
 8004620:	af00      	add	r7, sp, #0
 8004622:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8004624:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8004628:	4618      	mov	r0, r3
 800462a:	370c      	adds	r7, #12
 800462c:	46bd      	mov	sp, r7
 800462e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004632:	4770      	bx	lr

08004634 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004634:	b480      	push	{r7}
 8004636:	b083      	sub	sp, #12
 8004638:	af00      	add	r7, sp, #0
 800463a:	6078      	str	r0, [r7, #4]
 800463c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800463e:	683b      	ldr	r3, [r7, #0]
 8004640:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8004644:	605a      	str	r2, [r3, #4]
  return 0;
 8004646:	2300      	movs	r3, #0
}
 8004648:	4618      	mov	r0, r3
 800464a:	370c      	adds	r7, #12
 800464c:	46bd      	mov	sp, r7
 800464e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004652:	4770      	bx	lr

08004654 <_isatty>:

int _isatty(int file)
{
 8004654:	b480      	push	{r7}
 8004656:	b083      	sub	sp, #12
 8004658:	af00      	add	r7, sp, #0
 800465a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800465c:	2301      	movs	r3, #1
}
 800465e:	4618      	mov	r0, r3
 8004660:	370c      	adds	r7, #12
 8004662:	46bd      	mov	sp, r7
 8004664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004668:	4770      	bx	lr

0800466a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800466a:	b480      	push	{r7}
 800466c:	b085      	sub	sp, #20
 800466e:	af00      	add	r7, sp, #0
 8004670:	60f8      	str	r0, [r7, #12]
 8004672:	60b9      	str	r1, [r7, #8]
 8004674:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8004676:	2300      	movs	r3, #0
}
 8004678:	4618      	mov	r0, r3
 800467a:	3714      	adds	r7, #20
 800467c:	46bd      	mov	sp, r7
 800467e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004682:	4770      	bx	lr

08004684 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004684:	b580      	push	{r7, lr}
 8004686:	b086      	sub	sp, #24
 8004688:	af00      	add	r7, sp, #0
 800468a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800468c:	4a14      	ldr	r2, [pc, #80]	@ (80046e0 <_sbrk+0x5c>)
 800468e:	4b15      	ldr	r3, [pc, #84]	@ (80046e4 <_sbrk+0x60>)
 8004690:	1ad3      	subs	r3, r2, r3
 8004692:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004694:	697b      	ldr	r3, [r7, #20]
 8004696:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004698:	4b13      	ldr	r3, [pc, #76]	@ (80046e8 <_sbrk+0x64>)
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	2b00      	cmp	r3, #0
 800469e:	d102      	bne.n	80046a6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80046a0:	4b11      	ldr	r3, [pc, #68]	@ (80046e8 <_sbrk+0x64>)
 80046a2:	4a12      	ldr	r2, [pc, #72]	@ (80046ec <_sbrk+0x68>)
 80046a4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80046a6:	4b10      	ldr	r3, [pc, #64]	@ (80046e8 <_sbrk+0x64>)
 80046a8:	681a      	ldr	r2, [r3, #0]
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	4413      	add	r3, r2
 80046ae:	693a      	ldr	r2, [r7, #16]
 80046b0:	429a      	cmp	r2, r3
 80046b2:	d207      	bcs.n	80046c4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80046b4:	f009 fbe4 	bl	800de80 <__errno>
 80046b8:	4603      	mov	r3, r0
 80046ba:	220c      	movs	r2, #12
 80046bc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80046be:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80046c2:	e009      	b.n	80046d8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80046c4:	4b08      	ldr	r3, [pc, #32]	@ (80046e8 <_sbrk+0x64>)
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80046ca:	4b07      	ldr	r3, [pc, #28]	@ (80046e8 <_sbrk+0x64>)
 80046cc:	681a      	ldr	r2, [r3, #0]
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	4413      	add	r3, r2
 80046d2:	4a05      	ldr	r2, [pc, #20]	@ (80046e8 <_sbrk+0x64>)
 80046d4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80046d6:	68fb      	ldr	r3, [r7, #12]
}
 80046d8:	4618      	mov	r0, r3
 80046da:	3718      	adds	r7, #24
 80046dc:	46bd      	mov	sp, r7
 80046de:	bd80      	pop	{r7, pc}
 80046e0:	200c0000 	.word	0x200c0000
 80046e4:	00000400 	.word	0x00000400
 80046e8:	20000464 	.word	0x20000464
 80046ec:	200006a8 	.word	0x200006a8

080046f0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80046f0:	b480      	push	{r7}
 80046f2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80046f4:	4b18      	ldr	r3, [pc, #96]	@ (8004758 <SystemInit+0x68>)
 80046f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80046fa:	4a17      	ldr	r2, [pc, #92]	@ (8004758 <SystemInit+0x68>)
 80046fc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004700:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR = RCC_CR_MSISON;
 8004704:	4b15      	ldr	r3, [pc, #84]	@ (800475c <SystemInit+0x6c>)
 8004706:	2201      	movs	r2, #1
 8004708:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 800470a:	4b14      	ldr	r3, [pc, #80]	@ (800475c <SystemInit+0x6c>)
 800470c:	2200      	movs	r2, #0
 800470e:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 8004710:	4b12      	ldr	r3, [pc, #72]	@ (800475c <SystemInit+0x6c>)
 8004712:	2200      	movs	r2, #0
 8004714:	621a      	str	r2, [r3, #32]
  RCC->CFGR3 = 0U;
 8004716:	4b11      	ldr	r3, [pc, #68]	@ (800475c <SystemInit+0x6c>)
 8004718:	2200      	movs	r2, #0
 800471a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Reset HSEON, CSSON , HSION, PLLxON bits */
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
 800471c:	4b0f      	ldr	r3, [pc, #60]	@ (800475c <SystemInit+0x6c>)
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	4a0e      	ldr	r2, [pc, #56]	@ (800475c <SystemInit+0x6c>)
 8004722:	f023 53a8 	bic.w	r3, r3, #352321536	@ 0x15000000
 8004726:	f423 2310 	bic.w	r3, r3, #589824	@ 0x90000
 800472a:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLL1CFGR = 0U;
 800472c:	4b0b      	ldr	r3, [pc, #44]	@ (800475c <SystemInit+0x6c>)
 800472e:	2200      	movs	r2, #0
 8004730:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 8004732:	4b0a      	ldr	r3, [pc, #40]	@ (800475c <SystemInit+0x6c>)
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	4a09      	ldr	r2, [pc, #36]	@ (800475c <SystemInit+0x6c>)
 8004738:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800473c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 800473e:	4b07      	ldr	r3, [pc, #28]	@ (800475c <SystemInit+0x6c>)
 8004740:	2200      	movs	r2, #0
 8004742:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8004744:	4b04      	ldr	r3, [pc, #16]	@ (8004758 <SystemInit+0x68>)
 8004746:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800474a:	609a      	str	r2, [r3, #8]
  #endif
}
 800474c:	bf00      	nop
 800474e:	46bd      	mov	sp, r7
 8004750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004754:	4770      	bx	lr
 8004756:	bf00      	nop
 8004758:	e000ed00 	.word	0xe000ed00
 800475c:	46020c00 	.word	0x46020c00

08004760 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8004760:	b580      	push	{r7, lr}
 8004762:	b088      	sub	sp, #32
 8004764:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004766:	f107 0310 	add.w	r3, r7, #16
 800476a:	2200      	movs	r2, #0
 800476c:	601a      	str	r2, [r3, #0]
 800476e:	605a      	str	r2, [r3, #4]
 8004770:	609a      	str	r2, [r3, #8]
 8004772:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004774:	1d3b      	adds	r3, r7, #4
 8004776:	2200      	movs	r2, #0
 8004778:	601a      	str	r2, [r3, #0]
 800477a:	605a      	str	r2, [r3, #4]
 800477c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800477e:	4b1e      	ldr	r3, [pc, #120]	@ (80047f8 <MX_TIM2_Init+0x98>)
 8004780:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8004784:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 159;
 8004786:	4b1c      	ldr	r3, [pc, #112]	@ (80047f8 <MX_TIM2_Init+0x98>)
 8004788:	229f      	movs	r2, #159	@ 0x9f
 800478a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800478c:	4b1a      	ldr	r3, [pc, #104]	@ (80047f8 <MX_TIM2_Init+0x98>)
 800478e:	2200      	movs	r2, #0
 8004790:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8004792:	4b19      	ldr	r3, [pc, #100]	@ (80047f8 <MX_TIM2_Init+0x98>)
 8004794:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004798:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800479a:	4b17      	ldr	r3, [pc, #92]	@ (80047f8 <MX_TIM2_Init+0x98>)
 800479c:	2200      	movs	r2, #0
 800479e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80047a0:	4b15      	ldr	r3, [pc, #84]	@ (80047f8 <MX_TIM2_Init+0x98>)
 80047a2:	2200      	movs	r2, #0
 80047a4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80047a6:	4814      	ldr	r0, [pc, #80]	@ (80047f8 <MX_TIM2_Init+0x98>)
 80047a8:	f007 fa70 	bl	800bc8c <HAL_TIM_Base_Init>
 80047ac:	4603      	mov	r3, r0
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d001      	beq.n	80047b6 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80047b2:	f7ff f9f1 	bl	8003b98 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80047b6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80047ba:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80047bc:	f107 0310 	add.w	r3, r7, #16
 80047c0:	4619      	mov	r1, r3
 80047c2:	480d      	ldr	r0, [pc, #52]	@ (80047f8 <MX_TIM2_Init+0x98>)
 80047c4:	f007 fcaa 	bl	800c11c <HAL_TIM_ConfigClockSource>
 80047c8:	4603      	mov	r3, r0
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d001      	beq.n	80047d2 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80047ce:	f7ff f9e3 	bl	8003b98 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80047d2:	2300      	movs	r3, #0
 80047d4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80047d6:	2300      	movs	r3, #0
 80047d8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80047da:	1d3b      	adds	r3, r7, #4
 80047dc:	4619      	mov	r1, r3
 80047de:	4806      	ldr	r0, [pc, #24]	@ (80047f8 <MX_TIM2_Init+0x98>)
 80047e0:	f007 ffc4 	bl	800c76c <HAL_TIMEx_MasterConfigSynchronization>
 80047e4:	4603      	mov	r3, r0
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d001      	beq.n	80047ee <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80047ea:	f7ff f9d5 	bl	8003b98 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80047ee:	bf00      	nop
 80047f0:	3720      	adds	r7, #32
 80047f2:	46bd      	mov	sp, r7
 80047f4:	bd80      	pop	{r7, pc}
 80047f6:	bf00      	nop
 80047f8:	20000468 	.word	0x20000468

080047fc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80047fc:	b480      	push	{r7}
 80047fe:	b085      	sub	sp, #20
 8004800:	af00      	add	r7, sp, #0
 8004802:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800480c:	d10e      	bne.n	800482c <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800480e:	4b0a      	ldr	r3, [pc, #40]	@ (8004838 <HAL_TIM_Base_MspInit+0x3c>)
 8004810:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004814:	4a08      	ldr	r2, [pc, #32]	@ (8004838 <HAL_TIM_Base_MspInit+0x3c>)
 8004816:	f043 0301 	orr.w	r3, r3, #1
 800481a:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 800481e:	4b06      	ldr	r3, [pc, #24]	@ (8004838 <HAL_TIM_Base_MspInit+0x3c>)
 8004820:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004824:	f003 0301 	and.w	r3, r3, #1
 8004828:	60fb      	str	r3, [r7, #12]
 800482a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 800482c:	bf00      	nop
 800482e:	3714      	adds	r7, #20
 8004830:	46bd      	mov	sp, r7
 8004832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004836:	4770      	bx	lr
 8004838:	46020c00 	.word	0x46020c00

0800483c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 800483c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8004874 <LoopForever+0x2>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8004840:	f7ff ff56 	bl	80046f0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8004844:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8004846:	e003      	b.n	8004850 <LoopCopyDataInit>

08004848 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8004848:	4b0b      	ldr	r3, [pc, #44]	@ (8004878 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800484a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 800484c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800484e:	3104      	adds	r1, #4

08004850 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8004850:	480a      	ldr	r0, [pc, #40]	@ (800487c <LoopForever+0xa>)
	ldr	r3, =_edata
 8004852:	4b0b      	ldr	r3, [pc, #44]	@ (8004880 <LoopForever+0xe>)
	adds	r2, r0, r1
 8004854:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8004856:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8004858:	d3f6      	bcc.n	8004848 <CopyDataInit>
	ldr	r2, =_sbss
 800485a:	4a0a      	ldr	r2, [pc, #40]	@ (8004884 <LoopForever+0x12>)
	b	LoopFillZerobss
 800485c:	e002      	b.n	8004864 <LoopFillZerobss>

0800485e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800485e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8004860:	f842 3b04 	str.w	r3, [r2], #4

08004864 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8004864:	4b08      	ldr	r3, [pc, #32]	@ (8004888 <LoopForever+0x16>)
	cmp	r2, r3
 8004866:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8004868:	d3f9      	bcc.n	800485e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800486a:	f009 fb0f 	bl	800de8c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800486e:	f7fe fef5 	bl	800365c <main>

08004872 <LoopForever>:

LoopForever:
    b LoopForever
 8004872:	e7fe      	b.n	8004872 <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8004874:	200c0000 	.word	0x200c0000
	ldr	r3, =_sidata
 8004878:	08011374 	.word	0x08011374
	ldr	r0, =_sdata
 800487c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8004880:	200001fc 	.word	0x200001fc
	ldr	r2, =_sbss
 8004884:	200001fc 	.word	0x200001fc
	ldr	r3, = _ebss
 8004888:	200006a8 	.word	0x200006a8

0800488c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800488c:	e7fe      	b.n	800488c <ADC1_IRQHandler>
	...

08004890 <BSP_LED_Init>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8004890:	b580      	push	{r7, lr}
 8004892:	b08e      	sub	sp, #56	@ 0x38
 8004894:	af00      	add	r7, sp, #0
 8004896:	4603      	mov	r3, r0
 8004898:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 800489a:	2300      	movs	r3, #0
 800489c:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitTypeDef  gpio_init_structure;
#if defined (USE_NUCLEO_144)
  uint32_t pwrenabled = 0U;
 800489e:	2300      	movs	r3, #0
 80048a0:	633b      	str	r3, [r7, #48]	@ 0x30
#endif /* USE_NUCLEO_144 */

  if ((Led != LED2)
 80048a2:	79fb      	ldrb	r3, [r7, #7]
 80048a4:	2b01      	cmp	r3, #1
 80048a6:	d009      	beq.n	80048bc <BSP_LED_Init+0x2c>
#if defined (USE_NUCLEO_144)
      && (Led != LED1) && (Led != LED3)
 80048a8:	79fb      	ldrb	r3, [r7, #7]
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d006      	beq.n	80048bc <BSP_LED_Init+0x2c>
 80048ae:	79fb      	ldrb	r3, [r7, #7]
 80048b0:	2b02      	cmp	r3, #2
 80048b2:	d003      	beq.n	80048bc <BSP_LED_Init+0x2c>
#endif /* defined (USE_NUCLEO_144) */
     )
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80048b4:	f06f 0301 	mvn.w	r3, #1
 80048b8:	637b      	str	r3, [r7, #52]	@ 0x34
 80048ba:	e06e      	b.n	800499a <BSP_LED_Init+0x10a>
  }
  else
  {
    /* Enable the GPIO LED Clock */
    if (Led == LED2)
 80048bc:	79fb      	ldrb	r3, [r7, #7]
 80048be:	2b01      	cmp	r3, #1
 80048c0:	d10f      	bne.n	80048e2 <BSP_LED_Init+0x52>
    {
      LED2_GPIO_CLK_ENABLE();
 80048c2:	4b38      	ldr	r3, [pc, #224]	@ (80049a4 <BSP_LED_Init+0x114>)
 80048c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80048c8:	4a36      	ldr	r2, [pc, #216]	@ (80049a4 <BSP_LED_Init+0x114>)
 80048ca:	f043 0302 	orr.w	r3, r3, #2
 80048ce:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80048d2:	4b34      	ldr	r3, [pc, #208]	@ (80049a4 <BSP_LED_Init+0x114>)
 80048d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80048d8:	f003 0302 	and.w	r3, r3, #2
 80048dc:	61bb      	str	r3, [r7, #24]
 80048de:	69bb      	ldr	r3, [r7, #24]
 80048e0:	e046      	b.n	8004970 <BSP_LED_Init+0xe0>
    }
#if defined (USE_NUCLEO_144)
    else if (Led == LED1)
 80048e2:	79fb      	ldrb	r3, [r7, #7]
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d10f      	bne.n	8004908 <BSP_LED_Init+0x78>
    {
      LED1_GPIO_CLK_ENABLE();
 80048e8:	4b2e      	ldr	r3, [pc, #184]	@ (80049a4 <BSP_LED_Init+0x114>)
 80048ea:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80048ee:	4a2d      	ldr	r2, [pc, #180]	@ (80049a4 <BSP_LED_Init+0x114>)
 80048f0:	f043 0304 	orr.w	r3, r3, #4
 80048f4:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80048f8:	4b2a      	ldr	r3, [pc, #168]	@ (80049a4 <BSP_LED_Init+0x114>)
 80048fa:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80048fe:	f003 0304 	and.w	r3, r3, #4
 8004902:	617b      	str	r3, [r7, #20]
 8004904:	697b      	ldr	r3, [r7, #20]
 8004906:	e033      	b.n	8004970 <BSP_LED_Init+0xe0>
    }
    else /* Led == Led3 */
    {
      /* Enable VddIO2 for Led3 */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004908:	4b26      	ldr	r3, [pc, #152]	@ (80049a4 <BSP_LED_Init+0x114>)
 800490a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800490e:	f003 0304 	and.w	r3, r3, #4
 8004912:	2b00      	cmp	r3, #0
 8004914:	d110      	bne.n	8004938 <BSP_LED_Init+0xa8>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8004916:	4b23      	ldr	r3, [pc, #140]	@ (80049a4 <BSP_LED_Init+0x114>)
 8004918:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800491c:	4a21      	ldr	r2, [pc, #132]	@ (80049a4 <BSP_LED_Init+0x114>)
 800491e:	f043 0304 	orr.w	r3, r3, #4
 8004922:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8004926:	4b1f      	ldr	r3, [pc, #124]	@ (80049a4 <BSP_LED_Init+0x114>)
 8004928:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800492c:	f003 0304 	and.w	r3, r3, #4
 8004930:	613b      	str	r3, [r7, #16]
 8004932:	693b      	ldr	r3, [r7, #16]
        pwrenabled = 1U;
 8004934:	2301      	movs	r3, #1
 8004936:	633b      	str	r3, [r7, #48]	@ 0x30
      }

      HAL_PWREx_EnableVddIO2();
 8004938:	f002 fb98 	bl	800706c <HAL_PWREx_EnableVddIO2>

      if (pwrenabled == 1U)
 800493c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800493e:	2b01      	cmp	r3, #1
 8004940:	d107      	bne.n	8004952 <BSP_LED_Init+0xc2>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8004942:	4b18      	ldr	r3, [pc, #96]	@ (80049a4 <BSP_LED_Init+0x114>)
 8004944:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004948:	4a16      	ldr	r2, [pc, #88]	@ (80049a4 <BSP_LED_Init+0x114>)
 800494a:	f023 0304 	bic.w	r3, r3, #4
 800494e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
      }

      LED3_GPIO_CLK_ENABLE();
 8004952:	4b14      	ldr	r3, [pc, #80]	@ (80049a4 <BSP_LED_Init+0x114>)
 8004954:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004958:	4a12      	ldr	r2, [pc, #72]	@ (80049a4 <BSP_LED_Init+0x114>)
 800495a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800495e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8004962:	4b10      	ldr	r3, [pc, #64]	@ (80049a4 <BSP_LED_Init+0x114>)
 8004964:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004968:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800496c:	60fb      	str	r3, [r7, #12]
 800496e:	68fb      	ldr	r3, [r7, #12]
    }
#endif /* defined (USE_NUCLEO_144) */
    /* Configure the GPIO_LED pin */
    gpio_init_structure.Pin   = LED_PIN[Led];
 8004970:	79fb      	ldrb	r3, [r7, #7]
 8004972:	4a0d      	ldr	r2, [pc, #52]	@ (80049a8 <BSP_LED_Init+0x118>)
 8004974:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004978:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 800497a:	2301      	movs	r3, #1
 800497c:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull  = GPIO_NOPULL;
 800497e:	2300      	movs	r3, #0
 8004980:	627b      	str	r3, [r7, #36]	@ 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004982:	2303      	movs	r3, #3
 8004984:	62bb      	str	r3, [r7, #40]	@ 0x28

    HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 8004986:	79fb      	ldrb	r3, [r7, #7]
 8004988:	4a08      	ldr	r2, [pc, #32]	@ (80049ac <BSP_LED_Init+0x11c>)
 800498a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800498e:	f107 021c 	add.w	r2, r7, #28
 8004992:	4611      	mov	r1, r2
 8004994:	4618      	mov	r0, r3
 8004996:	f000 fbff 	bl	8005198 <HAL_GPIO_Init>
  }

  return ret;
 800499a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800499c:	4618      	mov	r0, r3
 800499e:	3738      	adds	r7, #56	@ 0x38
 80049a0:	46bd      	mov	sp, r7
 80049a2:	bd80      	pop	{r7, pc}
 80049a4:	46020c00 	.word	0x46020c00
 80049a8:	08010f4c 	.word	0x08010f4c
 80049ac:	20000014 	.word	0x20000014

080049b0 <BSP_PB_Init>:
  *            @arg  BUTTON_MODE_GPIO: Button will be used as simple IO
  *            @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                    with interrupt generation capability
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 80049b0:	b580      	push	{r7, lr}
 80049b2:	b088      	sub	sp, #32
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	4603      	mov	r3, r0
 80049b8:	460a      	mov	r2, r1
 80049ba:	71fb      	strb	r3, [r7, #7]
 80049bc:	4613      	mov	r3, r2
 80049be:	71bb      	strb	r3, [r7, #6]
  static BSP_EXTI_LineCallback ButtonCallback[BUTTONn] = {BUTTON_USER_EXTI_Callback};
  static uint32_t  BSP_BUTTON_PRIO [BUTTONn] = {BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] = {BUTTON_USER_EXTI_LINE};

  /* Enable the BUTTON clock */
  BUTTON_USER_GPIO_CLK_ENABLE();
 80049c0:	4b30      	ldr	r3, [pc, #192]	@ (8004a84 <BSP_PB_Init+0xd4>)
 80049c2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80049c6:	4a2f      	ldr	r2, [pc, #188]	@ (8004a84 <BSP_PB_Init+0xd4>)
 80049c8:	f043 0304 	orr.w	r3, r3, #4
 80049cc:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80049d0:	4b2c      	ldr	r3, [pc, #176]	@ (8004a84 <BSP_PB_Init+0xd4>)
 80049d2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80049d6:	f003 0304 	and.w	r3, r3, #4
 80049da:	60bb      	str	r3, [r7, #8]
 80049dc:	68bb      	ldr	r3, [r7, #8]

  gpio_init_structure.Pin = BUTTON_PIN [Button];
 80049de:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80049e2:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Pull = GPIO_PULLDOWN;
 80049e4:	2302      	movs	r3, #2
 80049e6:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 80049e8:	2302      	movs	r3, #2
 80049ea:	61bb      	str	r3, [r7, #24]

  if (ButtonMode == BUTTON_MODE_GPIO)
 80049ec:	79bb      	ldrb	r3, [r7, #6]
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d10c      	bne.n	8004a0c <BSP_PB_Init+0x5c>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 80049f2:	2300      	movs	r3, #0
 80049f4:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT [Button], &gpio_init_structure);
 80049f6:	79fb      	ldrb	r3, [r7, #7]
 80049f8:	4a23      	ldr	r2, [pc, #140]	@ (8004a88 <BSP_PB_Init+0xd8>)
 80049fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80049fe:	f107 020c 	add.w	r2, r7, #12
 8004a02:	4611      	mov	r1, r2
 8004a04:	4618      	mov	r0, r3
 8004a06:	f000 fbc7 	bl	8005198 <HAL_GPIO_Init>
 8004a0a:	e036      	b.n	8004a7a <BSP_PB_Init+0xca>
  }
  else /* (ButtonMode == BUTTON_MODE_EXTI) */
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 8004a0c:	4b1f      	ldr	r3, [pc, #124]	@ (8004a8c <BSP_PB_Init+0xdc>)
 8004a0e:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8004a10:	79fb      	ldrb	r3, [r7, #7]
 8004a12:	4a1d      	ldr	r2, [pc, #116]	@ (8004a88 <BSP_PB_Init+0xd8>)
 8004a14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004a18:	f107 020c 	add.w	r2, r7, #12
 8004a1c:	4611      	mov	r1, r2
 8004a1e:	4618      	mov	r0, r3
 8004a20:	f000 fbba 	bl	8005198 <HAL_GPIO_Init>

    (void)HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]);
 8004a24:	79fa      	ldrb	r2, [r7, #7]
 8004a26:	4613      	mov	r3, r2
 8004a28:	005b      	lsls	r3, r3, #1
 8004a2a:	4413      	add	r3, r2
 8004a2c:	009b      	lsls	r3, r3, #2
 8004a2e:	4a18      	ldr	r2, [pc, #96]	@ (8004a90 <BSP_PB_Init+0xe0>)
 8004a30:	441a      	add	r2, r3
 8004a32:	79fb      	ldrb	r3, [r7, #7]
 8004a34:	4917      	ldr	r1, [pc, #92]	@ (8004a94 <BSP_PB_Init+0xe4>)
 8004a36:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004a3a:	4619      	mov	r1, r3
 8004a3c:	4610      	mov	r0, r2
 8004a3e:	f000 fb4f 	bl	80050e0 <HAL_EXTI_GetHandle>
    (void)HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]);
 8004a42:	79fa      	ldrb	r2, [r7, #7]
 8004a44:	4613      	mov	r3, r2
 8004a46:	005b      	lsls	r3, r3, #1
 8004a48:	4413      	add	r3, r2
 8004a4a:	009b      	lsls	r3, r3, #2
 8004a4c:	4a10      	ldr	r2, [pc, #64]	@ (8004a90 <BSP_PB_Init+0xe0>)
 8004a4e:	1898      	adds	r0, r3, r2
 8004a50:	79fb      	ldrb	r3, [r7, #7]
 8004a52:	4a11      	ldr	r2, [pc, #68]	@ (8004a98 <BSP_PB_Init+0xe8>)
 8004a54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004a58:	461a      	mov	r2, r3
 8004a5a:	2100      	movs	r1, #0
 8004a5c:	f000 fb14 	bl	8005088 <HAL_EXTI_RegisterCallback>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 8004a60:	2018      	movs	r0, #24
 8004a62:	79fb      	ldrb	r3, [r7, #7]
 8004a64:	4a0d      	ldr	r2, [pc, #52]	@ (8004a9c <BSP_PB_Init+0xec>)
 8004a66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004a6a:	2200      	movs	r2, #0
 8004a6c:	4619      	mov	r1, r3
 8004a6e:	f000 fa45 	bl	8004efc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 8004a72:	2318      	movs	r3, #24
 8004a74:	4618      	mov	r0, r3
 8004a76:	f000 fa5b 	bl	8004f30 <HAL_NVIC_EnableIRQ>
  }

  return BSP_ERROR_NONE;
 8004a7a:	2300      	movs	r3, #0
}
 8004a7c:	4618      	mov	r0, r3
 8004a7e:	3720      	adds	r7, #32
 8004a80:	46bd      	mov	sp, r7
 8004a82:	bd80      	pop	{r7, pc}
 8004a84:	46020c00 	.word	0x46020c00
 8004a88:	20000020 	.word	0x20000020
 8004a8c:	10110000 	.word	0x10110000
 8004a90:	200004b4 	.word	0x200004b4
 8004a94:	08010f54 	.word	0x08010f54
 8004a98:	20000024 	.word	0x20000024
 8004a9c:	20000028 	.word	0x20000028

08004aa0 <BSP_PB_IRQHandler>:
  * @brief  BSP Button IRQ handler
  * @param  Button Can only be BUTTON_USER
  * @retval None
  */
void BSP_PB_IRQHandler(Button_TypeDef Button)
{
 8004aa0:	b580      	push	{r7, lr}
 8004aa2:	b082      	sub	sp, #8
 8004aa4:	af00      	add	r7, sp, #0
 8004aa6:	4603      	mov	r3, r0
 8004aa8:	71fb      	strb	r3, [r7, #7]
  HAL_EXTI_IRQHandler(&hpb_exti[Button]);
 8004aaa:	79fa      	ldrb	r2, [r7, #7]
 8004aac:	4613      	mov	r3, r2
 8004aae:	005b      	lsls	r3, r3, #1
 8004ab0:	4413      	add	r3, r2
 8004ab2:	009b      	lsls	r3, r3, #2
 8004ab4:	4a04      	ldr	r2, [pc, #16]	@ (8004ac8 <BSP_PB_IRQHandler+0x28>)
 8004ab6:	4413      	add	r3, r2
 8004ab8:	4618      	mov	r0, r3
 8004aba:	f000 fb25 	bl	8005108 <HAL_EXTI_IRQHandler>
}
 8004abe:	bf00      	nop
 8004ac0:	3708      	adds	r7, #8
 8004ac2:	46bd      	mov	sp, r7
 8004ac4:	bd80      	pop	{r7, pc}
 8004ac6:	bf00      	nop
 8004ac8:	200004b4 	.word	0x200004b4

08004acc <BSP_PB_Callback>:
  * @brief  BSP Push Button callback
  * @param  Button Specifies the pin connected EXTI line
  * @retval None
  */
__weak void BSP_PB_Callback(Button_TypeDef Button)
{
 8004acc:	b480      	push	{r7}
 8004ace:	b083      	sub	sp, #12
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	4603      	mov	r3, r0
 8004ad4:	71fb      	strb	r3, [r7, #7]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Button);

  /* This function should be implemented by the user application.
     It is called into this driver when an event on Button is triggered. */
}
 8004ad6:	bf00      	nop
 8004ad8:	370c      	adds	r7, #12
 8004ada:	46bd      	mov	sp, r7
 8004adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae0:	4770      	bx	lr
	...

08004ae4 <BSP_COM_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval BSP error code
  */
int32_t BSP_COM_Init(COM_TypeDef COM, COM_InitTypeDef *COM_Init)
{
 8004ae4:	b580      	push	{r7, lr}
 8004ae6:	b084      	sub	sp, #16
 8004ae8:	af00      	add	r7, sp, #0
 8004aea:	4603      	mov	r3, r0
 8004aec:	6039      	str	r1, [r7, #0]
 8004aee:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8004af0:	2300      	movs	r3, #0
 8004af2:	60fb      	str	r3, [r7, #12]

  if (COM >= COMn)
 8004af4:	79fb      	ldrb	r3, [r7, #7]
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d003      	beq.n	8004b02 <BSP_COM_Init+0x1e>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8004afa:	f06f 0301 	mvn.w	r3, #1
 8004afe:	60fb      	str	r3, [r7, #12]
 8004b00:	e018      	b.n	8004b34 <BSP_COM_Init+0x50>
  }
  else
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0)
    /* Init the UART Msp */
    COM1_MspInit(&hcom_uart[COM]);
 8004b02:	79fb      	ldrb	r3, [r7, #7]
 8004b04:	2294      	movs	r2, #148	@ 0x94
 8004b06:	fb02 f303 	mul.w	r3, r2, r3
 8004b0a:	4a0d      	ldr	r2, [pc, #52]	@ (8004b40 <BSP_COM_Init+0x5c>)
 8004b0c:	4413      	add	r3, r2
 8004b0e:	4618      	mov	r0, r3
 8004b10:	f000 f870 	bl	8004bf4 <COM1_MspInit>
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS == 0) */

    if (MX_USART1_Init(&hcom_uart[COM], COM_Init) != HAL_OK)
 8004b14:	79fb      	ldrb	r3, [r7, #7]
 8004b16:	2294      	movs	r2, #148	@ 0x94
 8004b18:	fb02 f303 	mul.w	r3, r2, r3
 8004b1c:	4a08      	ldr	r2, [pc, #32]	@ (8004b40 <BSP_COM_Init+0x5c>)
 8004b1e:	4413      	add	r3, r2
 8004b20:	6839      	ldr	r1, [r7, #0]
 8004b22:	4618      	mov	r0, r3
 8004b24:	f000 f80e 	bl	8004b44 <MX_USART1_Init>
 8004b28:	4603      	mov	r3, r0
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d002      	beq.n	8004b34 <BSP_COM_Init+0x50>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8004b2e:	f06f 0303 	mvn.w	r3, #3
 8004b32:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8004b34:	68fb      	ldr	r3, [r7, #12]
}
 8004b36:	4618      	mov	r0, r3
 8004b38:	3710      	adds	r7, #16
 8004b3a:	46bd      	mov	sp, r7
 8004b3c:	bd80      	pop	{r7, pc}
 8004b3e:	bf00      	nop
 8004b40:	200004c0 	.word	0x200004c0

08004b44 <MX_USART1_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval HAL error code
  */
__weak HAL_StatusTypeDef MX_USART1_Init(UART_HandleTypeDef *huart, MX_UART_InitTypeDef *COM_Init)
{
 8004b44:	b580      	push	{r7, lr}
 8004b46:	b082      	sub	sp, #8
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	6078      	str	r0, [r7, #4]
 8004b4c:	6039      	str	r1, [r7, #0]
  /* USART configuration */
  huart->Instance                = COM_USART[COM1];
 8004b4e:	4b16      	ldr	r3, [pc, #88]	@ (8004ba8 <MX_USART1_Init+0x64>)
 8004b50:	681a      	ldr	r2, [r3, #0]
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	601a      	str	r2, [r3, #0]
  huart->Init.BaudRate           = COM_Init->BaudRate;
 8004b56:	683b      	ldr	r3, [r7, #0]
 8004b58:	681a      	ldr	r2, [r3, #0]
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	605a      	str	r2, [r3, #4]
  huart->Init.Mode               = UART_MODE_TX_RX;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	220c      	movs	r2, #12
 8004b62:	615a      	str	r2, [r3, #20]
  huart->Init.Parity             = (uint32_t)COM_Init->Parity;
 8004b64:	683b      	ldr	r3, [r7, #0]
 8004b66:	895b      	ldrh	r3, [r3, #10]
 8004b68:	461a      	mov	r2, r3
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	611a      	str	r2, [r3, #16]
  huart->Init.WordLength         = (uint32_t)COM_Init->WordLength;
 8004b6e:	683b      	ldr	r3, [r7, #0]
 8004b70:	685a      	ldr	r2, [r3, #4]
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	609a      	str	r2, [r3, #8]
  huart->Init.StopBits           = (uint32_t)COM_Init->StopBits;
 8004b76:	683b      	ldr	r3, [r7, #0]
 8004b78:	891b      	ldrh	r3, [r3, #8]
 8004b7a:	461a      	mov	r2, r3
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	60da      	str	r2, [r3, #12]
  huart->Init.HwFlowCtl          = (uint32_t)COM_Init->HwFlowCtl;
 8004b80:	683b      	ldr	r3, [r7, #0]
 8004b82:	899b      	ldrh	r3, [r3, #12]
 8004b84:	461a      	mov	r2, r3
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	619a      	str	r2, [r3, #24]
  huart->Init.OverSampling       = UART_OVERSAMPLING_8;
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8004b90:	61da      	str	r2, [r3, #28]
  huart->Init.ClockPrescaler     = UART_PRESCALER_DIV1;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	2200      	movs	r2, #0
 8004b96:	625a      	str	r2, [r3, #36]	@ 0x24
  return HAL_UART_Init(huart);
 8004b98:	6878      	ldr	r0, [r7, #4]
 8004b9a:	f007 feef 	bl	800c97c <HAL_UART_Init>
 8004b9e:	4603      	mov	r3, r0
}
 8004ba0:	4618      	mov	r0, r3
 8004ba2:	3708      	adds	r7, #8
 8004ba4:	46bd      	mov	sp, r7
 8004ba6:	bd80      	pop	{r7, pc}
 8004ba8:	20000010 	.word	0x20000010

08004bac <__io_putchar>:

/**
  * @brief  Redirect console output to COM
  */
PUTCHAR_PROTOTYPE
{
 8004bac:	b580      	push	{r7, lr}
 8004bae:	b082      	sub	sp, #8
 8004bb0:	af00      	add	r7, sp, #0
 8004bb2:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&hcom_uart [COM_ActiveLogPort], (uint8_t *) &ch, 1, COM_POLL_TIMEOUT);
 8004bb4:	4b09      	ldr	r3, [pc, #36]	@ (8004bdc <__io_putchar+0x30>)
 8004bb6:	781b      	ldrb	r3, [r3, #0]
 8004bb8:	461a      	mov	r2, r3
 8004bba:	2394      	movs	r3, #148	@ 0x94
 8004bbc:	fb02 f303 	mul.w	r3, r2, r3
 8004bc0:	4a07      	ldr	r2, [pc, #28]	@ (8004be0 <__io_putchar+0x34>)
 8004bc2:	1898      	adds	r0, r3, r2
 8004bc4:	1d39      	adds	r1, r7, #4
 8004bc6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004bca:	2201      	movs	r2, #1
 8004bcc:	f007 ff30 	bl	800ca30 <HAL_UART_Transmit>
  return ch;
 8004bd0:	687b      	ldr	r3, [r7, #4]
}
 8004bd2:	4618      	mov	r0, r3
 8004bd4:	3708      	adds	r7, #8
 8004bd6:	46bd      	mov	sp, r7
 8004bd8:	bd80      	pop	{r7, pc}
 8004bda:	bf00      	nop
 8004bdc:	20000554 	.word	0x20000554
 8004be0:	200004c0 	.word	0x200004c0

08004be4 <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  Key EXTI line detection callbacks.
  * @retval BSP status
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 8004be4:	b580      	push	{r7, lr}
 8004be6:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 8004be8:	2000      	movs	r0, #0
 8004bea:	f7ff ff6f 	bl	8004acc <BSP_PB_Callback>
}
 8004bee:	bf00      	nop
 8004bf0:	bd80      	pop	{r7, pc}
	...

08004bf4 <COM1_MspInit>:
  * @brief  Initializes UART MSP.
  * @param  huart UART handle
  * @retval BSP status
  */
static void COM1_MspInit(UART_HandleTypeDef *huart)
{
 8004bf4:	b580      	push	{r7, lr}
 8004bf6:	b08a      	sub	sp, #40	@ 0x28
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);

  /* Enable GPIO clock */
  COM1_TX_GPIO_CLK_ENABLE();
 8004bfc:	4b27      	ldr	r3, [pc, #156]	@ (8004c9c <COM1_MspInit+0xa8>)
 8004bfe:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004c02:	4a26      	ldr	r2, [pc, #152]	@ (8004c9c <COM1_MspInit+0xa8>)
 8004c04:	f043 0301 	orr.w	r3, r3, #1
 8004c08:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8004c0c:	4b23      	ldr	r3, [pc, #140]	@ (8004c9c <COM1_MspInit+0xa8>)
 8004c0e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004c12:	f003 0301 	and.w	r3, r3, #1
 8004c16:	613b      	str	r3, [r7, #16]
 8004c18:	693b      	ldr	r3, [r7, #16]
  COM1_RX_GPIO_CLK_ENABLE();
 8004c1a:	4b20      	ldr	r3, [pc, #128]	@ (8004c9c <COM1_MspInit+0xa8>)
 8004c1c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004c20:	4a1e      	ldr	r2, [pc, #120]	@ (8004c9c <COM1_MspInit+0xa8>)
 8004c22:	f043 0301 	orr.w	r3, r3, #1
 8004c26:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8004c2a:	4b1c      	ldr	r3, [pc, #112]	@ (8004c9c <COM1_MspInit+0xa8>)
 8004c2c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004c30:	f003 0301 	and.w	r3, r3, #1
 8004c34:	60fb      	str	r3, [r7, #12]
 8004c36:	68fb      	ldr	r3, [r7, #12]

  /* Enable USART clock */
  COM1_CLK_ENABLE();
 8004c38:	4b18      	ldr	r3, [pc, #96]	@ (8004c9c <COM1_MspInit+0xa8>)
 8004c3a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004c3e:	4a17      	ldr	r2, [pc, #92]	@ (8004c9c <COM1_MspInit+0xa8>)
 8004c40:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004c44:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8004c48:	4b14      	ldr	r3, [pc, #80]	@ (8004c9c <COM1_MspInit+0xa8>)
 8004c4a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004c4e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004c52:	60bb      	str	r3, [r7, #8]
 8004c54:	68bb      	ldr	r3, [r7, #8]

  /* Configure USART Tx as alternate function */
  gpio_init_structure.Pin       = COM1_TX_PIN;
 8004c56:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004c5a:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8004c5c:	2302      	movs	r3, #2
 8004c5e:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 8004c60:	2302      	movs	r3, #2
 8004c62:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8004c64:	2301      	movs	r3, #1
 8004c66:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Alternate = COM1_TX_AF;
 8004c68:	2307      	movs	r3, #7
 8004c6a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_TX_GPIO_PORT, &gpio_init_structure);
 8004c6c:	f107 0314 	add.w	r3, r7, #20
 8004c70:	4619      	mov	r1, r3
 8004c72:	480b      	ldr	r0, [pc, #44]	@ (8004ca0 <COM1_MspInit+0xac>)
 8004c74:	f000 fa90 	bl	8005198 <HAL_GPIO_Init>

  /* Configure USART Rx as alternate function */
  gpio_init_structure.Pin       = COM1_RX_PIN;
 8004c78:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004c7c:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8004c7e:	2302      	movs	r3, #2
 8004c80:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Alternate = COM1_RX_AF;
 8004c82:	2307      	movs	r3, #7
 8004c84:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_RX_GPIO_PORT, &gpio_init_structure);
 8004c86:	f107 0314 	add.w	r3, r7, #20
 8004c8a:	4619      	mov	r1, r3
 8004c8c:	4804      	ldr	r0, [pc, #16]	@ (8004ca0 <COM1_MspInit+0xac>)
 8004c8e:	f000 fa83 	bl	8005198 <HAL_GPIO_Init>
}
 8004c92:	bf00      	nop
 8004c94:	3728      	adds	r7, #40	@ 0x28
 8004c96:	46bd      	mov	sp, r7
 8004c98:	bd80      	pop	{r7, pc}
 8004c9a:	bf00      	nop
 8004c9c:	46020c00 	.word	0x46020c00
 8004ca0:	42020000 	.word	0x42020000

08004ca4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004ca4:	b580      	push	{r7, lr}
 8004ca6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004ca8:	4b12      	ldr	r3, [pc, #72]	@ (8004cf4 <HAL_Init+0x50>)
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	4a11      	ldr	r2, [pc, #68]	@ (8004cf4 <HAL_Init+0x50>)
 8004cae:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004cb2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004cb4:	2003      	movs	r0, #3
 8004cb6:	f000 f916 	bl	8004ee6 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8004cba:	f003 fac5 	bl	8008248 <HAL_RCC_GetSysClockFreq>
 8004cbe:	4602      	mov	r2, r0
 8004cc0:	4b0d      	ldr	r3, [pc, #52]	@ (8004cf8 <HAL_Init+0x54>)
 8004cc2:	6a1b      	ldr	r3, [r3, #32]
 8004cc4:	f003 030f 	and.w	r3, r3, #15
 8004cc8:	490c      	ldr	r1, [pc, #48]	@ (8004cfc <HAL_Init+0x58>)
 8004cca:	5ccb      	ldrb	r3, [r1, r3]
 8004ccc:	fa22 f303 	lsr.w	r3, r2, r3
 8004cd0:	4a0b      	ldr	r2, [pc, #44]	@ (8004d00 <HAL_Init+0x5c>)
 8004cd2:	6013      	str	r3, [r2, #0]

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8004cd4:	2004      	movs	r0, #4
 8004cd6:	f000 f939 	bl	8004f4c <HAL_SYSTICK_CLKSourceConfig>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004cda:	2007      	movs	r0, #7
 8004cdc:	f7ff fb6c 	bl	80043b8 <HAL_InitTick>
 8004ce0:	4603      	mov	r3, r0
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d001      	beq.n	8004cea <HAL_Init+0x46>
  {
    return HAL_ERROR;
 8004ce6:	2301      	movs	r3, #1
 8004ce8:	e002      	b.n	8004cf0 <HAL_Init+0x4c>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8004cea:	f7ff fb47 	bl	800437c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004cee:	2300      	movs	r3, #0
}
 8004cf0:	4618      	mov	r0, r3
 8004cf2:	bd80      	pop	{r7, pc}
 8004cf4:	40022000 	.word	0x40022000
 8004cf8:	46020c00 	.word	0x46020c00
 8004cfc:	08010ef4 	.word	0x08010ef4
 8004d00:	2000000c 	.word	0x2000000c

08004d04 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004d04:	b480      	push	{r7}
 8004d06:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8004d08:	4b06      	ldr	r3, [pc, #24]	@ (8004d24 <HAL_IncTick+0x20>)
 8004d0a:	781b      	ldrb	r3, [r3, #0]
 8004d0c:	461a      	mov	r2, r3
 8004d0e:	4b06      	ldr	r3, [pc, #24]	@ (8004d28 <HAL_IncTick+0x24>)
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	4413      	add	r3, r2
 8004d14:	4a04      	ldr	r2, [pc, #16]	@ (8004d28 <HAL_IncTick+0x24>)
 8004d16:	6013      	str	r3, [r2, #0]
}
 8004d18:	bf00      	nop
 8004d1a:	46bd      	mov	sp, r7
 8004d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d20:	4770      	bx	lr
 8004d22:	bf00      	nop
 8004d24:	20000030 	.word	0x20000030
 8004d28:	20000558 	.word	0x20000558

08004d2c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004d2c:	b480      	push	{r7}
 8004d2e:	af00      	add	r7, sp, #0
  return uwTick;
 8004d30:	4b03      	ldr	r3, [pc, #12]	@ (8004d40 <HAL_GetTick+0x14>)
 8004d32:	681b      	ldr	r3, [r3, #0]
}
 8004d34:	4618      	mov	r0, r3
 8004d36:	46bd      	mov	sp, r7
 8004d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d3c:	4770      	bx	lr
 8004d3e:	bf00      	nop
 8004d40:	20000558 	.word	0x20000558

08004d44 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004d44:	b580      	push	{r7, lr}
 8004d46:	b084      	sub	sp, #16
 8004d48:	af00      	add	r7, sp, #0
 8004d4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004d4c:	f7ff ffee 	bl	8004d2c <HAL_GetTick>
 8004d50:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004d5c:	d005      	beq.n	8004d6a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004d5e:	4b0a      	ldr	r3, [pc, #40]	@ (8004d88 <HAL_Delay+0x44>)
 8004d60:	781b      	ldrb	r3, [r3, #0]
 8004d62:	461a      	mov	r2, r3
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	4413      	add	r3, r2
 8004d68:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004d6a:	bf00      	nop
 8004d6c:	f7ff ffde 	bl	8004d2c <HAL_GetTick>
 8004d70:	4602      	mov	r2, r0
 8004d72:	68bb      	ldr	r3, [r7, #8]
 8004d74:	1ad3      	subs	r3, r2, r3
 8004d76:	68fa      	ldr	r2, [r7, #12]
 8004d78:	429a      	cmp	r2, r3
 8004d7a:	d8f7      	bhi.n	8004d6c <HAL_Delay+0x28>
  {
  }
}
 8004d7c:	bf00      	nop
 8004d7e:	bf00      	nop
 8004d80:	3710      	adds	r7, #16
 8004d82:	46bd      	mov	sp, r7
 8004d84:	bd80      	pop	{r7, pc}
 8004d86:	bf00      	nop
 8004d88:	20000030 	.word	0x20000030

08004d8c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004d8c:	b480      	push	{r7}
 8004d8e:	b085      	sub	sp, #20
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	f003 0307 	and.w	r3, r3, #7
 8004d9a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004d9c:	4b0c      	ldr	r3, [pc, #48]	@ (8004dd0 <__NVIC_SetPriorityGrouping+0x44>)
 8004d9e:	68db      	ldr	r3, [r3, #12]
 8004da0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004da2:	68ba      	ldr	r2, [r7, #8]
 8004da4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004da8:	4013      	ands	r3, r2
 8004daa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004db0:	68bb      	ldr	r3, [r7, #8]
 8004db2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004db4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004db8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004dbc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004dbe:	4a04      	ldr	r2, [pc, #16]	@ (8004dd0 <__NVIC_SetPriorityGrouping+0x44>)
 8004dc0:	68bb      	ldr	r3, [r7, #8]
 8004dc2:	60d3      	str	r3, [r2, #12]
}
 8004dc4:	bf00      	nop
 8004dc6:	3714      	adds	r7, #20
 8004dc8:	46bd      	mov	sp, r7
 8004dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dce:	4770      	bx	lr
 8004dd0:	e000ed00 	.word	0xe000ed00

08004dd4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004dd4:	b480      	push	{r7}
 8004dd6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004dd8:	4b04      	ldr	r3, [pc, #16]	@ (8004dec <__NVIC_GetPriorityGrouping+0x18>)
 8004dda:	68db      	ldr	r3, [r3, #12]
 8004ddc:	0a1b      	lsrs	r3, r3, #8
 8004dde:	f003 0307 	and.w	r3, r3, #7
}
 8004de2:	4618      	mov	r0, r3
 8004de4:	46bd      	mov	sp, r7
 8004de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dea:	4770      	bx	lr
 8004dec:	e000ed00 	.word	0xe000ed00

08004df0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004df0:	b480      	push	{r7}
 8004df2:	b083      	sub	sp, #12
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	4603      	mov	r3, r0
 8004df8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004dfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	db0b      	blt.n	8004e1a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004e02:	79fb      	ldrb	r3, [r7, #7]
 8004e04:	f003 021f 	and.w	r2, r3, #31
 8004e08:	4907      	ldr	r1, [pc, #28]	@ (8004e28 <__NVIC_EnableIRQ+0x38>)
 8004e0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e0e:	095b      	lsrs	r3, r3, #5
 8004e10:	2001      	movs	r0, #1
 8004e12:	fa00 f202 	lsl.w	r2, r0, r2
 8004e16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004e1a:	bf00      	nop
 8004e1c:	370c      	adds	r7, #12
 8004e1e:	46bd      	mov	sp, r7
 8004e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e24:	4770      	bx	lr
 8004e26:	bf00      	nop
 8004e28:	e000e100 	.word	0xe000e100

08004e2c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004e2c:	b480      	push	{r7}
 8004e2e:	b083      	sub	sp, #12
 8004e30:	af00      	add	r7, sp, #0
 8004e32:	4603      	mov	r3, r0
 8004e34:	6039      	str	r1, [r7, #0]
 8004e36:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004e38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	db0a      	blt.n	8004e56 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004e40:	683b      	ldr	r3, [r7, #0]
 8004e42:	b2da      	uxtb	r2, r3
 8004e44:	490c      	ldr	r1, [pc, #48]	@ (8004e78 <__NVIC_SetPriority+0x4c>)
 8004e46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e4a:	0112      	lsls	r2, r2, #4
 8004e4c:	b2d2      	uxtb	r2, r2
 8004e4e:	440b      	add	r3, r1
 8004e50:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004e54:	e00a      	b.n	8004e6c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004e56:	683b      	ldr	r3, [r7, #0]
 8004e58:	b2da      	uxtb	r2, r3
 8004e5a:	4908      	ldr	r1, [pc, #32]	@ (8004e7c <__NVIC_SetPriority+0x50>)
 8004e5c:	79fb      	ldrb	r3, [r7, #7]
 8004e5e:	f003 030f 	and.w	r3, r3, #15
 8004e62:	3b04      	subs	r3, #4
 8004e64:	0112      	lsls	r2, r2, #4
 8004e66:	b2d2      	uxtb	r2, r2
 8004e68:	440b      	add	r3, r1
 8004e6a:	761a      	strb	r2, [r3, #24]
}
 8004e6c:	bf00      	nop
 8004e6e:	370c      	adds	r7, #12
 8004e70:	46bd      	mov	sp, r7
 8004e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e76:	4770      	bx	lr
 8004e78:	e000e100 	.word	0xe000e100
 8004e7c:	e000ed00 	.word	0xe000ed00

08004e80 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004e80:	b480      	push	{r7}
 8004e82:	b089      	sub	sp, #36	@ 0x24
 8004e84:	af00      	add	r7, sp, #0
 8004e86:	60f8      	str	r0, [r7, #12]
 8004e88:	60b9      	str	r1, [r7, #8]
 8004e8a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	f003 0307 	and.w	r3, r3, #7
 8004e92:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004e94:	69fb      	ldr	r3, [r7, #28]
 8004e96:	f1c3 0307 	rsb	r3, r3, #7
 8004e9a:	2b04      	cmp	r3, #4
 8004e9c:	bf28      	it	cs
 8004e9e:	2304      	movcs	r3, #4
 8004ea0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004ea2:	69fb      	ldr	r3, [r7, #28]
 8004ea4:	3304      	adds	r3, #4
 8004ea6:	2b06      	cmp	r3, #6
 8004ea8:	d902      	bls.n	8004eb0 <NVIC_EncodePriority+0x30>
 8004eaa:	69fb      	ldr	r3, [r7, #28]
 8004eac:	3b03      	subs	r3, #3
 8004eae:	e000      	b.n	8004eb2 <NVIC_EncodePriority+0x32>
 8004eb0:	2300      	movs	r3, #0
 8004eb2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004eb4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004eb8:	69bb      	ldr	r3, [r7, #24]
 8004eba:	fa02 f303 	lsl.w	r3, r2, r3
 8004ebe:	43da      	mvns	r2, r3
 8004ec0:	68bb      	ldr	r3, [r7, #8]
 8004ec2:	401a      	ands	r2, r3
 8004ec4:	697b      	ldr	r3, [r7, #20]
 8004ec6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004ec8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8004ecc:	697b      	ldr	r3, [r7, #20]
 8004ece:	fa01 f303 	lsl.w	r3, r1, r3
 8004ed2:	43d9      	mvns	r1, r3
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004ed8:	4313      	orrs	r3, r2
         );
}
 8004eda:	4618      	mov	r0, r3
 8004edc:	3724      	adds	r7, #36	@ 0x24
 8004ede:	46bd      	mov	sp, r7
 8004ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee4:	4770      	bx	lr

08004ee6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004ee6:	b580      	push	{r7, lr}
 8004ee8:	b082      	sub	sp, #8
 8004eea:	af00      	add	r7, sp, #0
 8004eec:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004eee:	6878      	ldr	r0, [r7, #4]
 8004ef0:	f7ff ff4c 	bl	8004d8c <__NVIC_SetPriorityGrouping>
}
 8004ef4:	bf00      	nop
 8004ef6:	3708      	adds	r7, #8
 8004ef8:	46bd      	mov	sp, r7
 8004efa:	bd80      	pop	{r7, pc}

08004efc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004efc:	b580      	push	{r7, lr}
 8004efe:	b086      	sub	sp, #24
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	4603      	mov	r3, r0
 8004f04:	60b9      	str	r1, [r7, #8]
 8004f06:	607a      	str	r2, [r7, #4]
 8004f08:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004f0a:	f7ff ff63 	bl	8004dd4 <__NVIC_GetPriorityGrouping>
 8004f0e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004f10:	687a      	ldr	r2, [r7, #4]
 8004f12:	68b9      	ldr	r1, [r7, #8]
 8004f14:	6978      	ldr	r0, [r7, #20]
 8004f16:	f7ff ffb3 	bl	8004e80 <NVIC_EncodePriority>
 8004f1a:	4602      	mov	r2, r0
 8004f1c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004f20:	4611      	mov	r1, r2
 8004f22:	4618      	mov	r0, r3
 8004f24:	f7ff ff82 	bl	8004e2c <__NVIC_SetPriority>
}
 8004f28:	bf00      	nop
 8004f2a:	3718      	adds	r7, #24
 8004f2c:	46bd      	mov	sp, r7
 8004f2e:	bd80      	pop	{r7, pc}

08004f30 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32u5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004f30:	b580      	push	{r7, lr}
 8004f32:	b082      	sub	sp, #8
 8004f34:	af00      	add	r7, sp, #0
 8004f36:	4603      	mov	r3, r0
 8004f38:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004f3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f3e:	4618      	mov	r0, r3
 8004f40:	f7ff ff56 	bl	8004df0 <__NVIC_EnableIRQ>
}
 8004f44:	bf00      	nop
 8004f46:	3708      	adds	r7, #8
 8004f48:	46bd      	mov	sp, r7
 8004f4a:	bd80      	pop	{r7, pc}

08004f4c <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8004f4c:	b480      	push	{r7}
 8004f4e:	b083      	sub	sp, #12
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	2b04      	cmp	r3, #4
 8004f58:	d844      	bhi.n	8004fe4 <HAL_SYSTICK_CLKSourceConfig+0x98>
 8004f5a:	a201      	add	r2, pc, #4	@ (adr r2, 8004f60 <HAL_SYSTICK_CLKSourceConfig+0x14>)
 8004f5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f60:	08004f83 	.word	0x08004f83
 8004f64:	08004fa1 	.word	0x08004fa1
 8004f68:	08004fc3 	.word	0x08004fc3
 8004f6c:	08004fe5 	.word	0x08004fe5
 8004f70:	08004f75 	.word	0x08004f75
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8004f74:	4b1f      	ldr	r3, [pc, #124]	@ (8004ff4 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	4a1e      	ldr	r2, [pc, #120]	@ (8004ff4 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8004f7a:	f043 0304 	orr.w	r3, r3, #4
 8004f7e:	6013      	str	r3, [r2, #0]
      break;
 8004f80:	e031      	b.n	8004fe6 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8004f82:	4b1c      	ldr	r3, [pc, #112]	@ (8004ff4 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	4a1b      	ldr	r2, [pc, #108]	@ (8004ff4 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8004f88:	f023 0304 	bic.w	r3, r3, #4
 8004f8c:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, (0x00000000U));
 8004f8e:	4b1a      	ldr	r3, [pc, #104]	@ (8004ff8 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8004f90:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004f94:	4a18      	ldr	r2, [pc, #96]	@ (8004ff8 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8004f96:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8004f9a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 8004f9e:	e022      	b.n	8004fe6 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8004fa0:	4b14      	ldr	r3, [pc, #80]	@ (8004ff4 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	4a13      	ldr	r2, [pc, #76]	@ (8004ff4 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8004fa6:	f023 0304 	bic.w	r3, r3, #4
 8004faa:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_0);
 8004fac:	4b12      	ldr	r3, [pc, #72]	@ (8004ff8 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8004fae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004fb2:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8004fb6:	4a10      	ldr	r2, [pc, #64]	@ (8004ff8 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8004fb8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004fbc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 8004fc0:	e011      	b.n	8004fe6 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8004fc2:	4b0c      	ldr	r3, [pc, #48]	@ (8004ff4 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	4a0b      	ldr	r2, [pc, #44]	@ (8004ff4 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8004fc8:	f023 0304 	bic.w	r3, r3, #4
 8004fcc:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_1);
 8004fce:	4b0a      	ldr	r3, [pc, #40]	@ (8004ff8 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8004fd0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004fd4:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8004fd8:	4a07      	ldr	r2, [pc, #28]	@ (8004ff8 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8004fda:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004fde:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 8004fe2:	e000      	b.n	8004fe6 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 8004fe4:	bf00      	nop
  }
}
 8004fe6:	bf00      	nop
 8004fe8:	370c      	adds	r7, #12
 8004fea:	46bd      	mov	sp, r7
 8004fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff0:	4770      	bx	lr
 8004ff2:	bf00      	nop
 8004ff4:	e000e010 	.word	0xe000e010
 8004ff8:	46020c00 	.word	0x46020c00

08004ffc <HAL_DMA_Abort_IT>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *const hdma)
{
 8004ffc:	b480      	push	{r7}
 8004ffe:	b083      	sub	sp, #12
 8005000:	af00      	add	r7, sp, #0
 8005002:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	2b00      	cmp	r3, #0
 8005008:	d101      	bne.n	800500e <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800500a:	2301      	movs	r3, #1
 800500c:	e019      	b.n	8005042 <HAL_DMA_Abort_IT+0x46>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8005014:	b2db      	uxtb	r3, r3
 8005016:	2b02      	cmp	r3, #2
 8005018:	d004      	beq.n	8005024 <HAL_DMA_Abort_IT+0x28>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	2220      	movs	r2, #32
 800501e:	659a      	str	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8005020:	2301      	movs	r3, #1
 8005022:	e00e      	b.n	8005042 <HAL_DMA_Abort_IT+0x46>
  }
  else
  {
    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	2204      	movs	r2, #4
 8005028:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Suspend the channel and activate suspend interrupt */
    hdma->Instance->CCR |= (DMA_CCR_SUSP | DMA_CCR_SUSPIE);
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	695b      	ldr	r3, [r3, #20]
 8005032:	687a      	ldr	r2, [r7, #4]
 8005034:	6812      	ldr	r2, [r2, #0]
 8005036:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800503a:	f043 0304 	orr.w	r3, r3, #4
 800503e:	6153      	str	r3, [r2, #20]
  }

  return HAL_OK;
 8005040:	2300      	movs	r3, #0
}
 8005042:	4618      	mov	r0, r3
 8005044:	370c      	adds	r7, #12
 8005046:	46bd      	mov	sp, r7
 8005048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800504c:	4770      	bx	lr

0800504e <HAL_DMA_GetState>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval DMA state.
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef const *const hdma)
{
 800504e:	b480      	push	{r7}
 8005050:	b083      	sub	sp, #12
 8005052:	af00      	add	r7, sp, #0
 8005054:	6078      	str	r0, [r7, #4]
  /* Return the DMA channel state */
  return hdma->State;
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 800505c:	b2db      	uxtb	r3, r3
}
 800505e:	4618      	mov	r0, r3
 8005060:	370c      	adds	r7, #12
 8005062:	46bd      	mov	sp, r7
 8005064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005068:	4770      	bx	lr

0800506a <HAL_DMAEx_GetFifoLevel>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval Returns the number of available beats in FIFO.
  */
uint32_t HAL_DMAEx_GetFifoLevel(DMA_HandleTypeDef const *const hdma)
{
 800506a:	b480      	push	{r7}
 800506c:	b083      	sub	sp, #12
 800506e:	af00      	add	r7, sp, #0
 8005070:	6078      	str	r0, [r7, #4]
  return ((hdma->Instance->CSR & DMA_CSR_FIFOL) >> DMA_CSR_FIFOL_Pos);
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	691b      	ldr	r3, [r3, #16]
 8005078:	0c1b      	lsrs	r3, r3, #16
 800507a:	b2db      	uxtb	r3, r3
}
 800507c:	4618      	mov	r0, r3
 800507e:	370c      	adds	r7, #12
 8005080:	46bd      	mov	sp, r7
 8005082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005086:	4770      	bx	lr

08005088 <HAL_EXTI_RegisterCallback>:
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID,
                                            void (*pPendingCbfn)(void))
{
 8005088:	b480      	push	{r7}
 800508a:	b087      	sub	sp, #28
 800508c:	af00      	add	r7, sp, #0
 800508e:	60f8      	str	r0, [r7, #12]
 8005090:	460b      	mov	r3, r1
 8005092:	607a      	str	r2, [r7, #4]
 8005094:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8005096:	2300      	movs	r3, #0
 8005098:	75fb      	strb	r3, [r7, #23]

  switch (CallbackID)
 800509a:	7afb      	ldrb	r3, [r7, #11]
 800509c:	2b02      	cmp	r3, #2
 800509e:	d011      	beq.n	80050c4 <HAL_EXTI_RegisterCallback+0x3c>
 80050a0:	2b02      	cmp	r3, #2
 80050a2:	dc13      	bgt.n	80050cc <HAL_EXTI_RegisterCallback+0x44>
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d002      	beq.n	80050ae <HAL_EXTI_RegisterCallback+0x26>
 80050a8:	2b01      	cmp	r3, #1
 80050aa:	d007      	beq.n	80050bc <HAL_EXTI_RegisterCallback+0x34>
 80050ac:	e00e      	b.n	80050cc <HAL_EXTI_RegisterCallback+0x44>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->RisingCallback = pPendingCbfn;
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	687a      	ldr	r2, [r7, #4]
 80050b2:	605a      	str	r2, [r3, #4]
      hexti->FallingCallback = pPendingCbfn;
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	687a      	ldr	r2, [r7, #4]
 80050b8:	609a      	str	r2, [r3, #8]
      break;
 80050ba:	e00a      	b.n	80050d2 <HAL_EXTI_RegisterCallback+0x4a>

    case  HAL_EXTI_RISING_CB_ID:
      hexti->RisingCallback = pPendingCbfn;
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	687a      	ldr	r2, [r7, #4]
 80050c0:	605a      	str	r2, [r3, #4]
      break;
 80050c2:	e006      	b.n	80050d2 <HAL_EXTI_RegisterCallback+0x4a>

    case  HAL_EXTI_FALLING_CB_ID:
      hexti->FallingCallback = pPendingCbfn;
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	687a      	ldr	r2, [r7, #4]
 80050c8:	609a      	str	r2, [r3, #8]
      break;
 80050ca:	e002      	b.n	80050d2 <HAL_EXTI_RegisterCallback+0x4a>

    default:
      status = HAL_ERROR;
 80050cc:	2301      	movs	r3, #1
 80050ce:	75fb      	strb	r3, [r7, #23]
      break;
 80050d0:	bf00      	nop
  }

  return status;
 80050d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80050d4:	4618      	mov	r0, r3
 80050d6:	371c      	adds	r7, #28
 80050d8:	46bd      	mov	sp, r7
 80050da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050de:	4770      	bx	lr

080050e0 <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 80050e0:	b480      	push	{r7}
 80050e2:	b083      	sub	sp, #12
 80050e4:	af00      	add	r7, sp, #0
 80050e6:	6078      	str	r0, [r7, #4]
 80050e8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d101      	bne.n	80050f4 <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 80050f0:	2301      	movs	r3, #1
 80050f2:	e003      	b.n	80050fc <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	683a      	ldr	r2, [r7, #0]
 80050f8:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 80050fa:	2300      	movs	r3, #0
  }
}
 80050fc:	4618      	mov	r0, r3
 80050fe:	370c      	adds	r7, #12
 8005100:	46bd      	mov	sp, r7
 8005102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005106:	4770      	bx	lr

08005108 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(const EXTI_HandleTypeDef *hexti)
{
 8005108:	b580      	push	{r7, lr}
 800510a:	b086      	sub	sp, #24
 800510c:	af00      	add	r7, sp, #0
 800510e:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	0c1b      	lsrs	r3, r3, #16
 8005116:	f003 0301 	and.w	r3, r3, #1
 800511a:	617b      	str	r3, [r7, #20]
  maskline = (1UL << (hexti->Line & EXTI_PIN_MASK));
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	f003 031f 	and.w	r3, r3, #31
 8005124:	2201      	movs	r2, #1
 8005126:	fa02 f303 	lsl.w	r3, r2, r3
 800512a:	613b      	str	r3, [r7, #16]

  /* Get rising edge pending bit  */
  regaddr = (__IO uint32_t *)(&EXTI->RPR1 + (EXTI_CONFIG_OFFSET * offset));
 800512c:	697b      	ldr	r3, [r7, #20]
 800512e:	015a      	lsls	r2, r3, #5
 8005130:	4b17      	ldr	r3, [pc, #92]	@ (8005190 <HAL_EXTI_IRQHandler+0x88>)
 8005132:	4413      	add	r3, r2
 8005134:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	693a      	ldr	r2, [r7, #16]
 800513c:	4013      	ands	r3, r2
 800513e:	60bb      	str	r3, [r7, #8]

  if (regval != 0U)
 8005140:	68bb      	ldr	r3, [r7, #8]
 8005142:	2b00      	cmp	r3, #0
 8005144:	d009      	beq.n	800515a <HAL_EXTI_IRQHandler+0x52>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	693a      	ldr	r2, [r7, #16]
 800514a:	601a      	str	r2, [r3, #0]

    /* Call rising callback */
    if (hexti->RisingCallback != NULL)
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	685b      	ldr	r3, [r3, #4]
 8005150:	2b00      	cmp	r3, #0
 8005152:	d002      	beq.n	800515a <HAL_EXTI_IRQHandler+0x52>
    {
      hexti->RisingCallback();
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	685b      	ldr	r3, [r3, #4]
 8005158:	4798      	blx	r3
    }
  }

  /* Get falling edge pending bit  */
  regaddr = (__IO uint32_t *)(&EXTI->FPR1 + (EXTI_CONFIG_OFFSET * offset));
 800515a:	697b      	ldr	r3, [r7, #20]
 800515c:	015a      	lsls	r2, r3, #5
 800515e:	4b0d      	ldr	r3, [pc, #52]	@ (8005194 <HAL_EXTI_IRQHandler+0x8c>)
 8005160:	4413      	add	r3, r2
 8005162:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	693a      	ldr	r2, [r7, #16]
 800516a:	4013      	ands	r3, r2
 800516c:	60bb      	str	r3, [r7, #8]

  if (regval != 0U)
 800516e:	68bb      	ldr	r3, [r7, #8]
 8005170:	2b00      	cmp	r3, #0
 8005172:	d009      	beq.n	8005188 <HAL_EXTI_IRQHandler+0x80>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	693a      	ldr	r2, [r7, #16]
 8005178:	601a      	str	r2, [r3, #0]

    /* Call rising callback */
    if (hexti->FallingCallback != NULL)
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	689b      	ldr	r3, [r3, #8]
 800517e:	2b00      	cmp	r3, #0
 8005180:	d002      	beq.n	8005188 <HAL_EXTI_IRQHandler+0x80>
    {
      hexti->FallingCallback();
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	689b      	ldr	r3, [r3, #8]
 8005186:	4798      	blx	r3
    }
  }
}
 8005188:	bf00      	nop
 800518a:	3718      	adds	r7, #24
 800518c:	46bd      	mov	sp, r7
 800518e:	bd80      	pop	{r7, pc}
 8005190:	4602200c 	.word	0x4602200c
 8005194:	46022010 	.word	0x46022010

08005198 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8005198:	b480      	push	{r7}
 800519a:	b089      	sub	sp, #36	@ 0x24
 800519c:	af00      	add	r7, sp, #0
 800519e:	6078      	str	r0, [r7, #4]
 80051a0:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 80051a2:	2300      	movs	r3, #0
 80051a4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	613b      	str	r3, [r7, #16]

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80051aa:	e1c2      	b.n	8005532 <HAL_GPIO_Init+0x39a>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 80051ac:	683b      	ldr	r3, [r7, #0]
 80051ae:	681a      	ldr	r2, [r3, #0]
 80051b0:	2101      	movs	r1, #1
 80051b2:	697b      	ldr	r3, [r7, #20]
 80051b4:	fa01 f303 	lsl.w	r3, r1, r3
 80051b8:	4013      	ands	r3, r2
 80051ba:	60fb      	str	r3, [r7, #12]

    /* Save Pin Position */
    pin_position = position;
 80051bc:	697b      	ldr	r3, [r7, #20]
 80051be:	61bb      	str	r3, [r7, #24]

    if (iocurrent != 0U)
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	f000 81b2 	beq.w	800552c <HAL_GPIO_Init+0x394>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if (GPIOx == LPGPIO1)
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	4a55      	ldr	r2, [pc, #340]	@ (8005320 <HAL_GPIO_Init+0x188>)
 80051cc:	4293      	cmp	r3, r2
 80051ce:	d15d      	bne.n	800528c <HAL_GPIO_Init+0xf4>
      {
        /* MODER configuration */
        tmp = GPIOx->MODER;
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	61fb      	str	r3, [r7, #28]
        tmp &= ~(LPGPIO_MODER_MOD0 << position);
 80051d6:	2201      	movs	r2, #1
 80051d8:	697b      	ldr	r3, [r7, #20]
 80051da:	fa02 f303 	lsl.w	r3, r2, r3
 80051de:	43db      	mvns	r3, r3
 80051e0:	69fa      	ldr	r2, [r7, #28]
 80051e2:	4013      	ands	r3, r2
 80051e4:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE_OUTPUT_PP) << position);
 80051e6:	683b      	ldr	r3, [r7, #0]
 80051e8:	685b      	ldr	r3, [r3, #4]
 80051ea:	f003 0201 	and.w	r2, r3, #1
 80051ee:	697b      	ldr	r3, [r7, #20]
 80051f0:	fa02 f303 	lsl.w	r3, r2, r3
 80051f4:	69fa      	ldr	r2, [r7, #28]
 80051f6:	4313      	orrs	r3, r2
 80051f8:	61fb      	str	r3, [r7, #28]
        GPIOx->MODER = tmp;
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	69fa      	ldr	r2, [r7, #28]
 80051fe:	601a      	str	r2, [r3, #0]

        /* Save GPIO Port and pin index */
        p_gpio = LPGPIO_Map[position].GPIO_PORT;
 8005200:	4a48      	ldr	r2, [pc, #288]	@ (8005324 <HAL_GPIO_Init+0x18c>)
 8005202:	697b      	ldr	r3, [r7, #20]
 8005204:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005208:	613b      	str	r3, [r7, #16]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 800520a:	4a46      	ldr	r2, [pc, #280]	@ (8005324 <HAL_GPIO_Init+0x18c>)
 800520c:	697b      	ldr	r3, [r7, #20]
 800520e:	00db      	lsls	r3, r3, #3
 8005210:	4413      	add	r3, r2
 8005212:	685b      	ldr	r3, [r3, #4]
 8005214:	61bb      	str	r3, [r7, #24]

        /* Configure Alternate function mapped with the current IO */
        tmp = p_gpio->AFR[(pin_position) >> 3U];
 8005216:	69bb      	ldr	r3, [r7, #24]
 8005218:	08da      	lsrs	r2, r3, #3
 800521a:	693b      	ldr	r3, [r7, #16]
 800521c:	3208      	adds	r2, #8
 800521e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005222:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << (((pin_position) & 0x07U) * 4U));
 8005224:	69bb      	ldr	r3, [r7, #24]
 8005226:	f003 0307 	and.w	r3, r3, #7
 800522a:	009b      	lsls	r3, r3, #2
 800522c:	220f      	movs	r2, #15
 800522e:	fa02 f303 	lsl.w	r3, r2, r3
 8005232:	43db      	mvns	r3, r3
 8005234:	69fa      	ldr	r2, [r7, #28]
 8005236:	4013      	ands	r3, r2
 8005238:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_AF11_LPGPIO1 & 0x0FUL) << (((pin_position) & 0x07U) * 4U));
 800523a:	69bb      	ldr	r3, [r7, #24]
 800523c:	f003 0307 	and.w	r3, r3, #7
 8005240:	009b      	lsls	r3, r3, #2
 8005242:	220b      	movs	r2, #11
 8005244:	fa02 f303 	lsl.w	r3, r2, r3
 8005248:	69fa      	ldr	r2, [r7, #28]
 800524a:	4313      	orrs	r3, r2
 800524c:	61fb      	str	r3, [r7, #28]
        p_gpio->AFR[(pin_position) >> 3U] = tmp;
 800524e:	69bb      	ldr	r3, [r7, #24]
 8005250:	08da      	lsrs	r2, r3, #3
 8005252:	693b      	ldr	r3, [r7, #16]
 8005254:	3208      	adds	r2, #8
 8005256:	69f9      	ldr	r1, [r7, #28]
 8005258:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 800525c:	693b      	ldr	r3, [r7, #16]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 8005262:	69bb      	ldr	r3, [r7, #24]
 8005264:	005b      	lsls	r3, r3, #1
 8005266:	2203      	movs	r2, #3
 8005268:	fa02 f303 	lsl.w	r3, r2, r3
 800526c:	43db      	mvns	r3, r3
 800526e:	69fa      	ldr	r2, [r7, #28]
 8005270:	4013      	ands	r3, r2
 8005272:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_MODE_AF_PP & 0x0FUL) << (pin_position * GPIO_MODER_MODE1_Pos));
 8005274:	69bb      	ldr	r3, [r7, #24]
 8005276:	005b      	lsls	r3, r3, #1
 8005278:	2202      	movs	r2, #2
 800527a:	fa02 f303 	lsl.w	r3, r2, r3
 800527e:	69fa      	ldr	r2, [r7, #28]
 8005280:	4313      	orrs	r3, r2
 8005282:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8005284:	693b      	ldr	r3, [r7, #16]
 8005286:	69fa      	ldr	r2, [r7, #28]
 8005288:	601a      	str	r2, [r3, #0]
 800528a:	e067      	b.n	800535c <HAL_GPIO_Init+0x1c4>
      }
      else if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 800528c:	683b      	ldr	r3, [r7, #0]
 800528e:	685b      	ldr	r3, [r3, #4]
 8005290:	2b02      	cmp	r3, #2
 8005292:	d003      	beq.n	800529c <HAL_GPIO_Init+0x104>
 8005294:	683b      	ldr	r3, [r7, #0]
 8005296:	685b      	ldr	r3, [r3, #4]
 8005298:	2b12      	cmp	r3, #18
 800529a:	d145      	bne.n	8005328 <HAL_GPIO_Init+0x190>
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 800529c:	697b      	ldr	r3, [r7, #20]
 800529e:	08da      	lsrs	r2, r3, #3
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	3208      	adds	r2, #8
 80052a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80052a8:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 80052aa:	697b      	ldr	r3, [r7, #20]
 80052ac:	f003 0307 	and.w	r3, r3, #7
 80052b0:	009b      	lsls	r3, r3, #2
 80052b2:	220f      	movs	r2, #15
 80052b4:	fa02 f303 	lsl.w	r3, r2, r3
 80052b8:	43db      	mvns	r3, r3
 80052ba:	69fa      	ldr	r2, [r7, #28]
 80052bc:	4013      	ands	r3, r2
 80052be:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 80052c0:	683b      	ldr	r3, [r7, #0]
 80052c2:	691b      	ldr	r3, [r3, #16]
 80052c4:	f003 020f 	and.w	r2, r3, #15
 80052c8:	697b      	ldr	r3, [r7, #20]
 80052ca:	f003 0307 	and.w	r3, r3, #7
 80052ce:	009b      	lsls	r3, r3, #2
 80052d0:	fa02 f303 	lsl.w	r3, r2, r3
 80052d4:	69fa      	ldr	r2, [r7, #28]
 80052d6:	4313      	orrs	r3, r2
 80052d8:	61fb      	str	r3, [r7, #28]
        GPIOx->AFR[position >> 3U] = tmp;
 80052da:	697b      	ldr	r3, [r7, #20]
 80052dc:	08da      	lsrs	r2, r3, #3
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	3208      	adds	r2, #8
 80052e2:	69f9      	ldr	r1, [r7, #28]
 80052e4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 80052e8:	693b      	ldr	r3, [r7, #16]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 80052ee:	69bb      	ldr	r3, [r7, #24]
 80052f0:	005b      	lsls	r3, r3, #1
 80052f2:	2203      	movs	r2, #3
 80052f4:	fa02 f303 	lsl.w	r3, r2, r3
 80052f8:	43db      	mvns	r3, r3
 80052fa:	69fa      	ldr	r2, [r7, #28]
 80052fc:	4013      	ands	r3, r2
 80052fe:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 8005300:	683b      	ldr	r3, [r7, #0]
 8005302:	685b      	ldr	r3, [r3, #4]
 8005304:	f003 0203 	and.w	r2, r3, #3
 8005308:	69bb      	ldr	r3, [r7, #24]
 800530a:	005b      	lsls	r3, r3, #1
 800530c:	fa02 f303 	lsl.w	r3, r2, r3
 8005310:	69fa      	ldr	r2, [r7, #28]
 8005312:	4313      	orrs	r3, r2
 8005314:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8005316:	693b      	ldr	r3, [r7, #16]
 8005318:	69fa      	ldr	r2, [r7, #28]
 800531a:	601a      	str	r2, [r3, #0]
 800531c:	e01e      	b.n	800535c <HAL_GPIO_Init+0x1c4>
 800531e:	bf00      	nop
 8005320:	46020000 	.word	0x46020000
 8005324:	08010f58 	.word	0x08010f58
      {
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
        tmp = p_gpio->MODER;
 8005328:	693b      	ldr	r3, [r7, #16]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 800532e:	69bb      	ldr	r3, [r7, #24]
 8005330:	005b      	lsls	r3, r3, #1
 8005332:	2203      	movs	r2, #3
 8005334:	fa02 f303 	lsl.w	r3, r2, r3
 8005338:	43db      	mvns	r3, r3
 800533a:	69fa      	ldr	r2, [r7, #28]
 800533c:	4013      	ands	r3, r2
 800533e:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 8005340:	683b      	ldr	r3, [r7, #0]
 8005342:	685b      	ldr	r3, [r3, #4]
 8005344:	f003 0203 	and.w	r2, r3, #3
 8005348:	69bb      	ldr	r3, [r7, #24]
 800534a:	005b      	lsls	r3, r3, #1
 800534c:	fa02 f303 	lsl.w	r3, r2, r3
 8005350:	69fa      	ldr	r2, [r7, #28]
 8005352:	4313      	orrs	r3, r2
 8005354:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8005356:	693b      	ldr	r3, [r7, #16]
 8005358:	69fa      	ldr	r2, [r7, #28]
 800535a:	601a      	str	r2, [r3, #0]
      }

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800535c:	683b      	ldr	r3, [r7, #0]
 800535e:	685b      	ldr	r3, [r3, #4]
 8005360:	2b01      	cmp	r3, #1
 8005362:	d00b      	beq.n	800537c <HAL_GPIO_Init+0x1e4>
 8005364:	683b      	ldr	r3, [r7, #0]
 8005366:	685b      	ldr	r3, [r3, #4]
 8005368:	2b02      	cmp	r3, #2
 800536a:	d007      	beq.n	800537c <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 800536c:	683b      	ldr	r3, [r7, #0]
 800536e:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005370:	2b11      	cmp	r3, #17
 8005372:	d003      	beq.n	800537c <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005374:	683b      	ldr	r3, [r7, #0]
 8005376:	685b      	ldr	r3, [r3, #4]
 8005378:	2b12      	cmp	r3, #18
 800537a:	d130      	bne.n	80053de <HAL_GPIO_Init+0x246>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = p_gpio->OSPEEDR;
 800537c:	693b      	ldr	r3, [r7, #16]
 800537e:	689b      	ldr	r3, [r3, #8]
 8005380:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 8005382:	69bb      	ldr	r3, [r7, #24]
 8005384:	005b      	lsls	r3, r3, #1
 8005386:	2203      	movs	r2, #3
 8005388:	fa02 f303 	lsl.w	r3, r2, r3
 800538c:	43db      	mvns	r3, r3
 800538e:	69fa      	ldr	r2, [r7, #28]
 8005390:	4013      	ands	r3, r2
 8005392:	61fb      	str	r3, [r7, #28]
        tmp |= (pGPIO_Init->Speed << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 8005394:	683b      	ldr	r3, [r7, #0]
 8005396:	68da      	ldr	r2, [r3, #12]
 8005398:	69bb      	ldr	r3, [r7, #24]
 800539a:	005b      	lsls	r3, r3, #1
 800539c:	fa02 f303 	lsl.w	r3, r2, r3
 80053a0:	69fa      	ldr	r2, [r7, #28]
 80053a2:	4313      	orrs	r3, r2
 80053a4:	61fb      	str	r3, [r7, #28]
        p_gpio->OSPEEDR = tmp;
 80053a6:	693b      	ldr	r3, [r7, #16]
 80053a8:	69fa      	ldr	r2, [r7, #28]
 80053aa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = p_gpio->OTYPER;
 80053ac:	693b      	ldr	r3, [r7, #16]
 80053ae:	685b      	ldr	r3, [r3, #4]
 80053b0:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OTYPER_OT0 << pin_position);
 80053b2:	2201      	movs	r2, #1
 80053b4:	69bb      	ldr	r3, [r7, #24]
 80053b6:	fa02 f303 	lsl.w	r3, r2, r3
 80053ba:	43db      	mvns	r3, r3
 80053bc:	69fa      	ldr	r2, [r7, #28]
 80053be:	4013      	ands	r3, r2
 80053c0:	61fb      	str	r3, [r7, #28]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 80053c2:	683b      	ldr	r3, [r7, #0]
 80053c4:	685b      	ldr	r3, [r3, #4]
 80053c6:	091b      	lsrs	r3, r3, #4
 80053c8:	f003 0201 	and.w	r2, r3, #1
 80053cc:	69bb      	ldr	r3, [r7, #24]
 80053ce:	fa02 f303 	lsl.w	r3, r2, r3
 80053d2:	69fa      	ldr	r2, [r7, #28]
 80053d4:	4313      	orrs	r3, r2
 80053d6:	61fb      	str	r3, [r7, #28]
        p_gpio->OTYPER = tmp;
 80053d8:	693b      	ldr	r3, [r7, #16]
 80053da:	69fa      	ldr	r2, [r7, #28]
 80053dc:	605a      	str	r2, [r3, #4]
      }

      if ((pGPIO_Init->Mode != GPIO_MODE_ANALOG) || 
 80053de:	683b      	ldr	r3, [r7, #0]
 80053e0:	685b      	ldr	r3, [r3, #4]
 80053e2:	2b03      	cmp	r3, #3
 80053e4:	d107      	bne.n	80053f6 <HAL_GPIO_Init+0x25e>
          ((pGPIO_Init->Mode == GPIO_MODE_ANALOG) && (pGPIO_Init->Pull != GPIO_PULLUP)))
 80053e6:	683b      	ldr	r3, [r7, #0]
 80053e8:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode != GPIO_MODE_ANALOG) || 
 80053ea:	2b03      	cmp	r3, #3
 80053ec:	d11b      	bne.n	8005426 <HAL_GPIO_Init+0x28e>
          ((pGPIO_Init->Mode == GPIO_MODE_ANALOG) && (pGPIO_Init->Pull != GPIO_PULLUP)))
 80053ee:	683b      	ldr	r3, [r7, #0]
 80053f0:	689b      	ldr	r3, [r3, #8]
 80053f2:	2b01      	cmp	r3, #1
 80053f4:	d017      	beq.n	8005426 <HAL_GPIO_Init+0x28e>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = p_gpio->PUPDR;
 80053f6:	693b      	ldr	r3, [r7, #16]
 80053f8:	68db      	ldr	r3, [r3, #12]
 80053fa:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 80053fc:	69bb      	ldr	r3, [r7, #24]
 80053fe:	005b      	lsls	r3, r3, #1
 8005400:	2203      	movs	r2, #3
 8005402:	fa02 f303 	lsl.w	r3, r2, r3
 8005406:	43db      	mvns	r3, r3
 8005408:	69fa      	ldr	r2, [r7, #28]
 800540a:	4013      	ands	r3, r2
 800540c:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Pull) << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 800540e:	683b      	ldr	r3, [r7, #0]
 8005410:	689a      	ldr	r2, [r3, #8]
 8005412:	69bb      	ldr	r3, [r7, #24]
 8005414:	005b      	lsls	r3, r3, #1
 8005416:	fa02 f303 	lsl.w	r3, r2, r3
 800541a:	69fa      	ldr	r2, [r7, #28]
 800541c:	4313      	orrs	r3, r2
 800541e:	61fb      	str	r3, [r7, #28]
        p_gpio->PUPDR = tmp;
 8005420:	693b      	ldr	r3, [r7, #16]
 8005422:	69fa      	ldr	r2, [r7, #28]
 8005424:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005426:	683b      	ldr	r3, [r7, #0]
 8005428:	685b      	ldr	r3, [r3, #4]
 800542a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800542e:	2b00      	cmp	r3, #0
 8005430:	d07c      	beq.n	800552c <HAL_GPIO_Init+0x394>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8005432:	4a47      	ldr	r2, [pc, #284]	@ (8005550 <HAL_GPIO_Init+0x3b8>)
 8005434:	697b      	ldr	r3, [r7, #20]
 8005436:	089b      	lsrs	r3, r3, #2
 8005438:	3318      	adds	r3, #24
 800543a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800543e:	61fb      	str	r3, [r7, #28]
        tmp &= ~((0x0FUL) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 8005440:	697b      	ldr	r3, [r7, #20]
 8005442:	f003 0303 	and.w	r3, r3, #3
 8005446:	00db      	lsls	r3, r3, #3
 8005448:	220f      	movs	r2, #15
 800544a:	fa02 f303 	lsl.w	r3, r2, r3
 800544e:	43db      	mvns	r3, r3
 8005450:	69fa      	ldr	r2, [r7, #28]
 8005452:	4013      	ands	r3, r2
 8005454:	61fb      	str	r3, [r7, #28]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	0a9a      	lsrs	r2, r3, #10
 800545a:	4b3e      	ldr	r3, [pc, #248]	@ (8005554 <HAL_GPIO_Init+0x3bc>)
 800545c:	4013      	ands	r3, r2
 800545e:	697a      	ldr	r2, [r7, #20]
 8005460:	f002 0203 	and.w	r2, r2, #3
 8005464:	00d2      	lsls	r2, r2, #3
 8005466:	4093      	lsls	r3, r2
 8005468:	69fa      	ldr	r2, [r7, #28]
 800546a:	4313      	orrs	r3, r2
 800546c:	61fb      	str	r3, [r7, #28]
        EXTI->EXTICR[position >> 2U] = tmp;
 800546e:	4938      	ldr	r1, [pc, #224]	@ (8005550 <HAL_GPIO_Init+0x3b8>)
 8005470:	697b      	ldr	r3, [r7, #20]
 8005472:	089b      	lsrs	r3, r3, #2
 8005474:	3318      	adds	r3, #24
 8005476:	69fa      	ldr	r2, [r7, #28]
 8005478:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 800547c:	4b34      	ldr	r3, [pc, #208]	@ (8005550 <HAL_GPIO_Init+0x3b8>)
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	43db      	mvns	r3, r3
 8005486:	69fa      	ldr	r2, [r7, #28]
 8005488:	4013      	ands	r3, r2
 800548a:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800548c:	683b      	ldr	r3, [r7, #0]
 800548e:	685b      	ldr	r3, [r3, #4]
 8005490:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005494:	2b00      	cmp	r3, #0
 8005496:	d003      	beq.n	80054a0 <HAL_GPIO_Init+0x308>
        {
          tmp |= iocurrent;
 8005498:	69fa      	ldr	r2, [r7, #28]
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	4313      	orrs	r3, r2
 800549e:	61fb      	str	r3, [r7, #28]
        }
        EXTI->RTSR1 = tmp;
 80054a0:	4a2b      	ldr	r2, [pc, #172]	@ (8005550 <HAL_GPIO_Init+0x3b8>)
 80054a2:	69fb      	ldr	r3, [r7, #28]
 80054a4:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 80054a6:	4b2a      	ldr	r3, [pc, #168]	@ (8005550 <HAL_GPIO_Init+0x3b8>)
 80054a8:	685b      	ldr	r3, [r3, #4]
 80054aa:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	43db      	mvns	r3, r3
 80054b0:	69fa      	ldr	r2, [r7, #28]
 80054b2:	4013      	ands	r3, r2
 80054b4:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80054b6:	683b      	ldr	r3, [r7, #0]
 80054b8:	685b      	ldr	r3, [r3, #4]
 80054ba:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d003      	beq.n	80054ca <HAL_GPIO_Init+0x332>
        {
          tmp |= iocurrent;
 80054c2:	69fa      	ldr	r2, [r7, #28]
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	4313      	orrs	r3, r2
 80054c8:	61fb      	str	r3, [r7, #28]
        }
        EXTI->FTSR1 = tmp;
 80054ca:	4a21      	ldr	r2, [pc, #132]	@ (8005550 <HAL_GPIO_Init+0x3b8>)
 80054cc:	69fb      	ldr	r3, [r7, #28]
 80054ce:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 80054d0:	4b1f      	ldr	r3, [pc, #124]	@ (8005550 <HAL_GPIO_Init+0x3b8>)
 80054d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80054d6:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	43db      	mvns	r3, r3
 80054dc:	69fa      	ldr	r2, [r7, #28]
 80054de:	4013      	ands	r3, r2
 80054e0:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80054e2:	683b      	ldr	r3, [r7, #0]
 80054e4:	685b      	ldr	r3, [r3, #4]
 80054e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d003      	beq.n	80054f6 <HAL_GPIO_Init+0x35e>
        {
          tmp |= iocurrent;
 80054ee:	69fa      	ldr	r2, [r7, #28]
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	4313      	orrs	r3, r2
 80054f4:	61fb      	str	r3, [r7, #28]
        }
        EXTI->EMR1 = tmp;
 80054f6:	4a16      	ldr	r2, [pc, #88]	@ (8005550 <HAL_GPIO_Init+0x3b8>)
 80054f8:	69fb      	ldr	r3, [r7, #28]
 80054fa:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        tmp = EXTI->IMR1;
 80054fe:	4b14      	ldr	r3, [pc, #80]	@ (8005550 <HAL_GPIO_Init+0x3b8>)
 8005500:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005504:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	43db      	mvns	r3, r3
 800550a:	69fa      	ldr	r2, [r7, #28]
 800550c:	4013      	ands	r3, r2
 800550e:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005510:	683b      	ldr	r3, [r7, #0]
 8005512:	685b      	ldr	r3, [r3, #4]
 8005514:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005518:	2b00      	cmp	r3, #0
 800551a:	d003      	beq.n	8005524 <HAL_GPIO_Init+0x38c>
        {
          tmp |= iocurrent;
 800551c:	69fa      	ldr	r2, [r7, #28]
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	4313      	orrs	r3, r2
 8005522:	61fb      	str	r3, [r7, #28]
        }
        EXTI->IMR1 = tmp;
 8005524:	4a0a      	ldr	r2, [pc, #40]	@ (8005550 <HAL_GPIO_Init+0x3b8>)
 8005526:	69fb      	ldr	r3, [r7, #28]
 8005528:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }
    position++;
 800552c:	697b      	ldr	r3, [r7, #20]
 800552e:	3301      	adds	r3, #1
 8005530:	617b      	str	r3, [r7, #20]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8005532:	683b      	ldr	r3, [r7, #0]
 8005534:	681a      	ldr	r2, [r3, #0]
 8005536:	697b      	ldr	r3, [r7, #20]
 8005538:	fa22 f303 	lsr.w	r3, r2, r3
 800553c:	2b00      	cmp	r3, #0
 800553e:	f47f ae35 	bne.w	80051ac <HAL_GPIO_Init+0x14>
  }
}
 8005542:	bf00      	nop
 8005544:	bf00      	nop
 8005546:	3724      	adds	r7, #36	@ 0x24
 8005548:	46bd      	mov	sp, r7
 800554a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800554e:	4770      	bx	lr
 8005550:	46022000 	.word	0x46022000
 8005554:	002f7f7f 	.word	0x002f7f7f

08005558 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005558:	b480      	push	{r7}
 800555a:	b083      	sub	sp, #12
 800555c:	af00      	add	r7, sp, #0
 800555e:	6078      	str	r0, [r7, #4]
 8005560:	460b      	mov	r3, r1
 8005562:	807b      	strh	r3, [r7, #2]
 8005564:	4613      	mov	r3, r2
 8005566:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005568:	787b      	ldrb	r3, [r7, #1]
 800556a:	2b00      	cmp	r3, #0
 800556c:	d003      	beq.n	8005576 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800556e:	887a      	ldrh	r2, [r7, #2]
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
  }
}
 8005574:	e002      	b.n	800557c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
 8005576:	887a      	ldrh	r2, [r7, #2]
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800557c:	bf00      	nop
 800557e:	370c      	adds	r7, #12
 8005580:	46bd      	mov	sp, r7
 8005582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005586:	4770      	bx	lr

08005588 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005588:	b580      	push	{r7, lr}
 800558a:	b082      	sub	sp, #8
 800558c:	af00      	add	r7, sp, #0
 800558e:	4603      	mov	r3, r0
 8005590:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0U)
 8005592:	4b0f      	ldr	r3, [pc, #60]	@ (80055d0 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8005594:	68da      	ldr	r2, [r3, #12]
 8005596:	88fb      	ldrh	r3, [r7, #6]
 8005598:	4013      	ands	r3, r2
 800559a:	2b00      	cmp	r3, #0
 800559c:	d006      	beq.n	80055ac <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 800559e:	4a0c      	ldr	r2, [pc, #48]	@ (80055d0 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 80055a0:	88fb      	ldrh	r3, [r7, #6]
 80055a2:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 80055a4:	88fb      	ldrh	r3, [r7, #6]
 80055a6:	4618      	mov	r0, r3
 80055a8:	f000 f814 	bl	80055d4 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0U)
 80055ac:	4b08      	ldr	r3, [pc, #32]	@ (80055d0 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 80055ae:	691a      	ldr	r2, [r3, #16]
 80055b0:	88fb      	ldrh	r3, [r7, #6]
 80055b2:	4013      	ands	r3, r2
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d006      	beq.n	80055c6 <HAL_GPIO_EXTI_IRQHandler+0x3e>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 80055b8:	4a05      	ldr	r2, [pc, #20]	@ (80055d0 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 80055ba:	88fb      	ldrh	r3, [r7, #6]
 80055bc:	6113      	str	r3, [r2, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 80055be:	88fb      	ldrh	r3, [r7, #6]
 80055c0:	4618      	mov	r0, r3
 80055c2:	f000 f812 	bl	80055ea <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 80055c6:	bf00      	nop
 80055c8:	3708      	adds	r7, #8
 80055ca:	46bd      	mov	sp, r7
 80055cc:	bd80      	pop	{r7, pc}
 80055ce:	bf00      	nop
 80055d0:	46022000 	.word	0x46022000

080055d4 <HAL_GPIO_EXTI_Rising_Callback>:
  * @brief  EXTI line rising detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 80055d4:	b480      	push	{r7}
 80055d6:	b083      	sub	sp, #12
 80055d8:	af00      	add	r7, sp, #0
 80055da:	4603      	mov	r3, r0
 80055dc:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Rising_Callback could be implemented in the user file
   */
}
 80055de:	bf00      	nop
 80055e0:	370c      	adds	r7, #12
 80055e2:	46bd      	mov	sp, r7
 80055e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e8:	4770      	bx	lr

080055ea <HAL_GPIO_EXTI_Falling_Callback>:
  * @brief  EXTI line falling detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 80055ea:	b480      	push	{r7}
 80055ec:	b083      	sub	sp, #12
 80055ee:	af00      	add	r7, sp, #0
 80055f0:	4603      	mov	r3, r0
 80055f2:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Falling_Callback could be implemented in the user file
   */
}
 80055f4:	bf00      	nop
 80055f6:	370c      	adds	r7, #12
 80055f8:	46bd      	mov	sp, r7
 80055fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055fe:	4770      	bx	lr

08005600 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005600:	b580      	push	{r7, lr}
 8005602:	b082      	sub	sp, #8
 8005604:	af00      	add	r7, sp, #0
 8005606:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	2b00      	cmp	r3, #0
 800560c:	d101      	bne.n	8005612 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800560e:	2301      	movs	r3, #1
 8005610:	e08d      	b.n	800572e <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005618:	b2db      	uxtb	r3, r3
 800561a:	2b00      	cmp	r3, #0
 800561c:	d106      	bne.n	800562c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	2200      	movs	r2, #0
 8005622:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8005626:	6878      	ldr	r0, [r7, #4]
 8005628:	f7fd febc 	bl	80033a4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	2224      	movs	r2, #36	@ 0x24
 8005630:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	681a      	ldr	r2, [r3, #0]
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	f022 0201 	bic.w	r2, r2, #1
 8005642:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	685a      	ldr	r2, [r3, #4]
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8005650:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	689a      	ldr	r2, [r3, #8]
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005660:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	68db      	ldr	r3, [r3, #12]
 8005666:	2b01      	cmp	r3, #1
 8005668:	d107      	bne.n	800567a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	689a      	ldr	r2, [r3, #8]
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005676:	609a      	str	r2, [r3, #8]
 8005678:	e006      	b.n	8005688 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	689a      	ldr	r2, [r3, #8]
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8005686:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	68db      	ldr	r3, [r3, #12]
 800568c:	2b02      	cmp	r3, #2
 800568e:	d108      	bne.n	80056a2 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	685a      	ldr	r2, [r3, #4]
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800569e:	605a      	str	r2, [r3, #4]
 80056a0:	e007      	b.n	80056b2 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	685a      	ldr	r2, [r3, #4]
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80056b0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	685b      	ldr	r3, [r3, #4]
 80056b8:	687a      	ldr	r2, [r7, #4]
 80056ba:	6812      	ldr	r2, [r2, #0]
 80056bc:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80056c0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80056c4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	68da      	ldr	r2, [r3, #12]
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80056d4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	691a      	ldr	r2, [r3, #16]
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	695b      	ldr	r3, [r3, #20]
 80056de:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	699b      	ldr	r3, [r3, #24]
 80056e6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	430a      	orrs	r2, r1
 80056ee:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	69d9      	ldr	r1, [r3, #28]
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	6a1a      	ldr	r2, [r3, #32]
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	430a      	orrs	r2, r1
 80056fe:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	681a      	ldr	r2, [r3, #0]
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	f042 0201 	orr.w	r2, r2, #1
 800570e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	2200      	movs	r2, #0
 8005714:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	2220      	movs	r2, #32
 800571a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	2200      	movs	r2, #0
 8005722:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	2200      	movs	r2, #0
 8005728:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 800572c:	2300      	movs	r3, #0
}
 800572e:	4618      	mov	r0, r3
 8005730:	3708      	adds	r7, #8
 8005732:	46bd      	mov	sp, r7
 8005734:	bd80      	pop	{r7, pc}
	...

08005738 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005738:	b580      	push	{r7, lr}
 800573a:	b088      	sub	sp, #32
 800573c:	af02      	add	r7, sp, #8
 800573e:	60f8      	str	r0, [r7, #12]
 8005740:	4608      	mov	r0, r1
 8005742:	4611      	mov	r1, r2
 8005744:	461a      	mov	r2, r3
 8005746:	4603      	mov	r3, r0
 8005748:	817b      	strh	r3, [r7, #10]
 800574a:	460b      	mov	r3, r1
 800574c:	813b      	strh	r3, [r7, #8]
 800574e:	4613      	mov	r3, r2
 8005750:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005758:	b2db      	uxtb	r3, r3
 800575a:	2b20      	cmp	r3, #32
 800575c:	f040 80f9 	bne.w	8005952 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005760:	6a3b      	ldr	r3, [r7, #32]
 8005762:	2b00      	cmp	r3, #0
 8005764:	d002      	beq.n	800576c <HAL_I2C_Mem_Write+0x34>
 8005766:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005768:	2b00      	cmp	r3, #0
 800576a:	d105      	bne.n	8005778 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005772:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8005774:	2301      	movs	r3, #1
 8005776:	e0ed      	b.n	8005954 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800577e:	2b01      	cmp	r3, #1
 8005780:	d101      	bne.n	8005786 <HAL_I2C_Mem_Write+0x4e>
 8005782:	2302      	movs	r3, #2
 8005784:	e0e6      	b.n	8005954 <HAL_I2C_Mem_Write+0x21c>
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	2201      	movs	r2, #1
 800578a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800578e:	f7ff facd 	bl	8004d2c <HAL_GetTick>
 8005792:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005794:	697b      	ldr	r3, [r7, #20]
 8005796:	9300      	str	r3, [sp, #0]
 8005798:	2319      	movs	r3, #25
 800579a:	2201      	movs	r2, #1
 800579c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80057a0:	68f8      	ldr	r0, [r7, #12]
 80057a2:	f001 f86c 	bl	800687e <I2C_WaitOnFlagUntilTimeout>
 80057a6:	4603      	mov	r3, r0
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d001      	beq.n	80057b0 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80057ac:	2301      	movs	r3, #1
 80057ae:	e0d1      	b.n	8005954 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	2221      	movs	r2, #33	@ 0x21
 80057b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	2240      	movs	r2, #64	@ 0x40
 80057bc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	2200      	movs	r2, #0
 80057c4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	6a3a      	ldr	r2, [r7, #32]
 80057ca:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80057d0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	2200      	movs	r2, #0
 80057d6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80057d8:	88f8      	ldrh	r0, [r7, #6]
 80057da:	893a      	ldrh	r2, [r7, #8]
 80057dc:	8979      	ldrh	r1, [r7, #10]
 80057de:	697b      	ldr	r3, [r7, #20]
 80057e0:	9301      	str	r3, [sp, #4]
 80057e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057e4:	9300      	str	r3, [sp, #0]
 80057e6:	4603      	mov	r3, r0
 80057e8:	68f8      	ldr	r0, [r7, #12]
 80057ea:	f000 fb93 	bl	8005f14 <I2C_RequestMemoryWrite>
 80057ee:	4603      	mov	r3, r0
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d005      	beq.n	8005800 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	2200      	movs	r2, #0
 80057f8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 80057fc:	2301      	movs	r3, #1
 80057fe:	e0a9      	b.n	8005954 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005804:	b29b      	uxth	r3, r3
 8005806:	2bff      	cmp	r3, #255	@ 0xff
 8005808:	d90e      	bls.n	8005828 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	22ff      	movs	r2, #255	@ 0xff
 800580e:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005814:	b2da      	uxtb	r2, r3
 8005816:	8979      	ldrh	r1, [r7, #10]
 8005818:	2300      	movs	r3, #0
 800581a:	9300      	str	r3, [sp, #0]
 800581c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005820:	68f8      	ldr	r0, [r7, #12]
 8005822:	f001 f9ef 	bl	8006c04 <I2C_TransferConfig>
 8005826:	e00f      	b.n	8005848 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800582c:	b29a      	uxth	r2, r3
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005836:	b2da      	uxtb	r2, r3
 8005838:	8979      	ldrh	r1, [r7, #10]
 800583a:	2300      	movs	r3, #0
 800583c:	9300      	str	r3, [sp, #0]
 800583e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005842:	68f8      	ldr	r0, [r7, #12]
 8005844:	f001 f9de 	bl	8006c04 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005848:	697a      	ldr	r2, [r7, #20]
 800584a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800584c:	68f8      	ldr	r0, [r7, #12]
 800584e:	f001 f86f 	bl	8006930 <I2C_WaitOnTXISFlagUntilTimeout>
 8005852:	4603      	mov	r3, r0
 8005854:	2b00      	cmp	r3, #0
 8005856:	d001      	beq.n	800585c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8005858:	2301      	movs	r3, #1
 800585a:	e07b      	b.n	8005954 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005860:	781a      	ldrb	r2, [r3, #0]
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800586c:	1c5a      	adds	r2, r3, #1
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005876:	b29b      	uxth	r3, r3
 8005878:	3b01      	subs	r3, #1
 800587a:	b29a      	uxth	r2, r3
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005884:	3b01      	subs	r3, #1
 8005886:	b29a      	uxth	r2, r3
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005890:	b29b      	uxth	r3, r3
 8005892:	2b00      	cmp	r3, #0
 8005894:	d034      	beq.n	8005900 <HAL_I2C_Mem_Write+0x1c8>
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800589a:	2b00      	cmp	r3, #0
 800589c:	d130      	bne.n	8005900 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800589e:	697b      	ldr	r3, [r7, #20]
 80058a0:	9300      	str	r3, [sp, #0]
 80058a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80058a4:	2200      	movs	r2, #0
 80058a6:	2180      	movs	r1, #128	@ 0x80
 80058a8:	68f8      	ldr	r0, [r7, #12]
 80058aa:	f000 ffe8 	bl	800687e <I2C_WaitOnFlagUntilTimeout>
 80058ae:	4603      	mov	r3, r0
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d001      	beq.n	80058b8 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80058b4:	2301      	movs	r3, #1
 80058b6:	e04d      	b.n	8005954 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80058bc:	b29b      	uxth	r3, r3
 80058be:	2bff      	cmp	r3, #255	@ 0xff
 80058c0:	d90e      	bls.n	80058e0 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	22ff      	movs	r2, #255	@ 0xff
 80058c6:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80058cc:	b2da      	uxtb	r2, r3
 80058ce:	8979      	ldrh	r1, [r7, #10]
 80058d0:	2300      	movs	r3, #0
 80058d2:	9300      	str	r3, [sp, #0]
 80058d4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80058d8:	68f8      	ldr	r0, [r7, #12]
 80058da:	f001 f993 	bl	8006c04 <I2C_TransferConfig>
 80058de:	e00f      	b.n	8005900 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80058e4:	b29a      	uxth	r2, r3
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80058ee:	b2da      	uxtb	r2, r3
 80058f0:	8979      	ldrh	r1, [r7, #10]
 80058f2:	2300      	movs	r3, #0
 80058f4:	9300      	str	r3, [sp, #0]
 80058f6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80058fa:	68f8      	ldr	r0, [r7, #12]
 80058fc:	f001 f982 	bl	8006c04 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005904:	b29b      	uxth	r3, r3
 8005906:	2b00      	cmp	r3, #0
 8005908:	d19e      	bne.n	8005848 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800590a:	697a      	ldr	r2, [r7, #20]
 800590c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800590e:	68f8      	ldr	r0, [r7, #12]
 8005910:	f001 f855 	bl	80069be <I2C_WaitOnSTOPFlagUntilTimeout>
 8005914:	4603      	mov	r3, r0
 8005916:	2b00      	cmp	r3, #0
 8005918:	d001      	beq.n	800591e <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800591a:	2301      	movs	r3, #1
 800591c:	e01a      	b.n	8005954 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	2220      	movs	r2, #32
 8005924:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	6859      	ldr	r1, [r3, #4]
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	681a      	ldr	r2, [r3, #0]
 8005930:	4b0a      	ldr	r3, [pc, #40]	@ (800595c <HAL_I2C_Mem_Write+0x224>)
 8005932:	400b      	ands	r3, r1
 8005934:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	2220      	movs	r2, #32
 800593a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	2200      	movs	r2, #0
 8005942:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	2200      	movs	r2, #0
 800594a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800594e:	2300      	movs	r3, #0
 8005950:	e000      	b.n	8005954 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8005952:	2302      	movs	r3, #2
  }
}
 8005954:	4618      	mov	r0, r3
 8005956:	3718      	adds	r7, #24
 8005958:	46bd      	mov	sp, r7
 800595a:	bd80      	pop	{r7, pc}
 800595c:	fe00e800 	.word	0xfe00e800

08005960 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005960:	b580      	push	{r7, lr}
 8005962:	b088      	sub	sp, #32
 8005964:	af02      	add	r7, sp, #8
 8005966:	60f8      	str	r0, [r7, #12]
 8005968:	4608      	mov	r0, r1
 800596a:	4611      	mov	r1, r2
 800596c:	461a      	mov	r2, r3
 800596e:	4603      	mov	r3, r0
 8005970:	817b      	strh	r3, [r7, #10]
 8005972:	460b      	mov	r3, r1
 8005974:	813b      	strh	r3, [r7, #8]
 8005976:	4613      	mov	r3, r2
 8005978:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005980:	b2db      	uxtb	r3, r3
 8005982:	2b20      	cmp	r3, #32
 8005984:	f040 80fd 	bne.w	8005b82 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8005988:	6a3b      	ldr	r3, [r7, #32]
 800598a:	2b00      	cmp	r3, #0
 800598c:	d002      	beq.n	8005994 <HAL_I2C_Mem_Read+0x34>
 800598e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005990:	2b00      	cmp	r3, #0
 8005992:	d105      	bne.n	80059a0 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800599a:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 800599c:	2301      	movs	r3, #1
 800599e:	e0f1      	b.n	8005b84 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80059a6:	2b01      	cmp	r3, #1
 80059a8:	d101      	bne.n	80059ae <HAL_I2C_Mem_Read+0x4e>
 80059aa:	2302      	movs	r3, #2
 80059ac:	e0ea      	b.n	8005b84 <HAL_I2C_Mem_Read+0x224>
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	2201      	movs	r2, #1
 80059b2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80059b6:	f7ff f9b9 	bl	8004d2c <HAL_GetTick>
 80059ba:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80059bc:	697b      	ldr	r3, [r7, #20]
 80059be:	9300      	str	r3, [sp, #0]
 80059c0:	2319      	movs	r3, #25
 80059c2:	2201      	movs	r2, #1
 80059c4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80059c8:	68f8      	ldr	r0, [r7, #12]
 80059ca:	f000 ff58 	bl	800687e <I2C_WaitOnFlagUntilTimeout>
 80059ce:	4603      	mov	r3, r0
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d001      	beq.n	80059d8 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80059d4:	2301      	movs	r3, #1
 80059d6:	e0d5      	b.n	8005b84 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	2222      	movs	r2, #34	@ 0x22
 80059dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	2240      	movs	r2, #64	@ 0x40
 80059e4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	2200      	movs	r2, #0
 80059ec:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	6a3a      	ldr	r2, [r7, #32]
 80059f2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80059f8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	2200      	movs	r2, #0
 80059fe:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005a00:	88f8      	ldrh	r0, [r7, #6]
 8005a02:	893a      	ldrh	r2, [r7, #8]
 8005a04:	8979      	ldrh	r1, [r7, #10]
 8005a06:	697b      	ldr	r3, [r7, #20]
 8005a08:	9301      	str	r3, [sp, #4]
 8005a0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a0c:	9300      	str	r3, [sp, #0]
 8005a0e:	4603      	mov	r3, r0
 8005a10:	68f8      	ldr	r0, [r7, #12]
 8005a12:	f000 fad3 	bl	8005fbc <I2C_RequestMemoryRead>
 8005a16:	4603      	mov	r3, r0
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d005      	beq.n	8005a28 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	2200      	movs	r2, #0
 8005a20:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8005a24:	2301      	movs	r3, #1
 8005a26:	e0ad      	b.n	8005b84 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005a2c:	b29b      	uxth	r3, r3
 8005a2e:	2bff      	cmp	r3, #255	@ 0xff
 8005a30:	d90e      	bls.n	8005a50 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	22ff      	movs	r2, #255	@ 0xff
 8005a36:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005a3c:	b2da      	uxtb	r2, r3
 8005a3e:	8979      	ldrh	r1, [r7, #10]
 8005a40:	4b52      	ldr	r3, [pc, #328]	@ (8005b8c <HAL_I2C_Mem_Read+0x22c>)
 8005a42:	9300      	str	r3, [sp, #0]
 8005a44:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005a48:	68f8      	ldr	r0, [r7, #12]
 8005a4a:	f001 f8db 	bl	8006c04 <I2C_TransferConfig>
 8005a4e:	e00f      	b.n	8005a70 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005a54:	b29a      	uxth	r2, r3
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005a5e:	b2da      	uxtb	r2, r3
 8005a60:	8979      	ldrh	r1, [r7, #10]
 8005a62:	4b4a      	ldr	r3, [pc, #296]	@ (8005b8c <HAL_I2C_Mem_Read+0x22c>)
 8005a64:	9300      	str	r3, [sp, #0]
 8005a66:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005a6a:	68f8      	ldr	r0, [r7, #12]
 8005a6c:	f001 f8ca 	bl	8006c04 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8005a70:	697b      	ldr	r3, [r7, #20]
 8005a72:	9300      	str	r3, [sp, #0]
 8005a74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a76:	2200      	movs	r2, #0
 8005a78:	2104      	movs	r1, #4
 8005a7a:	68f8      	ldr	r0, [r7, #12]
 8005a7c:	f000 feff 	bl	800687e <I2C_WaitOnFlagUntilTimeout>
 8005a80:	4603      	mov	r3, r0
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d001      	beq.n	8005a8a <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8005a86:	2301      	movs	r3, #1
 8005a88:	e07c      	b.n	8005b84 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a94:	b2d2      	uxtb	r2, r2
 8005a96:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a9c:	1c5a      	adds	r2, r3, #1
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005aa6:	3b01      	subs	r3, #1
 8005aa8:	b29a      	uxth	r2, r3
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005ab2:	b29b      	uxth	r3, r3
 8005ab4:	3b01      	subs	r3, #1
 8005ab6:	b29a      	uxth	r2, r3
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005ac0:	b29b      	uxth	r3, r3
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d034      	beq.n	8005b30 <HAL_I2C_Mem_Read+0x1d0>
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d130      	bne.n	8005b30 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005ace:	697b      	ldr	r3, [r7, #20]
 8005ad0:	9300      	str	r3, [sp, #0]
 8005ad2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ad4:	2200      	movs	r2, #0
 8005ad6:	2180      	movs	r1, #128	@ 0x80
 8005ad8:	68f8      	ldr	r0, [r7, #12]
 8005ada:	f000 fed0 	bl	800687e <I2C_WaitOnFlagUntilTimeout>
 8005ade:	4603      	mov	r3, r0
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d001      	beq.n	8005ae8 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8005ae4:	2301      	movs	r3, #1
 8005ae6:	e04d      	b.n	8005b84 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005aec:	b29b      	uxth	r3, r3
 8005aee:	2bff      	cmp	r3, #255	@ 0xff
 8005af0:	d90e      	bls.n	8005b10 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	22ff      	movs	r2, #255	@ 0xff
 8005af6:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005afc:	b2da      	uxtb	r2, r3
 8005afe:	8979      	ldrh	r1, [r7, #10]
 8005b00:	2300      	movs	r3, #0
 8005b02:	9300      	str	r3, [sp, #0]
 8005b04:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005b08:	68f8      	ldr	r0, [r7, #12]
 8005b0a:	f001 f87b 	bl	8006c04 <I2C_TransferConfig>
 8005b0e:	e00f      	b.n	8005b30 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005b14:	b29a      	uxth	r2, r3
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005b1e:	b2da      	uxtb	r2, r3
 8005b20:	8979      	ldrh	r1, [r7, #10]
 8005b22:	2300      	movs	r3, #0
 8005b24:	9300      	str	r3, [sp, #0]
 8005b26:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005b2a:	68f8      	ldr	r0, [r7, #12]
 8005b2c:	f001 f86a 	bl	8006c04 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005b34:	b29b      	uxth	r3, r3
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d19a      	bne.n	8005a70 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005b3a:	697a      	ldr	r2, [r7, #20]
 8005b3c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005b3e:	68f8      	ldr	r0, [r7, #12]
 8005b40:	f000 ff3d 	bl	80069be <I2C_WaitOnSTOPFlagUntilTimeout>
 8005b44:	4603      	mov	r3, r0
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d001      	beq.n	8005b4e <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8005b4a:	2301      	movs	r3, #1
 8005b4c:	e01a      	b.n	8005b84 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	2220      	movs	r2, #32
 8005b54:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	6859      	ldr	r1, [r3, #4]
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	681a      	ldr	r2, [r3, #0]
 8005b60:	4b0b      	ldr	r3, [pc, #44]	@ (8005b90 <HAL_I2C_Mem_Read+0x230>)
 8005b62:	400b      	ands	r3, r1
 8005b64:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	2220      	movs	r2, #32
 8005b6a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	2200      	movs	r2, #0
 8005b72:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	2200      	movs	r2, #0
 8005b7a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005b7e:	2300      	movs	r3, #0
 8005b80:	e000      	b.n	8005b84 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8005b82:	2302      	movs	r3, #2
  }
}
 8005b84:	4618      	mov	r0, r3
 8005b86:	3718      	adds	r7, #24
 8005b88:	46bd      	mov	sp, r7
 8005b8a:	bd80      	pop	{r7, pc}
 8005b8c:	80002400 	.word	0x80002400
 8005b90:	fe00e800 	.word	0xfe00e800

08005b94 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8005b94:	b580      	push	{r7, lr}
 8005b96:	b084      	sub	sp, #16
 8005b98:	af00      	add	r7, sp, #0
 8005b9a:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	699b      	ldr	r3, [r3, #24]
 8005ba2:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d005      	beq.n	8005bc0 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005bb8:	68ba      	ldr	r2, [r7, #8]
 8005bba:	68f9      	ldr	r1, [r7, #12]
 8005bbc:	6878      	ldr	r0, [r7, #4]
 8005bbe:	4798      	blx	r3
  }
}
 8005bc0:	bf00      	nop
 8005bc2:	3710      	adds	r7, #16
 8005bc4:	46bd      	mov	sp, r7
 8005bc6:	bd80      	pop	{r7, pc}

08005bc8 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8005bc8:	b580      	push	{r7, lr}
 8005bca:	b086      	sub	sp, #24
 8005bcc:	af00      	add	r7, sp, #0
 8005bce:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	699b      	ldr	r3, [r3, #24]
 8005bd6:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8005be0:	697b      	ldr	r3, [r7, #20]
 8005be2:	0a1b      	lsrs	r3, r3, #8
 8005be4:	f003 0301 	and.w	r3, r3, #1
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d010      	beq.n	8005c0e <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8005bec:	693b      	ldr	r3, [r7, #16]
 8005bee:	09db      	lsrs	r3, r3, #7
 8005bf0:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d00a      	beq.n	8005c0e <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005bfc:	f043 0201 	orr.w	r2, r3, #1
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005c0c:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8005c0e:	697b      	ldr	r3, [r7, #20]
 8005c10:	0a9b      	lsrs	r3, r3, #10
 8005c12:	f003 0301 	and.w	r3, r3, #1
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d010      	beq.n	8005c3c <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8005c1a:	693b      	ldr	r3, [r7, #16]
 8005c1c:	09db      	lsrs	r3, r3, #7
 8005c1e:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d00a      	beq.n	8005c3c <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005c2a:	f043 0208 	orr.w	r2, r3, #8
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8005c3a:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8005c3c:	697b      	ldr	r3, [r7, #20]
 8005c3e:	0a5b      	lsrs	r3, r3, #9
 8005c40:	f003 0301 	and.w	r3, r3, #1
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d010      	beq.n	8005c6a <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8005c48:	693b      	ldr	r3, [r7, #16]
 8005c4a:	09db      	lsrs	r3, r3, #7
 8005c4c:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d00a      	beq.n	8005c6a <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005c58:	f043 0202 	orr.w	r2, r3, #2
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005c68:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005c6e:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	f003 030b 	and.w	r3, r3, #11
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d003      	beq.n	8005c82 <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 8005c7a:	68f9      	ldr	r1, [r7, #12]
 8005c7c:	6878      	ldr	r0, [r7, #4]
 8005c7e:	f000 fca5 	bl	80065cc <I2C_ITError>
  }
}
 8005c82:	bf00      	nop
 8005c84:	3718      	adds	r7, #24
 8005c86:	46bd      	mov	sp, r7
 8005c88:	bd80      	pop	{r7, pc}

08005c8a <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005c8a:	b480      	push	{r7}
 8005c8c:	b083      	sub	sp, #12
 8005c8e:	af00      	add	r7, sp, #0
 8005c90:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8005c92:	bf00      	nop
 8005c94:	370c      	adds	r7, #12
 8005c96:	46bd      	mov	sp, r7
 8005c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c9c:	4770      	bx	lr

08005c9e <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005c9e:	b480      	push	{r7}
 8005ca0:	b083      	sub	sp, #12
 8005ca2:	af00      	add	r7, sp, #0
 8005ca4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8005ca6:	bf00      	nop
 8005ca8:	370c      	adds	r7, #12
 8005caa:	46bd      	mov	sp, r7
 8005cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb0:	4770      	bx	lr

08005cb2 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8005cb2:	b480      	push	{r7}
 8005cb4:	b083      	sub	sp, #12
 8005cb6:	af00      	add	r7, sp, #0
 8005cb8:	6078      	str	r0, [r7, #4]
 8005cba:	460b      	mov	r3, r1
 8005cbc:	70fb      	strb	r3, [r7, #3]
 8005cbe:	4613      	mov	r3, r2
 8005cc0:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8005cc2:	bf00      	nop
 8005cc4:	370c      	adds	r7, #12
 8005cc6:	46bd      	mov	sp, r7
 8005cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ccc:	4770      	bx	lr

08005cce <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005cce:	b480      	push	{r7}
 8005cd0:	b083      	sub	sp, #12
 8005cd2:	af00      	add	r7, sp, #0
 8005cd4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8005cd6:	bf00      	nop
 8005cd8:	370c      	adds	r7, #12
 8005cda:	46bd      	mov	sp, r7
 8005cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce0:	4770      	bx	lr

08005ce2 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8005ce2:	b480      	push	{r7}
 8005ce4:	b083      	sub	sp, #12
 8005ce6:	af00      	add	r7, sp, #0
 8005ce8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8005cea:	bf00      	nop
 8005cec:	370c      	adds	r7, #12
 8005cee:	46bd      	mov	sp, r7
 8005cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf4:	4770      	bx	lr

08005cf6 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005cf6:	b480      	push	{r7}
 8005cf8:	b083      	sub	sp, #12
 8005cfa:	af00      	add	r7, sp, #0
 8005cfc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8005cfe:	bf00      	nop
 8005d00:	370c      	adds	r7, #12
 8005d02:	46bd      	mov	sp, r7
 8005d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d08:	4770      	bx	lr

08005d0a <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8005d0a:	b580      	push	{r7, lr}
 8005d0c:	b086      	sub	sp, #24
 8005d0e:	af00      	add	r7, sp, #0
 8005d10:	60f8      	str	r0, [r7, #12]
 8005d12:	60b9      	str	r1, [r7, #8]
 8005d14:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d1a:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8005d1c:	68bb      	ldr	r3, [r7, #8]
 8005d1e:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005d26:	2b01      	cmp	r3, #1
 8005d28:	d101      	bne.n	8005d2e <I2C_Slave_ISR_IT+0x24>
 8005d2a:	2302      	movs	r3, #2
 8005d2c:	e0ed      	b.n	8005f0a <I2C_Slave_ISR_IT+0x200>
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	2201      	movs	r2, #1
 8005d32:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8005d36:	693b      	ldr	r3, [r7, #16]
 8005d38:	095b      	lsrs	r3, r3, #5
 8005d3a:	f003 0301 	and.w	r3, r3, #1
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d00a      	beq.n	8005d58 <I2C_Slave_ISR_IT+0x4e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	095b      	lsrs	r3, r3, #5
 8005d46:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d004      	beq.n	8005d58 <I2C_Slave_ISR_IT+0x4e>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8005d4e:	6939      	ldr	r1, [r7, #16]
 8005d50:	68f8      	ldr	r0, [r7, #12]
 8005d52:	f000 fa69 	bl	8006228 <I2C_ITSlaveCplt>
 8005d56:	e0d3      	b.n	8005f00 <I2C_Slave_ISR_IT+0x1f6>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8005d58:	693b      	ldr	r3, [r7, #16]
 8005d5a:	091b      	lsrs	r3, r3, #4
 8005d5c:	f003 0301 	and.w	r3, r3, #1
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d04d      	beq.n	8005e00 <I2C_Slave_ISR_IT+0xf6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	091b      	lsrs	r3, r3, #4
 8005d68:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d047      	beq.n	8005e00 <I2C_Slave_ISR_IT+0xf6>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005d74:	b29b      	uxth	r3, r3
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d128      	bne.n	8005dcc <I2C_Slave_ISR_IT+0xc2>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005d80:	b2db      	uxtb	r3, r3
 8005d82:	2b28      	cmp	r3, #40	@ 0x28
 8005d84:	d108      	bne.n	8005d98 <I2C_Slave_ISR_IT+0x8e>
 8005d86:	697b      	ldr	r3, [r7, #20]
 8005d88:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005d8c:	d104      	bne.n	8005d98 <I2C_Slave_ISR_IT+0x8e>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8005d8e:	6939      	ldr	r1, [r7, #16]
 8005d90:	68f8      	ldr	r0, [r7, #12]
 8005d92:	f000 fbc5 	bl	8006520 <I2C_ITListenCplt>
 8005d96:	e032      	b.n	8005dfe <I2C_Slave_ISR_IT+0xf4>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005d9e:	b2db      	uxtb	r3, r3
 8005da0:	2b29      	cmp	r3, #41	@ 0x29
 8005da2:	d10e      	bne.n	8005dc2 <I2C_Slave_ISR_IT+0xb8>
 8005da4:	697b      	ldr	r3, [r7, #20]
 8005da6:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005daa:	d00a      	beq.n	8005dc2 <I2C_Slave_ISR_IT+0xb8>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	2210      	movs	r2, #16
 8005db2:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8005db4:	68f8      	ldr	r0, [r7, #12]
 8005db6:	f000 fd20 	bl	80067fa <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8005dba:	68f8      	ldr	r0, [r7, #12]
 8005dbc:	f000 f9d6 	bl	800616c <I2C_ITSlaveSeqCplt>
 8005dc0:	e01d      	b.n	8005dfe <I2C_Slave_ISR_IT+0xf4>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	2210      	movs	r2, #16
 8005dc8:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8005dca:	e096      	b.n	8005efa <I2C_Slave_ISR_IT+0x1f0>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	2210      	movs	r2, #16
 8005dd2:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005dd8:	f043 0204 	orr.w	r2, r3, #4
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8005de0:	697b      	ldr	r3, [r7, #20]
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d004      	beq.n	8005df0 <I2C_Slave_ISR_IT+0xe6>
 8005de6:	697b      	ldr	r3, [r7, #20]
 8005de8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005dec:	f040 8085 	bne.w	8005efa <I2C_Slave_ISR_IT+0x1f0>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005df4:	4619      	mov	r1, r3
 8005df6:	68f8      	ldr	r0, [r7, #12]
 8005df8:	f000 fbe8 	bl	80065cc <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8005dfc:	e07d      	b.n	8005efa <I2C_Slave_ISR_IT+0x1f0>
 8005dfe:	e07c      	b.n	8005efa <I2C_Slave_ISR_IT+0x1f0>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8005e00:	693b      	ldr	r3, [r7, #16]
 8005e02:	089b      	lsrs	r3, r3, #2
 8005e04:	f003 0301 	and.w	r3, r3, #1
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d030      	beq.n	8005e6e <I2C_Slave_ISR_IT+0x164>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	089b      	lsrs	r3, r3, #2
 8005e10:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d02a      	beq.n	8005e6e <I2C_Slave_ISR_IT+0x164>
  {
    if (hi2c->XferCount > 0U)
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005e1c:	b29b      	uxth	r3, r3
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d018      	beq.n	8005e54 <I2C_Slave_ISR_IT+0x14a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e2c:	b2d2      	uxtb	r2, r2
 8005e2e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e34:	1c5a      	adds	r2, r3, #1
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005e3e:	3b01      	subs	r3, #1
 8005e40:	b29a      	uxth	r2, r3
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005e4a:	b29b      	uxth	r3, r3
 8005e4c:	3b01      	subs	r3, #1
 8005e4e:	b29a      	uxth	r2, r3
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005e58:	b29b      	uxth	r3, r3
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d14f      	bne.n	8005efe <I2C_Slave_ISR_IT+0x1f4>
 8005e5e:	697b      	ldr	r3, [r7, #20]
 8005e60:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005e64:	d04b      	beq.n	8005efe <I2C_Slave_ISR_IT+0x1f4>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8005e66:	68f8      	ldr	r0, [r7, #12]
 8005e68:	f000 f980 	bl	800616c <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8005e6c:	e047      	b.n	8005efe <I2C_Slave_ISR_IT+0x1f4>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8005e6e:	693b      	ldr	r3, [r7, #16]
 8005e70:	08db      	lsrs	r3, r3, #3
 8005e72:	f003 0301 	and.w	r3, r3, #1
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d00a      	beq.n	8005e90 <I2C_Slave_ISR_IT+0x186>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	08db      	lsrs	r3, r3, #3
 8005e7e:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d004      	beq.n	8005e90 <I2C_Slave_ISR_IT+0x186>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8005e86:	6939      	ldr	r1, [r7, #16]
 8005e88:	68f8      	ldr	r0, [r7, #12]
 8005e8a:	f000 f8eb 	bl	8006064 <I2C_ITAddrCplt>
 8005e8e:	e037      	b.n	8005f00 <I2C_Slave_ISR_IT+0x1f6>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8005e90:	693b      	ldr	r3, [r7, #16]
 8005e92:	085b      	lsrs	r3, r3, #1
 8005e94:	f003 0301 	and.w	r3, r3, #1
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d031      	beq.n	8005f00 <I2C_Slave_ISR_IT+0x1f6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	085b      	lsrs	r3, r3, #1
 8005ea0:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d02b      	beq.n	8005f00 <I2C_Slave_ISR_IT+0x1f6>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005eac:	b29b      	uxth	r3, r3
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d018      	beq.n	8005ee4 <I2C_Slave_ISR_IT+0x1da>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005eb6:	781a      	ldrb	r2, [r3, #0]
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ec2:	1c5a      	adds	r2, r3, #1
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005ecc:	b29b      	uxth	r3, r3
 8005ece:	3b01      	subs	r3, #1
 8005ed0:	b29a      	uxth	r2, r3
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005eda:	3b01      	subs	r3, #1
 8005edc:	b29a      	uxth	r2, r3
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	851a      	strh	r2, [r3, #40]	@ 0x28
 8005ee2:	e00d      	b.n	8005f00 <I2C_Slave_ISR_IT+0x1f6>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8005ee4:	697b      	ldr	r3, [r7, #20]
 8005ee6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005eea:	d002      	beq.n	8005ef2 <I2C_Slave_ISR_IT+0x1e8>
 8005eec:	697b      	ldr	r3, [r7, #20]
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d106      	bne.n	8005f00 <I2C_Slave_ISR_IT+0x1f6>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8005ef2:	68f8      	ldr	r0, [r7, #12]
 8005ef4:	f000 f93a 	bl	800616c <I2C_ITSlaveSeqCplt>
 8005ef8:	e002      	b.n	8005f00 <I2C_Slave_ISR_IT+0x1f6>
    if (hi2c->XferCount == 0U)
 8005efa:	bf00      	nop
 8005efc:	e000      	b.n	8005f00 <I2C_Slave_ISR_IT+0x1f6>
    if ((hi2c->XferCount == 0U) && \
 8005efe:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	2200      	movs	r2, #0
 8005f04:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8005f08:	2300      	movs	r3, #0
}
 8005f0a:	4618      	mov	r0, r3
 8005f0c:	3718      	adds	r7, #24
 8005f0e:	46bd      	mov	sp, r7
 8005f10:	bd80      	pop	{r7, pc}
	...

08005f14 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8005f14:	b580      	push	{r7, lr}
 8005f16:	b086      	sub	sp, #24
 8005f18:	af02      	add	r7, sp, #8
 8005f1a:	60f8      	str	r0, [r7, #12]
 8005f1c:	4608      	mov	r0, r1
 8005f1e:	4611      	mov	r1, r2
 8005f20:	461a      	mov	r2, r3
 8005f22:	4603      	mov	r3, r0
 8005f24:	817b      	strh	r3, [r7, #10]
 8005f26:	460b      	mov	r3, r1
 8005f28:	813b      	strh	r3, [r7, #8]
 8005f2a:	4613      	mov	r3, r2
 8005f2c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8005f2e:	88fb      	ldrh	r3, [r7, #6]
 8005f30:	b2da      	uxtb	r2, r3
 8005f32:	8979      	ldrh	r1, [r7, #10]
 8005f34:	4b20      	ldr	r3, [pc, #128]	@ (8005fb8 <I2C_RequestMemoryWrite+0xa4>)
 8005f36:	9300      	str	r3, [sp, #0]
 8005f38:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005f3c:	68f8      	ldr	r0, [r7, #12]
 8005f3e:	f000 fe61 	bl	8006c04 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005f42:	69fa      	ldr	r2, [r7, #28]
 8005f44:	69b9      	ldr	r1, [r7, #24]
 8005f46:	68f8      	ldr	r0, [r7, #12]
 8005f48:	f000 fcf2 	bl	8006930 <I2C_WaitOnTXISFlagUntilTimeout>
 8005f4c:	4603      	mov	r3, r0
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d001      	beq.n	8005f56 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8005f52:	2301      	movs	r3, #1
 8005f54:	e02c      	b.n	8005fb0 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005f56:	88fb      	ldrh	r3, [r7, #6]
 8005f58:	2b01      	cmp	r3, #1
 8005f5a:	d105      	bne.n	8005f68 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005f5c:	893b      	ldrh	r3, [r7, #8]
 8005f5e:	b2da      	uxtb	r2, r3
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	629a      	str	r2, [r3, #40]	@ 0x28
 8005f66:	e015      	b.n	8005f94 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005f68:	893b      	ldrh	r3, [r7, #8]
 8005f6a:	0a1b      	lsrs	r3, r3, #8
 8005f6c:	b29b      	uxth	r3, r3
 8005f6e:	b2da      	uxtb	r2, r3
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005f76:	69fa      	ldr	r2, [r7, #28]
 8005f78:	69b9      	ldr	r1, [r7, #24]
 8005f7a:	68f8      	ldr	r0, [r7, #12]
 8005f7c:	f000 fcd8 	bl	8006930 <I2C_WaitOnTXISFlagUntilTimeout>
 8005f80:	4603      	mov	r3, r0
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d001      	beq.n	8005f8a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8005f86:	2301      	movs	r3, #1
 8005f88:	e012      	b.n	8005fb0 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005f8a:	893b      	ldrh	r3, [r7, #8]
 8005f8c:	b2da      	uxtb	r2, r3
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8005f94:	69fb      	ldr	r3, [r7, #28]
 8005f96:	9300      	str	r3, [sp, #0]
 8005f98:	69bb      	ldr	r3, [r7, #24]
 8005f9a:	2200      	movs	r2, #0
 8005f9c:	2180      	movs	r1, #128	@ 0x80
 8005f9e:	68f8      	ldr	r0, [r7, #12]
 8005fa0:	f000 fc6d 	bl	800687e <I2C_WaitOnFlagUntilTimeout>
 8005fa4:	4603      	mov	r3, r0
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d001      	beq.n	8005fae <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8005faa:	2301      	movs	r3, #1
 8005fac:	e000      	b.n	8005fb0 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8005fae:	2300      	movs	r3, #0
}
 8005fb0:	4618      	mov	r0, r3
 8005fb2:	3710      	adds	r7, #16
 8005fb4:	46bd      	mov	sp, r7
 8005fb6:	bd80      	pop	{r7, pc}
 8005fb8:	80002000 	.word	0x80002000

08005fbc <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8005fbc:	b580      	push	{r7, lr}
 8005fbe:	b086      	sub	sp, #24
 8005fc0:	af02      	add	r7, sp, #8
 8005fc2:	60f8      	str	r0, [r7, #12]
 8005fc4:	4608      	mov	r0, r1
 8005fc6:	4611      	mov	r1, r2
 8005fc8:	461a      	mov	r2, r3
 8005fca:	4603      	mov	r3, r0
 8005fcc:	817b      	strh	r3, [r7, #10]
 8005fce:	460b      	mov	r3, r1
 8005fd0:	813b      	strh	r3, [r7, #8]
 8005fd2:	4613      	mov	r3, r2
 8005fd4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8005fd6:	88fb      	ldrh	r3, [r7, #6]
 8005fd8:	b2da      	uxtb	r2, r3
 8005fda:	8979      	ldrh	r1, [r7, #10]
 8005fdc:	4b20      	ldr	r3, [pc, #128]	@ (8006060 <I2C_RequestMemoryRead+0xa4>)
 8005fde:	9300      	str	r3, [sp, #0]
 8005fe0:	2300      	movs	r3, #0
 8005fe2:	68f8      	ldr	r0, [r7, #12]
 8005fe4:	f000 fe0e 	bl	8006c04 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005fe8:	69fa      	ldr	r2, [r7, #28]
 8005fea:	69b9      	ldr	r1, [r7, #24]
 8005fec:	68f8      	ldr	r0, [r7, #12]
 8005fee:	f000 fc9f 	bl	8006930 <I2C_WaitOnTXISFlagUntilTimeout>
 8005ff2:	4603      	mov	r3, r0
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d001      	beq.n	8005ffc <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8005ff8:	2301      	movs	r3, #1
 8005ffa:	e02c      	b.n	8006056 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005ffc:	88fb      	ldrh	r3, [r7, #6]
 8005ffe:	2b01      	cmp	r3, #1
 8006000:	d105      	bne.n	800600e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006002:	893b      	ldrh	r3, [r7, #8]
 8006004:	b2da      	uxtb	r2, r3
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	629a      	str	r2, [r3, #40]	@ 0x28
 800600c:	e015      	b.n	800603a <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800600e:	893b      	ldrh	r3, [r7, #8]
 8006010:	0a1b      	lsrs	r3, r3, #8
 8006012:	b29b      	uxth	r3, r3
 8006014:	b2da      	uxtb	r2, r3
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800601c:	69fa      	ldr	r2, [r7, #28]
 800601e:	69b9      	ldr	r1, [r7, #24]
 8006020:	68f8      	ldr	r0, [r7, #12]
 8006022:	f000 fc85 	bl	8006930 <I2C_WaitOnTXISFlagUntilTimeout>
 8006026:	4603      	mov	r3, r0
 8006028:	2b00      	cmp	r3, #0
 800602a:	d001      	beq.n	8006030 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800602c:	2301      	movs	r3, #1
 800602e:	e012      	b.n	8006056 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006030:	893b      	ldrh	r3, [r7, #8]
 8006032:	b2da      	uxtb	r2, r3
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800603a:	69fb      	ldr	r3, [r7, #28]
 800603c:	9300      	str	r3, [sp, #0]
 800603e:	69bb      	ldr	r3, [r7, #24]
 8006040:	2200      	movs	r2, #0
 8006042:	2140      	movs	r1, #64	@ 0x40
 8006044:	68f8      	ldr	r0, [r7, #12]
 8006046:	f000 fc1a 	bl	800687e <I2C_WaitOnFlagUntilTimeout>
 800604a:	4603      	mov	r3, r0
 800604c:	2b00      	cmp	r3, #0
 800604e:	d001      	beq.n	8006054 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8006050:	2301      	movs	r3, #1
 8006052:	e000      	b.n	8006056 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8006054:	2300      	movs	r3, #0
}
 8006056:	4618      	mov	r0, r3
 8006058:	3710      	adds	r7, #16
 800605a:	46bd      	mov	sp, r7
 800605c:	bd80      	pop	{r7, pc}
 800605e:	bf00      	nop
 8006060:	80002000 	.word	0x80002000

08006064 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8006064:	b580      	push	{r7, lr}
 8006066:	b084      	sub	sp, #16
 8006068:	af00      	add	r7, sp, #0
 800606a:	6078      	str	r0, [r7, #4]
 800606c:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006074:	b2db      	uxtb	r3, r3
 8006076:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800607a:	2b28      	cmp	r3, #40	@ 0x28
 800607c:	d16a      	bne.n	8006154 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	699b      	ldr	r3, [r3, #24]
 8006084:	0c1b      	lsrs	r3, r3, #16
 8006086:	b2db      	uxtb	r3, r3
 8006088:	f003 0301 	and.w	r3, r3, #1
 800608c:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	699b      	ldr	r3, [r3, #24]
 8006094:	0c1b      	lsrs	r3, r3, #16
 8006096:	b29b      	uxth	r3, r3
 8006098:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 800609c:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	689b      	ldr	r3, [r3, #8]
 80060a4:	b29b      	uxth	r3, r3
 80060a6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80060aa:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	68db      	ldr	r3, [r3, #12]
 80060b2:	b29b      	uxth	r3, r3
 80060b4:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 80060b8:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	68db      	ldr	r3, [r3, #12]
 80060be:	2b02      	cmp	r3, #2
 80060c0:	d138      	bne.n	8006134 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 80060c2:	897b      	ldrh	r3, [r7, #10]
 80060c4:	09db      	lsrs	r3, r3, #7
 80060c6:	b29a      	uxth	r2, r3
 80060c8:	89bb      	ldrh	r3, [r7, #12]
 80060ca:	4053      	eors	r3, r2
 80060cc:	b29b      	uxth	r3, r3
 80060ce:	f003 0306 	and.w	r3, r3, #6
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d11c      	bne.n	8006110 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 80060d6:	897b      	ldrh	r3, [r7, #10]
 80060d8:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80060de:	1c5a      	adds	r2, r3, #1
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80060e8:	2b02      	cmp	r3, #2
 80060ea:	d13b      	bne.n	8006164 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	2200      	movs	r2, #0
 80060f0:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	2208      	movs	r2, #8
 80060f8:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	2200      	movs	r2, #0
 80060fe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8006102:	89ba      	ldrh	r2, [r7, #12]
 8006104:	7bfb      	ldrb	r3, [r7, #15]
 8006106:	4619      	mov	r1, r3
 8006108:	6878      	ldr	r0, [r7, #4]
 800610a:	f7ff fdd2 	bl	8005cb2 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800610e:	e029      	b.n	8006164 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8006110:	893b      	ldrh	r3, [r7, #8]
 8006112:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8006114:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8006118:	6878      	ldr	r0, [r7, #4]
 800611a:	f000 fda5 	bl	8006c68 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	2200      	movs	r2, #0
 8006122:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8006126:	89ba      	ldrh	r2, [r7, #12]
 8006128:	7bfb      	ldrb	r3, [r7, #15]
 800612a:	4619      	mov	r1, r3
 800612c:	6878      	ldr	r0, [r7, #4]
 800612e:	f7ff fdc0 	bl	8005cb2 <HAL_I2C_AddrCallback>
}
 8006132:	e017      	b.n	8006164 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8006134:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8006138:	6878      	ldr	r0, [r7, #4]
 800613a:	f000 fd95 	bl	8006c68 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	2200      	movs	r2, #0
 8006142:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8006146:	89ba      	ldrh	r2, [r7, #12]
 8006148:	7bfb      	ldrb	r3, [r7, #15]
 800614a:	4619      	mov	r1, r3
 800614c:	6878      	ldr	r0, [r7, #4]
 800614e:	f7ff fdb0 	bl	8005cb2 <HAL_I2C_AddrCallback>
}
 8006152:	e007      	b.n	8006164 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	2208      	movs	r2, #8
 800615a:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	2200      	movs	r2, #0
 8006160:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 8006164:	bf00      	nop
 8006166:	3710      	adds	r7, #16
 8006168:	46bd      	mov	sp, r7
 800616a:	bd80      	pop	{r7, pc}

0800616c <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800616c:	b580      	push	{r7, lr}
 800616e:	b084      	sub	sp, #16
 8006170:	af00      	add	r7, sp, #0
 8006172:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	2200      	movs	r2, #0
 8006180:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

#if defined(HAL_DMA_MODULE_ENABLED)
  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	0b9b      	lsrs	r3, r3, #14
 8006188:	f003 0301 	and.w	r3, r3, #1
 800618c:	2b00      	cmp	r3, #0
 800618e:	d008      	beq.n	80061a2 <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	681a      	ldr	r2, [r3, #0]
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800619e:	601a      	str	r2, [r3, #0]
 80061a0:	e00d      	b.n	80061be <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	0bdb      	lsrs	r3, r3, #15
 80061a6:	f003 0301 	and.w	r3, r3, #1
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d007      	beq.n	80061be <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	681a      	ldr	r2, [r3, #0]
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80061bc:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80061c4:	b2db      	uxtb	r3, r3
 80061c6:	2b29      	cmp	r3, #41	@ 0x29
 80061c8:	d112      	bne.n	80061f0 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	2228      	movs	r2, #40	@ 0x28
 80061ce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	2221      	movs	r2, #33	@ 0x21
 80061d6:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80061d8:	2101      	movs	r1, #1
 80061da:	6878      	ldr	r0, [r7, #4]
 80061dc:	f000 fd44 	bl	8006c68 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	2200      	movs	r2, #0
 80061e4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80061e8:	6878      	ldr	r0, [r7, #4]
 80061ea:	f7ff fd4e 	bl	8005c8a <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 80061ee:	e017      	b.n	8006220 <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80061f6:	b2db      	uxtb	r3, r3
 80061f8:	2b2a      	cmp	r3, #42	@ 0x2a
 80061fa:	d111      	bne.n	8006220 <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	2228      	movs	r2, #40	@ 0x28
 8006200:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	2222      	movs	r2, #34	@ 0x22
 8006208:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800620a:	2102      	movs	r1, #2
 800620c:	6878      	ldr	r0, [r7, #4]
 800620e:	f000 fd2b 	bl	8006c68 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	2200      	movs	r2, #0
 8006216:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800621a:	6878      	ldr	r0, [r7, #4]
 800621c:	f7ff fd3f 	bl	8005c9e <HAL_I2C_SlaveRxCpltCallback>
}
 8006220:	bf00      	nop
 8006222:	3710      	adds	r7, #16
 8006224:	46bd      	mov	sp, r7
 8006226:	bd80      	pop	{r7, pc}

08006228 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8006228:	b590      	push	{r4, r7, lr}
 800622a:	b087      	sub	sp, #28
 800622c:	af00      	add	r7, sp, #0
 800622e:	6078      	str	r0, [r7, #4]
 8006230:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 800623a:	683b      	ldr	r3, [r7, #0]
 800623c:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006242:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800624a:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	2220      	movs	r2, #32
 8006252:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8006254:	7afb      	ldrb	r3, [r7, #11]
 8006256:	2b21      	cmp	r3, #33	@ 0x21
 8006258:	d002      	beq.n	8006260 <I2C_ITSlaveCplt+0x38>
 800625a:	7afb      	ldrb	r3, [r7, #11]
 800625c:	2b29      	cmp	r3, #41	@ 0x29
 800625e:	d108      	bne.n	8006272 <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8006260:	f248 0101 	movw	r1, #32769	@ 0x8001
 8006264:	6878      	ldr	r0, [r7, #4]
 8006266:	f000 fcff 	bl	8006c68 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	2221      	movs	r2, #33	@ 0x21
 800626e:	631a      	str	r2, [r3, #48]	@ 0x30
 8006270:	e019      	b.n	80062a6 <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8006272:	7afb      	ldrb	r3, [r7, #11]
 8006274:	2b22      	cmp	r3, #34	@ 0x22
 8006276:	d002      	beq.n	800627e <I2C_ITSlaveCplt+0x56>
 8006278:	7afb      	ldrb	r3, [r7, #11]
 800627a:	2b2a      	cmp	r3, #42	@ 0x2a
 800627c:	d108      	bne.n	8006290 <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 800627e:	f248 0102 	movw	r1, #32770	@ 0x8002
 8006282:	6878      	ldr	r0, [r7, #4]
 8006284:	f000 fcf0 	bl	8006c68 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	2222      	movs	r2, #34	@ 0x22
 800628c:	631a      	str	r2, [r3, #48]	@ 0x30
 800628e:	e00a      	b.n	80062a6 <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 8006290:	7afb      	ldrb	r3, [r7, #11]
 8006292:	2b28      	cmp	r3, #40	@ 0x28
 8006294:	d107      	bne.n	80062a6 <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8006296:	f248 0103 	movw	r1, #32771	@ 0x8003
 800629a:	6878      	ldr	r0, [r7, #4]
 800629c:	f000 fce4 	bl	8006c68 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	2200      	movs	r2, #0
 80062a4:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	685a      	ldr	r2, [r3, #4]
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80062b4:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	6859      	ldr	r1, [r3, #4]
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681a      	ldr	r2, [r3, #0]
 80062c0:	4b95      	ldr	r3, [pc, #596]	@ (8006518 <I2C_ITSlaveCplt+0x2f0>)
 80062c2:	400b      	ands	r3, r1
 80062c4:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 80062c6:	6878      	ldr	r0, [r7, #4]
 80062c8:	f000 fa97 	bl	80067fa <I2C_Flush_TXDR>

#if defined(HAL_DMA_MODULE_ENABLED)
  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80062cc:	693b      	ldr	r3, [r7, #16]
 80062ce:	0b9b      	lsrs	r3, r3, #14
 80062d0:	f003 0301 	and.w	r3, r3, #1
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d01c      	beq.n	8006312 <I2C_ITSlaveCplt+0xea>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	681a      	ldr	r2, [r3, #0]
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80062e6:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d032      	beq.n	8006356 <I2C_ITSlaveCplt+0x12e>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80062f8:	b29c      	uxth	r4, r3
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80062fe:	4618      	mov	r0, r3
 8006300:	f7fe feb3 	bl	800506a <HAL_DMAEx_GetFifoLevel>
 8006304:	4603      	mov	r3, r0
 8006306:	b29b      	uxth	r3, r3
 8006308:	4423      	add	r3, r4
 800630a:	b29a      	uxth	r2, r3
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8006310:	e021      	b.n	8006356 <I2C_ITSlaveCplt+0x12e>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8006312:	693b      	ldr	r3, [r7, #16]
 8006314:	0bdb      	lsrs	r3, r3, #15
 8006316:	f003 0301 	and.w	r3, r3, #1
 800631a:	2b00      	cmp	r3, #0
 800631c:	d01b      	beq.n	8006356 <I2C_ITSlaveCplt+0x12e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	681a      	ldr	r2, [r3, #0]
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800632c:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006332:	2b00      	cmp	r3, #0
 8006334:	d00f      	beq.n	8006356 <I2C_ITSlaveCplt+0x12e>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800633e:	b29c      	uxth	r4, r3
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006344:	4618      	mov	r0, r3
 8006346:	f7fe fe90 	bl	800506a <HAL_DMAEx_GetFifoLevel>
 800634a:	4603      	mov	r3, r0
 800634c:	b29b      	uxth	r3, r3
 800634e:	4423      	add	r3, r4
 8006350:	b29a      	uxth	r2, r3
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	855a      	strh	r2, [r3, #42]	@ 0x2a
    /* Do nothing */
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8006356:	697b      	ldr	r3, [r7, #20]
 8006358:	089b      	lsrs	r3, r3, #2
 800635a:	f003 0301 	and.w	r3, r3, #1
 800635e:	2b00      	cmp	r3, #0
 8006360:	d020      	beq.n	80063a4 <I2C_ITSlaveCplt+0x17c>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8006362:	697b      	ldr	r3, [r7, #20]
 8006364:	f023 0304 	bic.w	r3, r3, #4
 8006368:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006374:	b2d2      	uxtb	r2, r2
 8006376:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800637c:	1c5a      	adds	r2, r3, #1
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	625a      	str	r2, [r3, #36]	@ 0x24

    if (hi2c->XferSize > 0U)
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006386:	2b00      	cmp	r3, #0
 8006388:	d00c      	beq.n	80063a4 <I2C_ITSlaveCplt+0x17c>
    {
      hi2c->XferSize--;
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800638e:	3b01      	subs	r3, #1
 8006390:	b29a      	uxth	r2, r3
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800639a:	b29b      	uxth	r3, r3
 800639c:	3b01      	subs	r3, #1
 800639e:	b29a      	uxth	r2, r3
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80063a8:	b29b      	uxth	r3, r3
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d005      	beq.n	80063ba <I2C_ITSlaveCplt+0x192>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80063b2:	f043 0204 	orr.w	r2, r3, #4
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80063ba:	697b      	ldr	r3, [r7, #20]
 80063bc:	091b      	lsrs	r3, r3, #4
 80063be:	f003 0301 	and.w	r3, r3, #1
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d04a      	beq.n	800645c <I2C_ITSlaveCplt+0x234>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 80063c6:	693b      	ldr	r3, [r7, #16]
 80063c8:	091b      	lsrs	r3, r3, #4
 80063ca:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d044      	beq.n	800645c <I2C_ITSlaveCplt+0x234>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80063d6:	b29b      	uxth	r3, r3
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d128      	bne.n	800642e <I2C_ITSlaveCplt+0x206>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80063e2:	b2db      	uxtb	r3, r3
 80063e4:	2b28      	cmp	r3, #40	@ 0x28
 80063e6:	d108      	bne.n	80063fa <I2C_ITSlaveCplt+0x1d2>
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80063ee:	d104      	bne.n	80063fa <I2C_ITSlaveCplt+0x1d2>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80063f0:	6979      	ldr	r1, [r7, #20]
 80063f2:	6878      	ldr	r0, [r7, #4]
 80063f4:	f000 f894 	bl	8006520 <I2C_ITListenCplt>
 80063f8:	e030      	b.n	800645c <I2C_ITSlaveCplt+0x234>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006400:	b2db      	uxtb	r3, r3
 8006402:	2b29      	cmp	r3, #41	@ 0x29
 8006404:	d10e      	bne.n	8006424 <I2C_ITSlaveCplt+0x1fc>
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800640c:	d00a      	beq.n	8006424 <I2C_ITSlaveCplt+0x1fc>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	2210      	movs	r2, #16
 8006414:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8006416:	6878      	ldr	r0, [r7, #4]
 8006418:	f000 f9ef 	bl	80067fa <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800641c:	6878      	ldr	r0, [r7, #4]
 800641e:	f7ff fea5 	bl	800616c <I2C_ITSlaveSeqCplt>
 8006422:	e01b      	b.n	800645c <I2C_ITSlaveCplt+0x234>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	2210      	movs	r2, #16
 800642a:	61da      	str	r2, [r3, #28]
 800642c:	e016      	b.n	800645c <I2C_ITSlaveCplt+0x234>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	2210      	movs	r2, #16
 8006434:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800643a:	f043 0204 	orr.w	r2, r3, #4
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	2b00      	cmp	r3, #0
 8006446:	d003      	beq.n	8006450 <I2C_ITSlaveCplt+0x228>
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800644e:	d105      	bne.n	800645c <I2C_ITSlaveCplt+0x234>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006454:	4619      	mov	r1, r3
 8006456:	6878      	ldr	r0, [r7, #4]
 8006458:	f000 f8b8 	bl	80065cc <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	2200      	movs	r2, #0
 8006460:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	2200      	movs	r2, #0
 8006468:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800646e:	2b00      	cmp	r3, #0
 8006470:	d010      	beq.n	8006494 <I2C_ITSlaveCplt+0x26c>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006476:	4619      	mov	r1, r3
 8006478:	6878      	ldr	r0, [r7, #4]
 800647a:	f000 f8a7 	bl	80065cc <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006484:	b2db      	uxtb	r3, r3
 8006486:	2b28      	cmp	r3, #40	@ 0x28
 8006488:	d141      	bne.n	800650e <I2C_ITSlaveCplt+0x2e6>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 800648a:	6979      	ldr	r1, [r7, #20]
 800648c:	6878      	ldr	r0, [r7, #4]
 800648e:	f000 f847 	bl	8006520 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006492:	e03c      	b.n	800650e <I2C_ITSlaveCplt+0x2e6>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006498:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800649c:	d014      	beq.n	80064c8 <I2C_ITSlaveCplt+0x2a0>
    I2C_ITSlaveSeqCplt(hi2c);
 800649e:	6878      	ldr	r0, [r7, #4]
 80064a0:	f7ff fe64 	bl	800616c <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	4a1d      	ldr	r2, [pc, #116]	@ (800651c <I2C_ITSlaveCplt+0x2f4>)
 80064a8:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	2220      	movs	r2, #32
 80064ae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	2200      	movs	r2, #0
 80064b6:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	2200      	movs	r2, #0
 80064bc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 80064c0:	6878      	ldr	r0, [r7, #4]
 80064c2:	f7ff fc04 	bl	8005cce <HAL_I2C_ListenCpltCallback>
}
 80064c6:	e022      	b.n	800650e <I2C_ITSlaveCplt+0x2e6>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80064ce:	b2db      	uxtb	r3, r3
 80064d0:	2b22      	cmp	r3, #34	@ 0x22
 80064d2:	d10e      	bne.n	80064f2 <I2C_ITSlaveCplt+0x2ca>
    hi2c->State = HAL_I2C_STATE_READY;
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	2220      	movs	r2, #32
 80064d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	2200      	movs	r2, #0
 80064e0:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	2200      	movs	r2, #0
 80064e6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80064ea:	6878      	ldr	r0, [r7, #4]
 80064ec:	f7ff fbd7 	bl	8005c9e <HAL_I2C_SlaveRxCpltCallback>
}
 80064f0:	e00d      	b.n	800650e <I2C_ITSlaveCplt+0x2e6>
    hi2c->State = HAL_I2C_STATE_READY;
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	2220      	movs	r2, #32
 80064f6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	2200      	movs	r2, #0
 80064fe:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	2200      	movs	r2, #0
 8006504:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8006508:	6878      	ldr	r0, [r7, #4]
 800650a:	f7ff fbbe 	bl	8005c8a <HAL_I2C_SlaveTxCpltCallback>
}
 800650e:	bf00      	nop
 8006510:	371c      	adds	r7, #28
 8006512:	46bd      	mov	sp, r7
 8006514:	bd90      	pop	{r4, r7, pc}
 8006516:	bf00      	nop
 8006518:	fe00e800 	.word	0xfe00e800
 800651c:	ffff0000 	.word	0xffff0000

08006520 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8006520:	b580      	push	{r7, lr}
 8006522:	b082      	sub	sp, #8
 8006524:	af00      	add	r7, sp, #0
 8006526:	6078      	str	r0, [r7, #4]
 8006528:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	4a26      	ldr	r2, [pc, #152]	@ (80065c8 <I2C_ITListenCplt+0xa8>)
 800652e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	2200      	movs	r2, #0
 8006534:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	2220      	movs	r2, #32
 800653a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	2200      	movs	r2, #0
 8006542:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	2200      	movs	r2, #0
 800654a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 800654c:	683b      	ldr	r3, [r7, #0]
 800654e:	089b      	lsrs	r3, r3, #2
 8006550:	f003 0301 	and.w	r3, r3, #1
 8006554:	2b00      	cmp	r3, #0
 8006556:	d022      	beq.n	800659e <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006562:	b2d2      	uxtb	r2, r2
 8006564:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800656a:	1c5a      	adds	r2, r3, #1
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	625a      	str	r2, [r3, #36]	@ 0x24

    if (hi2c->XferSize > 0U)
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006574:	2b00      	cmp	r3, #0
 8006576:	d012      	beq.n	800659e <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800657c:	3b01      	subs	r3, #1
 800657e:	b29a      	uxth	r2, r3
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006588:	b29b      	uxth	r3, r3
 800658a:	3b01      	subs	r3, #1
 800658c:	b29a      	uxth	r2, r3
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006596:	f043 0204 	orr.w	r2, r3, #4
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800659e:	f248 0103 	movw	r1, #32771	@ 0x8003
 80065a2:	6878      	ldr	r0, [r7, #4]
 80065a4:	f000 fb60 	bl	8006c68 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	2210      	movs	r2, #16
 80065ae:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	2200      	movs	r2, #0
 80065b4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 80065b8:	6878      	ldr	r0, [r7, #4]
 80065ba:	f7ff fb88 	bl	8005cce <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 80065be:	bf00      	nop
 80065c0:	3708      	adds	r7, #8
 80065c2:	46bd      	mov	sp, r7
 80065c4:	bd80      	pop	{r7, pc}
 80065c6:	bf00      	nop
 80065c8:	ffff0000 	.word	0xffff0000

080065cc <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 80065cc:	b580      	push	{r7, lr}
 80065ce:	b084      	sub	sp, #16
 80065d0:	af00      	add	r7, sp, #0
 80065d2:	6078      	str	r0, [r7, #4]
 80065d4:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80065dc:	73fb      	strb	r3, [r7, #15]
#if defined(HAL_DMA_MODULE_ENABLED)
  uint32_t tmppreviousstate;
#endif /* HAL_DMA_MODULE_ENABLED */

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	2200      	movs	r2, #0
 80065e2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	4a6d      	ldr	r2, [pc, #436]	@ (80067a0 <I2C_ITError+0x1d4>)
 80065ea:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	2200      	movs	r2, #0
 80065f0:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80065f6:	683b      	ldr	r3, [r7, #0]
 80065f8:	431a      	orrs	r2, r3
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 80065fe:	7bfb      	ldrb	r3, [r7, #15]
 8006600:	2b28      	cmp	r3, #40	@ 0x28
 8006602:	d005      	beq.n	8006610 <I2C_ITError+0x44>
 8006604:	7bfb      	ldrb	r3, [r7, #15]
 8006606:	2b29      	cmp	r3, #41	@ 0x29
 8006608:	d002      	beq.n	8006610 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 800660a:	7bfb      	ldrb	r3, [r7, #15]
 800660c:	2b2a      	cmp	r3, #42	@ 0x2a
 800660e:	d10b      	bne.n	8006628 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8006610:	2103      	movs	r1, #3
 8006612:	6878      	ldr	r0, [r7, #4]
 8006614:	f000 fb28 	bl	8006c68 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	2228      	movs	r2, #40	@ 0x28
 800661c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	4a60      	ldr	r2, [pc, #384]	@ (80067a4 <I2C_ITError+0x1d8>)
 8006624:	635a      	str	r2, [r3, #52]	@ 0x34
 8006626:	e030      	b.n	800668a <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8006628:	f248 0103 	movw	r1, #32771	@ 0x8003
 800662c:	6878      	ldr	r0, [r7, #4]
 800662e:	f000 fb1b 	bl	8006c68 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8006632:	6878      	ldr	r0, [r7, #4]
 8006634:	f000 f8e1 	bl	80067fa <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800663e:	b2db      	uxtb	r3, r3
 8006640:	2b60      	cmp	r3, #96	@ 0x60
 8006642:	d01f      	beq.n	8006684 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	2220      	movs	r2, #32
 8006648:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	699b      	ldr	r3, [r3, #24]
 8006652:	f003 0320 	and.w	r3, r3, #32
 8006656:	2b20      	cmp	r3, #32
 8006658:	d114      	bne.n	8006684 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	699b      	ldr	r3, [r3, #24]
 8006660:	f003 0310 	and.w	r3, r3, #16
 8006664:	2b10      	cmp	r3, #16
 8006666:	d109      	bne.n	800667c <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	2210      	movs	r2, #16
 800666e:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006674:	f043 0204 	orr.w	r2, r3, #4
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	2220      	movs	r2, #32
 8006682:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	2200      	movs	r2, #0
 8006688:	635a      	str	r2, [r3, #52]	@ 0x34
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800668e:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006694:	2b00      	cmp	r3, #0
 8006696:	d039      	beq.n	800670c <I2C_ITError+0x140>
 8006698:	68bb      	ldr	r3, [r7, #8]
 800669a:	2b11      	cmp	r3, #17
 800669c:	d002      	beq.n	80066a4 <I2C_ITError+0xd8>
 800669e:	68bb      	ldr	r3, [r7, #8]
 80066a0:	2b21      	cmp	r3, #33	@ 0x21
 80066a2:	d133      	bne.n	800670c <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80066ae:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80066b2:	d107      	bne.n	80066c4 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	681a      	ldr	r2, [r3, #0]
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80066c2:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80066c8:	4618      	mov	r0, r3
 80066ca:	f7fe fcc0 	bl	800504e <HAL_DMA_GetState>
 80066ce:	4603      	mov	r3, r0
 80066d0:	2b01      	cmp	r3, #1
 80066d2:	d017      	beq.n	8006704 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80066d8:	4a33      	ldr	r2, [pc, #204]	@ (80067a8 <I2C_ITError+0x1dc>)
 80066da:	66da      	str	r2, [r3, #108]	@ 0x6c

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	2200      	movs	r2, #0
 80066e0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80066e8:	4618      	mov	r0, r3
 80066ea:	f7fe fc87 	bl	8004ffc <HAL_DMA_Abort_IT>
 80066ee:	4603      	mov	r3, r0
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d04d      	beq.n	8006790 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80066f8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80066fa:	687a      	ldr	r2, [r7, #4]
 80066fc:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80066fe:	4610      	mov	r0, r2
 8006700:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8006702:	e045      	b.n	8006790 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8006704:	6878      	ldr	r0, [r7, #4]
 8006706:	f000 f851 	bl	80067ac <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800670a:	e041      	b.n	8006790 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006710:	2b00      	cmp	r3, #0
 8006712:	d039      	beq.n	8006788 <I2C_ITError+0x1bc>
 8006714:	68bb      	ldr	r3, [r7, #8]
 8006716:	2b12      	cmp	r3, #18
 8006718:	d002      	beq.n	8006720 <I2C_ITError+0x154>
 800671a:	68bb      	ldr	r3, [r7, #8]
 800671c:	2b22      	cmp	r3, #34	@ 0x22
 800671e:	d133      	bne.n	8006788 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800672a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800672e:	d107      	bne.n	8006740 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	681a      	ldr	r2, [r3, #0]
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800673e:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006744:	4618      	mov	r0, r3
 8006746:	f7fe fc82 	bl	800504e <HAL_DMA_GetState>
 800674a:	4603      	mov	r3, r0
 800674c:	2b01      	cmp	r3, #1
 800674e:	d017      	beq.n	8006780 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006754:	4a14      	ldr	r2, [pc, #80]	@ (80067a8 <I2C_ITError+0x1dc>)
 8006756:	66da      	str	r2, [r3, #108]	@ 0x6c

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	2200      	movs	r2, #0
 800675c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006764:	4618      	mov	r0, r3
 8006766:	f7fe fc49 	bl	8004ffc <HAL_DMA_Abort_IT>
 800676a:	4603      	mov	r3, r0
 800676c:	2b00      	cmp	r3, #0
 800676e:	d011      	beq.n	8006794 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006774:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006776:	687a      	ldr	r2, [r7, #4]
 8006778:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800677a:	4610      	mov	r0, r2
 800677c:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800677e:	e009      	b.n	8006794 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8006780:	6878      	ldr	r0, [r7, #4]
 8006782:	f000 f813 	bl	80067ac <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006786:	e005      	b.n	8006794 <I2C_ITError+0x1c8>
    }
  }
  else
#endif /* HAL_DMA_MODULE_ENABLED */
  {
    I2C_TreatErrorCallback(hi2c);
 8006788:	6878      	ldr	r0, [r7, #4]
 800678a:	f000 f80f 	bl	80067ac <I2C_TreatErrorCallback>
  }
}
 800678e:	e002      	b.n	8006796 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8006790:	bf00      	nop
 8006792:	e000      	b.n	8006796 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006794:	bf00      	nop
}
 8006796:	bf00      	nop
 8006798:	3710      	adds	r7, #16
 800679a:	46bd      	mov	sp, r7
 800679c:	bd80      	pop	{r7, pc}
 800679e:	bf00      	nop
 80067a0:	ffff0000 	.word	0xffff0000
 80067a4:	08005d0b 	.word	0x08005d0b
 80067a8:	08006843 	.word	0x08006843

080067ac <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80067ac:	b580      	push	{r7, lr}
 80067ae:	b082      	sub	sp, #8
 80067b0:	af00      	add	r7, sp, #0
 80067b2:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80067ba:	b2db      	uxtb	r3, r3
 80067bc:	2b60      	cmp	r3, #96	@ 0x60
 80067be:	d10e      	bne.n	80067de <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	2220      	movs	r2, #32
 80067c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	2200      	movs	r2, #0
 80067cc:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	2200      	movs	r2, #0
 80067d2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80067d6:	6878      	ldr	r0, [r7, #4]
 80067d8:	f7ff fa8d 	bl	8005cf6 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80067dc:	e009      	b.n	80067f2 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	2200      	movs	r2, #0
 80067e2:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	2200      	movs	r2, #0
 80067e8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 80067ec:	6878      	ldr	r0, [r7, #4]
 80067ee:	f7ff fa78 	bl	8005ce2 <HAL_I2C_ErrorCallback>
}
 80067f2:	bf00      	nop
 80067f4:	3708      	adds	r7, #8
 80067f6:	46bd      	mov	sp, r7
 80067f8:	bd80      	pop	{r7, pc}

080067fa <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80067fa:	b480      	push	{r7}
 80067fc:	b083      	sub	sp, #12
 80067fe:	af00      	add	r7, sp, #0
 8006800:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	699b      	ldr	r3, [r3, #24]
 8006808:	f003 0302 	and.w	r3, r3, #2
 800680c:	2b02      	cmp	r3, #2
 800680e:	d103      	bne.n	8006818 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	2200      	movs	r2, #0
 8006816:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	699b      	ldr	r3, [r3, #24]
 800681e:	f003 0301 	and.w	r3, r3, #1
 8006822:	2b01      	cmp	r3, #1
 8006824:	d007      	beq.n	8006836 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	699a      	ldr	r2, [r3, #24]
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	f042 0201 	orr.w	r2, r2, #1
 8006834:	619a      	str	r2, [r3, #24]
  }
}
 8006836:	bf00      	nop
 8006838:	370c      	adds	r7, #12
 800683a:	46bd      	mov	sp, r7
 800683c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006840:	4770      	bx	lr

08006842 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8006842:	b580      	push	{r7, lr}
 8006844:	b084      	sub	sp, #16
 8006846:	af00      	add	r7, sp, #0
 8006848:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800684e:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006854:	2b00      	cmp	r3, #0
 8006856:	d003      	beq.n	8006860 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800685c:	2200      	movs	r2, #0
 800685e:	66da      	str	r2, [r3, #108]	@ 0x6c
  }
  if (hi2c->hdmarx != NULL)
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006864:	2b00      	cmp	r3, #0
 8006866:	d003      	beq.n	8006870 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800686c:	2200      	movs	r2, #0
 800686e:	66da      	str	r2, [r3, #108]	@ 0x6c
  }

  I2C_TreatErrorCallback(hi2c);
 8006870:	68f8      	ldr	r0, [r7, #12]
 8006872:	f7ff ff9b 	bl	80067ac <I2C_TreatErrorCallback>
}
 8006876:	bf00      	nop
 8006878:	3710      	adds	r7, #16
 800687a:	46bd      	mov	sp, r7
 800687c:	bd80      	pop	{r7, pc}

0800687e <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800687e:	b580      	push	{r7, lr}
 8006880:	b084      	sub	sp, #16
 8006882:	af00      	add	r7, sp, #0
 8006884:	60f8      	str	r0, [r7, #12]
 8006886:	60b9      	str	r1, [r7, #8]
 8006888:	603b      	str	r3, [r7, #0]
 800688a:	4613      	mov	r3, r2
 800688c:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800688e:	e03b      	b.n	8006908 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006890:	69ba      	ldr	r2, [r7, #24]
 8006892:	6839      	ldr	r1, [r7, #0]
 8006894:	68f8      	ldr	r0, [r7, #12]
 8006896:	f000 f8d5 	bl	8006a44 <I2C_IsErrorOccurred>
 800689a:	4603      	mov	r3, r0
 800689c:	2b00      	cmp	r3, #0
 800689e:	d001      	beq.n	80068a4 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 80068a0:	2301      	movs	r3, #1
 80068a2:	e041      	b.n	8006928 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80068a4:	683b      	ldr	r3, [r7, #0]
 80068a6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80068aa:	d02d      	beq.n	8006908 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80068ac:	f7fe fa3e 	bl	8004d2c <HAL_GetTick>
 80068b0:	4602      	mov	r2, r0
 80068b2:	69bb      	ldr	r3, [r7, #24]
 80068b4:	1ad3      	subs	r3, r2, r3
 80068b6:	683a      	ldr	r2, [r7, #0]
 80068b8:	429a      	cmp	r2, r3
 80068ba:	d302      	bcc.n	80068c2 <I2C_WaitOnFlagUntilTimeout+0x44>
 80068bc:	683b      	ldr	r3, [r7, #0]
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d122      	bne.n	8006908 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	699a      	ldr	r2, [r3, #24]
 80068c8:	68bb      	ldr	r3, [r7, #8]
 80068ca:	4013      	ands	r3, r2
 80068cc:	68ba      	ldr	r2, [r7, #8]
 80068ce:	429a      	cmp	r2, r3
 80068d0:	bf0c      	ite	eq
 80068d2:	2301      	moveq	r3, #1
 80068d4:	2300      	movne	r3, #0
 80068d6:	b2db      	uxtb	r3, r3
 80068d8:	461a      	mov	r2, r3
 80068da:	79fb      	ldrb	r3, [r7, #7]
 80068dc:	429a      	cmp	r2, r3
 80068de:	d113      	bne.n	8006908 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80068e4:	f043 0220 	orr.w	r2, r3, #32
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	2220      	movs	r2, #32
 80068f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	2200      	movs	r2, #0
 80068f8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	2200      	movs	r2, #0
 8006900:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8006904:	2301      	movs	r3, #1
 8006906:	e00f      	b.n	8006928 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	699a      	ldr	r2, [r3, #24]
 800690e:	68bb      	ldr	r3, [r7, #8]
 8006910:	4013      	ands	r3, r2
 8006912:	68ba      	ldr	r2, [r7, #8]
 8006914:	429a      	cmp	r2, r3
 8006916:	bf0c      	ite	eq
 8006918:	2301      	moveq	r3, #1
 800691a:	2300      	movne	r3, #0
 800691c:	b2db      	uxtb	r3, r3
 800691e:	461a      	mov	r2, r3
 8006920:	79fb      	ldrb	r3, [r7, #7]
 8006922:	429a      	cmp	r2, r3
 8006924:	d0b4      	beq.n	8006890 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006926:	2300      	movs	r3, #0
}
 8006928:	4618      	mov	r0, r3
 800692a:	3710      	adds	r7, #16
 800692c:	46bd      	mov	sp, r7
 800692e:	bd80      	pop	{r7, pc}

08006930 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006930:	b580      	push	{r7, lr}
 8006932:	b084      	sub	sp, #16
 8006934:	af00      	add	r7, sp, #0
 8006936:	60f8      	str	r0, [r7, #12]
 8006938:	60b9      	str	r1, [r7, #8]
 800693a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800693c:	e033      	b.n	80069a6 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800693e:	687a      	ldr	r2, [r7, #4]
 8006940:	68b9      	ldr	r1, [r7, #8]
 8006942:	68f8      	ldr	r0, [r7, #12]
 8006944:	f000 f87e 	bl	8006a44 <I2C_IsErrorOccurred>
 8006948:	4603      	mov	r3, r0
 800694a:	2b00      	cmp	r3, #0
 800694c:	d001      	beq.n	8006952 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800694e:	2301      	movs	r3, #1
 8006950:	e031      	b.n	80069b6 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006952:	68bb      	ldr	r3, [r7, #8]
 8006954:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006958:	d025      	beq.n	80069a6 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800695a:	f7fe f9e7 	bl	8004d2c <HAL_GetTick>
 800695e:	4602      	mov	r2, r0
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	1ad3      	subs	r3, r2, r3
 8006964:	68ba      	ldr	r2, [r7, #8]
 8006966:	429a      	cmp	r2, r3
 8006968:	d302      	bcc.n	8006970 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800696a:	68bb      	ldr	r3, [r7, #8]
 800696c:	2b00      	cmp	r3, #0
 800696e:	d11a      	bne.n	80069a6 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	699b      	ldr	r3, [r3, #24]
 8006976:	f003 0302 	and.w	r3, r3, #2
 800697a:	2b02      	cmp	r3, #2
 800697c:	d013      	beq.n	80069a6 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006982:	f043 0220 	orr.w	r2, r3, #32
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	2220      	movs	r2, #32
 800698e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	2200      	movs	r2, #0
 8006996:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	2200      	movs	r2, #0
 800699e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80069a2:	2301      	movs	r3, #1
 80069a4:	e007      	b.n	80069b6 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	699b      	ldr	r3, [r3, #24]
 80069ac:	f003 0302 	and.w	r3, r3, #2
 80069b0:	2b02      	cmp	r3, #2
 80069b2:	d1c4      	bne.n	800693e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80069b4:	2300      	movs	r3, #0
}
 80069b6:	4618      	mov	r0, r3
 80069b8:	3710      	adds	r7, #16
 80069ba:	46bd      	mov	sp, r7
 80069bc:	bd80      	pop	{r7, pc}

080069be <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80069be:	b580      	push	{r7, lr}
 80069c0:	b084      	sub	sp, #16
 80069c2:	af00      	add	r7, sp, #0
 80069c4:	60f8      	str	r0, [r7, #12]
 80069c6:	60b9      	str	r1, [r7, #8]
 80069c8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80069ca:	e02f      	b.n	8006a2c <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80069cc:	687a      	ldr	r2, [r7, #4]
 80069ce:	68b9      	ldr	r1, [r7, #8]
 80069d0:	68f8      	ldr	r0, [r7, #12]
 80069d2:	f000 f837 	bl	8006a44 <I2C_IsErrorOccurred>
 80069d6:	4603      	mov	r3, r0
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d001      	beq.n	80069e0 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80069dc:	2301      	movs	r3, #1
 80069de:	e02d      	b.n	8006a3c <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80069e0:	f7fe f9a4 	bl	8004d2c <HAL_GetTick>
 80069e4:	4602      	mov	r2, r0
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	1ad3      	subs	r3, r2, r3
 80069ea:	68ba      	ldr	r2, [r7, #8]
 80069ec:	429a      	cmp	r2, r3
 80069ee:	d302      	bcc.n	80069f6 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80069f0:	68bb      	ldr	r3, [r7, #8]
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d11a      	bne.n	8006a2c <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	699b      	ldr	r3, [r3, #24]
 80069fc:	f003 0320 	and.w	r3, r3, #32
 8006a00:	2b20      	cmp	r3, #32
 8006a02:	d013      	beq.n	8006a2c <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006a08:	f043 0220 	orr.w	r2, r3, #32
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	2220      	movs	r2, #32
 8006a14:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	2200      	movs	r2, #0
 8006a1c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	2200      	movs	r2, #0
 8006a24:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8006a28:	2301      	movs	r3, #1
 8006a2a:	e007      	b.n	8006a3c <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	699b      	ldr	r3, [r3, #24]
 8006a32:	f003 0320 	and.w	r3, r3, #32
 8006a36:	2b20      	cmp	r3, #32
 8006a38:	d1c8      	bne.n	80069cc <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006a3a:	2300      	movs	r3, #0
}
 8006a3c:	4618      	mov	r0, r3
 8006a3e:	3710      	adds	r7, #16
 8006a40:	46bd      	mov	sp, r7
 8006a42:	bd80      	pop	{r7, pc}

08006a44 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006a44:	b580      	push	{r7, lr}
 8006a46:	b08a      	sub	sp, #40	@ 0x28
 8006a48:	af00      	add	r7, sp, #0
 8006a4a:	60f8      	str	r0, [r7, #12]
 8006a4c:	60b9      	str	r1, [r7, #8]
 8006a4e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006a50:	2300      	movs	r3, #0
 8006a52:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	699b      	ldr	r3, [r3, #24]
 8006a5c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8006a5e:	2300      	movs	r3, #0
 8006a60:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8006a66:	69bb      	ldr	r3, [r7, #24]
 8006a68:	f003 0310 	and.w	r3, r3, #16
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d068      	beq.n	8006b42 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	2210      	movs	r2, #16
 8006a76:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006a78:	e049      	b.n	8006b0e <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8006a7a:	68bb      	ldr	r3, [r7, #8]
 8006a7c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006a80:	d045      	beq.n	8006b0e <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8006a82:	f7fe f953 	bl	8004d2c <HAL_GetTick>
 8006a86:	4602      	mov	r2, r0
 8006a88:	69fb      	ldr	r3, [r7, #28]
 8006a8a:	1ad3      	subs	r3, r2, r3
 8006a8c:	68ba      	ldr	r2, [r7, #8]
 8006a8e:	429a      	cmp	r2, r3
 8006a90:	d302      	bcc.n	8006a98 <I2C_IsErrorOccurred+0x54>
 8006a92:	68bb      	ldr	r3, [r7, #8]
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d13a      	bne.n	8006b0e <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	685b      	ldr	r3, [r3, #4]
 8006a9e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006aa2:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006aaa:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	699b      	ldr	r3, [r3, #24]
 8006ab2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006ab6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006aba:	d121      	bne.n	8006b00 <I2C_IsErrorOccurred+0xbc>
 8006abc:	697b      	ldr	r3, [r7, #20]
 8006abe:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006ac2:	d01d      	beq.n	8006b00 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8006ac4:	7cfb      	ldrb	r3, [r7, #19]
 8006ac6:	2b20      	cmp	r3, #32
 8006ac8:	d01a      	beq.n	8006b00 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	685a      	ldr	r2, [r3, #4]
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006ad8:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8006ada:	f7fe f927 	bl	8004d2c <HAL_GetTick>
 8006ade:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006ae0:	e00e      	b.n	8006b00 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8006ae2:	f7fe f923 	bl	8004d2c <HAL_GetTick>
 8006ae6:	4602      	mov	r2, r0
 8006ae8:	69fb      	ldr	r3, [r7, #28]
 8006aea:	1ad3      	subs	r3, r2, r3
 8006aec:	2b19      	cmp	r3, #25
 8006aee:	d907      	bls.n	8006b00 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8006af0:	6a3b      	ldr	r3, [r7, #32]
 8006af2:	f043 0320 	orr.w	r3, r3, #32
 8006af6:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8006af8:	2301      	movs	r3, #1
 8006afa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8006afe:	e006      	b.n	8006b0e <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	699b      	ldr	r3, [r3, #24]
 8006b06:	f003 0320 	and.w	r3, r3, #32
 8006b0a:	2b20      	cmp	r3, #32
 8006b0c:	d1e9      	bne.n	8006ae2 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	699b      	ldr	r3, [r3, #24]
 8006b14:	f003 0320 	and.w	r3, r3, #32
 8006b18:	2b20      	cmp	r3, #32
 8006b1a:	d003      	beq.n	8006b24 <I2C_IsErrorOccurred+0xe0>
 8006b1c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d0aa      	beq.n	8006a7a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8006b24:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d103      	bne.n	8006b34 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	2220      	movs	r2, #32
 8006b32:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8006b34:	6a3b      	ldr	r3, [r7, #32]
 8006b36:	f043 0304 	orr.w	r3, r3, #4
 8006b3a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8006b3c:	2301      	movs	r3, #1
 8006b3e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	699b      	ldr	r3, [r3, #24]
 8006b48:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8006b4a:	69bb      	ldr	r3, [r7, #24]
 8006b4c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d00b      	beq.n	8006b6c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8006b54:	6a3b      	ldr	r3, [r7, #32]
 8006b56:	f043 0301 	orr.w	r3, r3, #1
 8006b5a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006b64:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006b66:	2301      	movs	r3, #1
 8006b68:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8006b6c:	69bb      	ldr	r3, [r7, #24]
 8006b6e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d00b      	beq.n	8006b8e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8006b76:	6a3b      	ldr	r3, [r7, #32]
 8006b78:	f043 0308 	orr.w	r3, r3, #8
 8006b7c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8006b86:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006b88:	2301      	movs	r3, #1
 8006b8a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8006b8e:	69bb      	ldr	r3, [r7, #24]
 8006b90:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d00b      	beq.n	8006bb0 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8006b98:	6a3b      	ldr	r3, [r7, #32]
 8006b9a:	f043 0302 	orr.w	r3, r3, #2
 8006b9e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006ba8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006baa:	2301      	movs	r3, #1
 8006bac:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8006bb0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d01c      	beq.n	8006bf2 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8006bb8:	68f8      	ldr	r0, [r7, #12]
 8006bba:	f7ff fe1e 	bl	80067fa <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	6859      	ldr	r1, [r3, #4]
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	681a      	ldr	r2, [r3, #0]
 8006bc8:	4b0d      	ldr	r3, [pc, #52]	@ (8006c00 <I2C_IsErrorOccurred+0x1bc>)
 8006bca:	400b      	ands	r3, r1
 8006bcc:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006bd2:	6a3b      	ldr	r3, [r7, #32]
 8006bd4:	431a      	orrs	r2, r3
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	2220      	movs	r2, #32
 8006bde:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	2200      	movs	r2, #0
 8006be6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	2200      	movs	r2, #0
 8006bee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8006bf2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8006bf6:	4618      	mov	r0, r3
 8006bf8:	3728      	adds	r7, #40	@ 0x28
 8006bfa:	46bd      	mov	sp, r7
 8006bfc:	bd80      	pop	{r7, pc}
 8006bfe:	bf00      	nop
 8006c00:	fe00e800 	.word	0xfe00e800

08006c04 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8006c04:	b480      	push	{r7}
 8006c06:	b087      	sub	sp, #28
 8006c08:	af00      	add	r7, sp, #0
 8006c0a:	60f8      	str	r0, [r7, #12]
 8006c0c:	607b      	str	r3, [r7, #4]
 8006c0e:	460b      	mov	r3, r1
 8006c10:	817b      	strh	r3, [r7, #10]
 8006c12:	4613      	mov	r3, r2
 8006c14:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006c16:	897b      	ldrh	r3, [r7, #10]
 8006c18:	f3c3 0209 	ubfx	r2, r3, #0, #10
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006c1c:	7a7b      	ldrb	r3, [r7, #9]
 8006c1e:	041b      	lsls	r3, r3, #16
 8006c20:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006c24:	431a      	orrs	r2, r3
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	431a      	orrs	r2, r3
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006c2a:	6a3b      	ldr	r3, [r7, #32]
 8006c2c:	4313      	orrs	r3, r2
 8006c2e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006c32:	617b      	str	r3, [r7, #20]
                    (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	685a      	ldr	r2, [r3, #4]
 8006c3a:	6a3b      	ldr	r3, [r7, #32]
 8006c3c:	0d5b      	lsrs	r3, r3, #21
 8006c3e:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8006c42:	4b08      	ldr	r3, [pc, #32]	@ (8006c64 <I2C_TransferConfig+0x60>)
 8006c44:	430b      	orrs	r3, r1
 8006c46:	43db      	mvns	r3, r3
 8006c48:	ea02 0103 	and.w	r1, r2, r3
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	697a      	ldr	r2, [r7, #20]
 8006c52:	430a      	orrs	r2, r1
 8006c54:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8006c56:	bf00      	nop
 8006c58:	371c      	adds	r7, #28
 8006c5a:	46bd      	mov	sp, r7
 8006c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c60:	4770      	bx	lr
 8006c62:	bf00      	nop
 8006c64:	03ff63ff 	.word	0x03ff63ff

08006c68 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8006c68:	b480      	push	{r7}
 8006c6a:	b085      	sub	sp, #20
 8006c6c:	af00      	add	r7, sp, #0
 8006c6e:	6078      	str	r0, [r7, #4]
 8006c70:	460b      	mov	r3, r1
 8006c72:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8006c74:	2300      	movs	r3, #0
 8006c76:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8006c78:	887b      	ldrh	r3, [r7, #2]
 8006c7a:	f003 0301 	and.w	r3, r3, #1
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d00f      	beq.n	8006ca2 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 8006c88:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006c90:	b2db      	uxtb	r3, r3
 8006c92:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8006c96:	2b28      	cmp	r3, #40	@ 0x28
 8006c98:	d003      	beq.n	8006ca2 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8006ca0:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8006ca2:	887b      	ldrh	r3, [r7, #2]
 8006ca4:	f003 0302 	and.w	r3, r3, #2
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d00f      	beq.n	8006ccc <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 8006cb2:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006cba:	b2db      	uxtb	r3, r3
 8006cbc:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8006cc0:	2b28      	cmp	r3, #40	@ 0x28
 8006cc2:	d003      	beq.n	8006ccc <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8006cca:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8006ccc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	da03      	bge.n	8006cdc <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8006cda:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8006cdc:	887b      	ldrh	r3, [r7, #2]
 8006cde:	2b10      	cmp	r3, #16
 8006ce0:	d103      	bne.n	8006cea <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8006ce8:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8006cea:	887b      	ldrh	r3, [r7, #2]
 8006cec:	2b20      	cmp	r3, #32
 8006cee:	d103      	bne.n	8006cf8 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	f043 0320 	orr.w	r3, r3, #32
 8006cf6:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8006cf8:	887b      	ldrh	r3, [r7, #2]
 8006cfa:	2b40      	cmp	r3, #64	@ 0x40
 8006cfc:	d103      	bne.n	8006d06 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006d04:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	6819      	ldr	r1, [r3, #0]
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	43da      	mvns	r2, r3
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	400a      	ands	r2, r1
 8006d16:	601a      	str	r2, [r3, #0]
}
 8006d18:	bf00      	nop
 8006d1a:	3714      	adds	r7, #20
 8006d1c:	46bd      	mov	sp, r7
 8006d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d22:	4770      	bx	lr

08006d24 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006d24:	b480      	push	{r7}
 8006d26:	b083      	sub	sp, #12
 8006d28:	af00      	add	r7, sp, #0
 8006d2a:	6078      	str	r0, [r7, #4]
 8006d2c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006d34:	b2db      	uxtb	r3, r3
 8006d36:	2b20      	cmp	r3, #32
 8006d38:	d138      	bne.n	8006dac <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006d40:	2b01      	cmp	r3, #1
 8006d42:	d101      	bne.n	8006d48 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8006d44:	2302      	movs	r3, #2
 8006d46:	e032      	b.n	8006dae <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	2201      	movs	r2, #1
 8006d4c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	2224      	movs	r2, #36	@ 0x24
 8006d54:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	681a      	ldr	r2, [r3, #0]
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	f022 0201 	bic.w	r2, r2, #1
 8006d66:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	681a      	ldr	r2, [r3, #0]
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8006d76:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	6819      	ldr	r1, [r3, #0]
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	683a      	ldr	r2, [r7, #0]
 8006d84:	430a      	orrs	r2, r1
 8006d86:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	681a      	ldr	r2, [r3, #0]
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	f042 0201 	orr.w	r2, r2, #1
 8006d96:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	2220      	movs	r2, #32
 8006d9c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	2200      	movs	r2, #0
 8006da4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8006da8:	2300      	movs	r3, #0
 8006daa:	e000      	b.n	8006dae <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006dac:	2302      	movs	r3, #2
  }
}
 8006dae:	4618      	mov	r0, r3
 8006db0:	370c      	adds	r7, #12
 8006db2:	46bd      	mov	sp, r7
 8006db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006db8:	4770      	bx	lr

08006dba <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006dba:	b480      	push	{r7}
 8006dbc:	b085      	sub	sp, #20
 8006dbe:	af00      	add	r7, sp, #0
 8006dc0:	6078      	str	r0, [r7, #4]
 8006dc2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006dca:	b2db      	uxtb	r3, r3
 8006dcc:	2b20      	cmp	r3, #32
 8006dce:	d139      	bne.n	8006e44 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006dd6:	2b01      	cmp	r3, #1
 8006dd8:	d101      	bne.n	8006dde <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8006dda:	2302      	movs	r3, #2
 8006ddc:	e033      	b.n	8006e46 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	2201      	movs	r2, #1
 8006de2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	2224      	movs	r2, #36	@ 0x24
 8006dea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	681a      	ldr	r2, [r3, #0]
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	f022 0201 	bic.w	r2, r2, #1
 8006dfc:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8006e0c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8006e0e:	683b      	ldr	r3, [r7, #0]
 8006e10:	021b      	lsls	r3, r3, #8
 8006e12:	68fa      	ldr	r2, [r7, #12]
 8006e14:	4313      	orrs	r3, r2
 8006e16:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	68fa      	ldr	r2, [r7, #12]
 8006e1e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	681a      	ldr	r2, [r3, #0]
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	f042 0201 	orr.w	r2, r2, #1
 8006e2e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	2220      	movs	r2, #32
 8006e34:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	2200      	movs	r2, #0
 8006e3c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8006e40:	2300      	movs	r3, #0
 8006e42:	e000      	b.n	8006e46 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8006e44:	2302      	movs	r3, #2
  }
}
 8006e46:	4618      	mov	r0, r3
 8006e48:	3714      	adds	r7, #20
 8006e4a:	46bd      	mov	sp, r7
 8006e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e50:	4770      	bx	lr
	...

08006e54 <HAL_ICACHE_ConfigAssociativityMode>:
  *            @arg ICACHE_1WAY   1-way cache (direct mapped cache)
  *            @arg ICACHE_2WAYS  2-ways set associative cache (default)
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef HAL_ICACHE_ConfigAssociativityMode(uint32_t AssociativityMode)
{
 8006e54:	b480      	push	{r7}
 8006e56:	b085      	sub	sp, #20
 8006e58:	af00      	add	r7, sp, #0
 8006e5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006e5c:	2300      	movs	r3, #0
 8006e5e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 8006e60:	4b0b      	ldr	r3, [pc, #44]	@ (8006e90 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	f003 0301 	and.w	r3, r3, #1
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d002      	beq.n	8006e72 <HAL_ICACHE_ConfigAssociativityMode+0x1e>
  {
    status = HAL_ERROR;
 8006e6c:	2301      	movs	r3, #1
 8006e6e:	73fb      	strb	r3, [r7, #15]
 8006e70:	e007      	b.n	8006e82 <HAL_ICACHE_ConfigAssociativityMode+0x2e>
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 8006e72:	4b07      	ldr	r3, [pc, #28]	@ (8006e90 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	f023 0204 	bic.w	r2, r3, #4
 8006e7a:	4905      	ldr	r1, [pc, #20]	@ (8006e90 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	4313      	orrs	r3, r2
 8006e80:	600b      	str	r3, [r1, #0]
  }

  return status;
 8006e82:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e84:	4618      	mov	r0, r3
 8006e86:	3714      	adds	r7, #20
 8006e88:	46bd      	mov	sp, r7
 8006e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e8e:	4770      	bx	lr
 8006e90:	40030400 	.word	0x40030400

08006e94 <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 8006e94:	b480      	push	{r7}
 8006e96:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 8006e98:	4b05      	ldr	r3, [pc, #20]	@ (8006eb0 <HAL_ICACHE_Enable+0x1c>)
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	4a04      	ldr	r2, [pc, #16]	@ (8006eb0 <HAL_ICACHE_Enable+0x1c>)
 8006e9e:	f043 0301 	orr.w	r3, r3, #1
 8006ea2:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8006ea4:	2300      	movs	r3, #0
}
 8006ea6:	4618      	mov	r0, r3
 8006ea8:	46bd      	mov	sp, r7
 8006eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eae:	4770      	bx	lr
 8006eb0:	40030400 	.word	0x40030400

08006eb4 <HAL_PWREx_ControlVoltageScaling>:
  * @note  Before moving to voltage scaling 4, it is mandatory to ensure that
  *        the system frequency is below 24 MHz.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8006eb4:	b480      	push	{r7}
 8006eb6:	b085      	sub	sp, #20
 8006eb8:	af00      	add	r7, sp, #0
 8006eba:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Get the current voltage scale applied */
  vos_old = READ_BIT(PWR->SVMSR, PWR_SVMSR_ACTVOS);
 8006ebc:	4b39      	ldr	r3, [pc, #228]	@ (8006fa4 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8006ebe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006ec0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8006ec4:	60bb      	str	r3, [r7, #8]

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 8006ec6:	68ba      	ldr	r2, [r7, #8]
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	429a      	cmp	r2, r3
 8006ecc:	d10b      	bne.n	8006ee6 <HAL_PWREx_ControlVoltageScaling+0x32>
  {
    /* Enable USB BOOST after wake up from Stop mode */
    if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006ed4:	d905      	bls.n	8006ee2 <HAL_PWREx_ControlVoltageScaling+0x2e>
    {
      /* Enable USB BOOST */
      SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8006ed6:	4b33      	ldr	r3, [pc, #204]	@ (8006fa4 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8006ed8:	68db      	ldr	r3, [r3, #12]
 8006eda:	4a32      	ldr	r2, [pc, #200]	@ (8006fa4 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8006edc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006ee0:	60d3      	str	r3, [r2, #12]
    }

    return HAL_OK;
 8006ee2:	2300      	movs	r3, #0
 8006ee4:	e057      	b.n	8006f96 <HAL_PWREx_ControlVoltageScaling+0xe2>
  /* Check voltage scaling level */
  /*
   *  The Embedded power distribution (EPOD) must be enabled before switching to
   *  voltage scale 1 / 2 from voltage scale lower.
   */
  if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006eec:	d90a      	bls.n	8006f04 <HAL_PWREx_ControlVoltageScaling+0x50>
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), (VoltageScaling | PWR_VOSR_BOOSTEN));
 8006eee:	4b2d      	ldr	r3, [pc, #180]	@ (8006fa4 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8006ef0:	68db      	ldr	r3, [r3, #12]
 8006ef2:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	4313      	orrs	r3, r2
 8006efa:	4a2a      	ldr	r2, [pc, #168]	@ (8006fa4 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8006efc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006f00:	60d3      	str	r3, [r2, #12]
 8006f02:	e007      	b.n	8006f14 <HAL_PWREx_ControlVoltageScaling+0x60>
  }
  else
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), VoltageScaling);
 8006f04:	4b27      	ldr	r3, [pc, #156]	@ (8006fa4 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8006f06:	68db      	ldr	r3, [r3, #12]
 8006f08:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 8006f0c:	4925      	ldr	r1, [pc, #148]	@ (8006fa4 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	4313      	orrs	r3, r2
 8006f12:	60cb      	str	r3, [r1, #12]
  }

  /* Wait until VOSRDY is raised */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8006f14:	4b24      	ldr	r3, [pc, #144]	@ (8006fa8 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	4a24      	ldr	r2, [pc, #144]	@ (8006fac <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8006f1a:	fba2 2303 	umull	r2, r3, r2, r3
 8006f1e:	099b      	lsrs	r3, r3, #6
 8006f20:	2232      	movs	r2, #50	@ 0x32
 8006f22:	fb02 f303 	mul.w	r3, r2, r3
 8006f26:	4a21      	ldr	r2, [pc, #132]	@ (8006fac <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8006f28:	fba2 2303 	umull	r2, r3, r2, r3
 8006f2c:	099b      	lsrs	r3, r3, #6
 8006f2e:	3301      	adds	r3, #1
 8006f30:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8006f32:	e002      	b.n	8006f3a <HAL_PWREx_ControlVoltageScaling+0x86>
  {
    timeout--;
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	3b01      	subs	r3, #1
 8006f38:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8006f3a:	4b1a      	ldr	r3, [pc, #104]	@ (8006fa4 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8006f3c:	68db      	ldr	r3, [r3, #12]
 8006f3e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d102      	bne.n	8006f4c <HAL_PWREx_ControlVoltageScaling+0x98>
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d1f3      	bne.n	8006f34 <HAL_PWREx_ControlVoltageScaling+0x80>
  }

  /* Check time out */
  if (timeout != 0U)
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d01b      	beq.n	8006f8a <HAL_PWREx_ControlVoltageScaling+0xd6>
  {
    /* Wait until ACTVOSRDY is raised */
    timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8006f52:	4b15      	ldr	r3, [pc, #84]	@ (8006fa8 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	4a15      	ldr	r2, [pc, #84]	@ (8006fac <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8006f58:	fba2 2303 	umull	r2, r3, r2, r3
 8006f5c:	099b      	lsrs	r3, r3, #6
 8006f5e:	2232      	movs	r2, #50	@ 0x32
 8006f60:	fb02 f303 	mul.w	r3, r2, r3
 8006f64:	4a11      	ldr	r2, [pc, #68]	@ (8006fac <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8006f66:	fba2 2303 	umull	r2, r3, r2, r3
 8006f6a:	099b      	lsrs	r3, r3, #6
 8006f6c:	3301      	adds	r3, #1
 8006f6e:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8006f70:	e002      	b.n	8006f78 <HAL_PWREx_ControlVoltageScaling+0xc4>
    {
      timeout--;
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	3b01      	subs	r3, #1
 8006f76:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8006f78:	4b0a      	ldr	r3, [pc, #40]	@ (8006fa4 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8006f7a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006f7c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d102      	bne.n	8006f8a <HAL_PWREx_ControlVoltageScaling+0xd6>
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d1f3      	bne.n	8006f72 <HAL_PWREx_ControlVoltageScaling+0xbe>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d101      	bne.n	8006f94 <HAL_PWREx_ControlVoltageScaling+0xe0>
  {
    return HAL_TIMEOUT;
 8006f90:	2303      	movs	r3, #3
 8006f92:	e000      	b.n	8006f96 <HAL_PWREx_ControlVoltageScaling+0xe2>
  }

  return HAL_OK;
 8006f94:	2300      	movs	r3, #0
}
 8006f96:	4618      	mov	r0, r3
 8006f98:	3714      	adds	r7, #20
 8006f9a:	46bd      	mov	sp, r7
 8006f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa0:	4770      	bx	lr
 8006fa2:	bf00      	nop
 8006fa4:	46020800 	.word	0x46020800
 8006fa8:	2000000c 	.word	0x2000000c
 8006fac:	10624dd3 	.word	0x10624dd3

08006fb0 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief  Return Voltage Scaling Range.
  * @retval Applied voltage scaling value.
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8006fb0:	b480      	push	{r7}
 8006fb2:	af00      	add	r7, sp, #0
  return (PWR->SVMSR & PWR_SVMSR_ACTVOS);
 8006fb4:	4b04      	ldr	r3, [pc, #16]	@ (8006fc8 <HAL_PWREx_GetVoltageRange+0x18>)
 8006fb6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006fb8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
}
 8006fbc:	4618      	mov	r0, r3
 8006fbe:	46bd      	mov	sp, r7
 8006fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc4:	4770      	bx	lr
 8006fc6:	bf00      	nop
 8006fc8:	46020800 	.word	0x46020800

08006fcc <HAL_PWREx_ConfigSupply>:
  *                        @arg PWR_LDO_SUPPLY  : The LDO regulator supplies the Vcore Power Domains.
  *                        @arg PWR_SMPS_SUPPLY : The SMPS regulator supplies the Vcore Power Domains.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply(uint32_t SupplySource)
{
 8006fcc:	b480      	push	{r7}
 8006fce:	b085      	sub	sp, #20
 8006fd0:	af00      	add	r7, sp, #0
 8006fd2:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_SUPPLY(SupplySource));

  /* Set maximum time out */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8006fd4:	4b22      	ldr	r3, [pc, #136]	@ (8007060 <HAL_PWREx_ConfigSupply+0x94>)
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	4a22      	ldr	r2, [pc, #136]	@ (8007064 <HAL_PWREx_ConfigSupply+0x98>)
 8006fda:	fba2 2303 	umull	r2, r3, r2, r3
 8006fde:	099b      	lsrs	r3, r3, #6
 8006fe0:	2232      	movs	r2, #50	@ 0x32
 8006fe2:	fb02 f303 	mul.w	r3, r2, r3
 8006fe6:	4a1f      	ldr	r2, [pc, #124]	@ (8007064 <HAL_PWREx_ConfigSupply+0x98>)
 8006fe8:	fba2 2303 	umull	r2, r3, r2, r3
 8006fec:	099b      	lsrs	r3, r3, #6
 8006fee:	3301      	adds	r3, #1
 8006ff0:	60fb      	str	r3, [r7, #12]

  /* Configure the LDO as system regulator supply */
  if (SupplySource == PWR_LDO_SUPPLY)
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d113      	bne.n	8007020 <HAL_PWREx_ConfigSupply+0x54>
  {
    /* Set the power supply configuration */
    CLEAR_BIT(PWR->CR3, PWR_CR3_REGSEL);
 8006ff8:	4b1b      	ldr	r3, [pc, #108]	@ (8007068 <HAL_PWREx_ConfigSupply+0x9c>)
 8006ffa:	689b      	ldr	r3, [r3, #8]
 8006ffc:	4a1a      	ldr	r2, [pc, #104]	@ (8007068 <HAL_PWREx_ConfigSupply+0x9c>)
 8006ffe:	f023 0302 	bic.w	r3, r3, #2
 8007002:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8007004:	e002      	b.n	800700c <HAL_PWREx_ConfigSupply+0x40>
    {
      timeout--;
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	3b01      	subs	r3, #1
 800700a:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 800700c:	4b16      	ldr	r3, [pc, #88]	@ (8007068 <HAL_PWREx_ConfigSupply+0x9c>)
 800700e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007010:	f003 0302 	and.w	r3, r3, #2
 8007014:	2b02      	cmp	r3, #2
 8007016:	d116      	bne.n	8007046 <HAL_PWREx_ConfigSupply+0x7a>
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	2b00      	cmp	r3, #0
 800701c:	d1f3      	bne.n	8007006 <HAL_PWREx_ConfigSupply+0x3a>
 800701e:	e012      	b.n	8007046 <HAL_PWREx_ConfigSupply+0x7a>
  }
  /* Configure the SMPS as system regulator supply */
  else
  {
    /* Set the power supply configuration */
    SET_BIT(PWR->CR3, PWR_CR3_REGSEL);
 8007020:	4b11      	ldr	r3, [pc, #68]	@ (8007068 <HAL_PWREx_ConfigSupply+0x9c>)
 8007022:	689b      	ldr	r3, [r3, #8]
 8007024:	4a10      	ldr	r2, [pc, #64]	@ (8007068 <HAL_PWREx_ConfigSupply+0x9c>)
 8007026:	f043 0302 	orr.w	r3, r3, #2
 800702a:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 800702c:	e002      	b.n	8007034 <HAL_PWREx_ConfigSupply+0x68>
    {
      timeout--;
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	3b01      	subs	r3, #1
 8007032:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8007034:	4b0c      	ldr	r3, [pc, #48]	@ (8007068 <HAL_PWREx_ConfigSupply+0x9c>)
 8007036:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007038:	f003 0302 	and.w	r3, r3, #2
 800703c:	2b00      	cmp	r3, #0
 800703e:	d102      	bne.n	8007046 <HAL_PWREx_ConfigSupply+0x7a>
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	2b00      	cmp	r3, #0
 8007044:	d1f3      	bne.n	800702e <HAL_PWREx_ConfigSupply+0x62>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	2b00      	cmp	r3, #0
 800704a:	d101      	bne.n	8007050 <HAL_PWREx_ConfigSupply+0x84>
  {
    return HAL_TIMEOUT;
 800704c:	2303      	movs	r3, #3
 800704e:	e000      	b.n	8007052 <HAL_PWREx_ConfigSupply+0x86>
  }

  return HAL_OK;
 8007050:	2300      	movs	r3, #0
}
 8007052:	4618      	mov	r0, r3
 8007054:	3714      	adds	r7, #20
 8007056:	46bd      	mov	sp, r7
 8007058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800705c:	4770      	bx	lr
 800705e:	bf00      	nop
 8007060:	2000000c 	.word	0x2000000c
 8007064:	10624dd3 	.word	0x10624dd3
 8007068:	46020800 	.word	0x46020800

0800706c <HAL_PWREx_EnableVddIO2>:
  * @note   Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddIO2(void)
{
 800706c:	b480      	push	{r7}
 800706e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_IO2SV);
 8007070:	4b05      	ldr	r3, [pc, #20]	@ (8007088 <HAL_PWREx_EnableVddIO2+0x1c>)
 8007072:	691b      	ldr	r3, [r3, #16]
 8007074:	4a04      	ldr	r2, [pc, #16]	@ (8007088 <HAL_PWREx_EnableVddIO2+0x1c>)
 8007076:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800707a:	6113      	str	r3, [r2, #16]
}
 800707c:	bf00      	nop
 800707e:	46bd      	mov	sp, r7
 8007080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007084:	4770      	bx	lr
 8007086:	bf00      	nop
 8007088:	46020800 	.word	0x46020800

0800708c <HAL_PWREx_DisableUCPDDeadBattery>:
  *         pull-down or to handover control to the UCPD (the UCPD must be
  *         initialized before doing the disable).
  * @retval None.
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 800708c:	b480      	push	{r7}
 800708e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->UCPDR, PWR_UCPDR_UCPD_DBDIS);
 8007090:	4b05      	ldr	r3, [pc, #20]	@ (80070a8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8007092:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007094:	4a04      	ldr	r2, [pc, #16]	@ (80070a8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8007096:	f043 0301 	orr.w	r3, r3, #1
 800709a:	62d3      	str	r3, [r2, #44]	@ 0x2c
}
 800709c:	bf00      	nop
 800709e:	46bd      	mov	sp, r7
 80070a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a4:	4770      	bx	lr
 80070a6:	bf00      	nop
 80070a8:	46020800 	.word	0x46020800

080070ac <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pRCC_OscInitStruct)
{
 80070ac:	b580      	push	{r7, lr}
 80070ae:	b08e      	sub	sp, #56	@ 0x38
 80070b0:	af00      	add	r7, sp, #0
 80070b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source;
  uint32_t pll_config;
  FlagStatus pwrboosten = RESET;
 80070b4:	2300      	movs	r3, #0
 80070b6:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pRCC_OscInitStruct == NULL)
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d102      	bne.n	80070c6 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 80070c0:	2301      	movs	r3, #1
 80070c2:	f000 bec8 	b.w	8007e56 <HAL_RCC_OscConfig+0xdaa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pRCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80070c6:	4b99      	ldr	r3, [pc, #612]	@ (800732c <HAL_RCC_OscConfig+0x280>)
 80070c8:	69db      	ldr	r3, [r3, #28]
 80070ca:	f003 030c 	and.w	r3, r3, #12
 80070ce:	633b      	str	r3, [r7, #48]	@ 0x30
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80070d0:	4b96      	ldr	r3, [pc, #600]	@ (800732c <HAL_RCC_OscConfig+0x280>)
 80070d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80070d4:	f003 0303 	and.w	r3, r3, #3
 80070d8:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /*----------------------------- MSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	f003 0310 	and.w	r3, r3, #16
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	f000 816c 	beq.w	80073c0 <HAL_RCC_OscConfig+0x314>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(pRCC_OscInitStruct->MSIClockRange));

    /*Check if MSI is used as system clock or as PLL source when PLL is selected as system clock*/

    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80070e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d007      	beq.n	80070fe <HAL_RCC_OscConfig+0x52>
 80070ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070f0:	2b0c      	cmp	r3, #12
 80070f2:	f040 80de 	bne.w	80072b2 <HAL_RCC_OscConfig+0x206>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 80070f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80070f8:	2b01      	cmp	r3, #1
 80070fa:	f040 80da 	bne.w	80072b2 <HAL_RCC_OscConfig+0x206>
    {
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	69db      	ldr	r3, [r3, #28]
 8007102:	2b00      	cmp	r3, #0
 8007104:	d102      	bne.n	800710c <HAL_RCC_OscConfig+0x60>
      {
        return HAL_ERROR;
 8007106:	2301      	movs	r3, #1
 8007108:	f000 bea5 	b.w	8007e56 <HAL_RCC_OscConfig+0xdaa>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device */
        if (pRCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007110:	4b86      	ldr	r3, [pc, #536]	@ (800732c <HAL_RCC_OscConfig+0x280>)
 8007112:	689b      	ldr	r3, [r3, #8]
 8007114:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007118:	2b00      	cmp	r3, #0
 800711a:	d004      	beq.n	8007126 <HAL_RCC_OscConfig+0x7a>
 800711c:	4b83      	ldr	r3, [pc, #524]	@ (800732c <HAL_RCC_OscConfig+0x280>)
 800711e:	689b      	ldr	r3, [r3, #8]
 8007120:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8007124:	e005      	b.n	8007132 <HAL_RCC_OscConfig+0x86>
 8007126:	4b81      	ldr	r3, [pc, #516]	@ (800732c <HAL_RCC_OscConfig+0x280>)
 8007128:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800712c:	041b      	lsls	r3, r3, #16
 800712e:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8007132:	4293      	cmp	r3, r2
 8007134:	d255      	bcs.n	80071e2 <HAL_RCC_OscConfig+0x136>
        {
          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8007136:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007138:	2b00      	cmp	r3, #0
 800713a:	d10a      	bne.n	8007152 <HAL_RCC_OscConfig+0xa6>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007140:	4618      	mov	r0, r3
 8007142:	f001 fa11 	bl	8008568 <RCC_SetFlashLatencyFromMSIRange>
 8007146:	4603      	mov	r3, r0
 8007148:	2b00      	cmp	r3, #0
 800714a:	d002      	beq.n	8007152 <HAL_RCC_OscConfig+0xa6>
            {
              return HAL_ERROR;
 800714c:	2301      	movs	r3, #1
 800714e:	f000 be82 	b.w	8007e56 <HAL_RCC_OscConfig+0xdaa>
            }
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8007152:	4b76      	ldr	r3, [pc, #472]	@ (800732c <HAL_RCC_OscConfig+0x280>)
 8007154:	689b      	ldr	r3, [r3, #8]
 8007156:	4a75      	ldr	r2, [pc, #468]	@ (800732c <HAL_RCC_OscConfig+0x280>)
 8007158:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800715c:	6093      	str	r3, [r2, #8]
 800715e:	4b73      	ldr	r3, [pc, #460]	@ (800732c <HAL_RCC_OscConfig+0x280>)
 8007160:	689b      	ldr	r3, [r3, #8]
 8007162:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800716a:	4970      	ldr	r1, [pc, #448]	@ (800732c <HAL_RCC_OscConfig+0x280>)
 800716c:	4313      	orrs	r3, r2
 800716e:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007174:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8007178:	d309      	bcc.n	800718e <HAL_RCC_OscConfig+0xe2>
 800717a:	4b6c      	ldr	r3, [pc, #432]	@ (800732c <HAL_RCC_OscConfig+0x280>)
 800717c:	68db      	ldr	r3, [r3, #12]
 800717e:	f023 021f 	bic.w	r2, r3, #31
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	6a1b      	ldr	r3, [r3, #32]
 8007186:	4969      	ldr	r1, [pc, #420]	@ (800732c <HAL_RCC_OscConfig+0x280>)
 8007188:	4313      	orrs	r3, r2
 800718a:	60cb      	str	r3, [r1, #12]
 800718c:	e07e      	b.n	800728c <HAL_RCC_OscConfig+0x1e0>
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007192:	2b00      	cmp	r3, #0
 8007194:	da0a      	bge.n	80071ac <HAL_RCC_OscConfig+0x100>
 8007196:	4b65      	ldr	r3, [pc, #404]	@ (800732c <HAL_RCC_OscConfig+0x280>)
 8007198:	68db      	ldr	r3, [r3, #12]
 800719a:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	6a1b      	ldr	r3, [r3, #32]
 80071a2:	015b      	lsls	r3, r3, #5
 80071a4:	4961      	ldr	r1, [pc, #388]	@ (800732c <HAL_RCC_OscConfig+0x280>)
 80071a6:	4313      	orrs	r3, r2
 80071a8:	60cb      	str	r3, [r1, #12]
 80071aa:	e06f      	b.n	800728c <HAL_RCC_OscConfig+0x1e0>
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80071b0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80071b4:	d30a      	bcc.n	80071cc <HAL_RCC_OscConfig+0x120>
 80071b6:	4b5d      	ldr	r3, [pc, #372]	@ (800732c <HAL_RCC_OscConfig+0x280>)
 80071b8:	68db      	ldr	r3, [r3, #12]
 80071ba:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	6a1b      	ldr	r3, [r3, #32]
 80071c2:	029b      	lsls	r3, r3, #10
 80071c4:	4959      	ldr	r1, [pc, #356]	@ (800732c <HAL_RCC_OscConfig+0x280>)
 80071c6:	4313      	orrs	r3, r2
 80071c8:	60cb      	str	r3, [r1, #12]
 80071ca:	e05f      	b.n	800728c <HAL_RCC_OscConfig+0x1e0>
 80071cc:	4b57      	ldr	r3, [pc, #348]	@ (800732c <HAL_RCC_OscConfig+0x280>)
 80071ce:	68db      	ldr	r3, [r3, #12]
 80071d0:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	6a1b      	ldr	r3, [r3, #32]
 80071d8:	03db      	lsls	r3, r3, #15
 80071da:	4954      	ldr	r1, [pc, #336]	@ (800732c <HAL_RCC_OscConfig+0x280>)
 80071dc:	4313      	orrs	r3, r2
 80071de:	60cb      	str	r3, [r1, #12]
 80071e0:	e054      	b.n	800728c <HAL_RCC_OscConfig+0x1e0>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 80071e2:	4b52      	ldr	r3, [pc, #328]	@ (800732c <HAL_RCC_OscConfig+0x280>)
 80071e4:	689b      	ldr	r3, [r3, #8]
 80071e6:	4a51      	ldr	r2, [pc, #324]	@ (800732c <HAL_RCC_OscConfig+0x280>)
 80071e8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80071ec:	6093      	str	r3, [r2, #8]
 80071ee:	4b4f      	ldr	r3, [pc, #316]	@ (800732c <HAL_RCC_OscConfig+0x280>)
 80071f0:	689b      	ldr	r3, [r3, #8]
 80071f2:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80071fa:	494c      	ldr	r1, [pc, #304]	@ (800732c <HAL_RCC_OscConfig+0x280>)
 80071fc:	4313      	orrs	r3, r2
 80071fe:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007204:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8007208:	d309      	bcc.n	800721e <HAL_RCC_OscConfig+0x172>
 800720a:	4b48      	ldr	r3, [pc, #288]	@ (800732c <HAL_RCC_OscConfig+0x280>)
 800720c:	68db      	ldr	r3, [r3, #12]
 800720e:	f023 021f 	bic.w	r2, r3, #31
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	6a1b      	ldr	r3, [r3, #32]
 8007216:	4945      	ldr	r1, [pc, #276]	@ (800732c <HAL_RCC_OscConfig+0x280>)
 8007218:	4313      	orrs	r3, r2
 800721a:	60cb      	str	r3, [r1, #12]
 800721c:	e028      	b.n	8007270 <HAL_RCC_OscConfig+0x1c4>
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007222:	2b00      	cmp	r3, #0
 8007224:	da0a      	bge.n	800723c <HAL_RCC_OscConfig+0x190>
 8007226:	4b41      	ldr	r3, [pc, #260]	@ (800732c <HAL_RCC_OscConfig+0x280>)
 8007228:	68db      	ldr	r3, [r3, #12]
 800722a:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	6a1b      	ldr	r3, [r3, #32]
 8007232:	015b      	lsls	r3, r3, #5
 8007234:	493d      	ldr	r1, [pc, #244]	@ (800732c <HAL_RCC_OscConfig+0x280>)
 8007236:	4313      	orrs	r3, r2
 8007238:	60cb      	str	r3, [r1, #12]
 800723a:	e019      	b.n	8007270 <HAL_RCC_OscConfig+0x1c4>
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007240:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007244:	d30a      	bcc.n	800725c <HAL_RCC_OscConfig+0x1b0>
 8007246:	4b39      	ldr	r3, [pc, #228]	@ (800732c <HAL_RCC_OscConfig+0x280>)
 8007248:	68db      	ldr	r3, [r3, #12]
 800724a:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	6a1b      	ldr	r3, [r3, #32]
 8007252:	029b      	lsls	r3, r3, #10
 8007254:	4935      	ldr	r1, [pc, #212]	@ (800732c <HAL_RCC_OscConfig+0x280>)
 8007256:	4313      	orrs	r3, r2
 8007258:	60cb      	str	r3, [r1, #12]
 800725a:	e009      	b.n	8007270 <HAL_RCC_OscConfig+0x1c4>
 800725c:	4b33      	ldr	r3, [pc, #204]	@ (800732c <HAL_RCC_OscConfig+0x280>)
 800725e:	68db      	ldr	r3, [r3, #12]
 8007260:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	6a1b      	ldr	r3, [r3, #32]
 8007268:	03db      	lsls	r3, r3, #15
 800726a:	4930      	ldr	r1, [pc, #192]	@ (800732c <HAL_RCC_OscConfig+0x280>)
 800726c:	4313      	orrs	r3, r2
 800726e:	60cb      	str	r3, [r1, #12]
                                                (pRCC_OscInitStruct->MSIClockRange));

          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8007270:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007272:	2b00      	cmp	r3, #0
 8007274:	d10a      	bne.n	800728c <HAL_RCC_OscConfig+0x1e0>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800727a:	4618      	mov	r0, r3
 800727c:	f001 f974 	bl	8008568 <RCC_SetFlashLatencyFromMSIRange>
 8007280:	4603      	mov	r3, r0
 8007282:	2b00      	cmp	r3, #0
 8007284:	d002      	beq.n	800728c <HAL_RCC_OscConfig+0x1e0>
            {
              return HAL_ERROR;
 8007286:	2301      	movs	r3, #1
 8007288:	f000 bde5 	b.w	8007e56 <HAL_RCC_OscConfig+0xdaa>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        (void) HAL_RCC_GetHCLKFreq();
 800728c:	f001 f8de 	bl	800844c <HAL_RCC_GetHCLKFreq>
        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8007290:	4b27      	ldr	r3, [pc, #156]	@ (8007330 <HAL_RCC_OscConfig+0x284>)
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	4618      	mov	r0, r3
 8007296:	f7fd f88f 	bl	80043b8 <HAL_InitTick>
 800729a:	4603      	mov	r3, r0
 800729c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if (status != HAL_OK)
 80072a0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	f000 808a 	beq.w	80073be <HAL_RCC_OscConfig+0x312>
        {
          return status;
 80072aa:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80072ae:	f000 bdd2 	b.w	8007e56 <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Check the MSI State */
      if (pRCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	69db      	ldr	r3, [r3, #28]
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d066      	beq.n	8007388 <HAL_RCC_OscConfig+0x2dc>
      {
        /* Enable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_ENABLE();
 80072ba:	4b1c      	ldr	r3, [pc, #112]	@ (800732c <HAL_RCC_OscConfig+0x280>)
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	4a1b      	ldr	r2, [pc, #108]	@ (800732c <HAL_RCC_OscConfig+0x280>)
 80072c0:	f043 0301 	orr.w	r3, r3, #1
 80072c4:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80072c6:	f7fd fd31 	bl	8004d2c <HAL_GetTick>
 80072ca:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 80072cc:	e009      	b.n	80072e2 <HAL_RCC_OscConfig+0x236>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80072ce:	f7fd fd2d 	bl	8004d2c <HAL_GetTick>
 80072d2:	4602      	mov	r2, r0
 80072d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80072d6:	1ad3      	subs	r3, r2, r3
 80072d8:	2b02      	cmp	r3, #2
 80072da:	d902      	bls.n	80072e2 <HAL_RCC_OscConfig+0x236>
          {
            return HAL_TIMEOUT;
 80072dc:	2303      	movs	r3, #3
 80072de:	f000 bdba 	b.w	8007e56 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 80072e2:	4b12      	ldr	r3, [pc, #72]	@ (800732c <HAL_RCC_OscConfig+0x280>)
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	f003 0304 	and.w	r3, r3, #4
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d0ef      	beq.n	80072ce <HAL_RCC_OscConfig+0x222>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range */
        __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 80072ee:	4b0f      	ldr	r3, [pc, #60]	@ (800732c <HAL_RCC_OscConfig+0x280>)
 80072f0:	689b      	ldr	r3, [r3, #8]
 80072f2:	4a0e      	ldr	r2, [pc, #56]	@ (800732c <HAL_RCC_OscConfig+0x280>)
 80072f4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80072f8:	6093      	str	r3, [r2, #8]
 80072fa:	4b0c      	ldr	r3, [pc, #48]	@ (800732c <HAL_RCC_OscConfig+0x280>)
 80072fc:	689b      	ldr	r3, [r3, #8]
 80072fe:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007306:	4909      	ldr	r1, [pc, #36]	@ (800732c <HAL_RCC_OscConfig+0x280>)
 8007308:	4313      	orrs	r3, r2
 800730a:	608b      	str	r3, [r1, #8]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007310:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8007314:	d30e      	bcc.n	8007334 <HAL_RCC_OscConfig+0x288>
 8007316:	4b05      	ldr	r3, [pc, #20]	@ (800732c <HAL_RCC_OscConfig+0x280>)
 8007318:	68db      	ldr	r3, [r3, #12]
 800731a:	f023 021f 	bic.w	r2, r3, #31
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	6a1b      	ldr	r3, [r3, #32]
 8007322:	4902      	ldr	r1, [pc, #8]	@ (800732c <HAL_RCC_OscConfig+0x280>)
 8007324:	4313      	orrs	r3, r2
 8007326:	60cb      	str	r3, [r1, #12]
 8007328:	e04a      	b.n	80073c0 <HAL_RCC_OscConfig+0x314>
 800732a:	bf00      	nop
 800732c:	46020c00 	.word	0x46020c00
 8007330:	2000002c 	.word	0x2000002c
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007338:	2b00      	cmp	r3, #0
 800733a:	da0a      	bge.n	8007352 <HAL_RCC_OscConfig+0x2a6>
 800733c:	4b98      	ldr	r3, [pc, #608]	@ (80075a0 <HAL_RCC_OscConfig+0x4f4>)
 800733e:	68db      	ldr	r3, [r3, #12]
 8007340:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	6a1b      	ldr	r3, [r3, #32]
 8007348:	015b      	lsls	r3, r3, #5
 800734a:	4995      	ldr	r1, [pc, #596]	@ (80075a0 <HAL_RCC_OscConfig+0x4f4>)
 800734c:	4313      	orrs	r3, r2
 800734e:	60cb      	str	r3, [r1, #12]
 8007350:	e036      	b.n	80073c0 <HAL_RCC_OscConfig+0x314>
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007356:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800735a:	d30a      	bcc.n	8007372 <HAL_RCC_OscConfig+0x2c6>
 800735c:	4b90      	ldr	r3, [pc, #576]	@ (80075a0 <HAL_RCC_OscConfig+0x4f4>)
 800735e:	68db      	ldr	r3, [r3, #12]
 8007360:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	6a1b      	ldr	r3, [r3, #32]
 8007368:	029b      	lsls	r3, r3, #10
 800736a:	498d      	ldr	r1, [pc, #564]	@ (80075a0 <HAL_RCC_OscConfig+0x4f4>)
 800736c:	4313      	orrs	r3, r2
 800736e:	60cb      	str	r3, [r1, #12]
 8007370:	e026      	b.n	80073c0 <HAL_RCC_OscConfig+0x314>
 8007372:	4b8b      	ldr	r3, [pc, #556]	@ (80075a0 <HAL_RCC_OscConfig+0x4f4>)
 8007374:	68db      	ldr	r3, [r3, #12]
 8007376:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	6a1b      	ldr	r3, [r3, #32]
 800737e:	03db      	lsls	r3, r3, #15
 8007380:	4987      	ldr	r1, [pc, #540]	@ (80075a0 <HAL_RCC_OscConfig+0x4f4>)
 8007382:	4313      	orrs	r3, r2
 8007384:	60cb      	str	r3, [r1, #12]
 8007386:	e01b      	b.n	80073c0 <HAL_RCC_OscConfig+0x314>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_DISABLE();
 8007388:	4b85      	ldr	r3, [pc, #532]	@ (80075a0 <HAL_RCC_OscConfig+0x4f4>)
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	4a84      	ldr	r2, [pc, #528]	@ (80075a0 <HAL_RCC_OscConfig+0x4f4>)
 800738e:	f023 0301 	bic.w	r3, r3, #1
 8007392:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8007394:	f7fd fcca 	bl	8004d2c <HAL_GetTick>
 8007398:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 800739a:	e009      	b.n	80073b0 <HAL_RCC_OscConfig+0x304>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800739c:	f7fd fcc6 	bl	8004d2c <HAL_GetTick>
 80073a0:	4602      	mov	r2, r0
 80073a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80073a4:	1ad3      	subs	r3, r2, r3
 80073a6:	2b02      	cmp	r3, #2
 80073a8:	d902      	bls.n	80073b0 <HAL_RCC_OscConfig+0x304>
          {
            return HAL_TIMEOUT;
 80073aa:	2303      	movs	r3, #3
 80073ac:	f000 bd53 	b.w	8007e56 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 80073b0:	4b7b      	ldr	r3, [pc, #492]	@ (80075a0 <HAL_RCC_OscConfig+0x4f4>)
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	f003 0304 	and.w	r3, r3, #4
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d1ef      	bne.n	800739c <HAL_RCC_OscConfig+0x2f0>
 80073bc:	e000      	b.n	80073c0 <HAL_RCC_OscConfig+0x314>
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80073be:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	f003 0301 	and.w	r3, r3, #1
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	f000 808b 	beq.w	80074e4 <HAL_RCC_OscConfig+0x438>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pRCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80073ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073d0:	2b08      	cmp	r3, #8
 80073d2:	d005      	beq.n	80073e0 <HAL_RCC_OscConfig+0x334>
 80073d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073d6:	2b0c      	cmp	r3, #12
 80073d8:	d109      	bne.n	80073ee <HAL_RCC_OscConfig+0x342>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80073da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80073dc:	2b03      	cmp	r3, #3
 80073de:	d106      	bne.n	80073ee <HAL_RCC_OscConfig+0x342>
    {
      if (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	685b      	ldr	r3, [r3, #4]
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d17d      	bne.n	80074e4 <HAL_RCC_OscConfig+0x438>
      {
        return HAL_ERROR;
 80073e8:	2301      	movs	r3, #1
 80073ea:	f000 bd34 	b.w	8007e56 <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	685b      	ldr	r3, [r3, #4]
 80073f2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80073f6:	d106      	bne.n	8007406 <HAL_RCC_OscConfig+0x35a>
 80073f8:	4b69      	ldr	r3, [pc, #420]	@ (80075a0 <HAL_RCC_OscConfig+0x4f4>)
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	4a68      	ldr	r2, [pc, #416]	@ (80075a0 <HAL_RCC_OscConfig+0x4f4>)
 80073fe:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007402:	6013      	str	r3, [r2, #0]
 8007404:	e041      	b.n	800748a <HAL_RCC_OscConfig+0x3de>
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	685b      	ldr	r3, [r3, #4]
 800740a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800740e:	d112      	bne.n	8007436 <HAL_RCC_OscConfig+0x38a>
 8007410:	4b63      	ldr	r3, [pc, #396]	@ (80075a0 <HAL_RCC_OscConfig+0x4f4>)
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	4a62      	ldr	r2, [pc, #392]	@ (80075a0 <HAL_RCC_OscConfig+0x4f4>)
 8007416:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800741a:	6013      	str	r3, [r2, #0]
 800741c:	4b60      	ldr	r3, [pc, #384]	@ (80075a0 <HAL_RCC_OscConfig+0x4f4>)
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	4a5f      	ldr	r2, [pc, #380]	@ (80075a0 <HAL_RCC_OscConfig+0x4f4>)
 8007422:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8007426:	6013      	str	r3, [r2, #0]
 8007428:	4b5d      	ldr	r3, [pc, #372]	@ (80075a0 <HAL_RCC_OscConfig+0x4f4>)
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	4a5c      	ldr	r2, [pc, #368]	@ (80075a0 <HAL_RCC_OscConfig+0x4f4>)
 800742e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007432:	6013      	str	r3, [r2, #0]
 8007434:	e029      	b.n	800748a <HAL_RCC_OscConfig+0x3de>
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	685b      	ldr	r3, [r3, #4]
 800743a:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 800743e:	d112      	bne.n	8007466 <HAL_RCC_OscConfig+0x3ba>
 8007440:	4b57      	ldr	r3, [pc, #348]	@ (80075a0 <HAL_RCC_OscConfig+0x4f4>)
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	4a56      	ldr	r2, [pc, #344]	@ (80075a0 <HAL_RCC_OscConfig+0x4f4>)
 8007446:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800744a:	6013      	str	r3, [r2, #0]
 800744c:	4b54      	ldr	r3, [pc, #336]	@ (80075a0 <HAL_RCC_OscConfig+0x4f4>)
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	4a53      	ldr	r2, [pc, #332]	@ (80075a0 <HAL_RCC_OscConfig+0x4f4>)
 8007452:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007456:	6013      	str	r3, [r2, #0]
 8007458:	4b51      	ldr	r3, [pc, #324]	@ (80075a0 <HAL_RCC_OscConfig+0x4f4>)
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	4a50      	ldr	r2, [pc, #320]	@ (80075a0 <HAL_RCC_OscConfig+0x4f4>)
 800745e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007462:	6013      	str	r3, [r2, #0]
 8007464:	e011      	b.n	800748a <HAL_RCC_OscConfig+0x3de>
 8007466:	4b4e      	ldr	r3, [pc, #312]	@ (80075a0 <HAL_RCC_OscConfig+0x4f4>)
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	4a4d      	ldr	r2, [pc, #308]	@ (80075a0 <HAL_RCC_OscConfig+0x4f4>)
 800746c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007470:	6013      	str	r3, [r2, #0]
 8007472:	4b4b      	ldr	r3, [pc, #300]	@ (80075a0 <HAL_RCC_OscConfig+0x4f4>)
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	4a4a      	ldr	r2, [pc, #296]	@ (80075a0 <HAL_RCC_OscConfig+0x4f4>)
 8007478:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800747c:	6013      	str	r3, [r2, #0]
 800747e:	4b48      	ldr	r3, [pc, #288]	@ (80075a0 <HAL_RCC_OscConfig+0x4f4>)
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	4a47      	ldr	r2, [pc, #284]	@ (80075a0 <HAL_RCC_OscConfig+0x4f4>)
 8007484:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8007488:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	685b      	ldr	r3, [r3, #4]
 800748e:	2b00      	cmp	r3, #0
 8007490:	d014      	beq.n	80074bc <HAL_RCC_OscConfig+0x410>
      {
        tickstart = HAL_GetTick();
 8007492:	f7fd fc4b 	bl	8004d2c <HAL_GetTick>
 8007496:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007498:	e009      	b.n	80074ae <HAL_RCC_OscConfig+0x402>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800749a:	f7fd fc47 	bl	8004d2c <HAL_GetTick>
 800749e:	4602      	mov	r2, r0
 80074a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80074a2:	1ad3      	subs	r3, r2, r3
 80074a4:	2b64      	cmp	r3, #100	@ 0x64
 80074a6:	d902      	bls.n	80074ae <HAL_RCC_OscConfig+0x402>
          {
            return HAL_TIMEOUT;
 80074a8:	2303      	movs	r3, #3
 80074aa:	f000 bcd4 	b.w	8007e56 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80074ae:	4b3c      	ldr	r3, [pc, #240]	@ (80075a0 <HAL_RCC_OscConfig+0x4f4>)
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d0ef      	beq.n	800749a <HAL_RCC_OscConfig+0x3ee>
 80074ba:	e013      	b.n	80074e4 <HAL_RCC_OscConfig+0x438>
          }
        }
      }
      else
      {
        tickstart = HAL_GetTick();
 80074bc:	f7fd fc36 	bl	8004d2c <HAL_GetTick>
 80074c0:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80074c2:	e009      	b.n	80074d8 <HAL_RCC_OscConfig+0x42c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80074c4:	f7fd fc32 	bl	8004d2c <HAL_GetTick>
 80074c8:	4602      	mov	r2, r0
 80074ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80074cc:	1ad3      	subs	r3, r2, r3
 80074ce:	2b64      	cmp	r3, #100	@ 0x64
 80074d0:	d902      	bls.n	80074d8 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 80074d2:	2303      	movs	r3, #3
 80074d4:	f000 bcbf 	b.w	8007e56 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80074d8:	4b31      	ldr	r3, [pc, #196]	@ (80075a0 <HAL_RCC_OscConfig+0x4f4>)
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d1ef      	bne.n	80074c4 <HAL_RCC_OscConfig+0x418>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	f003 0302 	and.w	r3, r3, #2
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d05f      	beq.n	80075b0 <HAL_RCC_OscConfig+0x504>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(pRCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80074f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074f2:	2b04      	cmp	r3, #4
 80074f4:	d005      	beq.n	8007502 <HAL_RCC_OscConfig+0x456>
 80074f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074f8:	2b0c      	cmp	r3, #12
 80074fa:	d114      	bne.n	8007526 <HAL_RCC_OscConfig+0x47a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80074fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80074fe:	2b02      	cmp	r3, #2
 8007500:	d111      	bne.n	8007526 <HAL_RCC_OscConfig+0x47a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	68db      	ldr	r3, [r3, #12]
 8007506:	2b00      	cmp	r3, #0
 8007508:	d102      	bne.n	8007510 <HAL_RCC_OscConfig+0x464>
      {
        return HAL_ERROR;
 800750a:	2301      	movs	r3, #1
 800750c:	f000 bca3 	b.w	8007e56 <HAL_RCC_OscConfig+0xdaa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8007510:	4b23      	ldr	r3, [pc, #140]	@ (80075a0 <HAL_RCC_OscConfig+0x4f4>)
 8007512:	691b      	ldr	r3, [r3, #16]
 8007514:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	691b      	ldr	r3, [r3, #16]
 800751c:	041b      	lsls	r3, r3, #16
 800751e:	4920      	ldr	r1, [pc, #128]	@ (80075a0 <HAL_RCC_OscConfig+0x4f4>)
 8007520:	4313      	orrs	r3, r2
 8007522:	610b      	str	r3, [r1, #16]
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8007524:	e044      	b.n	80075b0 <HAL_RCC_OscConfig+0x504>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	68db      	ldr	r3, [r3, #12]
 800752a:	2b00      	cmp	r3, #0
 800752c:	d024      	beq.n	8007578 <HAL_RCC_OscConfig+0x4cc>
      {
        /* Enable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_ENABLE();
 800752e:	4b1c      	ldr	r3, [pc, #112]	@ (80075a0 <HAL_RCC_OscConfig+0x4f4>)
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	4a1b      	ldr	r2, [pc, #108]	@ (80075a0 <HAL_RCC_OscConfig+0x4f4>)
 8007534:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007538:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800753a:	f7fd fbf7 	bl	8004d2c <HAL_GetTick>
 800753e:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007540:	e009      	b.n	8007556 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007542:	f7fd fbf3 	bl	8004d2c <HAL_GetTick>
 8007546:	4602      	mov	r2, r0
 8007548:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800754a:	1ad3      	subs	r3, r2, r3
 800754c:	2b02      	cmp	r3, #2
 800754e:	d902      	bls.n	8007556 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8007550:	2303      	movs	r3, #3
 8007552:	f000 bc80 	b.w	8007e56 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007556:	4b12      	ldr	r3, [pc, #72]	@ (80075a0 <HAL_RCC_OscConfig+0x4f4>)
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800755e:	2b00      	cmp	r3, #0
 8007560:	d0ef      	beq.n	8007542 <HAL_RCC_OscConfig+0x496>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8007562:	4b0f      	ldr	r3, [pc, #60]	@ (80075a0 <HAL_RCC_OscConfig+0x4f4>)
 8007564:	691b      	ldr	r3, [r3, #16]
 8007566:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	691b      	ldr	r3, [r3, #16]
 800756e:	041b      	lsls	r3, r3, #16
 8007570:	490b      	ldr	r1, [pc, #44]	@ (80075a0 <HAL_RCC_OscConfig+0x4f4>)
 8007572:	4313      	orrs	r3, r2
 8007574:	610b      	str	r3, [r1, #16]
 8007576:	e01b      	b.n	80075b0 <HAL_RCC_OscConfig+0x504>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_DISABLE();
 8007578:	4b09      	ldr	r3, [pc, #36]	@ (80075a0 <HAL_RCC_OscConfig+0x4f4>)
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	4a08      	ldr	r2, [pc, #32]	@ (80075a0 <HAL_RCC_OscConfig+0x4f4>)
 800757e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007582:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8007584:	f7fd fbd2 	bl	8004d2c <HAL_GetTick>
 8007588:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800758a:	e00b      	b.n	80075a4 <HAL_RCC_OscConfig+0x4f8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800758c:	f7fd fbce 	bl	8004d2c <HAL_GetTick>
 8007590:	4602      	mov	r2, r0
 8007592:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007594:	1ad3      	subs	r3, r2, r3
 8007596:	2b02      	cmp	r3, #2
 8007598:	d904      	bls.n	80075a4 <HAL_RCC_OscConfig+0x4f8>
          {
            return HAL_TIMEOUT;
 800759a:	2303      	movs	r3, #3
 800759c:	f000 bc5b 	b.w	8007e56 <HAL_RCC_OscConfig+0xdaa>
 80075a0:	46020c00 	.word	0x46020c00
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80075a4:	4baf      	ldr	r3, [pc, #700]	@ (8007864 <HAL_RCC_OscConfig+0x7b8>)
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d1ed      	bne.n	800758c <HAL_RCC_OscConfig+0x4e0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	f003 0308 	and.w	r3, r3, #8
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	f000 80c8 	beq.w	800774e <HAL_RCC_OscConfig+0x6a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(pRCC_OscInitStruct->LSIState));

    FlagStatus  pwrclkchanged = RESET;
 80075be:	2300      	movs	r3, #0
 80075c0:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

    /* Update LSI configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80075c4:	4ba7      	ldr	r3, [pc, #668]	@ (8007864 <HAL_RCC_OscConfig+0x7b8>)
 80075c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80075ca:	f003 0304 	and.w	r3, r3, #4
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d111      	bne.n	80075f6 <HAL_RCC_OscConfig+0x54a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80075d2:	4ba4      	ldr	r3, [pc, #656]	@ (8007864 <HAL_RCC_OscConfig+0x7b8>)
 80075d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80075d8:	4aa2      	ldr	r2, [pc, #648]	@ (8007864 <HAL_RCC_OscConfig+0x7b8>)
 80075da:	f043 0304 	orr.w	r3, r3, #4
 80075de:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80075e2:	4ba0      	ldr	r3, [pc, #640]	@ (8007864 <HAL_RCC_OscConfig+0x7b8>)
 80075e4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80075e8:	f003 0304 	and.w	r3, r3, #4
 80075ec:	617b      	str	r3, [r7, #20]
 80075ee:	697b      	ldr	r3, [r7, #20]
      pwrclkchanged = SET;
 80075f0:	2301      	movs	r3, #1
 80075f2:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80075f6:	4b9c      	ldr	r3, [pc, #624]	@ (8007868 <HAL_RCC_OscConfig+0x7bc>)
 80075f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80075fa:	f003 0301 	and.w	r3, r3, #1
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d119      	bne.n	8007636 <HAL_RCC_OscConfig+0x58a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8007602:	4b99      	ldr	r3, [pc, #612]	@ (8007868 <HAL_RCC_OscConfig+0x7bc>)
 8007604:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007606:	4a98      	ldr	r2, [pc, #608]	@ (8007868 <HAL_RCC_OscConfig+0x7bc>)
 8007608:	f043 0301 	orr.w	r3, r3, #1
 800760c:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800760e:	f7fd fb8d 	bl	8004d2c <HAL_GetTick>
 8007612:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8007614:	e009      	b.n	800762a <HAL_RCC_OscConfig+0x57e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007616:	f7fd fb89 	bl	8004d2c <HAL_GetTick>
 800761a:	4602      	mov	r2, r0
 800761c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800761e:	1ad3      	subs	r3, r2, r3
 8007620:	2b02      	cmp	r3, #2
 8007622:	d902      	bls.n	800762a <HAL_RCC_OscConfig+0x57e>
        {
          return HAL_TIMEOUT;
 8007624:	2303      	movs	r3, #3
 8007626:	f000 bc16 	b.w	8007e56 <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800762a:	4b8f      	ldr	r3, [pc, #572]	@ (8007868 <HAL_RCC_OscConfig+0x7bc>)
 800762c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800762e:	f003 0301 	and.w	r3, r3, #1
 8007632:	2b00      	cmp	r3, #0
 8007634:	d0ef      	beq.n	8007616 <HAL_RCC_OscConfig+0x56a>
        }
      }
    }
    /* Check the LSI State */
    if (pRCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	695b      	ldr	r3, [r3, #20]
 800763a:	2b00      	cmp	r3, #0
 800763c:	d05f      	beq.n	80076fe <HAL_RCC_OscConfig+0x652>
    {
      uint32_t bdcr_temp = RCC->BDCR;
 800763e:	4b89      	ldr	r3, [pc, #548]	@ (8007864 <HAL_RCC_OscConfig+0x7b8>)
 8007640:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007644:	623b      	str	r3, [r7, #32]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(pRCC_OscInitStruct->LSIDiv));

      if (pRCC_OscInitStruct->LSIDiv != (bdcr_temp & RCC_BDCR_LSIPREDIV))
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	699a      	ldr	r2, [r3, #24]
 800764a:	6a3b      	ldr	r3, [r7, #32]
 800764c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007650:	429a      	cmp	r2, r3
 8007652:	d037      	beq.n	80076c4 <HAL_RCC_OscConfig+0x618>
      {
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8007654:	6a3b      	ldr	r3, [r7, #32]
 8007656:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800765a:	2b00      	cmp	r3, #0
 800765c:	d006      	beq.n	800766c <HAL_RCC_OscConfig+0x5c0>
            ((bdcr_temp & RCC_BDCR_LSION) != RCC_BDCR_LSION))
 800765e:	6a3b      	ldr	r3, [r7, #32]
 8007660:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8007664:	2b00      	cmp	r3, #0
 8007666:	d101      	bne.n	800766c <HAL_RCC_OscConfig+0x5c0>
        {
          /* If LSIRDY is set while LSION is not enabled, LSIPREDIV can't be updated */
          /* The LSIPREDIV cannot be changed if the LSI is used by the IWDG or by the RTC */
          return HAL_ERROR;
 8007668:	2301      	movs	r3, #1
 800766a:	e3f4      	b.n	8007e56 <HAL_RCC_OscConfig+0xdaa>
        }

        /* Turn off LSI before changing RCC_BDCR_LSIPREDIV */
        if ((bdcr_temp & RCC_BDCR_LSION) == RCC_BDCR_LSION)
 800766c:	6a3b      	ldr	r3, [r7, #32]
 800766e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8007672:	2b00      	cmp	r3, #0
 8007674:	d01b      	beq.n	80076ae <HAL_RCC_OscConfig+0x602>
        {
          __HAL_RCC_LSI_DISABLE();
 8007676:	4b7b      	ldr	r3, [pc, #492]	@ (8007864 <HAL_RCC_OscConfig+0x7b8>)
 8007678:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800767c:	4a79      	ldr	r2, [pc, #484]	@ (8007864 <HAL_RCC_OscConfig+0x7b8>)
 800767e:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 8007682:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

          tickstart = HAL_GetTick();
 8007686:	f7fd fb51 	bl	8004d2c <HAL_GetTick>
 800768a:	62b8      	str	r0, [r7, #40]	@ 0x28

          /* Wait till LSI is disabled */
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 800768c:	e008      	b.n	80076a0 <HAL_RCC_OscConfig+0x5f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800768e:	f7fd fb4d 	bl	8004d2c <HAL_GetTick>
 8007692:	4602      	mov	r2, r0
 8007694:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007696:	1ad3      	subs	r3, r2, r3
 8007698:	2b05      	cmp	r3, #5
 800769a:	d901      	bls.n	80076a0 <HAL_RCC_OscConfig+0x5f4>
            {
              return HAL_TIMEOUT;
 800769c:	2303      	movs	r3, #3
 800769e:	e3da      	b.n	8007e56 <HAL_RCC_OscConfig+0xdaa>
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80076a0:	4b70      	ldr	r3, [pc, #448]	@ (8007864 <HAL_RCC_OscConfig+0x7b8>)
 80076a2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80076a6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d1ef      	bne.n	800768e <HAL_RCC_OscConfig+0x5e2>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->BDCR, RCC_BDCR_LSIPREDIV, pRCC_OscInitStruct->LSIDiv);
 80076ae:	4b6d      	ldr	r3, [pc, #436]	@ (8007864 <HAL_RCC_OscConfig+0x7b8>)
 80076b0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80076b4:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	699b      	ldr	r3, [r3, #24]
 80076bc:	4969      	ldr	r1, [pc, #420]	@ (8007864 <HAL_RCC_OscConfig+0x7b8>)
 80076be:	4313      	orrs	r3, r2
 80076c0:	f8c1 30f0 	str.w	r3, [r1, #240]	@ 0xf0
      }

      /* Enable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_ENABLE();
 80076c4:	4b67      	ldr	r3, [pc, #412]	@ (8007864 <HAL_RCC_OscConfig+0x7b8>)
 80076c6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80076ca:	4a66      	ldr	r2, [pc, #408]	@ (8007864 <HAL_RCC_OscConfig+0x7b8>)
 80076cc:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80076d0:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 80076d4:	f7fd fb2a 	bl	8004d2c <HAL_GetTick>
 80076d8:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 80076da:	e008      	b.n	80076ee <HAL_RCC_OscConfig+0x642>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80076dc:	f7fd fb26 	bl	8004d2c <HAL_GetTick>
 80076e0:	4602      	mov	r2, r0
 80076e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80076e4:	1ad3      	subs	r3, r2, r3
 80076e6:	2b05      	cmp	r3, #5
 80076e8:	d901      	bls.n	80076ee <HAL_RCC_OscConfig+0x642>
        {
          return HAL_TIMEOUT;
 80076ea:	2303      	movs	r3, #3
 80076ec:	e3b3      	b.n	8007e56 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 80076ee:	4b5d      	ldr	r3, [pc, #372]	@ (8007864 <HAL_RCC_OscConfig+0x7b8>)
 80076f0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80076f4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d0ef      	beq.n	80076dc <HAL_RCC_OscConfig+0x630>
 80076fc:	e01b      	b.n	8007736 <HAL_RCC_OscConfig+0x68a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_DISABLE();
 80076fe:	4b59      	ldr	r3, [pc, #356]	@ (8007864 <HAL_RCC_OscConfig+0x7b8>)
 8007700:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007704:	4a57      	ldr	r2, [pc, #348]	@ (8007864 <HAL_RCC_OscConfig+0x7b8>)
 8007706:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 800770a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 800770e:	f7fd fb0d 	bl	8004d2c <HAL_GetTick>
 8007712:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8007714:	e008      	b.n	8007728 <HAL_RCC_OscConfig+0x67c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007716:	f7fd fb09 	bl	8004d2c <HAL_GetTick>
 800771a:	4602      	mov	r2, r0
 800771c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800771e:	1ad3      	subs	r3, r2, r3
 8007720:	2b05      	cmp	r3, #5
 8007722:	d901      	bls.n	8007728 <HAL_RCC_OscConfig+0x67c>
        {
          return HAL_TIMEOUT;
 8007724:	2303      	movs	r3, #3
 8007726:	e396      	b.n	8007e56 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8007728:	4b4e      	ldr	r3, [pc, #312]	@ (8007864 <HAL_RCC_OscConfig+0x7b8>)
 800772a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800772e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007732:	2b00      	cmp	r3, #0
 8007734:	d1ef      	bne.n	8007716 <HAL_RCC_OscConfig+0x66a>
        }
      }
    }
    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8007736:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800773a:	2b01      	cmp	r3, #1
 800773c:	d107      	bne.n	800774e <HAL_RCC_OscConfig+0x6a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800773e:	4b49      	ldr	r3, [pc, #292]	@ (8007864 <HAL_RCC_OscConfig+0x7b8>)
 8007740:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007744:	4a47      	ldr	r2, [pc, #284]	@ (8007864 <HAL_RCC_OscConfig+0x7b8>)
 8007746:	f023 0304 	bic.w	r3, r3, #4
 800774a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	f003 0304 	and.w	r3, r3, #4
 8007756:	2b00      	cmp	r3, #0
 8007758:	f000 8111 	beq.w	800797e <HAL_RCC_OscConfig+0x8d2>
  {
    FlagStatus pwrclkchanged = RESET;
 800775c:	2300      	movs	r3, #0
 800775e:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pRCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007762:	4b40      	ldr	r3, [pc, #256]	@ (8007864 <HAL_RCC_OscConfig+0x7b8>)
 8007764:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007768:	f003 0304 	and.w	r3, r3, #4
 800776c:	2b00      	cmp	r3, #0
 800776e:	d111      	bne.n	8007794 <HAL_RCC_OscConfig+0x6e8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007770:	4b3c      	ldr	r3, [pc, #240]	@ (8007864 <HAL_RCC_OscConfig+0x7b8>)
 8007772:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007776:	4a3b      	ldr	r2, [pc, #236]	@ (8007864 <HAL_RCC_OscConfig+0x7b8>)
 8007778:	f043 0304 	orr.w	r3, r3, #4
 800777c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8007780:	4b38      	ldr	r3, [pc, #224]	@ (8007864 <HAL_RCC_OscConfig+0x7b8>)
 8007782:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007786:	f003 0304 	and.w	r3, r3, #4
 800778a:	613b      	str	r3, [r7, #16]
 800778c:	693b      	ldr	r3, [r7, #16]
      pwrclkchanged = SET;
 800778e:	2301      	movs	r3, #1
 8007790:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8007794:	4b34      	ldr	r3, [pc, #208]	@ (8007868 <HAL_RCC_OscConfig+0x7bc>)
 8007796:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007798:	f003 0301 	and.w	r3, r3, #1
 800779c:	2b00      	cmp	r3, #0
 800779e:	d118      	bne.n	80077d2 <HAL_RCC_OscConfig+0x726>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 80077a0:	4b31      	ldr	r3, [pc, #196]	@ (8007868 <HAL_RCC_OscConfig+0x7bc>)
 80077a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80077a4:	4a30      	ldr	r2, [pc, #192]	@ (8007868 <HAL_RCC_OscConfig+0x7bc>)
 80077a6:	f043 0301 	orr.w	r3, r3, #1
 80077aa:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80077ac:	f7fd fabe 	bl	8004d2c <HAL_GetTick>
 80077b0:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80077b2:	e008      	b.n	80077c6 <HAL_RCC_OscConfig+0x71a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80077b4:	f7fd faba 	bl	8004d2c <HAL_GetTick>
 80077b8:	4602      	mov	r2, r0
 80077ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80077bc:	1ad3      	subs	r3, r2, r3
 80077be:	2b02      	cmp	r3, #2
 80077c0:	d901      	bls.n	80077c6 <HAL_RCC_OscConfig+0x71a>
        {
          return HAL_TIMEOUT;
 80077c2:	2303      	movs	r3, #3
 80077c4:	e347      	b.n	8007e56 <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80077c6:	4b28      	ldr	r3, [pc, #160]	@ (8007868 <HAL_RCC_OscConfig+0x7bc>)
 80077c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80077ca:	f003 0301 	and.w	r3, r3, #1
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d0f0      	beq.n	80077b4 <HAL_RCC_OscConfig+0x708>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	689b      	ldr	r3, [r3, #8]
 80077d6:	f003 0301 	and.w	r3, r3, #1
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d01f      	beq.n	800781e <HAL_RCC_OscConfig+0x772>
    {
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	689b      	ldr	r3, [r3, #8]
 80077e2:	f003 0304 	and.w	r3, r3, #4
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d010      	beq.n	800780c <HAL_RCC_OscConfig+0x760>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80077ea:	4b1e      	ldr	r3, [pc, #120]	@ (8007864 <HAL_RCC_OscConfig+0x7b8>)
 80077ec:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80077f0:	4a1c      	ldr	r2, [pc, #112]	@ (8007864 <HAL_RCC_OscConfig+0x7b8>)
 80077f2:	f043 0304 	orr.w	r3, r3, #4
 80077f6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80077fa:	4b1a      	ldr	r3, [pc, #104]	@ (8007864 <HAL_RCC_OscConfig+0x7b8>)
 80077fc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007800:	4a18      	ldr	r2, [pc, #96]	@ (8007864 <HAL_RCC_OscConfig+0x7b8>)
 8007802:	f043 0301 	orr.w	r3, r3, #1
 8007806:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800780a:	e018      	b.n	800783e <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800780c:	4b15      	ldr	r3, [pc, #84]	@ (8007864 <HAL_RCC_OscConfig+0x7b8>)
 800780e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007812:	4a14      	ldr	r2, [pc, #80]	@ (8007864 <HAL_RCC_OscConfig+0x7b8>)
 8007814:	f043 0301 	orr.w	r3, r3, #1
 8007818:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800781c:	e00f      	b.n	800783e <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800781e:	4b11      	ldr	r3, [pc, #68]	@ (8007864 <HAL_RCC_OscConfig+0x7b8>)
 8007820:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007824:	4a0f      	ldr	r2, [pc, #60]	@ (8007864 <HAL_RCC_OscConfig+0x7b8>)
 8007826:	f023 0301 	bic.w	r3, r3, #1
 800782a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800782e:	4b0d      	ldr	r3, [pc, #52]	@ (8007864 <HAL_RCC_OscConfig+0x7b8>)
 8007830:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007834:	4a0b      	ldr	r2, [pc, #44]	@ (8007864 <HAL_RCC_OscConfig+0x7b8>)
 8007836:	f023 0304 	bic.w	r3, r3, #4
 800783a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
    }

    /* Check the LSE State */
    if (pRCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	689b      	ldr	r3, [r3, #8]
 8007842:	2b00      	cmp	r3, #0
 8007844:	d057      	beq.n	80078f6 <HAL_RCC_OscConfig+0x84a>
    {
      tickstart = HAL_GetTick();
 8007846:	f7fd fa71 	bl	8004d2c <HAL_GetTick>
 800784a:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800784c:	e00e      	b.n	800786c <HAL_RCC_OscConfig+0x7c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800784e:	f7fd fa6d 	bl	8004d2c <HAL_GetTick>
 8007852:	4602      	mov	r2, r0
 8007854:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007856:	1ad3      	subs	r3, r2, r3
 8007858:	f241 3288 	movw	r2, #5000	@ 0x1388
 800785c:	4293      	cmp	r3, r2
 800785e:	d905      	bls.n	800786c <HAL_RCC_OscConfig+0x7c0>
        {
          return HAL_TIMEOUT;
 8007860:	2303      	movs	r3, #3
 8007862:	e2f8      	b.n	8007e56 <HAL_RCC_OscConfig+0xdaa>
 8007864:	46020c00 	.word	0x46020c00
 8007868:	46020800 	.word	0x46020800
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800786c:	4b9c      	ldr	r3, [pc, #624]	@ (8007ae0 <HAL_RCC_OscConfig+0xa34>)
 800786e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007872:	f003 0302 	and.w	r3, r3, #2
 8007876:	2b00      	cmp	r3, #0
 8007878:	d0e9      	beq.n	800784e <HAL_RCC_OscConfig+0x7a2>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	689b      	ldr	r3, [r3, #8]
 800787e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007882:	2b00      	cmp	r3, #0
 8007884:	d01b      	beq.n	80078be <HAL_RCC_OscConfig+0x812>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8007886:	4b96      	ldr	r3, [pc, #600]	@ (8007ae0 <HAL_RCC_OscConfig+0xa34>)
 8007888:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800788c:	4a94      	ldr	r2, [pc, #592]	@ (8007ae0 <HAL_RCC_OscConfig+0xa34>)
 800788e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007892:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8007896:	e00a      	b.n	80078ae <HAL_RCC_OscConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007898:	f7fd fa48 	bl	8004d2c <HAL_GetTick>
 800789c:	4602      	mov	r2, r0
 800789e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80078a0:	1ad3      	subs	r3, r2, r3
 80078a2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80078a6:	4293      	cmp	r3, r2
 80078a8:	d901      	bls.n	80078ae <HAL_RCC_OscConfig+0x802>
          {
            return HAL_TIMEOUT;
 80078aa:	2303      	movs	r3, #3
 80078ac:	e2d3      	b.n	8007e56 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80078ae:	4b8c      	ldr	r3, [pc, #560]	@ (8007ae0 <HAL_RCC_OscConfig+0xa34>)
 80078b0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80078b4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d0ed      	beq.n	8007898 <HAL_RCC_OscConfig+0x7ec>
 80078bc:	e053      	b.n	8007966 <HAL_RCC_OscConfig+0x8ba>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80078be:	4b88      	ldr	r3, [pc, #544]	@ (8007ae0 <HAL_RCC_OscConfig+0xa34>)
 80078c0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80078c4:	4a86      	ldr	r2, [pc, #536]	@ (8007ae0 <HAL_RCC_OscConfig+0xa34>)
 80078c6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80078ca:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80078ce:	e00a      	b.n	80078e6 <HAL_RCC_OscConfig+0x83a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80078d0:	f7fd fa2c 	bl	8004d2c <HAL_GetTick>
 80078d4:	4602      	mov	r2, r0
 80078d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80078d8:	1ad3      	subs	r3, r2, r3
 80078da:	f241 3288 	movw	r2, #5000	@ 0x1388
 80078de:	4293      	cmp	r3, r2
 80078e0:	d901      	bls.n	80078e6 <HAL_RCC_OscConfig+0x83a>
          {
            return HAL_TIMEOUT;
 80078e2:	2303      	movs	r3, #3
 80078e4:	e2b7      	b.n	8007e56 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80078e6:	4b7e      	ldr	r3, [pc, #504]	@ (8007ae0 <HAL_RCC_OscConfig+0xa34>)
 80078e8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80078ec:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d1ed      	bne.n	80078d0 <HAL_RCC_OscConfig+0x824>
 80078f4:	e037      	b.n	8007966 <HAL_RCC_OscConfig+0x8ba>
        }
      }
    }
    else
    {
      tickstart = HAL_GetTick();
 80078f6:	f7fd fa19 	bl	8004d2c <HAL_GetTick>
 80078fa:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80078fc:	e00a      	b.n	8007914 <HAL_RCC_OscConfig+0x868>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80078fe:	f7fd fa15 	bl	8004d2c <HAL_GetTick>
 8007902:	4602      	mov	r2, r0
 8007904:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007906:	1ad3      	subs	r3, r2, r3
 8007908:	f241 3288 	movw	r2, #5000	@ 0x1388
 800790c:	4293      	cmp	r3, r2
 800790e:	d901      	bls.n	8007914 <HAL_RCC_OscConfig+0x868>
        {
          return HAL_TIMEOUT;
 8007910:	2303      	movs	r3, #3
 8007912:	e2a0      	b.n	8007e56 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007914:	4b72      	ldr	r3, [pc, #456]	@ (8007ae0 <HAL_RCC_OscConfig+0xa34>)
 8007916:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800791a:	f003 0302 	and.w	r3, r3, #2
 800791e:	2b00      	cmp	r3, #0
 8007920:	d1ed      	bne.n	80078fe <HAL_RCC_OscConfig+0x852>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 8007922:	4b6f      	ldr	r3, [pc, #444]	@ (8007ae0 <HAL_RCC_OscConfig+0xa34>)
 8007924:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007928:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800792c:	2b00      	cmp	r3, #0
 800792e:	d01a      	beq.n	8007966 <HAL_RCC_OscConfig+0x8ba>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8007930:	4b6b      	ldr	r3, [pc, #428]	@ (8007ae0 <HAL_RCC_OscConfig+0xa34>)
 8007932:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007936:	4a6a      	ldr	r2, [pc, #424]	@ (8007ae0 <HAL_RCC_OscConfig+0xa34>)
 8007938:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800793c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8007940:	e00a      	b.n	8007958 <HAL_RCC_OscConfig+0x8ac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007942:	f7fd f9f3 	bl	8004d2c <HAL_GetTick>
 8007946:	4602      	mov	r2, r0
 8007948:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800794a:	1ad3      	subs	r3, r2, r3
 800794c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007950:	4293      	cmp	r3, r2
 8007952:	d901      	bls.n	8007958 <HAL_RCC_OscConfig+0x8ac>
          {
            return HAL_TIMEOUT;
 8007954:	2303      	movs	r3, #3
 8007956:	e27e      	b.n	8007e56 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8007958:	4b61      	ldr	r3, [pc, #388]	@ (8007ae0 <HAL_RCC_OscConfig+0xa34>)
 800795a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800795e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007962:	2b00      	cmp	r3, #0
 8007964:	d1ed      	bne.n	8007942 <HAL_RCC_OscConfig+0x896>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8007966:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 800796a:	2b01      	cmp	r3, #1
 800796c:	d107      	bne.n	800797e <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800796e:	4b5c      	ldr	r3, [pc, #368]	@ (8007ae0 <HAL_RCC_OscConfig+0xa34>)
 8007970:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007974:	4a5a      	ldr	r2, [pc, #360]	@ (8007ae0 <HAL_RCC_OscConfig+0xa34>)
 8007976:	f023 0304 	bic.w	r3, r3, #4
 800797a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	f003 0320 	and.w	r3, r3, #32
 8007986:	2b00      	cmp	r3, #0
 8007988:	d036      	beq.n	80079f8 <HAL_RCC_OscConfig+0x94c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pRCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pRCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800798e:	2b00      	cmp	r3, #0
 8007990:	d019      	beq.n	80079c6 <HAL_RCC_OscConfig+0x91a>
    {
      /* Enable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_ENABLE();
 8007992:	4b53      	ldr	r3, [pc, #332]	@ (8007ae0 <HAL_RCC_OscConfig+0xa34>)
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	4a52      	ldr	r2, [pc, #328]	@ (8007ae0 <HAL_RCC_OscConfig+0xa34>)
 8007998:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800799c:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800799e:	f7fd f9c5 	bl	8004d2c <HAL_GetTick>
 80079a2:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80079a4:	e008      	b.n	80079b8 <HAL_RCC_OscConfig+0x90c>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80079a6:	f7fd f9c1 	bl	8004d2c <HAL_GetTick>
 80079aa:	4602      	mov	r2, r0
 80079ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80079ae:	1ad3      	subs	r3, r2, r3
 80079b0:	2b02      	cmp	r3, #2
 80079b2:	d901      	bls.n	80079b8 <HAL_RCC_OscConfig+0x90c>
        {
          return HAL_TIMEOUT;
 80079b4:	2303      	movs	r3, #3
 80079b6:	e24e      	b.n	8007e56 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80079b8:	4b49      	ldr	r3, [pc, #292]	@ (8007ae0 <HAL_RCC_OscConfig+0xa34>)
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d0f0      	beq.n	80079a6 <HAL_RCC_OscConfig+0x8fa>
 80079c4:	e018      	b.n	80079f8 <HAL_RCC_OscConfig+0x94c>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_DISABLE();
 80079c6:	4b46      	ldr	r3, [pc, #280]	@ (8007ae0 <HAL_RCC_OscConfig+0xa34>)
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	4a45      	ldr	r2, [pc, #276]	@ (8007ae0 <HAL_RCC_OscConfig+0xa34>)
 80079cc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80079d0:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80079d2:	f7fd f9ab 	bl	8004d2c <HAL_GetTick>
 80079d6:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80079d8:	e008      	b.n	80079ec <HAL_RCC_OscConfig+0x940>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80079da:	f7fd f9a7 	bl	8004d2c <HAL_GetTick>
 80079de:	4602      	mov	r2, r0
 80079e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80079e2:	1ad3      	subs	r3, r2, r3
 80079e4:	2b02      	cmp	r3, #2
 80079e6:	d901      	bls.n	80079ec <HAL_RCC_OscConfig+0x940>
        {
          return HAL_TIMEOUT;
 80079e8:	2303      	movs	r3, #3
 80079ea:	e234      	b.n	8007e56 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80079ec:	4b3c      	ldr	r3, [pc, #240]	@ (8007ae0 <HAL_RCC_OscConfig+0xa34>)
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d1f0      	bne.n	80079da <HAL_RCC_OscConfig+0x92e>
      }
    }
  }

  /*------------------------------ SHSI Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_SHSI) == RCC_OSCILLATORTYPE_SHSI)
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d036      	beq.n	8007a72 <HAL_RCC_OscConfig+0x9c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SHSI(pRCC_OscInitStruct->SHSIState));

    /* Check the SHSI State */
    if (pRCC_OscInitStruct->SHSIState != RCC_SHSI_OFF)
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d019      	beq.n	8007a40 <HAL_RCC_OscConfig+0x994>
    {
      /* Enable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_ENABLE();
 8007a0c:	4b34      	ldr	r3, [pc, #208]	@ (8007ae0 <HAL_RCC_OscConfig+0xa34>)
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	4a33      	ldr	r2, [pc, #204]	@ (8007ae0 <HAL_RCC_OscConfig+0xa34>)
 8007a12:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8007a16:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8007a18:	f7fd f988 	bl	8004d2c <HAL_GetTick>
 8007a1c:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is ready */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 8007a1e:	e008      	b.n	8007a32 <HAL_RCC_OscConfig+0x986>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8007a20:	f7fd f984 	bl	8004d2c <HAL_GetTick>
 8007a24:	4602      	mov	r2, r0
 8007a26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a28:	1ad3      	subs	r3, r2, r3
 8007a2a:	2b02      	cmp	r3, #2
 8007a2c:	d901      	bls.n	8007a32 <HAL_RCC_OscConfig+0x986>
        {
          return HAL_TIMEOUT;
 8007a2e:	2303      	movs	r3, #3
 8007a30:	e211      	b.n	8007e56 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 8007a32:	4b2b      	ldr	r3, [pc, #172]	@ (8007ae0 <HAL_RCC_OscConfig+0xa34>)
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d0f0      	beq.n	8007a20 <HAL_RCC_OscConfig+0x974>
 8007a3e:	e018      	b.n	8007a72 <HAL_RCC_OscConfig+0x9c6>
      }
    }
    else
    {
      /* Disable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_DISABLE();
 8007a40:	4b27      	ldr	r3, [pc, #156]	@ (8007ae0 <HAL_RCC_OscConfig+0xa34>)
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	4a26      	ldr	r2, [pc, #152]	@ (8007ae0 <HAL_RCC_OscConfig+0xa34>)
 8007a46:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007a4a:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8007a4c:	f7fd f96e 	bl	8004d2c <HAL_GetTick>
 8007a50:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8007a52:	e008      	b.n	8007a66 <HAL_RCC_OscConfig+0x9ba>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8007a54:	f7fd f96a 	bl	8004d2c <HAL_GetTick>
 8007a58:	4602      	mov	r2, r0
 8007a5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a5c:	1ad3      	subs	r3, r2, r3
 8007a5e:	2b02      	cmp	r3, #2
 8007a60:	d901      	bls.n	8007a66 <HAL_RCC_OscConfig+0x9ba>
        {
          return HAL_TIMEOUT;
 8007a62:	2303      	movs	r3, #3
 8007a64:	e1f7      	b.n	8007e56 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8007a66:	4b1e      	ldr	r3, [pc, #120]	@ (8007ae0 <HAL_RCC_OscConfig+0xa34>)
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d1f0      	bne.n	8007a54 <HAL_RCC_OscConfig+0x9a8>
        }
      }
    }
  }
  /*------------------------------ MSIK Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIK) == RCC_OSCILLATORTYPE_MSIK)
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d07f      	beq.n	8007b7e <HAL_RCC_OscConfig+0xad2>
    assert_param(IS_RCC_MSIK(pRCC_OscInitStruct->MSIKState));
    assert_param(IS_RCC_MSIK_CLOCK_RANGE(pRCC_OscInitStruct->MSIKClockRange));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));

    /* Check the MSIK State */
    if (pRCC_OscInitStruct->MSIKState != RCC_MSIK_OFF)
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d062      	beq.n	8007b4c <HAL_RCC_OscConfig+0xaa0>
    {

      /* Selects the Multiple Speed of kernel high speed oscillator (MSIK) clock range .*/
      __HAL_RCC_MSIK_RANGE_CONFIG(pRCC_OscInitStruct->MSIKClockRange);
 8007a86:	4b16      	ldr	r3, [pc, #88]	@ (8007ae0 <HAL_RCC_OscConfig+0xa34>)
 8007a88:	689b      	ldr	r3, [r3, #8]
 8007a8a:	4a15      	ldr	r2, [pc, #84]	@ (8007ae0 <HAL_RCC_OscConfig+0xa34>)
 8007a8c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8007a90:	6093      	str	r3, [r2, #8]
 8007a92:	4b13      	ldr	r3, [pc, #76]	@ (8007ae0 <HAL_RCC_OscConfig+0xa34>)
 8007a94:	689b      	ldr	r3, [r3, #8]
 8007a96:	f023 6270 	bic.w	r2, r3, #251658240	@ 0xf000000
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a9e:	4910      	ldr	r1, [pc, #64]	@ (8007ae0 <HAL_RCC_OscConfig+0xa34>)
 8007aa0:	4313      	orrs	r3, r2
 8007aa2:	608b      	str	r3, [r1, #8]
      /* Adjusts the Multiple Speed of kernel high speed oscillator (MSIK) calibration value.*/
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007aa8:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8007aac:	d309      	bcc.n	8007ac2 <HAL_RCC_OscConfig+0xa16>
 8007aae:	4b0c      	ldr	r3, [pc, #48]	@ (8007ae0 <HAL_RCC_OscConfig+0xa34>)
 8007ab0:	68db      	ldr	r3, [r3, #12]
 8007ab2:	f023 021f 	bic.w	r2, r3, #31
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	6a1b      	ldr	r3, [r3, #32]
 8007aba:	4909      	ldr	r1, [pc, #36]	@ (8007ae0 <HAL_RCC_OscConfig+0xa34>)
 8007abc:	4313      	orrs	r3, r2
 8007abe:	60cb      	str	r3, [r1, #12]
 8007ac0:	e02a      	b.n	8007b18 <HAL_RCC_OscConfig+0xa6c>
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	da0c      	bge.n	8007ae4 <HAL_RCC_OscConfig+0xa38>
 8007aca:	4b05      	ldr	r3, [pc, #20]	@ (8007ae0 <HAL_RCC_OscConfig+0xa34>)
 8007acc:	68db      	ldr	r3, [r3, #12]
 8007ace:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	6a1b      	ldr	r3, [r3, #32]
 8007ad6:	015b      	lsls	r3, r3, #5
 8007ad8:	4901      	ldr	r1, [pc, #4]	@ (8007ae0 <HAL_RCC_OscConfig+0xa34>)
 8007ada:	4313      	orrs	r3, r2
 8007adc:	60cb      	str	r3, [r1, #12]
 8007ade:	e01b      	b.n	8007b18 <HAL_RCC_OscConfig+0xa6c>
 8007ae0:	46020c00 	.word	0x46020c00
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ae8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007aec:	d30a      	bcc.n	8007b04 <HAL_RCC_OscConfig+0xa58>
 8007aee:	4ba1      	ldr	r3, [pc, #644]	@ (8007d74 <HAL_RCC_OscConfig+0xcc8>)
 8007af0:	68db      	ldr	r3, [r3, #12]
 8007af2:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	6a1b      	ldr	r3, [r3, #32]
 8007afa:	029b      	lsls	r3, r3, #10
 8007afc:	499d      	ldr	r1, [pc, #628]	@ (8007d74 <HAL_RCC_OscConfig+0xcc8>)
 8007afe:	4313      	orrs	r3, r2
 8007b00:	60cb      	str	r3, [r1, #12]
 8007b02:	e009      	b.n	8007b18 <HAL_RCC_OscConfig+0xa6c>
 8007b04:	4b9b      	ldr	r3, [pc, #620]	@ (8007d74 <HAL_RCC_OscConfig+0xcc8>)
 8007b06:	68db      	ldr	r3, [r3, #12]
 8007b08:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	6a1b      	ldr	r3, [r3, #32]
 8007b10:	03db      	lsls	r3, r3, #15
 8007b12:	4998      	ldr	r1, [pc, #608]	@ (8007d74 <HAL_RCC_OscConfig+0xcc8>)
 8007b14:	4313      	orrs	r3, r2
 8007b16:	60cb      	str	r3, [r1, #12]
                                            (pRCC_OscInitStruct->MSIClockRange));

      /* Enable the Internal kernel High Speed oscillator (MSIK) */
      __HAL_RCC_MSIK_ENABLE();
 8007b18:	4b96      	ldr	r3, [pc, #600]	@ (8007d74 <HAL_RCC_OscConfig+0xcc8>)
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	4a95      	ldr	r2, [pc, #596]	@ (8007d74 <HAL_RCC_OscConfig+0xcc8>)
 8007b1e:	f043 0310 	orr.w	r3, r3, #16
 8007b22:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8007b24:	f7fd f902 	bl	8004d2c <HAL_GetTick>
 8007b28:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is ready */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 8007b2a:	e008      	b.n	8007b3e <HAL_RCC_OscConfig+0xa92>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8007b2c:	f7fd f8fe 	bl	8004d2c <HAL_GetTick>
 8007b30:	4602      	mov	r2, r0
 8007b32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b34:	1ad3      	subs	r3, r2, r3
 8007b36:	2b02      	cmp	r3, #2
 8007b38:	d901      	bls.n	8007b3e <HAL_RCC_OscConfig+0xa92>
        {
          return HAL_TIMEOUT;
 8007b3a:	2303      	movs	r3, #3
 8007b3c:	e18b      	b.n	8007e56 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 8007b3e:	4b8d      	ldr	r3, [pc, #564]	@ (8007d74 <HAL_RCC_OscConfig+0xcc8>)
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	f003 0320 	and.w	r3, r3, #32
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d0f0      	beq.n	8007b2c <HAL_RCC_OscConfig+0xa80>
 8007b4a:	e018      	b.n	8007b7e <HAL_RCC_OscConfig+0xad2>
      }
    }
    else
    {
      /* Disable the Internal High Speed Kernel oscillator (MSIK) */
      __HAL_RCC_MSIK_DISABLE();
 8007b4c:	4b89      	ldr	r3, [pc, #548]	@ (8007d74 <HAL_RCC_OscConfig+0xcc8>)
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	4a88      	ldr	r2, [pc, #544]	@ (8007d74 <HAL_RCC_OscConfig+0xcc8>)
 8007b52:	f023 0310 	bic.w	r3, r3, #16
 8007b56:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8007b58:	f7fd f8e8 	bl	8004d2c <HAL_GetTick>
 8007b5c:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 8007b5e:	e008      	b.n	8007b72 <HAL_RCC_OscConfig+0xac6>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8007b60:	f7fd f8e4 	bl	8004d2c <HAL_GetTick>
 8007b64:	4602      	mov	r2, r0
 8007b66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b68:	1ad3      	subs	r3, r2, r3
 8007b6a:	2b02      	cmp	r3, #2
 8007b6c:	d901      	bls.n	8007b72 <HAL_RCC_OscConfig+0xac6>
        {
          return HAL_TIMEOUT;
 8007b6e:	2303      	movs	r3, #3
 8007b70:	e171      	b.n	8007e56 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 8007b72:	4b80      	ldr	r3, [pc, #512]	@ (8007d74 <HAL_RCC_OscConfig+0xcc8>)
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	f003 0320 	and.w	r3, r3, #32
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d1f0      	bne.n	8007b60 <HAL_RCC_OscConfig+0xab4>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL.PLLState));

  if ((pRCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	f000 8166 	beq.w	8007e54 <HAL_RCC_OscConfig+0xda8>
  {
    FlagStatus  pwrclkchanged = RESET;
 8007b88:	2300      	movs	r3, #0
 8007b8a:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34

    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007b8e:	4b79      	ldr	r3, [pc, #484]	@ (8007d74 <HAL_RCC_OscConfig+0xcc8>)
 8007b90:	69db      	ldr	r3, [r3, #28]
 8007b92:	f003 030c 	and.w	r3, r3, #12
 8007b96:	2b0c      	cmp	r3, #12
 8007b98:	f000 80f2 	beq.w	8007d80 <HAL_RCC_OscConfig+0xcd4>
    {
      if ((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007ba0:	2b02      	cmp	r3, #2
 8007ba2:	f040 80c5 	bne.w	8007d30 <HAL_RCC_OscConfig+0xc84>
        assert_param(IS_RCC_PLLP_VALUE(pRCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(pRCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(pRCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8007ba6:	4b73      	ldr	r3, [pc, #460]	@ (8007d74 <HAL_RCC_OscConfig+0xcc8>)
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	4a72      	ldr	r2, [pc, #456]	@ (8007d74 <HAL_RCC_OscConfig+0xcc8>)
 8007bac:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007bb0:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8007bb2:	f7fd f8bb 	bl	8004d2c <HAL_GetTick>
 8007bb6:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8007bb8:	e008      	b.n	8007bcc <HAL_RCC_OscConfig+0xb20>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007bba:	f7fd f8b7 	bl	8004d2c <HAL_GetTick>
 8007bbe:	4602      	mov	r2, r0
 8007bc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007bc2:	1ad3      	subs	r3, r2, r3
 8007bc4:	2b02      	cmp	r3, #2
 8007bc6:	d901      	bls.n	8007bcc <HAL_RCC_OscConfig+0xb20>
          {
            return HAL_TIMEOUT;
 8007bc8:	2303      	movs	r3, #3
 8007bca:	e144      	b.n	8007e56 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8007bcc:	4b69      	ldr	r3, [pc, #420]	@ (8007d74 <HAL_RCC_OscConfig+0xcc8>)
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d1f0      	bne.n	8007bba <HAL_RCC_OscConfig+0xb0e>
          }
        }

        /* Requires to enable write access to Backup Domain of necessary */
        if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007bd8:	4b66      	ldr	r3, [pc, #408]	@ (8007d74 <HAL_RCC_OscConfig+0xcc8>)
 8007bda:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007bde:	f003 0304 	and.w	r3, r3, #4
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d111      	bne.n	8007c0a <HAL_RCC_OscConfig+0xb5e>
        {
          __HAL_RCC_PWR_CLK_ENABLE();
 8007be6:	4b63      	ldr	r3, [pc, #396]	@ (8007d74 <HAL_RCC_OscConfig+0xcc8>)
 8007be8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007bec:	4a61      	ldr	r2, [pc, #388]	@ (8007d74 <HAL_RCC_OscConfig+0xcc8>)
 8007bee:	f043 0304 	orr.w	r3, r3, #4
 8007bf2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8007bf6:	4b5f      	ldr	r3, [pc, #380]	@ (8007d74 <HAL_RCC_OscConfig+0xcc8>)
 8007bf8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007bfc:	f003 0304 	and.w	r3, r3, #4
 8007c00:	60fb      	str	r3, [r7, #12]
 8007c02:	68fb      	ldr	r3, [r7, #12]
          pwrclkchanged = SET;
 8007c04:	2301      	movs	r3, #1
 8007c06:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
        }

        /*Disable EPOD to configure PLL1MBOOST*/
        if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) == PWR_VOSR_BOOSTEN)
 8007c0a:	4b5b      	ldr	r3, [pc, #364]	@ (8007d78 <HAL_RCC_OscConfig+0xccc>)
 8007c0c:	68db      	ldr	r3, [r3, #12]
 8007c0e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007c12:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007c16:	d102      	bne.n	8007c1e <HAL_RCC_OscConfig+0xb72>
        {
          pwrboosten = SET;
 8007c18:	2301      	movs	r3, #1
 8007c1a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
        }
        CLEAR_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8007c1e:	4b56      	ldr	r3, [pc, #344]	@ (8007d78 <HAL_RCC_OscConfig+0xccc>)
 8007c20:	68db      	ldr	r3, [r3, #12]
 8007c22:	4a55      	ldr	r2, [pc, #340]	@ (8007d78 <HAL_RCC_OscConfig+0xccc>)
 8007c24:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007c28:	60d3      	str	r3, [r2, #12]

        /* Configure the main PLL clock source, multiplication and division factors */
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 8007c2a:	4b52      	ldr	r3, [pc, #328]	@ (8007d74 <HAL_RCC_OscConfig+0xcc8>)
 8007c2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c2e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007c32:	f023 0303 	bic.w	r3, r3, #3
 8007c36:	687a      	ldr	r2, [r7, #4]
 8007c38:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8007c3a:	687a      	ldr	r2, [r7, #4]
 8007c3c:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8007c3e:	3a01      	subs	r2, #1
 8007c40:	0212      	lsls	r2, r2, #8
 8007c42:	4311      	orrs	r1, r2
 8007c44:	687a      	ldr	r2, [r7, #4]
 8007c46:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8007c48:	430a      	orrs	r2, r1
 8007c4a:	494a      	ldr	r1, [pc, #296]	@ (8007d74 <HAL_RCC_OscConfig+0xcc8>)
 8007c4c:	4313      	orrs	r3, r2
 8007c4e:	628b      	str	r3, [r1, #40]	@ 0x28
 8007c50:	4b48      	ldr	r3, [pc, #288]	@ (8007d74 <HAL_RCC_OscConfig+0xcc8>)
 8007c52:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007c54:	4b49      	ldr	r3, [pc, #292]	@ (8007d7c <HAL_RCC_OscConfig+0xcd0>)
 8007c56:	4013      	ands	r3, r2
 8007c58:	687a      	ldr	r2, [r7, #4]
 8007c5a:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8007c5c:	3a01      	subs	r2, #1
 8007c5e:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8007c62:	687a      	ldr	r2, [r7, #4]
 8007c64:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8007c66:	3a01      	subs	r2, #1
 8007c68:	0252      	lsls	r2, r2, #9
 8007c6a:	b292      	uxth	r2, r2
 8007c6c:	4311      	orrs	r1, r2
 8007c6e:	687a      	ldr	r2, [r7, #4]
 8007c70:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8007c72:	3a01      	subs	r2, #1
 8007c74:	0412      	lsls	r2, r2, #16
 8007c76:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8007c7a:	4311      	orrs	r1, r2
 8007c7c:	687a      	ldr	r2, [r7, #4]
 8007c7e:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8007c80:	3a01      	subs	r2, #1
 8007c82:	0612      	lsls	r2, r2, #24
 8007c84:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8007c88:	430a      	orrs	r2, r1
 8007c8a:	493a      	ldr	r1, [pc, #232]	@ (8007d74 <HAL_RCC_OscConfig+0xcc8>)
 8007c8c:	4313      	orrs	r3, r2
 8007c8e:	634b      	str	r3, [r1, #52]	@ 0x34
                             pRCC_OscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_DISABLE();
 8007c90:	4b38      	ldr	r3, [pc, #224]	@ (8007d74 <HAL_RCC_OscConfig+0xcc8>)
 8007c92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c94:	4a37      	ldr	r2, [pc, #220]	@ (8007d74 <HAL_RCC_OscConfig+0xcc8>)
 8007c96:	f023 0310 	bic.w	r3, r3, #16
 8007c9a:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007ca0:	4a34      	ldr	r2, [pc, #208]	@ (8007d74 <HAL_RCC_OscConfig+0xcc8>)
 8007ca2:	00db      	lsls	r3, r3, #3
 8007ca4:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_ENABLE();
 8007ca6:	4b33      	ldr	r3, [pc, #204]	@ (8007d74 <HAL_RCC_OscConfig+0xcc8>)
 8007ca8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007caa:	4a32      	ldr	r2, [pc, #200]	@ (8007d74 <HAL_RCC_OscConfig+0xcc8>)
 8007cac:	f043 0310 	orr.w	r3, r3, #16
 8007cb0:	6293      	str	r3, [r2, #40]	@ 0x28

        assert_param(IS_RCC_PLLRGE_VALUE(pRCC_OscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(pRCC_OscInitStruct->PLL.PLLRGE);
 8007cb2:	4b30      	ldr	r3, [pc, #192]	@ (8007d74 <HAL_RCC_OscConfig+0xcc8>)
 8007cb4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007cb6:	f023 020c 	bic.w	r2, r3, #12
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007cbe:	492d      	ldr	r1, [pc, #180]	@ (8007d74 <HAL_RCC_OscConfig+0xcc8>)
 8007cc0:	4313      	orrs	r3, r2
 8007cc2:	628b      	str	r3, [r1, #40]	@ 0x28

        if (pwrboosten == SET)
 8007cc4:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8007cc8:	2b01      	cmp	r3, #1
 8007cca:	d105      	bne.n	8007cd8 <HAL_RCC_OscConfig+0xc2c>
        {
          /* Enable the EPOD to reach max frequency */
          SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8007ccc:	4b2a      	ldr	r3, [pc, #168]	@ (8007d78 <HAL_RCC_OscConfig+0xccc>)
 8007cce:	68db      	ldr	r3, [r3, #12]
 8007cd0:	4a29      	ldr	r2, [pc, #164]	@ (8007d78 <HAL_RCC_OscConfig+0xccc>)
 8007cd2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007cd6:	60d3      	str	r3, [r2, #12]
        }

        /* Restore clock configuration if changed */
        if (pwrclkchanged == SET)
 8007cd8:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8007cdc:	2b01      	cmp	r3, #1
 8007cde:	d107      	bne.n	8007cf0 <HAL_RCC_OscConfig+0xc44>
        {
          __HAL_RCC_PWR_CLK_DISABLE();
 8007ce0:	4b24      	ldr	r3, [pc, #144]	@ (8007d74 <HAL_RCC_OscConfig+0xcc8>)
 8007ce2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007ce6:	4a23      	ldr	r2, [pc, #140]	@ (8007d74 <HAL_RCC_OscConfig+0xcc8>)
 8007ce8:	f023 0304 	bic.w	r3, r3, #4
 8007cec:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
        }

        /* Enable the main PLL */
        __HAL_RCC_PLL_ENABLE();
 8007cf0:	4b20      	ldr	r3, [pc, #128]	@ (8007d74 <HAL_RCC_OscConfig+0xcc8>)
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	4a1f      	ldr	r2, [pc, #124]	@ (8007d74 <HAL_RCC_OscConfig+0xcc8>)
 8007cf6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007cfa:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8007cfc:	f7fd f816 	bl	8004d2c <HAL_GetTick>
 8007d00:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8007d02:	e008      	b.n	8007d16 <HAL_RCC_OscConfig+0xc6a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007d04:	f7fd f812 	bl	8004d2c <HAL_GetTick>
 8007d08:	4602      	mov	r2, r0
 8007d0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d0c:	1ad3      	subs	r3, r2, r3
 8007d0e:	2b02      	cmp	r3, #2
 8007d10:	d901      	bls.n	8007d16 <HAL_RCC_OscConfig+0xc6a>
          {
            return HAL_TIMEOUT;
 8007d12:	2303      	movs	r3, #3
 8007d14:	e09f      	b.n	8007e56 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8007d16:	4b17      	ldr	r3, [pc, #92]	@ (8007d74 <HAL_RCC_OscConfig+0xcc8>)
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d0f0      	beq.n	8007d04 <HAL_RCC_OscConfig+0xc58>
          }
        }

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8007d22:	4b14      	ldr	r3, [pc, #80]	@ (8007d74 <HAL_RCC_OscConfig+0xcc8>)
 8007d24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d26:	4a13      	ldr	r2, [pc, #76]	@ (8007d74 <HAL_RCC_OscConfig+0xcc8>)
 8007d28:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007d2c:	6293      	str	r3, [r2, #40]	@ 0x28
 8007d2e:	e091      	b.n	8007e54 <HAL_RCC_OscConfig+0xda8>

      }
      else
      {
        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8007d30:	4b10      	ldr	r3, [pc, #64]	@ (8007d74 <HAL_RCC_OscConfig+0xcc8>)
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	4a0f      	ldr	r2, [pc, #60]	@ (8007d74 <HAL_RCC_OscConfig+0xcc8>)
 8007d36:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007d3a:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8007d3c:	f7fc fff6 	bl	8004d2c <HAL_GetTick>
 8007d40:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8007d42:	e008      	b.n	8007d56 <HAL_RCC_OscConfig+0xcaa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007d44:	f7fc fff2 	bl	8004d2c <HAL_GetTick>
 8007d48:	4602      	mov	r2, r0
 8007d4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d4c:	1ad3      	subs	r3, r2, r3
 8007d4e:	2b02      	cmp	r3, #2
 8007d50:	d901      	bls.n	8007d56 <HAL_RCC_OscConfig+0xcaa>
          {
            return HAL_TIMEOUT;
 8007d52:	2303      	movs	r3, #3
 8007d54:	e07f      	b.n	8007e56 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8007d56:	4b07      	ldr	r3, [pc, #28]	@ (8007d74 <HAL_RCC_OscConfig+0xcc8>)
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d1f0      	bne.n	8007d44 <HAL_RCC_OscConfig+0xc98>
          }
        }

        /* Unselect main PLL clock source and disable main PLL outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 8007d62:	4b04      	ldr	r3, [pc, #16]	@ (8007d74 <HAL_RCC_OscConfig+0xcc8>)
 8007d64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d66:	4a03      	ldr	r2, [pc, #12]	@ (8007d74 <HAL_RCC_OscConfig+0xcc8>)
 8007d68:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 8007d6c:	f023 0303 	bic.w	r3, r3, #3
 8007d70:	6293      	str	r3, [r2, #40]	@ 0x28
 8007d72:	e06f      	b.n	8007e54 <HAL_RCC_OscConfig+0xda8>
 8007d74:	46020c00 	.word	0x46020c00
 8007d78:	46020800 	.word	0x46020800
 8007d7c:	80800000 	.word	0x80800000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 8007d80:	4b37      	ldr	r3, [pc, #220]	@ (8007e60 <HAL_RCC_OscConfig+0xdb4>)
 8007d82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d84:	61fb      	str	r3, [r7, #28]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8007d86:	4b36      	ldr	r3, [pc, #216]	@ (8007e60 <HAL_RCC_OscConfig+0xdb4>)
 8007d88:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007d8a:	61bb      	str	r3, [r7, #24]
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d90:	2b01      	cmp	r3, #1
 8007d92:	d039      	beq.n	8007e08 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8007d94:	69fb      	ldr	r3, [r7, #28]
 8007d96:	f003 0203 	and.w	r2, r3, #3
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007d9e:	429a      	cmp	r2, r3
 8007da0:	d132      	bne.n	8007e08 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 8007da2:	69fb      	ldr	r3, [r7, #28]
 8007da4:	0a1b      	lsrs	r3, r3, #8
 8007da6:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007dae:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8007db0:	429a      	cmp	r2, r3
 8007db2:	d129      	bne.n	8007e08 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 8007db4:	69fb      	ldr	r3, [r7, #28]
 8007db6:	f403 4270 	and.w	r2, r3, #61440	@ 0xf000
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 8007dbe:	429a      	cmp	r2, r3
 8007dc0:	d122      	bne.n	8007e08 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8007dc2:	69bb      	ldr	r3, [r7, #24]
 8007dc4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007dcc:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 8007dce:	429a      	cmp	r2, r3
 8007dd0:	d11a      	bne.n	8007e08 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 8007dd2:	69bb      	ldr	r3, [r7, #24]
 8007dd4:	0a5b      	lsrs	r3, r3, #9
 8007dd6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007dde:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8007de0:	429a      	cmp	r2, r3
 8007de2:	d111      	bne.n	8007e08 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 8007de4:	69bb      	ldr	r3, [r7, #24]
 8007de6:	0c1b      	lsrs	r3, r3, #16
 8007de8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007df0:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8007df2:	429a      	cmp	r2, r3
 8007df4:	d108      	bne.n	8007e08 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 8007df6:	69bb      	ldr	r3, [r7, #24]
 8007df8:	0e1b      	lsrs	r3, r3, #24
 8007dfa:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pRCC_OscInitStruct->PLL.PLLR - 1U)))
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007e02:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8007e04:	429a      	cmp	r2, r3
 8007e06:	d001      	beq.n	8007e0c <HAL_RCC_OscConfig+0xd60>
      {
        return HAL_ERROR;
 8007e08:	2301      	movs	r3, #1
 8007e0a:	e024      	b.n	8007e56 <HAL_RCC_OscConfig+0xdaa>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8007e0c:	4b14      	ldr	r3, [pc, #80]	@ (8007e60 <HAL_RCC_OscConfig+0xdb4>)
 8007e0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e10:	08db      	lsrs	r3, r3, #3
 8007e12:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pRCC_OscInitStruct->PLL.PLLFRACN))
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8007e1a:	429a      	cmp	r2, r3
 8007e1c:	d01a      	beq.n	8007e54 <HAL_RCC_OscConfig+0xda8>
      {
        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN. */
        __HAL_RCC_PLL_FRACN_DISABLE();
 8007e1e:	4b10      	ldr	r3, [pc, #64]	@ (8007e60 <HAL_RCC_OscConfig+0xdb4>)
 8007e20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007e22:	4a0f      	ldr	r2, [pc, #60]	@ (8007e60 <HAL_RCC_OscConfig+0xdb4>)
 8007e24:	f023 0310 	bic.w	r3, r3, #16
 8007e28:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007e2a:	f7fc ff7f 	bl	8004d2c <HAL_GetTick>
 8007e2e:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait at least 2 CK_REF (PLL1 input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < PLL_FRAC_WAIT_VALUE)
 8007e30:	bf00      	nop
 8007e32:	f7fc ff7b 	bl	8004d2c <HAL_GetTick>
 8007e36:	4602      	mov	r2, r0
 8007e38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e3a:	4293      	cmp	r3, r2
 8007e3c:	d0f9      	beq.n	8007e32 <HAL_RCC_OscConfig+0xd86>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007e42:	4a07      	ldr	r2, [pc, #28]	@ (8007e60 <HAL_RCC_OscConfig+0xdb4>)
 8007e44:	00db      	lsls	r3, r3, #3
 8007e46:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL_FRACN_ENABLE();
 8007e48:	4b05      	ldr	r3, [pc, #20]	@ (8007e60 <HAL_RCC_OscConfig+0xdb4>)
 8007e4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007e4c:	4a04      	ldr	r2, [pc, #16]	@ (8007e60 <HAL_RCC_OscConfig+0xdb4>)
 8007e4e:	f043 0310 	orr.w	r3, r3, #16
 8007e52:	6293      	str	r3, [r2, #40]	@ 0x28
      }
    }
  }
  return HAL_OK;
 8007e54:	2300      	movs	r3, #0
}
 8007e56:	4618      	mov	r0, r3
 8007e58:	3738      	adds	r7, #56	@ 0x38
 8007e5a:	46bd      	mov	sp, r7
 8007e5c:	bd80      	pop	{r7, pc}
 8007e5e:	bf00      	nop
 8007e60:	46020c00 	.word	0x46020c00

08007e64 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef   *const pRCC_ClkInitStruct, uint32_t FLatency)
{
 8007e64:	b580      	push	{r7, lr}
 8007e66:	b086      	sub	sp, #24
 8007e68:	af00      	add	r7, sp, #0
 8007e6a:	6078      	str	r0, [r7, #4]
 8007e6c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pRCC_ClkInitStruct == NULL)
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d101      	bne.n	8007e78 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007e74:	2301      	movs	r3, #1
 8007e76:	e1d9      	b.n	800822c <HAL_RCC_ClockConfig+0x3c8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
   must be correctly programmed according to the frequency of the CPU clock
   (HCLK) and the supply voltage of the device */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007e78:	4b9b      	ldr	r3, [pc, #620]	@ (80080e8 <HAL_RCC_ClockConfig+0x284>)
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	f003 030f 	and.w	r3, r3, #15
 8007e80:	683a      	ldr	r2, [r7, #0]
 8007e82:	429a      	cmp	r2, r3
 8007e84:	d910      	bls.n	8007ea8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007e86:	4b98      	ldr	r3, [pc, #608]	@ (80080e8 <HAL_RCC_ClockConfig+0x284>)
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	f023 020f 	bic.w	r2, r3, #15
 8007e8e:	4996      	ldr	r1, [pc, #600]	@ (80080e8 <HAL_RCC_ClockConfig+0x284>)
 8007e90:	683b      	ldr	r3, [r7, #0]
 8007e92:	4313      	orrs	r3, r2
 8007e94:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007e96:	4b94      	ldr	r3, [pc, #592]	@ (80080e8 <HAL_RCC_ClockConfig+0x284>)
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	f003 030f 	and.w	r3, r3, #15
 8007e9e:	683a      	ldr	r2, [r7, #0]
 8007ea0:	429a      	cmp	r2, r3
 8007ea2:	d001      	beq.n	8007ea8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8007ea4:	2301      	movs	r3, #1
 8007ea6:	e1c1      	b.n	800822c <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	f003 0310 	and.w	r3, r3, #16
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d010      	beq.n	8007ed6 <HAL_RCC_ClockConfig+0x72>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) > (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	695a      	ldr	r2, [r3, #20]
 8007eb8:	4b8c      	ldr	r3, [pc, #560]	@ (80080ec <HAL_RCC_ClockConfig+0x288>)
 8007eba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ebc:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007ec0:	429a      	cmp	r2, r3
 8007ec2:	d908      	bls.n	8007ed6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, pRCC_ClkInitStruct->APB3CLKDivider);
 8007ec4:	4b89      	ldr	r3, [pc, #548]	@ (80080ec <HAL_RCC_ClockConfig+0x288>)
 8007ec6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ec8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	695b      	ldr	r3, [r3, #20]
 8007ed0:	4986      	ldr	r1, [pc, #536]	@ (80080ec <HAL_RCC_ClockConfig+0x288>)
 8007ed2:	4313      	orrs	r3, r2
 8007ed4:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	f003 0308 	and.w	r3, r3, #8
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d012      	beq.n	8007f08 <HAL_RCC_ClockConfig+0xa4>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	691a      	ldr	r2, [r3, #16]
 8007ee6:	4b81      	ldr	r3, [pc, #516]	@ (80080ec <HAL_RCC_ClockConfig+0x288>)
 8007ee8:	6a1b      	ldr	r3, [r3, #32]
 8007eea:	091b      	lsrs	r3, r3, #4
 8007eec:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007ef0:	429a      	cmp	r2, r3
 8007ef2:	d909      	bls.n	8007f08 <HAL_RCC_ClockConfig+0xa4>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8007ef4:	4b7d      	ldr	r3, [pc, #500]	@ (80080ec <HAL_RCC_ClockConfig+0x288>)
 8007ef6:	6a1b      	ldr	r3, [r3, #32]
 8007ef8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	691b      	ldr	r3, [r3, #16]
 8007f00:	011b      	lsls	r3, r3, #4
 8007f02:	497a      	ldr	r1, [pc, #488]	@ (80080ec <HAL_RCC_ClockConfig+0x288>)
 8007f04:	4313      	orrs	r3, r2
 8007f06:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	f003 0304 	and.w	r3, r3, #4
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	d010      	beq.n	8007f36 <HAL_RCC_ClockConfig+0xd2>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	68da      	ldr	r2, [r3, #12]
 8007f18:	4b74      	ldr	r3, [pc, #464]	@ (80080ec <HAL_RCC_ClockConfig+0x288>)
 8007f1a:	6a1b      	ldr	r3, [r3, #32]
 8007f1c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007f20:	429a      	cmp	r2, r3
 8007f22:	d908      	bls.n	8007f36 <HAL_RCC_ClockConfig+0xd2>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8007f24:	4b71      	ldr	r3, [pc, #452]	@ (80080ec <HAL_RCC_ClockConfig+0x288>)
 8007f26:	6a1b      	ldr	r3, [r3, #32]
 8007f28:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	68db      	ldr	r3, [r3, #12]
 8007f30:	496e      	ldr	r1, [pc, #440]	@ (80080ec <HAL_RCC_ClockConfig+0x288>)
 8007f32:	4313      	orrs	r3, r2
 8007f34:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	f003 0302 	and.w	r3, r3, #2
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d010      	beq.n	8007f64 <HAL_RCC_ClockConfig+0x100>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	689a      	ldr	r2, [r3, #8]
 8007f46:	4b69      	ldr	r3, [pc, #420]	@ (80080ec <HAL_RCC_ClockConfig+0x288>)
 8007f48:	6a1b      	ldr	r3, [r3, #32]
 8007f4a:	f003 030f 	and.w	r3, r3, #15
 8007f4e:	429a      	cmp	r2, r3
 8007f50:	d908      	bls.n	8007f64 <HAL_RCC_ClockConfig+0x100>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 8007f52:	4b66      	ldr	r3, [pc, #408]	@ (80080ec <HAL_RCC_ClockConfig+0x288>)
 8007f54:	6a1b      	ldr	r3, [r3, #32]
 8007f56:	f023 020f 	bic.w	r2, r3, #15
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	689b      	ldr	r3, [r3, #8]
 8007f5e:	4963      	ldr	r1, [pc, #396]	@ (80080ec <HAL_RCC_ClockConfig+0x288>)
 8007f60:	4313      	orrs	r3, r2
 8007f62:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	f003 0301 	and.w	r3, r3, #1
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	f000 80d2 	beq.w	8008116 <HAL_RCC_ClockConfig+0x2b2>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pRCC_ClkInitStruct->SYSCLKSource));
    FlagStatus  pwrclkchanged = RESET;
 8007f72:	2300      	movs	r3, #0
 8007f74:	75fb      	strb	r3, [r7, #23]

    /* PLL is selected as System Clock Source */
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	685b      	ldr	r3, [r3, #4]
 8007f7a:	2b03      	cmp	r3, #3
 8007f7c:	d143      	bne.n	8008006 <HAL_RCC_ClockConfig+0x1a2>
    {
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007f7e:	4b5b      	ldr	r3, [pc, #364]	@ (80080ec <HAL_RCC_ClockConfig+0x288>)
 8007f80:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007f84:	f003 0304 	and.w	r3, r3, #4
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d110      	bne.n	8007fae <HAL_RCC_ClockConfig+0x14a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8007f8c:	4b57      	ldr	r3, [pc, #348]	@ (80080ec <HAL_RCC_ClockConfig+0x288>)
 8007f8e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007f92:	4a56      	ldr	r2, [pc, #344]	@ (80080ec <HAL_RCC_ClockConfig+0x288>)
 8007f94:	f043 0304 	orr.w	r3, r3, #4
 8007f98:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8007f9c:	4b53      	ldr	r3, [pc, #332]	@ (80080ec <HAL_RCC_ClockConfig+0x288>)
 8007f9e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007fa2:	f003 0304 	and.w	r3, r3, #4
 8007fa6:	60bb      	str	r3, [r7, #8]
 8007fa8:	68bb      	ldr	r3, [r7, #8]
        pwrclkchanged = SET;
 8007faa:	2301      	movs	r3, #1
 8007fac:	75fb      	strb	r3, [r7, #23]
      }
      tickstart = HAL_GetTick();
 8007fae:	f7fc febd 	bl	8004d2c <HAL_GetTick>
 8007fb2:	6138      	str	r0, [r7, #16]
      /* Check if EPOD is enabled */
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 8007fb4:	4b4e      	ldr	r3, [pc, #312]	@ (80080f0 <HAL_RCC_ClockConfig+0x28c>)
 8007fb6:	68db      	ldr	r3, [r3, #12]
 8007fb8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d00f      	beq.n	8007fe0 <HAL_RCC_ClockConfig+0x17c>
      {
        /* Wait till BOOST is ready */
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8007fc0:	e008      	b.n	8007fd4 <HAL_RCC_ClockConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > EPOD_TIMEOUT_VALUE)
 8007fc2:	f7fc feb3 	bl	8004d2c <HAL_GetTick>
 8007fc6:	4602      	mov	r2, r0
 8007fc8:	693b      	ldr	r3, [r7, #16]
 8007fca:	1ad3      	subs	r3, r2, r3
 8007fcc:	2b02      	cmp	r3, #2
 8007fce:	d901      	bls.n	8007fd4 <HAL_RCC_ClockConfig+0x170>
          {
            return HAL_TIMEOUT;
 8007fd0:	2303      	movs	r3, #3
 8007fd2:	e12b      	b.n	800822c <HAL_RCC_ClockConfig+0x3c8>
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8007fd4:	4b46      	ldr	r3, [pc, #280]	@ (80080f0 <HAL_RCC_ClockConfig+0x28c>)
 8007fd6:	68db      	ldr	r3, [r3, #12]
 8007fd8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	d0f0      	beq.n	8007fc2 <HAL_RCC_ClockConfig+0x15e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8007fe0:	7dfb      	ldrb	r3, [r7, #23]
 8007fe2:	2b01      	cmp	r3, #1
 8007fe4:	d107      	bne.n	8007ff6 <HAL_RCC_ClockConfig+0x192>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8007fe6:	4b41      	ldr	r3, [pc, #260]	@ (80080ec <HAL_RCC_ClockConfig+0x288>)
 8007fe8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007fec:	4a3f      	ldr	r2, [pc, #252]	@ (80080ec <HAL_RCC_ClockConfig+0x288>)
 8007fee:	f023 0304 	bic.w	r3, r3, #4
 8007ff2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
      }

      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8007ff6:	4b3d      	ldr	r3, [pc, #244]	@ (80080ec <HAL_RCC_ClockConfig+0x288>)
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d121      	bne.n	8008046 <HAL_RCC_ClockConfig+0x1e2>
      {
        return HAL_ERROR;
 8008002:	2301      	movs	r3, #1
 8008004:	e112      	b.n	800822c <HAL_RCC_ClockConfig+0x3c8>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	685b      	ldr	r3, [r3, #4]
 800800a:	2b02      	cmp	r3, #2
 800800c:	d107      	bne.n	800801e <HAL_RCC_ClockConfig+0x1ba>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800800e:	4b37      	ldr	r3, [pc, #220]	@ (80080ec <HAL_RCC_ClockConfig+0x288>)
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008016:	2b00      	cmp	r3, #0
 8008018:	d115      	bne.n	8008046 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 800801a:	2301      	movs	r3, #1
 800801c:	e106      	b.n	800822c <HAL_RCC_ClockConfig+0x3c8>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	685b      	ldr	r3, [r3, #4]
 8008022:	2b00      	cmp	r3, #0
 8008024:	d107      	bne.n	8008036 <HAL_RCC_ClockConfig+0x1d2>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8008026:	4b31      	ldr	r3, [pc, #196]	@ (80080ec <HAL_RCC_ClockConfig+0x288>)
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	f003 0304 	and.w	r3, r3, #4
 800802e:	2b00      	cmp	r3, #0
 8008030:	d109      	bne.n	8008046 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8008032:	2301      	movs	r3, #1
 8008034:	e0fa      	b.n	800822c <HAL_RCC_ClockConfig+0x3c8>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008036:	4b2d      	ldr	r3, [pc, #180]	@ (80080ec <HAL_RCC_ClockConfig+0x288>)
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800803e:	2b00      	cmp	r3, #0
 8008040:	d101      	bne.n	8008046 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8008042:	2301      	movs	r3, #1
 8008044:	e0f2      	b.n	800822c <HAL_RCC_ClockConfig+0x3c8>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 8008046:	4b29      	ldr	r3, [pc, #164]	@ (80080ec <HAL_RCC_ClockConfig+0x288>)
 8008048:	69db      	ldr	r3, [r3, #28]
 800804a:	f023 0203 	bic.w	r2, r3, #3
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	685b      	ldr	r3, [r3, #4]
 8008052:	4926      	ldr	r1, [pc, #152]	@ (80080ec <HAL_RCC_ClockConfig+0x288>)
 8008054:	4313      	orrs	r3, r2
 8008056:	61cb      	str	r3, [r1, #28]

    tickstart = HAL_GetTick();
 8008058:	f7fc fe68 	bl	8004d2c <HAL_GetTick>
 800805c:	6138      	str	r0, [r7, #16]

    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	685b      	ldr	r3, [r3, #4]
 8008062:	2b03      	cmp	r3, #3
 8008064:	d112      	bne.n	800808c <HAL_RCC_ClockConfig+0x228>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008066:	e00a      	b.n	800807e <HAL_RCC_ClockConfig+0x21a>
      {
        if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008068:	f7fc fe60 	bl	8004d2c <HAL_GetTick>
 800806c:	4602      	mov	r2, r0
 800806e:	693b      	ldr	r3, [r7, #16]
 8008070:	1ad3      	subs	r3, r2, r3
 8008072:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008076:	4293      	cmp	r3, r2
 8008078:	d901      	bls.n	800807e <HAL_RCC_ClockConfig+0x21a>
        {
          return HAL_TIMEOUT;
 800807a:	2303      	movs	r3, #3
 800807c:	e0d6      	b.n	800822c <HAL_RCC_ClockConfig+0x3c8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800807e:	4b1b      	ldr	r3, [pc, #108]	@ (80080ec <HAL_RCC_ClockConfig+0x288>)
 8008080:	69db      	ldr	r3, [r3, #28]
 8008082:	f003 030c 	and.w	r3, r3, #12
 8008086:	2b0c      	cmp	r3, #12
 8008088:	d1ee      	bne.n	8008068 <HAL_RCC_ClockConfig+0x204>
 800808a:	e044      	b.n	8008116 <HAL_RCC_ClockConfig+0x2b2>
        }
      }
    }
    else
    {
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	685b      	ldr	r3, [r3, #4]
 8008090:	2b02      	cmp	r3, #2
 8008092:	d112      	bne.n	80080ba <HAL_RCC_ClockConfig+0x256>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8008094:	e00a      	b.n	80080ac <HAL_RCC_ClockConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008096:	f7fc fe49 	bl	8004d2c <HAL_GetTick>
 800809a:	4602      	mov	r2, r0
 800809c:	693b      	ldr	r3, [r7, #16]
 800809e:	1ad3      	subs	r3, r2, r3
 80080a0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80080a4:	4293      	cmp	r3, r2
 80080a6:	d901      	bls.n	80080ac <HAL_RCC_ClockConfig+0x248>
          {
            return HAL_TIMEOUT;
 80080a8:	2303      	movs	r3, #3
 80080aa:	e0bf      	b.n	800822c <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80080ac:	4b0f      	ldr	r3, [pc, #60]	@ (80080ec <HAL_RCC_ClockConfig+0x288>)
 80080ae:	69db      	ldr	r3, [r3, #28]
 80080b0:	f003 030c 	and.w	r3, r3, #12
 80080b4:	2b08      	cmp	r3, #8
 80080b6:	d1ee      	bne.n	8008096 <HAL_RCC_ClockConfig+0x232>
 80080b8:	e02d      	b.n	8008116 <HAL_RCC_ClockConfig+0x2b2>
          }
        }
      }
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	685b      	ldr	r3, [r3, #4]
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d123      	bne.n	800810a <HAL_RCC_ClockConfig+0x2a6>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80080c2:	e00a      	b.n	80080da <HAL_RCC_ClockConfig+0x276>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80080c4:	f7fc fe32 	bl	8004d2c <HAL_GetTick>
 80080c8:	4602      	mov	r2, r0
 80080ca:	693b      	ldr	r3, [r7, #16]
 80080cc:	1ad3      	subs	r3, r2, r3
 80080ce:	f241 3288 	movw	r2, #5000	@ 0x1388
 80080d2:	4293      	cmp	r3, r2
 80080d4:	d901      	bls.n	80080da <HAL_RCC_ClockConfig+0x276>
          {
            return HAL_TIMEOUT;
 80080d6:	2303      	movs	r3, #3
 80080d8:	e0a8      	b.n	800822c <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80080da:	4b04      	ldr	r3, [pc, #16]	@ (80080ec <HAL_RCC_ClockConfig+0x288>)
 80080dc:	69db      	ldr	r3, [r3, #28]
 80080de:	f003 030c 	and.w	r3, r3, #12
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d1ee      	bne.n	80080c4 <HAL_RCC_ClockConfig+0x260>
 80080e6:	e016      	b.n	8008116 <HAL_RCC_ClockConfig+0x2b2>
 80080e8:	40022000 	.word	0x40022000
 80080ec:	46020c00 	.word	0x46020c00
 80080f0:	46020800 	.word	0x46020800
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80080f4:	f7fc fe1a 	bl	8004d2c <HAL_GetTick>
 80080f8:	4602      	mov	r2, r0
 80080fa:	693b      	ldr	r3, [r7, #16]
 80080fc:	1ad3      	subs	r3, r2, r3
 80080fe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008102:	4293      	cmp	r3, r2
 8008104:	d901      	bls.n	800810a <HAL_RCC_ClockConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 8008106:	2303      	movs	r3, #3
 8008108:	e090      	b.n	800822c <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800810a:	4b4a      	ldr	r3, [pc, #296]	@ (8008234 <HAL_RCC_ClockConfig+0x3d0>)
 800810c:	69db      	ldr	r3, [r3, #28]
 800810e:	f003 030c 	and.w	r3, r3, #12
 8008112:	2b04      	cmp	r3, #4
 8008114:	d1ee      	bne.n	80080f4 <HAL_RCC_ClockConfig+0x290>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	f003 0302 	and.w	r3, r3, #2
 800811e:	2b00      	cmp	r3, #0
 8008120:	d010      	beq.n	8008144 <HAL_RCC_ClockConfig+0x2e0>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	689a      	ldr	r2, [r3, #8]
 8008126:	4b43      	ldr	r3, [pc, #268]	@ (8008234 <HAL_RCC_ClockConfig+0x3d0>)
 8008128:	6a1b      	ldr	r3, [r3, #32]
 800812a:	f003 030f 	and.w	r3, r3, #15
 800812e:	429a      	cmp	r2, r3
 8008130:	d208      	bcs.n	8008144 <HAL_RCC_ClockConfig+0x2e0>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 8008132:	4b40      	ldr	r3, [pc, #256]	@ (8008234 <HAL_RCC_ClockConfig+0x3d0>)
 8008134:	6a1b      	ldr	r3, [r3, #32]
 8008136:	f023 020f 	bic.w	r2, r3, #15
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	689b      	ldr	r3, [r3, #8]
 800813e:	493d      	ldr	r1, [pc, #244]	@ (8008234 <HAL_RCC_ClockConfig+0x3d0>)
 8008140:	4313      	orrs	r3, r2
 8008142:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008144:	4b3c      	ldr	r3, [pc, #240]	@ (8008238 <HAL_RCC_ClockConfig+0x3d4>)
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	f003 030f 	and.w	r3, r3, #15
 800814c:	683a      	ldr	r2, [r7, #0]
 800814e:	429a      	cmp	r2, r3
 8008150:	d210      	bcs.n	8008174 <HAL_RCC_ClockConfig+0x310>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008152:	4b39      	ldr	r3, [pc, #228]	@ (8008238 <HAL_RCC_ClockConfig+0x3d4>)
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	f023 020f 	bic.w	r2, r3, #15
 800815a:	4937      	ldr	r1, [pc, #220]	@ (8008238 <HAL_RCC_ClockConfig+0x3d4>)
 800815c:	683b      	ldr	r3, [r7, #0]
 800815e:	4313      	orrs	r3, r2
 8008160:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008162:	4b35      	ldr	r3, [pc, #212]	@ (8008238 <HAL_RCC_ClockConfig+0x3d4>)
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	f003 030f 	and.w	r3, r3, #15
 800816a:	683a      	ldr	r2, [r7, #0]
 800816c:	429a      	cmp	r2, r3
 800816e:	d001      	beq.n	8008174 <HAL_RCC_ClockConfig+0x310>
    {
      return HAL_ERROR;
 8008170:	2301      	movs	r3, #1
 8008172:	e05b      	b.n	800822c <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	f003 0304 	and.w	r3, r3, #4
 800817c:	2b00      	cmp	r3, #0
 800817e:	d010      	beq.n	80081a2 <HAL_RCC_ClockConfig+0x33e>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	68da      	ldr	r2, [r3, #12]
 8008184:	4b2b      	ldr	r3, [pc, #172]	@ (8008234 <HAL_RCC_ClockConfig+0x3d0>)
 8008186:	6a1b      	ldr	r3, [r3, #32]
 8008188:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800818c:	429a      	cmp	r2, r3
 800818e:	d208      	bcs.n	80081a2 <HAL_RCC_ClockConfig+0x33e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8008190:	4b28      	ldr	r3, [pc, #160]	@ (8008234 <HAL_RCC_ClockConfig+0x3d0>)
 8008192:	6a1b      	ldr	r3, [r3, #32]
 8008194:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	68db      	ldr	r3, [r3, #12]
 800819c:	4925      	ldr	r1, [pc, #148]	@ (8008234 <HAL_RCC_ClockConfig+0x3d0>)
 800819e:	4313      	orrs	r3, r2
 80081a0:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	f003 0308 	and.w	r3, r3, #8
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d012      	beq.n	80081d4 <HAL_RCC_ClockConfig+0x370>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	691a      	ldr	r2, [r3, #16]
 80081b2:	4b20      	ldr	r3, [pc, #128]	@ (8008234 <HAL_RCC_ClockConfig+0x3d0>)
 80081b4:	6a1b      	ldr	r3, [r3, #32]
 80081b6:	091b      	lsrs	r3, r3, #4
 80081b8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80081bc:	429a      	cmp	r2, r3
 80081be:	d209      	bcs.n	80081d4 <HAL_RCC_ClockConfig+0x370>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 80081c0:	4b1c      	ldr	r3, [pc, #112]	@ (8008234 <HAL_RCC_ClockConfig+0x3d0>)
 80081c2:	6a1b      	ldr	r3, [r3, #32]
 80081c4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	691b      	ldr	r3, [r3, #16]
 80081cc:	011b      	lsls	r3, r3, #4
 80081ce:	4919      	ldr	r1, [pc, #100]	@ (8008234 <HAL_RCC_ClockConfig+0x3d0>)
 80081d0:	4313      	orrs	r3, r2
 80081d2:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	f003 0310 	and.w	r3, r3, #16
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d010      	beq.n	8008202 <HAL_RCC_ClockConfig+0x39e>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) < (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	695a      	ldr	r2, [r3, #20]
 80081e4:	4b13      	ldr	r3, [pc, #76]	@ (8008234 <HAL_RCC_ClockConfig+0x3d0>)
 80081e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80081e8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80081ec:	429a      	cmp	r2, r3
 80081ee:	d208      	bcs.n	8008202 <HAL_RCC_ClockConfig+0x39e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, (pRCC_ClkInitStruct->APB3CLKDivider));
 80081f0:	4b10      	ldr	r3, [pc, #64]	@ (8008234 <HAL_RCC_ClockConfig+0x3d0>)
 80081f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80081f4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	695b      	ldr	r3, [r3, #20]
 80081fc:	490d      	ldr	r1, [pc, #52]	@ (8008234 <HAL_RCC_ClockConfig+0x3d0>)
 80081fe:	4313      	orrs	r3, r2
 8008200:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8008202:	f000 f821 	bl	8008248 <HAL_RCC_GetSysClockFreq>
 8008206:	4602      	mov	r2, r0
 8008208:	4b0a      	ldr	r3, [pc, #40]	@ (8008234 <HAL_RCC_ClockConfig+0x3d0>)
 800820a:	6a1b      	ldr	r3, [r3, #32]
 800820c:	f003 030f 	and.w	r3, r3, #15
 8008210:	490a      	ldr	r1, [pc, #40]	@ (800823c <HAL_RCC_ClockConfig+0x3d8>)
 8008212:	5ccb      	ldrb	r3, [r1, r3]
 8008214:	fa22 f303 	lsr.w	r3, r2, r3
 8008218:	4a09      	ldr	r2, [pc, #36]	@ (8008240 <HAL_RCC_ClockConfig+0x3dc>)
 800821a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800821c:	4b09      	ldr	r3, [pc, #36]	@ (8008244 <HAL_RCC_ClockConfig+0x3e0>)
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	4618      	mov	r0, r3
 8008222:	f7fc f8c9 	bl	80043b8 <HAL_InitTick>
 8008226:	4603      	mov	r3, r0
 8008228:	73fb      	strb	r3, [r7, #15]

  return status;
 800822a:	7bfb      	ldrb	r3, [r7, #15]
}
 800822c:	4618      	mov	r0, r3
 800822e:	3718      	adds	r7, #24
 8008230:	46bd      	mov	sp, r7
 8008232:	bd80      	pop	{r7, pc}
 8008234:	46020c00 	.word	0x46020c00
 8008238:	40022000 	.word	0x40022000
 800823c:	08010ef4 	.word	0x08010ef4
 8008240:	2000000c 	.word	0x2000000c
 8008244:	2000002c 	.word	0x2000002c

08008248 <HAL_RCC_GetSysClockFreq>:
  * @note   Each time SYSCLK changes, this function must be called to update the
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008248:	b480      	push	{r7}
 800824a:	b08b      	sub	sp, #44	@ 0x2c
 800824c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 800824e:	2300      	movs	r3, #0
 8008250:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pllsource;
  uint32_t pllr;
  uint32_t pllm;
  uint32_t pllfracen;
  uint32_t sysclockfreq = 0U;
 8008252:	2300      	movs	r3, #0
 8008254:	623b      	str	r3, [r7, #32]
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  float_t fracn1;
  float_t pllvco;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008256:	4b78      	ldr	r3, [pc, #480]	@ (8008438 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8008258:	69db      	ldr	r3, [r3, #28]
 800825a:	f003 030c 	and.w	r3, r3, #12
 800825e:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8008260:	4b75      	ldr	r3, [pc, #468]	@ (8008438 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8008262:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008264:	f003 0303 	and.w	r3, r3, #3
 8008268:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800826a:	69bb      	ldr	r3, [r7, #24]
 800826c:	2b00      	cmp	r3, #0
 800826e:	d005      	beq.n	800827c <HAL_RCC_GetSysClockFreq+0x34>
 8008270:	69bb      	ldr	r3, [r7, #24]
 8008272:	2b0c      	cmp	r3, #12
 8008274:	d121      	bne.n	80082ba <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8008276:	697b      	ldr	r3, [r7, #20]
 8008278:	2b01      	cmp	r3, #1
 800827a:	d11e      	bne.n	80082ba <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 800827c:	4b6e      	ldr	r3, [pc, #440]	@ (8008438 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800827e:	689b      	ldr	r3, [r3, #8]
 8008280:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008284:	2b00      	cmp	r3, #0
 8008286:	d107      	bne.n	8008298 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 8008288:	4b6b      	ldr	r3, [pc, #428]	@ (8008438 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800828a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800828e:	0b1b      	lsrs	r3, r3, #12
 8008290:	f003 030f 	and.w	r3, r3, #15
 8008294:	627b      	str	r3, [r7, #36]	@ 0x24
 8008296:	e005      	b.n	80082a4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 8008298:	4b67      	ldr	r3, [pc, #412]	@ (8008438 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800829a:	689b      	ldr	r3, [r3, #8]
 800829c:	0f1b      	lsrs	r3, r3, #28
 800829e:	f003 030f 	and.w	r3, r3, #15
 80082a2:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80082a4:	4a65      	ldr	r2, [pc, #404]	@ (800843c <HAL_RCC_GetSysClockFreq+0x1f4>)
 80082a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80082ac:	627b      	str	r3, [r7, #36]	@ 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80082ae:	69bb      	ldr	r3, [r7, #24]
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d110      	bne.n	80082d6 <HAL_RCC_GetSysClockFreq+0x8e>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80082b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082b6:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80082b8:	e00d      	b.n	80082d6 <HAL_RCC_GetSysClockFreq+0x8e>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80082ba:	4b5f      	ldr	r3, [pc, #380]	@ (8008438 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80082bc:	69db      	ldr	r3, [r3, #28]
 80082be:	f003 030c 	and.w	r3, r3, #12
 80082c2:	2b04      	cmp	r3, #4
 80082c4:	d102      	bne.n	80082cc <HAL_RCC_GetSysClockFreq+0x84>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80082c6:	4b5e      	ldr	r3, [pc, #376]	@ (8008440 <HAL_RCC_GetSysClockFreq+0x1f8>)
 80082c8:	623b      	str	r3, [r7, #32]
 80082ca:	e004      	b.n	80082d6 <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80082cc:	69bb      	ldr	r3, [r7, #24]
 80082ce:	2b08      	cmp	r3, #8
 80082d0:	d101      	bne.n	80082d6 <HAL_RCC_GetSysClockFreq+0x8e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80082d2:	4b5b      	ldr	r3, [pc, #364]	@ (8008440 <HAL_RCC_GetSysClockFreq+0x1f8>)
 80082d4:	623b      	str	r3, [r7, #32]
  else
  {
    /* Nothing to do */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80082d6:	69bb      	ldr	r3, [r7, #24]
 80082d8:	2b0c      	cmp	r3, #12
 80082da:	f040 80a5 	bne.w	8008428 <HAL_RCC_GetSysClockFreq+0x1e0>
  {
    /* PLL used as system clock  source
       PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
       SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 80082de:	4b56      	ldr	r3, [pc, #344]	@ (8008438 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80082e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80082e2:	f003 0303 	and.w	r3, r3, #3
 80082e6:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 80082e8:	4b53      	ldr	r3, [pc, #332]	@ (8008438 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80082ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80082ec:	0a1b      	lsrs	r3, r3, #8
 80082ee:	f003 030f 	and.w	r3, r3, #15
 80082f2:	3301      	adds	r3, #1
 80082f4:	60fb      	str	r3, [r7, #12]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 80082f6:	4b50      	ldr	r3, [pc, #320]	@ (8008438 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80082f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80082fa:	091b      	lsrs	r3, r3, #4
 80082fc:	f003 0301 	and.w	r3, r3, #1
 8008300:	60bb      	str	r3, [r7, #8]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8008302:	4b4d      	ldr	r3, [pc, #308]	@ (8008438 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8008304:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008306:	08db      	lsrs	r3, r3, #3
 8008308:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800830c:	68ba      	ldr	r2, [r7, #8]
 800830e:	fb02 f303 	mul.w	r3, r2, r3
 8008312:	ee07 3a90 	vmov	s15, r3
 8008316:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800831a:	edc7 7a01 	vstr	s15, [r7, #4]
                                              RCC_PLL1FRACR_PLL1FRACN_Pos));

    switch (pllsource)
 800831e:	693b      	ldr	r3, [r7, #16]
 8008320:	2b02      	cmp	r3, #2
 8008322:	d003      	beq.n	800832c <HAL_RCC_GetSysClockFreq+0xe4>
 8008324:	693b      	ldr	r3, [r7, #16]
 8008326:	2b03      	cmp	r3, #3
 8008328:	d022      	beq.n	8008370 <HAL_RCC_GetSysClockFreq+0x128>
 800832a:	e043      	b.n	80083b4 <HAL_RCC_GetSysClockFreq+0x16c>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	ee07 3a90 	vmov	s15, r3
 8008332:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008336:	eddf 6a43 	vldr	s13, [pc, #268]	@ 8008444 <HAL_RCC_GetSysClockFreq+0x1fc>
 800833a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800833e:	4b3e      	ldr	r3, [pc, #248]	@ (8008438 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8008340:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008342:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008346:	ee07 3a90 	vmov	s15, r3
 800834a:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 800834e:	ed97 6a01 	vldr	s12, [r7, #4]
 8008352:	eddf 5a3d 	vldr	s11, [pc, #244]	@ 8008448 <HAL_RCC_GetSysClockFreq+0x200>
 8008356:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800835a:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 800835e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008362:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8008366:	ee67 7a27 	vmul.f32	s15, s14, s15
 800836a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800836e:	e046      	b.n	80083fe <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	ee07 3a90 	vmov	s15, r3
 8008376:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800837a:	eddf 6a32 	vldr	s13, [pc, #200]	@ 8008444 <HAL_RCC_GetSysClockFreq+0x1fc>
 800837e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008382:	4b2d      	ldr	r3, [pc, #180]	@ (8008438 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8008384:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008386:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800838a:	ee07 3a90 	vmov	s15, r3
 800838e:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8008392:	ed97 6a01 	vldr	s12, [r7, #4]
 8008396:	eddf 5a2c 	vldr	s11, [pc, #176]	@ 8008448 <HAL_RCC_GetSysClockFreq+0x200>
 800839a:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800839e:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 80083a2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80083a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80083aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80083ae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80083b2:	e024      	b.n	80083fe <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80083b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083b6:	ee07 3a90 	vmov	s15, r3
 80083ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	ee07 3a90 	vmov	s15, r3
 80083c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80083c8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80083cc:	4b1a      	ldr	r3, [pc, #104]	@ (8008438 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80083ce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80083d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80083d4:	ee07 3a90 	vmov	s15, r3
 80083d8:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 80083dc:	ed97 6a01 	vldr	s12, [r7, #4]
 80083e0:	eddf 5a19 	vldr	s11, [pc, #100]	@ 8008448 <HAL_RCC_GetSysClockFreq+0x200>
 80083e4:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80083e8:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 80083ec:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80083f0:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80083f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80083f8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80083fc:	bf00      	nop
    }

    pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 80083fe:	4b0e      	ldr	r3, [pc, #56]	@ (8008438 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8008400:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008402:	0e1b      	lsrs	r3, r3, #24
 8008404:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008408:	3301      	adds	r3, #1
 800840a:	603b      	str	r3, [r7, #0]
    sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 800840c:	683b      	ldr	r3, [r7, #0]
 800840e:	ee07 3a90 	vmov	s15, r3
 8008412:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8008416:	edd7 6a07 	vldr	s13, [r7, #28]
 800841a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800841e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008422:	ee17 3a90 	vmov	r3, s15
 8008426:	623b      	str	r3, [r7, #32]
  }

  return sysclockfreq;
 8008428:	6a3b      	ldr	r3, [r7, #32]
}
 800842a:	4618      	mov	r0, r3
 800842c:	372c      	adds	r7, #44	@ 0x2c
 800842e:	46bd      	mov	sp, r7
 8008430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008434:	4770      	bx	lr
 8008436:	bf00      	nop
 8008438:	46020c00 	.word	0x46020c00
 800843c:	08010f0c 	.word	0x08010f0c
 8008440:	00f42400 	.word	0x00f42400
 8008444:	4b742400 	.word	0x4b742400
 8008448:	46000000 	.word	0x46000000

0800844c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800844c:	b580      	push	{r7, lr}
 800844e:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8008450:	f7ff fefa 	bl	8008248 <HAL_RCC_GetSysClockFreq>
 8008454:	4602      	mov	r2, r0
 8008456:	4b07      	ldr	r3, [pc, #28]	@ (8008474 <HAL_RCC_GetHCLKFreq+0x28>)
 8008458:	6a1b      	ldr	r3, [r3, #32]
 800845a:	f003 030f 	and.w	r3, r3, #15
 800845e:	4906      	ldr	r1, [pc, #24]	@ (8008478 <HAL_RCC_GetHCLKFreq+0x2c>)
 8008460:	5ccb      	ldrb	r3, [r1, r3]
 8008462:	fa22 f303 	lsr.w	r3, r2, r3
 8008466:	4a05      	ldr	r2, [pc, #20]	@ (800847c <HAL_RCC_GetHCLKFreq+0x30>)
 8008468:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 800846a:	4b04      	ldr	r3, [pc, #16]	@ (800847c <HAL_RCC_GetHCLKFreq+0x30>)
 800846c:	681b      	ldr	r3, [r3, #0]
}
 800846e:	4618      	mov	r0, r3
 8008470:	bd80      	pop	{r7, pc}
 8008472:	bf00      	nop
 8008474:	46020c00 	.word	0x46020c00
 8008478:	08010ef4 	.word	0x08010ef4
 800847c:	2000000c 	.word	0x2000000c

08008480 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008480:	b580      	push	{r7, lr}
 8008482:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]);
 8008484:	f7ff ffe2 	bl	800844c <HAL_RCC_GetHCLKFreq>
 8008488:	4602      	mov	r2, r0
 800848a:	4b05      	ldr	r3, [pc, #20]	@ (80084a0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800848c:	6a1b      	ldr	r3, [r3, #32]
 800848e:	091b      	lsrs	r3, r3, #4
 8008490:	f003 0307 	and.w	r3, r3, #7
 8008494:	4903      	ldr	r1, [pc, #12]	@ (80084a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008496:	5ccb      	ldrb	r3, [r1, r3]
 8008498:	fa22 f303 	lsr.w	r3, r2, r3
}
 800849c:	4618      	mov	r0, r3
 800849e:	bd80      	pop	{r7, pc}
 80084a0:	46020c00 	.word	0x46020c00
 80084a4:	08010f04 	.word	0x08010f04

080084a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80084a8:	b580      	push	{r7, lr}
 80084aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]);
 80084ac:	f7ff ffce 	bl	800844c <HAL_RCC_GetHCLKFreq>
 80084b0:	4602      	mov	r2, r0
 80084b2:	4b05      	ldr	r3, [pc, #20]	@ (80084c8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80084b4:	6a1b      	ldr	r3, [r3, #32]
 80084b6:	0a1b      	lsrs	r3, r3, #8
 80084b8:	f003 0307 	and.w	r3, r3, #7
 80084bc:	4903      	ldr	r1, [pc, #12]	@ (80084cc <HAL_RCC_GetPCLK2Freq+0x24>)
 80084be:	5ccb      	ldrb	r3, [r1, r3]
 80084c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80084c4:	4618      	mov	r0, r3
 80084c6:	bd80      	pop	{r7, pc}
 80084c8:	46020c00 	.word	0x46020c00
 80084cc:	08010f04 	.word	0x08010f04

080084d0 <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 80084d0:	b580      	push	{r7, lr}
 80084d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR3 & RCC_CFGR3_PPRE3) >> RCC_CFGR3_PPRE3_Pos]);
 80084d4:	f7ff ffba 	bl	800844c <HAL_RCC_GetHCLKFreq>
 80084d8:	4602      	mov	r2, r0
 80084da:	4b05      	ldr	r3, [pc, #20]	@ (80084f0 <HAL_RCC_GetPCLK3Freq+0x20>)
 80084dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80084de:	091b      	lsrs	r3, r3, #4
 80084e0:	f003 0307 	and.w	r3, r3, #7
 80084e4:	4903      	ldr	r1, [pc, #12]	@ (80084f4 <HAL_RCC_GetPCLK3Freq+0x24>)
 80084e6:	5ccb      	ldrb	r3, [r1, r3]
 80084e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80084ec:	4618      	mov	r0, r3
 80084ee:	bd80      	pop	{r7, pc}
 80084f0:	46020c00 	.word	0x46020c00
 80084f4:	08010f04 	.word	0x08010f04

080084f8 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *pRCC_ClkInitStruct, uint32_t *pFLatency)
{
 80084f8:	b480      	push	{r7}
 80084fa:	b083      	sub	sp, #12
 80084fc:	af00      	add	r7, sp, #0
 80084fe:	6078      	str	r0, [r7, #4]
 8008500:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(pRCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  pRCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | \
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	221f      	movs	r2, #31
 8008506:	601a      	str	r2, [r3, #0]
                                  RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_PCLK3;

  /* Get the SYSCLK configuration --------------------------------------------*/
  pRCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR1 & RCC_CFGR1_SW);
 8008508:	4b15      	ldr	r3, [pc, #84]	@ (8008560 <HAL_RCC_GetClockConfig+0x68>)
 800850a:	69db      	ldr	r3, [r3, #28]
 800850c:	f003 0203 	and.w	r2, r3, #3
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR2 & RCC_CFGR2_HPRE);
 8008514:	4b12      	ldr	r3, [pc, #72]	@ (8008560 <HAL_RCC_GetClockConfig+0x68>)
 8008516:	6a1b      	ldr	r3, [r3, #32]
 8008518:	f003 020f 	and.w	r2, r3, #15
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR2 & RCC_CFGR2_PPRE1);
 8008520:	4b0f      	ldr	r3, [pc, #60]	@ (8008560 <HAL_RCC_GetClockConfig+0x68>)
 8008522:	6a1b      	ldr	r3, [r3, #32]
 8008524:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4);
 800852c:	4b0c      	ldr	r3, [pc, #48]	@ (8008560 <HAL_RCC_GetClockConfig+0x68>)
 800852e:	6a1b      	ldr	r3, [r3, #32]
 8008530:	091b      	lsrs	r3, r3, #4
 8008532:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	611a      	str	r2, [r3, #16]

  /* Get the APB3 configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->CFGR3 & RCC_CFGR3_PPRE3);
 800853a:	4b09      	ldr	r3, [pc, #36]	@ (8008560 <HAL_RCC_GetClockConfig+0x68>)
 800853c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800853e:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	615a      	str	r2, [r3, #20]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8008546:	4b07      	ldr	r3, [pc, #28]	@ (8008564 <HAL_RCC_GetClockConfig+0x6c>)
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	f003 020f 	and.w	r2, r3, #15
 800854e:	683b      	ldr	r3, [r7, #0]
 8008550:	601a      	str	r2, [r3, #0]
}
 8008552:	bf00      	nop
 8008554:	370c      	adds	r7, #12
 8008556:	46bd      	mov	sp, r7
 8008558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800855c:	4770      	bx	lr
 800855e:	bf00      	nop
 8008560:	46020c00 	.word	0x46020c00
 8008564:	40022000 	.word	0x40022000

08008568 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8008568:	b580      	push	{r7, lr}
 800856a:	b086      	sub	sp, #24
 800856c:	af00      	add	r7, sp, #0
 800856e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency;  /* default value 0WS */

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 8008570:	4b3e      	ldr	r3, [pc, #248]	@ (800866c <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8008572:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008576:	f003 0304 	and.w	r3, r3, #4
 800857a:	2b00      	cmp	r3, #0
 800857c:	d003      	beq.n	8008586 <RCC_SetFlashLatencyFromMSIRange+0x1e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800857e:	f7fe fd17 	bl	8006fb0 <HAL_PWREx_GetVoltageRange>
 8008582:	6178      	str	r0, [r7, #20]
 8008584:	e019      	b.n	80085ba <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8008586:	4b39      	ldr	r3, [pc, #228]	@ (800866c <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8008588:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800858c:	4a37      	ldr	r2, [pc, #220]	@ (800866c <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800858e:	f043 0304 	orr.w	r3, r3, #4
 8008592:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8008596:	4b35      	ldr	r3, [pc, #212]	@ (800866c <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8008598:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800859c:	f003 0304 	and.w	r3, r3, #4
 80085a0:	60fb      	str	r3, [r7, #12]
 80085a2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80085a4:	f7fe fd04 	bl	8006fb0 <HAL_PWREx_GetVoltageRange>
 80085a8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80085aa:	4b30      	ldr	r3, [pc, #192]	@ (800866c <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80085ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80085b0:	4a2e      	ldr	r2, [pc, #184]	@ (800866c <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80085b2:	f023 0304 	bic.w	r3, r3, #4
 80085b6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 80085ba:	697b      	ldr	r3, [r7, #20]
 80085bc:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80085c0:	d003      	beq.n	80085ca <RCC_SetFlashLatencyFromMSIRange+0x62>
 80085c2:	697b      	ldr	r3, [r7, #20]
 80085c4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80085c8:	d109      	bne.n	80085de <RCC_SetFlashLatencyFromMSIRange+0x76>
  {

    if (msirange < RCC_MSIRANGE_1)
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80085d0:	d202      	bcs.n	80085d8 <RCC_SetFlashLatencyFromMSIRange+0x70>
    {
      /* MSI = 48Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 80085d2:	2301      	movs	r3, #1
 80085d4:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 80085d6:	e033      	b.n	8008640 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
    else
    {
      /*  MSI < 48Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 80085d8:	2300      	movs	r3, #0
 80085da:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 80085dc:	e030      	b.n	8008640 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
  }
  else
  {
    if (msirange < RCC_MSIRANGE_1)
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80085e4:	d208      	bcs.n	80085f8 <RCC_SetFlashLatencyFromMSIRange+0x90>
    {
      /* MSI = 48Mhz */
      if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 80085e6:	697b      	ldr	r3, [r7, #20]
 80085e8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80085ec:	d102      	bne.n	80085f4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        latency = FLASH_LATENCY_3; /* 3WS */
 80085ee:	2303      	movs	r3, #3
 80085f0:	613b      	str	r3, [r7, #16]
 80085f2:	e025      	b.n	8008640 <RCC_SetFlashLatencyFromMSIRange+0xd8>
      }
      else
      {
        return HAL_ERROR;
 80085f4:	2301      	movs	r3, #1
 80085f6:	e035      	b.n	8008664 <RCC_SetFlashLatencyFromMSIRange+0xfc>
      }
    }
    else
    {
      if (msirange > RCC_MSIRANGE_2)
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80085fe:	d90f      	bls.n	8008620 <RCC_SetFlashLatencyFromMSIRange+0xb8>
      {
        if (vos == PWR_REGULATOR_VOLTAGE_SCALE4)
 8008600:	697b      	ldr	r3, [r7, #20]
 8008602:	2b00      	cmp	r3, #0
 8008604:	d109      	bne.n	800861a <RCC_SetFlashLatencyFromMSIRange+0xb2>
        {
          if (msirange > RCC_MSIRANGE_3)
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800860c:	d902      	bls.n	8008614 <RCC_SetFlashLatencyFromMSIRange+0xac>
          {
            latency = FLASH_LATENCY_0; /* 1WS */
 800860e:	2300      	movs	r3, #0
 8008610:	613b      	str	r3, [r7, #16]
 8008612:	e015      	b.n	8008640 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_1; /* 0WS */
 8008614:	2301      	movs	r3, #1
 8008616:	613b      	str	r3, [r7, #16]
 8008618:	e012      	b.n	8008640 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_0; /* 0WS */
 800861a:	2300      	movs	r3, #0
 800861c:	613b      	str	r3, [r7, #16]
 800861e:	e00f      	b.n	8008640 <RCC_SetFlashLatencyFromMSIRange+0xd8>
        }
      }
      else
      {
        if (msirange == RCC_MSIRANGE_1)
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008626:	d109      	bne.n	800863c <RCC_SetFlashLatencyFromMSIRange+0xd4>
        {
          if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8008628:	697b      	ldr	r3, [r7, #20]
 800862a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800862e:	d102      	bne.n	8008636 <RCC_SetFlashLatencyFromMSIRange+0xce>
          {
            latency = FLASH_LATENCY_1; /* 1WS */
 8008630:	2301      	movs	r3, #1
 8008632:	613b      	str	r3, [r7, #16]
 8008634:	e004      	b.n	8008640 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_2; /* 2WS */
 8008636:	2302      	movs	r3, #2
 8008638:	613b      	str	r3, [r7, #16]
 800863a:	e001      	b.n	8008640 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_1; /* 1WS */
 800863c:	2301      	movs	r3, #1
 800863e:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8008640:	4b0b      	ldr	r3, [pc, #44]	@ (8008670 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	f023 020f 	bic.w	r2, r3, #15
 8008648:	4909      	ldr	r1, [pc, #36]	@ (8008670 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 800864a:	693b      	ldr	r3, [r7, #16]
 800864c:	4313      	orrs	r3, r2
 800864e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
  memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 8008650:	4b07      	ldr	r3, [pc, #28]	@ (8008670 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	f003 030f 	and.w	r3, r3, #15
 8008658:	693a      	ldr	r2, [r7, #16]
 800865a:	429a      	cmp	r2, r3
 800865c:	d001      	beq.n	8008662 <RCC_SetFlashLatencyFromMSIRange+0xfa>
  {
    return HAL_ERROR;
 800865e:	2301      	movs	r3, #1
 8008660:	e000      	b.n	8008664 <RCC_SetFlashLatencyFromMSIRange+0xfc>
  }

  return HAL_OK;
 8008662:	2300      	movs	r3, #0
}
 8008664:	4618      	mov	r0, r3
 8008666:	3718      	adds	r7, #24
 8008668:	46bd      	mov	sp, r7
 800866a:	bd80      	pop	{r7, pc}
 800866c:	46020c00 	.word	0x46020c00
 8008670:	40022000 	.word	0x40022000

08008674 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  *
  *         (*) value not defined in all devices.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 8008674:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008678:	b0b8      	sub	sp, #224	@ 0xe0
 800867a:	af00      	add	r7, sp, #0
 800867c:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8008680:	2300      	movs	r3, #0
 8008682:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8008686:	2300      	movs	r3, #0
 8008688:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800868c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8008690:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008694:	f002 0401 	and.w	r4, r2, #1
 8008698:	2500      	movs	r5, #0
 800869a:	ea54 0305 	orrs.w	r3, r4, r5
 800869e:	d00b      	beq.n	80086b8 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 80086a0:	4bca      	ldr	r3, [pc, #808]	@ (80089cc <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80086a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80086a6:	f023 0103 	bic.w	r1, r3, #3
 80086aa:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80086ae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80086b0:	4ac6      	ldr	r2, [pc, #792]	@ (80089cc <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80086b2:	430b      	orrs	r3, r1
 80086b4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

#if defined(USART2)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80086b8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80086bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086c0:	f002 0802 	and.w	r8, r2, #2
 80086c4:	f04f 0900 	mov.w	r9, #0
 80086c8:	ea58 0309 	orrs.w	r3, r8, r9
 80086cc:	d00b      	beq.n	80086e6 <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 80086ce:	4bbf      	ldr	r3, [pc, #764]	@ (80089cc <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80086d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80086d4:	f023 010c 	bic.w	r1, r3, #12
 80086d8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80086dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80086de:	4abb      	ldr	r2, [pc, #748]	@ (80089cc <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80086e0:	430b      	orrs	r3, r1
 80086e2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }
#endif /* USART2 */

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80086e6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80086ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086ee:	f002 0a04 	and.w	sl, r2, #4
 80086f2:	f04f 0b00 	mov.w	fp, #0
 80086f6:	ea5a 030b 	orrs.w	r3, sl, fp
 80086fa:	d00b      	beq.n	8008714 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 80086fc:	4bb3      	ldr	r3, [pc, #716]	@ (80089cc <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80086fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008702:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8008706:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800870a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800870c:	4aaf      	ldr	r2, [pc, #700]	@ (80089cc <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800870e:	430b      	orrs	r3, r1
 8008710:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8008714:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8008718:	e9d3 2300 	ldrd	r2, r3, [r3]
 800871c:	f002 0308 	and.w	r3, r2, #8
 8008720:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008724:	2300      	movs	r3, #0
 8008726:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800872a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800872e:	460b      	mov	r3, r1
 8008730:	4313      	orrs	r3, r2
 8008732:	d00b      	beq.n	800874c <HAL_RCCEx_PeriphCLKConfig+0xd8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 8008734:	4ba5      	ldr	r3, [pc, #660]	@ (80089cc <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8008736:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800873a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800873e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8008742:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008744:	4aa1      	ldr	r2, [pc, #644]	@ (80089cc <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8008746:	430b      	orrs	r3, r1
 8008748:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800874c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8008750:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008754:	f002 0310 	and.w	r3, r2, #16
 8008758:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800875c:	2300      	movs	r3, #0
 800875e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8008762:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8008766:	460b      	mov	r3, r1
 8008768:	4313      	orrs	r3, r2
 800876a:	d00b      	beq.n	8008784 <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 800876c:	4b97      	ldr	r3, [pc, #604]	@ (80089cc <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800876e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008772:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8008776:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800877a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800877c:	4a93      	ldr	r2, [pc, #588]	@ (80089cc <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800877e:	430b      	orrs	r3, r1
 8008780:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
    __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
  }
#endif /* USART6 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008784:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8008788:	e9d3 2300 	ldrd	r2, r3, [r3]
 800878c:	f002 0320 	and.w	r3, r2, #32
 8008790:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008794:	2300      	movs	r3, #0
 8008796:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800879a:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800879e:	460b      	mov	r3, r1
 80087a0:	4313      	orrs	r3, r2
 80087a2:	d00b      	beq.n	80087bc <HAL_RCCEx_PeriphCLKConfig+0x148>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 80087a4:	4b89      	ldr	r3, [pc, #548]	@ (80089cc <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80087a6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80087aa:	f023 0107 	bic.w	r1, r3, #7
 80087ae:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80087b2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80087b4:	4a85      	ldr	r2, [pc, #532]	@ (80089cc <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80087b6:	430b      	orrs	r3, r1
 80087b8:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80087bc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80087c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087c4:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 80087c8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80087cc:	2300      	movs	r3, #0
 80087ce:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80087d2:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80087d6:	460b      	mov	r3, r1
 80087d8:	4313      	orrs	r3, r2
 80087da:	d00b      	beq.n	80087f4 <HAL_RCCEx_PeriphCLKConfig+0x180>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 80087dc:	4b7b      	ldr	r3, [pc, #492]	@ (80089cc <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80087de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80087e2:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 80087e6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80087ea:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80087ec:	4a77      	ldr	r2, [pc, #476]	@ (80089cc <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80087ee:	430b      	orrs	r3, r1
 80087f0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80087f4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80087f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087fc:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8008800:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8008804:	2300      	movs	r3, #0
 8008806:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800880a:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 800880e:	460b      	mov	r3, r1
 8008810:	4313      	orrs	r3, r2
 8008812:	d00b      	beq.n	800882c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 8008814:	4b6d      	ldr	r3, [pc, #436]	@ (80089cc <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8008816:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800881a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800881e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8008822:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008824:	4a69      	ldr	r2, [pc, #420]	@ (80089cc <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8008826:	430b      	orrs	r3, r1
 8008828:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800882c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8008830:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008834:	f402 7380 	and.w	r3, r2, #256	@ 0x100
 8008838:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800883c:	2300      	movs	r3, #0
 800883e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8008842:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8008846:	460b      	mov	r3, r1
 8008848:	4313      	orrs	r3, r2
 800884a:	d00b      	beq.n	8008864 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 800884c:	4b5f      	ldr	r3, [pc, #380]	@ (80089cc <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800884e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008852:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8008856:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800885a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800885c:	4a5b      	ldr	r2, [pc, #364]	@ (80089cc <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800885e:	430b      	orrs	r3, r1
 8008860:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8008864:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8008868:	e9d3 2300 	ldrd	r2, r3, [r3]
 800886c:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8008870:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8008874:	2300      	movs	r3, #0
 8008876:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800887a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800887e:	460b      	mov	r3, r1
 8008880:	4313      	orrs	r3, r2
 8008882:	d00b      	beq.n	800889c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 8008884:	4b51      	ldr	r3, [pc, #324]	@ (80089cc <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8008886:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800888a:	f423 4140 	bic.w	r1, r3, #49152	@ 0xc000
 800888e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8008892:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008894:	4a4d      	ldr	r2, [pc, #308]	@ (80089cc <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8008896:	430b      	orrs	r3, r1
 8008898:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
    __HAL_RCC_I2C6_CONFIG(pPeriphClkInit->I2c6ClockSelection);
  }
#endif /* I2C6 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800889c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80088a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088a4:	f402 7300 	and.w	r3, r2, #512	@ 0x200
 80088a8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80088ac:	2300      	movs	r3, #0
 80088ae:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80088b2:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 80088b6:	460b      	mov	r3, r1
 80088b8:	4313      	orrs	r3, r2
 80088ba:	d00b      	beq.n	80088d4 <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 80088bc:	4b43      	ldr	r3, [pc, #268]	@ (80089cc <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80088be:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80088c2:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 80088c6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80088ca:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80088cc:	4a3f      	ldr	r2, [pc, #252]	@ (80089cc <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80088ce:	430b      	orrs	r3, r1
 80088d0:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80088d4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80088d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088dc:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 80088e0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80088e4:	2300      	movs	r3, #0
 80088e6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80088ea:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 80088ee:	460b      	mov	r3, r1
 80088f0:	4313      	orrs	r3, r2
 80088f2:	d00b      	beq.n	800890c <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 80088f4:	4b35      	ldr	r3, [pc, #212]	@ (80089cc <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80088f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80088fa:	f423 2140 	bic.w	r1, r3, #786432	@ 0xc0000
 80088fe:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8008902:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008904:	4a31      	ldr	r2, [pc, #196]	@ (80089cc <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8008906:	430b      	orrs	r3, r1
 8008908:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- LPTIM34 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM34) == (RCC_PERIPHCLK_LPTIM34))
 800890c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8008910:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008914:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8008918:	67bb      	str	r3, [r7, #120]	@ 0x78
 800891a:	2300      	movs	r3, #0
 800891c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800891e:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8008922:	460b      	mov	r3, r1
 8008924:	4313      	orrs	r3, r2
 8008926:	d00c      	beq.n	8008942 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    assert_param(IS_RCC_LPTIM34CLK(pPeriphClkInit->Lptim34ClockSelection));
    __HAL_RCC_LPTIM34_CONFIG(pPeriphClkInit->Lptim34ClockSelection);
 8008928:	4b28      	ldr	r3, [pc, #160]	@ (80089cc <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800892a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800892e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8008932:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8008936:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800893a:	4a24      	ldr	r2, [pc, #144]	@ (80089cc <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800893c:	430b      	orrs	r3, r1
 800893e:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8008942:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8008946:	e9d3 2300 	ldrd	r2, r3, [r3]
 800894a:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800894e:	673b      	str	r3, [r7, #112]	@ 0x70
 8008950:	2300      	movs	r3, #0
 8008952:	677b      	str	r3, [r7, #116]	@ 0x74
 8008954:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8008958:	460b      	mov	r3, r1
 800895a:	4313      	orrs	r3, r2
 800895c:	d04f      	beq.n	80089fe <HAL_RCCEx_PeriphCLKConfig+0x38a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 800895e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8008962:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008966:	2b80      	cmp	r3, #128	@ 0x80
 8008968:	d02d      	beq.n	80089c6 <HAL_RCCEx_PeriphCLKConfig+0x352>
 800896a:	2b80      	cmp	r3, #128	@ 0x80
 800896c:	d827      	bhi.n	80089be <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800896e:	2b60      	cmp	r3, #96	@ 0x60
 8008970:	d02e      	beq.n	80089d0 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8008972:	2b60      	cmp	r3, #96	@ 0x60
 8008974:	d823      	bhi.n	80089be <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8008976:	2b40      	cmp	r3, #64	@ 0x40
 8008978:	d006      	beq.n	8008988 <HAL_RCCEx_PeriphCLKConfig+0x314>
 800897a:	2b40      	cmp	r3, #64	@ 0x40
 800897c:	d81f      	bhi.n	80089be <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800897e:	2b00      	cmp	r3, #0
 8008980:	d009      	beq.n	8008996 <HAL_RCCEx_PeriphCLKConfig+0x322>
 8008982:	2b20      	cmp	r3, #32
 8008984:	d011      	beq.n	80089aa <HAL_RCCEx_PeriphCLKConfig+0x336>
 8008986:	e01a      	b.n	80089be <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      case RCC_SAI1CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8008988:	4b10      	ldr	r3, [pc, #64]	@ (80089cc <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800898a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800898c:	4a0f      	ldr	r2, [pc, #60]	@ (80089cc <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800898e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008992:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 8008994:	e01d      	b.n	80089d2 <HAL_RCCEx_PeriphCLKConfig+0x35e>

      case RCC_SAI1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8008996:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800899a:	3308      	adds	r3, #8
 800899c:	4618      	mov	r0, r3
 800899e:	f002 f9d1 	bl	800ad44 <RCCEx_PLL2_Config>
 80089a2:	4603      	mov	r3, r0
 80089a4:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        /* SAI1 clock source config set later after clock selection check */
        break;
 80089a8:	e013      	b.n	80089d2 <HAL_RCCEx_PeriphCLKConfig+0x35e>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80089aa:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80089ae:	332c      	adds	r3, #44	@ 0x2c
 80089b0:	4618      	mov	r0, r3
 80089b2:	f002 fa5f 	bl	800ae74 <RCCEx_PLL3_Config>
 80089b6:	4603      	mov	r3, r0
 80089b8:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        /* SAI1 clock source config set later after clock selection check */
        break;
 80089bc:	e009      	b.n	80089d2 <HAL_RCCEx_PeriphCLKConfig+0x35e>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80089be:	2301      	movs	r3, #1
 80089c0:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 80089c4:	e005      	b.n	80089d2 <HAL_RCCEx_PeriphCLKConfig+0x35e>
        break;
 80089c6:	bf00      	nop
 80089c8:	e003      	b.n	80089d2 <HAL_RCCEx_PeriphCLKConfig+0x35e>
 80089ca:	bf00      	nop
 80089cc:	46020c00 	.word	0x46020c00
        break;
 80089d0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80089d2:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	d10d      	bne.n	80089f6 <HAL_RCCEx_PeriphCLKConfig+0x382>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 80089da:	4bb6      	ldr	r3, [pc, #728]	@ (8008cb4 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 80089dc:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80089e0:	f023 01e0 	bic.w	r1, r3, #224	@ 0xe0
 80089e4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80089e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80089ec:	4ab1      	ldr	r2, [pc, #708]	@ (8008cb4 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 80089ee:	430b      	orrs	r3, r1
 80089f0:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 80089f4:	e003      	b.n	80089fe <HAL_RCCEx_PeriphCLKConfig+0x38a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80089f6:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 80089fa:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }

#if defined(SAI2)
  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80089fe:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8008a02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a06:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8008a0a:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008a0c:	2300      	movs	r3, #0
 8008a0e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8008a10:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8008a14:	460b      	mov	r3, r1
 8008a16:	4313      	orrs	r3, r2
 8008a18:	d053      	beq.n	8008ac2 <HAL_RCCEx_PeriphCLKConfig+0x44e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 8008a1a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8008a1e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008a22:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008a26:	d033      	beq.n	8008a90 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8008a28:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008a2c:	d82c      	bhi.n	8008a88 <HAL_RCCEx_PeriphCLKConfig+0x414>
 8008a2e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008a32:	d02f      	beq.n	8008a94 <HAL_RCCEx_PeriphCLKConfig+0x420>
 8008a34:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008a38:	d826      	bhi.n	8008a88 <HAL_RCCEx_PeriphCLKConfig+0x414>
 8008a3a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008a3e:	d008      	beq.n	8008a52 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8008a40:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008a44:	d820      	bhi.n	8008a88 <HAL_RCCEx_PeriphCLKConfig+0x414>
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	d00a      	beq.n	8008a60 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 8008a4a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008a4e:	d011      	beq.n	8008a74 <HAL_RCCEx_PeriphCLKConfig+0x400>
 8008a50:	e01a      	b.n	8008a88 <HAL_RCCEx_PeriphCLKConfig+0x414>
    {
      case RCC_SAI2CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8008a52:	4b98      	ldr	r3, [pc, #608]	@ (8008cb4 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8008a54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008a56:	4a97      	ldr	r2, [pc, #604]	@ (8008cb4 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8008a58:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008a5c:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 8008a5e:	e01a      	b.n	8008a96 <HAL_RCCEx_PeriphCLKConfig+0x422>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8008a60:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8008a64:	3308      	adds	r3, #8
 8008a66:	4618      	mov	r0, r3
 8008a68:	f002 f96c 	bl	800ad44 <RCCEx_PLL2_Config>
 8008a6c:	4603      	mov	r3, r0
 8008a6e:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        /* SAI2 clock source config set later after clock selection check */
        break;
 8008a72:	e010      	b.n	8008a96 <HAL_RCCEx_PeriphCLKConfig+0x422>

      case RCC_SAI2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8008a74:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8008a78:	332c      	adds	r3, #44	@ 0x2c
 8008a7a:	4618      	mov	r0, r3
 8008a7c:	f002 f9fa 	bl	800ae74 <RCCEx_PLL3_Config>
 8008a80:	4603      	mov	r3, r0
 8008a82:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        /* SAI2 clock source config set later after clock selection check */
        break;
 8008a86:	e006      	b.n	8008a96 <HAL_RCCEx_PeriphCLKConfig+0x422>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008a88:	2301      	movs	r3, #1
 8008a8a:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8008a8e:	e002      	b.n	8008a96 <HAL_RCCEx_PeriphCLKConfig+0x422>
        break;
 8008a90:	bf00      	nop
 8008a92:	e000      	b.n	8008a96 <HAL_RCCEx_PeriphCLKConfig+0x422>
        break;
 8008a94:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008a96:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	d10d      	bne.n	8008aba <HAL_RCCEx_PeriphCLKConfig+0x446>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 8008a9e:	4b85      	ldr	r3, [pc, #532]	@ (8008cb4 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8008aa0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8008aa4:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 8008aa8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8008aac:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008ab0:	4a80      	ldr	r2, [pc, #512]	@ (8008cb4 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8008ab2:	430b      	orrs	r3, r1
 8008ab4:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8008ab8:	e003      	b.n	8008ac2 <HAL_RCCEx_PeriphCLKConfig+0x44e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008aba:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8008abe:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }
#endif /* SAI2 */

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 8008ac2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8008ac6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008aca:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8008ace:	663b      	str	r3, [r7, #96]	@ 0x60
 8008ad0:	2300      	movs	r3, #0
 8008ad2:	667b      	str	r3, [r7, #100]	@ 0x64
 8008ad4:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8008ad8:	460b      	mov	r3, r1
 8008ada:	4313      	orrs	r3, r2
 8008adc:	d046      	beq.n	8008b6c <HAL_RCCEx_PeriphCLKConfig+0x4f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 8008ade:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8008ae2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8008ae6:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8008aea:	d028      	beq.n	8008b3e <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8008aec:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8008af0:	d821      	bhi.n	8008b36 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 8008af2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008af6:	d022      	beq.n	8008b3e <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8008af8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008afc:	d81b      	bhi.n	8008b36 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 8008afe:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8008b02:	d01c      	beq.n	8008b3e <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8008b04:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8008b08:	d815      	bhi.n	8008b36 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 8008b0a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008b0e:	d008      	beq.n	8008b22 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 8008b10:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008b14:	d80f      	bhi.n	8008b36 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	d011      	beq.n	8008b3e <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8008b1a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008b1e:	d00e      	beq.n	8008b3e <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8008b20:	e009      	b.n	8008b36 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
    {
      case RCC_ADCDACCLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P, & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8008b22:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8008b26:	3308      	adds	r3, #8
 8008b28:	4618      	mov	r0, r3
 8008b2a:	f002 f90b 	bl	800ad44 <RCCEx_PLL2_Config>
 8008b2e:	4603      	mov	r3, r0
 8008b30:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8008b34:	e004      	b.n	8008b40 <HAL_RCCEx_PeriphCLKConfig+0x4cc>
      case RCC_ADCDACCLKSOURCE_HSE:
      case RCC_ADCDACCLKSOURCE_HSI:
      case RCC_ADCDACCLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8008b36:	2301      	movs	r3, #1
 8008b38:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8008b3c:	e000      	b.n	8008b40 <HAL_RCCEx_PeriphCLKConfig+0x4cc>
        break;
 8008b3e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008b40:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	d10d      	bne.n	8008b64 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Configure the ADC1 interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 8008b48:	4b5a      	ldr	r3, [pc, #360]	@ (8008cb4 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8008b4a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008b4e:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8008b52:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8008b56:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8008b5a:	4a56      	ldr	r2, [pc, #344]	@ (8008cb4 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8008b5c:	430b      	orrs	r3, r1
 8008b5e:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8008b62:	e003      	b.n	8008b6c <HAL_RCCEx_PeriphCLKConfig+0x4f8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008b64:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8008b68:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }

  /*-------------------------- MDF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_MDF1) == RCC_PERIPHCLK_MDF1)
 8008b6c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8008b70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b74:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8008b78:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008b7a:	2300      	movs	r3, #0
 8008b7c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008b7e:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8008b82:	460b      	mov	r3, r1
 8008b84:	4313      	orrs	r3, r2
 8008b86:	d03f      	beq.n	8008c08 <HAL_RCCEx_PeriphCLKConfig+0x594>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MDF1CLKSOURCE(pPeriphClkInit->Mdf1ClockSelection));

    switch (pPeriphClkInit->Mdf1ClockSelection)
 8008b88:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8008b8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008b90:	2b04      	cmp	r3, #4
 8008b92:	d81e      	bhi.n	8008bd2 <HAL_RCCEx_PeriphCLKConfig+0x55e>
 8008b94:	a201      	add	r2, pc, #4	@ (adr r2, 8008b9c <HAL_RCCEx_PeriphCLKConfig+0x528>)
 8008b96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b9a:	bf00      	nop
 8008b9c:	08008bdb 	.word	0x08008bdb
 8008ba0:	08008bb1 	.word	0x08008bb1
 8008ba4:	08008bbf 	.word	0x08008bbf
 8008ba8:	08008bdb 	.word	0x08008bdb
 8008bac:	08008bdb 	.word	0x08008bdb
    {
      case RCC_MDF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8008bb0:	4b40      	ldr	r3, [pc, #256]	@ (8008cb4 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8008bb2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008bb4:	4a3f      	ldr	r2, [pc, #252]	@ (8008cb4 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8008bb6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008bba:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 8008bbc:	e00e      	b.n	8008bdc <HAL_RCCEx_PeriphCLKConfig+0x568>
      case RCC_MDF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8008bbe:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8008bc2:	332c      	adds	r3, #44	@ 0x2c
 8008bc4:	4618      	mov	r0, r3
 8008bc6:	f002 f955 	bl	800ae74 <RCCEx_PLL3_Config>
 8008bca:	4603      	mov	r3, r0
 8008bcc:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8008bd0:	e004      	b.n	8008bdc <HAL_RCCEx_PeriphCLKConfig+0x568>
      case RCC_MDF1CLKSOURCE_PIN:
        break;
      case RCC_MDF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8008bd2:	2301      	movs	r3, #1
 8008bd4:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8008bd8:	e000      	b.n	8008bdc <HAL_RCCEx_PeriphCLKConfig+0x568>
        break;
 8008bda:	bf00      	nop
    }
    if (ret == HAL_OK)
 8008bdc:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	d10d      	bne.n	8008c00 <HAL_RCCEx_PeriphCLKConfig+0x58c>
    {
      /* Configure the MDF1 interface clock source */
      __HAL_RCC_MDF1_CONFIG(pPeriphClkInit->Mdf1ClockSelection);
 8008be4:	4b33      	ldr	r3, [pc, #204]	@ (8008cb4 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8008be6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8008bea:	f023 0107 	bic.w	r1, r3, #7
 8008bee:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8008bf2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008bf6:	4a2f      	ldr	r2, [pc, #188]	@ (8008cb4 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8008bf8:	430b      	orrs	r3, r1
 8008bfa:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8008bfe:	e003      	b.n	8008c08 <HAL_RCCEx_PeriphCLKConfig+0x594>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008c00:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8008c04:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }

  /*-------------------------- ADF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
 8008c08:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8008c0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c10:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8008c14:	653b      	str	r3, [r7, #80]	@ 0x50
 8008c16:	2300      	movs	r3, #0
 8008c18:	657b      	str	r3, [r7, #84]	@ 0x54
 8008c1a:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8008c1e:	460b      	mov	r3, r1
 8008c20:	4313      	orrs	r3, r2
 8008c22:	d04d      	beq.n	8008cc0 <HAL_RCCEx_PeriphCLKConfig+0x64c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADF1CLKSOURCE(pPeriphClkInit->Adf1ClockSelection));
    switch (pPeriphClkInit->Adf1ClockSelection)
 8008c24:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8008c28:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008c2c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008c30:	d028      	beq.n	8008c84 <HAL_RCCEx_PeriphCLKConfig+0x610>
 8008c32:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008c36:	d821      	bhi.n	8008c7c <HAL_RCCEx_PeriphCLKConfig+0x608>
 8008c38:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8008c3c:	d024      	beq.n	8008c88 <HAL_RCCEx_PeriphCLKConfig+0x614>
 8008c3e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8008c42:	d81b      	bhi.n	8008c7c <HAL_RCCEx_PeriphCLKConfig+0x608>
 8008c44:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008c48:	d00e      	beq.n	8008c68 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
 8008c4a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008c4e:	d815      	bhi.n	8008c7c <HAL_RCCEx_PeriphCLKConfig+0x608>
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	d01b      	beq.n	8008c8c <HAL_RCCEx_PeriphCLKConfig+0x618>
 8008c54:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008c58:	d110      	bne.n	8008c7c <HAL_RCCEx_PeriphCLKConfig+0x608>
    {
      case RCC_ADF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8008c5a:	4b16      	ldr	r3, [pc, #88]	@ (8008cb4 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8008c5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008c5e:	4a15      	ldr	r2, [pc, #84]	@ (8008cb4 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8008c60:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008c64:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 8008c66:	e012      	b.n	8008c8e <HAL_RCCEx_PeriphCLKConfig+0x61a>
      case RCC_ADF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8008c68:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8008c6c:	332c      	adds	r3, #44	@ 0x2c
 8008c6e:	4618      	mov	r0, r3
 8008c70:	f002 f900 	bl	800ae74 <RCCEx_PLL3_Config>
 8008c74:	4603      	mov	r3, r0
 8008c76:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8008c7a:	e008      	b.n	8008c8e <HAL_RCCEx_PeriphCLKConfig+0x61a>
      case RCC_ADF1CLKSOURCE_PIN:
        break;
      case RCC_ADF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8008c7c:	2301      	movs	r3, #1
 8008c7e:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8008c82:	e004      	b.n	8008c8e <HAL_RCCEx_PeriphCLKConfig+0x61a>
        break;
 8008c84:	bf00      	nop
 8008c86:	e002      	b.n	8008c8e <HAL_RCCEx_PeriphCLKConfig+0x61a>
        break;
 8008c88:	bf00      	nop
 8008c8a:	e000      	b.n	8008c8e <HAL_RCCEx_PeriphCLKConfig+0x61a>
        break;
 8008c8c:	bf00      	nop
    }
    if (ret == HAL_OK)
 8008c8e:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	d110      	bne.n	8008cb8 <HAL_RCCEx_PeriphCLKConfig+0x644>
    {
      /* Configure the ADF1 interface clock source */
      __HAL_RCC_ADF1_CONFIG(pPeriphClkInit->Adf1ClockSelection);
 8008c96:	4b07      	ldr	r3, [pc, #28]	@ (8008cb4 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8008c98:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008c9c:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8008ca0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8008ca4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008ca8:	4a02      	ldr	r2, [pc, #8]	@ (8008cb4 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8008caa:	430b      	orrs	r3, r1
 8008cac:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8008cb0:	e006      	b.n	8008cc0 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8008cb2:	bf00      	nop
 8008cb4:	46020c00 	.word	0x46020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008cb8:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8008cbc:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((pPeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008cc0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8008cc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cc8:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8008ccc:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008cce:	2300      	movs	r3, #0
 8008cd0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008cd2:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8008cd6:	460b      	mov	r3, r1
 8008cd8:	4313      	orrs	r3, r2
 8008cda:	f000 80b5 	beq.w	8008e48 <HAL_RCCEx_PeriphCLKConfig+0x7d4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008cde:	2300      	movs	r3, #0
 8008ce0:	f887 30d9 	strb.w	r3, [r7, #217]	@ 0xd9
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));
    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008ce4:	4b9d      	ldr	r3, [pc, #628]	@ (8008f5c <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8008ce6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008cea:	f003 0304 	and.w	r3, r3, #4
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	d113      	bne.n	8008d1a <HAL_RCCEx_PeriphCLKConfig+0x6a6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008cf2:	4b9a      	ldr	r3, [pc, #616]	@ (8008f5c <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8008cf4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008cf8:	4a98      	ldr	r2, [pc, #608]	@ (8008f5c <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8008cfa:	f043 0304 	orr.w	r3, r3, #4
 8008cfe:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8008d02:	4b96      	ldr	r3, [pc, #600]	@ (8008f5c <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8008d04:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008d08:	f003 0304 	and.w	r3, r3, #4
 8008d0c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008d10:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
      pwrclkchanged = SET;
 8008d14:	2301      	movs	r3, #1
 8008d16:	f887 30d9 	strb.w	r3, [r7, #217]	@ 0xd9
    }
    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8008d1a:	4b91      	ldr	r3, [pc, #580]	@ (8008f60 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8008d1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008d1e:	4a90      	ldr	r2, [pc, #576]	@ (8008f60 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8008d20:	f043 0301 	orr.w	r3, r3, #1
 8008d24:	6293      	str	r3, [r2, #40]	@ 0x28

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008d26:	f7fc f801 	bl	8004d2c <HAL_GetTick>
 8008d2a:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4

    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8008d2e:	e00b      	b.n	8008d48 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008d30:	f7fb fffc 	bl	8004d2c <HAL_GetTick>
 8008d34:	4602      	mov	r2, r0
 8008d36:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8008d3a:	1ad3      	subs	r3, r2, r3
 8008d3c:	2b02      	cmp	r3, #2
 8008d3e:	d903      	bls.n	8008d48 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
      {
        ret = HAL_TIMEOUT;
 8008d40:	2303      	movs	r3, #3
 8008d42:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8008d46:	e005      	b.n	8008d54 <HAL_RCCEx_PeriphCLKConfig+0x6e0>
    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8008d48:	4b85      	ldr	r3, [pc, #532]	@ (8008f60 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8008d4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008d4c:	f003 0301 	and.w	r3, r3, #1
 8008d50:	2b00      	cmp	r3, #0
 8008d52:	d0ed      	beq.n	8008d30 <HAL_RCCEx_PeriphCLKConfig+0x6bc>
      }
    }

    if (ret == HAL_OK)
 8008d54:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8008d58:	2b00      	cmp	r3, #0
 8008d5a:	d165      	bne.n	8008e28 <HAL_RCCEx_PeriphCLKConfig+0x7b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8008d5c:	4b7f      	ldr	r3, [pc, #508]	@ (8008f5c <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8008d5e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008d62:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008d66:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 8008d6a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	d023      	beq.n	8008dba <HAL_RCCEx_PeriphCLKConfig+0x746>
 8008d72:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8008d76:	f8d3 20bc 	ldr.w	r2, [r3, #188]	@ 0xbc
 8008d7a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008d7e:	4293      	cmp	r3, r2
 8008d80:	d01b      	beq.n	8008dba <HAL_RCCEx_PeriphCLKConfig+0x746>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8008d82:	4b76      	ldr	r3, [pc, #472]	@ (8008f5c <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8008d84:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008d88:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008d8c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8008d90:	4b72      	ldr	r3, [pc, #456]	@ (8008f5c <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8008d92:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008d96:	4a71      	ldr	r2, [pc, #452]	@ (8008f5c <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8008d98:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008d9c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 8008da0:	4b6e      	ldr	r3, [pc, #440]	@ (8008f5c <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8008da2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008da6:	4a6d      	ldr	r2, [pc, #436]	@ (8008f5c <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8008da8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008dac:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8008db0:	4a6a      	ldr	r2, [pc, #424]	@ (8008f5c <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8008db2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008db6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8008dba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008dbe:	f003 0301 	and.w	r3, r3, #1
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	d019      	beq.n	8008dfa <HAL_RCCEx_PeriphCLKConfig+0x786>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008dc6:	f7fb ffb1 	bl	8004d2c <HAL_GetTick>
 8008dca:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008dce:	e00d      	b.n	8008dec <HAL_RCCEx_PeriphCLKConfig+0x778>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008dd0:	f7fb ffac 	bl	8004d2c <HAL_GetTick>
 8008dd4:	4602      	mov	r2, r0
 8008dd6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8008dda:	1ad2      	subs	r2, r2, r3
 8008ddc:	f241 3388 	movw	r3, #5000	@ 0x1388
 8008de0:	429a      	cmp	r2, r3
 8008de2:	d903      	bls.n	8008dec <HAL_RCCEx_PeriphCLKConfig+0x778>
          {
            ret = HAL_TIMEOUT;
 8008de4:	2303      	movs	r3, #3
 8008de6:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
            break;
 8008dea:	e006      	b.n	8008dfa <HAL_RCCEx_PeriphCLKConfig+0x786>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008dec:	4b5b      	ldr	r3, [pc, #364]	@ (8008f5c <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8008dee:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008df2:	f003 0302 	and.w	r3, r3, #2
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	d0ea      	beq.n	8008dd0 <HAL_RCCEx_PeriphCLKConfig+0x75c>
          }
        }
      }

      if (ret == HAL_OK)
 8008dfa:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	d10d      	bne.n	8008e1e <HAL_RCCEx_PeriphCLKConfig+0x7aa>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 8008e02:	4b56      	ldr	r3, [pc, #344]	@ (8008f5c <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8008e04:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008e08:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8008e0c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8008e10:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8008e14:	4a51      	ldr	r2, [pc, #324]	@ (8008f5c <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8008e16:	430b      	orrs	r3, r1
 8008e18:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8008e1c:	e008      	b.n	8008e30 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8008e1e:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8008e22:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
 8008e26:	e003      	b.n	8008e30 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008e28:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8008e2c:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8008e30:	f897 30d9 	ldrb.w	r3, [r7, #217]	@ 0xd9
 8008e34:	2b01      	cmp	r3, #1
 8008e36:	d107      	bne.n	8008e48 <HAL_RCCEx_PeriphCLKConfig+0x7d4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008e38:	4b48      	ldr	r3, [pc, #288]	@ (8008f5c <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8008e3a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008e3e:	4a47      	ldr	r2, [pc, #284]	@ (8008f5c <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8008e40:	f023 0304 	bic.w	r3, r3, #4
 8008e44:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }

  /*-------------------------------------- ICLK Configuration -----------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ICLK) == RCC_PERIPHCLK_ICLK)
 8008e48:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8008e4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e50:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8008e54:	643b      	str	r3, [r7, #64]	@ 0x40
 8008e56:	2300      	movs	r3, #0
 8008e58:	647b      	str	r3, [r7, #68]	@ 0x44
 8008e5a:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8008e5e:	460b      	mov	r3, r1
 8008e60:	4313      	orrs	r3, r2
 8008e62:	d042      	beq.n	8008eea <HAL_RCCEx_PeriphCLKConfig+0x876>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ICLKCLKSOURCE(pPeriphClkInit->IclkClockSelection));

    switch (pPeriphClkInit->IclkClockSelection)
 8008e64:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8008e68:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008e6c:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8008e70:	d022      	beq.n	8008eb8 <HAL_RCCEx_PeriphCLKConfig+0x844>
 8008e72:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8008e76:	d81b      	bhi.n	8008eb0 <HAL_RCCEx_PeriphCLKConfig+0x83c>
 8008e78:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008e7c:	d011      	beq.n	8008ea2 <HAL_RCCEx_PeriphCLKConfig+0x82e>
 8008e7e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008e82:	d815      	bhi.n	8008eb0 <HAL_RCCEx_PeriphCLKConfig+0x83c>
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	d019      	beq.n	8008ebc <HAL_RCCEx_PeriphCLKConfig+0x848>
 8008e88:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008e8c:	d110      	bne.n	8008eb0 <HAL_RCCEx_PeriphCLKConfig+0x83c>
    {
      case RCC_ICLK_CLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P,Q & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8008e8e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8008e92:	3308      	adds	r3, #8
 8008e94:	4618      	mov	r0, r3
 8008e96:	f001 ff55 	bl	800ad44 <RCCEx_PLL2_Config>
 8008e9a:	4603      	mov	r3, r0
 8008e9c:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8008ea0:	e00d      	b.n	8008ebe <HAL_RCCEx_PeriphCLKConfig+0x84a>
      case RCC_ICLK_CLKSOURCE_PLL1:
        /* Enable ICLK Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008ea2:	4b2e      	ldr	r3, [pc, #184]	@ (8008f5c <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8008ea4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008ea6:	4a2d      	ldr	r2, [pc, #180]	@ (8008f5c <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8008ea8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008eac:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 8008eae:	e006      	b.n	8008ebe <HAL_RCCEx_PeriphCLKConfig+0x84a>
      case RCC_ICLK_CLKSOURCE_HSI48:
        break;
      case RCC_ICLK_CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8008eb0:	2301      	movs	r3, #1
 8008eb2:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8008eb6:	e002      	b.n	8008ebe <HAL_RCCEx_PeriphCLKConfig+0x84a>
        break;
 8008eb8:	bf00      	nop
 8008eba:	e000      	b.n	8008ebe <HAL_RCCEx_PeriphCLKConfig+0x84a>
        break;
 8008ebc:	bf00      	nop
    }
    if (ret == HAL_OK)
 8008ebe:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	d10d      	bne.n	8008ee2 <HAL_RCCEx_PeriphCLKConfig+0x86e>
    {
      /* Configure the CLK48 source */
      __HAL_RCC_CLK48_CONFIG(pPeriphClkInit->IclkClockSelection);
 8008ec6:	4b25      	ldr	r3, [pc, #148]	@ (8008f5c <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8008ec8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008ecc:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8008ed0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8008ed4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008ed8:	4a20      	ldr	r2, [pc, #128]	@ (8008f5c <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8008eda:	430b      	orrs	r3, r1
 8008edc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8008ee0:	e003      	b.n	8008eea <HAL_RCCEx_PeriphCLKConfig+0x876>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008ee2:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8008ee6:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8008eea:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8008eee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ef2:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8008ef6:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008ef8:	2300      	movs	r3, #0
 8008efa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008efc:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8008f00:	460b      	mov	r3, r1
 8008f02:	4313      	orrs	r3, r2
 8008f04:	d032      	beq.n	8008f6c <HAL_RCCEx_PeriphCLKConfig+0x8f8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 8008f06:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8008f0a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008f0e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008f12:	d00b      	beq.n	8008f2c <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 8008f14:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008f18:	d804      	bhi.n	8008f24 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
 8008f1a:	2b00      	cmp	r3, #0
 8008f1c:	d008      	beq.n	8008f30 <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 8008f1e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008f22:	d007      	beq.n	8008f34 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      case RCC_RNGCLKSOURCE_HSI48:
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;
      default:
        ret = HAL_ERROR;
 8008f24:	2301      	movs	r3, #1
 8008f26:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8008f2a:	e004      	b.n	8008f36 <HAL_RCCEx_PeriphCLKConfig+0x8c2>
        break;
 8008f2c:	bf00      	nop
 8008f2e:	e002      	b.n	8008f36 <HAL_RCCEx_PeriphCLKConfig+0x8c2>
        break;
 8008f30:	bf00      	nop
 8008f32:	e000      	b.n	8008f36 <HAL_RCCEx_PeriphCLKConfig+0x8c2>
        break;
 8008f34:	bf00      	nop
    }
    if (ret == HAL_OK)
 8008f36:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	d112      	bne.n	8008f64 <HAL_RCCEx_PeriphCLKConfig+0x8f0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 8008f3e:	4b07      	ldr	r3, [pc, #28]	@ (8008f5c <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8008f40:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8008f44:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8008f48:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8008f4c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008f50:	4a02      	ldr	r2, [pc, #8]	@ (8008f5c <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8008f52:	430b      	orrs	r3, r1
 8008f54:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8008f58:	e008      	b.n	8008f6c <HAL_RCCEx_PeriphCLKConfig+0x8f8>
 8008f5a:	bf00      	nop
 8008f5c:	46020c00 	.word	0x46020c00
 8008f60:	46020800 	.word	0x46020800
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008f64:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8008f68:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    __HAL_RCC_SAES_CONFIG(pPeriphClkInit->SaesClockSelection);
  }
#endif /* SAES */

  /*-------------------------- SDMMC1/2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == (RCC_PERIPHCLK_SDMMC))
 8008f6c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8008f70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f74:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8008f78:	633b      	str	r3, [r7, #48]	@ 0x30
 8008f7a:	2300      	movs	r3, #0
 8008f7c:	637b      	str	r3, [r7, #52]	@ 0x34
 8008f7e:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8008f82:	460b      	mov	r3, r1
 8008f84:	4313      	orrs	r3, r2
 8008f86:	d019      	beq.n	8008fbc <HAL_RCCEx_PeriphCLKConfig+0x948>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMCCLKSOURCE(pPeriphClkInit->SdmmcClockSelection));

    if (pPeriphClkInit->SdmmcClockSelection == RCC_SDMMCCLKSOURCE_PLL1)
 8008f88:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8008f8c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8008f90:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008f94:	d105      	bne.n	8008fa2 <HAL_RCCEx_PeriphCLKConfig+0x92e>
    {
      /* Enable PLL1 P CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8008f96:	4b88      	ldr	r3, [pc, #544]	@ (80091b8 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8008f98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008f9a:	4a87      	ldr	r2, [pc, #540]	@ (80091b8 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8008f9c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008fa0:	6293      	str	r3, [r2, #40]	@ 0x28
    }

    /* Configure the SDMMC1/2 clock source */
    __HAL_RCC_SDMMC_CONFIG(pPeriphClkInit->SdmmcClockSelection);
 8008fa2:	4b85      	ldr	r3, [pc, #532]	@ (80091b8 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8008fa4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8008fa8:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8008fac:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8008fb0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8008fb4:	4a80      	ldr	r2, [pc, #512]	@ (80091b8 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8008fb6:	430b      	orrs	r3, r1
 8008fb8:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 8008fbc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8008fc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fc4:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8008fc8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008fca:	2300      	movs	r3, #0
 8008fcc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008fce:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8008fd2:	460b      	mov	r3, r1
 8008fd4:	4313      	orrs	r3, r2
 8008fd6:	d00c      	beq.n	8008ff2 <HAL_RCCEx_PeriphCLKConfig+0x97e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    /* Configure the SPI1 clock source */
    __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 8008fd8:	4b77      	ldr	r3, [pc, #476]	@ (80091b8 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8008fda:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008fde:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8008fe2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8008fe6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8008fea:	4973      	ldr	r1, [pc, #460]	@ (80091b8 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8008fec:	4313      	orrs	r3, r2
 8008fee:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 8008ff2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8008ff6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ffa:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8008ffe:	623b      	str	r3, [r7, #32]
 8009000:	2300      	movs	r3, #0
 8009002:	627b      	str	r3, [r7, #36]	@ 0x24
 8009004:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8009008:	460b      	mov	r3, r1
 800900a:	4313      	orrs	r3, r2
 800900c:	d00c      	beq.n	8009028 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    /* Configure the SPI2 clock source */
    __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 800900e:	4b6a      	ldr	r3, [pc, #424]	@ (80091b8 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8009010:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009014:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8009018:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800901c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8009020:	4965      	ldr	r1, [pc, #404]	@ (80091b8 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8009022:	4313      	orrs	r3, r2
 8009024:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 8009028:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800902c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009030:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8009034:	61bb      	str	r3, [r7, #24]
 8009036:	2300      	movs	r3, #0
 8009038:	61fb      	str	r3, [r7, #28]
 800903a:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800903e:	460b      	mov	r3, r1
 8009040:	4313      	orrs	r3, r2
 8009042:	d00c      	beq.n	800905e <HAL_RCCEx_PeriphCLKConfig+0x9ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    /* Configure the SPI3 clock source */
    __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 8009044:	4b5c      	ldr	r3, [pc, #368]	@ (80091b8 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8009046:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800904a:	f023 0218 	bic.w	r2, r3, #24
 800904e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8009052:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8009056:	4958      	ldr	r1, [pc, #352]	@ (80091b8 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8009058:	4313      	orrs	r3, r2
 800905a:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800905e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8009062:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009066:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 800906a:	613b      	str	r3, [r7, #16]
 800906c:	2300      	movs	r3, #0
 800906e:	617b      	str	r3, [r7, #20]
 8009070:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8009074:	460b      	mov	r3, r1
 8009076:	4313      	orrs	r3, r2
 8009078:	d032      	beq.n	80090e0 <HAL_RCCEx_PeriphCLKConfig+0xa6c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL1)
 800907a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800907e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8009082:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009086:	d105      	bne.n	8009094 <HAL_RCCEx_PeriphCLKConfig+0xa20>
    {
      /* Enable PLL1 Q CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009088:	4b4b      	ldr	r3, [pc, #300]	@ (80091b8 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 800908a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800908c:	4a4a      	ldr	r2, [pc, #296]	@ (80091b8 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 800908e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009092:	6293      	str	r3, [r2, #40]	@ 0x28
    }
    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL2)
 8009094:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8009098:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800909c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80090a0:	d108      	bne.n	80090b4 <HAL_RCCEx_PeriphCLKConfig+0xa40>
    {
      /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
      ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80090a2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80090a6:	3308      	adds	r3, #8
 80090a8:	4618      	mov	r0, r3
 80090aa:	f001 fe4b 	bl	800ad44 <RCCEx_PLL2_Config>
 80090ae:	4603      	mov	r3, r0
 80090b0:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
    }
    if (ret == HAL_OK)
 80090b4:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	d10d      	bne.n	80090d8 <HAL_RCCEx_PeriphCLKConfig+0xa64>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 80090bc:	4b3e      	ldr	r3, [pc, #248]	@ (80091b8 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 80090be:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80090c2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80090c6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80090ca:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80090ce:	493a      	ldr	r1, [pc, #232]	@ (80091b8 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 80090d0:	4313      	orrs	r3, r2
 80090d2:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 80090d6:	e003      	b.n	80090e0 <HAL_RCCEx_PeriphCLKConfig+0xa6c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80090d8:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 80090dc:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }
#endif /* defined(HSPI1) */

  /*-------------------------- FDCAN1 kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN1) == (RCC_PERIPHCLK_FDCAN1))
 80090e0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80090e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090e8:	f002 6300 	and.w	r3, r2, #134217728	@ 0x8000000
 80090ec:	60bb      	str	r3, [r7, #8]
 80090ee:	2300      	movs	r3, #0
 80090f0:	60fb      	str	r3, [r7, #12]
 80090f2:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80090f6:	460b      	mov	r3, r1
 80090f8:	4313      	orrs	r3, r2
 80090fa:	d03a      	beq.n	8009172 <HAL_RCCEx_PeriphCLKConfig+0xafe>
  {
    assert_param(IS_RCC_FDCAN1CLK(pPeriphClkInit->Fdcan1ClockSelection));

    switch (pPeriphClkInit->Fdcan1ClockSelection)
 80090fc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8009100:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009104:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009108:	d00e      	beq.n	8009128 <HAL_RCCEx_PeriphCLKConfig+0xab4>
 800910a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800910e:	d815      	bhi.n	800913c <HAL_RCCEx_PeriphCLKConfig+0xac8>
 8009110:	2b00      	cmp	r3, #0
 8009112:	d017      	beq.n	8009144 <HAL_RCCEx_PeriphCLKConfig+0xad0>
 8009114:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009118:	d110      	bne.n	800913c <HAL_RCCEx_PeriphCLKConfig+0xac8>
      case RCC_FDCAN1CLKSOURCE_HSE:      /* HSE is used as source of FDCAN1 kernel clock*/
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
      case RCC_FDCAN1CLKSOURCE_PLL1:      /* PLL1 is used as clock source for FDCAN1 kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800911a:	4b27      	ldr	r3, [pc, #156]	@ (80091b8 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 800911c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800911e:	4a26      	ldr	r2, [pc, #152]	@ (80091b8 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8009120:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009124:	6293      	str	r3, [r2, #40]	@ 0x28
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 8009126:	e00e      	b.n	8009146 <HAL_RCCEx_PeriphCLKConfig+0xad2>
      case RCC_FDCAN1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for FDCAN1 kernel clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8009128:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800912c:	3308      	adds	r3, #8
 800912e:	4618      	mov	r0, r3
 8009130:	f001 fe08 	bl	800ad44 <RCCEx_PLL2_Config>
 8009134:	4603      	mov	r3, r0
 8009136:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 800913a:	e004      	b.n	8009146 <HAL_RCCEx_PeriphCLKConfig+0xad2>
      default:
        ret = HAL_ERROR;
 800913c:	2301      	movs	r3, #1
 800913e:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8009142:	e000      	b.n	8009146 <HAL_RCCEx_PeriphCLKConfig+0xad2>
        break;
 8009144:	bf00      	nop
    }
    if (ret == HAL_OK)
 8009146:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 800914a:	2b00      	cmp	r3, #0
 800914c:	d10d      	bne.n	800916a <HAL_RCCEx_PeriphCLKConfig+0xaf6>
    {
      /* Set the source of FDCAN1 kernel clock*/
      __HAL_RCC_FDCAN1_CONFIG(pPeriphClkInit->Fdcan1ClockSelection);
 800914e:	4b1a      	ldr	r3, [pc, #104]	@ (80091b8 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8009150:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009154:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8009158:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800915c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009160:	4915      	ldr	r1, [pc, #84]	@ (80091b8 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8009162:	4313      	orrs	r3, r2
 8009164:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 8009168:	e003      	b.n	8009172 <HAL_RCCEx_PeriphCLKConfig+0xafe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800916a:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 800916e:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }

  /*-------------------------- DAC1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC1) == RCC_PERIPHCLK_DAC1)
 8009172:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8009176:	e9d3 2300 	ldrd	r2, r3, [r3]
 800917a:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 800917e:	603b      	str	r3, [r7, #0]
 8009180:	2300      	movs	r3, #0
 8009182:	607b      	str	r3, [r7, #4]
 8009184:	e9d7 1200 	ldrd	r1, r2, [r7]
 8009188:	460b      	mov	r3, r1
 800918a:	4313      	orrs	r3, r2
 800918c:	d00c      	beq.n	80091a8 <HAL_RCCEx_PeriphCLKConfig+0xb34>

    /* Check the parameters */
    assert_param(IS_RCC_DAC1CLKSOURCE(pPeriphClkInit->Dac1ClockSelection));

    /* Configure the DAC1 clock source */
    __HAL_RCC_DAC1_CONFIG(pPeriphClkInit->Dac1ClockSelection);
 800918e:	4b0a      	ldr	r3, [pc, #40]	@ (80091b8 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8009190:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009194:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8009198:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800919c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80091a0:	4905      	ldr	r1, [pc, #20]	@ (80091b8 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 80091a2:	4313      	orrs	r3, r2
 80091a4:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
    }
  }

#endif /* defined(USB_OTG_HS) */

  return status;
 80091a8:	f897 30da 	ldrb.w	r3, [r7, #218]	@ 0xda
}
 80091ac:	4618      	mov	r0, r3
 80091ae:	37e0      	adds	r7, #224	@ 0xe0
 80091b0:	46bd      	mov	sp, r7
 80091b2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80091b6:	bf00      	nop
 80091b8:	46020c00 	.word	0x46020c00

080091bc <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 80091bc:	b480      	push	{r7}
 80091be:	b089      	sub	sp, #36	@ 0x24
 80091c0:	af00      	add	r7, sp, #0
 80091c2:	6078      	str	r0, [r7, #4]
  uint32_t pll1n;
  uint32_t pll1fracen;
  float_t fracn1;
  float_t pll1vco;

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 80091c4:	4ba6      	ldr	r3, [pc, #664]	@ (8009460 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80091c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80091c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80091cc:	61bb      	str	r3, [r7, #24]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 80091ce:	4ba4      	ldr	r3, [pc, #656]	@ (8009460 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80091d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80091d2:	f003 0303 	and.w	r3, r3, #3
 80091d6:	617b      	str	r3, [r7, #20]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 80091d8:	4ba1      	ldr	r3, [pc, #644]	@ (8009460 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80091da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80091dc:	0a1b      	lsrs	r3, r3, #8
 80091de:	f003 030f 	and.w	r3, r3, #15
 80091e2:	3301      	adds	r3, #1
 80091e4:	613b      	str	r3, [r7, #16]
  pll1fracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 80091e6:	4b9e      	ldr	r3, [pc, #632]	@ (8009460 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80091e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80091ea:	091b      	lsrs	r3, r3, #4
 80091ec:	f003 0301 	and.w	r3, r3, #1
 80091f0:	60fb      	str	r3, [r7, #12]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 80091f2:	4b9b      	ldr	r3, [pc, #620]	@ (8009460 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80091f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80091f6:	08db      	lsrs	r3, r3, #3
 80091f8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80091fc:	68fa      	ldr	r2, [r7, #12]
 80091fe:	fb02 f303 	mul.w	r3, r2, r3
 8009202:	ee07 3a90 	vmov	s15, r3
 8009206:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800920a:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  switch (pll1source)
 800920e:	697b      	ldr	r3, [r7, #20]
 8009210:	2b03      	cmp	r3, #3
 8009212:	d062      	beq.n	80092da <HAL_RCCEx_GetPLL1ClockFreq+0x11e>
 8009214:	697b      	ldr	r3, [r7, #20]
 8009216:	2b03      	cmp	r3, #3
 8009218:	f200 8081 	bhi.w	800931e <HAL_RCCEx_GetPLL1ClockFreq+0x162>
 800921c:	697b      	ldr	r3, [r7, #20]
 800921e:	2b01      	cmp	r3, #1
 8009220:	d024      	beq.n	800926c <HAL_RCCEx_GetPLL1ClockFreq+0xb0>
 8009222:	697b      	ldr	r3, [r7, #20]
 8009224:	2b02      	cmp	r3, #2
 8009226:	d17a      	bne.n	800931e <HAL_RCCEx_GetPLL1ClockFreq+0x162>
  {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8009228:	693b      	ldr	r3, [r7, #16]
 800922a:	ee07 3a90 	vmov	s15, r3
 800922e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009232:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 8009464 <HAL_RCCEx_GetPLL1ClockFreq+0x2a8>
 8009236:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800923a:	4b89      	ldr	r3, [pc, #548]	@ (8009460 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800923c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800923e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009242:	ee07 3a90 	vmov	s15, r3
 8009246:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 800924a:	ed97 6a02 	vldr	s12, [r7, #8]
 800924e:	eddf 5a86 	vldr	s11, [pc, #536]	@ 8009468 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 8009252:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8009256:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 800925a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800925e:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8009262:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009266:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800926a:	e08f      	b.n	800938c <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 800926c:	4b7c      	ldr	r3, [pc, #496]	@ (8009460 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800926e:	689b      	ldr	r3, [r3, #8]
 8009270:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009274:	2b00      	cmp	r3, #0
 8009276:	d005      	beq.n	8009284 <HAL_RCCEx_GetPLL1ClockFreq+0xc8>
 8009278:	4b79      	ldr	r3, [pc, #484]	@ (8009460 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800927a:	689b      	ldr	r3, [r3, #8]
 800927c:	0f1b      	lsrs	r3, r3, #28
 800927e:	f003 030f 	and.w	r3, r3, #15
 8009282:	e006      	b.n	8009292 <HAL_RCCEx_GetPLL1ClockFreq+0xd6>
 8009284:	4b76      	ldr	r3, [pc, #472]	@ (8009460 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8009286:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800928a:	041b      	lsls	r3, r3, #16
 800928c:	0f1b      	lsrs	r3, r3, #28
 800928e:	f003 030f 	and.w	r3, r3, #15
 8009292:	4a76      	ldr	r2, [pc, #472]	@ (800946c <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>)
 8009294:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009298:	ee07 3a90 	vmov	s15, r3
 800929c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80092a0:	693b      	ldr	r3, [r7, #16]
 80092a2:	ee07 3a90 	vmov	s15, r3
 80092a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80092aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 80092ae:	69bb      	ldr	r3, [r7, #24]
 80092b0:	ee07 3a90 	vmov	s15, r3
 80092b4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80092b8:	ed97 6a02 	vldr	s12, [r7, #8]
 80092bc:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 8009468 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 80092c0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80092c4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80092c8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80092cc:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 80092d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80092d4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80092d8:	e058      	b.n	800938c <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80092da:	693b      	ldr	r3, [r7, #16]
 80092dc:	ee07 3a90 	vmov	s15, r3
 80092e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80092e4:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8009464 <HAL_RCCEx_GetPLL1ClockFreq+0x2a8>
 80092e8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80092ec:	4b5c      	ldr	r3, [pc, #368]	@ (8009460 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80092ee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80092f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80092f4:	ee07 3a90 	vmov	s15, r3
 80092f8:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 80092fc:	ed97 6a02 	vldr	s12, [r7, #8]
 8009300:	eddf 5a59 	vldr	s11, [pc, #356]	@ 8009468 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 8009304:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8009308:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 800930c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009310:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8009314:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009318:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800931c:	e036      	b.n	800938c <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    default:
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 800931e:	4b50      	ldr	r3, [pc, #320]	@ (8009460 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8009320:	689b      	ldr	r3, [r3, #8]
 8009322:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009326:	2b00      	cmp	r3, #0
 8009328:	d005      	beq.n	8009336 <HAL_RCCEx_GetPLL1ClockFreq+0x17a>
 800932a:	4b4d      	ldr	r3, [pc, #308]	@ (8009460 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800932c:	689b      	ldr	r3, [r3, #8]
 800932e:	0f1b      	lsrs	r3, r3, #28
 8009330:	f003 030f 	and.w	r3, r3, #15
 8009334:	e006      	b.n	8009344 <HAL_RCCEx_GetPLL1ClockFreq+0x188>
 8009336:	4b4a      	ldr	r3, [pc, #296]	@ (8009460 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8009338:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800933c:	041b      	lsls	r3, r3, #16
 800933e:	0f1b      	lsrs	r3, r3, #28
 8009340:	f003 030f 	and.w	r3, r3, #15
 8009344:	4a49      	ldr	r2, [pc, #292]	@ (800946c <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>)
 8009346:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800934a:	ee07 3a90 	vmov	s15, r3
 800934e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009352:	693b      	ldr	r3, [r7, #16]
 8009354:	ee07 3a90 	vmov	s15, r3
 8009358:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800935c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009360:	69bb      	ldr	r3, [r7, #24]
 8009362:	ee07 3a90 	vmov	s15, r3
 8009366:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800936a:	ed97 6a02 	vldr	s12, [r7, #8]
 800936e:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 8009468 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 8009372:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009376:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800937a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800937e:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8009382:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009386:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800938a:	bf00      	nop
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 800938c:	4b34      	ldr	r3, [pc, #208]	@ (8009460 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800938e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009390:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8009394:	2b00      	cmp	r3, #0
 8009396:	d017      	beq.n	80093c8 <HAL_RCCEx_GetPLL1ClockFreq+0x20c>
  {
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8009398:	4b31      	ldr	r3, [pc, #196]	@ (8009460 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800939a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800939c:	0a5b      	lsrs	r3, r3, #9
 800939e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80093a2:	ee07 3a90 	vmov	s15, r3
 80093a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + \
 80093aa:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80093ae:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80093b2:	edd7 6a07 	vldr	s13, [r7, #28]
 80093b6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80093ba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80093be:	ee17 2a90 	vmov	r2, s15
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	601a      	str	r2, [r3, #0]
 80093c6:	e002      	b.n	80093ce <HAL_RCCEx_GetPLL1ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	2200      	movs	r2, #0
 80093cc:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 80093ce:	4b24      	ldr	r3, [pc, #144]	@ (8009460 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80093d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80093d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	d017      	beq.n	800940a <HAL_RCCEx_GetPLL1ClockFreq+0x24e>
  {
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80093da:	4b21      	ldr	r3, [pc, #132]	@ (8009460 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80093dc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80093de:	0c1b      	lsrs	r3, r3, #16
 80093e0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80093e4:	ee07 3a90 	vmov	s15, r3
 80093e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1Q) >> RCC_PLL1DIVR_PLL1Q_Pos) + \
 80093ec:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80093f0:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80093f4:	edd7 6a07 	vldr	s13, [r7, #28]
 80093f8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80093fc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009400:	ee17 2a90 	vmov	r2, s15
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	605a      	str	r2, [r3, #4]
 8009408:	e002      	b.n	8009410 <HAL_RCCEx_GetPLL1ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	2200      	movs	r2, #0
 800940e:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 8009410:	4b13      	ldr	r3, [pc, #76]	@ (8009460 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8009412:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009414:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8009418:	2b00      	cmp	r3, #0
 800941a:	d017      	beq.n	800944c <HAL_RCCEx_GetPLL1ClockFreq+0x290>
  {
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800941c:	4b10      	ldr	r3, [pc, #64]	@ (8009460 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800941e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009420:	0e1b      	lsrs	r3, r3, #24
 8009422:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009426:	ee07 3a90 	vmov	s15, r3
 800942a:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + \
 800942e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009432:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8009436:	edd7 6a07 	vldr	s13, [r7, #28]
 800943a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800943e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009442:	ee17 2a90 	vmov	r2, s15
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	609a      	str	r2, [r3, #8]
  else
  {
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800944a:	e002      	b.n	8009452 <HAL_RCCEx_GetPLL1ClockFreq+0x296>
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	2200      	movs	r2, #0
 8009450:	609a      	str	r2, [r3, #8]
}
 8009452:	bf00      	nop
 8009454:	3724      	adds	r7, #36	@ 0x24
 8009456:	46bd      	mov	sp, r7
 8009458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800945c:	4770      	bx	lr
 800945e:	bf00      	nop
 8009460:	46020c00 	.word	0x46020c00
 8009464:	4b742400 	.word	0x4b742400
 8009468:	46000000 	.word	0x46000000
 800946c:	08010f0c 	.word	0x08010f0c

08009470 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8009470:	b480      	push	{r7}
 8009472:	b089      	sub	sp, #36	@ 0x24
 8009474:	af00      	add	r7, sp, #0
 8009476:	6078      	str	r0, [r7, #4]
  float_t fracn2;
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 8009478:	4ba6      	ldr	r3, [pc, #664]	@ (8009714 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800947a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800947c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009480:	61bb      	str	r3, [r7, #24]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 8009482:	4ba4      	ldr	r3, [pc, #656]	@ (8009714 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8009484:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009486:	f003 0303 	and.w	r3, r3, #3
 800948a:	617b      	str	r3, [r7, #20]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos) + 1U;
 800948c:	4ba1      	ldr	r3, [pc, #644]	@ (8009714 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800948e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009490:	0a1b      	lsrs	r3, r3, #8
 8009492:	f003 030f 	and.w	r3, r3, #15
 8009496:	3301      	adds	r3, #1
 8009498:	613b      	str	r3, [r7, #16]
  pll2fracen = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN) >> RCC_PLL2CFGR_PLL2FRACEN_Pos);
 800949a:	4b9e      	ldr	r3, [pc, #632]	@ (8009714 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800949c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800949e:	091b      	lsrs	r3, r3, #4
 80094a0:	f003 0301 	and.w	r3, r3, #1
 80094a4:	60fb      	str	r3, [r7, #12]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 80094a6:	4b9b      	ldr	r3, [pc, #620]	@ (8009714 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80094a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80094aa:	08db      	lsrs	r3, r3, #3
 80094ac:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80094b0:	68fa      	ldr	r2, [r7, #12]
 80094b2:	fb02 f303 	mul.w	r3, r2, r3
 80094b6:	ee07 3a90 	vmov	s15, r3
 80094ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80094be:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  switch (pll2source)
 80094c2:	697b      	ldr	r3, [r7, #20]
 80094c4:	2b03      	cmp	r3, #3
 80094c6:	d062      	beq.n	800958e <HAL_RCCEx_GetPLL2ClockFreq+0x11e>
 80094c8:	697b      	ldr	r3, [r7, #20]
 80094ca:	2b03      	cmp	r3, #3
 80094cc:	f200 8081 	bhi.w	80095d2 <HAL_RCCEx_GetPLL2ClockFreq+0x162>
 80094d0:	697b      	ldr	r3, [r7, #20]
 80094d2:	2b01      	cmp	r3, #1
 80094d4:	d024      	beq.n	8009520 <HAL_RCCEx_GetPLL2ClockFreq+0xb0>
 80094d6:	697b      	ldr	r3, [r7, #20]
 80094d8:	2b02      	cmp	r3, #2
 80094da:	d17a      	bne.n	80095d2 <HAL_RCCEx_GetPLL2ClockFreq+0x162>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 80094dc:	693b      	ldr	r3, [r7, #16]
 80094de:	ee07 3a90 	vmov	s15, r3
 80094e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80094e6:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 8009718 <HAL_RCCEx_GetPLL2ClockFreq+0x2a8>
 80094ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80094ee:	4b89      	ldr	r3, [pc, #548]	@ (8009714 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80094f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80094f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80094f6:	ee07 3a90 	vmov	s15, r3
 80094fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 80094fe:	ed97 6a02 	vldr	s12, [r7, #8]
 8009502:	eddf 5a86 	vldr	s11, [pc, #536]	@ 800971c <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 8009506:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800950a:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 800950e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009512:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8009516:	ee67 7a27 	vmul.f32	s15, s14, s15
 800951a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800951e:	e08f      	b.n	8009640 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 8009520:	4b7c      	ldr	r3, [pc, #496]	@ (8009714 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8009522:	689b      	ldr	r3, [r3, #8]
 8009524:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009528:	2b00      	cmp	r3, #0
 800952a:	d005      	beq.n	8009538 <HAL_RCCEx_GetPLL2ClockFreq+0xc8>
 800952c:	4b79      	ldr	r3, [pc, #484]	@ (8009714 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800952e:	689b      	ldr	r3, [r3, #8]
 8009530:	0f1b      	lsrs	r3, r3, #28
 8009532:	f003 030f 	and.w	r3, r3, #15
 8009536:	e006      	b.n	8009546 <HAL_RCCEx_GetPLL2ClockFreq+0xd6>
 8009538:	4b76      	ldr	r3, [pc, #472]	@ (8009714 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800953a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800953e:	041b      	lsls	r3, r3, #16
 8009540:	0f1b      	lsrs	r3, r3, #28
 8009542:	f003 030f 	and.w	r3, r3, #15
 8009546:	4a76      	ldr	r2, [pc, #472]	@ (8009720 <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>)
 8009548:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800954c:	ee07 3a90 	vmov	s15, r3
 8009550:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009554:	693b      	ldr	r3, [r7, #16]
 8009556:	ee07 3a90 	vmov	s15, r3
 800955a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800955e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009562:	69bb      	ldr	r3, [r7, #24]
 8009564:	ee07 3a90 	vmov	s15, r3
 8009568:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800956c:	ed97 6a02 	vldr	s12, [r7, #8]
 8009570:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 800971c <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 8009574:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009578:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800957c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009580:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 8009584:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009588:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800958c:	e058      	b.n	8009640 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800958e:	693b      	ldr	r3, [r7, #16]
 8009590:	ee07 3a90 	vmov	s15, r3
 8009594:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009598:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8009718 <HAL_RCCEx_GetPLL2ClockFreq+0x2a8>
 800959c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80095a0:	4b5c      	ldr	r3, [pc, #368]	@ (8009714 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80095a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80095a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80095a8:	ee07 3a90 	vmov	s15, r3
 80095ac:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 80095b0:	ed97 6a02 	vldr	s12, [r7, #8]
 80095b4:	eddf 5a59 	vldr	s11, [pc, #356]	@ 800971c <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 80095b8:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 80095bc:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 80095c0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80095c4:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 80095c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80095cc:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80095d0:	e036      	b.n	8009640 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    default:
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 80095d2:	4b50      	ldr	r3, [pc, #320]	@ (8009714 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80095d4:	689b      	ldr	r3, [r3, #8]
 80095d6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80095da:	2b00      	cmp	r3, #0
 80095dc:	d005      	beq.n	80095ea <HAL_RCCEx_GetPLL2ClockFreq+0x17a>
 80095de:	4b4d      	ldr	r3, [pc, #308]	@ (8009714 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80095e0:	689b      	ldr	r3, [r3, #8]
 80095e2:	0f1b      	lsrs	r3, r3, #28
 80095e4:	f003 030f 	and.w	r3, r3, #15
 80095e8:	e006      	b.n	80095f8 <HAL_RCCEx_GetPLL2ClockFreq+0x188>
 80095ea:	4b4a      	ldr	r3, [pc, #296]	@ (8009714 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80095ec:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80095f0:	041b      	lsls	r3, r3, #16
 80095f2:	0f1b      	lsrs	r3, r3, #28
 80095f4:	f003 030f 	and.w	r3, r3, #15
 80095f8:	4a49      	ldr	r2, [pc, #292]	@ (8009720 <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>)
 80095fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80095fe:	ee07 3a90 	vmov	s15, r3
 8009602:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009606:	693b      	ldr	r3, [r7, #16]
 8009608:	ee07 3a90 	vmov	s15, r3
 800960c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009610:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                * ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009614:	69bb      	ldr	r3, [r7, #24]
 8009616:	ee07 3a90 	vmov	s15, r3
 800961a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800961e:	ed97 6a02 	vldr	s12, [r7, #8]
 8009622:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 800971c <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 8009626:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800962a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800962e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009632:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 8009636:	ee67 7a27 	vmul.f32	s15, s14, s15
 800963a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800963e:	bf00      	nop
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 8009640:	4b34      	ldr	r3, [pc, #208]	@ (8009714 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8009642:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009644:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8009648:	2b00      	cmp	r3, #0
 800964a:	d017      	beq.n	800967c <HAL_RCCEx_GetPLL2ClockFreq+0x20c>
  {
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800964c:	4b31      	ldr	r3, [pc, #196]	@ (8009714 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800964e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009650:	0a5b      	lsrs	r3, r3, #9
 8009652:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009656:	ee07 3a90 	vmov	s15, r3
 800965a:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2P) >> RCC_PLL2DIVR_PLL2P_Pos) + \
 800965e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009662:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8009666:	edd7 6a07 	vldr	s13, [r7, #28]
 800966a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800966e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009672:	ee17 2a90 	vmov	r2, s15
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	601a      	str	r2, [r3, #0]
 800967a:	e002      	b.n	8009682 <HAL_RCCEx_GetPLL2ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	2200      	movs	r2, #0
 8009680:	601a      	str	r2, [r3, #0]
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 8009682:	4b24      	ldr	r3, [pc, #144]	@ (8009714 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8009684:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009686:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800968a:	2b00      	cmp	r3, #0
 800968c:	d017      	beq.n	80096be <HAL_RCCEx_GetPLL2ClockFreq+0x24e>
  {
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800968e:	4b21      	ldr	r3, [pc, #132]	@ (8009714 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8009690:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009692:	0c1b      	lsrs	r3, r3, #16
 8009694:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009698:	ee07 3a90 	vmov	s15, r3
 800969c:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2Q) >> RCC_PLL2DIVR_PLL2Q_Pos) + \
 80096a0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80096a4:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80096a8:	edd7 6a07 	vldr	s13, [r7, #28]
 80096ac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80096b0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80096b4:	ee17 2a90 	vmov	r2, s15
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	605a      	str	r2, [r3, #4]
 80096bc:	e002      	b.n	80096c4 <HAL_RCCEx_GetPLL2ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	2200      	movs	r2, #0
 80096c2:	605a      	str	r2, [r3, #4]
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 80096c4:	4b13      	ldr	r3, [pc, #76]	@ (8009714 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80096c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80096c8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80096cc:	2b00      	cmp	r3, #0
 80096ce:	d017      	beq.n	8009700 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
  {
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80096d0:	4b10      	ldr	r3, [pc, #64]	@ (8009714 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80096d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80096d4:	0e1b      	lsrs	r3, r3, #24
 80096d6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80096da:	ee07 3a90 	vmov	s15, r3
 80096de:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2R) >> RCC_PLL2DIVR_PLL2R_Pos) + \
 80096e2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80096e6:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80096ea:	edd7 6a07 	vldr	s13, [r7, #28]
 80096ee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80096f2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80096f6:	ee17 2a90 	vmov	r2, s15
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	609a      	str	r2, [r3, #8]
  }
  else
  {
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80096fe:	e002      	b.n	8009706 <HAL_RCCEx_GetPLL2ClockFreq+0x296>
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	2200      	movs	r2, #0
 8009704:	609a      	str	r2, [r3, #8]
}
 8009706:	bf00      	nop
 8009708:	3724      	adds	r7, #36	@ 0x24
 800970a:	46bd      	mov	sp, r7
 800970c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009710:	4770      	bx	lr
 8009712:	bf00      	nop
 8009714:	46020c00 	.word	0x46020c00
 8009718:	4b742400 	.word	0x4b742400
 800971c:	46000000 	.word	0x46000000
 8009720:	08010f0c 	.word	0x08010f0c

08009724 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8009724:	b480      	push	{r7}
 8009726:	b089      	sub	sp, #36	@ 0x24
 8009728:	af00      	add	r7, sp, #0
 800972a:	6078      	str	r0, [r7, #4]

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLLxR
  */

  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 800972c:	4ba6      	ldr	r3, [pc, #664]	@ (80099c8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800972e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009730:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009734:	61bb      	str	r3, [r7, #24]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 8009736:	4ba4      	ldr	r3, [pc, #656]	@ (80099c8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8009738:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800973a:	f003 0303 	and.w	r3, r3, #3
 800973e:	617b      	str	r3, [r7, #20]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos) + 1U;
 8009740:	4ba1      	ldr	r3, [pc, #644]	@ (80099c8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8009742:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009744:	0a1b      	lsrs	r3, r3, #8
 8009746:	f003 030f 	and.w	r3, r3, #15
 800974a:	3301      	adds	r3, #1
 800974c:	613b      	str	r3, [r7, #16]
  pll3fracen = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN) >> RCC_PLL3CFGR_PLL3FRACEN_Pos);
 800974e:	4b9e      	ldr	r3, [pc, #632]	@ (80099c8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8009750:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009752:	091b      	lsrs	r3, r3, #4
 8009754:	f003 0301 	and.w	r3, r3, #1
 8009758:	60fb      	str	r3, [r7, #12]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 800975a:	4b9b      	ldr	r3, [pc, #620]	@ (80099c8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800975c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800975e:	08db      	lsrs	r3, r3, #3
 8009760:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009764:	68fa      	ldr	r2, [r7, #12]
 8009766:	fb02 f303 	mul.w	r3, r2, r3
 800976a:	ee07 3a90 	vmov	s15, r3
 800976e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009772:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  switch (pll3source)
 8009776:	697b      	ldr	r3, [r7, #20]
 8009778:	2b03      	cmp	r3, #3
 800977a:	d062      	beq.n	8009842 <HAL_RCCEx_GetPLL3ClockFreq+0x11e>
 800977c:	697b      	ldr	r3, [r7, #20]
 800977e:	2b03      	cmp	r3, #3
 8009780:	f200 8081 	bhi.w	8009886 <HAL_RCCEx_GetPLL3ClockFreq+0x162>
 8009784:	697b      	ldr	r3, [r7, #20]
 8009786:	2b01      	cmp	r3, #1
 8009788:	d024      	beq.n	80097d4 <HAL_RCCEx_GetPLL3ClockFreq+0xb0>
 800978a:	697b      	ldr	r3, [r7, #20]
 800978c:	2b02      	cmp	r3, #2
 800978e:	d17a      	bne.n	8009886 <HAL_RCCEx_GetPLL3ClockFreq+0x162>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8009790:	693b      	ldr	r3, [r7, #16]
 8009792:	ee07 3a90 	vmov	s15, r3
 8009796:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800979a:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 80099cc <HAL_RCCEx_GetPLL3ClockFreq+0x2a8>
 800979e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80097a2:	4b89      	ldr	r3, [pc, #548]	@ (80099c8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80097a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80097a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80097aa:	ee07 3a90 	vmov	s15, r3
 80097ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 80097b2:	ed97 6a02 	vldr	s12, [r7, #8]
 80097b6:	eddf 5a86 	vldr	s11, [pc, #536]	@ 80099d0 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 80097ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 80097be:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 80097c2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80097c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 80097ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80097ce:	edc7 7a07 	vstr	s15, [r7, #28]

      break;
 80097d2:	e08f      	b.n	80098f4 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 80097d4:	4b7c      	ldr	r3, [pc, #496]	@ (80099c8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80097d6:	689b      	ldr	r3, [r3, #8]
 80097d8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80097dc:	2b00      	cmp	r3, #0
 80097de:	d005      	beq.n	80097ec <HAL_RCCEx_GetPLL3ClockFreq+0xc8>
 80097e0:	4b79      	ldr	r3, [pc, #484]	@ (80099c8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80097e2:	689b      	ldr	r3, [r3, #8]
 80097e4:	0f1b      	lsrs	r3, r3, #28
 80097e6:	f003 030f 	and.w	r3, r3, #15
 80097ea:	e006      	b.n	80097fa <HAL_RCCEx_GetPLL3ClockFreq+0xd6>
 80097ec:	4b76      	ldr	r3, [pc, #472]	@ (80099c8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80097ee:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80097f2:	041b      	lsls	r3, r3, #16
 80097f4:	0f1b      	lsrs	r3, r3, #28
 80097f6:	f003 030f 	and.w	r3, r3, #15
 80097fa:	4a76      	ldr	r2, [pc, #472]	@ (80099d4 <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>)
 80097fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009800:	ee07 3a90 	vmov	s15, r3
 8009804:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009808:	693b      	ldr	r3, [r7, #16]
 800980a:	ee07 3a90 	vmov	s15, r3
 800980e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009812:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009816:	69bb      	ldr	r3, [r7, #24]
 8009818:	ee07 3a90 	vmov	s15, r3
 800981c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009820:	ed97 6a02 	vldr	s12, [r7, #8]
 8009824:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 80099d0 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 8009828:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800982c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009830:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009834:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8009838:	ee67 7a27 	vmul.f32	s15, s14, s15
 800983c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009840:	e058      	b.n	80098f4 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8009842:	693b      	ldr	r3, [r7, #16]
 8009844:	ee07 3a90 	vmov	s15, r3
 8009848:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800984c:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80099cc <HAL_RCCEx_GetPLL3ClockFreq+0x2a8>
 8009850:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009854:	4b5c      	ldr	r3, [pc, #368]	@ (80099c8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8009856:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009858:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800985c:	ee07 3a90 	vmov	s15, r3
 8009860:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 8009864:	ed97 6a02 	vldr	s12, [r7, #8]
 8009868:	eddf 5a59 	vldr	s11, [pc, #356]	@ 80099d0 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 800986c:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8009870:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 8009874:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009878:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800987c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009880:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009884:	e036      	b.n	80098f4 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>

    default:
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8009886:	4b50      	ldr	r3, [pc, #320]	@ (80099c8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8009888:	689b      	ldr	r3, [r3, #8]
 800988a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800988e:	2b00      	cmp	r3, #0
 8009890:	d005      	beq.n	800989e <HAL_RCCEx_GetPLL3ClockFreq+0x17a>
 8009892:	4b4d      	ldr	r3, [pc, #308]	@ (80099c8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8009894:	689b      	ldr	r3, [r3, #8]
 8009896:	0f1b      	lsrs	r3, r3, #28
 8009898:	f003 030f 	and.w	r3, r3, #15
 800989c:	e006      	b.n	80098ac <HAL_RCCEx_GetPLL3ClockFreq+0x188>
 800989e:	4b4a      	ldr	r3, [pc, #296]	@ (80099c8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80098a0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80098a4:	041b      	lsls	r3, r3, #16
 80098a6:	0f1b      	lsrs	r3, r3, #28
 80098a8:	f003 030f 	and.w	r3, r3, #15
 80098ac:	4a49      	ldr	r2, [pc, #292]	@ (80099d4 <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>)
 80098ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80098b2:	ee07 3a90 	vmov	s15, r3
 80098b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80098ba:	693b      	ldr	r3, [r7, #16]
 80098bc:	ee07 3a90 	vmov	s15, r3
 80098c0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80098c4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 80098c8:	69bb      	ldr	r3, [r7, #24]
 80098ca:	ee07 3a90 	vmov	s15, r3
 80098ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80098d2:	ed97 6a02 	vldr	s12, [r7, #8]
 80098d6:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 80099d0 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 80098da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80098de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80098e2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80098e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 80098ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80098ee:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80098f2:	bf00      	nop
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 80098f4:	4b34      	ldr	r3, [pc, #208]	@ (80099c8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80098f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80098f8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80098fc:	2b00      	cmp	r3, #0
 80098fe:	d017      	beq.n	8009930 <HAL_RCCEx_GetPLL3ClockFreq+0x20c>
  {
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8009900:	4b31      	ldr	r3, [pc, #196]	@ (80099c8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8009902:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009904:	0a5b      	lsrs	r3, r3, #9
 8009906:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800990a:	ee07 3a90 	vmov	s15, r3
 800990e:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3P) >> RCC_PLL3DIVR_PLL3P_Pos) + \
 8009912:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009916:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800991a:	edd7 6a07 	vldr	s13, [r7, #28]
 800991e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009922:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009926:	ee17 2a90 	vmov	r2, s15
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	601a      	str	r2, [r3, #0]
 800992e:	e002      	b.n	8009936 <HAL_RCCEx_GetPLL3ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	2200      	movs	r2, #0
 8009934:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 8009936:	4b24      	ldr	r3, [pc, #144]	@ (80099c8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8009938:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800993a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800993e:	2b00      	cmp	r3, #0
 8009940:	d017      	beq.n	8009972 <HAL_RCCEx_GetPLL3ClockFreq+0x24e>
  {
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8009942:	4b21      	ldr	r3, [pc, #132]	@ (80099c8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8009944:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009946:	0c1b      	lsrs	r3, r3, #16
 8009948:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800994c:	ee07 3a90 	vmov	s15, r3
 8009950:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3Q) >> RCC_PLL3DIVR_PLL3Q_Pos) + \
 8009954:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009958:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800995c:	edd7 6a07 	vldr	s13, [r7, #28]
 8009960:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009964:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009968:	ee17 2a90 	vmov	r2, s15
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	605a      	str	r2, [r3, #4]
 8009970:	e002      	b.n	8009978 <HAL_RCCEx_GetPLL3ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	2200      	movs	r2, #0
 8009976:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 8009978:	4b13      	ldr	r3, [pc, #76]	@ (80099c8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800997a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800997c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8009980:	2b00      	cmp	r3, #0
 8009982:	d017      	beq.n	80099b4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
  {
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8009984:	4b10      	ldr	r3, [pc, #64]	@ (80099c8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8009986:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009988:	0e1b      	lsrs	r3, r3, #24
 800998a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800998e:	ee07 3a90 	vmov	s15, r3
 8009992:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3R) >> RCC_PLL3DIVR_PLL3R_Pos) + \
 8009996:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800999a:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800999e:	edd7 6a07 	vldr	s13, [r7, #28]
 80099a2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80099a6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80099aa:	ee17 2a90 	vmov	r2, s15
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	609a      	str	r2, [r3, #8]
  else
  {
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80099b2:	e002      	b.n	80099ba <HAL_RCCEx_GetPLL3ClockFreq+0x296>
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	2200      	movs	r2, #0
 80099b8:	609a      	str	r2, [r3, #8]
}
 80099ba:	bf00      	nop
 80099bc:	3724      	adds	r7, #36	@ 0x24
 80099be:	46bd      	mov	sp, r7
 80099c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099c4:	4770      	bx	lr
 80099c6:	bf00      	nop
 80099c8:	46020c00 	.word	0x46020c00
 80099cc:	4b742400 	.word	0x4b742400
 80099d0:	46000000 	.word	0x46000000
 80099d4:	08010f0c 	.word	0x08010f0c

080099d8 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in Hz
  *
  *        (*) value not defined in all devices.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 80099d8:	b580      	push	{r7, lr}
 80099da:	b08e      	sub	sp, #56	@ 0x38
 80099dc:	af00      	add	r7, sp, #0
 80099de:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 80099e2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80099e6:	f5a2 2180 	sub.w	r1, r2, #262144	@ 0x40000
 80099ea:	430b      	orrs	r3, r1
 80099ec:	d145      	bne.n	8009a7a <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 80099ee:	4baa      	ldr	r3, [pc, #680]	@ (8009c98 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 80099f0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80099f4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80099f8:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 80099fa:	4ba7      	ldr	r3, [pc, #668]	@ (8009c98 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 80099fc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009a00:	f003 0302 	and.w	r3, r3, #2
 8009a04:	2b02      	cmp	r3, #2
 8009a06:	d108      	bne.n	8009a1a <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 8009a08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a0a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009a0e:	d104      	bne.n	8009a1a <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 8009a10:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009a14:	637b      	str	r3, [r7, #52]	@ 0x34
 8009a16:	f001 b987 	b.w	800ad28 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 8009a1a:	4b9f      	ldr	r3, [pc, #636]	@ (8009c98 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8009a1c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009a20:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009a24:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009a28:	d114      	bne.n	8009a54 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
 8009a2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a2c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009a30:	d110      	bne.n	8009a54 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8009a32:	4b99      	ldr	r3, [pc, #612]	@ (8009c98 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8009a34:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009a38:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009a3c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009a40:	d103      	bne.n	8009a4a <HAL_RCCEx_GetPeriphCLKFreq+0x72>
      {
        frequency = LSI_VALUE / 128U;
 8009a42:	23fa      	movs	r3, #250	@ 0xfa
 8009a44:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8009a46:	f001 b96f 	b.w	800ad28 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = LSI_VALUE;
 8009a4a:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8009a4e:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8009a50:	f001 b96a 	b.w	800ad28 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    /* Check if HSE is ready  and if RTC clock selection is HSI_DIV32*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIV32))
 8009a54:	4b90      	ldr	r3, [pc, #576]	@ (8009c98 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8009a56:	681b      	ldr	r3, [r3, #0]
 8009a58:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009a5c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009a60:	d107      	bne.n	8009a72 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
 8009a62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a64:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009a68:	d103      	bne.n	8009a72 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
    {
      frequency = HSE_VALUE / 32U;
 8009a6a:	4b8c      	ldr	r3, [pc, #560]	@ (8009c9c <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8009a6c:	637b      	str	r3, [r7, #52]	@ 0x34
 8009a6e:	f001 b95b 	b.w	800ad28 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 8009a72:	2300      	movs	r3, #0
 8009a74:	637b      	str	r3, [r7, #52]	@ 0x34
 8009a76:	f001 b957 	b.w	800ad28 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8009a7a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009a7e:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 8009a82:	430b      	orrs	r3, r1
 8009a84:	d151      	bne.n	8009b2a <HAL_RCCEx_GetPeriphCLKFreq+0x152>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 8009a86:	4b84      	ldr	r3, [pc, #528]	@ (8009c98 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8009a88:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8009a8c:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 8009a90:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8009a92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a94:	2b80      	cmp	r3, #128	@ 0x80
 8009a96:	d035      	beq.n	8009b04 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
 8009a98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a9a:	2b80      	cmp	r3, #128	@ 0x80
 8009a9c:	d841      	bhi.n	8009b22 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 8009a9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009aa0:	2b60      	cmp	r3, #96	@ 0x60
 8009aa2:	d02a      	beq.n	8009afa <HAL_RCCEx_GetPeriphCLKFreq+0x122>
 8009aa4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009aa6:	2b60      	cmp	r3, #96	@ 0x60
 8009aa8:	d83b      	bhi.n	8009b22 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 8009aaa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009aac:	2b40      	cmp	r3, #64	@ 0x40
 8009aae:	d009      	beq.n	8009ac4 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8009ab0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ab2:	2b40      	cmp	r3, #64	@ 0x40
 8009ab4:	d835      	bhi.n	8009b22 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 8009ab6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ab8:	2b00      	cmp	r3, #0
 8009aba:	d00c      	beq.n	8009ad6 <HAL_RCCEx_GetPeriphCLKFreq+0xfe>
 8009abc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009abe:	2b20      	cmp	r3, #32
 8009ac0:	d012      	beq.n	8009ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 8009ac2:	e02e      	b.n	8009b22 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
    {
      case RCC_SAI1CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009ac4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009ac8:	4618      	mov	r0, r3
 8009aca:	f7ff fb77 	bl	80091bc <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8009ace:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ad0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009ad2:	f001 b929 	b.w	800ad28 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009ad6:	f107 0318 	add.w	r3, r7, #24
 8009ada:	4618      	mov	r0, r3
 8009adc:	f7ff fcc8 	bl	8009470 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 8009ae0:	69bb      	ldr	r3, [r7, #24]
 8009ae2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009ae4:	f001 b920 	b.w	800ad28 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI1CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009ae8:	f107 030c 	add.w	r3, r7, #12
 8009aec:	4618      	mov	r0, r3
 8009aee:	f7ff fe19 	bl	8009724 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 8009af2:	68fb      	ldr	r3, [r7, #12]
 8009af4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009af6:	f001 b917 	b.w	800ad28 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8009afa:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8009afe:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009b00:	f001 b912 	b.w	800ad28 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI1CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8009b04:	4b64      	ldr	r3, [pc, #400]	@ (8009c98 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8009b06:	681b      	ldr	r3, [r3, #0]
 8009b08:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009b0c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009b10:	d103      	bne.n	8009b1a <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        {
          frequency = HSI_VALUE;
 8009b12:	4b63      	ldr	r3, [pc, #396]	@ (8009ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 8009b14:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8009b16:	f001 b907 	b.w	800ad28 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8009b1a:	2300      	movs	r3, #0
 8009b1c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009b1e:	f001 b903 	b.w	800ad28 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default :
      {
        frequency = 0U;
 8009b22:	2300      	movs	r3, #0
 8009b24:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009b26:	f001 b8ff 	b.w	800ad28 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
  }
#if defined(SAI2)
  else if (PeriphClk == RCC_PERIPHCLK_SAI2)
 8009b2a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009b2e:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 8009b32:	430b      	orrs	r3, r1
 8009b34:	d158      	bne.n	8009be8 <HAL_RCCEx_GetPeriphCLKFreq+0x210>
  {
    srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 8009b36:	4b58      	ldr	r3, [pc, #352]	@ (8009c98 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8009b38:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8009b3c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8009b40:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8009b42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b44:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009b48:	d03b      	beq.n	8009bc2 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 8009b4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b4c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009b50:	d846      	bhi.n	8009be0 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 8009b52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b54:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009b58:	d02e      	beq.n	8009bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
 8009b5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b5c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009b60:	d83e      	bhi.n	8009be0 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 8009b62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b64:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009b68:	d00b      	beq.n	8009b82 <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
 8009b6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b6c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009b70:	d836      	bhi.n	8009be0 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 8009b72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b74:	2b00      	cmp	r3, #0
 8009b76:	d00d      	beq.n	8009b94 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 8009b78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b7a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009b7e:	d012      	beq.n	8009ba6 <HAL_RCCEx_GetPeriphCLKFreq+0x1ce>
 8009b80:	e02e      	b.n	8009be0 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
    {
      case RCC_SAI2CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009b82:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009b86:	4618      	mov	r0, r3
 8009b88:	f7ff fb18 	bl	80091bc <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8009b8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b8e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009b90:	f001 b8ca 	b.w	800ad28 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009b94:	f107 0318 	add.w	r3, r7, #24
 8009b98:	4618      	mov	r0, r3
 8009b9a:	f7ff fc69 	bl	8009470 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 8009b9e:	69bb      	ldr	r3, [r7, #24]
 8009ba0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009ba2:	f001 b8c1 	b.w	800ad28 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI2CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009ba6:	f107 030c 	add.w	r3, r7, #12
 8009baa:	4618      	mov	r0, r3
 8009bac:	f7ff fdba 	bl	8009724 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 8009bb0:	68fb      	ldr	r3, [r7, #12]
 8009bb2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009bb4:	f001 b8b8 	b.w	800ad28 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI2CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8009bb8:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8009bbc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009bbe:	f001 b8b3 	b.w	800ad28 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI2CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8009bc2:	4b35      	ldr	r3, [pc, #212]	@ (8009c98 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8009bc4:	681b      	ldr	r3, [r3, #0]
 8009bc6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009bca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009bce:	d103      	bne.n	8009bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x200>
        {
          frequency = HSI_VALUE;
 8009bd0:	4b33      	ldr	r3, [pc, #204]	@ (8009ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 8009bd2:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8009bd4:	f001 b8a8 	b.w	800ad28 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8009bd8:	2300      	movs	r3, #0
 8009bda:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009bdc:	f001 b8a4 	b.w	800ad28 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default :

        frequency = 0U;
 8009be0:	2300      	movs	r3, #0
 8009be2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009be4:	f001 b8a0 	b.w	800ad28 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    {
      frequency = 0U;
    }
  }
#endif /* SAES */
  else if (PeriphClk == RCC_PERIPHCLK_ICLK)
 8009be8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009bec:	f5a2 1180 	sub.w	r1, r2, #1048576	@ 0x100000
 8009bf0:	430b      	orrs	r3, r1
 8009bf2:	d16e      	bne.n	8009cd2 <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
  {
    srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 8009bf4:	4b28      	ldr	r3, [pc, #160]	@ (8009c98 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8009bf6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009bfa:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 8009bfe:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8009c00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c02:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8009c06:	d034      	beq.n	8009c72 <HAL_RCCEx_GetPeriphCLKFreq+0x29a>
 8009c08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c0a:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8009c0e:	d85c      	bhi.n	8009cca <HAL_RCCEx_GetPeriphCLKFreq+0x2f2>
 8009c10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c12:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009c16:	d00b      	beq.n	8009c30 <HAL_RCCEx_GetPeriphCLKFreq+0x258>
 8009c18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c1a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009c1e:	d854      	bhi.n	8009cca <HAL_RCCEx_GetPeriphCLKFreq+0x2f2>
 8009c20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c22:	2b00      	cmp	r3, #0
 8009c24:	d016      	beq.n	8009c54 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>
 8009c26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c28:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8009c2c:	d009      	beq.n	8009c42 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 8009c2e:	e04c      	b.n	8009cca <HAL_RCCEx_GetPeriphCLKFreq+0x2f2>
    {
      case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009c30:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009c34:	4618      	mov	r0, r3
 8009c36:	f7ff fac1 	bl	80091bc <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 8009c3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c3c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009c3e:	f001 b873 	b.w	800ad28 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009c42:	f107 0318 	add.w	r3, r7, #24
 8009c46:	4618      	mov	r0, r3
 8009c48:	f7ff fc12 	bl	8009470 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 8009c4c:	69fb      	ldr	r3, [r7, #28]
 8009c4e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009c50:	f001 b86a 	b.w	800ad28 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 8009c54:	4b10      	ldr	r3, [pc, #64]	@ (8009c98 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8009c56:	681b      	ldr	r3, [r3, #0]
 8009c58:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8009c5c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009c60:	d103      	bne.n	8009c6a <HAL_RCCEx_GetPeriphCLKFreq+0x292>
        {
          frequency = HSI48_VALUE;
 8009c62:	4b10      	ldr	r3, [pc, #64]	@ (8009ca4 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8009c64:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8009c66:	f001 b85f 	b.w	800ad28 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8009c6a:	2300      	movs	r3, #0
 8009c6c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009c6e:	f001 b85b 	b.w	800ad28 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8009c72:	4b09      	ldr	r3, [pc, #36]	@ (8009c98 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8009c74:	681b      	ldr	r3, [r3, #0]
 8009c76:	f003 0320 	and.w	r3, r3, #32
 8009c7a:	2b20      	cmp	r3, #32
 8009c7c:	d121      	bne.n	8009cc2 <HAL_RCCEx_GetPeriphCLKFreq+0x2ea>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8009c7e:	4b06      	ldr	r3, [pc, #24]	@ (8009c98 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8009c80:	689b      	ldr	r3, [r3, #8]
 8009c82:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009c86:	2b00      	cmp	r3, #0
 8009c88:	d00e      	beq.n	8009ca8 <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>
 8009c8a:	4b03      	ldr	r3, [pc, #12]	@ (8009c98 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8009c8c:	689b      	ldr	r3, [r3, #8]
 8009c8e:	0e1b      	lsrs	r3, r3, #24
 8009c90:	f003 030f 	and.w	r3, r3, #15
 8009c94:	e00f      	b.n	8009cb6 <HAL_RCCEx_GetPeriphCLKFreq+0x2de>
 8009c96:	bf00      	nop
 8009c98:	46020c00 	.word	0x46020c00
 8009c9c:	0007a120 	.word	0x0007a120
 8009ca0:	00f42400 	.word	0x00f42400
 8009ca4:	02dc6c00 	.word	0x02dc6c00
 8009ca8:	4ba7      	ldr	r3, [pc, #668]	@ (8009f48 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8009caa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8009cae:	041b      	lsls	r3, r3, #16
 8009cb0:	0e1b      	lsrs	r3, r3, #24
 8009cb2:	f003 030f 	and.w	r3, r3, #15
 8009cb6:	4aa5      	ldr	r2, [pc, #660]	@ (8009f4c <HAL_RCCEx_GetPeriphCLKFreq+0x574>)
 8009cb8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009cbc:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8009cbe:	f001 b833 	b.w	800ad28 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8009cc2:	2300      	movs	r3, #0
 8009cc4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009cc6:	f001 b82f 	b.w	800ad28 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default :

        frequency = 0U;
 8009cca:	2300      	movs	r3, #0
 8009ccc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009cce:	f001 b82b 	b.w	800ad28 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8009cd2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009cd6:	f5a2 1100 	sub.w	r1, r2, #2097152	@ 0x200000
 8009cda:	430b      	orrs	r3, r1
 8009cdc:	d17f      	bne.n	8009dde <HAL_RCCEx_GetPeriphCLKFreq+0x406>
  {
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8009cde:	4b9a      	ldr	r3, [pc, #616]	@ (8009f48 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8009ce0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8009ce4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009ce8:	633b      	str	r3, [r7, #48]	@ 0x30
    if (srcclk == RCC_SDMMCCLKSOURCE_CLK48)
 8009cea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009cec:	2b00      	cmp	r3, #0
 8009cee:	d165      	bne.n	8009dbc <HAL_RCCEx_GetPeriphCLKFreq+0x3e4>
    {
      srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 8009cf0:	4b95      	ldr	r3, [pc, #596]	@ (8009f48 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8009cf2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009cf6:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 8009cfa:	633b      	str	r3, [r7, #48]	@ 0x30

      switch (srcclk)
 8009cfc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009cfe:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8009d02:	d034      	beq.n	8009d6e <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 8009d04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d06:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8009d0a:	d853      	bhi.n	8009db4 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 8009d0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d0e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009d12:	d00b      	beq.n	8009d2c <HAL_RCCEx_GetPeriphCLKFreq+0x354>
 8009d14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d16:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009d1a:	d84b      	bhi.n	8009db4 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 8009d1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d1e:	2b00      	cmp	r3, #0
 8009d20:	d016      	beq.n	8009d50 <HAL_RCCEx_GetPeriphCLKFreq+0x378>
 8009d22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d24:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8009d28:	d009      	beq.n	8009d3e <HAL_RCCEx_GetPeriphCLKFreq+0x366>
 8009d2a:	e043      	b.n	8009db4 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
      {
        case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009d2c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009d30:	4618      	mov	r0, r3
 8009d32:	f7ff fa43 	bl	80091bc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009d36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d38:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8009d3a:	f000 bff5 	b.w	800ad28 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
        }
        case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009d3e:	f107 0318 	add.w	r3, r7, #24
 8009d42:	4618      	mov	r0, r3
 8009d44:	f7ff fb94 	bl	8009470 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009d48:	69fb      	ldr	r3, [r7, #28]
 8009d4a:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8009d4c:	f000 bfec 	b.w	800ad28 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
        }
        case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 8009d50:	4b7d      	ldr	r3, [pc, #500]	@ (8009f48 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8009d58:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009d5c:	d103      	bne.n	8009d66 <HAL_RCCEx_GetPeriphCLKFreq+0x38e>
          {
            frequency = HSI48_VALUE;
 8009d5e:	4b7c      	ldr	r3, [pc, #496]	@ (8009f50 <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 8009d60:	637b      	str	r3, [r7, #52]	@ 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 8009d62:	f000 bfe1 	b.w	800ad28 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
            frequency = 0U;
 8009d66:	2300      	movs	r3, #0
 8009d68:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8009d6a:	f000 bfdd 	b.w	800ad28 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
        }
        case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8009d6e:	4b76      	ldr	r3, [pc, #472]	@ (8009f48 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8009d70:	681b      	ldr	r3, [r3, #0]
 8009d72:	f003 0320 	and.w	r3, r3, #32
 8009d76:	2b20      	cmp	r3, #32
 8009d78:	d118      	bne.n	8009dac <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
          {
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8009d7a:	4b73      	ldr	r3, [pc, #460]	@ (8009f48 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8009d7c:	689b      	ldr	r3, [r3, #8]
 8009d7e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009d82:	2b00      	cmp	r3, #0
 8009d84:	d005      	beq.n	8009d92 <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
 8009d86:	4b70      	ldr	r3, [pc, #448]	@ (8009f48 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8009d88:	689b      	ldr	r3, [r3, #8]
 8009d8a:	0e1b      	lsrs	r3, r3, #24
 8009d8c:	f003 030f 	and.w	r3, r3, #15
 8009d90:	e006      	b.n	8009da0 <HAL_RCCEx_GetPeriphCLKFreq+0x3c8>
 8009d92:	4b6d      	ldr	r3, [pc, #436]	@ (8009f48 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8009d94:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8009d98:	041b      	lsls	r3, r3, #16
 8009d9a:	0e1b      	lsrs	r3, r3, #24
 8009d9c:	f003 030f 	and.w	r3, r3, #15
 8009da0:	4a6a      	ldr	r2, [pc, #424]	@ (8009f4c <HAL_RCCEx_GetPeriphCLKFreq+0x574>)
 8009da2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009da6:	637b      	str	r3, [r7, #52]	@ 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 8009da8:	f000 bfbe 	b.w	800ad28 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
            frequency = 0U;
 8009dac:	2300      	movs	r3, #0
 8009dae:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8009db0:	f000 bfba 	b.w	800ad28 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
        }
        default :
        {
          frequency = 0U;
 8009db4:	2300      	movs	r3, #0
 8009db6:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8009db8:	f000 bfb6 	b.w	800ad28 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
        }
      }
    }
    else if (srcclk == RCC_SDMMCCLKSOURCE_PLL1)
 8009dbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009dbe:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009dc2:	d108      	bne.n	8009dd6 <HAL_RCCEx_GetPeriphCLKFreq+0x3fe>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009dc4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009dc8:	4618      	mov	r0, r3
 8009dca:	f7ff f9f7 	bl	80091bc <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_P_Frequency;
 8009dce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009dd0:	637b      	str	r3, [r7, #52]	@ 0x34
 8009dd2:	f000 bfa9 	b.w	800ad28 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else
    {
      frequency = 0U;
 8009dd6:	2300      	movs	r3, #0
 8009dd8:	637b      	str	r3, [r7, #52]	@ 0x34
 8009dda:	f000 bfa5 	b.w	800ad28 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_USART1)
 8009dde:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009de2:	1e51      	subs	r1, r2, #1
 8009de4:	430b      	orrs	r3, r1
 8009de6:	d136      	bne.n	8009e56 <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
  {
    /* Get the current USART1 source */
    srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8009de8:	4b57      	ldr	r3, [pc, #348]	@ (8009f48 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8009dea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009dee:	f003 0303 	and.w	r3, r3, #3
 8009df2:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 8009df4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009df6:	2b00      	cmp	r3, #0
 8009df8:	d104      	bne.n	8009e04 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
    {
      frequency = HAL_RCC_GetPCLK2Freq();
 8009dfa:	f7fe fb55 	bl	80084a8 <HAL_RCC_GetPCLK2Freq>
 8009dfe:	6378      	str	r0, [r7, #52]	@ 0x34
 8009e00:	f000 bf92 	b.w	800ad28 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_USART1CLKSOURCE_SYSCLK)
 8009e04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e06:	2b01      	cmp	r3, #1
 8009e08:	d104      	bne.n	8009e14 <HAL_RCCEx_GetPeriphCLKFreq+0x43c>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8009e0a:	f7fe fa1d 	bl	8008248 <HAL_RCC_GetSysClockFreq>
 8009e0e:	6378      	str	r0, [r7, #52]	@ 0x34
 8009e10:	f000 bf8a 	b.w	800ad28 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 8009e14:	4b4c      	ldr	r3, [pc, #304]	@ (8009f48 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009e1c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009e20:	d106      	bne.n	8009e30 <HAL_RCCEx_GetPeriphCLKFreq+0x458>
 8009e22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e24:	2b02      	cmp	r3, #2
 8009e26:	d103      	bne.n	8009e30 <HAL_RCCEx_GetPeriphCLKFreq+0x458>
    {
      frequency = HSI_VALUE;
 8009e28:	4b4a      	ldr	r3, [pc, #296]	@ (8009f54 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 8009e2a:	637b      	str	r3, [r7, #52]	@ 0x34
 8009e2c:	f000 bf7c 	b.w	800ad28 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 8009e30:	4b45      	ldr	r3, [pc, #276]	@ (8009f48 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8009e32:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009e36:	f003 0302 	and.w	r3, r3, #2
 8009e3a:	2b02      	cmp	r3, #2
 8009e3c:	d107      	bne.n	8009e4e <HAL_RCCEx_GetPeriphCLKFreq+0x476>
 8009e3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e40:	2b03      	cmp	r3, #3
 8009e42:	d104      	bne.n	8009e4e <HAL_RCCEx_GetPeriphCLKFreq+0x476>
    {
      frequency = LSE_VALUE;
 8009e44:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009e48:	637b      	str	r3, [r7, #52]	@ 0x34
 8009e4a:	f000 bf6d 	b.w	800ad28 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for USART1 */
    else
    {
      frequency = 0U;
 8009e4e:	2300      	movs	r3, #0
 8009e50:	637b      	str	r3, [r7, #52]	@ 0x34
 8009e52:	f000 bf69 	b.w	800ad28 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
#if defined(USART2)
  else if (PeriphClk == RCC_PERIPHCLK_USART2)
 8009e56:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009e5a:	1e91      	subs	r1, r2, #2
 8009e5c:	430b      	orrs	r3, r1
 8009e5e:	d136      	bne.n	8009ece <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
  {
    /* Get the current USART2 source */
    srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8009e60:	4b39      	ldr	r3, [pc, #228]	@ (8009f48 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8009e62:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009e66:	f003 030c 	and.w	r3, r3, #12
 8009e6a:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 8009e6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e6e:	2b00      	cmp	r3, #0
 8009e70:	d104      	bne.n	8009e7c <HAL_RCCEx_GetPeriphCLKFreq+0x4a4>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8009e72:	f7fe fb05 	bl	8008480 <HAL_RCC_GetPCLK1Freq>
 8009e76:	6378      	str	r0, [r7, #52]	@ 0x34
 8009e78:	f000 bf56 	b.w	800ad28 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_USART2CLKSOURCE_SYSCLK)
 8009e7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e7e:	2b04      	cmp	r3, #4
 8009e80:	d104      	bne.n	8009e8c <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8009e82:	f7fe f9e1 	bl	8008248 <HAL_RCC_GetSysClockFreq>
 8009e86:	6378      	str	r0, [r7, #52]	@ 0x34
 8009e88:	f000 bf4e 	b.w	800ad28 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 8009e8c:	4b2e      	ldr	r3, [pc, #184]	@ (8009f48 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8009e8e:	681b      	ldr	r3, [r3, #0]
 8009e90:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009e94:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009e98:	d106      	bne.n	8009ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 8009e9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e9c:	2b08      	cmp	r3, #8
 8009e9e:	d103      	bne.n	8009ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
    {
      frequency = HSI_VALUE;
 8009ea0:	4b2c      	ldr	r3, [pc, #176]	@ (8009f54 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 8009ea2:	637b      	str	r3, [r7, #52]	@ 0x34
 8009ea4:	f000 bf40 	b.w	800ad28 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 8009ea8:	4b27      	ldr	r3, [pc, #156]	@ (8009f48 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8009eaa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009eae:	f003 0302 	and.w	r3, r3, #2
 8009eb2:	2b02      	cmp	r3, #2
 8009eb4:	d107      	bne.n	8009ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x4ee>
 8009eb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009eb8:	2b0c      	cmp	r3, #12
 8009eba:	d104      	bne.n	8009ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x4ee>
    {
      frequency = LSE_VALUE;
 8009ebc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009ec0:	637b      	str	r3, [r7, #52]	@ 0x34
 8009ec2:	f000 bf31 	b.w	800ad28 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for USART2 */
    else
    {
      frequency = 0U;
 8009ec6:	2300      	movs	r3, #0
 8009ec8:	637b      	str	r3, [r7, #52]	@ 0x34
 8009eca:	f000 bf2d 	b.w	800ad28 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
#endif /* USART2 */
  else if (PeriphClk == RCC_PERIPHCLK_USART3)
 8009ece:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009ed2:	1f11      	subs	r1, r2, #4
 8009ed4:	430b      	orrs	r3, r1
 8009ed6:	d13f      	bne.n	8009f58 <HAL_RCCEx_GetPeriphCLKFreq+0x580>
  {
    /* Get the current USART3 source */
    srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8009ed8:	4b1b      	ldr	r3, [pc, #108]	@ (8009f48 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8009eda:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009ede:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8009ee2:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 8009ee4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ee6:	2b00      	cmp	r3, #0
 8009ee8:	d104      	bne.n	8009ef4 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8009eea:	f7fe fac9 	bl	8008480 <HAL_RCC_GetPCLK1Freq>
 8009eee:	6378      	str	r0, [r7, #52]	@ 0x34
 8009ef0:	f000 bf1a 	b.w	800ad28 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_USART3CLKSOURCE_SYSCLK)
 8009ef4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ef6:	2b10      	cmp	r3, #16
 8009ef8:	d104      	bne.n	8009f04 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8009efa:	f7fe f9a5 	bl	8008248 <HAL_RCC_GetSysClockFreq>
 8009efe:	6378      	str	r0, [r7, #52]	@ 0x34
 8009f00:	f000 bf12 	b.w	800ad28 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 8009f04:	4b10      	ldr	r3, [pc, #64]	@ (8009f48 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8009f06:	681b      	ldr	r3, [r3, #0]
 8009f08:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009f0c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009f10:	d106      	bne.n	8009f20 <HAL_RCCEx_GetPeriphCLKFreq+0x548>
 8009f12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f14:	2b20      	cmp	r3, #32
 8009f16:	d103      	bne.n	8009f20 <HAL_RCCEx_GetPeriphCLKFreq+0x548>
    {
      frequency = HSI_VALUE;
 8009f18:	4b0e      	ldr	r3, [pc, #56]	@ (8009f54 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 8009f1a:	637b      	str	r3, [r7, #52]	@ 0x34
 8009f1c:	f000 bf04 	b.w	800ad28 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 8009f20:	4b09      	ldr	r3, [pc, #36]	@ (8009f48 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8009f22:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009f26:	f003 0302 	and.w	r3, r3, #2
 8009f2a:	2b02      	cmp	r3, #2
 8009f2c:	d107      	bne.n	8009f3e <HAL_RCCEx_GetPeriphCLKFreq+0x566>
 8009f2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f30:	2b30      	cmp	r3, #48	@ 0x30
 8009f32:	d104      	bne.n	8009f3e <HAL_RCCEx_GetPeriphCLKFreq+0x566>
    {
      frequency = LSE_VALUE;
 8009f34:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009f38:	637b      	str	r3, [r7, #52]	@ 0x34
 8009f3a:	f000 bef5 	b.w	800ad28 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for USART3 */
    else
    {
      frequency = 0U;
 8009f3e:	2300      	movs	r3, #0
 8009f40:	637b      	str	r3, [r7, #52]	@ 0x34
 8009f42:	f000 bef1 	b.w	800ad28 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
 8009f46:	bf00      	nop
 8009f48:	46020c00 	.word	0x46020c00
 8009f4c:	08010f0c 	.word	0x08010f0c
 8009f50:	02dc6c00 	.word	0x02dc6c00
 8009f54:	00f42400 	.word	0x00f42400
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART4)
 8009f58:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009f5c:	f1a2 0108 	sub.w	r1, r2, #8
 8009f60:	430b      	orrs	r3, r1
 8009f62:	d136      	bne.n	8009fd2 <HAL_RCCEx_GetPeriphCLKFreq+0x5fa>
  {
    /* Get the current UART4 source */
    srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8009f64:	4ba4      	ldr	r3, [pc, #656]	@ (800a1f8 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8009f66:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009f6a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8009f6e:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 8009f70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f72:	2b00      	cmp	r3, #0
 8009f74:	d104      	bne.n	8009f80 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8009f76:	f7fe fa83 	bl	8008480 <HAL_RCC_GetPCLK1Freq>
 8009f7a:	6378      	str	r0, [r7, #52]	@ 0x34
 8009f7c:	f000 bed4 	b.w	800ad28 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_UART4CLKSOURCE_SYSCLK)
 8009f80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f82:	2b40      	cmp	r3, #64	@ 0x40
 8009f84:	d104      	bne.n	8009f90 <HAL_RCCEx_GetPeriphCLKFreq+0x5b8>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8009f86:	f7fe f95f 	bl	8008248 <HAL_RCC_GetSysClockFreq>
 8009f8a:	6378      	str	r0, [r7, #52]	@ 0x34
 8009f8c:	f000 becc 	b.w	800ad28 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 8009f90:	4b99      	ldr	r3, [pc, #612]	@ (800a1f8 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8009f92:	681b      	ldr	r3, [r3, #0]
 8009f94:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009f98:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009f9c:	d106      	bne.n	8009fac <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>
 8009f9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009fa0:	2b80      	cmp	r3, #128	@ 0x80
 8009fa2:	d103      	bne.n	8009fac <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>
    {
      frequency = HSI_VALUE;
 8009fa4:	4b95      	ldr	r3, [pc, #596]	@ (800a1fc <HAL_RCCEx_GetPeriphCLKFreq+0x824>)
 8009fa6:	637b      	str	r3, [r7, #52]	@ 0x34
 8009fa8:	f000 bebe 	b.w	800ad28 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 8009fac:	4b92      	ldr	r3, [pc, #584]	@ (800a1f8 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8009fae:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009fb2:	f003 0302 	and.w	r3, r3, #2
 8009fb6:	2b02      	cmp	r3, #2
 8009fb8:	d107      	bne.n	8009fca <HAL_RCCEx_GetPeriphCLKFreq+0x5f2>
 8009fba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009fbc:	2bc0      	cmp	r3, #192	@ 0xc0
 8009fbe:	d104      	bne.n	8009fca <HAL_RCCEx_GetPeriphCLKFreq+0x5f2>
    {
      frequency = LSE_VALUE;
 8009fc0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009fc4:	637b      	str	r3, [r7, #52]	@ 0x34
 8009fc6:	f000 beaf 	b.w	800ad28 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for UART4 */
    else
    {
      frequency = 0U;
 8009fca:	2300      	movs	r3, #0
 8009fcc:	637b      	str	r3, [r7, #52]	@ 0x34
 8009fce:	f000 beab 	b.w	800ad28 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART5)
 8009fd2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009fd6:	f1a2 0110 	sub.w	r1, r2, #16
 8009fda:	430b      	orrs	r3, r1
 8009fdc:	d139      	bne.n	800a052 <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
  {
    /* Get the current UART5 source */
    srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8009fde:	4b86      	ldr	r3, [pc, #536]	@ (800a1f8 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8009fe0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009fe4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009fe8:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 8009fea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009fec:	2b00      	cmp	r3, #0
 8009fee:	d104      	bne.n	8009ffa <HAL_RCCEx_GetPeriphCLKFreq+0x622>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8009ff0:	f7fe fa46 	bl	8008480 <HAL_RCC_GetPCLK1Freq>
 8009ff4:	6378      	str	r0, [r7, #52]	@ 0x34
 8009ff6:	f000 be97 	b.w	800ad28 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_UART5CLKSOURCE_SYSCLK)
 8009ffa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ffc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a000:	d104      	bne.n	800a00c <HAL_RCCEx_GetPeriphCLKFreq+0x634>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800a002:	f7fe f921 	bl	8008248 <HAL_RCC_GetSysClockFreq>
 800a006:	6378      	str	r0, [r7, #52]	@ 0x34
 800a008:	f000 be8e 	b.w	800ad28 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 800a00c:	4b7a      	ldr	r3, [pc, #488]	@ (800a1f8 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 800a00e:	681b      	ldr	r3, [r3, #0]
 800a010:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a014:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a018:	d107      	bne.n	800a02a <HAL_RCCEx_GetPeriphCLKFreq+0x652>
 800a01a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a01c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a020:	d103      	bne.n	800a02a <HAL_RCCEx_GetPeriphCLKFreq+0x652>
    {
      frequency = HSI_VALUE;
 800a022:	4b76      	ldr	r3, [pc, #472]	@ (800a1fc <HAL_RCCEx_GetPeriphCLKFreq+0x824>)
 800a024:	637b      	str	r3, [r7, #52]	@ 0x34
 800a026:	f000 be7f 	b.w	800ad28 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 800a02a:	4b73      	ldr	r3, [pc, #460]	@ (800a1f8 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 800a02c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a030:	f003 0302 	and.w	r3, r3, #2
 800a034:	2b02      	cmp	r3, #2
 800a036:	d108      	bne.n	800a04a <HAL_RCCEx_GetPeriphCLKFreq+0x672>
 800a038:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a03a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a03e:	d104      	bne.n	800a04a <HAL_RCCEx_GetPeriphCLKFreq+0x672>
    {
      frequency = LSE_VALUE;
 800a040:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a044:	637b      	str	r3, [r7, #52]	@ 0x34
 800a046:	f000 be6f 	b.w	800ad28 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for UART5 */
    else
    {
      frequency = 0U;
 800a04a:	2300      	movs	r3, #0
 800a04c:	637b      	str	r3, [r7, #52]	@ 0x34
 800a04e:	f000 be6b 	b.w	800ad28 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    {
      frequency = 0U;
    }
  }
#endif /* USART6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPUART1)
 800a052:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a056:	f1a2 0120 	sub.w	r1, r2, #32
 800a05a:	430b      	orrs	r3, r1
 800a05c:	d158      	bne.n	800a110 <HAL_RCCEx_GetPeriphCLKFreq+0x738>
  {
    /* Get the current LPUART1 source */
    srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 800a05e:	4b66      	ldr	r3, [pc, #408]	@ (800a1f8 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 800a060:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800a064:	f003 0307 	and.w	r3, r3, #7
 800a068:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 800a06a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a06c:	2b00      	cmp	r3, #0
 800a06e:	d104      	bne.n	800a07a <HAL_RCCEx_GetPeriphCLKFreq+0x6a2>
    {
      frequency = HAL_RCC_GetPCLK3Freq();
 800a070:	f7fe fa2e 	bl	80084d0 <HAL_RCC_GetPCLK3Freq>
 800a074:	6378      	str	r0, [r7, #52]	@ 0x34
 800a076:	f000 be57 	b.w	800ad28 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 800a07a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a07c:	2b01      	cmp	r3, #1
 800a07e:	d104      	bne.n	800a08a <HAL_RCCEx_GetPeriphCLKFreq+0x6b2>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800a080:	f7fe f8e2 	bl	8008248 <HAL_RCC_GetSysClockFreq>
 800a084:	6378      	str	r0, [r7, #52]	@ 0x34
 800a086:	f000 be4f 	b.w	800ad28 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 800a08a:	4b5b      	ldr	r3, [pc, #364]	@ (800a1f8 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 800a08c:	681b      	ldr	r3, [r3, #0]
 800a08e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a092:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a096:	d106      	bne.n	800a0a6 <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
 800a098:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a09a:	2b02      	cmp	r3, #2
 800a09c:	d103      	bne.n	800a0a6 <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
    {
      frequency = HSI_VALUE;
 800a09e:	4b57      	ldr	r3, [pc, #348]	@ (800a1fc <HAL_RCCEx_GetPeriphCLKFreq+0x824>)
 800a0a0:	637b      	str	r3, [r7, #52]	@ 0x34
 800a0a2:	f000 be41 	b.w	800ad28 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 800a0a6:	4b54      	ldr	r3, [pc, #336]	@ (800a1f8 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 800a0a8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a0ac:	f003 0302 	and.w	r3, r3, #2
 800a0b0:	2b02      	cmp	r3, #2
 800a0b2:	d107      	bne.n	800a0c4 <HAL_RCCEx_GetPeriphCLKFreq+0x6ec>
 800a0b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a0b6:	2b03      	cmp	r3, #3
 800a0b8:	d104      	bne.n	800a0c4 <HAL_RCCEx_GetPeriphCLKFreq+0x6ec>
    {
      frequency = LSE_VALUE;
 800a0ba:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a0be:	637b      	str	r3, [r7, #52]	@ 0x34
 800a0c0:	f000 be32 	b.w	800ad28 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_MSIK))
 800a0c4:	4b4c      	ldr	r3, [pc, #304]	@ (800a1f8 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 800a0c6:	681b      	ldr	r3, [r3, #0]
 800a0c8:	f003 0320 	and.w	r3, r3, #32
 800a0cc:	2b20      	cmp	r3, #32
 800a0ce:	d11b      	bne.n	800a108 <HAL_RCCEx_GetPeriphCLKFreq+0x730>
 800a0d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a0d2:	2b04      	cmp	r3, #4
 800a0d4:	d118      	bne.n	800a108 <HAL_RCCEx_GetPeriphCLKFreq+0x730>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800a0d6:	4b48      	ldr	r3, [pc, #288]	@ (800a1f8 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 800a0d8:	689b      	ldr	r3, [r3, #8]
 800a0da:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a0de:	2b00      	cmp	r3, #0
 800a0e0:	d005      	beq.n	800a0ee <HAL_RCCEx_GetPeriphCLKFreq+0x716>
 800a0e2:	4b45      	ldr	r3, [pc, #276]	@ (800a1f8 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 800a0e4:	689b      	ldr	r3, [r3, #8]
 800a0e6:	0e1b      	lsrs	r3, r3, #24
 800a0e8:	f003 030f 	and.w	r3, r3, #15
 800a0ec:	e006      	b.n	800a0fc <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 800a0ee:	4b42      	ldr	r3, [pc, #264]	@ (800a1f8 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 800a0f0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800a0f4:	041b      	lsls	r3, r3, #16
 800a0f6:	0e1b      	lsrs	r3, r3, #24
 800a0f8:	f003 030f 	and.w	r3, r3, #15
 800a0fc:	4a40      	ldr	r2, [pc, #256]	@ (800a200 <HAL_RCCEx_GetPeriphCLKFreq+0x828>)
 800a0fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a102:	637b      	str	r3, [r7, #52]	@ 0x34
 800a104:	f000 be10 	b.w	800ad28 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for LPUART1 */
    else
    {
      frequency = 0U;
 800a108:	2300      	movs	r3, #0
 800a10a:	637b      	str	r3, [r7, #52]	@ 0x34
 800a10c:	f000 be0c 	b.w	800ad28 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADCDAC)
 800a110:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a114:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 800a118:	430b      	orrs	r3, r1
 800a11a:	d173      	bne.n	800a204 <HAL_RCCEx_GetPeriphCLKFreq+0x82c>
  {
    srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 800a11c:	4b36      	ldr	r3, [pc, #216]	@ (800a1f8 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 800a11e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800a122:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800a126:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 800a128:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a12a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a12e:	d104      	bne.n	800a13a <HAL_RCCEx_GetPeriphCLKFreq+0x762>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800a130:	f7fe f88a 	bl	8008248 <HAL_RCC_GetSysClockFreq>
 800a134:	6378      	str	r0, [r7, #52]	@ 0x34
 800a136:	f000 bdf7 	b.w	800ad28 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2)
 800a13a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a13c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a140:	d108      	bne.n	800a154 <HAL_RCCEx_GetPeriphCLKFreq+0x77c>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a142:	f107 0318 	add.w	r3, r7, #24
 800a146:	4618      	mov	r0, r3
 800a148:	f7ff f992 	bl	8009470 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_R_Frequency;
 800a14c:	6a3b      	ldr	r3, [r7, #32]
 800a14e:	637b      	str	r3, [r7, #52]	@ 0x34
 800a150:	f000 bdea 	b.w	800ad28 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 800a154:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a156:	2b00      	cmp	r3, #0
 800a158:	d104      	bne.n	800a164 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>
    {
      frequency = HAL_RCC_GetHCLKFreq();
 800a15a:	f7fe f977 	bl	800844c <HAL_RCC_GetHCLKFreq>
 800a15e:	6378      	str	r0, [r7, #52]	@ 0x34
 800a160:	f000 bde2 	b.w	800ad28 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_MSIK)
 800a164:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a166:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800a16a:	d122      	bne.n	800a1b2 <HAL_RCCEx_GetPeriphCLKFreq+0x7da>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800a16c:	4b22      	ldr	r3, [pc, #136]	@ (800a1f8 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 800a16e:	681b      	ldr	r3, [r3, #0]
 800a170:	f003 0320 	and.w	r3, r3, #32
 800a174:	2b20      	cmp	r3, #32
 800a176:	d118      	bne.n	800a1aa <HAL_RCCEx_GetPeriphCLKFreq+0x7d2>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800a178:	4b1f      	ldr	r3, [pc, #124]	@ (800a1f8 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 800a17a:	689b      	ldr	r3, [r3, #8]
 800a17c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a180:	2b00      	cmp	r3, #0
 800a182:	d005      	beq.n	800a190 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
 800a184:	4b1c      	ldr	r3, [pc, #112]	@ (800a1f8 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 800a186:	689b      	ldr	r3, [r3, #8]
 800a188:	0e1b      	lsrs	r3, r3, #24
 800a18a:	f003 030f 	and.w	r3, r3, #15
 800a18e:	e006      	b.n	800a19e <HAL_RCCEx_GetPeriphCLKFreq+0x7c6>
 800a190:	4b19      	ldr	r3, [pc, #100]	@ (800a1f8 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 800a192:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800a196:	041b      	lsls	r3, r3, #16
 800a198:	0e1b      	lsrs	r3, r3, #24
 800a19a:	f003 030f 	and.w	r3, r3, #15
 800a19e:	4a18      	ldr	r2, [pc, #96]	@ (800a200 <HAL_RCCEx_GetPeriphCLKFreq+0x828>)
 800a1a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a1a4:	637b      	str	r3, [r7, #52]	@ 0x34
 800a1a6:	f000 bdbf 	b.w	800ad28 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = 0U;
 800a1aa:	2300      	movs	r3, #0
 800a1ac:	637b      	str	r3, [r7, #52]	@ 0x34
 800a1ae:	f000 bdbb 	b.w	800ad28 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 800a1b2:	4b11      	ldr	r3, [pc, #68]	@ (800a1f8 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 800a1b4:	681b      	ldr	r3, [r3, #0]
 800a1b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a1ba:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a1be:	d107      	bne.n	800a1d0 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>
 800a1c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a1c2:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800a1c6:	d103      	bne.n	800a1d0 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>
    {
      frequency = HSE_VALUE;
 800a1c8:	4b0c      	ldr	r3, [pc, #48]	@ (800a1fc <HAL_RCCEx_GetPeriphCLKFreq+0x824>)
 800a1ca:	637b      	str	r3, [r7, #52]	@ 0x34
 800a1cc:	f000 bdac 	b.w	800ad28 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 800a1d0:	4b09      	ldr	r3, [pc, #36]	@ (800a1f8 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 800a1d2:	681b      	ldr	r3, [r3, #0]
 800a1d4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a1d8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a1dc:	d107      	bne.n	800a1ee <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 800a1de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a1e0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a1e4:	d103      	bne.n	800a1ee <HAL_RCCEx_GetPeriphCLKFreq+0x816>
    {
      frequency = HSI_VALUE;
 800a1e6:	4b05      	ldr	r3, [pc, #20]	@ (800a1fc <HAL_RCCEx_GetPeriphCLKFreq+0x824>)
 800a1e8:	637b      	str	r3, [r7, #52]	@ 0x34
 800a1ea:	f000 bd9d 	b.w	800ad28 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for ADC */
    else
    {
      frequency = 0U;
 800a1ee:	2300      	movs	r3, #0
 800a1f0:	637b      	str	r3, [r7, #52]	@ 0x34
 800a1f2:	f000 bd99 	b.w	800ad28 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
 800a1f6:	bf00      	nop
 800a1f8:	46020c00 	.word	0x46020c00
 800a1fc:	00f42400 	.word	0x00f42400
 800a200:	08010f0c 	.word	0x08010f0c
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_MDF1)
 800a204:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a208:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 800a20c:	430b      	orrs	r3, r1
 800a20e:	d158      	bne.n	800a2c2 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
  {
    /* Get the current MDF1 source */
    srcclk = __HAL_RCC_GET_MDF1_SOURCE();
 800a210:	4bad      	ldr	r3, [pc, #692]	@ (800a4c8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 800a212:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800a216:	f003 0307 	and.w	r3, r3, #7
 800a21a:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800a21c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a21e:	2b04      	cmp	r3, #4
 800a220:	d84b      	bhi.n	800a2ba <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800a222:	a201      	add	r2, pc, #4	@ (adr r2, 800a228 <HAL_RCCEx_GetPeriphCLKFreq+0x850>)
 800a224:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a228:	0800a261 	.word	0x0800a261
 800a22c:	0800a23d 	.word	0x0800a23d
 800a230:	0800a24f 	.word	0x0800a24f
 800a234:	0800a26b 	.word	0x0800a26b
 800a238:	0800a275 	.word	0x0800a275
    {
      case RCC_MDF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a23c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a240:	4618      	mov	r0, r3
 800a242:	f7fe ffbb 	bl	80091bc <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800a246:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a248:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a24a:	f000 bd6d 	b.w	800ad28 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_MDF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a24e:	f107 030c 	add.w	r3, r7, #12
 800a252:	4618      	mov	r0, r3
 800a254:	f7ff fa66 	bl	8009724 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 800a258:	693b      	ldr	r3, [r7, #16]
 800a25a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a25c:	f000 bd64 	b.w	800ad28 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_MDF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 800a260:	f7fe f8f4 	bl	800844c <HAL_RCC_GetHCLKFreq>
 800a264:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800a266:	f000 bd5f 	b.w	800ad28 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_MDF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800a26a:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 800a26e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a270:	f000 bd5a 	b.w	800ad28 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_MDF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800a274:	4b94      	ldr	r3, [pc, #592]	@ (800a4c8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 800a276:	681b      	ldr	r3, [r3, #0]
 800a278:	f003 0320 	and.w	r3, r3, #32
 800a27c:	2b20      	cmp	r3, #32
 800a27e:	d118      	bne.n	800a2b2 <HAL_RCCEx_GetPeriphCLKFreq+0x8da>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800a280:	4b91      	ldr	r3, [pc, #580]	@ (800a4c8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 800a282:	689b      	ldr	r3, [r3, #8]
 800a284:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a288:	2b00      	cmp	r3, #0
 800a28a:	d005      	beq.n	800a298 <HAL_RCCEx_GetPeriphCLKFreq+0x8c0>
 800a28c:	4b8e      	ldr	r3, [pc, #568]	@ (800a4c8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 800a28e:	689b      	ldr	r3, [r3, #8]
 800a290:	0e1b      	lsrs	r3, r3, #24
 800a292:	f003 030f 	and.w	r3, r3, #15
 800a296:	e006      	b.n	800a2a6 <HAL_RCCEx_GetPeriphCLKFreq+0x8ce>
 800a298:	4b8b      	ldr	r3, [pc, #556]	@ (800a4c8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 800a29a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800a29e:	041b      	lsls	r3, r3, #16
 800a2a0:	0e1b      	lsrs	r3, r3, #24
 800a2a2:	f003 030f 	and.w	r3, r3, #15
 800a2a6:	4a89      	ldr	r2, [pc, #548]	@ (800a4cc <HAL_RCCEx_GetPeriphCLKFreq+0xaf4>)
 800a2a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a2ac:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800a2ae:	f000 bd3b 	b.w	800ad28 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 800a2b2:	2300      	movs	r3, #0
 800a2b4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a2b6:	f000 bd37 	b.w	800ad28 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default:

        frequency = 0U;
 800a2ba:	2300      	movs	r3, #0
 800a2bc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a2be:	f000 bd33 	b.w	800ad28 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADF1)
 800a2c2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a2c6:	f5a2 3100 	sub.w	r1, r2, #131072	@ 0x20000
 800a2ca:	430b      	orrs	r3, r1
 800a2cc:	d167      	bne.n	800a39e <HAL_RCCEx_GetPeriphCLKFreq+0x9c6>
  {
    /* Get the current ADF1 source */
    srcclk = __HAL_RCC_GET_ADF1_SOURCE();
 800a2ce:	4b7e      	ldr	r3, [pc, #504]	@ (800a4c8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 800a2d0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800a2d4:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 800a2d8:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800a2da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a2dc:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800a2e0:	d036      	beq.n	800a350 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
 800a2e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a2e4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800a2e8:	d855      	bhi.n	800a396 <HAL_RCCEx_GetPeriphCLKFreq+0x9be>
 800a2ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a2ec:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800a2f0:	d029      	beq.n	800a346 <HAL_RCCEx_GetPeriphCLKFreq+0x96e>
 800a2f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a2f4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800a2f8:	d84d      	bhi.n	800a396 <HAL_RCCEx_GetPeriphCLKFreq+0x9be>
 800a2fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a2fc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a300:	d013      	beq.n	800a32a <HAL_RCCEx_GetPeriphCLKFreq+0x952>
 800a302:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a304:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a308:	d845      	bhi.n	800a396 <HAL_RCCEx_GetPeriphCLKFreq+0x9be>
 800a30a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a30c:	2b00      	cmp	r3, #0
 800a30e:	d015      	beq.n	800a33c <HAL_RCCEx_GetPeriphCLKFreq+0x964>
 800a310:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a312:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a316:	d13e      	bne.n	800a396 <HAL_RCCEx_GetPeriphCLKFreq+0x9be>
    {
      case RCC_ADF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a318:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a31c:	4618      	mov	r0, r3
 800a31e:	f7fe ff4d 	bl	80091bc <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800a322:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a324:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a326:	f000 bcff 	b.w	800ad28 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_ADF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a32a:	f107 030c 	add.w	r3, r7, #12
 800a32e:	4618      	mov	r0, r3
 800a330:	f7ff f9f8 	bl	8009724 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 800a334:	693b      	ldr	r3, [r7, #16]
 800a336:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a338:	f000 bcf6 	b.w	800ad28 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_ADF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 800a33c:	f7fe f886 	bl	800844c <HAL_RCC_GetHCLKFreq>
 800a340:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800a342:	f000 bcf1 	b.w	800ad28 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_ADF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800a346:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 800a34a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a34c:	f000 bcec 	b.w	800ad28 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_ADF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800a350:	4b5d      	ldr	r3, [pc, #372]	@ (800a4c8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 800a352:	681b      	ldr	r3, [r3, #0]
 800a354:	f003 0320 	and.w	r3, r3, #32
 800a358:	2b20      	cmp	r3, #32
 800a35a:	d118      	bne.n	800a38e <HAL_RCCEx_GetPeriphCLKFreq+0x9b6>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800a35c:	4b5a      	ldr	r3, [pc, #360]	@ (800a4c8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 800a35e:	689b      	ldr	r3, [r3, #8]
 800a360:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a364:	2b00      	cmp	r3, #0
 800a366:	d005      	beq.n	800a374 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>
 800a368:	4b57      	ldr	r3, [pc, #348]	@ (800a4c8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 800a36a:	689b      	ldr	r3, [r3, #8]
 800a36c:	0e1b      	lsrs	r3, r3, #24
 800a36e:	f003 030f 	and.w	r3, r3, #15
 800a372:	e006      	b.n	800a382 <HAL_RCCEx_GetPeriphCLKFreq+0x9aa>
 800a374:	4b54      	ldr	r3, [pc, #336]	@ (800a4c8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 800a376:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800a37a:	041b      	lsls	r3, r3, #16
 800a37c:	0e1b      	lsrs	r3, r3, #24
 800a37e:	f003 030f 	and.w	r3, r3, #15
 800a382:	4a52      	ldr	r2, [pc, #328]	@ (800a4cc <HAL_RCCEx_GetPeriphCLKFreq+0xaf4>)
 800a384:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a388:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800a38a:	f000 bccd 	b.w	800ad28 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 800a38e:	2300      	movs	r3, #0
 800a390:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a392:	f000 bcc9 	b.w	800ad28 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default:

        frequency = 0U;
 800a396:	2300      	movs	r3, #0
 800a398:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a39a:	f000 bcc5 	b.w	800ad28 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C1)
 800a39e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a3a2:	f1a2 0140 	sub.w	r1, r2, #64	@ 0x40
 800a3a6:	430b      	orrs	r3, r1
 800a3a8:	d14c      	bne.n	800a444 <HAL_RCCEx_GetPeriphCLKFreq+0xa6c>
  {
    /* Get the current I2C1 source */
    srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 800a3aa:	4b47      	ldr	r3, [pc, #284]	@ (800a4c8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 800a3ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800a3b0:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800a3b4:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 800a3b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a3b8:	2b00      	cmp	r3, #0
 800a3ba:	d104      	bne.n	800a3c6 <HAL_RCCEx_GetPeriphCLKFreq+0x9ee>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800a3bc:	f7fe f860 	bl	8008480 <HAL_RCC_GetPCLK1Freq>
 800a3c0:	6378      	str	r0, [r7, #52]	@ 0x34
 800a3c2:	f000 bcb1 	b.w	800ad28 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 800a3c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a3c8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a3cc:	d104      	bne.n	800a3d8 <HAL_RCCEx_GetPeriphCLKFreq+0xa00>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800a3ce:	f7fd ff3b 	bl	8008248 <HAL_RCC_GetSysClockFreq>
 800a3d2:	6378      	str	r0, [r7, #52]	@ 0x34
 800a3d4:	f000 bca8 	b.w	800ad28 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 800a3d8:	4b3b      	ldr	r3, [pc, #236]	@ (800a4c8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 800a3da:	681b      	ldr	r3, [r3, #0]
 800a3dc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a3e0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a3e4:	d107      	bne.n	800a3f6 <HAL_RCCEx_GetPeriphCLKFreq+0xa1e>
 800a3e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a3e8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a3ec:	d103      	bne.n	800a3f6 <HAL_RCCEx_GetPeriphCLKFreq+0xa1e>
    {
      frequency = HSI_VALUE;
 800a3ee:	4b38      	ldr	r3, [pc, #224]	@ (800a4d0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800a3f0:	637b      	str	r3, [r7, #52]	@ 0x34
 800a3f2:	f000 bc99 	b.w	800ad28 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C1CLKSOURCE_MSIK))
 800a3f6:	4b34      	ldr	r3, [pc, #208]	@ (800a4c8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 800a3f8:	681b      	ldr	r3, [r3, #0]
 800a3fa:	f003 0320 	and.w	r3, r3, #32
 800a3fe:	2b20      	cmp	r3, #32
 800a400:	d11c      	bne.n	800a43c <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
 800a402:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a404:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800a408:	d118      	bne.n	800a43c <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800a40a:	4b2f      	ldr	r3, [pc, #188]	@ (800a4c8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 800a40c:	689b      	ldr	r3, [r3, #8]
 800a40e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a412:	2b00      	cmp	r3, #0
 800a414:	d005      	beq.n	800a422 <HAL_RCCEx_GetPeriphCLKFreq+0xa4a>
 800a416:	4b2c      	ldr	r3, [pc, #176]	@ (800a4c8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 800a418:	689b      	ldr	r3, [r3, #8]
 800a41a:	0e1b      	lsrs	r3, r3, #24
 800a41c:	f003 030f 	and.w	r3, r3, #15
 800a420:	e006      	b.n	800a430 <HAL_RCCEx_GetPeriphCLKFreq+0xa58>
 800a422:	4b29      	ldr	r3, [pc, #164]	@ (800a4c8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 800a424:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800a428:	041b      	lsls	r3, r3, #16
 800a42a:	0e1b      	lsrs	r3, r3, #24
 800a42c:	f003 030f 	and.w	r3, r3, #15
 800a430:	4a26      	ldr	r2, [pc, #152]	@ (800a4cc <HAL_RCCEx_GetPeriphCLKFreq+0xaf4>)
 800a432:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a436:	637b      	str	r3, [r7, #52]	@ 0x34
 800a438:	f000 bc76 	b.w	800ad28 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for I2C1 */
    else
    {
      frequency = 0U;
 800a43c:	2300      	movs	r3, #0
 800a43e:	637b      	str	r3, [r7, #52]	@ 0x34
 800a440:	f000 bc72 	b.w	800ad28 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C2)
 800a444:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a448:	f1a2 0180 	sub.w	r1, r2, #128	@ 0x80
 800a44c:	430b      	orrs	r3, r1
 800a44e:	d152      	bne.n	800a4f6 <HAL_RCCEx_GetPeriphCLKFreq+0xb1e>
  {
    /* Get the current I2C2 source */
    srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 800a450:	4b1d      	ldr	r3, [pc, #116]	@ (800a4c8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 800a452:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800a456:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800a45a:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 800a45c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a45e:	2b00      	cmp	r3, #0
 800a460:	d104      	bne.n	800a46c <HAL_RCCEx_GetPeriphCLKFreq+0xa94>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800a462:	f7fe f80d 	bl	8008480 <HAL_RCC_GetPCLK1Freq>
 800a466:	6378      	str	r0, [r7, #52]	@ 0x34
 800a468:	f000 bc5e 	b.w	800ad28 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_I2C2CLKSOURCE_SYSCLK)
 800a46c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a46e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a472:	d104      	bne.n	800a47e <HAL_RCCEx_GetPeriphCLKFreq+0xaa6>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800a474:	f7fd fee8 	bl	8008248 <HAL_RCC_GetSysClockFreq>
 800a478:	6378      	str	r0, [r7, #52]	@ 0x34
 800a47a:	f000 bc55 	b.w	800ad28 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 800a47e:	4b12      	ldr	r3, [pc, #72]	@ (800a4c8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 800a480:	681b      	ldr	r3, [r3, #0]
 800a482:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a486:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a48a:	d107      	bne.n	800a49c <HAL_RCCEx_GetPeriphCLKFreq+0xac4>
 800a48c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a48e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a492:	d103      	bne.n	800a49c <HAL_RCCEx_GetPeriphCLKFreq+0xac4>
    {
      frequency = HSI_VALUE;
 800a494:	4b0e      	ldr	r3, [pc, #56]	@ (800a4d0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800a496:	637b      	str	r3, [r7, #52]	@ 0x34
 800a498:	f000 bc46 	b.w	800ad28 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C2CLKSOURCE_MSIK))
 800a49c:	4b0a      	ldr	r3, [pc, #40]	@ (800a4c8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 800a49e:	681b      	ldr	r3, [r3, #0]
 800a4a0:	f003 0320 	and.w	r3, r3, #32
 800a4a4:	2b20      	cmp	r3, #32
 800a4a6:	d122      	bne.n	800a4ee <HAL_RCCEx_GetPeriphCLKFreq+0xb16>
 800a4a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a4aa:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800a4ae:	d11e      	bne.n	800a4ee <HAL_RCCEx_GetPeriphCLKFreq+0xb16>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800a4b0:	4b05      	ldr	r3, [pc, #20]	@ (800a4c8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 800a4b2:	689b      	ldr	r3, [r3, #8]
 800a4b4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a4b8:	2b00      	cmp	r3, #0
 800a4ba:	d00b      	beq.n	800a4d4 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>
 800a4bc:	4b02      	ldr	r3, [pc, #8]	@ (800a4c8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 800a4be:	689b      	ldr	r3, [r3, #8]
 800a4c0:	0e1b      	lsrs	r3, r3, #24
 800a4c2:	f003 030f 	and.w	r3, r3, #15
 800a4c6:	e00c      	b.n	800a4e2 <HAL_RCCEx_GetPeriphCLKFreq+0xb0a>
 800a4c8:	46020c00 	.word	0x46020c00
 800a4cc:	08010f0c 	.word	0x08010f0c
 800a4d0:	00f42400 	.word	0x00f42400
 800a4d4:	4ba1      	ldr	r3, [pc, #644]	@ (800a75c <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 800a4d6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800a4da:	041b      	lsls	r3, r3, #16
 800a4dc:	0e1b      	lsrs	r3, r3, #24
 800a4de:	f003 030f 	and.w	r3, r3, #15
 800a4e2:	4a9f      	ldr	r2, [pc, #636]	@ (800a760 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800a4e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a4e8:	637b      	str	r3, [r7, #52]	@ 0x34
 800a4ea:	f000 bc1d 	b.w	800ad28 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for I2C2 */
    else
    {
      frequency = 0U;
 800a4ee:	2300      	movs	r3, #0
 800a4f0:	637b      	str	r3, [r7, #52]	@ 0x34
 800a4f2:	f000 bc19 	b.w	800ad28 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C3)
 800a4f6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a4fa:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 800a4fe:	430b      	orrs	r3, r1
 800a500:	d151      	bne.n	800a5a6 <HAL_RCCEx_GetPeriphCLKFreq+0xbce>
  {
    /* Get the current I2C3 source */
    srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 800a502:	4b96      	ldr	r3, [pc, #600]	@ (800a75c <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 800a504:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800a508:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800a50c:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800a50e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a510:	2bc0      	cmp	r3, #192	@ 0xc0
 800a512:	d024      	beq.n	800a55e <HAL_RCCEx_GetPeriphCLKFreq+0xb86>
 800a514:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a516:	2bc0      	cmp	r3, #192	@ 0xc0
 800a518:	d842      	bhi.n	800a5a0 <HAL_RCCEx_GetPeriphCLKFreq+0xbc8>
 800a51a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a51c:	2b80      	cmp	r3, #128	@ 0x80
 800a51e:	d00d      	beq.n	800a53c <HAL_RCCEx_GetPeriphCLKFreq+0xb64>
 800a520:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a522:	2b80      	cmp	r3, #128	@ 0x80
 800a524:	d83c      	bhi.n	800a5a0 <HAL_RCCEx_GetPeriphCLKFreq+0xbc8>
 800a526:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a528:	2b00      	cmp	r3, #0
 800a52a:	d003      	beq.n	800a534 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
 800a52c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a52e:	2b40      	cmp	r3, #64	@ 0x40
 800a530:	d011      	beq.n	800a556 <HAL_RCCEx_GetPeriphCLKFreq+0xb7e>
 800a532:	e035      	b.n	800a5a0 <HAL_RCCEx_GetPeriphCLKFreq+0xbc8>
    {
      case RCC_I2C3CLKSOURCE_PCLK3:
      {
        frequency = HAL_RCC_GetPCLK3Freq();
 800a534:	f7fd ffcc 	bl	80084d0 <HAL_RCC_GetPCLK3Freq>
 800a538:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800a53a:	e3f5      	b.n	800ad28 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      case RCC_I2C3CLKSOURCE_HSI:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800a53c:	4b87      	ldr	r3, [pc, #540]	@ (800a75c <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 800a53e:	681b      	ldr	r3, [r3, #0]
 800a540:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a544:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a548:	d102      	bne.n	800a550 <HAL_RCCEx_GetPeriphCLKFreq+0xb78>
        {
          frequency = HSI_VALUE;
 800a54a:	4b86      	ldr	r3, [pc, #536]	@ (800a764 <HAL_RCCEx_GetPeriphCLKFreq+0xd8c>)
 800a54c:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800a54e:	e3eb      	b.n	800ad28 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 800a550:	2300      	movs	r3, #0
 800a552:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a554:	e3e8      	b.n	800ad28 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      case RCC_I2C3CLKSOURCE_SYSCLK:
      {
        frequency = HAL_RCC_GetSysClockFreq();
 800a556:	f7fd fe77 	bl	8008248 <HAL_RCC_GetSysClockFreq>
 800a55a:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800a55c:	e3e4      	b.n	800ad28 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      case RCC_I2C3CLKSOURCE_MSIK:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800a55e:	4b7f      	ldr	r3, [pc, #508]	@ (800a75c <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 800a560:	681b      	ldr	r3, [r3, #0]
 800a562:	f003 0320 	and.w	r3, r3, #32
 800a566:	2b20      	cmp	r3, #32
 800a568:	d117      	bne.n	800a59a <HAL_RCCEx_GetPeriphCLKFreq+0xbc2>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800a56a:	4b7c      	ldr	r3, [pc, #496]	@ (800a75c <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 800a56c:	689b      	ldr	r3, [r3, #8]
 800a56e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a572:	2b00      	cmp	r3, #0
 800a574:	d005      	beq.n	800a582 <HAL_RCCEx_GetPeriphCLKFreq+0xbaa>
 800a576:	4b79      	ldr	r3, [pc, #484]	@ (800a75c <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 800a578:	689b      	ldr	r3, [r3, #8]
 800a57a:	0e1b      	lsrs	r3, r3, #24
 800a57c:	f003 030f 	and.w	r3, r3, #15
 800a580:	e006      	b.n	800a590 <HAL_RCCEx_GetPeriphCLKFreq+0xbb8>
 800a582:	4b76      	ldr	r3, [pc, #472]	@ (800a75c <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 800a584:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800a588:	041b      	lsls	r3, r3, #16
 800a58a:	0e1b      	lsrs	r3, r3, #24
 800a58c:	f003 030f 	and.w	r3, r3, #15
 800a590:	4a73      	ldr	r2, [pc, #460]	@ (800a760 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800a592:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a596:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800a598:	e3c6      	b.n	800ad28 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 800a59a:	2300      	movs	r3, #0
 800a59c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a59e:	e3c3      	b.n	800ad28 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      default:
      {
        frequency = 0U;
 800a5a0:	2300      	movs	r3, #0
 800a5a2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a5a4:	e3c0      	b.n	800ad28 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C4)
 800a5a6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a5aa:	f5a2 0180 	sub.w	r1, r2, #4194304	@ 0x400000
 800a5ae:	430b      	orrs	r3, r1
 800a5b0:	d147      	bne.n	800a642 <HAL_RCCEx_GetPeriphCLKFreq+0xc6a>
  {
    /* Get the current I2C4 source */
    srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 800a5b2:	4b6a      	ldr	r3, [pc, #424]	@ (800a75c <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 800a5b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800a5b8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800a5bc:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C4CLKSOURCE_PCLK1)
 800a5be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a5c0:	2b00      	cmp	r3, #0
 800a5c2:	d103      	bne.n	800a5cc <HAL_RCCEx_GetPeriphCLKFreq+0xbf4>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800a5c4:	f7fd ff5c 	bl	8008480 <HAL_RCC_GetPCLK1Freq>
 800a5c8:	6378      	str	r0, [r7, #52]	@ 0x34
 800a5ca:	e3ad      	b.n	800ad28 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_I2C4CLKSOURCE_SYSCLK)
 800a5cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a5ce:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a5d2:	d103      	bne.n	800a5dc <HAL_RCCEx_GetPeriphCLKFreq+0xc04>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800a5d4:	f7fd fe38 	bl	8008248 <HAL_RCC_GetSysClockFreq>
 800a5d8:	6378      	str	r0, [r7, #52]	@ 0x34
 800a5da:	e3a5      	b.n	800ad28 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 800a5dc:	4b5f      	ldr	r3, [pc, #380]	@ (800a75c <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 800a5de:	681b      	ldr	r3, [r3, #0]
 800a5e0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a5e4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a5e8:	d106      	bne.n	800a5f8 <HAL_RCCEx_GetPeriphCLKFreq+0xc20>
 800a5ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a5ec:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a5f0:	d102      	bne.n	800a5f8 <HAL_RCCEx_GetPeriphCLKFreq+0xc20>
    {
      frequency = HSI_VALUE;
 800a5f2:	4b5c      	ldr	r3, [pc, #368]	@ (800a764 <HAL_RCCEx_GetPeriphCLKFreq+0xd8c>)
 800a5f4:	637b      	str	r3, [r7, #52]	@ 0x34
 800a5f6:	e397      	b.n	800ad28 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C4CLKSOURCE_MSIK))
 800a5f8:	4b58      	ldr	r3, [pc, #352]	@ (800a75c <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 800a5fa:	681b      	ldr	r3, [r3, #0]
 800a5fc:	f003 0320 	and.w	r3, r3, #32
 800a600:	2b20      	cmp	r3, #32
 800a602:	d11b      	bne.n	800a63c <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
 800a604:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a606:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800a60a:	d117      	bne.n	800a63c <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800a60c:	4b53      	ldr	r3, [pc, #332]	@ (800a75c <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 800a60e:	689b      	ldr	r3, [r3, #8]
 800a610:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a614:	2b00      	cmp	r3, #0
 800a616:	d005      	beq.n	800a624 <HAL_RCCEx_GetPeriphCLKFreq+0xc4c>
 800a618:	4b50      	ldr	r3, [pc, #320]	@ (800a75c <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 800a61a:	689b      	ldr	r3, [r3, #8]
 800a61c:	0e1b      	lsrs	r3, r3, #24
 800a61e:	f003 030f 	and.w	r3, r3, #15
 800a622:	e006      	b.n	800a632 <HAL_RCCEx_GetPeriphCLKFreq+0xc5a>
 800a624:	4b4d      	ldr	r3, [pc, #308]	@ (800a75c <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 800a626:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800a62a:	041b      	lsls	r3, r3, #16
 800a62c:	0e1b      	lsrs	r3, r3, #24
 800a62e:	f003 030f 	and.w	r3, r3, #15
 800a632:	4a4b      	ldr	r2, [pc, #300]	@ (800a760 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800a634:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a638:	637b      	str	r3, [r7, #52]	@ 0x34
 800a63a:	e375      	b.n	800ad28 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for I2C4 */
    else
    {
      frequency = 0U;
 800a63c:	2300      	movs	r3, #0
 800a63e:	637b      	str	r3, [r7, #52]	@ 0x34
 800a640:	e372      	b.n	800ad28 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    {
      frequency = 0U;
    }
  }
#endif /* I2C6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM34)
 800a642:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a646:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 800a64a:	430b      	orrs	r3, r1
 800a64c:	d164      	bne.n	800a718 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>
  {
    /* Get the current LPTIM34 source */
    srcclk = __HAL_RCC_GET_LPTIM34_SOURCE();
 800a64e:	4b43      	ldr	r3, [pc, #268]	@ (800a75c <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 800a650:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800a654:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a658:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM34CLKSOURCE_MSIK)
 800a65a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a65c:	2b00      	cmp	r3, #0
 800a65e:	d120      	bne.n	800a6a2 <HAL_RCCEx_GetPeriphCLKFreq+0xcca>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800a660:	4b3e      	ldr	r3, [pc, #248]	@ (800a75c <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 800a662:	681b      	ldr	r3, [r3, #0]
 800a664:	f003 0320 	and.w	r3, r3, #32
 800a668:	2b20      	cmp	r3, #32
 800a66a:	d117      	bne.n	800a69c <HAL_RCCEx_GetPeriphCLKFreq+0xcc4>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800a66c:	4b3b      	ldr	r3, [pc, #236]	@ (800a75c <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 800a66e:	689b      	ldr	r3, [r3, #8]
 800a670:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a674:	2b00      	cmp	r3, #0
 800a676:	d005      	beq.n	800a684 <HAL_RCCEx_GetPeriphCLKFreq+0xcac>
 800a678:	4b38      	ldr	r3, [pc, #224]	@ (800a75c <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 800a67a:	689b      	ldr	r3, [r3, #8]
 800a67c:	0e1b      	lsrs	r3, r3, #24
 800a67e:	f003 030f 	and.w	r3, r3, #15
 800a682:	e006      	b.n	800a692 <HAL_RCCEx_GetPeriphCLKFreq+0xcba>
 800a684:	4b35      	ldr	r3, [pc, #212]	@ (800a75c <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 800a686:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800a68a:	041b      	lsls	r3, r3, #16
 800a68c:	0e1b      	lsrs	r3, r3, #24
 800a68e:	f003 030f 	and.w	r3, r3, #15
 800a692:	4a33      	ldr	r2, [pc, #204]	@ (800a760 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800a694:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a698:	637b      	str	r3, [r7, #52]	@ 0x34
 800a69a:	e345      	b.n	800ad28 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = 0U;
 800a69c:	2300      	movs	r3, #0
 800a69e:	637b      	str	r3, [r7, #52]	@ 0x34
 800a6a0:	e342      	b.n	800ad28 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSI))
 800a6a2:	4b2e      	ldr	r3, [pc, #184]	@ (800a75c <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 800a6a4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a6a8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a6ac:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a6b0:	d112      	bne.n	800a6d8 <HAL_RCCEx_GetPeriphCLKFreq+0xd00>
 800a6b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a6b4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a6b8:	d10e      	bne.n	800a6d8 <HAL_RCCEx_GetPeriphCLKFreq+0xd00>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800a6ba:	4b28      	ldr	r3, [pc, #160]	@ (800a75c <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 800a6bc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a6c0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a6c4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a6c8:	d102      	bne.n	800a6d0 <HAL_RCCEx_GetPeriphCLKFreq+0xcf8>
      {
        frequency = LSI_VALUE / 128U;
 800a6ca:	23fa      	movs	r3, #250	@ 0xfa
 800a6cc:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800a6ce:	e32b      	b.n	800ad28 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = LSI_VALUE;
 800a6d0:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800a6d4:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800a6d6:	e327      	b.n	800ad28 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_HSI))
 800a6d8:	4b20      	ldr	r3, [pc, #128]	@ (800a75c <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 800a6da:	681b      	ldr	r3, [r3, #0]
 800a6dc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a6e0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a6e4:	d106      	bne.n	800a6f4 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>
 800a6e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a6e8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a6ec:	d102      	bne.n	800a6f4 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>
    {
      frequency = HSI_VALUE;
 800a6ee:	4b1d      	ldr	r3, [pc, #116]	@ (800a764 <HAL_RCCEx_GetPeriphCLKFreq+0xd8c>)
 800a6f0:	637b      	str	r3, [r7, #52]	@ 0x34
 800a6f2:	e319      	b.n	800ad28 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSE))
 800a6f4:	4b19      	ldr	r3, [pc, #100]	@ (800a75c <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 800a6f6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a6fa:	f003 0302 	and.w	r3, r3, #2
 800a6fe:	2b02      	cmp	r3, #2
 800a700:	d107      	bne.n	800a712 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
 800a702:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a704:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a708:	d103      	bne.n	800a712 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
    {
      frequency = LSE_VALUE;
 800a70a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a70e:	637b      	str	r3, [r7, #52]	@ 0x34
 800a710:	e30a      	b.n	800ad28 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for LPTIM34 */
    else
    {
      frequency = 0U;
 800a712:	2300      	movs	r3, #0
 800a714:	637b      	str	r3, [r7, #52]	@ 0x34
 800a716:	e307      	b.n	800ad28 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM1)
 800a718:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a71c:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 800a720:	430b      	orrs	r3, r1
 800a722:	d16b      	bne.n	800a7fc <HAL_RCCEx_GetPeriphCLKFreq+0xe24>
  {
    /* Get the current LPTIM1 source */
    srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 800a724:	4b0d      	ldr	r3, [pc, #52]	@ (800a75c <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 800a726:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800a72a:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800a72e:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM1CLKSOURCE_MSIK)
 800a730:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a732:	2b00      	cmp	r3, #0
 800a734:	d127      	bne.n	800a786 <HAL_RCCEx_GetPeriphCLKFreq+0xdae>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800a736:	4b09      	ldr	r3, [pc, #36]	@ (800a75c <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 800a738:	681b      	ldr	r3, [r3, #0]
 800a73a:	f003 0320 	and.w	r3, r3, #32
 800a73e:	2b20      	cmp	r3, #32
 800a740:	d11e      	bne.n	800a780 <HAL_RCCEx_GetPeriphCLKFreq+0xda8>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800a742:	4b06      	ldr	r3, [pc, #24]	@ (800a75c <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 800a744:	689b      	ldr	r3, [r3, #8]
 800a746:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a74a:	2b00      	cmp	r3, #0
 800a74c:	d00c      	beq.n	800a768 <HAL_RCCEx_GetPeriphCLKFreq+0xd90>
 800a74e:	4b03      	ldr	r3, [pc, #12]	@ (800a75c <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 800a750:	689b      	ldr	r3, [r3, #8]
 800a752:	0e1b      	lsrs	r3, r3, #24
 800a754:	f003 030f 	and.w	r3, r3, #15
 800a758:	e00d      	b.n	800a776 <HAL_RCCEx_GetPeriphCLKFreq+0xd9e>
 800a75a:	bf00      	nop
 800a75c:	46020c00 	.word	0x46020c00
 800a760:	08010f0c 	.word	0x08010f0c
 800a764:	00f42400 	.word	0x00f42400
 800a768:	4b94      	ldr	r3, [pc, #592]	@ (800a9bc <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 800a76a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800a76e:	041b      	lsls	r3, r3, #16
 800a770:	0e1b      	lsrs	r3, r3, #24
 800a772:	f003 030f 	and.w	r3, r3, #15
 800a776:	4a92      	ldr	r2, [pc, #584]	@ (800a9c0 <HAL_RCCEx_GetPeriphCLKFreq+0xfe8>)
 800a778:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a77c:	637b      	str	r3, [r7, #52]	@ 0x34
 800a77e:	e2d3      	b.n	800ad28 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = 0U;
 800a780:	2300      	movs	r3, #0
 800a782:	637b      	str	r3, [r7, #52]	@ 0x34
 800a784:	e2d0      	b.n	800ad28 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSI))
 800a786:	4b8d      	ldr	r3, [pc, #564]	@ (800a9bc <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 800a788:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a78c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a790:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a794:	d112      	bne.n	800a7bc <HAL_RCCEx_GetPeriphCLKFreq+0xde4>
 800a796:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a798:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a79c:	d10e      	bne.n	800a7bc <HAL_RCCEx_GetPeriphCLKFreq+0xde4>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800a79e:	4b87      	ldr	r3, [pc, #540]	@ (800a9bc <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 800a7a0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a7a4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a7a8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a7ac:	d102      	bne.n	800a7b4 <HAL_RCCEx_GetPeriphCLKFreq+0xddc>
      {
        frequency = LSI_VALUE / 128U;
 800a7ae:	23fa      	movs	r3, #250	@ 0xfa
 800a7b0:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800a7b2:	e2b9      	b.n	800ad28 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = LSI_VALUE;
 800a7b4:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800a7b8:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800a7ba:	e2b5      	b.n	800ad28 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_HSI))
 800a7bc:	4b7f      	ldr	r3, [pc, #508]	@ (800a9bc <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 800a7be:	681b      	ldr	r3, [r3, #0]
 800a7c0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a7c4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a7c8:	d106      	bne.n	800a7d8 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>
 800a7ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a7cc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a7d0:	d102      	bne.n	800a7d8 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>
    {
      frequency = HSI_VALUE;
 800a7d2:	4b7c      	ldr	r3, [pc, #496]	@ (800a9c4 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800a7d4:	637b      	str	r3, [r7, #52]	@ 0x34
 800a7d6:	e2a7      	b.n	800ad28 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSE))
 800a7d8:	4b78      	ldr	r3, [pc, #480]	@ (800a9bc <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 800a7da:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a7de:	f003 0302 	and.w	r3, r3, #2
 800a7e2:	2b02      	cmp	r3, #2
 800a7e4:	d107      	bne.n	800a7f6 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
 800a7e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a7e8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800a7ec:	d103      	bne.n	800a7f6 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
    {
      frequency = LSE_VALUE;
 800a7ee:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a7f2:	637b      	str	r3, [r7, #52]	@ 0x34
 800a7f4:	e298      	b.n	800ad28 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for LPTIM1 */
    else
    {
      frequency = 0U;
 800a7f6:	2300      	movs	r3, #0
 800a7f8:	637b      	str	r3, [r7, #52]	@ 0x34
 800a7fa:	e295      	b.n	800ad28 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM2)
 800a7fc:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a800:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 800a804:	430b      	orrs	r3, r1
 800a806:	d147      	bne.n	800a898 <HAL_RCCEx_GetPeriphCLKFreq+0xec0>
  {
    /* Get the current LPTIM2 source */
    srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 800a808:	4b6c      	ldr	r3, [pc, #432]	@ (800a9bc <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 800a80a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800a80e:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 800a812:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM2CLKSOURCE_PCLK1)
 800a814:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a816:	2b00      	cmp	r3, #0
 800a818:	d103      	bne.n	800a822 <HAL_RCCEx_GetPeriphCLKFreq+0xe4a>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800a81a:	f7fd fe31 	bl	8008480 <HAL_RCC_GetPCLK1Freq>
 800a81e:	6378      	str	r0, [r7, #52]	@ 0x34
 800a820:	e282      	b.n	800ad28 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSI))
 800a822:	4b66      	ldr	r3, [pc, #408]	@ (800a9bc <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 800a824:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a828:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a82c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a830:	d112      	bne.n	800a858 <HAL_RCCEx_GetPeriphCLKFreq+0xe80>
 800a832:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a834:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800a838:	d10e      	bne.n	800a858 <HAL_RCCEx_GetPeriphCLKFreq+0xe80>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800a83a:	4b60      	ldr	r3, [pc, #384]	@ (800a9bc <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 800a83c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a840:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a844:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a848:	d102      	bne.n	800a850 <HAL_RCCEx_GetPeriphCLKFreq+0xe78>
      {
        frequency = LSI_VALUE / 128U;
 800a84a:	23fa      	movs	r3, #250	@ 0xfa
 800a84c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800a84e:	e26b      	b.n	800ad28 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = LSI_VALUE;
 800a850:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800a854:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800a856:	e267      	b.n	800ad28 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_HSI))
 800a858:	4b58      	ldr	r3, [pc, #352]	@ (800a9bc <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 800a85a:	681b      	ldr	r3, [r3, #0]
 800a85c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a860:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a864:	d106      	bne.n	800a874 <HAL_RCCEx_GetPeriphCLKFreq+0xe9c>
 800a866:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a868:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800a86c:	d102      	bne.n	800a874 <HAL_RCCEx_GetPeriphCLKFreq+0xe9c>
    {
      frequency = HSI_VALUE;
 800a86e:	4b55      	ldr	r3, [pc, #340]	@ (800a9c4 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800a870:	637b      	str	r3, [r7, #52]	@ 0x34
 800a872:	e259      	b.n	800ad28 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSE))
 800a874:	4b51      	ldr	r3, [pc, #324]	@ (800a9bc <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 800a876:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a87a:	f003 0302 	and.w	r3, r3, #2
 800a87e:	2b02      	cmp	r3, #2
 800a880:	d107      	bne.n	800a892 <HAL_RCCEx_GetPeriphCLKFreq+0xeba>
 800a882:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a884:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800a888:	d103      	bne.n	800a892 <HAL_RCCEx_GetPeriphCLKFreq+0xeba>
    {
      frequency = LSE_VALUE;
 800a88a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a88e:	637b      	str	r3, [r7, #52]	@ 0x34
 800a890:	e24a      	b.n	800ad28 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for LPTIM2 */
    else
    {
      frequency = 0U;
 800a892:	2300      	movs	r3, #0
 800a894:	637b      	str	r3, [r7, #52]	@ 0x34
 800a896:	e247      	b.n	800ad28 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN1)
 800a898:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a89c:	f102 4178 	add.w	r1, r2, #4160749568	@ 0xf8000000
 800a8a0:	430b      	orrs	r3, r1
 800a8a2:	d12d      	bne.n	800a900 <HAL_RCCEx_GetPeriphCLKFreq+0xf28>
  {
    /* Get the current FDCAN1 kernel source */
    srcclk = __HAL_RCC_GET_FDCAN1_SOURCE();
 800a8a4:	4b45      	ldr	r3, [pc, #276]	@ (800a9bc <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 800a8a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800a8aa:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 800a8ae:	633b      	str	r3, [r7, #48]	@ 0x30

    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCAN1CLKSOURCE_HSE))
 800a8b0:	4b42      	ldr	r3, [pc, #264]	@ (800a9bc <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 800a8b2:	681b      	ldr	r3, [r3, #0]
 800a8b4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a8b8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a8bc:	d105      	bne.n	800a8ca <HAL_RCCEx_GetPeriphCLKFreq+0xef2>
 800a8be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a8c0:	2b00      	cmp	r3, #0
 800a8c2:	d102      	bne.n	800a8ca <HAL_RCCEx_GetPeriphCLKFreq+0xef2>
    {
      frequency = HSE_VALUE;
 800a8c4:	4b3f      	ldr	r3, [pc, #252]	@ (800a9c4 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800a8c6:	637b      	str	r3, [r7, #52]	@ 0x34
 800a8c8:	e22e      	b.n	800ad28 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL1) /* PLL1 ? */
 800a8ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a8cc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a8d0:	d107      	bne.n	800a8e2 <HAL_RCCEx_GetPeriphCLKFreq+0xf0a>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a8d2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a8d6:	4618      	mov	r0, r3
 800a8d8:	f7fe fc70 	bl	80091bc <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_Q_Frequency;
 800a8dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a8de:	637b      	str	r3, [r7, #52]	@ 0x34
 800a8e0:	e222      	b.n	800ad28 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL2) /* PLL2 ? */
 800a8e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a8e4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a8e8:	d107      	bne.n	800a8fa <HAL_RCCEx_GetPeriphCLKFreq+0xf22>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a8ea:	f107 0318 	add.w	r3, r7, #24
 800a8ee:	4618      	mov	r0, r3
 800a8f0:	f7fe fdbe 	bl	8009470 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_P_Frequency;
 800a8f4:	69bb      	ldr	r3, [r7, #24]
 800a8f6:	637b      	str	r3, [r7, #52]	@ 0x34
 800a8f8:	e216      	b.n	800ad28 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for FDCAN1 */
    else
    {
      frequency = 0U;
 800a8fa:	2300      	movs	r3, #0
 800a8fc:	637b      	str	r3, [r7, #52]	@ 0x34
 800a8fe:	e213      	b.n	800ad28 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI1)
 800a900:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a904:	f5a2 0100 	sub.w	r1, r2, #8388608	@ 0x800000
 800a908:	430b      	orrs	r3, r1
 800a90a:	d15d      	bne.n	800a9c8 <HAL_RCCEx_GetPeriphCLKFreq+0xff0>
  {
    /* Get the current SPI1 kernel source */
    srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 800a90c:	4b2b      	ldr	r3, [pc, #172]	@ (800a9bc <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 800a90e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800a912:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 800a916:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 800a918:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a91a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800a91e:	d028      	beq.n	800a972 <HAL_RCCEx_GetPeriphCLKFreq+0xf9a>
 800a920:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a922:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800a926:	d845      	bhi.n	800a9b4 <HAL_RCCEx_GetPeriphCLKFreq+0xfdc>
 800a928:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a92a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800a92e:	d013      	beq.n	800a958 <HAL_RCCEx_GetPeriphCLKFreq+0xf80>
 800a930:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a932:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800a936:	d83d      	bhi.n	800a9b4 <HAL_RCCEx_GetPeriphCLKFreq+0xfdc>
 800a938:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a93a:	2b00      	cmp	r3, #0
 800a93c:	d004      	beq.n	800a948 <HAL_RCCEx_GetPeriphCLKFreq+0xf70>
 800a93e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a940:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a944:	d004      	beq.n	800a950 <HAL_RCCEx_GetPeriphCLKFreq+0xf78>
 800a946:	e035      	b.n	800a9b4 <HAL_RCCEx_GetPeriphCLKFreq+0xfdc>
    {
      case RCC_SPI1CLKSOURCE_PCLK2:

        frequency = HAL_RCC_GetPCLK2Freq();
 800a948:	f7fd fdae 	bl	80084a8 <HAL_RCC_GetPCLK2Freq>
 800a94c:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800a94e:	e1eb      	b.n	800ad28 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI1CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800a950:	f7fd fc7a 	bl	8008248 <HAL_RCC_GetSysClockFreq>
 800a954:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800a956:	e1e7      	b.n	800ad28 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI1CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800a958:	4b18      	ldr	r3, [pc, #96]	@ (800a9bc <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 800a95a:	681b      	ldr	r3, [r3, #0]
 800a95c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a960:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a964:	d102      	bne.n	800a96c <HAL_RCCEx_GetPeriphCLKFreq+0xf94>
        {
          frequency = HSI_VALUE;
 800a966:	4b17      	ldr	r3, [pc, #92]	@ (800a9c4 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800a968:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800a96a:	e1dd      	b.n	800ad28 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 800a96c:	2300      	movs	r3, #0
 800a96e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a970:	e1da      	b.n	800ad28 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800a972:	4b12      	ldr	r3, [pc, #72]	@ (800a9bc <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 800a974:	681b      	ldr	r3, [r3, #0]
 800a976:	f003 0320 	and.w	r3, r3, #32
 800a97a:	2b20      	cmp	r3, #32
 800a97c:	d117      	bne.n	800a9ae <HAL_RCCEx_GetPeriphCLKFreq+0xfd6>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800a97e:	4b0f      	ldr	r3, [pc, #60]	@ (800a9bc <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 800a980:	689b      	ldr	r3, [r3, #8]
 800a982:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a986:	2b00      	cmp	r3, #0
 800a988:	d005      	beq.n	800a996 <HAL_RCCEx_GetPeriphCLKFreq+0xfbe>
 800a98a:	4b0c      	ldr	r3, [pc, #48]	@ (800a9bc <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 800a98c:	689b      	ldr	r3, [r3, #8]
 800a98e:	0e1b      	lsrs	r3, r3, #24
 800a990:	f003 030f 	and.w	r3, r3, #15
 800a994:	e006      	b.n	800a9a4 <HAL_RCCEx_GetPeriphCLKFreq+0xfcc>
 800a996:	4b09      	ldr	r3, [pc, #36]	@ (800a9bc <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 800a998:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800a99c:	041b      	lsls	r3, r3, #16
 800a99e:	0e1b      	lsrs	r3, r3, #24
 800a9a0:	f003 030f 	and.w	r3, r3, #15
 800a9a4:	4a06      	ldr	r2, [pc, #24]	@ (800a9c0 <HAL_RCCEx_GetPeriphCLKFreq+0xfe8>)
 800a9a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a9aa:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800a9ac:	e1bc      	b.n	800ad28 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 800a9ae:	2300      	movs	r3, #0
 800a9b0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a9b2:	e1b9      	b.n	800ad28 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default:

        frequency = 0U;
 800a9b4:	2300      	movs	r3, #0
 800a9b6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a9b8:	e1b6      	b.n	800ad28 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
 800a9ba:	bf00      	nop
 800a9bc:	46020c00 	.word	0x46020c00
 800a9c0:	08010f0c 	.word	0x08010f0c
 800a9c4:	00f42400 	.word	0x00f42400
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI2)
 800a9c8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a9cc:	f102 417f 	add.w	r1, r2, #4278190080	@ 0xff000000
 800a9d0:	430b      	orrs	r3, r1
 800a9d2:	d156      	bne.n	800aa82 <HAL_RCCEx_GetPeriphCLKFreq+0x10aa>
  {
    /* Get the current SPI2 kernel source */
    srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 800a9d4:	4ba5      	ldr	r3, [pc, #660]	@ (800ac6c <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 800a9d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800a9da:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800a9de:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 800a9e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a9e2:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800a9e6:	d028      	beq.n	800aa3a <HAL_RCCEx_GetPeriphCLKFreq+0x1062>
 800a9e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a9ea:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800a9ee:	d845      	bhi.n	800aa7c <HAL_RCCEx_GetPeriphCLKFreq+0x10a4>
 800a9f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a9f2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a9f6:	d013      	beq.n	800aa20 <HAL_RCCEx_GetPeriphCLKFreq+0x1048>
 800a9f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a9fa:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a9fe:	d83d      	bhi.n	800aa7c <HAL_RCCEx_GetPeriphCLKFreq+0x10a4>
 800aa00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa02:	2b00      	cmp	r3, #0
 800aa04:	d004      	beq.n	800aa10 <HAL_RCCEx_GetPeriphCLKFreq+0x1038>
 800aa06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa08:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800aa0c:	d004      	beq.n	800aa18 <HAL_RCCEx_GetPeriphCLKFreq+0x1040>
 800aa0e:	e035      	b.n	800aa7c <HAL_RCCEx_GetPeriphCLKFreq+0x10a4>
    {
      case RCC_SPI2CLKSOURCE_PCLK1:

        frequency = HAL_RCC_GetPCLK1Freq();
 800aa10:	f7fd fd36 	bl	8008480 <HAL_RCC_GetPCLK1Freq>
 800aa14:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800aa16:	e187      	b.n	800ad28 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI2CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800aa18:	f7fd fc16 	bl	8008248 <HAL_RCC_GetSysClockFreq>
 800aa1c:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800aa1e:	e183      	b.n	800ad28 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI2CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800aa20:	4b92      	ldr	r3, [pc, #584]	@ (800ac6c <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 800aa22:	681b      	ldr	r3, [r3, #0]
 800aa24:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800aa28:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800aa2c:	d102      	bne.n	800aa34 <HAL_RCCEx_GetPeriphCLKFreq+0x105c>
        {
          frequency = HSI_VALUE;
 800aa2e:	4b90      	ldr	r3, [pc, #576]	@ (800ac70 <HAL_RCCEx_GetPeriphCLKFreq+0x1298>)
 800aa30:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800aa32:	e179      	b.n	800ad28 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 800aa34:	2300      	movs	r3, #0
 800aa36:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800aa38:	e176      	b.n	800ad28 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI2CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800aa3a:	4b8c      	ldr	r3, [pc, #560]	@ (800ac6c <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 800aa3c:	681b      	ldr	r3, [r3, #0]
 800aa3e:	f003 0320 	and.w	r3, r3, #32
 800aa42:	2b20      	cmp	r3, #32
 800aa44:	d117      	bne.n	800aa76 <HAL_RCCEx_GetPeriphCLKFreq+0x109e>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800aa46:	4b89      	ldr	r3, [pc, #548]	@ (800ac6c <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 800aa48:	689b      	ldr	r3, [r3, #8]
 800aa4a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800aa4e:	2b00      	cmp	r3, #0
 800aa50:	d005      	beq.n	800aa5e <HAL_RCCEx_GetPeriphCLKFreq+0x1086>
 800aa52:	4b86      	ldr	r3, [pc, #536]	@ (800ac6c <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 800aa54:	689b      	ldr	r3, [r3, #8]
 800aa56:	0e1b      	lsrs	r3, r3, #24
 800aa58:	f003 030f 	and.w	r3, r3, #15
 800aa5c:	e006      	b.n	800aa6c <HAL_RCCEx_GetPeriphCLKFreq+0x1094>
 800aa5e:	4b83      	ldr	r3, [pc, #524]	@ (800ac6c <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 800aa60:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800aa64:	041b      	lsls	r3, r3, #16
 800aa66:	0e1b      	lsrs	r3, r3, #24
 800aa68:	f003 030f 	and.w	r3, r3, #15
 800aa6c:	4a81      	ldr	r2, [pc, #516]	@ (800ac74 <HAL_RCCEx_GetPeriphCLKFreq+0x129c>)
 800aa6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800aa72:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800aa74:	e158      	b.n	800ad28 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 800aa76:	2300      	movs	r3, #0
 800aa78:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800aa7a:	e155      	b.n	800ad28 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default:

        frequency = 0U;
 800aa7c:	2300      	movs	r3, #0
 800aa7e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800aa80:	e152      	b.n	800ad28 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI3)
 800aa82:	e9d7 2300 	ldrd	r2, r3, [r7]
 800aa86:	f102 417e 	add.w	r1, r2, #4261412864	@ 0xfe000000
 800aa8a:	430b      	orrs	r3, r1
 800aa8c:	d177      	bne.n	800ab7e <HAL_RCCEx_GetPeriphCLKFreq+0x11a6>
  {
    /* Get the current SPI3 kernel source */
    srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 800aa8e:	4b77      	ldr	r3, [pc, #476]	@ (800ac6c <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 800aa90:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800aa94:	f003 0318 	and.w	r3, r3, #24
 800aa98:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 800aa9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa9c:	2b18      	cmp	r3, #24
 800aa9e:	d86b      	bhi.n	800ab78 <HAL_RCCEx_GetPeriphCLKFreq+0x11a0>
 800aaa0:	a201      	add	r2, pc, #4	@ (adr r2, 800aaa8 <HAL_RCCEx_GetPeriphCLKFreq+0x10d0>)
 800aaa2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aaa6:	bf00      	nop
 800aaa8:	0800ab0d 	.word	0x0800ab0d
 800aaac:	0800ab79 	.word	0x0800ab79
 800aab0:	0800ab79 	.word	0x0800ab79
 800aab4:	0800ab79 	.word	0x0800ab79
 800aab8:	0800ab79 	.word	0x0800ab79
 800aabc:	0800ab79 	.word	0x0800ab79
 800aac0:	0800ab79 	.word	0x0800ab79
 800aac4:	0800ab79 	.word	0x0800ab79
 800aac8:	0800ab15 	.word	0x0800ab15
 800aacc:	0800ab79 	.word	0x0800ab79
 800aad0:	0800ab79 	.word	0x0800ab79
 800aad4:	0800ab79 	.word	0x0800ab79
 800aad8:	0800ab79 	.word	0x0800ab79
 800aadc:	0800ab79 	.word	0x0800ab79
 800aae0:	0800ab79 	.word	0x0800ab79
 800aae4:	0800ab79 	.word	0x0800ab79
 800aae8:	0800ab1d 	.word	0x0800ab1d
 800aaec:	0800ab79 	.word	0x0800ab79
 800aaf0:	0800ab79 	.word	0x0800ab79
 800aaf4:	0800ab79 	.word	0x0800ab79
 800aaf8:	0800ab79 	.word	0x0800ab79
 800aafc:	0800ab79 	.word	0x0800ab79
 800ab00:	0800ab79 	.word	0x0800ab79
 800ab04:	0800ab79 	.word	0x0800ab79
 800ab08:	0800ab37 	.word	0x0800ab37
    {
      case RCC_SPI3CLKSOURCE_PCLK3:

        frequency = HAL_RCC_GetPCLK3Freq();
 800ab0c:	f7fd fce0 	bl	80084d0 <HAL_RCC_GetPCLK3Freq>
 800ab10:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800ab12:	e109      	b.n	800ad28 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI3CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800ab14:	f7fd fb98 	bl	8008248 <HAL_RCC_GetSysClockFreq>
 800ab18:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800ab1a:	e105      	b.n	800ad28 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI3CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800ab1c:	4b53      	ldr	r3, [pc, #332]	@ (800ac6c <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 800ab1e:	681b      	ldr	r3, [r3, #0]
 800ab20:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800ab24:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ab28:	d102      	bne.n	800ab30 <HAL_RCCEx_GetPeriphCLKFreq+0x1158>
        {
          frequency = HSI_VALUE;
 800ab2a:	4b51      	ldr	r3, [pc, #324]	@ (800ac70 <HAL_RCCEx_GetPeriphCLKFreq+0x1298>)
 800ab2c:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800ab2e:	e0fb      	b.n	800ad28 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 800ab30:	2300      	movs	r3, #0
 800ab32:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800ab34:	e0f8      	b.n	800ad28 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI3CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800ab36:	4b4d      	ldr	r3, [pc, #308]	@ (800ac6c <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 800ab38:	681b      	ldr	r3, [r3, #0]
 800ab3a:	f003 0320 	and.w	r3, r3, #32
 800ab3e:	2b20      	cmp	r3, #32
 800ab40:	d117      	bne.n	800ab72 <HAL_RCCEx_GetPeriphCLKFreq+0x119a>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800ab42:	4b4a      	ldr	r3, [pc, #296]	@ (800ac6c <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 800ab44:	689b      	ldr	r3, [r3, #8]
 800ab46:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ab4a:	2b00      	cmp	r3, #0
 800ab4c:	d005      	beq.n	800ab5a <HAL_RCCEx_GetPeriphCLKFreq+0x1182>
 800ab4e:	4b47      	ldr	r3, [pc, #284]	@ (800ac6c <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 800ab50:	689b      	ldr	r3, [r3, #8]
 800ab52:	0e1b      	lsrs	r3, r3, #24
 800ab54:	f003 030f 	and.w	r3, r3, #15
 800ab58:	e006      	b.n	800ab68 <HAL_RCCEx_GetPeriphCLKFreq+0x1190>
 800ab5a:	4b44      	ldr	r3, [pc, #272]	@ (800ac6c <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 800ab5c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800ab60:	041b      	lsls	r3, r3, #16
 800ab62:	0e1b      	lsrs	r3, r3, #24
 800ab64:	f003 030f 	and.w	r3, r3, #15
 800ab68:	4a42      	ldr	r2, [pc, #264]	@ (800ac74 <HAL_RCCEx_GetPeriphCLKFreq+0x129c>)
 800ab6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ab6e:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800ab70:	e0da      	b.n	800ad28 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 800ab72:	2300      	movs	r3, #0
 800ab74:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800ab76:	e0d7      	b.n	800ad28 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default:

        frequency = 0U;
 800ab78:	2300      	movs	r3, #0
 800ab7a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800ab7c:	e0d4      	b.n	800ad28 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_OSPI)
 800ab7e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ab82:	f102 417c 	add.w	r1, r2, #4227858432	@ 0xfc000000
 800ab86:	430b      	orrs	r3, r1
 800ab88:	d155      	bne.n	800ac36 <HAL_RCCEx_GetPeriphCLKFreq+0x125e>
  {
    /* Get the current OSPI kernel source */
    srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 800ab8a:	4b38      	ldr	r3, [pc, #224]	@ (800ac6c <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 800ab8c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800ab90:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 800ab94:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800ab96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab98:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800ab9c:	d013      	beq.n	800abc6 <HAL_RCCEx_GetPeriphCLKFreq+0x11ee>
 800ab9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aba0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800aba4:	d844      	bhi.n	800ac30 <HAL_RCCEx_GetPeriphCLKFreq+0x1258>
 800aba6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aba8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800abac:	d013      	beq.n	800abd6 <HAL_RCCEx_GetPeriphCLKFreq+0x11fe>
 800abae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800abb0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800abb4:	d83c      	bhi.n	800ac30 <HAL_RCCEx_GetPeriphCLKFreq+0x1258>
 800abb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800abb8:	2b00      	cmp	r3, #0
 800abba:	d014      	beq.n	800abe6 <HAL_RCCEx_GetPeriphCLKFreq+0x120e>
 800abbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800abbe:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800abc2:	d014      	beq.n	800abee <HAL_RCCEx_GetPeriphCLKFreq+0x1216>
 800abc4:	e034      	b.n	800ac30 <HAL_RCCEx_GetPeriphCLKFreq+0x1258>
    {
      case RCC_OSPICLKSOURCE_PLL2:

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800abc6:	f107 0318 	add.w	r3, r7, #24
 800abca:	4618      	mov	r0, r3
 800abcc:	f7fe fc50 	bl	8009470 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 800abd0:	69fb      	ldr	r3, [r7, #28]
 800abd2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800abd4:	e0a8      	b.n	800ad28 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_OSPICLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800abd6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800abda:	4618      	mov	r0, r3
 800abdc:	f7fe faee 	bl	80091bc <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 800abe0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800abe2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800abe4:	e0a0      	b.n	800ad28 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_OSPICLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800abe6:	f7fd fb2f 	bl	8008248 <HAL_RCC_GetSysClockFreq>
 800abea:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800abec:	e09c      	b.n	800ad28 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_OSPICLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800abee:	4b1f      	ldr	r3, [pc, #124]	@ (800ac6c <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 800abf0:	681b      	ldr	r3, [r3, #0]
 800abf2:	f003 0320 	and.w	r3, r3, #32
 800abf6:	2b20      	cmp	r3, #32
 800abf8:	d117      	bne.n	800ac2a <HAL_RCCEx_GetPeriphCLKFreq+0x1252>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800abfa:	4b1c      	ldr	r3, [pc, #112]	@ (800ac6c <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 800abfc:	689b      	ldr	r3, [r3, #8]
 800abfe:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ac02:	2b00      	cmp	r3, #0
 800ac04:	d005      	beq.n	800ac12 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
 800ac06:	4b19      	ldr	r3, [pc, #100]	@ (800ac6c <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 800ac08:	689b      	ldr	r3, [r3, #8]
 800ac0a:	0e1b      	lsrs	r3, r3, #24
 800ac0c:	f003 030f 	and.w	r3, r3, #15
 800ac10:	e006      	b.n	800ac20 <HAL_RCCEx_GetPeriphCLKFreq+0x1248>
 800ac12:	4b16      	ldr	r3, [pc, #88]	@ (800ac6c <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 800ac14:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800ac18:	041b      	lsls	r3, r3, #16
 800ac1a:	0e1b      	lsrs	r3, r3, #24
 800ac1c:	f003 030f 	and.w	r3, r3, #15
 800ac20:	4a14      	ldr	r2, [pc, #80]	@ (800ac74 <HAL_RCCEx_GetPeriphCLKFreq+0x129c>)
 800ac22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ac26:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800ac28:	e07e      	b.n	800ad28 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 800ac2a:	2300      	movs	r3, #0
 800ac2c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800ac2e:	e07b      	b.n	800ad28 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default:

        frequency = 0U;
 800ac30:	2300      	movs	r3, #0
 800ac32:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800ac34:	e078      	b.n	800ad28 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
        frequency = 0U;
        break;
    }
  }
#endif /* defined(HSPI1) */
  else if (PeriphClk == RCC_PERIPHCLK_DAC1)
 800ac36:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ac3a:	f102 4170 	add.w	r1, r2, #4026531840	@ 0xf0000000
 800ac3e:	430b      	orrs	r3, r1
 800ac40:	d138      	bne.n	800acb4 <HAL_RCCEx_GetPeriphCLKFreq+0x12dc>
  {
    /* Get the current DAC1 kernel source */
    srcclk = __HAL_RCC_GET_DAC1_SOURCE();
 800ac42:	4b0a      	ldr	r3, [pc, #40]	@ (800ac6c <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 800ac44:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800ac48:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800ac4c:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if DAC1 clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSE))
 800ac4e:	4b07      	ldr	r3, [pc, #28]	@ (800ac6c <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 800ac50:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800ac54:	f003 0302 	and.w	r3, r3, #2
 800ac58:	2b02      	cmp	r3, #2
 800ac5a:	d10d      	bne.n	800ac78 <HAL_RCCEx_GetPeriphCLKFreq+0x12a0>
 800ac5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac5e:	2b00      	cmp	r3, #0
 800ac60:	d10a      	bne.n	800ac78 <HAL_RCCEx_GetPeriphCLKFreq+0x12a0>
    {
      frequency = LSE_VALUE;
 800ac62:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800ac66:	637b      	str	r3, [r7, #52]	@ 0x34
 800ac68:	e05e      	b.n	800ad28 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
 800ac6a:	bf00      	nop
 800ac6c:	46020c00 	.word	0x46020c00
 800ac70:	00f42400 	.word	0x00f42400
 800ac74:	08010f0c 	.word	0x08010f0c
    }
    /* Check if LSI is ready and if DAC1 clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSI))
 800ac78:	4b2e      	ldr	r3, [pc, #184]	@ (800ad34 <HAL_RCCEx_GetPeriphCLKFreq+0x135c>)
 800ac7a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800ac7e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ac82:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800ac86:	d112      	bne.n	800acae <HAL_RCCEx_GetPeriphCLKFreq+0x12d6>
 800ac88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac8a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800ac8e:	d10e      	bne.n	800acae <HAL_RCCEx_GetPeriphCLKFreq+0x12d6>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800ac90:	4b28      	ldr	r3, [pc, #160]	@ (800ad34 <HAL_RCCEx_GetPeriphCLKFreq+0x135c>)
 800ac92:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800ac96:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800ac9a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ac9e:	d102      	bne.n	800aca6 <HAL_RCCEx_GetPeriphCLKFreq+0x12ce>
      {
        frequency = LSI_VALUE / 128U;
 800aca0:	23fa      	movs	r3, #250	@ 0xfa
 800aca2:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800aca4:	e040      	b.n	800ad28 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = LSI_VALUE;
 800aca6:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800acaa:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800acac:	e03c      	b.n	800ad28 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    /* Clock not enabled for DAC1*/
    else
    {
      frequency = 0U;
 800acae:	2300      	movs	r3, #0
 800acb0:	637b      	str	r3, [r7, #52]	@ 0x34
 800acb2:	e039      	b.n	800ad28 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }

  }
  else if (PeriphClk == RCC_PERIPHCLK_RNG)
 800acb4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800acb8:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 800acbc:	430b      	orrs	r3, r1
 800acbe:	d131      	bne.n	800ad24 <HAL_RCCEx_GetPeriphCLKFreq+0x134c>
  {
    /* Get the current RNG kernel source */
    srcclk = __HAL_RCC_GET_RNG_SOURCE();
 800acc0:	4b1c      	ldr	r3, [pc, #112]	@ (800ad34 <HAL_RCCEx_GetPeriphCLKFreq+0x135c>)
 800acc2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800acc6:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800acca:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if HSI48 is ready and if RNG clock selection is HSI48 */
    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 800accc:	4b19      	ldr	r3, [pc, #100]	@ (800ad34 <HAL_RCCEx_GetPeriphCLKFreq+0x135c>)
 800acce:	681b      	ldr	r3, [r3, #0]
 800acd0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800acd4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800acd8:	d105      	bne.n	800ace6 <HAL_RCCEx_GetPeriphCLKFreq+0x130e>
 800acda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800acdc:	2b00      	cmp	r3, #0
 800acde:	d102      	bne.n	800ace6 <HAL_RCCEx_GetPeriphCLKFreq+0x130e>
    {
      frequency = HSI48_VALUE;
 800ace0:	4b15      	ldr	r3, [pc, #84]	@ (800ad38 <HAL_RCCEx_GetPeriphCLKFreq+0x1360>)
 800ace2:	637b      	str	r3, [r7, #52]	@ 0x34
 800ace4:	e020      	b.n	800ad28 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }

    /* Check if HSI48 is ready and if RNG clock selection is HSI48_DIV2 */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48_DIV2))
 800ace6:	4b13      	ldr	r3, [pc, #76]	@ (800ad34 <HAL_RCCEx_GetPeriphCLKFreq+0x135c>)
 800ace8:	681b      	ldr	r3, [r3, #0]
 800acea:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800acee:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800acf2:	d106      	bne.n	800ad02 <HAL_RCCEx_GetPeriphCLKFreq+0x132a>
 800acf4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800acf6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800acfa:	d102      	bne.n	800ad02 <HAL_RCCEx_GetPeriphCLKFreq+0x132a>
    {
      frequency = HSI48_VALUE >> 1U ;
 800acfc:	4b0f      	ldr	r3, [pc, #60]	@ (800ad3c <HAL_RCCEx_GetPeriphCLKFreq+0x1364>)
 800acfe:	637b      	str	r3, [r7, #52]	@ 0x34
 800ad00:	e012      	b.n	800ad28 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }

    /* Check if HSI is ready and if RNG clock selection is HSI */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI))
 800ad02:	4b0c      	ldr	r3, [pc, #48]	@ (800ad34 <HAL_RCCEx_GetPeriphCLKFreq+0x135c>)
 800ad04:	681b      	ldr	r3, [r3, #0]
 800ad06:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800ad0a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ad0e:	d106      	bne.n	800ad1e <HAL_RCCEx_GetPeriphCLKFreq+0x1346>
 800ad10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad12:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800ad16:	d102      	bne.n	800ad1e <HAL_RCCEx_GetPeriphCLKFreq+0x1346>
    {
      frequency = HSI_VALUE;
 800ad18:	4b09      	ldr	r3, [pc, #36]	@ (800ad40 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 800ad1a:	637b      	str	r3, [r7, #52]	@ 0x34
 800ad1c:	e004      	b.n	800ad28 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for RNG */
    else
    {
      frequency = 0U;
 800ad1e:	2300      	movs	r3, #0
 800ad20:	637b      	str	r3, [r7, #52]	@ 0x34
 800ad22:	e001      	b.n	800ad28 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
  }
#endif /* defined(USB_OTG_HS) */

  else
  {
    frequency = 0;
 800ad24:	2300      	movs	r3, #0
 800ad26:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  return (frequency);
 800ad28:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800ad2a:	4618      	mov	r0, r3
 800ad2c:	3738      	adds	r7, #56	@ 0x38
 800ad2e:	46bd      	mov	sp, r7
 800ad30:	bd80      	pop	{r7, pc}
 800ad32:	bf00      	nop
 800ad34:	46020c00 	.word	0x46020c00
 800ad38:	02dc6c00 	.word	0x02dc6c00
 800ad3c:	016e3600 	.word	0x016e3600
 800ad40:	00f42400 	.word	0x00f42400

0800ad44 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 800ad44:	b580      	push	{r7, lr}
 800ad46:	b084      	sub	sp, #16
 800ad48:	af00      	add	r7, sp, #0
 800ad4a:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll2->PLL2P));
  assert_param(IS_RCC_PLLQ_VALUE(pll2->PLL2Q));
  assert_param(IS_RCC_PLLR_VALUE(pll2->PLL2R));

  /* Disable  PLL2 */
  __HAL_RCC_PLL2_DISABLE();
 800ad4c:	4b47      	ldr	r3, [pc, #284]	@ (800ae6c <RCCEx_PLL2_Config+0x128>)
 800ad4e:	681b      	ldr	r3, [r3, #0]
 800ad50:	4a46      	ldr	r2, [pc, #280]	@ (800ae6c <RCCEx_PLL2_Config+0x128>)
 800ad52:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800ad56:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800ad58:	f7f9 ffe8 	bl	8004d2c <HAL_GetTick>
 800ad5c:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800ad5e:	e008      	b.n	800ad72 <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800ad60:	f7f9 ffe4 	bl	8004d2c <HAL_GetTick>
 800ad64:	4602      	mov	r2, r0
 800ad66:	68fb      	ldr	r3, [r7, #12]
 800ad68:	1ad3      	subs	r3, r2, r3
 800ad6a:	2b02      	cmp	r3, #2
 800ad6c:	d901      	bls.n	800ad72 <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 800ad6e:	2303      	movs	r3, #3
 800ad70:	e077      	b.n	800ae62 <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800ad72:	4b3e      	ldr	r3, [pc, #248]	@ (800ae6c <RCCEx_PLL2_Config+0x128>)
 800ad74:	681b      	ldr	r3, [r3, #0]
 800ad76:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ad7a:	2b00      	cmp	r3, #0
 800ad7c:	d1f0      	bne.n	800ad60 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 800ad7e:	4b3b      	ldr	r3, [pc, #236]	@ (800ae6c <RCCEx_PLL2_Config+0x128>)
 800ad80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ad82:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800ad86:	f023 0303 	bic.w	r3, r3, #3
 800ad8a:	687a      	ldr	r2, [r7, #4]
 800ad8c:	6811      	ldr	r1, [r2, #0]
 800ad8e:	687a      	ldr	r2, [r7, #4]
 800ad90:	6852      	ldr	r2, [r2, #4]
 800ad92:	3a01      	subs	r2, #1
 800ad94:	0212      	lsls	r2, r2, #8
 800ad96:	430a      	orrs	r2, r1
 800ad98:	4934      	ldr	r1, [pc, #208]	@ (800ae6c <RCCEx_PLL2_Config+0x128>)
 800ad9a:	4313      	orrs	r3, r2
 800ad9c:	62cb      	str	r3, [r1, #44]	@ 0x2c
 800ad9e:	4b33      	ldr	r3, [pc, #204]	@ (800ae6c <RCCEx_PLL2_Config+0x128>)
 800ada0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800ada2:	4b33      	ldr	r3, [pc, #204]	@ (800ae70 <RCCEx_PLL2_Config+0x12c>)
 800ada4:	4013      	ands	r3, r2
 800ada6:	687a      	ldr	r2, [r7, #4]
 800ada8:	6892      	ldr	r2, [r2, #8]
 800adaa:	3a01      	subs	r2, #1
 800adac:	f3c2 0108 	ubfx	r1, r2, #0, #9
 800adb0:	687a      	ldr	r2, [r7, #4]
 800adb2:	68d2      	ldr	r2, [r2, #12]
 800adb4:	3a01      	subs	r2, #1
 800adb6:	0252      	lsls	r2, r2, #9
 800adb8:	b292      	uxth	r2, r2
 800adba:	4311      	orrs	r1, r2
 800adbc:	687a      	ldr	r2, [r7, #4]
 800adbe:	6912      	ldr	r2, [r2, #16]
 800adc0:	3a01      	subs	r2, #1
 800adc2:	0412      	lsls	r2, r2, #16
 800adc4:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 800adc8:	4311      	orrs	r1, r2
 800adca:	687a      	ldr	r2, [r7, #4]
 800adcc:	6952      	ldr	r2, [r2, #20]
 800adce:	3a01      	subs	r2, #1
 800add0:	0612      	lsls	r2, r2, #24
 800add2:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 800add6:	430a      	orrs	r2, r1
 800add8:	4924      	ldr	r1, [pc, #144]	@ (800ae6c <RCCEx_PLL2_Config+0x128>)
 800adda:	4313      	orrs	r3, r2
 800addc:	63cb      	str	r3, [r1, #60]	@ 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 800adde:	4b23      	ldr	r3, [pc, #140]	@ (800ae6c <RCCEx_PLL2_Config+0x128>)
 800ade0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ade2:	f023 020c 	bic.w	r2, r3, #12
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	699b      	ldr	r3, [r3, #24]
 800adea:	4920      	ldr	r1, [pc, #128]	@ (800ae6c <RCCEx_PLL2_Config+0x128>)
 800adec:	4313      	orrs	r3, r2
 800adee:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2CLKOUT_ENABLE(pll2->PLL2ClockOut);
 800adf0:	4b1e      	ldr	r3, [pc, #120]	@ (800ae6c <RCCEx_PLL2_Config+0x128>)
 800adf2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	6a1b      	ldr	r3, [r3, #32]
 800adf8:	491c      	ldr	r1, [pc, #112]	@ (800ae6c <RCCEx_PLL2_Config+0x128>)
 800adfa:	4313      	orrs	r3, r2
 800adfc:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Disable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_DISABLE();
 800adfe:	4b1b      	ldr	r3, [pc, #108]	@ (800ae6c <RCCEx_PLL2_Config+0x128>)
 800ae00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ae02:	4a1a      	ldr	r2, [pc, #104]	@ (800ae6c <RCCEx_PLL2_Config+0x128>)
 800ae04:	f023 0310 	bic.w	r3, r3, #16
 800ae08:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800ae0a:	4b18      	ldr	r3, [pc, #96]	@ (800ae6c <RCCEx_PLL2_Config+0x128>)
 800ae0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ae0e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800ae12:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800ae16:	687a      	ldr	r2, [r7, #4]
 800ae18:	69d2      	ldr	r2, [r2, #28]
 800ae1a:	00d2      	lsls	r2, r2, #3
 800ae1c:	4913      	ldr	r1, [pc, #76]	@ (800ae6c <RCCEx_PLL2_Config+0x128>)
 800ae1e:	4313      	orrs	r3, r2
 800ae20:	640b      	str	r3, [r1, #64]	@ 0x40

  /* Enable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_ENABLE();
 800ae22:	4b12      	ldr	r3, [pc, #72]	@ (800ae6c <RCCEx_PLL2_Config+0x128>)
 800ae24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ae26:	4a11      	ldr	r2, [pc, #68]	@ (800ae6c <RCCEx_PLL2_Config+0x128>)
 800ae28:	f043 0310 	orr.w	r3, r3, #16
 800ae2c:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Enable  PLL2 */
  __HAL_RCC_PLL2_ENABLE();
 800ae2e:	4b0f      	ldr	r3, [pc, #60]	@ (800ae6c <RCCEx_PLL2_Config+0x128>)
 800ae30:	681b      	ldr	r3, [r3, #0]
 800ae32:	4a0e      	ldr	r2, [pc, #56]	@ (800ae6c <RCCEx_PLL2_Config+0x128>)
 800ae34:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800ae38:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800ae3a:	f7f9 ff77 	bl	8004d2c <HAL_GetTick>
 800ae3e:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800ae40:	e008      	b.n	800ae54 <RCCEx_PLL2_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800ae42:	f7f9 ff73 	bl	8004d2c <HAL_GetTick>
 800ae46:	4602      	mov	r2, r0
 800ae48:	68fb      	ldr	r3, [r7, #12]
 800ae4a:	1ad3      	subs	r3, r2, r3
 800ae4c:	2b02      	cmp	r3, #2
 800ae4e:	d901      	bls.n	800ae54 <RCCEx_PLL2_Config+0x110>
    {
      return HAL_TIMEOUT;
 800ae50:	2303      	movs	r3, #3
 800ae52:	e006      	b.n	800ae62 <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800ae54:	4b05      	ldr	r3, [pc, #20]	@ (800ae6c <RCCEx_PLL2_Config+0x128>)
 800ae56:	681b      	ldr	r3, [r3, #0]
 800ae58:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ae5c:	2b00      	cmp	r3, #0
 800ae5e:	d0f0      	beq.n	800ae42 <RCCEx_PLL2_Config+0xfe>
    }
  }
  return HAL_OK;
 800ae60:	2300      	movs	r3, #0

}
 800ae62:	4618      	mov	r0, r3
 800ae64:	3710      	adds	r7, #16
 800ae66:	46bd      	mov	sp, r7
 800ae68:	bd80      	pop	{r7, pc}
 800ae6a:	bf00      	nop
 800ae6c:	46020c00 	.word	0x46020c00
 800ae70:	80800000 	.word	0x80800000

0800ae74 <RCCEx_PLL3_Config>:
  *         contains the configuration parameters as well as VCI clock ranges.
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 800ae74:	b580      	push	{r7, lr}
 800ae76:	b084      	sub	sp, #16
 800ae78:	af00      	add	r7, sp, #0
 800ae7a:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll3->PLL3P));
  assert_param(IS_RCC_PLLQ_VALUE(pll3->PLL3Q));
  assert_param(IS_RCC_PLLR_VALUE(pll3->PLL3R));

  /* Disable  PLL3 */
  __HAL_RCC_PLL3_DISABLE();
 800ae7c:	4b47      	ldr	r3, [pc, #284]	@ (800af9c <RCCEx_PLL3_Config+0x128>)
 800ae7e:	681b      	ldr	r3, [r3, #0]
 800ae80:	4a46      	ldr	r2, [pc, #280]	@ (800af9c <RCCEx_PLL3_Config+0x128>)
 800ae82:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800ae86:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800ae88:	f7f9 ff50 	bl	8004d2c <HAL_GetTick>
 800ae8c:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800ae8e:	e008      	b.n	800aea2 <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800ae90:	f7f9 ff4c 	bl	8004d2c <HAL_GetTick>
 800ae94:	4602      	mov	r2, r0
 800ae96:	68fb      	ldr	r3, [r7, #12]
 800ae98:	1ad3      	subs	r3, r2, r3
 800ae9a:	2b02      	cmp	r3, #2
 800ae9c:	d901      	bls.n	800aea2 <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 800ae9e:	2303      	movs	r3, #3
 800aea0:	e077      	b.n	800af92 <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800aea2:	4b3e      	ldr	r3, [pc, #248]	@ (800af9c <RCCEx_PLL3_Config+0x128>)
 800aea4:	681b      	ldr	r3, [r3, #0]
 800aea6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800aeaa:	2b00      	cmp	r3, #0
 800aeac:	d1f0      	bne.n	800ae90 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 800aeae:	4b3b      	ldr	r3, [pc, #236]	@ (800af9c <RCCEx_PLL3_Config+0x128>)
 800aeb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800aeb2:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800aeb6:	f023 0303 	bic.w	r3, r3, #3
 800aeba:	687a      	ldr	r2, [r7, #4]
 800aebc:	6811      	ldr	r1, [r2, #0]
 800aebe:	687a      	ldr	r2, [r7, #4]
 800aec0:	6852      	ldr	r2, [r2, #4]
 800aec2:	3a01      	subs	r2, #1
 800aec4:	0212      	lsls	r2, r2, #8
 800aec6:	430a      	orrs	r2, r1
 800aec8:	4934      	ldr	r1, [pc, #208]	@ (800af9c <RCCEx_PLL3_Config+0x128>)
 800aeca:	4313      	orrs	r3, r2
 800aecc:	630b      	str	r3, [r1, #48]	@ 0x30
 800aece:	4b33      	ldr	r3, [pc, #204]	@ (800af9c <RCCEx_PLL3_Config+0x128>)
 800aed0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800aed2:	4b33      	ldr	r3, [pc, #204]	@ (800afa0 <RCCEx_PLL3_Config+0x12c>)
 800aed4:	4013      	ands	r3, r2
 800aed6:	687a      	ldr	r2, [r7, #4]
 800aed8:	6892      	ldr	r2, [r2, #8]
 800aeda:	3a01      	subs	r2, #1
 800aedc:	f3c2 0108 	ubfx	r1, r2, #0, #9
 800aee0:	687a      	ldr	r2, [r7, #4]
 800aee2:	68d2      	ldr	r2, [r2, #12]
 800aee4:	3a01      	subs	r2, #1
 800aee6:	0252      	lsls	r2, r2, #9
 800aee8:	b292      	uxth	r2, r2
 800aeea:	4311      	orrs	r1, r2
 800aeec:	687a      	ldr	r2, [r7, #4]
 800aeee:	6912      	ldr	r2, [r2, #16]
 800aef0:	3a01      	subs	r2, #1
 800aef2:	0412      	lsls	r2, r2, #16
 800aef4:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 800aef8:	4311      	orrs	r1, r2
 800aefa:	687a      	ldr	r2, [r7, #4]
 800aefc:	6952      	ldr	r2, [r2, #20]
 800aefe:	3a01      	subs	r2, #1
 800af00:	0612      	lsls	r2, r2, #24
 800af02:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 800af06:	430a      	orrs	r2, r1
 800af08:	4924      	ldr	r1, [pc, #144]	@ (800af9c <RCCEx_PLL3_Config+0x128>)
 800af0a:	4313      	orrs	r3, r2
 800af0c:	644b      	str	r3, [r1, #68]	@ 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE);
 800af0e:	4b23      	ldr	r3, [pc, #140]	@ (800af9c <RCCEx_PLL3_Config+0x128>)
 800af10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800af12:	f023 020c 	bic.w	r2, r3, #12
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	699b      	ldr	r3, [r3, #24]
 800af1a:	4920      	ldr	r1, [pc, #128]	@ (800af9c <RCCEx_PLL3_Config+0x128>)
 800af1c:	4313      	orrs	r3, r2
 800af1e:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3CLKOUT_ENABLE(pll3->PLL3ClockOut);
 800af20:	4b1e      	ldr	r3, [pc, #120]	@ (800af9c <RCCEx_PLL3_Config+0x128>)
 800af22:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	6a1b      	ldr	r3, [r3, #32]
 800af28:	491c      	ldr	r1, [pc, #112]	@ (800af9c <RCCEx_PLL3_Config+0x128>)
 800af2a:	4313      	orrs	r3, r2
 800af2c:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Disable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_DISABLE();
 800af2e:	4b1b      	ldr	r3, [pc, #108]	@ (800af9c <RCCEx_PLL3_Config+0x128>)
 800af30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800af32:	4a1a      	ldr	r2, [pc, #104]	@ (800af9c <RCCEx_PLL3_Config+0x128>)
 800af34:	f023 0310 	bic.w	r3, r3, #16
 800af38:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800af3a:	4b18      	ldr	r3, [pc, #96]	@ (800af9c <RCCEx_PLL3_Config+0x128>)
 800af3c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800af3e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800af42:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800af46:	687a      	ldr	r2, [r7, #4]
 800af48:	69d2      	ldr	r2, [r2, #28]
 800af4a:	00d2      	lsls	r2, r2, #3
 800af4c:	4913      	ldr	r1, [pc, #76]	@ (800af9c <RCCEx_PLL3_Config+0x128>)
 800af4e:	4313      	orrs	r3, r2
 800af50:	648b      	str	r3, [r1, #72]	@ 0x48

  /* Enable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_ENABLE();
 800af52:	4b12      	ldr	r3, [pc, #72]	@ (800af9c <RCCEx_PLL3_Config+0x128>)
 800af54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800af56:	4a11      	ldr	r2, [pc, #68]	@ (800af9c <RCCEx_PLL3_Config+0x128>)
 800af58:	f043 0310 	orr.w	r3, r3, #16
 800af5c:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable  PLL3 */
  __HAL_RCC_PLL3_ENABLE();
 800af5e:	4b0f      	ldr	r3, [pc, #60]	@ (800af9c <RCCEx_PLL3_Config+0x128>)
 800af60:	681b      	ldr	r3, [r3, #0]
 800af62:	4a0e      	ldr	r2, [pc, #56]	@ (800af9c <RCCEx_PLL3_Config+0x128>)
 800af64:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800af68:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800af6a:	f7f9 fedf 	bl	8004d2c <HAL_GetTick>
 800af6e:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800af70:	e008      	b.n	800af84 <RCCEx_PLL3_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800af72:	f7f9 fedb 	bl	8004d2c <HAL_GetTick>
 800af76:	4602      	mov	r2, r0
 800af78:	68fb      	ldr	r3, [r7, #12]
 800af7a:	1ad3      	subs	r3, r2, r3
 800af7c:	2b02      	cmp	r3, #2
 800af7e:	d901      	bls.n	800af84 <RCCEx_PLL3_Config+0x110>
    {
      return HAL_TIMEOUT;
 800af80:	2303      	movs	r3, #3
 800af82:	e006      	b.n	800af92 <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800af84:	4b05      	ldr	r3, [pc, #20]	@ (800af9c <RCCEx_PLL3_Config+0x128>)
 800af86:	681b      	ldr	r3, [r3, #0]
 800af88:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800af8c:	2b00      	cmp	r3, #0
 800af8e:	d0f0      	beq.n	800af72 <RCCEx_PLL3_Config+0xfe>
    }
  }
  return HAL_OK;
 800af90:	2300      	movs	r3, #0
}
 800af92:	4618      	mov	r0, r3
 800af94:	3710      	adds	r7, #16
 800af96:	46bd      	mov	sp, r7
 800af98:	bd80      	pop	{r7, pc}
 800af9a:	bf00      	nop
 800af9c:	46020c00 	.word	0x46020c00
 800afa0:	80800000 	.word	0x80800000

0800afa4 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800afa4:	b580      	push	{r7, lr}
 800afa6:	b084      	sub	sp, #16
 800afa8:	af00      	add	r7, sp, #0
 800afaa:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	2b00      	cmp	r3, #0
 800afb0:	d101      	bne.n	800afb6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800afb2:	2301      	movs	r3, #1
 800afb4:	e0fb      	b.n	800b1ae <HAL_SPI_Init+0x20a>

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
  if (IS_SPI_LIMITED_INSTANCE(hspi->Instance))
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	681b      	ldr	r3, [r3, #0]
 800afba:	4a7f      	ldr	r2, [pc, #508]	@ (800b1b8 <HAL_SPI_Init+0x214>)
 800afbc:	4293      	cmp	r3, r2
 800afbe:	d004      	beq.n	800afca <HAL_SPI_Init+0x26>
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	681b      	ldr	r3, [r3, #0]
 800afc4:	4a7d      	ldr	r2, [pc, #500]	@ (800b1bc <HAL_SPI_Init+0x218>)
 800afc6:	4293      	cmp	r3, r2
 800afc8:	e000      	b.n	800afcc <HAL_SPI_Init+0x28>
  {
    assert_param(IS_SPI_LIMITED_DATASIZE(hspi->Init.DataSize));
    assert_param(IS_SPI_LIMITED_FIFOTHRESHOLD(hspi->Init.FifoThreshold));
 800afca:	bf00      	nop
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	2200      	movs	r2, #0
 800afd0:	629a      	str	r2, [r3, #40]	@ 0x28
  assert_param(IS_SPI_RDY_MASTER_MANAGEMENT(hspi->Init.ReadyMasterManagement));
  assert_param(IS_SPI_RDY_POLARITY(hspi->Init.ReadyPolarity));
  assert_param(IS_SPI_MASTER_RX_AUTOSUSP(hspi->Init.MasterReceiverAutoSusp));

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	681b      	ldr	r3, [r3, #0]
 800afd6:	4a78      	ldr	r2, [pc, #480]	@ (800b1b8 <HAL_SPI_Init+0x214>)
 800afd8:	4293      	cmp	r3, r2
 800afda:	d004      	beq.n	800afe6 <HAL_SPI_Init+0x42>
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	681b      	ldr	r3, [r3, #0]
 800afe0:	4a76      	ldr	r2, [pc, #472]	@ (800b1bc <HAL_SPI_Init+0x218>)
 800afe2:	4293      	cmp	r3, r2
 800afe4:	d105      	bne.n	800aff2 <HAL_SPI_Init+0x4e>
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	68db      	ldr	r3, [r3, #12]
 800afea:	2b0f      	cmp	r3, #15
 800afec:	d901      	bls.n	800aff2 <HAL_SPI_Init+0x4e>
  {
    return HAL_ERROR;
 800afee:	2301      	movs	r3, #1
 800aff0:	e0dd      	b.n	800b1ae <HAL_SPI_Init+0x20a>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800aff2:	6878      	ldr	r0, [r7, #4]
 800aff4:	f000 fdee 	bl	800bbd4 <SPI_GetPacketSize>
 800aff8:	60f8      	str	r0, [r7, #12]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	681b      	ldr	r3, [r3, #0]
 800affe:	4a6e      	ldr	r2, [pc, #440]	@ (800b1b8 <HAL_SPI_Init+0x214>)
 800b000:	4293      	cmp	r3, r2
 800b002:	d004      	beq.n	800b00e <HAL_SPI_Init+0x6a>
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	681b      	ldr	r3, [r3, #0]
 800b008:	4a6c      	ldr	r2, [pc, #432]	@ (800b1bc <HAL_SPI_Init+0x218>)
 800b00a:	4293      	cmp	r3, r2
 800b00c:	d102      	bne.n	800b014 <HAL_SPI_Init+0x70>
 800b00e:	68fb      	ldr	r3, [r7, #12]
 800b010:	2b08      	cmp	r3, #8
 800b012:	d816      	bhi.n	800b042 <HAL_SPI_Init+0x9e>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	681b      	ldr	r3, [r3, #0]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800b018:	4a69      	ldr	r2, [pc, #420]	@ (800b1c0 <HAL_SPI_Init+0x21c>)
 800b01a:	4293      	cmp	r3, r2
 800b01c:	d00e      	beq.n	800b03c <HAL_SPI_Init+0x98>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	681b      	ldr	r3, [r3, #0]
 800b022:	4a68      	ldr	r2, [pc, #416]	@ (800b1c4 <HAL_SPI_Init+0x220>)
 800b024:	4293      	cmp	r3, r2
 800b026:	d009      	beq.n	800b03c <HAL_SPI_Init+0x98>
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	681b      	ldr	r3, [r3, #0]
 800b02c:	4a66      	ldr	r2, [pc, #408]	@ (800b1c8 <HAL_SPI_Init+0x224>)
 800b02e:	4293      	cmp	r3, r2
 800b030:	d004      	beq.n	800b03c <HAL_SPI_Init+0x98>
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	681b      	ldr	r3, [r3, #0]
 800b036:	4a65      	ldr	r2, [pc, #404]	@ (800b1cc <HAL_SPI_Init+0x228>)
 800b038:	4293      	cmp	r3, r2
 800b03a:	d104      	bne.n	800b046 <HAL_SPI_Init+0xa2>
 800b03c:	68fb      	ldr	r3, [r7, #12]
 800b03e:	2b10      	cmp	r3, #16
 800b040:	d901      	bls.n	800b046 <HAL_SPI_Init+0xa2>
  {
    return HAL_ERROR;
 800b042:	2301      	movs	r3, #1
 800b044:	e0b3      	b.n	800b1ae <HAL_SPI_Init+0x20a>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 800b04c:	b2db      	uxtb	r3, r3
 800b04e:	2b00      	cmp	r3, #0
 800b050:	d106      	bne.n	800b060 <HAL_SPI_Init+0xbc>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	2200      	movs	r2, #0
 800b056:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800b05a:	6878      	ldr	r0, [r7, #4]
 800b05c:	f7f8 fe12 	bl	8003c84 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	2202      	movs	r2, #2
 800b064:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	681b      	ldr	r3, [r3, #0]
 800b06c:	681a      	ldr	r2, [r3, #0]
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	681b      	ldr	r3, [r3, #0]
 800b072:	f022 0201 	bic.w	r2, r2, #1
 800b076:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	681b      	ldr	r3, [r3, #0]
 800b07c:	689b      	ldr	r3, [r3, #8]
 800b07e:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 800b082:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	699b      	ldr	r3, [r3, #24]
 800b088:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800b08c:	d119      	bne.n	800b0c2 <HAL_SPI_Init+0x11e>
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	685b      	ldr	r3, [r3, #4]
 800b092:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800b096:	d103      	bne.n	800b0a0 <HAL_SPI_Init+0xfc>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800b09c:	2b00      	cmp	r3, #0
 800b09e:	d008      	beq.n	800b0b2 <HAL_SPI_Init+0x10e>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800b0a4:	2b00      	cmp	r3, #0
 800b0a6:	d10c      	bne.n	800b0c2 <HAL_SPI_Init+0x11e>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800b0ac:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b0b0:	d107      	bne.n	800b0c2 <HAL_SPI_Init+0x11e>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	681b      	ldr	r3, [r3, #0]
 800b0b6:	681a      	ldr	r2, [r3, #0]
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	681b      	ldr	r3, [r3, #0]
 800b0bc:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800b0c0:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	685b      	ldr	r3, [r3, #4]
 800b0c6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800b0ca:	2b00      	cmp	r3, #0
 800b0cc:	d00f      	beq.n	800b0ee <HAL_SPI_Init+0x14a>
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	68db      	ldr	r3, [r3, #12]
 800b0d2:	2b06      	cmp	r3, #6
 800b0d4:	d90b      	bls.n	800b0ee <HAL_SPI_Init+0x14a>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	681b      	ldr	r3, [r3, #0]
 800b0da:	681b      	ldr	r3, [r3, #0]
 800b0dc:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	681b      	ldr	r3, [r3, #0]
 800b0e8:	430a      	orrs	r2, r1
 800b0ea:	601a      	str	r2, [r3, #0]
 800b0ec:	e007      	b.n	800b0fe <HAL_SPI_Init+0x15a>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	681b      	ldr	r3, [r3, #0]
 800b0f2:	681a      	ldr	r2, [r3, #0]
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	681b      	ldr	r3, [r3, #0]
 800b0f8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800b0fc:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	69da      	ldr	r2, [r3, #28]
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b106:	431a      	orrs	r2, r3
 800b108:	68bb      	ldr	r3, [r7, #8]
 800b10a:	431a      	orrs	r2, r3
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b110:	ea42 0103 	orr.w	r1, r2, r3
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	68da      	ldr	r2, [r3, #12]
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	681b      	ldr	r3, [r3, #0]
 800b11c:	430a      	orrs	r2, r1
 800b11e:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b128:	431a      	orrs	r2, r3
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b12e:	431a      	orrs	r2, r3
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	699b      	ldr	r3, [r3, #24]
 800b134:	431a      	orrs	r2, r3
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	691b      	ldr	r3, [r3, #16]
 800b13a:	431a      	orrs	r2, r3
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	695b      	ldr	r3, [r3, #20]
 800b140:	431a      	orrs	r2, r3
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	6a1b      	ldr	r3, [r3, #32]
 800b146:	431a      	orrs	r2, r3
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	685b      	ldr	r3, [r3, #4]
 800b14c:	431a      	orrs	r2, r3
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b152:	431a      	orrs	r2, r3
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	689b      	ldr	r3, [r3, #8]
 800b158:	431a      	orrs	r2, r3
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b15e:	431a      	orrs	r2, r3
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b164:	431a      	orrs	r2, r3
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b16a:	ea42 0103 	orr.w	r1, r2, r3
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	681b      	ldr	r3, [r3, #0]
 800b176:	430a      	orrs	r2, r1
 800b178:	60da      	str	r2, [r3, #12]
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	685b      	ldr	r3, [r3, #4]
 800b17e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800b182:	2b00      	cmp	r3, #0
 800b184:	d00a      	beq.n	800b19c <HAL_SPI_Init+0x1f8>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	681b      	ldr	r3, [r3, #0]
 800b18a:	68db      	ldr	r3, [r3, #12]
 800b18c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	681b      	ldr	r3, [r3, #0]
 800b198:	430a      	orrs	r2, r1
 800b19a:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	2200      	movs	r2, #0
 800b1a0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  hspi->State     = HAL_SPI_STATE_READY;
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	2201      	movs	r2, #1
 800b1a8:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  return HAL_OK;
 800b1ac:	2300      	movs	r3, #0
}
 800b1ae:	4618      	mov	r0, r3
 800b1b0:	3710      	adds	r7, #16
 800b1b2:	46bd      	mov	sp, r7
 800b1b4:	bd80      	pop	{r7, pc}
 800b1b6:	bf00      	nop
 800b1b8:	46002000 	.word	0x46002000
 800b1bc:	56002000 	.word	0x56002000
 800b1c0:	40013000 	.word	0x40013000
 800b1c4:	50013000 	.word	0x50013000
 800b1c8:	40003800 	.word	0x40003800
 800b1cc:	50003800 	.word	0x50003800

0800b1d0 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b1d0:	b580      	push	{r7, lr}
 800b1d2:	b088      	sub	sp, #32
 800b1d4:	af02      	add	r7, sp, #8
 800b1d6:	60f8      	str	r0, [r7, #12]
 800b1d8:	60b9      	str	r1, [r7, #8]
 800b1da:	603b      	str	r3, [r7, #0]
 800b1dc:	4613      	mov	r3, r2
 800b1de:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800b1e0:	68fb      	ldr	r3, [r7, #12]
 800b1e2:	681b      	ldr	r3, [r3, #0]
 800b1e4:	3320      	adds	r3, #32
 800b1e6:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Check transfer size parameter */
  if (IS_SPI_LIMITED_INSTANCE(hspi->Instance))
 800b1e8:	68fb      	ldr	r3, [r7, #12]
 800b1ea:	681b      	ldr	r3, [r3, #0]
 800b1ec:	4a90      	ldr	r2, [pc, #576]	@ (800b430 <HAL_SPI_Transmit+0x260>)
 800b1ee:	4293      	cmp	r3, r2
  {
    assert_param(IS_SPI_TRANSFER_SIZE(Size));
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800b1f0:	f7f9 fd9c 	bl	8004d2c <HAL_GetTick>
 800b1f4:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800b1f6:	68fb      	ldr	r3, [r7, #12]
 800b1f8:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 800b1fc:	b2db      	uxtb	r3, r3
 800b1fe:	2b01      	cmp	r3, #1
 800b200:	d001      	beq.n	800b206 <HAL_SPI_Transmit+0x36>
  {
    return HAL_BUSY;
 800b202:	2302      	movs	r3, #2
 800b204:	e1f4      	b.n	800b5f0 <HAL_SPI_Transmit+0x420>
  }

  if ((pData == NULL) || (Size == 0UL))
 800b206:	68bb      	ldr	r3, [r7, #8]
 800b208:	2b00      	cmp	r3, #0
 800b20a:	d002      	beq.n	800b212 <HAL_SPI_Transmit+0x42>
 800b20c:	88fb      	ldrh	r3, [r7, #6]
 800b20e:	2b00      	cmp	r3, #0
 800b210:	d101      	bne.n	800b216 <HAL_SPI_Transmit+0x46>
  {
    return HAL_ERROR;
 800b212:	2301      	movs	r3, #1
 800b214:	e1ec      	b.n	800b5f0 <HAL_SPI_Transmit+0x420>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800b216:	68fb      	ldr	r3, [r7, #12]
 800b218:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 800b21c:	2b01      	cmp	r3, #1
 800b21e:	d101      	bne.n	800b224 <HAL_SPI_Transmit+0x54>
 800b220:	2302      	movs	r3, #2
 800b222:	e1e5      	b.n	800b5f0 <HAL_SPI_Transmit+0x420>
 800b224:	68fb      	ldr	r3, [r7, #12]
 800b226:	2201      	movs	r2, #1
 800b228:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800b22c:	68fb      	ldr	r3, [r7, #12]
 800b22e:	2203      	movs	r2, #3
 800b230:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b234:	68fb      	ldr	r3, [r7, #12]
 800b236:	2200      	movs	r2, #0
 800b238:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800b23c:	68fb      	ldr	r3, [r7, #12]
 800b23e:	68ba      	ldr	r2, [r7, #8]
 800b240:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->TxXferSize  = Size;
 800b242:	68fb      	ldr	r3, [r7, #12]
 800b244:	88fa      	ldrh	r2, [r7, #6]
 800b246:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->TxXferCount = Size;
 800b24a:	68fb      	ldr	r3, [r7, #12]
 800b24c:	88fa      	ldrh	r2, [r7, #6]
 800b24e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 800b252:	68fb      	ldr	r3, [r7, #12]
 800b254:	2200      	movs	r2, #0
 800b256:	66da      	str	r2, [r3, #108]	@ 0x6c
  hspi->RxXferSize  = (uint16_t) 0UL;
 800b258:	68fb      	ldr	r3, [r7, #12]
 800b25a:	2200      	movs	r2, #0
 800b25c:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70
  hspi->RxXferCount = (uint16_t) 0UL;
 800b260:	68fb      	ldr	r3, [r7, #12]
 800b262:	2200      	movs	r2, #0
 800b264:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
  hspi->TxISR       = NULL;
 800b268:	68fb      	ldr	r3, [r7, #12]
 800b26a:	2200      	movs	r2, #0
 800b26c:	67da      	str	r2, [r3, #124]	@ 0x7c
  hspi->RxISR       = NULL;
 800b26e:	68fb      	ldr	r3, [r7, #12]
 800b270:	2200      	movs	r2, #0
 800b272:	679a      	str	r2, [r3, #120]	@ 0x78

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b274:	68fb      	ldr	r3, [r7, #12]
 800b276:	689b      	ldr	r3, [r3, #8]
 800b278:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 800b27c:	d108      	bne.n	800b290 <HAL_SPI_Transmit+0xc0>
  {
    SPI_1LINE_TX(hspi);
 800b27e:	68fb      	ldr	r3, [r7, #12]
 800b280:	681b      	ldr	r3, [r3, #0]
 800b282:	681a      	ldr	r2, [r3, #0]
 800b284:	68fb      	ldr	r3, [r7, #12]
 800b286:	681b      	ldr	r3, [r3, #0]
 800b288:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800b28c:	601a      	str	r2, [r3, #0]
 800b28e:	e009      	b.n	800b2a4 <HAL_SPI_Transmit+0xd4>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 800b290:	68fb      	ldr	r3, [r7, #12]
 800b292:	681b      	ldr	r3, [r3, #0]
 800b294:	68db      	ldr	r3, [r3, #12]
 800b296:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 800b29a:	68fb      	ldr	r3, [r7, #12]
 800b29c:	681b      	ldr	r3, [r3, #0]
 800b29e:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800b2a2:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800b2a4:	68fb      	ldr	r3, [r7, #12]
 800b2a6:	681b      	ldr	r3, [r3, #0]
 800b2a8:	685b      	ldr	r3, [r3, #4]
 800b2aa:	0c1b      	lsrs	r3, r3, #16
 800b2ac:	041b      	lsls	r3, r3, #16
 800b2ae:	88f9      	ldrh	r1, [r7, #6]
 800b2b0:	68fa      	ldr	r2, [r7, #12]
 800b2b2:	6812      	ldr	r2, [r2, #0]
 800b2b4:	430b      	orrs	r3, r1
 800b2b6:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800b2b8:	68fb      	ldr	r3, [r7, #12]
 800b2ba:	681b      	ldr	r3, [r3, #0]
 800b2bc:	681a      	ldr	r2, [r3, #0]
 800b2be:	68fb      	ldr	r3, [r7, #12]
 800b2c0:	681b      	ldr	r3, [r3, #0]
 800b2c2:	f042 0201 	orr.w	r2, r2, #1
 800b2c6:	601a      	str	r2, [r3, #0]

  if (((hspi->Instance->AUTOCR & SPI_AUTOCR_TRIGEN) == 0U) && (hspi->Init.Mode == SPI_MODE_MASTER))
 800b2c8:	68fb      	ldr	r3, [r7, #12]
 800b2ca:	681b      	ldr	r3, [r3, #0]
 800b2cc:	69db      	ldr	r3, [r3, #28]
 800b2ce:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800b2d2:	2b00      	cmp	r3, #0
 800b2d4:	d10c      	bne.n	800b2f0 <HAL_SPI_Transmit+0x120>
 800b2d6:	68fb      	ldr	r3, [r7, #12]
 800b2d8:	685b      	ldr	r3, [r3, #4]
 800b2da:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800b2de:	d107      	bne.n	800b2f0 <HAL_SPI_Transmit+0x120>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800b2e0:	68fb      	ldr	r3, [r7, #12]
 800b2e2:	681b      	ldr	r3, [r3, #0]
 800b2e4:	681a      	ldr	r2, [r3, #0]
 800b2e6:	68fb      	ldr	r3, [r7, #12]
 800b2e8:	681b      	ldr	r3, [r3, #0]
 800b2ea:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800b2ee:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 800b2f0:	68fb      	ldr	r3, [r7, #12]
 800b2f2:	68db      	ldr	r3, [r3, #12]
 800b2f4:	2b0f      	cmp	r3, #15
 800b2f6:	d95b      	bls.n	800b3b0 <HAL_SPI_Transmit+0x1e0>
 800b2f8:	68fb      	ldr	r3, [r7, #12]
 800b2fa:	681b      	ldr	r3, [r3, #0]
 800b2fc:	4a4d      	ldr	r2, [pc, #308]	@ (800b434 <HAL_SPI_Transmit+0x264>)
 800b2fe:	4293      	cmp	r3, r2
 800b300:	d04f      	beq.n	800b3a2 <HAL_SPI_Transmit+0x1d2>
 800b302:	68fb      	ldr	r3, [r7, #12]
 800b304:	681b      	ldr	r3, [r3, #0]
 800b306:	4a4c      	ldr	r2, [pc, #304]	@ (800b438 <HAL_SPI_Transmit+0x268>)
 800b308:	4293      	cmp	r3, r2
 800b30a:	d04a      	beq.n	800b3a2 <HAL_SPI_Transmit+0x1d2>
 800b30c:	68fb      	ldr	r3, [r7, #12]
 800b30e:	681b      	ldr	r3, [r3, #0]
 800b310:	4a4a      	ldr	r2, [pc, #296]	@ (800b43c <HAL_SPI_Transmit+0x26c>)
 800b312:	4293      	cmp	r3, r2
 800b314:	d045      	beq.n	800b3a2 <HAL_SPI_Transmit+0x1d2>
 800b316:	68fb      	ldr	r3, [r7, #12]
 800b318:	681b      	ldr	r3, [r3, #0]
 800b31a:	4a49      	ldr	r2, [pc, #292]	@ (800b440 <HAL_SPI_Transmit+0x270>)
 800b31c:	4293      	cmp	r3, r2
 800b31e:	d147      	bne.n	800b3b0 <HAL_SPI_Transmit+0x1e0>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800b320:	e03f      	b.n	800b3a2 <HAL_SPI_Transmit+0x1d2>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800b322:	68fb      	ldr	r3, [r7, #12]
 800b324:	681b      	ldr	r3, [r3, #0]
 800b326:	695b      	ldr	r3, [r3, #20]
 800b328:	f003 0302 	and.w	r3, r3, #2
 800b32c:	2b02      	cmp	r3, #2
 800b32e:	d114      	bne.n	800b35a <HAL_SPI_Transmit+0x18a>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800b330:	68fb      	ldr	r3, [r7, #12]
 800b332:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800b334:	68fb      	ldr	r3, [r7, #12]
 800b336:	681b      	ldr	r3, [r3, #0]
 800b338:	6812      	ldr	r2, [r2, #0]
 800b33a:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800b33c:	68fb      	ldr	r3, [r7, #12]
 800b33e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b340:	1d1a      	adds	r2, r3, #4
 800b342:	68fb      	ldr	r3, [r7, #12]
 800b344:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->TxXferCount--;
 800b346:	68fb      	ldr	r3, [r7, #12]
 800b348:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800b34c:	b29b      	uxth	r3, r3
 800b34e:	3b01      	subs	r3, #1
 800b350:	b29a      	uxth	r2, r3
 800b352:	68fb      	ldr	r3, [r7, #12]
 800b354:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800b358:	e023      	b.n	800b3a2 <HAL_SPI_Transmit+0x1d2>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b35a:	f7f9 fce7 	bl	8004d2c <HAL_GetTick>
 800b35e:	4602      	mov	r2, r0
 800b360:	693b      	ldr	r3, [r7, #16]
 800b362:	1ad3      	subs	r3, r2, r3
 800b364:	683a      	ldr	r2, [r7, #0]
 800b366:	429a      	cmp	r2, r3
 800b368:	d803      	bhi.n	800b372 <HAL_SPI_Transmit+0x1a2>
 800b36a:	683b      	ldr	r3, [r7, #0]
 800b36c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b370:	d102      	bne.n	800b378 <HAL_SPI_Transmit+0x1a8>
 800b372:	683b      	ldr	r3, [r7, #0]
 800b374:	2b00      	cmp	r3, #0
 800b376:	d114      	bne.n	800b3a2 <HAL_SPI_Transmit+0x1d2>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800b378:	68f8      	ldr	r0, [r7, #12]
 800b37a:	f000 fb5d 	bl	800ba38 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800b37e:	68fb      	ldr	r3, [r7, #12]
 800b380:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b384:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800b388:	68fb      	ldr	r3, [r7, #12]
 800b38a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 800b38e:	68fb      	ldr	r3, [r7, #12]
 800b390:	2201      	movs	r2, #1
 800b392:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800b396:	68fb      	ldr	r3, [r7, #12]
 800b398:	2200      	movs	r2, #0
 800b39a:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

          return HAL_TIMEOUT;
 800b39e:	2303      	movs	r3, #3
 800b3a0:	e126      	b.n	800b5f0 <HAL_SPI_Transmit+0x420>
    while (hspi->TxXferCount > 0UL)
 800b3a2:	68fb      	ldr	r3, [r7, #12]
 800b3a4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800b3a8:	b29b      	uxth	r3, r3
 800b3aa:	2b00      	cmp	r3, #0
 800b3ac:	d1b9      	bne.n	800b322 <HAL_SPI_Transmit+0x152>
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 800b3ae:	e0f9      	b.n	800b5a4 <HAL_SPI_Transmit+0x3d4>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800b3b0:	68fb      	ldr	r3, [r7, #12]
 800b3b2:	68db      	ldr	r3, [r3, #12]
 800b3b4:	2b07      	cmp	r3, #7
 800b3b6:	f240 80ee 	bls.w	800b596 <HAL_SPI_Transmit+0x3c6>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800b3ba:	e067      	b.n	800b48c <HAL_SPI_Transmit+0x2bc>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800b3bc:	68fb      	ldr	r3, [r7, #12]
 800b3be:	681b      	ldr	r3, [r3, #0]
 800b3c0:	695b      	ldr	r3, [r3, #20]
 800b3c2:	f003 0302 	and.w	r3, r3, #2
 800b3c6:	2b02      	cmp	r3, #2
 800b3c8:	d13c      	bne.n	800b444 <HAL_SPI_Transmit+0x274>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800b3ca:	68fb      	ldr	r3, [r7, #12]
 800b3cc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800b3d0:	b29b      	uxth	r3, r3
 800b3d2:	2b01      	cmp	r3, #1
 800b3d4:	d918      	bls.n	800b408 <HAL_SPI_Transmit+0x238>
 800b3d6:	68fb      	ldr	r3, [r7, #12]
 800b3d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b3da:	2b00      	cmp	r3, #0
 800b3dc:	d014      	beq.n	800b408 <HAL_SPI_Transmit+0x238>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800b3de:	68fb      	ldr	r3, [r7, #12]
 800b3e0:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800b3e2:	68fb      	ldr	r3, [r7, #12]
 800b3e4:	681b      	ldr	r3, [r3, #0]
 800b3e6:	6812      	ldr	r2, [r2, #0]
 800b3e8:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800b3ea:	68fb      	ldr	r3, [r7, #12]
 800b3ec:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b3ee:	1d1a      	adds	r2, r3, #4
 800b3f0:	68fb      	ldr	r3, [r7, #12]
 800b3f2:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount -= (uint16_t)2UL;
 800b3f4:	68fb      	ldr	r3, [r7, #12]
 800b3f6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800b3fa:	b29b      	uxth	r3, r3
 800b3fc:	3b02      	subs	r3, #2
 800b3fe:	b29a      	uxth	r2, r3
 800b400:	68fb      	ldr	r3, [r7, #12]
 800b402:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800b406:	e041      	b.n	800b48c <HAL_SPI_Transmit+0x2bc>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800b408:	68fb      	ldr	r3, [r7, #12]
 800b40a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b40c:	881a      	ldrh	r2, [r3, #0]
 800b40e:	697b      	ldr	r3, [r7, #20]
 800b410:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800b412:	68fb      	ldr	r3, [r7, #12]
 800b414:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b416:	1c9a      	adds	r2, r3, #2
 800b418:	68fb      	ldr	r3, [r7, #12]
 800b41a:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount--;
 800b41c:	68fb      	ldr	r3, [r7, #12]
 800b41e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800b422:	b29b      	uxth	r3, r3
 800b424:	3b01      	subs	r3, #1
 800b426:	b29a      	uxth	r2, r3
 800b428:	68fb      	ldr	r3, [r7, #12]
 800b42a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800b42e:	e02d      	b.n	800b48c <HAL_SPI_Transmit+0x2bc>
 800b430:	46002000 	.word	0x46002000
 800b434:	40013000 	.word	0x40013000
 800b438:	50013000 	.word	0x50013000
 800b43c:	40003800 	.word	0x40003800
 800b440:	50003800 	.word	0x50003800
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b444:	f7f9 fc72 	bl	8004d2c <HAL_GetTick>
 800b448:	4602      	mov	r2, r0
 800b44a:	693b      	ldr	r3, [r7, #16]
 800b44c:	1ad3      	subs	r3, r2, r3
 800b44e:	683a      	ldr	r2, [r7, #0]
 800b450:	429a      	cmp	r2, r3
 800b452:	d803      	bhi.n	800b45c <HAL_SPI_Transmit+0x28c>
 800b454:	683b      	ldr	r3, [r7, #0]
 800b456:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b45a:	d102      	bne.n	800b462 <HAL_SPI_Transmit+0x292>
 800b45c:	683b      	ldr	r3, [r7, #0]
 800b45e:	2b00      	cmp	r3, #0
 800b460:	d114      	bne.n	800b48c <HAL_SPI_Transmit+0x2bc>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800b462:	68f8      	ldr	r0, [r7, #12]
 800b464:	f000 fae8 	bl	800ba38 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800b468:	68fb      	ldr	r3, [r7, #12]
 800b46a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b46e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800b472:	68fb      	ldr	r3, [r7, #12]
 800b474:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 800b478:	68fb      	ldr	r3, [r7, #12]
 800b47a:	2201      	movs	r2, #1
 800b47c:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800b480:	68fb      	ldr	r3, [r7, #12]
 800b482:	2200      	movs	r2, #0
 800b484:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

          return HAL_TIMEOUT;
 800b488:	2303      	movs	r3, #3
 800b48a:	e0b1      	b.n	800b5f0 <HAL_SPI_Transmit+0x420>
    while (hspi->TxXferCount > 0UL)
 800b48c:	68fb      	ldr	r3, [r7, #12]
 800b48e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800b492:	b29b      	uxth	r3, r3
 800b494:	2b00      	cmp	r3, #0
 800b496:	d191      	bne.n	800b3bc <HAL_SPI_Transmit+0x1ec>
 800b498:	e084      	b.n	800b5a4 <HAL_SPI_Transmit+0x3d4>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800b49a:	68fb      	ldr	r3, [r7, #12]
 800b49c:	681b      	ldr	r3, [r3, #0]
 800b49e:	695b      	ldr	r3, [r3, #20]
 800b4a0:	f003 0302 	and.w	r3, r3, #2
 800b4a4:	2b02      	cmp	r3, #2
 800b4a6:	d152      	bne.n	800b54e <HAL_SPI_Transmit+0x37e>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800b4a8:	68fb      	ldr	r3, [r7, #12]
 800b4aa:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800b4ae:	b29b      	uxth	r3, r3
 800b4b0:	2b03      	cmp	r3, #3
 800b4b2:	d918      	bls.n	800b4e6 <HAL_SPI_Transmit+0x316>
 800b4b4:	68fb      	ldr	r3, [r7, #12]
 800b4b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b4b8:	2b40      	cmp	r3, #64	@ 0x40
 800b4ba:	d914      	bls.n	800b4e6 <HAL_SPI_Transmit+0x316>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800b4bc:	68fb      	ldr	r3, [r7, #12]
 800b4be:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800b4c0:	68fb      	ldr	r3, [r7, #12]
 800b4c2:	681b      	ldr	r3, [r3, #0]
 800b4c4:	6812      	ldr	r2, [r2, #0]
 800b4c6:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800b4c8:	68fb      	ldr	r3, [r7, #12]
 800b4ca:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b4cc:	1d1a      	adds	r2, r3, #4
 800b4ce:	68fb      	ldr	r3, [r7, #12]
 800b4d0:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount -= (uint16_t)4UL;
 800b4d2:	68fb      	ldr	r3, [r7, #12]
 800b4d4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800b4d8:	b29b      	uxth	r3, r3
 800b4da:	3b04      	subs	r3, #4
 800b4dc:	b29a      	uxth	r2, r3
 800b4de:	68fb      	ldr	r3, [r7, #12]
 800b4e0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800b4e4:	e057      	b.n	800b596 <HAL_SPI_Transmit+0x3c6>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800b4e6:	68fb      	ldr	r3, [r7, #12]
 800b4e8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800b4ec:	b29b      	uxth	r3, r3
 800b4ee:	2b01      	cmp	r3, #1
 800b4f0:	d917      	bls.n	800b522 <HAL_SPI_Transmit+0x352>
 800b4f2:	68fb      	ldr	r3, [r7, #12]
 800b4f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b4f6:	2b00      	cmp	r3, #0
 800b4f8:	d013      	beq.n	800b522 <HAL_SPI_Transmit+0x352>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800b4fa:	68fb      	ldr	r3, [r7, #12]
 800b4fc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b4fe:	881a      	ldrh	r2, [r3, #0]
 800b500:	697b      	ldr	r3, [r7, #20]
 800b502:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800b504:	68fb      	ldr	r3, [r7, #12]
 800b506:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b508:	1c9a      	adds	r2, r3, #2
 800b50a:	68fb      	ldr	r3, [r7, #12]
 800b50c:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount -= (uint16_t)2UL;
 800b50e:	68fb      	ldr	r3, [r7, #12]
 800b510:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800b514:	b29b      	uxth	r3, r3
 800b516:	3b02      	subs	r3, #2
 800b518:	b29a      	uxth	r2, r3
 800b51a:	68fb      	ldr	r3, [r7, #12]
 800b51c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800b520:	e039      	b.n	800b596 <HAL_SPI_Transmit+0x3c6>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800b522:	68fb      	ldr	r3, [r7, #12]
 800b524:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800b526:	68fb      	ldr	r3, [r7, #12]
 800b528:	681b      	ldr	r3, [r3, #0]
 800b52a:	3320      	adds	r3, #32
 800b52c:	7812      	ldrb	r2, [r2, #0]
 800b52e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800b530:	68fb      	ldr	r3, [r7, #12]
 800b532:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b534:	1c5a      	adds	r2, r3, #1
 800b536:	68fb      	ldr	r3, [r7, #12]
 800b538:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount--;
 800b53a:	68fb      	ldr	r3, [r7, #12]
 800b53c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800b540:	b29b      	uxth	r3, r3
 800b542:	3b01      	subs	r3, #1
 800b544:	b29a      	uxth	r2, r3
 800b546:	68fb      	ldr	r3, [r7, #12]
 800b548:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800b54c:	e023      	b.n	800b596 <HAL_SPI_Transmit+0x3c6>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b54e:	f7f9 fbed 	bl	8004d2c <HAL_GetTick>
 800b552:	4602      	mov	r2, r0
 800b554:	693b      	ldr	r3, [r7, #16]
 800b556:	1ad3      	subs	r3, r2, r3
 800b558:	683a      	ldr	r2, [r7, #0]
 800b55a:	429a      	cmp	r2, r3
 800b55c:	d803      	bhi.n	800b566 <HAL_SPI_Transmit+0x396>
 800b55e:	683b      	ldr	r3, [r7, #0]
 800b560:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b564:	d102      	bne.n	800b56c <HAL_SPI_Transmit+0x39c>
 800b566:	683b      	ldr	r3, [r7, #0]
 800b568:	2b00      	cmp	r3, #0
 800b56a:	d114      	bne.n	800b596 <HAL_SPI_Transmit+0x3c6>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800b56c:	68f8      	ldr	r0, [r7, #12]
 800b56e:	f000 fa63 	bl	800ba38 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800b572:	68fb      	ldr	r3, [r7, #12]
 800b574:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b578:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800b57c:	68fb      	ldr	r3, [r7, #12]
 800b57e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 800b582:	68fb      	ldr	r3, [r7, #12]
 800b584:	2201      	movs	r2, #1
 800b586:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800b58a:	68fb      	ldr	r3, [r7, #12]
 800b58c:	2200      	movs	r2, #0
 800b58e:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

          return HAL_TIMEOUT;
 800b592:	2303      	movs	r3, #3
 800b594:	e02c      	b.n	800b5f0 <HAL_SPI_Transmit+0x420>
    while (hspi->TxXferCount > 0UL)
 800b596:	68fb      	ldr	r3, [r7, #12]
 800b598:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800b59c:	b29b      	uxth	r3, r3
 800b59e:	2b00      	cmp	r3, #0
 800b5a0:	f47f af7b 	bne.w	800b49a <HAL_SPI_Transmit+0x2ca>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 800b5a4:	693b      	ldr	r3, [r7, #16]
 800b5a6:	9300      	str	r3, [sp, #0]
 800b5a8:	683b      	ldr	r3, [r7, #0]
 800b5aa:	2200      	movs	r2, #0
 800b5ac:	2108      	movs	r1, #8
 800b5ae:	68f8      	ldr	r0, [r7, #12]
 800b5b0:	f000 fae2 	bl	800bb78 <SPI_WaitOnFlagUntilTimeout>
 800b5b4:	4603      	mov	r3, r0
 800b5b6:	2b00      	cmp	r3, #0
 800b5b8:	d007      	beq.n	800b5ca <HAL_SPI_Transmit+0x3fa>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b5ba:	68fb      	ldr	r3, [r7, #12]
 800b5bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b5c0:	f043 0220 	orr.w	r2, r3, #32
 800b5c4:	68fb      	ldr	r3, [r7, #12]
 800b5c6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800b5ca:	68f8      	ldr	r0, [r7, #12]
 800b5cc:	f000 fa34 	bl	800ba38 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 800b5d0:	68fb      	ldr	r3, [r7, #12]
 800b5d2:	2201      	movs	r2, #1
 800b5d4:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800b5d8:	68fb      	ldr	r3, [r7, #12]
 800b5da:	2200      	movs	r2, #0
 800b5dc:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800b5e0:	68fb      	ldr	r3, [r7, #12]
 800b5e2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b5e6:	2b00      	cmp	r3, #0
 800b5e8:	d001      	beq.n	800b5ee <HAL_SPI_Transmit+0x41e>
  {
    return HAL_ERROR;
 800b5ea:	2301      	movs	r3, #1
 800b5ec:	e000      	b.n	800b5f0 <HAL_SPI_Transmit+0x420>
  }
  else
  {
    return HAL_OK;
 800b5ee:	2300      	movs	r3, #0
  }
}
 800b5f0:	4618      	mov	r0, r3
 800b5f2:	3718      	adds	r7, #24
 800b5f4:	46bd      	mov	sp, r7
 800b5f6:	bd80      	pop	{r7, pc}

0800b5f8 <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800b5f8:	b580      	push	{r7, lr}
 800b5fa:	b08a      	sub	sp, #40	@ 0x28
 800b5fc:	af00      	add	r7, sp, #0
 800b5fe:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	681b      	ldr	r3, [r3, #0]
 800b604:	691b      	ldr	r3, [r3, #16]
 800b606:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	681b      	ldr	r3, [r3, #0]
 800b60c:	695b      	ldr	r3, [r3, #20]
 800b60e:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 800b610:	6a3a      	ldr	r2, [r7, #32]
 800b612:	69fb      	ldr	r3, [r7, #28]
 800b614:	4013      	ands	r3, r2
 800b616:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	681b      	ldr	r3, [r3, #0]
 800b61c:	689b      	ldr	r3, [r3, #8]
 800b61e:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 800b620:	2300      	movs	r3, #0
 800b622:	627b      	str	r3, [r7, #36]	@ 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 800b62a:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	681b      	ldr	r3, [r3, #0]
 800b630:	3330      	adds	r3, #48	@ 0x30
 800b632:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */

  /* SPI in SUSPEND mode  ----------------------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 800b634:	69fb      	ldr	r3, [r7, #28]
 800b636:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b63a:	2b00      	cmp	r3, #0
 800b63c:	d010      	beq.n	800b660 <HAL_SPI_IRQHandler+0x68>
 800b63e:	6a3b      	ldr	r3, [r7, #32]
 800b640:	f003 0308 	and.w	r3, r3, #8
 800b644:	2b00      	cmp	r3, #0
 800b646:	d00b      	beq.n	800b660 <HAL_SPI_IRQHandler+0x68>
  {
    /* Clear the Suspend flag */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	681b      	ldr	r3, [r3, #0]
 800b64c:	699a      	ldr	r2, [r3, #24]
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	681b      	ldr	r3, [r3, #0]
 800b652:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800b656:	619a      	str	r2, [r3, #24]

    /* Suspend on going, Call the Suspend callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->SuspendCallback(hspi);
#else
    HAL_SPI_SuspendCallback(hspi);
 800b658:	6878      	ldr	r0, [r7, #4]
 800b65a:	f000 f9c9 	bl	800b9f0 <HAL_SPI_SuspendCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    return;
 800b65e:	e19a      	b.n	800b996 <HAL_SPI_IRQHandler+0x39e>
  }

  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 800b660:	69bb      	ldr	r3, [r7, #24]
 800b662:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b666:	2b00      	cmp	r3, #0
 800b668:	d113      	bne.n	800b692 <HAL_SPI_IRQHandler+0x9a>
 800b66a:	69bb      	ldr	r3, [r7, #24]
 800b66c:	f003 0320 	and.w	r3, r3, #32
 800b670:	2b00      	cmp	r3, #0
 800b672:	d10e      	bne.n	800b692 <HAL_SPI_IRQHandler+0x9a>
      HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 800b674:	69bb      	ldr	r3, [r7, #24]
 800b676:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 800b67a:	2b00      	cmp	r3, #0
 800b67c:	d009      	beq.n	800b692 <HAL_SPI_IRQHandler+0x9a>
  {
    hspi->TxISR(hspi);
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b682:	6878      	ldr	r0, [r7, #4]
 800b684:	4798      	blx	r3
    hspi->RxISR(hspi);
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800b68a:	6878      	ldr	r0, [r7, #4]
 800b68c:	4798      	blx	r3
    handled = 1UL;
 800b68e:	2301      	movs	r3, #1
 800b690:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 800b692:	69bb      	ldr	r3, [r7, #24]
 800b694:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b698:	2b00      	cmp	r3, #0
 800b69a:	d10f      	bne.n	800b6bc <HAL_SPI_IRQHandler+0xc4>
 800b69c:	69bb      	ldr	r3, [r7, #24]
 800b69e:	f003 0301 	and.w	r3, r3, #1
 800b6a2:	2b00      	cmp	r3, #0
 800b6a4:	d00a      	beq.n	800b6bc <HAL_SPI_IRQHandler+0xc4>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 800b6a6:	69bb      	ldr	r3, [r7, #24]
 800b6a8:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 800b6ac:	2b00      	cmp	r3, #0
 800b6ae:	d105      	bne.n	800b6bc <HAL_SPI_IRQHandler+0xc4>
  {
    hspi->RxISR(hspi);
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800b6b4:	6878      	ldr	r0, [r7, #4]
 800b6b6:	4798      	blx	r3
    handled = 1UL;
 800b6b8:	2301      	movs	r3, #1
 800b6ba:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 800b6bc:	69bb      	ldr	r3, [r7, #24]
 800b6be:	f003 0320 	and.w	r3, r3, #32
 800b6c2:	2b00      	cmp	r3, #0
 800b6c4:	d10f      	bne.n	800b6e6 <HAL_SPI_IRQHandler+0xee>
 800b6c6:	69bb      	ldr	r3, [r7, #24]
 800b6c8:	f003 0302 	and.w	r3, r3, #2
 800b6cc:	2b00      	cmp	r3, #0
 800b6ce:	d00a      	beq.n	800b6e6 <HAL_SPI_IRQHandler+0xee>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 800b6d0:	69bb      	ldr	r3, [r7, #24]
 800b6d2:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 800b6d6:	2b00      	cmp	r3, #0
 800b6d8:	d105      	bne.n	800b6e6 <HAL_SPI_IRQHandler+0xee>
  {
    hspi->TxISR(hspi);
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b6de:	6878      	ldr	r0, [r7, #4]
 800b6e0:	4798      	blx	r3
    handled = 1UL;
 800b6e2:	2301      	movs	r3, #1
 800b6e4:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  if (handled != 0UL)
 800b6e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b6e8:	2b00      	cmp	r3, #0
 800b6ea:	f040 814f 	bne.w	800b98c <HAL_SPI_IRQHandler+0x394>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 800b6ee:	69bb      	ldr	r3, [r7, #24]
 800b6f0:	f003 0308 	and.w	r3, r3, #8
 800b6f4:	2b00      	cmp	r3, #0
 800b6f6:	f000 808b 	beq.w	800b810 <HAL_SPI_IRQHandler+0x218>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	681b      	ldr	r3, [r3, #0]
 800b6fe:	699a      	ldr	r2, [r3, #24]
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	681b      	ldr	r3, [r3, #0]
 800b704:	f042 0208 	orr.w	r2, r2, #8
 800b708:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	681b      	ldr	r3, [r3, #0]
 800b70e:	699a      	ldr	r2, [r3, #24]
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	681b      	ldr	r3, [r3, #0]
 800b714:	f042 0210 	orr.w	r2, r2, #16
 800b718:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	681b      	ldr	r3, [r3, #0]
 800b71e:	699a      	ldr	r2, [r3, #24]
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	681b      	ldr	r3, [r3, #0]
 800b724:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800b728:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	681b      	ldr	r3, [r3, #0]
 800b72e:	691a      	ldr	r2, [r3, #16]
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	681b      	ldr	r3, [r3, #0]
 800b734:	f022 0208 	bic.w	r2, r2, #8
 800b738:	611a      	str	r2, [r3, #16]

    /* For the IT based receive extra polling maybe required for last packet */
    if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800b73a:	687b      	ldr	r3, [r7, #4]
 800b73c:	681b      	ldr	r3, [r3, #0]
 800b73e:	689b      	ldr	r3, [r3, #8]
 800b740:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800b744:	2b00      	cmp	r3, #0
 800b746:	d13d      	bne.n	800b7c4 <HAL_SPI_IRQHandler+0x1cc>
    {
      /* Pooling remaining data */
      while (hspi->RxXferCount != 0UL)
 800b748:	e036      	b.n	800b7b8 <HAL_SPI_IRQHandler+0x1c0>
      {
        /* Receive data in 32 Bit mode */
        if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	68db      	ldr	r3, [r3, #12]
 800b74e:	2b0f      	cmp	r3, #15
 800b750:	d90b      	bls.n	800b76a <HAL_SPI_IRQHandler+0x172>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	681a      	ldr	r2, [r3, #0]
 800b756:	687b      	ldr	r3, [r7, #4]
 800b758:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b75a:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800b75c:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800b75e:	687b      	ldr	r3, [r7, #4]
 800b760:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b762:	1d1a      	adds	r2, r3, #4
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	66da      	str	r2, [r3, #108]	@ 0x6c
 800b768:	e01d      	b.n	800b7a6 <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 16 Bit mode */
        else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	68db      	ldr	r3, [r3, #12]
 800b76e:	2b07      	cmp	r3, #7
 800b770:	d90b      	bls.n	800b78a <HAL_SPI_IRQHandler+0x192>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b776:	68fa      	ldr	r2, [r7, #12]
 800b778:	8812      	ldrh	r2, [r2, #0]
 800b77a:	b292      	uxth	r2, r2
 800b77c:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b782:	1c9a      	adds	r2, r3, #2
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	66da      	str	r2, [r3, #108]	@ 0x6c
 800b788:	e00d      	b.n	800b7a6 <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 8 Bit mode */
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	681b      	ldr	r3, [r3, #0]
 800b78e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b796:	7812      	ldrb	r2, [r2, #0]
 800b798:	b2d2      	uxtb	r2, r2
 800b79a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b7a0:	1c5a      	adds	r2, r3, #1
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	66da      	str	r2, [r3, #108]	@ 0x6c
        }

        hspi->RxXferCount--;
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 800b7ac:	b29b      	uxth	r3, r3
 800b7ae:	3b01      	subs	r3, #1
 800b7b0:	b29a      	uxth	r2, r3
 800b7b2:	687b      	ldr	r3, [r7, #4]
 800b7b4:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
      while (hspi->RxXferCount != 0UL)
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 800b7be:	b29b      	uxth	r3, r3
 800b7c0:	2b00      	cmp	r3, #0
 800b7c2:	d1c2      	bne.n	800b74a <HAL_SPI_IRQHandler+0x152>
      }
    }

    /* Call SPI Standard close procedure */
    SPI_CloseTransfer(hspi);
 800b7c4:	6878      	ldr	r0, [r7, #4]
 800b7c6:	f000 f937 	bl	800ba38 <SPI_CloseTransfer>

    hspi->State = HAL_SPI_STATE_READY;
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	2201      	movs	r2, #1
 800b7ce:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b7d8:	2b00      	cmp	r3, #0
 800b7da:	d003      	beq.n	800b7e4 <HAL_SPI_IRQHandler+0x1ec>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800b7dc:	6878      	ldr	r0, [r7, #4]
 800b7de:	f000 f8fd 	bl	800b9dc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800b7e2:	e0d8      	b.n	800b996 <HAL_SPI_IRQHandler+0x39e>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 800b7e4:	7cfb      	ldrb	r3, [r7, #19]
 800b7e6:	2b05      	cmp	r3, #5
 800b7e8:	d103      	bne.n	800b7f2 <HAL_SPI_IRQHandler+0x1fa>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 800b7ea:	6878      	ldr	r0, [r7, #4]
 800b7ec:	f000 f8ec 	bl	800b9c8 <HAL_SPI_TxRxCpltCallback>
    else
    {
      /* End of the appropriate call */
    }

    return;
 800b7f0:	e0ce      	b.n	800b990 <HAL_SPI_IRQHandler+0x398>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 800b7f2:	7cfb      	ldrb	r3, [r7, #19]
 800b7f4:	2b04      	cmp	r3, #4
 800b7f6:	d103      	bne.n	800b800 <HAL_SPI_IRQHandler+0x208>
      HAL_SPI_RxCpltCallback(hspi);
 800b7f8:	6878      	ldr	r0, [r7, #4]
 800b7fa:	f000 f8db 	bl	800b9b4 <HAL_SPI_RxCpltCallback>
    return;
 800b7fe:	e0c7      	b.n	800b990 <HAL_SPI_IRQHandler+0x398>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 800b800:	7cfb      	ldrb	r3, [r7, #19]
 800b802:	2b03      	cmp	r3, #3
 800b804:	f040 80c4 	bne.w	800b990 <HAL_SPI_IRQHandler+0x398>
      HAL_SPI_TxCpltCallback(hspi);
 800b808:	6878      	ldr	r0, [r7, #4]
 800b80a:	f000 f8c9 	bl	800b9a0 <HAL_SPI_TxCpltCallback>
    return;
 800b80e:	e0bf      	b.n	800b990 <HAL_SPI_IRQHandler+0x398>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 800b810:	69bb      	ldr	r3, [r7, #24]
 800b812:	f403 7358 	and.w	r3, r3, #864	@ 0x360
 800b816:	2b00      	cmp	r3, #0
 800b818:	f000 80bd 	beq.w	800b996 <HAL_SPI_IRQHandler+0x39e>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 800b81c:	69bb      	ldr	r3, [r7, #24]
 800b81e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b822:	2b00      	cmp	r3, #0
 800b824:	d00f      	beq.n	800b846 <HAL_SPI_IRQHandler+0x24e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b82c:	f043 0204 	orr.w	r2, r3, #4
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800b836:	687b      	ldr	r3, [r7, #4]
 800b838:	681b      	ldr	r3, [r3, #0]
 800b83a:	699a      	ldr	r2, [r3, #24]
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	681b      	ldr	r3, [r3, #0]
 800b840:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b844:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 800b846:	69bb      	ldr	r3, [r7, #24]
 800b848:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800b84c:	2b00      	cmp	r3, #0
 800b84e:	d00f      	beq.n	800b870 <HAL_SPI_IRQHandler+0x278>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b856:	f043 0201 	orr.w	r2, r3, #1
 800b85a:	687b      	ldr	r3, [r7, #4]
 800b85c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	681b      	ldr	r3, [r3, #0]
 800b864:	699a      	ldr	r2, [r3, #24]
 800b866:	687b      	ldr	r3, [r7, #4]
 800b868:	681b      	ldr	r3, [r3, #0]
 800b86a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800b86e:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 800b870:	69bb      	ldr	r3, [r7, #24]
 800b872:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b876:	2b00      	cmp	r3, #0
 800b878:	d00f      	beq.n	800b89a <HAL_SPI_IRQHandler+0x2a2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800b87a:	687b      	ldr	r3, [r7, #4]
 800b87c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b880:	f043 0208 	orr.w	r2, r3, #8
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	681b      	ldr	r3, [r3, #0]
 800b88e:	699a      	ldr	r2, [r3, #24]
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	681b      	ldr	r3, [r3, #0]
 800b894:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800b898:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 800b89a:	69bb      	ldr	r3, [r7, #24]
 800b89c:	f003 0320 	and.w	r3, r3, #32
 800b8a0:	2b00      	cmp	r3, #0
 800b8a2:	d00f      	beq.n	800b8c4 <HAL_SPI_IRQHandler+0x2cc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b8aa:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	681b      	ldr	r3, [r3, #0]
 800b8b8:	699a      	ldr	r2, [r3, #24]
 800b8ba:	687b      	ldr	r3, [r7, #4]
 800b8bc:	681b      	ldr	r3, [r3, #0]
 800b8be:	f042 0220 	orr.w	r2, r2, #32
 800b8c2:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b8ca:	2b00      	cmp	r3, #0
 800b8cc:	d062      	beq.n	800b994 <HAL_SPI_IRQHandler+0x39c>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	681b      	ldr	r3, [r3, #0]
 800b8d2:	681a      	ldr	r2, [r3, #0]
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	681b      	ldr	r3, [r3, #0]
 800b8d8:	f022 0201 	bic.w	r2, r2, #1
 800b8dc:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 800b8de:	687b      	ldr	r3, [r7, #4]
 800b8e0:	681b      	ldr	r3, [r3, #0]
 800b8e2:	691b      	ldr	r3, [r3, #16]
 800b8e4:	687a      	ldr	r2, [r7, #4]
 800b8e6:	6812      	ldr	r2, [r2, #0]
 800b8e8:	f423 735a 	bic.w	r3, r3, #872	@ 0x368
 800b8ec:	f023 0303 	bic.w	r3, r3, #3
 800b8f0:	6113      	str	r3, [r2, #16]
                                  SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR));

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800b8f2:	697b      	ldr	r3, [r7, #20]
 800b8f4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800b8f8:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800b8fc:	d13e      	bne.n	800b97c <HAL_SPI_IRQHandler+0x384>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	681b      	ldr	r3, [r3, #0]
 800b902:	689a      	ldr	r2, [r3, #8]
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	681b      	ldr	r3, [r3, #0]
 800b908:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 800b90c:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b914:	2b00      	cmp	r3, #0
 800b916:	d015      	beq.n	800b944 <HAL_SPI_IRQHandler+0x34c>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b91e:	4a1f      	ldr	r2, [pc, #124]	@ (800b99c <HAL_SPI_IRQHandler+0x3a4>)
 800b920:	66da      	str	r2, [r3, #108]	@ 0x6c
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800b922:	687b      	ldr	r3, [r7, #4]
 800b924:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b928:	4618      	mov	r0, r3
 800b92a:	f7f9 fb67 	bl	8004ffc <HAL_DMA_Abort_IT>
 800b92e:	4603      	mov	r3, r0
 800b930:	2b00      	cmp	r3, #0
 800b932:	d007      	beq.n	800b944 <HAL_SPI_IRQHandler+0x34c>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b93a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b94a:	2b00      	cmp	r3, #0
 800b94c:	d022      	beq.n	800b994 <HAL_SPI_IRQHandler+0x39c>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b954:	4a11      	ldr	r2, [pc, #68]	@ (800b99c <HAL_SPI_IRQHandler+0x3a4>)
 800b956:	66da      	str	r2, [r3, #108]	@ 0x6c
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b95e:	4618      	mov	r0, r3
 800b960:	f7f9 fb4c 	bl	8004ffc <HAL_DMA_Abort_IT>
 800b964:	4603      	mov	r3, r0
 800b966:	2b00      	cmp	r3, #0
 800b968:	d014      	beq.n	800b994 <HAL_SPI_IRQHandler+0x39c>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800b96a:	687b      	ldr	r3, [r7, #4]
 800b96c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b970:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800b97a:	e00b      	b.n	800b994 <HAL_SPI_IRQHandler+0x39c>
        hspi->State = HAL_SPI_STATE_READY;
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	2201      	movs	r2, #1
 800b980:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
        HAL_SPI_ErrorCallback(hspi);
 800b984:	6878      	ldr	r0, [r7, #4]
 800b986:	f000 f829 	bl	800b9dc <HAL_SPI_ErrorCallback>
    return;
 800b98a:	e003      	b.n	800b994 <HAL_SPI_IRQHandler+0x39c>
    return;
 800b98c:	bf00      	nop
 800b98e:	e002      	b.n	800b996 <HAL_SPI_IRQHandler+0x39e>
    return;
 800b990:	bf00      	nop
 800b992:	e000      	b.n	800b996 <HAL_SPI_IRQHandler+0x39e>
    return;
 800b994:	bf00      	nop
  }
}
 800b996:	3728      	adds	r7, #40	@ 0x28
 800b998:	46bd      	mov	sp, r7
 800b99a:	bd80      	pop	{r7, pc}
 800b99c:	0800ba05 	.word	0x0800ba05

0800b9a0 <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 800b9a0:	b480      	push	{r7}
 800b9a2:	b083      	sub	sp, #12
 800b9a4:	af00      	add	r7, sp, #0
 800b9a6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 800b9a8:	bf00      	nop
 800b9aa:	370c      	adds	r7, #12
 800b9ac:	46bd      	mov	sp, r7
 800b9ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9b2:	4770      	bx	lr

0800b9b4 <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 800b9b4:	b480      	push	{r7}
 800b9b6:	b083      	sub	sp, #12
 800b9b8:	af00      	add	r7, sp, #0
 800b9ba:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 800b9bc:	bf00      	nop
 800b9be:	370c      	adds	r7, #12
 800b9c0:	46bd      	mov	sp, r7
 800b9c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9c6:	4770      	bx	lr

0800b9c8 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 800b9c8:	b480      	push	{r7}
 800b9ca:	b083      	sub	sp, #12
 800b9cc:	af00      	add	r7, sp, #0
 800b9ce:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 800b9d0:	bf00      	nop
 800b9d2:	370c      	adds	r7, #12
 800b9d4:	46bd      	mov	sp, r7
 800b9d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9da:	4770      	bx	lr

0800b9dc <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 800b9dc:	b480      	push	{r7}
 800b9de:	b083      	sub	sp, #12
 800b9e0:	af00      	add	r7, sp, #0
 800b9e2:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800b9e4:	bf00      	nop
 800b9e6:	370c      	adds	r7, #12
 800b9e8:	46bd      	mov	sp, r7
 800b9ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9ee:	4770      	bx	lr

0800b9f0 <HAL_SPI_SuspendCallback>:
  * @brief  SPI Suspend callback.
  * @param  hspi SPI handle.
  * @retval None
  */
__weak void HAL_SPI_SuspendCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 800b9f0:	b480      	push	{r7}
 800b9f2:	b083      	sub	sp, #12
 800b9f4:	af00      	add	r7, sp, #0
 800b9f6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_SuspendCallback can be implemented in the user file.
   */
}
 800b9f8:	bf00      	nop
 800b9fa:	370c      	adds	r7, #12
 800b9fc:	46bd      	mov	sp, r7
 800b9fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba02:	4770      	bx	lr

0800ba04 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800ba04:	b580      	push	{r7, lr}
 800ba06:	b084      	sub	sp, #16
 800ba08:	af00      	add	r7, sp, #0
 800ba0a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ba10:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 800ba12:	68fb      	ldr	r3, [r7, #12]
 800ba14:	2200      	movs	r2, #0
 800ba16:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
  hspi->TxXferCount = (uint16_t) 0UL;
 800ba1a:	68fb      	ldr	r3, [r7, #12]
 800ba1c:	2200      	movs	r2, #0
 800ba1e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 800ba22:	68fb      	ldr	r3, [r7, #12]
 800ba24:	2201      	movs	r2, #1
 800ba26:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800ba2a:	68f8      	ldr	r0, [r7, #12]
 800ba2c:	f7ff ffd6 	bl	800b9dc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800ba30:	bf00      	nop
 800ba32:	3710      	adds	r7, #16
 800ba34:	46bd      	mov	sp, r7
 800ba36:	bd80      	pop	{r7, pc}

0800ba38 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800ba38:	b480      	push	{r7}
 800ba3a:	b085      	sub	sp, #20
 800ba3c:	af00      	add	r7, sp, #0
 800ba3e:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	681b      	ldr	r3, [r3, #0]
 800ba44:	695b      	ldr	r3, [r3, #20]
 800ba46:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800ba48:	687b      	ldr	r3, [r7, #4]
 800ba4a:	681b      	ldr	r3, [r3, #0]
 800ba4c:	699a      	ldr	r2, [r3, #24]
 800ba4e:	687b      	ldr	r3, [r7, #4]
 800ba50:	681b      	ldr	r3, [r3, #0]
 800ba52:	f042 0208 	orr.w	r2, r2, #8
 800ba56:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	681b      	ldr	r3, [r3, #0]
 800ba5c:	699a      	ldr	r2, [r3, #24]
 800ba5e:	687b      	ldr	r3, [r7, #4]
 800ba60:	681b      	ldr	r3, [r3, #0]
 800ba62:	f042 0210 	orr.w	r2, r2, #16
 800ba66:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	681b      	ldr	r3, [r3, #0]
 800ba6c:	681a      	ldr	r2, [r3, #0]
 800ba6e:	687b      	ldr	r3, [r7, #4]
 800ba70:	681b      	ldr	r3, [r3, #0]
 800ba72:	f022 0201 	bic.w	r2, r2, #1
 800ba76:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	681b      	ldr	r3, [r3, #0]
 800ba7c:	691b      	ldr	r3, [r3, #16]
 800ba7e:	687a      	ldr	r2, [r7, #4]
 800ba80:	6812      	ldr	r2, [r2, #0]
 800ba82:	f423 735b 	bic.w	r3, r3, #876	@ 0x36c
 800ba86:	f023 0303 	bic.w	r3, r3, #3
 800ba8a:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	681b      	ldr	r3, [r3, #0]
 800ba90:	689a      	ldr	r2, [r3, #8]
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	681b      	ldr	r3, [r3, #0]
 800ba96:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 800ba9a:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 800baa2:	b2db      	uxtb	r3, r3
 800baa4:	2b04      	cmp	r3, #4
 800baa6:	d014      	beq.n	800bad2 <SPI_CloseTransfer+0x9a>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800baa8:	68fb      	ldr	r3, [r7, #12]
 800baaa:	f003 0320 	and.w	r3, r3, #32
 800baae:	2b00      	cmp	r3, #0
 800bab0:	d00f      	beq.n	800bad2 <SPI_CloseTransfer+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800bab2:	687b      	ldr	r3, [r7, #4]
 800bab4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800bab8:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	681b      	ldr	r3, [r3, #0]
 800bac6:	699a      	ldr	r2, [r3, #24]
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	681b      	ldr	r3, [r3, #0]
 800bacc:	f042 0220 	orr.w	r2, r2, #32
 800bad0:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 800bad8:	b2db      	uxtb	r3, r3
 800bada:	2b03      	cmp	r3, #3
 800badc:	d014      	beq.n	800bb08 <SPI_CloseTransfer+0xd0>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800bade:	68fb      	ldr	r3, [r7, #12]
 800bae0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bae4:	2b00      	cmp	r3, #0
 800bae6:	d00f      	beq.n	800bb08 <SPI_CloseTransfer+0xd0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800baee:	f043 0204 	orr.w	r2, r3, #4
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	681b      	ldr	r3, [r3, #0]
 800bafc:	699a      	ldr	r2, [r3, #24]
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	681b      	ldr	r3, [r3, #0]
 800bb02:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800bb06:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800bb08:	68fb      	ldr	r3, [r7, #12]
 800bb0a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800bb0e:	2b00      	cmp	r3, #0
 800bb10:	d00f      	beq.n	800bb32 <SPI_CloseTransfer+0xfa>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800bb18:	f043 0201 	orr.w	r2, r3, #1
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	681b      	ldr	r3, [r3, #0]
 800bb26:	699a      	ldr	r2, [r3, #24]
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	681b      	ldr	r3, [r3, #0]
 800bb2c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800bb30:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800bb32:	68fb      	ldr	r3, [r7, #12]
 800bb34:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800bb38:	2b00      	cmp	r3, #0
 800bb3a:	d00f      	beq.n	800bb5c <SPI_CloseTransfer+0x124>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800bb42:	f043 0208 	orr.w	r2, r3, #8
 800bb46:	687b      	ldr	r3, [r7, #4]
 800bb48:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	681b      	ldr	r3, [r3, #0]
 800bb50:	699a      	ldr	r2, [r3, #24]
 800bb52:	687b      	ldr	r3, [r7, #4]
 800bb54:	681b      	ldr	r3, [r3, #0]
 800bb56:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800bb5a:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800bb5c:	687b      	ldr	r3, [r7, #4]
 800bb5e:	2200      	movs	r2, #0
 800bb60:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->RxXferCount = (uint16_t)0UL;
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	2200      	movs	r2, #0
 800bb68:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
}
 800bb6c:	bf00      	nop
 800bb6e:	3714      	adds	r7, #20
 800bb70:	46bd      	mov	sp, r7
 800bb72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb76:	4770      	bx	lr

0800bb78 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800bb78:	b580      	push	{r7, lr}
 800bb7a:	b084      	sub	sp, #16
 800bb7c:	af00      	add	r7, sp, #0
 800bb7e:	60f8      	str	r0, [r7, #12]
 800bb80:	60b9      	str	r1, [r7, #8]
 800bb82:	603b      	str	r3, [r7, #0]
 800bb84:	4613      	mov	r3, r2
 800bb86:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800bb88:	e010      	b.n	800bbac <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800bb8a:	f7f9 f8cf 	bl	8004d2c <HAL_GetTick>
 800bb8e:	4602      	mov	r2, r0
 800bb90:	69bb      	ldr	r3, [r7, #24]
 800bb92:	1ad3      	subs	r3, r2, r3
 800bb94:	683a      	ldr	r2, [r7, #0]
 800bb96:	429a      	cmp	r2, r3
 800bb98:	d803      	bhi.n	800bba2 <SPI_WaitOnFlagUntilTimeout+0x2a>
 800bb9a:	683b      	ldr	r3, [r7, #0]
 800bb9c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800bba0:	d102      	bne.n	800bba8 <SPI_WaitOnFlagUntilTimeout+0x30>
 800bba2:	683b      	ldr	r3, [r7, #0]
 800bba4:	2b00      	cmp	r3, #0
 800bba6:	d101      	bne.n	800bbac <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 800bba8:	2303      	movs	r3, #3
 800bbaa:	e00f      	b.n	800bbcc <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800bbac:	68fb      	ldr	r3, [r7, #12]
 800bbae:	681b      	ldr	r3, [r3, #0]
 800bbb0:	695a      	ldr	r2, [r3, #20]
 800bbb2:	68bb      	ldr	r3, [r7, #8]
 800bbb4:	4013      	ands	r3, r2
 800bbb6:	68ba      	ldr	r2, [r7, #8]
 800bbb8:	429a      	cmp	r2, r3
 800bbba:	bf0c      	ite	eq
 800bbbc:	2301      	moveq	r3, #1
 800bbbe:	2300      	movne	r3, #0
 800bbc0:	b2db      	uxtb	r3, r3
 800bbc2:	461a      	mov	r2, r3
 800bbc4:	79fb      	ldrb	r3, [r7, #7]
 800bbc6:	429a      	cmp	r2, r3
 800bbc8:	d0df      	beq.n	800bb8a <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800bbca:	2300      	movs	r3, #0
}
 800bbcc:	4618      	mov	r0, r3
 800bbce:	3710      	adds	r7, #16
 800bbd0:	46bd      	mov	sp, r7
 800bbd2:	bd80      	pop	{r7, pc}

0800bbd4 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 800bbd4:	b480      	push	{r7}
 800bbd6:	b085      	sub	sp, #20
 800bbd8:	af00      	add	r7, sp, #0
 800bbda:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bbe0:	095b      	lsrs	r3, r3, #5
 800bbe2:	3301      	adds	r3, #1
 800bbe4:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	68db      	ldr	r3, [r3, #12]
 800bbea:	3301      	adds	r3, #1
 800bbec:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800bbee:	68bb      	ldr	r3, [r7, #8]
 800bbf0:	3307      	adds	r3, #7
 800bbf2:	08db      	lsrs	r3, r3, #3
 800bbf4:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800bbf6:	68bb      	ldr	r3, [r7, #8]
 800bbf8:	68fa      	ldr	r2, [r7, #12]
 800bbfa:	fb02 f303 	mul.w	r3, r2, r3
}
 800bbfe:	4618      	mov	r0, r3
 800bc00:	3714      	adds	r7, #20
 800bc02:	46bd      	mov	sp, r7
 800bc04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc08:	4770      	bx	lr

0800bc0a <HAL_SPIEx_SetConfigAutonomousMode>:
  *                the configuration information of the autonomous mode for the specified SPIx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPIEx_SetConfigAutonomousMode(SPI_HandleTypeDef *hspi,
                                                    const SPI_AutonomousModeConfTypeDef *sConfig)
{
 800bc0a:	b480      	push	{r7}
 800bc0c:	b083      	sub	sp, #12
 800bc0e:	af00      	add	r7, sp, #0
 800bc10:	6078      	str	r0, [r7, #4]
 800bc12:	6039      	str	r1, [r7, #0]
  if (hspi->State == HAL_SPI_STATE_READY)
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 800bc1a:	b2db      	uxtb	r3, r3
 800bc1c:	2b01      	cmp	r3, #1
 800bc1e:	d12e      	bne.n	800bc7e <HAL_SPIEx_SetConfigAutonomousMode+0x74>
  {
    /* Process Locked */
    __HAL_LOCK(hspi);
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 800bc26:	2b01      	cmp	r3, #1
 800bc28:	d101      	bne.n	800bc2e <HAL_SPIEx_SetConfigAutonomousMode+0x24>
 800bc2a:	2302      	movs	r3, #2
 800bc2c:	e028      	b.n	800bc80 <HAL_SPIEx_SetConfigAutonomousMode+0x76>
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	2201      	movs	r2, #1
 800bc32:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

    hspi->State = HAL_SPI_STATE_BUSY;
 800bc36:	687b      	ldr	r3, [r7, #4]
 800bc38:	2202      	movs	r2, #2
 800bc3a:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
    assert_param(IS_SPI_AUTONOMOUS_INSTANCE(hspi->Instance));
    assert_param(IS_SPI_TRIG_SOURCE(hspi->Instance, sConfig->TriggerSelection));
    assert_param(IS_SPI_AUTO_MODE_TRG_POL(sConfig->TriggerPolarity));

    /* Disable the selected SPI peripheral to be able to configure AUTOCR */
    __HAL_SPI_DISABLE(hspi);
 800bc3e:	687b      	ldr	r3, [r7, #4]
 800bc40:	681b      	ldr	r3, [r3, #0]
 800bc42:	681a      	ldr	r2, [r3, #0]
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	681b      	ldr	r3, [r3, #0]
 800bc48:	f022 0201 	bic.w	r2, r2, #1
 800bc4c:	601a      	str	r2, [r3, #0]

    /* SPIx AUTOCR Configuration */
    WRITE_REG(hspi->Instance->AUTOCR, (sConfig->TriggerState | ((sConfig->TriggerSelection) & SPI_AUTOCR_TRIGSEL_Msk) |
 800bc4e:	683b      	ldr	r3, [r7, #0]
 800bc50:	681a      	ldr	r2, [r3, #0]
 800bc52:	683b      	ldr	r3, [r7, #0]
 800bc54:	685b      	ldr	r3, [r3, #4]
 800bc56:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 800bc5a:	ea42 0103 	orr.w	r1, r2, r3
 800bc5e:	683b      	ldr	r3, [r7, #0]
 800bc60:	689a      	ldr	r2, [r3, #8]
 800bc62:	687b      	ldr	r3, [r7, #4]
 800bc64:	681b      	ldr	r3, [r3, #0]
 800bc66:	430a      	orrs	r2, r1
 800bc68:	61da      	str	r2, [r3, #28]
                                       sConfig->TriggerPolarity));

    hspi->State = HAL_SPI_STATE_READY;
 800bc6a:	687b      	ldr	r3, [r7, #4]
 800bc6c:	2201      	movs	r2, #1
 800bc6e:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 800bc72:	687b      	ldr	r3, [r7, #4]
 800bc74:	2200      	movs	r2, #0
 800bc76:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800bc7a:	2300      	movs	r3, #0
 800bc7c:	e000      	b.n	800bc80 <HAL_SPIEx_SetConfigAutonomousMode+0x76>
  }
  else
  {
    return HAL_ERROR;
 800bc7e:	2301      	movs	r3, #1
  }
}
 800bc80:	4618      	mov	r0, r3
 800bc82:	370c      	adds	r7, #12
 800bc84:	46bd      	mov	sp, r7
 800bc86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc8a:	4770      	bx	lr

0800bc8c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800bc8c:	b580      	push	{r7, lr}
 800bc8e:	b082      	sub	sp, #8
 800bc90:	af00      	add	r7, sp, #0
 800bc92:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	2b00      	cmp	r3, #0
 800bc98:	d101      	bne.n	800bc9e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800bc9a:	2301      	movs	r3, #1
 800bc9c:	e049      	b.n	800bd32 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800bc9e:	687b      	ldr	r3, [r7, #4]
 800bca0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800bca4:	b2db      	uxtb	r3, r3
 800bca6:	2b00      	cmp	r3, #0
 800bca8:	d106      	bne.n	800bcb8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	2200      	movs	r2, #0
 800bcae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800bcb2:	6878      	ldr	r0, [r7, #4]
 800bcb4:	f7f8 fda2 	bl	80047fc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	2202      	movs	r2, #2
 800bcbc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	681a      	ldr	r2, [r3, #0]
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	3304      	adds	r3, #4
 800bcc8:	4619      	mov	r1, r3
 800bcca:	4610      	mov	r0, r2
 800bccc:	f000 fb50 	bl	800c370 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	2201      	movs	r2, #1
 800bcd4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	2201      	movs	r2, #1
 800bcdc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800bce0:	687b      	ldr	r3, [r7, #4]
 800bce2:	2201      	movs	r2, #1
 800bce4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	2201      	movs	r2, #1
 800bcec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	2201      	movs	r2, #1
 800bcf4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800bcf8:	687b      	ldr	r3, [r7, #4]
 800bcfa:	2201      	movs	r2, #1
 800bcfc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	2201      	movs	r2, #1
 800bd04:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bd08:	687b      	ldr	r3, [r7, #4]
 800bd0a:	2201      	movs	r2, #1
 800bd0c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800bd10:	687b      	ldr	r3, [r7, #4]
 800bd12:	2201      	movs	r2, #1
 800bd14:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800bd18:	687b      	ldr	r3, [r7, #4]
 800bd1a:	2201      	movs	r2, #1
 800bd1c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800bd20:	687b      	ldr	r3, [r7, #4]
 800bd22:	2201      	movs	r2, #1
 800bd24:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800bd28:	687b      	ldr	r3, [r7, #4]
 800bd2a:	2201      	movs	r2, #1
 800bd2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800bd30:	2300      	movs	r3, #0
}
 800bd32:	4618      	mov	r0, r3
 800bd34:	3708      	adds	r7, #8
 800bd36:	46bd      	mov	sp, r7
 800bd38:	bd80      	pop	{r7, pc}
	...

0800bd3c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800bd3c:	b480      	push	{r7}
 800bd3e:	b085      	sub	sp, #20
 800bd40:	af00      	add	r7, sp, #0
 800bd42:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800bd4a:	b2db      	uxtb	r3, r3
 800bd4c:	2b01      	cmp	r3, #1
 800bd4e:	d001      	beq.n	800bd54 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800bd50:	2301      	movs	r3, #1
 800bd52:	e072      	b.n	800be3a <HAL_TIM_Base_Start_IT+0xfe>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	2202      	movs	r2, #2
 800bd58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800bd5c:	687b      	ldr	r3, [r7, #4]
 800bd5e:	681b      	ldr	r3, [r3, #0]
 800bd60:	68da      	ldr	r2, [r3, #12]
 800bd62:	687b      	ldr	r3, [r7, #4]
 800bd64:	681b      	ldr	r3, [r3, #0]
 800bd66:	f042 0201 	orr.w	r2, r2, #1
 800bd6a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800bd6c:	687b      	ldr	r3, [r7, #4]
 800bd6e:	681b      	ldr	r3, [r3, #0]
 800bd70:	4a35      	ldr	r2, [pc, #212]	@ (800be48 <HAL_TIM_Base_Start_IT+0x10c>)
 800bd72:	4293      	cmp	r3, r2
 800bd74:	d040      	beq.n	800bdf8 <HAL_TIM_Base_Start_IT+0xbc>
 800bd76:	687b      	ldr	r3, [r7, #4]
 800bd78:	681b      	ldr	r3, [r3, #0]
 800bd7a:	4a34      	ldr	r2, [pc, #208]	@ (800be4c <HAL_TIM_Base_Start_IT+0x110>)
 800bd7c:	4293      	cmp	r3, r2
 800bd7e:	d03b      	beq.n	800bdf8 <HAL_TIM_Base_Start_IT+0xbc>
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	681b      	ldr	r3, [r3, #0]
 800bd84:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bd88:	d036      	beq.n	800bdf8 <HAL_TIM_Base_Start_IT+0xbc>
 800bd8a:	687b      	ldr	r3, [r7, #4]
 800bd8c:	681b      	ldr	r3, [r3, #0]
 800bd8e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800bd92:	d031      	beq.n	800bdf8 <HAL_TIM_Base_Start_IT+0xbc>
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	681b      	ldr	r3, [r3, #0]
 800bd98:	4a2d      	ldr	r2, [pc, #180]	@ (800be50 <HAL_TIM_Base_Start_IT+0x114>)
 800bd9a:	4293      	cmp	r3, r2
 800bd9c:	d02c      	beq.n	800bdf8 <HAL_TIM_Base_Start_IT+0xbc>
 800bd9e:	687b      	ldr	r3, [r7, #4]
 800bda0:	681b      	ldr	r3, [r3, #0]
 800bda2:	4a2c      	ldr	r2, [pc, #176]	@ (800be54 <HAL_TIM_Base_Start_IT+0x118>)
 800bda4:	4293      	cmp	r3, r2
 800bda6:	d027      	beq.n	800bdf8 <HAL_TIM_Base_Start_IT+0xbc>
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	681b      	ldr	r3, [r3, #0]
 800bdac:	4a2a      	ldr	r2, [pc, #168]	@ (800be58 <HAL_TIM_Base_Start_IT+0x11c>)
 800bdae:	4293      	cmp	r3, r2
 800bdb0:	d022      	beq.n	800bdf8 <HAL_TIM_Base_Start_IT+0xbc>
 800bdb2:	687b      	ldr	r3, [r7, #4]
 800bdb4:	681b      	ldr	r3, [r3, #0]
 800bdb6:	4a29      	ldr	r2, [pc, #164]	@ (800be5c <HAL_TIM_Base_Start_IT+0x120>)
 800bdb8:	4293      	cmp	r3, r2
 800bdba:	d01d      	beq.n	800bdf8 <HAL_TIM_Base_Start_IT+0xbc>
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	681b      	ldr	r3, [r3, #0]
 800bdc0:	4a27      	ldr	r2, [pc, #156]	@ (800be60 <HAL_TIM_Base_Start_IT+0x124>)
 800bdc2:	4293      	cmp	r3, r2
 800bdc4:	d018      	beq.n	800bdf8 <HAL_TIM_Base_Start_IT+0xbc>
 800bdc6:	687b      	ldr	r3, [r7, #4]
 800bdc8:	681b      	ldr	r3, [r3, #0]
 800bdca:	4a26      	ldr	r2, [pc, #152]	@ (800be64 <HAL_TIM_Base_Start_IT+0x128>)
 800bdcc:	4293      	cmp	r3, r2
 800bdce:	d013      	beq.n	800bdf8 <HAL_TIM_Base_Start_IT+0xbc>
 800bdd0:	687b      	ldr	r3, [r7, #4]
 800bdd2:	681b      	ldr	r3, [r3, #0]
 800bdd4:	4a24      	ldr	r2, [pc, #144]	@ (800be68 <HAL_TIM_Base_Start_IT+0x12c>)
 800bdd6:	4293      	cmp	r3, r2
 800bdd8:	d00e      	beq.n	800bdf8 <HAL_TIM_Base_Start_IT+0xbc>
 800bdda:	687b      	ldr	r3, [r7, #4]
 800bddc:	681b      	ldr	r3, [r3, #0]
 800bdde:	4a23      	ldr	r2, [pc, #140]	@ (800be6c <HAL_TIM_Base_Start_IT+0x130>)
 800bde0:	4293      	cmp	r3, r2
 800bde2:	d009      	beq.n	800bdf8 <HAL_TIM_Base_Start_IT+0xbc>
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	681b      	ldr	r3, [r3, #0]
 800bde8:	4a21      	ldr	r2, [pc, #132]	@ (800be70 <HAL_TIM_Base_Start_IT+0x134>)
 800bdea:	4293      	cmp	r3, r2
 800bdec:	d004      	beq.n	800bdf8 <HAL_TIM_Base_Start_IT+0xbc>
 800bdee:	687b      	ldr	r3, [r7, #4]
 800bdf0:	681b      	ldr	r3, [r3, #0]
 800bdf2:	4a20      	ldr	r2, [pc, #128]	@ (800be74 <HAL_TIM_Base_Start_IT+0x138>)
 800bdf4:	4293      	cmp	r3, r2
 800bdf6:	d115      	bne.n	800be24 <HAL_TIM_Base_Start_IT+0xe8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	681b      	ldr	r3, [r3, #0]
 800bdfc:	689a      	ldr	r2, [r3, #8]
 800bdfe:	4b1e      	ldr	r3, [pc, #120]	@ (800be78 <HAL_TIM_Base_Start_IT+0x13c>)
 800be00:	4013      	ands	r3, r2
 800be02:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800be04:	68fb      	ldr	r3, [r7, #12]
 800be06:	2b06      	cmp	r3, #6
 800be08:	d015      	beq.n	800be36 <HAL_TIM_Base_Start_IT+0xfa>
 800be0a:	68fb      	ldr	r3, [r7, #12]
 800be0c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800be10:	d011      	beq.n	800be36 <HAL_TIM_Base_Start_IT+0xfa>
    {
      __HAL_TIM_ENABLE(htim);
 800be12:	687b      	ldr	r3, [r7, #4]
 800be14:	681b      	ldr	r3, [r3, #0]
 800be16:	681a      	ldr	r2, [r3, #0]
 800be18:	687b      	ldr	r3, [r7, #4]
 800be1a:	681b      	ldr	r3, [r3, #0]
 800be1c:	f042 0201 	orr.w	r2, r2, #1
 800be20:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800be22:	e008      	b.n	800be36 <HAL_TIM_Base_Start_IT+0xfa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800be24:	687b      	ldr	r3, [r7, #4]
 800be26:	681b      	ldr	r3, [r3, #0]
 800be28:	681a      	ldr	r2, [r3, #0]
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	681b      	ldr	r3, [r3, #0]
 800be2e:	f042 0201 	orr.w	r2, r2, #1
 800be32:	601a      	str	r2, [r3, #0]
 800be34:	e000      	b.n	800be38 <HAL_TIM_Base_Start_IT+0xfc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800be36:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800be38:	2300      	movs	r3, #0
}
 800be3a:	4618      	mov	r0, r3
 800be3c:	3714      	adds	r7, #20
 800be3e:	46bd      	mov	sp, r7
 800be40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be44:	4770      	bx	lr
 800be46:	bf00      	nop
 800be48:	40012c00 	.word	0x40012c00
 800be4c:	50012c00 	.word	0x50012c00
 800be50:	40000400 	.word	0x40000400
 800be54:	50000400 	.word	0x50000400
 800be58:	40000800 	.word	0x40000800
 800be5c:	50000800 	.word	0x50000800
 800be60:	40000c00 	.word	0x40000c00
 800be64:	50000c00 	.word	0x50000c00
 800be68:	40013400 	.word	0x40013400
 800be6c:	50013400 	.word	0x50013400
 800be70:	40014000 	.word	0x40014000
 800be74:	50014000 	.word	0x50014000
 800be78:	00010007 	.word	0x00010007

0800be7c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800be7c:	b580      	push	{r7, lr}
 800be7e:	b084      	sub	sp, #16
 800be80:	af00      	add	r7, sp, #0
 800be82:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800be84:	687b      	ldr	r3, [r7, #4]
 800be86:	681b      	ldr	r3, [r3, #0]
 800be88:	68db      	ldr	r3, [r3, #12]
 800be8a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800be8c:	687b      	ldr	r3, [r7, #4]
 800be8e:	681b      	ldr	r3, [r3, #0]
 800be90:	691b      	ldr	r3, [r3, #16]
 800be92:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800be94:	68bb      	ldr	r3, [r7, #8]
 800be96:	f003 0302 	and.w	r3, r3, #2
 800be9a:	2b00      	cmp	r3, #0
 800be9c:	d020      	beq.n	800bee0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800be9e:	68fb      	ldr	r3, [r7, #12]
 800bea0:	f003 0302 	and.w	r3, r3, #2
 800bea4:	2b00      	cmp	r3, #0
 800bea6:	d01b      	beq.n	800bee0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800bea8:	687b      	ldr	r3, [r7, #4]
 800beaa:	681b      	ldr	r3, [r3, #0]
 800beac:	f06f 0202 	mvn.w	r2, #2
 800beb0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	2201      	movs	r2, #1
 800beb6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800beb8:	687b      	ldr	r3, [r7, #4]
 800beba:	681b      	ldr	r3, [r3, #0]
 800bebc:	699b      	ldr	r3, [r3, #24]
 800bebe:	f003 0303 	and.w	r3, r3, #3
 800bec2:	2b00      	cmp	r3, #0
 800bec4:	d003      	beq.n	800bece <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800bec6:	6878      	ldr	r0, [r7, #4]
 800bec8:	f000 fa34 	bl	800c334 <HAL_TIM_IC_CaptureCallback>
 800becc:	e005      	b.n	800beda <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800bece:	6878      	ldr	r0, [r7, #4]
 800bed0:	f000 fa26 	bl	800c320 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bed4:	6878      	ldr	r0, [r7, #4]
 800bed6:	f000 fa37 	bl	800c348 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800beda:	687b      	ldr	r3, [r7, #4]
 800bedc:	2200      	movs	r2, #0
 800bede:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800bee0:	68bb      	ldr	r3, [r7, #8]
 800bee2:	f003 0304 	and.w	r3, r3, #4
 800bee6:	2b00      	cmp	r3, #0
 800bee8:	d020      	beq.n	800bf2c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800beea:	68fb      	ldr	r3, [r7, #12]
 800beec:	f003 0304 	and.w	r3, r3, #4
 800bef0:	2b00      	cmp	r3, #0
 800bef2:	d01b      	beq.n	800bf2c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800bef4:	687b      	ldr	r3, [r7, #4]
 800bef6:	681b      	ldr	r3, [r3, #0]
 800bef8:	f06f 0204 	mvn.w	r2, #4
 800befc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800befe:	687b      	ldr	r3, [r7, #4]
 800bf00:	2202      	movs	r2, #2
 800bf02:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	681b      	ldr	r3, [r3, #0]
 800bf08:	699b      	ldr	r3, [r3, #24]
 800bf0a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800bf0e:	2b00      	cmp	r3, #0
 800bf10:	d003      	beq.n	800bf1a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bf12:	6878      	ldr	r0, [r7, #4]
 800bf14:	f000 fa0e 	bl	800c334 <HAL_TIM_IC_CaptureCallback>
 800bf18:	e005      	b.n	800bf26 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bf1a:	6878      	ldr	r0, [r7, #4]
 800bf1c:	f000 fa00 	bl	800c320 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bf20:	6878      	ldr	r0, [r7, #4]
 800bf22:	f000 fa11 	bl	800c348 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bf26:	687b      	ldr	r3, [r7, #4]
 800bf28:	2200      	movs	r2, #0
 800bf2a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800bf2c:	68bb      	ldr	r3, [r7, #8]
 800bf2e:	f003 0308 	and.w	r3, r3, #8
 800bf32:	2b00      	cmp	r3, #0
 800bf34:	d020      	beq.n	800bf78 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800bf36:	68fb      	ldr	r3, [r7, #12]
 800bf38:	f003 0308 	and.w	r3, r3, #8
 800bf3c:	2b00      	cmp	r3, #0
 800bf3e:	d01b      	beq.n	800bf78 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800bf40:	687b      	ldr	r3, [r7, #4]
 800bf42:	681b      	ldr	r3, [r3, #0]
 800bf44:	f06f 0208 	mvn.w	r2, #8
 800bf48:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800bf4a:	687b      	ldr	r3, [r7, #4]
 800bf4c:	2204      	movs	r2, #4
 800bf4e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	681b      	ldr	r3, [r3, #0]
 800bf54:	69db      	ldr	r3, [r3, #28]
 800bf56:	f003 0303 	and.w	r3, r3, #3
 800bf5a:	2b00      	cmp	r3, #0
 800bf5c:	d003      	beq.n	800bf66 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bf5e:	6878      	ldr	r0, [r7, #4]
 800bf60:	f000 f9e8 	bl	800c334 <HAL_TIM_IC_CaptureCallback>
 800bf64:	e005      	b.n	800bf72 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bf66:	6878      	ldr	r0, [r7, #4]
 800bf68:	f000 f9da 	bl	800c320 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bf6c:	6878      	ldr	r0, [r7, #4]
 800bf6e:	f000 f9eb 	bl	800c348 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bf72:	687b      	ldr	r3, [r7, #4]
 800bf74:	2200      	movs	r2, #0
 800bf76:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800bf78:	68bb      	ldr	r3, [r7, #8]
 800bf7a:	f003 0310 	and.w	r3, r3, #16
 800bf7e:	2b00      	cmp	r3, #0
 800bf80:	d020      	beq.n	800bfc4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800bf82:	68fb      	ldr	r3, [r7, #12]
 800bf84:	f003 0310 	and.w	r3, r3, #16
 800bf88:	2b00      	cmp	r3, #0
 800bf8a:	d01b      	beq.n	800bfc4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	681b      	ldr	r3, [r3, #0]
 800bf90:	f06f 0210 	mvn.w	r2, #16
 800bf94:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800bf96:	687b      	ldr	r3, [r7, #4]
 800bf98:	2208      	movs	r2, #8
 800bf9a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800bf9c:	687b      	ldr	r3, [r7, #4]
 800bf9e:	681b      	ldr	r3, [r3, #0]
 800bfa0:	69db      	ldr	r3, [r3, #28]
 800bfa2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800bfa6:	2b00      	cmp	r3, #0
 800bfa8:	d003      	beq.n	800bfb2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bfaa:	6878      	ldr	r0, [r7, #4]
 800bfac:	f000 f9c2 	bl	800c334 <HAL_TIM_IC_CaptureCallback>
 800bfb0:	e005      	b.n	800bfbe <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bfb2:	6878      	ldr	r0, [r7, #4]
 800bfb4:	f000 f9b4 	bl	800c320 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bfb8:	6878      	ldr	r0, [r7, #4]
 800bfba:	f000 f9c5 	bl	800c348 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bfbe:	687b      	ldr	r3, [r7, #4]
 800bfc0:	2200      	movs	r2, #0
 800bfc2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800bfc4:	68bb      	ldr	r3, [r7, #8]
 800bfc6:	f003 0301 	and.w	r3, r3, #1
 800bfca:	2b00      	cmp	r3, #0
 800bfcc:	d00c      	beq.n	800bfe8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800bfce:	68fb      	ldr	r3, [r7, #12]
 800bfd0:	f003 0301 	and.w	r3, r3, #1
 800bfd4:	2b00      	cmp	r3, #0
 800bfd6:	d007      	beq.n	800bfe8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800bfd8:	687b      	ldr	r3, [r7, #4]
 800bfda:	681b      	ldr	r3, [r3, #0]
 800bfdc:	f06f 0201 	mvn.w	r2, #1
 800bfe0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800bfe2:	6878      	ldr	r0, [r7, #4]
 800bfe4:	f7f7 fdc6 	bl	8003b74 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800bfe8:	68bb      	ldr	r3, [r7, #8]
 800bfea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bfee:	2b00      	cmp	r3, #0
 800bff0:	d104      	bne.n	800bffc <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800bff2:	68bb      	ldr	r3, [r7, #8]
 800bff4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800bff8:	2b00      	cmp	r3, #0
 800bffa:	d00c      	beq.n	800c016 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800bffc:	68fb      	ldr	r3, [r7, #12]
 800bffe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c002:	2b00      	cmp	r3, #0
 800c004:	d007      	beq.n	800c016 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800c006:	687b      	ldr	r3, [r7, #4]
 800c008:	681b      	ldr	r3, [r3, #0]
 800c00a:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800c00e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800c010:	6878      	ldr	r0, [r7, #4]
 800c012:	f000 fc77 	bl	800c904 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800c016:	68bb      	ldr	r3, [r7, #8]
 800c018:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c01c:	2b00      	cmp	r3, #0
 800c01e:	d00c      	beq.n	800c03a <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800c020:	68fb      	ldr	r3, [r7, #12]
 800c022:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c026:	2b00      	cmp	r3, #0
 800c028:	d007      	beq.n	800c03a <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800c02a:	687b      	ldr	r3, [r7, #4]
 800c02c:	681b      	ldr	r3, [r3, #0]
 800c02e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800c032:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800c034:	6878      	ldr	r0, [r7, #4]
 800c036:	f000 fc6f 	bl	800c918 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800c03a:	68bb      	ldr	r3, [r7, #8]
 800c03c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c040:	2b00      	cmp	r3, #0
 800c042:	d00c      	beq.n	800c05e <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800c044:	68fb      	ldr	r3, [r7, #12]
 800c046:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c04a:	2b00      	cmp	r3, #0
 800c04c:	d007      	beq.n	800c05e <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800c04e:	687b      	ldr	r3, [r7, #4]
 800c050:	681b      	ldr	r3, [r3, #0]
 800c052:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800c056:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800c058:	6878      	ldr	r0, [r7, #4]
 800c05a:	f000 f97f 	bl	800c35c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800c05e:	68bb      	ldr	r3, [r7, #8]
 800c060:	f003 0320 	and.w	r3, r3, #32
 800c064:	2b00      	cmp	r3, #0
 800c066:	d00c      	beq.n	800c082 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800c068:	68fb      	ldr	r3, [r7, #12]
 800c06a:	f003 0320 	and.w	r3, r3, #32
 800c06e:	2b00      	cmp	r3, #0
 800c070:	d007      	beq.n	800c082 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800c072:	687b      	ldr	r3, [r7, #4]
 800c074:	681b      	ldr	r3, [r3, #0]
 800c076:	f06f 0220 	mvn.w	r2, #32
 800c07a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800c07c:	6878      	ldr	r0, [r7, #4]
 800c07e:	f000 fc37 	bl	800c8f0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 800c082:	68bb      	ldr	r3, [r7, #8]
 800c084:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800c088:	2b00      	cmp	r3, #0
 800c08a:	d00c      	beq.n	800c0a6 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 800c08c:	68fb      	ldr	r3, [r7, #12]
 800c08e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800c092:	2b00      	cmp	r3, #0
 800c094:	d007      	beq.n	800c0a6 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 800c096:	687b      	ldr	r3, [r7, #4]
 800c098:	681b      	ldr	r3, [r3, #0]
 800c09a:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 800c09e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 800c0a0:	6878      	ldr	r0, [r7, #4]
 800c0a2:	f000 fc43 	bl	800c92c <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 800c0a6:	68bb      	ldr	r3, [r7, #8]
 800c0a8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800c0ac:	2b00      	cmp	r3, #0
 800c0ae:	d00c      	beq.n	800c0ca <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 800c0b0:	68fb      	ldr	r3, [r7, #12]
 800c0b2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800c0b6:	2b00      	cmp	r3, #0
 800c0b8:	d007      	beq.n	800c0ca <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 800c0ba:	687b      	ldr	r3, [r7, #4]
 800c0bc:	681b      	ldr	r3, [r3, #0]
 800c0be:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 800c0c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 800c0c4:	6878      	ldr	r0, [r7, #4]
 800c0c6:	f000 fc3b 	bl	800c940 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 800c0ca:	68bb      	ldr	r3, [r7, #8]
 800c0cc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800c0d0:	2b00      	cmp	r3, #0
 800c0d2:	d00c      	beq.n	800c0ee <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 800c0d4:	68fb      	ldr	r3, [r7, #12]
 800c0d6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800c0da:	2b00      	cmp	r3, #0
 800c0dc:	d007      	beq.n	800c0ee <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 800c0de:	687b      	ldr	r3, [r7, #4]
 800c0e0:	681b      	ldr	r3, [r3, #0]
 800c0e2:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 800c0e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800c0e8:	6878      	ldr	r0, [r7, #4]
 800c0ea:	f000 fc33 	bl	800c954 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 800c0ee:	68bb      	ldr	r3, [r7, #8]
 800c0f0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c0f4:	2b00      	cmp	r3, #0
 800c0f6:	d00c      	beq.n	800c112 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 800c0f8:	68fb      	ldr	r3, [r7, #12]
 800c0fa:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c0fe:	2b00      	cmp	r3, #0
 800c100:	d007      	beq.n	800c112 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 800c102:	687b      	ldr	r3, [r7, #4]
 800c104:	681b      	ldr	r3, [r3, #0]
 800c106:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 800c10a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800c10c:	6878      	ldr	r0, [r7, #4]
 800c10e:	f000 fc2b 	bl	800c968 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800c112:	bf00      	nop
 800c114:	3710      	adds	r7, #16
 800c116:	46bd      	mov	sp, r7
 800c118:	bd80      	pop	{r7, pc}
	...

0800c11c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800c11c:	b580      	push	{r7, lr}
 800c11e:	b084      	sub	sp, #16
 800c120:	af00      	add	r7, sp, #0
 800c122:	6078      	str	r0, [r7, #4]
 800c124:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800c126:	2300      	movs	r3, #0
 800c128:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800c12a:	687b      	ldr	r3, [r7, #4]
 800c12c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800c130:	2b01      	cmp	r3, #1
 800c132:	d101      	bne.n	800c138 <HAL_TIM_ConfigClockSource+0x1c>
 800c134:	2302      	movs	r3, #2
 800c136:	e0e6      	b.n	800c306 <HAL_TIM_ConfigClockSource+0x1ea>
 800c138:	687b      	ldr	r3, [r7, #4]
 800c13a:	2201      	movs	r2, #1
 800c13c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800c140:	687b      	ldr	r3, [r7, #4]
 800c142:	2202      	movs	r2, #2
 800c144:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800c148:	687b      	ldr	r3, [r7, #4]
 800c14a:	681b      	ldr	r3, [r3, #0]
 800c14c:	689b      	ldr	r3, [r3, #8]
 800c14e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800c150:	68bb      	ldr	r3, [r7, #8]
 800c152:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 800c156:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800c15a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c15c:	68bb      	ldr	r3, [r7, #8]
 800c15e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800c162:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800c164:	687b      	ldr	r3, [r7, #4]
 800c166:	681b      	ldr	r3, [r3, #0]
 800c168:	68ba      	ldr	r2, [r7, #8]
 800c16a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800c16c:	683b      	ldr	r3, [r7, #0]
 800c16e:	681b      	ldr	r3, [r3, #0]
 800c170:	4a67      	ldr	r2, [pc, #412]	@ (800c310 <HAL_TIM_ConfigClockSource+0x1f4>)
 800c172:	4293      	cmp	r3, r2
 800c174:	f000 80b1 	beq.w	800c2da <HAL_TIM_ConfigClockSource+0x1be>
 800c178:	4a65      	ldr	r2, [pc, #404]	@ (800c310 <HAL_TIM_ConfigClockSource+0x1f4>)
 800c17a:	4293      	cmp	r3, r2
 800c17c:	f200 80b6 	bhi.w	800c2ec <HAL_TIM_ConfigClockSource+0x1d0>
 800c180:	4a64      	ldr	r2, [pc, #400]	@ (800c314 <HAL_TIM_ConfigClockSource+0x1f8>)
 800c182:	4293      	cmp	r3, r2
 800c184:	f000 80a9 	beq.w	800c2da <HAL_TIM_ConfigClockSource+0x1be>
 800c188:	4a62      	ldr	r2, [pc, #392]	@ (800c314 <HAL_TIM_ConfigClockSource+0x1f8>)
 800c18a:	4293      	cmp	r3, r2
 800c18c:	f200 80ae 	bhi.w	800c2ec <HAL_TIM_ConfigClockSource+0x1d0>
 800c190:	4a61      	ldr	r2, [pc, #388]	@ (800c318 <HAL_TIM_ConfigClockSource+0x1fc>)
 800c192:	4293      	cmp	r3, r2
 800c194:	f000 80a1 	beq.w	800c2da <HAL_TIM_ConfigClockSource+0x1be>
 800c198:	4a5f      	ldr	r2, [pc, #380]	@ (800c318 <HAL_TIM_ConfigClockSource+0x1fc>)
 800c19a:	4293      	cmp	r3, r2
 800c19c:	f200 80a6 	bhi.w	800c2ec <HAL_TIM_ConfigClockSource+0x1d0>
 800c1a0:	4a5e      	ldr	r2, [pc, #376]	@ (800c31c <HAL_TIM_ConfigClockSource+0x200>)
 800c1a2:	4293      	cmp	r3, r2
 800c1a4:	f000 8099 	beq.w	800c2da <HAL_TIM_ConfigClockSource+0x1be>
 800c1a8:	4a5c      	ldr	r2, [pc, #368]	@ (800c31c <HAL_TIM_ConfigClockSource+0x200>)
 800c1aa:	4293      	cmp	r3, r2
 800c1ac:	f200 809e 	bhi.w	800c2ec <HAL_TIM_ConfigClockSource+0x1d0>
 800c1b0:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800c1b4:	f000 8091 	beq.w	800c2da <HAL_TIM_ConfigClockSource+0x1be>
 800c1b8:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800c1bc:	f200 8096 	bhi.w	800c2ec <HAL_TIM_ConfigClockSource+0x1d0>
 800c1c0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800c1c4:	f000 8089 	beq.w	800c2da <HAL_TIM_ConfigClockSource+0x1be>
 800c1c8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800c1cc:	f200 808e 	bhi.w	800c2ec <HAL_TIM_ConfigClockSource+0x1d0>
 800c1d0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c1d4:	d03e      	beq.n	800c254 <HAL_TIM_ConfigClockSource+0x138>
 800c1d6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c1da:	f200 8087 	bhi.w	800c2ec <HAL_TIM_ConfigClockSource+0x1d0>
 800c1de:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c1e2:	f000 8086 	beq.w	800c2f2 <HAL_TIM_ConfigClockSource+0x1d6>
 800c1e6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c1ea:	d87f      	bhi.n	800c2ec <HAL_TIM_ConfigClockSource+0x1d0>
 800c1ec:	2b70      	cmp	r3, #112	@ 0x70
 800c1ee:	d01a      	beq.n	800c226 <HAL_TIM_ConfigClockSource+0x10a>
 800c1f0:	2b70      	cmp	r3, #112	@ 0x70
 800c1f2:	d87b      	bhi.n	800c2ec <HAL_TIM_ConfigClockSource+0x1d0>
 800c1f4:	2b60      	cmp	r3, #96	@ 0x60
 800c1f6:	d050      	beq.n	800c29a <HAL_TIM_ConfigClockSource+0x17e>
 800c1f8:	2b60      	cmp	r3, #96	@ 0x60
 800c1fa:	d877      	bhi.n	800c2ec <HAL_TIM_ConfigClockSource+0x1d0>
 800c1fc:	2b50      	cmp	r3, #80	@ 0x50
 800c1fe:	d03c      	beq.n	800c27a <HAL_TIM_ConfigClockSource+0x15e>
 800c200:	2b50      	cmp	r3, #80	@ 0x50
 800c202:	d873      	bhi.n	800c2ec <HAL_TIM_ConfigClockSource+0x1d0>
 800c204:	2b40      	cmp	r3, #64	@ 0x40
 800c206:	d058      	beq.n	800c2ba <HAL_TIM_ConfigClockSource+0x19e>
 800c208:	2b40      	cmp	r3, #64	@ 0x40
 800c20a:	d86f      	bhi.n	800c2ec <HAL_TIM_ConfigClockSource+0x1d0>
 800c20c:	2b30      	cmp	r3, #48	@ 0x30
 800c20e:	d064      	beq.n	800c2da <HAL_TIM_ConfigClockSource+0x1be>
 800c210:	2b30      	cmp	r3, #48	@ 0x30
 800c212:	d86b      	bhi.n	800c2ec <HAL_TIM_ConfigClockSource+0x1d0>
 800c214:	2b20      	cmp	r3, #32
 800c216:	d060      	beq.n	800c2da <HAL_TIM_ConfigClockSource+0x1be>
 800c218:	2b20      	cmp	r3, #32
 800c21a:	d867      	bhi.n	800c2ec <HAL_TIM_ConfigClockSource+0x1d0>
 800c21c:	2b00      	cmp	r3, #0
 800c21e:	d05c      	beq.n	800c2da <HAL_TIM_ConfigClockSource+0x1be>
 800c220:	2b10      	cmp	r3, #16
 800c222:	d05a      	beq.n	800c2da <HAL_TIM_ConfigClockSource+0x1be>
 800c224:	e062      	b.n	800c2ec <HAL_TIM_ConfigClockSource+0x1d0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800c226:	687b      	ldr	r3, [r7, #4]
 800c228:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800c22a:	683b      	ldr	r3, [r7, #0]
 800c22c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800c22e:	683b      	ldr	r3, [r7, #0]
 800c230:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800c232:	683b      	ldr	r3, [r7, #0]
 800c234:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800c236:	f000 fa78 	bl	800c72a <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800c23a:	687b      	ldr	r3, [r7, #4]
 800c23c:	681b      	ldr	r3, [r3, #0]
 800c23e:	689b      	ldr	r3, [r3, #8]
 800c240:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800c242:	68bb      	ldr	r3, [r7, #8]
 800c244:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800c248:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	681b      	ldr	r3, [r3, #0]
 800c24e:	68ba      	ldr	r2, [r7, #8]
 800c250:	609a      	str	r2, [r3, #8]
      break;
 800c252:	e04f      	b.n	800c2f4 <HAL_TIM_ConfigClockSource+0x1d8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800c258:	683b      	ldr	r3, [r7, #0]
 800c25a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800c25c:	683b      	ldr	r3, [r7, #0]
 800c25e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800c260:	683b      	ldr	r3, [r7, #0]
 800c262:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800c264:	f000 fa61 	bl	800c72a <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	681b      	ldr	r3, [r3, #0]
 800c26c:	689a      	ldr	r2, [r3, #8]
 800c26e:	687b      	ldr	r3, [r7, #4]
 800c270:	681b      	ldr	r3, [r3, #0]
 800c272:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800c276:	609a      	str	r2, [r3, #8]
      break;
 800c278:	e03c      	b.n	800c2f4 <HAL_TIM_ConfigClockSource+0x1d8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800c27e:	683b      	ldr	r3, [r7, #0]
 800c280:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800c282:	683b      	ldr	r3, [r7, #0]
 800c284:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800c286:	461a      	mov	r2, r3
 800c288:	f000 f972 	bl	800c570 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800c28c:	687b      	ldr	r3, [r7, #4]
 800c28e:	681b      	ldr	r3, [r3, #0]
 800c290:	2150      	movs	r1, #80	@ 0x50
 800c292:	4618      	mov	r0, r3
 800c294:	f000 fa2c 	bl	800c6f0 <TIM_ITRx_SetConfig>
      break;
 800c298:	e02c      	b.n	800c2f4 <HAL_TIM_ConfigClockSource+0x1d8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800c29a:	687b      	ldr	r3, [r7, #4]
 800c29c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800c29e:	683b      	ldr	r3, [r7, #0]
 800c2a0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800c2a2:	683b      	ldr	r3, [r7, #0]
 800c2a4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800c2a6:	461a      	mov	r2, r3
 800c2a8:	f000 f9d4 	bl	800c654 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800c2ac:	687b      	ldr	r3, [r7, #4]
 800c2ae:	681b      	ldr	r3, [r3, #0]
 800c2b0:	2160      	movs	r1, #96	@ 0x60
 800c2b2:	4618      	mov	r0, r3
 800c2b4:	f000 fa1c 	bl	800c6f0 <TIM_ITRx_SetConfig>
      break;
 800c2b8:	e01c      	b.n	800c2f4 <HAL_TIM_ConfigClockSource+0x1d8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800c2ba:	687b      	ldr	r3, [r7, #4]
 800c2bc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800c2be:	683b      	ldr	r3, [r7, #0]
 800c2c0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800c2c2:	683b      	ldr	r3, [r7, #0]
 800c2c4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800c2c6:	461a      	mov	r2, r3
 800c2c8:	f000 f952 	bl	800c570 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800c2cc:	687b      	ldr	r3, [r7, #4]
 800c2ce:	681b      	ldr	r3, [r3, #0]
 800c2d0:	2140      	movs	r1, #64	@ 0x40
 800c2d2:	4618      	mov	r0, r3
 800c2d4:	f000 fa0c 	bl	800c6f0 <TIM_ITRx_SetConfig>
      break;
 800c2d8:	e00c      	b.n	800c2f4 <HAL_TIM_ConfigClockSource+0x1d8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800c2da:	687b      	ldr	r3, [r7, #4]
 800c2dc:	681a      	ldr	r2, [r3, #0]
 800c2de:	683b      	ldr	r3, [r7, #0]
 800c2e0:	681b      	ldr	r3, [r3, #0]
 800c2e2:	4619      	mov	r1, r3
 800c2e4:	4610      	mov	r0, r2
 800c2e6:	f000 fa03 	bl	800c6f0 <TIM_ITRx_SetConfig>
      break;
 800c2ea:	e003      	b.n	800c2f4 <HAL_TIM_ConfigClockSource+0x1d8>
    }

    default:
      status = HAL_ERROR;
 800c2ec:	2301      	movs	r3, #1
 800c2ee:	73fb      	strb	r3, [r7, #15]
      break;
 800c2f0:	e000      	b.n	800c2f4 <HAL_TIM_ConfigClockSource+0x1d8>
      break;
 800c2f2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800c2f4:	687b      	ldr	r3, [r7, #4]
 800c2f6:	2201      	movs	r2, #1
 800c2f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800c2fc:	687b      	ldr	r3, [r7, #4]
 800c2fe:	2200      	movs	r2, #0
 800c300:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800c304:	7bfb      	ldrb	r3, [r7, #15]
}
 800c306:	4618      	mov	r0, r3
 800c308:	3710      	adds	r7, #16
 800c30a:	46bd      	mov	sp, r7
 800c30c:	bd80      	pop	{r7, pc}
 800c30e:	bf00      	nop
 800c310:	00100070 	.word	0x00100070
 800c314:	00100040 	.word	0x00100040
 800c318:	00100030 	.word	0x00100030
 800c31c:	00100020 	.word	0x00100020

0800c320 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800c320:	b480      	push	{r7}
 800c322:	b083      	sub	sp, #12
 800c324:	af00      	add	r7, sp, #0
 800c326:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800c328:	bf00      	nop
 800c32a:	370c      	adds	r7, #12
 800c32c:	46bd      	mov	sp, r7
 800c32e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c332:	4770      	bx	lr

0800c334 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800c334:	b480      	push	{r7}
 800c336:	b083      	sub	sp, #12
 800c338:	af00      	add	r7, sp, #0
 800c33a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800c33c:	bf00      	nop
 800c33e:	370c      	adds	r7, #12
 800c340:	46bd      	mov	sp, r7
 800c342:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c346:	4770      	bx	lr

0800c348 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800c348:	b480      	push	{r7}
 800c34a:	b083      	sub	sp, #12
 800c34c:	af00      	add	r7, sp, #0
 800c34e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800c350:	bf00      	nop
 800c352:	370c      	adds	r7, #12
 800c354:	46bd      	mov	sp, r7
 800c356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c35a:	4770      	bx	lr

0800c35c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800c35c:	b480      	push	{r7}
 800c35e:	b083      	sub	sp, #12
 800c360:	af00      	add	r7, sp, #0
 800c362:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800c364:	bf00      	nop
 800c366:	370c      	adds	r7, #12
 800c368:	46bd      	mov	sp, r7
 800c36a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c36e:	4770      	bx	lr

0800c370 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800c370:	b480      	push	{r7}
 800c372:	b085      	sub	sp, #20
 800c374:	af00      	add	r7, sp, #0
 800c376:	6078      	str	r0, [r7, #4]
 800c378:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800c37a:	687b      	ldr	r3, [r7, #4]
 800c37c:	681b      	ldr	r3, [r3, #0]
 800c37e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c380:	687b      	ldr	r3, [r7, #4]
 800c382:	4a6b      	ldr	r2, [pc, #428]	@ (800c530 <TIM_Base_SetConfig+0x1c0>)
 800c384:	4293      	cmp	r3, r2
 800c386:	d02b      	beq.n	800c3e0 <TIM_Base_SetConfig+0x70>
 800c388:	687b      	ldr	r3, [r7, #4]
 800c38a:	4a6a      	ldr	r2, [pc, #424]	@ (800c534 <TIM_Base_SetConfig+0x1c4>)
 800c38c:	4293      	cmp	r3, r2
 800c38e:	d027      	beq.n	800c3e0 <TIM_Base_SetConfig+0x70>
 800c390:	687b      	ldr	r3, [r7, #4]
 800c392:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c396:	d023      	beq.n	800c3e0 <TIM_Base_SetConfig+0x70>
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800c39e:	d01f      	beq.n	800c3e0 <TIM_Base_SetConfig+0x70>
 800c3a0:	687b      	ldr	r3, [r7, #4]
 800c3a2:	4a65      	ldr	r2, [pc, #404]	@ (800c538 <TIM_Base_SetConfig+0x1c8>)
 800c3a4:	4293      	cmp	r3, r2
 800c3a6:	d01b      	beq.n	800c3e0 <TIM_Base_SetConfig+0x70>
 800c3a8:	687b      	ldr	r3, [r7, #4]
 800c3aa:	4a64      	ldr	r2, [pc, #400]	@ (800c53c <TIM_Base_SetConfig+0x1cc>)
 800c3ac:	4293      	cmp	r3, r2
 800c3ae:	d017      	beq.n	800c3e0 <TIM_Base_SetConfig+0x70>
 800c3b0:	687b      	ldr	r3, [r7, #4]
 800c3b2:	4a63      	ldr	r2, [pc, #396]	@ (800c540 <TIM_Base_SetConfig+0x1d0>)
 800c3b4:	4293      	cmp	r3, r2
 800c3b6:	d013      	beq.n	800c3e0 <TIM_Base_SetConfig+0x70>
 800c3b8:	687b      	ldr	r3, [r7, #4]
 800c3ba:	4a62      	ldr	r2, [pc, #392]	@ (800c544 <TIM_Base_SetConfig+0x1d4>)
 800c3bc:	4293      	cmp	r3, r2
 800c3be:	d00f      	beq.n	800c3e0 <TIM_Base_SetConfig+0x70>
 800c3c0:	687b      	ldr	r3, [r7, #4]
 800c3c2:	4a61      	ldr	r2, [pc, #388]	@ (800c548 <TIM_Base_SetConfig+0x1d8>)
 800c3c4:	4293      	cmp	r3, r2
 800c3c6:	d00b      	beq.n	800c3e0 <TIM_Base_SetConfig+0x70>
 800c3c8:	687b      	ldr	r3, [r7, #4]
 800c3ca:	4a60      	ldr	r2, [pc, #384]	@ (800c54c <TIM_Base_SetConfig+0x1dc>)
 800c3cc:	4293      	cmp	r3, r2
 800c3ce:	d007      	beq.n	800c3e0 <TIM_Base_SetConfig+0x70>
 800c3d0:	687b      	ldr	r3, [r7, #4]
 800c3d2:	4a5f      	ldr	r2, [pc, #380]	@ (800c550 <TIM_Base_SetConfig+0x1e0>)
 800c3d4:	4293      	cmp	r3, r2
 800c3d6:	d003      	beq.n	800c3e0 <TIM_Base_SetConfig+0x70>
 800c3d8:	687b      	ldr	r3, [r7, #4]
 800c3da:	4a5e      	ldr	r2, [pc, #376]	@ (800c554 <TIM_Base_SetConfig+0x1e4>)
 800c3dc:	4293      	cmp	r3, r2
 800c3de:	d108      	bne.n	800c3f2 <TIM_Base_SetConfig+0x82>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c3e0:	68fb      	ldr	r3, [r7, #12]
 800c3e2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c3e6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800c3e8:	683b      	ldr	r3, [r7, #0]
 800c3ea:	685b      	ldr	r3, [r3, #4]
 800c3ec:	68fa      	ldr	r2, [r7, #12]
 800c3ee:	4313      	orrs	r3, r2
 800c3f0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	4a4e      	ldr	r2, [pc, #312]	@ (800c530 <TIM_Base_SetConfig+0x1c0>)
 800c3f6:	4293      	cmp	r3, r2
 800c3f8:	d043      	beq.n	800c482 <TIM_Base_SetConfig+0x112>
 800c3fa:	687b      	ldr	r3, [r7, #4]
 800c3fc:	4a4d      	ldr	r2, [pc, #308]	@ (800c534 <TIM_Base_SetConfig+0x1c4>)
 800c3fe:	4293      	cmp	r3, r2
 800c400:	d03f      	beq.n	800c482 <TIM_Base_SetConfig+0x112>
 800c402:	687b      	ldr	r3, [r7, #4]
 800c404:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c408:	d03b      	beq.n	800c482 <TIM_Base_SetConfig+0x112>
 800c40a:	687b      	ldr	r3, [r7, #4]
 800c40c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800c410:	d037      	beq.n	800c482 <TIM_Base_SetConfig+0x112>
 800c412:	687b      	ldr	r3, [r7, #4]
 800c414:	4a48      	ldr	r2, [pc, #288]	@ (800c538 <TIM_Base_SetConfig+0x1c8>)
 800c416:	4293      	cmp	r3, r2
 800c418:	d033      	beq.n	800c482 <TIM_Base_SetConfig+0x112>
 800c41a:	687b      	ldr	r3, [r7, #4]
 800c41c:	4a47      	ldr	r2, [pc, #284]	@ (800c53c <TIM_Base_SetConfig+0x1cc>)
 800c41e:	4293      	cmp	r3, r2
 800c420:	d02f      	beq.n	800c482 <TIM_Base_SetConfig+0x112>
 800c422:	687b      	ldr	r3, [r7, #4]
 800c424:	4a46      	ldr	r2, [pc, #280]	@ (800c540 <TIM_Base_SetConfig+0x1d0>)
 800c426:	4293      	cmp	r3, r2
 800c428:	d02b      	beq.n	800c482 <TIM_Base_SetConfig+0x112>
 800c42a:	687b      	ldr	r3, [r7, #4]
 800c42c:	4a45      	ldr	r2, [pc, #276]	@ (800c544 <TIM_Base_SetConfig+0x1d4>)
 800c42e:	4293      	cmp	r3, r2
 800c430:	d027      	beq.n	800c482 <TIM_Base_SetConfig+0x112>
 800c432:	687b      	ldr	r3, [r7, #4]
 800c434:	4a44      	ldr	r2, [pc, #272]	@ (800c548 <TIM_Base_SetConfig+0x1d8>)
 800c436:	4293      	cmp	r3, r2
 800c438:	d023      	beq.n	800c482 <TIM_Base_SetConfig+0x112>
 800c43a:	687b      	ldr	r3, [r7, #4]
 800c43c:	4a43      	ldr	r2, [pc, #268]	@ (800c54c <TIM_Base_SetConfig+0x1dc>)
 800c43e:	4293      	cmp	r3, r2
 800c440:	d01f      	beq.n	800c482 <TIM_Base_SetConfig+0x112>
 800c442:	687b      	ldr	r3, [r7, #4]
 800c444:	4a42      	ldr	r2, [pc, #264]	@ (800c550 <TIM_Base_SetConfig+0x1e0>)
 800c446:	4293      	cmp	r3, r2
 800c448:	d01b      	beq.n	800c482 <TIM_Base_SetConfig+0x112>
 800c44a:	687b      	ldr	r3, [r7, #4]
 800c44c:	4a41      	ldr	r2, [pc, #260]	@ (800c554 <TIM_Base_SetConfig+0x1e4>)
 800c44e:	4293      	cmp	r3, r2
 800c450:	d017      	beq.n	800c482 <TIM_Base_SetConfig+0x112>
 800c452:	687b      	ldr	r3, [r7, #4]
 800c454:	4a40      	ldr	r2, [pc, #256]	@ (800c558 <TIM_Base_SetConfig+0x1e8>)
 800c456:	4293      	cmp	r3, r2
 800c458:	d013      	beq.n	800c482 <TIM_Base_SetConfig+0x112>
 800c45a:	687b      	ldr	r3, [r7, #4]
 800c45c:	4a3f      	ldr	r2, [pc, #252]	@ (800c55c <TIM_Base_SetConfig+0x1ec>)
 800c45e:	4293      	cmp	r3, r2
 800c460:	d00f      	beq.n	800c482 <TIM_Base_SetConfig+0x112>
 800c462:	687b      	ldr	r3, [r7, #4]
 800c464:	4a3e      	ldr	r2, [pc, #248]	@ (800c560 <TIM_Base_SetConfig+0x1f0>)
 800c466:	4293      	cmp	r3, r2
 800c468:	d00b      	beq.n	800c482 <TIM_Base_SetConfig+0x112>
 800c46a:	687b      	ldr	r3, [r7, #4]
 800c46c:	4a3d      	ldr	r2, [pc, #244]	@ (800c564 <TIM_Base_SetConfig+0x1f4>)
 800c46e:	4293      	cmp	r3, r2
 800c470:	d007      	beq.n	800c482 <TIM_Base_SetConfig+0x112>
 800c472:	687b      	ldr	r3, [r7, #4]
 800c474:	4a3c      	ldr	r2, [pc, #240]	@ (800c568 <TIM_Base_SetConfig+0x1f8>)
 800c476:	4293      	cmp	r3, r2
 800c478:	d003      	beq.n	800c482 <TIM_Base_SetConfig+0x112>
 800c47a:	687b      	ldr	r3, [r7, #4]
 800c47c:	4a3b      	ldr	r2, [pc, #236]	@ (800c56c <TIM_Base_SetConfig+0x1fc>)
 800c47e:	4293      	cmp	r3, r2
 800c480:	d108      	bne.n	800c494 <TIM_Base_SetConfig+0x124>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800c482:	68fb      	ldr	r3, [r7, #12]
 800c484:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800c488:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c48a:	683b      	ldr	r3, [r7, #0]
 800c48c:	68db      	ldr	r3, [r3, #12]
 800c48e:	68fa      	ldr	r2, [r7, #12]
 800c490:	4313      	orrs	r3, r2
 800c492:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c494:	68fb      	ldr	r3, [r7, #12]
 800c496:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800c49a:	683b      	ldr	r3, [r7, #0]
 800c49c:	695b      	ldr	r3, [r3, #20]
 800c49e:	4313      	orrs	r3, r2
 800c4a0:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c4a2:	683b      	ldr	r3, [r7, #0]
 800c4a4:	689a      	ldr	r2, [r3, #8]
 800c4a6:	687b      	ldr	r3, [r7, #4]
 800c4a8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800c4aa:	683b      	ldr	r3, [r7, #0]
 800c4ac:	681a      	ldr	r2, [r3, #0]
 800c4ae:	687b      	ldr	r3, [r7, #4]
 800c4b0:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800c4b2:	687b      	ldr	r3, [r7, #4]
 800c4b4:	4a1e      	ldr	r2, [pc, #120]	@ (800c530 <TIM_Base_SetConfig+0x1c0>)
 800c4b6:	4293      	cmp	r3, r2
 800c4b8:	d023      	beq.n	800c502 <TIM_Base_SetConfig+0x192>
 800c4ba:	687b      	ldr	r3, [r7, #4]
 800c4bc:	4a1d      	ldr	r2, [pc, #116]	@ (800c534 <TIM_Base_SetConfig+0x1c4>)
 800c4be:	4293      	cmp	r3, r2
 800c4c0:	d01f      	beq.n	800c502 <TIM_Base_SetConfig+0x192>
 800c4c2:	687b      	ldr	r3, [r7, #4]
 800c4c4:	4a22      	ldr	r2, [pc, #136]	@ (800c550 <TIM_Base_SetConfig+0x1e0>)
 800c4c6:	4293      	cmp	r3, r2
 800c4c8:	d01b      	beq.n	800c502 <TIM_Base_SetConfig+0x192>
 800c4ca:	687b      	ldr	r3, [r7, #4]
 800c4cc:	4a21      	ldr	r2, [pc, #132]	@ (800c554 <TIM_Base_SetConfig+0x1e4>)
 800c4ce:	4293      	cmp	r3, r2
 800c4d0:	d017      	beq.n	800c502 <TIM_Base_SetConfig+0x192>
 800c4d2:	687b      	ldr	r3, [r7, #4]
 800c4d4:	4a20      	ldr	r2, [pc, #128]	@ (800c558 <TIM_Base_SetConfig+0x1e8>)
 800c4d6:	4293      	cmp	r3, r2
 800c4d8:	d013      	beq.n	800c502 <TIM_Base_SetConfig+0x192>
 800c4da:	687b      	ldr	r3, [r7, #4]
 800c4dc:	4a1f      	ldr	r2, [pc, #124]	@ (800c55c <TIM_Base_SetConfig+0x1ec>)
 800c4de:	4293      	cmp	r3, r2
 800c4e0:	d00f      	beq.n	800c502 <TIM_Base_SetConfig+0x192>
 800c4e2:	687b      	ldr	r3, [r7, #4]
 800c4e4:	4a1e      	ldr	r2, [pc, #120]	@ (800c560 <TIM_Base_SetConfig+0x1f0>)
 800c4e6:	4293      	cmp	r3, r2
 800c4e8:	d00b      	beq.n	800c502 <TIM_Base_SetConfig+0x192>
 800c4ea:	687b      	ldr	r3, [r7, #4]
 800c4ec:	4a1d      	ldr	r2, [pc, #116]	@ (800c564 <TIM_Base_SetConfig+0x1f4>)
 800c4ee:	4293      	cmp	r3, r2
 800c4f0:	d007      	beq.n	800c502 <TIM_Base_SetConfig+0x192>
 800c4f2:	687b      	ldr	r3, [r7, #4]
 800c4f4:	4a1c      	ldr	r2, [pc, #112]	@ (800c568 <TIM_Base_SetConfig+0x1f8>)
 800c4f6:	4293      	cmp	r3, r2
 800c4f8:	d003      	beq.n	800c502 <TIM_Base_SetConfig+0x192>
 800c4fa:	687b      	ldr	r3, [r7, #4]
 800c4fc:	4a1b      	ldr	r2, [pc, #108]	@ (800c56c <TIM_Base_SetConfig+0x1fc>)
 800c4fe:	4293      	cmp	r3, r2
 800c500:	d103      	bne.n	800c50a <TIM_Base_SetConfig+0x19a>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800c502:	683b      	ldr	r3, [r7, #0]
 800c504:	691a      	ldr	r2, [r3, #16]
 800c506:	687b      	ldr	r3, [r7, #4]
 800c508:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800c50a:	687b      	ldr	r3, [r7, #4]
 800c50c:	681b      	ldr	r3, [r3, #0]
 800c50e:	f043 0204 	orr.w	r2, r3, #4
 800c512:	687b      	ldr	r3, [r7, #4]
 800c514:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800c516:	687b      	ldr	r3, [r7, #4]
 800c518:	2201      	movs	r2, #1
 800c51a:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 800c51c:	687b      	ldr	r3, [r7, #4]
 800c51e:	68fa      	ldr	r2, [r7, #12]
 800c520:	601a      	str	r2, [r3, #0]
}
 800c522:	bf00      	nop
 800c524:	3714      	adds	r7, #20
 800c526:	46bd      	mov	sp, r7
 800c528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c52c:	4770      	bx	lr
 800c52e:	bf00      	nop
 800c530:	40012c00 	.word	0x40012c00
 800c534:	50012c00 	.word	0x50012c00
 800c538:	40000400 	.word	0x40000400
 800c53c:	50000400 	.word	0x50000400
 800c540:	40000800 	.word	0x40000800
 800c544:	50000800 	.word	0x50000800
 800c548:	40000c00 	.word	0x40000c00
 800c54c:	50000c00 	.word	0x50000c00
 800c550:	40013400 	.word	0x40013400
 800c554:	50013400 	.word	0x50013400
 800c558:	40014000 	.word	0x40014000
 800c55c:	50014000 	.word	0x50014000
 800c560:	40014400 	.word	0x40014400
 800c564:	50014400 	.word	0x50014400
 800c568:	40014800 	.word	0x40014800
 800c56c:	50014800 	.word	0x50014800

0800c570 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c570:	b480      	push	{r7}
 800c572:	b087      	sub	sp, #28
 800c574:	af00      	add	r7, sp, #0
 800c576:	60f8      	str	r0, [r7, #12]
 800c578:	60b9      	str	r1, [r7, #8]
 800c57a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c57c:	68fb      	ldr	r3, [r7, #12]
 800c57e:	6a1b      	ldr	r3, [r3, #32]
 800c580:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c582:	68fb      	ldr	r3, [r7, #12]
 800c584:	6a1b      	ldr	r3, [r3, #32]
 800c586:	f023 0201 	bic.w	r2, r3, #1
 800c58a:	68fb      	ldr	r3, [r7, #12]
 800c58c:	621a      	str	r2, [r3, #32]
  /* Disable the Channel 1N: Reset the CC1NE Bit */
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800c58e:	68fb      	ldr	r3, [r7, #12]
 800c590:	4a26      	ldr	r2, [pc, #152]	@ (800c62c <TIM_TI1_ConfigInputStage+0xbc>)
 800c592:	4293      	cmp	r3, r2
 800c594:	d023      	beq.n	800c5de <TIM_TI1_ConfigInputStage+0x6e>
 800c596:	68fb      	ldr	r3, [r7, #12]
 800c598:	4a25      	ldr	r2, [pc, #148]	@ (800c630 <TIM_TI1_ConfigInputStage+0xc0>)
 800c59a:	4293      	cmp	r3, r2
 800c59c:	d01f      	beq.n	800c5de <TIM_TI1_ConfigInputStage+0x6e>
 800c59e:	68fb      	ldr	r3, [r7, #12]
 800c5a0:	4a24      	ldr	r2, [pc, #144]	@ (800c634 <TIM_TI1_ConfigInputStage+0xc4>)
 800c5a2:	4293      	cmp	r3, r2
 800c5a4:	d01b      	beq.n	800c5de <TIM_TI1_ConfigInputStage+0x6e>
 800c5a6:	68fb      	ldr	r3, [r7, #12]
 800c5a8:	4a23      	ldr	r2, [pc, #140]	@ (800c638 <TIM_TI1_ConfigInputStage+0xc8>)
 800c5aa:	4293      	cmp	r3, r2
 800c5ac:	d017      	beq.n	800c5de <TIM_TI1_ConfigInputStage+0x6e>
 800c5ae:	68fb      	ldr	r3, [r7, #12]
 800c5b0:	4a22      	ldr	r2, [pc, #136]	@ (800c63c <TIM_TI1_ConfigInputStage+0xcc>)
 800c5b2:	4293      	cmp	r3, r2
 800c5b4:	d013      	beq.n	800c5de <TIM_TI1_ConfigInputStage+0x6e>
 800c5b6:	68fb      	ldr	r3, [r7, #12]
 800c5b8:	4a21      	ldr	r2, [pc, #132]	@ (800c640 <TIM_TI1_ConfigInputStage+0xd0>)
 800c5ba:	4293      	cmp	r3, r2
 800c5bc:	d00f      	beq.n	800c5de <TIM_TI1_ConfigInputStage+0x6e>
 800c5be:	68fb      	ldr	r3, [r7, #12]
 800c5c0:	4a20      	ldr	r2, [pc, #128]	@ (800c644 <TIM_TI1_ConfigInputStage+0xd4>)
 800c5c2:	4293      	cmp	r3, r2
 800c5c4:	d00b      	beq.n	800c5de <TIM_TI1_ConfigInputStage+0x6e>
 800c5c6:	68fb      	ldr	r3, [r7, #12]
 800c5c8:	4a1f      	ldr	r2, [pc, #124]	@ (800c648 <TIM_TI1_ConfigInputStage+0xd8>)
 800c5ca:	4293      	cmp	r3, r2
 800c5cc:	d007      	beq.n	800c5de <TIM_TI1_ConfigInputStage+0x6e>
 800c5ce:	68fb      	ldr	r3, [r7, #12]
 800c5d0:	4a1e      	ldr	r2, [pc, #120]	@ (800c64c <TIM_TI1_ConfigInputStage+0xdc>)
 800c5d2:	4293      	cmp	r3, r2
 800c5d4:	d003      	beq.n	800c5de <TIM_TI1_ConfigInputStage+0x6e>
 800c5d6:	68fb      	ldr	r3, [r7, #12]
 800c5d8:	4a1d      	ldr	r2, [pc, #116]	@ (800c650 <TIM_TI1_ConfigInputStage+0xe0>)
 800c5da:	4293      	cmp	r3, r2
 800c5dc:	d105      	bne.n	800c5ea <TIM_TI1_ConfigInputStage+0x7a>
  {
    TIMx->CCER &= ~TIM_CCER_CC1NE;
 800c5de:	68fb      	ldr	r3, [r7, #12]
 800c5e0:	6a1b      	ldr	r3, [r3, #32]
 800c5e2:	f023 0204 	bic.w	r2, r3, #4
 800c5e6:	68fb      	ldr	r3, [r7, #12]
 800c5e8:	621a      	str	r2, [r3, #32]
  }

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = TIMx->CCMR1;
 800c5ea:	68fb      	ldr	r3, [r7, #12]
 800c5ec:	699b      	ldr	r3, [r3, #24]
 800c5ee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800c5f0:	693b      	ldr	r3, [r7, #16]
 800c5f2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800c5f6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800c5f8:	687b      	ldr	r3, [r7, #4]
 800c5fa:	011b      	lsls	r3, r3, #4
 800c5fc:	693a      	ldr	r2, [r7, #16]
 800c5fe:	4313      	orrs	r3, r2
 800c600:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800c602:	697b      	ldr	r3, [r7, #20]
 800c604:	f023 030a 	bic.w	r3, r3, #10
 800c608:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800c60a:	697a      	ldr	r2, [r7, #20]
 800c60c:	68bb      	ldr	r3, [r7, #8]
 800c60e:	4313      	orrs	r3, r2
 800c610:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800c612:	68fb      	ldr	r3, [r7, #12]
 800c614:	693a      	ldr	r2, [r7, #16]
 800c616:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c618:	68fb      	ldr	r3, [r7, #12]
 800c61a:	697a      	ldr	r2, [r7, #20]
 800c61c:	621a      	str	r2, [r3, #32]
}
 800c61e:	bf00      	nop
 800c620:	371c      	adds	r7, #28
 800c622:	46bd      	mov	sp, r7
 800c624:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c628:	4770      	bx	lr
 800c62a:	bf00      	nop
 800c62c:	40012c00 	.word	0x40012c00
 800c630:	50012c00 	.word	0x50012c00
 800c634:	40013400 	.word	0x40013400
 800c638:	50013400 	.word	0x50013400
 800c63c:	40014000 	.word	0x40014000
 800c640:	50014000 	.word	0x50014000
 800c644:	40014400 	.word	0x40014400
 800c648:	50014400 	.word	0x50014400
 800c64c:	40014800 	.word	0x40014800
 800c650:	50014800 	.word	0x50014800

0800c654 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c654:	b480      	push	{r7}
 800c656:	b087      	sub	sp, #28
 800c658:	af00      	add	r7, sp, #0
 800c65a:	60f8      	str	r0, [r7, #12]
 800c65c:	60b9      	str	r1, [r7, #8]
 800c65e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c660:	68fb      	ldr	r3, [r7, #12]
 800c662:	6a1b      	ldr	r3, [r3, #32]
 800c664:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c666:	68fb      	ldr	r3, [r7, #12]
 800c668:	6a1b      	ldr	r3, [r3, #32]
 800c66a:	f023 0210 	bic.w	r2, r3, #16
 800c66e:	68fb      	ldr	r3, [r7, #12]
 800c670:	621a      	str	r2, [r3, #32]
  /* Disable the Channel 2N: Reset the CC2NE Bit */
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800c672:	68fb      	ldr	r3, [r7, #12]
 800c674:	4a1a      	ldr	r2, [pc, #104]	@ (800c6e0 <TIM_TI2_ConfigInputStage+0x8c>)
 800c676:	4293      	cmp	r3, r2
 800c678:	d00b      	beq.n	800c692 <TIM_TI2_ConfigInputStage+0x3e>
 800c67a:	68fb      	ldr	r3, [r7, #12]
 800c67c:	4a19      	ldr	r2, [pc, #100]	@ (800c6e4 <TIM_TI2_ConfigInputStage+0x90>)
 800c67e:	4293      	cmp	r3, r2
 800c680:	d007      	beq.n	800c692 <TIM_TI2_ConfigInputStage+0x3e>
 800c682:	68fb      	ldr	r3, [r7, #12]
 800c684:	4a18      	ldr	r2, [pc, #96]	@ (800c6e8 <TIM_TI2_ConfigInputStage+0x94>)
 800c686:	4293      	cmp	r3, r2
 800c688:	d003      	beq.n	800c692 <TIM_TI2_ConfigInputStage+0x3e>
 800c68a:	68fb      	ldr	r3, [r7, #12]
 800c68c:	4a17      	ldr	r2, [pc, #92]	@ (800c6ec <TIM_TI2_ConfigInputStage+0x98>)
 800c68e:	4293      	cmp	r3, r2
 800c690:	d105      	bne.n	800c69e <TIM_TI2_ConfigInputStage+0x4a>
  {
    TIMx->CCER &= ~TIM_CCER_CC2NE;
 800c692:	68fb      	ldr	r3, [r7, #12]
 800c694:	6a1b      	ldr	r3, [r3, #32]
 800c696:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 800c69a:	68fb      	ldr	r3, [r7, #12]
 800c69c:	621a      	str	r2, [r3, #32]
  }

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = TIMx->CCMR1;
 800c69e:	68fb      	ldr	r3, [r7, #12]
 800c6a0:	699b      	ldr	r3, [r3, #24]
 800c6a2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800c6a4:	693b      	ldr	r3, [r7, #16]
 800c6a6:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800c6aa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800c6ac:	687b      	ldr	r3, [r7, #4]
 800c6ae:	031b      	lsls	r3, r3, #12
 800c6b0:	693a      	ldr	r2, [r7, #16]
 800c6b2:	4313      	orrs	r3, r2
 800c6b4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800c6b6:	697b      	ldr	r3, [r7, #20]
 800c6b8:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800c6bc:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800c6be:	68bb      	ldr	r3, [r7, #8]
 800c6c0:	011b      	lsls	r3, r3, #4
 800c6c2:	697a      	ldr	r2, [r7, #20]
 800c6c4:	4313      	orrs	r3, r2
 800c6c6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800c6c8:	68fb      	ldr	r3, [r7, #12]
 800c6ca:	693a      	ldr	r2, [r7, #16]
 800c6cc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c6ce:	68fb      	ldr	r3, [r7, #12]
 800c6d0:	697a      	ldr	r2, [r7, #20]
 800c6d2:	621a      	str	r2, [r3, #32]
}
 800c6d4:	bf00      	nop
 800c6d6:	371c      	adds	r7, #28
 800c6d8:	46bd      	mov	sp, r7
 800c6da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6de:	4770      	bx	lr
 800c6e0:	40012c00 	.word	0x40012c00
 800c6e4:	50012c00 	.word	0x50012c00
 800c6e8:	40013400 	.word	0x40013400
 800c6ec:	50013400 	.word	0x50013400

0800c6f0 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800c6f0:	b480      	push	{r7}
 800c6f2:	b085      	sub	sp, #20
 800c6f4:	af00      	add	r7, sp, #0
 800c6f6:	6078      	str	r0, [r7, #4]
 800c6f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800c6fa:	687b      	ldr	r3, [r7, #4]
 800c6fc:	689b      	ldr	r3, [r3, #8]
 800c6fe:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800c700:	68fb      	ldr	r3, [r7, #12]
 800c702:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800c706:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c70a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800c70c:	683a      	ldr	r2, [r7, #0]
 800c70e:	68fb      	ldr	r3, [r7, #12]
 800c710:	4313      	orrs	r3, r2
 800c712:	f043 0307 	orr.w	r3, r3, #7
 800c716:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c718:	687b      	ldr	r3, [r7, #4]
 800c71a:	68fa      	ldr	r2, [r7, #12]
 800c71c:	609a      	str	r2, [r3, #8]
}
 800c71e:	bf00      	nop
 800c720:	3714      	adds	r7, #20
 800c722:	46bd      	mov	sp, r7
 800c724:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c728:	4770      	bx	lr

0800c72a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800c72a:	b480      	push	{r7}
 800c72c:	b087      	sub	sp, #28
 800c72e:	af00      	add	r7, sp, #0
 800c730:	60f8      	str	r0, [r7, #12]
 800c732:	60b9      	str	r1, [r7, #8]
 800c734:	607a      	str	r2, [r7, #4]
 800c736:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800c738:	68fb      	ldr	r3, [r7, #12]
 800c73a:	689b      	ldr	r3, [r3, #8]
 800c73c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c73e:	697b      	ldr	r3, [r7, #20]
 800c740:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800c744:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800c746:	683b      	ldr	r3, [r7, #0]
 800c748:	021a      	lsls	r2, r3, #8
 800c74a:	687b      	ldr	r3, [r7, #4]
 800c74c:	431a      	orrs	r2, r3
 800c74e:	68bb      	ldr	r3, [r7, #8]
 800c750:	4313      	orrs	r3, r2
 800c752:	697a      	ldr	r2, [r7, #20]
 800c754:	4313      	orrs	r3, r2
 800c756:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c758:	68fb      	ldr	r3, [r7, #12]
 800c75a:	697a      	ldr	r2, [r7, #20]
 800c75c:	609a      	str	r2, [r3, #8]
}
 800c75e:	bf00      	nop
 800c760:	371c      	adds	r7, #28
 800c762:	46bd      	mov	sp, r7
 800c764:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c768:	4770      	bx	lr
	...

0800c76c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800c76c:	b480      	push	{r7}
 800c76e:	b085      	sub	sp, #20
 800c770:	af00      	add	r7, sp, #0
 800c772:	6078      	str	r0, [r7, #4]
 800c774:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800c776:	687b      	ldr	r3, [r7, #4]
 800c778:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800c77c:	2b01      	cmp	r3, #1
 800c77e:	d101      	bne.n	800c784 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800c780:	2302      	movs	r3, #2
 800c782:	e097      	b.n	800c8b4 <HAL_TIMEx_MasterConfigSynchronization+0x148>
 800c784:	687b      	ldr	r3, [r7, #4]
 800c786:	2201      	movs	r2, #1
 800c788:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c78c:	687b      	ldr	r3, [r7, #4]
 800c78e:	2202      	movs	r2, #2
 800c790:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800c794:	687b      	ldr	r3, [r7, #4]
 800c796:	681b      	ldr	r3, [r3, #0]
 800c798:	685b      	ldr	r3, [r3, #4]
 800c79a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800c79c:	687b      	ldr	r3, [r7, #4]
 800c79e:	681b      	ldr	r3, [r3, #0]
 800c7a0:	689b      	ldr	r3, [r3, #8]
 800c7a2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800c7a4:	687b      	ldr	r3, [r7, #4]
 800c7a6:	681b      	ldr	r3, [r3, #0]
 800c7a8:	4a45      	ldr	r2, [pc, #276]	@ (800c8c0 <HAL_TIMEx_MasterConfigSynchronization+0x154>)
 800c7aa:	4293      	cmp	r3, r2
 800c7ac:	d00e      	beq.n	800c7cc <HAL_TIMEx_MasterConfigSynchronization+0x60>
 800c7ae:	687b      	ldr	r3, [r7, #4]
 800c7b0:	681b      	ldr	r3, [r3, #0]
 800c7b2:	4a44      	ldr	r2, [pc, #272]	@ (800c8c4 <HAL_TIMEx_MasterConfigSynchronization+0x158>)
 800c7b4:	4293      	cmp	r3, r2
 800c7b6:	d009      	beq.n	800c7cc <HAL_TIMEx_MasterConfigSynchronization+0x60>
 800c7b8:	687b      	ldr	r3, [r7, #4]
 800c7ba:	681b      	ldr	r3, [r3, #0]
 800c7bc:	4a42      	ldr	r2, [pc, #264]	@ (800c8c8 <HAL_TIMEx_MasterConfigSynchronization+0x15c>)
 800c7be:	4293      	cmp	r3, r2
 800c7c0:	d004      	beq.n	800c7cc <HAL_TIMEx_MasterConfigSynchronization+0x60>
 800c7c2:	687b      	ldr	r3, [r7, #4]
 800c7c4:	681b      	ldr	r3, [r3, #0]
 800c7c6:	4a41      	ldr	r2, [pc, #260]	@ (800c8cc <HAL_TIMEx_MasterConfigSynchronization+0x160>)
 800c7c8:	4293      	cmp	r3, r2
 800c7ca:	d108      	bne.n	800c7de <HAL_TIMEx_MasterConfigSynchronization+0x72>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800c7cc:	68fb      	ldr	r3, [r7, #12]
 800c7ce:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800c7d2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800c7d4:	683b      	ldr	r3, [r7, #0]
 800c7d6:	685b      	ldr	r3, [r3, #4]
 800c7d8:	68fa      	ldr	r2, [r7, #12]
 800c7da:	4313      	orrs	r3, r2
 800c7dc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800c7de:	68fb      	ldr	r3, [r7, #12]
 800c7e0:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800c7e4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c7e8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800c7ea:	683b      	ldr	r3, [r7, #0]
 800c7ec:	681b      	ldr	r3, [r3, #0]
 800c7ee:	68fa      	ldr	r2, [r7, #12]
 800c7f0:	4313      	orrs	r3, r2
 800c7f2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800c7f4:	687b      	ldr	r3, [r7, #4]
 800c7f6:	681b      	ldr	r3, [r3, #0]
 800c7f8:	68fa      	ldr	r2, [r7, #12]
 800c7fa:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c7fc:	687b      	ldr	r3, [r7, #4]
 800c7fe:	681b      	ldr	r3, [r3, #0]
 800c800:	4a2f      	ldr	r2, [pc, #188]	@ (800c8c0 <HAL_TIMEx_MasterConfigSynchronization+0x154>)
 800c802:	4293      	cmp	r3, r2
 800c804:	d040      	beq.n	800c888 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800c806:	687b      	ldr	r3, [r7, #4]
 800c808:	681b      	ldr	r3, [r3, #0]
 800c80a:	4a2e      	ldr	r2, [pc, #184]	@ (800c8c4 <HAL_TIMEx_MasterConfigSynchronization+0x158>)
 800c80c:	4293      	cmp	r3, r2
 800c80e:	d03b      	beq.n	800c888 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	681b      	ldr	r3, [r3, #0]
 800c814:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c818:	d036      	beq.n	800c888 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800c81a:	687b      	ldr	r3, [r7, #4]
 800c81c:	681b      	ldr	r3, [r3, #0]
 800c81e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800c822:	d031      	beq.n	800c888 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800c824:	687b      	ldr	r3, [r7, #4]
 800c826:	681b      	ldr	r3, [r3, #0]
 800c828:	4a29      	ldr	r2, [pc, #164]	@ (800c8d0 <HAL_TIMEx_MasterConfigSynchronization+0x164>)
 800c82a:	4293      	cmp	r3, r2
 800c82c:	d02c      	beq.n	800c888 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800c82e:	687b      	ldr	r3, [r7, #4]
 800c830:	681b      	ldr	r3, [r3, #0]
 800c832:	4a28      	ldr	r2, [pc, #160]	@ (800c8d4 <HAL_TIMEx_MasterConfigSynchronization+0x168>)
 800c834:	4293      	cmp	r3, r2
 800c836:	d027      	beq.n	800c888 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800c838:	687b      	ldr	r3, [r7, #4]
 800c83a:	681b      	ldr	r3, [r3, #0]
 800c83c:	4a26      	ldr	r2, [pc, #152]	@ (800c8d8 <HAL_TIMEx_MasterConfigSynchronization+0x16c>)
 800c83e:	4293      	cmp	r3, r2
 800c840:	d022      	beq.n	800c888 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800c842:	687b      	ldr	r3, [r7, #4]
 800c844:	681b      	ldr	r3, [r3, #0]
 800c846:	4a25      	ldr	r2, [pc, #148]	@ (800c8dc <HAL_TIMEx_MasterConfigSynchronization+0x170>)
 800c848:	4293      	cmp	r3, r2
 800c84a:	d01d      	beq.n	800c888 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800c84c:	687b      	ldr	r3, [r7, #4]
 800c84e:	681b      	ldr	r3, [r3, #0]
 800c850:	4a23      	ldr	r2, [pc, #140]	@ (800c8e0 <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 800c852:	4293      	cmp	r3, r2
 800c854:	d018      	beq.n	800c888 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800c856:	687b      	ldr	r3, [r7, #4]
 800c858:	681b      	ldr	r3, [r3, #0]
 800c85a:	4a22      	ldr	r2, [pc, #136]	@ (800c8e4 <HAL_TIMEx_MasterConfigSynchronization+0x178>)
 800c85c:	4293      	cmp	r3, r2
 800c85e:	d013      	beq.n	800c888 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800c860:	687b      	ldr	r3, [r7, #4]
 800c862:	681b      	ldr	r3, [r3, #0]
 800c864:	4a18      	ldr	r2, [pc, #96]	@ (800c8c8 <HAL_TIMEx_MasterConfigSynchronization+0x15c>)
 800c866:	4293      	cmp	r3, r2
 800c868:	d00e      	beq.n	800c888 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800c86a:	687b      	ldr	r3, [r7, #4]
 800c86c:	681b      	ldr	r3, [r3, #0]
 800c86e:	4a17      	ldr	r2, [pc, #92]	@ (800c8cc <HAL_TIMEx_MasterConfigSynchronization+0x160>)
 800c870:	4293      	cmp	r3, r2
 800c872:	d009      	beq.n	800c888 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800c874:	687b      	ldr	r3, [r7, #4]
 800c876:	681b      	ldr	r3, [r3, #0]
 800c878:	4a1b      	ldr	r2, [pc, #108]	@ (800c8e8 <HAL_TIMEx_MasterConfigSynchronization+0x17c>)
 800c87a:	4293      	cmp	r3, r2
 800c87c:	d004      	beq.n	800c888 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800c87e:	687b      	ldr	r3, [r7, #4]
 800c880:	681b      	ldr	r3, [r3, #0]
 800c882:	4a1a      	ldr	r2, [pc, #104]	@ (800c8ec <HAL_TIMEx_MasterConfigSynchronization+0x180>)
 800c884:	4293      	cmp	r3, r2
 800c886:	d10c      	bne.n	800c8a2 <HAL_TIMEx_MasterConfigSynchronization+0x136>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800c888:	68bb      	ldr	r3, [r7, #8]
 800c88a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c88e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800c890:	683b      	ldr	r3, [r7, #0]
 800c892:	689b      	ldr	r3, [r3, #8]
 800c894:	68ba      	ldr	r2, [r7, #8]
 800c896:	4313      	orrs	r3, r2
 800c898:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800c89a:	687b      	ldr	r3, [r7, #4]
 800c89c:	681b      	ldr	r3, [r3, #0]
 800c89e:	68ba      	ldr	r2, [r7, #8]
 800c8a0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800c8a2:	687b      	ldr	r3, [r7, #4]
 800c8a4:	2201      	movs	r2, #1
 800c8a6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800c8aa:	687b      	ldr	r3, [r7, #4]
 800c8ac:	2200      	movs	r2, #0
 800c8ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800c8b2:	2300      	movs	r3, #0
}
 800c8b4:	4618      	mov	r0, r3
 800c8b6:	3714      	adds	r7, #20
 800c8b8:	46bd      	mov	sp, r7
 800c8ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8be:	4770      	bx	lr
 800c8c0:	40012c00 	.word	0x40012c00
 800c8c4:	50012c00 	.word	0x50012c00
 800c8c8:	40013400 	.word	0x40013400
 800c8cc:	50013400 	.word	0x50013400
 800c8d0:	40000400 	.word	0x40000400
 800c8d4:	50000400 	.word	0x50000400
 800c8d8:	40000800 	.word	0x40000800
 800c8dc:	50000800 	.word	0x50000800
 800c8e0:	40000c00 	.word	0x40000c00
 800c8e4:	50000c00 	.word	0x50000c00
 800c8e8:	40014000 	.word	0x40014000
 800c8ec:	50014000 	.word	0x50014000

0800c8f0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800c8f0:	b480      	push	{r7}
 800c8f2:	b083      	sub	sp, #12
 800c8f4:	af00      	add	r7, sp, #0
 800c8f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800c8f8:	bf00      	nop
 800c8fa:	370c      	adds	r7, #12
 800c8fc:	46bd      	mov	sp, r7
 800c8fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c902:	4770      	bx	lr

0800c904 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800c904:	b480      	push	{r7}
 800c906:	b083      	sub	sp, #12
 800c908:	af00      	add	r7, sp, #0
 800c90a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800c90c:	bf00      	nop
 800c90e:	370c      	adds	r7, #12
 800c910:	46bd      	mov	sp, r7
 800c912:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c916:	4770      	bx	lr

0800c918 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800c918:	b480      	push	{r7}
 800c91a:	b083      	sub	sp, #12
 800c91c:	af00      	add	r7, sp, #0
 800c91e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800c920:	bf00      	nop
 800c922:	370c      	adds	r7, #12
 800c924:	46bd      	mov	sp, r7
 800c926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c92a:	4770      	bx	lr

0800c92c <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800c92c:	b480      	push	{r7}
 800c92e:	b083      	sub	sp, #12
 800c930:	af00      	add	r7, sp, #0
 800c932:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800c934:	bf00      	nop
 800c936:	370c      	adds	r7, #12
 800c938:	46bd      	mov	sp, r7
 800c93a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c93e:	4770      	bx	lr

0800c940 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800c940:	b480      	push	{r7}
 800c942:	b083      	sub	sp, #12
 800c944:	af00      	add	r7, sp, #0
 800c946:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800c948:	bf00      	nop
 800c94a:	370c      	adds	r7, #12
 800c94c:	46bd      	mov	sp, r7
 800c94e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c952:	4770      	bx	lr

0800c954 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800c954:	b480      	push	{r7}
 800c956:	b083      	sub	sp, #12
 800c958:	af00      	add	r7, sp, #0
 800c95a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800c95c:	bf00      	nop
 800c95e:	370c      	adds	r7, #12
 800c960:	46bd      	mov	sp, r7
 800c962:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c966:	4770      	bx	lr

0800c968 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800c968:	b480      	push	{r7}
 800c96a:	b083      	sub	sp, #12
 800c96c:	af00      	add	r7, sp, #0
 800c96e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800c970:	bf00      	nop
 800c972:	370c      	adds	r7, #12
 800c974:	46bd      	mov	sp, r7
 800c976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c97a:	4770      	bx	lr

0800c97c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800c97c:	b580      	push	{r7, lr}
 800c97e:	b082      	sub	sp, #8
 800c980:	af00      	add	r7, sp, #0
 800c982:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800c984:	687b      	ldr	r3, [r7, #4]
 800c986:	2b00      	cmp	r3, #0
 800c988:	d101      	bne.n	800c98e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800c98a:	2301      	movs	r3, #1
 800c98c:	e042      	b.n	800ca14 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800c98e:	687b      	ldr	r3, [r7, #4]
 800c990:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c994:	2b00      	cmp	r3, #0
 800c996:	d106      	bne.n	800c9a6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800c998:	687b      	ldr	r3, [r7, #4]
 800c99a:	2200      	movs	r2, #0
 800c99c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800c9a0:	6878      	ldr	r0, [r7, #4]
 800c9a2:	f000 f83b 	bl	800ca1c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800c9a6:	687b      	ldr	r3, [r7, #4]
 800c9a8:	2224      	movs	r2, #36	@ 0x24
 800c9aa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800c9ae:	687b      	ldr	r3, [r7, #4]
 800c9b0:	681b      	ldr	r3, [r3, #0]
 800c9b2:	681a      	ldr	r2, [r3, #0]
 800c9b4:	687b      	ldr	r3, [r7, #4]
 800c9b6:	681b      	ldr	r3, [r3, #0]
 800c9b8:	f022 0201 	bic.w	r2, r2, #1
 800c9bc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800c9be:	687b      	ldr	r3, [r7, #4]
 800c9c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c9c2:	2b00      	cmp	r3, #0
 800c9c4:	d002      	beq.n	800c9cc <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800c9c6:	6878      	ldr	r0, [r7, #4]
 800c9c8:	f000 fa72 	bl	800ceb0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800c9cc:	6878      	ldr	r0, [r7, #4]
 800c9ce:	f000 f8cd 	bl	800cb6c <UART_SetConfig>
 800c9d2:	4603      	mov	r3, r0
 800c9d4:	2b01      	cmp	r3, #1
 800c9d6:	d101      	bne.n	800c9dc <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800c9d8:	2301      	movs	r3, #1
 800c9da:	e01b      	b.n	800ca14 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800c9dc:	687b      	ldr	r3, [r7, #4]
 800c9de:	681b      	ldr	r3, [r3, #0]
 800c9e0:	685a      	ldr	r2, [r3, #4]
 800c9e2:	687b      	ldr	r3, [r7, #4]
 800c9e4:	681b      	ldr	r3, [r3, #0]
 800c9e6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800c9ea:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800c9ec:	687b      	ldr	r3, [r7, #4]
 800c9ee:	681b      	ldr	r3, [r3, #0]
 800c9f0:	689a      	ldr	r2, [r3, #8]
 800c9f2:	687b      	ldr	r3, [r7, #4]
 800c9f4:	681b      	ldr	r3, [r3, #0]
 800c9f6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800c9fa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800c9fc:	687b      	ldr	r3, [r7, #4]
 800c9fe:	681b      	ldr	r3, [r3, #0]
 800ca00:	681a      	ldr	r2, [r3, #0]
 800ca02:	687b      	ldr	r3, [r7, #4]
 800ca04:	681b      	ldr	r3, [r3, #0]
 800ca06:	f042 0201 	orr.w	r2, r2, #1
 800ca0a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800ca0c:	6878      	ldr	r0, [r7, #4]
 800ca0e:	f000 faf1 	bl	800cff4 <UART_CheckIdleState>
 800ca12:	4603      	mov	r3, r0
}
 800ca14:	4618      	mov	r0, r3
 800ca16:	3708      	adds	r7, #8
 800ca18:	46bd      	mov	sp, r7
 800ca1a:	bd80      	pop	{r7, pc}

0800ca1c <HAL_UART_MspInit>:
  * @brief Initialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 800ca1c:	b480      	push	{r7}
 800ca1e:	b083      	sub	sp, #12
 800ca20:	af00      	add	r7, sp, #0
 800ca22:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 800ca24:	bf00      	nop
 800ca26:	370c      	adds	r7, #12
 800ca28:	46bd      	mov	sp, r7
 800ca2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca2e:	4770      	bx	lr

0800ca30 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ca30:	b580      	push	{r7, lr}
 800ca32:	b08a      	sub	sp, #40	@ 0x28
 800ca34:	af02      	add	r7, sp, #8
 800ca36:	60f8      	str	r0, [r7, #12]
 800ca38:	60b9      	str	r1, [r7, #8]
 800ca3a:	603b      	str	r3, [r7, #0]
 800ca3c:	4613      	mov	r3, r2
 800ca3e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800ca40:	68fb      	ldr	r3, [r7, #12]
 800ca42:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ca46:	2b20      	cmp	r3, #32
 800ca48:	f040 808b 	bne.w	800cb62 <HAL_UART_Transmit+0x132>
  {
    if ((pData == NULL) || (Size == 0U))
 800ca4c:	68bb      	ldr	r3, [r7, #8]
 800ca4e:	2b00      	cmp	r3, #0
 800ca50:	d002      	beq.n	800ca58 <HAL_UART_Transmit+0x28>
 800ca52:	88fb      	ldrh	r3, [r7, #6]
 800ca54:	2b00      	cmp	r3, #0
 800ca56:	d101      	bne.n	800ca5c <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800ca58:	2301      	movs	r3, #1
 800ca5a:	e083      	b.n	800cb64 <HAL_UART_Transmit+0x134>
    }

#if defined(USART_DMAREQUESTS_SW_WA)
    /* Disable the UART DMA Tx request if enabled */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 800ca5c:	68fb      	ldr	r3, [r7, #12]
 800ca5e:	681b      	ldr	r3, [r3, #0]
 800ca60:	689b      	ldr	r3, [r3, #8]
 800ca62:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ca66:	2b80      	cmp	r3, #128	@ 0x80
 800ca68:	d107      	bne.n	800ca7a <HAL_UART_Transmit+0x4a>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800ca6a:	68fb      	ldr	r3, [r7, #12]
 800ca6c:	681b      	ldr	r3, [r3, #0]
 800ca6e:	689a      	ldr	r2, [r3, #8]
 800ca70:	68fb      	ldr	r3, [r7, #12]
 800ca72:	681b      	ldr	r3, [r3, #0]
 800ca74:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800ca78:	609a      	str	r2, [r3, #8]
    }

#endif /* USART_DMAREQUESTS_SW_WA */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ca7a:	68fb      	ldr	r3, [r7, #12]
 800ca7c:	2200      	movs	r2, #0
 800ca7e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800ca82:	68fb      	ldr	r3, [r7, #12]
 800ca84:	2221      	movs	r2, #33	@ 0x21
 800ca86:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800ca8a:	f7f8 f94f 	bl	8004d2c <HAL_GetTick>
 800ca8e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800ca90:	68fb      	ldr	r3, [r7, #12]
 800ca92:	88fa      	ldrh	r2, [r7, #6]
 800ca94:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800ca98:	68fb      	ldr	r3, [r7, #12]
 800ca9a:	88fa      	ldrh	r2, [r7, #6]
 800ca9c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800caa0:	68fb      	ldr	r3, [r7, #12]
 800caa2:	689b      	ldr	r3, [r3, #8]
 800caa4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800caa8:	d108      	bne.n	800cabc <HAL_UART_Transmit+0x8c>
 800caaa:	68fb      	ldr	r3, [r7, #12]
 800caac:	691b      	ldr	r3, [r3, #16]
 800caae:	2b00      	cmp	r3, #0
 800cab0:	d104      	bne.n	800cabc <HAL_UART_Transmit+0x8c>
    {
      pdata8bits  = NULL;
 800cab2:	2300      	movs	r3, #0
 800cab4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800cab6:	68bb      	ldr	r3, [r7, #8]
 800cab8:	61bb      	str	r3, [r7, #24]
 800caba:	e003      	b.n	800cac4 <HAL_UART_Transmit+0x94>
    }
    else
    {
      pdata8bits  = pData;
 800cabc:	68bb      	ldr	r3, [r7, #8]
 800cabe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800cac0:	2300      	movs	r3, #0
 800cac2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800cac4:	e030      	b.n	800cb28 <HAL_UART_Transmit+0xf8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800cac6:	683b      	ldr	r3, [r7, #0]
 800cac8:	9300      	str	r3, [sp, #0]
 800caca:	697b      	ldr	r3, [r7, #20]
 800cacc:	2200      	movs	r2, #0
 800cace:	2180      	movs	r1, #128	@ 0x80
 800cad0:	68f8      	ldr	r0, [r7, #12]
 800cad2:	f000 fb39 	bl	800d148 <UART_WaitOnFlagUntilTimeout>
 800cad6:	4603      	mov	r3, r0
 800cad8:	2b00      	cmp	r3, #0
 800cada:	d005      	beq.n	800cae8 <HAL_UART_Transmit+0xb8>
      {

        huart->gState = HAL_UART_STATE_READY;
 800cadc:	68fb      	ldr	r3, [r7, #12]
 800cade:	2220      	movs	r2, #32
 800cae0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800cae4:	2303      	movs	r3, #3
 800cae6:	e03d      	b.n	800cb64 <HAL_UART_Transmit+0x134>
      }
      if (pdata8bits == NULL)
 800cae8:	69fb      	ldr	r3, [r7, #28]
 800caea:	2b00      	cmp	r3, #0
 800caec:	d10b      	bne.n	800cb06 <HAL_UART_Transmit+0xd6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800caee:	69bb      	ldr	r3, [r7, #24]
 800caf0:	881b      	ldrh	r3, [r3, #0]
 800caf2:	461a      	mov	r2, r3
 800caf4:	68fb      	ldr	r3, [r7, #12]
 800caf6:	681b      	ldr	r3, [r3, #0]
 800caf8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800cafc:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800cafe:	69bb      	ldr	r3, [r7, #24]
 800cb00:	3302      	adds	r3, #2
 800cb02:	61bb      	str	r3, [r7, #24]
 800cb04:	e007      	b.n	800cb16 <HAL_UART_Transmit+0xe6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800cb06:	69fb      	ldr	r3, [r7, #28]
 800cb08:	781a      	ldrb	r2, [r3, #0]
 800cb0a:	68fb      	ldr	r3, [r7, #12]
 800cb0c:	681b      	ldr	r3, [r3, #0]
 800cb0e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800cb10:	69fb      	ldr	r3, [r7, #28]
 800cb12:	3301      	adds	r3, #1
 800cb14:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800cb16:	68fb      	ldr	r3, [r7, #12]
 800cb18:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800cb1c:	b29b      	uxth	r3, r3
 800cb1e:	3b01      	subs	r3, #1
 800cb20:	b29a      	uxth	r2, r3
 800cb22:	68fb      	ldr	r3, [r7, #12]
 800cb24:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800cb28:	68fb      	ldr	r3, [r7, #12]
 800cb2a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800cb2e:	b29b      	uxth	r3, r3
 800cb30:	2b00      	cmp	r3, #0
 800cb32:	d1c8      	bne.n	800cac6 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800cb34:	683b      	ldr	r3, [r7, #0]
 800cb36:	9300      	str	r3, [sp, #0]
 800cb38:	697b      	ldr	r3, [r7, #20]
 800cb3a:	2200      	movs	r2, #0
 800cb3c:	2140      	movs	r1, #64	@ 0x40
 800cb3e:	68f8      	ldr	r0, [r7, #12]
 800cb40:	f000 fb02 	bl	800d148 <UART_WaitOnFlagUntilTimeout>
 800cb44:	4603      	mov	r3, r0
 800cb46:	2b00      	cmp	r3, #0
 800cb48:	d005      	beq.n	800cb56 <HAL_UART_Transmit+0x126>
    {
      huart->gState = HAL_UART_STATE_READY;
 800cb4a:	68fb      	ldr	r3, [r7, #12]
 800cb4c:	2220      	movs	r2, #32
 800cb4e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800cb52:	2303      	movs	r3, #3
 800cb54:	e006      	b.n	800cb64 <HAL_UART_Transmit+0x134>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800cb56:	68fb      	ldr	r3, [r7, #12]
 800cb58:	2220      	movs	r2, #32
 800cb5a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800cb5e:	2300      	movs	r3, #0
 800cb60:	e000      	b.n	800cb64 <HAL_UART_Transmit+0x134>
  }
  else
  {
    return HAL_BUSY;
 800cb62:	2302      	movs	r3, #2
  }
}
 800cb64:	4618      	mov	r0, r3
 800cb66:	3720      	adds	r7, #32
 800cb68:	46bd      	mov	sp, r7
 800cb6a:	bd80      	pop	{r7, pc}

0800cb6c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800cb6c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800cb70:	b094      	sub	sp, #80	@ 0x50
 800cb72:	af00      	add	r7, sp, #0
 800cb74:	62f8      	str	r0, [r7, #44]	@ 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800cb76:	2300      	movs	r3, #0
 800cb78:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 800cb7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cb7e:	681a      	ldr	r2, [r3, #0]
 800cb80:	4b7e      	ldr	r3, [pc, #504]	@ (800cd7c <UART_SetConfig+0x210>)
 800cb82:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800cb84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cb86:	689a      	ldr	r2, [r3, #8]
 800cb88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cb8a:	691b      	ldr	r3, [r3, #16]
 800cb8c:	431a      	orrs	r2, r3
 800cb8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cb90:	695b      	ldr	r3, [r3, #20]
 800cb92:	431a      	orrs	r2, r3
 800cb94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cb96:	69db      	ldr	r3, [r3, #28]
 800cb98:	4313      	orrs	r3, r2
 800cb9a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800cb9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cb9e:	681b      	ldr	r3, [r3, #0]
 800cba0:	681b      	ldr	r3, [r3, #0]
 800cba2:	4977      	ldr	r1, [pc, #476]	@ (800cd80 <UART_SetConfig+0x214>)
 800cba4:	4019      	ands	r1, r3
 800cba6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cba8:	681a      	ldr	r2, [r3, #0]
 800cbaa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cbac:	430b      	orrs	r3, r1
 800cbae:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800cbb0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cbb2:	681b      	ldr	r3, [r3, #0]
 800cbb4:	685b      	ldr	r3, [r3, #4]
 800cbb6:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800cbba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cbbc:	68d9      	ldr	r1, [r3, #12]
 800cbbe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cbc0:	681a      	ldr	r2, [r3, #0]
 800cbc2:	ea40 0301 	orr.w	r3, r0, r1
 800cbc6:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800cbc8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cbca:	699b      	ldr	r3, [r3, #24]
 800cbcc:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800cbce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cbd0:	681a      	ldr	r2, [r3, #0]
 800cbd2:	4b6a      	ldr	r3, [pc, #424]	@ (800cd7c <UART_SetConfig+0x210>)
 800cbd4:	429a      	cmp	r2, r3
 800cbd6:	d009      	beq.n	800cbec <UART_SetConfig+0x80>
 800cbd8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cbda:	681a      	ldr	r2, [r3, #0]
 800cbdc:	4b69      	ldr	r3, [pc, #420]	@ (800cd84 <UART_SetConfig+0x218>)
 800cbde:	429a      	cmp	r2, r3
 800cbe0:	d004      	beq.n	800cbec <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800cbe2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cbe4:	6a1a      	ldr	r2, [r3, #32]
 800cbe6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cbe8:	4313      	orrs	r3, r2
 800cbea:	64fb      	str	r3, [r7, #76]	@ 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800cbec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cbee:	681b      	ldr	r3, [r3, #0]
 800cbf0:	689b      	ldr	r3, [r3, #8]
 800cbf2:	f023 416e 	bic.w	r1, r3, #3992977408	@ 0xee000000
 800cbf6:	f421 6130 	bic.w	r1, r1, #2816	@ 0xb00
 800cbfa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cbfc:	681a      	ldr	r2, [r3, #0]
 800cbfe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cc00:	430b      	orrs	r3, r1
 800cc02:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800cc04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cc06:	681b      	ldr	r3, [r3, #0]
 800cc08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cc0a:	f023 000f 	bic.w	r0, r3, #15
 800cc0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cc10:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800cc12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cc14:	681a      	ldr	r2, [r3, #0]
 800cc16:	ea40 0301 	orr.w	r3, r0, r1
 800cc1a:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800cc1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cc1e:	681a      	ldr	r2, [r3, #0]
 800cc20:	4b59      	ldr	r3, [pc, #356]	@ (800cd88 <UART_SetConfig+0x21c>)
 800cc22:	429a      	cmp	r2, r3
 800cc24:	d102      	bne.n	800cc2c <UART_SetConfig+0xc0>
 800cc26:	2301      	movs	r3, #1
 800cc28:	64bb      	str	r3, [r7, #72]	@ 0x48
 800cc2a:	e029      	b.n	800cc80 <UART_SetConfig+0x114>
 800cc2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cc2e:	681a      	ldr	r2, [r3, #0]
 800cc30:	4b56      	ldr	r3, [pc, #344]	@ (800cd8c <UART_SetConfig+0x220>)
 800cc32:	429a      	cmp	r2, r3
 800cc34:	d102      	bne.n	800cc3c <UART_SetConfig+0xd0>
 800cc36:	2302      	movs	r3, #2
 800cc38:	64bb      	str	r3, [r7, #72]	@ 0x48
 800cc3a:	e021      	b.n	800cc80 <UART_SetConfig+0x114>
 800cc3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cc3e:	681a      	ldr	r2, [r3, #0]
 800cc40:	4b53      	ldr	r3, [pc, #332]	@ (800cd90 <UART_SetConfig+0x224>)
 800cc42:	429a      	cmp	r2, r3
 800cc44:	d102      	bne.n	800cc4c <UART_SetConfig+0xe0>
 800cc46:	2304      	movs	r3, #4
 800cc48:	64bb      	str	r3, [r7, #72]	@ 0x48
 800cc4a:	e019      	b.n	800cc80 <UART_SetConfig+0x114>
 800cc4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cc4e:	681a      	ldr	r2, [r3, #0]
 800cc50:	4b50      	ldr	r3, [pc, #320]	@ (800cd94 <UART_SetConfig+0x228>)
 800cc52:	429a      	cmp	r2, r3
 800cc54:	d102      	bne.n	800cc5c <UART_SetConfig+0xf0>
 800cc56:	2308      	movs	r3, #8
 800cc58:	64bb      	str	r3, [r7, #72]	@ 0x48
 800cc5a:	e011      	b.n	800cc80 <UART_SetConfig+0x114>
 800cc5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cc5e:	681a      	ldr	r2, [r3, #0]
 800cc60:	4b4d      	ldr	r3, [pc, #308]	@ (800cd98 <UART_SetConfig+0x22c>)
 800cc62:	429a      	cmp	r2, r3
 800cc64:	d102      	bne.n	800cc6c <UART_SetConfig+0x100>
 800cc66:	2310      	movs	r3, #16
 800cc68:	64bb      	str	r3, [r7, #72]	@ 0x48
 800cc6a:	e009      	b.n	800cc80 <UART_SetConfig+0x114>
 800cc6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cc6e:	681a      	ldr	r2, [r3, #0]
 800cc70:	4b42      	ldr	r3, [pc, #264]	@ (800cd7c <UART_SetConfig+0x210>)
 800cc72:	429a      	cmp	r2, r3
 800cc74:	d102      	bne.n	800cc7c <UART_SetConfig+0x110>
 800cc76:	2320      	movs	r3, #32
 800cc78:	64bb      	str	r3, [r7, #72]	@ 0x48
 800cc7a:	e001      	b.n	800cc80 <UART_SetConfig+0x114>
 800cc7c:	2300      	movs	r3, #0
 800cc7e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800cc80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cc82:	681a      	ldr	r2, [r3, #0]
 800cc84:	4b3d      	ldr	r3, [pc, #244]	@ (800cd7c <UART_SetConfig+0x210>)
 800cc86:	429a      	cmp	r2, r3
 800cc88:	d005      	beq.n	800cc96 <UART_SetConfig+0x12a>
 800cc8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cc8c:	681a      	ldr	r2, [r3, #0]
 800cc8e:	4b3d      	ldr	r3, [pc, #244]	@ (800cd84 <UART_SetConfig+0x218>)
 800cc90:	429a      	cmp	r2, r3
 800cc92:	f040 8085 	bne.w	800cda0 <UART_SetConfig+0x234>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800cc96:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800cc98:	2200      	movs	r2, #0
 800cc9a:	623b      	str	r3, [r7, #32]
 800cc9c:	627a      	str	r2, [r7, #36]	@ 0x24
 800cc9e:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800cca2:	f7fc fe99 	bl	80099d8 <HAL_RCCEx_GetPeriphCLKFreq>
 800cca6:	6438      	str	r0, [r7, #64]	@ 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 800cca8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ccaa:	2b00      	cmp	r3, #0
 800ccac:	f000 80e8 	beq.w	800ce80 <UART_SetConfig+0x314>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800ccb0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ccb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ccb4:	4a39      	ldr	r2, [pc, #228]	@ (800cd9c <UART_SetConfig+0x230>)
 800ccb6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ccba:	461a      	mov	r2, r3
 800ccbc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ccbe:	fbb3 f3f2 	udiv	r3, r3, r2
 800ccc2:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800ccc4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ccc6:	685a      	ldr	r2, [r3, #4]
 800ccc8:	4613      	mov	r3, r2
 800ccca:	005b      	lsls	r3, r3, #1
 800cccc:	4413      	add	r3, r2
 800ccce:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800ccd0:	429a      	cmp	r2, r3
 800ccd2:	d305      	bcc.n	800cce0 <UART_SetConfig+0x174>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800ccd4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ccd6:	685b      	ldr	r3, [r3, #4]
 800ccd8:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800ccda:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800ccdc:	429a      	cmp	r2, r3
 800ccde:	d903      	bls.n	800cce8 <UART_SetConfig+0x17c>
      {
        ret = HAL_ERROR;
 800cce0:	2301      	movs	r3, #1
 800cce2:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800cce6:	e048      	b.n	800cd7a <UART_SetConfig+0x20e>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800cce8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ccea:	2200      	movs	r2, #0
 800ccec:	61bb      	str	r3, [r7, #24]
 800ccee:	61fa      	str	r2, [r7, #28]
 800ccf0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ccf2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ccf4:	4a29      	ldr	r2, [pc, #164]	@ (800cd9c <UART_SetConfig+0x230>)
 800ccf6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ccfa:	b29b      	uxth	r3, r3
 800ccfc:	2200      	movs	r2, #0
 800ccfe:	613b      	str	r3, [r7, #16]
 800cd00:	617a      	str	r2, [r7, #20]
 800cd02:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800cd06:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800cd0a:	f7f3 ffa1 	bl	8000c50 <__aeabi_uldivmod>
 800cd0e:	4602      	mov	r2, r0
 800cd10:	460b      	mov	r3, r1
 800cd12:	4610      	mov	r0, r2
 800cd14:	4619      	mov	r1, r3
 800cd16:	f04f 0200 	mov.w	r2, #0
 800cd1a:	f04f 0300 	mov.w	r3, #0
 800cd1e:	020b      	lsls	r3, r1, #8
 800cd20:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800cd24:	0202      	lsls	r2, r0, #8
 800cd26:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800cd28:	6849      	ldr	r1, [r1, #4]
 800cd2a:	0849      	lsrs	r1, r1, #1
 800cd2c:	2000      	movs	r0, #0
 800cd2e:	460c      	mov	r4, r1
 800cd30:	4605      	mov	r5, r0
 800cd32:	eb12 0804 	adds.w	r8, r2, r4
 800cd36:	eb43 0905 	adc.w	r9, r3, r5
 800cd3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cd3c:	685b      	ldr	r3, [r3, #4]
 800cd3e:	2200      	movs	r2, #0
 800cd40:	60bb      	str	r3, [r7, #8]
 800cd42:	60fa      	str	r2, [r7, #12]
 800cd44:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800cd48:	4640      	mov	r0, r8
 800cd4a:	4649      	mov	r1, r9
 800cd4c:	f7f3 ff80 	bl	8000c50 <__aeabi_uldivmod>
 800cd50:	4602      	mov	r2, r0
 800cd52:	460b      	mov	r3, r1
 800cd54:	4613      	mov	r3, r2
 800cd56:	63fb      	str	r3, [r7, #60]	@ 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800cd58:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cd5a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800cd5e:	d308      	bcc.n	800cd72 <UART_SetConfig+0x206>
 800cd60:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cd62:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800cd66:	d204      	bcs.n	800cd72 <UART_SetConfig+0x206>
        {
          huart->Instance->BRR = usartdiv;
 800cd68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cd6a:	681b      	ldr	r3, [r3, #0]
 800cd6c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800cd6e:	60da      	str	r2, [r3, #12]
 800cd70:	e003      	b.n	800cd7a <UART_SetConfig+0x20e>
        }
        else
        {
          ret = HAL_ERROR;
 800cd72:	2301      	movs	r3, #1
 800cd74:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    if (pclk != 0U)
 800cd78:	e082      	b.n	800ce80 <UART_SetConfig+0x314>
 800cd7a:	e081      	b.n	800ce80 <UART_SetConfig+0x314>
 800cd7c:	46002400 	.word	0x46002400
 800cd80:	cfff69f3 	.word	0xcfff69f3
 800cd84:	56002400 	.word	0x56002400
 800cd88:	40013800 	.word	0x40013800
 800cd8c:	40004400 	.word	0x40004400
 800cd90:	40004800 	.word	0x40004800
 800cd94:	40004c00 	.word	0x40004c00
 800cd98:	40005000 	.word	0x40005000
 800cd9c:	08010fd8 	.word	0x08010fd8
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800cda0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cda2:	69db      	ldr	r3, [r3, #28]
 800cda4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800cda8:	d13c      	bne.n	800ce24 <UART_SetConfig+0x2b8>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800cdaa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800cdac:	2200      	movs	r2, #0
 800cdae:	603b      	str	r3, [r7, #0]
 800cdb0:	607a      	str	r2, [r7, #4]
 800cdb2:	e9d7 0100 	ldrd	r0, r1, [r7]
 800cdb6:	f7fc fe0f 	bl	80099d8 <HAL_RCCEx_GetPeriphCLKFreq>
 800cdba:	6438      	str	r0, [r7, #64]	@ 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800cdbc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800cdbe:	2b00      	cmp	r3, #0
 800cdc0:	d05e      	beq.n	800ce80 <UART_SetConfig+0x314>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800cdc2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cdc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cdc6:	4a39      	ldr	r2, [pc, #228]	@ (800ceac <UART_SetConfig+0x340>)
 800cdc8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800cdcc:	461a      	mov	r2, r3
 800cdce:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800cdd0:	fbb3 f3f2 	udiv	r3, r3, r2
 800cdd4:	005a      	lsls	r2, r3, #1
 800cdd6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cdd8:	685b      	ldr	r3, [r3, #4]
 800cdda:	085b      	lsrs	r3, r3, #1
 800cddc:	441a      	add	r2, r3
 800cdde:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cde0:	685b      	ldr	r3, [r3, #4]
 800cde2:	fbb2 f3f3 	udiv	r3, r2, r3
 800cde6:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800cde8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cdea:	2b0f      	cmp	r3, #15
 800cdec:	d916      	bls.n	800ce1c <UART_SetConfig+0x2b0>
 800cdee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cdf0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800cdf4:	d212      	bcs.n	800ce1c <UART_SetConfig+0x2b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800cdf6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cdf8:	b29b      	uxth	r3, r3
 800cdfa:	f023 030f 	bic.w	r3, r3, #15
 800cdfe:	877b      	strh	r3, [r7, #58]	@ 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800ce00:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ce02:	085b      	lsrs	r3, r3, #1
 800ce04:	b29b      	uxth	r3, r3
 800ce06:	f003 0307 	and.w	r3, r3, #7
 800ce0a:	b29a      	uxth	r2, r3
 800ce0c:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800ce0e:	4313      	orrs	r3, r2
 800ce10:	877b      	strh	r3, [r7, #58]	@ 0x3a
        huart->Instance->BRR = brrtemp;
 800ce12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ce14:	681b      	ldr	r3, [r3, #0]
 800ce16:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 800ce18:	60da      	str	r2, [r3, #12]
 800ce1a:	e031      	b.n	800ce80 <UART_SetConfig+0x314>
      }
      else
      {
        ret = HAL_ERROR;
 800ce1c:	2301      	movs	r3, #1
 800ce1e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800ce22:	e02d      	b.n	800ce80 <UART_SetConfig+0x314>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800ce24:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ce26:	2200      	movs	r2, #0
 800ce28:	469a      	mov	sl, r3
 800ce2a:	4693      	mov	fp, r2
 800ce2c:	4650      	mov	r0, sl
 800ce2e:	4659      	mov	r1, fp
 800ce30:	f7fc fdd2 	bl	80099d8 <HAL_RCCEx_GetPeriphCLKFreq>
 800ce34:	6438      	str	r0, [r7, #64]	@ 0x40

    if (pclk != 0U)
 800ce36:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ce38:	2b00      	cmp	r3, #0
 800ce3a:	d021      	beq.n	800ce80 <UART_SetConfig+0x314>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ce3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ce3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ce40:	4a1a      	ldr	r2, [pc, #104]	@ (800ceac <UART_SetConfig+0x340>)
 800ce42:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ce46:	461a      	mov	r2, r3
 800ce48:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ce4a:	fbb3 f2f2 	udiv	r2, r3, r2
 800ce4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ce50:	685b      	ldr	r3, [r3, #4]
 800ce52:	085b      	lsrs	r3, r3, #1
 800ce54:	441a      	add	r2, r3
 800ce56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ce58:	685b      	ldr	r3, [r3, #4]
 800ce5a:	fbb2 f3f3 	udiv	r3, r2, r3
 800ce5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ce60:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ce62:	2b0f      	cmp	r3, #15
 800ce64:	d909      	bls.n	800ce7a <UART_SetConfig+0x30e>
 800ce66:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ce68:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ce6c:	d205      	bcs.n	800ce7a <UART_SetConfig+0x30e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800ce6e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ce70:	b29a      	uxth	r2, r3
 800ce72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ce74:	681b      	ldr	r3, [r3, #0]
 800ce76:	60da      	str	r2, [r3, #12]
 800ce78:	e002      	b.n	800ce80 <UART_SetConfig+0x314>
      }
      else
      {
        ret = HAL_ERROR;
 800ce7a:	2301      	movs	r3, #1
 800ce7c:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800ce80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ce82:	2201      	movs	r2, #1
 800ce84:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800ce88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ce8a:	2201      	movs	r2, #1
 800ce8c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800ce90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ce92:	2200      	movs	r2, #0
 800ce94:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800ce96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ce98:	2200      	movs	r2, #0
 800ce9a:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800ce9c:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 800cea0:	4618      	mov	r0, r3
 800cea2:	3750      	adds	r7, #80	@ 0x50
 800cea4:	46bd      	mov	sp, r7
 800cea6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800ceaa:	bf00      	nop
 800ceac:	08010fd8 	.word	0x08010fd8

0800ceb0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800ceb0:	b480      	push	{r7}
 800ceb2:	b083      	sub	sp, #12
 800ceb4:	af00      	add	r7, sp, #0
 800ceb6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800ceb8:	687b      	ldr	r3, [r7, #4]
 800ceba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cebc:	f003 0308 	and.w	r3, r3, #8
 800cec0:	2b00      	cmp	r3, #0
 800cec2:	d00a      	beq.n	800ceda <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800cec4:	687b      	ldr	r3, [r7, #4]
 800cec6:	681b      	ldr	r3, [r3, #0]
 800cec8:	685b      	ldr	r3, [r3, #4]
 800ceca:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800cece:	687b      	ldr	r3, [r7, #4]
 800ced0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ced2:	687b      	ldr	r3, [r7, #4]
 800ced4:	681b      	ldr	r3, [r3, #0]
 800ced6:	430a      	orrs	r2, r1
 800ced8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800ceda:	687b      	ldr	r3, [r7, #4]
 800cedc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cede:	f003 0301 	and.w	r3, r3, #1
 800cee2:	2b00      	cmp	r3, #0
 800cee4:	d00a      	beq.n	800cefc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800cee6:	687b      	ldr	r3, [r7, #4]
 800cee8:	681b      	ldr	r3, [r3, #0]
 800ceea:	685b      	ldr	r3, [r3, #4]
 800ceec:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800cef0:	687b      	ldr	r3, [r7, #4]
 800cef2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cef4:	687b      	ldr	r3, [r7, #4]
 800cef6:	681b      	ldr	r3, [r3, #0]
 800cef8:	430a      	orrs	r2, r1
 800cefa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800cefc:	687b      	ldr	r3, [r7, #4]
 800cefe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cf00:	f003 0302 	and.w	r3, r3, #2
 800cf04:	2b00      	cmp	r3, #0
 800cf06:	d00a      	beq.n	800cf1e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800cf08:	687b      	ldr	r3, [r7, #4]
 800cf0a:	681b      	ldr	r3, [r3, #0]
 800cf0c:	685b      	ldr	r3, [r3, #4]
 800cf0e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800cf12:	687b      	ldr	r3, [r7, #4]
 800cf14:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800cf16:	687b      	ldr	r3, [r7, #4]
 800cf18:	681b      	ldr	r3, [r3, #0]
 800cf1a:	430a      	orrs	r2, r1
 800cf1c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800cf1e:	687b      	ldr	r3, [r7, #4]
 800cf20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cf22:	f003 0304 	and.w	r3, r3, #4
 800cf26:	2b00      	cmp	r3, #0
 800cf28:	d00a      	beq.n	800cf40 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800cf2a:	687b      	ldr	r3, [r7, #4]
 800cf2c:	681b      	ldr	r3, [r3, #0]
 800cf2e:	685b      	ldr	r3, [r3, #4]
 800cf30:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800cf34:	687b      	ldr	r3, [r7, #4]
 800cf36:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800cf38:	687b      	ldr	r3, [r7, #4]
 800cf3a:	681b      	ldr	r3, [r3, #0]
 800cf3c:	430a      	orrs	r2, r1
 800cf3e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800cf40:	687b      	ldr	r3, [r7, #4]
 800cf42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cf44:	f003 0310 	and.w	r3, r3, #16
 800cf48:	2b00      	cmp	r3, #0
 800cf4a:	d00a      	beq.n	800cf62 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800cf4c:	687b      	ldr	r3, [r7, #4]
 800cf4e:	681b      	ldr	r3, [r3, #0]
 800cf50:	689b      	ldr	r3, [r3, #8]
 800cf52:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800cf56:	687b      	ldr	r3, [r7, #4]
 800cf58:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800cf5a:	687b      	ldr	r3, [r7, #4]
 800cf5c:	681b      	ldr	r3, [r3, #0]
 800cf5e:	430a      	orrs	r2, r1
 800cf60:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800cf62:	687b      	ldr	r3, [r7, #4]
 800cf64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cf66:	f003 0320 	and.w	r3, r3, #32
 800cf6a:	2b00      	cmp	r3, #0
 800cf6c:	d00a      	beq.n	800cf84 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800cf6e:	687b      	ldr	r3, [r7, #4]
 800cf70:	681b      	ldr	r3, [r3, #0]
 800cf72:	689b      	ldr	r3, [r3, #8]
 800cf74:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800cf78:	687b      	ldr	r3, [r7, #4]
 800cf7a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800cf7c:	687b      	ldr	r3, [r7, #4]
 800cf7e:	681b      	ldr	r3, [r3, #0]
 800cf80:	430a      	orrs	r2, r1
 800cf82:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800cf84:	687b      	ldr	r3, [r7, #4]
 800cf86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cf88:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cf8c:	2b00      	cmp	r3, #0
 800cf8e:	d01a      	beq.n	800cfc6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800cf90:	687b      	ldr	r3, [r7, #4]
 800cf92:	681b      	ldr	r3, [r3, #0]
 800cf94:	685b      	ldr	r3, [r3, #4]
 800cf96:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800cf9a:	687b      	ldr	r3, [r7, #4]
 800cf9c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800cf9e:	687b      	ldr	r3, [r7, #4]
 800cfa0:	681b      	ldr	r3, [r3, #0]
 800cfa2:	430a      	orrs	r2, r1
 800cfa4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800cfa6:	687b      	ldr	r3, [r7, #4]
 800cfa8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cfaa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800cfae:	d10a      	bne.n	800cfc6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800cfb0:	687b      	ldr	r3, [r7, #4]
 800cfb2:	681b      	ldr	r3, [r3, #0]
 800cfb4:	685b      	ldr	r3, [r3, #4]
 800cfb6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800cfba:	687b      	ldr	r3, [r7, #4]
 800cfbc:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800cfbe:	687b      	ldr	r3, [r7, #4]
 800cfc0:	681b      	ldr	r3, [r3, #0]
 800cfc2:	430a      	orrs	r2, r1
 800cfc4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800cfc6:	687b      	ldr	r3, [r7, #4]
 800cfc8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cfca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800cfce:	2b00      	cmp	r3, #0
 800cfd0:	d00a      	beq.n	800cfe8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800cfd2:	687b      	ldr	r3, [r7, #4]
 800cfd4:	681b      	ldr	r3, [r3, #0]
 800cfd6:	685b      	ldr	r3, [r3, #4]
 800cfd8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800cfdc:	687b      	ldr	r3, [r7, #4]
 800cfde:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800cfe0:	687b      	ldr	r3, [r7, #4]
 800cfe2:	681b      	ldr	r3, [r3, #0]
 800cfe4:	430a      	orrs	r2, r1
 800cfe6:	605a      	str	r2, [r3, #4]
  }
}
 800cfe8:	bf00      	nop
 800cfea:	370c      	adds	r7, #12
 800cfec:	46bd      	mov	sp, r7
 800cfee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cff2:	4770      	bx	lr

0800cff4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800cff4:	b580      	push	{r7, lr}
 800cff6:	b098      	sub	sp, #96	@ 0x60
 800cff8:	af02      	add	r7, sp, #8
 800cffa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cffc:	687b      	ldr	r3, [r7, #4]
 800cffe:	2200      	movs	r2, #0
 800d000:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800d004:	f7f7 fe92 	bl	8004d2c <HAL_GetTick>
 800d008:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800d00a:	687b      	ldr	r3, [r7, #4]
 800d00c:	681b      	ldr	r3, [r3, #0]
 800d00e:	681b      	ldr	r3, [r3, #0]
 800d010:	f003 0308 	and.w	r3, r3, #8
 800d014:	2b08      	cmp	r3, #8
 800d016:	d12f      	bne.n	800d078 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d018:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800d01c:	9300      	str	r3, [sp, #0]
 800d01e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d020:	2200      	movs	r2, #0
 800d022:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800d026:	6878      	ldr	r0, [r7, #4]
 800d028:	f000 f88e 	bl	800d148 <UART_WaitOnFlagUntilTimeout>
 800d02c:	4603      	mov	r3, r0
 800d02e:	2b00      	cmp	r3, #0
 800d030:	d022      	beq.n	800d078 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800d032:	687b      	ldr	r3, [r7, #4]
 800d034:	681b      	ldr	r3, [r3, #0]
 800d036:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d038:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d03a:	e853 3f00 	ldrex	r3, [r3]
 800d03e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800d040:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d042:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800d046:	653b      	str	r3, [r7, #80]	@ 0x50
 800d048:	687b      	ldr	r3, [r7, #4]
 800d04a:	681b      	ldr	r3, [r3, #0]
 800d04c:	461a      	mov	r2, r3
 800d04e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d050:	647b      	str	r3, [r7, #68]	@ 0x44
 800d052:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d054:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800d056:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800d058:	e841 2300 	strex	r3, r2, [r1]
 800d05c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800d05e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d060:	2b00      	cmp	r3, #0
 800d062:	d1e6      	bne.n	800d032 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800d064:	687b      	ldr	r3, [r7, #4]
 800d066:	2220      	movs	r2, #32
 800d068:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800d06c:	687b      	ldr	r3, [r7, #4]
 800d06e:	2200      	movs	r2, #0
 800d070:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d074:	2303      	movs	r3, #3
 800d076:	e063      	b.n	800d140 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800d078:	687b      	ldr	r3, [r7, #4]
 800d07a:	681b      	ldr	r3, [r3, #0]
 800d07c:	681b      	ldr	r3, [r3, #0]
 800d07e:	f003 0304 	and.w	r3, r3, #4
 800d082:	2b04      	cmp	r3, #4
 800d084:	d149      	bne.n	800d11a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d086:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800d08a:	9300      	str	r3, [sp, #0]
 800d08c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d08e:	2200      	movs	r2, #0
 800d090:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800d094:	6878      	ldr	r0, [r7, #4]
 800d096:	f000 f857 	bl	800d148 <UART_WaitOnFlagUntilTimeout>
 800d09a:	4603      	mov	r3, r0
 800d09c:	2b00      	cmp	r3, #0
 800d09e:	d03c      	beq.n	800d11a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d0a0:	687b      	ldr	r3, [r7, #4]
 800d0a2:	681b      	ldr	r3, [r3, #0]
 800d0a4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d0a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d0a8:	e853 3f00 	ldrex	r3, [r3]
 800d0ac:	623b      	str	r3, [r7, #32]
   return(result);
 800d0ae:	6a3b      	ldr	r3, [r7, #32]
 800d0b0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800d0b4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800d0b6:	687b      	ldr	r3, [r7, #4]
 800d0b8:	681b      	ldr	r3, [r3, #0]
 800d0ba:	461a      	mov	r2, r3
 800d0bc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d0be:	633b      	str	r3, [r7, #48]	@ 0x30
 800d0c0:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d0c2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800d0c4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d0c6:	e841 2300 	strex	r3, r2, [r1]
 800d0ca:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800d0cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d0ce:	2b00      	cmp	r3, #0
 800d0d0:	d1e6      	bne.n	800d0a0 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d0d2:	687b      	ldr	r3, [r7, #4]
 800d0d4:	681b      	ldr	r3, [r3, #0]
 800d0d6:	3308      	adds	r3, #8
 800d0d8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d0da:	693b      	ldr	r3, [r7, #16]
 800d0dc:	e853 3f00 	ldrex	r3, [r3]
 800d0e0:	60fb      	str	r3, [r7, #12]
   return(result);
 800d0e2:	68fb      	ldr	r3, [r7, #12]
 800d0e4:	f023 0301 	bic.w	r3, r3, #1
 800d0e8:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d0ea:	687b      	ldr	r3, [r7, #4]
 800d0ec:	681b      	ldr	r3, [r3, #0]
 800d0ee:	3308      	adds	r3, #8
 800d0f0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800d0f2:	61fa      	str	r2, [r7, #28]
 800d0f4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d0f6:	69b9      	ldr	r1, [r7, #24]
 800d0f8:	69fa      	ldr	r2, [r7, #28]
 800d0fa:	e841 2300 	strex	r3, r2, [r1]
 800d0fe:	617b      	str	r3, [r7, #20]
   return(result);
 800d100:	697b      	ldr	r3, [r7, #20]
 800d102:	2b00      	cmp	r3, #0
 800d104:	d1e5      	bne.n	800d0d2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800d106:	687b      	ldr	r3, [r7, #4]
 800d108:	2220      	movs	r2, #32
 800d10a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800d10e:	687b      	ldr	r3, [r7, #4]
 800d110:	2200      	movs	r2, #0
 800d112:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d116:	2303      	movs	r3, #3
 800d118:	e012      	b.n	800d140 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800d11a:	687b      	ldr	r3, [r7, #4]
 800d11c:	2220      	movs	r2, #32
 800d11e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800d122:	687b      	ldr	r3, [r7, #4]
 800d124:	2220      	movs	r2, #32
 800d126:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d12a:	687b      	ldr	r3, [r7, #4]
 800d12c:	2200      	movs	r2, #0
 800d12e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800d130:	687b      	ldr	r3, [r7, #4]
 800d132:	2200      	movs	r2, #0
 800d134:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800d136:	687b      	ldr	r3, [r7, #4]
 800d138:	2200      	movs	r2, #0
 800d13a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800d13e:	2300      	movs	r3, #0
}
 800d140:	4618      	mov	r0, r3
 800d142:	3758      	adds	r7, #88	@ 0x58
 800d144:	46bd      	mov	sp, r7
 800d146:	bd80      	pop	{r7, pc}

0800d148 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800d148:	b580      	push	{r7, lr}
 800d14a:	b084      	sub	sp, #16
 800d14c:	af00      	add	r7, sp, #0
 800d14e:	60f8      	str	r0, [r7, #12]
 800d150:	60b9      	str	r1, [r7, #8]
 800d152:	603b      	str	r3, [r7, #0]
 800d154:	4613      	mov	r3, r2
 800d156:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d158:	e04f      	b.n	800d1fa <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800d15a:	69bb      	ldr	r3, [r7, #24]
 800d15c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800d160:	d04b      	beq.n	800d1fa <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d162:	f7f7 fde3 	bl	8004d2c <HAL_GetTick>
 800d166:	4602      	mov	r2, r0
 800d168:	683b      	ldr	r3, [r7, #0]
 800d16a:	1ad3      	subs	r3, r2, r3
 800d16c:	69ba      	ldr	r2, [r7, #24]
 800d16e:	429a      	cmp	r2, r3
 800d170:	d302      	bcc.n	800d178 <UART_WaitOnFlagUntilTimeout+0x30>
 800d172:	69bb      	ldr	r3, [r7, #24]
 800d174:	2b00      	cmp	r3, #0
 800d176:	d101      	bne.n	800d17c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800d178:	2303      	movs	r3, #3
 800d17a:	e04e      	b.n	800d21a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800d17c:	68fb      	ldr	r3, [r7, #12]
 800d17e:	681b      	ldr	r3, [r3, #0]
 800d180:	681b      	ldr	r3, [r3, #0]
 800d182:	f003 0304 	and.w	r3, r3, #4
 800d186:	2b00      	cmp	r3, #0
 800d188:	d037      	beq.n	800d1fa <UART_WaitOnFlagUntilTimeout+0xb2>
 800d18a:	68bb      	ldr	r3, [r7, #8]
 800d18c:	2b80      	cmp	r3, #128	@ 0x80
 800d18e:	d034      	beq.n	800d1fa <UART_WaitOnFlagUntilTimeout+0xb2>
 800d190:	68bb      	ldr	r3, [r7, #8]
 800d192:	2b40      	cmp	r3, #64	@ 0x40
 800d194:	d031      	beq.n	800d1fa <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800d196:	68fb      	ldr	r3, [r7, #12]
 800d198:	681b      	ldr	r3, [r3, #0]
 800d19a:	69db      	ldr	r3, [r3, #28]
 800d19c:	f003 0308 	and.w	r3, r3, #8
 800d1a0:	2b08      	cmp	r3, #8
 800d1a2:	d110      	bne.n	800d1c6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800d1a4:	68fb      	ldr	r3, [r7, #12]
 800d1a6:	681b      	ldr	r3, [r3, #0]
 800d1a8:	2208      	movs	r2, #8
 800d1aa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800d1ac:	68f8      	ldr	r0, [r7, #12]
 800d1ae:	f000 f838 	bl	800d222 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800d1b2:	68fb      	ldr	r3, [r7, #12]
 800d1b4:	2208      	movs	r2, #8
 800d1b6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800d1ba:	68fb      	ldr	r3, [r7, #12]
 800d1bc:	2200      	movs	r2, #0
 800d1be:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800d1c2:	2301      	movs	r3, #1
 800d1c4:	e029      	b.n	800d21a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800d1c6:	68fb      	ldr	r3, [r7, #12]
 800d1c8:	681b      	ldr	r3, [r3, #0]
 800d1ca:	69db      	ldr	r3, [r3, #28]
 800d1cc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800d1d0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800d1d4:	d111      	bne.n	800d1fa <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800d1d6:	68fb      	ldr	r3, [r7, #12]
 800d1d8:	681b      	ldr	r3, [r3, #0]
 800d1da:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800d1de:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800d1e0:	68f8      	ldr	r0, [r7, #12]
 800d1e2:	f000 f81e 	bl	800d222 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800d1e6:	68fb      	ldr	r3, [r7, #12]
 800d1e8:	2220      	movs	r2, #32
 800d1ea:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800d1ee:	68fb      	ldr	r3, [r7, #12]
 800d1f0:	2200      	movs	r2, #0
 800d1f2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800d1f6:	2303      	movs	r3, #3
 800d1f8:	e00f      	b.n	800d21a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d1fa:	68fb      	ldr	r3, [r7, #12]
 800d1fc:	681b      	ldr	r3, [r3, #0]
 800d1fe:	69da      	ldr	r2, [r3, #28]
 800d200:	68bb      	ldr	r3, [r7, #8]
 800d202:	4013      	ands	r3, r2
 800d204:	68ba      	ldr	r2, [r7, #8]
 800d206:	429a      	cmp	r2, r3
 800d208:	bf0c      	ite	eq
 800d20a:	2301      	moveq	r3, #1
 800d20c:	2300      	movne	r3, #0
 800d20e:	b2db      	uxtb	r3, r3
 800d210:	461a      	mov	r2, r3
 800d212:	79fb      	ldrb	r3, [r7, #7]
 800d214:	429a      	cmp	r2, r3
 800d216:	d0a0      	beq.n	800d15a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800d218:	2300      	movs	r3, #0
}
 800d21a:	4618      	mov	r0, r3
 800d21c:	3710      	adds	r7, #16
 800d21e:	46bd      	mov	sp, r7
 800d220:	bd80      	pop	{r7, pc}

0800d222 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800d222:	b480      	push	{r7}
 800d224:	b095      	sub	sp, #84	@ 0x54
 800d226:	af00      	add	r7, sp, #0
 800d228:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d22a:	687b      	ldr	r3, [r7, #4]
 800d22c:	681b      	ldr	r3, [r3, #0]
 800d22e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d230:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d232:	e853 3f00 	ldrex	r3, [r3]
 800d236:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800d238:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d23a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800d23e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800d240:	687b      	ldr	r3, [r7, #4]
 800d242:	681b      	ldr	r3, [r3, #0]
 800d244:	461a      	mov	r2, r3
 800d246:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d248:	643b      	str	r3, [r7, #64]	@ 0x40
 800d24a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d24c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800d24e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800d250:	e841 2300 	strex	r3, r2, [r1]
 800d254:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800d256:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d258:	2b00      	cmp	r3, #0
 800d25a:	d1e6      	bne.n	800d22a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800d25c:	687b      	ldr	r3, [r7, #4]
 800d25e:	681b      	ldr	r3, [r3, #0]
 800d260:	3308      	adds	r3, #8
 800d262:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d264:	6a3b      	ldr	r3, [r7, #32]
 800d266:	e853 3f00 	ldrex	r3, [r3]
 800d26a:	61fb      	str	r3, [r7, #28]
   return(result);
 800d26c:	69fb      	ldr	r3, [r7, #28]
 800d26e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800d272:	f023 0301 	bic.w	r3, r3, #1
 800d276:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d278:	687b      	ldr	r3, [r7, #4]
 800d27a:	681b      	ldr	r3, [r3, #0]
 800d27c:	3308      	adds	r3, #8
 800d27e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800d280:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800d282:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d284:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800d286:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d288:	e841 2300 	strex	r3, r2, [r1]
 800d28c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800d28e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d290:	2b00      	cmp	r3, #0
 800d292:	d1e3      	bne.n	800d25c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d294:	687b      	ldr	r3, [r7, #4]
 800d296:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d298:	2b01      	cmp	r3, #1
 800d29a:	d118      	bne.n	800d2ce <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d29c:	687b      	ldr	r3, [r7, #4]
 800d29e:	681b      	ldr	r3, [r3, #0]
 800d2a0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d2a2:	68fb      	ldr	r3, [r7, #12]
 800d2a4:	e853 3f00 	ldrex	r3, [r3]
 800d2a8:	60bb      	str	r3, [r7, #8]
   return(result);
 800d2aa:	68bb      	ldr	r3, [r7, #8]
 800d2ac:	f023 0310 	bic.w	r3, r3, #16
 800d2b0:	647b      	str	r3, [r7, #68]	@ 0x44
 800d2b2:	687b      	ldr	r3, [r7, #4]
 800d2b4:	681b      	ldr	r3, [r3, #0]
 800d2b6:	461a      	mov	r2, r3
 800d2b8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d2ba:	61bb      	str	r3, [r7, #24]
 800d2bc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d2be:	6979      	ldr	r1, [r7, #20]
 800d2c0:	69ba      	ldr	r2, [r7, #24]
 800d2c2:	e841 2300 	strex	r3, r2, [r1]
 800d2c6:	613b      	str	r3, [r7, #16]
   return(result);
 800d2c8:	693b      	ldr	r3, [r7, #16]
 800d2ca:	2b00      	cmp	r3, #0
 800d2cc:	d1e6      	bne.n	800d29c <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800d2ce:	687b      	ldr	r3, [r7, #4]
 800d2d0:	2220      	movs	r2, #32
 800d2d2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d2d6:	687b      	ldr	r3, [r7, #4]
 800d2d8:	2200      	movs	r2, #0
 800d2da:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800d2dc:	687b      	ldr	r3, [r7, #4]
 800d2de:	2200      	movs	r2, #0
 800d2e0:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800d2e2:	bf00      	nop
 800d2e4:	3754      	adds	r7, #84	@ 0x54
 800d2e6:	46bd      	mov	sp, r7
 800d2e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2ec:	4770      	bx	lr

0800d2ee <__cvt>:
 800d2ee:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d2f2:	ec57 6b10 	vmov	r6, r7, d0
 800d2f6:	2f00      	cmp	r7, #0
 800d2f8:	460c      	mov	r4, r1
 800d2fa:	4619      	mov	r1, r3
 800d2fc:	463b      	mov	r3, r7
 800d2fe:	bfb4      	ite	lt
 800d300:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800d304:	2300      	movge	r3, #0
 800d306:	4691      	mov	r9, r2
 800d308:	bfbf      	itttt	lt
 800d30a:	4632      	movlt	r2, r6
 800d30c:	461f      	movlt	r7, r3
 800d30e:	232d      	movlt	r3, #45	@ 0x2d
 800d310:	4616      	movlt	r6, r2
 800d312:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800d316:	700b      	strb	r3, [r1, #0]
 800d318:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800d31a:	f023 0820 	bic.w	r8, r3, #32
 800d31e:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800d322:	d005      	beq.n	800d330 <__cvt+0x42>
 800d324:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800d328:	d100      	bne.n	800d32c <__cvt+0x3e>
 800d32a:	3401      	adds	r4, #1
 800d32c:	2102      	movs	r1, #2
 800d32e:	e000      	b.n	800d332 <__cvt+0x44>
 800d330:	2103      	movs	r1, #3
 800d332:	ab03      	add	r3, sp, #12
 800d334:	4622      	mov	r2, r4
 800d336:	9301      	str	r3, [sp, #4]
 800d338:	ab02      	add	r3, sp, #8
 800d33a:	ec47 6b10 	vmov	d0, r6, r7
 800d33e:	9300      	str	r3, [sp, #0]
 800d340:	4653      	mov	r3, sl
 800d342:	f000 fe6d 	bl	800e020 <_dtoa_r>
 800d346:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800d34a:	4605      	mov	r5, r0
 800d34c:	d119      	bne.n	800d382 <__cvt+0x94>
 800d34e:	f019 0f01 	tst.w	r9, #1
 800d352:	d00e      	beq.n	800d372 <__cvt+0x84>
 800d354:	eb00 0904 	add.w	r9, r0, r4
 800d358:	2200      	movs	r2, #0
 800d35a:	2300      	movs	r3, #0
 800d35c:	4630      	mov	r0, r6
 800d35e:	4639      	mov	r1, r7
 800d360:	f7f3 fbb6 	bl	8000ad0 <__aeabi_dcmpeq>
 800d364:	b108      	cbz	r0, 800d36a <__cvt+0x7c>
 800d366:	f8cd 900c 	str.w	r9, [sp, #12]
 800d36a:	2230      	movs	r2, #48	@ 0x30
 800d36c:	9b03      	ldr	r3, [sp, #12]
 800d36e:	454b      	cmp	r3, r9
 800d370:	d31e      	bcc.n	800d3b0 <__cvt+0xc2>
 800d372:	9b03      	ldr	r3, [sp, #12]
 800d374:	4628      	mov	r0, r5
 800d376:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d378:	1b5b      	subs	r3, r3, r5
 800d37a:	6013      	str	r3, [r2, #0]
 800d37c:	b004      	add	sp, #16
 800d37e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d382:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800d386:	eb00 0904 	add.w	r9, r0, r4
 800d38a:	d1e5      	bne.n	800d358 <__cvt+0x6a>
 800d38c:	7803      	ldrb	r3, [r0, #0]
 800d38e:	2b30      	cmp	r3, #48	@ 0x30
 800d390:	d10a      	bne.n	800d3a8 <__cvt+0xba>
 800d392:	2200      	movs	r2, #0
 800d394:	2300      	movs	r3, #0
 800d396:	4630      	mov	r0, r6
 800d398:	4639      	mov	r1, r7
 800d39a:	f7f3 fb99 	bl	8000ad0 <__aeabi_dcmpeq>
 800d39e:	b918      	cbnz	r0, 800d3a8 <__cvt+0xba>
 800d3a0:	f1c4 0401 	rsb	r4, r4, #1
 800d3a4:	f8ca 4000 	str.w	r4, [sl]
 800d3a8:	f8da 3000 	ldr.w	r3, [sl]
 800d3ac:	4499      	add	r9, r3
 800d3ae:	e7d3      	b.n	800d358 <__cvt+0x6a>
 800d3b0:	1c59      	adds	r1, r3, #1
 800d3b2:	9103      	str	r1, [sp, #12]
 800d3b4:	701a      	strb	r2, [r3, #0]
 800d3b6:	e7d9      	b.n	800d36c <__cvt+0x7e>

0800d3b8 <__exponent>:
 800d3b8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d3ba:	2900      	cmp	r1, #0
 800d3bc:	7002      	strb	r2, [r0, #0]
 800d3be:	bfba      	itte	lt
 800d3c0:	4249      	neglt	r1, r1
 800d3c2:	232d      	movlt	r3, #45	@ 0x2d
 800d3c4:	232b      	movge	r3, #43	@ 0x2b
 800d3c6:	2909      	cmp	r1, #9
 800d3c8:	7043      	strb	r3, [r0, #1]
 800d3ca:	dd28      	ble.n	800d41e <__exponent+0x66>
 800d3cc:	f10d 0307 	add.w	r3, sp, #7
 800d3d0:	270a      	movs	r7, #10
 800d3d2:	461d      	mov	r5, r3
 800d3d4:	461a      	mov	r2, r3
 800d3d6:	3b01      	subs	r3, #1
 800d3d8:	fbb1 f6f7 	udiv	r6, r1, r7
 800d3dc:	fb07 1416 	mls	r4, r7, r6, r1
 800d3e0:	3430      	adds	r4, #48	@ 0x30
 800d3e2:	f802 4c01 	strb.w	r4, [r2, #-1]
 800d3e6:	460c      	mov	r4, r1
 800d3e8:	4631      	mov	r1, r6
 800d3ea:	2c63      	cmp	r4, #99	@ 0x63
 800d3ec:	dcf2      	bgt.n	800d3d4 <__exponent+0x1c>
 800d3ee:	3130      	adds	r1, #48	@ 0x30
 800d3f0:	1e94      	subs	r4, r2, #2
 800d3f2:	f803 1c01 	strb.w	r1, [r3, #-1]
 800d3f6:	1c41      	adds	r1, r0, #1
 800d3f8:	4623      	mov	r3, r4
 800d3fa:	42ab      	cmp	r3, r5
 800d3fc:	d30a      	bcc.n	800d414 <__exponent+0x5c>
 800d3fe:	f10d 0309 	add.w	r3, sp, #9
 800d402:	1a9b      	subs	r3, r3, r2
 800d404:	42ac      	cmp	r4, r5
 800d406:	bf88      	it	hi
 800d408:	2300      	movhi	r3, #0
 800d40a:	3302      	adds	r3, #2
 800d40c:	4403      	add	r3, r0
 800d40e:	1a18      	subs	r0, r3, r0
 800d410:	b003      	add	sp, #12
 800d412:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d414:	f813 6b01 	ldrb.w	r6, [r3], #1
 800d418:	f801 6f01 	strb.w	r6, [r1, #1]!
 800d41c:	e7ed      	b.n	800d3fa <__exponent+0x42>
 800d41e:	2330      	movs	r3, #48	@ 0x30
 800d420:	3130      	adds	r1, #48	@ 0x30
 800d422:	7083      	strb	r3, [r0, #2]
 800d424:	1d03      	adds	r3, r0, #4
 800d426:	70c1      	strb	r1, [r0, #3]
 800d428:	e7f1      	b.n	800d40e <__exponent+0x56>
	...

0800d42c <_printf_float>:
 800d42c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d430:	b08d      	sub	sp, #52	@ 0x34
 800d432:	460c      	mov	r4, r1
 800d434:	4616      	mov	r6, r2
 800d436:	461f      	mov	r7, r3
 800d438:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800d43c:	4605      	mov	r5, r0
 800d43e:	f000 fd4d 	bl	800dedc <_localeconv_r>
 800d442:	6803      	ldr	r3, [r0, #0]
 800d444:	4618      	mov	r0, r3
 800d446:	9304      	str	r3, [sp, #16]
 800d448:	f7f2 ff16 	bl	8000278 <strlen>
 800d44c:	2300      	movs	r3, #0
 800d44e:	9005      	str	r0, [sp, #20]
 800d450:	930a      	str	r3, [sp, #40]	@ 0x28
 800d452:	f8d8 3000 	ldr.w	r3, [r8]
 800d456:	f894 a018 	ldrb.w	sl, [r4, #24]
 800d45a:	3307      	adds	r3, #7
 800d45c:	f8d4 b000 	ldr.w	fp, [r4]
 800d460:	f023 0307 	bic.w	r3, r3, #7
 800d464:	f103 0208 	add.w	r2, r3, #8
 800d468:	f8c8 2000 	str.w	r2, [r8]
 800d46c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800d470:	e9d3 8900 	ldrd	r8, r9, [r3]
 800d474:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800d478:	f8cd 8018 	str.w	r8, [sp, #24]
 800d47c:	9307      	str	r3, [sp, #28]
 800d47e:	4b9d      	ldr	r3, [pc, #628]	@ (800d6f4 <_printf_float+0x2c8>)
 800d480:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d484:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800d488:	f7f3 fb54 	bl	8000b34 <__aeabi_dcmpun>
 800d48c:	bb70      	cbnz	r0, 800d4ec <_printf_float+0xc0>
 800d48e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800d492:	4b98      	ldr	r3, [pc, #608]	@ (800d6f4 <_printf_float+0x2c8>)
 800d494:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d498:	f7f3 fb2e 	bl	8000af8 <__aeabi_dcmple>
 800d49c:	bb30      	cbnz	r0, 800d4ec <_printf_float+0xc0>
 800d49e:	2200      	movs	r2, #0
 800d4a0:	2300      	movs	r3, #0
 800d4a2:	4640      	mov	r0, r8
 800d4a4:	4649      	mov	r1, r9
 800d4a6:	f7f3 fb1d 	bl	8000ae4 <__aeabi_dcmplt>
 800d4aa:	b110      	cbz	r0, 800d4b2 <_printf_float+0x86>
 800d4ac:	232d      	movs	r3, #45	@ 0x2d
 800d4ae:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d4b2:	4a91      	ldr	r2, [pc, #580]	@ (800d6f8 <_printf_float+0x2cc>)
 800d4b4:	4b91      	ldr	r3, [pc, #580]	@ (800d6fc <_printf_float+0x2d0>)
 800d4b6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800d4ba:	bf8c      	ite	hi
 800d4bc:	4690      	movhi	r8, r2
 800d4be:	4698      	movls	r8, r3
 800d4c0:	2303      	movs	r3, #3
 800d4c2:	f04f 0900 	mov.w	r9, #0
 800d4c6:	6123      	str	r3, [r4, #16]
 800d4c8:	f02b 0304 	bic.w	r3, fp, #4
 800d4cc:	6023      	str	r3, [r4, #0]
 800d4ce:	4633      	mov	r3, r6
 800d4d0:	aa0b      	add	r2, sp, #44	@ 0x2c
 800d4d2:	4621      	mov	r1, r4
 800d4d4:	4628      	mov	r0, r5
 800d4d6:	9700      	str	r7, [sp, #0]
 800d4d8:	f000 f9d2 	bl	800d880 <_printf_common>
 800d4dc:	3001      	adds	r0, #1
 800d4de:	f040 808d 	bne.w	800d5fc <_printf_float+0x1d0>
 800d4e2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800d4e6:	b00d      	add	sp, #52	@ 0x34
 800d4e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d4ec:	4642      	mov	r2, r8
 800d4ee:	464b      	mov	r3, r9
 800d4f0:	4640      	mov	r0, r8
 800d4f2:	4649      	mov	r1, r9
 800d4f4:	f7f3 fb1e 	bl	8000b34 <__aeabi_dcmpun>
 800d4f8:	b140      	cbz	r0, 800d50c <_printf_float+0xe0>
 800d4fa:	464b      	mov	r3, r9
 800d4fc:	4a80      	ldr	r2, [pc, #512]	@ (800d700 <_printf_float+0x2d4>)
 800d4fe:	2b00      	cmp	r3, #0
 800d500:	bfbc      	itt	lt
 800d502:	232d      	movlt	r3, #45	@ 0x2d
 800d504:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800d508:	4b7e      	ldr	r3, [pc, #504]	@ (800d704 <_printf_float+0x2d8>)
 800d50a:	e7d4      	b.n	800d4b6 <_printf_float+0x8a>
 800d50c:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800d510:	6863      	ldr	r3, [r4, #4]
 800d512:	9206      	str	r2, [sp, #24]
 800d514:	1c5a      	adds	r2, r3, #1
 800d516:	d13b      	bne.n	800d590 <_printf_float+0x164>
 800d518:	2306      	movs	r3, #6
 800d51a:	6063      	str	r3, [r4, #4]
 800d51c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800d520:	2300      	movs	r3, #0
 800d522:	4628      	mov	r0, r5
 800d524:	6022      	str	r2, [r4, #0]
 800d526:	9303      	str	r3, [sp, #12]
 800d528:	ab0a      	add	r3, sp, #40	@ 0x28
 800d52a:	e9cd a301 	strd	sl, r3, [sp, #4]
 800d52e:	ab09      	add	r3, sp, #36	@ 0x24
 800d530:	ec49 8b10 	vmov	d0, r8, r9
 800d534:	9300      	str	r3, [sp, #0]
 800d536:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800d53a:	6861      	ldr	r1, [r4, #4]
 800d53c:	f7ff fed7 	bl	800d2ee <__cvt>
 800d540:	9b06      	ldr	r3, [sp, #24]
 800d542:	4680      	mov	r8, r0
 800d544:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800d546:	2b47      	cmp	r3, #71	@ 0x47
 800d548:	d129      	bne.n	800d59e <_printf_float+0x172>
 800d54a:	1cc8      	adds	r0, r1, #3
 800d54c:	db02      	blt.n	800d554 <_printf_float+0x128>
 800d54e:	6863      	ldr	r3, [r4, #4]
 800d550:	4299      	cmp	r1, r3
 800d552:	dd41      	ble.n	800d5d8 <_printf_float+0x1ac>
 800d554:	f1aa 0a02 	sub.w	sl, sl, #2
 800d558:	fa5f fa8a 	uxtb.w	sl, sl
 800d55c:	3901      	subs	r1, #1
 800d55e:	4652      	mov	r2, sl
 800d560:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800d564:	9109      	str	r1, [sp, #36]	@ 0x24
 800d566:	f7ff ff27 	bl	800d3b8 <__exponent>
 800d56a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800d56c:	4681      	mov	r9, r0
 800d56e:	1813      	adds	r3, r2, r0
 800d570:	2a01      	cmp	r2, #1
 800d572:	6123      	str	r3, [r4, #16]
 800d574:	dc02      	bgt.n	800d57c <_printf_float+0x150>
 800d576:	6822      	ldr	r2, [r4, #0]
 800d578:	07d2      	lsls	r2, r2, #31
 800d57a:	d501      	bpl.n	800d580 <_printf_float+0x154>
 800d57c:	3301      	adds	r3, #1
 800d57e:	6123      	str	r3, [r4, #16]
 800d580:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800d584:	2b00      	cmp	r3, #0
 800d586:	d0a2      	beq.n	800d4ce <_printf_float+0xa2>
 800d588:	232d      	movs	r3, #45	@ 0x2d
 800d58a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d58e:	e79e      	b.n	800d4ce <_printf_float+0xa2>
 800d590:	9a06      	ldr	r2, [sp, #24]
 800d592:	2a47      	cmp	r2, #71	@ 0x47
 800d594:	d1c2      	bne.n	800d51c <_printf_float+0xf0>
 800d596:	2b00      	cmp	r3, #0
 800d598:	d1c0      	bne.n	800d51c <_printf_float+0xf0>
 800d59a:	2301      	movs	r3, #1
 800d59c:	e7bd      	b.n	800d51a <_printf_float+0xee>
 800d59e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800d5a2:	d9db      	bls.n	800d55c <_printf_float+0x130>
 800d5a4:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800d5a8:	d118      	bne.n	800d5dc <_printf_float+0x1b0>
 800d5aa:	2900      	cmp	r1, #0
 800d5ac:	6863      	ldr	r3, [r4, #4]
 800d5ae:	dd0b      	ble.n	800d5c8 <_printf_float+0x19c>
 800d5b0:	6121      	str	r1, [r4, #16]
 800d5b2:	b913      	cbnz	r3, 800d5ba <_printf_float+0x18e>
 800d5b4:	6822      	ldr	r2, [r4, #0]
 800d5b6:	07d0      	lsls	r0, r2, #31
 800d5b8:	d502      	bpl.n	800d5c0 <_printf_float+0x194>
 800d5ba:	3301      	adds	r3, #1
 800d5bc:	440b      	add	r3, r1
 800d5be:	6123      	str	r3, [r4, #16]
 800d5c0:	f04f 0900 	mov.w	r9, #0
 800d5c4:	65a1      	str	r1, [r4, #88]	@ 0x58
 800d5c6:	e7db      	b.n	800d580 <_printf_float+0x154>
 800d5c8:	b913      	cbnz	r3, 800d5d0 <_printf_float+0x1a4>
 800d5ca:	6822      	ldr	r2, [r4, #0]
 800d5cc:	07d2      	lsls	r2, r2, #31
 800d5ce:	d501      	bpl.n	800d5d4 <_printf_float+0x1a8>
 800d5d0:	3302      	adds	r3, #2
 800d5d2:	e7f4      	b.n	800d5be <_printf_float+0x192>
 800d5d4:	2301      	movs	r3, #1
 800d5d6:	e7f2      	b.n	800d5be <_printf_float+0x192>
 800d5d8:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800d5dc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d5de:	4299      	cmp	r1, r3
 800d5e0:	db05      	blt.n	800d5ee <_printf_float+0x1c2>
 800d5e2:	6823      	ldr	r3, [r4, #0]
 800d5e4:	6121      	str	r1, [r4, #16]
 800d5e6:	07d8      	lsls	r0, r3, #31
 800d5e8:	d5ea      	bpl.n	800d5c0 <_printf_float+0x194>
 800d5ea:	1c4b      	adds	r3, r1, #1
 800d5ec:	e7e7      	b.n	800d5be <_printf_float+0x192>
 800d5ee:	2900      	cmp	r1, #0
 800d5f0:	bfd4      	ite	le
 800d5f2:	f1c1 0202 	rsble	r2, r1, #2
 800d5f6:	2201      	movgt	r2, #1
 800d5f8:	4413      	add	r3, r2
 800d5fa:	e7e0      	b.n	800d5be <_printf_float+0x192>
 800d5fc:	6823      	ldr	r3, [r4, #0]
 800d5fe:	055a      	lsls	r2, r3, #21
 800d600:	d407      	bmi.n	800d612 <_printf_float+0x1e6>
 800d602:	6923      	ldr	r3, [r4, #16]
 800d604:	4642      	mov	r2, r8
 800d606:	4631      	mov	r1, r6
 800d608:	4628      	mov	r0, r5
 800d60a:	47b8      	blx	r7
 800d60c:	3001      	adds	r0, #1
 800d60e:	d12b      	bne.n	800d668 <_printf_float+0x23c>
 800d610:	e767      	b.n	800d4e2 <_printf_float+0xb6>
 800d612:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800d616:	f240 80dd 	bls.w	800d7d4 <_printf_float+0x3a8>
 800d61a:	2200      	movs	r2, #0
 800d61c:	2300      	movs	r3, #0
 800d61e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800d622:	f7f3 fa55 	bl	8000ad0 <__aeabi_dcmpeq>
 800d626:	2800      	cmp	r0, #0
 800d628:	d033      	beq.n	800d692 <_printf_float+0x266>
 800d62a:	2301      	movs	r3, #1
 800d62c:	4a36      	ldr	r2, [pc, #216]	@ (800d708 <_printf_float+0x2dc>)
 800d62e:	4631      	mov	r1, r6
 800d630:	4628      	mov	r0, r5
 800d632:	47b8      	blx	r7
 800d634:	3001      	adds	r0, #1
 800d636:	f43f af54 	beq.w	800d4e2 <_printf_float+0xb6>
 800d63a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800d63e:	4543      	cmp	r3, r8
 800d640:	db02      	blt.n	800d648 <_printf_float+0x21c>
 800d642:	6823      	ldr	r3, [r4, #0]
 800d644:	07d8      	lsls	r0, r3, #31
 800d646:	d50f      	bpl.n	800d668 <_printf_float+0x23c>
 800d648:	4631      	mov	r1, r6
 800d64a:	4628      	mov	r0, r5
 800d64c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d650:	47b8      	blx	r7
 800d652:	3001      	adds	r0, #1
 800d654:	f43f af45 	beq.w	800d4e2 <_printf_float+0xb6>
 800d658:	f04f 0900 	mov.w	r9, #0
 800d65c:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 800d660:	f104 0a1a 	add.w	sl, r4, #26
 800d664:	45c8      	cmp	r8, r9
 800d666:	dc09      	bgt.n	800d67c <_printf_float+0x250>
 800d668:	6823      	ldr	r3, [r4, #0]
 800d66a:	079b      	lsls	r3, r3, #30
 800d66c:	f100 8103 	bmi.w	800d876 <_printf_float+0x44a>
 800d670:	68e0      	ldr	r0, [r4, #12]
 800d672:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d674:	4298      	cmp	r0, r3
 800d676:	bfb8      	it	lt
 800d678:	4618      	movlt	r0, r3
 800d67a:	e734      	b.n	800d4e6 <_printf_float+0xba>
 800d67c:	2301      	movs	r3, #1
 800d67e:	4652      	mov	r2, sl
 800d680:	4631      	mov	r1, r6
 800d682:	4628      	mov	r0, r5
 800d684:	47b8      	blx	r7
 800d686:	3001      	adds	r0, #1
 800d688:	f43f af2b 	beq.w	800d4e2 <_printf_float+0xb6>
 800d68c:	f109 0901 	add.w	r9, r9, #1
 800d690:	e7e8      	b.n	800d664 <_printf_float+0x238>
 800d692:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d694:	2b00      	cmp	r3, #0
 800d696:	dc39      	bgt.n	800d70c <_printf_float+0x2e0>
 800d698:	2301      	movs	r3, #1
 800d69a:	4a1b      	ldr	r2, [pc, #108]	@ (800d708 <_printf_float+0x2dc>)
 800d69c:	4631      	mov	r1, r6
 800d69e:	4628      	mov	r0, r5
 800d6a0:	47b8      	blx	r7
 800d6a2:	3001      	adds	r0, #1
 800d6a4:	f43f af1d 	beq.w	800d4e2 <_printf_float+0xb6>
 800d6a8:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800d6ac:	ea59 0303 	orrs.w	r3, r9, r3
 800d6b0:	d102      	bne.n	800d6b8 <_printf_float+0x28c>
 800d6b2:	6823      	ldr	r3, [r4, #0]
 800d6b4:	07d9      	lsls	r1, r3, #31
 800d6b6:	d5d7      	bpl.n	800d668 <_printf_float+0x23c>
 800d6b8:	4631      	mov	r1, r6
 800d6ba:	4628      	mov	r0, r5
 800d6bc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d6c0:	47b8      	blx	r7
 800d6c2:	3001      	adds	r0, #1
 800d6c4:	f43f af0d 	beq.w	800d4e2 <_printf_float+0xb6>
 800d6c8:	f04f 0a00 	mov.w	sl, #0
 800d6cc:	f104 0b1a 	add.w	fp, r4, #26
 800d6d0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d6d2:	425b      	negs	r3, r3
 800d6d4:	4553      	cmp	r3, sl
 800d6d6:	dc01      	bgt.n	800d6dc <_printf_float+0x2b0>
 800d6d8:	464b      	mov	r3, r9
 800d6da:	e793      	b.n	800d604 <_printf_float+0x1d8>
 800d6dc:	2301      	movs	r3, #1
 800d6de:	465a      	mov	r2, fp
 800d6e0:	4631      	mov	r1, r6
 800d6e2:	4628      	mov	r0, r5
 800d6e4:	47b8      	blx	r7
 800d6e6:	3001      	adds	r0, #1
 800d6e8:	f43f aefb 	beq.w	800d4e2 <_printf_float+0xb6>
 800d6ec:	f10a 0a01 	add.w	sl, sl, #1
 800d6f0:	e7ee      	b.n	800d6d0 <_printf_float+0x2a4>
 800d6f2:	bf00      	nop
 800d6f4:	7fefffff 	.word	0x7fefffff
 800d6f8:	08010ff4 	.word	0x08010ff4
 800d6fc:	08010ff0 	.word	0x08010ff0
 800d700:	08010ffc 	.word	0x08010ffc
 800d704:	08010ff8 	.word	0x08010ff8
 800d708:	08011000 	.word	0x08011000
 800d70c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800d70e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800d712:	4553      	cmp	r3, sl
 800d714:	bfa8      	it	ge
 800d716:	4653      	movge	r3, sl
 800d718:	2b00      	cmp	r3, #0
 800d71a:	4699      	mov	r9, r3
 800d71c:	dc36      	bgt.n	800d78c <_printf_float+0x360>
 800d71e:	f04f 0b00 	mov.w	fp, #0
 800d722:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d726:	f104 021a 	add.w	r2, r4, #26
 800d72a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800d72c:	9306      	str	r3, [sp, #24]
 800d72e:	eba3 0309 	sub.w	r3, r3, r9
 800d732:	455b      	cmp	r3, fp
 800d734:	dc31      	bgt.n	800d79a <_printf_float+0x36e>
 800d736:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d738:	459a      	cmp	sl, r3
 800d73a:	dc3a      	bgt.n	800d7b2 <_printf_float+0x386>
 800d73c:	6823      	ldr	r3, [r4, #0]
 800d73e:	07da      	lsls	r2, r3, #31
 800d740:	d437      	bmi.n	800d7b2 <_printf_float+0x386>
 800d742:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d744:	ebaa 0903 	sub.w	r9, sl, r3
 800d748:	9b06      	ldr	r3, [sp, #24]
 800d74a:	ebaa 0303 	sub.w	r3, sl, r3
 800d74e:	4599      	cmp	r9, r3
 800d750:	bfa8      	it	ge
 800d752:	4699      	movge	r9, r3
 800d754:	f1b9 0f00 	cmp.w	r9, #0
 800d758:	dc33      	bgt.n	800d7c2 <_printf_float+0x396>
 800d75a:	f04f 0800 	mov.w	r8, #0
 800d75e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d762:	f104 0b1a 	add.w	fp, r4, #26
 800d766:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d768:	ebaa 0303 	sub.w	r3, sl, r3
 800d76c:	eba3 0309 	sub.w	r3, r3, r9
 800d770:	4543      	cmp	r3, r8
 800d772:	f77f af79 	ble.w	800d668 <_printf_float+0x23c>
 800d776:	2301      	movs	r3, #1
 800d778:	465a      	mov	r2, fp
 800d77a:	4631      	mov	r1, r6
 800d77c:	4628      	mov	r0, r5
 800d77e:	47b8      	blx	r7
 800d780:	3001      	adds	r0, #1
 800d782:	f43f aeae 	beq.w	800d4e2 <_printf_float+0xb6>
 800d786:	f108 0801 	add.w	r8, r8, #1
 800d78a:	e7ec      	b.n	800d766 <_printf_float+0x33a>
 800d78c:	4642      	mov	r2, r8
 800d78e:	4631      	mov	r1, r6
 800d790:	4628      	mov	r0, r5
 800d792:	47b8      	blx	r7
 800d794:	3001      	adds	r0, #1
 800d796:	d1c2      	bne.n	800d71e <_printf_float+0x2f2>
 800d798:	e6a3      	b.n	800d4e2 <_printf_float+0xb6>
 800d79a:	2301      	movs	r3, #1
 800d79c:	4631      	mov	r1, r6
 800d79e:	4628      	mov	r0, r5
 800d7a0:	9206      	str	r2, [sp, #24]
 800d7a2:	47b8      	blx	r7
 800d7a4:	3001      	adds	r0, #1
 800d7a6:	f43f ae9c 	beq.w	800d4e2 <_printf_float+0xb6>
 800d7aa:	f10b 0b01 	add.w	fp, fp, #1
 800d7ae:	9a06      	ldr	r2, [sp, #24]
 800d7b0:	e7bb      	b.n	800d72a <_printf_float+0x2fe>
 800d7b2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d7b6:	4631      	mov	r1, r6
 800d7b8:	4628      	mov	r0, r5
 800d7ba:	47b8      	blx	r7
 800d7bc:	3001      	adds	r0, #1
 800d7be:	d1c0      	bne.n	800d742 <_printf_float+0x316>
 800d7c0:	e68f      	b.n	800d4e2 <_printf_float+0xb6>
 800d7c2:	9a06      	ldr	r2, [sp, #24]
 800d7c4:	464b      	mov	r3, r9
 800d7c6:	4631      	mov	r1, r6
 800d7c8:	4628      	mov	r0, r5
 800d7ca:	4442      	add	r2, r8
 800d7cc:	47b8      	blx	r7
 800d7ce:	3001      	adds	r0, #1
 800d7d0:	d1c3      	bne.n	800d75a <_printf_float+0x32e>
 800d7d2:	e686      	b.n	800d4e2 <_printf_float+0xb6>
 800d7d4:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800d7d8:	f1ba 0f01 	cmp.w	sl, #1
 800d7dc:	dc01      	bgt.n	800d7e2 <_printf_float+0x3b6>
 800d7de:	07db      	lsls	r3, r3, #31
 800d7e0:	d536      	bpl.n	800d850 <_printf_float+0x424>
 800d7e2:	2301      	movs	r3, #1
 800d7e4:	4642      	mov	r2, r8
 800d7e6:	4631      	mov	r1, r6
 800d7e8:	4628      	mov	r0, r5
 800d7ea:	47b8      	blx	r7
 800d7ec:	3001      	adds	r0, #1
 800d7ee:	f43f ae78 	beq.w	800d4e2 <_printf_float+0xb6>
 800d7f2:	4631      	mov	r1, r6
 800d7f4:	4628      	mov	r0, r5
 800d7f6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d7fa:	47b8      	blx	r7
 800d7fc:	3001      	adds	r0, #1
 800d7fe:	f43f ae70 	beq.w	800d4e2 <_printf_float+0xb6>
 800d802:	2200      	movs	r2, #0
 800d804:	2300      	movs	r3, #0
 800d806:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800d80a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800d80e:	f7f3 f95f 	bl	8000ad0 <__aeabi_dcmpeq>
 800d812:	b9c0      	cbnz	r0, 800d846 <_printf_float+0x41a>
 800d814:	4653      	mov	r3, sl
 800d816:	f108 0201 	add.w	r2, r8, #1
 800d81a:	4631      	mov	r1, r6
 800d81c:	4628      	mov	r0, r5
 800d81e:	47b8      	blx	r7
 800d820:	3001      	adds	r0, #1
 800d822:	d10c      	bne.n	800d83e <_printf_float+0x412>
 800d824:	e65d      	b.n	800d4e2 <_printf_float+0xb6>
 800d826:	2301      	movs	r3, #1
 800d828:	465a      	mov	r2, fp
 800d82a:	4631      	mov	r1, r6
 800d82c:	4628      	mov	r0, r5
 800d82e:	47b8      	blx	r7
 800d830:	3001      	adds	r0, #1
 800d832:	f43f ae56 	beq.w	800d4e2 <_printf_float+0xb6>
 800d836:	f108 0801 	add.w	r8, r8, #1
 800d83a:	45d0      	cmp	r8, sl
 800d83c:	dbf3      	blt.n	800d826 <_printf_float+0x3fa>
 800d83e:	464b      	mov	r3, r9
 800d840:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800d844:	e6df      	b.n	800d606 <_printf_float+0x1da>
 800d846:	f04f 0800 	mov.w	r8, #0
 800d84a:	f104 0b1a 	add.w	fp, r4, #26
 800d84e:	e7f4      	b.n	800d83a <_printf_float+0x40e>
 800d850:	2301      	movs	r3, #1
 800d852:	4642      	mov	r2, r8
 800d854:	e7e1      	b.n	800d81a <_printf_float+0x3ee>
 800d856:	2301      	movs	r3, #1
 800d858:	464a      	mov	r2, r9
 800d85a:	4631      	mov	r1, r6
 800d85c:	4628      	mov	r0, r5
 800d85e:	47b8      	blx	r7
 800d860:	3001      	adds	r0, #1
 800d862:	f43f ae3e 	beq.w	800d4e2 <_printf_float+0xb6>
 800d866:	f108 0801 	add.w	r8, r8, #1
 800d86a:	68e3      	ldr	r3, [r4, #12]
 800d86c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800d86e:	1a5b      	subs	r3, r3, r1
 800d870:	4543      	cmp	r3, r8
 800d872:	dcf0      	bgt.n	800d856 <_printf_float+0x42a>
 800d874:	e6fc      	b.n	800d670 <_printf_float+0x244>
 800d876:	f04f 0800 	mov.w	r8, #0
 800d87a:	f104 0919 	add.w	r9, r4, #25
 800d87e:	e7f4      	b.n	800d86a <_printf_float+0x43e>

0800d880 <_printf_common>:
 800d880:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d884:	4616      	mov	r6, r2
 800d886:	4698      	mov	r8, r3
 800d888:	688a      	ldr	r2, [r1, #8]
 800d88a:	4607      	mov	r7, r0
 800d88c:	690b      	ldr	r3, [r1, #16]
 800d88e:	460c      	mov	r4, r1
 800d890:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800d894:	4293      	cmp	r3, r2
 800d896:	bfb8      	it	lt
 800d898:	4613      	movlt	r3, r2
 800d89a:	6033      	str	r3, [r6, #0]
 800d89c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800d8a0:	b10a      	cbz	r2, 800d8a6 <_printf_common+0x26>
 800d8a2:	3301      	adds	r3, #1
 800d8a4:	6033      	str	r3, [r6, #0]
 800d8a6:	6823      	ldr	r3, [r4, #0]
 800d8a8:	0699      	lsls	r1, r3, #26
 800d8aa:	bf42      	ittt	mi
 800d8ac:	6833      	ldrmi	r3, [r6, #0]
 800d8ae:	3302      	addmi	r3, #2
 800d8b0:	6033      	strmi	r3, [r6, #0]
 800d8b2:	6825      	ldr	r5, [r4, #0]
 800d8b4:	f015 0506 	ands.w	r5, r5, #6
 800d8b8:	d106      	bne.n	800d8c8 <_printf_common+0x48>
 800d8ba:	f104 0a19 	add.w	sl, r4, #25
 800d8be:	68e3      	ldr	r3, [r4, #12]
 800d8c0:	6832      	ldr	r2, [r6, #0]
 800d8c2:	1a9b      	subs	r3, r3, r2
 800d8c4:	42ab      	cmp	r3, r5
 800d8c6:	dc2b      	bgt.n	800d920 <_printf_common+0xa0>
 800d8c8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800d8cc:	6822      	ldr	r2, [r4, #0]
 800d8ce:	3b00      	subs	r3, #0
 800d8d0:	bf18      	it	ne
 800d8d2:	2301      	movne	r3, #1
 800d8d4:	0692      	lsls	r2, r2, #26
 800d8d6:	d430      	bmi.n	800d93a <_printf_common+0xba>
 800d8d8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800d8dc:	4641      	mov	r1, r8
 800d8de:	4638      	mov	r0, r7
 800d8e0:	47c8      	blx	r9
 800d8e2:	3001      	adds	r0, #1
 800d8e4:	d023      	beq.n	800d92e <_printf_common+0xae>
 800d8e6:	6823      	ldr	r3, [r4, #0]
 800d8e8:	341a      	adds	r4, #26
 800d8ea:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 800d8ee:	f003 0306 	and.w	r3, r3, #6
 800d8f2:	2b04      	cmp	r3, #4
 800d8f4:	bf0a      	itet	eq
 800d8f6:	f854 5c0e 	ldreq.w	r5, [r4, #-14]
 800d8fa:	2500      	movne	r5, #0
 800d8fc:	6833      	ldreq	r3, [r6, #0]
 800d8fe:	f04f 0600 	mov.w	r6, #0
 800d902:	bf08      	it	eq
 800d904:	1aed      	subeq	r5, r5, r3
 800d906:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800d90a:	bf08      	it	eq
 800d90c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d910:	4293      	cmp	r3, r2
 800d912:	bfc4      	itt	gt
 800d914:	1a9b      	subgt	r3, r3, r2
 800d916:	18ed      	addgt	r5, r5, r3
 800d918:	42b5      	cmp	r5, r6
 800d91a:	d11a      	bne.n	800d952 <_printf_common+0xd2>
 800d91c:	2000      	movs	r0, #0
 800d91e:	e008      	b.n	800d932 <_printf_common+0xb2>
 800d920:	2301      	movs	r3, #1
 800d922:	4652      	mov	r2, sl
 800d924:	4641      	mov	r1, r8
 800d926:	4638      	mov	r0, r7
 800d928:	47c8      	blx	r9
 800d92a:	3001      	adds	r0, #1
 800d92c:	d103      	bne.n	800d936 <_printf_common+0xb6>
 800d92e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800d932:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d936:	3501      	adds	r5, #1
 800d938:	e7c1      	b.n	800d8be <_printf_common+0x3e>
 800d93a:	18e1      	adds	r1, r4, r3
 800d93c:	1c5a      	adds	r2, r3, #1
 800d93e:	2030      	movs	r0, #48	@ 0x30
 800d940:	3302      	adds	r3, #2
 800d942:	4422      	add	r2, r4
 800d944:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800d948:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800d94c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800d950:	e7c2      	b.n	800d8d8 <_printf_common+0x58>
 800d952:	2301      	movs	r3, #1
 800d954:	4622      	mov	r2, r4
 800d956:	4641      	mov	r1, r8
 800d958:	4638      	mov	r0, r7
 800d95a:	47c8      	blx	r9
 800d95c:	3001      	adds	r0, #1
 800d95e:	d0e6      	beq.n	800d92e <_printf_common+0xae>
 800d960:	3601      	adds	r6, #1
 800d962:	e7d9      	b.n	800d918 <_printf_common+0x98>

0800d964 <_printf_i>:
 800d964:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d968:	7e0f      	ldrb	r7, [r1, #24]
 800d96a:	4691      	mov	r9, r2
 800d96c:	4680      	mov	r8, r0
 800d96e:	460c      	mov	r4, r1
 800d970:	2f78      	cmp	r7, #120	@ 0x78
 800d972:	469a      	mov	sl, r3
 800d974:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800d976:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800d97a:	d807      	bhi.n	800d98c <_printf_i+0x28>
 800d97c:	2f62      	cmp	r7, #98	@ 0x62
 800d97e:	d80a      	bhi.n	800d996 <_printf_i+0x32>
 800d980:	2f00      	cmp	r7, #0
 800d982:	f000 80d1 	beq.w	800db28 <_printf_i+0x1c4>
 800d986:	2f58      	cmp	r7, #88	@ 0x58
 800d988:	f000 80b8 	beq.w	800dafc <_printf_i+0x198>
 800d98c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d990:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800d994:	e03a      	b.n	800da0c <_printf_i+0xa8>
 800d996:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800d99a:	2b15      	cmp	r3, #21
 800d99c:	d8f6      	bhi.n	800d98c <_printf_i+0x28>
 800d99e:	a101      	add	r1, pc, #4	@ (adr r1, 800d9a4 <_printf_i+0x40>)
 800d9a0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d9a4:	0800d9fd 	.word	0x0800d9fd
 800d9a8:	0800da11 	.word	0x0800da11
 800d9ac:	0800d98d 	.word	0x0800d98d
 800d9b0:	0800d98d 	.word	0x0800d98d
 800d9b4:	0800d98d 	.word	0x0800d98d
 800d9b8:	0800d98d 	.word	0x0800d98d
 800d9bc:	0800da11 	.word	0x0800da11
 800d9c0:	0800d98d 	.word	0x0800d98d
 800d9c4:	0800d98d 	.word	0x0800d98d
 800d9c8:	0800d98d 	.word	0x0800d98d
 800d9cc:	0800d98d 	.word	0x0800d98d
 800d9d0:	0800db0f 	.word	0x0800db0f
 800d9d4:	0800da3b 	.word	0x0800da3b
 800d9d8:	0800dac9 	.word	0x0800dac9
 800d9dc:	0800d98d 	.word	0x0800d98d
 800d9e0:	0800d98d 	.word	0x0800d98d
 800d9e4:	0800db31 	.word	0x0800db31
 800d9e8:	0800d98d 	.word	0x0800d98d
 800d9ec:	0800da3b 	.word	0x0800da3b
 800d9f0:	0800d98d 	.word	0x0800d98d
 800d9f4:	0800d98d 	.word	0x0800d98d
 800d9f8:	0800dad1 	.word	0x0800dad1
 800d9fc:	6833      	ldr	r3, [r6, #0]
 800d9fe:	1d1a      	adds	r2, r3, #4
 800da00:	681b      	ldr	r3, [r3, #0]
 800da02:	6032      	str	r2, [r6, #0]
 800da04:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800da08:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800da0c:	2301      	movs	r3, #1
 800da0e:	e09c      	b.n	800db4a <_printf_i+0x1e6>
 800da10:	6833      	ldr	r3, [r6, #0]
 800da12:	6820      	ldr	r0, [r4, #0]
 800da14:	1d19      	adds	r1, r3, #4
 800da16:	6031      	str	r1, [r6, #0]
 800da18:	0606      	lsls	r6, r0, #24
 800da1a:	d501      	bpl.n	800da20 <_printf_i+0xbc>
 800da1c:	681d      	ldr	r5, [r3, #0]
 800da1e:	e003      	b.n	800da28 <_printf_i+0xc4>
 800da20:	0645      	lsls	r5, r0, #25
 800da22:	d5fb      	bpl.n	800da1c <_printf_i+0xb8>
 800da24:	f9b3 5000 	ldrsh.w	r5, [r3]
 800da28:	2d00      	cmp	r5, #0
 800da2a:	da03      	bge.n	800da34 <_printf_i+0xd0>
 800da2c:	232d      	movs	r3, #45	@ 0x2d
 800da2e:	426d      	negs	r5, r5
 800da30:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800da34:	4858      	ldr	r0, [pc, #352]	@ (800db98 <_printf_i+0x234>)
 800da36:	230a      	movs	r3, #10
 800da38:	e011      	b.n	800da5e <_printf_i+0xfa>
 800da3a:	6821      	ldr	r1, [r4, #0]
 800da3c:	6833      	ldr	r3, [r6, #0]
 800da3e:	0608      	lsls	r0, r1, #24
 800da40:	f853 5b04 	ldr.w	r5, [r3], #4
 800da44:	d402      	bmi.n	800da4c <_printf_i+0xe8>
 800da46:	0649      	lsls	r1, r1, #25
 800da48:	bf48      	it	mi
 800da4a:	b2ad      	uxthmi	r5, r5
 800da4c:	2f6f      	cmp	r7, #111	@ 0x6f
 800da4e:	6033      	str	r3, [r6, #0]
 800da50:	4851      	ldr	r0, [pc, #324]	@ (800db98 <_printf_i+0x234>)
 800da52:	bf14      	ite	ne
 800da54:	230a      	movne	r3, #10
 800da56:	2308      	moveq	r3, #8
 800da58:	2100      	movs	r1, #0
 800da5a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800da5e:	6866      	ldr	r6, [r4, #4]
 800da60:	2e00      	cmp	r6, #0
 800da62:	60a6      	str	r6, [r4, #8]
 800da64:	db05      	blt.n	800da72 <_printf_i+0x10e>
 800da66:	6821      	ldr	r1, [r4, #0]
 800da68:	432e      	orrs	r6, r5
 800da6a:	f021 0104 	bic.w	r1, r1, #4
 800da6e:	6021      	str	r1, [r4, #0]
 800da70:	d04b      	beq.n	800db0a <_printf_i+0x1a6>
 800da72:	4616      	mov	r6, r2
 800da74:	fbb5 f1f3 	udiv	r1, r5, r3
 800da78:	fb03 5711 	mls	r7, r3, r1, r5
 800da7c:	5dc7      	ldrb	r7, [r0, r7]
 800da7e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800da82:	462f      	mov	r7, r5
 800da84:	460d      	mov	r5, r1
 800da86:	42bb      	cmp	r3, r7
 800da88:	d9f4      	bls.n	800da74 <_printf_i+0x110>
 800da8a:	2b08      	cmp	r3, #8
 800da8c:	d10b      	bne.n	800daa6 <_printf_i+0x142>
 800da8e:	6823      	ldr	r3, [r4, #0]
 800da90:	07df      	lsls	r7, r3, #31
 800da92:	d508      	bpl.n	800daa6 <_printf_i+0x142>
 800da94:	6923      	ldr	r3, [r4, #16]
 800da96:	6861      	ldr	r1, [r4, #4]
 800da98:	4299      	cmp	r1, r3
 800da9a:	bfde      	ittt	le
 800da9c:	2330      	movle	r3, #48	@ 0x30
 800da9e:	f806 3c01 	strble.w	r3, [r6, #-1]
 800daa2:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800daa6:	1b92      	subs	r2, r2, r6
 800daa8:	6122      	str	r2, [r4, #16]
 800daaa:	464b      	mov	r3, r9
 800daac:	aa03      	add	r2, sp, #12
 800daae:	4621      	mov	r1, r4
 800dab0:	4640      	mov	r0, r8
 800dab2:	f8cd a000 	str.w	sl, [sp]
 800dab6:	f7ff fee3 	bl	800d880 <_printf_common>
 800daba:	3001      	adds	r0, #1
 800dabc:	d14a      	bne.n	800db54 <_printf_i+0x1f0>
 800dabe:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800dac2:	b004      	add	sp, #16
 800dac4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dac8:	6823      	ldr	r3, [r4, #0]
 800daca:	f043 0320 	orr.w	r3, r3, #32
 800dace:	6023      	str	r3, [r4, #0]
 800dad0:	2778      	movs	r7, #120	@ 0x78
 800dad2:	4832      	ldr	r0, [pc, #200]	@ (800db9c <_printf_i+0x238>)
 800dad4:	6823      	ldr	r3, [r4, #0]
 800dad6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800dada:	061f      	lsls	r7, r3, #24
 800dadc:	6831      	ldr	r1, [r6, #0]
 800dade:	f851 5b04 	ldr.w	r5, [r1], #4
 800dae2:	d402      	bmi.n	800daea <_printf_i+0x186>
 800dae4:	065f      	lsls	r7, r3, #25
 800dae6:	bf48      	it	mi
 800dae8:	b2ad      	uxthmi	r5, r5
 800daea:	6031      	str	r1, [r6, #0]
 800daec:	07d9      	lsls	r1, r3, #31
 800daee:	bf44      	itt	mi
 800daf0:	f043 0320 	orrmi.w	r3, r3, #32
 800daf4:	6023      	strmi	r3, [r4, #0]
 800daf6:	b11d      	cbz	r5, 800db00 <_printf_i+0x19c>
 800daf8:	2310      	movs	r3, #16
 800dafa:	e7ad      	b.n	800da58 <_printf_i+0xf4>
 800dafc:	4826      	ldr	r0, [pc, #152]	@ (800db98 <_printf_i+0x234>)
 800dafe:	e7e9      	b.n	800dad4 <_printf_i+0x170>
 800db00:	6823      	ldr	r3, [r4, #0]
 800db02:	f023 0320 	bic.w	r3, r3, #32
 800db06:	6023      	str	r3, [r4, #0]
 800db08:	e7f6      	b.n	800daf8 <_printf_i+0x194>
 800db0a:	4616      	mov	r6, r2
 800db0c:	e7bd      	b.n	800da8a <_printf_i+0x126>
 800db0e:	6833      	ldr	r3, [r6, #0]
 800db10:	6825      	ldr	r5, [r4, #0]
 800db12:	1d18      	adds	r0, r3, #4
 800db14:	6961      	ldr	r1, [r4, #20]
 800db16:	6030      	str	r0, [r6, #0]
 800db18:	062e      	lsls	r6, r5, #24
 800db1a:	681b      	ldr	r3, [r3, #0]
 800db1c:	d501      	bpl.n	800db22 <_printf_i+0x1be>
 800db1e:	6019      	str	r1, [r3, #0]
 800db20:	e002      	b.n	800db28 <_printf_i+0x1c4>
 800db22:	0668      	lsls	r0, r5, #25
 800db24:	d5fb      	bpl.n	800db1e <_printf_i+0x1ba>
 800db26:	8019      	strh	r1, [r3, #0]
 800db28:	2300      	movs	r3, #0
 800db2a:	4616      	mov	r6, r2
 800db2c:	6123      	str	r3, [r4, #16]
 800db2e:	e7bc      	b.n	800daaa <_printf_i+0x146>
 800db30:	6833      	ldr	r3, [r6, #0]
 800db32:	2100      	movs	r1, #0
 800db34:	1d1a      	adds	r2, r3, #4
 800db36:	6032      	str	r2, [r6, #0]
 800db38:	681e      	ldr	r6, [r3, #0]
 800db3a:	6862      	ldr	r2, [r4, #4]
 800db3c:	4630      	mov	r0, r6
 800db3e:	f000 f9d1 	bl	800dee4 <memchr>
 800db42:	b108      	cbz	r0, 800db48 <_printf_i+0x1e4>
 800db44:	1b80      	subs	r0, r0, r6
 800db46:	6060      	str	r0, [r4, #4]
 800db48:	6863      	ldr	r3, [r4, #4]
 800db4a:	6123      	str	r3, [r4, #16]
 800db4c:	2300      	movs	r3, #0
 800db4e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800db52:	e7aa      	b.n	800daaa <_printf_i+0x146>
 800db54:	6923      	ldr	r3, [r4, #16]
 800db56:	4632      	mov	r2, r6
 800db58:	4649      	mov	r1, r9
 800db5a:	4640      	mov	r0, r8
 800db5c:	47d0      	blx	sl
 800db5e:	3001      	adds	r0, #1
 800db60:	d0ad      	beq.n	800dabe <_printf_i+0x15a>
 800db62:	6823      	ldr	r3, [r4, #0]
 800db64:	079b      	lsls	r3, r3, #30
 800db66:	d413      	bmi.n	800db90 <_printf_i+0x22c>
 800db68:	68e0      	ldr	r0, [r4, #12]
 800db6a:	9b03      	ldr	r3, [sp, #12]
 800db6c:	4298      	cmp	r0, r3
 800db6e:	bfb8      	it	lt
 800db70:	4618      	movlt	r0, r3
 800db72:	e7a6      	b.n	800dac2 <_printf_i+0x15e>
 800db74:	2301      	movs	r3, #1
 800db76:	4632      	mov	r2, r6
 800db78:	4649      	mov	r1, r9
 800db7a:	4640      	mov	r0, r8
 800db7c:	47d0      	blx	sl
 800db7e:	3001      	adds	r0, #1
 800db80:	d09d      	beq.n	800dabe <_printf_i+0x15a>
 800db82:	3501      	adds	r5, #1
 800db84:	68e3      	ldr	r3, [r4, #12]
 800db86:	9903      	ldr	r1, [sp, #12]
 800db88:	1a5b      	subs	r3, r3, r1
 800db8a:	42ab      	cmp	r3, r5
 800db8c:	dcf2      	bgt.n	800db74 <_printf_i+0x210>
 800db8e:	e7eb      	b.n	800db68 <_printf_i+0x204>
 800db90:	2500      	movs	r5, #0
 800db92:	f104 0619 	add.w	r6, r4, #25
 800db96:	e7f5      	b.n	800db84 <_printf_i+0x220>
 800db98:	08011002 	.word	0x08011002
 800db9c:	08011013 	.word	0x08011013

0800dba0 <sniprintf>:
 800dba0:	b40c      	push	{r2, r3}
 800dba2:	4b19      	ldr	r3, [pc, #100]	@ (800dc08 <sniprintf+0x68>)
 800dba4:	b530      	push	{r4, r5, lr}
 800dba6:	1e0c      	subs	r4, r1, #0
 800dba8:	b09d      	sub	sp, #116	@ 0x74
 800dbaa:	681d      	ldr	r5, [r3, #0]
 800dbac:	da08      	bge.n	800dbc0 <sniprintf+0x20>
 800dbae:	238b      	movs	r3, #139	@ 0x8b
 800dbb0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800dbb4:	602b      	str	r3, [r5, #0]
 800dbb6:	b01d      	add	sp, #116	@ 0x74
 800dbb8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800dbbc:	b002      	add	sp, #8
 800dbbe:	4770      	bx	lr
 800dbc0:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800dbc4:	9002      	str	r0, [sp, #8]
 800dbc6:	9006      	str	r0, [sp, #24]
 800dbc8:	a902      	add	r1, sp, #8
 800dbca:	f8ad 3014 	strh.w	r3, [sp, #20]
 800dbce:	f04f 0300 	mov.w	r3, #0
 800dbd2:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800dbd4:	4628      	mov	r0, r5
 800dbd6:	931b      	str	r3, [sp, #108]	@ 0x6c
 800dbd8:	bf14      	ite	ne
 800dbda:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 800dbde:	4623      	moveq	r3, r4
 800dbe0:	9304      	str	r3, [sp, #16]
 800dbe2:	9307      	str	r3, [sp, #28]
 800dbe4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800dbe8:	f8ad 3016 	strh.w	r3, [sp, #22]
 800dbec:	ab21      	add	r3, sp, #132	@ 0x84
 800dbee:	9301      	str	r3, [sp, #4]
 800dbf0:	f001 f844 	bl	800ec7c <_svfiprintf_r>
 800dbf4:	1c43      	adds	r3, r0, #1
 800dbf6:	bfbc      	itt	lt
 800dbf8:	238b      	movlt	r3, #139	@ 0x8b
 800dbfa:	602b      	strlt	r3, [r5, #0]
 800dbfc:	2c00      	cmp	r4, #0
 800dbfe:	d0da      	beq.n	800dbb6 <sniprintf+0x16>
 800dc00:	9b02      	ldr	r3, [sp, #8]
 800dc02:	2200      	movs	r2, #0
 800dc04:	701a      	strb	r2, [r3, #0]
 800dc06:	e7d6      	b.n	800dbb6 <sniprintf+0x16>
 800dc08:	20000040 	.word	0x20000040

0800dc0c <std>:
 800dc0c:	2300      	movs	r3, #0
 800dc0e:	b510      	push	{r4, lr}
 800dc10:	4604      	mov	r4, r0
 800dc12:	6083      	str	r3, [r0, #8]
 800dc14:	8181      	strh	r1, [r0, #12]
 800dc16:	4619      	mov	r1, r3
 800dc18:	6643      	str	r3, [r0, #100]	@ 0x64
 800dc1a:	81c2      	strh	r2, [r0, #14]
 800dc1c:	2208      	movs	r2, #8
 800dc1e:	6183      	str	r3, [r0, #24]
 800dc20:	e9c0 3300 	strd	r3, r3, [r0]
 800dc24:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800dc28:	305c      	adds	r0, #92	@ 0x5c
 800dc2a:	f000 f921 	bl	800de70 <memset>
 800dc2e:	4b0d      	ldr	r3, [pc, #52]	@ (800dc64 <std+0x58>)
 800dc30:	6224      	str	r4, [r4, #32]
 800dc32:	6263      	str	r3, [r4, #36]	@ 0x24
 800dc34:	4b0c      	ldr	r3, [pc, #48]	@ (800dc68 <std+0x5c>)
 800dc36:	62a3      	str	r3, [r4, #40]	@ 0x28
 800dc38:	4b0c      	ldr	r3, [pc, #48]	@ (800dc6c <std+0x60>)
 800dc3a:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800dc3c:	4b0c      	ldr	r3, [pc, #48]	@ (800dc70 <std+0x64>)
 800dc3e:	6323      	str	r3, [r4, #48]	@ 0x30
 800dc40:	4b0c      	ldr	r3, [pc, #48]	@ (800dc74 <std+0x68>)
 800dc42:	429c      	cmp	r4, r3
 800dc44:	d006      	beq.n	800dc54 <std+0x48>
 800dc46:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800dc4a:	4294      	cmp	r4, r2
 800dc4c:	d002      	beq.n	800dc54 <std+0x48>
 800dc4e:	33d0      	adds	r3, #208	@ 0xd0
 800dc50:	429c      	cmp	r4, r3
 800dc52:	d105      	bne.n	800dc60 <std+0x54>
 800dc54:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800dc58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800dc5c:	f000 b93a 	b.w	800ded4 <__retarget_lock_init_recursive>
 800dc60:	bd10      	pop	{r4, pc}
 800dc62:	bf00      	nop
 800dc64:	0800fac1 	.word	0x0800fac1
 800dc68:	0800fae3 	.word	0x0800fae3
 800dc6c:	0800fb1b 	.word	0x0800fb1b
 800dc70:	0800fb3f 	.word	0x0800fb3f
 800dc74:	2000055c 	.word	0x2000055c

0800dc78 <stdio_exit_handler>:
 800dc78:	4a02      	ldr	r2, [pc, #8]	@ (800dc84 <stdio_exit_handler+0xc>)
 800dc7a:	4903      	ldr	r1, [pc, #12]	@ (800dc88 <stdio_exit_handler+0x10>)
 800dc7c:	4803      	ldr	r0, [pc, #12]	@ (800dc8c <stdio_exit_handler+0x14>)
 800dc7e:	f000 b869 	b.w	800dd54 <_fwalk_sglue>
 800dc82:	bf00      	nop
 800dc84:	20000034 	.word	0x20000034
 800dc88:	0800f355 	.word	0x0800f355
 800dc8c:	20000044 	.word	0x20000044

0800dc90 <cleanup_stdio>:
 800dc90:	6841      	ldr	r1, [r0, #4]
 800dc92:	4b0c      	ldr	r3, [pc, #48]	@ (800dcc4 <cleanup_stdio+0x34>)
 800dc94:	4299      	cmp	r1, r3
 800dc96:	b510      	push	{r4, lr}
 800dc98:	4604      	mov	r4, r0
 800dc9a:	d001      	beq.n	800dca0 <cleanup_stdio+0x10>
 800dc9c:	f001 fb5a 	bl	800f354 <_fflush_r>
 800dca0:	68a1      	ldr	r1, [r4, #8]
 800dca2:	4b09      	ldr	r3, [pc, #36]	@ (800dcc8 <cleanup_stdio+0x38>)
 800dca4:	4299      	cmp	r1, r3
 800dca6:	d002      	beq.n	800dcae <cleanup_stdio+0x1e>
 800dca8:	4620      	mov	r0, r4
 800dcaa:	f001 fb53 	bl	800f354 <_fflush_r>
 800dcae:	68e1      	ldr	r1, [r4, #12]
 800dcb0:	4b06      	ldr	r3, [pc, #24]	@ (800dccc <cleanup_stdio+0x3c>)
 800dcb2:	4299      	cmp	r1, r3
 800dcb4:	d004      	beq.n	800dcc0 <cleanup_stdio+0x30>
 800dcb6:	4620      	mov	r0, r4
 800dcb8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800dcbc:	f001 bb4a 	b.w	800f354 <_fflush_r>
 800dcc0:	bd10      	pop	{r4, pc}
 800dcc2:	bf00      	nop
 800dcc4:	2000055c 	.word	0x2000055c
 800dcc8:	200005c4 	.word	0x200005c4
 800dccc:	2000062c 	.word	0x2000062c

0800dcd0 <global_stdio_init.part.0>:
 800dcd0:	b510      	push	{r4, lr}
 800dcd2:	4b0b      	ldr	r3, [pc, #44]	@ (800dd00 <global_stdio_init.part.0+0x30>)
 800dcd4:	2104      	movs	r1, #4
 800dcd6:	4c0b      	ldr	r4, [pc, #44]	@ (800dd04 <global_stdio_init.part.0+0x34>)
 800dcd8:	4a0b      	ldr	r2, [pc, #44]	@ (800dd08 <global_stdio_init.part.0+0x38>)
 800dcda:	4620      	mov	r0, r4
 800dcdc:	601a      	str	r2, [r3, #0]
 800dcde:	2200      	movs	r2, #0
 800dce0:	f7ff ff94 	bl	800dc0c <std>
 800dce4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800dce8:	2201      	movs	r2, #1
 800dcea:	2109      	movs	r1, #9
 800dcec:	f7ff ff8e 	bl	800dc0c <std>
 800dcf0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800dcf4:	2202      	movs	r2, #2
 800dcf6:	2112      	movs	r1, #18
 800dcf8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800dcfc:	f7ff bf86 	b.w	800dc0c <std>
 800dd00:	20000694 	.word	0x20000694
 800dd04:	2000055c 	.word	0x2000055c
 800dd08:	0800dc79 	.word	0x0800dc79

0800dd0c <__sfp_lock_acquire>:
 800dd0c:	4801      	ldr	r0, [pc, #4]	@ (800dd14 <__sfp_lock_acquire+0x8>)
 800dd0e:	f000 b8e2 	b.w	800ded6 <__retarget_lock_acquire_recursive>
 800dd12:	bf00      	nop
 800dd14:	20000699 	.word	0x20000699

0800dd18 <__sfp_lock_release>:
 800dd18:	4801      	ldr	r0, [pc, #4]	@ (800dd20 <__sfp_lock_release+0x8>)
 800dd1a:	f000 b8dd 	b.w	800ded8 <__retarget_lock_release_recursive>
 800dd1e:	bf00      	nop
 800dd20:	20000699 	.word	0x20000699

0800dd24 <__sinit>:
 800dd24:	b510      	push	{r4, lr}
 800dd26:	4604      	mov	r4, r0
 800dd28:	f7ff fff0 	bl	800dd0c <__sfp_lock_acquire>
 800dd2c:	6a23      	ldr	r3, [r4, #32]
 800dd2e:	b11b      	cbz	r3, 800dd38 <__sinit+0x14>
 800dd30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800dd34:	f7ff bff0 	b.w	800dd18 <__sfp_lock_release>
 800dd38:	4b04      	ldr	r3, [pc, #16]	@ (800dd4c <__sinit+0x28>)
 800dd3a:	6223      	str	r3, [r4, #32]
 800dd3c:	4b04      	ldr	r3, [pc, #16]	@ (800dd50 <__sinit+0x2c>)
 800dd3e:	681b      	ldr	r3, [r3, #0]
 800dd40:	2b00      	cmp	r3, #0
 800dd42:	d1f5      	bne.n	800dd30 <__sinit+0xc>
 800dd44:	f7ff ffc4 	bl	800dcd0 <global_stdio_init.part.0>
 800dd48:	e7f2      	b.n	800dd30 <__sinit+0xc>
 800dd4a:	bf00      	nop
 800dd4c:	0800dc91 	.word	0x0800dc91
 800dd50:	20000694 	.word	0x20000694

0800dd54 <_fwalk_sglue>:
 800dd54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dd58:	4607      	mov	r7, r0
 800dd5a:	4688      	mov	r8, r1
 800dd5c:	4614      	mov	r4, r2
 800dd5e:	2600      	movs	r6, #0
 800dd60:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800dd64:	f1b9 0901 	subs.w	r9, r9, #1
 800dd68:	d505      	bpl.n	800dd76 <_fwalk_sglue+0x22>
 800dd6a:	6824      	ldr	r4, [r4, #0]
 800dd6c:	2c00      	cmp	r4, #0
 800dd6e:	d1f7      	bne.n	800dd60 <_fwalk_sglue+0xc>
 800dd70:	4630      	mov	r0, r6
 800dd72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dd76:	89ab      	ldrh	r3, [r5, #12]
 800dd78:	2b01      	cmp	r3, #1
 800dd7a:	d907      	bls.n	800dd8c <_fwalk_sglue+0x38>
 800dd7c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800dd80:	3301      	adds	r3, #1
 800dd82:	d003      	beq.n	800dd8c <_fwalk_sglue+0x38>
 800dd84:	4629      	mov	r1, r5
 800dd86:	4638      	mov	r0, r7
 800dd88:	47c0      	blx	r8
 800dd8a:	4306      	orrs	r6, r0
 800dd8c:	3568      	adds	r5, #104	@ 0x68
 800dd8e:	e7e9      	b.n	800dd64 <_fwalk_sglue+0x10>

0800dd90 <iprintf>:
 800dd90:	b40f      	push	{r0, r1, r2, r3}
 800dd92:	b507      	push	{r0, r1, r2, lr}
 800dd94:	4906      	ldr	r1, [pc, #24]	@ (800ddb0 <iprintf+0x20>)
 800dd96:	ab04      	add	r3, sp, #16
 800dd98:	6808      	ldr	r0, [r1, #0]
 800dd9a:	f853 2b04 	ldr.w	r2, [r3], #4
 800dd9e:	6881      	ldr	r1, [r0, #8]
 800dda0:	9301      	str	r3, [sp, #4]
 800dda2:	f001 f891 	bl	800eec8 <_vfiprintf_r>
 800dda6:	b003      	add	sp, #12
 800dda8:	f85d eb04 	ldr.w	lr, [sp], #4
 800ddac:	b004      	add	sp, #16
 800ddae:	4770      	bx	lr
 800ddb0:	20000040 	.word	0x20000040

0800ddb4 <_puts_r>:
 800ddb4:	6a03      	ldr	r3, [r0, #32]
 800ddb6:	b570      	push	{r4, r5, r6, lr}
 800ddb8:	4605      	mov	r5, r0
 800ddba:	460e      	mov	r6, r1
 800ddbc:	6884      	ldr	r4, [r0, #8]
 800ddbe:	b90b      	cbnz	r3, 800ddc4 <_puts_r+0x10>
 800ddc0:	f7ff ffb0 	bl	800dd24 <__sinit>
 800ddc4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ddc6:	07db      	lsls	r3, r3, #31
 800ddc8:	d405      	bmi.n	800ddd6 <_puts_r+0x22>
 800ddca:	89a3      	ldrh	r3, [r4, #12]
 800ddcc:	0598      	lsls	r0, r3, #22
 800ddce:	d402      	bmi.n	800ddd6 <_puts_r+0x22>
 800ddd0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ddd2:	f000 f880 	bl	800ded6 <__retarget_lock_acquire_recursive>
 800ddd6:	89a3      	ldrh	r3, [r4, #12]
 800ddd8:	0719      	lsls	r1, r3, #28
 800ddda:	d502      	bpl.n	800dde2 <_puts_r+0x2e>
 800dddc:	6923      	ldr	r3, [r4, #16]
 800ddde:	2b00      	cmp	r3, #0
 800dde0:	d135      	bne.n	800de4e <_puts_r+0x9a>
 800dde2:	4621      	mov	r1, r4
 800dde4:	4628      	mov	r0, r5
 800dde6:	f001 ff1b 	bl	800fc20 <__swsetup_r>
 800ddea:	b380      	cbz	r0, 800de4e <_puts_r+0x9a>
 800ddec:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 800ddf0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ddf2:	07da      	lsls	r2, r3, #31
 800ddf4:	d405      	bmi.n	800de02 <_puts_r+0x4e>
 800ddf6:	89a3      	ldrh	r3, [r4, #12]
 800ddf8:	059b      	lsls	r3, r3, #22
 800ddfa:	d402      	bmi.n	800de02 <_puts_r+0x4e>
 800ddfc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ddfe:	f000 f86b 	bl	800ded8 <__retarget_lock_release_recursive>
 800de02:	4628      	mov	r0, r5
 800de04:	bd70      	pop	{r4, r5, r6, pc}
 800de06:	2b00      	cmp	r3, #0
 800de08:	da04      	bge.n	800de14 <_puts_r+0x60>
 800de0a:	69a2      	ldr	r2, [r4, #24]
 800de0c:	429a      	cmp	r2, r3
 800de0e:	dc17      	bgt.n	800de40 <_puts_r+0x8c>
 800de10:	290a      	cmp	r1, #10
 800de12:	d015      	beq.n	800de40 <_puts_r+0x8c>
 800de14:	6823      	ldr	r3, [r4, #0]
 800de16:	1c5a      	adds	r2, r3, #1
 800de18:	6022      	str	r2, [r4, #0]
 800de1a:	7019      	strb	r1, [r3, #0]
 800de1c:	68a3      	ldr	r3, [r4, #8]
 800de1e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800de22:	3b01      	subs	r3, #1
 800de24:	60a3      	str	r3, [r4, #8]
 800de26:	2900      	cmp	r1, #0
 800de28:	d1ed      	bne.n	800de06 <_puts_r+0x52>
 800de2a:	2b00      	cmp	r3, #0
 800de2c:	da11      	bge.n	800de52 <_puts_r+0x9e>
 800de2e:	4622      	mov	r2, r4
 800de30:	210a      	movs	r1, #10
 800de32:	4628      	mov	r0, r5
 800de34:	f001 feb5 	bl	800fba2 <__swbuf_r>
 800de38:	3001      	adds	r0, #1
 800de3a:	d0d7      	beq.n	800ddec <_puts_r+0x38>
 800de3c:	250a      	movs	r5, #10
 800de3e:	e7d7      	b.n	800ddf0 <_puts_r+0x3c>
 800de40:	4622      	mov	r2, r4
 800de42:	4628      	mov	r0, r5
 800de44:	f001 fead 	bl	800fba2 <__swbuf_r>
 800de48:	3001      	adds	r0, #1
 800de4a:	d1e7      	bne.n	800de1c <_puts_r+0x68>
 800de4c:	e7ce      	b.n	800ddec <_puts_r+0x38>
 800de4e:	3e01      	subs	r6, #1
 800de50:	e7e4      	b.n	800de1c <_puts_r+0x68>
 800de52:	6823      	ldr	r3, [r4, #0]
 800de54:	1c5a      	adds	r2, r3, #1
 800de56:	6022      	str	r2, [r4, #0]
 800de58:	220a      	movs	r2, #10
 800de5a:	701a      	strb	r2, [r3, #0]
 800de5c:	e7ee      	b.n	800de3c <_puts_r+0x88>
	...

0800de60 <puts>:
 800de60:	4b02      	ldr	r3, [pc, #8]	@ (800de6c <puts+0xc>)
 800de62:	4601      	mov	r1, r0
 800de64:	6818      	ldr	r0, [r3, #0]
 800de66:	f7ff bfa5 	b.w	800ddb4 <_puts_r>
 800de6a:	bf00      	nop
 800de6c:	20000040 	.word	0x20000040

0800de70 <memset>:
 800de70:	4402      	add	r2, r0
 800de72:	4603      	mov	r3, r0
 800de74:	4293      	cmp	r3, r2
 800de76:	d100      	bne.n	800de7a <memset+0xa>
 800de78:	4770      	bx	lr
 800de7a:	f803 1b01 	strb.w	r1, [r3], #1
 800de7e:	e7f9      	b.n	800de74 <memset+0x4>

0800de80 <__errno>:
 800de80:	4b01      	ldr	r3, [pc, #4]	@ (800de88 <__errno+0x8>)
 800de82:	6818      	ldr	r0, [r3, #0]
 800de84:	4770      	bx	lr
 800de86:	bf00      	nop
 800de88:	20000040 	.word	0x20000040

0800de8c <__libc_init_array>:
 800de8c:	b570      	push	{r4, r5, r6, lr}
 800de8e:	4d0d      	ldr	r5, [pc, #52]	@ (800dec4 <__libc_init_array+0x38>)
 800de90:	2600      	movs	r6, #0
 800de92:	4c0d      	ldr	r4, [pc, #52]	@ (800dec8 <__libc_init_array+0x3c>)
 800de94:	1b64      	subs	r4, r4, r5
 800de96:	10a4      	asrs	r4, r4, #2
 800de98:	42a6      	cmp	r6, r4
 800de9a:	d109      	bne.n	800deb0 <__libc_init_array+0x24>
 800de9c:	4d0b      	ldr	r5, [pc, #44]	@ (800decc <__libc_init_array+0x40>)
 800de9e:	2600      	movs	r6, #0
 800dea0:	4c0b      	ldr	r4, [pc, #44]	@ (800ded0 <__libc_init_array+0x44>)
 800dea2:	f002 f915 	bl	80100d0 <_init>
 800dea6:	1b64      	subs	r4, r4, r5
 800dea8:	10a4      	asrs	r4, r4, #2
 800deaa:	42a6      	cmp	r6, r4
 800deac:	d105      	bne.n	800deba <__libc_init_array+0x2e>
 800deae:	bd70      	pop	{r4, r5, r6, pc}
 800deb0:	f855 3b04 	ldr.w	r3, [r5], #4
 800deb4:	3601      	adds	r6, #1
 800deb6:	4798      	blx	r3
 800deb8:	e7ee      	b.n	800de98 <__libc_init_array+0xc>
 800deba:	f855 3b04 	ldr.w	r3, [r5], #4
 800debe:	3601      	adds	r6, #1
 800dec0:	4798      	blx	r3
 800dec2:	e7f2      	b.n	800deaa <__libc_init_array+0x1e>
 800dec4:	0801136c 	.word	0x0801136c
 800dec8:	0801136c 	.word	0x0801136c
 800decc:	0801136c 	.word	0x0801136c
 800ded0:	08011370 	.word	0x08011370

0800ded4 <__retarget_lock_init_recursive>:
 800ded4:	4770      	bx	lr

0800ded6 <__retarget_lock_acquire_recursive>:
 800ded6:	4770      	bx	lr

0800ded8 <__retarget_lock_release_recursive>:
 800ded8:	4770      	bx	lr
	...

0800dedc <_localeconv_r>:
 800dedc:	4800      	ldr	r0, [pc, #0]	@ (800dee0 <_localeconv_r+0x4>)
 800dede:	4770      	bx	lr
 800dee0:	20000180 	.word	0x20000180

0800dee4 <memchr>:
 800dee4:	b2c9      	uxtb	r1, r1
 800dee6:	4603      	mov	r3, r0
 800dee8:	4402      	add	r2, r0
 800deea:	b510      	push	{r4, lr}
 800deec:	4293      	cmp	r3, r2
 800deee:	4618      	mov	r0, r3
 800def0:	d101      	bne.n	800def6 <memchr+0x12>
 800def2:	2000      	movs	r0, #0
 800def4:	e003      	b.n	800defe <memchr+0x1a>
 800def6:	7804      	ldrb	r4, [r0, #0]
 800def8:	3301      	adds	r3, #1
 800defa:	428c      	cmp	r4, r1
 800defc:	d1f6      	bne.n	800deec <memchr+0x8>
 800defe:	bd10      	pop	{r4, pc}

0800df00 <quorem>:
 800df00:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800df04:	6903      	ldr	r3, [r0, #16]
 800df06:	4607      	mov	r7, r0
 800df08:	690c      	ldr	r4, [r1, #16]
 800df0a:	42a3      	cmp	r3, r4
 800df0c:	f2c0 8083 	blt.w	800e016 <quorem+0x116>
 800df10:	3c01      	subs	r4, #1
 800df12:	f100 0514 	add.w	r5, r0, #20
 800df16:	f101 0814 	add.w	r8, r1, #20
 800df1a:	00a3      	lsls	r3, r4, #2
 800df1c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800df20:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800df24:	9300      	str	r3, [sp, #0]
 800df26:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800df2a:	9301      	str	r3, [sp, #4]
 800df2c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800df30:	3301      	adds	r3, #1
 800df32:	429a      	cmp	r2, r3
 800df34:	fbb2 f6f3 	udiv	r6, r2, r3
 800df38:	d331      	bcc.n	800df9e <quorem+0x9e>
 800df3a:	f04f 0a00 	mov.w	sl, #0
 800df3e:	46c4      	mov	ip, r8
 800df40:	46ae      	mov	lr, r5
 800df42:	46d3      	mov	fp, sl
 800df44:	f85c 3b04 	ldr.w	r3, [ip], #4
 800df48:	b298      	uxth	r0, r3
 800df4a:	45e1      	cmp	r9, ip
 800df4c:	ea4f 4313 	mov.w	r3, r3, lsr #16
 800df50:	fb06 a000 	mla	r0, r6, r0, sl
 800df54:	ea4f 4210 	mov.w	r2, r0, lsr #16
 800df58:	b280      	uxth	r0, r0
 800df5a:	fb06 2303 	mla	r3, r6, r3, r2
 800df5e:	f8de 2000 	ldr.w	r2, [lr]
 800df62:	b292      	uxth	r2, r2
 800df64:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800df68:	eba2 0200 	sub.w	r2, r2, r0
 800df6c:	b29b      	uxth	r3, r3
 800df6e:	f8de 0000 	ldr.w	r0, [lr]
 800df72:	445a      	add	r2, fp
 800df74:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800df78:	b292      	uxth	r2, r2
 800df7a:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800df7e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800df82:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800df86:	f84e 2b04 	str.w	r2, [lr], #4
 800df8a:	d2db      	bcs.n	800df44 <quorem+0x44>
 800df8c:	9b00      	ldr	r3, [sp, #0]
 800df8e:	58eb      	ldr	r3, [r5, r3]
 800df90:	b92b      	cbnz	r3, 800df9e <quorem+0x9e>
 800df92:	9b01      	ldr	r3, [sp, #4]
 800df94:	3b04      	subs	r3, #4
 800df96:	429d      	cmp	r5, r3
 800df98:	461a      	mov	r2, r3
 800df9a:	d330      	bcc.n	800dffe <quorem+0xfe>
 800df9c:	613c      	str	r4, [r7, #16]
 800df9e:	4638      	mov	r0, r7
 800dfa0:	f001 fc82 	bl	800f8a8 <__mcmp>
 800dfa4:	2800      	cmp	r0, #0
 800dfa6:	db26      	blt.n	800dff6 <quorem+0xf6>
 800dfa8:	4629      	mov	r1, r5
 800dfaa:	2000      	movs	r0, #0
 800dfac:	f858 2b04 	ldr.w	r2, [r8], #4
 800dfb0:	f8d1 c000 	ldr.w	ip, [r1]
 800dfb4:	fa1f fe82 	uxth.w	lr, r2
 800dfb8:	45c1      	cmp	r9, r8
 800dfba:	fa1f f38c 	uxth.w	r3, ip
 800dfbe:	ea4f 4212 	mov.w	r2, r2, lsr #16
 800dfc2:	eba3 030e 	sub.w	r3, r3, lr
 800dfc6:	4403      	add	r3, r0
 800dfc8:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800dfcc:	b29b      	uxth	r3, r3
 800dfce:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800dfd2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800dfd6:	ea4f 4022 	mov.w	r0, r2, asr #16
 800dfda:	f841 3b04 	str.w	r3, [r1], #4
 800dfde:	d2e5      	bcs.n	800dfac <quorem+0xac>
 800dfe0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800dfe4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800dfe8:	b922      	cbnz	r2, 800dff4 <quorem+0xf4>
 800dfea:	3b04      	subs	r3, #4
 800dfec:	429d      	cmp	r5, r3
 800dfee:	461a      	mov	r2, r3
 800dff0:	d30b      	bcc.n	800e00a <quorem+0x10a>
 800dff2:	613c      	str	r4, [r7, #16]
 800dff4:	3601      	adds	r6, #1
 800dff6:	4630      	mov	r0, r6
 800dff8:	b003      	add	sp, #12
 800dffa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dffe:	6812      	ldr	r2, [r2, #0]
 800e000:	3b04      	subs	r3, #4
 800e002:	2a00      	cmp	r2, #0
 800e004:	d1ca      	bne.n	800df9c <quorem+0x9c>
 800e006:	3c01      	subs	r4, #1
 800e008:	e7c5      	b.n	800df96 <quorem+0x96>
 800e00a:	6812      	ldr	r2, [r2, #0]
 800e00c:	3b04      	subs	r3, #4
 800e00e:	2a00      	cmp	r2, #0
 800e010:	d1ef      	bne.n	800dff2 <quorem+0xf2>
 800e012:	3c01      	subs	r4, #1
 800e014:	e7ea      	b.n	800dfec <quorem+0xec>
 800e016:	2000      	movs	r0, #0
 800e018:	e7ee      	b.n	800dff8 <quorem+0xf8>
 800e01a:	0000      	movs	r0, r0
 800e01c:	0000      	movs	r0, r0
	...

0800e020 <_dtoa_r>:
 800e020:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e024:	69c7      	ldr	r7, [r0, #28]
 800e026:	b097      	sub	sp, #92	@ 0x5c
 800e028:	4681      	mov	r9, r0
 800e02a:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800e02c:	9107      	str	r1, [sp, #28]
 800e02e:	920c      	str	r2, [sp, #48]	@ 0x30
 800e030:	9311      	str	r3, [sp, #68]	@ 0x44
 800e032:	ec55 4b10 	vmov	r4, r5, d0
 800e036:	ed8d 0b04 	vstr	d0, [sp, #16]
 800e03a:	b97f      	cbnz	r7, 800e05c <_dtoa_r+0x3c>
 800e03c:	2010      	movs	r0, #16
 800e03e:	f001 f85b 	bl	800f0f8 <malloc>
 800e042:	4602      	mov	r2, r0
 800e044:	f8c9 001c 	str.w	r0, [r9, #28]
 800e048:	b920      	cbnz	r0, 800e054 <_dtoa_r+0x34>
 800e04a:	4ba9      	ldr	r3, [pc, #676]	@ (800e2f0 <_dtoa_r+0x2d0>)
 800e04c:	21ef      	movs	r1, #239	@ 0xef
 800e04e:	48a9      	ldr	r0, [pc, #676]	@ (800e2f4 <_dtoa_r+0x2d4>)
 800e050:	f001 ff3e 	bl	800fed0 <__assert_func>
 800e054:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800e058:	6007      	str	r7, [r0, #0]
 800e05a:	60c7      	str	r7, [r0, #12]
 800e05c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800e060:	6819      	ldr	r1, [r3, #0]
 800e062:	b159      	cbz	r1, 800e07c <_dtoa_r+0x5c>
 800e064:	685a      	ldr	r2, [r3, #4]
 800e066:	2301      	movs	r3, #1
 800e068:	4648      	mov	r0, r9
 800e06a:	4093      	lsls	r3, r2
 800e06c:	604a      	str	r2, [r1, #4]
 800e06e:	608b      	str	r3, [r1, #8]
 800e070:	f001 f9e4 	bl	800f43c <_Bfree>
 800e074:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800e078:	2200      	movs	r2, #0
 800e07a:	601a      	str	r2, [r3, #0]
 800e07c:	1e2b      	subs	r3, r5, #0
 800e07e:	bfb7      	itett	lt
 800e080:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800e084:	2300      	movge	r3, #0
 800e086:	2201      	movlt	r2, #1
 800e088:	9305      	strlt	r3, [sp, #20]
 800e08a:	bfa8      	it	ge
 800e08c:	6033      	strge	r3, [r6, #0]
 800e08e:	9f05      	ldr	r7, [sp, #20]
 800e090:	4b99      	ldr	r3, [pc, #612]	@ (800e2f8 <_dtoa_r+0x2d8>)
 800e092:	bfb8      	it	lt
 800e094:	6032      	strlt	r2, [r6, #0]
 800e096:	43bb      	bics	r3, r7
 800e098:	d112      	bne.n	800e0c0 <_dtoa_r+0xa0>
 800e09a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800e09e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800e0a0:	6013      	str	r3, [r2, #0]
 800e0a2:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800e0a6:	4323      	orrs	r3, r4
 800e0a8:	f000 855a 	beq.w	800eb60 <_dtoa_r+0xb40>
 800e0ac:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800e0ae:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 800e30c <_dtoa_r+0x2ec>
 800e0b2:	2b00      	cmp	r3, #0
 800e0b4:	f000 855c 	beq.w	800eb70 <_dtoa_r+0xb50>
 800e0b8:	f10a 0303 	add.w	r3, sl, #3
 800e0bc:	f000 bd56 	b.w	800eb6c <_dtoa_r+0xb4c>
 800e0c0:	ed9d 7b04 	vldr	d7, [sp, #16]
 800e0c4:	2200      	movs	r2, #0
 800e0c6:	2300      	movs	r3, #0
 800e0c8:	ec51 0b17 	vmov	r0, r1, d7
 800e0cc:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800e0d0:	f7f2 fcfe 	bl	8000ad0 <__aeabi_dcmpeq>
 800e0d4:	4680      	mov	r8, r0
 800e0d6:	b158      	cbz	r0, 800e0f0 <_dtoa_r+0xd0>
 800e0d8:	2301      	movs	r3, #1
 800e0da:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800e0dc:	6013      	str	r3, [r2, #0]
 800e0de:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800e0e0:	b113      	cbz	r3, 800e0e8 <_dtoa_r+0xc8>
 800e0e2:	4b86      	ldr	r3, [pc, #536]	@ (800e2fc <_dtoa_r+0x2dc>)
 800e0e4:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800e0e6:	6013      	str	r3, [r2, #0]
 800e0e8:	f8df a224 	ldr.w	sl, [pc, #548]	@ 800e310 <_dtoa_r+0x2f0>
 800e0ec:	f000 bd40 	b.w	800eb70 <_dtoa_r+0xb50>
 800e0f0:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800e0f4:	aa14      	add	r2, sp, #80	@ 0x50
 800e0f6:	a915      	add	r1, sp, #84	@ 0x54
 800e0f8:	4648      	mov	r0, r9
 800e0fa:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 800e0fe:	f001 fc87 	bl	800fa10 <__d2b>
 800e102:	9002      	str	r0, [sp, #8]
 800e104:	2e00      	cmp	r6, #0
 800e106:	d076      	beq.n	800e1f6 <_dtoa_r+0x1d6>
 800e108:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e10a:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800e10e:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 800e112:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e116:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800e11a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800e11e:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800e122:	4619      	mov	r1, r3
 800e124:	2200      	movs	r2, #0
 800e126:	4b76      	ldr	r3, [pc, #472]	@ (800e300 <_dtoa_r+0x2e0>)
 800e128:	f7f2 f8b2 	bl	8000290 <__aeabi_dsub>
 800e12c:	a36a      	add	r3, pc, #424	@ (adr r3, 800e2d8 <_dtoa_r+0x2b8>)
 800e12e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e132:	f7f2 fa65 	bl	8000600 <__aeabi_dmul>
 800e136:	a36a      	add	r3, pc, #424	@ (adr r3, 800e2e0 <_dtoa_r+0x2c0>)
 800e138:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e13c:	f7f2 f8aa 	bl	8000294 <__adddf3>
 800e140:	4604      	mov	r4, r0
 800e142:	460d      	mov	r5, r1
 800e144:	4630      	mov	r0, r6
 800e146:	f7f2 f9f1 	bl	800052c <__aeabi_i2d>
 800e14a:	a367      	add	r3, pc, #412	@ (adr r3, 800e2e8 <_dtoa_r+0x2c8>)
 800e14c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e150:	f7f2 fa56 	bl	8000600 <__aeabi_dmul>
 800e154:	4602      	mov	r2, r0
 800e156:	460b      	mov	r3, r1
 800e158:	4620      	mov	r0, r4
 800e15a:	4629      	mov	r1, r5
 800e15c:	f7f2 f89a 	bl	8000294 <__adddf3>
 800e160:	4604      	mov	r4, r0
 800e162:	460d      	mov	r5, r1
 800e164:	f7f2 fcfc 	bl	8000b60 <__aeabi_d2iz>
 800e168:	2200      	movs	r2, #0
 800e16a:	4607      	mov	r7, r0
 800e16c:	2300      	movs	r3, #0
 800e16e:	4620      	mov	r0, r4
 800e170:	4629      	mov	r1, r5
 800e172:	f7f2 fcb7 	bl	8000ae4 <__aeabi_dcmplt>
 800e176:	b140      	cbz	r0, 800e18a <_dtoa_r+0x16a>
 800e178:	4638      	mov	r0, r7
 800e17a:	f7f2 f9d7 	bl	800052c <__aeabi_i2d>
 800e17e:	4622      	mov	r2, r4
 800e180:	462b      	mov	r3, r5
 800e182:	f7f2 fca5 	bl	8000ad0 <__aeabi_dcmpeq>
 800e186:	b900      	cbnz	r0, 800e18a <_dtoa_r+0x16a>
 800e188:	3f01      	subs	r7, #1
 800e18a:	2f16      	cmp	r7, #22
 800e18c:	d852      	bhi.n	800e234 <_dtoa_r+0x214>
 800e18e:	4b5d      	ldr	r3, [pc, #372]	@ (800e304 <_dtoa_r+0x2e4>)
 800e190:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800e194:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800e198:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e19c:	f7f2 fca2 	bl	8000ae4 <__aeabi_dcmplt>
 800e1a0:	2800      	cmp	r0, #0
 800e1a2:	d049      	beq.n	800e238 <_dtoa_r+0x218>
 800e1a4:	3f01      	subs	r7, #1
 800e1a6:	2300      	movs	r3, #0
 800e1a8:	9310      	str	r3, [sp, #64]	@ 0x40
 800e1aa:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800e1ac:	1b9b      	subs	r3, r3, r6
 800e1ae:	1e5a      	subs	r2, r3, #1
 800e1b0:	bf4c      	ite	mi
 800e1b2:	f1c3 0301 	rsbmi	r3, r3, #1
 800e1b6:	2300      	movpl	r3, #0
 800e1b8:	9206      	str	r2, [sp, #24]
 800e1ba:	bf45      	ittet	mi
 800e1bc:	9300      	strmi	r3, [sp, #0]
 800e1be:	2300      	movmi	r3, #0
 800e1c0:	9300      	strpl	r3, [sp, #0]
 800e1c2:	9306      	strmi	r3, [sp, #24]
 800e1c4:	2f00      	cmp	r7, #0
 800e1c6:	db39      	blt.n	800e23c <_dtoa_r+0x21c>
 800e1c8:	9b06      	ldr	r3, [sp, #24]
 800e1ca:	970d      	str	r7, [sp, #52]	@ 0x34
 800e1cc:	443b      	add	r3, r7
 800e1ce:	9306      	str	r3, [sp, #24]
 800e1d0:	2300      	movs	r3, #0
 800e1d2:	9308      	str	r3, [sp, #32]
 800e1d4:	9b07      	ldr	r3, [sp, #28]
 800e1d6:	2b09      	cmp	r3, #9
 800e1d8:	d863      	bhi.n	800e2a2 <_dtoa_r+0x282>
 800e1da:	2b05      	cmp	r3, #5
 800e1dc:	bfc5      	ittet	gt
 800e1de:	3b04      	subgt	r3, #4
 800e1e0:	2400      	movgt	r4, #0
 800e1e2:	2401      	movle	r4, #1
 800e1e4:	9307      	strgt	r3, [sp, #28]
 800e1e6:	9b07      	ldr	r3, [sp, #28]
 800e1e8:	3b02      	subs	r3, #2
 800e1ea:	2b03      	cmp	r3, #3
 800e1ec:	d865      	bhi.n	800e2ba <_dtoa_r+0x29a>
 800e1ee:	e8df f003 	tbb	[pc, r3]
 800e1f2:	5654      	.short	0x5654
 800e1f4:	2d39      	.short	0x2d39
 800e1f6:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800e1fa:	441e      	add	r6, r3
 800e1fc:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800e200:	2b20      	cmp	r3, #32
 800e202:	bfc9      	itett	gt
 800e204:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800e208:	f1c3 0320 	rsble	r3, r3, #32
 800e20c:	409f      	lslgt	r7, r3
 800e20e:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800e212:	bfd8      	it	le
 800e214:	fa04 f003 	lslle.w	r0, r4, r3
 800e218:	f106 36ff 	add.w	r6, r6, #4294967295	@ 0xffffffff
 800e21c:	bfc4      	itt	gt
 800e21e:	fa24 f303 	lsrgt.w	r3, r4, r3
 800e222:	ea47 0003 	orrgt.w	r0, r7, r3
 800e226:	f7f2 f971 	bl	800050c <__aeabi_ui2d>
 800e22a:	2201      	movs	r2, #1
 800e22c:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800e230:	9212      	str	r2, [sp, #72]	@ 0x48
 800e232:	e776      	b.n	800e122 <_dtoa_r+0x102>
 800e234:	2301      	movs	r3, #1
 800e236:	e7b7      	b.n	800e1a8 <_dtoa_r+0x188>
 800e238:	9010      	str	r0, [sp, #64]	@ 0x40
 800e23a:	e7b6      	b.n	800e1aa <_dtoa_r+0x18a>
 800e23c:	9b00      	ldr	r3, [sp, #0]
 800e23e:	1bdb      	subs	r3, r3, r7
 800e240:	9300      	str	r3, [sp, #0]
 800e242:	427b      	negs	r3, r7
 800e244:	9308      	str	r3, [sp, #32]
 800e246:	2300      	movs	r3, #0
 800e248:	930d      	str	r3, [sp, #52]	@ 0x34
 800e24a:	e7c3      	b.n	800e1d4 <_dtoa_r+0x1b4>
 800e24c:	2301      	movs	r3, #1
 800e24e:	9309      	str	r3, [sp, #36]	@ 0x24
 800e250:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800e252:	eb07 0b03 	add.w	fp, r7, r3
 800e256:	f10b 0301 	add.w	r3, fp, #1
 800e25a:	2b01      	cmp	r3, #1
 800e25c:	9303      	str	r3, [sp, #12]
 800e25e:	bfb8      	it	lt
 800e260:	2301      	movlt	r3, #1
 800e262:	e006      	b.n	800e272 <_dtoa_r+0x252>
 800e264:	2301      	movs	r3, #1
 800e266:	9309      	str	r3, [sp, #36]	@ 0x24
 800e268:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800e26a:	2b00      	cmp	r3, #0
 800e26c:	dd28      	ble.n	800e2c0 <_dtoa_r+0x2a0>
 800e26e:	469b      	mov	fp, r3
 800e270:	9303      	str	r3, [sp, #12]
 800e272:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800e276:	2100      	movs	r1, #0
 800e278:	2204      	movs	r2, #4
 800e27a:	f102 0514 	add.w	r5, r2, #20
 800e27e:	429d      	cmp	r5, r3
 800e280:	d926      	bls.n	800e2d0 <_dtoa_r+0x2b0>
 800e282:	6041      	str	r1, [r0, #4]
 800e284:	4648      	mov	r0, r9
 800e286:	f001 f899 	bl	800f3bc <_Balloc>
 800e28a:	4682      	mov	sl, r0
 800e28c:	2800      	cmp	r0, #0
 800e28e:	d141      	bne.n	800e314 <_dtoa_r+0x2f4>
 800e290:	4b1d      	ldr	r3, [pc, #116]	@ (800e308 <_dtoa_r+0x2e8>)
 800e292:	4602      	mov	r2, r0
 800e294:	f240 11af 	movw	r1, #431	@ 0x1af
 800e298:	e6d9      	b.n	800e04e <_dtoa_r+0x2e>
 800e29a:	2300      	movs	r3, #0
 800e29c:	e7e3      	b.n	800e266 <_dtoa_r+0x246>
 800e29e:	2300      	movs	r3, #0
 800e2a0:	e7d5      	b.n	800e24e <_dtoa_r+0x22e>
 800e2a2:	2401      	movs	r4, #1
 800e2a4:	2300      	movs	r3, #0
 800e2a6:	9409      	str	r4, [sp, #36]	@ 0x24
 800e2a8:	9307      	str	r3, [sp, #28]
 800e2aa:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
 800e2ae:	2200      	movs	r2, #0
 800e2b0:	2312      	movs	r3, #18
 800e2b2:	f8cd b00c 	str.w	fp, [sp, #12]
 800e2b6:	920c      	str	r2, [sp, #48]	@ 0x30
 800e2b8:	e7db      	b.n	800e272 <_dtoa_r+0x252>
 800e2ba:	2301      	movs	r3, #1
 800e2bc:	9309      	str	r3, [sp, #36]	@ 0x24
 800e2be:	e7f4      	b.n	800e2aa <_dtoa_r+0x28a>
 800e2c0:	f04f 0b01 	mov.w	fp, #1
 800e2c4:	465b      	mov	r3, fp
 800e2c6:	f8cd b00c 	str.w	fp, [sp, #12]
 800e2ca:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 800e2ce:	e7d0      	b.n	800e272 <_dtoa_r+0x252>
 800e2d0:	3101      	adds	r1, #1
 800e2d2:	0052      	lsls	r2, r2, #1
 800e2d4:	e7d1      	b.n	800e27a <_dtoa_r+0x25a>
 800e2d6:	bf00      	nop
 800e2d8:	636f4361 	.word	0x636f4361
 800e2dc:	3fd287a7 	.word	0x3fd287a7
 800e2e0:	8b60c8b3 	.word	0x8b60c8b3
 800e2e4:	3fc68a28 	.word	0x3fc68a28
 800e2e8:	509f79fb 	.word	0x509f79fb
 800e2ec:	3fd34413 	.word	0x3fd34413
 800e2f0:	08011031 	.word	0x08011031
 800e2f4:	08011048 	.word	0x08011048
 800e2f8:	7ff00000 	.word	0x7ff00000
 800e2fc:	08011001 	.word	0x08011001
 800e300:	3ff80000 	.word	0x3ff80000
 800e304:	08011198 	.word	0x08011198
 800e308:	080110a0 	.word	0x080110a0
 800e30c:	0801102d 	.word	0x0801102d
 800e310:	08011000 	.word	0x08011000
 800e314:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800e318:	6018      	str	r0, [r3, #0]
 800e31a:	9b03      	ldr	r3, [sp, #12]
 800e31c:	2b0e      	cmp	r3, #14
 800e31e:	f200 80a1 	bhi.w	800e464 <_dtoa_r+0x444>
 800e322:	2c00      	cmp	r4, #0
 800e324:	f000 809e 	beq.w	800e464 <_dtoa_r+0x444>
 800e328:	2f00      	cmp	r7, #0
 800e32a:	dd33      	ble.n	800e394 <_dtoa_r+0x374>
 800e32c:	f007 020f 	and.w	r2, r7, #15
 800e330:	4b9b      	ldr	r3, [pc, #620]	@ (800e5a0 <_dtoa_r+0x580>)
 800e332:	05f8      	lsls	r0, r7, #23
 800e334:	ea4f 1427 	mov.w	r4, r7, asr #4
 800e338:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e33c:	ed93 7b00 	vldr	d7, [r3]
 800e340:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 800e344:	d516      	bpl.n	800e374 <_dtoa_r+0x354>
 800e346:	4b97      	ldr	r3, [pc, #604]	@ (800e5a4 <_dtoa_r+0x584>)
 800e348:	f004 040f 	and.w	r4, r4, #15
 800e34c:	2603      	movs	r6, #3
 800e34e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800e352:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800e356:	f7f2 fa7d 	bl	8000854 <__aeabi_ddiv>
 800e35a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e35e:	4d91      	ldr	r5, [pc, #580]	@ (800e5a4 <_dtoa_r+0x584>)
 800e360:	b954      	cbnz	r4, 800e378 <_dtoa_r+0x358>
 800e362:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800e366:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e36a:	f7f2 fa73 	bl	8000854 <__aeabi_ddiv>
 800e36e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e372:	e028      	b.n	800e3c6 <_dtoa_r+0x3a6>
 800e374:	2602      	movs	r6, #2
 800e376:	e7f2      	b.n	800e35e <_dtoa_r+0x33e>
 800e378:	07e1      	lsls	r1, r4, #31
 800e37a:	d508      	bpl.n	800e38e <_dtoa_r+0x36e>
 800e37c:	3601      	adds	r6, #1
 800e37e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800e382:	e9d5 2300 	ldrd	r2, r3, [r5]
 800e386:	f7f2 f93b 	bl	8000600 <__aeabi_dmul>
 800e38a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800e38e:	1064      	asrs	r4, r4, #1
 800e390:	3508      	adds	r5, #8
 800e392:	e7e5      	b.n	800e360 <_dtoa_r+0x340>
 800e394:	f000 80af 	beq.w	800e4f6 <_dtoa_r+0x4d6>
 800e398:	427c      	negs	r4, r7
 800e39a:	4b81      	ldr	r3, [pc, #516]	@ (800e5a0 <_dtoa_r+0x580>)
 800e39c:	4d81      	ldr	r5, [pc, #516]	@ (800e5a4 <_dtoa_r+0x584>)
 800e39e:	2602      	movs	r6, #2
 800e3a0:	f004 020f 	and.w	r2, r4, #15
 800e3a4:	1124      	asrs	r4, r4, #4
 800e3a6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e3aa:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800e3ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e3b2:	f7f2 f925 	bl	8000600 <__aeabi_dmul>
 800e3b6:	2300      	movs	r3, #0
 800e3b8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e3bc:	2c00      	cmp	r4, #0
 800e3be:	f040 808f 	bne.w	800e4e0 <_dtoa_r+0x4c0>
 800e3c2:	2b00      	cmp	r3, #0
 800e3c4:	d1d3      	bne.n	800e36e <_dtoa_r+0x34e>
 800e3c6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800e3c8:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800e3cc:	2b00      	cmp	r3, #0
 800e3ce:	f000 8094 	beq.w	800e4fa <_dtoa_r+0x4da>
 800e3d2:	2200      	movs	r2, #0
 800e3d4:	4b74      	ldr	r3, [pc, #464]	@ (800e5a8 <_dtoa_r+0x588>)
 800e3d6:	4620      	mov	r0, r4
 800e3d8:	4629      	mov	r1, r5
 800e3da:	f7f2 fb83 	bl	8000ae4 <__aeabi_dcmplt>
 800e3de:	2800      	cmp	r0, #0
 800e3e0:	f000 808b 	beq.w	800e4fa <_dtoa_r+0x4da>
 800e3e4:	9b03      	ldr	r3, [sp, #12]
 800e3e6:	2b00      	cmp	r3, #0
 800e3e8:	f000 8087 	beq.w	800e4fa <_dtoa_r+0x4da>
 800e3ec:	f1bb 0f00 	cmp.w	fp, #0
 800e3f0:	dd34      	ble.n	800e45c <_dtoa_r+0x43c>
 800e3f2:	4620      	mov	r0, r4
 800e3f4:	f107 38ff 	add.w	r8, r7, #4294967295	@ 0xffffffff
 800e3f8:	3601      	adds	r6, #1
 800e3fa:	465c      	mov	r4, fp
 800e3fc:	2200      	movs	r2, #0
 800e3fe:	4b6b      	ldr	r3, [pc, #428]	@ (800e5ac <_dtoa_r+0x58c>)
 800e400:	4629      	mov	r1, r5
 800e402:	f7f2 f8fd 	bl	8000600 <__aeabi_dmul>
 800e406:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e40a:	4630      	mov	r0, r6
 800e40c:	f7f2 f88e 	bl	800052c <__aeabi_i2d>
 800e410:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e414:	f7f2 f8f4 	bl	8000600 <__aeabi_dmul>
 800e418:	2200      	movs	r2, #0
 800e41a:	4b65      	ldr	r3, [pc, #404]	@ (800e5b0 <_dtoa_r+0x590>)
 800e41c:	f7f1 ff3a 	bl	8000294 <__adddf3>
 800e420:	4605      	mov	r5, r0
 800e422:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800e426:	2c00      	cmp	r4, #0
 800e428:	d16a      	bne.n	800e500 <_dtoa_r+0x4e0>
 800e42a:	2200      	movs	r2, #0
 800e42c:	4b61      	ldr	r3, [pc, #388]	@ (800e5b4 <_dtoa_r+0x594>)
 800e42e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e432:	f7f1 ff2d 	bl	8000290 <__aeabi_dsub>
 800e436:	4602      	mov	r2, r0
 800e438:	460b      	mov	r3, r1
 800e43a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800e43e:	462a      	mov	r2, r5
 800e440:	4633      	mov	r3, r6
 800e442:	f7f2 fb6d 	bl	8000b20 <__aeabi_dcmpgt>
 800e446:	2800      	cmp	r0, #0
 800e448:	f040 8298 	bne.w	800e97c <_dtoa_r+0x95c>
 800e44c:	462a      	mov	r2, r5
 800e44e:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800e452:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e456:	f7f2 fb45 	bl	8000ae4 <__aeabi_dcmplt>
 800e45a:	bb38      	cbnz	r0, 800e4ac <_dtoa_r+0x48c>
 800e45c:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 800e460:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800e464:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800e466:	2b00      	cmp	r3, #0
 800e468:	f2c0 8157 	blt.w	800e71a <_dtoa_r+0x6fa>
 800e46c:	2f0e      	cmp	r7, #14
 800e46e:	f300 8154 	bgt.w	800e71a <_dtoa_r+0x6fa>
 800e472:	4b4b      	ldr	r3, [pc, #300]	@ (800e5a0 <_dtoa_r+0x580>)
 800e474:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800e478:	ed93 7b00 	vldr	d7, [r3]
 800e47c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800e47e:	2b00      	cmp	r3, #0
 800e480:	ed8d 7b00 	vstr	d7, [sp]
 800e484:	f280 80e5 	bge.w	800e652 <_dtoa_r+0x632>
 800e488:	9b03      	ldr	r3, [sp, #12]
 800e48a:	2b00      	cmp	r3, #0
 800e48c:	f300 80e1 	bgt.w	800e652 <_dtoa_r+0x632>
 800e490:	d10c      	bne.n	800e4ac <_dtoa_r+0x48c>
 800e492:	2200      	movs	r2, #0
 800e494:	4b47      	ldr	r3, [pc, #284]	@ (800e5b4 <_dtoa_r+0x594>)
 800e496:	ec51 0b17 	vmov	r0, r1, d7
 800e49a:	f7f2 f8b1 	bl	8000600 <__aeabi_dmul>
 800e49e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e4a2:	f7f2 fb33 	bl	8000b0c <__aeabi_dcmpge>
 800e4a6:	2800      	cmp	r0, #0
 800e4a8:	f000 8266 	beq.w	800e978 <_dtoa_r+0x958>
 800e4ac:	2400      	movs	r4, #0
 800e4ae:	4625      	mov	r5, r4
 800e4b0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800e4b2:	4656      	mov	r6, sl
 800e4b4:	ea6f 0803 	mvn.w	r8, r3
 800e4b8:	2700      	movs	r7, #0
 800e4ba:	4621      	mov	r1, r4
 800e4bc:	4648      	mov	r0, r9
 800e4be:	f000 ffbd 	bl	800f43c <_Bfree>
 800e4c2:	2d00      	cmp	r5, #0
 800e4c4:	f000 80bd 	beq.w	800e642 <_dtoa_r+0x622>
 800e4c8:	b12f      	cbz	r7, 800e4d6 <_dtoa_r+0x4b6>
 800e4ca:	42af      	cmp	r7, r5
 800e4cc:	d003      	beq.n	800e4d6 <_dtoa_r+0x4b6>
 800e4ce:	4639      	mov	r1, r7
 800e4d0:	4648      	mov	r0, r9
 800e4d2:	f000 ffb3 	bl	800f43c <_Bfree>
 800e4d6:	4629      	mov	r1, r5
 800e4d8:	4648      	mov	r0, r9
 800e4da:	f000 ffaf 	bl	800f43c <_Bfree>
 800e4de:	e0b0      	b.n	800e642 <_dtoa_r+0x622>
 800e4e0:	07e2      	lsls	r2, r4, #31
 800e4e2:	d505      	bpl.n	800e4f0 <_dtoa_r+0x4d0>
 800e4e4:	3601      	adds	r6, #1
 800e4e6:	e9d5 2300 	ldrd	r2, r3, [r5]
 800e4ea:	f7f2 f889 	bl	8000600 <__aeabi_dmul>
 800e4ee:	2301      	movs	r3, #1
 800e4f0:	1064      	asrs	r4, r4, #1
 800e4f2:	3508      	adds	r5, #8
 800e4f4:	e762      	b.n	800e3bc <_dtoa_r+0x39c>
 800e4f6:	2602      	movs	r6, #2
 800e4f8:	e765      	b.n	800e3c6 <_dtoa_r+0x3a6>
 800e4fa:	46b8      	mov	r8, r7
 800e4fc:	9c03      	ldr	r4, [sp, #12]
 800e4fe:	e784      	b.n	800e40a <_dtoa_r+0x3ea>
 800e500:	4b27      	ldr	r3, [pc, #156]	@ (800e5a0 <_dtoa_r+0x580>)
 800e502:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800e504:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800e508:	4454      	add	r4, sl
 800e50a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800e50e:	2900      	cmp	r1, #0
 800e510:	d054      	beq.n	800e5bc <_dtoa_r+0x59c>
 800e512:	2000      	movs	r0, #0
 800e514:	4928      	ldr	r1, [pc, #160]	@ (800e5b8 <_dtoa_r+0x598>)
 800e516:	f7f2 f99d 	bl	8000854 <__aeabi_ddiv>
 800e51a:	4633      	mov	r3, r6
 800e51c:	4656      	mov	r6, sl
 800e51e:	462a      	mov	r2, r5
 800e520:	f7f1 feb6 	bl	8000290 <__aeabi_dsub>
 800e524:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800e528:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e52c:	f7f2 fb18 	bl	8000b60 <__aeabi_d2iz>
 800e530:	4605      	mov	r5, r0
 800e532:	f7f1 fffb 	bl	800052c <__aeabi_i2d>
 800e536:	4602      	mov	r2, r0
 800e538:	460b      	mov	r3, r1
 800e53a:	3530      	adds	r5, #48	@ 0x30
 800e53c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e540:	f7f1 fea6 	bl	8000290 <__aeabi_dsub>
 800e544:	4602      	mov	r2, r0
 800e546:	460b      	mov	r3, r1
 800e548:	f806 5b01 	strb.w	r5, [r6], #1
 800e54c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800e550:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800e554:	f7f2 fac6 	bl	8000ae4 <__aeabi_dcmplt>
 800e558:	2800      	cmp	r0, #0
 800e55a:	d172      	bne.n	800e642 <_dtoa_r+0x622>
 800e55c:	2000      	movs	r0, #0
 800e55e:	4912      	ldr	r1, [pc, #72]	@ (800e5a8 <_dtoa_r+0x588>)
 800e560:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e564:	f7f1 fe94 	bl	8000290 <__aeabi_dsub>
 800e568:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800e56c:	f7f2 faba 	bl	8000ae4 <__aeabi_dcmplt>
 800e570:	2800      	cmp	r0, #0
 800e572:	f040 80b4 	bne.w	800e6de <_dtoa_r+0x6be>
 800e576:	42a6      	cmp	r6, r4
 800e578:	f43f af70 	beq.w	800e45c <_dtoa_r+0x43c>
 800e57c:	2200      	movs	r2, #0
 800e57e:	4b0b      	ldr	r3, [pc, #44]	@ (800e5ac <_dtoa_r+0x58c>)
 800e580:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800e584:	f7f2 f83c 	bl	8000600 <__aeabi_dmul>
 800e588:	2200      	movs	r2, #0
 800e58a:	4b08      	ldr	r3, [pc, #32]	@ (800e5ac <_dtoa_r+0x58c>)
 800e58c:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800e590:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e594:	f7f2 f834 	bl	8000600 <__aeabi_dmul>
 800e598:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e59c:	e7c4      	b.n	800e528 <_dtoa_r+0x508>
 800e59e:	bf00      	nop
 800e5a0:	08011198 	.word	0x08011198
 800e5a4:	08011170 	.word	0x08011170
 800e5a8:	3ff00000 	.word	0x3ff00000
 800e5ac:	40240000 	.word	0x40240000
 800e5b0:	401c0000 	.word	0x401c0000
 800e5b4:	40140000 	.word	0x40140000
 800e5b8:	3fe00000 	.word	0x3fe00000
 800e5bc:	4631      	mov	r1, r6
 800e5be:	4656      	mov	r6, sl
 800e5c0:	4628      	mov	r0, r5
 800e5c2:	f7f2 f81d 	bl	8000600 <__aeabi_dmul>
 800e5c6:	9413      	str	r4, [sp, #76]	@ 0x4c
 800e5c8:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800e5cc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e5d0:	f7f2 fac6 	bl	8000b60 <__aeabi_d2iz>
 800e5d4:	4605      	mov	r5, r0
 800e5d6:	f7f1 ffa9 	bl	800052c <__aeabi_i2d>
 800e5da:	4602      	mov	r2, r0
 800e5dc:	3530      	adds	r5, #48	@ 0x30
 800e5de:	460b      	mov	r3, r1
 800e5e0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e5e4:	f7f1 fe54 	bl	8000290 <__aeabi_dsub>
 800e5e8:	f806 5b01 	strb.w	r5, [r6], #1
 800e5ec:	4602      	mov	r2, r0
 800e5ee:	460b      	mov	r3, r1
 800e5f0:	42a6      	cmp	r6, r4
 800e5f2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800e5f6:	f04f 0200 	mov.w	r2, #0
 800e5fa:	d124      	bne.n	800e646 <_dtoa_r+0x626>
 800e5fc:	4baf      	ldr	r3, [pc, #700]	@ (800e8bc <_dtoa_r+0x89c>)
 800e5fe:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800e602:	f7f1 fe47 	bl	8000294 <__adddf3>
 800e606:	4602      	mov	r2, r0
 800e608:	460b      	mov	r3, r1
 800e60a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e60e:	f7f2 fa87 	bl	8000b20 <__aeabi_dcmpgt>
 800e612:	2800      	cmp	r0, #0
 800e614:	d163      	bne.n	800e6de <_dtoa_r+0x6be>
 800e616:	2000      	movs	r0, #0
 800e618:	49a8      	ldr	r1, [pc, #672]	@ (800e8bc <_dtoa_r+0x89c>)
 800e61a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800e61e:	f7f1 fe37 	bl	8000290 <__aeabi_dsub>
 800e622:	4602      	mov	r2, r0
 800e624:	460b      	mov	r3, r1
 800e626:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e62a:	f7f2 fa5b 	bl	8000ae4 <__aeabi_dcmplt>
 800e62e:	2800      	cmp	r0, #0
 800e630:	f43f af14 	beq.w	800e45c <_dtoa_r+0x43c>
 800e634:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800e636:	1e73      	subs	r3, r6, #1
 800e638:	9313      	str	r3, [sp, #76]	@ 0x4c
 800e63a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800e63e:	2b30      	cmp	r3, #48	@ 0x30
 800e640:	d0f8      	beq.n	800e634 <_dtoa_r+0x614>
 800e642:	4647      	mov	r7, r8
 800e644:	e03b      	b.n	800e6be <_dtoa_r+0x69e>
 800e646:	4b9e      	ldr	r3, [pc, #632]	@ (800e8c0 <_dtoa_r+0x8a0>)
 800e648:	f7f1 ffda 	bl	8000600 <__aeabi_dmul>
 800e64c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e650:	e7bc      	b.n	800e5cc <_dtoa_r+0x5ac>
 800e652:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800e656:	4656      	mov	r6, sl
 800e658:	4620      	mov	r0, r4
 800e65a:	4629      	mov	r1, r5
 800e65c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e660:	f7f2 f8f8 	bl	8000854 <__aeabi_ddiv>
 800e664:	f7f2 fa7c 	bl	8000b60 <__aeabi_d2iz>
 800e668:	4680      	mov	r8, r0
 800e66a:	f7f1 ff5f 	bl	800052c <__aeabi_i2d>
 800e66e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e672:	f7f1 ffc5 	bl	8000600 <__aeabi_dmul>
 800e676:	4602      	mov	r2, r0
 800e678:	4620      	mov	r0, r4
 800e67a:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800e67e:	460b      	mov	r3, r1
 800e680:	4629      	mov	r1, r5
 800e682:	f7f1 fe05 	bl	8000290 <__aeabi_dsub>
 800e686:	9d03      	ldr	r5, [sp, #12]
 800e688:	f806 4b01 	strb.w	r4, [r6], #1
 800e68c:	eba6 040a 	sub.w	r4, r6, sl
 800e690:	4602      	mov	r2, r0
 800e692:	460b      	mov	r3, r1
 800e694:	42a5      	cmp	r5, r4
 800e696:	d133      	bne.n	800e700 <_dtoa_r+0x6e0>
 800e698:	f7f1 fdfc 	bl	8000294 <__adddf3>
 800e69c:	4604      	mov	r4, r0
 800e69e:	460d      	mov	r5, r1
 800e6a0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e6a4:	f7f2 fa3c 	bl	8000b20 <__aeabi_dcmpgt>
 800e6a8:	b9c0      	cbnz	r0, 800e6dc <_dtoa_r+0x6bc>
 800e6aa:	4620      	mov	r0, r4
 800e6ac:	4629      	mov	r1, r5
 800e6ae:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e6b2:	f7f2 fa0d 	bl	8000ad0 <__aeabi_dcmpeq>
 800e6b6:	b110      	cbz	r0, 800e6be <_dtoa_r+0x69e>
 800e6b8:	f018 0f01 	tst.w	r8, #1
 800e6bc:	d10e      	bne.n	800e6dc <_dtoa_r+0x6bc>
 800e6be:	9902      	ldr	r1, [sp, #8]
 800e6c0:	4648      	mov	r0, r9
 800e6c2:	f000 febb 	bl	800f43c <_Bfree>
 800e6c6:	2300      	movs	r3, #0
 800e6c8:	3701      	adds	r7, #1
 800e6ca:	7033      	strb	r3, [r6, #0]
 800e6cc:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800e6ce:	601f      	str	r7, [r3, #0]
 800e6d0:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800e6d2:	2b00      	cmp	r3, #0
 800e6d4:	f000 824c 	beq.w	800eb70 <_dtoa_r+0xb50>
 800e6d8:	601e      	str	r6, [r3, #0]
 800e6da:	e249      	b.n	800eb70 <_dtoa_r+0xb50>
 800e6dc:	46b8      	mov	r8, r7
 800e6de:	4633      	mov	r3, r6
 800e6e0:	461e      	mov	r6, r3
 800e6e2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e6e6:	2a39      	cmp	r2, #57	@ 0x39
 800e6e8:	d106      	bne.n	800e6f8 <_dtoa_r+0x6d8>
 800e6ea:	459a      	cmp	sl, r3
 800e6ec:	d1f8      	bne.n	800e6e0 <_dtoa_r+0x6c0>
 800e6ee:	2230      	movs	r2, #48	@ 0x30
 800e6f0:	f108 0801 	add.w	r8, r8, #1
 800e6f4:	f88a 2000 	strb.w	r2, [sl]
 800e6f8:	781a      	ldrb	r2, [r3, #0]
 800e6fa:	3201      	adds	r2, #1
 800e6fc:	701a      	strb	r2, [r3, #0]
 800e6fe:	e7a0      	b.n	800e642 <_dtoa_r+0x622>
 800e700:	2200      	movs	r2, #0
 800e702:	4b6f      	ldr	r3, [pc, #444]	@ (800e8c0 <_dtoa_r+0x8a0>)
 800e704:	f7f1 ff7c 	bl	8000600 <__aeabi_dmul>
 800e708:	2200      	movs	r2, #0
 800e70a:	2300      	movs	r3, #0
 800e70c:	4604      	mov	r4, r0
 800e70e:	460d      	mov	r5, r1
 800e710:	f7f2 f9de 	bl	8000ad0 <__aeabi_dcmpeq>
 800e714:	2800      	cmp	r0, #0
 800e716:	d09f      	beq.n	800e658 <_dtoa_r+0x638>
 800e718:	e7d1      	b.n	800e6be <_dtoa_r+0x69e>
 800e71a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e71c:	2a00      	cmp	r2, #0
 800e71e:	f000 80ea 	beq.w	800e8f6 <_dtoa_r+0x8d6>
 800e722:	9a07      	ldr	r2, [sp, #28]
 800e724:	2a01      	cmp	r2, #1
 800e726:	f300 80cd 	bgt.w	800e8c4 <_dtoa_r+0x8a4>
 800e72a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800e72c:	2a00      	cmp	r2, #0
 800e72e:	f000 80c1 	beq.w	800e8b4 <_dtoa_r+0x894>
 800e732:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800e736:	9c08      	ldr	r4, [sp, #32]
 800e738:	9e00      	ldr	r6, [sp, #0]
 800e73a:	9a00      	ldr	r2, [sp, #0]
 800e73c:	2101      	movs	r1, #1
 800e73e:	4648      	mov	r0, r9
 800e740:	441a      	add	r2, r3
 800e742:	9200      	str	r2, [sp, #0]
 800e744:	9a06      	ldr	r2, [sp, #24]
 800e746:	441a      	add	r2, r3
 800e748:	9206      	str	r2, [sp, #24]
 800e74a:	f000 ff2d 	bl	800f5a8 <__i2b>
 800e74e:	4605      	mov	r5, r0
 800e750:	b166      	cbz	r6, 800e76c <_dtoa_r+0x74c>
 800e752:	9b06      	ldr	r3, [sp, #24]
 800e754:	2b00      	cmp	r3, #0
 800e756:	dd09      	ble.n	800e76c <_dtoa_r+0x74c>
 800e758:	42b3      	cmp	r3, r6
 800e75a:	9a00      	ldr	r2, [sp, #0]
 800e75c:	bfa8      	it	ge
 800e75e:	4633      	movge	r3, r6
 800e760:	1ad2      	subs	r2, r2, r3
 800e762:	1af6      	subs	r6, r6, r3
 800e764:	9200      	str	r2, [sp, #0]
 800e766:	9a06      	ldr	r2, [sp, #24]
 800e768:	1ad3      	subs	r3, r2, r3
 800e76a:	9306      	str	r3, [sp, #24]
 800e76c:	9b08      	ldr	r3, [sp, #32]
 800e76e:	b30b      	cbz	r3, 800e7b4 <_dtoa_r+0x794>
 800e770:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e772:	2b00      	cmp	r3, #0
 800e774:	f000 80c6 	beq.w	800e904 <_dtoa_r+0x8e4>
 800e778:	2c00      	cmp	r4, #0
 800e77a:	f000 80c0 	beq.w	800e8fe <_dtoa_r+0x8de>
 800e77e:	4629      	mov	r1, r5
 800e780:	4622      	mov	r2, r4
 800e782:	4648      	mov	r0, r9
 800e784:	f000 ffca 	bl	800f71c <__pow5mult>
 800e788:	9a02      	ldr	r2, [sp, #8]
 800e78a:	4601      	mov	r1, r0
 800e78c:	4605      	mov	r5, r0
 800e78e:	4648      	mov	r0, r9
 800e790:	f000 ff20 	bl	800f5d4 <__multiply>
 800e794:	9902      	ldr	r1, [sp, #8]
 800e796:	4680      	mov	r8, r0
 800e798:	4648      	mov	r0, r9
 800e79a:	f000 fe4f 	bl	800f43c <_Bfree>
 800e79e:	9b08      	ldr	r3, [sp, #32]
 800e7a0:	1b1b      	subs	r3, r3, r4
 800e7a2:	9308      	str	r3, [sp, #32]
 800e7a4:	f000 80b1 	beq.w	800e90a <_dtoa_r+0x8ea>
 800e7a8:	9a08      	ldr	r2, [sp, #32]
 800e7aa:	4641      	mov	r1, r8
 800e7ac:	4648      	mov	r0, r9
 800e7ae:	f000 ffb5 	bl	800f71c <__pow5mult>
 800e7b2:	9002      	str	r0, [sp, #8]
 800e7b4:	2101      	movs	r1, #1
 800e7b6:	4648      	mov	r0, r9
 800e7b8:	f000 fef6 	bl	800f5a8 <__i2b>
 800e7bc:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800e7be:	4604      	mov	r4, r0
 800e7c0:	2b00      	cmp	r3, #0
 800e7c2:	f000 81d9 	beq.w	800eb78 <_dtoa_r+0xb58>
 800e7c6:	461a      	mov	r2, r3
 800e7c8:	4601      	mov	r1, r0
 800e7ca:	4648      	mov	r0, r9
 800e7cc:	f000 ffa6 	bl	800f71c <__pow5mult>
 800e7d0:	9b07      	ldr	r3, [sp, #28]
 800e7d2:	4604      	mov	r4, r0
 800e7d4:	2b01      	cmp	r3, #1
 800e7d6:	f300 809f 	bgt.w	800e918 <_dtoa_r+0x8f8>
 800e7da:	9b04      	ldr	r3, [sp, #16]
 800e7dc:	2b00      	cmp	r3, #0
 800e7de:	f040 8097 	bne.w	800e910 <_dtoa_r+0x8f0>
 800e7e2:	9b05      	ldr	r3, [sp, #20]
 800e7e4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e7e8:	2b00      	cmp	r3, #0
 800e7ea:	f040 8093 	bne.w	800e914 <_dtoa_r+0x8f4>
 800e7ee:	9b05      	ldr	r3, [sp, #20]
 800e7f0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800e7f4:	0d1b      	lsrs	r3, r3, #20
 800e7f6:	051b      	lsls	r3, r3, #20
 800e7f8:	b133      	cbz	r3, 800e808 <_dtoa_r+0x7e8>
 800e7fa:	9b00      	ldr	r3, [sp, #0]
 800e7fc:	3301      	adds	r3, #1
 800e7fe:	9300      	str	r3, [sp, #0]
 800e800:	9b06      	ldr	r3, [sp, #24]
 800e802:	3301      	adds	r3, #1
 800e804:	9306      	str	r3, [sp, #24]
 800e806:	2301      	movs	r3, #1
 800e808:	9308      	str	r3, [sp, #32]
 800e80a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800e80c:	2b00      	cmp	r3, #0
 800e80e:	f000 81b9 	beq.w	800eb84 <_dtoa_r+0xb64>
 800e812:	6923      	ldr	r3, [r4, #16]
 800e814:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800e818:	6918      	ldr	r0, [r3, #16]
 800e81a:	f000 fe79 	bl	800f510 <__hi0bits>
 800e81e:	f1c0 0020 	rsb	r0, r0, #32
 800e822:	9b06      	ldr	r3, [sp, #24]
 800e824:	4418      	add	r0, r3
 800e826:	f010 001f 	ands.w	r0, r0, #31
 800e82a:	f000 8082 	beq.w	800e932 <_dtoa_r+0x912>
 800e82e:	f1c0 0320 	rsb	r3, r0, #32
 800e832:	2b04      	cmp	r3, #4
 800e834:	dd73      	ble.n	800e91e <_dtoa_r+0x8fe>
 800e836:	f1c0 001c 	rsb	r0, r0, #28
 800e83a:	9b00      	ldr	r3, [sp, #0]
 800e83c:	4403      	add	r3, r0
 800e83e:	4406      	add	r6, r0
 800e840:	9300      	str	r3, [sp, #0]
 800e842:	9b06      	ldr	r3, [sp, #24]
 800e844:	4403      	add	r3, r0
 800e846:	9306      	str	r3, [sp, #24]
 800e848:	9b00      	ldr	r3, [sp, #0]
 800e84a:	2b00      	cmp	r3, #0
 800e84c:	dd05      	ble.n	800e85a <_dtoa_r+0x83a>
 800e84e:	461a      	mov	r2, r3
 800e850:	9902      	ldr	r1, [sp, #8]
 800e852:	4648      	mov	r0, r9
 800e854:	f000 ffbc 	bl	800f7d0 <__lshift>
 800e858:	9002      	str	r0, [sp, #8]
 800e85a:	9b06      	ldr	r3, [sp, #24]
 800e85c:	2b00      	cmp	r3, #0
 800e85e:	dd05      	ble.n	800e86c <_dtoa_r+0x84c>
 800e860:	4621      	mov	r1, r4
 800e862:	461a      	mov	r2, r3
 800e864:	4648      	mov	r0, r9
 800e866:	f000 ffb3 	bl	800f7d0 <__lshift>
 800e86a:	4604      	mov	r4, r0
 800e86c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800e86e:	2b00      	cmp	r3, #0
 800e870:	d061      	beq.n	800e936 <_dtoa_r+0x916>
 800e872:	4621      	mov	r1, r4
 800e874:	9802      	ldr	r0, [sp, #8]
 800e876:	f001 f817 	bl	800f8a8 <__mcmp>
 800e87a:	2800      	cmp	r0, #0
 800e87c:	da5b      	bge.n	800e936 <_dtoa_r+0x916>
 800e87e:	2300      	movs	r3, #0
 800e880:	220a      	movs	r2, #10
 800e882:	9902      	ldr	r1, [sp, #8]
 800e884:	4648      	mov	r0, r9
 800e886:	f000 fdfb 	bl	800f480 <__multadd>
 800e88a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e88c:	f107 38ff 	add.w	r8, r7, #4294967295	@ 0xffffffff
 800e890:	9002      	str	r0, [sp, #8]
 800e892:	2b00      	cmp	r3, #0
 800e894:	f000 8178 	beq.w	800eb88 <_dtoa_r+0xb68>
 800e898:	4629      	mov	r1, r5
 800e89a:	2300      	movs	r3, #0
 800e89c:	220a      	movs	r2, #10
 800e89e:	4648      	mov	r0, r9
 800e8a0:	f000 fdee 	bl	800f480 <__multadd>
 800e8a4:	f1bb 0f00 	cmp.w	fp, #0
 800e8a8:	4605      	mov	r5, r0
 800e8aa:	dc6f      	bgt.n	800e98c <_dtoa_r+0x96c>
 800e8ac:	9b07      	ldr	r3, [sp, #28]
 800e8ae:	2b02      	cmp	r3, #2
 800e8b0:	dc49      	bgt.n	800e946 <_dtoa_r+0x926>
 800e8b2:	e06b      	b.n	800e98c <_dtoa_r+0x96c>
 800e8b4:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800e8b6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800e8ba:	e73c      	b.n	800e736 <_dtoa_r+0x716>
 800e8bc:	3fe00000 	.word	0x3fe00000
 800e8c0:	40240000 	.word	0x40240000
 800e8c4:	9b03      	ldr	r3, [sp, #12]
 800e8c6:	1e5c      	subs	r4, r3, #1
 800e8c8:	9b08      	ldr	r3, [sp, #32]
 800e8ca:	42a3      	cmp	r3, r4
 800e8cc:	db09      	blt.n	800e8e2 <_dtoa_r+0x8c2>
 800e8ce:	1b1c      	subs	r4, r3, r4
 800e8d0:	9b03      	ldr	r3, [sp, #12]
 800e8d2:	2b00      	cmp	r3, #0
 800e8d4:	f6bf af30 	bge.w	800e738 <_dtoa_r+0x718>
 800e8d8:	9b00      	ldr	r3, [sp, #0]
 800e8da:	9a03      	ldr	r2, [sp, #12]
 800e8dc:	1a9e      	subs	r6, r3, r2
 800e8de:	2300      	movs	r3, #0
 800e8e0:	e72b      	b.n	800e73a <_dtoa_r+0x71a>
 800e8e2:	9b08      	ldr	r3, [sp, #32]
 800e8e4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800e8e6:	1ae3      	subs	r3, r4, r3
 800e8e8:	9408      	str	r4, [sp, #32]
 800e8ea:	9e00      	ldr	r6, [sp, #0]
 800e8ec:	2400      	movs	r4, #0
 800e8ee:	441a      	add	r2, r3
 800e8f0:	9b03      	ldr	r3, [sp, #12]
 800e8f2:	920d      	str	r2, [sp, #52]	@ 0x34
 800e8f4:	e721      	b.n	800e73a <_dtoa_r+0x71a>
 800e8f6:	9c08      	ldr	r4, [sp, #32]
 800e8f8:	9e00      	ldr	r6, [sp, #0]
 800e8fa:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800e8fc:	e728      	b.n	800e750 <_dtoa_r+0x730>
 800e8fe:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800e902:	e751      	b.n	800e7a8 <_dtoa_r+0x788>
 800e904:	9a08      	ldr	r2, [sp, #32]
 800e906:	9902      	ldr	r1, [sp, #8]
 800e908:	e750      	b.n	800e7ac <_dtoa_r+0x78c>
 800e90a:	f8cd 8008 	str.w	r8, [sp, #8]
 800e90e:	e751      	b.n	800e7b4 <_dtoa_r+0x794>
 800e910:	2300      	movs	r3, #0
 800e912:	e779      	b.n	800e808 <_dtoa_r+0x7e8>
 800e914:	9b04      	ldr	r3, [sp, #16]
 800e916:	e777      	b.n	800e808 <_dtoa_r+0x7e8>
 800e918:	2300      	movs	r3, #0
 800e91a:	9308      	str	r3, [sp, #32]
 800e91c:	e779      	b.n	800e812 <_dtoa_r+0x7f2>
 800e91e:	d093      	beq.n	800e848 <_dtoa_r+0x828>
 800e920:	331c      	adds	r3, #28
 800e922:	9a00      	ldr	r2, [sp, #0]
 800e924:	441a      	add	r2, r3
 800e926:	441e      	add	r6, r3
 800e928:	9200      	str	r2, [sp, #0]
 800e92a:	9a06      	ldr	r2, [sp, #24]
 800e92c:	441a      	add	r2, r3
 800e92e:	9206      	str	r2, [sp, #24]
 800e930:	e78a      	b.n	800e848 <_dtoa_r+0x828>
 800e932:	4603      	mov	r3, r0
 800e934:	e7f4      	b.n	800e920 <_dtoa_r+0x900>
 800e936:	9b03      	ldr	r3, [sp, #12]
 800e938:	46b8      	mov	r8, r7
 800e93a:	2b00      	cmp	r3, #0
 800e93c:	dc20      	bgt.n	800e980 <_dtoa_r+0x960>
 800e93e:	469b      	mov	fp, r3
 800e940:	9b07      	ldr	r3, [sp, #28]
 800e942:	2b02      	cmp	r3, #2
 800e944:	dd1e      	ble.n	800e984 <_dtoa_r+0x964>
 800e946:	f1bb 0f00 	cmp.w	fp, #0
 800e94a:	f47f adb1 	bne.w	800e4b0 <_dtoa_r+0x490>
 800e94e:	4621      	mov	r1, r4
 800e950:	465b      	mov	r3, fp
 800e952:	2205      	movs	r2, #5
 800e954:	4648      	mov	r0, r9
 800e956:	f000 fd93 	bl	800f480 <__multadd>
 800e95a:	4601      	mov	r1, r0
 800e95c:	4604      	mov	r4, r0
 800e95e:	9802      	ldr	r0, [sp, #8]
 800e960:	f000 ffa2 	bl	800f8a8 <__mcmp>
 800e964:	2800      	cmp	r0, #0
 800e966:	f77f ada3 	ble.w	800e4b0 <_dtoa_r+0x490>
 800e96a:	4656      	mov	r6, sl
 800e96c:	2331      	movs	r3, #49	@ 0x31
 800e96e:	f108 0801 	add.w	r8, r8, #1
 800e972:	f806 3b01 	strb.w	r3, [r6], #1
 800e976:	e59f      	b.n	800e4b8 <_dtoa_r+0x498>
 800e978:	46b8      	mov	r8, r7
 800e97a:	9c03      	ldr	r4, [sp, #12]
 800e97c:	4625      	mov	r5, r4
 800e97e:	e7f4      	b.n	800e96a <_dtoa_r+0x94a>
 800e980:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800e984:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e986:	2b00      	cmp	r3, #0
 800e988:	f000 8102 	beq.w	800eb90 <_dtoa_r+0xb70>
 800e98c:	2e00      	cmp	r6, #0
 800e98e:	dd05      	ble.n	800e99c <_dtoa_r+0x97c>
 800e990:	4629      	mov	r1, r5
 800e992:	4632      	mov	r2, r6
 800e994:	4648      	mov	r0, r9
 800e996:	f000 ff1b 	bl	800f7d0 <__lshift>
 800e99a:	4605      	mov	r5, r0
 800e99c:	9b08      	ldr	r3, [sp, #32]
 800e99e:	2b00      	cmp	r3, #0
 800e9a0:	d05c      	beq.n	800ea5c <_dtoa_r+0xa3c>
 800e9a2:	6869      	ldr	r1, [r5, #4]
 800e9a4:	4648      	mov	r0, r9
 800e9a6:	f000 fd09 	bl	800f3bc <_Balloc>
 800e9aa:	4606      	mov	r6, r0
 800e9ac:	b928      	cbnz	r0, 800e9ba <_dtoa_r+0x99a>
 800e9ae:	4b83      	ldr	r3, [pc, #524]	@ (800ebbc <_dtoa_r+0xb9c>)
 800e9b0:	4602      	mov	r2, r0
 800e9b2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800e9b6:	f7ff bb4a 	b.w	800e04e <_dtoa_r+0x2e>
 800e9ba:	692a      	ldr	r2, [r5, #16]
 800e9bc:	f105 010c 	add.w	r1, r5, #12
 800e9c0:	300c      	adds	r0, #12
 800e9c2:	3202      	adds	r2, #2
 800e9c4:	0092      	lsls	r2, r2, #2
 800e9c6:	f001 fa75 	bl	800feb4 <memcpy>
 800e9ca:	2201      	movs	r2, #1
 800e9cc:	4631      	mov	r1, r6
 800e9ce:	4648      	mov	r0, r9
 800e9d0:	f000 fefe 	bl	800f7d0 <__lshift>
 800e9d4:	f10a 0301 	add.w	r3, sl, #1
 800e9d8:	462f      	mov	r7, r5
 800e9da:	4605      	mov	r5, r0
 800e9dc:	9300      	str	r3, [sp, #0]
 800e9de:	eb0a 030b 	add.w	r3, sl, fp
 800e9e2:	9308      	str	r3, [sp, #32]
 800e9e4:	9b04      	ldr	r3, [sp, #16]
 800e9e6:	f003 0301 	and.w	r3, r3, #1
 800e9ea:	9306      	str	r3, [sp, #24]
 800e9ec:	9b00      	ldr	r3, [sp, #0]
 800e9ee:	4621      	mov	r1, r4
 800e9f0:	9802      	ldr	r0, [sp, #8]
 800e9f2:	f103 3bff 	add.w	fp, r3, #4294967295	@ 0xffffffff
 800e9f6:	f7ff fa83 	bl	800df00 <quorem>
 800e9fa:	4603      	mov	r3, r0
 800e9fc:	4639      	mov	r1, r7
 800e9fe:	9003      	str	r0, [sp, #12]
 800ea00:	3330      	adds	r3, #48	@ 0x30
 800ea02:	9802      	ldr	r0, [sp, #8]
 800ea04:	9309      	str	r3, [sp, #36]	@ 0x24
 800ea06:	f000 ff4f 	bl	800f8a8 <__mcmp>
 800ea0a:	462a      	mov	r2, r5
 800ea0c:	9004      	str	r0, [sp, #16]
 800ea0e:	4621      	mov	r1, r4
 800ea10:	4648      	mov	r0, r9
 800ea12:	f000 ff65 	bl	800f8e0 <__mdiff>
 800ea16:	68c2      	ldr	r2, [r0, #12]
 800ea18:	4606      	mov	r6, r0
 800ea1a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ea1c:	bb02      	cbnz	r2, 800ea60 <_dtoa_r+0xa40>
 800ea1e:	4601      	mov	r1, r0
 800ea20:	9802      	ldr	r0, [sp, #8]
 800ea22:	f000 ff41 	bl	800f8a8 <__mcmp>
 800ea26:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ea28:	4602      	mov	r2, r0
 800ea2a:	4631      	mov	r1, r6
 800ea2c:	4648      	mov	r0, r9
 800ea2e:	920c      	str	r2, [sp, #48]	@ 0x30
 800ea30:	9309      	str	r3, [sp, #36]	@ 0x24
 800ea32:	f000 fd03 	bl	800f43c <_Bfree>
 800ea36:	9b07      	ldr	r3, [sp, #28]
 800ea38:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800ea3a:	9e00      	ldr	r6, [sp, #0]
 800ea3c:	ea42 0103 	orr.w	r1, r2, r3
 800ea40:	9b06      	ldr	r3, [sp, #24]
 800ea42:	4319      	orrs	r1, r3
 800ea44:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ea46:	d10d      	bne.n	800ea64 <_dtoa_r+0xa44>
 800ea48:	2b39      	cmp	r3, #57	@ 0x39
 800ea4a:	d027      	beq.n	800ea9c <_dtoa_r+0xa7c>
 800ea4c:	9a04      	ldr	r2, [sp, #16]
 800ea4e:	2a00      	cmp	r2, #0
 800ea50:	dd01      	ble.n	800ea56 <_dtoa_r+0xa36>
 800ea52:	9b03      	ldr	r3, [sp, #12]
 800ea54:	3331      	adds	r3, #49	@ 0x31
 800ea56:	f88b 3000 	strb.w	r3, [fp]
 800ea5a:	e52e      	b.n	800e4ba <_dtoa_r+0x49a>
 800ea5c:	4628      	mov	r0, r5
 800ea5e:	e7b9      	b.n	800e9d4 <_dtoa_r+0x9b4>
 800ea60:	2201      	movs	r2, #1
 800ea62:	e7e2      	b.n	800ea2a <_dtoa_r+0xa0a>
 800ea64:	9904      	ldr	r1, [sp, #16]
 800ea66:	2900      	cmp	r1, #0
 800ea68:	db04      	blt.n	800ea74 <_dtoa_r+0xa54>
 800ea6a:	9807      	ldr	r0, [sp, #28]
 800ea6c:	4301      	orrs	r1, r0
 800ea6e:	9806      	ldr	r0, [sp, #24]
 800ea70:	4301      	orrs	r1, r0
 800ea72:	d120      	bne.n	800eab6 <_dtoa_r+0xa96>
 800ea74:	2a00      	cmp	r2, #0
 800ea76:	ddee      	ble.n	800ea56 <_dtoa_r+0xa36>
 800ea78:	2201      	movs	r2, #1
 800ea7a:	9902      	ldr	r1, [sp, #8]
 800ea7c:	4648      	mov	r0, r9
 800ea7e:	9300      	str	r3, [sp, #0]
 800ea80:	f000 fea6 	bl	800f7d0 <__lshift>
 800ea84:	4621      	mov	r1, r4
 800ea86:	9002      	str	r0, [sp, #8]
 800ea88:	f000 ff0e 	bl	800f8a8 <__mcmp>
 800ea8c:	2800      	cmp	r0, #0
 800ea8e:	9b00      	ldr	r3, [sp, #0]
 800ea90:	dc02      	bgt.n	800ea98 <_dtoa_r+0xa78>
 800ea92:	d1e0      	bne.n	800ea56 <_dtoa_r+0xa36>
 800ea94:	07da      	lsls	r2, r3, #31
 800ea96:	d5de      	bpl.n	800ea56 <_dtoa_r+0xa36>
 800ea98:	2b39      	cmp	r3, #57	@ 0x39
 800ea9a:	d1da      	bne.n	800ea52 <_dtoa_r+0xa32>
 800ea9c:	2339      	movs	r3, #57	@ 0x39
 800ea9e:	f88b 3000 	strb.w	r3, [fp]
 800eaa2:	4633      	mov	r3, r6
 800eaa4:	461e      	mov	r6, r3
 800eaa6:	3b01      	subs	r3, #1
 800eaa8:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800eaac:	2a39      	cmp	r2, #57	@ 0x39
 800eaae:	d04f      	beq.n	800eb50 <_dtoa_r+0xb30>
 800eab0:	3201      	adds	r2, #1
 800eab2:	701a      	strb	r2, [r3, #0]
 800eab4:	e501      	b.n	800e4ba <_dtoa_r+0x49a>
 800eab6:	2a00      	cmp	r2, #0
 800eab8:	dd03      	ble.n	800eac2 <_dtoa_r+0xaa2>
 800eaba:	2b39      	cmp	r3, #57	@ 0x39
 800eabc:	d0ee      	beq.n	800ea9c <_dtoa_r+0xa7c>
 800eabe:	3301      	adds	r3, #1
 800eac0:	e7c9      	b.n	800ea56 <_dtoa_r+0xa36>
 800eac2:	9a00      	ldr	r2, [sp, #0]
 800eac4:	9908      	ldr	r1, [sp, #32]
 800eac6:	f802 3c01 	strb.w	r3, [r2, #-1]
 800eaca:	428a      	cmp	r2, r1
 800eacc:	d029      	beq.n	800eb22 <_dtoa_r+0xb02>
 800eace:	2300      	movs	r3, #0
 800ead0:	220a      	movs	r2, #10
 800ead2:	9902      	ldr	r1, [sp, #8]
 800ead4:	4648      	mov	r0, r9
 800ead6:	f000 fcd3 	bl	800f480 <__multadd>
 800eada:	42af      	cmp	r7, r5
 800eadc:	9002      	str	r0, [sp, #8]
 800eade:	f04f 0300 	mov.w	r3, #0
 800eae2:	f04f 020a 	mov.w	r2, #10
 800eae6:	4639      	mov	r1, r7
 800eae8:	4648      	mov	r0, r9
 800eaea:	d107      	bne.n	800eafc <_dtoa_r+0xadc>
 800eaec:	f000 fcc8 	bl	800f480 <__multadd>
 800eaf0:	4607      	mov	r7, r0
 800eaf2:	4605      	mov	r5, r0
 800eaf4:	9b00      	ldr	r3, [sp, #0]
 800eaf6:	3301      	adds	r3, #1
 800eaf8:	9300      	str	r3, [sp, #0]
 800eafa:	e777      	b.n	800e9ec <_dtoa_r+0x9cc>
 800eafc:	f000 fcc0 	bl	800f480 <__multadd>
 800eb00:	4629      	mov	r1, r5
 800eb02:	4607      	mov	r7, r0
 800eb04:	2300      	movs	r3, #0
 800eb06:	220a      	movs	r2, #10
 800eb08:	4648      	mov	r0, r9
 800eb0a:	f000 fcb9 	bl	800f480 <__multadd>
 800eb0e:	4605      	mov	r5, r0
 800eb10:	e7f0      	b.n	800eaf4 <_dtoa_r+0xad4>
 800eb12:	f1bb 0f00 	cmp.w	fp, #0
 800eb16:	f04f 0700 	mov.w	r7, #0
 800eb1a:	bfcc      	ite	gt
 800eb1c:	465e      	movgt	r6, fp
 800eb1e:	2601      	movle	r6, #1
 800eb20:	4456      	add	r6, sl
 800eb22:	2201      	movs	r2, #1
 800eb24:	9902      	ldr	r1, [sp, #8]
 800eb26:	4648      	mov	r0, r9
 800eb28:	9300      	str	r3, [sp, #0]
 800eb2a:	f000 fe51 	bl	800f7d0 <__lshift>
 800eb2e:	4621      	mov	r1, r4
 800eb30:	9002      	str	r0, [sp, #8]
 800eb32:	f000 feb9 	bl	800f8a8 <__mcmp>
 800eb36:	2800      	cmp	r0, #0
 800eb38:	dcb3      	bgt.n	800eaa2 <_dtoa_r+0xa82>
 800eb3a:	d102      	bne.n	800eb42 <_dtoa_r+0xb22>
 800eb3c:	9b00      	ldr	r3, [sp, #0]
 800eb3e:	07db      	lsls	r3, r3, #31
 800eb40:	d4af      	bmi.n	800eaa2 <_dtoa_r+0xa82>
 800eb42:	4633      	mov	r3, r6
 800eb44:	461e      	mov	r6, r3
 800eb46:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800eb4a:	2a30      	cmp	r2, #48	@ 0x30
 800eb4c:	d0fa      	beq.n	800eb44 <_dtoa_r+0xb24>
 800eb4e:	e4b4      	b.n	800e4ba <_dtoa_r+0x49a>
 800eb50:	459a      	cmp	sl, r3
 800eb52:	d1a7      	bne.n	800eaa4 <_dtoa_r+0xa84>
 800eb54:	2331      	movs	r3, #49	@ 0x31
 800eb56:	f108 0801 	add.w	r8, r8, #1
 800eb5a:	f88a 3000 	strb.w	r3, [sl]
 800eb5e:	e4ac      	b.n	800e4ba <_dtoa_r+0x49a>
 800eb60:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800eb62:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800ebc0 <_dtoa_r+0xba0>
 800eb66:	b11b      	cbz	r3, 800eb70 <_dtoa_r+0xb50>
 800eb68:	f10a 0308 	add.w	r3, sl, #8
 800eb6c:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800eb6e:	6013      	str	r3, [r2, #0]
 800eb70:	4650      	mov	r0, sl
 800eb72:	b017      	add	sp, #92	@ 0x5c
 800eb74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eb78:	9b07      	ldr	r3, [sp, #28]
 800eb7a:	2b01      	cmp	r3, #1
 800eb7c:	f77f ae2d 	ble.w	800e7da <_dtoa_r+0x7ba>
 800eb80:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800eb82:	9308      	str	r3, [sp, #32]
 800eb84:	2001      	movs	r0, #1
 800eb86:	e64c      	b.n	800e822 <_dtoa_r+0x802>
 800eb88:	f1bb 0f00 	cmp.w	fp, #0
 800eb8c:	f77f aed8 	ble.w	800e940 <_dtoa_r+0x920>
 800eb90:	4656      	mov	r6, sl
 800eb92:	4621      	mov	r1, r4
 800eb94:	9802      	ldr	r0, [sp, #8]
 800eb96:	f7ff f9b3 	bl	800df00 <quorem>
 800eb9a:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800eb9e:	f806 3b01 	strb.w	r3, [r6], #1
 800eba2:	eba6 020a 	sub.w	r2, r6, sl
 800eba6:	4593      	cmp	fp, r2
 800eba8:	ddb3      	ble.n	800eb12 <_dtoa_r+0xaf2>
 800ebaa:	2300      	movs	r3, #0
 800ebac:	220a      	movs	r2, #10
 800ebae:	9902      	ldr	r1, [sp, #8]
 800ebb0:	4648      	mov	r0, r9
 800ebb2:	f000 fc65 	bl	800f480 <__multadd>
 800ebb6:	9002      	str	r0, [sp, #8]
 800ebb8:	e7eb      	b.n	800eb92 <_dtoa_r+0xb72>
 800ebba:	bf00      	nop
 800ebbc:	080110a0 	.word	0x080110a0
 800ebc0:	08011024 	.word	0x08011024

0800ebc4 <__ssputs_r>:
 800ebc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ebc8:	461f      	mov	r7, r3
 800ebca:	688e      	ldr	r6, [r1, #8]
 800ebcc:	4682      	mov	sl, r0
 800ebce:	460c      	mov	r4, r1
 800ebd0:	42be      	cmp	r6, r7
 800ebd2:	4690      	mov	r8, r2
 800ebd4:	680b      	ldr	r3, [r1, #0]
 800ebd6:	d82d      	bhi.n	800ec34 <__ssputs_r+0x70>
 800ebd8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800ebdc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800ebe0:	d026      	beq.n	800ec30 <__ssputs_r+0x6c>
 800ebe2:	6965      	ldr	r5, [r4, #20]
 800ebe4:	6909      	ldr	r1, [r1, #16]
 800ebe6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ebea:	eba3 0901 	sub.w	r9, r3, r1
 800ebee:	1c7b      	adds	r3, r7, #1
 800ebf0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ebf4:	444b      	add	r3, r9
 800ebf6:	106d      	asrs	r5, r5, #1
 800ebf8:	429d      	cmp	r5, r3
 800ebfa:	bf38      	it	cc
 800ebfc:	461d      	movcc	r5, r3
 800ebfe:	0553      	lsls	r3, r2, #21
 800ec00:	d527      	bpl.n	800ec52 <__ssputs_r+0x8e>
 800ec02:	4629      	mov	r1, r5
 800ec04:	f000 faa2 	bl	800f14c <_malloc_r>
 800ec08:	4606      	mov	r6, r0
 800ec0a:	b360      	cbz	r0, 800ec66 <__ssputs_r+0xa2>
 800ec0c:	464a      	mov	r2, r9
 800ec0e:	6921      	ldr	r1, [r4, #16]
 800ec10:	f001 f950 	bl	800feb4 <memcpy>
 800ec14:	89a3      	ldrh	r3, [r4, #12]
 800ec16:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800ec1a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ec1e:	81a3      	strh	r3, [r4, #12]
 800ec20:	6126      	str	r6, [r4, #16]
 800ec22:	444e      	add	r6, r9
 800ec24:	6165      	str	r5, [r4, #20]
 800ec26:	eba5 0509 	sub.w	r5, r5, r9
 800ec2a:	6026      	str	r6, [r4, #0]
 800ec2c:	463e      	mov	r6, r7
 800ec2e:	60a5      	str	r5, [r4, #8]
 800ec30:	42be      	cmp	r6, r7
 800ec32:	d900      	bls.n	800ec36 <__ssputs_r+0x72>
 800ec34:	463e      	mov	r6, r7
 800ec36:	4632      	mov	r2, r6
 800ec38:	4641      	mov	r1, r8
 800ec3a:	6820      	ldr	r0, [r4, #0]
 800ec3c:	f001 f8a7 	bl	800fd8e <memmove>
 800ec40:	68a3      	ldr	r3, [r4, #8]
 800ec42:	2000      	movs	r0, #0
 800ec44:	1b9b      	subs	r3, r3, r6
 800ec46:	60a3      	str	r3, [r4, #8]
 800ec48:	6823      	ldr	r3, [r4, #0]
 800ec4a:	4433      	add	r3, r6
 800ec4c:	6023      	str	r3, [r4, #0]
 800ec4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ec52:	462a      	mov	r2, r5
 800ec54:	f000 ff77 	bl	800fb46 <_realloc_r>
 800ec58:	4606      	mov	r6, r0
 800ec5a:	2800      	cmp	r0, #0
 800ec5c:	d1e0      	bne.n	800ec20 <__ssputs_r+0x5c>
 800ec5e:	6921      	ldr	r1, [r4, #16]
 800ec60:	4650      	mov	r0, sl
 800ec62:	f001 f967 	bl	800ff34 <_free_r>
 800ec66:	230c      	movs	r3, #12
 800ec68:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800ec6c:	f8ca 3000 	str.w	r3, [sl]
 800ec70:	89a3      	ldrh	r3, [r4, #12]
 800ec72:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ec76:	81a3      	strh	r3, [r4, #12]
 800ec78:	e7e9      	b.n	800ec4e <__ssputs_r+0x8a>
	...

0800ec7c <_svfiprintf_r>:
 800ec7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ec80:	4698      	mov	r8, r3
 800ec82:	898b      	ldrh	r3, [r1, #12]
 800ec84:	b09d      	sub	sp, #116	@ 0x74
 800ec86:	4607      	mov	r7, r0
 800ec88:	061b      	lsls	r3, r3, #24
 800ec8a:	460d      	mov	r5, r1
 800ec8c:	4614      	mov	r4, r2
 800ec8e:	d510      	bpl.n	800ecb2 <_svfiprintf_r+0x36>
 800ec90:	690b      	ldr	r3, [r1, #16]
 800ec92:	b973      	cbnz	r3, 800ecb2 <_svfiprintf_r+0x36>
 800ec94:	2140      	movs	r1, #64	@ 0x40
 800ec96:	f000 fa59 	bl	800f14c <_malloc_r>
 800ec9a:	6028      	str	r0, [r5, #0]
 800ec9c:	6128      	str	r0, [r5, #16]
 800ec9e:	b930      	cbnz	r0, 800ecae <_svfiprintf_r+0x32>
 800eca0:	230c      	movs	r3, #12
 800eca2:	603b      	str	r3, [r7, #0]
 800eca4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800eca8:	b01d      	add	sp, #116	@ 0x74
 800ecaa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ecae:	2340      	movs	r3, #64	@ 0x40
 800ecb0:	616b      	str	r3, [r5, #20]
 800ecb2:	2300      	movs	r3, #0
 800ecb4:	f8cd 800c 	str.w	r8, [sp, #12]
 800ecb8:	f04f 0901 	mov.w	r9, #1
 800ecbc:	f8df 81a0 	ldr.w	r8, [pc, #416]	@ 800ee60 <_svfiprintf_r+0x1e4>
 800ecc0:	9309      	str	r3, [sp, #36]	@ 0x24
 800ecc2:	2320      	movs	r3, #32
 800ecc4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800ecc8:	2330      	movs	r3, #48	@ 0x30
 800ecca:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800ecce:	4623      	mov	r3, r4
 800ecd0:	469a      	mov	sl, r3
 800ecd2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ecd6:	b10a      	cbz	r2, 800ecdc <_svfiprintf_r+0x60>
 800ecd8:	2a25      	cmp	r2, #37	@ 0x25
 800ecda:	d1f9      	bne.n	800ecd0 <_svfiprintf_r+0x54>
 800ecdc:	ebba 0b04 	subs.w	fp, sl, r4
 800ece0:	d00b      	beq.n	800ecfa <_svfiprintf_r+0x7e>
 800ece2:	465b      	mov	r3, fp
 800ece4:	4622      	mov	r2, r4
 800ece6:	4629      	mov	r1, r5
 800ece8:	4638      	mov	r0, r7
 800ecea:	f7ff ff6b 	bl	800ebc4 <__ssputs_r>
 800ecee:	3001      	adds	r0, #1
 800ecf0:	f000 80a7 	beq.w	800ee42 <_svfiprintf_r+0x1c6>
 800ecf4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ecf6:	445a      	add	r2, fp
 800ecf8:	9209      	str	r2, [sp, #36]	@ 0x24
 800ecfa:	f89a 3000 	ldrb.w	r3, [sl]
 800ecfe:	2b00      	cmp	r3, #0
 800ed00:	f000 809f 	beq.w	800ee42 <_svfiprintf_r+0x1c6>
 800ed04:	2300      	movs	r3, #0
 800ed06:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800ed0a:	f10a 0a01 	add.w	sl, sl, #1
 800ed0e:	9304      	str	r3, [sp, #16]
 800ed10:	9307      	str	r3, [sp, #28]
 800ed12:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800ed16:	931a      	str	r3, [sp, #104]	@ 0x68
 800ed18:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ed1c:	4654      	mov	r4, sl
 800ed1e:	2205      	movs	r2, #5
 800ed20:	484f      	ldr	r0, [pc, #316]	@ (800ee60 <_svfiprintf_r+0x1e4>)
 800ed22:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ed26:	f7ff f8dd 	bl	800dee4 <memchr>
 800ed2a:	9a04      	ldr	r2, [sp, #16]
 800ed2c:	b9d8      	cbnz	r0, 800ed66 <_svfiprintf_r+0xea>
 800ed2e:	06d0      	lsls	r0, r2, #27
 800ed30:	bf44      	itt	mi
 800ed32:	2320      	movmi	r3, #32
 800ed34:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ed38:	0711      	lsls	r1, r2, #28
 800ed3a:	bf44      	itt	mi
 800ed3c:	232b      	movmi	r3, #43	@ 0x2b
 800ed3e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ed42:	f89a 3000 	ldrb.w	r3, [sl]
 800ed46:	2b2a      	cmp	r3, #42	@ 0x2a
 800ed48:	d015      	beq.n	800ed76 <_svfiprintf_r+0xfa>
 800ed4a:	9a07      	ldr	r2, [sp, #28]
 800ed4c:	4654      	mov	r4, sl
 800ed4e:	2000      	movs	r0, #0
 800ed50:	f04f 0c0a 	mov.w	ip, #10
 800ed54:	4621      	mov	r1, r4
 800ed56:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ed5a:	3b30      	subs	r3, #48	@ 0x30
 800ed5c:	2b09      	cmp	r3, #9
 800ed5e:	d94b      	bls.n	800edf8 <_svfiprintf_r+0x17c>
 800ed60:	b1b0      	cbz	r0, 800ed90 <_svfiprintf_r+0x114>
 800ed62:	9207      	str	r2, [sp, #28]
 800ed64:	e014      	b.n	800ed90 <_svfiprintf_r+0x114>
 800ed66:	eba0 0308 	sub.w	r3, r0, r8
 800ed6a:	46a2      	mov	sl, r4
 800ed6c:	fa09 f303 	lsl.w	r3, r9, r3
 800ed70:	4313      	orrs	r3, r2
 800ed72:	9304      	str	r3, [sp, #16]
 800ed74:	e7d2      	b.n	800ed1c <_svfiprintf_r+0xa0>
 800ed76:	9b03      	ldr	r3, [sp, #12]
 800ed78:	1d19      	adds	r1, r3, #4
 800ed7a:	681b      	ldr	r3, [r3, #0]
 800ed7c:	2b00      	cmp	r3, #0
 800ed7e:	9103      	str	r1, [sp, #12]
 800ed80:	bfbb      	ittet	lt
 800ed82:	425b      	neglt	r3, r3
 800ed84:	f042 0202 	orrlt.w	r2, r2, #2
 800ed88:	9307      	strge	r3, [sp, #28]
 800ed8a:	9307      	strlt	r3, [sp, #28]
 800ed8c:	bfb8      	it	lt
 800ed8e:	9204      	strlt	r2, [sp, #16]
 800ed90:	7823      	ldrb	r3, [r4, #0]
 800ed92:	2b2e      	cmp	r3, #46	@ 0x2e
 800ed94:	d10a      	bne.n	800edac <_svfiprintf_r+0x130>
 800ed96:	7863      	ldrb	r3, [r4, #1]
 800ed98:	2b2a      	cmp	r3, #42	@ 0x2a
 800ed9a:	d132      	bne.n	800ee02 <_svfiprintf_r+0x186>
 800ed9c:	9b03      	ldr	r3, [sp, #12]
 800ed9e:	3402      	adds	r4, #2
 800eda0:	1d1a      	adds	r2, r3, #4
 800eda2:	681b      	ldr	r3, [r3, #0]
 800eda4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800eda8:	9203      	str	r2, [sp, #12]
 800edaa:	9305      	str	r3, [sp, #20]
 800edac:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800ee70 <_svfiprintf_r+0x1f4>
 800edb0:	2203      	movs	r2, #3
 800edb2:	7821      	ldrb	r1, [r4, #0]
 800edb4:	4650      	mov	r0, sl
 800edb6:	f7ff f895 	bl	800dee4 <memchr>
 800edba:	b138      	cbz	r0, 800edcc <_svfiprintf_r+0x150>
 800edbc:	eba0 000a 	sub.w	r0, r0, sl
 800edc0:	2240      	movs	r2, #64	@ 0x40
 800edc2:	9b04      	ldr	r3, [sp, #16]
 800edc4:	3401      	adds	r4, #1
 800edc6:	4082      	lsls	r2, r0
 800edc8:	4313      	orrs	r3, r2
 800edca:	9304      	str	r3, [sp, #16]
 800edcc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800edd0:	2206      	movs	r2, #6
 800edd2:	4824      	ldr	r0, [pc, #144]	@ (800ee64 <_svfiprintf_r+0x1e8>)
 800edd4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800edd8:	f7ff f884 	bl	800dee4 <memchr>
 800eddc:	2800      	cmp	r0, #0
 800edde:	d036      	beq.n	800ee4e <_svfiprintf_r+0x1d2>
 800ede0:	4b21      	ldr	r3, [pc, #132]	@ (800ee68 <_svfiprintf_r+0x1ec>)
 800ede2:	bb1b      	cbnz	r3, 800ee2c <_svfiprintf_r+0x1b0>
 800ede4:	9b03      	ldr	r3, [sp, #12]
 800ede6:	3307      	adds	r3, #7
 800ede8:	f023 0307 	bic.w	r3, r3, #7
 800edec:	3308      	adds	r3, #8
 800edee:	9303      	str	r3, [sp, #12]
 800edf0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800edf2:	4433      	add	r3, r6
 800edf4:	9309      	str	r3, [sp, #36]	@ 0x24
 800edf6:	e76a      	b.n	800ecce <_svfiprintf_r+0x52>
 800edf8:	fb0c 3202 	mla	r2, ip, r2, r3
 800edfc:	460c      	mov	r4, r1
 800edfe:	2001      	movs	r0, #1
 800ee00:	e7a8      	b.n	800ed54 <_svfiprintf_r+0xd8>
 800ee02:	2300      	movs	r3, #0
 800ee04:	3401      	adds	r4, #1
 800ee06:	f04f 0c0a 	mov.w	ip, #10
 800ee0a:	4619      	mov	r1, r3
 800ee0c:	9305      	str	r3, [sp, #20]
 800ee0e:	4620      	mov	r0, r4
 800ee10:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ee14:	3a30      	subs	r2, #48	@ 0x30
 800ee16:	2a09      	cmp	r2, #9
 800ee18:	d903      	bls.n	800ee22 <_svfiprintf_r+0x1a6>
 800ee1a:	2b00      	cmp	r3, #0
 800ee1c:	d0c6      	beq.n	800edac <_svfiprintf_r+0x130>
 800ee1e:	9105      	str	r1, [sp, #20]
 800ee20:	e7c4      	b.n	800edac <_svfiprintf_r+0x130>
 800ee22:	fb0c 2101 	mla	r1, ip, r1, r2
 800ee26:	4604      	mov	r4, r0
 800ee28:	2301      	movs	r3, #1
 800ee2a:	e7f0      	b.n	800ee0e <_svfiprintf_r+0x192>
 800ee2c:	ab03      	add	r3, sp, #12
 800ee2e:	462a      	mov	r2, r5
 800ee30:	a904      	add	r1, sp, #16
 800ee32:	4638      	mov	r0, r7
 800ee34:	9300      	str	r3, [sp, #0]
 800ee36:	4b0d      	ldr	r3, [pc, #52]	@ (800ee6c <_svfiprintf_r+0x1f0>)
 800ee38:	f7fe faf8 	bl	800d42c <_printf_float>
 800ee3c:	1c42      	adds	r2, r0, #1
 800ee3e:	4606      	mov	r6, r0
 800ee40:	d1d6      	bne.n	800edf0 <_svfiprintf_r+0x174>
 800ee42:	89ab      	ldrh	r3, [r5, #12]
 800ee44:	065b      	lsls	r3, r3, #25
 800ee46:	f53f af2d 	bmi.w	800eca4 <_svfiprintf_r+0x28>
 800ee4a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ee4c:	e72c      	b.n	800eca8 <_svfiprintf_r+0x2c>
 800ee4e:	ab03      	add	r3, sp, #12
 800ee50:	462a      	mov	r2, r5
 800ee52:	a904      	add	r1, sp, #16
 800ee54:	4638      	mov	r0, r7
 800ee56:	9300      	str	r3, [sp, #0]
 800ee58:	4b04      	ldr	r3, [pc, #16]	@ (800ee6c <_svfiprintf_r+0x1f0>)
 800ee5a:	f7fe fd83 	bl	800d964 <_printf_i>
 800ee5e:	e7ed      	b.n	800ee3c <_svfiprintf_r+0x1c0>
 800ee60:	080110b1 	.word	0x080110b1
 800ee64:	080110bb 	.word	0x080110bb
 800ee68:	0800d42d 	.word	0x0800d42d
 800ee6c:	0800ebc5 	.word	0x0800ebc5
 800ee70:	080110b7 	.word	0x080110b7

0800ee74 <__sfputc_r>:
 800ee74:	6893      	ldr	r3, [r2, #8]
 800ee76:	3b01      	subs	r3, #1
 800ee78:	2b00      	cmp	r3, #0
 800ee7a:	b410      	push	{r4}
 800ee7c:	6093      	str	r3, [r2, #8]
 800ee7e:	da08      	bge.n	800ee92 <__sfputc_r+0x1e>
 800ee80:	6994      	ldr	r4, [r2, #24]
 800ee82:	42a3      	cmp	r3, r4
 800ee84:	db01      	blt.n	800ee8a <__sfputc_r+0x16>
 800ee86:	290a      	cmp	r1, #10
 800ee88:	d103      	bne.n	800ee92 <__sfputc_r+0x1e>
 800ee8a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ee8e:	f000 be88 	b.w	800fba2 <__swbuf_r>
 800ee92:	6813      	ldr	r3, [r2, #0]
 800ee94:	1c58      	adds	r0, r3, #1
 800ee96:	6010      	str	r0, [r2, #0]
 800ee98:	4608      	mov	r0, r1
 800ee9a:	7019      	strb	r1, [r3, #0]
 800ee9c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800eea0:	4770      	bx	lr

0800eea2 <__sfputs_r>:
 800eea2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eea4:	4606      	mov	r6, r0
 800eea6:	460f      	mov	r7, r1
 800eea8:	4614      	mov	r4, r2
 800eeaa:	18d5      	adds	r5, r2, r3
 800eeac:	42ac      	cmp	r4, r5
 800eeae:	d101      	bne.n	800eeb4 <__sfputs_r+0x12>
 800eeb0:	2000      	movs	r0, #0
 800eeb2:	e007      	b.n	800eec4 <__sfputs_r+0x22>
 800eeb4:	463a      	mov	r2, r7
 800eeb6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800eeba:	4630      	mov	r0, r6
 800eebc:	f7ff ffda 	bl	800ee74 <__sfputc_r>
 800eec0:	1c43      	adds	r3, r0, #1
 800eec2:	d1f3      	bne.n	800eeac <__sfputs_r+0xa>
 800eec4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800eec8 <_vfiprintf_r>:
 800eec8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eecc:	460d      	mov	r5, r1
 800eece:	b09d      	sub	sp, #116	@ 0x74
 800eed0:	4614      	mov	r4, r2
 800eed2:	4698      	mov	r8, r3
 800eed4:	4606      	mov	r6, r0
 800eed6:	b118      	cbz	r0, 800eee0 <_vfiprintf_r+0x18>
 800eed8:	6a03      	ldr	r3, [r0, #32]
 800eeda:	b90b      	cbnz	r3, 800eee0 <_vfiprintf_r+0x18>
 800eedc:	f7fe ff22 	bl	800dd24 <__sinit>
 800eee0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800eee2:	07d9      	lsls	r1, r3, #31
 800eee4:	d405      	bmi.n	800eef2 <_vfiprintf_r+0x2a>
 800eee6:	89ab      	ldrh	r3, [r5, #12]
 800eee8:	059a      	lsls	r2, r3, #22
 800eeea:	d402      	bmi.n	800eef2 <_vfiprintf_r+0x2a>
 800eeec:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800eeee:	f7fe fff2 	bl	800ded6 <__retarget_lock_acquire_recursive>
 800eef2:	89ab      	ldrh	r3, [r5, #12]
 800eef4:	071b      	lsls	r3, r3, #28
 800eef6:	d501      	bpl.n	800eefc <_vfiprintf_r+0x34>
 800eef8:	692b      	ldr	r3, [r5, #16]
 800eefa:	b99b      	cbnz	r3, 800ef24 <_vfiprintf_r+0x5c>
 800eefc:	4629      	mov	r1, r5
 800eefe:	4630      	mov	r0, r6
 800ef00:	f000 fe8e 	bl	800fc20 <__swsetup_r>
 800ef04:	b170      	cbz	r0, 800ef24 <_vfiprintf_r+0x5c>
 800ef06:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ef08:	07dc      	lsls	r4, r3, #31
 800ef0a:	d504      	bpl.n	800ef16 <_vfiprintf_r+0x4e>
 800ef0c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800ef10:	b01d      	add	sp, #116	@ 0x74
 800ef12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ef16:	89ab      	ldrh	r3, [r5, #12]
 800ef18:	0598      	lsls	r0, r3, #22
 800ef1a:	d4f7      	bmi.n	800ef0c <_vfiprintf_r+0x44>
 800ef1c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ef1e:	f7fe ffdb 	bl	800ded8 <__retarget_lock_release_recursive>
 800ef22:	e7f3      	b.n	800ef0c <_vfiprintf_r+0x44>
 800ef24:	2300      	movs	r3, #0
 800ef26:	f8cd 800c 	str.w	r8, [sp, #12]
 800ef2a:	f04f 0901 	mov.w	r9, #1
 800ef2e:	f8df 81b4 	ldr.w	r8, [pc, #436]	@ 800f0e4 <_vfiprintf_r+0x21c>
 800ef32:	9309      	str	r3, [sp, #36]	@ 0x24
 800ef34:	2320      	movs	r3, #32
 800ef36:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800ef3a:	2330      	movs	r3, #48	@ 0x30
 800ef3c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800ef40:	4623      	mov	r3, r4
 800ef42:	469a      	mov	sl, r3
 800ef44:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ef48:	b10a      	cbz	r2, 800ef4e <_vfiprintf_r+0x86>
 800ef4a:	2a25      	cmp	r2, #37	@ 0x25
 800ef4c:	d1f9      	bne.n	800ef42 <_vfiprintf_r+0x7a>
 800ef4e:	ebba 0b04 	subs.w	fp, sl, r4
 800ef52:	d00b      	beq.n	800ef6c <_vfiprintf_r+0xa4>
 800ef54:	465b      	mov	r3, fp
 800ef56:	4622      	mov	r2, r4
 800ef58:	4629      	mov	r1, r5
 800ef5a:	4630      	mov	r0, r6
 800ef5c:	f7ff ffa1 	bl	800eea2 <__sfputs_r>
 800ef60:	3001      	adds	r0, #1
 800ef62:	f000 80a7 	beq.w	800f0b4 <_vfiprintf_r+0x1ec>
 800ef66:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ef68:	445a      	add	r2, fp
 800ef6a:	9209      	str	r2, [sp, #36]	@ 0x24
 800ef6c:	f89a 3000 	ldrb.w	r3, [sl]
 800ef70:	2b00      	cmp	r3, #0
 800ef72:	f000 809f 	beq.w	800f0b4 <_vfiprintf_r+0x1ec>
 800ef76:	2300      	movs	r3, #0
 800ef78:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800ef7c:	f10a 0a01 	add.w	sl, sl, #1
 800ef80:	9304      	str	r3, [sp, #16]
 800ef82:	9307      	str	r3, [sp, #28]
 800ef84:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800ef88:	931a      	str	r3, [sp, #104]	@ 0x68
 800ef8a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ef8e:	4654      	mov	r4, sl
 800ef90:	2205      	movs	r2, #5
 800ef92:	4854      	ldr	r0, [pc, #336]	@ (800f0e4 <_vfiprintf_r+0x21c>)
 800ef94:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ef98:	f7fe ffa4 	bl	800dee4 <memchr>
 800ef9c:	9a04      	ldr	r2, [sp, #16]
 800ef9e:	b9d8      	cbnz	r0, 800efd8 <_vfiprintf_r+0x110>
 800efa0:	06d1      	lsls	r1, r2, #27
 800efa2:	bf44      	itt	mi
 800efa4:	2320      	movmi	r3, #32
 800efa6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800efaa:	0713      	lsls	r3, r2, #28
 800efac:	bf44      	itt	mi
 800efae:	232b      	movmi	r3, #43	@ 0x2b
 800efb0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800efb4:	f89a 3000 	ldrb.w	r3, [sl]
 800efb8:	2b2a      	cmp	r3, #42	@ 0x2a
 800efba:	d015      	beq.n	800efe8 <_vfiprintf_r+0x120>
 800efbc:	9a07      	ldr	r2, [sp, #28]
 800efbe:	4654      	mov	r4, sl
 800efc0:	2000      	movs	r0, #0
 800efc2:	f04f 0c0a 	mov.w	ip, #10
 800efc6:	4621      	mov	r1, r4
 800efc8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800efcc:	3b30      	subs	r3, #48	@ 0x30
 800efce:	2b09      	cmp	r3, #9
 800efd0:	d94b      	bls.n	800f06a <_vfiprintf_r+0x1a2>
 800efd2:	b1b0      	cbz	r0, 800f002 <_vfiprintf_r+0x13a>
 800efd4:	9207      	str	r2, [sp, #28]
 800efd6:	e014      	b.n	800f002 <_vfiprintf_r+0x13a>
 800efd8:	eba0 0308 	sub.w	r3, r0, r8
 800efdc:	46a2      	mov	sl, r4
 800efde:	fa09 f303 	lsl.w	r3, r9, r3
 800efe2:	4313      	orrs	r3, r2
 800efe4:	9304      	str	r3, [sp, #16]
 800efe6:	e7d2      	b.n	800ef8e <_vfiprintf_r+0xc6>
 800efe8:	9b03      	ldr	r3, [sp, #12]
 800efea:	1d19      	adds	r1, r3, #4
 800efec:	681b      	ldr	r3, [r3, #0]
 800efee:	2b00      	cmp	r3, #0
 800eff0:	9103      	str	r1, [sp, #12]
 800eff2:	bfbb      	ittet	lt
 800eff4:	425b      	neglt	r3, r3
 800eff6:	f042 0202 	orrlt.w	r2, r2, #2
 800effa:	9307      	strge	r3, [sp, #28]
 800effc:	9307      	strlt	r3, [sp, #28]
 800effe:	bfb8      	it	lt
 800f000:	9204      	strlt	r2, [sp, #16]
 800f002:	7823      	ldrb	r3, [r4, #0]
 800f004:	2b2e      	cmp	r3, #46	@ 0x2e
 800f006:	d10a      	bne.n	800f01e <_vfiprintf_r+0x156>
 800f008:	7863      	ldrb	r3, [r4, #1]
 800f00a:	2b2a      	cmp	r3, #42	@ 0x2a
 800f00c:	d132      	bne.n	800f074 <_vfiprintf_r+0x1ac>
 800f00e:	9b03      	ldr	r3, [sp, #12]
 800f010:	3402      	adds	r4, #2
 800f012:	1d1a      	adds	r2, r3, #4
 800f014:	681b      	ldr	r3, [r3, #0]
 800f016:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800f01a:	9203      	str	r2, [sp, #12]
 800f01c:	9305      	str	r3, [sp, #20]
 800f01e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800f0f4 <_vfiprintf_r+0x22c>
 800f022:	2203      	movs	r2, #3
 800f024:	7821      	ldrb	r1, [r4, #0]
 800f026:	4650      	mov	r0, sl
 800f028:	f7fe ff5c 	bl	800dee4 <memchr>
 800f02c:	b138      	cbz	r0, 800f03e <_vfiprintf_r+0x176>
 800f02e:	eba0 000a 	sub.w	r0, r0, sl
 800f032:	2240      	movs	r2, #64	@ 0x40
 800f034:	9b04      	ldr	r3, [sp, #16]
 800f036:	3401      	adds	r4, #1
 800f038:	4082      	lsls	r2, r0
 800f03a:	4313      	orrs	r3, r2
 800f03c:	9304      	str	r3, [sp, #16]
 800f03e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f042:	2206      	movs	r2, #6
 800f044:	4828      	ldr	r0, [pc, #160]	@ (800f0e8 <_vfiprintf_r+0x220>)
 800f046:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800f04a:	f7fe ff4b 	bl	800dee4 <memchr>
 800f04e:	2800      	cmp	r0, #0
 800f050:	d03f      	beq.n	800f0d2 <_vfiprintf_r+0x20a>
 800f052:	4b26      	ldr	r3, [pc, #152]	@ (800f0ec <_vfiprintf_r+0x224>)
 800f054:	bb1b      	cbnz	r3, 800f09e <_vfiprintf_r+0x1d6>
 800f056:	9b03      	ldr	r3, [sp, #12]
 800f058:	3307      	adds	r3, #7
 800f05a:	f023 0307 	bic.w	r3, r3, #7
 800f05e:	3308      	adds	r3, #8
 800f060:	9303      	str	r3, [sp, #12]
 800f062:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f064:	443b      	add	r3, r7
 800f066:	9309      	str	r3, [sp, #36]	@ 0x24
 800f068:	e76a      	b.n	800ef40 <_vfiprintf_r+0x78>
 800f06a:	fb0c 3202 	mla	r2, ip, r2, r3
 800f06e:	460c      	mov	r4, r1
 800f070:	2001      	movs	r0, #1
 800f072:	e7a8      	b.n	800efc6 <_vfiprintf_r+0xfe>
 800f074:	2300      	movs	r3, #0
 800f076:	3401      	adds	r4, #1
 800f078:	f04f 0c0a 	mov.w	ip, #10
 800f07c:	4619      	mov	r1, r3
 800f07e:	9305      	str	r3, [sp, #20]
 800f080:	4620      	mov	r0, r4
 800f082:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f086:	3a30      	subs	r2, #48	@ 0x30
 800f088:	2a09      	cmp	r2, #9
 800f08a:	d903      	bls.n	800f094 <_vfiprintf_r+0x1cc>
 800f08c:	2b00      	cmp	r3, #0
 800f08e:	d0c6      	beq.n	800f01e <_vfiprintf_r+0x156>
 800f090:	9105      	str	r1, [sp, #20]
 800f092:	e7c4      	b.n	800f01e <_vfiprintf_r+0x156>
 800f094:	fb0c 2101 	mla	r1, ip, r1, r2
 800f098:	4604      	mov	r4, r0
 800f09a:	2301      	movs	r3, #1
 800f09c:	e7f0      	b.n	800f080 <_vfiprintf_r+0x1b8>
 800f09e:	ab03      	add	r3, sp, #12
 800f0a0:	462a      	mov	r2, r5
 800f0a2:	a904      	add	r1, sp, #16
 800f0a4:	4630      	mov	r0, r6
 800f0a6:	9300      	str	r3, [sp, #0]
 800f0a8:	4b11      	ldr	r3, [pc, #68]	@ (800f0f0 <_vfiprintf_r+0x228>)
 800f0aa:	f7fe f9bf 	bl	800d42c <_printf_float>
 800f0ae:	4607      	mov	r7, r0
 800f0b0:	1c78      	adds	r0, r7, #1
 800f0b2:	d1d6      	bne.n	800f062 <_vfiprintf_r+0x19a>
 800f0b4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f0b6:	07d9      	lsls	r1, r3, #31
 800f0b8:	d405      	bmi.n	800f0c6 <_vfiprintf_r+0x1fe>
 800f0ba:	89ab      	ldrh	r3, [r5, #12]
 800f0bc:	059a      	lsls	r2, r3, #22
 800f0be:	d402      	bmi.n	800f0c6 <_vfiprintf_r+0x1fe>
 800f0c0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f0c2:	f7fe ff09 	bl	800ded8 <__retarget_lock_release_recursive>
 800f0c6:	89ab      	ldrh	r3, [r5, #12]
 800f0c8:	065b      	lsls	r3, r3, #25
 800f0ca:	f53f af1f 	bmi.w	800ef0c <_vfiprintf_r+0x44>
 800f0ce:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f0d0:	e71e      	b.n	800ef10 <_vfiprintf_r+0x48>
 800f0d2:	ab03      	add	r3, sp, #12
 800f0d4:	462a      	mov	r2, r5
 800f0d6:	a904      	add	r1, sp, #16
 800f0d8:	4630      	mov	r0, r6
 800f0da:	9300      	str	r3, [sp, #0]
 800f0dc:	4b04      	ldr	r3, [pc, #16]	@ (800f0f0 <_vfiprintf_r+0x228>)
 800f0de:	f7fe fc41 	bl	800d964 <_printf_i>
 800f0e2:	e7e4      	b.n	800f0ae <_vfiprintf_r+0x1e6>
 800f0e4:	080110b1 	.word	0x080110b1
 800f0e8:	080110bb 	.word	0x080110bb
 800f0ec:	0800d42d 	.word	0x0800d42d
 800f0f0:	0800eea3 	.word	0x0800eea3
 800f0f4:	080110b7 	.word	0x080110b7

0800f0f8 <malloc>:
 800f0f8:	4b02      	ldr	r3, [pc, #8]	@ (800f104 <malloc+0xc>)
 800f0fa:	4601      	mov	r1, r0
 800f0fc:	6818      	ldr	r0, [r3, #0]
 800f0fe:	f000 b825 	b.w	800f14c <_malloc_r>
 800f102:	bf00      	nop
 800f104:	20000040 	.word	0x20000040

0800f108 <sbrk_aligned>:
 800f108:	b570      	push	{r4, r5, r6, lr}
 800f10a:	4e0f      	ldr	r6, [pc, #60]	@ (800f148 <sbrk_aligned+0x40>)
 800f10c:	460c      	mov	r4, r1
 800f10e:	4605      	mov	r5, r0
 800f110:	6831      	ldr	r1, [r6, #0]
 800f112:	b911      	cbnz	r1, 800f11a <sbrk_aligned+0x12>
 800f114:	f000 fe8a 	bl	800fe2c <_sbrk_r>
 800f118:	6030      	str	r0, [r6, #0]
 800f11a:	4621      	mov	r1, r4
 800f11c:	4628      	mov	r0, r5
 800f11e:	f000 fe85 	bl	800fe2c <_sbrk_r>
 800f122:	1c43      	adds	r3, r0, #1
 800f124:	d103      	bne.n	800f12e <sbrk_aligned+0x26>
 800f126:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800f12a:	4620      	mov	r0, r4
 800f12c:	bd70      	pop	{r4, r5, r6, pc}
 800f12e:	1cc4      	adds	r4, r0, #3
 800f130:	f024 0403 	bic.w	r4, r4, #3
 800f134:	42a0      	cmp	r0, r4
 800f136:	d0f8      	beq.n	800f12a <sbrk_aligned+0x22>
 800f138:	1a21      	subs	r1, r4, r0
 800f13a:	4628      	mov	r0, r5
 800f13c:	f000 fe76 	bl	800fe2c <_sbrk_r>
 800f140:	3001      	adds	r0, #1
 800f142:	d1f2      	bne.n	800f12a <sbrk_aligned+0x22>
 800f144:	e7ef      	b.n	800f126 <sbrk_aligned+0x1e>
 800f146:	bf00      	nop
 800f148:	2000069c 	.word	0x2000069c

0800f14c <_malloc_r>:
 800f14c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f150:	1ccd      	adds	r5, r1, #3
 800f152:	4606      	mov	r6, r0
 800f154:	f025 0503 	bic.w	r5, r5, #3
 800f158:	3508      	adds	r5, #8
 800f15a:	2d0c      	cmp	r5, #12
 800f15c:	bf38      	it	cc
 800f15e:	250c      	movcc	r5, #12
 800f160:	2d00      	cmp	r5, #0
 800f162:	db01      	blt.n	800f168 <_malloc_r+0x1c>
 800f164:	42a9      	cmp	r1, r5
 800f166:	d904      	bls.n	800f172 <_malloc_r+0x26>
 800f168:	230c      	movs	r3, #12
 800f16a:	6033      	str	r3, [r6, #0]
 800f16c:	2000      	movs	r0, #0
 800f16e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f172:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800f248 <_malloc_r+0xfc>
 800f176:	f000 f915 	bl	800f3a4 <__malloc_lock>
 800f17a:	f8d8 3000 	ldr.w	r3, [r8]
 800f17e:	461c      	mov	r4, r3
 800f180:	bb44      	cbnz	r4, 800f1d4 <_malloc_r+0x88>
 800f182:	4629      	mov	r1, r5
 800f184:	4630      	mov	r0, r6
 800f186:	f7ff ffbf 	bl	800f108 <sbrk_aligned>
 800f18a:	1c43      	adds	r3, r0, #1
 800f18c:	4604      	mov	r4, r0
 800f18e:	d158      	bne.n	800f242 <_malloc_r+0xf6>
 800f190:	f8d8 4000 	ldr.w	r4, [r8]
 800f194:	4627      	mov	r7, r4
 800f196:	2f00      	cmp	r7, #0
 800f198:	d143      	bne.n	800f222 <_malloc_r+0xd6>
 800f19a:	2c00      	cmp	r4, #0
 800f19c:	d04b      	beq.n	800f236 <_malloc_r+0xea>
 800f19e:	6823      	ldr	r3, [r4, #0]
 800f1a0:	4639      	mov	r1, r7
 800f1a2:	4630      	mov	r0, r6
 800f1a4:	eb04 0903 	add.w	r9, r4, r3
 800f1a8:	f000 fe40 	bl	800fe2c <_sbrk_r>
 800f1ac:	4581      	cmp	r9, r0
 800f1ae:	d142      	bne.n	800f236 <_malloc_r+0xea>
 800f1b0:	6821      	ldr	r1, [r4, #0]
 800f1b2:	4630      	mov	r0, r6
 800f1b4:	1a6d      	subs	r5, r5, r1
 800f1b6:	4629      	mov	r1, r5
 800f1b8:	f7ff ffa6 	bl	800f108 <sbrk_aligned>
 800f1bc:	3001      	adds	r0, #1
 800f1be:	d03a      	beq.n	800f236 <_malloc_r+0xea>
 800f1c0:	6823      	ldr	r3, [r4, #0]
 800f1c2:	442b      	add	r3, r5
 800f1c4:	6023      	str	r3, [r4, #0]
 800f1c6:	f8d8 3000 	ldr.w	r3, [r8]
 800f1ca:	685a      	ldr	r2, [r3, #4]
 800f1cc:	bb62      	cbnz	r2, 800f228 <_malloc_r+0xdc>
 800f1ce:	f8c8 7000 	str.w	r7, [r8]
 800f1d2:	e00f      	b.n	800f1f4 <_malloc_r+0xa8>
 800f1d4:	6822      	ldr	r2, [r4, #0]
 800f1d6:	1b52      	subs	r2, r2, r5
 800f1d8:	d420      	bmi.n	800f21c <_malloc_r+0xd0>
 800f1da:	2a0b      	cmp	r2, #11
 800f1dc:	d917      	bls.n	800f20e <_malloc_r+0xc2>
 800f1de:	1961      	adds	r1, r4, r5
 800f1e0:	42a3      	cmp	r3, r4
 800f1e2:	6025      	str	r5, [r4, #0]
 800f1e4:	bf18      	it	ne
 800f1e6:	6059      	strne	r1, [r3, #4]
 800f1e8:	6863      	ldr	r3, [r4, #4]
 800f1ea:	bf08      	it	eq
 800f1ec:	f8c8 1000 	streq.w	r1, [r8]
 800f1f0:	5162      	str	r2, [r4, r5]
 800f1f2:	604b      	str	r3, [r1, #4]
 800f1f4:	4630      	mov	r0, r6
 800f1f6:	f000 f8db 	bl	800f3b0 <__malloc_unlock>
 800f1fa:	f104 000b 	add.w	r0, r4, #11
 800f1fe:	1d23      	adds	r3, r4, #4
 800f200:	f020 0007 	bic.w	r0, r0, #7
 800f204:	1ac2      	subs	r2, r0, r3
 800f206:	bf1c      	itt	ne
 800f208:	1a1b      	subne	r3, r3, r0
 800f20a:	50a3      	strne	r3, [r4, r2]
 800f20c:	e7af      	b.n	800f16e <_malloc_r+0x22>
 800f20e:	6862      	ldr	r2, [r4, #4]
 800f210:	42a3      	cmp	r3, r4
 800f212:	bf0c      	ite	eq
 800f214:	f8c8 2000 	streq.w	r2, [r8]
 800f218:	605a      	strne	r2, [r3, #4]
 800f21a:	e7eb      	b.n	800f1f4 <_malloc_r+0xa8>
 800f21c:	4623      	mov	r3, r4
 800f21e:	6864      	ldr	r4, [r4, #4]
 800f220:	e7ae      	b.n	800f180 <_malloc_r+0x34>
 800f222:	463c      	mov	r4, r7
 800f224:	687f      	ldr	r7, [r7, #4]
 800f226:	e7b6      	b.n	800f196 <_malloc_r+0x4a>
 800f228:	461a      	mov	r2, r3
 800f22a:	685b      	ldr	r3, [r3, #4]
 800f22c:	42a3      	cmp	r3, r4
 800f22e:	d1fb      	bne.n	800f228 <_malloc_r+0xdc>
 800f230:	2300      	movs	r3, #0
 800f232:	6053      	str	r3, [r2, #4]
 800f234:	e7de      	b.n	800f1f4 <_malloc_r+0xa8>
 800f236:	230c      	movs	r3, #12
 800f238:	4630      	mov	r0, r6
 800f23a:	6033      	str	r3, [r6, #0]
 800f23c:	f000 f8b8 	bl	800f3b0 <__malloc_unlock>
 800f240:	e794      	b.n	800f16c <_malloc_r+0x20>
 800f242:	6005      	str	r5, [r0, #0]
 800f244:	e7d6      	b.n	800f1f4 <_malloc_r+0xa8>
 800f246:	bf00      	nop
 800f248:	200006a0 	.word	0x200006a0

0800f24c <__sflush_r>:
 800f24c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800f250:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f254:	0716      	lsls	r6, r2, #28
 800f256:	4605      	mov	r5, r0
 800f258:	460c      	mov	r4, r1
 800f25a:	d454      	bmi.n	800f306 <__sflush_r+0xba>
 800f25c:	684b      	ldr	r3, [r1, #4]
 800f25e:	2b00      	cmp	r3, #0
 800f260:	dc02      	bgt.n	800f268 <__sflush_r+0x1c>
 800f262:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800f264:	2b00      	cmp	r3, #0
 800f266:	dd48      	ble.n	800f2fa <__sflush_r+0xae>
 800f268:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800f26a:	2e00      	cmp	r6, #0
 800f26c:	d045      	beq.n	800f2fa <__sflush_r+0xae>
 800f26e:	2300      	movs	r3, #0
 800f270:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800f274:	682f      	ldr	r7, [r5, #0]
 800f276:	6a21      	ldr	r1, [r4, #32]
 800f278:	602b      	str	r3, [r5, #0]
 800f27a:	d030      	beq.n	800f2de <__sflush_r+0x92>
 800f27c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800f27e:	89a3      	ldrh	r3, [r4, #12]
 800f280:	0759      	lsls	r1, r3, #29
 800f282:	d505      	bpl.n	800f290 <__sflush_r+0x44>
 800f284:	6863      	ldr	r3, [r4, #4]
 800f286:	1ad2      	subs	r2, r2, r3
 800f288:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800f28a:	b10b      	cbz	r3, 800f290 <__sflush_r+0x44>
 800f28c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800f28e:	1ad2      	subs	r2, r2, r3
 800f290:	2300      	movs	r3, #0
 800f292:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800f294:	6a21      	ldr	r1, [r4, #32]
 800f296:	4628      	mov	r0, r5
 800f298:	47b0      	blx	r6
 800f29a:	1c43      	adds	r3, r0, #1
 800f29c:	89a3      	ldrh	r3, [r4, #12]
 800f29e:	d106      	bne.n	800f2ae <__sflush_r+0x62>
 800f2a0:	6829      	ldr	r1, [r5, #0]
 800f2a2:	291d      	cmp	r1, #29
 800f2a4:	d82b      	bhi.n	800f2fe <__sflush_r+0xb2>
 800f2a6:	4a2a      	ldr	r2, [pc, #168]	@ (800f350 <__sflush_r+0x104>)
 800f2a8:	40ca      	lsrs	r2, r1
 800f2aa:	07d6      	lsls	r6, r2, #31
 800f2ac:	d527      	bpl.n	800f2fe <__sflush_r+0xb2>
 800f2ae:	2200      	movs	r2, #0
 800f2b0:	04d9      	lsls	r1, r3, #19
 800f2b2:	6062      	str	r2, [r4, #4]
 800f2b4:	6922      	ldr	r2, [r4, #16]
 800f2b6:	6022      	str	r2, [r4, #0]
 800f2b8:	d504      	bpl.n	800f2c4 <__sflush_r+0x78>
 800f2ba:	1c42      	adds	r2, r0, #1
 800f2bc:	d101      	bne.n	800f2c2 <__sflush_r+0x76>
 800f2be:	682b      	ldr	r3, [r5, #0]
 800f2c0:	b903      	cbnz	r3, 800f2c4 <__sflush_r+0x78>
 800f2c2:	6560      	str	r0, [r4, #84]	@ 0x54
 800f2c4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800f2c6:	602f      	str	r7, [r5, #0]
 800f2c8:	b1b9      	cbz	r1, 800f2fa <__sflush_r+0xae>
 800f2ca:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800f2ce:	4299      	cmp	r1, r3
 800f2d0:	d002      	beq.n	800f2d8 <__sflush_r+0x8c>
 800f2d2:	4628      	mov	r0, r5
 800f2d4:	f000 fe2e 	bl	800ff34 <_free_r>
 800f2d8:	2300      	movs	r3, #0
 800f2da:	6363      	str	r3, [r4, #52]	@ 0x34
 800f2dc:	e00d      	b.n	800f2fa <__sflush_r+0xae>
 800f2de:	2301      	movs	r3, #1
 800f2e0:	4628      	mov	r0, r5
 800f2e2:	47b0      	blx	r6
 800f2e4:	4602      	mov	r2, r0
 800f2e6:	1c50      	adds	r0, r2, #1
 800f2e8:	d1c9      	bne.n	800f27e <__sflush_r+0x32>
 800f2ea:	682b      	ldr	r3, [r5, #0]
 800f2ec:	2b00      	cmp	r3, #0
 800f2ee:	d0c6      	beq.n	800f27e <__sflush_r+0x32>
 800f2f0:	2b1d      	cmp	r3, #29
 800f2f2:	d001      	beq.n	800f2f8 <__sflush_r+0xac>
 800f2f4:	2b16      	cmp	r3, #22
 800f2f6:	d11d      	bne.n	800f334 <__sflush_r+0xe8>
 800f2f8:	602f      	str	r7, [r5, #0]
 800f2fa:	2000      	movs	r0, #0
 800f2fc:	e021      	b.n	800f342 <__sflush_r+0xf6>
 800f2fe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f302:	b21b      	sxth	r3, r3
 800f304:	e01a      	b.n	800f33c <__sflush_r+0xf0>
 800f306:	690f      	ldr	r7, [r1, #16]
 800f308:	2f00      	cmp	r7, #0
 800f30a:	d0f6      	beq.n	800f2fa <__sflush_r+0xae>
 800f30c:	0793      	lsls	r3, r2, #30
 800f30e:	680e      	ldr	r6, [r1, #0]
 800f310:	600f      	str	r7, [r1, #0]
 800f312:	bf0c      	ite	eq
 800f314:	694b      	ldreq	r3, [r1, #20]
 800f316:	2300      	movne	r3, #0
 800f318:	eba6 0807 	sub.w	r8, r6, r7
 800f31c:	608b      	str	r3, [r1, #8]
 800f31e:	f1b8 0f00 	cmp.w	r8, #0
 800f322:	ddea      	ble.n	800f2fa <__sflush_r+0xae>
 800f324:	4643      	mov	r3, r8
 800f326:	463a      	mov	r2, r7
 800f328:	6a21      	ldr	r1, [r4, #32]
 800f32a:	4628      	mov	r0, r5
 800f32c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800f32e:	47b0      	blx	r6
 800f330:	2800      	cmp	r0, #0
 800f332:	dc08      	bgt.n	800f346 <__sflush_r+0xfa>
 800f334:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f338:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f33c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800f340:	81a3      	strh	r3, [r4, #12]
 800f342:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f346:	4407      	add	r7, r0
 800f348:	eba8 0800 	sub.w	r8, r8, r0
 800f34c:	e7e7      	b.n	800f31e <__sflush_r+0xd2>
 800f34e:	bf00      	nop
 800f350:	20400001 	.word	0x20400001

0800f354 <_fflush_r>:
 800f354:	b538      	push	{r3, r4, r5, lr}
 800f356:	690b      	ldr	r3, [r1, #16]
 800f358:	4605      	mov	r5, r0
 800f35a:	460c      	mov	r4, r1
 800f35c:	b913      	cbnz	r3, 800f364 <_fflush_r+0x10>
 800f35e:	2500      	movs	r5, #0
 800f360:	4628      	mov	r0, r5
 800f362:	bd38      	pop	{r3, r4, r5, pc}
 800f364:	b118      	cbz	r0, 800f36e <_fflush_r+0x1a>
 800f366:	6a03      	ldr	r3, [r0, #32]
 800f368:	b90b      	cbnz	r3, 800f36e <_fflush_r+0x1a>
 800f36a:	f7fe fcdb 	bl	800dd24 <__sinit>
 800f36e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f372:	2b00      	cmp	r3, #0
 800f374:	d0f3      	beq.n	800f35e <_fflush_r+0xa>
 800f376:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800f378:	07d0      	lsls	r0, r2, #31
 800f37a:	d404      	bmi.n	800f386 <_fflush_r+0x32>
 800f37c:	0599      	lsls	r1, r3, #22
 800f37e:	d402      	bmi.n	800f386 <_fflush_r+0x32>
 800f380:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f382:	f7fe fda8 	bl	800ded6 <__retarget_lock_acquire_recursive>
 800f386:	4628      	mov	r0, r5
 800f388:	4621      	mov	r1, r4
 800f38a:	f7ff ff5f 	bl	800f24c <__sflush_r>
 800f38e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800f390:	4605      	mov	r5, r0
 800f392:	07da      	lsls	r2, r3, #31
 800f394:	d4e4      	bmi.n	800f360 <_fflush_r+0xc>
 800f396:	89a3      	ldrh	r3, [r4, #12]
 800f398:	059b      	lsls	r3, r3, #22
 800f39a:	d4e1      	bmi.n	800f360 <_fflush_r+0xc>
 800f39c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f39e:	f7fe fd9b 	bl	800ded8 <__retarget_lock_release_recursive>
 800f3a2:	e7dd      	b.n	800f360 <_fflush_r+0xc>

0800f3a4 <__malloc_lock>:
 800f3a4:	4801      	ldr	r0, [pc, #4]	@ (800f3ac <__malloc_lock+0x8>)
 800f3a6:	f7fe bd96 	b.w	800ded6 <__retarget_lock_acquire_recursive>
 800f3aa:	bf00      	nop
 800f3ac:	20000698 	.word	0x20000698

0800f3b0 <__malloc_unlock>:
 800f3b0:	4801      	ldr	r0, [pc, #4]	@ (800f3b8 <__malloc_unlock+0x8>)
 800f3b2:	f7fe bd91 	b.w	800ded8 <__retarget_lock_release_recursive>
 800f3b6:	bf00      	nop
 800f3b8:	20000698 	.word	0x20000698

0800f3bc <_Balloc>:
 800f3bc:	b570      	push	{r4, r5, r6, lr}
 800f3be:	69c6      	ldr	r6, [r0, #28]
 800f3c0:	4604      	mov	r4, r0
 800f3c2:	460d      	mov	r5, r1
 800f3c4:	b976      	cbnz	r6, 800f3e4 <_Balloc+0x28>
 800f3c6:	2010      	movs	r0, #16
 800f3c8:	f7ff fe96 	bl	800f0f8 <malloc>
 800f3cc:	4602      	mov	r2, r0
 800f3ce:	61e0      	str	r0, [r4, #28]
 800f3d0:	b920      	cbnz	r0, 800f3dc <_Balloc+0x20>
 800f3d2:	4b18      	ldr	r3, [pc, #96]	@ (800f434 <_Balloc+0x78>)
 800f3d4:	216b      	movs	r1, #107	@ 0x6b
 800f3d6:	4818      	ldr	r0, [pc, #96]	@ (800f438 <_Balloc+0x7c>)
 800f3d8:	f000 fd7a 	bl	800fed0 <__assert_func>
 800f3dc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f3e0:	6006      	str	r6, [r0, #0]
 800f3e2:	60c6      	str	r6, [r0, #12]
 800f3e4:	69e6      	ldr	r6, [r4, #28]
 800f3e6:	68f3      	ldr	r3, [r6, #12]
 800f3e8:	b183      	cbz	r3, 800f40c <_Balloc+0x50>
 800f3ea:	69e3      	ldr	r3, [r4, #28]
 800f3ec:	68db      	ldr	r3, [r3, #12]
 800f3ee:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800f3f2:	b9b8      	cbnz	r0, 800f424 <_Balloc+0x68>
 800f3f4:	2101      	movs	r1, #1
 800f3f6:	4620      	mov	r0, r4
 800f3f8:	fa01 f605 	lsl.w	r6, r1, r5
 800f3fc:	1d72      	adds	r2, r6, #5
 800f3fe:	0092      	lsls	r2, r2, #2
 800f400:	f000 fd84 	bl	800ff0c <_calloc_r>
 800f404:	b160      	cbz	r0, 800f420 <_Balloc+0x64>
 800f406:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800f40a:	e00e      	b.n	800f42a <_Balloc+0x6e>
 800f40c:	2221      	movs	r2, #33	@ 0x21
 800f40e:	2104      	movs	r1, #4
 800f410:	4620      	mov	r0, r4
 800f412:	f000 fd7b 	bl	800ff0c <_calloc_r>
 800f416:	69e3      	ldr	r3, [r4, #28]
 800f418:	60f0      	str	r0, [r6, #12]
 800f41a:	68db      	ldr	r3, [r3, #12]
 800f41c:	2b00      	cmp	r3, #0
 800f41e:	d1e4      	bne.n	800f3ea <_Balloc+0x2e>
 800f420:	2000      	movs	r0, #0
 800f422:	bd70      	pop	{r4, r5, r6, pc}
 800f424:	6802      	ldr	r2, [r0, #0]
 800f426:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800f42a:	2300      	movs	r3, #0
 800f42c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800f430:	e7f7      	b.n	800f422 <_Balloc+0x66>
 800f432:	bf00      	nop
 800f434:	08011031 	.word	0x08011031
 800f438:	080110c2 	.word	0x080110c2

0800f43c <_Bfree>:
 800f43c:	b570      	push	{r4, r5, r6, lr}
 800f43e:	69c6      	ldr	r6, [r0, #28]
 800f440:	4605      	mov	r5, r0
 800f442:	460c      	mov	r4, r1
 800f444:	b976      	cbnz	r6, 800f464 <_Bfree+0x28>
 800f446:	2010      	movs	r0, #16
 800f448:	f7ff fe56 	bl	800f0f8 <malloc>
 800f44c:	4602      	mov	r2, r0
 800f44e:	61e8      	str	r0, [r5, #28]
 800f450:	b920      	cbnz	r0, 800f45c <_Bfree+0x20>
 800f452:	4b09      	ldr	r3, [pc, #36]	@ (800f478 <_Bfree+0x3c>)
 800f454:	218f      	movs	r1, #143	@ 0x8f
 800f456:	4809      	ldr	r0, [pc, #36]	@ (800f47c <_Bfree+0x40>)
 800f458:	f000 fd3a 	bl	800fed0 <__assert_func>
 800f45c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f460:	6006      	str	r6, [r0, #0]
 800f462:	60c6      	str	r6, [r0, #12]
 800f464:	b13c      	cbz	r4, 800f476 <_Bfree+0x3a>
 800f466:	69eb      	ldr	r3, [r5, #28]
 800f468:	6862      	ldr	r2, [r4, #4]
 800f46a:	68db      	ldr	r3, [r3, #12]
 800f46c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800f470:	6021      	str	r1, [r4, #0]
 800f472:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800f476:	bd70      	pop	{r4, r5, r6, pc}
 800f478:	08011031 	.word	0x08011031
 800f47c:	080110c2 	.word	0x080110c2

0800f480 <__multadd>:
 800f480:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f484:	f101 0c14 	add.w	ip, r1, #20
 800f488:	4607      	mov	r7, r0
 800f48a:	460c      	mov	r4, r1
 800f48c:	461e      	mov	r6, r3
 800f48e:	690d      	ldr	r5, [r1, #16]
 800f490:	2000      	movs	r0, #0
 800f492:	f8dc 3000 	ldr.w	r3, [ip]
 800f496:	3001      	adds	r0, #1
 800f498:	b299      	uxth	r1, r3
 800f49a:	4285      	cmp	r5, r0
 800f49c:	fb02 6101 	mla	r1, r2, r1, r6
 800f4a0:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800f4a4:	ea4f 4311 	mov.w	r3, r1, lsr #16
 800f4a8:	b289      	uxth	r1, r1
 800f4aa:	fb02 3306 	mla	r3, r2, r6, r3
 800f4ae:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800f4b2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800f4b6:	f84c 1b04 	str.w	r1, [ip], #4
 800f4ba:	dcea      	bgt.n	800f492 <__multadd+0x12>
 800f4bc:	b30e      	cbz	r6, 800f502 <__multadd+0x82>
 800f4be:	68a3      	ldr	r3, [r4, #8]
 800f4c0:	42ab      	cmp	r3, r5
 800f4c2:	dc19      	bgt.n	800f4f8 <__multadd+0x78>
 800f4c4:	6861      	ldr	r1, [r4, #4]
 800f4c6:	4638      	mov	r0, r7
 800f4c8:	3101      	adds	r1, #1
 800f4ca:	f7ff ff77 	bl	800f3bc <_Balloc>
 800f4ce:	4680      	mov	r8, r0
 800f4d0:	b928      	cbnz	r0, 800f4de <__multadd+0x5e>
 800f4d2:	4602      	mov	r2, r0
 800f4d4:	4b0c      	ldr	r3, [pc, #48]	@ (800f508 <__multadd+0x88>)
 800f4d6:	21ba      	movs	r1, #186	@ 0xba
 800f4d8:	480c      	ldr	r0, [pc, #48]	@ (800f50c <__multadd+0x8c>)
 800f4da:	f000 fcf9 	bl	800fed0 <__assert_func>
 800f4de:	6922      	ldr	r2, [r4, #16]
 800f4e0:	f104 010c 	add.w	r1, r4, #12
 800f4e4:	300c      	adds	r0, #12
 800f4e6:	3202      	adds	r2, #2
 800f4e8:	0092      	lsls	r2, r2, #2
 800f4ea:	f000 fce3 	bl	800feb4 <memcpy>
 800f4ee:	4621      	mov	r1, r4
 800f4f0:	4644      	mov	r4, r8
 800f4f2:	4638      	mov	r0, r7
 800f4f4:	f7ff ffa2 	bl	800f43c <_Bfree>
 800f4f8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800f4fc:	3501      	adds	r5, #1
 800f4fe:	615e      	str	r6, [r3, #20]
 800f500:	6125      	str	r5, [r4, #16]
 800f502:	4620      	mov	r0, r4
 800f504:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f508:	080110a0 	.word	0x080110a0
 800f50c:	080110c2 	.word	0x080110c2

0800f510 <__hi0bits>:
 800f510:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800f514:	4603      	mov	r3, r0
 800f516:	bf36      	itet	cc
 800f518:	0403      	lslcc	r3, r0, #16
 800f51a:	2000      	movcs	r0, #0
 800f51c:	2010      	movcc	r0, #16
 800f51e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800f522:	bf3c      	itt	cc
 800f524:	021b      	lslcc	r3, r3, #8
 800f526:	3008      	addcc	r0, #8
 800f528:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800f52c:	bf3c      	itt	cc
 800f52e:	011b      	lslcc	r3, r3, #4
 800f530:	3004      	addcc	r0, #4
 800f532:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800f536:	bf3c      	itt	cc
 800f538:	009b      	lslcc	r3, r3, #2
 800f53a:	3002      	addcc	r0, #2
 800f53c:	2b00      	cmp	r3, #0
 800f53e:	db05      	blt.n	800f54c <__hi0bits+0x3c>
 800f540:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800f544:	f100 0001 	add.w	r0, r0, #1
 800f548:	bf08      	it	eq
 800f54a:	2020      	moveq	r0, #32
 800f54c:	4770      	bx	lr

0800f54e <__lo0bits>:
 800f54e:	6803      	ldr	r3, [r0, #0]
 800f550:	4602      	mov	r2, r0
 800f552:	f013 0007 	ands.w	r0, r3, #7
 800f556:	d00b      	beq.n	800f570 <__lo0bits+0x22>
 800f558:	07d9      	lsls	r1, r3, #31
 800f55a:	d421      	bmi.n	800f5a0 <__lo0bits+0x52>
 800f55c:	0798      	lsls	r0, r3, #30
 800f55e:	bf47      	ittee	mi
 800f560:	085b      	lsrmi	r3, r3, #1
 800f562:	2001      	movmi	r0, #1
 800f564:	089b      	lsrpl	r3, r3, #2
 800f566:	2002      	movpl	r0, #2
 800f568:	bf4c      	ite	mi
 800f56a:	6013      	strmi	r3, [r2, #0]
 800f56c:	6013      	strpl	r3, [r2, #0]
 800f56e:	4770      	bx	lr
 800f570:	b299      	uxth	r1, r3
 800f572:	b909      	cbnz	r1, 800f578 <__lo0bits+0x2a>
 800f574:	0c1b      	lsrs	r3, r3, #16
 800f576:	2010      	movs	r0, #16
 800f578:	b2d9      	uxtb	r1, r3
 800f57a:	b909      	cbnz	r1, 800f580 <__lo0bits+0x32>
 800f57c:	3008      	adds	r0, #8
 800f57e:	0a1b      	lsrs	r3, r3, #8
 800f580:	0719      	lsls	r1, r3, #28
 800f582:	bf04      	itt	eq
 800f584:	091b      	lsreq	r3, r3, #4
 800f586:	3004      	addeq	r0, #4
 800f588:	0799      	lsls	r1, r3, #30
 800f58a:	bf04      	itt	eq
 800f58c:	089b      	lsreq	r3, r3, #2
 800f58e:	3002      	addeq	r0, #2
 800f590:	07d9      	lsls	r1, r3, #31
 800f592:	d403      	bmi.n	800f59c <__lo0bits+0x4e>
 800f594:	085b      	lsrs	r3, r3, #1
 800f596:	f100 0001 	add.w	r0, r0, #1
 800f59a:	d003      	beq.n	800f5a4 <__lo0bits+0x56>
 800f59c:	6013      	str	r3, [r2, #0]
 800f59e:	4770      	bx	lr
 800f5a0:	2000      	movs	r0, #0
 800f5a2:	4770      	bx	lr
 800f5a4:	2020      	movs	r0, #32
 800f5a6:	4770      	bx	lr

0800f5a8 <__i2b>:
 800f5a8:	b510      	push	{r4, lr}
 800f5aa:	460c      	mov	r4, r1
 800f5ac:	2101      	movs	r1, #1
 800f5ae:	f7ff ff05 	bl	800f3bc <_Balloc>
 800f5b2:	4602      	mov	r2, r0
 800f5b4:	b928      	cbnz	r0, 800f5c2 <__i2b+0x1a>
 800f5b6:	4b05      	ldr	r3, [pc, #20]	@ (800f5cc <__i2b+0x24>)
 800f5b8:	f240 1145 	movw	r1, #325	@ 0x145
 800f5bc:	4804      	ldr	r0, [pc, #16]	@ (800f5d0 <__i2b+0x28>)
 800f5be:	f000 fc87 	bl	800fed0 <__assert_func>
 800f5c2:	2301      	movs	r3, #1
 800f5c4:	6144      	str	r4, [r0, #20]
 800f5c6:	6103      	str	r3, [r0, #16]
 800f5c8:	bd10      	pop	{r4, pc}
 800f5ca:	bf00      	nop
 800f5cc:	080110a0 	.word	0x080110a0
 800f5d0:	080110c2 	.word	0x080110c2

0800f5d4 <__multiply>:
 800f5d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f5d8:	4617      	mov	r7, r2
 800f5da:	690a      	ldr	r2, [r1, #16]
 800f5dc:	4689      	mov	r9, r1
 800f5de:	b085      	sub	sp, #20
 800f5e0:	693b      	ldr	r3, [r7, #16]
 800f5e2:	429a      	cmp	r2, r3
 800f5e4:	bfa2      	ittt	ge
 800f5e6:	463b      	movge	r3, r7
 800f5e8:	460f      	movge	r7, r1
 800f5ea:	4699      	movge	r9, r3
 800f5ec:	693d      	ldr	r5, [r7, #16]
 800f5ee:	68bb      	ldr	r3, [r7, #8]
 800f5f0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800f5f4:	6879      	ldr	r1, [r7, #4]
 800f5f6:	eb05 060a 	add.w	r6, r5, sl
 800f5fa:	42b3      	cmp	r3, r6
 800f5fc:	bfb8      	it	lt
 800f5fe:	3101      	addlt	r1, #1
 800f600:	f7ff fedc 	bl	800f3bc <_Balloc>
 800f604:	b930      	cbnz	r0, 800f614 <__multiply+0x40>
 800f606:	4602      	mov	r2, r0
 800f608:	4b42      	ldr	r3, [pc, #264]	@ (800f714 <__multiply+0x140>)
 800f60a:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800f60e:	4842      	ldr	r0, [pc, #264]	@ (800f718 <__multiply+0x144>)
 800f610:	f000 fc5e 	bl	800fed0 <__assert_func>
 800f614:	f100 0414 	add.w	r4, r0, #20
 800f618:	2200      	movs	r2, #0
 800f61a:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800f61e:	4623      	mov	r3, r4
 800f620:	4573      	cmp	r3, lr
 800f622:	d320      	bcc.n	800f666 <__multiply+0x92>
 800f624:	f107 0814 	add.w	r8, r7, #20
 800f628:	f109 0114 	add.w	r1, r9, #20
 800f62c:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800f630:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800f634:	9302      	str	r3, [sp, #8]
 800f636:	1beb      	subs	r3, r5, r7
 800f638:	3715      	adds	r7, #21
 800f63a:	3b15      	subs	r3, #21
 800f63c:	f023 0303 	bic.w	r3, r3, #3
 800f640:	3304      	adds	r3, #4
 800f642:	42bd      	cmp	r5, r7
 800f644:	bf38      	it	cc
 800f646:	2304      	movcc	r3, #4
 800f648:	9301      	str	r3, [sp, #4]
 800f64a:	9b02      	ldr	r3, [sp, #8]
 800f64c:	9103      	str	r1, [sp, #12]
 800f64e:	428b      	cmp	r3, r1
 800f650:	d80c      	bhi.n	800f66c <__multiply+0x98>
 800f652:	2e00      	cmp	r6, #0
 800f654:	dd03      	ble.n	800f65e <__multiply+0x8a>
 800f656:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800f65a:	2b00      	cmp	r3, #0
 800f65c:	d057      	beq.n	800f70e <__multiply+0x13a>
 800f65e:	6106      	str	r6, [r0, #16]
 800f660:	b005      	add	sp, #20
 800f662:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f666:	f843 2b04 	str.w	r2, [r3], #4
 800f66a:	e7d9      	b.n	800f620 <__multiply+0x4c>
 800f66c:	f8b1 a000 	ldrh.w	sl, [r1]
 800f670:	f1ba 0f00 	cmp.w	sl, #0
 800f674:	d021      	beq.n	800f6ba <__multiply+0xe6>
 800f676:	46c4      	mov	ip, r8
 800f678:	46a1      	mov	r9, r4
 800f67a:	2700      	movs	r7, #0
 800f67c:	f85c 2b04 	ldr.w	r2, [ip], #4
 800f680:	f8d9 3000 	ldr.w	r3, [r9]
 800f684:	fa1f fb82 	uxth.w	fp, r2
 800f688:	4565      	cmp	r5, ip
 800f68a:	b29b      	uxth	r3, r3
 800f68c:	ea4f 4212 	mov.w	r2, r2, lsr #16
 800f690:	fb0a 330b 	mla	r3, sl, fp, r3
 800f694:	443b      	add	r3, r7
 800f696:	f8d9 7000 	ldr.w	r7, [r9]
 800f69a:	ea4f 4717 	mov.w	r7, r7, lsr #16
 800f69e:	fb0a 7202 	mla	r2, sl, r2, r7
 800f6a2:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800f6a6:	b29b      	uxth	r3, r3
 800f6a8:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800f6ac:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f6b0:	f849 3b04 	str.w	r3, [r9], #4
 800f6b4:	d8e2      	bhi.n	800f67c <__multiply+0xa8>
 800f6b6:	9b01      	ldr	r3, [sp, #4]
 800f6b8:	50e7      	str	r7, [r4, r3]
 800f6ba:	9b03      	ldr	r3, [sp, #12]
 800f6bc:	3104      	adds	r1, #4
 800f6be:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800f6c2:	f1b9 0f00 	cmp.w	r9, #0
 800f6c6:	d020      	beq.n	800f70a <__multiply+0x136>
 800f6c8:	6823      	ldr	r3, [r4, #0]
 800f6ca:	4647      	mov	r7, r8
 800f6cc:	46a4      	mov	ip, r4
 800f6ce:	f04f 0a00 	mov.w	sl, #0
 800f6d2:	f8b7 b000 	ldrh.w	fp, [r7]
 800f6d6:	b29b      	uxth	r3, r3
 800f6d8:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800f6dc:	fb09 220b 	mla	r2, r9, fp, r2
 800f6e0:	4452      	add	r2, sl
 800f6e2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f6e6:	f84c 3b04 	str.w	r3, [ip], #4
 800f6ea:	f857 3b04 	ldr.w	r3, [r7], #4
 800f6ee:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800f6f2:	f8bc 3000 	ldrh.w	r3, [ip]
 800f6f6:	42bd      	cmp	r5, r7
 800f6f8:	fb09 330a 	mla	r3, r9, sl, r3
 800f6fc:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800f700:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800f704:	d8e5      	bhi.n	800f6d2 <__multiply+0xfe>
 800f706:	9a01      	ldr	r2, [sp, #4]
 800f708:	50a3      	str	r3, [r4, r2]
 800f70a:	3404      	adds	r4, #4
 800f70c:	e79d      	b.n	800f64a <__multiply+0x76>
 800f70e:	3e01      	subs	r6, #1
 800f710:	e79f      	b.n	800f652 <__multiply+0x7e>
 800f712:	bf00      	nop
 800f714:	080110a0 	.word	0x080110a0
 800f718:	080110c2 	.word	0x080110c2

0800f71c <__pow5mult>:
 800f71c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f720:	4615      	mov	r5, r2
 800f722:	f012 0203 	ands.w	r2, r2, #3
 800f726:	4607      	mov	r7, r0
 800f728:	460e      	mov	r6, r1
 800f72a:	d007      	beq.n	800f73c <__pow5mult+0x20>
 800f72c:	3a01      	subs	r2, #1
 800f72e:	4c25      	ldr	r4, [pc, #148]	@ (800f7c4 <__pow5mult+0xa8>)
 800f730:	2300      	movs	r3, #0
 800f732:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800f736:	f7ff fea3 	bl	800f480 <__multadd>
 800f73a:	4606      	mov	r6, r0
 800f73c:	10ad      	asrs	r5, r5, #2
 800f73e:	d03d      	beq.n	800f7bc <__pow5mult+0xa0>
 800f740:	69fc      	ldr	r4, [r7, #28]
 800f742:	b97c      	cbnz	r4, 800f764 <__pow5mult+0x48>
 800f744:	2010      	movs	r0, #16
 800f746:	f7ff fcd7 	bl	800f0f8 <malloc>
 800f74a:	4602      	mov	r2, r0
 800f74c:	61f8      	str	r0, [r7, #28]
 800f74e:	b928      	cbnz	r0, 800f75c <__pow5mult+0x40>
 800f750:	4b1d      	ldr	r3, [pc, #116]	@ (800f7c8 <__pow5mult+0xac>)
 800f752:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800f756:	481d      	ldr	r0, [pc, #116]	@ (800f7cc <__pow5mult+0xb0>)
 800f758:	f000 fbba 	bl	800fed0 <__assert_func>
 800f75c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800f760:	6004      	str	r4, [r0, #0]
 800f762:	60c4      	str	r4, [r0, #12]
 800f764:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800f768:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800f76c:	b94c      	cbnz	r4, 800f782 <__pow5mult+0x66>
 800f76e:	f240 2171 	movw	r1, #625	@ 0x271
 800f772:	4638      	mov	r0, r7
 800f774:	f7ff ff18 	bl	800f5a8 <__i2b>
 800f778:	2300      	movs	r3, #0
 800f77a:	4604      	mov	r4, r0
 800f77c:	f8c8 0008 	str.w	r0, [r8, #8]
 800f780:	6003      	str	r3, [r0, #0]
 800f782:	f04f 0900 	mov.w	r9, #0
 800f786:	07eb      	lsls	r3, r5, #31
 800f788:	d50a      	bpl.n	800f7a0 <__pow5mult+0x84>
 800f78a:	4631      	mov	r1, r6
 800f78c:	4622      	mov	r2, r4
 800f78e:	4638      	mov	r0, r7
 800f790:	f7ff ff20 	bl	800f5d4 <__multiply>
 800f794:	4680      	mov	r8, r0
 800f796:	4631      	mov	r1, r6
 800f798:	4638      	mov	r0, r7
 800f79a:	4646      	mov	r6, r8
 800f79c:	f7ff fe4e 	bl	800f43c <_Bfree>
 800f7a0:	106d      	asrs	r5, r5, #1
 800f7a2:	d00b      	beq.n	800f7bc <__pow5mult+0xa0>
 800f7a4:	6820      	ldr	r0, [r4, #0]
 800f7a6:	b938      	cbnz	r0, 800f7b8 <__pow5mult+0x9c>
 800f7a8:	4622      	mov	r2, r4
 800f7aa:	4621      	mov	r1, r4
 800f7ac:	4638      	mov	r0, r7
 800f7ae:	f7ff ff11 	bl	800f5d4 <__multiply>
 800f7b2:	6020      	str	r0, [r4, #0]
 800f7b4:	f8c0 9000 	str.w	r9, [r0]
 800f7b8:	4604      	mov	r4, r0
 800f7ba:	e7e4      	b.n	800f786 <__pow5mult+0x6a>
 800f7bc:	4630      	mov	r0, r6
 800f7be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f7c2:	bf00      	nop
 800f7c4:	08011164 	.word	0x08011164
 800f7c8:	08011031 	.word	0x08011031
 800f7cc:	080110c2 	.word	0x080110c2

0800f7d0 <__lshift>:
 800f7d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f7d4:	460c      	mov	r4, r1
 800f7d6:	4607      	mov	r7, r0
 800f7d8:	4691      	mov	r9, r2
 800f7da:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800f7de:	6923      	ldr	r3, [r4, #16]
 800f7e0:	6849      	ldr	r1, [r1, #4]
 800f7e2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800f7e6:	68a3      	ldr	r3, [r4, #8]
 800f7e8:	f108 0601 	add.w	r6, r8, #1
 800f7ec:	42b3      	cmp	r3, r6
 800f7ee:	db0b      	blt.n	800f808 <__lshift+0x38>
 800f7f0:	4638      	mov	r0, r7
 800f7f2:	f7ff fde3 	bl	800f3bc <_Balloc>
 800f7f6:	4605      	mov	r5, r0
 800f7f8:	b948      	cbnz	r0, 800f80e <__lshift+0x3e>
 800f7fa:	4602      	mov	r2, r0
 800f7fc:	4b28      	ldr	r3, [pc, #160]	@ (800f8a0 <__lshift+0xd0>)
 800f7fe:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800f802:	4828      	ldr	r0, [pc, #160]	@ (800f8a4 <__lshift+0xd4>)
 800f804:	f000 fb64 	bl	800fed0 <__assert_func>
 800f808:	3101      	adds	r1, #1
 800f80a:	005b      	lsls	r3, r3, #1
 800f80c:	e7ee      	b.n	800f7ec <__lshift+0x1c>
 800f80e:	2300      	movs	r3, #0
 800f810:	f100 0114 	add.w	r1, r0, #20
 800f814:	f100 0210 	add.w	r2, r0, #16
 800f818:	4618      	mov	r0, r3
 800f81a:	4553      	cmp	r3, sl
 800f81c:	db33      	blt.n	800f886 <__lshift+0xb6>
 800f81e:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800f822:	f104 0314 	add.w	r3, r4, #20
 800f826:	6920      	ldr	r0, [r4, #16]
 800f828:	f019 091f 	ands.w	r9, r9, #31
 800f82c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800f830:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800f834:	d02b      	beq.n	800f88e <__lshift+0xbe>
 800f836:	f1c9 0e20 	rsb	lr, r9, #32
 800f83a:	468a      	mov	sl, r1
 800f83c:	2200      	movs	r2, #0
 800f83e:	6818      	ldr	r0, [r3, #0]
 800f840:	fa00 f009 	lsl.w	r0, r0, r9
 800f844:	4310      	orrs	r0, r2
 800f846:	f84a 0b04 	str.w	r0, [sl], #4
 800f84a:	f853 2b04 	ldr.w	r2, [r3], #4
 800f84e:	459c      	cmp	ip, r3
 800f850:	fa22 f20e 	lsr.w	r2, r2, lr
 800f854:	d8f3      	bhi.n	800f83e <__lshift+0x6e>
 800f856:	ebac 0304 	sub.w	r3, ip, r4
 800f85a:	f104 0015 	add.w	r0, r4, #21
 800f85e:	3b15      	subs	r3, #21
 800f860:	f023 0303 	bic.w	r3, r3, #3
 800f864:	3304      	adds	r3, #4
 800f866:	4560      	cmp	r0, ip
 800f868:	bf88      	it	hi
 800f86a:	2304      	movhi	r3, #4
 800f86c:	50ca      	str	r2, [r1, r3]
 800f86e:	b10a      	cbz	r2, 800f874 <__lshift+0xa4>
 800f870:	f108 0602 	add.w	r6, r8, #2
 800f874:	3e01      	subs	r6, #1
 800f876:	4638      	mov	r0, r7
 800f878:	4621      	mov	r1, r4
 800f87a:	612e      	str	r6, [r5, #16]
 800f87c:	f7ff fdde 	bl	800f43c <_Bfree>
 800f880:	4628      	mov	r0, r5
 800f882:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f886:	3301      	adds	r3, #1
 800f888:	f842 0f04 	str.w	r0, [r2, #4]!
 800f88c:	e7c5      	b.n	800f81a <__lshift+0x4a>
 800f88e:	3904      	subs	r1, #4
 800f890:	f853 2b04 	ldr.w	r2, [r3], #4
 800f894:	459c      	cmp	ip, r3
 800f896:	f841 2f04 	str.w	r2, [r1, #4]!
 800f89a:	d8f9      	bhi.n	800f890 <__lshift+0xc0>
 800f89c:	e7ea      	b.n	800f874 <__lshift+0xa4>
 800f89e:	bf00      	nop
 800f8a0:	080110a0 	.word	0x080110a0
 800f8a4:	080110c2 	.word	0x080110c2

0800f8a8 <__mcmp>:
 800f8a8:	4603      	mov	r3, r0
 800f8aa:	690a      	ldr	r2, [r1, #16]
 800f8ac:	6900      	ldr	r0, [r0, #16]
 800f8ae:	1a80      	subs	r0, r0, r2
 800f8b0:	b530      	push	{r4, r5, lr}
 800f8b2:	d10e      	bne.n	800f8d2 <__mcmp+0x2a>
 800f8b4:	3314      	adds	r3, #20
 800f8b6:	3114      	adds	r1, #20
 800f8b8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800f8bc:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800f8c0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800f8c4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800f8c8:	4295      	cmp	r5, r2
 800f8ca:	d003      	beq.n	800f8d4 <__mcmp+0x2c>
 800f8cc:	d205      	bcs.n	800f8da <__mcmp+0x32>
 800f8ce:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800f8d2:	bd30      	pop	{r4, r5, pc}
 800f8d4:	42a3      	cmp	r3, r4
 800f8d6:	d3f3      	bcc.n	800f8c0 <__mcmp+0x18>
 800f8d8:	e7fb      	b.n	800f8d2 <__mcmp+0x2a>
 800f8da:	2001      	movs	r0, #1
 800f8dc:	e7f9      	b.n	800f8d2 <__mcmp+0x2a>
	...

0800f8e0 <__mdiff>:
 800f8e0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f8e4:	4689      	mov	r9, r1
 800f8e6:	4606      	mov	r6, r0
 800f8e8:	4611      	mov	r1, r2
 800f8ea:	4614      	mov	r4, r2
 800f8ec:	4648      	mov	r0, r9
 800f8ee:	f7ff ffdb 	bl	800f8a8 <__mcmp>
 800f8f2:	1e05      	subs	r5, r0, #0
 800f8f4:	d112      	bne.n	800f91c <__mdiff+0x3c>
 800f8f6:	4629      	mov	r1, r5
 800f8f8:	4630      	mov	r0, r6
 800f8fa:	f7ff fd5f 	bl	800f3bc <_Balloc>
 800f8fe:	4602      	mov	r2, r0
 800f900:	b928      	cbnz	r0, 800f90e <__mdiff+0x2e>
 800f902:	4b41      	ldr	r3, [pc, #260]	@ (800fa08 <__mdiff+0x128>)
 800f904:	f240 2137 	movw	r1, #567	@ 0x237
 800f908:	4840      	ldr	r0, [pc, #256]	@ (800fa0c <__mdiff+0x12c>)
 800f90a:	f000 fae1 	bl	800fed0 <__assert_func>
 800f90e:	2301      	movs	r3, #1
 800f910:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800f914:	4610      	mov	r0, r2
 800f916:	b003      	add	sp, #12
 800f918:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f91c:	bfbc      	itt	lt
 800f91e:	464b      	movlt	r3, r9
 800f920:	46a1      	movlt	r9, r4
 800f922:	4630      	mov	r0, r6
 800f924:	bfb8      	it	lt
 800f926:	2501      	movlt	r5, #1
 800f928:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800f92c:	bfb4      	ite	lt
 800f92e:	461c      	movlt	r4, r3
 800f930:	2500      	movge	r5, #0
 800f932:	f7ff fd43 	bl	800f3bc <_Balloc>
 800f936:	4602      	mov	r2, r0
 800f938:	b918      	cbnz	r0, 800f942 <__mdiff+0x62>
 800f93a:	4b33      	ldr	r3, [pc, #204]	@ (800fa08 <__mdiff+0x128>)
 800f93c:	f240 2145 	movw	r1, #581	@ 0x245
 800f940:	e7e2      	b.n	800f908 <__mdiff+0x28>
 800f942:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800f946:	f104 0e14 	add.w	lr, r4, #20
 800f94a:	6926      	ldr	r6, [r4, #16]
 800f94c:	f100 0b14 	add.w	fp, r0, #20
 800f950:	60c5      	str	r5, [r0, #12]
 800f952:	f109 0514 	add.w	r5, r9, #20
 800f956:	f109 0310 	add.w	r3, r9, #16
 800f95a:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800f95e:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800f962:	46d9      	mov	r9, fp
 800f964:	f04f 0c00 	mov.w	ip, #0
 800f968:	9301      	str	r3, [sp, #4]
 800f96a:	9b01      	ldr	r3, [sp, #4]
 800f96c:	f85e 0b04 	ldr.w	r0, [lr], #4
 800f970:	f853 af04 	ldr.w	sl, [r3, #4]!
 800f974:	4576      	cmp	r6, lr
 800f976:	9301      	str	r3, [sp, #4]
 800f978:	fa1f f38a 	uxth.w	r3, sl
 800f97c:	4619      	mov	r1, r3
 800f97e:	b283      	uxth	r3, r0
 800f980:	ea4f 4010 	mov.w	r0, r0, lsr #16
 800f984:	eba1 0303 	sub.w	r3, r1, r3
 800f988:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800f98c:	4463      	add	r3, ip
 800f98e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800f992:	b29b      	uxth	r3, r3
 800f994:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800f998:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800f99c:	f849 3b04 	str.w	r3, [r9], #4
 800f9a0:	d8e3      	bhi.n	800f96a <__mdiff+0x8a>
 800f9a2:	1b33      	subs	r3, r6, r4
 800f9a4:	3415      	adds	r4, #21
 800f9a6:	3b15      	subs	r3, #21
 800f9a8:	f023 0303 	bic.w	r3, r3, #3
 800f9ac:	3304      	adds	r3, #4
 800f9ae:	42a6      	cmp	r6, r4
 800f9b0:	bf38      	it	cc
 800f9b2:	2304      	movcc	r3, #4
 800f9b4:	441d      	add	r5, r3
 800f9b6:	445b      	add	r3, fp
 800f9b8:	462c      	mov	r4, r5
 800f9ba:	461e      	mov	r6, r3
 800f9bc:	4544      	cmp	r4, r8
 800f9be:	d30e      	bcc.n	800f9de <__mdiff+0xfe>
 800f9c0:	f108 0103 	add.w	r1, r8, #3
 800f9c4:	1b49      	subs	r1, r1, r5
 800f9c6:	3d03      	subs	r5, #3
 800f9c8:	f021 0103 	bic.w	r1, r1, #3
 800f9cc:	45a8      	cmp	r8, r5
 800f9ce:	bf38      	it	cc
 800f9d0:	2100      	movcc	r1, #0
 800f9d2:	440b      	add	r3, r1
 800f9d4:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800f9d8:	b199      	cbz	r1, 800fa02 <__mdiff+0x122>
 800f9da:	6117      	str	r7, [r2, #16]
 800f9dc:	e79a      	b.n	800f914 <__mdiff+0x34>
 800f9de:	f854 1b04 	ldr.w	r1, [r4], #4
 800f9e2:	46e6      	mov	lr, ip
 800f9e4:	fa1f fc81 	uxth.w	ip, r1
 800f9e8:	0c08      	lsrs	r0, r1, #16
 800f9ea:	4471      	add	r1, lr
 800f9ec:	44f4      	add	ip, lr
 800f9ee:	b289      	uxth	r1, r1
 800f9f0:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800f9f4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800f9f8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800f9fc:	f846 1b04 	str.w	r1, [r6], #4
 800fa00:	e7dc      	b.n	800f9bc <__mdiff+0xdc>
 800fa02:	3f01      	subs	r7, #1
 800fa04:	e7e6      	b.n	800f9d4 <__mdiff+0xf4>
 800fa06:	bf00      	nop
 800fa08:	080110a0 	.word	0x080110a0
 800fa0c:	080110c2 	.word	0x080110c2

0800fa10 <__d2b>:
 800fa10:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800fa14:	460f      	mov	r7, r1
 800fa16:	2101      	movs	r1, #1
 800fa18:	4616      	mov	r6, r2
 800fa1a:	ec59 8b10 	vmov	r8, r9, d0
 800fa1e:	f7ff fccd 	bl	800f3bc <_Balloc>
 800fa22:	4604      	mov	r4, r0
 800fa24:	b930      	cbnz	r0, 800fa34 <__d2b+0x24>
 800fa26:	4602      	mov	r2, r0
 800fa28:	4b23      	ldr	r3, [pc, #140]	@ (800fab8 <__d2b+0xa8>)
 800fa2a:	f240 310f 	movw	r1, #783	@ 0x30f
 800fa2e:	4823      	ldr	r0, [pc, #140]	@ (800fabc <__d2b+0xac>)
 800fa30:	f000 fa4e 	bl	800fed0 <__assert_func>
 800fa34:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800fa38:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800fa3c:	b10d      	cbz	r5, 800fa42 <__d2b+0x32>
 800fa3e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800fa42:	9301      	str	r3, [sp, #4]
 800fa44:	f1b8 0300 	subs.w	r3, r8, #0
 800fa48:	d023      	beq.n	800fa92 <__d2b+0x82>
 800fa4a:	4668      	mov	r0, sp
 800fa4c:	9300      	str	r3, [sp, #0]
 800fa4e:	f7ff fd7e 	bl	800f54e <__lo0bits>
 800fa52:	e9dd 1200 	ldrd	r1, r2, [sp]
 800fa56:	b1d0      	cbz	r0, 800fa8e <__d2b+0x7e>
 800fa58:	f1c0 0320 	rsb	r3, r0, #32
 800fa5c:	fa02 f303 	lsl.w	r3, r2, r3
 800fa60:	40c2      	lsrs	r2, r0
 800fa62:	430b      	orrs	r3, r1
 800fa64:	9201      	str	r2, [sp, #4]
 800fa66:	6163      	str	r3, [r4, #20]
 800fa68:	9b01      	ldr	r3, [sp, #4]
 800fa6a:	2b00      	cmp	r3, #0
 800fa6c:	61a3      	str	r3, [r4, #24]
 800fa6e:	bf0c      	ite	eq
 800fa70:	2201      	moveq	r2, #1
 800fa72:	2202      	movne	r2, #2
 800fa74:	6122      	str	r2, [r4, #16]
 800fa76:	b1a5      	cbz	r5, 800faa2 <__d2b+0x92>
 800fa78:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800fa7c:	4405      	add	r5, r0
 800fa7e:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800fa82:	603d      	str	r5, [r7, #0]
 800fa84:	6030      	str	r0, [r6, #0]
 800fa86:	4620      	mov	r0, r4
 800fa88:	b003      	add	sp, #12
 800fa8a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fa8e:	6161      	str	r1, [r4, #20]
 800fa90:	e7ea      	b.n	800fa68 <__d2b+0x58>
 800fa92:	a801      	add	r0, sp, #4
 800fa94:	f7ff fd5b 	bl	800f54e <__lo0bits>
 800fa98:	9b01      	ldr	r3, [sp, #4]
 800fa9a:	3020      	adds	r0, #32
 800fa9c:	2201      	movs	r2, #1
 800fa9e:	6163      	str	r3, [r4, #20]
 800faa0:	e7e8      	b.n	800fa74 <__d2b+0x64>
 800faa2:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800faa6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800faaa:	6038      	str	r0, [r7, #0]
 800faac:	6918      	ldr	r0, [r3, #16]
 800faae:	f7ff fd2f 	bl	800f510 <__hi0bits>
 800fab2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800fab6:	e7e5      	b.n	800fa84 <__d2b+0x74>
 800fab8:	080110a0 	.word	0x080110a0
 800fabc:	080110c2 	.word	0x080110c2

0800fac0 <__sread>:
 800fac0:	b510      	push	{r4, lr}
 800fac2:	460c      	mov	r4, r1
 800fac4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fac8:	f000 f99e 	bl	800fe08 <_read_r>
 800facc:	2800      	cmp	r0, #0
 800face:	bfab      	itete	ge
 800fad0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800fad2:	89a3      	ldrhlt	r3, [r4, #12]
 800fad4:	181b      	addge	r3, r3, r0
 800fad6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800fada:	bfac      	ite	ge
 800fadc:	6563      	strge	r3, [r4, #84]	@ 0x54
 800fade:	81a3      	strhlt	r3, [r4, #12]
 800fae0:	bd10      	pop	{r4, pc}

0800fae2 <__swrite>:
 800fae2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fae6:	461f      	mov	r7, r3
 800fae8:	898b      	ldrh	r3, [r1, #12]
 800faea:	4605      	mov	r5, r0
 800faec:	460c      	mov	r4, r1
 800faee:	05db      	lsls	r3, r3, #23
 800faf0:	4616      	mov	r6, r2
 800faf2:	d505      	bpl.n	800fb00 <__swrite+0x1e>
 800faf4:	2302      	movs	r3, #2
 800faf6:	2200      	movs	r2, #0
 800faf8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fafc:	f000 f972 	bl	800fde4 <_lseek_r>
 800fb00:	89a3      	ldrh	r3, [r4, #12]
 800fb02:	4632      	mov	r2, r6
 800fb04:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800fb08:	4628      	mov	r0, r5
 800fb0a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800fb0e:	81a3      	strh	r3, [r4, #12]
 800fb10:	463b      	mov	r3, r7
 800fb12:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800fb16:	f000 b999 	b.w	800fe4c <_write_r>

0800fb1a <__sseek>:
 800fb1a:	b510      	push	{r4, lr}
 800fb1c:	460c      	mov	r4, r1
 800fb1e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fb22:	f000 f95f 	bl	800fde4 <_lseek_r>
 800fb26:	1c43      	adds	r3, r0, #1
 800fb28:	89a3      	ldrh	r3, [r4, #12]
 800fb2a:	bf15      	itete	ne
 800fb2c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800fb2e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800fb32:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800fb36:	81a3      	strheq	r3, [r4, #12]
 800fb38:	bf18      	it	ne
 800fb3a:	81a3      	strhne	r3, [r4, #12]
 800fb3c:	bd10      	pop	{r4, pc}

0800fb3e <__sclose>:
 800fb3e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fb42:	f000 b995 	b.w	800fe70 <_close_r>

0800fb46 <_realloc_r>:
 800fb46:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fb4a:	4607      	mov	r7, r0
 800fb4c:	4614      	mov	r4, r2
 800fb4e:	460d      	mov	r5, r1
 800fb50:	b921      	cbnz	r1, 800fb5c <_realloc_r+0x16>
 800fb52:	4611      	mov	r1, r2
 800fb54:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800fb58:	f7ff baf8 	b.w	800f14c <_malloc_r>
 800fb5c:	b92a      	cbnz	r2, 800fb6a <_realloc_r+0x24>
 800fb5e:	4625      	mov	r5, r4
 800fb60:	f000 f9e8 	bl	800ff34 <_free_r>
 800fb64:	4628      	mov	r0, r5
 800fb66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fb6a:	f000 fa3f 	bl	800ffec <_malloc_usable_size_r>
 800fb6e:	4284      	cmp	r4, r0
 800fb70:	4606      	mov	r6, r0
 800fb72:	d802      	bhi.n	800fb7a <_realloc_r+0x34>
 800fb74:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800fb78:	d8f4      	bhi.n	800fb64 <_realloc_r+0x1e>
 800fb7a:	4621      	mov	r1, r4
 800fb7c:	4638      	mov	r0, r7
 800fb7e:	f7ff fae5 	bl	800f14c <_malloc_r>
 800fb82:	4680      	mov	r8, r0
 800fb84:	b908      	cbnz	r0, 800fb8a <_realloc_r+0x44>
 800fb86:	4645      	mov	r5, r8
 800fb88:	e7ec      	b.n	800fb64 <_realloc_r+0x1e>
 800fb8a:	42b4      	cmp	r4, r6
 800fb8c:	4622      	mov	r2, r4
 800fb8e:	4629      	mov	r1, r5
 800fb90:	bf28      	it	cs
 800fb92:	4632      	movcs	r2, r6
 800fb94:	f000 f98e 	bl	800feb4 <memcpy>
 800fb98:	4629      	mov	r1, r5
 800fb9a:	4638      	mov	r0, r7
 800fb9c:	f000 f9ca 	bl	800ff34 <_free_r>
 800fba0:	e7f1      	b.n	800fb86 <_realloc_r+0x40>

0800fba2 <__swbuf_r>:
 800fba2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fba4:	460e      	mov	r6, r1
 800fba6:	4614      	mov	r4, r2
 800fba8:	4605      	mov	r5, r0
 800fbaa:	b118      	cbz	r0, 800fbb4 <__swbuf_r+0x12>
 800fbac:	6a03      	ldr	r3, [r0, #32]
 800fbae:	b90b      	cbnz	r3, 800fbb4 <__swbuf_r+0x12>
 800fbb0:	f7fe f8b8 	bl	800dd24 <__sinit>
 800fbb4:	69a3      	ldr	r3, [r4, #24]
 800fbb6:	60a3      	str	r3, [r4, #8]
 800fbb8:	89a3      	ldrh	r3, [r4, #12]
 800fbba:	071a      	lsls	r2, r3, #28
 800fbbc:	d501      	bpl.n	800fbc2 <__swbuf_r+0x20>
 800fbbe:	6923      	ldr	r3, [r4, #16]
 800fbc0:	b943      	cbnz	r3, 800fbd4 <__swbuf_r+0x32>
 800fbc2:	4621      	mov	r1, r4
 800fbc4:	4628      	mov	r0, r5
 800fbc6:	f000 f82b 	bl	800fc20 <__swsetup_r>
 800fbca:	b118      	cbz	r0, 800fbd4 <__swbuf_r+0x32>
 800fbcc:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800fbd0:	4638      	mov	r0, r7
 800fbd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fbd4:	6823      	ldr	r3, [r4, #0]
 800fbd6:	b2f6      	uxtb	r6, r6
 800fbd8:	6922      	ldr	r2, [r4, #16]
 800fbda:	4637      	mov	r7, r6
 800fbdc:	1a98      	subs	r0, r3, r2
 800fbde:	6963      	ldr	r3, [r4, #20]
 800fbe0:	4283      	cmp	r3, r0
 800fbe2:	dc05      	bgt.n	800fbf0 <__swbuf_r+0x4e>
 800fbe4:	4621      	mov	r1, r4
 800fbe6:	4628      	mov	r0, r5
 800fbe8:	f7ff fbb4 	bl	800f354 <_fflush_r>
 800fbec:	2800      	cmp	r0, #0
 800fbee:	d1ed      	bne.n	800fbcc <__swbuf_r+0x2a>
 800fbf0:	68a3      	ldr	r3, [r4, #8]
 800fbf2:	3b01      	subs	r3, #1
 800fbf4:	60a3      	str	r3, [r4, #8]
 800fbf6:	6823      	ldr	r3, [r4, #0]
 800fbf8:	1c5a      	adds	r2, r3, #1
 800fbfa:	6022      	str	r2, [r4, #0]
 800fbfc:	701e      	strb	r6, [r3, #0]
 800fbfe:	1c43      	adds	r3, r0, #1
 800fc00:	6962      	ldr	r2, [r4, #20]
 800fc02:	429a      	cmp	r2, r3
 800fc04:	d004      	beq.n	800fc10 <__swbuf_r+0x6e>
 800fc06:	89a3      	ldrh	r3, [r4, #12]
 800fc08:	07db      	lsls	r3, r3, #31
 800fc0a:	d5e1      	bpl.n	800fbd0 <__swbuf_r+0x2e>
 800fc0c:	2e0a      	cmp	r6, #10
 800fc0e:	d1df      	bne.n	800fbd0 <__swbuf_r+0x2e>
 800fc10:	4621      	mov	r1, r4
 800fc12:	4628      	mov	r0, r5
 800fc14:	f7ff fb9e 	bl	800f354 <_fflush_r>
 800fc18:	2800      	cmp	r0, #0
 800fc1a:	d0d9      	beq.n	800fbd0 <__swbuf_r+0x2e>
 800fc1c:	e7d6      	b.n	800fbcc <__swbuf_r+0x2a>
	...

0800fc20 <__swsetup_r>:
 800fc20:	b538      	push	{r3, r4, r5, lr}
 800fc22:	4b29      	ldr	r3, [pc, #164]	@ (800fcc8 <__swsetup_r+0xa8>)
 800fc24:	4605      	mov	r5, r0
 800fc26:	460c      	mov	r4, r1
 800fc28:	6818      	ldr	r0, [r3, #0]
 800fc2a:	b118      	cbz	r0, 800fc34 <__swsetup_r+0x14>
 800fc2c:	6a03      	ldr	r3, [r0, #32]
 800fc2e:	b90b      	cbnz	r3, 800fc34 <__swsetup_r+0x14>
 800fc30:	f7fe f878 	bl	800dd24 <__sinit>
 800fc34:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fc38:	0719      	lsls	r1, r3, #28
 800fc3a:	d422      	bmi.n	800fc82 <__swsetup_r+0x62>
 800fc3c:	06da      	lsls	r2, r3, #27
 800fc3e:	d407      	bmi.n	800fc50 <__swsetup_r+0x30>
 800fc40:	2209      	movs	r2, #9
 800fc42:	602a      	str	r2, [r5, #0]
 800fc44:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800fc48:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800fc4c:	81a3      	strh	r3, [r4, #12]
 800fc4e:	e033      	b.n	800fcb8 <__swsetup_r+0x98>
 800fc50:	0758      	lsls	r0, r3, #29
 800fc52:	d512      	bpl.n	800fc7a <__swsetup_r+0x5a>
 800fc54:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800fc56:	b141      	cbz	r1, 800fc6a <__swsetup_r+0x4a>
 800fc58:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800fc5c:	4299      	cmp	r1, r3
 800fc5e:	d002      	beq.n	800fc66 <__swsetup_r+0x46>
 800fc60:	4628      	mov	r0, r5
 800fc62:	f000 f967 	bl	800ff34 <_free_r>
 800fc66:	2300      	movs	r3, #0
 800fc68:	6363      	str	r3, [r4, #52]	@ 0x34
 800fc6a:	89a3      	ldrh	r3, [r4, #12]
 800fc6c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800fc70:	81a3      	strh	r3, [r4, #12]
 800fc72:	2300      	movs	r3, #0
 800fc74:	6063      	str	r3, [r4, #4]
 800fc76:	6923      	ldr	r3, [r4, #16]
 800fc78:	6023      	str	r3, [r4, #0]
 800fc7a:	89a3      	ldrh	r3, [r4, #12]
 800fc7c:	f043 0308 	orr.w	r3, r3, #8
 800fc80:	81a3      	strh	r3, [r4, #12]
 800fc82:	6923      	ldr	r3, [r4, #16]
 800fc84:	b94b      	cbnz	r3, 800fc9a <__swsetup_r+0x7a>
 800fc86:	89a3      	ldrh	r3, [r4, #12]
 800fc88:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800fc8c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800fc90:	d003      	beq.n	800fc9a <__swsetup_r+0x7a>
 800fc92:	4621      	mov	r1, r4
 800fc94:	4628      	mov	r0, r5
 800fc96:	f000 f83e 	bl	800fd16 <__smakebuf_r>
 800fc9a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fc9e:	f013 0201 	ands.w	r2, r3, #1
 800fca2:	d00a      	beq.n	800fcba <__swsetup_r+0x9a>
 800fca4:	2200      	movs	r2, #0
 800fca6:	60a2      	str	r2, [r4, #8]
 800fca8:	6962      	ldr	r2, [r4, #20]
 800fcaa:	4252      	negs	r2, r2
 800fcac:	61a2      	str	r2, [r4, #24]
 800fcae:	6922      	ldr	r2, [r4, #16]
 800fcb0:	b942      	cbnz	r2, 800fcc4 <__swsetup_r+0xa4>
 800fcb2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800fcb6:	d1c5      	bne.n	800fc44 <__swsetup_r+0x24>
 800fcb8:	bd38      	pop	{r3, r4, r5, pc}
 800fcba:	0799      	lsls	r1, r3, #30
 800fcbc:	bf58      	it	pl
 800fcbe:	6962      	ldrpl	r2, [r4, #20]
 800fcc0:	60a2      	str	r2, [r4, #8]
 800fcc2:	e7f4      	b.n	800fcae <__swsetup_r+0x8e>
 800fcc4:	2000      	movs	r0, #0
 800fcc6:	e7f7      	b.n	800fcb8 <__swsetup_r+0x98>
 800fcc8:	20000040 	.word	0x20000040

0800fccc <__swhatbuf_r>:
 800fccc:	b570      	push	{r4, r5, r6, lr}
 800fcce:	460c      	mov	r4, r1
 800fcd0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fcd4:	b096      	sub	sp, #88	@ 0x58
 800fcd6:	4615      	mov	r5, r2
 800fcd8:	2900      	cmp	r1, #0
 800fcda:	461e      	mov	r6, r3
 800fcdc:	da0c      	bge.n	800fcf8 <__swhatbuf_r+0x2c>
 800fcde:	89a3      	ldrh	r3, [r4, #12]
 800fce0:	2100      	movs	r1, #0
 800fce2:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800fce6:	bf14      	ite	ne
 800fce8:	2340      	movne	r3, #64	@ 0x40
 800fcea:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800fcee:	2000      	movs	r0, #0
 800fcf0:	6031      	str	r1, [r6, #0]
 800fcf2:	602b      	str	r3, [r5, #0]
 800fcf4:	b016      	add	sp, #88	@ 0x58
 800fcf6:	bd70      	pop	{r4, r5, r6, pc}
 800fcf8:	466a      	mov	r2, sp
 800fcfa:	f000 f8c9 	bl	800fe90 <_fstat_r>
 800fcfe:	2800      	cmp	r0, #0
 800fd00:	dbed      	blt.n	800fcde <__swhatbuf_r+0x12>
 800fd02:	9901      	ldr	r1, [sp, #4]
 800fd04:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800fd08:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800fd0c:	4259      	negs	r1, r3
 800fd0e:	4159      	adcs	r1, r3
 800fd10:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800fd14:	e7eb      	b.n	800fcee <__swhatbuf_r+0x22>

0800fd16 <__smakebuf_r>:
 800fd16:	898b      	ldrh	r3, [r1, #12]
 800fd18:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800fd1a:	079d      	lsls	r5, r3, #30
 800fd1c:	4606      	mov	r6, r0
 800fd1e:	460c      	mov	r4, r1
 800fd20:	d507      	bpl.n	800fd32 <__smakebuf_r+0x1c>
 800fd22:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800fd26:	6023      	str	r3, [r4, #0]
 800fd28:	6123      	str	r3, [r4, #16]
 800fd2a:	2301      	movs	r3, #1
 800fd2c:	6163      	str	r3, [r4, #20]
 800fd2e:	b003      	add	sp, #12
 800fd30:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fd32:	ab01      	add	r3, sp, #4
 800fd34:	466a      	mov	r2, sp
 800fd36:	f7ff ffc9 	bl	800fccc <__swhatbuf_r>
 800fd3a:	9f00      	ldr	r7, [sp, #0]
 800fd3c:	4605      	mov	r5, r0
 800fd3e:	4630      	mov	r0, r6
 800fd40:	4639      	mov	r1, r7
 800fd42:	f7ff fa03 	bl	800f14c <_malloc_r>
 800fd46:	b948      	cbnz	r0, 800fd5c <__smakebuf_r+0x46>
 800fd48:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fd4c:	059a      	lsls	r2, r3, #22
 800fd4e:	d4ee      	bmi.n	800fd2e <__smakebuf_r+0x18>
 800fd50:	f023 0303 	bic.w	r3, r3, #3
 800fd54:	f043 0302 	orr.w	r3, r3, #2
 800fd58:	81a3      	strh	r3, [r4, #12]
 800fd5a:	e7e2      	b.n	800fd22 <__smakebuf_r+0xc>
 800fd5c:	89a3      	ldrh	r3, [r4, #12]
 800fd5e:	6020      	str	r0, [r4, #0]
 800fd60:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800fd64:	81a3      	strh	r3, [r4, #12]
 800fd66:	9b01      	ldr	r3, [sp, #4]
 800fd68:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800fd6c:	b15b      	cbz	r3, 800fd86 <__smakebuf_r+0x70>
 800fd6e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800fd72:	4630      	mov	r0, r6
 800fd74:	f000 f826 	bl	800fdc4 <_isatty_r>
 800fd78:	b128      	cbz	r0, 800fd86 <__smakebuf_r+0x70>
 800fd7a:	89a3      	ldrh	r3, [r4, #12]
 800fd7c:	f023 0303 	bic.w	r3, r3, #3
 800fd80:	f043 0301 	orr.w	r3, r3, #1
 800fd84:	81a3      	strh	r3, [r4, #12]
 800fd86:	89a3      	ldrh	r3, [r4, #12]
 800fd88:	431d      	orrs	r5, r3
 800fd8a:	81a5      	strh	r5, [r4, #12]
 800fd8c:	e7cf      	b.n	800fd2e <__smakebuf_r+0x18>

0800fd8e <memmove>:
 800fd8e:	4288      	cmp	r0, r1
 800fd90:	b510      	push	{r4, lr}
 800fd92:	eb01 0402 	add.w	r4, r1, r2
 800fd96:	d902      	bls.n	800fd9e <memmove+0x10>
 800fd98:	4284      	cmp	r4, r0
 800fd9a:	4623      	mov	r3, r4
 800fd9c:	d807      	bhi.n	800fdae <memmove+0x20>
 800fd9e:	1e43      	subs	r3, r0, #1
 800fda0:	42a1      	cmp	r1, r4
 800fda2:	d008      	beq.n	800fdb6 <memmove+0x28>
 800fda4:	f811 2b01 	ldrb.w	r2, [r1], #1
 800fda8:	f803 2f01 	strb.w	r2, [r3, #1]!
 800fdac:	e7f8      	b.n	800fda0 <memmove+0x12>
 800fdae:	4402      	add	r2, r0
 800fdb0:	4601      	mov	r1, r0
 800fdb2:	428a      	cmp	r2, r1
 800fdb4:	d100      	bne.n	800fdb8 <memmove+0x2a>
 800fdb6:	bd10      	pop	{r4, pc}
 800fdb8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800fdbc:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800fdc0:	e7f7      	b.n	800fdb2 <memmove+0x24>
	...

0800fdc4 <_isatty_r>:
 800fdc4:	b538      	push	{r3, r4, r5, lr}
 800fdc6:	2300      	movs	r3, #0
 800fdc8:	4d05      	ldr	r5, [pc, #20]	@ (800fde0 <_isatty_r+0x1c>)
 800fdca:	4604      	mov	r4, r0
 800fdcc:	4608      	mov	r0, r1
 800fdce:	602b      	str	r3, [r5, #0]
 800fdd0:	f7f4 fc40 	bl	8004654 <_isatty>
 800fdd4:	1c43      	adds	r3, r0, #1
 800fdd6:	d102      	bne.n	800fdde <_isatty_r+0x1a>
 800fdd8:	682b      	ldr	r3, [r5, #0]
 800fdda:	b103      	cbz	r3, 800fdde <_isatty_r+0x1a>
 800fddc:	6023      	str	r3, [r4, #0]
 800fdde:	bd38      	pop	{r3, r4, r5, pc}
 800fde0:	200006a4 	.word	0x200006a4

0800fde4 <_lseek_r>:
 800fde4:	b538      	push	{r3, r4, r5, lr}
 800fde6:	4604      	mov	r4, r0
 800fde8:	4d06      	ldr	r5, [pc, #24]	@ (800fe04 <_lseek_r+0x20>)
 800fdea:	4608      	mov	r0, r1
 800fdec:	4611      	mov	r1, r2
 800fdee:	2200      	movs	r2, #0
 800fdf0:	602a      	str	r2, [r5, #0]
 800fdf2:	461a      	mov	r2, r3
 800fdf4:	f7f4 fc39 	bl	800466a <_lseek>
 800fdf8:	1c43      	adds	r3, r0, #1
 800fdfa:	d102      	bne.n	800fe02 <_lseek_r+0x1e>
 800fdfc:	682b      	ldr	r3, [r5, #0]
 800fdfe:	b103      	cbz	r3, 800fe02 <_lseek_r+0x1e>
 800fe00:	6023      	str	r3, [r4, #0]
 800fe02:	bd38      	pop	{r3, r4, r5, pc}
 800fe04:	200006a4 	.word	0x200006a4

0800fe08 <_read_r>:
 800fe08:	b538      	push	{r3, r4, r5, lr}
 800fe0a:	4604      	mov	r4, r0
 800fe0c:	4d06      	ldr	r5, [pc, #24]	@ (800fe28 <_read_r+0x20>)
 800fe0e:	4608      	mov	r0, r1
 800fe10:	4611      	mov	r1, r2
 800fe12:	2200      	movs	r2, #0
 800fe14:	602a      	str	r2, [r5, #0]
 800fe16:	461a      	mov	r2, r3
 800fe18:	f7f4 fbc7 	bl	80045aa <_read>
 800fe1c:	1c43      	adds	r3, r0, #1
 800fe1e:	d102      	bne.n	800fe26 <_read_r+0x1e>
 800fe20:	682b      	ldr	r3, [r5, #0]
 800fe22:	b103      	cbz	r3, 800fe26 <_read_r+0x1e>
 800fe24:	6023      	str	r3, [r4, #0]
 800fe26:	bd38      	pop	{r3, r4, r5, pc}
 800fe28:	200006a4 	.word	0x200006a4

0800fe2c <_sbrk_r>:
 800fe2c:	b538      	push	{r3, r4, r5, lr}
 800fe2e:	2300      	movs	r3, #0
 800fe30:	4d05      	ldr	r5, [pc, #20]	@ (800fe48 <_sbrk_r+0x1c>)
 800fe32:	4604      	mov	r4, r0
 800fe34:	4608      	mov	r0, r1
 800fe36:	602b      	str	r3, [r5, #0]
 800fe38:	f7f4 fc24 	bl	8004684 <_sbrk>
 800fe3c:	1c43      	adds	r3, r0, #1
 800fe3e:	d102      	bne.n	800fe46 <_sbrk_r+0x1a>
 800fe40:	682b      	ldr	r3, [r5, #0]
 800fe42:	b103      	cbz	r3, 800fe46 <_sbrk_r+0x1a>
 800fe44:	6023      	str	r3, [r4, #0]
 800fe46:	bd38      	pop	{r3, r4, r5, pc}
 800fe48:	200006a4 	.word	0x200006a4

0800fe4c <_write_r>:
 800fe4c:	b538      	push	{r3, r4, r5, lr}
 800fe4e:	4604      	mov	r4, r0
 800fe50:	4d06      	ldr	r5, [pc, #24]	@ (800fe6c <_write_r+0x20>)
 800fe52:	4608      	mov	r0, r1
 800fe54:	4611      	mov	r1, r2
 800fe56:	2200      	movs	r2, #0
 800fe58:	602a      	str	r2, [r5, #0]
 800fe5a:	461a      	mov	r2, r3
 800fe5c:	f7f4 fbc2 	bl	80045e4 <_write>
 800fe60:	1c43      	adds	r3, r0, #1
 800fe62:	d102      	bne.n	800fe6a <_write_r+0x1e>
 800fe64:	682b      	ldr	r3, [r5, #0]
 800fe66:	b103      	cbz	r3, 800fe6a <_write_r+0x1e>
 800fe68:	6023      	str	r3, [r4, #0]
 800fe6a:	bd38      	pop	{r3, r4, r5, pc}
 800fe6c:	200006a4 	.word	0x200006a4

0800fe70 <_close_r>:
 800fe70:	b538      	push	{r3, r4, r5, lr}
 800fe72:	2300      	movs	r3, #0
 800fe74:	4d05      	ldr	r5, [pc, #20]	@ (800fe8c <_close_r+0x1c>)
 800fe76:	4604      	mov	r4, r0
 800fe78:	4608      	mov	r0, r1
 800fe7a:	602b      	str	r3, [r5, #0]
 800fe7c:	f7f4 fbce 	bl	800461c <_close>
 800fe80:	1c43      	adds	r3, r0, #1
 800fe82:	d102      	bne.n	800fe8a <_close_r+0x1a>
 800fe84:	682b      	ldr	r3, [r5, #0]
 800fe86:	b103      	cbz	r3, 800fe8a <_close_r+0x1a>
 800fe88:	6023      	str	r3, [r4, #0]
 800fe8a:	bd38      	pop	{r3, r4, r5, pc}
 800fe8c:	200006a4 	.word	0x200006a4

0800fe90 <_fstat_r>:
 800fe90:	b538      	push	{r3, r4, r5, lr}
 800fe92:	2300      	movs	r3, #0
 800fe94:	4d06      	ldr	r5, [pc, #24]	@ (800feb0 <_fstat_r+0x20>)
 800fe96:	4604      	mov	r4, r0
 800fe98:	4608      	mov	r0, r1
 800fe9a:	4611      	mov	r1, r2
 800fe9c:	602b      	str	r3, [r5, #0]
 800fe9e:	f7f4 fbc9 	bl	8004634 <_fstat>
 800fea2:	1c43      	adds	r3, r0, #1
 800fea4:	d102      	bne.n	800feac <_fstat_r+0x1c>
 800fea6:	682b      	ldr	r3, [r5, #0]
 800fea8:	b103      	cbz	r3, 800feac <_fstat_r+0x1c>
 800feaa:	6023      	str	r3, [r4, #0]
 800feac:	bd38      	pop	{r3, r4, r5, pc}
 800feae:	bf00      	nop
 800feb0:	200006a4 	.word	0x200006a4

0800feb4 <memcpy>:
 800feb4:	440a      	add	r2, r1
 800feb6:	1e43      	subs	r3, r0, #1
 800feb8:	4291      	cmp	r1, r2
 800feba:	d100      	bne.n	800febe <memcpy+0xa>
 800febc:	4770      	bx	lr
 800febe:	b510      	push	{r4, lr}
 800fec0:	f811 4b01 	ldrb.w	r4, [r1], #1
 800fec4:	4291      	cmp	r1, r2
 800fec6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800feca:	d1f9      	bne.n	800fec0 <memcpy+0xc>
 800fecc:	bd10      	pop	{r4, pc}
	...

0800fed0 <__assert_func>:
 800fed0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800fed2:	4614      	mov	r4, r2
 800fed4:	461a      	mov	r2, r3
 800fed6:	4b09      	ldr	r3, [pc, #36]	@ (800fefc <__assert_func+0x2c>)
 800fed8:	4605      	mov	r5, r0
 800feda:	681b      	ldr	r3, [r3, #0]
 800fedc:	68d8      	ldr	r0, [r3, #12]
 800fede:	b14c      	cbz	r4, 800fef4 <__assert_func+0x24>
 800fee0:	4b07      	ldr	r3, [pc, #28]	@ (800ff00 <__assert_func+0x30>)
 800fee2:	9100      	str	r1, [sp, #0]
 800fee4:	4907      	ldr	r1, [pc, #28]	@ (800ff04 <__assert_func+0x34>)
 800fee6:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800feea:	462b      	mov	r3, r5
 800feec:	f000 f886 	bl	800fffc <fiprintf>
 800fef0:	f000 f8a3 	bl	801003a <abort>
 800fef4:	4b04      	ldr	r3, [pc, #16]	@ (800ff08 <__assert_func+0x38>)
 800fef6:	461c      	mov	r4, r3
 800fef8:	e7f3      	b.n	800fee2 <__assert_func+0x12>
 800fefa:	bf00      	nop
 800fefc:	20000040 	.word	0x20000040
 800ff00:	08011125 	.word	0x08011125
 800ff04:	08011132 	.word	0x08011132
 800ff08:	08011160 	.word	0x08011160

0800ff0c <_calloc_r>:
 800ff0c:	b570      	push	{r4, r5, r6, lr}
 800ff0e:	fba1 5402 	umull	r5, r4, r1, r2
 800ff12:	b934      	cbnz	r4, 800ff22 <_calloc_r+0x16>
 800ff14:	4629      	mov	r1, r5
 800ff16:	f7ff f919 	bl	800f14c <_malloc_r>
 800ff1a:	4606      	mov	r6, r0
 800ff1c:	b928      	cbnz	r0, 800ff2a <_calloc_r+0x1e>
 800ff1e:	4630      	mov	r0, r6
 800ff20:	bd70      	pop	{r4, r5, r6, pc}
 800ff22:	220c      	movs	r2, #12
 800ff24:	2600      	movs	r6, #0
 800ff26:	6002      	str	r2, [r0, #0]
 800ff28:	e7f9      	b.n	800ff1e <_calloc_r+0x12>
 800ff2a:	462a      	mov	r2, r5
 800ff2c:	4621      	mov	r1, r4
 800ff2e:	f7fd ff9f 	bl	800de70 <memset>
 800ff32:	e7f4      	b.n	800ff1e <_calloc_r+0x12>

0800ff34 <_free_r>:
 800ff34:	b538      	push	{r3, r4, r5, lr}
 800ff36:	4605      	mov	r5, r0
 800ff38:	2900      	cmp	r1, #0
 800ff3a:	d041      	beq.n	800ffc0 <_free_r+0x8c>
 800ff3c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ff40:	1f0c      	subs	r4, r1, #4
 800ff42:	2b00      	cmp	r3, #0
 800ff44:	bfb8      	it	lt
 800ff46:	18e4      	addlt	r4, r4, r3
 800ff48:	f7ff fa2c 	bl	800f3a4 <__malloc_lock>
 800ff4c:	4a1d      	ldr	r2, [pc, #116]	@ (800ffc4 <_free_r+0x90>)
 800ff4e:	6813      	ldr	r3, [r2, #0]
 800ff50:	b933      	cbnz	r3, 800ff60 <_free_r+0x2c>
 800ff52:	6063      	str	r3, [r4, #4]
 800ff54:	6014      	str	r4, [r2, #0]
 800ff56:	4628      	mov	r0, r5
 800ff58:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ff5c:	f7ff ba28 	b.w	800f3b0 <__malloc_unlock>
 800ff60:	42a3      	cmp	r3, r4
 800ff62:	d908      	bls.n	800ff76 <_free_r+0x42>
 800ff64:	6820      	ldr	r0, [r4, #0]
 800ff66:	1821      	adds	r1, r4, r0
 800ff68:	428b      	cmp	r3, r1
 800ff6a:	bf01      	itttt	eq
 800ff6c:	6819      	ldreq	r1, [r3, #0]
 800ff6e:	685b      	ldreq	r3, [r3, #4]
 800ff70:	1809      	addeq	r1, r1, r0
 800ff72:	6021      	streq	r1, [r4, #0]
 800ff74:	e7ed      	b.n	800ff52 <_free_r+0x1e>
 800ff76:	461a      	mov	r2, r3
 800ff78:	685b      	ldr	r3, [r3, #4]
 800ff7a:	b10b      	cbz	r3, 800ff80 <_free_r+0x4c>
 800ff7c:	42a3      	cmp	r3, r4
 800ff7e:	d9fa      	bls.n	800ff76 <_free_r+0x42>
 800ff80:	6811      	ldr	r1, [r2, #0]
 800ff82:	1850      	adds	r0, r2, r1
 800ff84:	42a0      	cmp	r0, r4
 800ff86:	d10b      	bne.n	800ffa0 <_free_r+0x6c>
 800ff88:	6820      	ldr	r0, [r4, #0]
 800ff8a:	4401      	add	r1, r0
 800ff8c:	1850      	adds	r0, r2, r1
 800ff8e:	6011      	str	r1, [r2, #0]
 800ff90:	4283      	cmp	r3, r0
 800ff92:	d1e0      	bne.n	800ff56 <_free_r+0x22>
 800ff94:	6818      	ldr	r0, [r3, #0]
 800ff96:	685b      	ldr	r3, [r3, #4]
 800ff98:	4408      	add	r0, r1
 800ff9a:	6053      	str	r3, [r2, #4]
 800ff9c:	6010      	str	r0, [r2, #0]
 800ff9e:	e7da      	b.n	800ff56 <_free_r+0x22>
 800ffa0:	d902      	bls.n	800ffa8 <_free_r+0x74>
 800ffa2:	230c      	movs	r3, #12
 800ffa4:	602b      	str	r3, [r5, #0]
 800ffa6:	e7d6      	b.n	800ff56 <_free_r+0x22>
 800ffa8:	6820      	ldr	r0, [r4, #0]
 800ffaa:	1821      	adds	r1, r4, r0
 800ffac:	428b      	cmp	r3, r1
 800ffae:	bf02      	ittt	eq
 800ffb0:	6819      	ldreq	r1, [r3, #0]
 800ffb2:	685b      	ldreq	r3, [r3, #4]
 800ffb4:	1809      	addeq	r1, r1, r0
 800ffb6:	6063      	str	r3, [r4, #4]
 800ffb8:	bf08      	it	eq
 800ffba:	6021      	streq	r1, [r4, #0]
 800ffbc:	6054      	str	r4, [r2, #4]
 800ffbe:	e7ca      	b.n	800ff56 <_free_r+0x22>
 800ffc0:	bd38      	pop	{r3, r4, r5, pc}
 800ffc2:	bf00      	nop
 800ffc4:	200006a0 	.word	0x200006a0

0800ffc8 <__ascii_mbtowc>:
 800ffc8:	b082      	sub	sp, #8
 800ffca:	b901      	cbnz	r1, 800ffce <__ascii_mbtowc+0x6>
 800ffcc:	a901      	add	r1, sp, #4
 800ffce:	b142      	cbz	r2, 800ffe2 <__ascii_mbtowc+0x1a>
 800ffd0:	b14b      	cbz	r3, 800ffe6 <__ascii_mbtowc+0x1e>
 800ffd2:	7813      	ldrb	r3, [r2, #0]
 800ffd4:	600b      	str	r3, [r1, #0]
 800ffd6:	7812      	ldrb	r2, [r2, #0]
 800ffd8:	1e10      	subs	r0, r2, #0
 800ffda:	bf18      	it	ne
 800ffdc:	2001      	movne	r0, #1
 800ffde:	b002      	add	sp, #8
 800ffe0:	4770      	bx	lr
 800ffe2:	4610      	mov	r0, r2
 800ffe4:	e7fb      	b.n	800ffde <__ascii_mbtowc+0x16>
 800ffe6:	f06f 0001 	mvn.w	r0, #1
 800ffea:	e7f8      	b.n	800ffde <__ascii_mbtowc+0x16>

0800ffec <_malloc_usable_size_r>:
 800ffec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800fff0:	1f18      	subs	r0, r3, #4
 800fff2:	2b00      	cmp	r3, #0
 800fff4:	bfbc      	itt	lt
 800fff6:	580b      	ldrlt	r3, [r1, r0]
 800fff8:	18c0      	addlt	r0, r0, r3
 800fffa:	4770      	bx	lr

0800fffc <fiprintf>:
 800fffc:	b40e      	push	{r1, r2, r3}
 800fffe:	b503      	push	{r0, r1, lr}
 8010000:	ab03      	add	r3, sp, #12
 8010002:	4601      	mov	r1, r0
 8010004:	4805      	ldr	r0, [pc, #20]	@ (801001c <fiprintf+0x20>)
 8010006:	f853 2b04 	ldr.w	r2, [r3], #4
 801000a:	6800      	ldr	r0, [r0, #0]
 801000c:	9301      	str	r3, [sp, #4]
 801000e:	f7fe ff5b 	bl	800eec8 <_vfiprintf_r>
 8010012:	b002      	add	sp, #8
 8010014:	f85d eb04 	ldr.w	lr, [sp], #4
 8010018:	b003      	add	sp, #12
 801001a:	4770      	bx	lr
 801001c:	20000040 	.word	0x20000040

08010020 <__ascii_wctomb>:
 8010020:	4603      	mov	r3, r0
 8010022:	4608      	mov	r0, r1
 8010024:	b141      	cbz	r1, 8010038 <__ascii_wctomb+0x18>
 8010026:	2aff      	cmp	r2, #255	@ 0xff
 8010028:	d904      	bls.n	8010034 <__ascii_wctomb+0x14>
 801002a:	228a      	movs	r2, #138	@ 0x8a
 801002c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8010030:	601a      	str	r2, [r3, #0]
 8010032:	4770      	bx	lr
 8010034:	2001      	movs	r0, #1
 8010036:	700a      	strb	r2, [r1, #0]
 8010038:	4770      	bx	lr

0801003a <abort>:
 801003a:	2006      	movs	r0, #6
 801003c:	b508      	push	{r3, lr}
 801003e:	f000 f82b 	bl	8010098 <raise>
 8010042:	2001      	movs	r0, #1
 8010044:	f7f4 faa6 	bl	8004594 <_exit>

08010048 <_raise_r>:
 8010048:	291f      	cmp	r1, #31
 801004a:	b538      	push	{r3, r4, r5, lr}
 801004c:	4605      	mov	r5, r0
 801004e:	460c      	mov	r4, r1
 8010050:	d904      	bls.n	801005c <_raise_r+0x14>
 8010052:	2316      	movs	r3, #22
 8010054:	6003      	str	r3, [r0, #0]
 8010056:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801005a:	bd38      	pop	{r3, r4, r5, pc}
 801005c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 801005e:	b112      	cbz	r2, 8010066 <_raise_r+0x1e>
 8010060:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8010064:	b94b      	cbnz	r3, 801007a <_raise_r+0x32>
 8010066:	4628      	mov	r0, r5
 8010068:	f000 f830 	bl	80100cc <_getpid_r>
 801006c:	4622      	mov	r2, r4
 801006e:	4601      	mov	r1, r0
 8010070:	4628      	mov	r0, r5
 8010072:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010076:	f000 b817 	b.w	80100a8 <_kill_r>
 801007a:	2b01      	cmp	r3, #1
 801007c:	d00a      	beq.n	8010094 <_raise_r+0x4c>
 801007e:	1c59      	adds	r1, r3, #1
 8010080:	d103      	bne.n	801008a <_raise_r+0x42>
 8010082:	2316      	movs	r3, #22
 8010084:	6003      	str	r3, [r0, #0]
 8010086:	2001      	movs	r0, #1
 8010088:	e7e7      	b.n	801005a <_raise_r+0x12>
 801008a:	2100      	movs	r1, #0
 801008c:	4620      	mov	r0, r4
 801008e:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8010092:	4798      	blx	r3
 8010094:	2000      	movs	r0, #0
 8010096:	e7e0      	b.n	801005a <_raise_r+0x12>

08010098 <raise>:
 8010098:	4b02      	ldr	r3, [pc, #8]	@ (80100a4 <raise+0xc>)
 801009a:	4601      	mov	r1, r0
 801009c:	6818      	ldr	r0, [r3, #0]
 801009e:	f7ff bfd3 	b.w	8010048 <_raise_r>
 80100a2:	bf00      	nop
 80100a4:	20000040 	.word	0x20000040

080100a8 <_kill_r>:
 80100a8:	b538      	push	{r3, r4, r5, lr}
 80100aa:	2300      	movs	r3, #0
 80100ac:	4d06      	ldr	r5, [pc, #24]	@ (80100c8 <_kill_r+0x20>)
 80100ae:	4604      	mov	r4, r0
 80100b0:	4608      	mov	r0, r1
 80100b2:	4611      	mov	r1, r2
 80100b4:	602b      	str	r3, [r5, #0]
 80100b6:	f7f4 fa5d 	bl	8004574 <_kill>
 80100ba:	1c43      	adds	r3, r0, #1
 80100bc:	d102      	bne.n	80100c4 <_kill_r+0x1c>
 80100be:	682b      	ldr	r3, [r5, #0]
 80100c0:	b103      	cbz	r3, 80100c4 <_kill_r+0x1c>
 80100c2:	6023      	str	r3, [r4, #0]
 80100c4:	bd38      	pop	{r3, r4, r5, pc}
 80100c6:	bf00      	nop
 80100c8:	200006a4 	.word	0x200006a4

080100cc <_getpid_r>:
 80100cc:	f7f4 ba4a 	b.w	8004564 <_getpid>

080100d0 <_init>:
 80100d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80100d2:	bf00      	nop
 80100d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80100d6:	bc08      	pop	{r3}
 80100d8:	469e      	mov	lr, r3
 80100da:	4770      	bx	lr

080100dc <_fini>:
 80100dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80100de:	bf00      	nop
 80100e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80100e2:	bc08      	pop	{r3}
 80100e4:	469e      	mov	lr, r3
 80100e6:	4770      	bx	lr
