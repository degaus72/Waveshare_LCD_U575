
Waveshare_LCD_U575.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000238  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c9a0  08000238  08000238  00001238  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000008f1  0800cbd8  0800cbd8  0000dbd8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800d4cc  0800d4cc  0000e4cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800d4d4  0800d4d4  0000e4d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800d4d8  0800d4d8  0000e4d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         000001f8  20000000  0800d4dc  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000003a4  200001f8  0800d6d4  0000f1f8  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  2000059c  0800d6d4  0000f59c  2**0
                  ALLOC
  9 .ARM.attributes 00000036  00000000  00000000  0000f1f8  2**0
                  CONTENTS, READONLY
 10 .debug_info   0002319d  00000000  00000000  0000f22e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00004344  00000000  00000000  000323cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001c60  00000000  00000000  00036710  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  00006742  00000000  00000000  00038370  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   00026c5f  00000000  00000000  0003eab2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    001515ba  00000000  00000000  00065711  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000043  00000000  00000000  001b6ccb  2**0
                  CONTENTS, READONLY
 17 .debug_rnglists 00001608  00000000  00000000  001b6d0e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  000087dc  00000000  00000000  001b8318  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000072  00000000  00000000  001c0af4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000238 <__do_global_dtors_aux>:
 8000238:	b510      	push	{r4, lr}
 800023a:	4c05      	ldr	r4, [pc, #20]	@ (8000250 <__do_global_dtors_aux+0x18>)
 800023c:	7823      	ldrb	r3, [r4, #0]
 800023e:	b933      	cbnz	r3, 800024e <__do_global_dtors_aux+0x16>
 8000240:	4b04      	ldr	r3, [pc, #16]	@ (8000254 <__do_global_dtors_aux+0x1c>)
 8000242:	b113      	cbz	r3, 800024a <__do_global_dtors_aux+0x12>
 8000244:	4804      	ldr	r0, [pc, #16]	@ (8000258 <__do_global_dtors_aux+0x20>)
 8000246:	f3af 8000 	nop.w
 800024a:	2301      	movs	r3, #1
 800024c:	7023      	strb	r3, [r4, #0]
 800024e:	bd10      	pop	{r4, pc}
 8000250:	200001f8 	.word	0x200001f8
 8000254:	00000000 	.word	0x00000000
 8000258:	0800cbc0 	.word	0x0800cbc0

0800025c <frame_dummy>:
 800025c:	b508      	push	{r3, lr}
 800025e:	4b03      	ldr	r3, [pc, #12]	@ (800026c <frame_dummy+0x10>)
 8000260:	b11b      	cbz	r3, 800026a <frame_dummy+0xe>
 8000262:	4903      	ldr	r1, [pc, #12]	@ (8000270 <frame_dummy+0x14>)
 8000264:	4803      	ldr	r0, [pc, #12]	@ (8000274 <frame_dummy+0x18>)
 8000266:	f3af 8000 	nop.w
 800026a:	bd08      	pop	{r3, pc}
 800026c:	00000000 	.word	0x00000000
 8000270:	200001fc 	.word	0x200001fc
 8000274:	0800cbc0 	.word	0x0800cbc0

08000278 <strlen>:
 8000278:	4603      	mov	r3, r0
 800027a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800027e:	2a00      	cmp	r2, #0
 8000280:	d1fb      	bne.n	800027a <strlen+0x2>
 8000282:	1a18      	subs	r0, r3, r0
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr

08000288 <__aeabi_drsub>:
 8000288:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800028c:	e002      	b.n	8000294 <__adddf3>
 800028e:	bf00      	nop

08000290 <__aeabi_dsub>:
 8000290:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000294 <__adddf3>:
 8000294:	b530      	push	{r4, r5, lr}
 8000296:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800029a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800029e:	ea94 0f05 	teq	r4, r5
 80002a2:	bf08      	it	eq
 80002a4:	ea90 0f02 	teqeq	r0, r2
 80002a8:	bf1f      	itttt	ne
 80002aa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002ae:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002b2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002b6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002ba:	f000 80e2 	beq.w	8000482 <__adddf3+0x1ee>
 80002be:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002c2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002c6:	bfb8      	it	lt
 80002c8:	426d      	neglt	r5, r5
 80002ca:	dd0c      	ble.n	80002e6 <__adddf3+0x52>
 80002cc:	442c      	add	r4, r5
 80002ce:	ea80 0202 	eor.w	r2, r0, r2
 80002d2:	ea81 0303 	eor.w	r3, r1, r3
 80002d6:	ea82 0000 	eor.w	r0, r2, r0
 80002da:	ea83 0101 	eor.w	r1, r3, r1
 80002de:	ea80 0202 	eor.w	r2, r0, r2
 80002e2:	ea81 0303 	eor.w	r3, r1, r3
 80002e6:	2d36      	cmp	r5, #54	@ 0x36
 80002e8:	bf88      	it	hi
 80002ea:	bd30      	pophi	{r4, r5, pc}
 80002ec:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002f4:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002fc:	d002      	beq.n	8000304 <__adddf3+0x70>
 80002fe:	4240      	negs	r0, r0
 8000300:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000304:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000308:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800030c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000310:	d002      	beq.n	8000318 <__adddf3+0x84>
 8000312:	4252      	negs	r2, r2
 8000314:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000318:	ea94 0f05 	teq	r4, r5
 800031c:	f000 80a7 	beq.w	800046e <__adddf3+0x1da>
 8000320:	f1a4 0401 	sub.w	r4, r4, #1
 8000324:	f1d5 0e20 	rsbs	lr, r5, #32
 8000328:	db0d      	blt.n	8000346 <__adddf3+0xb2>
 800032a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800032e:	fa22 f205 	lsr.w	r2, r2, r5
 8000332:	1880      	adds	r0, r0, r2
 8000334:	f141 0100 	adc.w	r1, r1, #0
 8000338:	fa03 f20e 	lsl.w	r2, r3, lr
 800033c:	1880      	adds	r0, r0, r2
 800033e:	fa43 f305 	asr.w	r3, r3, r5
 8000342:	4159      	adcs	r1, r3
 8000344:	e00e      	b.n	8000364 <__adddf3+0xd0>
 8000346:	f1a5 0520 	sub.w	r5, r5, #32
 800034a:	f10e 0e20 	add.w	lr, lr, #32
 800034e:	2a01      	cmp	r2, #1
 8000350:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000354:	bf28      	it	cs
 8000356:	f04c 0c02 	orrcs.w	ip, ip, #2
 800035a:	fa43 f305 	asr.w	r3, r3, r5
 800035e:	18c0      	adds	r0, r0, r3
 8000360:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000364:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000368:	d507      	bpl.n	800037a <__adddf3+0xe6>
 800036a:	f04f 0e00 	mov.w	lr, #0
 800036e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000372:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000376:	eb6e 0101 	sbc.w	r1, lr, r1
 800037a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800037e:	d31b      	bcc.n	80003b8 <__adddf3+0x124>
 8000380:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000384:	d30c      	bcc.n	80003a0 <__adddf3+0x10c>
 8000386:	0849      	lsrs	r1, r1, #1
 8000388:	ea5f 0030 	movs.w	r0, r0, rrx
 800038c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000390:	f104 0401 	add.w	r4, r4, #1
 8000394:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000398:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800039c:	f080 809a 	bcs.w	80004d4 <__adddf3+0x240>
 80003a0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003a4:	bf08      	it	eq
 80003a6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003aa:	f150 0000 	adcs.w	r0, r0, #0
 80003ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003b2:	ea41 0105 	orr.w	r1, r1, r5
 80003b6:	bd30      	pop	{r4, r5, pc}
 80003b8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003bc:	4140      	adcs	r0, r0
 80003be:	eb41 0101 	adc.w	r1, r1, r1
 80003c2:	3c01      	subs	r4, #1
 80003c4:	bf28      	it	cs
 80003c6:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003ca:	d2e9      	bcs.n	80003a0 <__adddf3+0x10c>
 80003cc:	f091 0f00 	teq	r1, #0
 80003d0:	bf04      	itt	eq
 80003d2:	4601      	moveq	r1, r0
 80003d4:	2000      	moveq	r0, #0
 80003d6:	fab1 f381 	clz	r3, r1
 80003da:	bf08      	it	eq
 80003dc:	3320      	addeq	r3, #32
 80003de:	f1a3 030b 	sub.w	r3, r3, #11
 80003e2:	f1b3 0220 	subs.w	r2, r3, #32
 80003e6:	da0c      	bge.n	8000402 <__adddf3+0x16e>
 80003e8:	320c      	adds	r2, #12
 80003ea:	dd08      	ble.n	80003fe <__adddf3+0x16a>
 80003ec:	f102 0c14 	add.w	ip, r2, #20
 80003f0:	f1c2 020c 	rsb	r2, r2, #12
 80003f4:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f8:	fa21 f102 	lsr.w	r1, r1, r2
 80003fc:	e00c      	b.n	8000418 <__adddf3+0x184>
 80003fe:	f102 0214 	add.w	r2, r2, #20
 8000402:	bfd8      	it	le
 8000404:	f1c2 0c20 	rsble	ip, r2, #32
 8000408:	fa01 f102 	lsl.w	r1, r1, r2
 800040c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000410:	bfdc      	itt	le
 8000412:	ea41 010c 	orrle.w	r1, r1, ip
 8000416:	4090      	lslle	r0, r2
 8000418:	1ae4      	subs	r4, r4, r3
 800041a:	bfa2      	ittt	ge
 800041c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000420:	4329      	orrge	r1, r5
 8000422:	bd30      	popge	{r4, r5, pc}
 8000424:	ea6f 0404 	mvn.w	r4, r4
 8000428:	3c1f      	subs	r4, #31
 800042a:	da1c      	bge.n	8000466 <__adddf3+0x1d2>
 800042c:	340c      	adds	r4, #12
 800042e:	dc0e      	bgt.n	800044e <__adddf3+0x1ba>
 8000430:	f104 0414 	add.w	r4, r4, #20
 8000434:	f1c4 0220 	rsb	r2, r4, #32
 8000438:	fa20 f004 	lsr.w	r0, r0, r4
 800043c:	fa01 f302 	lsl.w	r3, r1, r2
 8000440:	ea40 0003 	orr.w	r0, r0, r3
 8000444:	fa21 f304 	lsr.w	r3, r1, r4
 8000448:	ea45 0103 	orr.w	r1, r5, r3
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	f1c4 040c 	rsb	r4, r4, #12
 8000452:	f1c4 0220 	rsb	r2, r4, #32
 8000456:	fa20 f002 	lsr.w	r0, r0, r2
 800045a:	fa01 f304 	lsl.w	r3, r1, r4
 800045e:	ea40 0003 	orr.w	r0, r0, r3
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	fa21 f004 	lsr.w	r0, r1, r4
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	f094 0f00 	teq	r4, #0
 8000472:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000476:	bf06      	itte	eq
 8000478:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800047c:	3401      	addeq	r4, #1
 800047e:	3d01      	subne	r5, #1
 8000480:	e74e      	b.n	8000320 <__adddf3+0x8c>
 8000482:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000486:	bf18      	it	ne
 8000488:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800048c:	d029      	beq.n	80004e2 <__adddf3+0x24e>
 800048e:	ea94 0f05 	teq	r4, r5
 8000492:	bf08      	it	eq
 8000494:	ea90 0f02 	teqeq	r0, r2
 8000498:	d005      	beq.n	80004a6 <__adddf3+0x212>
 800049a:	ea54 0c00 	orrs.w	ip, r4, r0
 800049e:	bf04      	itt	eq
 80004a0:	4619      	moveq	r1, r3
 80004a2:	4610      	moveq	r0, r2
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	ea91 0f03 	teq	r1, r3
 80004aa:	bf1e      	ittt	ne
 80004ac:	2100      	movne	r1, #0
 80004ae:	2000      	movne	r0, #0
 80004b0:	bd30      	popne	{r4, r5, pc}
 80004b2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004b6:	d105      	bne.n	80004c4 <__adddf3+0x230>
 80004b8:	0040      	lsls	r0, r0, #1
 80004ba:	4149      	adcs	r1, r1
 80004bc:	bf28      	it	cs
 80004be:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004c2:	bd30      	pop	{r4, r5, pc}
 80004c4:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c8:	bf3c      	itt	cc
 80004ca:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004ce:	bd30      	popcc	{r4, r5, pc}
 80004d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004d4:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004dc:	f04f 0000 	mov.w	r0, #0
 80004e0:	bd30      	pop	{r4, r5, pc}
 80004e2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004e6:	bf1a      	itte	ne
 80004e8:	4619      	movne	r1, r3
 80004ea:	4610      	movne	r0, r2
 80004ec:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f0:	bf1c      	itt	ne
 80004f2:	460b      	movne	r3, r1
 80004f4:	4602      	movne	r2, r0
 80004f6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004fa:	bf06      	itte	eq
 80004fc:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000500:	ea91 0f03 	teqeq	r1, r3
 8000504:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	bf00      	nop

0800050c <__aeabi_ui2d>:
 800050c:	f090 0f00 	teq	r0, #0
 8000510:	bf04      	itt	eq
 8000512:	2100      	moveq	r1, #0
 8000514:	4770      	bxeq	lr
 8000516:	b530      	push	{r4, r5, lr}
 8000518:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800051c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000520:	f04f 0500 	mov.w	r5, #0
 8000524:	f04f 0100 	mov.w	r1, #0
 8000528:	e750      	b.n	80003cc <__adddf3+0x138>
 800052a:	bf00      	nop

0800052c <__aeabi_i2d>:
 800052c:	f090 0f00 	teq	r0, #0
 8000530:	bf04      	itt	eq
 8000532:	2100      	moveq	r1, #0
 8000534:	4770      	bxeq	lr
 8000536:	b530      	push	{r4, r5, lr}
 8000538:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800053c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000540:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000544:	bf48      	it	mi
 8000546:	4240      	negmi	r0, r0
 8000548:	f04f 0100 	mov.w	r1, #0
 800054c:	e73e      	b.n	80003cc <__adddf3+0x138>
 800054e:	bf00      	nop

08000550 <__aeabi_f2d>:
 8000550:	0042      	lsls	r2, r0, #1
 8000552:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000556:	ea4f 0131 	mov.w	r1, r1, rrx
 800055a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800055e:	bf1f      	itttt	ne
 8000560:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000564:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000568:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 800056c:	4770      	bxne	lr
 800056e:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000572:	bf08      	it	eq
 8000574:	4770      	bxeq	lr
 8000576:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800057a:	bf04      	itt	eq
 800057c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000580:	4770      	bxeq	lr
 8000582:	b530      	push	{r4, r5, lr}
 8000584:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000588:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800058c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000590:	e71c      	b.n	80003cc <__adddf3+0x138>
 8000592:	bf00      	nop

08000594 <__aeabi_ul2d>:
 8000594:	ea50 0201 	orrs.w	r2, r0, r1
 8000598:	bf08      	it	eq
 800059a:	4770      	bxeq	lr
 800059c:	b530      	push	{r4, r5, lr}
 800059e:	f04f 0500 	mov.w	r5, #0
 80005a2:	e00a      	b.n	80005ba <__aeabi_l2d+0x16>

080005a4 <__aeabi_l2d>:
 80005a4:	ea50 0201 	orrs.w	r2, r0, r1
 80005a8:	bf08      	it	eq
 80005aa:	4770      	bxeq	lr
 80005ac:	b530      	push	{r4, r5, lr}
 80005ae:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005b2:	d502      	bpl.n	80005ba <__aeabi_l2d+0x16>
 80005b4:	4240      	negs	r0, r0
 80005b6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005ba:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005be:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005c2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005c6:	f43f aed8 	beq.w	800037a <__adddf3+0xe6>
 80005ca:	f04f 0203 	mov.w	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005e2:	f1c2 0320 	rsb	r3, r2, #32
 80005e6:	fa00 fc03 	lsl.w	ip, r0, r3
 80005ea:	fa20 f002 	lsr.w	r0, r0, r2
 80005ee:	fa01 fe03 	lsl.w	lr, r1, r3
 80005f2:	ea40 000e 	orr.w	r0, r0, lr
 80005f6:	fa21 f102 	lsr.w	r1, r1, r2
 80005fa:	4414      	add	r4, r2
 80005fc:	e6bd      	b.n	800037a <__adddf3+0xe6>
 80005fe:	bf00      	nop

08000600 <__aeabi_dmul>:
 8000600:	b570      	push	{r4, r5, r6, lr}
 8000602:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000606:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800060a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800060e:	bf1d      	ittte	ne
 8000610:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000614:	ea94 0f0c 	teqne	r4, ip
 8000618:	ea95 0f0c 	teqne	r5, ip
 800061c:	f000 f8de 	bleq	80007dc <__aeabi_dmul+0x1dc>
 8000620:	442c      	add	r4, r5
 8000622:	ea81 0603 	eor.w	r6, r1, r3
 8000626:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800062a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800062e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000632:	bf18      	it	ne
 8000634:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000638:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800063c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000640:	d038      	beq.n	80006b4 <__aeabi_dmul+0xb4>
 8000642:	fba0 ce02 	umull	ip, lr, r0, r2
 8000646:	f04f 0500 	mov.w	r5, #0
 800064a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800064e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000652:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000656:	f04f 0600 	mov.w	r6, #0
 800065a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800065e:	f09c 0f00 	teq	ip, #0
 8000662:	bf18      	it	ne
 8000664:	f04e 0e01 	orrne.w	lr, lr, #1
 8000668:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 800066c:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000670:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000674:	d204      	bcs.n	8000680 <__aeabi_dmul+0x80>
 8000676:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800067a:	416d      	adcs	r5, r5
 800067c:	eb46 0606 	adc.w	r6, r6, r6
 8000680:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000684:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000688:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800068c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000690:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000694:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000698:	bf88      	it	hi
 800069a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800069e:	d81e      	bhi.n	80006de <__aeabi_dmul+0xde>
 80006a0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006a4:	bf08      	it	eq
 80006a6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006aa:	f150 0000 	adcs.w	r0, r0, #0
 80006ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b8:	ea46 0101 	orr.w	r1, r6, r1
 80006bc:	ea40 0002 	orr.w	r0, r0, r2
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c8:	bfc2      	ittt	gt
 80006ca:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006ce:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006d2:	bd70      	popgt	{r4, r5, r6, pc}
 80006d4:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d8:	f04f 0e00 	mov.w	lr, #0
 80006dc:	3c01      	subs	r4, #1
 80006de:	f300 80ab 	bgt.w	8000838 <__aeabi_dmul+0x238>
 80006e2:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006e6:	bfde      	ittt	le
 80006e8:	2000      	movle	r0, #0
 80006ea:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006ee:	bd70      	pople	{r4, r5, r6, pc}
 80006f0:	f1c4 0400 	rsb	r4, r4, #0
 80006f4:	3c20      	subs	r4, #32
 80006f6:	da35      	bge.n	8000764 <__aeabi_dmul+0x164>
 80006f8:	340c      	adds	r4, #12
 80006fa:	dc1b      	bgt.n	8000734 <__aeabi_dmul+0x134>
 80006fc:	f104 0414 	add.w	r4, r4, #20
 8000700:	f1c4 0520 	rsb	r5, r4, #32
 8000704:	fa00 f305 	lsl.w	r3, r0, r5
 8000708:	fa20 f004 	lsr.w	r0, r0, r4
 800070c:	fa01 f205 	lsl.w	r2, r1, r5
 8000710:	ea40 0002 	orr.w	r0, r0, r2
 8000714:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000718:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800071c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000720:	fa21 f604 	lsr.w	r6, r1, r4
 8000724:	eb42 0106 	adc.w	r1, r2, r6
 8000728:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800072c:	bf08      	it	eq
 800072e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000732:	bd70      	pop	{r4, r5, r6, pc}
 8000734:	f1c4 040c 	rsb	r4, r4, #12
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f304 	lsl.w	r3, r0, r4
 8000740:	fa20 f005 	lsr.w	r0, r0, r5
 8000744:	fa01 f204 	lsl.w	r2, r1, r4
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000750:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000754:	f141 0100 	adc.w	r1, r1, #0
 8000758:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800075c:	bf08      	it	eq
 800075e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000762:	bd70      	pop	{r4, r5, r6, pc}
 8000764:	f1c4 0520 	rsb	r5, r4, #32
 8000768:	fa00 f205 	lsl.w	r2, r0, r5
 800076c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000770:	fa20 f304 	lsr.w	r3, r0, r4
 8000774:	fa01 f205 	lsl.w	r2, r1, r5
 8000778:	ea43 0302 	orr.w	r3, r3, r2
 800077c:	fa21 f004 	lsr.w	r0, r1, r4
 8000780:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000784:	fa21 f204 	lsr.w	r2, r1, r4
 8000788:	ea20 0002 	bic.w	r0, r0, r2
 800078c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f094 0f00 	teq	r4, #0
 80007a0:	d10f      	bne.n	80007c2 <__aeabi_dmul+0x1c2>
 80007a2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007a6:	0040      	lsls	r0, r0, #1
 80007a8:	eb41 0101 	adc.w	r1, r1, r1
 80007ac:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b0:	bf08      	it	eq
 80007b2:	3c01      	subeq	r4, #1
 80007b4:	d0f7      	beq.n	80007a6 <__aeabi_dmul+0x1a6>
 80007b6:	ea41 0106 	orr.w	r1, r1, r6
 80007ba:	f095 0f00 	teq	r5, #0
 80007be:	bf18      	it	ne
 80007c0:	4770      	bxne	lr
 80007c2:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007c6:	0052      	lsls	r2, r2, #1
 80007c8:	eb43 0303 	adc.w	r3, r3, r3
 80007cc:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d0:	bf08      	it	eq
 80007d2:	3d01      	subeq	r5, #1
 80007d4:	d0f7      	beq.n	80007c6 <__aeabi_dmul+0x1c6>
 80007d6:	ea43 0306 	orr.w	r3, r3, r6
 80007da:	4770      	bx	lr
 80007dc:	ea94 0f0c 	teq	r4, ip
 80007e0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007e4:	bf18      	it	ne
 80007e6:	ea95 0f0c 	teqne	r5, ip
 80007ea:	d00c      	beq.n	8000806 <__aeabi_dmul+0x206>
 80007ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f0:	bf18      	it	ne
 80007f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007f6:	d1d1      	bne.n	800079c <__aeabi_dmul+0x19c>
 80007f8:	ea81 0103 	eor.w	r1, r1, r3
 80007fc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000800:	f04f 0000 	mov.w	r0, #0
 8000804:	bd70      	pop	{r4, r5, r6, pc}
 8000806:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800080a:	bf06      	itte	eq
 800080c:	4610      	moveq	r0, r2
 800080e:	4619      	moveq	r1, r3
 8000810:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000814:	d019      	beq.n	800084a <__aeabi_dmul+0x24a>
 8000816:	ea94 0f0c 	teq	r4, ip
 800081a:	d102      	bne.n	8000822 <__aeabi_dmul+0x222>
 800081c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000820:	d113      	bne.n	800084a <__aeabi_dmul+0x24a>
 8000822:	ea95 0f0c 	teq	r5, ip
 8000826:	d105      	bne.n	8000834 <__aeabi_dmul+0x234>
 8000828:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800082c:	bf1c      	itt	ne
 800082e:	4610      	movne	r0, r2
 8000830:	4619      	movne	r1, r3
 8000832:	d10a      	bne.n	800084a <__aeabi_dmul+0x24a>
 8000834:	ea81 0103 	eor.w	r1, r1, r3
 8000838:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800083c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000840:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000844:	f04f 0000 	mov.w	r0, #0
 8000848:	bd70      	pop	{r4, r5, r6, pc}
 800084a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800084e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000852:	bd70      	pop	{r4, r5, r6, pc}

08000854 <__aeabi_ddiv>:
 8000854:	b570      	push	{r4, r5, r6, lr}
 8000856:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800085a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800085e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000862:	bf1d      	ittte	ne
 8000864:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000868:	ea94 0f0c 	teqne	r4, ip
 800086c:	ea95 0f0c 	teqne	r5, ip
 8000870:	f000 f8a7 	bleq	80009c2 <__aeabi_ddiv+0x16e>
 8000874:	eba4 0405 	sub.w	r4, r4, r5
 8000878:	ea81 0e03 	eor.w	lr, r1, r3
 800087c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000880:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000884:	f000 8088 	beq.w	8000998 <__aeabi_ddiv+0x144>
 8000888:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800088c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000890:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000894:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000898:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800089c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008a4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008ac:	429d      	cmp	r5, r3
 80008ae:	bf08      	it	eq
 80008b0:	4296      	cmpeq	r6, r2
 80008b2:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008b6:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008ba:	d202      	bcs.n	80008c2 <__aeabi_ddiv+0x6e>
 80008bc:	085b      	lsrs	r3, r3, #1
 80008be:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c2:	1ab6      	subs	r6, r6, r2
 80008c4:	eb65 0503 	sbc.w	r5, r5, r3
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008d2:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000930:	ea55 0e06 	orrs.w	lr, r5, r6
 8000934:	d018      	beq.n	8000968 <__aeabi_ddiv+0x114>
 8000936:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800093a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800093e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000942:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000946:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800094a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800094e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000952:	d1c0      	bne.n	80008d6 <__aeabi_ddiv+0x82>
 8000954:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000958:	d10b      	bne.n	8000972 <__aeabi_ddiv+0x11e>
 800095a:	ea41 0100 	orr.w	r1, r1, r0
 800095e:	f04f 0000 	mov.w	r0, #0
 8000962:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8000966:	e7b6      	b.n	80008d6 <__aeabi_ddiv+0x82>
 8000968:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 800096c:	bf04      	itt	eq
 800096e:	4301      	orreq	r1, r0
 8000970:	2000      	moveq	r0, #0
 8000972:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000976:	bf88      	it	hi
 8000978:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800097c:	f63f aeaf 	bhi.w	80006de <__aeabi_dmul+0xde>
 8000980:	ebb5 0c03 	subs.w	ip, r5, r3
 8000984:	bf04      	itt	eq
 8000986:	ebb6 0c02 	subseq.w	ip, r6, r2
 800098a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800098e:	f150 0000 	adcs.w	r0, r0, #0
 8000992:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000996:	bd70      	pop	{r4, r5, r6, pc}
 8000998:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800099c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009a4:	bfc2      	ittt	gt
 80009a6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009aa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	popgt	{r4, r5, r6, pc}
 80009b0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009b4:	f04f 0e00 	mov.w	lr, #0
 80009b8:	3c01      	subs	r4, #1
 80009ba:	e690      	b.n	80006de <__aeabi_dmul+0xde>
 80009bc:	ea45 0e06 	orr.w	lr, r5, r6
 80009c0:	e68d      	b.n	80006de <__aeabi_dmul+0xde>
 80009c2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009c6:	ea94 0f0c 	teq	r4, ip
 80009ca:	bf08      	it	eq
 80009cc:	ea95 0f0c 	teqeq	r5, ip
 80009d0:	f43f af3b 	beq.w	800084a <__aeabi_dmul+0x24a>
 80009d4:	ea94 0f0c 	teq	r4, ip
 80009d8:	d10a      	bne.n	80009f0 <__aeabi_ddiv+0x19c>
 80009da:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009de:	f47f af34 	bne.w	800084a <__aeabi_dmul+0x24a>
 80009e2:	ea95 0f0c 	teq	r5, ip
 80009e6:	f47f af25 	bne.w	8000834 <__aeabi_dmul+0x234>
 80009ea:	4610      	mov	r0, r2
 80009ec:	4619      	mov	r1, r3
 80009ee:	e72c      	b.n	800084a <__aeabi_dmul+0x24a>
 80009f0:	ea95 0f0c 	teq	r5, ip
 80009f4:	d106      	bne.n	8000a04 <__aeabi_ddiv+0x1b0>
 80009f6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009fa:	f43f aefd 	beq.w	80007f8 <__aeabi_dmul+0x1f8>
 80009fe:	4610      	mov	r0, r2
 8000a00:	4619      	mov	r1, r3
 8000a02:	e722      	b.n	800084a <__aeabi_dmul+0x24a>
 8000a04:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a08:	bf18      	it	ne
 8000a0a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a0e:	f47f aec5 	bne.w	800079c <__aeabi_dmul+0x19c>
 8000a12:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a16:	f47f af0d 	bne.w	8000834 <__aeabi_dmul+0x234>
 8000a1a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a1e:	f47f aeeb 	bne.w	80007f8 <__aeabi_dmul+0x1f8>
 8000a22:	e712      	b.n	800084a <__aeabi_dmul+0x24a>

08000a24 <__gedf2>:
 8000a24:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a28:	e006      	b.n	8000a38 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__ledf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	e002      	b.n	8000a38 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__cmpdf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a44:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a48:	bf18      	it	ne
 8000a4a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a4e:	d01b      	beq.n	8000a88 <__cmpdf2+0x54>
 8000a50:	b001      	add	sp, #4
 8000a52:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a56:	bf0c      	ite	eq
 8000a58:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a5c:	ea91 0f03 	teqne	r1, r3
 8000a60:	bf02      	ittt	eq
 8000a62:	ea90 0f02 	teqeq	r0, r2
 8000a66:	2000      	moveq	r0, #0
 8000a68:	4770      	bxeq	lr
 8000a6a:	f110 0f00 	cmn.w	r0, #0
 8000a6e:	ea91 0f03 	teq	r1, r3
 8000a72:	bf58      	it	pl
 8000a74:	4299      	cmppl	r1, r3
 8000a76:	bf08      	it	eq
 8000a78:	4290      	cmpeq	r0, r2
 8000a7a:	bf2c      	ite	cs
 8000a7c:	17d8      	asrcs	r0, r3, #31
 8000a7e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a82:	f040 0001 	orr.w	r0, r0, #1
 8000a86:	4770      	bx	lr
 8000a88:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a8c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a90:	d102      	bne.n	8000a98 <__cmpdf2+0x64>
 8000a92:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a96:	d107      	bne.n	8000aa8 <__cmpdf2+0x74>
 8000a98:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a9c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa0:	d1d6      	bne.n	8000a50 <__cmpdf2+0x1c>
 8000aa2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aa6:	d0d3      	beq.n	8000a50 <__cmpdf2+0x1c>
 8000aa8:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aac:	4770      	bx	lr
 8000aae:	bf00      	nop

08000ab0 <__aeabi_cdrcmple>:
 8000ab0:	4684      	mov	ip, r0
 8000ab2:	4610      	mov	r0, r2
 8000ab4:	4662      	mov	r2, ip
 8000ab6:	468c      	mov	ip, r1
 8000ab8:	4619      	mov	r1, r3
 8000aba:	4663      	mov	r3, ip
 8000abc:	e000      	b.n	8000ac0 <__aeabi_cdcmpeq>
 8000abe:	bf00      	nop

08000ac0 <__aeabi_cdcmpeq>:
 8000ac0:	b501      	push	{r0, lr}
 8000ac2:	f7ff ffb7 	bl	8000a34 <__cmpdf2>
 8000ac6:	2800      	cmp	r0, #0
 8000ac8:	bf48      	it	mi
 8000aca:	f110 0f00 	cmnmi.w	r0, #0
 8000ace:	bd01      	pop	{r0, pc}

08000ad0 <__aeabi_dcmpeq>:
 8000ad0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad4:	f7ff fff4 	bl	8000ac0 <__aeabi_cdcmpeq>
 8000ad8:	bf0c      	ite	eq
 8000ada:	2001      	moveq	r0, #1
 8000adc:	2000      	movne	r0, #0
 8000ade:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae2:	bf00      	nop

08000ae4 <__aeabi_dcmplt>:
 8000ae4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae8:	f7ff ffea 	bl	8000ac0 <__aeabi_cdcmpeq>
 8000aec:	bf34      	ite	cc
 8000aee:	2001      	movcc	r0, #1
 8000af0:	2000      	movcs	r0, #0
 8000af2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af6:	bf00      	nop

08000af8 <__aeabi_dcmple>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff ffe0 	bl	8000ac0 <__aeabi_cdcmpeq>
 8000b00:	bf94      	ite	ls
 8000b02:	2001      	movls	r0, #1
 8000b04:	2000      	movhi	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmpge>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffce 	bl	8000ab0 <__aeabi_cdrcmple>
 8000b14:	bf94      	ite	ls
 8000b16:	2001      	movls	r0, #1
 8000b18:	2000      	movhi	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmpgt>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffc4 	bl	8000ab0 <__aeabi_cdrcmple>
 8000b28:	bf34      	ite	cc
 8000b2a:	2001      	movcc	r0, #1
 8000b2c:	2000      	movcs	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpun>:
 8000b34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b3c:	d102      	bne.n	8000b44 <__aeabi_dcmpun+0x10>
 8000b3e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b42:	d10a      	bne.n	8000b5a <__aeabi_dcmpun+0x26>
 8000b44:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b4c:	d102      	bne.n	8000b54 <__aeabi_dcmpun+0x20>
 8000b4e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b52:	d102      	bne.n	8000b5a <__aeabi_dcmpun+0x26>
 8000b54:	f04f 0000 	mov.w	r0, #0
 8000b58:	4770      	bx	lr
 8000b5a:	f04f 0001 	mov.w	r0, #1
 8000b5e:	4770      	bx	lr

08000b60 <__aeabi_d2iz>:
 8000b60:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b64:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b68:	d215      	bcs.n	8000b96 <__aeabi_d2iz+0x36>
 8000b6a:	d511      	bpl.n	8000b90 <__aeabi_d2iz+0x30>
 8000b6c:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b70:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b74:	d912      	bls.n	8000b9c <__aeabi_d2iz+0x3c>
 8000b76:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b7a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b7e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b82:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b86:	fa23 f002 	lsr.w	r0, r3, r2
 8000b8a:	bf18      	it	ne
 8000b8c:	4240      	negne	r0, r0
 8000b8e:	4770      	bx	lr
 8000b90:	f04f 0000 	mov.w	r0, #0
 8000b94:	4770      	bx	lr
 8000b96:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b9a:	d105      	bne.n	8000ba8 <__aeabi_d2iz+0x48>
 8000b9c:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba0:	bf08      	it	eq
 8000ba2:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	bf00      	nop

08000bb0 <__aeabi_uldivmod>:
 8000bb0:	b953      	cbnz	r3, 8000bc8 <__aeabi_uldivmod+0x18>
 8000bb2:	b94a      	cbnz	r2, 8000bc8 <__aeabi_uldivmod+0x18>
 8000bb4:	2900      	cmp	r1, #0
 8000bb6:	bf08      	it	eq
 8000bb8:	2800      	cmpeq	r0, #0
 8000bba:	bf1c      	itt	ne
 8000bbc:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000bc0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000bc4:	f000 b9b0 	b.w	8000f28 <__aeabi_idiv0>
 8000bc8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bcc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd0:	f000 f806 	bl	8000be0 <__udivmoddi4>
 8000bd4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bdc:	b004      	add	sp, #16
 8000bde:	4770      	bx	lr

08000be0 <__udivmoddi4>:
 8000be0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000be4:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8000be6:	4688      	mov	r8, r1
 8000be8:	4604      	mov	r4, r0
 8000bea:	468e      	mov	lr, r1
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d14a      	bne.n	8000c86 <__udivmoddi4+0xa6>
 8000bf0:	428a      	cmp	r2, r1
 8000bf2:	4617      	mov	r7, r2
 8000bf4:	d95f      	bls.n	8000cb6 <__udivmoddi4+0xd6>
 8000bf6:	fab2 f682 	clz	r6, r2
 8000bfa:	b14e      	cbz	r6, 8000c10 <__udivmoddi4+0x30>
 8000bfc:	f1c6 0320 	rsb	r3, r6, #32
 8000c00:	fa01 fe06 	lsl.w	lr, r1, r6
 8000c04:	40b7      	lsls	r7, r6
 8000c06:	40b4      	lsls	r4, r6
 8000c08:	fa20 f303 	lsr.w	r3, r0, r3
 8000c0c:	ea43 0e0e 	orr.w	lr, r3, lr
 8000c10:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c14:	fa1f fc87 	uxth.w	ip, r7
 8000c18:	0c23      	lsrs	r3, r4, #16
 8000c1a:	fbbe f1f8 	udiv	r1, lr, r8
 8000c1e:	fb08 ee11 	mls	lr, r8, r1, lr
 8000c22:	fb01 f20c 	mul.w	r2, r1, ip
 8000c26:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 8000c2a:	429a      	cmp	r2, r3
 8000c2c:	d907      	bls.n	8000c3e <__udivmoddi4+0x5e>
 8000c2e:	18fb      	adds	r3, r7, r3
 8000c30:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000c34:	d202      	bcs.n	8000c3c <__udivmoddi4+0x5c>
 8000c36:	429a      	cmp	r2, r3
 8000c38:	f200 8154 	bhi.w	8000ee4 <__udivmoddi4+0x304>
 8000c3c:	4601      	mov	r1, r0
 8000c3e:	1a9b      	subs	r3, r3, r2
 8000c40:	b2a2      	uxth	r2, r4
 8000c42:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c46:	fb08 3310 	mls	r3, r8, r0, r3
 8000c4a:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c4e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8000c52:	4594      	cmp	ip, r2
 8000c54:	d90b      	bls.n	8000c6e <__udivmoddi4+0x8e>
 8000c56:	18ba      	adds	r2, r7, r2
 8000c58:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8000c5c:	bf2c      	ite	cs
 8000c5e:	2401      	movcs	r4, #1
 8000c60:	2400      	movcc	r4, #0
 8000c62:	4594      	cmp	ip, r2
 8000c64:	d902      	bls.n	8000c6c <__udivmoddi4+0x8c>
 8000c66:	2c00      	cmp	r4, #0
 8000c68:	f000 813f 	beq.w	8000eea <__udivmoddi4+0x30a>
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c72:	eba2 020c 	sub.w	r2, r2, ip
 8000c76:	2100      	movs	r1, #0
 8000c78:	b11d      	cbz	r5, 8000c82 <__udivmoddi4+0xa2>
 8000c7a:	40f2      	lsrs	r2, r6
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	e9c5 2300 	strd	r2, r3, [r5]
 8000c82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000c86:	428b      	cmp	r3, r1
 8000c88:	d905      	bls.n	8000c96 <__udivmoddi4+0xb6>
 8000c8a:	b10d      	cbz	r5, 8000c90 <__udivmoddi4+0xb0>
 8000c8c:	e9c5 0100 	strd	r0, r1, [r5]
 8000c90:	2100      	movs	r1, #0
 8000c92:	4608      	mov	r0, r1
 8000c94:	e7f5      	b.n	8000c82 <__udivmoddi4+0xa2>
 8000c96:	fab3 f183 	clz	r1, r3
 8000c9a:	2900      	cmp	r1, #0
 8000c9c:	d14e      	bne.n	8000d3c <__udivmoddi4+0x15c>
 8000c9e:	4543      	cmp	r3, r8
 8000ca0:	f0c0 8112 	bcc.w	8000ec8 <__udivmoddi4+0x2e8>
 8000ca4:	4282      	cmp	r2, r0
 8000ca6:	f240 810f 	bls.w	8000ec8 <__udivmoddi4+0x2e8>
 8000caa:	4608      	mov	r0, r1
 8000cac:	2d00      	cmp	r5, #0
 8000cae:	d0e8      	beq.n	8000c82 <__udivmoddi4+0xa2>
 8000cb0:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cb4:	e7e5      	b.n	8000c82 <__udivmoddi4+0xa2>
 8000cb6:	2a00      	cmp	r2, #0
 8000cb8:	f000 80ac 	beq.w	8000e14 <__udivmoddi4+0x234>
 8000cbc:	fab2 f682 	clz	r6, r2
 8000cc0:	2e00      	cmp	r6, #0
 8000cc2:	f040 80bb 	bne.w	8000e3c <__udivmoddi4+0x25c>
 8000cc6:	1a8b      	subs	r3, r1, r2
 8000cc8:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8000ccc:	b2bc      	uxth	r4, r7
 8000cce:	2101      	movs	r1, #1
 8000cd0:	0c02      	lsrs	r2, r0, #16
 8000cd2:	b280      	uxth	r0, r0
 8000cd4:	fbb3 fcfe 	udiv	ip, r3, lr
 8000cd8:	fb0e 331c 	mls	r3, lr, ip, r3
 8000cdc:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
 8000ce0:	fb04 f20c 	mul.w	r2, r4, ip
 8000ce4:	429a      	cmp	r2, r3
 8000ce6:	d90e      	bls.n	8000d06 <__udivmoddi4+0x126>
 8000ce8:	18fb      	adds	r3, r7, r3
 8000cea:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 8000cee:	bf2c      	ite	cs
 8000cf0:	f04f 0901 	movcs.w	r9, #1
 8000cf4:	f04f 0900 	movcc.w	r9, #0
 8000cf8:	429a      	cmp	r2, r3
 8000cfa:	d903      	bls.n	8000d04 <__udivmoddi4+0x124>
 8000cfc:	f1b9 0f00 	cmp.w	r9, #0
 8000d00:	f000 80ec 	beq.w	8000edc <__udivmoddi4+0x2fc>
 8000d04:	46c4      	mov	ip, r8
 8000d06:	1a9b      	subs	r3, r3, r2
 8000d08:	fbb3 f8fe 	udiv	r8, r3, lr
 8000d0c:	fb0e 3318 	mls	r3, lr, r8, r3
 8000d10:	fb04 f408 	mul.w	r4, r4, r8
 8000d14:	ea40 4203 	orr.w	r2, r0, r3, lsl #16
 8000d18:	4294      	cmp	r4, r2
 8000d1a:	d90b      	bls.n	8000d34 <__udivmoddi4+0x154>
 8000d1c:	18ba      	adds	r2, r7, r2
 8000d1e:	f108 33ff 	add.w	r3, r8, #4294967295	@ 0xffffffff
 8000d22:	bf2c      	ite	cs
 8000d24:	2001      	movcs	r0, #1
 8000d26:	2000      	movcc	r0, #0
 8000d28:	4294      	cmp	r4, r2
 8000d2a:	d902      	bls.n	8000d32 <__udivmoddi4+0x152>
 8000d2c:	2800      	cmp	r0, #0
 8000d2e:	f000 80d1 	beq.w	8000ed4 <__udivmoddi4+0x2f4>
 8000d32:	4698      	mov	r8, r3
 8000d34:	1b12      	subs	r2, r2, r4
 8000d36:	ea48 400c 	orr.w	r0, r8, ip, lsl #16
 8000d3a:	e79d      	b.n	8000c78 <__udivmoddi4+0x98>
 8000d3c:	f1c1 0620 	rsb	r6, r1, #32
 8000d40:	408b      	lsls	r3, r1
 8000d42:	fa08 f401 	lsl.w	r4, r8, r1
 8000d46:	fa00 f901 	lsl.w	r9, r0, r1
 8000d4a:	fa22 f706 	lsr.w	r7, r2, r6
 8000d4e:	fa28 f806 	lsr.w	r8, r8, r6
 8000d52:	408a      	lsls	r2, r1
 8000d54:	431f      	orrs	r7, r3
 8000d56:	fa20 f306 	lsr.w	r3, r0, r6
 8000d5a:	0c38      	lsrs	r0, r7, #16
 8000d5c:	4323      	orrs	r3, r4
 8000d5e:	fa1f fc87 	uxth.w	ip, r7
 8000d62:	0c1c      	lsrs	r4, r3, #16
 8000d64:	fbb8 fef0 	udiv	lr, r8, r0
 8000d68:	fb00 881e 	mls	r8, r0, lr, r8
 8000d6c:	ea44 4408 	orr.w	r4, r4, r8, lsl #16
 8000d70:	fb0e f80c 	mul.w	r8, lr, ip
 8000d74:	45a0      	cmp	r8, r4
 8000d76:	d90e      	bls.n	8000d96 <__udivmoddi4+0x1b6>
 8000d78:	193c      	adds	r4, r7, r4
 8000d7a:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000d7e:	bf2c      	ite	cs
 8000d80:	f04f 0b01 	movcs.w	fp, #1
 8000d84:	f04f 0b00 	movcc.w	fp, #0
 8000d88:	45a0      	cmp	r8, r4
 8000d8a:	d903      	bls.n	8000d94 <__udivmoddi4+0x1b4>
 8000d8c:	f1bb 0f00 	cmp.w	fp, #0
 8000d90:	f000 80b8 	beq.w	8000f04 <__udivmoddi4+0x324>
 8000d94:	46d6      	mov	lr, sl
 8000d96:	eba4 0408 	sub.w	r4, r4, r8
 8000d9a:	fa1f f883 	uxth.w	r8, r3
 8000d9e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000da2:	fb00 4413 	mls	r4, r0, r3, r4
 8000da6:	fb03 fc0c 	mul.w	ip, r3, ip
 8000daa:	ea48 4404 	orr.w	r4, r8, r4, lsl #16
 8000dae:	45a4      	cmp	ip, r4
 8000db0:	d90e      	bls.n	8000dd0 <__udivmoddi4+0x1f0>
 8000db2:	193c      	adds	r4, r7, r4
 8000db4:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000db8:	bf2c      	ite	cs
 8000dba:	f04f 0801 	movcs.w	r8, #1
 8000dbe:	f04f 0800 	movcc.w	r8, #0
 8000dc2:	45a4      	cmp	ip, r4
 8000dc4:	d903      	bls.n	8000dce <__udivmoddi4+0x1ee>
 8000dc6:	f1b8 0f00 	cmp.w	r8, #0
 8000dca:	f000 809f 	beq.w	8000f0c <__udivmoddi4+0x32c>
 8000dce:	4603      	mov	r3, r0
 8000dd0:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dd4:	eba4 040c 	sub.w	r4, r4, ip
 8000dd8:	fba0 ec02 	umull	lr, ip, r0, r2
 8000ddc:	4564      	cmp	r4, ip
 8000dde:	4673      	mov	r3, lr
 8000de0:	46e0      	mov	r8, ip
 8000de2:	d302      	bcc.n	8000dea <__udivmoddi4+0x20a>
 8000de4:	d107      	bne.n	8000df6 <__udivmoddi4+0x216>
 8000de6:	45f1      	cmp	r9, lr
 8000de8:	d205      	bcs.n	8000df6 <__udivmoddi4+0x216>
 8000dea:	ebbe 0302 	subs.w	r3, lr, r2
 8000dee:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000df2:	3801      	subs	r0, #1
 8000df4:	46e0      	mov	r8, ip
 8000df6:	b15d      	cbz	r5, 8000e10 <__udivmoddi4+0x230>
 8000df8:	ebb9 0203 	subs.w	r2, r9, r3
 8000dfc:	eb64 0408 	sbc.w	r4, r4, r8
 8000e00:	fa04 f606 	lsl.w	r6, r4, r6
 8000e04:	fa22 f301 	lsr.w	r3, r2, r1
 8000e08:	40cc      	lsrs	r4, r1
 8000e0a:	431e      	orrs	r6, r3
 8000e0c:	e9c5 6400 	strd	r6, r4, [r5]
 8000e10:	2100      	movs	r1, #0
 8000e12:	e736      	b.n	8000c82 <__udivmoddi4+0xa2>
 8000e14:	fbb1 fcf2 	udiv	ip, r1, r2
 8000e18:	0c01      	lsrs	r1, r0, #16
 8000e1a:	4614      	mov	r4, r2
 8000e1c:	b280      	uxth	r0, r0
 8000e1e:	4696      	mov	lr, r2
 8000e20:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
 8000e24:	2620      	movs	r6, #32
 8000e26:	4690      	mov	r8, r2
 8000e28:	ea40 4301 	orr.w	r3, r0, r1, lsl #16
 8000e2c:	4610      	mov	r0, r2
 8000e2e:	fbb1 f1f2 	udiv	r1, r1, r2
 8000e32:	eba3 0308 	sub.w	r3, r3, r8
 8000e36:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000e3a:	e74b      	b.n	8000cd4 <__udivmoddi4+0xf4>
 8000e3c:	40b7      	lsls	r7, r6
 8000e3e:	f1c6 0320 	rsb	r3, r6, #32
 8000e42:	fa01 f206 	lsl.w	r2, r1, r6
 8000e46:	fa21 f803 	lsr.w	r8, r1, r3
 8000e4a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e4e:	fa20 f303 	lsr.w	r3, r0, r3
 8000e52:	b2bc      	uxth	r4, r7
 8000e54:	40b0      	lsls	r0, r6
 8000e56:	4313      	orrs	r3, r2
 8000e58:	0c02      	lsrs	r2, r0, #16
 8000e5a:	0c19      	lsrs	r1, r3, #16
 8000e5c:	b280      	uxth	r0, r0
 8000e5e:	fbb8 f9fe 	udiv	r9, r8, lr
 8000e62:	fb0e 8819 	mls	r8, lr, r9, r8
 8000e66:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
 8000e6a:	fb09 f804 	mul.w	r8, r9, r4
 8000e6e:	4588      	cmp	r8, r1
 8000e70:	d951      	bls.n	8000f16 <__udivmoddi4+0x336>
 8000e72:	1879      	adds	r1, r7, r1
 8000e74:	f109 3cff 	add.w	ip, r9, #4294967295	@ 0xffffffff
 8000e78:	bf2c      	ite	cs
 8000e7a:	f04f 0a01 	movcs.w	sl, #1
 8000e7e:	f04f 0a00 	movcc.w	sl, #0
 8000e82:	4588      	cmp	r8, r1
 8000e84:	d902      	bls.n	8000e8c <__udivmoddi4+0x2ac>
 8000e86:	f1ba 0f00 	cmp.w	sl, #0
 8000e8a:	d031      	beq.n	8000ef0 <__udivmoddi4+0x310>
 8000e8c:	eba1 0108 	sub.w	r1, r1, r8
 8000e90:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e94:	fb09 f804 	mul.w	r8, r9, r4
 8000e98:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e9c:	b29b      	uxth	r3, r3
 8000e9e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ea2:	4543      	cmp	r3, r8
 8000ea4:	d235      	bcs.n	8000f12 <__udivmoddi4+0x332>
 8000ea6:	18fb      	adds	r3, r7, r3
 8000ea8:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000eac:	bf2c      	ite	cs
 8000eae:	f04f 0a01 	movcs.w	sl, #1
 8000eb2:	f04f 0a00 	movcc.w	sl, #0
 8000eb6:	4543      	cmp	r3, r8
 8000eb8:	d2bb      	bcs.n	8000e32 <__udivmoddi4+0x252>
 8000eba:	f1ba 0f00 	cmp.w	sl, #0
 8000ebe:	d1b8      	bne.n	8000e32 <__udivmoddi4+0x252>
 8000ec0:	f1a9 0102 	sub.w	r1, r9, #2
 8000ec4:	443b      	add	r3, r7
 8000ec6:	e7b4      	b.n	8000e32 <__udivmoddi4+0x252>
 8000ec8:	1a84      	subs	r4, r0, r2
 8000eca:	eb68 0203 	sbc.w	r2, r8, r3
 8000ece:	2001      	movs	r0, #1
 8000ed0:	4696      	mov	lr, r2
 8000ed2:	e6eb      	b.n	8000cac <__udivmoddi4+0xcc>
 8000ed4:	443a      	add	r2, r7
 8000ed6:	f1a8 0802 	sub.w	r8, r8, #2
 8000eda:	e72b      	b.n	8000d34 <__udivmoddi4+0x154>
 8000edc:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ee0:	443b      	add	r3, r7
 8000ee2:	e710      	b.n	8000d06 <__udivmoddi4+0x126>
 8000ee4:	3902      	subs	r1, #2
 8000ee6:	443b      	add	r3, r7
 8000ee8:	e6a9      	b.n	8000c3e <__udivmoddi4+0x5e>
 8000eea:	443a      	add	r2, r7
 8000eec:	3802      	subs	r0, #2
 8000eee:	e6be      	b.n	8000c6e <__udivmoddi4+0x8e>
 8000ef0:	eba7 0808 	sub.w	r8, r7, r8
 8000ef4:	f1a9 0c02 	sub.w	ip, r9, #2
 8000ef8:	4441      	add	r1, r8
 8000efa:	fbb1 f9fe 	udiv	r9, r1, lr
 8000efe:	fb09 f804 	mul.w	r8, r9, r4
 8000f02:	e7c9      	b.n	8000e98 <__udivmoddi4+0x2b8>
 8000f04:	f1ae 0e02 	sub.w	lr, lr, #2
 8000f08:	443c      	add	r4, r7
 8000f0a:	e744      	b.n	8000d96 <__udivmoddi4+0x1b6>
 8000f0c:	3b02      	subs	r3, #2
 8000f0e:	443c      	add	r4, r7
 8000f10:	e75e      	b.n	8000dd0 <__udivmoddi4+0x1f0>
 8000f12:	4649      	mov	r1, r9
 8000f14:	e78d      	b.n	8000e32 <__udivmoddi4+0x252>
 8000f16:	eba1 0108 	sub.w	r1, r1, r8
 8000f1a:	46cc      	mov	ip, r9
 8000f1c:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f20:	fb09 f804 	mul.w	r8, r9, r4
 8000f24:	e7b8      	b.n	8000e98 <__udivmoddi4+0x2b8>
 8000f26:	bf00      	nop

08000f28 <__aeabi_idiv0>:
 8000f28:	4770      	bx	lr
 8000f2a:	bf00      	nop

08000f2c <MX_GPIO_Init>:
     PA13 (JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PA14 (JTCK/SWCLK)   ------> DEBUG_JTCK-SWCLK
     PB3 (JTDO/TRACESWO)   ------> DEBUG_JTDO-SWO
*/
void MX_GPIO_Init(void)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b08a      	sub	sp, #40	@ 0x28
 8000f30:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f32:	f107 0314 	add.w	r3, r7, #20
 8000f36:	2200      	movs	r2, #0
 8000f38:	601a      	str	r2, [r3, #0]
 8000f3a:	605a      	str	r2, [r3, #4]
 8000f3c:	609a      	str	r2, [r3, #8]
 8000f3e:	60da      	str	r2, [r3, #12]
 8000f40:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f42:	4b53      	ldr	r3, [pc, #332]	@ (8001090 <MX_GPIO_Init+0x164>)
 8000f44:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000f48:	4a51      	ldr	r2, [pc, #324]	@ (8001090 <MX_GPIO_Init+0x164>)
 8000f4a:	f043 0304 	orr.w	r3, r3, #4
 8000f4e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000f52:	4b4f      	ldr	r3, [pc, #316]	@ (8001090 <MX_GPIO_Init+0x164>)
 8000f54:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000f58:	f003 0304 	and.w	r3, r3, #4
 8000f5c:	613b      	str	r3, [r7, #16]
 8000f5e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f60:	4b4b      	ldr	r3, [pc, #300]	@ (8001090 <MX_GPIO_Init+0x164>)
 8000f62:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000f66:	4a4a      	ldr	r2, [pc, #296]	@ (8001090 <MX_GPIO_Init+0x164>)
 8000f68:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000f6c:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000f70:	4b47      	ldr	r3, [pc, #284]	@ (8001090 <MX_GPIO_Init+0x164>)
 8000f72:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000f76:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000f7a:	60fb      	str	r3, [r7, #12]
 8000f7c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f7e:	4b44      	ldr	r3, [pc, #272]	@ (8001090 <MX_GPIO_Init+0x164>)
 8000f80:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000f84:	4a42      	ldr	r2, [pc, #264]	@ (8001090 <MX_GPIO_Init+0x164>)
 8000f86:	f043 0301 	orr.w	r3, r3, #1
 8000f8a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000f8e:	4b40      	ldr	r3, [pc, #256]	@ (8001090 <MX_GPIO_Init+0x164>)
 8000f90:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000f94:	f003 0301 	and.w	r3, r3, #1
 8000f98:	60bb      	str	r3, [r7, #8]
 8000f9a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f9c:	4b3c      	ldr	r3, [pc, #240]	@ (8001090 <MX_GPIO_Init+0x164>)
 8000f9e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000fa2:	4a3b      	ldr	r2, [pc, #236]	@ (8001090 <MX_GPIO_Init+0x164>)
 8000fa4:	f043 0302 	orr.w	r3, r3, #2
 8000fa8:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000fac:	4b38      	ldr	r3, [pc, #224]	@ (8001090 <MX_GPIO_Init+0x164>)
 8000fae:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000fb2:	f003 0302 	and.w	r3, r3, #2
 8000fb6:	607b      	str	r3, [r7, #4]
 8000fb8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RST_GPIO_Port, RST_Pin, GPIO_PIN_RESET);
 8000fba:	2200      	movs	r2, #0
 8000fbc:	2101      	movs	r1, #1
 8000fbe:	4835      	ldr	r0, [pc, #212]	@ (8001094 <MX_GPIO_Init+0x168>)
 8000fc0:	f001 fec6 	bl	8002d50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TP_RST_GPIO_Port, TP_RST_Pin, GPIO_PIN_SET);
 8000fc4:	2201      	movs	r2, #1
 8000fc6:	2104      	movs	r1, #4
 8000fc8:	4832      	ldr	r0, [pc, #200]	@ (8001094 <MX_GPIO_Init+0x168>)
 8000fca:	f001 fec1 	bl	8002d50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8000fce:	2201      	movs	r2, #1
 8000fd0:	2110      	movs	r1, #16
 8000fd2:	4831      	ldr	r0, [pc, #196]	@ (8001098 <MX_GPIO_Init+0x16c>)
 8000fd4:	f001 febc 	bl	8002d50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DC_GPIO_Port, DC_Pin, GPIO_PIN_RESET);
 8000fd8:	2200      	movs	r2, #0
 8000fda:	2101      	movs	r1, #1
 8000fdc:	482f      	ldr	r0, [pc, #188]	@ (800109c <MX_GPIO_Init+0x170>)
 8000fde:	f001 feb7 	bl	8002d50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, BL_Pin|DHT11_DATA_Pin, GPIO_PIN_SET);
 8000fe2:	2201      	movs	r2, #1
 8000fe4:	f44f 7181 	mov.w	r1, #258	@ 0x102
 8000fe8:	482c      	ldr	r0, [pc, #176]	@ (800109c <MX_GPIO_Init+0x170>)
 8000fea:	f001 feb1 	bl	8002d50 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : RST_Pin TP_RST_Pin */
  GPIO_InitStruct.Pin = RST_Pin|TP_RST_Pin;
 8000fee:	2305      	movs	r3, #5
 8000ff0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ff2:	2301      	movs	r3, #1
 8000ff4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ffa:	2303      	movs	r3, #3
 8000ffc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ffe:	f107 0314 	add.w	r3, r7, #20
 8001002:	4619      	mov	r1, r3
 8001004:	4823      	ldr	r0, [pc, #140]	@ (8001094 <MX_GPIO_Init+0x168>)
 8001006:	f001 fcc3 	bl	8002990 <HAL_GPIO_Init>

  /*Configure GPIO pin : INT_Pin */
  GPIO_InitStruct.Pin = INT_Pin;
 800100a:	2302      	movs	r3, #2
 800100c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800100e:	4b24      	ldr	r3, [pc, #144]	@ (80010a0 <MX_GPIO_Init+0x174>)
 8001010:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001012:	2301      	movs	r3, #1
 8001014:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(INT_GPIO_Port, &GPIO_InitStruct);
 8001016:	f107 0314 	add.w	r3, r7, #20
 800101a:	4619      	mov	r1, r3
 800101c:	481d      	ldr	r0, [pc, #116]	@ (8001094 <MX_GPIO_Init+0x168>)
 800101e:	f001 fcb7 	bl	8002990 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001022:	2310      	movs	r3, #16
 8001024:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001026:	2301      	movs	r3, #1
 8001028:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800102a:	2300      	movs	r3, #0
 800102c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800102e:	2303      	movs	r3, #3
 8001030:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001032:	f107 0314 	add.w	r3, r7, #20
 8001036:	4619      	mov	r1, r3
 8001038:	4817      	ldr	r0, [pc, #92]	@ (8001098 <MX_GPIO_Init+0x16c>)
 800103a:	f001 fca9 	bl	8002990 <HAL_GPIO_Init>

  /*Configure GPIO pins : DC_Pin BL_Pin */
  GPIO_InitStruct.Pin = DC_Pin|BL_Pin;
 800103e:	2303      	movs	r3, #3
 8001040:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001042:	2301      	movs	r3, #1
 8001044:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001046:	2300      	movs	r3, #0
 8001048:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800104a:	2303      	movs	r3, #3
 800104c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800104e:	f107 0314 	add.w	r3, r7, #20
 8001052:	4619      	mov	r1, r3
 8001054:	4811      	ldr	r0, [pc, #68]	@ (800109c <MX_GPIO_Init+0x170>)
 8001056:	f001 fc9b 	bl	8002990 <HAL_GPIO_Init>

  /*Configure GPIO pin : DHT11_DATA_Pin */
  GPIO_InitStruct.Pin = DHT11_DATA_Pin;
 800105a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800105e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001060:	2301      	movs	r3, #1
 8001062:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001064:	2300      	movs	r3, #0
 8001066:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001068:	2300      	movs	r3, #0
 800106a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DHT11_DATA_GPIO_Port, &GPIO_InitStruct);
 800106c:	f107 0314 	add.w	r3, r7, #20
 8001070:	4619      	mov	r1, r3
 8001072:	480a      	ldr	r0, [pc, #40]	@ (800109c <MX_GPIO_Init+0x170>)
 8001074:	f001 fc8c 	bl	8002990 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8001078:	2200      	movs	r2, #0
 800107a:	2100      	movs	r1, #0
 800107c:	200c      	movs	r0, #12
 800107e:	f001 fb39 	bl	80026f4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8001082:	200c      	movs	r0, #12
 8001084:	f001 fb50 	bl	8002728 <HAL_NVIC_EnableIRQ>

}
 8001088:	bf00      	nop
 800108a:	3728      	adds	r7, #40	@ 0x28
 800108c:	46bd      	mov	sp, r7
 800108e:	bd80      	pop	{r7, pc}
 8001090:	46020c00 	.word	0x46020c00
 8001094:	42020800 	.word	0x42020800
 8001098:	42020000 	.word	0x42020000
 800109c:	42020400 	.word	0x42020400
 80010a0:	10210000 	.word	0x10210000

080010a4 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80010a8:	4b1b      	ldr	r3, [pc, #108]	@ (8001118 <MX_I2C1_Init+0x74>)
 80010aa:	4a1c      	ldr	r2, [pc, #112]	@ (800111c <MX_I2C1_Init+0x78>)
 80010ac:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00F07BFF;
 80010ae:	4b1a      	ldr	r3, [pc, #104]	@ (8001118 <MX_I2C1_Init+0x74>)
 80010b0:	4a1b      	ldr	r2, [pc, #108]	@ (8001120 <MX_I2C1_Init+0x7c>)
 80010b2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80010b4:	4b18      	ldr	r3, [pc, #96]	@ (8001118 <MX_I2C1_Init+0x74>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80010ba:	4b17      	ldr	r3, [pc, #92]	@ (8001118 <MX_I2C1_Init+0x74>)
 80010bc:	2201      	movs	r2, #1
 80010be:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80010c0:	4b15      	ldr	r3, [pc, #84]	@ (8001118 <MX_I2C1_Init+0x74>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80010c6:	4b14      	ldr	r3, [pc, #80]	@ (8001118 <MX_I2C1_Init+0x74>)
 80010c8:	2200      	movs	r2, #0
 80010ca:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80010cc:	4b12      	ldr	r3, [pc, #72]	@ (8001118 <MX_I2C1_Init+0x74>)
 80010ce:	2200      	movs	r2, #0
 80010d0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80010d2:	4b11      	ldr	r3, [pc, #68]	@ (8001118 <MX_I2C1_Init+0x74>)
 80010d4:	2200      	movs	r2, #0
 80010d6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80010d8:	4b0f      	ldr	r3, [pc, #60]	@ (8001118 <MX_I2C1_Init+0x74>)
 80010da:	2200      	movs	r2, #0
 80010dc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80010de:	480e      	ldr	r0, [pc, #56]	@ (8001118 <MX_I2C1_Init+0x74>)
 80010e0:	f001 fe8a 	bl	8002df8 <HAL_I2C_Init>
 80010e4:	4603      	mov	r3, r0
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d001      	beq.n	80010ee <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80010ea:	f000 f983 	bl	80013f4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80010ee:	2100      	movs	r1, #0
 80010f0:	4809      	ldr	r0, [pc, #36]	@ (8001118 <MX_I2C1_Init+0x74>)
 80010f2:	f002 fd46 	bl	8003b82 <HAL_I2CEx_ConfigAnalogFilter>
 80010f6:	4603      	mov	r3, r0
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d001      	beq.n	8001100 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80010fc:	f000 f97a 	bl	80013f4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001100:	2100      	movs	r1, #0
 8001102:	4805      	ldr	r0, [pc, #20]	@ (8001118 <MX_I2C1_Init+0x74>)
 8001104:	f002 fd88 	bl	8003c18 <HAL_I2CEx_ConfigDigitalFilter>
 8001108:	4603      	mov	r3, r0
 800110a:	2b00      	cmp	r3, #0
 800110c:	d001      	beq.n	8001112 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800110e:	f000 f971 	bl	80013f4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001112:	bf00      	nop
 8001114:	bd80      	pop	{r7, pc}
 8001116:	bf00      	nop
 8001118:	20000214 	.word	0x20000214
 800111c:	40005400 	.word	0x40005400
 8001120:	00f07bff 	.word	0x00f07bff

08001124 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b0ba      	sub	sp, #232	@ 0xe8
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800112c:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001130:	2200      	movs	r2, #0
 8001132:	601a      	str	r2, [r3, #0]
 8001134:	605a      	str	r2, [r3, #4]
 8001136:	609a      	str	r2, [r3, #8]
 8001138:	60da      	str	r2, [r3, #12]
 800113a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800113c:	f107 0310 	add.w	r3, r7, #16
 8001140:	22c0      	movs	r2, #192	@ 0xc0
 8001142:	2100      	movs	r1, #0
 8001144:	4618      	mov	r0, r3
 8001146:	f009 fdb3 	bl	800acb0 <memset>
  if(i2cHandle->Instance==I2C1)
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	4a2e      	ldr	r2, [pc, #184]	@ (8001208 <HAL_I2C_MspInit+0xe4>)
 8001150:	4293      	cmp	r3, r2
 8001152:	d155      	bne.n	8001200 <HAL_I2C_MspInit+0xdc>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001154:	f04f 0240 	mov.w	r2, #64	@ 0x40
 8001158:	f04f 0300 	mov.w	r3, #0
 800115c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001160:	2300      	movs	r3, #0
 8001162:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001164:	f107 0310 	add.w	r3, r7, #16
 8001168:	4618      	mov	r0, r3
 800116a:	f004 f9b1 	bl	80054d0 <HAL_RCCEx_PeriphCLKConfig>
 800116e:	4603      	mov	r3, r0
 8001170:	2b00      	cmp	r3, #0
 8001172:	d001      	beq.n	8001178 <HAL_I2C_MspInit+0x54>
    {
      Error_Handler();
 8001174:	f000 f93e 	bl	80013f4 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001178:	4b24      	ldr	r3, [pc, #144]	@ (800120c <HAL_I2C_MspInit+0xe8>)
 800117a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800117e:	4a23      	ldr	r2, [pc, #140]	@ (800120c <HAL_I2C_MspInit+0xe8>)
 8001180:	f043 0302 	orr.w	r3, r3, #2
 8001184:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001188:	4b20      	ldr	r3, [pc, #128]	@ (800120c <HAL_I2C_MspInit+0xe8>)
 800118a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800118e:	f003 0302 	and.w	r3, r3, #2
 8001192:	60fb      	str	r3, [r7, #12]
 8001194:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 8001196:	f44f 7310 	mov.w	r3, #576	@ 0x240
 800119a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800119e:	2312      	movs	r3, #18
 80011a0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a4:	2300      	movs	r3, #0
 80011a6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011aa:	2300      	movs	r3, #0
 80011ac:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80011b0:	2304      	movs	r3, #4
 80011b2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011b6:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80011ba:	4619      	mov	r1, r3
 80011bc:	4814      	ldr	r0, [pc, #80]	@ (8001210 <HAL_I2C_MspInit+0xec>)
 80011be:	f001 fbe7 	bl	8002990 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80011c2:	4b12      	ldr	r3, [pc, #72]	@ (800120c <HAL_I2C_MspInit+0xe8>)
 80011c4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80011c8:	4a10      	ldr	r2, [pc, #64]	@ (800120c <HAL_I2C_MspInit+0xe8>)
 80011ca:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80011ce:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 80011d2:	4b0e      	ldr	r3, [pc, #56]	@ (800120c <HAL_I2C_MspInit+0xe8>)
 80011d4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80011d8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80011dc:	60bb      	str	r3, [r7, #8]
 80011de:	68bb      	ldr	r3, [r7, #8]

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80011e0:	2200      	movs	r2, #0
 80011e2:	2100      	movs	r1, #0
 80011e4:	2037      	movs	r0, #55	@ 0x37
 80011e6:	f001 fa85 	bl	80026f4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80011ea:	2037      	movs	r0, #55	@ 0x37
 80011ec:	f001 fa9c 	bl	8002728 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 80011f0:	2200      	movs	r2, #0
 80011f2:	2100      	movs	r1, #0
 80011f4:	2038      	movs	r0, #56	@ 0x38
 80011f6:	f001 fa7d 	bl	80026f4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 80011fa:	2038      	movs	r0, #56	@ 0x38
 80011fc:	f001 fa94 	bl	8002728 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001200:	bf00      	nop
 8001202:	37e8      	adds	r7, #232	@ 0xe8
 8001204:	46bd      	mov	sp, r7
 8001206:	bd80      	pop	{r7, pc}
 8001208:	40005400 	.word	0x40005400
 800120c:	46020c00 	.word	0x46020c00
 8001210:	42020400 	.word	0x42020400

08001214 <MX_ICACHE_Init>:

/* USER CODE END 0 */

/* ICACHE init function */
void MX_ICACHE_Init(void)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache in 1-way (direct mapped cache)
  */
  if (HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY) != HAL_OK)
 8001218:	2000      	movs	r0, #0
 800121a:	f002 fd49 	bl	8003cb0 <HAL_ICACHE_ConfigAssociativityMode>
 800121e:	4603      	mov	r3, r0
 8001220:	2b00      	cmp	r3, #0
 8001222:	d001      	beq.n	8001228 <MX_ICACHE_Init+0x14>
  {
    Error_Handler();
 8001224:	f000 f8e6 	bl	80013f4 <Error_Handler>
  }
  if (HAL_ICACHE_Enable() != HAL_OK)
 8001228:	f002 fd62 	bl	8003cf0 <HAL_ICACHE_Enable>
 800122c:	4603      	mov	r3, r0
 800122e:	2b00      	cmp	r3, #0
 8001230:	d001      	beq.n	8001236 <MX_ICACHE_Init+0x22>
  {
    Error_Handler();
 8001232:	f000 f8df 	bl	80013f4 <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 8001236:	bf00      	nop
 8001238:	bd80      	pop	{r7, pc}
	...

0800123c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b082      	sub	sp, #8
 8001240:	af02      	add	r7, sp, #8

  /* USER CODE BEGIN 1 */
  HAL_TIM_Base_Start(&htim2);
 8001242:	482a      	ldr	r0, [pc, #168]	@ (80012ec <main+0xb0>)
 8001244:	f007 fca8 	bl	8008b98 <HAL_TIM_Base_Start>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001248:	f001 f928 	bl	800249c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the System Power */
  SystemPower_Config();
 800124c:	f000 f8b2 	bl	80013b4 <SystemPower_Config>

  /* Configure the system clock */
  SystemClock_Config();
 8001250:	f000 f856 	bl	8001300 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001254:	f7ff fe6a 	bl	8000f2c <MX_GPIO_Init>
  MX_ICACHE_Init();
 8001258:	f7ff ffdc 	bl	8001214 <MX_ICACHE_Init>
  MX_SPI1_Init();
 800125c:	f000 f8d0 	bl	8001400 <MX_SPI1_Init>
  MX_TIM2_Init();
 8001260:	f000 fe7a 	bl	8001f58 <MX_TIM2_Init>
  MX_I2C1_Init();
 8001264:	f7ff ff1e 	bl	80010a4 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start(&htim2); // Start the timer for microsecond delays
 8001268:	4820      	ldr	r0, [pc, #128]	@ (80012ec <main+0xb0>)
 800126a:	f007 fc95 	bl	8008b98 <HAL_TIM_Base_Start>

  ST7789_Init(&hspi1); // Initialize your LCD display
 800126e:	4820      	ldr	r0, [pc, #128]	@ (80012f0 <main+0xb4>)
 8001270:	f000 fa50 	bl	8001714 <ST7789_Init>
  ST7789_FillScreen(ST7789_BLACK);
 8001274:	2000      	movs	r0, #0
 8001276:	f000 fab7 	bl	80017e8 <ST7789_FillScreen>
  ST7789_WriteString(10, 10, "PB8 Toggle Test", &Font12, ST7789_WHITE, ST7789_BLACK);
 800127a:	2300      	movs	r3, #0
 800127c:	9301      	str	r3, [sp, #4]
 800127e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001282:	9300      	str	r3, [sp, #0]
 8001284:	4b1b      	ldr	r3, [pc, #108]	@ (80012f4 <main+0xb8>)
 8001286:	4a1c      	ldr	r2, [pc, #112]	@ (80012f8 <main+0xbc>)
 8001288:	210a      	movs	r1, #10
 800128a:	200a      	movs	r0, #10
 800128c:	f000 fc1a 	bl	8001ac4 <ST7789_WriteString>
  HAL_Delay(1000);
 8001290:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001294:	f001 f952 	bl	800253c <HAL_Delay>


  /* USER CODE END 2 */

  /* Initialize leds */
  BSP_LED_Init(LED_GREEN);
 8001298:	2000      	movs	r0, #0
 800129a:	f000 fef5 	bl	8002088 <BSP_LED_Init>
  BSP_LED_Init(LED_BLUE);
 800129e:	2001      	movs	r0, #1
 80012a0:	f000 fef2 	bl	8002088 <BSP_LED_Init>
  BSP_LED_Init(LED_RED);
 80012a4:	2002      	movs	r0, #2
 80012a6:	f000 feef 	bl	8002088 <BSP_LED_Init>

  /* Initialize USER push-button, will be used to trigger an interrupt each time it's pressed.*/
  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 80012aa:	2101      	movs	r1, #1
 80012ac:	2000      	movs	r0, #0
 80012ae:	f000 ff7b 	bl	80021a8 <BSP_PB_Init>

  /* Initialize COM1 port (115200, 8 bits (7-bit data + 1 stop bit), no parity */
  BspCOMInit.BaudRate   = 115200;
 80012b2:	4b12      	ldr	r3, [pc, #72]	@ (80012fc <main+0xc0>)
 80012b4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80012b8:	601a      	str	r2, [r3, #0]
  BspCOMInit.WordLength = COM_WORDLENGTH_8B;
 80012ba:	4b10      	ldr	r3, [pc, #64]	@ (80012fc <main+0xc0>)
 80012bc:	2200      	movs	r2, #0
 80012be:	605a      	str	r2, [r3, #4]
  BspCOMInit.StopBits   = COM_STOPBITS_1;
 80012c0:	4b0e      	ldr	r3, [pc, #56]	@ (80012fc <main+0xc0>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	811a      	strh	r2, [r3, #8]
  BspCOMInit.Parity     = COM_PARITY_NONE;
 80012c6:	4b0d      	ldr	r3, [pc, #52]	@ (80012fc <main+0xc0>)
 80012c8:	2200      	movs	r2, #0
 80012ca:	815a      	strh	r2, [r3, #10]
  BspCOMInit.HwFlowCtl  = COM_HWCONTROL_NONE;
 80012cc:	4b0b      	ldr	r3, [pc, #44]	@ (80012fc <main+0xc0>)
 80012ce:	2200      	movs	r2, #0
 80012d0:	819a      	strh	r2, [r3, #12]
  if (BSP_COM_Init(COM1, &BspCOMInit) != BSP_ERROR_NONE)
 80012d2:	490a      	ldr	r1, [pc, #40]	@ (80012fc <main+0xc0>)
 80012d4:	2000      	movs	r0, #0
 80012d6:	f001 f801 	bl	80022dc <BSP_COM_Init>
 80012da:	4603      	mov	r3, r0
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d002      	beq.n	80012e6 <main+0xaa>
  {
    Error_Handler();
 80012e0:	f000 f888 	bl	80013f4 <Error_Handler>
  }

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

    while (1)
 80012e4:	bf00      	nop
 80012e6:	bf00      	nop
 80012e8:	e7fd      	b.n	80012e6 <main+0xaa>
 80012ea:	bf00      	nop
 80012ec:	2000035c 	.word	0x2000035c
 80012f0:	20000278 	.word	0x20000278
 80012f4:	20000000 	.word	0x20000000
 80012f8:	0800cbd8 	.word	0x0800cbd8
 80012fc:	20000268 	.word	0x20000268

08001300 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b09e      	sub	sp, #120	@ 0x78
 8001304:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001306:	f107 0318 	add.w	r3, r7, #24
 800130a:	2260      	movs	r2, #96	@ 0x60
 800130c:	2100      	movs	r1, #0
 800130e:	4618      	mov	r0, r3
 8001310:	f009 fcce 	bl	800acb0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001314:	463b      	mov	r3, r7
 8001316:	2200      	movs	r2, #0
 8001318:	601a      	str	r2, [r3, #0]
 800131a:	605a      	str	r2, [r3, #4]
 800131c:	609a      	str	r2, [r3, #8]
 800131e:	60da      	str	r2, [r3, #12]
 8001320:	611a      	str	r2, [r3, #16]
 8001322:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001324:	f44f 3040 	mov.w	r0, #196608	@ 0x30000
 8001328:	f002 fcf2 	bl	8003d10 <HAL_PWREx_ControlVoltageScaling>
 800132c:	4603      	mov	r3, r0
 800132e:	2b00      	cmp	r3, #0
 8001330:	d001      	beq.n	8001336 <SystemClock_Config+0x36>
  {
    Error_Handler();
 8001332:	f000 f85f 	bl	80013f4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001336:	2302      	movs	r3, #2
 8001338:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800133a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800133e:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001340:	2310      	movs	r3, #16
 8001342:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001344:	2302      	movs	r3, #2
 8001346:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001348:	2302      	movs	r3, #2
 800134a:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLMBOOST = RCC_PLLMBOOST_DIV1;
 800134c:	2300      	movs	r3, #0
 800134e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001350:	2301      	movs	r3, #1
 8001352:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLN = 10;
 8001354:	230a      	movs	r3, #10
 8001356:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLP = 2;
 8001358:	2302      	movs	r3, #2
 800135a:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800135c:	2302      	movs	r3, #2
 800135e:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLR = 1;
 8001360:	2301      	movs	r3, #1
 8001362:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLLVCIRANGE_1;
 8001364:	230c      	movs	r3, #12
 8001366:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001368:	2300      	movs	r3, #0
 800136a:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800136c:	f107 0318 	add.w	r3, r7, #24
 8001370:	4618      	mov	r0, r3
 8001372:	f002 fdc9 	bl	8003f08 <HAL_RCC_OscConfig>
 8001376:	4603      	mov	r3, r0
 8001378:	2b00      	cmp	r3, #0
 800137a:	d001      	beq.n	8001380 <SystemClock_Config+0x80>
  {
    Error_Handler();
 800137c:	f000 f83a 	bl	80013f4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001380:	231f      	movs	r3, #31
 8001382:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001384:	2303      	movs	r3, #3
 8001386:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001388:	2300      	movs	r3, #0
 800138a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800138c:	2300      	movs	r3, #0
 800138e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001390:	2300      	movs	r3, #0
 8001392:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 8001394:	2300      	movs	r3, #0
 8001396:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001398:	463b      	mov	r3, r7
 800139a:	2104      	movs	r1, #4
 800139c:	4618      	mov	r0, r3
 800139e:	f003 fc8f 	bl	8004cc0 <HAL_RCC_ClockConfig>
 80013a2:	4603      	mov	r3, r0
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d001      	beq.n	80013ac <SystemClock_Config+0xac>
  {
    Error_Handler();
 80013a8:	f000 f824 	bl	80013f4 <Error_Handler>
  }
}
 80013ac:	bf00      	nop
 80013ae:	3778      	adds	r7, #120	@ 0x78
 80013b0:	46bd      	mov	sp, r7
 80013b2:	bd80      	pop	{r7, pc}

080013b4 <SystemPower_Config>:
/**
  * @brief Power Configuration
  * @retval None
  */
static void SystemPower_Config(void)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	af00      	add	r7, sp, #0

  /*
   * Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
   */
  HAL_PWREx_DisableUCPDDeadBattery();
 80013b8:	f002 fd96 	bl	8003ee8 <HAL_PWREx_DisableUCPDDeadBattery>

  /*
   * Switch to SMPS regulator instead of LDO
   */
  if (HAL_PWREx_ConfigSupply(PWR_SMPS_SUPPLY) != HAL_OK)
 80013bc:	2002      	movs	r0, #2
 80013be:	f002 fd33 	bl	8003e28 <HAL_PWREx_ConfigSupply>
 80013c2:	4603      	mov	r3, r0
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d001      	beq.n	80013cc <SystemPower_Config+0x18>
  {
    Error_Handler();
 80013c8:	f000 f814 	bl	80013f4 <Error_Handler>
  }
/* USER CODE BEGIN PWR */
/* USER CODE END PWR */
}
 80013cc:	bf00      	nop
 80013ce:	bd80      	pop	{r7, pc}

080013d0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b082      	sub	sp, #8
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM17)
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	4a04      	ldr	r2, [pc, #16]	@ (80013f0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80013de:	4293      	cmp	r3, r2
 80013e0:	d101      	bne.n	80013e6 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 80013e2:	f001 f88b 	bl	80024fc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80013e6:	bf00      	nop
 80013e8:	3708      	adds	r7, #8
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bd80      	pop	{r7, pc}
 80013ee:	bf00      	nop
 80013f0:	40014800 	.word	0x40014800

080013f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013f4:	b480      	push	{r7}
 80013f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013f8:	b672      	cpsid	i
}
 80013fa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80013fc:	bf00      	nop
 80013fe:	e7fd      	b.n	80013fc <Error_Handler+0x8>

08001400 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b084      	sub	sp, #16
 8001404:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 0 */

  /* USER CODE END SPI1_Init 0 */

  SPI_AutonomousModeConfTypeDef HAL_SPI_AutonomousMode_Cfg_Struct = {0};
 8001406:	1d3b      	adds	r3, r7, #4
 8001408:	2200      	movs	r2, #0
 800140a:	601a      	str	r2, [r3, #0]
 800140c:	605a      	str	r2, [r3, #4]
 800140e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001410:	4b31      	ldr	r3, [pc, #196]	@ (80014d8 <MX_SPI1_Init+0xd8>)
 8001412:	4a32      	ldr	r2, [pc, #200]	@ (80014dc <MX_SPI1_Init+0xdc>)
 8001414:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001416:	4b30      	ldr	r3, [pc, #192]	@ (80014d8 <MX_SPI1_Init+0xd8>)
 8001418:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 800141c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800141e:	4b2e      	ldr	r3, [pc, #184]	@ (80014d8 <MX_SPI1_Init+0xd8>)
 8001420:	2200      	movs	r2, #0
 8001422:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001424:	4b2c      	ldr	r3, [pc, #176]	@ (80014d8 <MX_SPI1_Init+0xd8>)
 8001426:	2207      	movs	r2, #7
 8001428:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800142a:	4b2b      	ldr	r3, [pc, #172]	@ (80014d8 <MX_SPI1_Init+0xd8>)
 800142c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001430:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001432:	4b29      	ldr	r3, [pc, #164]	@ (80014d8 <MX_SPI1_Init+0xd8>)
 8001434:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001438:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800143a:	4b27      	ldr	r3, [pc, #156]	@ (80014d8 <MX_SPI1_Init+0xd8>)
 800143c:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001440:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001442:	4b25      	ldr	r3, [pc, #148]	@ (80014d8 <MX_SPI1_Init+0xd8>)
 8001444:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8001448:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800144a:	4b23      	ldr	r3, [pc, #140]	@ (80014d8 <MX_SPI1_Init+0xd8>)
 800144c:	2200      	movs	r2, #0
 800144e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001450:	4b21      	ldr	r3, [pc, #132]	@ (80014d8 <MX_SPI1_Init+0xd8>)
 8001452:	2200      	movs	r2, #0
 8001454:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001456:	4b20      	ldr	r3, [pc, #128]	@ (80014d8 <MX_SPI1_Init+0xd8>)
 8001458:	2200      	movs	r2, #0
 800145a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x7;
 800145c:	4b1e      	ldr	r3, [pc, #120]	@ (80014d8 <MX_SPI1_Init+0xd8>)
 800145e:	2207      	movs	r2, #7
 8001460:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001462:	4b1d      	ldr	r3, [pc, #116]	@ (80014d8 <MX_SPI1_Init+0xd8>)
 8001464:	2200      	movs	r2, #0
 8001466:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001468:	4b1b      	ldr	r3, [pc, #108]	@ (80014d8 <MX_SPI1_Init+0xd8>)
 800146a:	2200      	movs	r2, #0
 800146c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800146e:	4b1a      	ldr	r3, [pc, #104]	@ (80014d8 <MX_SPI1_Init+0xd8>)
 8001470:	2200      	movs	r2, #0
 8001472:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001474:	4b18      	ldr	r3, [pc, #96]	@ (80014d8 <MX_SPI1_Init+0xd8>)
 8001476:	2200      	movs	r2, #0
 8001478:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 800147a:	4b17      	ldr	r3, [pc, #92]	@ (80014d8 <MX_SPI1_Init+0xd8>)
 800147c:	2200      	movs	r2, #0
 800147e:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001480:	4b15      	ldr	r3, [pc, #84]	@ (80014d8 <MX_SPI1_Init+0xd8>)
 8001482:	2200      	movs	r2, #0
 8001484:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001486:	4b14      	ldr	r3, [pc, #80]	@ (80014d8 <MX_SPI1_Init+0xd8>)
 8001488:	2200      	movs	r2, #0
 800148a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800148c:	4b12      	ldr	r3, [pc, #72]	@ (80014d8 <MX_SPI1_Init+0xd8>)
 800148e:	2200      	movs	r2, #0
 8001490:	659a      	str	r2, [r3, #88]	@ 0x58
  hspi1.Init.ReadyMasterManagement = SPI_RDY_MASTER_MANAGEMENT_INTERNALLY;
 8001492:	4b11      	ldr	r3, [pc, #68]	@ (80014d8 <MX_SPI1_Init+0xd8>)
 8001494:	2200      	movs	r2, #0
 8001496:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi1.Init.ReadyPolarity = SPI_RDY_POLARITY_HIGH;
 8001498:	4b0f      	ldr	r3, [pc, #60]	@ (80014d8 <MX_SPI1_Init+0xd8>)
 800149a:	2200      	movs	r2, #0
 800149c:	661a      	str	r2, [r3, #96]	@ 0x60
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800149e:	480e      	ldr	r0, [pc, #56]	@ (80014d8 <MX_SPI1_Init+0xd8>)
 80014a0:	f006 fcae 	bl	8007e00 <HAL_SPI_Init>
 80014a4:	4603      	mov	r3, r0
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d001      	beq.n	80014ae <MX_SPI1_Init+0xae>
  {
    Error_Handler();
 80014aa:	f7ff ffa3 	bl	80013f4 <Error_Handler>
  }
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerState = SPI_AUTO_MODE_DISABLE;
 80014ae:	2300      	movs	r3, #0
 80014b0:	607b      	str	r3, [r7, #4]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerSelection = SPI_GRP1_GPDMA_CH0_TCF_TRG;
 80014b2:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80014b6:	60bb      	str	r3, [r7, #8]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerPolarity = SPI_TRIG_POLARITY_RISING;
 80014b8:	2300      	movs	r3, #0
 80014ba:	60fb      	str	r3, [r7, #12]
  if (HAL_SPIEx_SetConfigAutonomousMode(&hspi1, &HAL_SPI_AutonomousMode_Cfg_Struct) != HAL_OK)
 80014bc:	1d3b      	adds	r3, r7, #4
 80014be:	4619      	mov	r1, r3
 80014c0:	4805      	ldr	r0, [pc, #20]	@ (80014d8 <MX_SPI1_Init+0xd8>)
 80014c2:	f007 fad0 	bl	8008a66 <HAL_SPIEx_SetConfigAutonomousMode>
 80014c6:	4603      	mov	r3, r0
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d001      	beq.n	80014d0 <MX_SPI1_Init+0xd0>
  {
    Error_Handler();
 80014cc:	f7ff ff92 	bl	80013f4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80014d0:	bf00      	nop
 80014d2:	3710      	adds	r7, #16
 80014d4:	46bd      	mov	sp, r7
 80014d6:	bd80      	pop	{r7, pc}
 80014d8:	20000278 	.word	0x20000278
 80014dc:	40013000 	.word	0x40013000

080014e0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b0ba      	sub	sp, #232	@ 0xe8
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014e8:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80014ec:	2200      	movs	r2, #0
 80014ee:	601a      	str	r2, [r3, #0]
 80014f0:	605a      	str	r2, [r3, #4]
 80014f2:	609a      	str	r2, [r3, #8]
 80014f4:	60da      	str	r2, [r3, #12]
 80014f6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80014f8:	f107 0310 	add.w	r3, r7, #16
 80014fc:	22c0      	movs	r2, #192	@ 0xc0
 80014fe:	2100      	movs	r1, #0
 8001500:	4618      	mov	r0, r3
 8001502:	f009 fbd5 	bl	800acb0 <memset>
  if(spiHandle->Instance==SPI1)
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	4a2b      	ldr	r2, [pc, #172]	@ (80015b8 <HAL_SPI_MspInit+0xd8>)
 800150c:	4293      	cmp	r3, r2
 800150e:	d14e      	bne.n	80015ae <HAL_SPI_MspInit+0xce>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8001510:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001514:	f04f 0300 	mov.w	r3, #0
 8001518:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.Spi1ClockSelection = RCC_SPI1CLKSOURCE_SYSCLK;
 800151c:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8001520:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001524:	f107 0310 	add.w	r3, r7, #16
 8001528:	4618      	mov	r0, r3
 800152a:	f003 ffd1 	bl	80054d0 <HAL_RCCEx_PeriphCLKConfig>
 800152e:	4603      	mov	r3, r0
 8001530:	2b00      	cmp	r3, #0
 8001532:	d001      	beq.n	8001538 <HAL_SPI_MspInit+0x58>
    {
      Error_Handler();
 8001534:	f7ff ff5e 	bl	80013f4 <Error_Handler>
    }

    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001538:	4b20      	ldr	r3, [pc, #128]	@ (80015bc <HAL_SPI_MspInit+0xdc>)
 800153a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800153e:	4a1f      	ldr	r2, [pc, #124]	@ (80015bc <HAL_SPI_MspInit+0xdc>)
 8001540:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001544:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8001548:	4b1c      	ldr	r3, [pc, #112]	@ (80015bc <HAL_SPI_MspInit+0xdc>)
 800154a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800154e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001552:	60fb      	str	r3, [r7, #12]
 8001554:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001556:	4b19      	ldr	r3, [pc, #100]	@ (80015bc <HAL_SPI_MspInit+0xdc>)
 8001558:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800155c:	4a17      	ldr	r2, [pc, #92]	@ (80015bc <HAL_SPI_MspInit+0xdc>)
 800155e:	f043 0301 	orr.w	r3, r3, #1
 8001562:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001566:	4b15      	ldr	r3, [pc, #84]	@ (80015bc <HAL_SPI_MspInit+0xdc>)
 8001568:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800156c:	f003 0301 	and.w	r3, r3, #1
 8001570:	60bb      	str	r3, [r7, #8]
 8001572:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001574:	23e0      	movs	r3, #224	@ 0xe0
 8001576:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800157a:	2302      	movs	r3, #2
 800157c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001580:	2300      	movs	r3, #0
 8001582:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001586:	2300      	movs	r3, #0
 8001588:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800158c:	2305      	movs	r3, #5
 800158e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001592:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001596:	4619      	mov	r1, r3
 8001598:	4809      	ldr	r0, [pc, #36]	@ (80015c0 <HAL_SPI_MspInit+0xe0>)
 800159a:	f001 f9f9 	bl	8002990 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 800159e:	2200      	movs	r2, #0
 80015a0:	2100      	movs	r1, #0
 80015a2:	203b      	movs	r0, #59	@ 0x3b
 80015a4:	f001 f8a6 	bl	80026f4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80015a8:	203b      	movs	r0, #59	@ 0x3b
 80015aa:	f001 f8bd 	bl	8002728 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80015ae:	bf00      	nop
 80015b0:	37e8      	adds	r7, #232	@ 0xe8
 80015b2:	46bd      	mov	sp, r7
 80015b4:	bd80      	pop	{r7, pc}
 80015b6:	bf00      	nop
 80015b8:	40013000 	.word	0x40013000
 80015bc:	46020c00 	.word	0x46020c00
 80015c0:	42020000 	.word	0x42020000

080015c4 <ST7789_Select>:

// Global SPI handle pointer
SPI_HandleTypeDef *hspi_st7789;

// Internal functions
static void ST7789_Select() {
 80015c4:	b580      	push	{r7, lr}
 80015c6:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ST7789_CS_GPIO_Port, ST7789_CS_Pin, GPIO_PIN_RESET);
 80015c8:	2200      	movs	r2, #0
 80015ca:	2110      	movs	r1, #16
 80015cc:	4802      	ldr	r0, [pc, #8]	@ (80015d8 <ST7789_Select+0x14>)
 80015ce:	f001 fbbf 	bl	8002d50 <HAL_GPIO_WritePin>
}
 80015d2:	bf00      	nop
 80015d4:	bd80      	pop	{r7, pc}
 80015d6:	bf00      	nop
 80015d8:	42020000 	.word	0x42020000

080015dc <ST7789_Unselect>:

static void ST7789_Unselect() {
 80015dc:	b580      	push	{r7, lr}
 80015de:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ST7789_CS_GPIO_Port, ST7789_CS_Pin, GPIO_PIN_SET);
 80015e0:	2201      	movs	r2, #1
 80015e2:	2110      	movs	r1, #16
 80015e4:	4802      	ldr	r0, [pc, #8]	@ (80015f0 <ST7789_Unselect+0x14>)
 80015e6:	f001 fbb3 	bl	8002d50 <HAL_GPIO_WritePin>
}
 80015ea:	bf00      	nop
 80015ec:	bd80      	pop	{r7, pc}
 80015ee:	bf00      	nop
 80015f0:	42020000 	.word	0x42020000

080015f4 <ST7789_WriteCommand>:

void ST7789_WriteCommand(uint8_t cmd) {
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b082      	sub	sp, #8
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	4603      	mov	r3, r0
 80015fc:	71fb      	strb	r3, [r7, #7]
    ST7789_Select();
 80015fe:	f7ff ffe1 	bl	80015c4 <ST7789_Select>
    HAL_GPIO_WritePin(ST7789_DC_GPIO_Port, ST7789_DC_Pin, GPIO_PIN_RESET); // Command mode
 8001602:	2200      	movs	r2, #0
 8001604:	2101      	movs	r1, #1
 8001606:	4808      	ldr	r0, [pc, #32]	@ (8001628 <ST7789_WriteCommand+0x34>)
 8001608:	f001 fba2 	bl	8002d50 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(hspi_st7789, &cmd, 1, HAL_MAX_DELAY);
 800160c:	4b07      	ldr	r3, [pc, #28]	@ (800162c <ST7789_WriteCommand+0x38>)
 800160e:	6818      	ldr	r0, [r3, #0]
 8001610:	1df9      	adds	r1, r7, #7
 8001612:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001616:	2201      	movs	r2, #1
 8001618:	f006 fd08 	bl	800802c <HAL_SPI_Transmit>
    ST7789_Unselect();
 800161c:	f7ff ffde 	bl	80015dc <ST7789_Unselect>
}
 8001620:	bf00      	nop
 8001622:	3708      	adds	r7, #8
 8001624:	46bd      	mov	sp, r7
 8001626:	bd80      	pop	{r7, pc}
 8001628:	42020400 	.word	0x42020400
 800162c:	20000308 	.word	0x20000308

08001630 <ST7789_WriteData>:

void ST7789_WriteData(uint8_t *buff, size_t buff_size) {
 8001630:	b580      	push	{r7, lr}
 8001632:	b082      	sub	sp, #8
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
 8001638:	6039      	str	r1, [r7, #0]
    ST7789_Select();
 800163a:	f7ff ffc3 	bl	80015c4 <ST7789_Select>
    HAL_GPIO_WritePin(ST7789_DC_GPIO_Port, ST7789_DC_Pin, GPIO_PIN_SET); // Data mode
 800163e:	2201      	movs	r2, #1
 8001640:	2101      	movs	r1, #1
 8001642:	4809      	ldr	r0, [pc, #36]	@ (8001668 <ST7789_WriteData+0x38>)
 8001644:	f001 fb84 	bl	8002d50 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(hspi_st7789, buff, buff_size, HAL_MAX_DELAY);
 8001648:	4b08      	ldr	r3, [pc, #32]	@ (800166c <ST7789_WriteData+0x3c>)
 800164a:	6818      	ldr	r0, [r3, #0]
 800164c:	683b      	ldr	r3, [r7, #0]
 800164e:	b29a      	uxth	r2, r3
 8001650:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001654:	6879      	ldr	r1, [r7, #4]
 8001656:	f006 fce9 	bl	800802c <HAL_SPI_Transmit>
    ST7789_Unselect();
 800165a:	f7ff ffbf 	bl	80015dc <ST7789_Unselect>
}
 800165e:	bf00      	nop
 8001660:	3708      	adds	r7, #8
 8001662:	46bd      	mov	sp, r7
 8001664:	bd80      	pop	{r7, pc}
 8001666:	bf00      	nop
 8001668:	42020400 	.word	0x42020400
 800166c:	20000308 	.word	0x20000308

08001670 <ST7789_SetAddressWindow>:

void ST7789_SetAddressWindow(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1) {
 8001670:	b590      	push	{r4, r7, lr}
 8001672:	b085      	sub	sp, #20
 8001674:	af00      	add	r7, sp, #0
 8001676:	4604      	mov	r4, r0
 8001678:	4608      	mov	r0, r1
 800167a:	4611      	mov	r1, r2
 800167c:	461a      	mov	r2, r3
 800167e:	4623      	mov	r3, r4
 8001680:	80fb      	strh	r3, [r7, #6]
 8001682:	4603      	mov	r3, r0
 8001684:	80bb      	strh	r3, [r7, #4]
 8001686:	460b      	mov	r3, r1
 8001688:	807b      	strh	r3, [r7, #2]
 800168a:	4613      	mov	r3, r2
 800168c:	803b      	strh	r3, [r7, #0]
    // --- KEY MODIFICATION FOR 240x280 DISPLAY ---
    // For 240x280 ST7789V2, typically a Y-offset is needed.
    // The controller is 240x320, but the panel is 240x280.
    // This centers the 280 pixels vertically within the 320-pixel frame.
    uint16_t y_hardware_offset = 20; // 20 pixels for a 240x280 display
 800168e:	2314      	movs	r3, #20
 8001690:	81fb      	strh	r3, [r7, #14]
    // No X-offset for 240-width displays
    // uint16_t x_hardware_offset = 0; // Or remove this line if it was added for 170x320
    // x0 += x_hardware_offset;
    // x1 += x_hardware_offset;

    y0 += y_hardware_offset;
 8001692:	88ba      	ldrh	r2, [r7, #4]
 8001694:	89fb      	ldrh	r3, [r7, #14]
 8001696:	4413      	add	r3, r2
 8001698:	80bb      	strh	r3, [r7, #4]
    y1 += y_hardware_offset;
 800169a:	883a      	ldrh	r2, [r7, #0]
 800169c:	89fb      	ldrh	r3, [r7, #14]
 800169e:	4413      	add	r3, r2
 80016a0:	803b      	strh	r3, [r7, #0]
    // --- END OF KEY MODIFICATION ---

    uint8_t data[4];

    // Column Address Set (CASET)
    ST7789_WriteCommand(ST7789_CASET);
 80016a2:	202a      	movs	r0, #42	@ 0x2a
 80016a4:	f7ff ffa6 	bl	80015f4 <ST7789_WriteCommand>
    data[0] = (x0 >> 8) & 0xFF;
 80016a8:	88fb      	ldrh	r3, [r7, #6]
 80016aa:	0a1b      	lsrs	r3, r3, #8
 80016ac:	b29b      	uxth	r3, r3
 80016ae:	b2db      	uxtb	r3, r3
 80016b0:	723b      	strb	r3, [r7, #8]
    data[1] = x0 & 0xFF;
 80016b2:	88fb      	ldrh	r3, [r7, #6]
 80016b4:	b2db      	uxtb	r3, r3
 80016b6:	727b      	strb	r3, [r7, #9]
    data[2] = (x1 >> 8) & 0xFF;
 80016b8:	887b      	ldrh	r3, [r7, #2]
 80016ba:	0a1b      	lsrs	r3, r3, #8
 80016bc:	b29b      	uxth	r3, r3
 80016be:	b2db      	uxtb	r3, r3
 80016c0:	72bb      	strb	r3, [r7, #10]
    data[3] = x1 & 0xFF;
 80016c2:	887b      	ldrh	r3, [r7, #2]
 80016c4:	b2db      	uxtb	r3, r3
 80016c6:	72fb      	strb	r3, [r7, #11]
    ST7789_WriteData(data, 4);
 80016c8:	f107 0308 	add.w	r3, r7, #8
 80016cc:	2104      	movs	r1, #4
 80016ce:	4618      	mov	r0, r3
 80016d0:	f7ff ffae 	bl	8001630 <ST7789_WriteData>

    // Row Address Set (RASET)
    ST7789_WriteCommand(ST7789_RASET);
 80016d4:	202b      	movs	r0, #43	@ 0x2b
 80016d6:	f7ff ff8d 	bl	80015f4 <ST7789_WriteCommand>
    data[0] = (y0 >> 8) & 0xFF;
 80016da:	88bb      	ldrh	r3, [r7, #4]
 80016dc:	0a1b      	lsrs	r3, r3, #8
 80016de:	b29b      	uxth	r3, r3
 80016e0:	b2db      	uxtb	r3, r3
 80016e2:	723b      	strb	r3, [r7, #8]
    data[1] = y0 & 0xFF;
 80016e4:	88bb      	ldrh	r3, [r7, #4]
 80016e6:	b2db      	uxtb	r3, r3
 80016e8:	727b      	strb	r3, [r7, #9]
    data[2] = (y1 >> 8) & 0xFF;
 80016ea:	883b      	ldrh	r3, [r7, #0]
 80016ec:	0a1b      	lsrs	r3, r3, #8
 80016ee:	b29b      	uxth	r3, r3
 80016f0:	b2db      	uxtb	r3, r3
 80016f2:	72bb      	strb	r3, [r7, #10]
    data[3] = y1 & 0xFF;
 80016f4:	883b      	ldrh	r3, [r7, #0]
 80016f6:	b2db      	uxtb	r3, r3
 80016f8:	72fb      	strb	r3, [r7, #11]
    ST7789_WriteData(data, 4);
 80016fa:	f107 0308 	add.w	r3, r7, #8
 80016fe:	2104      	movs	r1, #4
 8001700:	4618      	mov	r0, r3
 8001702:	f7ff ff95 	bl	8001630 <ST7789_WriteData>

    ST7789_WriteCommand(ST7789_RAMWR); // Memory Write
 8001706:	202c      	movs	r0, #44	@ 0x2c
 8001708:	f7ff ff74 	bl	80015f4 <ST7789_WriteCommand>
}
 800170c:	bf00      	nop
 800170e:	3714      	adds	r7, #20
 8001710:	46bd      	mov	sp, r7
 8001712:	bd90      	pop	{r4, r7, pc}

08001714 <ST7789_Init>:

void ST7789_Init(SPI_HandleTypeDef *hspi) {
 8001714:	b580      	push	{r7, lr}
 8001716:	b084      	sub	sp, #16
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
    hspi_st7789 = hspi;
 800171c:	4a30      	ldr	r2, [pc, #192]	@ (80017e0 <ST7789_Init+0xcc>)
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	6013      	str	r3, [r2, #0]

    // Hardware Reset
    HAL_GPIO_WritePin(ST7789_RST_GPIO_Port, ST7789_RST_Pin, GPIO_PIN_SET);
 8001722:	2201      	movs	r2, #1
 8001724:	2101      	movs	r1, #1
 8001726:	482f      	ldr	r0, [pc, #188]	@ (80017e4 <ST7789_Init+0xd0>)
 8001728:	f001 fb12 	bl	8002d50 <HAL_GPIO_WritePin>
    HAL_Delay(10);
 800172c:	200a      	movs	r0, #10
 800172e:	f000 ff05 	bl	800253c <HAL_Delay>
    HAL_GPIO_WritePin(ST7789_RST_GPIO_Port, ST7789_RST_Pin, GPIO_PIN_RESET);
 8001732:	2200      	movs	r2, #0
 8001734:	2101      	movs	r1, #1
 8001736:	482b      	ldr	r0, [pc, #172]	@ (80017e4 <ST7789_Init+0xd0>)
 8001738:	f001 fb0a 	bl	8002d50 <HAL_GPIO_WritePin>
    HAL_Delay(10);
 800173c:	200a      	movs	r0, #10
 800173e:	f000 fefd 	bl	800253c <HAL_Delay>
    HAL_GPIO_WritePin(ST7789_RST_GPIO_Port, ST7789_RST_Pin, GPIO_PIN_SET);
 8001742:	2201      	movs	r2, #1
 8001744:	2101      	movs	r1, #1
 8001746:	4827      	ldr	r0, [pc, #156]	@ (80017e4 <ST7789_Init+0xd0>)
 8001748:	f001 fb02 	bl	8002d50 <HAL_GPIO_WritePin>
    HAL_Delay(120); // Wait for reset to complete
 800174c:	2078      	movs	r0, #120	@ 0x78
 800174e:	f000 fef5 	bl	800253c <HAL_Delay>

    // Backlight ON
    ST7789_SetBacklight(1);
 8001752:	2001      	movs	r0, #1
 8001754:	f000 f9f6 	bl	8001b44 <ST7789_SetBacklight>
    HAL_Delay(10);
 8001758:	200a      	movs	r0, #10
 800175a:	f000 feef 	bl	800253c <HAL_Delay>

    // Initial sequence for ST7789V2 (common for 1.69inch)
    ST7789_WriteCommand(ST7789_SWRESET); // Software reset
 800175e:	2001      	movs	r0, #1
 8001760:	f7ff ff48 	bl	80015f4 <ST7789_WriteCommand>
    HAL_Delay(150);
 8001764:	2096      	movs	r0, #150	@ 0x96
 8001766:	f000 fee9 	bl	800253c <HAL_Delay>

    ST7789_WriteCommand(ST7789_SLPOUT);  // Exit sleep
 800176a:	2011      	movs	r0, #17
 800176c:	f7ff ff42 	bl	80015f4 <ST7789_WriteCommand>
    HAL_Delay(10);
 8001770:	200a      	movs	r0, #10
 8001772:	f000 fee3 	bl	800253c <HAL_Delay>

    ST7789_WriteCommand(ST7789_COLMOD);  // Set color mode
 8001776:	203a      	movs	r0, #58	@ 0x3a
 8001778:	f7ff ff3c 	bl	80015f4 <ST7789_WriteCommand>
    uint8_t data_colmod[] = {0x05};      // 16-bit color (RGB565)
 800177c:	2305      	movs	r3, #5
 800177e:	733b      	strb	r3, [r7, #12]
    ST7789_WriteData(data_colmod, 1);
 8001780:	f107 030c 	add.w	r3, r7, #12
 8001784:	2101      	movs	r1, #1
 8001786:	4618      	mov	r0, r3
 8001788:	f7ff ff52 	bl	8001630 <ST7789_WriteData>
    HAL_Delay(10);
 800178c:	200a      	movs	r0, #10
 800178e:	f000 fed5 	bl	800253c <HAL_Delay>

    ST7789_WriteCommand(ST7789_MADCTL);  // Memory Data Access Control
 8001792:	2036      	movs	r0, #54	@ 0x36
 8001794:	f7ff ff2e 	bl	80015f4 <ST7789_WriteCommand>
    uint8_t data_madctl[] = {0x00};      // Default: MX=0, MY=0, MV=0, ML=0, RGB=0 (Portrait, top-to-bottom, left-to-right)
 8001798:	2300      	movs	r3, #0
 800179a:	723b      	strb	r3, [r7, #8]
    // 0x60: MV + MX (90deg landscape)
    // 0xA0: MY + MV (270deg landscape)
    // 0xC0: MY + MX + MV + ML (Portrait, 180deg)
    // For 1.69" often 0x00 or 0x60 (landscape)
    // Let's use 0x00 for initial portrait and add rotation function.
    ST7789_WriteData(data_madctl, 1);
 800179c:	f107 0308 	add.w	r3, r7, #8
 80017a0:	2101      	movs	r1, #1
 80017a2:	4618      	mov	r0, r3
 80017a4:	f7ff ff44 	bl	8001630 <ST7789_WriteData>
    HAL_Delay(10);
 80017a8:	200a      	movs	r0, #10
 80017aa:	f000 fec7 	bl	800253c <HAL_Delay>
    //
    // ST7789_WriteCommand(0xB7); // Gate Control
    // uint8_t data_gate[] = {0x35};
    // ST7789_WriteData(data_gate, 1);

    ST7789_WriteCommand(ST7789_INVON);   // Inversion ON
 80017ae:	2021      	movs	r0, #33	@ 0x21
 80017b0:	f7ff ff20 	bl	80015f4 <ST7789_WriteCommand>
    HAL_Delay(10);
 80017b4:	200a      	movs	r0, #10
 80017b6:	f000 fec1 	bl	800253c <HAL_Delay>

    ST7789_WriteCommand(ST7789_NORON);   // Normal display mode
 80017ba:	2013      	movs	r0, #19
 80017bc:	f7ff ff1a 	bl	80015f4 <ST7789_WriteCommand>
    HAL_Delay(10);
 80017c0:	200a      	movs	r0, #10
 80017c2:	f000 febb 	bl	800253c <HAL_Delay>

    ST7789_WriteCommand(ST7789_DISPON);  // Display ON
 80017c6:	2029      	movs	r0, #41	@ 0x29
 80017c8:	f7ff ff14 	bl	80015f4 <ST7789_WriteCommand>
    HAL_Delay(120);
 80017cc:	2078      	movs	r0, #120	@ 0x78
 80017ce:	f000 feb5 	bl	800253c <HAL_Delay>

    // Initial fill to black
    ST7789_FillScreen(ST7789_BLACK);
 80017d2:	2000      	movs	r0, #0
 80017d4:	f000 f808 	bl	80017e8 <ST7789_FillScreen>
}
 80017d8:	bf00      	nop
 80017da:	3710      	adds	r7, #16
 80017dc:	46bd      	mov	sp, r7
 80017de:	bd80      	pop	{r7, pc}
 80017e0:	20000308 	.word	0x20000308
 80017e4:	42020800 	.word	0x42020800

080017e8 <ST7789_FillScreen>:

void ST7789_FillScreen(uint16_t color) {
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b084      	sub	sp, #16
 80017ec:	af02      	add	r7, sp, #8
 80017ee:	4603      	mov	r3, r0
 80017f0:	80fb      	strh	r3, [r7, #6]
    ST7789_FillRectangle(0, 0, ST7789_WIDTH, ST7789_HEIGHT, color);
 80017f2:	88fb      	ldrh	r3, [r7, #6]
 80017f4:	9300      	str	r3, [sp, #0]
 80017f6:	f44f 738c 	mov.w	r3, #280	@ 0x118
 80017fa:	22f0      	movs	r2, #240	@ 0xf0
 80017fc:	2100      	movs	r1, #0
 80017fe:	2000      	movs	r0, #0
 8001800:	f000 f83c 	bl	800187c <ST7789_FillRectangle>
}
 8001804:	bf00      	nop
 8001806:	3708      	adds	r7, #8
 8001808:	46bd      	mov	sp, r7
 800180a:	bd80      	pop	{r7, pc}

0800180c <ST7789_DrawPixel>:

void ST7789_DrawPixel(int16_t x, int16_t y, uint16_t color) {
 800180c:	b580      	push	{r7, lr}
 800180e:	b084      	sub	sp, #16
 8001810:	af00      	add	r7, sp, #0
 8001812:	4603      	mov	r3, r0
 8001814:	80fb      	strh	r3, [r7, #6]
 8001816:	460b      	mov	r3, r1
 8001818:	80bb      	strh	r3, [r7, #4]
 800181a:	4613      	mov	r3, r2
 800181c:	807b      	strh	r3, [r7, #2]
    if ((x < 0) || (x >= ST7789_WIDTH) || (y < 0) || (y >= ST7789_HEIGHT)) return;
 800181e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001822:	2b00      	cmp	r3, #0
 8001824:	db25      	blt.n	8001872 <ST7789_DrawPixel+0x66>
 8001826:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800182a:	2bef      	cmp	r3, #239	@ 0xef
 800182c:	dc21      	bgt.n	8001872 <ST7789_DrawPixel+0x66>
 800182e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001832:	2b00      	cmp	r3, #0
 8001834:	db1d      	blt.n	8001872 <ST7789_DrawPixel+0x66>
 8001836:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800183a:	f5b3 7f8c 	cmp.w	r3, #280	@ 0x118
 800183e:	da18      	bge.n	8001872 <ST7789_DrawPixel+0x66>
    ST7789_SetAddressWindow(x, y, x + 1, y + 1);
 8001840:	88f8      	ldrh	r0, [r7, #6]
 8001842:	88b9      	ldrh	r1, [r7, #4]
 8001844:	88fb      	ldrh	r3, [r7, #6]
 8001846:	3301      	adds	r3, #1
 8001848:	b29a      	uxth	r2, r3
 800184a:	88bb      	ldrh	r3, [r7, #4]
 800184c:	3301      	adds	r3, #1
 800184e:	b29b      	uxth	r3, r3
 8001850:	f7ff ff0e 	bl	8001670 <ST7789_SetAddressWindow>
    uint8_t data[2];
    data[0] = (uint8_t)(color >> 8);
 8001854:	887b      	ldrh	r3, [r7, #2]
 8001856:	0a1b      	lsrs	r3, r3, #8
 8001858:	b29b      	uxth	r3, r3
 800185a:	b2db      	uxtb	r3, r3
 800185c:	733b      	strb	r3, [r7, #12]
    data[1] = (uint8_t)(color & 0xFF);
 800185e:	887b      	ldrh	r3, [r7, #2]
 8001860:	b2db      	uxtb	r3, r3
 8001862:	737b      	strb	r3, [r7, #13]
    ST7789_WriteData(data, 2);
 8001864:	f107 030c 	add.w	r3, r7, #12
 8001868:	2102      	movs	r1, #2
 800186a:	4618      	mov	r0, r3
 800186c:	f7ff fee0 	bl	8001630 <ST7789_WriteData>
 8001870:	e000      	b.n	8001874 <ST7789_DrawPixel+0x68>
    if ((x < 0) || (x >= ST7789_WIDTH) || (y < 0) || (y >= ST7789_HEIGHT)) return;
 8001872:	bf00      	nop
}
 8001874:	3710      	adds	r7, #16
 8001876:	46bd      	mov	sp, r7
 8001878:	bd80      	pop	{r7, pc}
	...

0800187c <ST7789_FillRectangle>:

void ST7789_FillRectangle(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color) {
 800187c:	b590      	push	{r4, r7, lr}
 800187e:	b085      	sub	sp, #20
 8001880:	af00      	add	r7, sp, #0
 8001882:	4604      	mov	r4, r0
 8001884:	4608      	mov	r0, r1
 8001886:	4611      	mov	r1, r2
 8001888:	461a      	mov	r2, r3
 800188a:	4623      	mov	r3, r4
 800188c:	80fb      	strh	r3, [r7, #6]
 800188e:	4603      	mov	r3, r0
 8001890:	80bb      	strh	r3, [r7, #4]
 8001892:	460b      	mov	r3, r1
 8001894:	807b      	strh	r3, [r7, #2]
 8001896:	4613      	mov	r3, r2
 8001898:	803b      	strh	r3, [r7, #0]
    if ((x >= ST7789_WIDTH) || (y >= ST7789_HEIGHT)) return;
 800189a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800189e:	2bef      	cmp	r3, #239	@ 0xef
 80018a0:	dc5a      	bgt.n	8001958 <ST7789_FillRectangle+0xdc>
 80018a2:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80018a6:	f5b3 7f8c 	cmp.w	r3, #280	@ 0x118
 80018aa:	da55      	bge.n	8001958 <ST7789_FillRectangle+0xdc>
    if ((x + w - 1) >= ST7789_WIDTH) w = ST7789_WIDTH - x;
 80018ac:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80018b0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80018b4:	4413      	add	r3, r2
 80018b6:	2bf0      	cmp	r3, #240	@ 0xf0
 80018b8:	dd04      	ble.n	80018c4 <ST7789_FillRectangle+0x48>
 80018ba:	88fb      	ldrh	r3, [r7, #6]
 80018bc:	f1c3 03f0 	rsb	r3, r3, #240	@ 0xf0
 80018c0:	b29b      	uxth	r3, r3
 80018c2:	807b      	strh	r3, [r7, #2]
    if ((y + h - 1) >= ST7789_HEIGHT) h = ST7789_HEIGHT - y;
 80018c4:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80018c8:	f9b7 3000 	ldrsh.w	r3, [r7]
 80018cc:	4413      	add	r3, r2
 80018ce:	f5b3 7f8c 	cmp.w	r3, #280	@ 0x118
 80018d2:	dd04      	ble.n	80018de <ST7789_FillRectangle+0x62>
 80018d4:	88bb      	ldrh	r3, [r7, #4]
 80018d6:	f5c3 738c 	rsb	r3, r3, #280	@ 0x118
 80018da:	b29b      	uxth	r3, r3
 80018dc:	803b      	strh	r3, [r7, #0]

    ST7789_SetAddressWindow(x, y, x + w - 1, y + h - 1);
 80018de:	88f8      	ldrh	r0, [r7, #6]
 80018e0:	88b9      	ldrh	r1, [r7, #4]
 80018e2:	88fa      	ldrh	r2, [r7, #6]
 80018e4:	887b      	ldrh	r3, [r7, #2]
 80018e6:	4413      	add	r3, r2
 80018e8:	b29b      	uxth	r3, r3
 80018ea:	3b01      	subs	r3, #1
 80018ec:	b29c      	uxth	r4, r3
 80018ee:	88ba      	ldrh	r2, [r7, #4]
 80018f0:	883b      	ldrh	r3, [r7, #0]
 80018f2:	4413      	add	r3, r2
 80018f4:	b29b      	uxth	r3, r3
 80018f6:	3b01      	subs	r3, #1
 80018f8:	b29b      	uxth	r3, r3
 80018fa:	4622      	mov	r2, r4
 80018fc:	f7ff feb8 	bl	8001670 <ST7789_SetAddressWindow>

    uint8_t data[2];
    data[0] = (uint8_t)(color >> 8);
 8001900:	8c3b      	ldrh	r3, [r7, #32]
 8001902:	0a1b      	lsrs	r3, r3, #8
 8001904:	b29b      	uxth	r3, r3
 8001906:	b2db      	uxtb	r3, r3
 8001908:	723b      	strb	r3, [r7, #8]
    data[1] = (uint8_t)(color & 0xFF);
 800190a:	8c3b      	ldrh	r3, [r7, #32]
 800190c:	b2db      	uxtb	r3, r3
 800190e:	727b      	strb	r3, [r7, #9]

    uint32_t i = 0;
 8001910:	2300      	movs	r3, #0
 8001912:	60fb      	str	r3, [r7, #12]
    ST7789_Select();
 8001914:	f7ff fe56 	bl	80015c4 <ST7789_Select>
    HAL_GPIO_WritePin(ST7789_DC_GPIO_Port, ST7789_DC_Pin, GPIO_PIN_SET); // Data mode
 8001918:	2201      	movs	r2, #1
 800191a:	2101      	movs	r1, #1
 800191c:	4810      	ldr	r0, [pc, #64]	@ (8001960 <ST7789_FillRectangle+0xe4>)
 800191e:	f001 fa17 	bl	8002d50 <HAL_GPIO_WritePin>

    // Transmit in chunks if the buffer is large, or just directly
    for (i = 0; i < (uint32_t)w * h; i++) {
 8001922:	2300      	movs	r3, #0
 8001924:	60fb      	str	r3, [r7, #12]
 8001926:	e00b      	b.n	8001940 <ST7789_FillRectangle+0xc4>
        HAL_SPI_Transmit(hspi_st7789, data, 2, HAL_MAX_DELAY);
 8001928:	4b0e      	ldr	r3, [pc, #56]	@ (8001964 <ST7789_FillRectangle+0xe8>)
 800192a:	6818      	ldr	r0, [r3, #0]
 800192c:	f107 0108 	add.w	r1, r7, #8
 8001930:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001934:	2202      	movs	r2, #2
 8001936:	f006 fb79 	bl	800802c <HAL_SPI_Transmit>
    for (i = 0; i < (uint32_t)w * h; i++) {
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	3301      	adds	r3, #1
 800193e:	60fb      	str	r3, [r7, #12]
 8001940:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001944:	f9b7 2000 	ldrsh.w	r2, [r7]
 8001948:	fb02 f303 	mul.w	r3, r2, r3
 800194c:	68fa      	ldr	r2, [r7, #12]
 800194e:	429a      	cmp	r2, r3
 8001950:	d3ea      	bcc.n	8001928 <ST7789_FillRectangle+0xac>
    }
    ST7789_Unselect();
 8001952:	f7ff fe43 	bl	80015dc <ST7789_Unselect>
 8001956:	e000      	b.n	800195a <ST7789_FillRectangle+0xde>
    if ((x >= ST7789_WIDTH) || (y >= ST7789_HEIGHT)) return;
 8001958:	bf00      	nop
}
 800195a:	3714      	adds	r7, #20
 800195c:	46bd      	mov	sp, r7
 800195e:	bd90      	pop	{r4, r7, pc}
 8001960:	42020400 	.word	0x42020400
 8001964:	20000308 	.word	0x20000308

08001968 <ST7789_DrawChar>:
        if (e2 < dy) { err += dx; y0 += sy; }
    }
}

// Corrected ST7789_DrawChar in st7789.c
void ST7789_DrawChar(int16_t x, int16_t y, char ch, const sFONT *font, uint16_t color, uint16_t background_color) {
 8001968:	b590      	push	{r4, r7, lr}
 800196a:	b08f      	sub	sp, #60	@ 0x3c
 800196c:	af02      	add	r7, sp, #8
 800196e:	607b      	str	r3, [r7, #4]
 8001970:	4603      	mov	r3, r0
 8001972:	81fb      	strh	r3, [r7, #14]
 8001974:	460b      	mov	r3, r1
 8001976:	81bb      	strh	r3, [r7, #12]
 8001978:	4613      	mov	r3, r2
 800197a:	72fb      	strb	r3, [r7, #11]

    // Calculate bytes per character
    uint16_t bytes_per_row = (font->Width + 7) / 8;
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	889b      	ldrh	r3, [r3, #4]
 8001980:	3307      	adds	r3, #7
 8001982:	2b00      	cmp	r3, #0
 8001984:	da00      	bge.n	8001988 <ST7789_DrawChar+0x20>
 8001986:	3307      	adds	r3, #7
 8001988:	10db      	asrs	r3, r3, #3
 800198a:	847b      	strh	r3, [r7, #34]	@ 0x22
    uint16_t bytes_per_char = bytes_per_row * font->Height;
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	88db      	ldrh	r3, [r3, #6]
 8001990:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8001992:	fb12 f303 	smulbb	r3, r2, r3
 8001996:	843b      	strh	r3, [r7, #32]

    // Check if ch is within the font's supported range
    if (ch < FONT_START_ASCII || ch > FONT_END_ASCII) {
 8001998:	7afb      	ldrb	r3, [r7, #11]
 800199a:	2b1f      	cmp	r3, #31
 800199c:	d902      	bls.n	80019a4 <ST7789_DrawChar+0x3c>
 800199e:	7afb      	ldrb	r3, [r7, #11]
 80019a0:	2b7e      	cmp	r3, #126	@ 0x7e
 80019a2:	d910      	bls.n	80019c6 <ST7789_DrawChar+0x5e>
        // You can choose to draw a blank space for unsupported characters
        // Or draw a specific placeholder character like '?'
        // For now, let's just draw a blank rectangle (using background_color)
        ST7789_FillRectangle(x, y, font->Width, font->Height, background_color);
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	889b      	ldrh	r3, [r3, #4]
 80019a8:	b21a      	sxth	r2, r3
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	88db      	ldrh	r3, [r3, #6]
 80019ae:	b21c      	sxth	r4, r3
 80019b0:	f9b7 100c 	ldrsh.w	r1, [r7, #12]
 80019b4:	f9b7 000e 	ldrsh.w	r0, [r7, #14]
 80019b8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 80019bc:	9300      	str	r3, [sp, #0]
 80019be:	4623      	mov	r3, r4
 80019c0:	f7ff ff5c 	bl	800187c <ST7789_FillRectangle>
        return;
 80019c4:	e07b      	b.n	8001abe <ST7789_DrawChar+0x156>
    }

    uint16_t char_index = ch - FONT_START_ASCII;
 80019c6:	7afb      	ldrb	r3, [r7, #11]
 80019c8:	b29b      	uxth	r3, r3
 80019ca:	3b20      	subs	r3, #32
 80019cc:	83fb      	strh	r3, [r7, #30]

    // Get a pointer to the start of the character's data
    const uint8_t *char_data = font->table + (char_index * bytes_per_char);
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	8bfa      	ldrh	r2, [r7, #30]
 80019d4:	8c39      	ldrh	r1, [r7, #32]
 80019d6:	fb01 f202 	mul.w	r2, r1, r2
 80019da:	4413      	add	r3, r2
 80019dc:	61bb      	str	r3, [r7, #24]

    // Draw the character
    for (int y_px = 0; y_px < font->Height; y_px++) {
 80019de:	2300      	movs	r3, #0
 80019e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80019e2:	e066      	b.n	8001ab2 <ST7789_DrawChar+0x14a>
		for (int x_byte = 0; x_byte < bytes_per_row; x_byte++) {
 80019e4:	2300      	movs	r3, #0
 80019e6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80019e8:	e05c      	b.n	8001aa4 <ST7789_DrawChar+0x13c>
			// Get the byte of data for the current row and 8-pixel segment
			uint8_t byte_data = char_data[y_px * bytes_per_row + x_byte];
 80019ea:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80019ec:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80019ee:	fb03 f202 	mul.w	r2, r3, r2
 80019f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80019f4:	4413      	add	r3, r2
 80019f6:	461a      	mov	r2, r3
 80019f8:	69bb      	ldr	r3, [r7, #24]
 80019fa:	4413      	add	r3, r2
 80019fc:	781b      	ldrb	r3, [r3, #0]
 80019fe:	75fb      	strb	r3, [r7, #23]

			// Iterate through the 8 bits of the current byte
			for (int x_bit = 0; x_bit < 8; x_bit++) {
 8001a00:	2300      	movs	r3, #0
 8001a02:	627b      	str	r3, [r7, #36]	@ 0x24
 8001a04:	e048      	b.n	8001a98 <ST7789_DrawChar+0x130>
				// Calculate the absolute X coordinate on the display for the current pixel
				// x: starting X for the character
				// (x_byte * 8): offset for the current 8-bit segment
				// x_bit: offset for the current pixel within the 8-bit segment (0 for leftmost, 7 for rightmost)
				int16_t current_x = x + (x_byte * 8) + x_bit;
 8001a06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001a08:	b29b      	uxth	r3, r3
 8001a0a:	00db      	lsls	r3, r3, #3
 8001a0c:	b29a      	uxth	r2, r3
 8001a0e:	89fb      	ldrh	r3, [r7, #14]
 8001a10:	4413      	add	r3, r2
 8001a12:	b29a      	uxth	r2, r3
 8001a14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a16:	b29b      	uxth	r3, r3
 8001a18:	4413      	add	r3, r2
 8001a1a:	b29b      	uxth	r3, r3
 8001a1c:	82bb      	strh	r3, [r7, #20]

				// Calculate the relative X coordinate within the character's full bitmap
				// This is used for boundary checking against font->Width
				int16_t char_pixel_offset_x = (x_byte * 8) + x_bit;
 8001a1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001a20:	b29b      	uxth	r3, r3
 8001a22:	00db      	lsls	r3, r3, #3
 8001a24:	b29a      	uxth	r2, r3
 8001a26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a28:	b29b      	uxth	r3, r3
 8001a2a:	4413      	add	r3, r2
 8001a2c:	b29b      	uxth	r3, r3
 8001a2e:	827b      	strh	r3, [r7, #18]

				// Only draw if this pixel is within the defined width of the character
				if (char_pixel_offset_x < font->Width) {
 8001a30:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001a34:	687a      	ldr	r2, [r7, #4]
 8001a36:	8892      	ldrh	r2, [r2, #4]
 8001a38:	4293      	cmp	r3, r2
 8001a3a:	da2a      	bge.n	8001a92 <ST7789_DrawChar+0x12a>
					// Example:
					// x_bit=0 (leftmost pixel) -> (byte_data >> 7) & 0x01 (reads MSB)
					// x_bit=1                  -> (byte_data >> 6) & 0x01
					// ...
					// x_bit=7 (rightmost pixel) -> (byte_data >> 0) & 0x01 (reads LSB)
					if ((byte_data >> (7 - x_bit)) & 0x01) { // This is the common MSB-first extraction
 8001a3c:	7dfa      	ldrb	r2, [r7, #23]
 8001a3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a40:	f1c3 0307 	rsb	r3, r3, #7
 8001a44:	fa42 f303 	asr.w	r3, r2, r3
 8001a48:	f003 0301 	and.w	r3, r3, #1
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d00d      	beq.n	8001a6c <ST7789_DrawChar+0x104>
						ST7789_DrawPixel(current_x, y + y_px, color);
 8001a50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001a52:	b29a      	uxth	r2, r3
 8001a54:	89bb      	ldrh	r3, [r7, #12]
 8001a56:	4413      	add	r3, r2
 8001a58:	b29b      	uxth	r3, r3
 8001a5a:	b219      	sxth	r1, r3
 8001a5c:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 8001a60:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001a64:	4618      	mov	r0, r3
 8001a66:	f7ff fed1 	bl	800180c <ST7789_DrawPixel>
 8001a6a:	e012      	b.n	8001a92 <ST7789_DrawChar+0x12a>
					} else {
						if (background_color != color) {
 8001a6c:	f8b7 2044 	ldrh.w	r2, [r7, #68]	@ 0x44
 8001a70:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8001a74:	429a      	cmp	r2, r3
 8001a76:	d00c      	beq.n	8001a92 <ST7789_DrawChar+0x12a>
							ST7789_DrawPixel(current_x, y + y_px, background_color);
 8001a78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001a7a:	b29a      	uxth	r2, r3
 8001a7c:	89bb      	ldrh	r3, [r7, #12]
 8001a7e:	4413      	add	r3, r2
 8001a80:	b29b      	uxth	r3, r3
 8001a82:	b219      	sxth	r1, r3
 8001a84:	f8b7 2044 	ldrh.w	r2, [r7, #68]	@ 0x44
 8001a88:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	f7ff febd 	bl	800180c <ST7789_DrawPixel>
			for (int x_bit = 0; x_bit < 8; x_bit++) {
 8001a92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a94:	3301      	adds	r3, #1
 8001a96:	627b      	str	r3, [r7, #36]	@ 0x24
 8001a98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a9a:	2b07      	cmp	r3, #7
 8001a9c:	ddb3      	ble.n	8001a06 <ST7789_DrawChar+0x9e>
		for (int x_byte = 0; x_byte < bytes_per_row; x_byte++) {
 8001a9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001aa0:	3301      	adds	r3, #1
 8001aa2:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001aa4:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8001aa6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001aa8:	429a      	cmp	r2, r3
 8001aaa:	db9e      	blt.n	80019ea <ST7789_DrawChar+0x82>
    for (int y_px = 0; y_px < font->Height; y_px++) {
 8001aac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001aae:	3301      	adds	r3, #1
 8001ab0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	88db      	ldrh	r3, [r3, #6]
 8001ab6:	461a      	mov	r2, r3
 8001ab8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001aba:	4293      	cmp	r3, r2
 8001abc:	db92      	blt.n	80019e4 <ST7789_DrawChar+0x7c>
					}
				}
			}
		}
	}
}
 8001abe:	3734      	adds	r7, #52	@ 0x34
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	bd90      	pop	{r4, r7, pc}

08001ac4 <ST7789_WriteString>:
        // Move to the next character in the string
        str++;
    }
}

void ST7789_WriteString(int16_t x, int16_t y, const char* str, const sFONT *font, uint16_t color, uint16_t bgcolor) {
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b086      	sub	sp, #24
 8001ac8:	af02      	add	r7, sp, #8
 8001aca:	60ba      	str	r2, [r7, #8]
 8001acc:	607b      	str	r3, [r7, #4]
 8001ace:	4603      	mov	r3, r0
 8001ad0:	81fb      	strh	r3, [r7, #14]
 8001ad2:	460b      	mov	r3, r1
 8001ad4:	81bb      	strh	r3, [r7, #12]
    while (*str) {
 8001ad6:	e02b      	b.n	8001b30 <ST7789_WriteString+0x6c>
        if (x + font->Width >= ST7789_WIDTH) { // Wrap text if it exceeds screen width
 8001ad8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001adc:	687a      	ldr	r2, [r7, #4]
 8001ade:	8892      	ldrh	r2, [r2, #4]
 8001ae0:	4413      	add	r3, r2
 8001ae2:	2bef      	cmp	r3, #239	@ 0xef
 8001ae4:	dd0f      	ble.n	8001b06 <ST7789_WriteString+0x42>
            x = 0;
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	81fb      	strh	r3, [r7, #14]
            y += font->Height;
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	88da      	ldrh	r2, [r3, #6]
 8001aee:	89bb      	ldrh	r3, [r7, #12]
 8001af0:	4413      	add	r3, r2
 8001af2:	b29b      	uxth	r3, r3
 8001af4:	81bb      	strh	r3, [r7, #12]
            if (y + font->Height >= ST7789_HEIGHT) break; // Don't draw if going off screen
 8001af6:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001afa:	687a      	ldr	r2, [r7, #4]
 8001afc:	88d2      	ldrh	r2, [r2, #6]
 8001afe:	4413      	add	r3, r2
 8001b00:	f5b3 7f8c 	cmp.w	r3, #280	@ 0x118
 8001b04:	da19      	bge.n	8001b3a <ST7789_WriteString+0x76>
        }
        ST7789_DrawChar(x, y, *str++, font, color, bgcolor);
 8001b06:	68bb      	ldr	r3, [r7, #8]
 8001b08:	1c5a      	adds	r2, r3, #1
 8001b0a:	60ba      	str	r2, [r7, #8]
 8001b0c:	781a      	ldrb	r2, [r3, #0]
 8001b0e:	f9b7 100c 	ldrsh.w	r1, [r7, #12]
 8001b12:	f9b7 000e 	ldrsh.w	r0, [r7, #14]
 8001b16:	8bbb      	ldrh	r3, [r7, #28]
 8001b18:	9301      	str	r3, [sp, #4]
 8001b1a:	8b3b      	ldrh	r3, [r7, #24]
 8001b1c:	9300      	str	r3, [sp, #0]
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	f7ff ff22 	bl	8001968 <ST7789_DrawChar>
        x += font->Width;
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	889a      	ldrh	r2, [r3, #4]
 8001b28:	89fb      	ldrh	r3, [r7, #14]
 8001b2a:	4413      	add	r3, r2
 8001b2c:	b29b      	uxth	r3, r3
 8001b2e:	81fb      	strh	r3, [r7, #14]
    while (*str) {
 8001b30:	68bb      	ldr	r3, [r7, #8]
 8001b32:	781b      	ldrb	r3, [r3, #0]
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d1cf      	bne.n	8001ad8 <ST7789_WriteString+0x14>
    }
}
 8001b38:	e000      	b.n	8001b3c <ST7789_WriteString+0x78>
            if (y + font->Height >= ST7789_HEIGHT) break; // Don't draw if going off screen
 8001b3a:	bf00      	nop
}
 8001b3c:	bf00      	nop
 8001b3e:	3710      	adds	r7, #16
 8001b40:	46bd      	mov	sp, r7
 8001b42:	bd80      	pop	{r7, pc}

08001b44 <ST7789_SetBacklight>:

void ST7789_DisplayOff(void) {
    ST7789_WriteCommand(ST7789_DISPOFF);
}

void ST7789_SetBacklight(uint8_t state) {
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b082      	sub	sp, #8
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	71fb      	strb	r3, [r7, #7]
    if (state) {
 8001b4e:	79fb      	ldrb	r3, [r7, #7]
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d005      	beq.n	8001b60 <ST7789_SetBacklight+0x1c>
        HAL_GPIO_WritePin(ST7789_BL_GPIO_Port, ST7789_BL_Pin, GPIO_PIN_SET);
 8001b54:	2201      	movs	r2, #1
 8001b56:	2102      	movs	r1, #2
 8001b58:	4806      	ldr	r0, [pc, #24]	@ (8001b74 <ST7789_SetBacklight+0x30>)
 8001b5a:	f001 f8f9 	bl	8002d50 <HAL_GPIO_WritePin>
    } else {
        HAL_GPIO_WritePin(ST7789_BL_GPIO_Port, ST7789_BL_Pin, GPIO_PIN_RESET);
    }
}
 8001b5e:	e004      	b.n	8001b6a <ST7789_SetBacklight+0x26>
        HAL_GPIO_WritePin(ST7789_BL_GPIO_Port, ST7789_BL_Pin, GPIO_PIN_RESET);
 8001b60:	2200      	movs	r2, #0
 8001b62:	2102      	movs	r1, #2
 8001b64:	4803      	ldr	r0, [pc, #12]	@ (8001b74 <ST7789_SetBacklight+0x30>)
 8001b66:	f001 f8f3 	bl	8002d50 <HAL_GPIO_WritePin>
}
 8001b6a:	bf00      	nop
 8001b6c:	3708      	adds	r7, #8
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	bd80      	pop	{r7, pc}
 8001b72:	bf00      	nop
 8001b74:	42020400 	.word	0x42020400

08001b78 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b082      	sub	sp, #8
 8001b7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001b7e:	4b0b      	ldr	r3, [pc, #44]	@ (8001bac <HAL_MspInit+0x34>)
 8001b80:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001b84:	4a09      	ldr	r2, [pc, #36]	@ (8001bac <HAL_MspInit+0x34>)
 8001b86:	f043 0304 	orr.w	r3, r3, #4
 8001b8a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8001b8e:	4b07      	ldr	r3, [pc, #28]	@ (8001bac <HAL_MspInit+0x34>)
 8001b90:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001b94:	f003 0304 	and.w	r3, r3, #4
 8001b98:	607b      	str	r3, [r7, #4]
 8001b9a:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 8001b9c:	2004      	movs	r0, #4
 8001b9e:	f000 fd9e 	bl	80026de <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ba2:	bf00      	nop
 8001ba4:	3708      	adds	r7, #8
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bd80      	pop	{r7, pc}
 8001baa:	bf00      	nop
 8001bac:	46020c00 	.word	0x46020c00

08001bb0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b08e      	sub	sp, #56	@ 0x38
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001bb8:	2300      	movs	r3, #0
 8001bba:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t              uwPrescalerValue = 0;
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM17 clock */
  __HAL_RCC_TIM17_CLK_ENABLE();
 8001bc0:	4b2e      	ldr	r3, [pc, #184]	@ (8001c7c <HAL_InitTick+0xcc>)
 8001bc2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8001bc6:	4a2d      	ldr	r2, [pc, #180]	@ (8001c7c <HAL_InitTick+0xcc>)
 8001bc8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001bcc:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8001bd0:	4b2a      	ldr	r3, [pc, #168]	@ (8001c7c <HAL_InitTick+0xcc>)
 8001bd2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8001bd6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001bda:	60fb      	str	r3, [r7, #12]
 8001bdc:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001bde:	f107 0210 	add.w	r2, r7, #16
 8001be2:	f107 0314 	add.w	r3, r7, #20
 8001be6:	4611      	mov	r1, r2
 8001be8:	4618      	mov	r0, r3
 8001bea:	f003 fbb3 	bl	8005354 <HAL_RCC_GetClockConfig>

  /* Compute TIM17 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001bee:	f003 fb89 	bl	8005304 <HAL_RCC_GetPCLK2Freq>
 8001bf2:	6338      	str	r0, [r7, #48]	@ 0x30

  /* Compute the prescaler value to have TIM17 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001bf4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001bf6:	4a22      	ldr	r2, [pc, #136]	@ (8001c80 <HAL_InitTick+0xd0>)
 8001bf8:	fba2 2303 	umull	r2, r3, r2, r3
 8001bfc:	0c9b      	lsrs	r3, r3, #18
 8001bfe:	3b01      	subs	r3, #1
 8001c00:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Initialize TIM17 */
  htim17.Instance = TIM17;
 8001c02:	4b20      	ldr	r3, [pc, #128]	@ (8001c84 <HAL_InitTick+0xd4>)
 8001c04:	4a20      	ldr	r2, [pc, #128]	@ (8001c88 <HAL_InitTick+0xd8>)
 8001c06:	601a      	str	r2, [r3, #0]
   * Period = [(TIM17CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim17.Init.Period = (1000000U / 1000U) - 1U;
 8001c08:	4b1e      	ldr	r3, [pc, #120]	@ (8001c84 <HAL_InitTick+0xd4>)
 8001c0a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001c0e:	60da      	str	r2, [r3, #12]
  htim17.Init.Prescaler = uwPrescalerValue;
 8001c10:	4a1c      	ldr	r2, [pc, #112]	@ (8001c84 <HAL_InitTick+0xd4>)
 8001c12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001c14:	6053      	str	r3, [r2, #4]
  htim17.Init.ClockDivision = 0;
 8001c16:	4b1b      	ldr	r3, [pc, #108]	@ (8001c84 <HAL_InitTick+0xd4>)
 8001c18:	2200      	movs	r2, #0
 8001c1a:	611a      	str	r2, [r3, #16]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c1c:	4b19      	ldr	r3, [pc, #100]	@ (8001c84 <HAL_InitTick+0xd4>)
 8001c1e:	2200      	movs	r2, #0
 8001c20:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim17);
 8001c22:	4818      	ldr	r0, [pc, #96]	@ (8001c84 <HAL_InitTick+0xd4>)
 8001c24:	f006 ff60 	bl	8008ae8 <HAL_TIM_Base_Init>
 8001c28:	4603      	mov	r3, r0
 8001c2a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  if (status == HAL_OK)
 8001c2e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d118      	bne.n	8001c68 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim17);
 8001c36:	4813      	ldr	r0, [pc, #76]	@ (8001c84 <HAL_InitTick+0xd4>)
 8001c38:	f007 f846 	bl	8008cc8 <HAL_TIM_Base_Start_IT>
 8001c3c:	4603      	mov	r3, r0
 8001c3e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    if (status == HAL_OK)
 8001c42:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d10e      	bne.n	8001c68 <HAL_InitTick+0xb8>
    {
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	2b0f      	cmp	r3, #15
 8001c4e:	d808      	bhi.n	8001c62 <HAL_InitTick+0xb2>
      {
        /* Enable the TIM17 global Interrupt */
        HAL_NVIC_SetPriority(TIM17_IRQn, TickPriority, 0U);
 8001c50:	2200      	movs	r2, #0
 8001c52:	6879      	ldr	r1, [r7, #4]
 8001c54:	2047      	movs	r0, #71	@ 0x47
 8001c56:	f000 fd4d 	bl	80026f4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001c5a:	4a0c      	ldr	r2, [pc, #48]	@ (8001c8c <HAL_InitTick+0xdc>)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	6013      	str	r3, [r2, #0]
 8001c60:	e002      	b.n	8001c68 <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 8001c62:	2301      	movs	r3, #1
 8001c64:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
      }
    }
  }

  /* Enable the TIM17 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM17_IRQn);
 8001c68:	2047      	movs	r0, #71	@ 0x47
 8001c6a:	f000 fd5d 	bl	8002728 <HAL_NVIC_EnableIRQ>

 /* Return function status */
  return status;
 8001c6e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
}
 8001c72:	4618      	mov	r0, r3
 8001c74:	3738      	adds	r7, #56	@ 0x38
 8001c76:	46bd      	mov	sp, r7
 8001c78:	bd80      	pop	{r7, pc}
 8001c7a:	bf00      	nop
 8001c7c:	46020c00 	.word	0x46020c00
 8001c80:	431bde83 	.word	0x431bde83
 8001c84:	2000030c 	.word	0x2000030c
 8001c88:	40014800 	.word	0x40014800
 8001c8c:	20000028 	.word	0x20000028

08001c90 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c90:	b480      	push	{r7}
 8001c92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001c94:	bf00      	nop
 8001c96:	e7fd      	b.n	8001c94 <NMI_Handler+0x4>

08001c98 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c98:	b480      	push	{r7}
 8001c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c9c:	bf00      	nop
 8001c9e:	e7fd      	b.n	8001c9c <HardFault_Handler+0x4>

08001ca0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ca4:	bf00      	nop
 8001ca6:	e7fd      	b.n	8001ca4 <MemManage_Handler+0x4>

08001ca8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ca8:	b480      	push	{r7}
 8001caa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001cac:	bf00      	nop
 8001cae:	e7fd      	b.n	8001cac <BusFault_Handler+0x4>

08001cb0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001cb4:	bf00      	nop
 8001cb6:	e7fd      	b.n	8001cb4 <UsageFault_Handler+0x4>

08001cb8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001cb8:	b480      	push	{r7}
 8001cba:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001cbc:	bf00      	nop
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc4:	4770      	bx	lr

08001cc6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001cc6:	b480      	push	{r7}
 8001cc8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001cca:	bf00      	nop
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd2:	4770      	bx	lr

08001cd4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001cd8:	bf00      	nop
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce0:	4770      	bx	lr

08001ce2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ce2:	b480      	push	{r7}
 8001ce4:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ce6:	bf00      	nop
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cee:	4770      	bx	lr

08001cf0 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI Line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INT_Pin);
 8001cf4:	2002      	movs	r0, #2
 8001cf6:	f001 f843 	bl	8002d80 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8001cfa:	bf00      	nop
 8001cfc:	bd80      	pop	{r7, pc}

08001cfe <EXTI13_IRQHandler>:

/**
  * @brief This function handles EXTI Line13 interrupt.
  */
void EXTI13_IRQHandler(void)
{
 8001cfe:	b580      	push	{r7, lr}
 8001d00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI13_IRQn 0 */

  /* USER CODE END EXTI13_IRQn 0 */
  BSP_PB_IRQHandler(BUTTON_USER);
 8001d02:	2000      	movs	r0, #0
 8001d04:	f000 fac8 	bl	8002298 <BSP_PB_IRQHandler>
  /* USER CODE BEGIN EXTI13_IRQn 1 */

  /* USER CODE END EXTI13_IRQn 1 */
}
 8001d08:	bf00      	nop
 8001d0a:	bd80      	pop	{r7, pc}

08001d0c <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 Event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001d10:	4802      	ldr	r0, [pc, #8]	@ (8001d1c <I2C1_EV_IRQHandler+0x10>)
 8001d12:	f001 f90c 	bl	8002f2e <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001d16:	bf00      	nop
 8001d18:	bd80      	pop	{r7, pc}
 8001d1a:	bf00      	nop
 8001d1c:	20000214 	.word	0x20000214

08001d20 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 Error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8001d24:	4802      	ldr	r0, [pc, #8]	@ (8001d30 <I2C1_ER_IRQHandler+0x10>)
 8001d26:	f001 f91c 	bl	8002f62 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8001d2a:	bf00      	nop
 8001d2c:	bd80      	pop	{r7, pc}
 8001d2e:	bf00      	nop
 8001d30:	20000214 	.word	0x20000214

08001d34 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8001d38:	4802      	ldr	r0, [pc, #8]	@ (8001d44 <SPI1_IRQHandler+0x10>)
 8001d3a:	f006 fb8b 	bl	8008454 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8001d3e:	bf00      	nop
 8001d40:	bd80      	pop	{r7, pc}
 8001d42:	bf00      	nop
 8001d44:	20000278 	.word	0x20000278

08001d48 <TIM17_IRQHandler>:

/**
  * @brief This function handles TIM17 global interrupt.
  */
void TIM17_IRQHandler(void)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM17_IRQn 0 */

  /* USER CODE END TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8001d4c:	4802      	ldr	r0, [pc, #8]	@ (8001d58 <TIM17_IRQHandler+0x10>)
 8001d4e:	f007 f85b 	bl	8008e08 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM17_IRQn 1 */

  /* USER CODE END TIM17_IRQn 1 */
}
 8001d52:	bf00      	nop
 8001d54:	bd80      	pop	{r7, pc}
 8001d56:	bf00      	nop
 8001d58:	2000030c 	.word	0x2000030c

08001d5c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001d5c:	b480      	push	{r7}
 8001d5e:	af00      	add	r7, sp, #0
  return 1;
 8001d60:	2301      	movs	r3, #1
}
 8001d62:	4618      	mov	r0, r3
 8001d64:	46bd      	mov	sp, r7
 8001d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6a:	4770      	bx	lr

08001d6c <_kill>:

int _kill(int pid, int sig)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b082      	sub	sp, #8
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
 8001d74:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001d76:	f008 ffa3 	bl	800acc0 <__errno>
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	2216      	movs	r2, #22
 8001d7e:	601a      	str	r2, [r3, #0]
  return -1;
 8001d80:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001d84:	4618      	mov	r0, r3
 8001d86:	3708      	adds	r7, #8
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	bd80      	pop	{r7, pc}

08001d8c <_exit>:

void _exit (int status)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b082      	sub	sp, #8
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001d94:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001d98:	6878      	ldr	r0, [r7, #4]
 8001d9a:	f7ff ffe7 	bl	8001d6c <_kill>
  while (1) {}    /* Make sure we hang here */
 8001d9e:	bf00      	nop
 8001da0:	e7fd      	b.n	8001d9e <_exit+0x12>

08001da2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001da2:	b580      	push	{r7, lr}
 8001da4:	b086      	sub	sp, #24
 8001da6:	af00      	add	r7, sp, #0
 8001da8:	60f8      	str	r0, [r7, #12]
 8001daa:	60b9      	str	r1, [r7, #8]
 8001dac:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001dae:	2300      	movs	r3, #0
 8001db0:	617b      	str	r3, [r7, #20]
 8001db2:	e00a      	b.n	8001dca <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001db4:	f3af 8000 	nop.w
 8001db8:	4601      	mov	r1, r0
 8001dba:	68bb      	ldr	r3, [r7, #8]
 8001dbc:	1c5a      	adds	r2, r3, #1
 8001dbe:	60ba      	str	r2, [r7, #8]
 8001dc0:	b2ca      	uxtb	r2, r1
 8001dc2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001dc4:	697b      	ldr	r3, [r7, #20]
 8001dc6:	3301      	adds	r3, #1
 8001dc8:	617b      	str	r3, [r7, #20]
 8001dca:	697a      	ldr	r2, [r7, #20]
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	429a      	cmp	r2, r3
 8001dd0:	dbf0      	blt.n	8001db4 <_read+0x12>
  }

  return len;
 8001dd2:	687b      	ldr	r3, [r7, #4]
}
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	3718      	adds	r7, #24
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	bd80      	pop	{r7, pc}

08001ddc <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b086      	sub	sp, #24
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	60f8      	str	r0, [r7, #12]
 8001de4:	60b9      	str	r1, [r7, #8]
 8001de6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001de8:	2300      	movs	r3, #0
 8001dea:	617b      	str	r3, [r7, #20]
 8001dec:	e009      	b.n	8001e02 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001dee:	68bb      	ldr	r3, [r7, #8]
 8001df0:	1c5a      	adds	r2, r3, #1
 8001df2:	60ba      	str	r2, [r7, #8]
 8001df4:	781b      	ldrb	r3, [r3, #0]
 8001df6:	4618      	mov	r0, r3
 8001df8:	f000 fad4 	bl	80023a4 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001dfc:	697b      	ldr	r3, [r7, #20]
 8001dfe:	3301      	adds	r3, #1
 8001e00:	617b      	str	r3, [r7, #20]
 8001e02:	697a      	ldr	r2, [r7, #20]
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	429a      	cmp	r2, r3
 8001e08:	dbf1      	blt.n	8001dee <_write+0x12>
  }
  return len;
 8001e0a:	687b      	ldr	r3, [r7, #4]
}
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	3718      	adds	r7, #24
 8001e10:	46bd      	mov	sp, r7
 8001e12:	bd80      	pop	{r7, pc}

08001e14 <_close>:

int _close(int file)
{
 8001e14:	b480      	push	{r7}
 8001e16:	b083      	sub	sp, #12
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001e1c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001e20:	4618      	mov	r0, r3
 8001e22:	370c      	adds	r7, #12
 8001e24:	46bd      	mov	sp, r7
 8001e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2a:	4770      	bx	lr

08001e2c <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	b083      	sub	sp, #12
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
 8001e34:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001e36:	683b      	ldr	r3, [r7, #0]
 8001e38:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001e3c:	605a      	str	r2, [r3, #4]
  return 0;
 8001e3e:	2300      	movs	r3, #0
}
 8001e40:	4618      	mov	r0, r3
 8001e42:	370c      	adds	r7, #12
 8001e44:	46bd      	mov	sp, r7
 8001e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4a:	4770      	bx	lr

08001e4c <_isatty>:

int _isatty(int file)
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	b083      	sub	sp, #12
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001e54:	2301      	movs	r3, #1
}
 8001e56:	4618      	mov	r0, r3
 8001e58:	370c      	adds	r7, #12
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e60:	4770      	bx	lr

08001e62 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001e62:	b480      	push	{r7}
 8001e64:	b085      	sub	sp, #20
 8001e66:	af00      	add	r7, sp, #0
 8001e68:	60f8      	str	r0, [r7, #12]
 8001e6a:	60b9      	str	r1, [r7, #8]
 8001e6c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001e6e:	2300      	movs	r3, #0
}
 8001e70:	4618      	mov	r0, r3
 8001e72:	3714      	adds	r7, #20
 8001e74:	46bd      	mov	sp, r7
 8001e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7a:	4770      	bx	lr

08001e7c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b086      	sub	sp, #24
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001e84:	4a14      	ldr	r2, [pc, #80]	@ (8001ed8 <_sbrk+0x5c>)
 8001e86:	4b15      	ldr	r3, [pc, #84]	@ (8001edc <_sbrk+0x60>)
 8001e88:	1ad3      	subs	r3, r2, r3
 8001e8a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001e8c:	697b      	ldr	r3, [r7, #20]
 8001e8e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001e90:	4b13      	ldr	r3, [pc, #76]	@ (8001ee0 <_sbrk+0x64>)
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d102      	bne.n	8001e9e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001e98:	4b11      	ldr	r3, [pc, #68]	@ (8001ee0 <_sbrk+0x64>)
 8001e9a:	4a12      	ldr	r2, [pc, #72]	@ (8001ee4 <_sbrk+0x68>)
 8001e9c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001e9e:	4b10      	ldr	r3, [pc, #64]	@ (8001ee0 <_sbrk+0x64>)
 8001ea0:	681a      	ldr	r2, [r3, #0]
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	4413      	add	r3, r2
 8001ea6:	693a      	ldr	r2, [r7, #16]
 8001ea8:	429a      	cmp	r2, r3
 8001eaa:	d207      	bcs.n	8001ebc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001eac:	f008 ff08 	bl	800acc0 <__errno>
 8001eb0:	4603      	mov	r3, r0
 8001eb2:	220c      	movs	r2, #12
 8001eb4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001eb6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001eba:	e009      	b.n	8001ed0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ebc:	4b08      	ldr	r3, [pc, #32]	@ (8001ee0 <_sbrk+0x64>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001ec2:	4b07      	ldr	r3, [pc, #28]	@ (8001ee0 <_sbrk+0x64>)
 8001ec4:	681a      	ldr	r2, [r3, #0]
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	4413      	add	r3, r2
 8001eca:	4a05      	ldr	r2, [pc, #20]	@ (8001ee0 <_sbrk+0x64>)
 8001ecc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001ece:	68fb      	ldr	r3, [r7, #12]
}
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	3718      	adds	r7, #24
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	bd80      	pop	{r7, pc}
 8001ed8:	200c0000 	.word	0x200c0000
 8001edc:	00000400 	.word	0x00000400
 8001ee0:	20000358 	.word	0x20000358
 8001ee4:	200005a0 	.word	0x200005a0

08001ee8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001ee8:	b480      	push	{r7}
 8001eea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001eec:	4b18      	ldr	r3, [pc, #96]	@ (8001f50 <SystemInit+0x68>)
 8001eee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001ef2:	4a17      	ldr	r2, [pc, #92]	@ (8001f50 <SystemInit+0x68>)
 8001ef4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001ef8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR = RCC_CR_MSISON;
 8001efc:	4b15      	ldr	r3, [pc, #84]	@ (8001f54 <SystemInit+0x6c>)
 8001efe:	2201      	movs	r2, #1
 8001f00:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 8001f02:	4b14      	ldr	r3, [pc, #80]	@ (8001f54 <SystemInit+0x6c>)
 8001f04:	2200      	movs	r2, #0
 8001f06:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 8001f08:	4b12      	ldr	r3, [pc, #72]	@ (8001f54 <SystemInit+0x6c>)
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	621a      	str	r2, [r3, #32]
  RCC->CFGR3 = 0U;
 8001f0e:	4b11      	ldr	r3, [pc, #68]	@ (8001f54 <SystemInit+0x6c>)
 8001f10:	2200      	movs	r2, #0
 8001f12:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Reset HSEON, CSSON , HSION, PLLxON bits */
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
 8001f14:	4b0f      	ldr	r3, [pc, #60]	@ (8001f54 <SystemInit+0x6c>)
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	4a0e      	ldr	r2, [pc, #56]	@ (8001f54 <SystemInit+0x6c>)
 8001f1a:	f023 53a8 	bic.w	r3, r3, #352321536	@ 0x15000000
 8001f1e:	f423 2310 	bic.w	r3, r3, #589824	@ 0x90000
 8001f22:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLL1CFGR = 0U;
 8001f24:	4b0b      	ldr	r3, [pc, #44]	@ (8001f54 <SystemInit+0x6c>)
 8001f26:	2200      	movs	r2, #0
 8001f28:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 8001f2a:	4b0a      	ldr	r3, [pc, #40]	@ (8001f54 <SystemInit+0x6c>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	4a09      	ldr	r2, [pc, #36]	@ (8001f54 <SystemInit+0x6c>)
 8001f30:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001f34:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 8001f36:	4b07      	ldr	r3, [pc, #28]	@ (8001f54 <SystemInit+0x6c>)
 8001f38:	2200      	movs	r2, #0
 8001f3a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001f3c:	4b04      	ldr	r3, [pc, #16]	@ (8001f50 <SystemInit+0x68>)
 8001f3e:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001f42:	609a      	str	r2, [r3, #8]
  #endif
}
 8001f44:	bf00      	nop
 8001f46:	46bd      	mov	sp, r7
 8001f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4c:	4770      	bx	lr
 8001f4e:	bf00      	nop
 8001f50:	e000ed00 	.word	0xe000ed00
 8001f54:	46020c00 	.word	0x46020c00

08001f58 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b088      	sub	sp, #32
 8001f5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001f5e:	f107 0310 	add.w	r3, r7, #16
 8001f62:	2200      	movs	r2, #0
 8001f64:	601a      	str	r2, [r3, #0]
 8001f66:	605a      	str	r2, [r3, #4]
 8001f68:	609a      	str	r2, [r3, #8]
 8001f6a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f6c:	1d3b      	adds	r3, r7, #4
 8001f6e:	2200      	movs	r2, #0
 8001f70:	601a      	str	r2, [r3, #0]
 8001f72:	605a      	str	r2, [r3, #4]
 8001f74:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001f76:	4b1e      	ldr	r3, [pc, #120]	@ (8001ff0 <MX_TIM2_Init+0x98>)
 8001f78:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001f7c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 159;
 8001f7e:	4b1c      	ldr	r3, [pc, #112]	@ (8001ff0 <MX_TIM2_Init+0x98>)
 8001f80:	229f      	movs	r2, #159	@ 0x9f
 8001f82:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f84:	4b1a      	ldr	r3, [pc, #104]	@ (8001ff0 <MX_TIM2_Init+0x98>)
 8001f86:	2200      	movs	r2, #0
 8001f88:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001f8a:	4b19      	ldr	r3, [pc, #100]	@ (8001ff0 <MX_TIM2_Init+0x98>)
 8001f8c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001f90:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f92:	4b17      	ldr	r3, [pc, #92]	@ (8001ff0 <MX_TIM2_Init+0x98>)
 8001f94:	2200      	movs	r2, #0
 8001f96:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f98:	4b15      	ldr	r3, [pc, #84]	@ (8001ff0 <MX_TIM2_Init+0x98>)
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001f9e:	4814      	ldr	r0, [pc, #80]	@ (8001ff0 <MX_TIM2_Init+0x98>)
 8001fa0:	f006 fda2 	bl	8008ae8 <HAL_TIM_Base_Init>
 8001fa4:	4603      	mov	r3, r0
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d001      	beq.n	8001fae <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001faa:	f7ff fa23 	bl	80013f4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001fae:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001fb2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001fb4:	f107 0310 	add.w	r3, r7, #16
 8001fb8:	4619      	mov	r1, r3
 8001fba:	480d      	ldr	r0, [pc, #52]	@ (8001ff0 <MX_TIM2_Init+0x98>)
 8001fbc:	f007 f874 	bl	80090a8 <HAL_TIM_ConfigClockSource>
 8001fc0:	4603      	mov	r3, r0
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d001      	beq.n	8001fca <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001fc6:	f7ff fa15 	bl	80013f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001fca:	2300      	movs	r3, #0
 8001fcc:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001fce:	2300      	movs	r3, #0
 8001fd0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001fd2:	1d3b      	adds	r3, r7, #4
 8001fd4:	4619      	mov	r1, r3
 8001fd6:	4806      	ldr	r0, [pc, #24]	@ (8001ff0 <MX_TIM2_Init+0x98>)
 8001fd8:	f007 fb8e 	bl	80096f8 <HAL_TIMEx_MasterConfigSynchronization>
 8001fdc:	4603      	mov	r3, r0
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d001      	beq.n	8001fe6 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001fe2:	f7ff fa07 	bl	80013f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001fe6:	bf00      	nop
 8001fe8:	3720      	adds	r7, #32
 8001fea:	46bd      	mov	sp, r7
 8001fec:	bd80      	pop	{r7, pc}
 8001fee:	bf00      	nop
 8001ff0:	2000035c 	.word	0x2000035c

08001ff4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001ff4:	b480      	push	{r7}
 8001ff6:	b085      	sub	sp, #20
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002004:	d10e      	bne.n	8002024 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002006:	4b0a      	ldr	r3, [pc, #40]	@ (8002030 <HAL_TIM_Base_MspInit+0x3c>)
 8002008:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800200c:	4a08      	ldr	r2, [pc, #32]	@ (8002030 <HAL_TIM_Base_MspInit+0x3c>)
 800200e:	f043 0301 	orr.w	r3, r3, #1
 8002012:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8002016:	4b06      	ldr	r3, [pc, #24]	@ (8002030 <HAL_TIM_Base_MspInit+0x3c>)
 8002018:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800201c:	f003 0301 	and.w	r3, r3, #1
 8002020:	60fb      	str	r3, [r7, #12]
 8002022:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8002024:	bf00      	nop
 8002026:	3714      	adds	r7, #20
 8002028:	46bd      	mov	sp, r7
 800202a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202e:	4770      	bx	lr
 8002030:	46020c00 	.word	0x46020c00

08002034 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8002034:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800206c <LoopForever+0x2>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8002038:	f7ff ff56 	bl	8001ee8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 800203c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800203e:	e003      	b.n	8002048 <LoopCopyDataInit>

08002040 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8002040:	4b0b      	ldr	r3, [pc, #44]	@ (8002070 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8002042:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8002044:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8002046:	3104      	adds	r1, #4

08002048 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8002048:	480a      	ldr	r0, [pc, #40]	@ (8002074 <LoopForever+0xa>)
	ldr	r3, =_edata
 800204a:	4b0b      	ldr	r3, [pc, #44]	@ (8002078 <LoopForever+0xe>)
	adds	r2, r0, r1
 800204c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800204e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8002050:	d3f6      	bcc.n	8002040 <CopyDataInit>
	ldr	r2, =_sbss
 8002052:	4a0a      	ldr	r2, [pc, #40]	@ (800207c <LoopForever+0x12>)
	b	LoopFillZerobss
 8002054:	e002      	b.n	800205c <LoopFillZerobss>

08002056 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8002056:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8002058:	f842 3b04 	str.w	r3, [r2], #4

0800205c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 800205c:	4b08      	ldr	r3, [pc, #32]	@ (8002080 <LoopForever+0x16>)
	cmp	r2, r3
 800205e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8002060:	d3f9      	bcc.n	8002056 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002062:	f008 fe33 	bl	800accc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002066:	f7ff f8e9 	bl	800123c <main>

0800206a <LoopForever>:

LoopForever:
    b LoopForever
 800206a:	e7fe      	b.n	800206a <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 800206c:	200c0000 	.word	0x200c0000
	ldr	r3, =_sidata
 8002070:	0800d4dc 	.word	0x0800d4dc
	ldr	r0, =_sdata
 8002074:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8002078:	200001f8 	.word	0x200001f8
	ldr	r2, =_sbss
 800207c:	200001f8 	.word	0x200001f8
	ldr	r3, = _ebss
 8002080:	2000059c 	.word	0x2000059c

08002084 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002084:	e7fe      	b.n	8002084 <ADC1_IRQHandler>
	...

08002088 <BSP_LED_Init>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b08e      	sub	sp, #56	@ 0x38
 800208c:	af00      	add	r7, sp, #0
 800208e:	4603      	mov	r3, r0
 8002090:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8002092:	2300      	movs	r3, #0
 8002094:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitTypeDef  gpio_init_structure;
#if defined (USE_NUCLEO_144)
  uint32_t pwrenabled = 0U;
 8002096:	2300      	movs	r3, #0
 8002098:	633b      	str	r3, [r7, #48]	@ 0x30
#endif /* USE_NUCLEO_144 */

  if ((Led != LED2)
 800209a:	79fb      	ldrb	r3, [r7, #7]
 800209c:	2b01      	cmp	r3, #1
 800209e:	d009      	beq.n	80020b4 <BSP_LED_Init+0x2c>
#if defined (USE_NUCLEO_144)
      && (Led != LED1) && (Led != LED3)
 80020a0:	79fb      	ldrb	r3, [r7, #7]
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d006      	beq.n	80020b4 <BSP_LED_Init+0x2c>
 80020a6:	79fb      	ldrb	r3, [r7, #7]
 80020a8:	2b02      	cmp	r3, #2
 80020aa:	d003      	beq.n	80020b4 <BSP_LED_Init+0x2c>
#endif /* defined (USE_NUCLEO_144) */
     )
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80020ac:	f06f 0301 	mvn.w	r3, #1
 80020b0:	637b      	str	r3, [r7, #52]	@ 0x34
 80020b2:	e06e      	b.n	8002192 <BSP_LED_Init+0x10a>
  }
  else
  {
    /* Enable the GPIO LED Clock */
    if (Led == LED2)
 80020b4:	79fb      	ldrb	r3, [r7, #7]
 80020b6:	2b01      	cmp	r3, #1
 80020b8:	d10f      	bne.n	80020da <BSP_LED_Init+0x52>
    {
      LED2_GPIO_CLK_ENABLE();
 80020ba:	4b38      	ldr	r3, [pc, #224]	@ (800219c <BSP_LED_Init+0x114>)
 80020bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80020c0:	4a36      	ldr	r2, [pc, #216]	@ (800219c <BSP_LED_Init+0x114>)
 80020c2:	f043 0302 	orr.w	r3, r3, #2
 80020c6:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80020ca:	4b34      	ldr	r3, [pc, #208]	@ (800219c <BSP_LED_Init+0x114>)
 80020cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80020d0:	f003 0302 	and.w	r3, r3, #2
 80020d4:	61bb      	str	r3, [r7, #24]
 80020d6:	69bb      	ldr	r3, [r7, #24]
 80020d8:	e046      	b.n	8002168 <BSP_LED_Init+0xe0>
    }
#if defined (USE_NUCLEO_144)
    else if (Led == LED1)
 80020da:	79fb      	ldrb	r3, [r7, #7]
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d10f      	bne.n	8002100 <BSP_LED_Init+0x78>
    {
      LED1_GPIO_CLK_ENABLE();
 80020e0:	4b2e      	ldr	r3, [pc, #184]	@ (800219c <BSP_LED_Init+0x114>)
 80020e2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80020e6:	4a2d      	ldr	r2, [pc, #180]	@ (800219c <BSP_LED_Init+0x114>)
 80020e8:	f043 0304 	orr.w	r3, r3, #4
 80020ec:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80020f0:	4b2a      	ldr	r3, [pc, #168]	@ (800219c <BSP_LED_Init+0x114>)
 80020f2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80020f6:	f003 0304 	and.w	r3, r3, #4
 80020fa:	617b      	str	r3, [r7, #20]
 80020fc:	697b      	ldr	r3, [r7, #20]
 80020fe:	e033      	b.n	8002168 <BSP_LED_Init+0xe0>
    }
    else /* Led == Led3 */
    {
      /* Enable VddIO2 for Led3 */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002100:	4b26      	ldr	r3, [pc, #152]	@ (800219c <BSP_LED_Init+0x114>)
 8002102:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002106:	f003 0304 	and.w	r3, r3, #4
 800210a:	2b00      	cmp	r3, #0
 800210c:	d110      	bne.n	8002130 <BSP_LED_Init+0xa8>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 800210e:	4b23      	ldr	r3, [pc, #140]	@ (800219c <BSP_LED_Init+0x114>)
 8002110:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002114:	4a21      	ldr	r2, [pc, #132]	@ (800219c <BSP_LED_Init+0x114>)
 8002116:	f043 0304 	orr.w	r3, r3, #4
 800211a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800211e:	4b1f      	ldr	r3, [pc, #124]	@ (800219c <BSP_LED_Init+0x114>)
 8002120:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002124:	f003 0304 	and.w	r3, r3, #4
 8002128:	613b      	str	r3, [r7, #16]
 800212a:	693b      	ldr	r3, [r7, #16]
        pwrenabled = 1U;
 800212c:	2301      	movs	r3, #1
 800212e:	633b      	str	r3, [r7, #48]	@ 0x30
      }

      HAL_PWREx_EnableVddIO2();
 8002130:	f001 feca 	bl	8003ec8 <HAL_PWREx_EnableVddIO2>

      if (pwrenabled == 1U)
 8002134:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002136:	2b01      	cmp	r3, #1
 8002138:	d107      	bne.n	800214a <BSP_LED_Init+0xc2>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 800213a:	4b18      	ldr	r3, [pc, #96]	@ (800219c <BSP_LED_Init+0x114>)
 800213c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002140:	4a16      	ldr	r2, [pc, #88]	@ (800219c <BSP_LED_Init+0x114>)
 8002142:	f023 0304 	bic.w	r3, r3, #4
 8002146:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
      }

      LED3_GPIO_CLK_ENABLE();
 800214a:	4b14      	ldr	r3, [pc, #80]	@ (800219c <BSP_LED_Init+0x114>)
 800214c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002150:	4a12      	ldr	r2, [pc, #72]	@ (800219c <BSP_LED_Init+0x114>)
 8002152:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002156:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800215a:	4b10      	ldr	r3, [pc, #64]	@ (800219c <BSP_LED_Init+0x114>)
 800215c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002160:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002164:	60fb      	str	r3, [r7, #12]
 8002166:	68fb      	ldr	r3, [r7, #12]
    }
#endif /* defined (USE_NUCLEO_144) */
    /* Configure the GPIO_LED pin */
    gpio_init_structure.Pin   = LED_PIN[Led];
 8002168:	79fb      	ldrb	r3, [r7, #7]
 800216a:	4a0d      	ldr	r2, [pc, #52]	@ (80021a0 <BSP_LED_Init+0x118>)
 800216c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002170:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8002172:	2301      	movs	r3, #1
 8002174:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull  = GPIO_NOPULL;
 8002176:	2300      	movs	r3, #0
 8002178:	627b      	str	r3, [r7, #36]	@ 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800217a:	2303      	movs	r3, #3
 800217c:	62bb      	str	r3, [r7, #40]	@ 0x28

    HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 800217e:	79fb      	ldrb	r3, [r7, #7]
 8002180:	4a08      	ldr	r2, [pc, #32]	@ (80021a4 <BSP_LED_Init+0x11c>)
 8002182:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002186:	f107 021c 	add.w	r2, r7, #28
 800218a:	4611      	mov	r1, r2
 800218c:	4618      	mov	r0, r3
 800218e:	f000 fbff 	bl	8002990 <HAL_GPIO_Init>
  }

  return ret;
 8002192:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8002194:	4618      	mov	r0, r3
 8002196:	3738      	adds	r7, #56	@ 0x38
 8002198:	46bd      	mov	sp, r7
 800219a:	bd80      	pop	{r7, pc}
 800219c:	46020c00 	.word	0x46020c00
 80021a0:	0800d0b4 	.word	0x0800d0b4
 80021a4:	20000010 	.word	0x20000010

080021a8 <BSP_PB_Init>:
  *            @arg  BUTTON_MODE_GPIO: Button will be used as simple IO
  *            @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                    with interrupt generation capability
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b088      	sub	sp, #32
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	4603      	mov	r3, r0
 80021b0:	460a      	mov	r2, r1
 80021b2:	71fb      	strb	r3, [r7, #7]
 80021b4:	4613      	mov	r3, r2
 80021b6:	71bb      	strb	r3, [r7, #6]
  static BSP_EXTI_LineCallback ButtonCallback[BUTTONn] = {BUTTON_USER_EXTI_Callback};
  static uint32_t  BSP_BUTTON_PRIO [BUTTONn] = {BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] = {BUTTON_USER_EXTI_LINE};

  /* Enable the BUTTON clock */
  BUTTON_USER_GPIO_CLK_ENABLE();
 80021b8:	4b30      	ldr	r3, [pc, #192]	@ (800227c <BSP_PB_Init+0xd4>)
 80021ba:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80021be:	4a2f      	ldr	r2, [pc, #188]	@ (800227c <BSP_PB_Init+0xd4>)
 80021c0:	f043 0304 	orr.w	r3, r3, #4
 80021c4:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80021c8:	4b2c      	ldr	r3, [pc, #176]	@ (800227c <BSP_PB_Init+0xd4>)
 80021ca:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80021ce:	f003 0304 	and.w	r3, r3, #4
 80021d2:	60bb      	str	r3, [r7, #8]
 80021d4:	68bb      	ldr	r3, [r7, #8]

  gpio_init_structure.Pin = BUTTON_PIN [Button];
 80021d6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80021da:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Pull = GPIO_PULLDOWN;
 80021dc:	2302      	movs	r3, #2
 80021de:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 80021e0:	2302      	movs	r3, #2
 80021e2:	61bb      	str	r3, [r7, #24]

  if (ButtonMode == BUTTON_MODE_GPIO)
 80021e4:	79bb      	ldrb	r3, [r7, #6]
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d10c      	bne.n	8002204 <BSP_PB_Init+0x5c>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 80021ea:	2300      	movs	r3, #0
 80021ec:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT [Button], &gpio_init_structure);
 80021ee:	79fb      	ldrb	r3, [r7, #7]
 80021f0:	4a23      	ldr	r2, [pc, #140]	@ (8002280 <BSP_PB_Init+0xd8>)
 80021f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021f6:	f107 020c 	add.w	r2, r7, #12
 80021fa:	4611      	mov	r1, r2
 80021fc:	4618      	mov	r0, r3
 80021fe:	f000 fbc7 	bl	8002990 <HAL_GPIO_Init>
 8002202:	e036      	b.n	8002272 <BSP_PB_Init+0xca>
  }
  else /* (ButtonMode == BUTTON_MODE_EXTI) */
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 8002204:	4b1f      	ldr	r3, [pc, #124]	@ (8002284 <BSP_PB_Init+0xdc>)
 8002206:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8002208:	79fb      	ldrb	r3, [r7, #7]
 800220a:	4a1d      	ldr	r2, [pc, #116]	@ (8002280 <BSP_PB_Init+0xd8>)
 800220c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002210:	f107 020c 	add.w	r2, r7, #12
 8002214:	4611      	mov	r1, r2
 8002216:	4618      	mov	r0, r3
 8002218:	f000 fbba 	bl	8002990 <HAL_GPIO_Init>

    (void)HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]);
 800221c:	79fa      	ldrb	r2, [r7, #7]
 800221e:	4613      	mov	r3, r2
 8002220:	005b      	lsls	r3, r3, #1
 8002222:	4413      	add	r3, r2
 8002224:	009b      	lsls	r3, r3, #2
 8002226:	4a18      	ldr	r2, [pc, #96]	@ (8002288 <BSP_PB_Init+0xe0>)
 8002228:	441a      	add	r2, r3
 800222a:	79fb      	ldrb	r3, [r7, #7]
 800222c:	4917      	ldr	r1, [pc, #92]	@ (800228c <BSP_PB_Init+0xe4>)
 800222e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002232:	4619      	mov	r1, r3
 8002234:	4610      	mov	r0, r2
 8002236:	f000 fb4f 	bl	80028d8 <HAL_EXTI_GetHandle>
    (void)HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]);
 800223a:	79fa      	ldrb	r2, [r7, #7]
 800223c:	4613      	mov	r3, r2
 800223e:	005b      	lsls	r3, r3, #1
 8002240:	4413      	add	r3, r2
 8002242:	009b      	lsls	r3, r3, #2
 8002244:	4a10      	ldr	r2, [pc, #64]	@ (8002288 <BSP_PB_Init+0xe0>)
 8002246:	1898      	adds	r0, r3, r2
 8002248:	79fb      	ldrb	r3, [r7, #7]
 800224a:	4a11      	ldr	r2, [pc, #68]	@ (8002290 <BSP_PB_Init+0xe8>)
 800224c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002250:	461a      	mov	r2, r3
 8002252:	2100      	movs	r1, #0
 8002254:	f000 fb14 	bl	8002880 <HAL_EXTI_RegisterCallback>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 8002258:	2018      	movs	r0, #24
 800225a:	79fb      	ldrb	r3, [r7, #7]
 800225c:	4a0d      	ldr	r2, [pc, #52]	@ (8002294 <BSP_PB_Init+0xec>)
 800225e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002262:	2200      	movs	r2, #0
 8002264:	4619      	mov	r1, r3
 8002266:	f000 fa45 	bl	80026f4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 800226a:	2318      	movs	r3, #24
 800226c:	4618      	mov	r0, r3
 800226e:	f000 fa5b 	bl	8002728 <HAL_NVIC_EnableIRQ>
  }

  return BSP_ERROR_NONE;
 8002272:	2300      	movs	r3, #0
}
 8002274:	4618      	mov	r0, r3
 8002276:	3720      	adds	r7, #32
 8002278:	46bd      	mov	sp, r7
 800227a:	bd80      	pop	{r7, pc}
 800227c:	46020c00 	.word	0x46020c00
 8002280:	2000001c 	.word	0x2000001c
 8002284:	10110000 	.word	0x10110000
 8002288:	200003a8 	.word	0x200003a8
 800228c:	0800d0bc 	.word	0x0800d0bc
 8002290:	20000020 	.word	0x20000020
 8002294:	20000024 	.word	0x20000024

08002298 <BSP_PB_IRQHandler>:
  * @brief  BSP Button IRQ handler
  * @param  Button Can only be BUTTON_USER
  * @retval None
  */
void BSP_PB_IRQHandler(Button_TypeDef Button)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b082      	sub	sp, #8
 800229c:	af00      	add	r7, sp, #0
 800229e:	4603      	mov	r3, r0
 80022a0:	71fb      	strb	r3, [r7, #7]
  HAL_EXTI_IRQHandler(&hpb_exti[Button]);
 80022a2:	79fa      	ldrb	r2, [r7, #7]
 80022a4:	4613      	mov	r3, r2
 80022a6:	005b      	lsls	r3, r3, #1
 80022a8:	4413      	add	r3, r2
 80022aa:	009b      	lsls	r3, r3, #2
 80022ac:	4a04      	ldr	r2, [pc, #16]	@ (80022c0 <BSP_PB_IRQHandler+0x28>)
 80022ae:	4413      	add	r3, r2
 80022b0:	4618      	mov	r0, r3
 80022b2:	f000 fb25 	bl	8002900 <HAL_EXTI_IRQHandler>
}
 80022b6:	bf00      	nop
 80022b8:	3708      	adds	r7, #8
 80022ba:	46bd      	mov	sp, r7
 80022bc:	bd80      	pop	{r7, pc}
 80022be:	bf00      	nop
 80022c0:	200003a8 	.word	0x200003a8

080022c4 <BSP_PB_Callback>:
  * @brief  BSP Push Button callback
  * @param  Button Specifies the pin connected EXTI line
  * @retval None
  */
__weak void BSP_PB_Callback(Button_TypeDef Button)
{
 80022c4:	b480      	push	{r7}
 80022c6:	b083      	sub	sp, #12
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	4603      	mov	r3, r0
 80022cc:	71fb      	strb	r3, [r7, #7]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Button);

  /* This function should be implemented by the user application.
     It is called into this driver when an event on Button is triggered. */
}
 80022ce:	bf00      	nop
 80022d0:	370c      	adds	r7, #12
 80022d2:	46bd      	mov	sp, r7
 80022d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d8:	4770      	bx	lr
	...

080022dc <BSP_COM_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval BSP error code
  */
int32_t BSP_COM_Init(COM_TypeDef COM, COM_InitTypeDef *COM_Init)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	b084      	sub	sp, #16
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	4603      	mov	r3, r0
 80022e4:	6039      	str	r1, [r7, #0]
 80022e6:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 80022e8:	2300      	movs	r3, #0
 80022ea:	60fb      	str	r3, [r7, #12]

  if (COM >= COMn)
 80022ec:	79fb      	ldrb	r3, [r7, #7]
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d003      	beq.n	80022fa <BSP_COM_Init+0x1e>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80022f2:	f06f 0301 	mvn.w	r3, #1
 80022f6:	60fb      	str	r3, [r7, #12]
 80022f8:	e018      	b.n	800232c <BSP_COM_Init+0x50>
  }
  else
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0)
    /* Init the UART Msp */
    COM1_MspInit(&hcom_uart[COM]);
 80022fa:	79fb      	ldrb	r3, [r7, #7]
 80022fc:	2294      	movs	r2, #148	@ 0x94
 80022fe:	fb02 f303 	mul.w	r3, r2, r3
 8002302:	4a0d      	ldr	r2, [pc, #52]	@ (8002338 <BSP_COM_Init+0x5c>)
 8002304:	4413      	add	r3, r2
 8002306:	4618      	mov	r0, r3
 8002308:	f000 f870 	bl	80023ec <COM1_MspInit>
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS == 0) */

    if (MX_USART1_Init(&hcom_uart[COM], COM_Init) != HAL_OK)
 800230c:	79fb      	ldrb	r3, [r7, #7]
 800230e:	2294      	movs	r2, #148	@ 0x94
 8002310:	fb02 f303 	mul.w	r3, r2, r3
 8002314:	4a08      	ldr	r2, [pc, #32]	@ (8002338 <BSP_COM_Init+0x5c>)
 8002316:	4413      	add	r3, r2
 8002318:	6839      	ldr	r1, [r7, #0]
 800231a:	4618      	mov	r0, r3
 800231c:	f000 f80e 	bl	800233c <MX_USART1_Init>
 8002320:	4603      	mov	r3, r0
 8002322:	2b00      	cmp	r3, #0
 8002324:	d002      	beq.n	800232c <BSP_COM_Init+0x50>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8002326:	f06f 0303 	mvn.w	r3, #3
 800232a:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 800232c:	68fb      	ldr	r3, [r7, #12]
}
 800232e:	4618      	mov	r0, r3
 8002330:	3710      	adds	r7, #16
 8002332:	46bd      	mov	sp, r7
 8002334:	bd80      	pop	{r7, pc}
 8002336:	bf00      	nop
 8002338:	200003b4 	.word	0x200003b4

0800233c <MX_USART1_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval HAL error code
  */
__weak HAL_StatusTypeDef MX_USART1_Init(UART_HandleTypeDef *huart, MX_UART_InitTypeDef *COM_Init)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	b082      	sub	sp, #8
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
 8002344:	6039      	str	r1, [r7, #0]
  /* USART configuration */
  huart->Instance                = COM_USART[COM1];
 8002346:	4b16      	ldr	r3, [pc, #88]	@ (80023a0 <MX_USART1_Init+0x64>)
 8002348:	681a      	ldr	r2, [r3, #0]
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	601a      	str	r2, [r3, #0]
  huart->Init.BaudRate           = COM_Init->BaudRate;
 800234e:	683b      	ldr	r3, [r7, #0]
 8002350:	681a      	ldr	r2, [r3, #0]
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	605a      	str	r2, [r3, #4]
  huart->Init.Mode               = UART_MODE_TX_RX;
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	220c      	movs	r2, #12
 800235a:	615a      	str	r2, [r3, #20]
  huart->Init.Parity             = (uint32_t)COM_Init->Parity;
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	895b      	ldrh	r3, [r3, #10]
 8002360:	461a      	mov	r2, r3
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	611a      	str	r2, [r3, #16]
  huart->Init.WordLength         = (uint32_t)COM_Init->WordLength;
 8002366:	683b      	ldr	r3, [r7, #0]
 8002368:	685a      	ldr	r2, [r3, #4]
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	609a      	str	r2, [r3, #8]
  huart->Init.StopBits           = (uint32_t)COM_Init->StopBits;
 800236e:	683b      	ldr	r3, [r7, #0]
 8002370:	891b      	ldrh	r3, [r3, #8]
 8002372:	461a      	mov	r2, r3
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	60da      	str	r2, [r3, #12]
  huart->Init.HwFlowCtl          = (uint32_t)COM_Init->HwFlowCtl;
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	899b      	ldrh	r3, [r3, #12]
 800237c:	461a      	mov	r2, r3
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	619a      	str	r2, [r3, #24]
  huart->Init.OverSampling       = UART_OVERSAMPLING_8;
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8002388:	61da      	str	r2, [r3, #28]
  huart->Init.ClockPrescaler     = UART_PRESCALER_DIV1;
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	2200      	movs	r2, #0
 800238e:	625a      	str	r2, [r3, #36]	@ 0x24
  return HAL_UART_Init(huart);
 8002390:	6878      	ldr	r0, [r7, #4]
 8002392:	f007 fab9 	bl	8009908 <HAL_UART_Init>
 8002396:	4603      	mov	r3, r0
}
 8002398:	4618      	mov	r0, r3
 800239a:	3708      	adds	r7, #8
 800239c:	46bd      	mov	sp, r7
 800239e:	bd80      	pop	{r7, pc}
 80023a0:	2000000c 	.word	0x2000000c

080023a4 <__io_putchar>:

/**
  * @brief  Redirect console output to COM
  */
PUTCHAR_PROTOTYPE
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b082      	sub	sp, #8
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&hcom_uart [COM_ActiveLogPort], (uint8_t *) &ch, 1, COM_POLL_TIMEOUT);
 80023ac:	4b09      	ldr	r3, [pc, #36]	@ (80023d4 <__io_putchar+0x30>)
 80023ae:	781b      	ldrb	r3, [r3, #0]
 80023b0:	461a      	mov	r2, r3
 80023b2:	2394      	movs	r3, #148	@ 0x94
 80023b4:	fb02 f303 	mul.w	r3, r2, r3
 80023b8:	4a07      	ldr	r2, [pc, #28]	@ (80023d8 <__io_putchar+0x34>)
 80023ba:	1898      	adds	r0, r3, r2
 80023bc:	1d39      	adds	r1, r7, #4
 80023be:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80023c2:	2201      	movs	r2, #1
 80023c4:	f007 fafa 	bl	80099bc <HAL_UART_Transmit>
  return ch;
 80023c8:	687b      	ldr	r3, [r7, #4]
}
 80023ca:	4618      	mov	r0, r3
 80023cc:	3708      	adds	r7, #8
 80023ce:	46bd      	mov	sp, r7
 80023d0:	bd80      	pop	{r7, pc}
 80023d2:	bf00      	nop
 80023d4:	20000448 	.word	0x20000448
 80023d8:	200003b4 	.word	0x200003b4

080023dc <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  Key EXTI line detection callbacks.
  * @retval BSP status
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 80023e0:	2000      	movs	r0, #0
 80023e2:	f7ff ff6f 	bl	80022c4 <BSP_PB_Callback>
}
 80023e6:	bf00      	nop
 80023e8:	bd80      	pop	{r7, pc}
	...

080023ec <COM1_MspInit>:
  * @brief  Initializes UART MSP.
  * @param  huart UART handle
  * @retval BSP status
  */
static void COM1_MspInit(UART_HandleTypeDef *huart)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b08a      	sub	sp, #40	@ 0x28
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);

  /* Enable GPIO clock */
  COM1_TX_GPIO_CLK_ENABLE();
 80023f4:	4b27      	ldr	r3, [pc, #156]	@ (8002494 <COM1_MspInit+0xa8>)
 80023f6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80023fa:	4a26      	ldr	r2, [pc, #152]	@ (8002494 <COM1_MspInit+0xa8>)
 80023fc:	f043 0301 	orr.w	r3, r3, #1
 8002400:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002404:	4b23      	ldr	r3, [pc, #140]	@ (8002494 <COM1_MspInit+0xa8>)
 8002406:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800240a:	f003 0301 	and.w	r3, r3, #1
 800240e:	613b      	str	r3, [r7, #16]
 8002410:	693b      	ldr	r3, [r7, #16]
  COM1_RX_GPIO_CLK_ENABLE();
 8002412:	4b20      	ldr	r3, [pc, #128]	@ (8002494 <COM1_MspInit+0xa8>)
 8002414:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002418:	4a1e      	ldr	r2, [pc, #120]	@ (8002494 <COM1_MspInit+0xa8>)
 800241a:	f043 0301 	orr.w	r3, r3, #1
 800241e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002422:	4b1c      	ldr	r3, [pc, #112]	@ (8002494 <COM1_MspInit+0xa8>)
 8002424:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002428:	f003 0301 	and.w	r3, r3, #1
 800242c:	60fb      	str	r3, [r7, #12]
 800242e:	68fb      	ldr	r3, [r7, #12]

  /* Enable USART clock */
  COM1_CLK_ENABLE();
 8002430:	4b18      	ldr	r3, [pc, #96]	@ (8002494 <COM1_MspInit+0xa8>)
 8002432:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8002436:	4a17      	ldr	r2, [pc, #92]	@ (8002494 <COM1_MspInit+0xa8>)
 8002438:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800243c:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8002440:	4b14      	ldr	r3, [pc, #80]	@ (8002494 <COM1_MspInit+0xa8>)
 8002442:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8002446:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800244a:	60bb      	str	r3, [r7, #8]
 800244c:	68bb      	ldr	r3, [r7, #8]

  /* Configure USART Tx as alternate function */
  gpio_init_structure.Pin       = COM1_TX_PIN;
 800244e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002452:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8002454:	2302      	movs	r3, #2
 8002456:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 8002458:	2302      	movs	r3, #2
 800245a:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull      = GPIO_PULLUP;
 800245c:	2301      	movs	r3, #1
 800245e:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Alternate = COM1_TX_AF;
 8002460:	2307      	movs	r3, #7
 8002462:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_TX_GPIO_PORT, &gpio_init_structure);
 8002464:	f107 0314 	add.w	r3, r7, #20
 8002468:	4619      	mov	r1, r3
 800246a:	480b      	ldr	r0, [pc, #44]	@ (8002498 <COM1_MspInit+0xac>)
 800246c:	f000 fa90 	bl	8002990 <HAL_GPIO_Init>

  /* Configure USART Rx as alternate function */
  gpio_init_structure.Pin       = COM1_RX_PIN;
 8002470:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002474:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8002476:	2302      	movs	r3, #2
 8002478:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Alternate = COM1_RX_AF;
 800247a:	2307      	movs	r3, #7
 800247c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_RX_GPIO_PORT, &gpio_init_structure);
 800247e:	f107 0314 	add.w	r3, r7, #20
 8002482:	4619      	mov	r1, r3
 8002484:	4804      	ldr	r0, [pc, #16]	@ (8002498 <COM1_MspInit+0xac>)
 8002486:	f000 fa83 	bl	8002990 <HAL_GPIO_Init>
}
 800248a:	bf00      	nop
 800248c:	3728      	adds	r7, #40	@ 0x28
 800248e:	46bd      	mov	sp, r7
 8002490:	bd80      	pop	{r7, pc}
 8002492:	bf00      	nop
 8002494:	46020c00 	.word	0x46020c00
 8002498:	42020000 	.word	0x42020000

0800249c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80024a0:	4b12      	ldr	r3, [pc, #72]	@ (80024ec <HAL_Init+0x50>)
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	4a11      	ldr	r2, [pc, #68]	@ (80024ec <HAL_Init+0x50>)
 80024a6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80024aa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80024ac:	2003      	movs	r0, #3
 80024ae:	f000 f916 	bl	80026de <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 80024b2:	f002 fdf7 	bl	80050a4 <HAL_RCC_GetSysClockFreq>
 80024b6:	4602      	mov	r2, r0
 80024b8:	4b0d      	ldr	r3, [pc, #52]	@ (80024f0 <HAL_Init+0x54>)
 80024ba:	6a1b      	ldr	r3, [r3, #32]
 80024bc:	f003 030f 	and.w	r3, r3, #15
 80024c0:	490c      	ldr	r1, [pc, #48]	@ (80024f4 <HAL_Init+0x58>)
 80024c2:	5ccb      	ldrb	r3, [r1, r3]
 80024c4:	fa22 f303 	lsr.w	r3, r2, r3
 80024c8:	4a0b      	ldr	r2, [pc, #44]	@ (80024f8 <HAL_Init+0x5c>)
 80024ca:	6013      	str	r3, [r2, #0]

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 80024cc:	2004      	movs	r0, #4
 80024ce:	f000 f939 	bl	8002744 <HAL_SYSTICK_CLKSourceConfig>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80024d2:	2007      	movs	r0, #7
 80024d4:	f7ff fb6c 	bl	8001bb0 <HAL_InitTick>
 80024d8:	4603      	mov	r3, r0
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d001      	beq.n	80024e2 <HAL_Init+0x46>
  {
    return HAL_ERROR;
 80024de:	2301      	movs	r3, #1
 80024e0:	e002      	b.n	80024e8 <HAL_Init+0x4c>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80024e2:	f7ff fb49 	bl	8001b78 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80024e6:	2300      	movs	r3, #0
}
 80024e8:	4618      	mov	r0, r3
 80024ea:	bd80      	pop	{r7, pc}
 80024ec:	40022000 	.word	0x40022000
 80024f0:	46020c00 	.word	0x46020c00
 80024f4:	0800d05c 	.word	0x0800d05c
 80024f8:	20000008 	.word	0x20000008

080024fc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80024fc:	b480      	push	{r7}
 80024fe:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002500:	4b06      	ldr	r3, [pc, #24]	@ (800251c <HAL_IncTick+0x20>)
 8002502:	781b      	ldrb	r3, [r3, #0]
 8002504:	461a      	mov	r2, r3
 8002506:	4b06      	ldr	r3, [pc, #24]	@ (8002520 <HAL_IncTick+0x24>)
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	4413      	add	r3, r2
 800250c:	4a04      	ldr	r2, [pc, #16]	@ (8002520 <HAL_IncTick+0x24>)
 800250e:	6013      	str	r3, [r2, #0]
}
 8002510:	bf00      	nop
 8002512:	46bd      	mov	sp, r7
 8002514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002518:	4770      	bx	lr
 800251a:	bf00      	nop
 800251c:	2000002c 	.word	0x2000002c
 8002520:	2000044c 	.word	0x2000044c

08002524 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002524:	b480      	push	{r7}
 8002526:	af00      	add	r7, sp, #0
  return uwTick;
 8002528:	4b03      	ldr	r3, [pc, #12]	@ (8002538 <HAL_GetTick+0x14>)
 800252a:	681b      	ldr	r3, [r3, #0]
}
 800252c:	4618      	mov	r0, r3
 800252e:	46bd      	mov	sp, r7
 8002530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002534:	4770      	bx	lr
 8002536:	bf00      	nop
 8002538:	2000044c 	.word	0x2000044c

0800253c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	b084      	sub	sp, #16
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002544:	f7ff ffee 	bl	8002524 <HAL_GetTick>
 8002548:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002554:	d005      	beq.n	8002562 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002556:	4b0a      	ldr	r3, [pc, #40]	@ (8002580 <HAL_Delay+0x44>)
 8002558:	781b      	ldrb	r3, [r3, #0]
 800255a:	461a      	mov	r2, r3
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	4413      	add	r3, r2
 8002560:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002562:	bf00      	nop
 8002564:	f7ff ffde 	bl	8002524 <HAL_GetTick>
 8002568:	4602      	mov	r2, r0
 800256a:	68bb      	ldr	r3, [r7, #8]
 800256c:	1ad3      	subs	r3, r2, r3
 800256e:	68fa      	ldr	r2, [r7, #12]
 8002570:	429a      	cmp	r2, r3
 8002572:	d8f7      	bhi.n	8002564 <HAL_Delay+0x28>
  {
  }
}
 8002574:	bf00      	nop
 8002576:	bf00      	nop
 8002578:	3710      	adds	r7, #16
 800257a:	46bd      	mov	sp, r7
 800257c:	bd80      	pop	{r7, pc}
 800257e:	bf00      	nop
 8002580:	2000002c 	.word	0x2000002c

08002584 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002584:	b480      	push	{r7}
 8002586:	b085      	sub	sp, #20
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	f003 0307 	and.w	r3, r3, #7
 8002592:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002594:	4b0c      	ldr	r3, [pc, #48]	@ (80025c8 <__NVIC_SetPriorityGrouping+0x44>)
 8002596:	68db      	ldr	r3, [r3, #12]
 8002598:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800259a:	68ba      	ldr	r2, [r7, #8]
 800259c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80025a0:	4013      	ands	r3, r2
 80025a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80025a8:	68bb      	ldr	r3, [r7, #8]
 80025aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80025ac:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80025b0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80025b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80025b6:	4a04      	ldr	r2, [pc, #16]	@ (80025c8 <__NVIC_SetPriorityGrouping+0x44>)
 80025b8:	68bb      	ldr	r3, [r7, #8]
 80025ba:	60d3      	str	r3, [r2, #12]
}
 80025bc:	bf00      	nop
 80025be:	3714      	adds	r7, #20
 80025c0:	46bd      	mov	sp, r7
 80025c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c6:	4770      	bx	lr
 80025c8:	e000ed00 	.word	0xe000ed00

080025cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80025cc:	b480      	push	{r7}
 80025ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80025d0:	4b04      	ldr	r3, [pc, #16]	@ (80025e4 <__NVIC_GetPriorityGrouping+0x18>)
 80025d2:	68db      	ldr	r3, [r3, #12]
 80025d4:	0a1b      	lsrs	r3, r3, #8
 80025d6:	f003 0307 	and.w	r3, r3, #7
}
 80025da:	4618      	mov	r0, r3
 80025dc:	46bd      	mov	sp, r7
 80025de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e2:	4770      	bx	lr
 80025e4:	e000ed00 	.word	0xe000ed00

080025e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025e8:	b480      	push	{r7}
 80025ea:	b083      	sub	sp, #12
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	4603      	mov	r3, r0
 80025f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	db0b      	blt.n	8002612 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80025fa:	79fb      	ldrb	r3, [r7, #7]
 80025fc:	f003 021f 	and.w	r2, r3, #31
 8002600:	4907      	ldr	r1, [pc, #28]	@ (8002620 <__NVIC_EnableIRQ+0x38>)
 8002602:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002606:	095b      	lsrs	r3, r3, #5
 8002608:	2001      	movs	r0, #1
 800260a:	fa00 f202 	lsl.w	r2, r0, r2
 800260e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002612:	bf00      	nop
 8002614:	370c      	adds	r7, #12
 8002616:	46bd      	mov	sp, r7
 8002618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261c:	4770      	bx	lr
 800261e:	bf00      	nop
 8002620:	e000e100 	.word	0xe000e100

08002624 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002624:	b480      	push	{r7}
 8002626:	b083      	sub	sp, #12
 8002628:	af00      	add	r7, sp, #0
 800262a:	4603      	mov	r3, r0
 800262c:	6039      	str	r1, [r7, #0]
 800262e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002630:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002634:	2b00      	cmp	r3, #0
 8002636:	db0a      	blt.n	800264e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	b2da      	uxtb	r2, r3
 800263c:	490c      	ldr	r1, [pc, #48]	@ (8002670 <__NVIC_SetPriority+0x4c>)
 800263e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002642:	0112      	lsls	r2, r2, #4
 8002644:	b2d2      	uxtb	r2, r2
 8002646:	440b      	add	r3, r1
 8002648:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800264c:	e00a      	b.n	8002664 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800264e:	683b      	ldr	r3, [r7, #0]
 8002650:	b2da      	uxtb	r2, r3
 8002652:	4908      	ldr	r1, [pc, #32]	@ (8002674 <__NVIC_SetPriority+0x50>)
 8002654:	79fb      	ldrb	r3, [r7, #7]
 8002656:	f003 030f 	and.w	r3, r3, #15
 800265a:	3b04      	subs	r3, #4
 800265c:	0112      	lsls	r2, r2, #4
 800265e:	b2d2      	uxtb	r2, r2
 8002660:	440b      	add	r3, r1
 8002662:	761a      	strb	r2, [r3, #24]
}
 8002664:	bf00      	nop
 8002666:	370c      	adds	r7, #12
 8002668:	46bd      	mov	sp, r7
 800266a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266e:	4770      	bx	lr
 8002670:	e000e100 	.word	0xe000e100
 8002674:	e000ed00 	.word	0xe000ed00

08002678 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002678:	b480      	push	{r7}
 800267a:	b089      	sub	sp, #36	@ 0x24
 800267c:	af00      	add	r7, sp, #0
 800267e:	60f8      	str	r0, [r7, #12]
 8002680:	60b9      	str	r1, [r7, #8]
 8002682:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	f003 0307 	and.w	r3, r3, #7
 800268a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800268c:	69fb      	ldr	r3, [r7, #28]
 800268e:	f1c3 0307 	rsb	r3, r3, #7
 8002692:	2b04      	cmp	r3, #4
 8002694:	bf28      	it	cs
 8002696:	2304      	movcs	r3, #4
 8002698:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800269a:	69fb      	ldr	r3, [r7, #28]
 800269c:	3304      	adds	r3, #4
 800269e:	2b06      	cmp	r3, #6
 80026a0:	d902      	bls.n	80026a8 <NVIC_EncodePriority+0x30>
 80026a2:	69fb      	ldr	r3, [r7, #28]
 80026a4:	3b03      	subs	r3, #3
 80026a6:	e000      	b.n	80026aa <NVIC_EncodePriority+0x32>
 80026a8:	2300      	movs	r3, #0
 80026aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026ac:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80026b0:	69bb      	ldr	r3, [r7, #24]
 80026b2:	fa02 f303 	lsl.w	r3, r2, r3
 80026b6:	43da      	mvns	r2, r3
 80026b8:	68bb      	ldr	r3, [r7, #8]
 80026ba:	401a      	ands	r2, r3
 80026bc:	697b      	ldr	r3, [r7, #20]
 80026be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80026c0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80026c4:	697b      	ldr	r3, [r7, #20]
 80026c6:	fa01 f303 	lsl.w	r3, r1, r3
 80026ca:	43d9      	mvns	r1, r3
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026d0:	4313      	orrs	r3, r2
         );
}
 80026d2:	4618      	mov	r0, r3
 80026d4:	3724      	adds	r7, #36	@ 0x24
 80026d6:	46bd      	mov	sp, r7
 80026d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026dc:	4770      	bx	lr

080026de <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026de:	b580      	push	{r7, lr}
 80026e0:	b082      	sub	sp, #8
 80026e2:	af00      	add	r7, sp, #0
 80026e4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80026e6:	6878      	ldr	r0, [r7, #4]
 80026e8:	f7ff ff4c 	bl	8002584 <__NVIC_SetPriorityGrouping>
}
 80026ec:	bf00      	nop
 80026ee:	3708      	adds	r7, #8
 80026f0:	46bd      	mov	sp, r7
 80026f2:	bd80      	pop	{r7, pc}

080026f4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b086      	sub	sp, #24
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	4603      	mov	r3, r0
 80026fc:	60b9      	str	r1, [r7, #8]
 80026fe:	607a      	str	r2, [r7, #4]
 8002700:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002702:	f7ff ff63 	bl	80025cc <__NVIC_GetPriorityGrouping>
 8002706:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002708:	687a      	ldr	r2, [r7, #4]
 800270a:	68b9      	ldr	r1, [r7, #8]
 800270c:	6978      	ldr	r0, [r7, #20]
 800270e:	f7ff ffb3 	bl	8002678 <NVIC_EncodePriority>
 8002712:	4602      	mov	r2, r0
 8002714:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002718:	4611      	mov	r1, r2
 800271a:	4618      	mov	r0, r3
 800271c:	f7ff ff82 	bl	8002624 <__NVIC_SetPriority>
}
 8002720:	bf00      	nop
 8002722:	3718      	adds	r7, #24
 8002724:	46bd      	mov	sp, r7
 8002726:	bd80      	pop	{r7, pc}

08002728 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32u5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	b082      	sub	sp, #8
 800272c:	af00      	add	r7, sp, #0
 800272e:	4603      	mov	r3, r0
 8002730:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002732:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002736:	4618      	mov	r0, r3
 8002738:	f7ff ff56 	bl	80025e8 <__NVIC_EnableIRQ>
}
 800273c:	bf00      	nop
 800273e:	3708      	adds	r7, #8
 8002740:	46bd      	mov	sp, r7
 8002742:	bd80      	pop	{r7, pc}

08002744 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8002744:	b480      	push	{r7}
 8002746:	b083      	sub	sp, #12
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	2b04      	cmp	r3, #4
 8002750:	d844      	bhi.n	80027dc <HAL_SYSTICK_CLKSourceConfig+0x98>
 8002752:	a201      	add	r2, pc, #4	@ (adr r2, 8002758 <HAL_SYSTICK_CLKSourceConfig+0x14>)
 8002754:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002758:	0800277b 	.word	0x0800277b
 800275c:	08002799 	.word	0x08002799
 8002760:	080027bb 	.word	0x080027bb
 8002764:	080027dd 	.word	0x080027dd
 8002768:	0800276d 	.word	0x0800276d
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 800276c:	4b1f      	ldr	r3, [pc, #124]	@ (80027ec <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	4a1e      	ldr	r2, [pc, #120]	@ (80027ec <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002772:	f043 0304 	orr.w	r3, r3, #4
 8002776:	6013      	str	r3, [r2, #0]
      break;
 8002778:	e031      	b.n	80027de <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 800277a:	4b1c      	ldr	r3, [pc, #112]	@ (80027ec <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	4a1b      	ldr	r2, [pc, #108]	@ (80027ec <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002780:	f023 0304 	bic.w	r3, r3, #4
 8002784:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, (0x00000000U));
 8002786:	4b1a      	ldr	r3, [pc, #104]	@ (80027f0 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8002788:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800278c:	4a18      	ldr	r2, [pc, #96]	@ (80027f0 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 800278e:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8002792:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 8002796:	e022      	b.n	80027de <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8002798:	4b14      	ldr	r3, [pc, #80]	@ (80027ec <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	4a13      	ldr	r2, [pc, #76]	@ (80027ec <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800279e:	f023 0304 	bic.w	r3, r3, #4
 80027a2:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_0);
 80027a4:	4b12      	ldr	r3, [pc, #72]	@ (80027f0 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80027a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80027aa:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 80027ae:	4a10      	ldr	r2, [pc, #64]	@ (80027f0 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80027b0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80027b4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 80027b8:	e011      	b.n	80027de <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 80027ba:	4b0c      	ldr	r3, [pc, #48]	@ (80027ec <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	4a0b      	ldr	r2, [pc, #44]	@ (80027ec <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80027c0:	f023 0304 	bic.w	r3, r3, #4
 80027c4:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_1);
 80027c6:	4b0a      	ldr	r3, [pc, #40]	@ (80027f0 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80027c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80027cc:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 80027d0:	4a07      	ldr	r2, [pc, #28]	@ (80027f0 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80027d2:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80027d6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 80027da:	e000      	b.n	80027de <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 80027dc:	bf00      	nop
  }
}
 80027de:	bf00      	nop
 80027e0:	370c      	adds	r7, #12
 80027e2:	46bd      	mov	sp, r7
 80027e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e8:	4770      	bx	lr
 80027ea:	bf00      	nop
 80027ec:	e000e010 	.word	0xe000e010
 80027f0:	46020c00 	.word	0x46020c00

080027f4 <HAL_DMA_Abort_IT>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *const hdma)
{
 80027f4:	b480      	push	{r7}
 80027f6:	b083      	sub	sp, #12
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d101      	bne.n	8002806 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8002802:	2301      	movs	r3, #1
 8002804:	e019      	b.n	800283a <HAL_DMA_Abort_IT+0x46>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 800280c:	b2db      	uxtb	r3, r3
 800280e:	2b02      	cmp	r3, #2
 8002810:	d004      	beq.n	800281c <HAL_DMA_Abort_IT+0x28>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	2220      	movs	r2, #32
 8002816:	659a      	str	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8002818:	2301      	movs	r3, #1
 800281a:	e00e      	b.n	800283a <HAL_DMA_Abort_IT+0x46>
  }
  else
  {
    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	2204      	movs	r2, #4
 8002820:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Suspend the channel and activate suspend interrupt */
    hdma->Instance->CCR |= (DMA_CCR_SUSP | DMA_CCR_SUSPIE);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	695b      	ldr	r3, [r3, #20]
 800282a:	687a      	ldr	r2, [r7, #4]
 800282c:	6812      	ldr	r2, [r2, #0]
 800282e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002832:	f043 0304 	orr.w	r3, r3, #4
 8002836:	6153      	str	r3, [r2, #20]
  }

  return HAL_OK;
 8002838:	2300      	movs	r3, #0
}
 800283a:	4618      	mov	r0, r3
 800283c:	370c      	adds	r7, #12
 800283e:	46bd      	mov	sp, r7
 8002840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002844:	4770      	bx	lr

08002846 <HAL_DMA_GetState>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval DMA state.
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef const *const hdma)
{
 8002846:	b480      	push	{r7}
 8002848:	b083      	sub	sp, #12
 800284a:	af00      	add	r7, sp, #0
 800284c:	6078      	str	r0, [r7, #4]
  /* Return the DMA channel state */
  return hdma->State;
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8002854:	b2db      	uxtb	r3, r3
}
 8002856:	4618      	mov	r0, r3
 8002858:	370c      	adds	r7, #12
 800285a:	46bd      	mov	sp, r7
 800285c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002860:	4770      	bx	lr

08002862 <HAL_DMAEx_GetFifoLevel>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval Returns the number of available beats in FIFO.
  */
uint32_t HAL_DMAEx_GetFifoLevel(DMA_HandleTypeDef const *const hdma)
{
 8002862:	b480      	push	{r7}
 8002864:	b083      	sub	sp, #12
 8002866:	af00      	add	r7, sp, #0
 8002868:	6078      	str	r0, [r7, #4]
  return ((hdma->Instance->CSR & DMA_CSR_FIFOL) >> DMA_CSR_FIFOL_Pos);
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	691b      	ldr	r3, [r3, #16]
 8002870:	0c1b      	lsrs	r3, r3, #16
 8002872:	b2db      	uxtb	r3, r3
}
 8002874:	4618      	mov	r0, r3
 8002876:	370c      	adds	r7, #12
 8002878:	46bd      	mov	sp, r7
 800287a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287e:	4770      	bx	lr

08002880 <HAL_EXTI_RegisterCallback>:
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID,
                                            void (*pPendingCbfn)(void))
{
 8002880:	b480      	push	{r7}
 8002882:	b087      	sub	sp, #28
 8002884:	af00      	add	r7, sp, #0
 8002886:	60f8      	str	r0, [r7, #12]
 8002888:	460b      	mov	r3, r1
 800288a:	607a      	str	r2, [r7, #4]
 800288c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 800288e:	2300      	movs	r3, #0
 8002890:	75fb      	strb	r3, [r7, #23]

  switch (CallbackID)
 8002892:	7afb      	ldrb	r3, [r7, #11]
 8002894:	2b02      	cmp	r3, #2
 8002896:	d011      	beq.n	80028bc <HAL_EXTI_RegisterCallback+0x3c>
 8002898:	2b02      	cmp	r3, #2
 800289a:	dc13      	bgt.n	80028c4 <HAL_EXTI_RegisterCallback+0x44>
 800289c:	2b00      	cmp	r3, #0
 800289e:	d002      	beq.n	80028a6 <HAL_EXTI_RegisterCallback+0x26>
 80028a0:	2b01      	cmp	r3, #1
 80028a2:	d007      	beq.n	80028b4 <HAL_EXTI_RegisterCallback+0x34>
 80028a4:	e00e      	b.n	80028c4 <HAL_EXTI_RegisterCallback+0x44>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->RisingCallback = pPendingCbfn;
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	687a      	ldr	r2, [r7, #4]
 80028aa:	605a      	str	r2, [r3, #4]
      hexti->FallingCallback = pPendingCbfn;
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	687a      	ldr	r2, [r7, #4]
 80028b0:	609a      	str	r2, [r3, #8]
      break;
 80028b2:	e00a      	b.n	80028ca <HAL_EXTI_RegisterCallback+0x4a>

    case  HAL_EXTI_RISING_CB_ID:
      hexti->RisingCallback = pPendingCbfn;
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	687a      	ldr	r2, [r7, #4]
 80028b8:	605a      	str	r2, [r3, #4]
      break;
 80028ba:	e006      	b.n	80028ca <HAL_EXTI_RegisterCallback+0x4a>

    case  HAL_EXTI_FALLING_CB_ID:
      hexti->FallingCallback = pPendingCbfn;
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	687a      	ldr	r2, [r7, #4]
 80028c0:	609a      	str	r2, [r3, #8]
      break;
 80028c2:	e002      	b.n	80028ca <HAL_EXTI_RegisterCallback+0x4a>

    default:
      status = HAL_ERROR;
 80028c4:	2301      	movs	r3, #1
 80028c6:	75fb      	strb	r3, [r7, #23]
      break;
 80028c8:	bf00      	nop
  }

  return status;
 80028ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80028cc:	4618      	mov	r0, r3
 80028ce:	371c      	adds	r7, #28
 80028d0:	46bd      	mov	sp, r7
 80028d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d6:	4770      	bx	lr

080028d8 <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 80028d8:	b480      	push	{r7}
 80028da:	b083      	sub	sp, #12
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
 80028e0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d101      	bne.n	80028ec <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 80028e8:	2301      	movs	r3, #1
 80028ea:	e003      	b.n	80028f4 <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	683a      	ldr	r2, [r7, #0]
 80028f0:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 80028f2:	2300      	movs	r3, #0
  }
}
 80028f4:	4618      	mov	r0, r3
 80028f6:	370c      	adds	r7, #12
 80028f8:	46bd      	mov	sp, r7
 80028fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fe:	4770      	bx	lr

08002900 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(const EXTI_HandleTypeDef *hexti)
{
 8002900:	b580      	push	{r7, lr}
 8002902:	b086      	sub	sp, #24
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	0c1b      	lsrs	r3, r3, #16
 800290e:	f003 0301 	and.w	r3, r3, #1
 8002912:	617b      	str	r3, [r7, #20]
  maskline = (1UL << (hexti->Line & EXTI_PIN_MASK));
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f003 031f 	and.w	r3, r3, #31
 800291c:	2201      	movs	r2, #1
 800291e:	fa02 f303 	lsl.w	r3, r2, r3
 8002922:	613b      	str	r3, [r7, #16]

  /* Get rising edge pending bit  */
  regaddr = (__IO uint32_t *)(&EXTI->RPR1 + (EXTI_CONFIG_OFFSET * offset));
 8002924:	697b      	ldr	r3, [r7, #20]
 8002926:	015a      	lsls	r2, r3, #5
 8002928:	4b17      	ldr	r3, [pc, #92]	@ (8002988 <HAL_EXTI_IRQHandler+0x88>)
 800292a:	4413      	add	r3, r2
 800292c:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	693a      	ldr	r2, [r7, #16]
 8002934:	4013      	ands	r3, r2
 8002936:	60bb      	str	r3, [r7, #8]

  if (regval != 0U)
 8002938:	68bb      	ldr	r3, [r7, #8]
 800293a:	2b00      	cmp	r3, #0
 800293c:	d009      	beq.n	8002952 <HAL_EXTI_IRQHandler+0x52>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	693a      	ldr	r2, [r7, #16]
 8002942:	601a      	str	r2, [r3, #0]

    /* Call rising callback */
    if (hexti->RisingCallback != NULL)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	685b      	ldr	r3, [r3, #4]
 8002948:	2b00      	cmp	r3, #0
 800294a:	d002      	beq.n	8002952 <HAL_EXTI_IRQHandler+0x52>
    {
      hexti->RisingCallback();
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	685b      	ldr	r3, [r3, #4]
 8002950:	4798      	blx	r3
    }
  }

  /* Get falling edge pending bit  */
  regaddr = (__IO uint32_t *)(&EXTI->FPR1 + (EXTI_CONFIG_OFFSET * offset));
 8002952:	697b      	ldr	r3, [r7, #20]
 8002954:	015a      	lsls	r2, r3, #5
 8002956:	4b0d      	ldr	r3, [pc, #52]	@ (800298c <HAL_EXTI_IRQHandler+0x8c>)
 8002958:	4413      	add	r3, r2
 800295a:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	693a      	ldr	r2, [r7, #16]
 8002962:	4013      	ands	r3, r2
 8002964:	60bb      	str	r3, [r7, #8]

  if (regval != 0U)
 8002966:	68bb      	ldr	r3, [r7, #8]
 8002968:	2b00      	cmp	r3, #0
 800296a:	d009      	beq.n	8002980 <HAL_EXTI_IRQHandler+0x80>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	693a      	ldr	r2, [r7, #16]
 8002970:	601a      	str	r2, [r3, #0]

    /* Call rising callback */
    if (hexti->FallingCallback != NULL)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	689b      	ldr	r3, [r3, #8]
 8002976:	2b00      	cmp	r3, #0
 8002978:	d002      	beq.n	8002980 <HAL_EXTI_IRQHandler+0x80>
    {
      hexti->FallingCallback();
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	689b      	ldr	r3, [r3, #8]
 800297e:	4798      	blx	r3
    }
  }
}
 8002980:	bf00      	nop
 8002982:	3718      	adds	r7, #24
 8002984:	46bd      	mov	sp, r7
 8002986:	bd80      	pop	{r7, pc}
 8002988:	4602200c 	.word	0x4602200c
 800298c:	46022010 	.word	0x46022010

08002990 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8002990:	b480      	push	{r7}
 8002992:	b089      	sub	sp, #36	@ 0x24
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
 8002998:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 800299a:	2300      	movs	r3, #0
 800299c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	613b      	str	r3, [r7, #16]

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80029a2:	e1c2      	b.n	8002d2a <HAL_GPIO_Init+0x39a>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 80029a4:	683b      	ldr	r3, [r7, #0]
 80029a6:	681a      	ldr	r2, [r3, #0]
 80029a8:	2101      	movs	r1, #1
 80029aa:	697b      	ldr	r3, [r7, #20]
 80029ac:	fa01 f303 	lsl.w	r3, r1, r3
 80029b0:	4013      	ands	r3, r2
 80029b2:	60fb      	str	r3, [r7, #12]

    /* Save Pin Position */
    pin_position = position;
 80029b4:	697b      	ldr	r3, [r7, #20]
 80029b6:	61bb      	str	r3, [r7, #24]

    if (iocurrent != 0U)
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	f000 81b2 	beq.w	8002d24 <HAL_GPIO_Init+0x394>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if (GPIOx == LPGPIO1)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	4a55      	ldr	r2, [pc, #340]	@ (8002b18 <HAL_GPIO_Init+0x188>)
 80029c4:	4293      	cmp	r3, r2
 80029c6:	d15d      	bne.n	8002a84 <HAL_GPIO_Init+0xf4>
      {
        /* MODER configuration */
        tmp = GPIOx->MODER;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	61fb      	str	r3, [r7, #28]
        tmp &= ~(LPGPIO_MODER_MOD0 << position);
 80029ce:	2201      	movs	r2, #1
 80029d0:	697b      	ldr	r3, [r7, #20]
 80029d2:	fa02 f303 	lsl.w	r3, r2, r3
 80029d6:	43db      	mvns	r3, r3
 80029d8:	69fa      	ldr	r2, [r7, #28]
 80029da:	4013      	ands	r3, r2
 80029dc:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE_OUTPUT_PP) << position);
 80029de:	683b      	ldr	r3, [r7, #0]
 80029e0:	685b      	ldr	r3, [r3, #4]
 80029e2:	f003 0201 	and.w	r2, r3, #1
 80029e6:	697b      	ldr	r3, [r7, #20]
 80029e8:	fa02 f303 	lsl.w	r3, r2, r3
 80029ec:	69fa      	ldr	r2, [r7, #28]
 80029ee:	4313      	orrs	r3, r2
 80029f0:	61fb      	str	r3, [r7, #28]
        GPIOx->MODER = tmp;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	69fa      	ldr	r2, [r7, #28]
 80029f6:	601a      	str	r2, [r3, #0]

        /* Save GPIO Port and pin index */
        p_gpio = LPGPIO_Map[position].GPIO_PORT;
 80029f8:	4a48      	ldr	r2, [pc, #288]	@ (8002b1c <HAL_GPIO_Init+0x18c>)
 80029fa:	697b      	ldr	r3, [r7, #20]
 80029fc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002a00:	613b      	str	r3, [r7, #16]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 8002a02:	4a46      	ldr	r2, [pc, #280]	@ (8002b1c <HAL_GPIO_Init+0x18c>)
 8002a04:	697b      	ldr	r3, [r7, #20]
 8002a06:	00db      	lsls	r3, r3, #3
 8002a08:	4413      	add	r3, r2
 8002a0a:	685b      	ldr	r3, [r3, #4]
 8002a0c:	61bb      	str	r3, [r7, #24]

        /* Configure Alternate function mapped with the current IO */
        tmp = p_gpio->AFR[(pin_position) >> 3U];
 8002a0e:	69bb      	ldr	r3, [r7, #24]
 8002a10:	08da      	lsrs	r2, r3, #3
 8002a12:	693b      	ldr	r3, [r7, #16]
 8002a14:	3208      	adds	r2, #8
 8002a16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a1a:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << (((pin_position) & 0x07U) * 4U));
 8002a1c:	69bb      	ldr	r3, [r7, #24]
 8002a1e:	f003 0307 	and.w	r3, r3, #7
 8002a22:	009b      	lsls	r3, r3, #2
 8002a24:	220f      	movs	r2, #15
 8002a26:	fa02 f303 	lsl.w	r3, r2, r3
 8002a2a:	43db      	mvns	r3, r3
 8002a2c:	69fa      	ldr	r2, [r7, #28]
 8002a2e:	4013      	ands	r3, r2
 8002a30:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_AF11_LPGPIO1 & 0x0FUL) << (((pin_position) & 0x07U) * 4U));
 8002a32:	69bb      	ldr	r3, [r7, #24]
 8002a34:	f003 0307 	and.w	r3, r3, #7
 8002a38:	009b      	lsls	r3, r3, #2
 8002a3a:	220b      	movs	r2, #11
 8002a3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a40:	69fa      	ldr	r2, [r7, #28]
 8002a42:	4313      	orrs	r3, r2
 8002a44:	61fb      	str	r3, [r7, #28]
        p_gpio->AFR[(pin_position) >> 3U] = tmp;
 8002a46:	69bb      	ldr	r3, [r7, #24]
 8002a48:	08da      	lsrs	r2, r3, #3
 8002a4a:	693b      	ldr	r3, [r7, #16]
 8002a4c:	3208      	adds	r2, #8
 8002a4e:	69f9      	ldr	r1, [r7, #28]
 8002a50:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8002a54:	693b      	ldr	r3, [r7, #16]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 8002a5a:	69bb      	ldr	r3, [r7, #24]
 8002a5c:	005b      	lsls	r3, r3, #1
 8002a5e:	2203      	movs	r2, #3
 8002a60:	fa02 f303 	lsl.w	r3, r2, r3
 8002a64:	43db      	mvns	r3, r3
 8002a66:	69fa      	ldr	r2, [r7, #28]
 8002a68:	4013      	ands	r3, r2
 8002a6a:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_MODE_AF_PP & 0x0FUL) << (pin_position * GPIO_MODER_MODE1_Pos));
 8002a6c:	69bb      	ldr	r3, [r7, #24]
 8002a6e:	005b      	lsls	r3, r3, #1
 8002a70:	2202      	movs	r2, #2
 8002a72:	fa02 f303 	lsl.w	r3, r2, r3
 8002a76:	69fa      	ldr	r2, [r7, #28]
 8002a78:	4313      	orrs	r3, r2
 8002a7a:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8002a7c:	693b      	ldr	r3, [r7, #16]
 8002a7e:	69fa      	ldr	r2, [r7, #28]
 8002a80:	601a      	str	r2, [r3, #0]
 8002a82:	e067      	b.n	8002b54 <HAL_GPIO_Init+0x1c4>
      }
      else if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002a84:	683b      	ldr	r3, [r7, #0]
 8002a86:	685b      	ldr	r3, [r3, #4]
 8002a88:	2b02      	cmp	r3, #2
 8002a8a:	d003      	beq.n	8002a94 <HAL_GPIO_Init+0x104>
 8002a8c:	683b      	ldr	r3, [r7, #0]
 8002a8e:	685b      	ldr	r3, [r3, #4]
 8002a90:	2b12      	cmp	r3, #18
 8002a92:	d145      	bne.n	8002b20 <HAL_GPIO_Init+0x190>
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8002a94:	697b      	ldr	r3, [r7, #20]
 8002a96:	08da      	lsrs	r2, r3, #3
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	3208      	adds	r2, #8
 8002a9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002aa0:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8002aa2:	697b      	ldr	r3, [r7, #20]
 8002aa4:	f003 0307 	and.w	r3, r3, #7
 8002aa8:	009b      	lsls	r3, r3, #2
 8002aaa:	220f      	movs	r2, #15
 8002aac:	fa02 f303 	lsl.w	r3, r2, r3
 8002ab0:	43db      	mvns	r3, r3
 8002ab2:	69fa      	ldr	r2, [r7, #28]
 8002ab4:	4013      	ands	r3, r2
 8002ab6:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8002ab8:	683b      	ldr	r3, [r7, #0]
 8002aba:	691b      	ldr	r3, [r3, #16]
 8002abc:	f003 020f 	and.w	r2, r3, #15
 8002ac0:	697b      	ldr	r3, [r7, #20]
 8002ac2:	f003 0307 	and.w	r3, r3, #7
 8002ac6:	009b      	lsls	r3, r3, #2
 8002ac8:	fa02 f303 	lsl.w	r3, r2, r3
 8002acc:	69fa      	ldr	r2, [r7, #28]
 8002ace:	4313      	orrs	r3, r2
 8002ad0:	61fb      	str	r3, [r7, #28]
        GPIOx->AFR[position >> 3U] = tmp;
 8002ad2:	697b      	ldr	r3, [r7, #20]
 8002ad4:	08da      	lsrs	r2, r3, #3
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	3208      	adds	r2, #8
 8002ada:	69f9      	ldr	r1, [r7, #28]
 8002adc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8002ae0:	693b      	ldr	r3, [r7, #16]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 8002ae6:	69bb      	ldr	r3, [r7, #24]
 8002ae8:	005b      	lsls	r3, r3, #1
 8002aea:	2203      	movs	r2, #3
 8002aec:	fa02 f303 	lsl.w	r3, r2, r3
 8002af0:	43db      	mvns	r3, r3
 8002af2:	69fa      	ldr	r2, [r7, #28]
 8002af4:	4013      	ands	r3, r2
 8002af6:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 8002af8:	683b      	ldr	r3, [r7, #0]
 8002afa:	685b      	ldr	r3, [r3, #4]
 8002afc:	f003 0203 	and.w	r2, r3, #3
 8002b00:	69bb      	ldr	r3, [r7, #24]
 8002b02:	005b      	lsls	r3, r3, #1
 8002b04:	fa02 f303 	lsl.w	r3, r2, r3
 8002b08:	69fa      	ldr	r2, [r7, #28]
 8002b0a:	4313      	orrs	r3, r2
 8002b0c:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8002b0e:	693b      	ldr	r3, [r7, #16]
 8002b10:	69fa      	ldr	r2, [r7, #28]
 8002b12:	601a      	str	r2, [r3, #0]
 8002b14:	e01e      	b.n	8002b54 <HAL_GPIO_Init+0x1c4>
 8002b16:	bf00      	nop
 8002b18:	46020000 	.word	0x46020000
 8002b1c:	0800d0c0 	.word	0x0800d0c0
      {
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
        tmp = p_gpio->MODER;
 8002b20:	693b      	ldr	r3, [r7, #16]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 8002b26:	69bb      	ldr	r3, [r7, #24]
 8002b28:	005b      	lsls	r3, r3, #1
 8002b2a:	2203      	movs	r2, #3
 8002b2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b30:	43db      	mvns	r3, r3
 8002b32:	69fa      	ldr	r2, [r7, #28]
 8002b34:	4013      	ands	r3, r2
 8002b36:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 8002b38:	683b      	ldr	r3, [r7, #0]
 8002b3a:	685b      	ldr	r3, [r3, #4]
 8002b3c:	f003 0203 	and.w	r2, r3, #3
 8002b40:	69bb      	ldr	r3, [r7, #24]
 8002b42:	005b      	lsls	r3, r3, #1
 8002b44:	fa02 f303 	lsl.w	r3, r2, r3
 8002b48:	69fa      	ldr	r2, [r7, #28]
 8002b4a:	4313      	orrs	r3, r2
 8002b4c:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8002b4e:	693b      	ldr	r3, [r7, #16]
 8002b50:	69fa      	ldr	r2, [r7, #28]
 8002b52:	601a      	str	r2, [r3, #0]
      }

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002b54:	683b      	ldr	r3, [r7, #0]
 8002b56:	685b      	ldr	r3, [r3, #4]
 8002b58:	2b01      	cmp	r3, #1
 8002b5a:	d00b      	beq.n	8002b74 <HAL_GPIO_Init+0x1e4>
 8002b5c:	683b      	ldr	r3, [r7, #0]
 8002b5e:	685b      	ldr	r3, [r3, #4]
 8002b60:	2b02      	cmp	r3, #2
 8002b62:	d007      	beq.n	8002b74 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002b64:	683b      	ldr	r3, [r7, #0]
 8002b66:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002b68:	2b11      	cmp	r3, #17
 8002b6a:	d003      	beq.n	8002b74 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	685b      	ldr	r3, [r3, #4]
 8002b70:	2b12      	cmp	r3, #18
 8002b72:	d130      	bne.n	8002bd6 <HAL_GPIO_Init+0x246>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = p_gpio->OSPEEDR;
 8002b74:	693b      	ldr	r3, [r7, #16]
 8002b76:	689b      	ldr	r3, [r3, #8]
 8002b78:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 8002b7a:	69bb      	ldr	r3, [r7, #24]
 8002b7c:	005b      	lsls	r3, r3, #1
 8002b7e:	2203      	movs	r2, #3
 8002b80:	fa02 f303 	lsl.w	r3, r2, r3
 8002b84:	43db      	mvns	r3, r3
 8002b86:	69fa      	ldr	r2, [r7, #28]
 8002b88:	4013      	ands	r3, r2
 8002b8a:	61fb      	str	r3, [r7, #28]
        tmp |= (pGPIO_Init->Speed << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 8002b8c:	683b      	ldr	r3, [r7, #0]
 8002b8e:	68da      	ldr	r2, [r3, #12]
 8002b90:	69bb      	ldr	r3, [r7, #24]
 8002b92:	005b      	lsls	r3, r3, #1
 8002b94:	fa02 f303 	lsl.w	r3, r2, r3
 8002b98:	69fa      	ldr	r2, [r7, #28]
 8002b9a:	4313      	orrs	r3, r2
 8002b9c:	61fb      	str	r3, [r7, #28]
        p_gpio->OSPEEDR = tmp;
 8002b9e:	693b      	ldr	r3, [r7, #16]
 8002ba0:	69fa      	ldr	r2, [r7, #28]
 8002ba2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = p_gpio->OTYPER;
 8002ba4:	693b      	ldr	r3, [r7, #16]
 8002ba6:	685b      	ldr	r3, [r3, #4]
 8002ba8:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OTYPER_OT0 << pin_position);
 8002baa:	2201      	movs	r2, #1
 8002bac:	69bb      	ldr	r3, [r7, #24]
 8002bae:	fa02 f303 	lsl.w	r3, r2, r3
 8002bb2:	43db      	mvns	r3, r3
 8002bb4:	69fa      	ldr	r2, [r7, #28]
 8002bb6:	4013      	ands	r3, r2
 8002bb8:	61fb      	str	r3, [r7, #28]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 8002bba:	683b      	ldr	r3, [r7, #0]
 8002bbc:	685b      	ldr	r3, [r3, #4]
 8002bbe:	091b      	lsrs	r3, r3, #4
 8002bc0:	f003 0201 	and.w	r2, r3, #1
 8002bc4:	69bb      	ldr	r3, [r7, #24]
 8002bc6:	fa02 f303 	lsl.w	r3, r2, r3
 8002bca:	69fa      	ldr	r2, [r7, #28]
 8002bcc:	4313      	orrs	r3, r2
 8002bce:	61fb      	str	r3, [r7, #28]
        p_gpio->OTYPER = tmp;
 8002bd0:	693b      	ldr	r3, [r7, #16]
 8002bd2:	69fa      	ldr	r2, [r7, #28]
 8002bd4:	605a      	str	r2, [r3, #4]
      }

      if ((pGPIO_Init->Mode != GPIO_MODE_ANALOG) || 
 8002bd6:	683b      	ldr	r3, [r7, #0]
 8002bd8:	685b      	ldr	r3, [r3, #4]
 8002bda:	2b03      	cmp	r3, #3
 8002bdc:	d107      	bne.n	8002bee <HAL_GPIO_Init+0x25e>
          ((pGPIO_Init->Mode == GPIO_MODE_ANALOG) && (pGPIO_Init->Pull != GPIO_PULLUP)))
 8002bde:	683b      	ldr	r3, [r7, #0]
 8002be0:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode != GPIO_MODE_ANALOG) || 
 8002be2:	2b03      	cmp	r3, #3
 8002be4:	d11b      	bne.n	8002c1e <HAL_GPIO_Init+0x28e>
          ((pGPIO_Init->Mode == GPIO_MODE_ANALOG) && (pGPIO_Init->Pull != GPIO_PULLUP)))
 8002be6:	683b      	ldr	r3, [r7, #0]
 8002be8:	689b      	ldr	r3, [r3, #8]
 8002bea:	2b01      	cmp	r3, #1
 8002bec:	d017      	beq.n	8002c1e <HAL_GPIO_Init+0x28e>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = p_gpio->PUPDR;
 8002bee:	693b      	ldr	r3, [r7, #16]
 8002bf0:	68db      	ldr	r3, [r3, #12]
 8002bf2:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 8002bf4:	69bb      	ldr	r3, [r7, #24]
 8002bf6:	005b      	lsls	r3, r3, #1
 8002bf8:	2203      	movs	r2, #3
 8002bfa:	fa02 f303 	lsl.w	r3, r2, r3
 8002bfe:	43db      	mvns	r3, r3
 8002c00:	69fa      	ldr	r2, [r7, #28]
 8002c02:	4013      	ands	r3, r2
 8002c04:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Pull) << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	689a      	ldr	r2, [r3, #8]
 8002c0a:	69bb      	ldr	r3, [r7, #24]
 8002c0c:	005b      	lsls	r3, r3, #1
 8002c0e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c12:	69fa      	ldr	r2, [r7, #28]
 8002c14:	4313      	orrs	r3, r2
 8002c16:	61fb      	str	r3, [r7, #28]
        p_gpio->PUPDR = tmp;
 8002c18:	693b      	ldr	r3, [r7, #16]
 8002c1a:	69fa      	ldr	r2, [r7, #28]
 8002c1c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002c1e:	683b      	ldr	r3, [r7, #0]
 8002c20:	685b      	ldr	r3, [r3, #4]
 8002c22:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d07c      	beq.n	8002d24 <HAL_GPIO_Init+0x394>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8002c2a:	4a47      	ldr	r2, [pc, #284]	@ (8002d48 <HAL_GPIO_Init+0x3b8>)
 8002c2c:	697b      	ldr	r3, [r7, #20]
 8002c2e:	089b      	lsrs	r3, r3, #2
 8002c30:	3318      	adds	r3, #24
 8002c32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c36:	61fb      	str	r3, [r7, #28]
        tmp &= ~((0x0FUL) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 8002c38:	697b      	ldr	r3, [r7, #20]
 8002c3a:	f003 0303 	and.w	r3, r3, #3
 8002c3e:	00db      	lsls	r3, r3, #3
 8002c40:	220f      	movs	r2, #15
 8002c42:	fa02 f303 	lsl.w	r3, r2, r3
 8002c46:	43db      	mvns	r3, r3
 8002c48:	69fa      	ldr	r2, [r7, #28]
 8002c4a:	4013      	ands	r3, r2
 8002c4c:	61fb      	str	r3, [r7, #28]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	0a9a      	lsrs	r2, r3, #10
 8002c52:	4b3e      	ldr	r3, [pc, #248]	@ (8002d4c <HAL_GPIO_Init+0x3bc>)
 8002c54:	4013      	ands	r3, r2
 8002c56:	697a      	ldr	r2, [r7, #20]
 8002c58:	f002 0203 	and.w	r2, r2, #3
 8002c5c:	00d2      	lsls	r2, r2, #3
 8002c5e:	4093      	lsls	r3, r2
 8002c60:	69fa      	ldr	r2, [r7, #28]
 8002c62:	4313      	orrs	r3, r2
 8002c64:	61fb      	str	r3, [r7, #28]
        EXTI->EXTICR[position >> 2U] = tmp;
 8002c66:	4938      	ldr	r1, [pc, #224]	@ (8002d48 <HAL_GPIO_Init+0x3b8>)
 8002c68:	697b      	ldr	r3, [r7, #20]
 8002c6a:	089b      	lsrs	r3, r3, #2
 8002c6c:	3318      	adds	r3, #24
 8002c6e:	69fa      	ldr	r2, [r7, #28]
 8002c70:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8002c74:	4b34      	ldr	r3, [pc, #208]	@ (8002d48 <HAL_GPIO_Init+0x3b8>)
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	43db      	mvns	r3, r3
 8002c7e:	69fa      	ldr	r2, [r7, #28]
 8002c80:	4013      	ands	r3, r2
 8002c82:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002c84:	683b      	ldr	r3, [r7, #0]
 8002c86:	685b      	ldr	r3, [r3, #4]
 8002c88:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d003      	beq.n	8002c98 <HAL_GPIO_Init+0x308>
        {
          tmp |= iocurrent;
 8002c90:	69fa      	ldr	r2, [r7, #28]
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	4313      	orrs	r3, r2
 8002c96:	61fb      	str	r3, [r7, #28]
        }
        EXTI->RTSR1 = tmp;
 8002c98:	4a2b      	ldr	r2, [pc, #172]	@ (8002d48 <HAL_GPIO_Init+0x3b8>)
 8002c9a:	69fb      	ldr	r3, [r7, #28]
 8002c9c:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 8002c9e:	4b2a      	ldr	r3, [pc, #168]	@ (8002d48 <HAL_GPIO_Init+0x3b8>)
 8002ca0:	685b      	ldr	r3, [r3, #4]
 8002ca2:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	43db      	mvns	r3, r3
 8002ca8:	69fa      	ldr	r2, [r7, #28]
 8002caa:	4013      	ands	r3, r2
 8002cac:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002cae:	683b      	ldr	r3, [r7, #0]
 8002cb0:	685b      	ldr	r3, [r3, #4]
 8002cb2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d003      	beq.n	8002cc2 <HAL_GPIO_Init+0x332>
        {
          tmp |= iocurrent;
 8002cba:	69fa      	ldr	r2, [r7, #28]
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	4313      	orrs	r3, r2
 8002cc0:	61fb      	str	r3, [r7, #28]
        }
        EXTI->FTSR1 = tmp;
 8002cc2:	4a21      	ldr	r2, [pc, #132]	@ (8002d48 <HAL_GPIO_Init+0x3b8>)
 8002cc4:	69fb      	ldr	r3, [r7, #28]
 8002cc6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 8002cc8:	4b1f      	ldr	r3, [pc, #124]	@ (8002d48 <HAL_GPIO_Init+0x3b8>)
 8002cca:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002cce:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	43db      	mvns	r3, r3
 8002cd4:	69fa      	ldr	r2, [r7, #28]
 8002cd6:	4013      	ands	r3, r2
 8002cd8:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002cda:	683b      	ldr	r3, [r7, #0]
 8002cdc:	685b      	ldr	r3, [r3, #4]
 8002cde:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d003      	beq.n	8002cee <HAL_GPIO_Init+0x35e>
        {
          tmp |= iocurrent;
 8002ce6:	69fa      	ldr	r2, [r7, #28]
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	4313      	orrs	r3, r2
 8002cec:	61fb      	str	r3, [r7, #28]
        }
        EXTI->EMR1 = tmp;
 8002cee:	4a16      	ldr	r2, [pc, #88]	@ (8002d48 <HAL_GPIO_Init+0x3b8>)
 8002cf0:	69fb      	ldr	r3, [r7, #28]
 8002cf2:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        tmp = EXTI->IMR1;
 8002cf6:	4b14      	ldr	r3, [pc, #80]	@ (8002d48 <HAL_GPIO_Init+0x3b8>)
 8002cf8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002cfc:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	43db      	mvns	r3, r3
 8002d02:	69fa      	ldr	r2, [r7, #28]
 8002d04:	4013      	ands	r3, r2
 8002d06:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002d08:	683b      	ldr	r3, [r7, #0]
 8002d0a:	685b      	ldr	r3, [r3, #4]
 8002d0c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d003      	beq.n	8002d1c <HAL_GPIO_Init+0x38c>
        {
          tmp |= iocurrent;
 8002d14:	69fa      	ldr	r2, [r7, #28]
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	4313      	orrs	r3, r2
 8002d1a:	61fb      	str	r3, [r7, #28]
        }
        EXTI->IMR1 = tmp;
 8002d1c:	4a0a      	ldr	r2, [pc, #40]	@ (8002d48 <HAL_GPIO_Init+0x3b8>)
 8002d1e:	69fb      	ldr	r3, [r7, #28]
 8002d20:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }
    position++;
 8002d24:	697b      	ldr	r3, [r7, #20]
 8002d26:	3301      	adds	r3, #1
 8002d28:	617b      	str	r3, [r7, #20]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8002d2a:	683b      	ldr	r3, [r7, #0]
 8002d2c:	681a      	ldr	r2, [r3, #0]
 8002d2e:	697b      	ldr	r3, [r7, #20]
 8002d30:	fa22 f303 	lsr.w	r3, r2, r3
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	f47f ae35 	bne.w	80029a4 <HAL_GPIO_Init+0x14>
  }
}
 8002d3a:	bf00      	nop
 8002d3c:	bf00      	nop
 8002d3e:	3724      	adds	r7, #36	@ 0x24
 8002d40:	46bd      	mov	sp, r7
 8002d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d46:	4770      	bx	lr
 8002d48:	46022000 	.word	0x46022000
 8002d4c:	002f7f7f 	.word	0x002f7f7f

08002d50 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002d50:	b480      	push	{r7}
 8002d52:	b083      	sub	sp, #12
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]
 8002d58:	460b      	mov	r3, r1
 8002d5a:	807b      	strh	r3, [r7, #2]
 8002d5c:	4613      	mov	r3, r2
 8002d5e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002d60:	787b      	ldrb	r3, [r7, #1]
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d003      	beq.n	8002d6e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002d66:	887a      	ldrh	r2, [r7, #2]
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
  }
}
 8002d6c:	e002      	b.n	8002d74 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
 8002d6e:	887a      	ldrh	r2, [r7, #2]
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002d74:	bf00      	nop
 8002d76:	370c      	adds	r7, #12
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7e:	4770      	bx	lr

08002d80 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	b082      	sub	sp, #8
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	4603      	mov	r3, r0
 8002d88:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0U)
 8002d8a:	4b0f      	ldr	r3, [pc, #60]	@ (8002dc8 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8002d8c:	68da      	ldr	r2, [r3, #12]
 8002d8e:	88fb      	ldrh	r3, [r7, #6]
 8002d90:	4013      	ands	r3, r2
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d006      	beq.n	8002da4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 8002d96:	4a0c      	ldr	r2, [pc, #48]	@ (8002dc8 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8002d98:	88fb      	ldrh	r3, [r7, #6]
 8002d9a:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 8002d9c:	88fb      	ldrh	r3, [r7, #6]
 8002d9e:	4618      	mov	r0, r3
 8002da0:	f000 f814 	bl	8002dcc <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0U)
 8002da4:	4b08      	ldr	r3, [pc, #32]	@ (8002dc8 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8002da6:	691a      	ldr	r2, [r3, #16]
 8002da8:	88fb      	ldrh	r3, [r7, #6]
 8002daa:	4013      	ands	r3, r2
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d006      	beq.n	8002dbe <HAL_GPIO_EXTI_IRQHandler+0x3e>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 8002db0:	4a05      	ldr	r2, [pc, #20]	@ (8002dc8 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8002db2:	88fb      	ldrh	r3, [r7, #6]
 8002db4:	6113      	str	r3, [r2, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 8002db6:	88fb      	ldrh	r3, [r7, #6]
 8002db8:	4618      	mov	r0, r3
 8002dba:	f000 f812 	bl	8002de2 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 8002dbe:	bf00      	nop
 8002dc0:	3708      	adds	r7, #8
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	bd80      	pop	{r7, pc}
 8002dc6:	bf00      	nop
 8002dc8:	46022000 	.word	0x46022000

08002dcc <HAL_GPIO_EXTI_Rising_Callback>:
  * @brief  EXTI line rising detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 8002dcc:	b480      	push	{r7}
 8002dce:	b083      	sub	sp, #12
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	4603      	mov	r3, r0
 8002dd4:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Rising_Callback could be implemented in the user file
   */
}
 8002dd6:	bf00      	nop
 8002dd8:	370c      	adds	r7, #12
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de0:	4770      	bx	lr

08002de2 <HAL_GPIO_EXTI_Falling_Callback>:
  * @brief  EXTI line falling detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 8002de2:	b480      	push	{r7}
 8002de4:	b083      	sub	sp, #12
 8002de6:	af00      	add	r7, sp, #0
 8002de8:	4603      	mov	r3, r0
 8002dea:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Falling_Callback could be implemented in the user file
   */
}
 8002dec:	bf00      	nop
 8002dee:	370c      	adds	r7, #12
 8002df0:	46bd      	mov	sp, r7
 8002df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df6:	4770      	bx	lr

08002df8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b082      	sub	sp, #8
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d101      	bne.n	8002e0a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002e06:	2301      	movs	r3, #1
 8002e08:	e08d      	b.n	8002f26 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002e10:	b2db      	uxtb	r3, r3
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d106      	bne.n	8002e24 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	2200      	movs	r2, #0
 8002e1a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002e1e:	6878      	ldr	r0, [r7, #4]
 8002e20:	f7fe f980 	bl	8001124 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	2224      	movs	r2, #36	@ 0x24
 8002e28:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	681a      	ldr	r2, [r3, #0]
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f022 0201 	bic.w	r2, r2, #1
 8002e3a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	685a      	ldr	r2, [r3, #4]
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002e48:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	689a      	ldr	r2, [r3, #8]
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002e58:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	68db      	ldr	r3, [r3, #12]
 8002e5e:	2b01      	cmp	r3, #1
 8002e60:	d107      	bne.n	8002e72 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	689a      	ldr	r2, [r3, #8]
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002e6e:	609a      	str	r2, [r3, #8]
 8002e70:	e006      	b.n	8002e80 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	689a      	ldr	r2, [r3, #8]
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8002e7e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	68db      	ldr	r3, [r3, #12]
 8002e84:	2b02      	cmp	r3, #2
 8002e86:	d108      	bne.n	8002e9a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	685a      	ldr	r2, [r3, #4]
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002e96:	605a      	str	r2, [r3, #4]
 8002e98:	e007      	b.n	8002eaa <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	685a      	ldr	r2, [r3, #4]
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002ea8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	685b      	ldr	r3, [r3, #4]
 8002eb0:	687a      	ldr	r2, [r7, #4]
 8002eb2:	6812      	ldr	r2, [r2, #0]
 8002eb4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002eb8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002ebc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	68da      	ldr	r2, [r3, #12]
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002ecc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	691a      	ldr	r2, [r3, #16]
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	695b      	ldr	r3, [r3, #20]
 8002ed6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	699b      	ldr	r3, [r3, #24]
 8002ede:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	430a      	orrs	r2, r1
 8002ee6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	69d9      	ldr	r1, [r3, #28]
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	6a1a      	ldr	r2, [r3, #32]
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	430a      	orrs	r2, r1
 8002ef6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	681a      	ldr	r2, [r3, #0]
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f042 0201 	orr.w	r2, r2, #1
 8002f06:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	2220      	movs	r2, #32
 8002f12:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	2200      	movs	r2, #0
 8002f1a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	2200      	movs	r2, #0
 8002f20:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8002f24:	2300      	movs	r3, #0
}
 8002f26:	4618      	mov	r0, r3
 8002f28:	3708      	adds	r7, #8
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	bd80      	pop	{r7, pc}

08002f2e <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8002f2e:	b580      	push	{r7, lr}
 8002f30:	b084      	sub	sp, #16
 8002f32:	af00      	add	r7, sp, #0
 8002f34:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	699b      	ldr	r3, [r3, #24]
 8002f3c:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d005      	beq.n	8002f5a <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002f52:	68ba      	ldr	r2, [r7, #8]
 8002f54:	68f9      	ldr	r1, [r7, #12]
 8002f56:	6878      	ldr	r0, [r7, #4]
 8002f58:	4798      	blx	r3
  }
}
 8002f5a:	bf00      	nop
 8002f5c:	3710      	adds	r7, #16
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	bd80      	pop	{r7, pc}

08002f62 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002f62:	b580      	push	{r7, lr}
 8002f64:	b086      	sub	sp, #24
 8002f66:	af00      	add	r7, sp, #0
 8002f68:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	699b      	ldr	r3, [r3, #24]
 8002f70:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8002f7a:	697b      	ldr	r3, [r7, #20]
 8002f7c:	0a1b      	lsrs	r3, r3, #8
 8002f7e:	f003 0301 	and.w	r3, r3, #1
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d010      	beq.n	8002fa8 <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8002f86:	693b      	ldr	r3, [r7, #16]
 8002f88:	09db      	lsrs	r3, r3, #7
 8002f8a:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d00a      	beq.n	8002fa8 <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f96:	f043 0201 	orr.w	r2, r3, #1
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002fa6:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8002fa8:	697b      	ldr	r3, [r7, #20]
 8002faa:	0a9b      	lsrs	r3, r3, #10
 8002fac:	f003 0301 	and.w	r3, r3, #1
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d010      	beq.n	8002fd6 <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8002fb4:	693b      	ldr	r3, [r7, #16]
 8002fb6:	09db      	lsrs	r3, r3, #7
 8002fb8:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d00a      	beq.n	8002fd6 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002fc4:	f043 0208 	orr.w	r2, r3, #8
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002fd4:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8002fd6:	697b      	ldr	r3, [r7, #20]
 8002fd8:	0a5b      	lsrs	r3, r3, #9
 8002fda:	f003 0301 	and.w	r3, r3, #1
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d010      	beq.n	8003004 <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8002fe2:	693b      	ldr	r3, [r7, #16]
 8002fe4:	09db      	lsrs	r3, r3, #7
 8002fe6:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d00a      	beq.n	8003004 <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ff2:	f043 0202 	orr.w	r2, r3, #2
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003002:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003008:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	f003 030b 	and.w	r3, r3, #11
 8003010:	2b00      	cmp	r3, #0
 8003012:	d003      	beq.n	800301c <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 8003014:	68f9      	ldr	r1, [r7, #12]
 8003016:	6878      	ldr	r0, [r7, #4]
 8003018:	f000 fbfc 	bl	8003814 <I2C_ITError>
  }
}
 800301c:	bf00      	nop
 800301e:	3718      	adds	r7, #24
 8003020:	46bd      	mov	sp, r7
 8003022:	bd80      	pop	{r7, pc}

08003024 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003024:	b480      	push	{r7}
 8003026:	b083      	sub	sp, #12
 8003028:	af00      	add	r7, sp, #0
 800302a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800302c:	bf00      	nop
 800302e:	370c      	adds	r7, #12
 8003030:	46bd      	mov	sp, r7
 8003032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003036:	4770      	bx	lr

08003038 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003038:	b480      	push	{r7}
 800303a:	b083      	sub	sp, #12
 800303c:	af00      	add	r7, sp, #0
 800303e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8003040:	bf00      	nop
 8003042:	370c      	adds	r7, #12
 8003044:	46bd      	mov	sp, r7
 8003046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304a:	4770      	bx	lr

0800304c <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800304c:	b480      	push	{r7}
 800304e:	b083      	sub	sp, #12
 8003050:	af00      	add	r7, sp, #0
 8003052:	6078      	str	r0, [r7, #4]
 8003054:	460b      	mov	r3, r1
 8003056:	70fb      	strb	r3, [r7, #3]
 8003058:	4613      	mov	r3, r2
 800305a:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800305c:	bf00      	nop
 800305e:	370c      	adds	r7, #12
 8003060:	46bd      	mov	sp, r7
 8003062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003066:	4770      	bx	lr

08003068 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003068:	b480      	push	{r7}
 800306a:	b083      	sub	sp, #12
 800306c:	af00      	add	r7, sp, #0
 800306e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8003070:	bf00      	nop
 8003072:	370c      	adds	r7, #12
 8003074:	46bd      	mov	sp, r7
 8003076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307a:	4770      	bx	lr

0800307c <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800307c:	b480      	push	{r7}
 800307e:	b083      	sub	sp, #12
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8003084:	bf00      	nop
 8003086:	370c      	adds	r7, #12
 8003088:	46bd      	mov	sp, r7
 800308a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308e:	4770      	bx	lr

08003090 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003090:	b480      	push	{r7}
 8003092:	b083      	sub	sp, #12
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8003098:	bf00      	nop
 800309a:	370c      	adds	r7, #12
 800309c:	46bd      	mov	sp, r7
 800309e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a2:	4770      	bx	lr

080030a4 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 80030a4:	b580      	push	{r7, lr}
 80030a6:	b086      	sub	sp, #24
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	60f8      	str	r0, [r7, #12]
 80030ac:	60b9      	str	r1, [r7, #8]
 80030ae:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030b4:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 80030b6:	68bb      	ldr	r3, [r7, #8]
 80030b8:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80030c0:	2b01      	cmp	r3, #1
 80030c2:	d101      	bne.n	80030c8 <I2C_Slave_ISR_IT+0x24>
 80030c4:	2302      	movs	r3, #2
 80030c6:	e0ed      	b.n	80032a4 <I2C_Slave_ISR_IT+0x200>
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	2201      	movs	r2, #1
 80030cc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80030d0:	693b      	ldr	r3, [r7, #16]
 80030d2:	095b      	lsrs	r3, r3, #5
 80030d4:	f003 0301 	and.w	r3, r3, #1
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d00a      	beq.n	80030f2 <I2C_Slave_ISR_IT+0x4e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	095b      	lsrs	r3, r3, #5
 80030e0:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d004      	beq.n	80030f2 <I2C_Slave_ISR_IT+0x4e>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 80030e8:	6939      	ldr	r1, [r7, #16]
 80030ea:	68f8      	ldr	r0, [r7, #12]
 80030ec:	f000 f9c0 	bl	8003470 <I2C_ITSlaveCplt>
 80030f0:	e0d3      	b.n	800329a <I2C_Slave_ISR_IT+0x1f6>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80030f2:	693b      	ldr	r3, [r7, #16]
 80030f4:	091b      	lsrs	r3, r3, #4
 80030f6:	f003 0301 	and.w	r3, r3, #1
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d04d      	beq.n	800319a <I2C_Slave_ISR_IT+0xf6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	091b      	lsrs	r3, r3, #4
 8003102:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8003106:	2b00      	cmp	r3, #0
 8003108:	d047      	beq.n	800319a <I2C_Slave_ISR_IT+0xf6>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800310e:	b29b      	uxth	r3, r3
 8003110:	2b00      	cmp	r3, #0
 8003112:	d128      	bne.n	8003166 <I2C_Slave_ISR_IT+0xc2>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800311a:	b2db      	uxtb	r3, r3
 800311c:	2b28      	cmp	r3, #40	@ 0x28
 800311e:	d108      	bne.n	8003132 <I2C_Slave_ISR_IT+0x8e>
 8003120:	697b      	ldr	r3, [r7, #20]
 8003122:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003126:	d104      	bne.n	8003132 <I2C_Slave_ISR_IT+0x8e>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8003128:	6939      	ldr	r1, [r7, #16]
 800312a:	68f8      	ldr	r0, [r7, #12]
 800312c:	f000 fb1c 	bl	8003768 <I2C_ITListenCplt>
 8003130:	e032      	b.n	8003198 <I2C_Slave_ISR_IT+0xf4>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003138:	b2db      	uxtb	r3, r3
 800313a:	2b29      	cmp	r3, #41	@ 0x29
 800313c:	d10e      	bne.n	800315c <I2C_Slave_ISR_IT+0xb8>
 800313e:	697b      	ldr	r3, [r7, #20]
 8003140:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003144:	d00a      	beq.n	800315c <I2C_Slave_ISR_IT+0xb8>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	2210      	movs	r2, #16
 800314c:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 800314e:	68f8      	ldr	r0, [r7, #12]
 8003150:	f000 fc77 	bl	8003a42 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8003154:	68f8      	ldr	r0, [r7, #12]
 8003156:	f000 f92d 	bl	80033b4 <I2C_ITSlaveSeqCplt>
 800315a:	e01d      	b.n	8003198 <I2C_Slave_ISR_IT+0xf4>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	2210      	movs	r2, #16
 8003162:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8003164:	e096      	b.n	8003294 <I2C_Slave_ISR_IT+0x1f0>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	2210      	movs	r2, #16
 800316c:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003172:	f043 0204 	orr.w	r2, r3, #4
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800317a:	697b      	ldr	r3, [r7, #20]
 800317c:	2b00      	cmp	r3, #0
 800317e:	d004      	beq.n	800318a <I2C_Slave_ISR_IT+0xe6>
 8003180:	697b      	ldr	r3, [r7, #20]
 8003182:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003186:	f040 8085 	bne.w	8003294 <I2C_Slave_ISR_IT+0x1f0>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800318e:	4619      	mov	r1, r3
 8003190:	68f8      	ldr	r0, [r7, #12]
 8003192:	f000 fb3f 	bl	8003814 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8003196:	e07d      	b.n	8003294 <I2C_Slave_ISR_IT+0x1f0>
 8003198:	e07c      	b.n	8003294 <I2C_Slave_ISR_IT+0x1f0>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800319a:	693b      	ldr	r3, [r7, #16]
 800319c:	089b      	lsrs	r3, r3, #2
 800319e:	f003 0301 	and.w	r3, r3, #1
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d030      	beq.n	8003208 <I2C_Slave_ISR_IT+0x164>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	089b      	lsrs	r3, r3, #2
 80031aa:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d02a      	beq.n	8003208 <I2C_Slave_ISR_IT+0x164>
  {
    if (hi2c->XferCount > 0U)
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80031b6:	b29b      	uxth	r3, r3
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d018      	beq.n	80031ee <I2C_Slave_ISR_IT+0x14a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031c6:	b2d2      	uxtb	r2, r2
 80031c8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031ce:	1c5a      	adds	r2, r3, #1
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80031d8:	3b01      	subs	r3, #1
 80031da:	b29a      	uxth	r2, r3
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80031e4:	b29b      	uxth	r3, r3
 80031e6:	3b01      	subs	r3, #1
 80031e8:	b29a      	uxth	r2, r3
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80031f2:	b29b      	uxth	r3, r3
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d14f      	bne.n	8003298 <I2C_Slave_ISR_IT+0x1f4>
 80031f8:	697b      	ldr	r3, [r7, #20]
 80031fa:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80031fe:	d04b      	beq.n	8003298 <I2C_Slave_ISR_IT+0x1f4>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8003200:	68f8      	ldr	r0, [r7, #12]
 8003202:	f000 f8d7 	bl	80033b4 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8003206:	e047      	b.n	8003298 <I2C_Slave_ISR_IT+0x1f4>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8003208:	693b      	ldr	r3, [r7, #16]
 800320a:	08db      	lsrs	r3, r3, #3
 800320c:	f003 0301 	and.w	r3, r3, #1
 8003210:	2b00      	cmp	r3, #0
 8003212:	d00a      	beq.n	800322a <I2C_Slave_ISR_IT+0x186>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	08db      	lsrs	r3, r3, #3
 8003218:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800321c:	2b00      	cmp	r3, #0
 800321e:	d004      	beq.n	800322a <I2C_Slave_ISR_IT+0x186>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8003220:	6939      	ldr	r1, [r7, #16]
 8003222:	68f8      	ldr	r0, [r7, #12]
 8003224:	f000 f842 	bl	80032ac <I2C_ITAddrCplt>
 8003228:	e037      	b.n	800329a <I2C_Slave_ISR_IT+0x1f6>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800322a:	693b      	ldr	r3, [r7, #16]
 800322c:	085b      	lsrs	r3, r3, #1
 800322e:	f003 0301 	and.w	r3, r3, #1
 8003232:	2b00      	cmp	r3, #0
 8003234:	d031      	beq.n	800329a <I2C_Slave_ISR_IT+0x1f6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	085b      	lsrs	r3, r3, #1
 800323a:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800323e:	2b00      	cmp	r3, #0
 8003240:	d02b      	beq.n	800329a <I2C_Slave_ISR_IT+0x1f6>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003246:	b29b      	uxth	r3, r3
 8003248:	2b00      	cmp	r3, #0
 800324a:	d018      	beq.n	800327e <I2C_Slave_ISR_IT+0x1da>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003250:	781a      	ldrb	r2, [r3, #0]
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800325c:	1c5a      	adds	r2, r3, #1
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003266:	b29b      	uxth	r3, r3
 8003268:	3b01      	subs	r3, #1
 800326a:	b29a      	uxth	r2, r3
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003274:	3b01      	subs	r3, #1
 8003276:	b29a      	uxth	r2, r3
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	851a      	strh	r2, [r3, #40]	@ 0x28
 800327c:	e00d      	b.n	800329a <I2C_Slave_ISR_IT+0x1f6>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 800327e:	697b      	ldr	r3, [r7, #20]
 8003280:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003284:	d002      	beq.n	800328c <I2C_Slave_ISR_IT+0x1e8>
 8003286:	697b      	ldr	r3, [r7, #20]
 8003288:	2b00      	cmp	r3, #0
 800328a:	d106      	bne.n	800329a <I2C_Slave_ISR_IT+0x1f6>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800328c:	68f8      	ldr	r0, [r7, #12]
 800328e:	f000 f891 	bl	80033b4 <I2C_ITSlaveSeqCplt>
 8003292:	e002      	b.n	800329a <I2C_Slave_ISR_IT+0x1f6>
    if (hi2c->XferCount == 0U)
 8003294:	bf00      	nop
 8003296:	e000      	b.n	800329a <I2C_Slave_ISR_IT+0x1f6>
    if ((hi2c->XferCount == 0U) && \
 8003298:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	2200      	movs	r2, #0
 800329e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80032a2:	2300      	movs	r3, #0
}
 80032a4:	4618      	mov	r0, r3
 80032a6:	3718      	adds	r7, #24
 80032a8:	46bd      	mov	sp, r7
 80032aa:	bd80      	pop	{r7, pc}

080032ac <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	b084      	sub	sp, #16
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
 80032b4:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80032bc:	b2db      	uxtb	r3, r3
 80032be:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80032c2:	2b28      	cmp	r3, #40	@ 0x28
 80032c4:	d16a      	bne.n	800339c <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	699b      	ldr	r3, [r3, #24]
 80032cc:	0c1b      	lsrs	r3, r3, #16
 80032ce:	b2db      	uxtb	r3, r3
 80032d0:	f003 0301 	and.w	r3, r3, #1
 80032d4:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	699b      	ldr	r3, [r3, #24]
 80032dc:	0c1b      	lsrs	r3, r3, #16
 80032de:	b29b      	uxth	r3, r3
 80032e0:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 80032e4:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	689b      	ldr	r3, [r3, #8]
 80032ec:	b29b      	uxth	r3, r3
 80032ee:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80032f2:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	68db      	ldr	r3, [r3, #12]
 80032fa:	b29b      	uxth	r3, r3
 80032fc:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8003300:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	68db      	ldr	r3, [r3, #12]
 8003306:	2b02      	cmp	r3, #2
 8003308:	d138      	bne.n	800337c <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 800330a:	897b      	ldrh	r3, [r7, #10]
 800330c:	09db      	lsrs	r3, r3, #7
 800330e:	b29a      	uxth	r2, r3
 8003310:	89bb      	ldrh	r3, [r7, #12]
 8003312:	4053      	eors	r3, r2
 8003314:	b29b      	uxth	r3, r3
 8003316:	f003 0306 	and.w	r3, r3, #6
 800331a:	2b00      	cmp	r3, #0
 800331c:	d11c      	bne.n	8003358 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 800331e:	897b      	ldrh	r3, [r7, #10]
 8003320:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003326:	1c5a      	adds	r2, r3, #1
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003330:	2b02      	cmp	r3, #2
 8003332:	d13b      	bne.n	80033ac <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	2200      	movs	r2, #0
 8003338:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	2208      	movs	r2, #8
 8003340:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	2200      	movs	r2, #0
 8003346:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800334a:	89ba      	ldrh	r2, [r7, #12]
 800334c:	7bfb      	ldrb	r3, [r7, #15]
 800334e:	4619      	mov	r1, r3
 8003350:	6878      	ldr	r0, [r7, #4]
 8003352:	f7ff fe7b 	bl	800304c <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8003356:	e029      	b.n	80033ac <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8003358:	893b      	ldrh	r3, [r7, #8]
 800335a:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800335c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003360:	6878      	ldr	r0, [r7, #4]
 8003362:	f000 fbb0 	bl	8003ac6 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	2200      	movs	r2, #0
 800336a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800336e:	89ba      	ldrh	r2, [r7, #12]
 8003370:	7bfb      	ldrb	r3, [r7, #15]
 8003372:	4619      	mov	r1, r3
 8003374:	6878      	ldr	r0, [r7, #4]
 8003376:	f7ff fe69 	bl	800304c <HAL_I2C_AddrCallback>
}
 800337a:	e017      	b.n	80033ac <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800337c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003380:	6878      	ldr	r0, [r7, #4]
 8003382:	f000 fba0 	bl	8003ac6 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	2200      	movs	r2, #0
 800338a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800338e:	89ba      	ldrh	r2, [r7, #12]
 8003390:	7bfb      	ldrb	r3, [r7, #15]
 8003392:	4619      	mov	r1, r3
 8003394:	6878      	ldr	r0, [r7, #4]
 8003396:	f7ff fe59 	bl	800304c <HAL_I2C_AddrCallback>
}
 800339a:	e007      	b.n	80033ac <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	2208      	movs	r2, #8
 80033a2:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	2200      	movs	r2, #0
 80033a8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 80033ac:	bf00      	nop
 80033ae:	3710      	adds	r7, #16
 80033b0:	46bd      	mov	sp, r7
 80033b2:	bd80      	pop	{r7, pc}

080033b4 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 80033b4:	b580      	push	{r7, lr}
 80033b6:	b084      	sub	sp, #16
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	2200      	movs	r2, #0
 80033c8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

#if defined(HAL_DMA_MODULE_ENABLED)
  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	0b9b      	lsrs	r3, r3, #14
 80033d0:	f003 0301 	and.w	r3, r3, #1
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d008      	beq.n	80033ea <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	681a      	ldr	r2, [r3, #0]
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80033e6:	601a      	str	r2, [r3, #0]
 80033e8:	e00d      	b.n	8003406 <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	0bdb      	lsrs	r3, r3, #15
 80033ee:	f003 0301 	and.w	r3, r3, #1
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d007      	beq.n	8003406 <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	681a      	ldr	r2, [r3, #0]
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003404:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800340c:	b2db      	uxtb	r3, r3
 800340e:	2b29      	cmp	r3, #41	@ 0x29
 8003410:	d112      	bne.n	8003438 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	2228      	movs	r2, #40	@ 0x28
 8003416:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	2221      	movs	r2, #33	@ 0x21
 800341e:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8003420:	2101      	movs	r1, #1
 8003422:	6878      	ldr	r0, [r7, #4]
 8003424:	f000 fb4f 	bl	8003ac6 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	2200      	movs	r2, #0
 800342c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003430:	6878      	ldr	r0, [r7, #4]
 8003432:	f7ff fdf7 	bl	8003024 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8003436:	e017      	b.n	8003468 <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800343e:	b2db      	uxtb	r3, r3
 8003440:	2b2a      	cmp	r3, #42	@ 0x2a
 8003442:	d111      	bne.n	8003468 <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	2228      	movs	r2, #40	@ 0x28
 8003448:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	2222      	movs	r2, #34	@ 0x22
 8003450:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8003452:	2102      	movs	r1, #2
 8003454:	6878      	ldr	r0, [r7, #4]
 8003456:	f000 fb36 	bl	8003ac6 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	2200      	movs	r2, #0
 800345e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003462:	6878      	ldr	r0, [r7, #4]
 8003464:	f7ff fde8 	bl	8003038 <HAL_I2C_SlaveRxCpltCallback>
}
 8003468:	bf00      	nop
 800346a:	3710      	adds	r7, #16
 800346c:	46bd      	mov	sp, r7
 800346e:	bd80      	pop	{r7, pc}

08003470 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003470:	b590      	push	{r4, r7, lr}
 8003472:	b087      	sub	sp, #28
 8003474:	af00      	add	r7, sp, #0
 8003476:	6078      	str	r0, [r7, #4]
 8003478:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8003482:	683b      	ldr	r3, [r7, #0]
 8003484:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800348a:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003492:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	2220      	movs	r2, #32
 800349a:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800349c:	7afb      	ldrb	r3, [r7, #11]
 800349e:	2b21      	cmp	r3, #33	@ 0x21
 80034a0:	d002      	beq.n	80034a8 <I2C_ITSlaveCplt+0x38>
 80034a2:	7afb      	ldrb	r3, [r7, #11]
 80034a4:	2b29      	cmp	r3, #41	@ 0x29
 80034a6:	d108      	bne.n	80034ba <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 80034a8:	f248 0101 	movw	r1, #32769	@ 0x8001
 80034ac:	6878      	ldr	r0, [r7, #4]
 80034ae:	f000 fb0a 	bl	8003ac6 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	2221      	movs	r2, #33	@ 0x21
 80034b6:	631a      	str	r2, [r3, #48]	@ 0x30
 80034b8:	e019      	b.n	80034ee <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80034ba:	7afb      	ldrb	r3, [r7, #11]
 80034bc:	2b22      	cmp	r3, #34	@ 0x22
 80034be:	d002      	beq.n	80034c6 <I2C_ITSlaveCplt+0x56>
 80034c0:	7afb      	ldrb	r3, [r7, #11]
 80034c2:	2b2a      	cmp	r3, #42	@ 0x2a
 80034c4:	d108      	bne.n	80034d8 <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 80034c6:	f248 0102 	movw	r1, #32770	@ 0x8002
 80034ca:	6878      	ldr	r0, [r7, #4]
 80034cc:	f000 fafb 	bl	8003ac6 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	2222      	movs	r2, #34	@ 0x22
 80034d4:	631a      	str	r2, [r3, #48]	@ 0x30
 80034d6:	e00a      	b.n	80034ee <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 80034d8:	7afb      	ldrb	r3, [r7, #11]
 80034da:	2b28      	cmp	r3, #40	@ 0x28
 80034dc:	d107      	bne.n	80034ee <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 80034de:	f248 0103 	movw	r1, #32771	@ 0x8003
 80034e2:	6878      	ldr	r0, [r7, #4]
 80034e4:	f000 faef 	bl	8003ac6 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	2200      	movs	r2, #0
 80034ec:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	685a      	ldr	r2, [r3, #4]
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80034fc:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	6859      	ldr	r1, [r3, #4]
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681a      	ldr	r2, [r3, #0]
 8003508:	4b95      	ldr	r3, [pc, #596]	@ (8003760 <I2C_ITSlaveCplt+0x2f0>)
 800350a:	400b      	ands	r3, r1
 800350c:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800350e:	6878      	ldr	r0, [r7, #4]
 8003510:	f000 fa97 	bl	8003a42 <I2C_Flush_TXDR>

#if defined(HAL_DMA_MODULE_ENABLED)
  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8003514:	693b      	ldr	r3, [r7, #16]
 8003516:	0b9b      	lsrs	r3, r3, #14
 8003518:	f003 0301 	and.w	r3, r3, #1
 800351c:	2b00      	cmp	r3, #0
 800351e:	d01c      	beq.n	800355a <I2C_ITSlaveCplt+0xea>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	681a      	ldr	r2, [r3, #0]
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800352e:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003534:	2b00      	cmp	r3, #0
 8003536:	d032      	beq.n	800359e <I2C_ITSlaveCplt+0x12e>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003540:	b29c      	uxth	r4, r3
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003546:	4618      	mov	r0, r3
 8003548:	f7ff f98b 	bl	8002862 <HAL_DMAEx_GetFifoLevel>
 800354c:	4603      	mov	r3, r0
 800354e:	b29b      	uxth	r3, r3
 8003550:	4423      	add	r3, r4
 8003552:	b29a      	uxth	r2, r3
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003558:	e021      	b.n	800359e <I2C_ITSlaveCplt+0x12e>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800355a:	693b      	ldr	r3, [r7, #16]
 800355c:	0bdb      	lsrs	r3, r3, #15
 800355e:	f003 0301 	and.w	r3, r3, #1
 8003562:	2b00      	cmp	r3, #0
 8003564:	d01b      	beq.n	800359e <I2C_ITSlaveCplt+0x12e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	681a      	ldr	r2, [r3, #0]
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003574:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800357a:	2b00      	cmp	r3, #0
 800357c:	d00f      	beq.n	800359e <I2C_ITSlaveCplt+0x12e>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003586:	b29c      	uxth	r4, r3
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800358c:	4618      	mov	r0, r3
 800358e:	f7ff f968 	bl	8002862 <HAL_DMAEx_GetFifoLevel>
 8003592:	4603      	mov	r3, r0
 8003594:	b29b      	uxth	r3, r3
 8003596:	4423      	add	r3, r4
 8003598:	b29a      	uxth	r2, r3
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    /* Do nothing */
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 800359e:	697b      	ldr	r3, [r7, #20]
 80035a0:	089b      	lsrs	r3, r3, #2
 80035a2:	f003 0301 	and.w	r3, r3, #1
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d020      	beq.n	80035ec <I2C_ITSlaveCplt+0x17c>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 80035aa:	697b      	ldr	r3, [r7, #20]
 80035ac:	f023 0304 	bic.w	r3, r3, #4
 80035b0:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035bc:	b2d2      	uxtb	r2, r2
 80035be:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035c4:	1c5a      	adds	r2, r3, #1
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	625a      	str	r2, [r3, #36]	@ 0x24

    if (hi2c->XferSize > 0U)
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d00c      	beq.n	80035ec <I2C_ITSlaveCplt+0x17c>
    {
      hi2c->XferSize--;
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80035d6:	3b01      	subs	r3, #1
 80035d8:	b29a      	uxth	r2, r3
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80035e2:	b29b      	uxth	r3, r3
 80035e4:	3b01      	subs	r3, #1
 80035e6:	b29a      	uxth	r2, r3
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80035f0:	b29b      	uxth	r3, r3
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d005      	beq.n	8003602 <I2C_ITSlaveCplt+0x192>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035fa:	f043 0204 	orr.w	r2, r3, #4
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8003602:	697b      	ldr	r3, [r7, #20]
 8003604:	091b      	lsrs	r3, r3, #4
 8003606:	f003 0301 	and.w	r3, r3, #1
 800360a:	2b00      	cmp	r3, #0
 800360c:	d04a      	beq.n	80036a4 <I2C_ITSlaveCplt+0x234>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 800360e:	693b      	ldr	r3, [r7, #16]
 8003610:	091b      	lsrs	r3, r3, #4
 8003612:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8003616:	2b00      	cmp	r3, #0
 8003618:	d044      	beq.n	80036a4 <I2C_ITSlaveCplt+0x234>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800361e:	b29b      	uxth	r3, r3
 8003620:	2b00      	cmp	r3, #0
 8003622:	d128      	bne.n	8003676 <I2C_ITSlaveCplt+0x206>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800362a:	b2db      	uxtb	r3, r3
 800362c:	2b28      	cmp	r3, #40	@ 0x28
 800362e:	d108      	bne.n	8003642 <I2C_ITSlaveCplt+0x1d2>
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003636:	d104      	bne.n	8003642 <I2C_ITSlaveCplt+0x1d2>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8003638:	6979      	ldr	r1, [r7, #20]
 800363a:	6878      	ldr	r0, [r7, #4]
 800363c:	f000 f894 	bl	8003768 <I2C_ITListenCplt>
 8003640:	e030      	b.n	80036a4 <I2C_ITSlaveCplt+0x234>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003648:	b2db      	uxtb	r3, r3
 800364a:	2b29      	cmp	r3, #41	@ 0x29
 800364c:	d10e      	bne.n	800366c <I2C_ITSlaveCplt+0x1fc>
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003654:	d00a      	beq.n	800366c <I2C_ITSlaveCplt+0x1fc>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	2210      	movs	r2, #16
 800365c:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 800365e:	6878      	ldr	r0, [r7, #4]
 8003660:	f000 f9ef 	bl	8003a42 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8003664:	6878      	ldr	r0, [r7, #4]
 8003666:	f7ff fea5 	bl	80033b4 <I2C_ITSlaveSeqCplt>
 800366a:	e01b      	b.n	80036a4 <I2C_ITSlaveCplt+0x234>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	2210      	movs	r2, #16
 8003672:	61da      	str	r2, [r3, #28]
 8003674:	e016      	b.n	80036a4 <I2C_ITSlaveCplt+0x234>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	2210      	movs	r2, #16
 800367c:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003682:	f043 0204 	orr.w	r2, r3, #4
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	2b00      	cmp	r3, #0
 800368e:	d003      	beq.n	8003698 <I2C_ITSlaveCplt+0x228>
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003696:	d105      	bne.n	80036a4 <I2C_ITSlaveCplt+0x234>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800369c:	4619      	mov	r1, r3
 800369e:	6878      	ldr	r0, [r7, #4]
 80036a0:	f000 f8b8 	bl	8003814 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	2200      	movs	r2, #0
 80036a8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	2200      	movs	r2, #0
 80036b0:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d010      	beq.n	80036dc <I2C_ITSlaveCplt+0x26c>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036be:	4619      	mov	r1, r3
 80036c0:	6878      	ldr	r0, [r7, #4]
 80036c2:	f000 f8a7 	bl	8003814 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80036cc:	b2db      	uxtb	r3, r3
 80036ce:	2b28      	cmp	r3, #40	@ 0x28
 80036d0:	d141      	bne.n	8003756 <I2C_ITSlaveCplt+0x2e6>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 80036d2:	6979      	ldr	r1, [r7, #20]
 80036d4:	6878      	ldr	r0, [r7, #4]
 80036d6:	f000 f847 	bl	8003768 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80036da:	e03c      	b.n	8003756 <I2C_ITSlaveCplt+0x2e6>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036e0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80036e4:	d014      	beq.n	8003710 <I2C_ITSlaveCplt+0x2a0>
    I2C_ITSlaveSeqCplt(hi2c);
 80036e6:	6878      	ldr	r0, [r7, #4]
 80036e8:	f7ff fe64 	bl	80033b4 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	4a1d      	ldr	r2, [pc, #116]	@ (8003764 <I2C_ITSlaveCplt+0x2f4>)
 80036f0:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	2220      	movs	r2, #32
 80036f6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	2200      	movs	r2, #0
 80036fe:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	2200      	movs	r2, #0
 8003704:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8003708:	6878      	ldr	r0, [r7, #4]
 800370a:	f7ff fcad 	bl	8003068 <HAL_I2C_ListenCpltCallback>
}
 800370e:	e022      	b.n	8003756 <I2C_ITSlaveCplt+0x2e6>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003716:	b2db      	uxtb	r3, r3
 8003718:	2b22      	cmp	r3, #34	@ 0x22
 800371a:	d10e      	bne.n	800373a <I2C_ITSlaveCplt+0x2ca>
    hi2c->State = HAL_I2C_STATE_READY;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	2220      	movs	r2, #32
 8003720:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	2200      	movs	r2, #0
 8003728:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	2200      	movs	r2, #0
 800372e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003732:	6878      	ldr	r0, [r7, #4]
 8003734:	f7ff fc80 	bl	8003038 <HAL_I2C_SlaveRxCpltCallback>
}
 8003738:	e00d      	b.n	8003756 <I2C_ITSlaveCplt+0x2e6>
    hi2c->State = HAL_I2C_STATE_READY;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	2220      	movs	r2, #32
 800373e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	2200      	movs	r2, #0
 8003746:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2200      	movs	r2, #0
 800374c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003750:	6878      	ldr	r0, [r7, #4]
 8003752:	f7ff fc67 	bl	8003024 <HAL_I2C_SlaveTxCpltCallback>
}
 8003756:	bf00      	nop
 8003758:	371c      	adds	r7, #28
 800375a:	46bd      	mov	sp, r7
 800375c:	bd90      	pop	{r4, r7, pc}
 800375e:	bf00      	nop
 8003760:	fe00e800 	.word	0xfe00e800
 8003764:	ffff0000 	.word	0xffff0000

08003768 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003768:	b580      	push	{r7, lr}
 800376a:	b082      	sub	sp, #8
 800376c:	af00      	add	r7, sp, #0
 800376e:	6078      	str	r0, [r7, #4]
 8003770:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	4a26      	ldr	r2, [pc, #152]	@ (8003810 <I2C_ITListenCplt+0xa8>)
 8003776:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	2200      	movs	r2, #0
 800377c:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	2220      	movs	r2, #32
 8003782:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	2200      	movs	r2, #0
 800378a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	2200      	movs	r2, #0
 8003792:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8003794:	683b      	ldr	r3, [r7, #0]
 8003796:	089b      	lsrs	r3, r3, #2
 8003798:	f003 0301 	and.w	r3, r3, #1
 800379c:	2b00      	cmp	r3, #0
 800379e:	d022      	beq.n	80037e6 <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037aa:	b2d2      	uxtb	r2, r2
 80037ac:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037b2:	1c5a      	adds	r2, r3, #1
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	625a      	str	r2, [r3, #36]	@ 0x24

    if (hi2c->XferSize > 0U)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d012      	beq.n	80037e6 <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80037c4:	3b01      	subs	r3, #1
 80037c6:	b29a      	uxth	r2, r3
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80037d0:	b29b      	uxth	r3, r3
 80037d2:	3b01      	subs	r3, #1
 80037d4:	b29a      	uxth	r2, r3
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037de:	f043 0204 	orr.w	r2, r3, #4
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80037e6:	f248 0103 	movw	r1, #32771	@ 0x8003
 80037ea:	6878      	ldr	r0, [r7, #4]
 80037ec:	f000 f96b 	bl	8003ac6 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	2210      	movs	r2, #16
 80037f6:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	2200      	movs	r2, #0
 80037fc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8003800:	6878      	ldr	r0, [r7, #4]
 8003802:	f7ff fc31 	bl	8003068 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8003806:	bf00      	nop
 8003808:	3708      	adds	r7, #8
 800380a:	46bd      	mov	sp, r7
 800380c:	bd80      	pop	{r7, pc}
 800380e:	bf00      	nop
 8003810:	ffff0000 	.word	0xffff0000

08003814 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8003814:	b580      	push	{r7, lr}
 8003816:	b084      	sub	sp, #16
 8003818:	af00      	add	r7, sp, #0
 800381a:	6078      	str	r0, [r7, #4]
 800381c:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003824:	73fb      	strb	r3, [r7, #15]
#if defined(HAL_DMA_MODULE_ENABLED)
  uint32_t tmppreviousstate;
#endif /* HAL_DMA_MODULE_ENABLED */

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	2200      	movs	r2, #0
 800382a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	4a6d      	ldr	r2, [pc, #436]	@ (80039e8 <I2C_ITError+0x1d4>)
 8003832:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	2200      	movs	r2, #0
 8003838:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800383e:	683b      	ldr	r3, [r7, #0]
 8003840:	431a      	orrs	r2, r3
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8003846:	7bfb      	ldrb	r3, [r7, #15]
 8003848:	2b28      	cmp	r3, #40	@ 0x28
 800384a:	d005      	beq.n	8003858 <I2C_ITError+0x44>
 800384c:	7bfb      	ldrb	r3, [r7, #15]
 800384e:	2b29      	cmp	r3, #41	@ 0x29
 8003850:	d002      	beq.n	8003858 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8003852:	7bfb      	ldrb	r3, [r7, #15]
 8003854:	2b2a      	cmp	r3, #42	@ 0x2a
 8003856:	d10b      	bne.n	8003870 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8003858:	2103      	movs	r1, #3
 800385a:	6878      	ldr	r0, [r7, #4]
 800385c:	f000 f933 	bl	8003ac6 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	2228      	movs	r2, #40	@ 0x28
 8003864:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	4a60      	ldr	r2, [pc, #384]	@ (80039ec <I2C_ITError+0x1d8>)
 800386c:	635a      	str	r2, [r3, #52]	@ 0x34
 800386e:	e030      	b.n	80038d2 <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8003870:	f248 0103 	movw	r1, #32771	@ 0x8003
 8003874:	6878      	ldr	r0, [r7, #4]
 8003876:	f000 f926 	bl	8003ac6 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800387a:	6878      	ldr	r0, [r7, #4]
 800387c:	f000 f8e1 	bl	8003a42 <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003886:	b2db      	uxtb	r3, r3
 8003888:	2b60      	cmp	r3, #96	@ 0x60
 800388a:	d01f      	beq.n	80038cc <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	2220      	movs	r2, #32
 8003890:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	699b      	ldr	r3, [r3, #24]
 800389a:	f003 0320 	and.w	r3, r3, #32
 800389e:	2b20      	cmp	r3, #32
 80038a0:	d114      	bne.n	80038cc <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	699b      	ldr	r3, [r3, #24]
 80038a8:	f003 0310 	and.w	r3, r3, #16
 80038ac:	2b10      	cmp	r3, #16
 80038ae:	d109      	bne.n	80038c4 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	2210      	movs	r2, #16
 80038b6:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038bc:	f043 0204 	orr.w	r2, r3, #4
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	2220      	movs	r2, #32
 80038ca:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	2200      	movs	r2, #0
 80038d0:	635a      	str	r2, [r3, #52]	@ 0x34
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038d6:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d039      	beq.n	8003954 <I2C_ITError+0x140>
 80038e0:	68bb      	ldr	r3, [r7, #8]
 80038e2:	2b11      	cmp	r3, #17
 80038e4:	d002      	beq.n	80038ec <I2C_ITError+0xd8>
 80038e6:	68bb      	ldr	r3, [r7, #8]
 80038e8:	2b21      	cmp	r3, #33	@ 0x21
 80038ea:	d133      	bne.n	8003954 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80038f6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80038fa:	d107      	bne.n	800390c <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	681a      	ldr	r2, [r3, #0]
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800390a:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003910:	4618      	mov	r0, r3
 8003912:	f7fe ff98 	bl	8002846 <HAL_DMA_GetState>
 8003916:	4603      	mov	r3, r0
 8003918:	2b01      	cmp	r3, #1
 800391a:	d017      	beq.n	800394c <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003920:	4a33      	ldr	r2, [pc, #204]	@ (80039f0 <I2C_ITError+0x1dc>)
 8003922:	66da      	str	r2, [r3, #108]	@ 0x6c

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	2200      	movs	r2, #0
 8003928:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003930:	4618      	mov	r0, r3
 8003932:	f7fe ff5f 	bl	80027f4 <HAL_DMA_Abort_IT>
 8003936:	4603      	mov	r3, r0
 8003938:	2b00      	cmp	r3, #0
 800393a:	d04d      	beq.n	80039d8 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003940:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003942:	687a      	ldr	r2, [r7, #4]
 8003944:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003946:	4610      	mov	r0, r2
 8003948:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800394a:	e045      	b.n	80039d8 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800394c:	6878      	ldr	r0, [r7, #4]
 800394e:	f000 f851 	bl	80039f4 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003952:	e041      	b.n	80039d8 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003958:	2b00      	cmp	r3, #0
 800395a:	d039      	beq.n	80039d0 <I2C_ITError+0x1bc>
 800395c:	68bb      	ldr	r3, [r7, #8]
 800395e:	2b12      	cmp	r3, #18
 8003960:	d002      	beq.n	8003968 <I2C_ITError+0x154>
 8003962:	68bb      	ldr	r3, [r7, #8]
 8003964:	2b22      	cmp	r3, #34	@ 0x22
 8003966:	d133      	bne.n	80039d0 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003972:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003976:	d107      	bne.n	8003988 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	681a      	ldr	r2, [r3, #0]
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003986:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800398c:	4618      	mov	r0, r3
 800398e:	f7fe ff5a 	bl	8002846 <HAL_DMA_GetState>
 8003992:	4603      	mov	r3, r0
 8003994:	2b01      	cmp	r3, #1
 8003996:	d017      	beq.n	80039c8 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800399c:	4a14      	ldr	r2, [pc, #80]	@ (80039f0 <I2C_ITError+0x1dc>)
 800399e:	66da      	str	r2, [r3, #108]	@ 0x6c

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2200      	movs	r2, #0
 80039a4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80039ac:	4618      	mov	r0, r3
 80039ae:	f7fe ff21 	bl	80027f4 <HAL_DMA_Abort_IT>
 80039b2:	4603      	mov	r3, r0
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d011      	beq.n	80039dc <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80039bc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80039be:	687a      	ldr	r2, [r7, #4]
 80039c0:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80039c2:	4610      	mov	r0, r2
 80039c4:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80039c6:	e009      	b.n	80039dc <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80039c8:	6878      	ldr	r0, [r7, #4]
 80039ca:	f000 f813 	bl	80039f4 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80039ce:	e005      	b.n	80039dc <I2C_ITError+0x1c8>
    }
  }
  else
#endif /* HAL_DMA_MODULE_ENABLED */
  {
    I2C_TreatErrorCallback(hi2c);
 80039d0:	6878      	ldr	r0, [r7, #4]
 80039d2:	f000 f80f 	bl	80039f4 <I2C_TreatErrorCallback>
  }
}
 80039d6:	e002      	b.n	80039de <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80039d8:	bf00      	nop
 80039da:	e000      	b.n	80039de <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80039dc:	bf00      	nop
}
 80039de:	bf00      	nop
 80039e0:	3710      	adds	r7, #16
 80039e2:	46bd      	mov	sp, r7
 80039e4:	bd80      	pop	{r7, pc}
 80039e6:	bf00      	nop
 80039e8:	ffff0000 	.word	0xffff0000
 80039ec:	080030a5 	.word	0x080030a5
 80039f0:	08003a8b 	.word	0x08003a8b

080039f4 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80039f4:	b580      	push	{r7, lr}
 80039f6:	b082      	sub	sp, #8
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003a02:	b2db      	uxtb	r3, r3
 8003a04:	2b60      	cmp	r3, #96	@ 0x60
 8003a06:	d10e      	bne.n	8003a26 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	2220      	movs	r2, #32
 8003a0c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	2200      	movs	r2, #0
 8003a14:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	2200      	movs	r2, #0
 8003a1a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8003a1e:	6878      	ldr	r0, [r7, #4]
 8003a20:	f7ff fb36 	bl	8003090 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003a24:	e009      	b.n	8003a3a <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	2200      	movs	r2, #0
 8003a2a:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	2200      	movs	r2, #0
 8003a30:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8003a34:	6878      	ldr	r0, [r7, #4]
 8003a36:	f7ff fb21 	bl	800307c <HAL_I2C_ErrorCallback>
}
 8003a3a:	bf00      	nop
 8003a3c:	3708      	adds	r7, #8
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	bd80      	pop	{r7, pc}

08003a42 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003a42:	b480      	push	{r7}
 8003a44:	b083      	sub	sp, #12
 8003a46:	af00      	add	r7, sp, #0
 8003a48:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	699b      	ldr	r3, [r3, #24]
 8003a50:	f003 0302 	and.w	r3, r3, #2
 8003a54:	2b02      	cmp	r3, #2
 8003a56:	d103      	bne.n	8003a60 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	699b      	ldr	r3, [r3, #24]
 8003a66:	f003 0301 	and.w	r3, r3, #1
 8003a6a:	2b01      	cmp	r3, #1
 8003a6c:	d007      	beq.n	8003a7e <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	699a      	ldr	r2, [r3, #24]
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f042 0201 	orr.w	r2, r2, #1
 8003a7c:	619a      	str	r2, [r3, #24]
  }
}
 8003a7e:	bf00      	nop
 8003a80:	370c      	adds	r7, #12
 8003a82:	46bd      	mov	sp, r7
 8003a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a88:	4770      	bx	lr

08003a8a <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8003a8a:	b580      	push	{r7, lr}
 8003a8c:	b084      	sub	sp, #16
 8003a8e:	af00      	add	r7, sp, #0
 8003a90:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a96:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d003      	beq.n	8003aa8 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	66da      	str	r2, [r3, #108]	@ 0x6c
  }
  if (hi2c->hdmarx != NULL)
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d003      	beq.n	8003ab8 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ab4:	2200      	movs	r2, #0
 8003ab6:	66da      	str	r2, [r3, #108]	@ 0x6c
  }

  I2C_TreatErrorCallback(hi2c);
 8003ab8:	68f8      	ldr	r0, [r7, #12]
 8003aba:	f7ff ff9b 	bl	80039f4 <I2C_TreatErrorCallback>
}
 8003abe:	bf00      	nop
 8003ac0:	3710      	adds	r7, #16
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	bd80      	pop	{r7, pc}

08003ac6 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8003ac6:	b480      	push	{r7}
 8003ac8:	b085      	sub	sp, #20
 8003aca:	af00      	add	r7, sp, #0
 8003acc:	6078      	str	r0, [r7, #4]
 8003ace:	460b      	mov	r3, r1
 8003ad0:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8003ad2:	2300      	movs	r3, #0
 8003ad4:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8003ad6:	887b      	ldrh	r3, [r7, #2]
 8003ad8:	f003 0301 	and.w	r3, r3, #1
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d00f      	beq.n	8003b00 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 8003ae6:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003aee:	b2db      	uxtb	r3, r3
 8003af0:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8003af4:	2b28      	cmp	r3, #40	@ 0x28
 8003af6:	d003      	beq.n	8003b00 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8003afe:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8003b00:	887b      	ldrh	r3, [r7, #2]
 8003b02:	f003 0302 	and.w	r3, r3, #2
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d00f      	beq.n	8003b2a <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 8003b10:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003b18:	b2db      	uxtb	r3, r3
 8003b1a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8003b1e:	2b28      	cmp	r3, #40	@ 0x28
 8003b20:	d003      	beq.n	8003b2a <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8003b28:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8003b2a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	da03      	bge.n	8003b3a <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8003b38:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8003b3a:	887b      	ldrh	r3, [r7, #2]
 8003b3c:	2b10      	cmp	r3, #16
 8003b3e:	d103      	bne.n	8003b48 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8003b46:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8003b48:	887b      	ldrh	r3, [r7, #2]
 8003b4a:	2b20      	cmp	r3, #32
 8003b4c:	d103      	bne.n	8003b56 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	f043 0320 	orr.w	r3, r3, #32
 8003b54:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8003b56:	887b      	ldrh	r3, [r7, #2]
 8003b58:	2b40      	cmp	r3, #64	@ 0x40
 8003b5a:	d103      	bne.n	8003b64 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003b62:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	6819      	ldr	r1, [r3, #0]
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	43da      	mvns	r2, r3
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	400a      	ands	r2, r1
 8003b74:	601a      	str	r2, [r3, #0]
}
 8003b76:	bf00      	nop
 8003b78:	3714      	adds	r7, #20
 8003b7a:	46bd      	mov	sp, r7
 8003b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b80:	4770      	bx	lr

08003b82 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003b82:	b480      	push	{r7}
 8003b84:	b083      	sub	sp, #12
 8003b86:	af00      	add	r7, sp, #0
 8003b88:	6078      	str	r0, [r7, #4]
 8003b8a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003b92:	b2db      	uxtb	r3, r3
 8003b94:	2b20      	cmp	r3, #32
 8003b96:	d138      	bne.n	8003c0a <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003b9e:	2b01      	cmp	r3, #1
 8003ba0:	d101      	bne.n	8003ba6 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003ba2:	2302      	movs	r3, #2
 8003ba4:	e032      	b.n	8003c0c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	2201      	movs	r2, #1
 8003baa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	2224      	movs	r2, #36	@ 0x24
 8003bb2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	681a      	ldr	r2, [r3, #0]
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f022 0201 	bic.w	r2, r2, #1
 8003bc4:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	681a      	ldr	r2, [r3, #0]
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003bd4:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	6819      	ldr	r1, [r3, #0]
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	683a      	ldr	r2, [r7, #0]
 8003be2:	430a      	orrs	r2, r1
 8003be4:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	681a      	ldr	r2, [r3, #0]
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f042 0201 	orr.w	r2, r2, #1
 8003bf4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	2220      	movs	r2, #32
 8003bfa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	2200      	movs	r2, #0
 8003c02:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003c06:	2300      	movs	r3, #0
 8003c08:	e000      	b.n	8003c0c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003c0a:	2302      	movs	r3, #2
  }
}
 8003c0c:	4618      	mov	r0, r3
 8003c0e:	370c      	adds	r7, #12
 8003c10:	46bd      	mov	sp, r7
 8003c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c16:	4770      	bx	lr

08003c18 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003c18:	b480      	push	{r7}
 8003c1a:	b085      	sub	sp, #20
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	6078      	str	r0, [r7, #4]
 8003c20:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003c28:	b2db      	uxtb	r3, r3
 8003c2a:	2b20      	cmp	r3, #32
 8003c2c:	d139      	bne.n	8003ca2 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003c34:	2b01      	cmp	r3, #1
 8003c36:	d101      	bne.n	8003c3c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003c38:	2302      	movs	r3, #2
 8003c3a:	e033      	b.n	8003ca4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	2201      	movs	r2, #1
 8003c40:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	2224      	movs	r2, #36	@ 0x24
 8003c48:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	681a      	ldr	r2, [r3, #0]
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f022 0201 	bic.w	r2, r2, #1
 8003c5a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003c6a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003c6c:	683b      	ldr	r3, [r7, #0]
 8003c6e:	021b      	lsls	r3, r3, #8
 8003c70:	68fa      	ldr	r2, [r7, #12]
 8003c72:	4313      	orrs	r3, r2
 8003c74:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	68fa      	ldr	r2, [r7, #12]
 8003c7c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	681a      	ldr	r2, [r3, #0]
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f042 0201 	orr.w	r2, r2, #1
 8003c8c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	2220      	movs	r2, #32
 8003c92:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	2200      	movs	r2, #0
 8003c9a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003c9e:	2300      	movs	r3, #0
 8003ca0:	e000      	b.n	8003ca4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003ca2:	2302      	movs	r3, #2
  }
}
 8003ca4:	4618      	mov	r0, r3
 8003ca6:	3714      	adds	r7, #20
 8003ca8:	46bd      	mov	sp, r7
 8003caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cae:	4770      	bx	lr

08003cb0 <HAL_ICACHE_ConfigAssociativityMode>:
  *            @arg ICACHE_1WAY   1-way cache (direct mapped cache)
  *            @arg ICACHE_2WAYS  2-ways set associative cache (default)
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef HAL_ICACHE_ConfigAssociativityMode(uint32_t AssociativityMode)
{
 8003cb0:	b480      	push	{r7}
 8003cb2:	b085      	sub	sp, #20
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003cb8:	2300      	movs	r3, #0
 8003cba:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 8003cbc:	4b0b      	ldr	r3, [pc, #44]	@ (8003cec <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f003 0301 	and.w	r3, r3, #1
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d002      	beq.n	8003cce <HAL_ICACHE_ConfigAssociativityMode+0x1e>
  {
    status = HAL_ERROR;
 8003cc8:	2301      	movs	r3, #1
 8003cca:	73fb      	strb	r3, [r7, #15]
 8003ccc:	e007      	b.n	8003cde <HAL_ICACHE_ConfigAssociativityMode+0x2e>
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 8003cce:	4b07      	ldr	r3, [pc, #28]	@ (8003cec <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f023 0204 	bic.w	r2, r3, #4
 8003cd6:	4905      	ldr	r1, [pc, #20]	@ (8003cec <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	4313      	orrs	r3, r2
 8003cdc:	600b      	str	r3, [r1, #0]
  }

  return status;
 8003cde:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ce0:	4618      	mov	r0, r3
 8003ce2:	3714      	adds	r7, #20
 8003ce4:	46bd      	mov	sp, r7
 8003ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cea:	4770      	bx	lr
 8003cec:	40030400 	.word	0x40030400

08003cf0 <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 8003cf0:	b480      	push	{r7}
 8003cf2:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 8003cf4:	4b05      	ldr	r3, [pc, #20]	@ (8003d0c <HAL_ICACHE_Enable+0x1c>)
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	4a04      	ldr	r2, [pc, #16]	@ (8003d0c <HAL_ICACHE_Enable+0x1c>)
 8003cfa:	f043 0301 	orr.w	r3, r3, #1
 8003cfe:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8003d00:	2300      	movs	r3, #0
}
 8003d02:	4618      	mov	r0, r3
 8003d04:	46bd      	mov	sp, r7
 8003d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0a:	4770      	bx	lr
 8003d0c:	40030400 	.word	0x40030400

08003d10 <HAL_PWREx_ControlVoltageScaling>:
  * @note  Before moving to voltage scaling 4, it is mandatory to ensure that
  *        the system frequency is below 24 MHz.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003d10:	b480      	push	{r7}
 8003d12:	b085      	sub	sp, #20
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Get the current voltage scale applied */
  vos_old = READ_BIT(PWR->SVMSR, PWR_SVMSR_ACTVOS);
 8003d18:	4b39      	ldr	r3, [pc, #228]	@ (8003e00 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8003d1a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d1c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003d20:	60bb      	str	r3, [r7, #8]

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 8003d22:	68ba      	ldr	r2, [r7, #8]
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	429a      	cmp	r2, r3
 8003d28:	d10b      	bne.n	8003d42 <HAL_PWREx_ControlVoltageScaling+0x32>
  {
    /* Enable USB BOOST after wake up from Stop mode */
    if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003d30:	d905      	bls.n	8003d3e <HAL_PWREx_ControlVoltageScaling+0x2e>
    {
      /* Enable USB BOOST */
      SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8003d32:	4b33      	ldr	r3, [pc, #204]	@ (8003e00 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8003d34:	68db      	ldr	r3, [r3, #12]
 8003d36:	4a32      	ldr	r2, [pc, #200]	@ (8003e00 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8003d38:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003d3c:	60d3      	str	r3, [r2, #12]
    }

    return HAL_OK;
 8003d3e:	2300      	movs	r3, #0
 8003d40:	e057      	b.n	8003df2 <HAL_PWREx_ControlVoltageScaling+0xe2>
  /* Check voltage scaling level */
  /*
   *  The Embedded power distribution (EPOD) must be enabled before switching to
   *  voltage scale 1 / 2 from voltage scale lower.
   */
  if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003d48:	d90a      	bls.n	8003d60 <HAL_PWREx_ControlVoltageScaling+0x50>
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), (VoltageScaling | PWR_VOSR_BOOSTEN));
 8003d4a:	4b2d      	ldr	r3, [pc, #180]	@ (8003e00 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8003d4c:	68db      	ldr	r3, [r3, #12]
 8003d4e:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	4313      	orrs	r3, r2
 8003d56:	4a2a      	ldr	r2, [pc, #168]	@ (8003e00 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8003d58:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003d5c:	60d3      	str	r3, [r2, #12]
 8003d5e:	e007      	b.n	8003d70 <HAL_PWREx_ControlVoltageScaling+0x60>
  }
  else
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), VoltageScaling);
 8003d60:	4b27      	ldr	r3, [pc, #156]	@ (8003e00 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8003d62:	68db      	ldr	r3, [r3, #12]
 8003d64:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 8003d68:	4925      	ldr	r1, [pc, #148]	@ (8003e00 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	4313      	orrs	r3, r2
 8003d6e:	60cb      	str	r3, [r1, #12]
  }

  /* Wait until VOSRDY is raised */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8003d70:	4b24      	ldr	r3, [pc, #144]	@ (8003e04 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	4a24      	ldr	r2, [pc, #144]	@ (8003e08 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8003d76:	fba2 2303 	umull	r2, r3, r2, r3
 8003d7a:	099b      	lsrs	r3, r3, #6
 8003d7c:	2232      	movs	r2, #50	@ 0x32
 8003d7e:	fb02 f303 	mul.w	r3, r2, r3
 8003d82:	4a21      	ldr	r2, [pc, #132]	@ (8003e08 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8003d84:	fba2 2303 	umull	r2, r3, r2, r3
 8003d88:	099b      	lsrs	r3, r3, #6
 8003d8a:	3301      	adds	r3, #1
 8003d8c:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8003d8e:	e002      	b.n	8003d96 <HAL_PWREx_ControlVoltageScaling+0x86>
  {
    timeout--;
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	3b01      	subs	r3, #1
 8003d94:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8003d96:	4b1a      	ldr	r3, [pc, #104]	@ (8003e00 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8003d98:	68db      	ldr	r3, [r3, #12]
 8003d9a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d102      	bne.n	8003da8 <HAL_PWREx_ControlVoltageScaling+0x98>
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d1f3      	bne.n	8003d90 <HAL_PWREx_ControlVoltageScaling+0x80>
  }

  /* Check time out */
  if (timeout != 0U)
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d01b      	beq.n	8003de6 <HAL_PWREx_ControlVoltageScaling+0xd6>
  {
    /* Wait until ACTVOSRDY is raised */
    timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8003dae:	4b15      	ldr	r3, [pc, #84]	@ (8003e04 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	4a15      	ldr	r2, [pc, #84]	@ (8003e08 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8003db4:	fba2 2303 	umull	r2, r3, r2, r3
 8003db8:	099b      	lsrs	r3, r3, #6
 8003dba:	2232      	movs	r2, #50	@ 0x32
 8003dbc:	fb02 f303 	mul.w	r3, r2, r3
 8003dc0:	4a11      	ldr	r2, [pc, #68]	@ (8003e08 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8003dc2:	fba2 2303 	umull	r2, r3, r2, r3
 8003dc6:	099b      	lsrs	r3, r3, #6
 8003dc8:	3301      	adds	r3, #1
 8003dca:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8003dcc:	e002      	b.n	8003dd4 <HAL_PWREx_ControlVoltageScaling+0xc4>
    {
      timeout--;
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	3b01      	subs	r3, #1
 8003dd2:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8003dd4:	4b0a      	ldr	r3, [pc, #40]	@ (8003e00 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8003dd6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003dd8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d102      	bne.n	8003de6 <HAL_PWREx_ControlVoltageScaling+0xd6>
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d1f3      	bne.n	8003dce <HAL_PWREx_ControlVoltageScaling+0xbe>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d101      	bne.n	8003df0 <HAL_PWREx_ControlVoltageScaling+0xe0>
  {
    return HAL_TIMEOUT;
 8003dec:	2303      	movs	r3, #3
 8003dee:	e000      	b.n	8003df2 <HAL_PWREx_ControlVoltageScaling+0xe2>
  }

  return HAL_OK;
 8003df0:	2300      	movs	r3, #0
}
 8003df2:	4618      	mov	r0, r3
 8003df4:	3714      	adds	r7, #20
 8003df6:	46bd      	mov	sp, r7
 8003df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfc:	4770      	bx	lr
 8003dfe:	bf00      	nop
 8003e00:	46020800 	.word	0x46020800
 8003e04:	20000008 	.word	0x20000008
 8003e08:	10624dd3 	.word	0x10624dd3

08003e0c <HAL_PWREx_GetVoltageRange>:
/**
  * @brief  Return Voltage Scaling Range.
  * @retval Applied voltage scaling value.
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003e0c:	b480      	push	{r7}
 8003e0e:	af00      	add	r7, sp, #0
  return (PWR->SVMSR & PWR_SVMSR_ACTVOS);
 8003e10:	4b04      	ldr	r3, [pc, #16]	@ (8003e24 <HAL_PWREx_GetVoltageRange+0x18>)
 8003e12:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e14:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
}
 8003e18:	4618      	mov	r0, r3
 8003e1a:	46bd      	mov	sp, r7
 8003e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e20:	4770      	bx	lr
 8003e22:	bf00      	nop
 8003e24:	46020800 	.word	0x46020800

08003e28 <HAL_PWREx_ConfigSupply>:
  *                        @arg PWR_LDO_SUPPLY  : The LDO regulator supplies the Vcore Power Domains.
  *                        @arg PWR_SMPS_SUPPLY : The SMPS regulator supplies the Vcore Power Domains.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply(uint32_t SupplySource)
{
 8003e28:	b480      	push	{r7}
 8003e2a:	b085      	sub	sp, #20
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_SUPPLY(SupplySource));

  /* Set maximum time out */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8003e30:	4b22      	ldr	r3, [pc, #136]	@ (8003ebc <HAL_PWREx_ConfigSupply+0x94>)
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	4a22      	ldr	r2, [pc, #136]	@ (8003ec0 <HAL_PWREx_ConfigSupply+0x98>)
 8003e36:	fba2 2303 	umull	r2, r3, r2, r3
 8003e3a:	099b      	lsrs	r3, r3, #6
 8003e3c:	2232      	movs	r2, #50	@ 0x32
 8003e3e:	fb02 f303 	mul.w	r3, r2, r3
 8003e42:	4a1f      	ldr	r2, [pc, #124]	@ (8003ec0 <HAL_PWREx_ConfigSupply+0x98>)
 8003e44:	fba2 2303 	umull	r2, r3, r2, r3
 8003e48:	099b      	lsrs	r3, r3, #6
 8003e4a:	3301      	adds	r3, #1
 8003e4c:	60fb      	str	r3, [r7, #12]

  /* Configure the LDO as system regulator supply */
  if (SupplySource == PWR_LDO_SUPPLY)
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d113      	bne.n	8003e7c <HAL_PWREx_ConfigSupply+0x54>
  {
    /* Set the power supply configuration */
    CLEAR_BIT(PWR->CR3, PWR_CR3_REGSEL);
 8003e54:	4b1b      	ldr	r3, [pc, #108]	@ (8003ec4 <HAL_PWREx_ConfigSupply+0x9c>)
 8003e56:	689b      	ldr	r3, [r3, #8]
 8003e58:	4a1a      	ldr	r2, [pc, #104]	@ (8003ec4 <HAL_PWREx_ConfigSupply+0x9c>)
 8003e5a:	f023 0302 	bic.w	r3, r3, #2
 8003e5e:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8003e60:	e002      	b.n	8003e68 <HAL_PWREx_ConfigSupply+0x40>
    {
      timeout--;
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	3b01      	subs	r3, #1
 8003e66:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8003e68:	4b16      	ldr	r3, [pc, #88]	@ (8003ec4 <HAL_PWREx_ConfigSupply+0x9c>)
 8003e6a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e6c:	f003 0302 	and.w	r3, r3, #2
 8003e70:	2b02      	cmp	r3, #2
 8003e72:	d116      	bne.n	8003ea2 <HAL_PWREx_ConfigSupply+0x7a>
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d1f3      	bne.n	8003e62 <HAL_PWREx_ConfigSupply+0x3a>
 8003e7a:	e012      	b.n	8003ea2 <HAL_PWREx_ConfigSupply+0x7a>
  }
  /* Configure the SMPS as system regulator supply */
  else
  {
    /* Set the power supply configuration */
    SET_BIT(PWR->CR3, PWR_CR3_REGSEL);
 8003e7c:	4b11      	ldr	r3, [pc, #68]	@ (8003ec4 <HAL_PWREx_ConfigSupply+0x9c>)
 8003e7e:	689b      	ldr	r3, [r3, #8]
 8003e80:	4a10      	ldr	r2, [pc, #64]	@ (8003ec4 <HAL_PWREx_ConfigSupply+0x9c>)
 8003e82:	f043 0302 	orr.w	r3, r3, #2
 8003e86:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8003e88:	e002      	b.n	8003e90 <HAL_PWREx_ConfigSupply+0x68>
    {
      timeout--;
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	3b01      	subs	r3, #1
 8003e8e:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8003e90:	4b0c      	ldr	r3, [pc, #48]	@ (8003ec4 <HAL_PWREx_ConfigSupply+0x9c>)
 8003e92:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e94:	f003 0302 	and.w	r3, r3, #2
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d102      	bne.n	8003ea2 <HAL_PWREx_ConfigSupply+0x7a>
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d1f3      	bne.n	8003e8a <HAL_PWREx_ConfigSupply+0x62>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d101      	bne.n	8003eac <HAL_PWREx_ConfigSupply+0x84>
  {
    return HAL_TIMEOUT;
 8003ea8:	2303      	movs	r3, #3
 8003eaa:	e000      	b.n	8003eae <HAL_PWREx_ConfigSupply+0x86>
  }

  return HAL_OK;
 8003eac:	2300      	movs	r3, #0
}
 8003eae:	4618      	mov	r0, r3
 8003eb0:	3714      	adds	r7, #20
 8003eb2:	46bd      	mov	sp, r7
 8003eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb8:	4770      	bx	lr
 8003eba:	bf00      	nop
 8003ebc:	20000008 	.word	0x20000008
 8003ec0:	10624dd3 	.word	0x10624dd3
 8003ec4:	46020800 	.word	0x46020800

08003ec8 <HAL_PWREx_EnableVddIO2>:
  * @note   Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8003ec8:	b480      	push	{r7}
 8003eca:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_IO2SV);
 8003ecc:	4b05      	ldr	r3, [pc, #20]	@ (8003ee4 <HAL_PWREx_EnableVddIO2+0x1c>)
 8003ece:	691b      	ldr	r3, [r3, #16]
 8003ed0:	4a04      	ldr	r2, [pc, #16]	@ (8003ee4 <HAL_PWREx_EnableVddIO2+0x1c>)
 8003ed2:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8003ed6:	6113      	str	r3, [r2, #16]
}
 8003ed8:	bf00      	nop
 8003eda:	46bd      	mov	sp, r7
 8003edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee0:	4770      	bx	lr
 8003ee2:	bf00      	nop
 8003ee4:	46020800 	.word	0x46020800

08003ee8 <HAL_PWREx_DisableUCPDDeadBattery>:
  *         pull-down or to handover control to the UCPD (the UCPD must be
  *         initialized before doing the disable).
  * @retval None.
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8003ee8:	b480      	push	{r7}
 8003eea:	af00      	add	r7, sp, #0
  SET_BIT(PWR->UCPDR, PWR_UCPDR_UCPD_DBDIS);
 8003eec:	4b05      	ldr	r3, [pc, #20]	@ (8003f04 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003eee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ef0:	4a04      	ldr	r2, [pc, #16]	@ (8003f04 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003ef2:	f043 0301 	orr.w	r3, r3, #1
 8003ef6:	62d3      	str	r3, [r2, #44]	@ 0x2c
}
 8003ef8:	bf00      	nop
 8003efa:	46bd      	mov	sp, r7
 8003efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f00:	4770      	bx	lr
 8003f02:	bf00      	nop
 8003f04:	46020800 	.word	0x46020800

08003f08 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pRCC_OscInitStruct)
{
 8003f08:	b580      	push	{r7, lr}
 8003f0a:	b08e      	sub	sp, #56	@ 0x38
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source;
  uint32_t pll_config;
  FlagStatus pwrboosten = RESET;
 8003f10:	2300      	movs	r3, #0
 8003f12:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pRCC_OscInitStruct == NULL)
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d102      	bne.n	8003f22 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8003f1c:	2301      	movs	r3, #1
 8003f1e:	f000 bec8 	b.w	8004cb2 <HAL_RCC_OscConfig+0xdaa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pRCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003f22:	4b99      	ldr	r3, [pc, #612]	@ (8004188 <HAL_RCC_OscConfig+0x280>)
 8003f24:	69db      	ldr	r3, [r3, #28]
 8003f26:	f003 030c 	and.w	r3, r3, #12
 8003f2a:	633b      	str	r3, [r7, #48]	@ 0x30
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003f2c:	4b96      	ldr	r3, [pc, #600]	@ (8004188 <HAL_RCC_OscConfig+0x280>)
 8003f2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f30:	f003 0303 	and.w	r3, r3, #3
 8003f34:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /*----------------------------- MSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f003 0310 	and.w	r3, r3, #16
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	f000 816c 	beq.w	800421c <HAL_RCC_OscConfig+0x314>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(pRCC_OscInitStruct->MSIClockRange));

    /*Check if MSI is used as system clock or as PLL source when PLL is selected as system clock*/

    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8003f44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d007      	beq.n	8003f5a <HAL_RCC_OscConfig+0x52>
 8003f4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f4c:	2b0c      	cmp	r3, #12
 8003f4e:	f040 80de 	bne.w	800410e <HAL_RCC_OscConfig+0x206>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003f52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f54:	2b01      	cmp	r3, #1
 8003f56:	f040 80da 	bne.w	800410e <HAL_RCC_OscConfig+0x206>
    {
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	69db      	ldr	r3, [r3, #28]
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d102      	bne.n	8003f68 <HAL_RCC_OscConfig+0x60>
      {
        return HAL_ERROR;
 8003f62:	2301      	movs	r3, #1
 8003f64:	f000 bea5 	b.w	8004cb2 <HAL_RCC_OscConfig+0xdaa>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device */
        if (pRCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003f6c:	4b86      	ldr	r3, [pc, #536]	@ (8004188 <HAL_RCC_OscConfig+0x280>)
 8003f6e:	689b      	ldr	r3, [r3, #8]
 8003f70:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d004      	beq.n	8003f82 <HAL_RCC_OscConfig+0x7a>
 8003f78:	4b83      	ldr	r3, [pc, #524]	@ (8004188 <HAL_RCC_OscConfig+0x280>)
 8003f7a:	689b      	ldr	r3, [r3, #8]
 8003f7c:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8003f80:	e005      	b.n	8003f8e <HAL_RCC_OscConfig+0x86>
 8003f82:	4b81      	ldr	r3, [pc, #516]	@ (8004188 <HAL_RCC_OscConfig+0x280>)
 8003f84:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8003f88:	041b      	lsls	r3, r3, #16
 8003f8a:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8003f8e:	4293      	cmp	r3, r2
 8003f90:	d255      	bcs.n	800403e <HAL_RCC_OscConfig+0x136>
        {
          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8003f92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d10a      	bne.n	8003fae <HAL_RCC_OscConfig+0xa6>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f9c:	4618      	mov	r0, r3
 8003f9e:	f001 fa11 	bl	80053c4 <RCC_SetFlashLatencyFromMSIRange>
 8003fa2:	4603      	mov	r3, r0
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d002      	beq.n	8003fae <HAL_RCC_OscConfig+0xa6>
            {
              return HAL_ERROR;
 8003fa8:	2301      	movs	r3, #1
 8003faa:	f000 be82 	b.w	8004cb2 <HAL_RCC_OscConfig+0xdaa>
            }
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8003fae:	4b76      	ldr	r3, [pc, #472]	@ (8004188 <HAL_RCC_OscConfig+0x280>)
 8003fb0:	689b      	ldr	r3, [r3, #8]
 8003fb2:	4a75      	ldr	r2, [pc, #468]	@ (8004188 <HAL_RCC_OscConfig+0x280>)
 8003fb4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003fb8:	6093      	str	r3, [r2, #8]
 8003fba:	4b73      	ldr	r3, [pc, #460]	@ (8004188 <HAL_RCC_OscConfig+0x280>)
 8003fbc:	689b      	ldr	r3, [r3, #8]
 8003fbe:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fc6:	4970      	ldr	r1, [pc, #448]	@ (8004188 <HAL_RCC_OscConfig+0x280>)
 8003fc8:	4313      	orrs	r3, r2
 8003fca:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fd0:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8003fd4:	d309      	bcc.n	8003fea <HAL_RCC_OscConfig+0xe2>
 8003fd6:	4b6c      	ldr	r3, [pc, #432]	@ (8004188 <HAL_RCC_OscConfig+0x280>)
 8003fd8:	68db      	ldr	r3, [r3, #12]
 8003fda:	f023 021f 	bic.w	r2, r3, #31
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	6a1b      	ldr	r3, [r3, #32]
 8003fe2:	4969      	ldr	r1, [pc, #420]	@ (8004188 <HAL_RCC_OscConfig+0x280>)
 8003fe4:	4313      	orrs	r3, r2
 8003fe6:	60cb      	str	r3, [r1, #12]
 8003fe8:	e07e      	b.n	80040e8 <HAL_RCC_OscConfig+0x1e0>
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	da0a      	bge.n	8004008 <HAL_RCC_OscConfig+0x100>
 8003ff2:	4b65      	ldr	r3, [pc, #404]	@ (8004188 <HAL_RCC_OscConfig+0x280>)
 8003ff4:	68db      	ldr	r3, [r3, #12]
 8003ff6:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	6a1b      	ldr	r3, [r3, #32]
 8003ffe:	015b      	lsls	r3, r3, #5
 8004000:	4961      	ldr	r1, [pc, #388]	@ (8004188 <HAL_RCC_OscConfig+0x280>)
 8004002:	4313      	orrs	r3, r2
 8004004:	60cb      	str	r3, [r1, #12]
 8004006:	e06f      	b.n	80040e8 <HAL_RCC_OscConfig+0x1e0>
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800400c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004010:	d30a      	bcc.n	8004028 <HAL_RCC_OscConfig+0x120>
 8004012:	4b5d      	ldr	r3, [pc, #372]	@ (8004188 <HAL_RCC_OscConfig+0x280>)
 8004014:	68db      	ldr	r3, [r3, #12]
 8004016:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	6a1b      	ldr	r3, [r3, #32]
 800401e:	029b      	lsls	r3, r3, #10
 8004020:	4959      	ldr	r1, [pc, #356]	@ (8004188 <HAL_RCC_OscConfig+0x280>)
 8004022:	4313      	orrs	r3, r2
 8004024:	60cb      	str	r3, [r1, #12]
 8004026:	e05f      	b.n	80040e8 <HAL_RCC_OscConfig+0x1e0>
 8004028:	4b57      	ldr	r3, [pc, #348]	@ (8004188 <HAL_RCC_OscConfig+0x280>)
 800402a:	68db      	ldr	r3, [r3, #12]
 800402c:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	6a1b      	ldr	r3, [r3, #32]
 8004034:	03db      	lsls	r3, r3, #15
 8004036:	4954      	ldr	r1, [pc, #336]	@ (8004188 <HAL_RCC_OscConfig+0x280>)
 8004038:	4313      	orrs	r3, r2
 800403a:	60cb      	str	r3, [r1, #12]
 800403c:	e054      	b.n	80040e8 <HAL_RCC_OscConfig+0x1e0>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 800403e:	4b52      	ldr	r3, [pc, #328]	@ (8004188 <HAL_RCC_OscConfig+0x280>)
 8004040:	689b      	ldr	r3, [r3, #8]
 8004042:	4a51      	ldr	r2, [pc, #324]	@ (8004188 <HAL_RCC_OscConfig+0x280>)
 8004044:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004048:	6093      	str	r3, [r2, #8]
 800404a:	4b4f      	ldr	r3, [pc, #316]	@ (8004188 <HAL_RCC_OscConfig+0x280>)
 800404c:	689b      	ldr	r3, [r3, #8]
 800404e:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004056:	494c      	ldr	r1, [pc, #304]	@ (8004188 <HAL_RCC_OscConfig+0x280>)
 8004058:	4313      	orrs	r3, r2
 800405a:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004060:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8004064:	d309      	bcc.n	800407a <HAL_RCC_OscConfig+0x172>
 8004066:	4b48      	ldr	r3, [pc, #288]	@ (8004188 <HAL_RCC_OscConfig+0x280>)
 8004068:	68db      	ldr	r3, [r3, #12]
 800406a:	f023 021f 	bic.w	r2, r3, #31
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	6a1b      	ldr	r3, [r3, #32]
 8004072:	4945      	ldr	r1, [pc, #276]	@ (8004188 <HAL_RCC_OscConfig+0x280>)
 8004074:	4313      	orrs	r3, r2
 8004076:	60cb      	str	r3, [r1, #12]
 8004078:	e028      	b.n	80040cc <HAL_RCC_OscConfig+0x1c4>
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800407e:	2b00      	cmp	r3, #0
 8004080:	da0a      	bge.n	8004098 <HAL_RCC_OscConfig+0x190>
 8004082:	4b41      	ldr	r3, [pc, #260]	@ (8004188 <HAL_RCC_OscConfig+0x280>)
 8004084:	68db      	ldr	r3, [r3, #12]
 8004086:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	6a1b      	ldr	r3, [r3, #32]
 800408e:	015b      	lsls	r3, r3, #5
 8004090:	493d      	ldr	r1, [pc, #244]	@ (8004188 <HAL_RCC_OscConfig+0x280>)
 8004092:	4313      	orrs	r3, r2
 8004094:	60cb      	str	r3, [r1, #12]
 8004096:	e019      	b.n	80040cc <HAL_RCC_OscConfig+0x1c4>
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800409c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80040a0:	d30a      	bcc.n	80040b8 <HAL_RCC_OscConfig+0x1b0>
 80040a2:	4b39      	ldr	r3, [pc, #228]	@ (8004188 <HAL_RCC_OscConfig+0x280>)
 80040a4:	68db      	ldr	r3, [r3, #12]
 80040a6:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	6a1b      	ldr	r3, [r3, #32]
 80040ae:	029b      	lsls	r3, r3, #10
 80040b0:	4935      	ldr	r1, [pc, #212]	@ (8004188 <HAL_RCC_OscConfig+0x280>)
 80040b2:	4313      	orrs	r3, r2
 80040b4:	60cb      	str	r3, [r1, #12]
 80040b6:	e009      	b.n	80040cc <HAL_RCC_OscConfig+0x1c4>
 80040b8:	4b33      	ldr	r3, [pc, #204]	@ (8004188 <HAL_RCC_OscConfig+0x280>)
 80040ba:	68db      	ldr	r3, [r3, #12]
 80040bc:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	6a1b      	ldr	r3, [r3, #32]
 80040c4:	03db      	lsls	r3, r3, #15
 80040c6:	4930      	ldr	r1, [pc, #192]	@ (8004188 <HAL_RCC_OscConfig+0x280>)
 80040c8:	4313      	orrs	r3, r2
 80040ca:	60cb      	str	r3, [r1, #12]
                                                (pRCC_OscInitStruct->MSIClockRange));

          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80040cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d10a      	bne.n	80040e8 <HAL_RCC_OscConfig+0x1e0>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040d6:	4618      	mov	r0, r3
 80040d8:	f001 f974 	bl	80053c4 <RCC_SetFlashLatencyFromMSIRange>
 80040dc:	4603      	mov	r3, r0
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d002      	beq.n	80040e8 <HAL_RCC_OscConfig+0x1e0>
            {
              return HAL_ERROR;
 80040e2:	2301      	movs	r3, #1
 80040e4:	f000 bde5 	b.w	8004cb2 <HAL_RCC_OscConfig+0xdaa>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        (void) HAL_RCC_GetHCLKFreq();
 80040e8:	f001 f8de 	bl	80052a8 <HAL_RCC_GetHCLKFreq>
        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80040ec:	4b27      	ldr	r3, [pc, #156]	@ (800418c <HAL_RCC_OscConfig+0x284>)
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	4618      	mov	r0, r3
 80040f2:	f7fd fd5d 	bl	8001bb0 <HAL_InitTick>
 80040f6:	4603      	mov	r3, r0
 80040f8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if (status != HAL_OK)
 80040fc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004100:	2b00      	cmp	r3, #0
 8004102:	f000 808a 	beq.w	800421a <HAL_RCC_OscConfig+0x312>
        {
          return status;
 8004106:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800410a:	f000 bdd2 	b.w	8004cb2 <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Check the MSI State */
      if (pRCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	69db      	ldr	r3, [r3, #28]
 8004112:	2b00      	cmp	r3, #0
 8004114:	d066      	beq.n	80041e4 <HAL_RCC_OscConfig+0x2dc>
      {
        /* Enable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_ENABLE();
 8004116:	4b1c      	ldr	r3, [pc, #112]	@ (8004188 <HAL_RCC_OscConfig+0x280>)
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	4a1b      	ldr	r2, [pc, #108]	@ (8004188 <HAL_RCC_OscConfig+0x280>)
 800411c:	f043 0301 	orr.w	r3, r3, #1
 8004120:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8004122:	f7fe f9ff 	bl	8002524 <HAL_GetTick>
 8004126:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8004128:	e009      	b.n	800413e <HAL_RCC_OscConfig+0x236>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800412a:	f7fe f9fb 	bl	8002524 <HAL_GetTick>
 800412e:	4602      	mov	r2, r0
 8004130:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004132:	1ad3      	subs	r3, r2, r3
 8004134:	2b02      	cmp	r3, #2
 8004136:	d902      	bls.n	800413e <HAL_RCC_OscConfig+0x236>
          {
            return HAL_TIMEOUT;
 8004138:	2303      	movs	r3, #3
 800413a:	f000 bdba 	b.w	8004cb2 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 800413e:	4b12      	ldr	r3, [pc, #72]	@ (8004188 <HAL_RCC_OscConfig+0x280>)
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f003 0304 	and.w	r3, r3, #4
 8004146:	2b00      	cmp	r3, #0
 8004148:	d0ef      	beq.n	800412a <HAL_RCC_OscConfig+0x222>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range */
        __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 800414a:	4b0f      	ldr	r3, [pc, #60]	@ (8004188 <HAL_RCC_OscConfig+0x280>)
 800414c:	689b      	ldr	r3, [r3, #8]
 800414e:	4a0e      	ldr	r2, [pc, #56]	@ (8004188 <HAL_RCC_OscConfig+0x280>)
 8004150:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004154:	6093      	str	r3, [r2, #8]
 8004156:	4b0c      	ldr	r3, [pc, #48]	@ (8004188 <HAL_RCC_OscConfig+0x280>)
 8004158:	689b      	ldr	r3, [r3, #8]
 800415a:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004162:	4909      	ldr	r1, [pc, #36]	@ (8004188 <HAL_RCC_OscConfig+0x280>)
 8004164:	4313      	orrs	r3, r2
 8004166:	608b      	str	r3, [r1, #8]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800416c:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8004170:	d30e      	bcc.n	8004190 <HAL_RCC_OscConfig+0x288>
 8004172:	4b05      	ldr	r3, [pc, #20]	@ (8004188 <HAL_RCC_OscConfig+0x280>)
 8004174:	68db      	ldr	r3, [r3, #12]
 8004176:	f023 021f 	bic.w	r2, r3, #31
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	6a1b      	ldr	r3, [r3, #32]
 800417e:	4902      	ldr	r1, [pc, #8]	@ (8004188 <HAL_RCC_OscConfig+0x280>)
 8004180:	4313      	orrs	r3, r2
 8004182:	60cb      	str	r3, [r1, #12]
 8004184:	e04a      	b.n	800421c <HAL_RCC_OscConfig+0x314>
 8004186:	bf00      	nop
 8004188:	46020c00 	.word	0x46020c00
 800418c:	20000028 	.word	0x20000028
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004194:	2b00      	cmp	r3, #0
 8004196:	da0a      	bge.n	80041ae <HAL_RCC_OscConfig+0x2a6>
 8004198:	4b98      	ldr	r3, [pc, #608]	@ (80043fc <HAL_RCC_OscConfig+0x4f4>)
 800419a:	68db      	ldr	r3, [r3, #12]
 800419c:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	6a1b      	ldr	r3, [r3, #32]
 80041a4:	015b      	lsls	r3, r3, #5
 80041a6:	4995      	ldr	r1, [pc, #596]	@ (80043fc <HAL_RCC_OscConfig+0x4f4>)
 80041a8:	4313      	orrs	r3, r2
 80041aa:	60cb      	str	r3, [r1, #12]
 80041ac:	e036      	b.n	800421c <HAL_RCC_OscConfig+0x314>
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041b2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80041b6:	d30a      	bcc.n	80041ce <HAL_RCC_OscConfig+0x2c6>
 80041b8:	4b90      	ldr	r3, [pc, #576]	@ (80043fc <HAL_RCC_OscConfig+0x4f4>)
 80041ba:	68db      	ldr	r3, [r3, #12]
 80041bc:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	6a1b      	ldr	r3, [r3, #32]
 80041c4:	029b      	lsls	r3, r3, #10
 80041c6:	498d      	ldr	r1, [pc, #564]	@ (80043fc <HAL_RCC_OscConfig+0x4f4>)
 80041c8:	4313      	orrs	r3, r2
 80041ca:	60cb      	str	r3, [r1, #12]
 80041cc:	e026      	b.n	800421c <HAL_RCC_OscConfig+0x314>
 80041ce:	4b8b      	ldr	r3, [pc, #556]	@ (80043fc <HAL_RCC_OscConfig+0x4f4>)
 80041d0:	68db      	ldr	r3, [r3, #12]
 80041d2:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	6a1b      	ldr	r3, [r3, #32]
 80041da:	03db      	lsls	r3, r3, #15
 80041dc:	4987      	ldr	r1, [pc, #540]	@ (80043fc <HAL_RCC_OscConfig+0x4f4>)
 80041de:	4313      	orrs	r3, r2
 80041e0:	60cb      	str	r3, [r1, #12]
 80041e2:	e01b      	b.n	800421c <HAL_RCC_OscConfig+0x314>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_DISABLE();
 80041e4:	4b85      	ldr	r3, [pc, #532]	@ (80043fc <HAL_RCC_OscConfig+0x4f4>)
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	4a84      	ldr	r2, [pc, #528]	@ (80043fc <HAL_RCC_OscConfig+0x4f4>)
 80041ea:	f023 0301 	bic.w	r3, r3, #1
 80041ee:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80041f0:	f7fe f998 	bl	8002524 <HAL_GetTick>
 80041f4:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 80041f6:	e009      	b.n	800420c <HAL_RCC_OscConfig+0x304>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80041f8:	f7fe f994 	bl	8002524 <HAL_GetTick>
 80041fc:	4602      	mov	r2, r0
 80041fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004200:	1ad3      	subs	r3, r2, r3
 8004202:	2b02      	cmp	r3, #2
 8004204:	d902      	bls.n	800420c <HAL_RCC_OscConfig+0x304>
          {
            return HAL_TIMEOUT;
 8004206:	2303      	movs	r3, #3
 8004208:	f000 bd53 	b.w	8004cb2 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 800420c:	4b7b      	ldr	r3, [pc, #492]	@ (80043fc <HAL_RCC_OscConfig+0x4f4>)
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f003 0304 	and.w	r3, r3, #4
 8004214:	2b00      	cmp	r3, #0
 8004216:	d1ef      	bne.n	80041f8 <HAL_RCC_OscConfig+0x2f0>
 8004218:	e000      	b.n	800421c <HAL_RCC_OscConfig+0x314>
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800421a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f003 0301 	and.w	r3, r3, #1
 8004224:	2b00      	cmp	r3, #0
 8004226:	f000 808b 	beq.w	8004340 <HAL_RCC_OscConfig+0x438>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pRCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800422a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800422c:	2b08      	cmp	r3, #8
 800422e:	d005      	beq.n	800423c <HAL_RCC_OscConfig+0x334>
 8004230:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004232:	2b0c      	cmp	r3, #12
 8004234:	d109      	bne.n	800424a <HAL_RCC_OscConfig+0x342>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004236:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004238:	2b03      	cmp	r3, #3
 800423a:	d106      	bne.n	800424a <HAL_RCC_OscConfig+0x342>
    {
      if (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	685b      	ldr	r3, [r3, #4]
 8004240:	2b00      	cmp	r3, #0
 8004242:	d17d      	bne.n	8004340 <HAL_RCC_OscConfig+0x438>
      {
        return HAL_ERROR;
 8004244:	2301      	movs	r3, #1
 8004246:	f000 bd34 	b.w	8004cb2 <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	685b      	ldr	r3, [r3, #4]
 800424e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004252:	d106      	bne.n	8004262 <HAL_RCC_OscConfig+0x35a>
 8004254:	4b69      	ldr	r3, [pc, #420]	@ (80043fc <HAL_RCC_OscConfig+0x4f4>)
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	4a68      	ldr	r2, [pc, #416]	@ (80043fc <HAL_RCC_OscConfig+0x4f4>)
 800425a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800425e:	6013      	str	r3, [r2, #0]
 8004260:	e041      	b.n	80042e6 <HAL_RCC_OscConfig+0x3de>
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	685b      	ldr	r3, [r3, #4]
 8004266:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800426a:	d112      	bne.n	8004292 <HAL_RCC_OscConfig+0x38a>
 800426c:	4b63      	ldr	r3, [pc, #396]	@ (80043fc <HAL_RCC_OscConfig+0x4f4>)
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	4a62      	ldr	r2, [pc, #392]	@ (80043fc <HAL_RCC_OscConfig+0x4f4>)
 8004272:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004276:	6013      	str	r3, [r2, #0]
 8004278:	4b60      	ldr	r3, [pc, #384]	@ (80043fc <HAL_RCC_OscConfig+0x4f4>)
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	4a5f      	ldr	r2, [pc, #380]	@ (80043fc <HAL_RCC_OscConfig+0x4f4>)
 800427e:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8004282:	6013      	str	r3, [r2, #0]
 8004284:	4b5d      	ldr	r3, [pc, #372]	@ (80043fc <HAL_RCC_OscConfig+0x4f4>)
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	4a5c      	ldr	r2, [pc, #368]	@ (80043fc <HAL_RCC_OscConfig+0x4f4>)
 800428a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800428e:	6013      	str	r3, [r2, #0]
 8004290:	e029      	b.n	80042e6 <HAL_RCC_OscConfig+0x3de>
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	685b      	ldr	r3, [r3, #4]
 8004296:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 800429a:	d112      	bne.n	80042c2 <HAL_RCC_OscConfig+0x3ba>
 800429c:	4b57      	ldr	r3, [pc, #348]	@ (80043fc <HAL_RCC_OscConfig+0x4f4>)
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	4a56      	ldr	r2, [pc, #344]	@ (80043fc <HAL_RCC_OscConfig+0x4f4>)
 80042a2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80042a6:	6013      	str	r3, [r2, #0]
 80042a8:	4b54      	ldr	r3, [pc, #336]	@ (80043fc <HAL_RCC_OscConfig+0x4f4>)
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	4a53      	ldr	r2, [pc, #332]	@ (80043fc <HAL_RCC_OscConfig+0x4f4>)
 80042ae:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80042b2:	6013      	str	r3, [r2, #0]
 80042b4:	4b51      	ldr	r3, [pc, #324]	@ (80043fc <HAL_RCC_OscConfig+0x4f4>)
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	4a50      	ldr	r2, [pc, #320]	@ (80043fc <HAL_RCC_OscConfig+0x4f4>)
 80042ba:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80042be:	6013      	str	r3, [r2, #0]
 80042c0:	e011      	b.n	80042e6 <HAL_RCC_OscConfig+0x3de>
 80042c2:	4b4e      	ldr	r3, [pc, #312]	@ (80043fc <HAL_RCC_OscConfig+0x4f4>)
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	4a4d      	ldr	r2, [pc, #308]	@ (80043fc <HAL_RCC_OscConfig+0x4f4>)
 80042c8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80042cc:	6013      	str	r3, [r2, #0]
 80042ce:	4b4b      	ldr	r3, [pc, #300]	@ (80043fc <HAL_RCC_OscConfig+0x4f4>)
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	4a4a      	ldr	r2, [pc, #296]	@ (80043fc <HAL_RCC_OscConfig+0x4f4>)
 80042d4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80042d8:	6013      	str	r3, [r2, #0]
 80042da:	4b48      	ldr	r3, [pc, #288]	@ (80043fc <HAL_RCC_OscConfig+0x4f4>)
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	4a47      	ldr	r2, [pc, #284]	@ (80043fc <HAL_RCC_OscConfig+0x4f4>)
 80042e0:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80042e4:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	685b      	ldr	r3, [r3, #4]
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d014      	beq.n	8004318 <HAL_RCC_OscConfig+0x410>
      {
        tickstart = HAL_GetTick();
 80042ee:	f7fe f919 	bl	8002524 <HAL_GetTick>
 80042f2:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80042f4:	e009      	b.n	800430a <HAL_RCC_OscConfig+0x402>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80042f6:	f7fe f915 	bl	8002524 <HAL_GetTick>
 80042fa:	4602      	mov	r2, r0
 80042fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042fe:	1ad3      	subs	r3, r2, r3
 8004300:	2b64      	cmp	r3, #100	@ 0x64
 8004302:	d902      	bls.n	800430a <HAL_RCC_OscConfig+0x402>
          {
            return HAL_TIMEOUT;
 8004304:	2303      	movs	r3, #3
 8004306:	f000 bcd4 	b.w	8004cb2 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800430a:	4b3c      	ldr	r3, [pc, #240]	@ (80043fc <HAL_RCC_OscConfig+0x4f4>)
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004312:	2b00      	cmp	r3, #0
 8004314:	d0ef      	beq.n	80042f6 <HAL_RCC_OscConfig+0x3ee>
 8004316:	e013      	b.n	8004340 <HAL_RCC_OscConfig+0x438>
          }
        }
      }
      else
      {
        tickstart = HAL_GetTick();
 8004318:	f7fe f904 	bl	8002524 <HAL_GetTick>
 800431c:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800431e:	e009      	b.n	8004334 <HAL_RCC_OscConfig+0x42c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004320:	f7fe f900 	bl	8002524 <HAL_GetTick>
 8004324:	4602      	mov	r2, r0
 8004326:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004328:	1ad3      	subs	r3, r2, r3
 800432a:	2b64      	cmp	r3, #100	@ 0x64
 800432c:	d902      	bls.n	8004334 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 800432e:	2303      	movs	r3, #3
 8004330:	f000 bcbf 	b.w	8004cb2 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004334:	4b31      	ldr	r3, [pc, #196]	@ (80043fc <HAL_RCC_OscConfig+0x4f4>)
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800433c:	2b00      	cmp	r3, #0
 800433e:	d1ef      	bne.n	8004320 <HAL_RCC_OscConfig+0x418>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f003 0302 	and.w	r3, r3, #2
 8004348:	2b00      	cmp	r3, #0
 800434a:	d05f      	beq.n	800440c <HAL_RCC_OscConfig+0x504>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(pRCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800434c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800434e:	2b04      	cmp	r3, #4
 8004350:	d005      	beq.n	800435e <HAL_RCC_OscConfig+0x456>
 8004352:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004354:	2b0c      	cmp	r3, #12
 8004356:	d114      	bne.n	8004382 <HAL_RCC_OscConfig+0x47a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004358:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800435a:	2b02      	cmp	r3, #2
 800435c:	d111      	bne.n	8004382 <HAL_RCC_OscConfig+0x47a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	68db      	ldr	r3, [r3, #12]
 8004362:	2b00      	cmp	r3, #0
 8004364:	d102      	bne.n	800436c <HAL_RCC_OscConfig+0x464>
      {
        return HAL_ERROR;
 8004366:	2301      	movs	r3, #1
 8004368:	f000 bca3 	b.w	8004cb2 <HAL_RCC_OscConfig+0xdaa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 800436c:	4b23      	ldr	r3, [pc, #140]	@ (80043fc <HAL_RCC_OscConfig+0x4f4>)
 800436e:	691b      	ldr	r3, [r3, #16]
 8004370:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	691b      	ldr	r3, [r3, #16]
 8004378:	041b      	lsls	r3, r3, #16
 800437a:	4920      	ldr	r1, [pc, #128]	@ (80043fc <HAL_RCC_OscConfig+0x4f4>)
 800437c:	4313      	orrs	r3, r2
 800437e:	610b      	str	r3, [r1, #16]
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8004380:	e044      	b.n	800440c <HAL_RCC_OscConfig+0x504>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	68db      	ldr	r3, [r3, #12]
 8004386:	2b00      	cmp	r3, #0
 8004388:	d024      	beq.n	80043d4 <HAL_RCC_OscConfig+0x4cc>
      {
        /* Enable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_ENABLE();
 800438a:	4b1c      	ldr	r3, [pc, #112]	@ (80043fc <HAL_RCC_OscConfig+0x4f4>)
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	4a1b      	ldr	r2, [pc, #108]	@ (80043fc <HAL_RCC_OscConfig+0x4f4>)
 8004390:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004394:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8004396:	f7fe f8c5 	bl	8002524 <HAL_GetTick>
 800439a:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800439c:	e009      	b.n	80043b2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800439e:	f7fe f8c1 	bl	8002524 <HAL_GetTick>
 80043a2:	4602      	mov	r2, r0
 80043a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043a6:	1ad3      	subs	r3, r2, r3
 80043a8:	2b02      	cmp	r3, #2
 80043aa:	d902      	bls.n	80043b2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80043ac:	2303      	movs	r3, #3
 80043ae:	f000 bc80 	b.w	8004cb2 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80043b2:	4b12      	ldr	r3, [pc, #72]	@ (80043fc <HAL_RCC_OscConfig+0x4f4>)
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d0ef      	beq.n	800439e <HAL_RCC_OscConfig+0x496>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 80043be:	4b0f      	ldr	r3, [pc, #60]	@ (80043fc <HAL_RCC_OscConfig+0x4f4>)
 80043c0:	691b      	ldr	r3, [r3, #16]
 80043c2:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	691b      	ldr	r3, [r3, #16]
 80043ca:	041b      	lsls	r3, r3, #16
 80043cc:	490b      	ldr	r1, [pc, #44]	@ (80043fc <HAL_RCC_OscConfig+0x4f4>)
 80043ce:	4313      	orrs	r3, r2
 80043d0:	610b      	str	r3, [r1, #16]
 80043d2:	e01b      	b.n	800440c <HAL_RCC_OscConfig+0x504>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_DISABLE();
 80043d4:	4b09      	ldr	r3, [pc, #36]	@ (80043fc <HAL_RCC_OscConfig+0x4f4>)
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	4a08      	ldr	r2, [pc, #32]	@ (80043fc <HAL_RCC_OscConfig+0x4f4>)
 80043da:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80043de:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80043e0:	f7fe f8a0 	bl	8002524 <HAL_GetTick>
 80043e4:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80043e6:	e00b      	b.n	8004400 <HAL_RCC_OscConfig+0x4f8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80043e8:	f7fe f89c 	bl	8002524 <HAL_GetTick>
 80043ec:	4602      	mov	r2, r0
 80043ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043f0:	1ad3      	subs	r3, r2, r3
 80043f2:	2b02      	cmp	r3, #2
 80043f4:	d904      	bls.n	8004400 <HAL_RCC_OscConfig+0x4f8>
          {
            return HAL_TIMEOUT;
 80043f6:	2303      	movs	r3, #3
 80043f8:	f000 bc5b 	b.w	8004cb2 <HAL_RCC_OscConfig+0xdaa>
 80043fc:	46020c00 	.word	0x46020c00
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004400:	4baf      	ldr	r3, [pc, #700]	@ (80046c0 <HAL_RCC_OscConfig+0x7b8>)
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004408:	2b00      	cmp	r3, #0
 800440a:	d1ed      	bne.n	80043e8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f003 0308 	and.w	r3, r3, #8
 8004414:	2b00      	cmp	r3, #0
 8004416:	f000 80c8 	beq.w	80045aa <HAL_RCC_OscConfig+0x6a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(pRCC_OscInitStruct->LSIState));

    FlagStatus  pwrclkchanged = RESET;
 800441a:	2300      	movs	r3, #0
 800441c:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

    /* Update LSI configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004420:	4ba7      	ldr	r3, [pc, #668]	@ (80046c0 <HAL_RCC_OscConfig+0x7b8>)
 8004422:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004426:	f003 0304 	and.w	r3, r3, #4
 800442a:	2b00      	cmp	r3, #0
 800442c:	d111      	bne.n	8004452 <HAL_RCC_OscConfig+0x54a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800442e:	4ba4      	ldr	r3, [pc, #656]	@ (80046c0 <HAL_RCC_OscConfig+0x7b8>)
 8004430:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004434:	4aa2      	ldr	r2, [pc, #648]	@ (80046c0 <HAL_RCC_OscConfig+0x7b8>)
 8004436:	f043 0304 	orr.w	r3, r3, #4
 800443a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800443e:	4ba0      	ldr	r3, [pc, #640]	@ (80046c0 <HAL_RCC_OscConfig+0x7b8>)
 8004440:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004444:	f003 0304 	and.w	r3, r3, #4
 8004448:	617b      	str	r3, [r7, #20]
 800444a:	697b      	ldr	r3, [r7, #20]
      pwrclkchanged = SET;
 800444c:	2301      	movs	r3, #1
 800444e:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8004452:	4b9c      	ldr	r3, [pc, #624]	@ (80046c4 <HAL_RCC_OscConfig+0x7bc>)
 8004454:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004456:	f003 0301 	and.w	r3, r3, #1
 800445a:	2b00      	cmp	r3, #0
 800445c:	d119      	bne.n	8004492 <HAL_RCC_OscConfig+0x58a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 800445e:	4b99      	ldr	r3, [pc, #612]	@ (80046c4 <HAL_RCC_OscConfig+0x7bc>)
 8004460:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004462:	4a98      	ldr	r2, [pc, #608]	@ (80046c4 <HAL_RCC_OscConfig+0x7bc>)
 8004464:	f043 0301 	orr.w	r3, r3, #1
 8004468:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800446a:	f7fe f85b 	bl	8002524 <HAL_GetTick>
 800446e:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8004470:	e009      	b.n	8004486 <HAL_RCC_OscConfig+0x57e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004472:	f7fe f857 	bl	8002524 <HAL_GetTick>
 8004476:	4602      	mov	r2, r0
 8004478:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800447a:	1ad3      	subs	r3, r2, r3
 800447c:	2b02      	cmp	r3, #2
 800447e:	d902      	bls.n	8004486 <HAL_RCC_OscConfig+0x57e>
        {
          return HAL_TIMEOUT;
 8004480:	2303      	movs	r3, #3
 8004482:	f000 bc16 	b.w	8004cb2 <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8004486:	4b8f      	ldr	r3, [pc, #572]	@ (80046c4 <HAL_RCC_OscConfig+0x7bc>)
 8004488:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800448a:	f003 0301 	and.w	r3, r3, #1
 800448e:	2b00      	cmp	r3, #0
 8004490:	d0ef      	beq.n	8004472 <HAL_RCC_OscConfig+0x56a>
        }
      }
    }
    /* Check the LSI State */
    if (pRCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	695b      	ldr	r3, [r3, #20]
 8004496:	2b00      	cmp	r3, #0
 8004498:	d05f      	beq.n	800455a <HAL_RCC_OscConfig+0x652>
    {
      uint32_t bdcr_temp = RCC->BDCR;
 800449a:	4b89      	ldr	r3, [pc, #548]	@ (80046c0 <HAL_RCC_OscConfig+0x7b8>)
 800449c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80044a0:	623b      	str	r3, [r7, #32]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(pRCC_OscInitStruct->LSIDiv));

      if (pRCC_OscInitStruct->LSIDiv != (bdcr_temp & RCC_BDCR_LSIPREDIV))
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	699a      	ldr	r2, [r3, #24]
 80044a6:	6a3b      	ldr	r3, [r7, #32]
 80044a8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80044ac:	429a      	cmp	r2, r3
 80044ae:	d037      	beq.n	8004520 <HAL_RCC_OscConfig+0x618>
      {
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 80044b0:	6a3b      	ldr	r3, [r7, #32]
 80044b2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d006      	beq.n	80044c8 <HAL_RCC_OscConfig+0x5c0>
            ((bdcr_temp & RCC_BDCR_LSION) != RCC_BDCR_LSION))
 80044ba:	6a3b      	ldr	r3, [r7, #32]
 80044bc:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d101      	bne.n	80044c8 <HAL_RCC_OscConfig+0x5c0>
        {
          /* If LSIRDY is set while LSION is not enabled, LSIPREDIV can't be updated */
          /* The LSIPREDIV cannot be changed if the LSI is used by the IWDG or by the RTC */
          return HAL_ERROR;
 80044c4:	2301      	movs	r3, #1
 80044c6:	e3f4      	b.n	8004cb2 <HAL_RCC_OscConfig+0xdaa>
        }

        /* Turn off LSI before changing RCC_BDCR_LSIPREDIV */
        if ((bdcr_temp & RCC_BDCR_LSION) == RCC_BDCR_LSION)
 80044c8:	6a3b      	ldr	r3, [r7, #32]
 80044ca:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d01b      	beq.n	800450a <HAL_RCC_OscConfig+0x602>
        {
          __HAL_RCC_LSI_DISABLE();
 80044d2:	4b7b      	ldr	r3, [pc, #492]	@ (80046c0 <HAL_RCC_OscConfig+0x7b8>)
 80044d4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80044d8:	4a79      	ldr	r2, [pc, #484]	@ (80046c0 <HAL_RCC_OscConfig+0x7b8>)
 80044da:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 80044de:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

          tickstart = HAL_GetTick();
 80044e2:	f7fe f81f 	bl	8002524 <HAL_GetTick>
 80044e6:	62b8      	str	r0, [r7, #40]	@ 0x28

          /* Wait till LSI is disabled */
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80044e8:	e008      	b.n	80044fc <HAL_RCC_OscConfig+0x5f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80044ea:	f7fe f81b 	bl	8002524 <HAL_GetTick>
 80044ee:	4602      	mov	r2, r0
 80044f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80044f2:	1ad3      	subs	r3, r2, r3
 80044f4:	2b05      	cmp	r3, #5
 80044f6:	d901      	bls.n	80044fc <HAL_RCC_OscConfig+0x5f4>
            {
              return HAL_TIMEOUT;
 80044f8:	2303      	movs	r3, #3
 80044fa:	e3da      	b.n	8004cb2 <HAL_RCC_OscConfig+0xdaa>
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80044fc:	4b70      	ldr	r3, [pc, #448]	@ (80046c0 <HAL_RCC_OscConfig+0x7b8>)
 80044fe:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004502:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004506:	2b00      	cmp	r3, #0
 8004508:	d1ef      	bne.n	80044ea <HAL_RCC_OscConfig+0x5e2>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->BDCR, RCC_BDCR_LSIPREDIV, pRCC_OscInitStruct->LSIDiv);
 800450a:	4b6d      	ldr	r3, [pc, #436]	@ (80046c0 <HAL_RCC_OscConfig+0x7b8>)
 800450c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004510:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	699b      	ldr	r3, [r3, #24]
 8004518:	4969      	ldr	r1, [pc, #420]	@ (80046c0 <HAL_RCC_OscConfig+0x7b8>)
 800451a:	4313      	orrs	r3, r2
 800451c:	f8c1 30f0 	str.w	r3, [r1, #240]	@ 0xf0
      }

      /* Enable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_ENABLE();
 8004520:	4b67      	ldr	r3, [pc, #412]	@ (80046c0 <HAL_RCC_OscConfig+0x7b8>)
 8004522:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004526:	4a66      	ldr	r2, [pc, #408]	@ (80046c0 <HAL_RCC_OscConfig+0x7b8>)
 8004528:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800452c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 8004530:	f7fd fff8 	bl	8002524 <HAL_GetTick>
 8004534:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8004536:	e008      	b.n	800454a <HAL_RCC_OscConfig+0x642>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004538:	f7fd fff4 	bl	8002524 <HAL_GetTick>
 800453c:	4602      	mov	r2, r0
 800453e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004540:	1ad3      	subs	r3, r2, r3
 8004542:	2b05      	cmp	r3, #5
 8004544:	d901      	bls.n	800454a <HAL_RCC_OscConfig+0x642>
        {
          return HAL_TIMEOUT;
 8004546:	2303      	movs	r3, #3
 8004548:	e3b3      	b.n	8004cb2 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 800454a:	4b5d      	ldr	r3, [pc, #372]	@ (80046c0 <HAL_RCC_OscConfig+0x7b8>)
 800454c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004550:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004554:	2b00      	cmp	r3, #0
 8004556:	d0ef      	beq.n	8004538 <HAL_RCC_OscConfig+0x630>
 8004558:	e01b      	b.n	8004592 <HAL_RCC_OscConfig+0x68a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_DISABLE();
 800455a:	4b59      	ldr	r3, [pc, #356]	@ (80046c0 <HAL_RCC_OscConfig+0x7b8>)
 800455c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004560:	4a57      	ldr	r2, [pc, #348]	@ (80046c0 <HAL_RCC_OscConfig+0x7b8>)
 8004562:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 8004566:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 800456a:	f7fd ffdb 	bl	8002524 <HAL_GetTick>
 800456e:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8004570:	e008      	b.n	8004584 <HAL_RCC_OscConfig+0x67c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004572:	f7fd ffd7 	bl	8002524 <HAL_GetTick>
 8004576:	4602      	mov	r2, r0
 8004578:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800457a:	1ad3      	subs	r3, r2, r3
 800457c:	2b05      	cmp	r3, #5
 800457e:	d901      	bls.n	8004584 <HAL_RCC_OscConfig+0x67c>
        {
          return HAL_TIMEOUT;
 8004580:	2303      	movs	r3, #3
 8004582:	e396      	b.n	8004cb2 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8004584:	4b4e      	ldr	r3, [pc, #312]	@ (80046c0 <HAL_RCC_OscConfig+0x7b8>)
 8004586:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800458a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800458e:	2b00      	cmp	r3, #0
 8004590:	d1ef      	bne.n	8004572 <HAL_RCC_OscConfig+0x66a>
        }
      }
    }
    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004592:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8004596:	2b01      	cmp	r3, #1
 8004598:	d107      	bne.n	80045aa <HAL_RCC_OscConfig+0x6a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800459a:	4b49      	ldr	r3, [pc, #292]	@ (80046c0 <HAL_RCC_OscConfig+0x7b8>)
 800459c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80045a0:	4a47      	ldr	r2, [pc, #284]	@ (80046c0 <HAL_RCC_OscConfig+0x7b8>)
 80045a2:	f023 0304 	bic.w	r3, r3, #4
 80045a6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	f003 0304 	and.w	r3, r3, #4
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	f000 8111 	beq.w	80047da <HAL_RCC_OscConfig+0x8d2>
  {
    FlagStatus pwrclkchanged = RESET;
 80045b8:	2300      	movs	r3, #0
 80045ba:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pRCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80045be:	4b40      	ldr	r3, [pc, #256]	@ (80046c0 <HAL_RCC_OscConfig+0x7b8>)
 80045c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80045c4:	f003 0304 	and.w	r3, r3, #4
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d111      	bne.n	80045f0 <HAL_RCC_OscConfig+0x6e8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80045cc:	4b3c      	ldr	r3, [pc, #240]	@ (80046c0 <HAL_RCC_OscConfig+0x7b8>)
 80045ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80045d2:	4a3b      	ldr	r2, [pc, #236]	@ (80046c0 <HAL_RCC_OscConfig+0x7b8>)
 80045d4:	f043 0304 	orr.w	r3, r3, #4
 80045d8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80045dc:	4b38      	ldr	r3, [pc, #224]	@ (80046c0 <HAL_RCC_OscConfig+0x7b8>)
 80045de:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80045e2:	f003 0304 	and.w	r3, r3, #4
 80045e6:	613b      	str	r3, [r7, #16]
 80045e8:	693b      	ldr	r3, [r7, #16]
      pwrclkchanged = SET;
 80045ea:	2301      	movs	r3, #1
 80045ec:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80045f0:	4b34      	ldr	r3, [pc, #208]	@ (80046c4 <HAL_RCC_OscConfig+0x7bc>)
 80045f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045f4:	f003 0301 	and.w	r3, r3, #1
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d118      	bne.n	800462e <HAL_RCC_OscConfig+0x726>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 80045fc:	4b31      	ldr	r3, [pc, #196]	@ (80046c4 <HAL_RCC_OscConfig+0x7bc>)
 80045fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004600:	4a30      	ldr	r2, [pc, #192]	@ (80046c4 <HAL_RCC_OscConfig+0x7bc>)
 8004602:	f043 0301 	orr.w	r3, r3, #1
 8004606:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004608:	f7fd ff8c 	bl	8002524 <HAL_GetTick>
 800460c:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800460e:	e008      	b.n	8004622 <HAL_RCC_OscConfig+0x71a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004610:	f7fd ff88 	bl	8002524 <HAL_GetTick>
 8004614:	4602      	mov	r2, r0
 8004616:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004618:	1ad3      	subs	r3, r2, r3
 800461a:	2b02      	cmp	r3, #2
 800461c:	d901      	bls.n	8004622 <HAL_RCC_OscConfig+0x71a>
        {
          return HAL_TIMEOUT;
 800461e:	2303      	movs	r3, #3
 8004620:	e347      	b.n	8004cb2 <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8004622:	4b28      	ldr	r3, [pc, #160]	@ (80046c4 <HAL_RCC_OscConfig+0x7bc>)
 8004624:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004626:	f003 0301 	and.w	r3, r3, #1
 800462a:	2b00      	cmp	r3, #0
 800462c:	d0f0      	beq.n	8004610 <HAL_RCC_OscConfig+0x708>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	689b      	ldr	r3, [r3, #8]
 8004632:	f003 0301 	and.w	r3, r3, #1
 8004636:	2b00      	cmp	r3, #0
 8004638:	d01f      	beq.n	800467a <HAL_RCC_OscConfig+0x772>
    {
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	689b      	ldr	r3, [r3, #8]
 800463e:	f003 0304 	and.w	r3, r3, #4
 8004642:	2b00      	cmp	r3, #0
 8004644:	d010      	beq.n	8004668 <HAL_RCC_OscConfig+0x760>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8004646:	4b1e      	ldr	r3, [pc, #120]	@ (80046c0 <HAL_RCC_OscConfig+0x7b8>)
 8004648:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800464c:	4a1c      	ldr	r2, [pc, #112]	@ (80046c0 <HAL_RCC_OscConfig+0x7b8>)
 800464e:	f043 0304 	orr.w	r3, r3, #4
 8004652:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004656:	4b1a      	ldr	r3, [pc, #104]	@ (80046c0 <HAL_RCC_OscConfig+0x7b8>)
 8004658:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800465c:	4a18      	ldr	r2, [pc, #96]	@ (80046c0 <HAL_RCC_OscConfig+0x7b8>)
 800465e:	f043 0301 	orr.w	r3, r3, #1
 8004662:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8004666:	e018      	b.n	800469a <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004668:	4b15      	ldr	r3, [pc, #84]	@ (80046c0 <HAL_RCC_OscConfig+0x7b8>)
 800466a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800466e:	4a14      	ldr	r2, [pc, #80]	@ (80046c0 <HAL_RCC_OscConfig+0x7b8>)
 8004670:	f043 0301 	orr.w	r3, r3, #1
 8004674:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8004678:	e00f      	b.n	800469a <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800467a:	4b11      	ldr	r3, [pc, #68]	@ (80046c0 <HAL_RCC_OscConfig+0x7b8>)
 800467c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004680:	4a0f      	ldr	r2, [pc, #60]	@ (80046c0 <HAL_RCC_OscConfig+0x7b8>)
 8004682:	f023 0301 	bic.w	r3, r3, #1
 8004686:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800468a:	4b0d      	ldr	r3, [pc, #52]	@ (80046c0 <HAL_RCC_OscConfig+0x7b8>)
 800468c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004690:	4a0b      	ldr	r2, [pc, #44]	@ (80046c0 <HAL_RCC_OscConfig+0x7b8>)
 8004692:	f023 0304 	bic.w	r3, r3, #4
 8004696:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
    }

    /* Check the LSE State */
    if (pRCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	689b      	ldr	r3, [r3, #8]
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d057      	beq.n	8004752 <HAL_RCC_OscConfig+0x84a>
    {
      tickstart = HAL_GetTick();
 80046a2:	f7fd ff3f 	bl	8002524 <HAL_GetTick>
 80046a6:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80046a8:	e00e      	b.n	80046c8 <HAL_RCC_OscConfig+0x7c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80046aa:	f7fd ff3b 	bl	8002524 <HAL_GetTick>
 80046ae:	4602      	mov	r2, r0
 80046b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046b2:	1ad3      	subs	r3, r2, r3
 80046b4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80046b8:	4293      	cmp	r3, r2
 80046ba:	d905      	bls.n	80046c8 <HAL_RCC_OscConfig+0x7c0>
        {
          return HAL_TIMEOUT;
 80046bc:	2303      	movs	r3, #3
 80046be:	e2f8      	b.n	8004cb2 <HAL_RCC_OscConfig+0xdaa>
 80046c0:	46020c00 	.word	0x46020c00
 80046c4:	46020800 	.word	0x46020800
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80046c8:	4b9c      	ldr	r3, [pc, #624]	@ (800493c <HAL_RCC_OscConfig+0xa34>)
 80046ca:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80046ce:	f003 0302 	and.w	r3, r3, #2
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d0e9      	beq.n	80046aa <HAL_RCC_OscConfig+0x7a2>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	689b      	ldr	r3, [r3, #8]
 80046da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d01b      	beq.n	800471a <HAL_RCC_OscConfig+0x812>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80046e2:	4b96      	ldr	r3, [pc, #600]	@ (800493c <HAL_RCC_OscConfig+0xa34>)
 80046e4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80046e8:	4a94      	ldr	r2, [pc, #592]	@ (800493c <HAL_RCC_OscConfig+0xa34>)
 80046ea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80046ee:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80046f2:	e00a      	b.n	800470a <HAL_RCC_OscConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80046f4:	f7fd ff16 	bl	8002524 <HAL_GetTick>
 80046f8:	4602      	mov	r2, r0
 80046fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046fc:	1ad3      	subs	r3, r2, r3
 80046fe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004702:	4293      	cmp	r3, r2
 8004704:	d901      	bls.n	800470a <HAL_RCC_OscConfig+0x802>
          {
            return HAL_TIMEOUT;
 8004706:	2303      	movs	r3, #3
 8004708:	e2d3      	b.n	8004cb2 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 800470a:	4b8c      	ldr	r3, [pc, #560]	@ (800493c <HAL_RCC_OscConfig+0xa34>)
 800470c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004710:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004714:	2b00      	cmp	r3, #0
 8004716:	d0ed      	beq.n	80046f4 <HAL_RCC_OscConfig+0x7ec>
 8004718:	e053      	b.n	80047c2 <HAL_RCC_OscConfig+0x8ba>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800471a:	4b88      	ldr	r3, [pc, #544]	@ (800493c <HAL_RCC_OscConfig+0xa34>)
 800471c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004720:	4a86      	ldr	r2, [pc, #536]	@ (800493c <HAL_RCC_OscConfig+0xa34>)
 8004722:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004726:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800472a:	e00a      	b.n	8004742 <HAL_RCC_OscConfig+0x83a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800472c:	f7fd fefa 	bl	8002524 <HAL_GetTick>
 8004730:	4602      	mov	r2, r0
 8004732:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004734:	1ad3      	subs	r3, r2, r3
 8004736:	f241 3288 	movw	r2, #5000	@ 0x1388
 800473a:	4293      	cmp	r3, r2
 800473c:	d901      	bls.n	8004742 <HAL_RCC_OscConfig+0x83a>
          {
            return HAL_TIMEOUT;
 800473e:	2303      	movs	r3, #3
 8004740:	e2b7      	b.n	8004cb2 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8004742:	4b7e      	ldr	r3, [pc, #504]	@ (800493c <HAL_RCC_OscConfig+0xa34>)
 8004744:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004748:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800474c:	2b00      	cmp	r3, #0
 800474e:	d1ed      	bne.n	800472c <HAL_RCC_OscConfig+0x824>
 8004750:	e037      	b.n	80047c2 <HAL_RCC_OscConfig+0x8ba>
        }
      }
    }
    else
    {
      tickstart = HAL_GetTick();
 8004752:	f7fd fee7 	bl	8002524 <HAL_GetTick>
 8004756:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004758:	e00a      	b.n	8004770 <HAL_RCC_OscConfig+0x868>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800475a:	f7fd fee3 	bl	8002524 <HAL_GetTick>
 800475e:	4602      	mov	r2, r0
 8004760:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004762:	1ad3      	subs	r3, r2, r3
 8004764:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004768:	4293      	cmp	r3, r2
 800476a:	d901      	bls.n	8004770 <HAL_RCC_OscConfig+0x868>
        {
          return HAL_TIMEOUT;
 800476c:	2303      	movs	r3, #3
 800476e:	e2a0      	b.n	8004cb2 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004770:	4b72      	ldr	r3, [pc, #456]	@ (800493c <HAL_RCC_OscConfig+0xa34>)
 8004772:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004776:	f003 0302 	and.w	r3, r3, #2
 800477a:	2b00      	cmp	r3, #0
 800477c:	d1ed      	bne.n	800475a <HAL_RCC_OscConfig+0x852>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 800477e:	4b6f      	ldr	r3, [pc, #444]	@ (800493c <HAL_RCC_OscConfig+0xa34>)
 8004780:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004784:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004788:	2b00      	cmp	r3, #0
 800478a:	d01a      	beq.n	80047c2 <HAL_RCC_OscConfig+0x8ba>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800478c:	4b6b      	ldr	r3, [pc, #428]	@ (800493c <HAL_RCC_OscConfig+0xa34>)
 800478e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004792:	4a6a      	ldr	r2, [pc, #424]	@ (800493c <HAL_RCC_OscConfig+0xa34>)
 8004794:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004798:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800479c:	e00a      	b.n	80047b4 <HAL_RCC_OscConfig+0x8ac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800479e:	f7fd fec1 	bl	8002524 <HAL_GetTick>
 80047a2:	4602      	mov	r2, r0
 80047a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047a6:	1ad3      	subs	r3, r2, r3
 80047a8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80047ac:	4293      	cmp	r3, r2
 80047ae:	d901      	bls.n	80047b4 <HAL_RCC_OscConfig+0x8ac>
          {
            return HAL_TIMEOUT;
 80047b0:	2303      	movs	r3, #3
 80047b2:	e27e      	b.n	8004cb2 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80047b4:	4b61      	ldr	r3, [pc, #388]	@ (800493c <HAL_RCC_OscConfig+0xa34>)
 80047b6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80047ba:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d1ed      	bne.n	800479e <HAL_RCC_OscConfig+0x896>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80047c2:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 80047c6:	2b01      	cmp	r3, #1
 80047c8:	d107      	bne.n	80047da <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80047ca:	4b5c      	ldr	r3, [pc, #368]	@ (800493c <HAL_RCC_OscConfig+0xa34>)
 80047cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80047d0:	4a5a      	ldr	r2, [pc, #360]	@ (800493c <HAL_RCC_OscConfig+0xa34>)
 80047d2:	f023 0304 	bic.w	r3, r3, #4
 80047d6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	f003 0320 	and.w	r3, r3, #32
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d036      	beq.n	8004854 <HAL_RCC_OscConfig+0x94c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pRCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pRCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d019      	beq.n	8004822 <HAL_RCC_OscConfig+0x91a>
    {
      /* Enable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_ENABLE();
 80047ee:	4b53      	ldr	r3, [pc, #332]	@ (800493c <HAL_RCC_OscConfig+0xa34>)
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	4a52      	ldr	r2, [pc, #328]	@ (800493c <HAL_RCC_OscConfig+0xa34>)
 80047f4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80047f8:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80047fa:	f7fd fe93 	bl	8002524 <HAL_GetTick>
 80047fe:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8004800:	e008      	b.n	8004814 <HAL_RCC_OscConfig+0x90c>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004802:	f7fd fe8f 	bl	8002524 <HAL_GetTick>
 8004806:	4602      	mov	r2, r0
 8004808:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800480a:	1ad3      	subs	r3, r2, r3
 800480c:	2b02      	cmp	r3, #2
 800480e:	d901      	bls.n	8004814 <HAL_RCC_OscConfig+0x90c>
        {
          return HAL_TIMEOUT;
 8004810:	2303      	movs	r3, #3
 8004812:	e24e      	b.n	8004cb2 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8004814:	4b49      	ldr	r3, [pc, #292]	@ (800493c <HAL_RCC_OscConfig+0xa34>)
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800481c:	2b00      	cmp	r3, #0
 800481e:	d0f0      	beq.n	8004802 <HAL_RCC_OscConfig+0x8fa>
 8004820:	e018      	b.n	8004854 <HAL_RCC_OscConfig+0x94c>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_DISABLE();
 8004822:	4b46      	ldr	r3, [pc, #280]	@ (800493c <HAL_RCC_OscConfig+0xa34>)
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	4a45      	ldr	r2, [pc, #276]	@ (800493c <HAL_RCC_OscConfig+0xa34>)
 8004828:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800482c:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800482e:	f7fd fe79 	bl	8002524 <HAL_GetTick>
 8004832:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8004834:	e008      	b.n	8004848 <HAL_RCC_OscConfig+0x940>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004836:	f7fd fe75 	bl	8002524 <HAL_GetTick>
 800483a:	4602      	mov	r2, r0
 800483c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800483e:	1ad3      	subs	r3, r2, r3
 8004840:	2b02      	cmp	r3, #2
 8004842:	d901      	bls.n	8004848 <HAL_RCC_OscConfig+0x940>
        {
          return HAL_TIMEOUT;
 8004844:	2303      	movs	r3, #3
 8004846:	e234      	b.n	8004cb2 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8004848:	4b3c      	ldr	r3, [pc, #240]	@ (800493c <HAL_RCC_OscConfig+0xa34>)
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004850:	2b00      	cmp	r3, #0
 8004852:	d1f0      	bne.n	8004836 <HAL_RCC_OscConfig+0x92e>
      }
    }
  }

  /*------------------------------ SHSI Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_SHSI) == RCC_OSCILLATORTYPE_SHSI)
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800485c:	2b00      	cmp	r3, #0
 800485e:	d036      	beq.n	80048ce <HAL_RCC_OscConfig+0x9c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SHSI(pRCC_OscInitStruct->SHSIState));

    /* Check the SHSI State */
    if (pRCC_OscInitStruct->SHSIState != RCC_SHSI_OFF)
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004864:	2b00      	cmp	r3, #0
 8004866:	d019      	beq.n	800489c <HAL_RCC_OscConfig+0x994>
    {
      /* Enable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_ENABLE();
 8004868:	4b34      	ldr	r3, [pc, #208]	@ (800493c <HAL_RCC_OscConfig+0xa34>)
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	4a33      	ldr	r2, [pc, #204]	@ (800493c <HAL_RCC_OscConfig+0xa34>)
 800486e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004872:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8004874:	f7fd fe56 	bl	8002524 <HAL_GetTick>
 8004878:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is ready */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 800487a:	e008      	b.n	800488e <HAL_RCC_OscConfig+0x986>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 800487c:	f7fd fe52 	bl	8002524 <HAL_GetTick>
 8004880:	4602      	mov	r2, r0
 8004882:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004884:	1ad3      	subs	r3, r2, r3
 8004886:	2b02      	cmp	r3, #2
 8004888:	d901      	bls.n	800488e <HAL_RCC_OscConfig+0x986>
        {
          return HAL_TIMEOUT;
 800488a:	2303      	movs	r3, #3
 800488c:	e211      	b.n	8004cb2 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 800488e:	4b2b      	ldr	r3, [pc, #172]	@ (800493c <HAL_RCC_OscConfig+0xa34>)
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004896:	2b00      	cmp	r3, #0
 8004898:	d0f0      	beq.n	800487c <HAL_RCC_OscConfig+0x974>
 800489a:	e018      	b.n	80048ce <HAL_RCC_OscConfig+0x9c6>
      }
    }
    else
    {
      /* Disable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_DISABLE();
 800489c:	4b27      	ldr	r3, [pc, #156]	@ (800493c <HAL_RCC_OscConfig+0xa34>)
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	4a26      	ldr	r2, [pc, #152]	@ (800493c <HAL_RCC_OscConfig+0xa34>)
 80048a2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80048a6:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80048a8:	f7fd fe3c 	bl	8002524 <HAL_GetTick>
 80048ac:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 80048ae:	e008      	b.n	80048c2 <HAL_RCC_OscConfig+0x9ba>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 80048b0:	f7fd fe38 	bl	8002524 <HAL_GetTick>
 80048b4:	4602      	mov	r2, r0
 80048b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048b8:	1ad3      	subs	r3, r2, r3
 80048ba:	2b02      	cmp	r3, #2
 80048bc:	d901      	bls.n	80048c2 <HAL_RCC_OscConfig+0x9ba>
        {
          return HAL_TIMEOUT;
 80048be:	2303      	movs	r3, #3
 80048c0:	e1f7      	b.n	8004cb2 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 80048c2:	4b1e      	ldr	r3, [pc, #120]	@ (800493c <HAL_RCC_OscConfig+0xa34>)
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d1f0      	bne.n	80048b0 <HAL_RCC_OscConfig+0x9a8>
        }
      }
    }
  }
  /*------------------------------ MSIK Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIK) == RCC_OSCILLATORTYPE_MSIK)
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d07f      	beq.n	80049da <HAL_RCC_OscConfig+0xad2>
    assert_param(IS_RCC_MSIK(pRCC_OscInitStruct->MSIKState));
    assert_param(IS_RCC_MSIK_CLOCK_RANGE(pRCC_OscInitStruct->MSIKClockRange));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));

    /* Check the MSIK State */
    if (pRCC_OscInitStruct->MSIKState != RCC_MSIK_OFF)
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d062      	beq.n	80049a8 <HAL_RCC_OscConfig+0xaa0>
    {

      /* Selects the Multiple Speed of kernel high speed oscillator (MSIK) clock range .*/
      __HAL_RCC_MSIK_RANGE_CONFIG(pRCC_OscInitStruct->MSIKClockRange);
 80048e2:	4b16      	ldr	r3, [pc, #88]	@ (800493c <HAL_RCC_OscConfig+0xa34>)
 80048e4:	689b      	ldr	r3, [r3, #8]
 80048e6:	4a15      	ldr	r2, [pc, #84]	@ (800493c <HAL_RCC_OscConfig+0xa34>)
 80048e8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80048ec:	6093      	str	r3, [r2, #8]
 80048ee:	4b13      	ldr	r3, [pc, #76]	@ (800493c <HAL_RCC_OscConfig+0xa34>)
 80048f0:	689b      	ldr	r3, [r3, #8]
 80048f2:	f023 6270 	bic.w	r2, r3, #251658240	@ 0xf000000
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048fa:	4910      	ldr	r1, [pc, #64]	@ (800493c <HAL_RCC_OscConfig+0xa34>)
 80048fc:	4313      	orrs	r3, r2
 80048fe:	608b      	str	r3, [r1, #8]
      /* Adjusts the Multiple Speed of kernel high speed oscillator (MSIK) calibration value.*/
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004904:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8004908:	d309      	bcc.n	800491e <HAL_RCC_OscConfig+0xa16>
 800490a:	4b0c      	ldr	r3, [pc, #48]	@ (800493c <HAL_RCC_OscConfig+0xa34>)
 800490c:	68db      	ldr	r3, [r3, #12]
 800490e:	f023 021f 	bic.w	r2, r3, #31
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	6a1b      	ldr	r3, [r3, #32]
 8004916:	4909      	ldr	r1, [pc, #36]	@ (800493c <HAL_RCC_OscConfig+0xa34>)
 8004918:	4313      	orrs	r3, r2
 800491a:	60cb      	str	r3, [r1, #12]
 800491c:	e02a      	b.n	8004974 <HAL_RCC_OscConfig+0xa6c>
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004922:	2b00      	cmp	r3, #0
 8004924:	da0c      	bge.n	8004940 <HAL_RCC_OscConfig+0xa38>
 8004926:	4b05      	ldr	r3, [pc, #20]	@ (800493c <HAL_RCC_OscConfig+0xa34>)
 8004928:	68db      	ldr	r3, [r3, #12]
 800492a:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	6a1b      	ldr	r3, [r3, #32]
 8004932:	015b      	lsls	r3, r3, #5
 8004934:	4901      	ldr	r1, [pc, #4]	@ (800493c <HAL_RCC_OscConfig+0xa34>)
 8004936:	4313      	orrs	r3, r2
 8004938:	60cb      	str	r3, [r1, #12]
 800493a:	e01b      	b.n	8004974 <HAL_RCC_OscConfig+0xa6c>
 800493c:	46020c00 	.word	0x46020c00
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004944:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004948:	d30a      	bcc.n	8004960 <HAL_RCC_OscConfig+0xa58>
 800494a:	4ba1      	ldr	r3, [pc, #644]	@ (8004bd0 <HAL_RCC_OscConfig+0xcc8>)
 800494c:	68db      	ldr	r3, [r3, #12]
 800494e:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	6a1b      	ldr	r3, [r3, #32]
 8004956:	029b      	lsls	r3, r3, #10
 8004958:	499d      	ldr	r1, [pc, #628]	@ (8004bd0 <HAL_RCC_OscConfig+0xcc8>)
 800495a:	4313      	orrs	r3, r2
 800495c:	60cb      	str	r3, [r1, #12]
 800495e:	e009      	b.n	8004974 <HAL_RCC_OscConfig+0xa6c>
 8004960:	4b9b      	ldr	r3, [pc, #620]	@ (8004bd0 <HAL_RCC_OscConfig+0xcc8>)
 8004962:	68db      	ldr	r3, [r3, #12]
 8004964:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	6a1b      	ldr	r3, [r3, #32]
 800496c:	03db      	lsls	r3, r3, #15
 800496e:	4998      	ldr	r1, [pc, #608]	@ (8004bd0 <HAL_RCC_OscConfig+0xcc8>)
 8004970:	4313      	orrs	r3, r2
 8004972:	60cb      	str	r3, [r1, #12]
                                            (pRCC_OscInitStruct->MSIClockRange));

      /* Enable the Internal kernel High Speed oscillator (MSIK) */
      __HAL_RCC_MSIK_ENABLE();
 8004974:	4b96      	ldr	r3, [pc, #600]	@ (8004bd0 <HAL_RCC_OscConfig+0xcc8>)
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	4a95      	ldr	r2, [pc, #596]	@ (8004bd0 <HAL_RCC_OscConfig+0xcc8>)
 800497a:	f043 0310 	orr.w	r3, r3, #16
 800497e:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8004980:	f7fd fdd0 	bl	8002524 <HAL_GetTick>
 8004984:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is ready */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 8004986:	e008      	b.n	800499a <HAL_RCC_OscConfig+0xa92>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8004988:	f7fd fdcc 	bl	8002524 <HAL_GetTick>
 800498c:	4602      	mov	r2, r0
 800498e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004990:	1ad3      	subs	r3, r2, r3
 8004992:	2b02      	cmp	r3, #2
 8004994:	d901      	bls.n	800499a <HAL_RCC_OscConfig+0xa92>
        {
          return HAL_TIMEOUT;
 8004996:	2303      	movs	r3, #3
 8004998:	e18b      	b.n	8004cb2 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 800499a:	4b8d      	ldr	r3, [pc, #564]	@ (8004bd0 <HAL_RCC_OscConfig+0xcc8>)
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	f003 0320 	and.w	r3, r3, #32
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d0f0      	beq.n	8004988 <HAL_RCC_OscConfig+0xa80>
 80049a6:	e018      	b.n	80049da <HAL_RCC_OscConfig+0xad2>
      }
    }
    else
    {
      /* Disable the Internal High Speed Kernel oscillator (MSIK) */
      __HAL_RCC_MSIK_DISABLE();
 80049a8:	4b89      	ldr	r3, [pc, #548]	@ (8004bd0 <HAL_RCC_OscConfig+0xcc8>)
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	4a88      	ldr	r2, [pc, #544]	@ (8004bd0 <HAL_RCC_OscConfig+0xcc8>)
 80049ae:	f023 0310 	bic.w	r3, r3, #16
 80049b2:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80049b4:	f7fd fdb6 	bl	8002524 <HAL_GetTick>
 80049b8:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 80049ba:	e008      	b.n	80049ce <HAL_RCC_OscConfig+0xac6>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 80049bc:	f7fd fdb2 	bl	8002524 <HAL_GetTick>
 80049c0:	4602      	mov	r2, r0
 80049c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049c4:	1ad3      	subs	r3, r2, r3
 80049c6:	2b02      	cmp	r3, #2
 80049c8:	d901      	bls.n	80049ce <HAL_RCC_OscConfig+0xac6>
        {
          return HAL_TIMEOUT;
 80049ca:	2303      	movs	r3, #3
 80049cc:	e171      	b.n	8004cb2 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 80049ce:	4b80      	ldr	r3, [pc, #512]	@ (8004bd0 <HAL_RCC_OscConfig+0xcc8>)
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	f003 0320 	and.w	r3, r3, #32
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d1f0      	bne.n	80049bc <HAL_RCC_OscConfig+0xab4>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL.PLLState));

  if ((pRCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049de:	2b00      	cmp	r3, #0
 80049e0:	f000 8166 	beq.w	8004cb0 <HAL_RCC_OscConfig+0xda8>
  {
    FlagStatus  pwrclkchanged = RESET;
 80049e4:	2300      	movs	r3, #0
 80049e6:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34

    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80049ea:	4b79      	ldr	r3, [pc, #484]	@ (8004bd0 <HAL_RCC_OscConfig+0xcc8>)
 80049ec:	69db      	ldr	r3, [r3, #28]
 80049ee:	f003 030c 	and.w	r3, r3, #12
 80049f2:	2b0c      	cmp	r3, #12
 80049f4:	f000 80f2 	beq.w	8004bdc <HAL_RCC_OscConfig+0xcd4>
    {
      if ((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049fc:	2b02      	cmp	r3, #2
 80049fe:	f040 80c5 	bne.w	8004b8c <HAL_RCC_OscConfig+0xc84>
        assert_param(IS_RCC_PLLP_VALUE(pRCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(pRCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(pRCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8004a02:	4b73      	ldr	r3, [pc, #460]	@ (8004bd0 <HAL_RCC_OscConfig+0xcc8>)
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	4a72      	ldr	r2, [pc, #456]	@ (8004bd0 <HAL_RCC_OscConfig+0xcc8>)
 8004a08:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004a0c:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8004a0e:	f7fd fd89 	bl	8002524 <HAL_GetTick>
 8004a12:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8004a14:	e008      	b.n	8004a28 <HAL_RCC_OscConfig+0xb20>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a16:	f7fd fd85 	bl	8002524 <HAL_GetTick>
 8004a1a:	4602      	mov	r2, r0
 8004a1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a1e:	1ad3      	subs	r3, r2, r3
 8004a20:	2b02      	cmp	r3, #2
 8004a22:	d901      	bls.n	8004a28 <HAL_RCC_OscConfig+0xb20>
          {
            return HAL_TIMEOUT;
 8004a24:	2303      	movs	r3, #3
 8004a26:	e144      	b.n	8004cb2 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8004a28:	4b69      	ldr	r3, [pc, #420]	@ (8004bd0 <HAL_RCC_OscConfig+0xcc8>)
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d1f0      	bne.n	8004a16 <HAL_RCC_OscConfig+0xb0e>
          }
        }

        /* Requires to enable write access to Backup Domain of necessary */
        if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004a34:	4b66      	ldr	r3, [pc, #408]	@ (8004bd0 <HAL_RCC_OscConfig+0xcc8>)
 8004a36:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004a3a:	f003 0304 	and.w	r3, r3, #4
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d111      	bne.n	8004a66 <HAL_RCC_OscConfig+0xb5e>
        {
          __HAL_RCC_PWR_CLK_ENABLE();
 8004a42:	4b63      	ldr	r3, [pc, #396]	@ (8004bd0 <HAL_RCC_OscConfig+0xcc8>)
 8004a44:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004a48:	4a61      	ldr	r2, [pc, #388]	@ (8004bd0 <HAL_RCC_OscConfig+0xcc8>)
 8004a4a:	f043 0304 	orr.w	r3, r3, #4
 8004a4e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8004a52:	4b5f      	ldr	r3, [pc, #380]	@ (8004bd0 <HAL_RCC_OscConfig+0xcc8>)
 8004a54:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004a58:	f003 0304 	and.w	r3, r3, #4
 8004a5c:	60fb      	str	r3, [r7, #12]
 8004a5e:	68fb      	ldr	r3, [r7, #12]
          pwrclkchanged = SET;
 8004a60:	2301      	movs	r3, #1
 8004a62:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
        }

        /*Disable EPOD to configure PLL1MBOOST*/
        if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) == PWR_VOSR_BOOSTEN)
 8004a66:	4b5b      	ldr	r3, [pc, #364]	@ (8004bd4 <HAL_RCC_OscConfig+0xccc>)
 8004a68:	68db      	ldr	r3, [r3, #12]
 8004a6a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004a6e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004a72:	d102      	bne.n	8004a7a <HAL_RCC_OscConfig+0xb72>
        {
          pwrboosten = SET;
 8004a74:	2301      	movs	r3, #1
 8004a76:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
        }
        CLEAR_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8004a7a:	4b56      	ldr	r3, [pc, #344]	@ (8004bd4 <HAL_RCC_OscConfig+0xccc>)
 8004a7c:	68db      	ldr	r3, [r3, #12]
 8004a7e:	4a55      	ldr	r2, [pc, #340]	@ (8004bd4 <HAL_RCC_OscConfig+0xccc>)
 8004a80:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004a84:	60d3      	str	r3, [r2, #12]

        /* Configure the main PLL clock source, multiplication and division factors */
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 8004a86:	4b52      	ldr	r3, [pc, #328]	@ (8004bd0 <HAL_RCC_OscConfig+0xcc8>)
 8004a88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a8a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004a8e:	f023 0303 	bic.w	r3, r3, #3
 8004a92:	687a      	ldr	r2, [r7, #4]
 8004a94:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8004a96:	687a      	ldr	r2, [r7, #4]
 8004a98:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8004a9a:	3a01      	subs	r2, #1
 8004a9c:	0212      	lsls	r2, r2, #8
 8004a9e:	4311      	orrs	r1, r2
 8004aa0:	687a      	ldr	r2, [r7, #4]
 8004aa2:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8004aa4:	430a      	orrs	r2, r1
 8004aa6:	494a      	ldr	r1, [pc, #296]	@ (8004bd0 <HAL_RCC_OscConfig+0xcc8>)
 8004aa8:	4313      	orrs	r3, r2
 8004aaa:	628b      	str	r3, [r1, #40]	@ 0x28
 8004aac:	4b48      	ldr	r3, [pc, #288]	@ (8004bd0 <HAL_RCC_OscConfig+0xcc8>)
 8004aae:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004ab0:	4b49      	ldr	r3, [pc, #292]	@ (8004bd8 <HAL_RCC_OscConfig+0xcd0>)
 8004ab2:	4013      	ands	r3, r2
 8004ab4:	687a      	ldr	r2, [r7, #4]
 8004ab6:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8004ab8:	3a01      	subs	r2, #1
 8004aba:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8004abe:	687a      	ldr	r2, [r7, #4]
 8004ac0:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8004ac2:	3a01      	subs	r2, #1
 8004ac4:	0252      	lsls	r2, r2, #9
 8004ac6:	b292      	uxth	r2, r2
 8004ac8:	4311      	orrs	r1, r2
 8004aca:	687a      	ldr	r2, [r7, #4]
 8004acc:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004ace:	3a01      	subs	r2, #1
 8004ad0:	0412      	lsls	r2, r2, #16
 8004ad2:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8004ad6:	4311      	orrs	r1, r2
 8004ad8:	687a      	ldr	r2, [r7, #4]
 8004ada:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8004adc:	3a01      	subs	r2, #1
 8004ade:	0612      	lsls	r2, r2, #24
 8004ae0:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8004ae4:	430a      	orrs	r2, r1
 8004ae6:	493a      	ldr	r1, [pc, #232]	@ (8004bd0 <HAL_RCC_OscConfig+0xcc8>)
 8004ae8:	4313      	orrs	r3, r2
 8004aea:	634b      	str	r3, [r1, #52]	@ 0x34
                             pRCC_OscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_DISABLE();
 8004aec:	4b38      	ldr	r3, [pc, #224]	@ (8004bd0 <HAL_RCC_OscConfig+0xcc8>)
 8004aee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004af0:	4a37      	ldr	r2, [pc, #220]	@ (8004bd0 <HAL_RCC_OscConfig+0xcc8>)
 8004af2:	f023 0310 	bic.w	r3, r3, #16
 8004af6:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004afc:	4a34      	ldr	r2, [pc, #208]	@ (8004bd0 <HAL_RCC_OscConfig+0xcc8>)
 8004afe:	00db      	lsls	r3, r3, #3
 8004b00:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_ENABLE();
 8004b02:	4b33      	ldr	r3, [pc, #204]	@ (8004bd0 <HAL_RCC_OscConfig+0xcc8>)
 8004b04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b06:	4a32      	ldr	r2, [pc, #200]	@ (8004bd0 <HAL_RCC_OscConfig+0xcc8>)
 8004b08:	f043 0310 	orr.w	r3, r3, #16
 8004b0c:	6293      	str	r3, [r2, #40]	@ 0x28

        assert_param(IS_RCC_PLLRGE_VALUE(pRCC_OscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(pRCC_OscInitStruct->PLL.PLLRGE);
 8004b0e:	4b30      	ldr	r3, [pc, #192]	@ (8004bd0 <HAL_RCC_OscConfig+0xcc8>)
 8004b10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b12:	f023 020c 	bic.w	r2, r3, #12
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b1a:	492d      	ldr	r1, [pc, #180]	@ (8004bd0 <HAL_RCC_OscConfig+0xcc8>)
 8004b1c:	4313      	orrs	r3, r2
 8004b1e:	628b      	str	r3, [r1, #40]	@ 0x28

        if (pwrboosten == SET)
 8004b20:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8004b24:	2b01      	cmp	r3, #1
 8004b26:	d105      	bne.n	8004b34 <HAL_RCC_OscConfig+0xc2c>
        {
          /* Enable the EPOD to reach max frequency */
          SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8004b28:	4b2a      	ldr	r3, [pc, #168]	@ (8004bd4 <HAL_RCC_OscConfig+0xccc>)
 8004b2a:	68db      	ldr	r3, [r3, #12]
 8004b2c:	4a29      	ldr	r2, [pc, #164]	@ (8004bd4 <HAL_RCC_OscConfig+0xccc>)
 8004b2e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004b32:	60d3      	str	r3, [r2, #12]
        }

        /* Restore clock configuration if changed */
        if (pwrclkchanged == SET)
 8004b34:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8004b38:	2b01      	cmp	r3, #1
 8004b3a:	d107      	bne.n	8004b4c <HAL_RCC_OscConfig+0xc44>
        {
          __HAL_RCC_PWR_CLK_DISABLE();
 8004b3c:	4b24      	ldr	r3, [pc, #144]	@ (8004bd0 <HAL_RCC_OscConfig+0xcc8>)
 8004b3e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004b42:	4a23      	ldr	r2, [pc, #140]	@ (8004bd0 <HAL_RCC_OscConfig+0xcc8>)
 8004b44:	f023 0304 	bic.w	r3, r3, #4
 8004b48:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
        }

        /* Enable the main PLL */
        __HAL_RCC_PLL_ENABLE();
 8004b4c:	4b20      	ldr	r3, [pc, #128]	@ (8004bd0 <HAL_RCC_OscConfig+0xcc8>)
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	4a1f      	ldr	r2, [pc, #124]	@ (8004bd0 <HAL_RCC_OscConfig+0xcc8>)
 8004b52:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004b56:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8004b58:	f7fd fce4 	bl	8002524 <HAL_GetTick>
 8004b5c:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8004b5e:	e008      	b.n	8004b72 <HAL_RCC_OscConfig+0xc6a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b60:	f7fd fce0 	bl	8002524 <HAL_GetTick>
 8004b64:	4602      	mov	r2, r0
 8004b66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b68:	1ad3      	subs	r3, r2, r3
 8004b6a:	2b02      	cmp	r3, #2
 8004b6c:	d901      	bls.n	8004b72 <HAL_RCC_OscConfig+0xc6a>
          {
            return HAL_TIMEOUT;
 8004b6e:	2303      	movs	r3, #3
 8004b70:	e09f      	b.n	8004cb2 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8004b72:	4b17      	ldr	r3, [pc, #92]	@ (8004bd0 <HAL_RCC_OscConfig+0xcc8>)
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d0f0      	beq.n	8004b60 <HAL_RCC_OscConfig+0xc58>
          }
        }

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8004b7e:	4b14      	ldr	r3, [pc, #80]	@ (8004bd0 <HAL_RCC_OscConfig+0xcc8>)
 8004b80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b82:	4a13      	ldr	r2, [pc, #76]	@ (8004bd0 <HAL_RCC_OscConfig+0xcc8>)
 8004b84:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004b88:	6293      	str	r3, [r2, #40]	@ 0x28
 8004b8a:	e091      	b.n	8004cb0 <HAL_RCC_OscConfig+0xda8>

      }
      else
      {
        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8004b8c:	4b10      	ldr	r3, [pc, #64]	@ (8004bd0 <HAL_RCC_OscConfig+0xcc8>)
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	4a0f      	ldr	r2, [pc, #60]	@ (8004bd0 <HAL_RCC_OscConfig+0xcc8>)
 8004b92:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004b96:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8004b98:	f7fd fcc4 	bl	8002524 <HAL_GetTick>
 8004b9c:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8004b9e:	e008      	b.n	8004bb2 <HAL_RCC_OscConfig+0xcaa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ba0:	f7fd fcc0 	bl	8002524 <HAL_GetTick>
 8004ba4:	4602      	mov	r2, r0
 8004ba6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ba8:	1ad3      	subs	r3, r2, r3
 8004baa:	2b02      	cmp	r3, #2
 8004bac:	d901      	bls.n	8004bb2 <HAL_RCC_OscConfig+0xcaa>
          {
            return HAL_TIMEOUT;
 8004bae:	2303      	movs	r3, #3
 8004bb0:	e07f      	b.n	8004cb2 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8004bb2:	4b07      	ldr	r3, [pc, #28]	@ (8004bd0 <HAL_RCC_OscConfig+0xcc8>)
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d1f0      	bne.n	8004ba0 <HAL_RCC_OscConfig+0xc98>
          }
        }

        /* Unselect main PLL clock source and disable main PLL outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 8004bbe:	4b04      	ldr	r3, [pc, #16]	@ (8004bd0 <HAL_RCC_OscConfig+0xcc8>)
 8004bc0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004bc2:	4a03      	ldr	r2, [pc, #12]	@ (8004bd0 <HAL_RCC_OscConfig+0xcc8>)
 8004bc4:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 8004bc8:	f023 0303 	bic.w	r3, r3, #3
 8004bcc:	6293      	str	r3, [r2, #40]	@ 0x28
 8004bce:	e06f      	b.n	8004cb0 <HAL_RCC_OscConfig+0xda8>
 8004bd0:	46020c00 	.word	0x46020c00
 8004bd4:	46020800 	.word	0x46020800
 8004bd8:	80800000 	.word	0x80800000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 8004bdc:	4b37      	ldr	r3, [pc, #220]	@ (8004cbc <HAL_RCC_OscConfig+0xdb4>)
 8004bde:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004be0:	61fb      	str	r3, [r7, #28]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8004be2:	4b36      	ldr	r3, [pc, #216]	@ (8004cbc <HAL_RCC_OscConfig+0xdb4>)
 8004be4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004be6:	61bb      	str	r3, [r7, #24]
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004bec:	2b01      	cmp	r3, #1
 8004bee:	d039      	beq.n	8004c64 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8004bf0:	69fb      	ldr	r3, [r7, #28]
 8004bf2:	f003 0203 	and.w	r2, r3, #3
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004bfa:	429a      	cmp	r2, r3
 8004bfc:	d132      	bne.n	8004c64 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 8004bfe:	69fb      	ldr	r3, [r7, #28]
 8004c00:	0a1b      	lsrs	r3, r3, #8
 8004c02:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c0a:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8004c0c:	429a      	cmp	r2, r3
 8004c0e:	d129      	bne.n	8004c64 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 8004c10:	69fb      	ldr	r3, [r7, #28]
 8004c12:	f403 4270 	and.w	r2, r3, #61440	@ 0xf000
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 8004c1a:	429a      	cmp	r2, r3
 8004c1c:	d122      	bne.n	8004c64 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004c1e:	69bb      	ldr	r3, [r7, #24]
 8004c20:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004c28:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 8004c2a:	429a      	cmp	r2, r3
 8004c2c:	d11a      	bne.n	8004c64 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 8004c2e:	69bb      	ldr	r3, [r7, #24]
 8004c30:	0a5b      	lsrs	r3, r3, #9
 8004c32:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004c3a:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004c3c:	429a      	cmp	r2, r3
 8004c3e:	d111      	bne.n	8004c64 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 8004c40:	69bb      	ldr	r3, [r7, #24]
 8004c42:	0c1b      	lsrs	r3, r3, #16
 8004c44:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004c4c:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004c4e:	429a      	cmp	r2, r3
 8004c50:	d108      	bne.n	8004c64 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 8004c52:	69bb      	ldr	r3, [r7, #24]
 8004c54:	0e1b      	lsrs	r3, r3, #24
 8004c56:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pRCC_OscInitStruct->PLL.PLLR - 1U)))
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c5e:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004c60:	429a      	cmp	r2, r3
 8004c62:	d001      	beq.n	8004c68 <HAL_RCC_OscConfig+0xd60>
      {
        return HAL_ERROR;
 8004c64:	2301      	movs	r3, #1
 8004c66:	e024      	b.n	8004cb2 <HAL_RCC_OscConfig+0xdaa>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8004c68:	4b14      	ldr	r3, [pc, #80]	@ (8004cbc <HAL_RCC_OscConfig+0xdb4>)
 8004c6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c6c:	08db      	lsrs	r3, r3, #3
 8004c6e:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pRCC_OscInitStruct->PLL.PLLFRACN))
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8004c76:	429a      	cmp	r2, r3
 8004c78:	d01a      	beq.n	8004cb0 <HAL_RCC_OscConfig+0xda8>
      {
        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN. */
        __HAL_RCC_PLL_FRACN_DISABLE();
 8004c7a:	4b10      	ldr	r3, [pc, #64]	@ (8004cbc <HAL_RCC_OscConfig+0xdb4>)
 8004c7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c7e:	4a0f      	ldr	r2, [pc, #60]	@ (8004cbc <HAL_RCC_OscConfig+0xdb4>)
 8004c80:	f023 0310 	bic.w	r3, r3, #16
 8004c84:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c86:	f7fd fc4d 	bl	8002524 <HAL_GetTick>
 8004c8a:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait at least 2 CK_REF (PLL1 input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < PLL_FRAC_WAIT_VALUE)
 8004c8c:	bf00      	nop
 8004c8e:	f7fd fc49 	bl	8002524 <HAL_GetTick>
 8004c92:	4602      	mov	r2, r0
 8004c94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c96:	4293      	cmp	r3, r2
 8004c98:	d0f9      	beq.n	8004c8e <HAL_RCC_OscConfig+0xd86>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c9e:	4a07      	ldr	r2, [pc, #28]	@ (8004cbc <HAL_RCC_OscConfig+0xdb4>)
 8004ca0:	00db      	lsls	r3, r3, #3
 8004ca2:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL_FRACN_ENABLE();
 8004ca4:	4b05      	ldr	r3, [pc, #20]	@ (8004cbc <HAL_RCC_OscConfig+0xdb4>)
 8004ca6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ca8:	4a04      	ldr	r2, [pc, #16]	@ (8004cbc <HAL_RCC_OscConfig+0xdb4>)
 8004caa:	f043 0310 	orr.w	r3, r3, #16
 8004cae:	6293      	str	r3, [r2, #40]	@ 0x28
      }
    }
  }
  return HAL_OK;
 8004cb0:	2300      	movs	r3, #0
}
 8004cb2:	4618      	mov	r0, r3
 8004cb4:	3738      	adds	r7, #56	@ 0x38
 8004cb6:	46bd      	mov	sp, r7
 8004cb8:	bd80      	pop	{r7, pc}
 8004cba:	bf00      	nop
 8004cbc:	46020c00 	.word	0x46020c00

08004cc0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef   *const pRCC_ClkInitStruct, uint32_t FLatency)
{
 8004cc0:	b580      	push	{r7, lr}
 8004cc2:	b086      	sub	sp, #24
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	6078      	str	r0, [r7, #4]
 8004cc8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pRCC_ClkInitStruct == NULL)
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d101      	bne.n	8004cd4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004cd0:	2301      	movs	r3, #1
 8004cd2:	e1d9      	b.n	8005088 <HAL_RCC_ClockConfig+0x3c8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
   must be correctly programmed according to the frequency of the CPU clock
   (HCLK) and the supply voltage of the device */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004cd4:	4b9b      	ldr	r3, [pc, #620]	@ (8004f44 <HAL_RCC_ClockConfig+0x284>)
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	f003 030f 	and.w	r3, r3, #15
 8004cdc:	683a      	ldr	r2, [r7, #0]
 8004cde:	429a      	cmp	r2, r3
 8004ce0:	d910      	bls.n	8004d04 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ce2:	4b98      	ldr	r3, [pc, #608]	@ (8004f44 <HAL_RCC_ClockConfig+0x284>)
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	f023 020f 	bic.w	r2, r3, #15
 8004cea:	4996      	ldr	r1, [pc, #600]	@ (8004f44 <HAL_RCC_ClockConfig+0x284>)
 8004cec:	683b      	ldr	r3, [r7, #0]
 8004cee:	4313      	orrs	r3, r2
 8004cf0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004cf2:	4b94      	ldr	r3, [pc, #592]	@ (8004f44 <HAL_RCC_ClockConfig+0x284>)
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	f003 030f 	and.w	r3, r3, #15
 8004cfa:	683a      	ldr	r2, [r7, #0]
 8004cfc:	429a      	cmp	r2, r3
 8004cfe:	d001      	beq.n	8004d04 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004d00:	2301      	movs	r3, #1
 8004d02:	e1c1      	b.n	8005088 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	f003 0310 	and.w	r3, r3, #16
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d010      	beq.n	8004d32 <HAL_RCC_ClockConfig+0x72>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) > (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	695a      	ldr	r2, [r3, #20]
 8004d14:	4b8c      	ldr	r3, [pc, #560]	@ (8004f48 <HAL_RCC_ClockConfig+0x288>)
 8004d16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d18:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004d1c:	429a      	cmp	r2, r3
 8004d1e:	d908      	bls.n	8004d32 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, pRCC_ClkInitStruct->APB3CLKDivider);
 8004d20:	4b89      	ldr	r3, [pc, #548]	@ (8004f48 <HAL_RCC_ClockConfig+0x288>)
 8004d22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d24:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	695b      	ldr	r3, [r3, #20]
 8004d2c:	4986      	ldr	r1, [pc, #536]	@ (8004f48 <HAL_RCC_ClockConfig+0x288>)
 8004d2e:	4313      	orrs	r3, r2
 8004d30:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	f003 0308 	and.w	r3, r3, #8
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d012      	beq.n	8004d64 <HAL_RCC_ClockConfig+0xa4>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	691a      	ldr	r2, [r3, #16]
 8004d42:	4b81      	ldr	r3, [pc, #516]	@ (8004f48 <HAL_RCC_ClockConfig+0x288>)
 8004d44:	6a1b      	ldr	r3, [r3, #32]
 8004d46:	091b      	lsrs	r3, r3, #4
 8004d48:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004d4c:	429a      	cmp	r2, r3
 8004d4e:	d909      	bls.n	8004d64 <HAL_RCC_ClockConfig+0xa4>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8004d50:	4b7d      	ldr	r3, [pc, #500]	@ (8004f48 <HAL_RCC_ClockConfig+0x288>)
 8004d52:	6a1b      	ldr	r3, [r3, #32]
 8004d54:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	691b      	ldr	r3, [r3, #16]
 8004d5c:	011b      	lsls	r3, r3, #4
 8004d5e:	497a      	ldr	r1, [pc, #488]	@ (8004f48 <HAL_RCC_ClockConfig+0x288>)
 8004d60:	4313      	orrs	r3, r2
 8004d62:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	f003 0304 	and.w	r3, r3, #4
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d010      	beq.n	8004d92 <HAL_RCC_ClockConfig+0xd2>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	68da      	ldr	r2, [r3, #12]
 8004d74:	4b74      	ldr	r3, [pc, #464]	@ (8004f48 <HAL_RCC_ClockConfig+0x288>)
 8004d76:	6a1b      	ldr	r3, [r3, #32]
 8004d78:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004d7c:	429a      	cmp	r2, r3
 8004d7e:	d908      	bls.n	8004d92 <HAL_RCC_ClockConfig+0xd2>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8004d80:	4b71      	ldr	r3, [pc, #452]	@ (8004f48 <HAL_RCC_ClockConfig+0x288>)
 8004d82:	6a1b      	ldr	r3, [r3, #32]
 8004d84:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	68db      	ldr	r3, [r3, #12]
 8004d8c:	496e      	ldr	r1, [pc, #440]	@ (8004f48 <HAL_RCC_ClockConfig+0x288>)
 8004d8e:	4313      	orrs	r3, r2
 8004d90:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	f003 0302 	and.w	r3, r3, #2
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d010      	beq.n	8004dc0 <HAL_RCC_ClockConfig+0x100>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	689a      	ldr	r2, [r3, #8]
 8004da2:	4b69      	ldr	r3, [pc, #420]	@ (8004f48 <HAL_RCC_ClockConfig+0x288>)
 8004da4:	6a1b      	ldr	r3, [r3, #32]
 8004da6:	f003 030f 	and.w	r3, r3, #15
 8004daa:	429a      	cmp	r2, r3
 8004dac:	d908      	bls.n	8004dc0 <HAL_RCC_ClockConfig+0x100>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 8004dae:	4b66      	ldr	r3, [pc, #408]	@ (8004f48 <HAL_RCC_ClockConfig+0x288>)
 8004db0:	6a1b      	ldr	r3, [r3, #32]
 8004db2:	f023 020f 	bic.w	r2, r3, #15
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	689b      	ldr	r3, [r3, #8]
 8004dba:	4963      	ldr	r1, [pc, #396]	@ (8004f48 <HAL_RCC_ClockConfig+0x288>)
 8004dbc:	4313      	orrs	r3, r2
 8004dbe:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	f003 0301 	and.w	r3, r3, #1
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	f000 80d2 	beq.w	8004f72 <HAL_RCC_ClockConfig+0x2b2>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pRCC_ClkInitStruct->SYSCLKSource));
    FlagStatus  pwrclkchanged = RESET;
 8004dce:	2300      	movs	r3, #0
 8004dd0:	75fb      	strb	r3, [r7, #23]

    /* PLL is selected as System Clock Source */
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	685b      	ldr	r3, [r3, #4]
 8004dd6:	2b03      	cmp	r3, #3
 8004dd8:	d143      	bne.n	8004e62 <HAL_RCC_ClockConfig+0x1a2>
    {
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004dda:	4b5b      	ldr	r3, [pc, #364]	@ (8004f48 <HAL_RCC_ClockConfig+0x288>)
 8004ddc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004de0:	f003 0304 	and.w	r3, r3, #4
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d110      	bne.n	8004e0a <HAL_RCC_ClockConfig+0x14a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8004de8:	4b57      	ldr	r3, [pc, #348]	@ (8004f48 <HAL_RCC_ClockConfig+0x288>)
 8004dea:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004dee:	4a56      	ldr	r2, [pc, #344]	@ (8004f48 <HAL_RCC_ClockConfig+0x288>)
 8004df0:	f043 0304 	orr.w	r3, r3, #4
 8004df4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8004df8:	4b53      	ldr	r3, [pc, #332]	@ (8004f48 <HAL_RCC_ClockConfig+0x288>)
 8004dfa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004dfe:	f003 0304 	and.w	r3, r3, #4
 8004e02:	60bb      	str	r3, [r7, #8]
 8004e04:	68bb      	ldr	r3, [r7, #8]
        pwrclkchanged = SET;
 8004e06:	2301      	movs	r3, #1
 8004e08:	75fb      	strb	r3, [r7, #23]
      }
      tickstart = HAL_GetTick();
 8004e0a:	f7fd fb8b 	bl	8002524 <HAL_GetTick>
 8004e0e:	6138      	str	r0, [r7, #16]
      /* Check if EPOD is enabled */
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 8004e10:	4b4e      	ldr	r3, [pc, #312]	@ (8004f4c <HAL_RCC_ClockConfig+0x28c>)
 8004e12:	68db      	ldr	r3, [r3, #12]
 8004e14:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d00f      	beq.n	8004e3c <HAL_RCC_ClockConfig+0x17c>
      {
        /* Wait till BOOST is ready */
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8004e1c:	e008      	b.n	8004e30 <HAL_RCC_ClockConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > EPOD_TIMEOUT_VALUE)
 8004e1e:	f7fd fb81 	bl	8002524 <HAL_GetTick>
 8004e22:	4602      	mov	r2, r0
 8004e24:	693b      	ldr	r3, [r7, #16]
 8004e26:	1ad3      	subs	r3, r2, r3
 8004e28:	2b02      	cmp	r3, #2
 8004e2a:	d901      	bls.n	8004e30 <HAL_RCC_ClockConfig+0x170>
          {
            return HAL_TIMEOUT;
 8004e2c:	2303      	movs	r3, #3
 8004e2e:	e12b      	b.n	8005088 <HAL_RCC_ClockConfig+0x3c8>
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8004e30:	4b46      	ldr	r3, [pc, #280]	@ (8004f4c <HAL_RCC_ClockConfig+0x28c>)
 8004e32:	68db      	ldr	r3, [r3, #12]
 8004e34:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d0f0      	beq.n	8004e1e <HAL_RCC_ClockConfig+0x15e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8004e3c:	7dfb      	ldrb	r3, [r7, #23]
 8004e3e:	2b01      	cmp	r3, #1
 8004e40:	d107      	bne.n	8004e52 <HAL_RCC_ClockConfig+0x192>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8004e42:	4b41      	ldr	r3, [pc, #260]	@ (8004f48 <HAL_RCC_ClockConfig+0x288>)
 8004e44:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004e48:	4a3f      	ldr	r2, [pc, #252]	@ (8004f48 <HAL_RCC_ClockConfig+0x288>)
 8004e4a:	f023 0304 	bic.w	r3, r3, #4
 8004e4e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
      }

      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8004e52:	4b3d      	ldr	r3, [pc, #244]	@ (8004f48 <HAL_RCC_ClockConfig+0x288>)
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d121      	bne.n	8004ea2 <HAL_RCC_ClockConfig+0x1e2>
      {
        return HAL_ERROR;
 8004e5e:	2301      	movs	r3, #1
 8004e60:	e112      	b.n	8005088 <HAL_RCC_ClockConfig+0x3c8>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	685b      	ldr	r3, [r3, #4]
 8004e66:	2b02      	cmp	r3, #2
 8004e68:	d107      	bne.n	8004e7a <HAL_RCC_ClockConfig+0x1ba>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004e6a:	4b37      	ldr	r3, [pc, #220]	@ (8004f48 <HAL_RCC_ClockConfig+0x288>)
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d115      	bne.n	8004ea2 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8004e76:	2301      	movs	r3, #1
 8004e78:	e106      	b.n	8005088 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	685b      	ldr	r3, [r3, #4]
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d107      	bne.n	8004e92 <HAL_RCC_ClockConfig+0x1d2>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8004e82:	4b31      	ldr	r3, [pc, #196]	@ (8004f48 <HAL_RCC_ClockConfig+0x288>)
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	f003 0304 	and.w	r3, r3, #4
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d109      	bne.n	8004ea2 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8004e8e:	2301      	movs	r3, #1
 8004e90:	e0fa      	b.n	8005088 <HAL_RCC_ClockConfig+0x3c8>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004e92:	4b2d      	ldr	r3, [pc, #180]	@ (8004f48 <HAL_RCC_ClockConfig+0x288>)
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d101      	bne.n	8004ea2 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8004e9e:	2301      	movs	r3, #1
 8004ea0:	e0f2      	b.n	8005088 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 8004ea2:	4b29      	ldr	r3, [pc, #164]	@ (8004f48 <HAL_RCC_ClockConfig+0x288>)
 8004ea4:	69db      	ldr	r3, [r3, #28]
 8004ea6:	f023 0203 	bic.w	r2, r3, #3
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	685b      	ldr	r3, [r3, #4]
 8004eae:	4926      	ldr	r1, [pc, #152]	@ (8004f48 <HAL_RCC_ClockConfig+0x288>)
 8004eb0:	4313      	orrs	r3, r2
 8004eb2:	61cb      	str	r3, [r1, #28]

    tickstart = HAL_GetTick();
 8004eb4:	f7fd fb36 	bl	8002524 <HAL_GetTick>
 8004eb8:	6138      	str	r0, [r7, #16]

    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	685b      	ldr	r3, [r3, #4]
 8004ebe:	2b03      	cmp	r3, #3
 8004ec0:	d112      	bne.n	8004ee8 <HAL_RCC_ClockConfig+0x228>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004ec2:	e00a      	b.n	8004eda <HAL_RCC_ClockConfig+0x21a>
      {
        if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004ec4:	f7fd fb2e 	bl	8002524 <HAL_GetTick>
 8004ec8:	4602      	mov	r2, r0
 8004eca:	693b      	ldr	r3, [r7, #16]
 8004ecc:	1ad3      	subs	r3, r2, r3
 8004ece:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004ed2:	4293      	cmp	r3, r2
 8004ed4:	d901      	bls.n	8004eda <HAL_RCC_ClockConfig+0x21a>
        {
          return HAL_TIMEOUT;
 8004ed6:	2303      	movs	r3, #3
 8004ed8:	e0d6      	b.n	8005088 <HAL_RCC_ClockConfig+0x3c8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004eda:	4b1b      	ldr	r3, [pc, #108]	@ (8004f48 <HAL_RCC_ClockConfig+0x288>)
 8004edc:	69db      	ldr	r3, [r3, #28]
 8004ede:	f003 030c 	and.w	r3, r3, #12
 8004ee2:	2b0c      	cmp	r3, #12
 8004ee4:	d1ee      	bne.n	8004ec4 <HAL_RCC_ClockConfig+0x204>
 8004ee6:	e044      	b.n	8004f72 <HAL_RCC_ClockConfig+0x2b2>
        }
      }
    }
    else
    {
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	685b      	ldr	r3, [r3, #4]
 8004eec:	2b02      	cmp	r3, #2
 8004eee:	d112      	bne.n	8004f16 <HAL_RCC_ClockConfig+0x256>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8004ef0:	e00a      	b.n	8004f08 <HAL_RCC_ClockConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004ef2:	f7fd fb17 	bl	8002524 <HAL_GetTick>
 8004ef6:	4602      	mov	r2, r0
 8004ef8:	693b      	ldr	r3, [r7, #16]
 8004efa:	1ad3      	subs	r3, r2, r3
 8004efc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004f00:	4293      	cmp	r3, r2
 8004f02:	d901      	bls.n	8004f08 <HAL_RCC_ClockConfig+0x248>
          {
            return HAL_TIMEOUT;
 8004f04:	2303      	movs	r3, #3
 8004f06:	e0bf      	b.n	8005088 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8004f08:	4b0f      	ldr	r3, [pc, #60]	@ (8004f48 <HAL_RCC_ClockConfig+0x288>)
 8004f0a:	69db      	ldr	r3, [r3, #28]
 8004f0c:	f003 030c 	and.w	r3, r3, #12
 8004f10:	2b08      	cmp	r3, #8
 8004f12:	d1ee      	bne.n	8004ef2 <HAL_RCC_ClockConfig+0x232>
 8004f14:	e02d      	b.n	8004f72 <HAL_RCC_ClockConfig+0x2b2>
          }
        }
      }
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	685b      	ldr	r3, [r3, #4]
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d123      	bne.n	8004f66 <HAL_RCC_ClockConfig+0x2a6>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8004f1e:	e00a      	b.n	8004f36 <HAL_RCC_ClockConfig+0x276>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004f20:	f7fd fb00 	bl	8002524 <HAL_GetTick>
 8004f24:	4602      	mov	r2, r0
 8004f26:	693b      	ldr	r3, [r7, #16]
 8004f28:	1ad3      	subs	r3, r2, r3
 8004f2a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004f2e:	4293      	cmp	r3, r2
 8004f30:	d901      	bls.n	8004f36 <HAL_RCC_ClockConfig+0x276>
          {
            return HAL_TIMEOUT;
 8004f32:	2303      	movs	r3, #3
 8004f34:	e0a8      	b.n	8005088 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8004f36:	4b04      	ldr	r3, [pc, #16]	@ (8004f48 <HAL_RCC_ClockConfig+0x288>)
 8004f38:	69db      	ldr	r3, [r3, #28]
 8004f3a:	f003 030c 	and.w	r3, r3, #12
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d1ee      	bne.n	8004f20 <HAL_RCC_ClockConfig+0x260>
 8004f42:	e016      	b.n	8004f72 <HAL_RCC_ClockConfig+0x2b2>
 8004f44:	40022000 	.word	0x40022000
 8004f48:	46020c00 	.word	0x46020c00
 8004f4c:	46020800 	.word	0x46020800
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004f50:	f7fd fae8 	bl	8002524 <HAL_GetTick>
 8004f54:	4602      	mov	r2, r0
 8004f56:	693b      	ldr	r3, [r7, #16]
 8004f58:	1ad3      	subs	r3, r2, r3
 8004f5a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004f5e:	4293      	cmp	r3, r2
 8004f60:	d901      	bls.n	8004f66 <HAL_RCC_ClockConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 8004f62:	2303      	movs	r3, #3
 8004f64:	e090      	b.n	8005088 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8004f66:	4b4a      	ldr	r3, [pc, #296]	@ (8005090 <HAL_RCC_ClockConfig+0x3d0>)
 8004f68:	69db      	ldr	r3, [r3, #28]
 8004f6a:	f003 030c 	and.w	r3, r3, #12
 8004f6e:	2b04      	cmp	r3, #4
 8004f70:	d1ee      	bne.n	8004f50 <HAL_RCC_ClockConfig+0x290>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	f003 0302 	and.w	r3, r3, #2
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d010      	beq.n	8004fa0 <HAL_RCC_ClockConfig+0x2e0>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	689a      	ldr	r2, [r3, #8]
 8004f82:	4b43      	ldr	r3, [pc, #268]	@ (8005090 <HAL_RCC_ClockConfig+0x3d0>)
 8004f84:	6a1b      	ldr	r3, [r3, #32]
 8004f86:	f003 030f 	and.w	r3, r3, #15
 8004f8a:	429a      	cmp	r2, r3
 8004f8c:	d208      	bcs.n	8004fa0 <HAL_RCC_ClockConfig+0x2e0>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 8004f8e:	4b40      	ldr	r3, [pc, #256]	@ (8005090 <HAL_RCC_ClockConfig+0x3d0>)
 8004f90:	6a1b      	ldr	r3, [r3, #32]
 8004f92:	f023 020f 	bic.w	r2, r3, #15
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	689b      	ldr	r3, [r3, #8]
 8004f9a:	493d      	ldr	r1, [pc, #244]	@ (8005090 <HAL_RCC_ClockConfig+0x3d0>)
 8004f9c:	4313      	orrs	r3, r2
 8004f9e:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004fa0:	4b3c      	ldr	r3, [pc, #240]	@ (8005094 <HAL_RCC_ClockConfig+0x3d4>)
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	f003 030f 	and.w	r3, r3, #15
 8004fa8:	683a      	ldr	r2, [r7, #0]
 8004faa:	429a      	cmp	r2, r3
 8004fac:	d210      	bcs.n	8004fd0 <HAL_RCC_ClockConfig+0x310>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004fae:	4b39      	ldr	r3, [pc, #228]	@ (8005094 <HAL_RCC_ClockConfig+0x3d4>)
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	f023 020f 	bic.w	r2, r3, #15
 8004fb6:	4937      	ldr	r1, [pc, #220]	@ (8005094 <HAL_RCC_ClockConfig+0x3d4>)
 8004fb8:	683b      	ldr	r3, [r7, #0]
 8004fba:	4313      	orrs	r3, r2
 8004fbc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004fbe:	4b35      	ldr	r3, [pc, #212]	@ (8005094 <HAL_RCC_ClockConfig+0x3d4>)
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	f003 030f 	and.w	r3, r3, #15
 8004fc6:	683a      	ldr	r2, [r7, #0]
 8004fc8:	429a      	cmp	r2, r3
 8004fca:	d001      	beq.n	8004fd0 <HAL_RCC_ClockConfig+0x310>
    {
      return HAL_ERROR;
 8004fcc:	2301      	movs	r3, #1
 8004fce:	e05b      	b.n	8005088 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	f003 0304 	and.w	r3, r3, #4
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d010      	beq.n	8004ffe <HAL_RCC_ClockConfig+0x33e>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	68da      	ldr	r2, [r3, #12]
 8004fe0:	4b2b      	ldr	r3, [pc, #172]	@ (8005090 <HAL_RCC_ClockConfig+0x3d0>)
 8004fe2:	6a1b      	ldr	r3, [r3, #32]
 8004fe4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004fe8:	429a      	cmp	r2, r3
 8004fea:	d208      	bcs.n	8004ffe <HAL_RCC_ClockConfig+0x33e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8004fec:	4b28      	ldr	r3, [pc, #160]	@ (8005090 <HAL_RCC_ClockConfig+0x3d0>)
 8004fee:	6a1b      	ldr	r3, [r3, #32]
 8004ff0:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	68db      	ldr	r3, [r3, #12]
 8004ff8:	4925      	ldr	r1, [pc, #148]	@ (8005090 <HAL_RCC_ClockConfig+0x3d0>)
 8004ffa:	4313      	orrs	r3, r2
 8004ffc:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	f003 0308 	and.w	r3, r3, #8
 8005006:	2b00      	cmp	r3, #0
 8005008:	d012      	beq.n	8005030 <HAL_RCC_ClockConfig+0x370>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	691a      	ldr	r2, [r3, #16]
 800500e:	4b20      	ldr	r3, [pc, #128]	@ (8005090 <HAL_RCC_ClockConfig+0x3d0>)
 8005010:	6a1b      	ldr	r3, [r3, #32]
 8005012:	091b      	lsrs	r3, r3, #4
 8005014:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005018:	429a      	cmp	r2, r3
 800501a:	d209      	bcs.n	8005030 <HAL_RCC_ClockConfig+0x370>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 800501c:	4b1c      	ldr	r3, [pc, #112]	@ (8005090 <HAL_RCC_ClockConfig+0x3d0>)
 800501e:	6a1b      	ldr	r3, [r3, #32]
 8005020:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	691b      	ldr	r3, [r3, #16]
 8005028:	011b      	lsls	r3, r3, #4
 800502a:	4919      	ldr	r1, [pc, #100]	@ (8005090 <HAL_RCC_ClockConfig+0x3d0>)
 800502c:	4313      	orrs	r3, r2
 800502e:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	f003 0310 	and.w	r3, r3, #16
 8005038:	2b00      	cmp	r3, #0
 800503a:	d010      	beq.n	800505e <HAL_RCC_ClockConfig+0x39e>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) < (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	695a      	ldr	r2, [r3, #20]
 8005040:	4b13      	ldr	r3, [pc, #76]	@ (8005090 <HAL_RCC_ClockConfig+0x3d0>)
 8005042:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005044:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005048:	429a      	cmp	r2, r3
 800504a:	d208      	bcs.n	800505e <HAL_RCC_ClockConfig+0x39e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, (pRCC_ClkInitStruct->APB3CLKDivider));
 800504c:	4b10      	ldr	r3, [pc, #64]	@ (8005090 <HAL_RCC_ClockConfig+0x3d0>)
 800504e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005050:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	695b      	ldr	r3, [r3, #20]
 8005058:	490d      	ldr	r1, [pc, #52]	@ (8005090 <HAL_RCC_ClockConfig+0x3d0>)
 800505a:	4313      	orrs	r3, r2
 800505c:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 800505e:	f000 f821 	bl	80050a4 <HAL_RCC_GetSysClockFreq>
 8005062:	4602      	mov	r2, r0
 8005064:	4b0a      	ldr	r3, [pc, #40]	@ (8005090 <HAL_RCC_ClockConfig+0x3d0>)
 8005066:	6a1b      	ldr	r3, [r3, #32]
 8005068:	f003 030f 	and.w	r3, r3, #15
 800506c:	490a      	ldr	r1, [pc, #40]	@ (8005098 <HAL_RCC_ClockConfig+0x3d8>)
 800506e:	5ccb      	ldrb	r3, [r1, r3]
 8005070:	fa22 f303 	lsr.w	r3, r2, r3
 8005074:	4a09      	ldr	r2, [pc, #36]	@ (800509c <HAL_RCC_ClockConfig+0x3dc>)
 8005076:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005078:	4b09      	ldr	r3, [pc, #36]	@ (80050a0 <HAL_RCC_ClockConfig+0x3e0>)
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	4618      	mov	r0, r3
 800507e:	f7fc fd97 	bl	8001bb0 <HAL_InitTick>
 8005082:	4603      	mov	r3, r0
 8005084:	73fb      	strb	r3, [r7, #15]

  return status;
 8005086:	7bfb      	ldrb	r3, [r7, #15]
}
 8005088:	4618      	mov	r0, r3
 800508a:	3718      	adds	r7, #24
 800508c:	46bd      	mov	sp, r7
 800508e:	bd80      	pop	{r7, pc}
 8005090:	46020c00 	.word	0x46020c00
 8005094:	40022000 	.word	0x40022000
 8005098:	0800d05c 	.word	0x0800d05c
 800509c:	20000008 	.word	0x20000008
 80050a0:	20000028 	.word	0x20000028

080050a4 <HAL_RCC_GetSysClockFreq>:
  * @note   Each time SYSCLK changes, this function must be called to update the
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80050a4:	b480      	push	{r7}
 80050a6:	b08b      	sub	sp, #44	@ 0x2c
 80050a8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 80050aa:	2300      	movs	r3, #0
 80050ac:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pllsource;
  uint32_t pllr;
  uint32_t pllm;
  uint32_t pllfracen;
  uint32_t sysclockfreq = 0U;
 80050ae:	2300      	movs	r3, #0
 80050b0:	623b      	str	r3, [r7, #32]
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  float_t fracn1;
  float_t pllvco;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80050b2:	4b78      	ldr	r3, [pc, #480]	@ (8005294 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80050b4:	69db      	ldr	r3, [r3, #28]
 80050b6:	f003 030c 	and.w	r3, r3, #12
 80050ba:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80050bc:	4b75      	ldr	r3, [pc, #468]	@ (8005294 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80050be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050c0:	f003 0303 	and.w	r3, r3, #3
 80050c4:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80050c6:	69bb      	ldr	r3, [r7, #24]
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d005      	beq.n	80050d8 <HAL_RCC_GetSysClockFreq+0x34>
 80050cc:	69bb      	ldr	r3, [r7, #24]
 80050ce:	2b0c      	cmp	r3, #12
 80050d0:	d121      	bne.n	8005116 <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80050d2:	697b      	ldr	r3, [r7, #20]
 80050d4:	2b01      	cmp	r3, #1
 80050d6:	d11e      	bne.n	8005116 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 80050d8:	4b6e      	ldr	r3, [pc, #440]	@ (8005294 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80050da:	689b      	ldr	r3, [r3, #8]
 80050dc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d107      	bne.n	80050f4 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 80050e4:	4b6b      	ldr	r3, [pc, #428]	@ (8005294 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80050e6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80050ea:	0b1b      	lsrs	r3, r3, #12
 80050ec:	f003 030f 	and.w	r3, r3, #15
 80050f0:	627b      	str	r3, [r7, #36]	@ 0x24
 80050f2:	e005      	b.n	8005100 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 80050f4:	4b67      	ldr	r3, [pc, #412]	@ (8005294 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80050f6:	689b      	ldr	r3, [r3, #8]
 80050f8:	0f1b      	lsrs	r3, r3, #28
 80050fa:	f003 030f 	and.w	r3, r3, #15
 80050fe:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005100:	4a65      	ldr	r2, [pc, #404]	@ (8005298 <HAL_RCC_GetSysClockFreq+0x1f4>)
 8005102:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005104:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005108:	627b      	str	r3, [r7, #36]	@ 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800510a:	69bb      	ldr	r3, [r7, #24]
 800510c:	2b00      	cmp	r3, #0
 800510e:	d110      	bne.n	8005132 <HAL_RCC_GetSysClockFreq+0x8e>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8005110:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005112:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8005114:	e00d      	b.n	8005132 <HAL_RCC_GetSysClockFreq+0x8e>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005116:	4b5f      	ldr	r3, [pc, #380]	@ (8005294 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8005118:	69db      	ldr	r3, [r3, #28]
 800511a:	f003 030c 	and.w	r3, r3, #12
 800511e:	2b04      	cmp	r3, #4
 8005120:	d102      	bne.n	8005128 <HAL_RCC_GetSysClockFreq+0x84>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005122:	4b5e      	ldr	r3, [pc, #376]	@ (800529c <HAL_RCC_GetSysClockFreq+0x1f8>)
 8005124:	623b      	str	r3, [r7, #32]
 8005126:	e004      	b.n	8005132 <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005128:	69bb      	ldr	r3, [r7, #24]
 800512a:	2b08      	cmp	r3, #8
 800512c:	d101      	bne.n	8005132 <HAL_RCC_GetSysClockFreq+0x8e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800512e:	4b5b      	ldr	r3, [pc, #364]	@ (800529c <HAL_RCC_GetSysClockFreq+0x1f8>)
 8005130:	623b      	str	r3, [r7, #32]
  else
  {
    /* Nothing to do */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005132:	69bb      	ldr	r3, [r7, #24]
 8005134:	2b0c      	cmp	r3, #12
 8005136:	f040 80a5 	bne.w	8005284 <HAL_RCC_GetSysClockFreq+0x1e0>
  {
    /* PLL used as system clock  source
       PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
       SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 800513a:	4b56      	ldr	r3, [pc, #344]	@ (8005294 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800513c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800513e:	f003 0303 	and.w	r3, r3, #3
 8005142:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8005144:	4b53      	ldr	r3, [pc, #332]	@ (8005294 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8005146:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005148:	0a1b      	lsrs	r3, r3, #8
 800514a:	f003 030f 	and.w	r3, r3, #15
 800514e:	3301      	adds	r3, #1
 8005150:	60fb      	str	r3, [r7, #12]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8005152:	4b50      	ldr	r3, [pc, #320]	@ (8005294 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8005154:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005156:	091b      	lsrs	r3, r3, #4
 8005158:	f003 0301 	and.w	r3, r3, #1
 800515c:	60bb      	str	r3, [r7, #8]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 800515e:	4b4d      	ldr	r3, [pc, #308]	@ (8005294 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8005160:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005162:	08db      	lsrs	r3, r3, #3
 8005164:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005168:	68ba      	ldr	r2, [r7, #8]
 800516a:	fb02 f303 	mul.w	r3, r2, r3
 800516e:	ee07 3a90 	vmov	s15, r3
 8005172:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005176:	edc7 7a01 	vstr	s15, [r7, #4]
                                              RCC_PLL1FRACR_PLL1FRACN_Pos));

    switch (pllsource)
 800517a:	693b      	ldr	r3, [r7, #16]
 800517c:	2b02      	cmp	r3, #2
 800517e:	d003      	beq.n	8005188 <HAL_RCC_GetSysClockFreq+0xe4>
 8005180:	693b      	ldr	r3, [r7, #16]
 8005182:	2b03      	cmp	r3, #3
 8005184:	d022      	beq.n	80051cc <HAL_RCC_GetSysClockFreq+0x128>
 8005186:	e043      	b.n	8005210 <HAL_RCC_GetSysClockFreq+0x16c>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	ee07 3a90 	vmov	s15, r3
 800518e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005192:	eddf 6a43 	vldr	s13, [pc, #268]	@ 80052a0 <HAL_RCC_GetSysClockFreq+0x1fc>
 8005196:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800519a:	4b3e      	ldr	r3, [pc, #248]	@ (8005294 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800519c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800519e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80051a2:	ee07 3a90 	vmov	s15, r3
 80051a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 80051aa:	ed97 6a01 	vldr	s12, [r7, #4]
 80051ae:	eddf 5a3d 	vldr	s11, [pc, #244]	@ 80052a4 <HAL_RCC_GetSysClockFreq+0x200>
 80051b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80051b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 80051ba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80051be:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80051c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80051c6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80051ca:	e046      	b.n	800525a <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	ee07 3a90 	vmov	s15, r3
 80051d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80051d6:	eddf 6a32 	vldr	s13, [pc, #200]	@ 80052a0 <HAL_RCC_GetSysClockFreq+0x1fc>
 80051da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80051de:	4b2d      	ldr	r3, [pc, #180]	@ (8005294 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80051e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80051e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80051e6:	ee07 3a90 	vmov	s15, r3
 80051ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 80051ee:	ed97 6a01 	vldr	s12, [r7, #4]
 80051f2:	eddf 5a2c 	vldr	s11, [pc, #176]	@ 80052a4 <HAL_RCC_GetSysClockFreq+0x200>
 80051f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80051fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 80051fe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005202:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005206:	ee67 7a27 	vmul.f32	s15, s14, s15
 800520a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800520e:	e024      	b.n	800525a <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005210:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005212:	ee07 3a90 	vmov	s15, r3
 8005216:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	ee07 3a90 	vmov	s15, r3
 8005220:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005224:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005228:	4b1a      	ldr	r3, [pc, #104]	@ (8005294 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800522a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800522c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005230:	ee07 3a90 	vmov	s15, r3
 8005234:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8005238:	ed97 6a01 	vldr	s12, [r7, #4]
 800523c:	eddf 5a19 	vldr	s11, [pc, #100]	@ 80052a4 <HAL_RCC_GetSysClockFreq+0x200>
 8005240:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005244:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8005248:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800524c:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005250:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005254:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005258:	bf00      	nop
    }

    pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 800525a:	4b0e      	ldr	r3, [pc, #56]	@ (8005294 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800525c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800525e:	0e1b      	lsrs	r3, r3, #24
 8005260:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005264:	3301      	adds	r3, #1
 8005266:	603b      	str	r3, [r7, #0]
    sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 8005268:	683b      	ldr	r3, [r7, #0]
 800526a:	ee07 3a90 	vmov	s15, r3
 800526e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005272:	edd7 6a07 	vldr	s13, [r7, #28]
 8005276:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800527a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800527e:	ee17 3a90 	vmov	r3, s15
 8005282:	623b      	str	r3, [r7, #32]
  }

  return sysclockfreq;
 8005284:	6a3b      	ldr	r3, [r7, #32]
}
 8005286:	4618      	mov	r0, r3
 8005288:	372c      	adds	r7, #44	@ 0x2c
 800528a:	46bd      	mov	sp, r7
 800528c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005290:	4770      	bx	lr
 8005292:	bf00      	nop
 8005294:	46020c00 	.word	0x46020c00
 8005298:	0800d074 	.word	0x0800d074
 800529c:	00f42400 	.word	0x00f42400
 80052a0:	4b742400 	.word	0x4b742400
 80052a4:	46000000 	.word	0x46000000

080052a8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80052a8:	b580      	push	{r7, lr}
 80052aa:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 80052ac:	f7ff fefa 	bl	80050a4 <HAL_RCC_GetSysClockFreq>
 80052b0:	4602      	mov	r2, r0
 80052b2:	4b07      	ldr	r3, [pc, #28]	@ (80052d0 <HAL_RCC_GetHCLKFreq+0x28>)
 80052b4:	6a1b      	ldr	r3, [r3, #32]
 80052b6:	f003 030f 	and.w	r3, r3, #15
 80052ba:	4906      	ldr	r1, [pc, #24]	@ (80052d4 <HAL_RCC_GetHCLKFreq+0x2c>)
 80052bc:	5ccb      	ldrb	r3, [r1, r3]
 80052be:	fa22 f303 	lsr.w	r3, r2, r3
 80052c2:	4a05      	ldr	r2, [pc, #20]	@ (80052d8 <HAL_RCC_GetHCLKFreq+0x30>)
 80052c4:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 80052c6:	4b04      	ldr	r3, [pc, #16]	@ (80052d8 <HAL_RCC_GetHCLKFreq+0x30>)
 80052c8:	681b      	ldr	r3, [r3, #0]
}
 80052ca:	4618      	mov	r0, r3
 80052cc:	bd80      	pop	{r7, pc}
 80052ce:	bf00      	nop
 80052d0:	46020c00 	.word	0x46020c00
 80052d4:	0800d05c 	.word	0x0800d05c
 80052d8:	20000008 	.word	0x20000008

080052dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80052dc:	b580      	push	{r7, lr}
 80052de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]);
 80052e0:	f7ff ffe2 	bl	80052a8 <HAL_RCC_GetHCLKFreq>
 80052e4:	4602      	mov	r2, r0
 80052e6:	4b05      	ldr	r3, [pc, #20]	@ (80052fc <HAL_RCC_GetPCLK1Freq+0x20>)
 80052e8:	6a1b      	ldr	r3, [r3, #32]
 80052ea:	091b      	lsrs	r3, r3, #4
 80052ec:	f003 0307 	and.w	r3, r3, #7
 80052f0:	4903      	ldr	r1, [pc, #12]	@ (8005300 <HAL_RCC_GetPCLK1Freq+0x24>)
 80052f2:	5ccb      	ldrb	r3, [r1, r3]
 80052f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80052f8:	4618      	mov	r0, r3
 80052fa:	bd80      	pop	{r7, pc}
 80052fc:	46020c00 	.word	0x46020c00
 8005300:	0800d06c 	.word	0x0800d06c

08005304 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005304:	b580      	push	{r7, lr}
 8005306:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]);
 8005308:	f7ff ffce 	bl	80052a8 <HAL_RCC_GetHCLKFreq>
 800530c:	4602      	mov	r2, r0
 800530e:	4b05      	ldr	r3, [pc, #20]	@ (8005324 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005310:	6a1b      	ldr	r3, [r3, #32]
 8005312:	0a1b      	lsrs	r3, r3, #8
 8005314:	f003 0307 	and.w	r3, r3, #7
 8005318:	4903      	ldr	r1, [pc, #12]	@ (8005328 <HAL_RCC_GetPCLK2Freq+0x24>)
 800531a:	5ccb      	ldrb	r3, [r1, r3]
 800531c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005320:	4618      	mov	r0, r3
 8005322:	bd80      	pop	{r7, pc}
 8005324:	46020c00 	.word	0x46020c00
 8005328:	0800d06c 	.word	0x0800d06c

0800532c <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 800532c:	b580      	push	{r7, lr}
 800532e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR3 & RCC_CFGR3_PPRE3) >> RCC_CFGR3_PPRE3_Pos]);
 8005330:	f7ff ffba 	bl	80052a8 <HAL_RCC_GetHCLKFreq>
 8005334:	4602      	mov	r2, r0
 8005336:	4b05      	ldr	r3, [pc, #20]	@ (800534c <HAL_RCC_GetPCLK3Freq+0x20>)
 8005338:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800533a:	091b      	lsrs	r3, r3, #4
 800533c:	f003 0307 	and.w	r3, r3, #7
 8005340:	4903      	ldr	r1, [pc, #12]	@ (8005350 <HAL_RCC_GetPCLK3Freq+0x24>)
 8005342:	5ccb      	ldrb	r3, [r1, r3]
 8005344:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005348:	4618      	mov	r0, r3
 800534a:	bd80      	pop	{r7, pc}
 800534c:	46020c00 	.word	0x46020c00
 8005350:	0800d06c 	.word	0x0800d06c

08005354 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *pRCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005354:	b480      	push	{r7}
 8005356:	b083      	sub	sp, #12
 8005358:	af00      	add	r7, sp, #0
 800535a:	6078      	str	r0, [r7, #4]
 800535c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(pRCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  pRCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | \
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	221f      	movs	r2, #31
 8005362:	601a      	str	r2, [r3, #0]
                                  RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_PCLK3;

  /* Get the SYSCLK configuration --------------------------------------------*/
  pRCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR1 & RCC_CFGR1_SW);
 8005364:	4b15      	ldr	r3, [pc, #84]	@ (80053bc <HAL_RCC_GetClockConfig+0x68>)
 8005366:	69db      	ldr	r3, [r3, #28]
 8005368:	f003 0203 	and.w	r2, r3, #3
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR2 & RCC_CFGR2_HPRE);
 8005370:	4b12      	ldr	r3, [pc, #72]	@ (80053bc <HAL_RCC_GetClockConfig+0x68>)
 8005372:	6a1b      	ldr	r3, [r3, #32]
 8005374:	f003 020f 	and.w	r2, r3, #15
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR2 & RCC_CFGR2_PPRE1);
 800537c:	4b0f      	ldr	r3, [pc, #60]	@ (80053bc <HAL_RCC_GetClockConfig+0x68>)
 800537e:	6a1b      	ldr	r3, [r3, #32]
 8005380:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4);
 8005388:	4b0c      	ldr	r3, [pc, #48]	@ (80053bc <HAL_RCC_GetClockConfig+0x68>)
 800538a:	6a1b      	ldr	r3, [r3, #32]
 800538c:	091b      	lsrs	r3, r3, #4
 800538e:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	611a      	str	r2, [r3, #16]

  /* Get the APB3 configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->CFGR3 & RCC_CFGR3_PPRE3);
 8005396:	4b09      	ldr	r3, [pc, #36]	@ (80053bc <HAL_RCC_GetClockConfig+0x68>)
 8005398:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800539a:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	615a      	str	r2, [r3, #20]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80053a2:	4b07      	ldr	r3, [pc, #28]	@ (80053c0 <HAL_RCC_GetClockConfig+0x6c>)
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	f003 020f 	and.w	r2, r3, #15
 80053aa:	683b      	ldr	r3, [r7, #0]
 80053ac:	601a      	str	r2, [r3, #0]
}
 80053ae:	bf00      	nop
 80053b0:	370c      	adds	r7, #12
 80053b2:	46bd      	mov	sp, r7
 80053b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b8:	4770      	bx	lr
 80053ba:	bf00      	nop
 80053bc:	46020c00 	.word	0x46020c00
 80053c0:	40022000 	.word	0x40022000

080053c4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80053c4:	b580      	push	{r7, lr}
 80053c6:	b086      	sub	sp, #24
 80053c8:	af00      	add	r7, sp, #0
 80053ca:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency;  /* default value 0WS */

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 80053cc:	4b3e      	ldr	r3, [pc, #248]	@ (80054c8 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80053ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80053d2:	f003 0304 	and.w	r3, r3, #4
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d003      	beq.n	80053e2 <RCC_SetFlashLatencyFromMSIRange+0x1e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80053da:	f7fe fd17 	bl	8003e0c <HAL_PWREx_GetVoltageRange>
 80053de:	6178      	str	r0, [r7, #20]
 80053e0:	e019      	b.n	8005416 <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80053e2:	4b39      	ldr	r3, [pc, #228]	@ (80054c8 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80053e4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80053e8:	4a37      	ldr	r2, [pc, #220]	@ (80054c8 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80053ea:	f043 0304 	orr.w	r3, r3, #4
 80053ee:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80053f2:	4b35      	ldr	r3, [pc, #212]	@ (80054c8 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80053f4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80053f8:	f003 0304 	and.w	r3, r3, #4
 80053fc:	60fb      	str	r3, [r7, #12]
 80053fe:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8005400:	f7fe fd04 	bl	8003e0c <HAL_PWREx_GetVoltageRange>
 8005404:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8005406:	4b30      	ldr	r3, [pc, #192]	@ (80054c8 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8005408:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800540c:	4a2e      	ldr	r2, [pc, #184]	@ (80054c8 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800540e:	f023 0304 	bic.w	r3, r3, #4
 8005412:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 8005416:	697b      	ldr	r3, [r7, #20]
 8005418:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800541c:	d003      	beq.n	8005426 <RCC_SetFlashLatencyFromMSIRange+0x62>
 800541e:	697b      	ldr	r3, [r7, #20]
 8005420:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005424:	d109      	bne.n	800543a <RCC_SetFlashLatencyFromMSIRange+0x76>
  {

    if (msirange < RCC_MSIRANGE_1)
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800542c:	d202      	bcs.n	8005434 <RCC_SetFlashLatencyFromMSIRange+0x70>
    {
      /* MSI = 48Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 800542e:	2301      	movs	r3, #1
 8005430:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 8005432:	e033      	b.n	800549c <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
    else
    {
      /*  MSI < 48Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 8005434:	2300      	movs	r3, #0
 8005436:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 8005438:	e030      	b.n	800549c <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
  }
  else
  {
    if (msirange < RCC_MSIRANGE_1)
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005440:	d208      	bcs.n	8005454 <RCC_SetFlashLatencyFromMSIRange+0x90>
    {
      /* MSI = 48Mhz */
      if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8005442:	697b      	ldr	r3, [r7, #20]
 8005444:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005448:	d102      	bne.n	8005450 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        latency = FLASH_LATENCY_3; /* 3WS */
 800544a:	2303      	movs	r3, #3
 800544c:	613b      	str	r3, [r7, #16]
 800544e:	e025      	b.n	800549c <RCC_SetFlashLatencyFromMSIRange+0xd8>
      }
      else
      {
        return HAL_ERROR;
 8005450:	2301      	movs	r3, #1
 8005452:	e035      	b.n	80054c0 <RCC_SetFlashLatencyFromMSIRange+0xfc>
      }
    }
    else
    {
      if (msirange > RCC_MSIRANGE_2)
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800545a:	d90f      	bls.n	800547c <RCC_SetFlashLatencyFromMSIRange+0xb8>
      {
        if (vos == PWR_REGULATOR_VOLTAGE_SCALE4)
 800545c:	697b      	ldr	r3, [r7, #20]
 800545e:	2b00      	cmp	r3, #0
 8005460:	d109      	bne.n	8005476 <RCC_SetFlashLatencyFromMSIRange+0xb2>
        {
          if (msirange > RCC_MSIRANGE_3)
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005468:	d902      	bls.n	8005470 <RCC_SetFlashLatencyFromMSIRange+0xac>
          {
            latency = FLASH_LATENCY_0; /* 1WS */
 800546a:	2300      	movs	r3, #0
 800546c:	613b      	str	r3, [r7, #16]
 800546e:	e015      	b.n	800549c <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_1; /* 0WS */
 8005470:	2301      	movs	r3, #1
 8005472:	613b      	str	r3, [r7, #16]
 8005474:	e012      	b.n	800549c <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_0; /* 0WS */
 8005476:	2300      	movs	r3, #0
 8005478:	613b      	str	r3, [r7, #16]
 800547a:	e00f      	b.n	800549c <RCC_SetFlashLatencyFromMSIRange+0xd8>
        }
      }
      else
      {
        if (msirange == RCC_MSIRANGE_1)
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005482:	d109      	bne.n	8005498 <RCC_SetFlashLatencyFromMSIRange+0xd4>
        {
          if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8005484:	697b      	ldr	r3, [r7, #20]
 8005486:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800548a:	d102      	bne.n	8005492 <RCC_SetFlashLatencyFromMSIRange+0xce>
          {
            latency = FLASH_LATENCY_1; /* 1WS */
 800548c:	2301      	movs	r3, #1
 800548e:	613b      	str	r3, [r7, #16]
 8005490:	e004      	b.n	800549c <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_2; /* 2WS */
 8005492:	2302      	movs	r3, #2
 8005494:	613b      	str	r3, [r7, #16]
 8005496:	e001      	b.n	800549c <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_1; /* 1WS */
 8005498:	2301      	movs	r3, #1
 800549a:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800549c:	4b0b      	ldr	r3, [pc, #44]	@ (80054cc <RCC_SetFlashLatencyFromMSIRange+0x108>)
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	f023 020f 	bic.w	r2, r3, #15
 80054a4:	4909      	ldr	r1, [pc, #36]	@ (80054cc <RCC_SetFlashLatencyFromMSIRange+0x108>)
 80054a6:	693b      	ldr	r3, [r7, #16]
 80054a8:	4313      	orrs	r3, r2
 80054aa:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
  memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 80054ac:	4b07      	ldr	r3, [pc, #28]	@ (80054cc <RCC_SetFlashLatencyFromMSIRange+0x108>)
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	f003 030f 	and.w	r3, r3, #15
 80054b4:	693a      	ldr	r2, [r7, #16]
 80054b6:	429a      	cmp	r2, r3
 80054b8:	d001      	beq.n	80054be <RCC_SetFlashLatencyFromMSIRange+0xfa>
  {
    return HAL_ERROR;
 80054ba:	2301      	movs	r3, #1
 80054bc:	e000      	b.n	80054c0 <RCC_SetFlashLatencyFromMSIRange+0xfc>
  }

  return HAL_OK;
 80054be:	2300      	movs	r3, #0
}
 80054c0:	4618      	mov	r0, r3
 80054c2:	3718      	adds	r7, #24
 80054c4:	46bd      	mov	sp, r7
 80054c6:	bd80      	pop	{r7, pc}
 80054c8:	46020c00 	.word	0x46020c00
 80054cc:	40022000 	.word	0x40022000

080054d0 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  *
  *         (*) value not defined in all devices.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 80054d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80054d4:	b0b8      	sub	sp, #224	@ 0xe0
 80054d6:	af00      	add	r7, sp, #0
 80054d8:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80054dc:	2300      	movs	r3, #0
 80054de:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80054e2:	2300      	movs	r3, #0
 80054e4:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80054e8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80054ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054f0:	f002 0401 	and.w	r4, r2, #1
 80054f4:	2500      	movs	r5, #0
 80054f6:	ea54 0305 	orrs.w	r3, r4, r5
 80054fa:	d00b      	beq.n	8005514 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 80054fc:	4bca      	ldr	r3, [pc, #808]	@ (8005828 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80054fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005502:	f023 0103 	bic.w	r1, r3, #3
 8005506:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800550a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800550c:	4ac6      	ldr	r2, [pc, #792]	@ (8005828 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800550e:	430b      	orrs	r3, r1
 8005510:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

#if defined(USART2)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005514:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005518:	e9d3 2300 	ldrd	r2, r3, [r3]
 800551c:	f002 0802 	and.w	r8, r2, #2
 8005520:	f04f 0900 	mov.w	r9, #0
 8005524:	ea58 0309 	orrs.w	r3, r8, r9
 8005528:	d00b      	beq.n	8005542 <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 800552a:	4bbf      	ldr	r3, [pc, #764]	@ (8005828 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800552c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005530:	f023 010c 	bic.w	r1, r3, #12
 8005534:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005538:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800553a:	4abb      	ldr	r2, [pc, #748]	@ (8005828 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800553c:	430b      	orrs	r3, r1
 800553e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }
#endif /* USART2 */

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005542:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005546:	e9d3 2300 	ldrd	r2, r3, [r3]
 800554a:	f002 0a04 	and.w	sl, r2, #4
 800554e:	f04f 0b00 	mov.w	fp, #0
 8005552:	ea5a 030b 	orrs.w	r3, sl, fp
 8005556:	d00b      	beq.n	8005570 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 8005558:	4bb3      	ldr	r3, [pc, #716]	@ (8005828 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800555a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800555e:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8005562:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005566:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005568:	4aaf      	ldr	r2, [pc, #700]	@ (8005828 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800556a:	430b      	orrs	r3, r1
 800556c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005570:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005574:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005578:	f002 0308 	and.w	r3, r2, #8
 800557c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005580:	2300      	movs	r3, #0
 8005582:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005586:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800558a:	460b      	mov	r3, r1
 800558c:	4313      	orrs	r3, r2
 800558e:	d00b      	beq.n	80055a8 <HAL_RCCEx_PeriphCLKConfig+0xd8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 8005590:	4ba5      	ldr	r3, [pc, #660]	@ (8005828 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8005592:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005596:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800559a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800559e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80055a0:	4aa1      	ldr	r2, [pc, #644]	@ (8005828 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80055a2:	430b      	orrs	r3, r1
 80055a4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80055a8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80055ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055b0:	f002 0310 	and.w	r3, r2, #16
 80055b4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80055b8:	2300      	movs	r3, #0
 80055ba:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80055be:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 80055c2:	460b      	mov	r3, r1
 80055c4:	4313      	orrs	r3, r2
 80055c6:	d00b      	beq.n	80055e0 <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 80055c8:	4b97      	ldr	r3, [pc, #604]	@ (8005828 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80055ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80055ce:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80055d2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80055d6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80055d8:	4a93      	ldr	r2, [pc, #588]	@ (8005828 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80055da:	430b      	orrs	r3, r1
 80055dc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
    __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
  }
#endif /* USART6 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80055e0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80055e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055e8:	f002 0320 	and.w	r3, r2, #32
 80055ec:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80055f0:	2300      	movs	r3, #0
 80055f2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80055f6:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 80055fa:	460b      	mov	r3, r1
 80055fc:	4313      	orrs	r3, r2
 80055fe:	d00b      	beq.n	8005618 <HAL_RCCEx_PeriphCLKConfig+0x148>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 8005600:	4b89      	ldr	r3, [pc, #548]	@ (8005828 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8005602:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005606:	f023 0107 	bic.w	r1, r3, #7
 800560a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800560e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005610:	4a85      	ldr	r2, [pc, #532]	@ (8005828 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8005612:	430b      	orrs	r3, r1
 8005614:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005618:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800561c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005620:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8005624:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005628:	2300      	movs	r3, #0
 800562a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800562e:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005632:	460b      	mov	r3, r1
 8005634:	4313      	orrs	r3, r2
 8005636:	d00b      	beq.n	8005650 <HAL_RCCEx_PeriphCLKConfig+0x180>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 8005638:	4b7b      	ldr	r3, [pc, #492]	@ (8005828 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800563a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800563e:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 8005642:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005646:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005648:	4a77      	ldr	r2, [pc, #476]	@ (8005828 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800564a:	430b      	orrs	r3, r1
 800564c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005650:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005654:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005658:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 800565c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005660:	2300      	movs	r3, #0
 8005662:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8005666:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 800566a:	460b      	mov	r3, r1
 800566c:	4313      	orrs	r3, r2
 800566e:	d00b      	beq.n	8005688 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 8005670:	4b6d      	ldr	r3, [pc, #436]	@ (8005828 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8005672:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005676:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800567a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800567e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005680:	4a69      	ldr	r2, [pc, #420]	@ (8005828 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8005682:	430b      	orrs	r3, r1
 8005684:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005688:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800568c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005690:	f402 7380 	and.w	r3, r2, #256	@ 0x100
 8005694:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005698:	2300      	movs	r3, #0
 800569a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800569e:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 80056a2:	460b      	mov	r3, r1
 80056a4:	4313      	orrs	r3, r2
 80056a6:	d00b      	beq.n	80056c0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 80056a8:	4b5f      	ldr	r3, [pc, #380]	@ (8005828 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80056aa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80056ae:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80056b2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80056b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80056b8:	4a5b      	ldr	r2, [pc, #364]	@ (8005828 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80056ba:	430b      	orrs	r3, r1
 80056bc:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80056c0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80056c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056c8:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 80056cc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80056d0:	2300      	movs	r3, #0
 80056d2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80056d6:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 80056da:	460b      	mov	r3, r1
 80056dc:	4313      	orrs	r3, r2
 80056de:	d00b      	beq.n	80056f8 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 80056e0:	4b51      	ldr	r3, [pc, #324]	@ (8005828 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80056e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80056e6:	f423 4140 	bic.w	r1, r3, #49152	@ 0xc000
 80056ea:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80056ee:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80056f0:	4a4d      	ldr	r2, [pc, #308]	@ (8005828 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80056f2:	430b      	orrs	r3, r1
 80056f4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
    __HAL_RCC_I2C6_CONFIG(pPeriphClkInit->I2c6ClockSelection);
  }
#endif /* I2C6 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80056f8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80056fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005700:	f402 7300 	and.w	r3, r2, #512	@ 0x200
 8005704:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005708:	2300      	movs	r3, #0
 800570a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800570e:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8005712:	460b      	mov	r3, r1
 8005714:	4313      	orrs	r3, r2
 8005716:	d00b      	beq.n	8005730 <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 8005718:	4b43      	ldr	r3, [pc, #268]	@ (8005828 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800571a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800571e:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 8005722:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005726:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005728:	4a3f      	ldr	r2, [pc, #252]	@ (8005828 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800572a:	430b      	orrs	r3, r1
 800572c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005730:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005734:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005738:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 800573c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005740:	2300      	movs	r3, #0
 8005742:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005746:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800574a:	460b      	mov	r3, r1
 800574c:	4313      	orrs	r3, r2
 800574e:	d00b      	beq.n	8005768 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 8005750:	4b35      	ldr	r3, [pc, #212]	@ (8005828 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8005752:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005756:	f423 2140 	bic.w	r1, r3, #786432	@ 0xc0000
 800575a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800575e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005760:	4a31      	ldr	r2, [pc, #196]	@ (8005828 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8005762:	430b      	orrs	r3, r1
 8005764:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- LPTIM34 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM34) == (RCC_PERIPHCLK_LPTIM34))
 8005768:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800576c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005770:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8005774:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005776:	2300      	movs	r3, #0
 8005778:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800577a:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800577e:	460b      	mov	r3, r1
 8005780:	4313      	orrs	r3, r2
 8005782:	d00c      	beq.n	800579e <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    assert_param(IS_RCC_LPTIM34CLK(pPeriphClkInit->Lptim34ClockSelection));
    __HAL_RCC_LPTIM34_CONFIG(pPeriphClkInit->Lptim34ClockSelection);
 8005784:	4b28      	ldr	r3, [pc, #160]	@ (8005828 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8005786:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800578a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800578e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005792:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005796:	4a24      	ldr	r2, [pc, #144]	@ (8005828 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8005798:	430b      	orrs	r3, r1
 800579a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800579e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80057a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057a6:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 80057aa:	673b      	str	r3, [r7, #112]	@ 0x70
 80057ac:	2300      	movs	r3, #0
 80057ae:	677b      	str	r3, [r7, #116]	@ 0x74
 80057b0:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 80057b4:	460b      	mov	r3, r1
 80057b6:	4313      	orrs	r3, r2
 80057b8:	d04f      	beq.n	800585a <HAL_RCCEx_PeriphCLKConfig+0x38a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 80057ba:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80057be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80057c2:	2b80      	cmp	r3, #128	@ 0x80
 80057c4:	d02d      	beq.n	8005822 <HAL_RCCEx_PeriphCLKConfig+0x352>
 80057c6:	2b80      	cmp	r3, #128	@ 0x80
 80057c8:	d827      	bhi.n	800581a <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80057ca:	2b60      	cmp	r3, #96	@ 0x60
 80057cc:	d02e      	beq.n	800582c <HAL_RCCEx_PeriphCLKConfig+0x35c>
 80057ce:	2b60      	cmp	r3, #96	@ 0x60
 80057d0:	d823      	bhi.n	800581a <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80057d2:	2b40      	cmp	r3, #64	@ 0x40
 80057d4:	d006      	beq.n	80057e4 <HAL_RCCEx_PeriphCLKConfig+0x314>
 80057d6:	2b40      	cmp	r3, #64	@ 0x40
 80057d8:	d81f      	bhi.n	800581a <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d009      	beq.n	80057f2 <HAL_RCCEx_PeriphCLKConfig+0x322>
 80057de:	2b20      	cmp	r3, #32
 80057e0:	d011      	beq.n	8005806 <HAL_RCCEx_PeriphCLKConfig+0x336>
 80057e2:	e01a      	b.n	800581a <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      case RCC_SAI1CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80057e4:	4b10      	ldr	r3, [pc, #64]	@ (8005828 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80057e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80057e8:	4a0f      	ldr	r2, [pc, #60]	@ (8005828 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80057ea:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80057ee:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 80057f0:	e01d      	b.n	800582e <HAL_RCCEx_PeriphCLKConfig+0x35e>

      case RCC_SAI1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80057f2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80057f6:	3308      	adds	r3, #8
 80057f8:	4618      	mov	r0, r3
 80057fa:	f002 f9d1 	bl	8007ba0 <RCCEx_PLL2_Config>
 80057fe:	4603      	mov	r3, r0
 8005800:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        /* SAI1 clock source config set later after clock selection check */
        break;
 8005804:	e013      	b.n	800582e <HAL_RCCEx_PeriphCLKConfig+0x35e>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005806:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800580a:	332c      	adds	r3, #44	@ 0x2c
 800580c:	4618      	mov	r0, r3
 800580e:	f002 fa5f 	bl	8007cd0 <RCCEx_PLL3_Config>
 8005812:	4603      	mov	r3, r0
 8005814:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        /* SAI1 clock source config set later after clock selection check */
        break;
 8005818:	e009      	b.n	800582e <HAL_RCCEx_PeriphCLKConfig+0x35e>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800581a:	2301      	movs	r3, #1
 800581c:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8005820:	e005      	b.n	800582e <HAL_RCCEx_PeriphCLKConfig+0x35e>
        break;
 8005822:	bf00      	nop
 8005824:	e003      	b.n	800582e <HAL_RCCEx_PeriphCLKConfig+0x35e>
 8005826:	bf00      	nop
 8005828:	46020c00 	.word	0x46020c00
        break;
 800582c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800582e:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8005832:	2b00      	cmp	r3, #0
 8005834:	d10d      	bne.n	8005852 <HAL_RCCEx_PeriphCLKConfig+0x382>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 8005836:	4bb6      	ldr	r3, [pc, #728]	@ (8005b10 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8005838:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800583c:	f023 01e0 	bic.w	r1, r3, #224	@ 0xe0
 8005840:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005844:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005848:	4ab1      	ldr	r2, [pc, #708]	@ (8005b10 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 800584a:	430b      	orrs	r3, r1
 800584c:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8005850:	e003      	b.n	800585a <HAL_RCCEx_PeriphCLKConfig+0x38a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005852:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8005856:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }

#if defined(SAI2)
  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800585a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800585e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005862:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8005866:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005868:	2300      	movs	r3, #0
 800586a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800586c:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8005870:	460b      	mov	r3, r1
 8005872:	4313      	orrs	r3, r2
 8005874:	d053      	beq.n	800591e <HAL_RCCEx_PeriphCLKConfig+0x44e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 8005876:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800587a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800587e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005882:	d033      	beq.n	80058ec <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8005884:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005888:	d82c      	bhi.n	80058e4 <HAL_RCCEx_PeriphCLKConfig+0x414>
 800588a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800588e:	d02f      	beq.n	80058f0 <HAL_RCCEx_PeriphCLKConfig+0x420>
 8005890:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005894:	d826      	bhi.n	80058e4 <HAL_RCCEx_PeriphCLKConfig+0x414>
 8005896:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800589a:	d008      	beq.n	80058ae <HAL_RCCEx_PeriphCLKConfig+0x3de>
 800589c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80058a0:	d820      	bhi.n	80058e4 <HAL_RCCEx_PeriphCLKConfig+0x414>
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d00a      	beq.n	80058bc <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 80058a6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80058aa:	d011      	beq.n	80058d0 <HAL_RCCEx_PeriphCLKConfig+0x400>
 80058ac:	e01a      	b.n	80058e4 <HAL_RCCEx_PeriphCLKConfig+0x414>
    {
      case RCC_SAI2CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80058ae:	4b98      	ldr	r3, [pc, #608]	@ (8005b10 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 80058b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80058b2:	4a97      	ldr	r2, [pc, #604]	@ (8005b10 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 80058b4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80058b8:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 80058ba:	e01a      	b.n	80058f2 <HAL_RCCEx_PeriphCLKConfig+0x422>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80058bc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80058c0:	3308      	adds	r3, #8
 80058c2:	4618      	mov	r0, r3
 80058c4:	f002 f96c 	bl	8007ba0 <RCCEx_PLL2_Config>
 80058c8:	4603      	mov	r3, r0
 80058ca:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        /* SAI2 clock source config set later after clock selection check */
        break;
 80058ce:	e010      	b.n	80058f2 <HAL_RCCEx_PeriphCLKConfig+0x422>

      case RCC_SAI2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80058d0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80058d4:	332c      	adds	r3, #44	@ 0x2c
 80058d6:	4618      	mov	r0, r3
 80058d8:	f002 f9fa 	bl	8007cd0 <RCCEx_PLL3_Config>
 80058dc:	4603      	mov	r3, r0
 80058de:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        /* SAI2 clock source config set later after clock selection check */
        break;
 80058e2:	e006      	b.n	80058f2 <HAL_RCCEx_PeriphCLKConfig+0x422>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80058e4:	2301      	movs	r3, #1
 80058e6:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 80058ea:	e002      	b.n	80058f2 <HAL_RCCEx_PeriphCLKConfig+0x422>
        break;
 80058ec:	bf00      	nop
 80058ee:	e000      	b.n	80058f2 <HAL_RCCEx_PeriphCLKConfig+0x422>
        break;
 80058f0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80058f2:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d10d      	bne.n	8005916 <HAL_RCCEx_PeriphCLKConfig+0x446>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 80058fa:	4b85      	ldr	r3, [pc, #532]	@ (8005b10 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 80058fc:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005900:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 8005904:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005908:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800590c:	4a80      	ldr	r2, [pc, #512]	@ (8005b10 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 800590e:	430b      	orrs	r3, r1
 8005910:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8005914:	e003      	b.n	800591e <HAL_RCCEx_PeriphCLKConfig+0x44e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005916:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 800591a:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }
#endif /* SAI2 */

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 800591e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005922:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005926:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 800592a:	663b      	str	r3, [r7, #96]	@ 0x60
 800592c:	2300      	movs	r3, #0
 800592e:	667b      	str	r3, [r7, #100]	@ 0x64
 8005930:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8005934:	460b      	mov	r3, r1
 8005936:	4313      	orrs	r3, r2
 8005938:	d046      	beq.n	80059c8 <HAL_RCCEx_PeriphCLKConfig+0x4f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 800593a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800593e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005942:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8005946:	d028      	beq.n	800599a <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8005948:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800594c:	d821      	bhi.n	8005992 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 800594e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005952:	d022      	beq.n	800599a <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8005954:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005958:	d81b      	bhi.n	8005992 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 800595a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800595e:	d01c      	beq.n	800599a <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8005960:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005964:	d815      	bhi.n	8005992 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 8005966:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800596a:	d008      	beq.n	800597e <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 800596c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005970:	d80f      	bhi.n	8005992 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 8005972:	2b00      	cmp	r3, #0
 8005974:	d011      	beq.n	800599a <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8005976:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800597a:	d00e      	beq.n	800599a <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 800597c:	e009      	b.n	8005992 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
    {
      case RCC_ADCDACCLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P, & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800597e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005982:	3308      	adds	r3, #8
 8005984:	4618      	mov	r0, r3
 8005986:	f002 f90b 	bl	8007ba0 <RCCEx_PLL2_Config>
 800598a:	4603      	mov	r3, r0
 800598c:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8005990:	e004      	b.n	800599c <HAL_RCCEx_PeriphCLKConfig+0x4cc>
      case RCC_ADCDACCLKSOURCE_HSE:
      case RCC_ADCDACCLKSOURCE_HSI:
      case RCC_ADCDACCLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8005992:	2301      	movs	r3, #1
 8005994:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8005998:	e000      	b.n	800599c <HAL_RCCEx_PeriphCLKConfig+0x4cc>
        break;
 800599a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800599c:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d10d      	bne.n	80059c0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Configure the ADC1 interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 80059a4:	4b5a      	ldr	r3, [pc, #360]	@ (8005b10 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 80059a6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80059aa:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80059ae:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80059b2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80059b6:	4a56      	ldr	r2, [pc, #344]	@ (8005b10 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 80059b8:	430b      	orrs	r3, r1
 80059ba:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80059be:	e003      	b.n	80059c8 <HAL_RCCEx_PeriphCLKConfig+0x4f8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80059c0:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 80059c4:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }

  /*-------------------------- MDF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_MDF1) == RCC_PERIPHCLK_MDF1)
 80059c8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80059cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059d0:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 80059d4:	65bb      	str	r3, [r7, #88]	@ 0x58
 80059d6:	2300      	movs	r3, #0
 80059d8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80059da:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 80059de:	460b      	mov	r3, r1
 80059e0:	4313      	orrs	r3, r2
 80059e2:	d03f      	beq.n	8005a64 <HAL_RCCEx_PeriphCLKConfig+0x594>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MDF1CLKSOURCE(pPeriphClkInit->Mdf1ClockSelection));

    switch (pPeriphClkInit->Mdf1ClockSelection)
 80059e4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80059e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80059ec:	2b04      	cmp	r3, #4
 80059ee:	d81e      	bhi.n	8005a2e <HAL_RCCEx_PeriphCLKConfig+0x55e>
 80059f0:	a201      	add	r2, pc, #4	@ (adr r2, 80059f8 <HAL_RCCEx_PeriphCLKConfig+0x528>)
 80059f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059f6:	bf00      	nop
 80059f8:	08005a37 	.word	0x08005a37
 80059fc:	08005a0d 	.word	0x08005a0d
 8005a00:	08005a1b 	.word	0x08005a1b
 8005a04:	08005a37 	.word	0x08005a37
 8005a08:	08005a37 	.word	0x08005a37
    {
      case RCC_MDF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005a0c:	4b40      	ldr	r3, [pc, #256]	@ (8005b10 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8005a0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a10:	4a3f      	ldr	r2, [pc, #252]	@ (8005b10 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8005a12:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005a16:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 8005a18:	e00e      	b.n	8005a38 <HAL_RCCEx_PeriphCLKConfig+0x568>
      case RCC_MDF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005a1a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005a1e:	332c      	adds	r3, #44	@ 0x2c
 8005a20:	4618      	mov	r0, r3
 8005a22:	f002 f955 	bl	8007cd0 <RCCEx_PLL3_Config>
 8005a26:	4603      	mov	r3, r0
 8005a28:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8005a2c:	e004      	b.n	8005a38 <HAL_RCCEx_PeriphCLKConfig+0x568>
      case RCC_MDF1CLKSOURCE_PIN:
        break;
      case RCC_MDF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8005a2e:	2301      	movs	r3, #1
 8005a30:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8005a34:	e000      	b.n	8005a38 <HAL_RCCEx_PeriphCLKConfig+0x568>
        break;
 8005a36:	bf00      	nop
    }
    if (ret == HAL_OK)
 8005a38:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d10d      	bne.n	8005a5c <HAL_RCCEx_PeriphCLKConfig+0x58c>
    {
      /* Configure the MDF1 interface clock source */
      __HAL_RCC_MDF1_CONFIG(pPeriphClkInit->Mdf1ClockSelection);
 8005a40:	4b33      	ldr	r3, [pc, #204]	@ (8005b10 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8005a42:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005a46:	f023 0107 	bic.w	r1, r3, #7
 8005a4a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005a4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a52:	4a2f      	ldr	r2, [pc, #188]	@ (8005b10 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8005a54:	430b      	orrs	r3, r1
 8005a56:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8005a5a:	e003      	b.n	8005a64 <HAL_RCCEx_PeriphCLKConfig+0x594>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a5c:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8005a60:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }

  /*-------------------------- ADF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
 8005a64:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005a68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a6c:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8005a70:	653b      	str	r3, [r7, #80]	@ 0x50
 8005a72:	2300      	movs	r3, #0
 8005a74:	657b      	str	r3, [r7, #84]	@ 0x54
 8005a76:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8005a7a:	460b      	mov	r3, r1
 8005a7c:	4313      	orrs	r3, r2
 8005a7e:	d04d      	beq.n	8005b1c <HAL_RCCEx_PeriphCLKConfig+0x64c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADF1CLKSOURCE(pPeriphClkInit->Adf1ClockSelection));
    switch (pPeriphClkInit->Adf1ClockSelection)
 8005a80:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005a84:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005a88:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005a8c:	d028      	beq.n	8005ae0 <HAL_RCCEx_PeriphCLKConfig+0x610>
 8005a8e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005a92:	d821      	bhi.n	8005ad8 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8005a94:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005a98:	d024      	beq.n	8005ae4 <HAL_RCCEx_PeriphCLKConfig+0x614>
 8005a9a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005a9e:	d81b      	bhi.n	8005ad8 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8005aa0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005aa4:	d00e      	beq.n	8005ac4 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
 8005aa6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005aaa:	d815      	bhi.n	8005ad8 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d01b      	beq.n	8005ae8 <HAL_RCCEx_PeriphCLKConfig+0x618>
 8005ab0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005ab4:	d110      	bne.n	8005ad8 <HAL_RCCEx_PeriphCLKConfig+0x608>
    {
      case RCC_ADF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005ab6:	4b16      	ldr	r3, [pc, #88]	@ (8005b10 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8005ab8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005aba:	4a15      	ldr	r2, [pc, #84]	@ (8005b10 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8005abc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005ac0:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 8005ac2:	e012      	b.n	8005aea <HAL_RCCEx_PeriphCLKConfig+0x61a>
      case RCC_ADF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005ac4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005ac8:	332c      	adds	r3, #44	@ 0x2c
 8005aca:	4618      	mov	r0, r3
 8005acc:	f002 f900 	bl	8007cd0 <RCCEx_PLL3_Config>
 8005ad0:	4603      	mov	r3, r0
 8005ad2:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8005ad6:	e008      	b.n	8005aea <HAL_RCCEx_PeriphCLKConfig+0x61a>
      case RCC_ADF1CLKSOURCE_PIN:
        break;
      case RCC_ADF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8005ad8:	2301      	movs	r3, #1
 8005ada:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8005ade:	e004      	b.n	8005aea <HAL_RCCEx_PeriphCLKConfig+0x61a>
        break;
 8005ae0:	bf00      	nop
 8005ae2:	e002      	b.n	8005aea <HAL_RCCEx_PeriphCLKConfig+0x61a>
        break;
 8005ae4:	bf00      	nop
 8005ae6:	e000      	b.n	8005aea <HAL_RCCEx_PeriphCLKConfig+0x61a>
        break;
 8005ae8:	bf00      	nop
    }
    if (ret == HAL_OK)
 8005aea:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d110      	bne.n	8005b14 <HAL_RCCEx_PeriphCLKConfig+0x644>
    {
      /* Configure the ADF1 interface clock source */
      __HAL_RCC_ADF1_CONFIG(pPeriphClkInit->Adf1ClockSelection);
 8005af2:	4b07      	ldr	r3, [pc, #28]	@ (8005b10 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8005af4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005af8:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8005afc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005b00:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005b04:	4a02      	ldr	r2, [pc, #8]	@ (8005b10 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8005b06:	430b      	orrs	r3, r1
 8005b08:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8005b0c:	e006      	b.n	8005b1c <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8005b0e:	bf00      	nop
 8005b10:	46020c00 	.word	0x46020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b14:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8005b18:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((pPeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005b1c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005b20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b24:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8005b28:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005b2a:	2300      	movs	r3, #0
 8005b2c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005b2e:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8005b32:	460b      	mov	r3, r1
 8005b34:	4313      	orrs	r3, r2
 8005b36:	f000 80b5 	beq.w	8005ca4 <HAL_RCCEx_PeriphCLKConfig+0x7d4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005b3a:	2300      	movs	r3, #0
 8005b3c:	f887 30d9 	strb.w	r3, [r7, #217]	@ 0xd9
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));
    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005b40:	4b9d      	ldr	r3, [pc, #628]	@ (8005db8 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8005b42:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005b46:	f003 0304 	and.w	r3, r3, #4
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d113      	bne.n	8005b76 <HAL_RCCEx_PeriphCLKConfig+0x6a6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005b4e:	4b9a      	ldr	r3, [pc, #616]	@ (8005db8 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8005b50:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005b54:	4a98      	ldr	r2, [pc, #608]	@ (8005db8 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8005b56:	f043 0304 	orr.w	r3, r3, #4
 8005b5a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8005b5e:	4b96      	ldr	r3, [pc, #600]	@ (8005db8 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8005b60:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005b64:	f003 0304 	and.w	r3, r3, #4
 8005b68:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005b6c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
      pwrclkchanged = SET;
 8005b70:	2301      	movs	r3, #1
 8005b72:	f887 30d9 	strb.w	r3, [r7, #217]	@ 0xd9
    }
    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8005b76:	4b91      	ldr	r3, [pc, #580]	@ (8005dbc <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005b78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b7a:	4a90      	ldr	r2, [pc, #576]	@ (8005dbc <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005b7c:	f043 0301 	orr.w	r3, r3, #1
 8005b80:	6293      	str	r3, [r2, #40]	@ 0x28

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005b82:	f7fc fccf 	bl	8002524 <HAL_GetTick>
 8005b86:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4

    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8005b8a:	e00b      	b.n	8005ba4 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005b8c:	f7fc fcca 	bl	8002524 <HAL_GetTick>
 8005b90:	4602      	mov	r2, r0
 8005b92:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005b96:	1ad3      	subs	r3, r2, r3
 8005b98:	2b02      	cmp	r3, #2
 8005b9a:	d903      	bls.n	8005ba4 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
      {
        ret = HAL_TIMEOUT;
 8005b9c:	2303      	movs	r3, #3
 8005b9e:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8005ba2:	e005      	b.n	8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x6e0>
    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8005ba4:	4b85      	ldr	r3, [pc, #532]	@ (8005dbc <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005ba6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ba8:	f003 0301 	and.w	r3, r3, #1
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d0ed      	beq.n	8005b8c <HAL_RCCEx_PeriphCLKConfig+0x6bc>
      }
    }

    if (ret == HAL_OK)
 8005bb0:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d165      	bne.n	8005c84 <HAL_RCCEx_PeriphCLKConfig+0x7b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005bb8:	4b7f      	ldr	r3, [pc, #508]	@ (8005db8 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8005bba:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005bbe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005bc2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 8005bc6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d023      	beq.n	8005c16 <HAL_RCCEx_PeriphCLKConfig+0x746>
 8005bce:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005bd2:	f8d3 20bc 	ldr.w	r2, [r3, #188]	@ 0xbc
 8005bd6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005bda:	4293      	cmp	r3, r2
 8005bdc:	d01b      	beq.n	8005c16 <HAL_RCCEx_PeriphCLKConfig+0x746>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005bde:	4b76      	ldr	r3, [pc, #472]	@ (8005db8 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8005be0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005be4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005be8:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005bec:	4b72      	ldr	r3, [pc, #456]	@ (8005db8 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8005bee:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005bf2:	4a71      	ldr	r2, [pc, #452]	@ (8005db8 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8005bf4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005bf8:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005bfc:	4b6e      	ldr	r3, [pc, #440]	@ (8005db8 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8005bfe:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005c02:	4a6d      	ldr	r2, [pc, #436]	@ (8005db8 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8005c04:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005c08:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005c0c:	4a6a      	ldr	r2, [pc, #424]	@ (8005db8 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8005c0e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005c12:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005c16:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005c1a:	f003 0301 	and.w	r3, r3, #1
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d019      	beq.n	8005c56 <HAL_RCCEx_PeriphCLKConfig+0x786>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c22:	f7fc fc7f 	bl	8002524 <HAL_GetTick>
 8005c26:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005c2a:	e00d      	b.n	8005c48 <HAL_RCCEx_PeriphCLKConfig+0x778>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005c2c:	f7fc fc7a 	bl	8002524 <HAL_GetTick>
 8005c30:	4602      	mov	r2, r0
 8005c32:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005c36:	1ad2      	subs	r2, r2, r3
 8005c38:	f241 3388 	movw	r3, #5000	@ 0x1388
 8005c3c:	429a      	cmp	r2, r3
 8005c3e:	d903      	bls.n	8005c48 <HAL_RCCEx_PeriphCLKConfig+0x778>
          {
            ret = HAL_TIMEOUT;
 8005c40:	2303      	movs	r3, #3
 8005c42:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
            break;
 8005c46:	e006      	b.n	8005c56 <HAL_RCCEx_PeriphCLKConfig+0x786>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005c48:	4b5b      	ldr	r3, [pc, #364]	@ (8005db8 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8005c4a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005c4e:	f003 0302 	and.w	r3, r3, #2
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d0ea      	beq.n	8005c2c <HAL_RCCEx_PeriphCLKConfig+0x75c>
          }
        }
      }

      if (ret == HAL_OK)
 8005c56:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d10d      	bne.n	8005c7a <HAL_RCCEx_PeriphCLKConfig+0x7aa>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 8005c5e:	4b56      	ldr	r3, [pc, #344]	@ (8005db8 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8005c60:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005c64:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005c68:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005c6c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8005c70:	4a51      	ldr	r2, [pc, #324]	@ (8005db8 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8005c72:	430b      	orrs	r3, r1
 8005c74:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8005c78:	e008      	b.n	8005c8c <HAL_RCCEx_PeriphCLKConfig+0x7bc>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005c7a:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8005c7e:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
 8005c82:	e003      	b.n	8005c8c <HAL_RCCEx_PeriphCLKConfig+0x7bc>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c84:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8005c88:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005c8c:	f897 30d9 	ldrb.w	r3, [r7, #217]	@ 0xd9
 8005c90:	2b01      	cmp	r3, #1
 8005c92:	d107      	bne.n	8005ca4 <HAL_RCCEx_PeriphCLKConfig+0x7d4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005c94:	4b48      	ldr	r3, [pc, #288]	@ (8005db8 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8005c96:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005c9a:	4a47      	ldr	r2, [pc, #284]	@ (8005db8 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8005c9c:	f023 0304 	bic.w	r3, r3, #4
 8005ca0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }

  /*-------------------------------------- ICLK Configuration -----------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ICLK) == RCC_PERIPHCLK_ICLK)
 8005ca4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005ca8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cac:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8005cb0:	643b      	str	r3, [r7, #64]	@ 0x40
 8005cb2:	2300      	movs	r3, #0
 8005cb4:	647b      	str	r3, [r7, #68]	@ 0x44
 8005cb6:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8005cba:	460b      	mov	r3, r1
 8005cbc:	4313      	orrs	r3, r2
 8005cbe:	d042      	beq.n	8005d46 <HAL_RCCEx_PeriphCLKConfig+0x876>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ICLKCLKSOURCE(pPeriphClkInit->IclkClockSelection));

    switch (pPeriphClkInit->IclkClockSelection)
 8005cc0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005cc4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005cc8:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8005ccc:	d022      	beq.n	8005d14 <HAL_RCCEx_PeriphCLKConfig+0x844>
 8005cce:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8005cd2:	d81b      	bhi.n	8005d0c <HAL_RCCEx_PeriphCLKConfig+0x83c>
 8005cd4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005cd8:	d011      	beq.n	8005cfe <HAL_RCCEx_PeriphCLKConfig+0x82e>
 8005cda:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005cde:	d815      	bhi.n	8005d0c <HAL_RCCEx_PeriphCLKConfig+0x83c>
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d019      	beq.n	8005d18 <HAL_RCCEx_PeriphCLKConfig+0x848>
 8005ce4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005ce8:	d110      	bne.n	8005d0c <HAL_RCCEx_PeriphCLKConfig+0x83c>
    {
      case RCC_ICLK_CLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P,Q & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005cea:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005cee:	3308      	adds	r3, #8
 8005cf0:	4618      	mov	r0, r3
 8005cf2:	f001 ff55 	bl	8007ba0 <RCCEx_PLL2_Config>
 8005cf6:	4603      	mov	r3, r0
 8005cf8:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8005cfc:	e00d      	b.n	8005d1a <HAL_RCCEx_PeriphCLKConfig+0x84a>
      case RCC_ICLK_CLKSOURCE_PLL1:
        /* Enable ICLK Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005cfe:	4b2e      	ldr	r3, [pc, #184]	@ (8005db8 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8005d00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d02:	4a2d      	ldr	r2, [pc, #180]	@ (8005db8 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8005d04:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005d08:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 8005d0a:	e006      	b.n	8005d1a <HAL_RCCEx_PeriphCLKConfig+0x84a>
      case RCC_ICLK_CLKSOURCE_HSI48:
        break;
      case RCC_ICLK_CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8005d0c:	2301      	movs	r3, #1
 8005d0e:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8005d12:	e002      	b.n	8005d1a <HAL_RCCEx_PeriphCLKConfig+0x84a>
        break;
 8005d14:	bf00      	nop
 8005d16:	e000      	b.n	8005d1a <HAL_RCCEx_PeriphCLKConfig+0x84a>
        break;
 8005d18:	bf00      	nop
    }
    if (ret == HAL_OK)
 8005d1a:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d10d      	bne.n	8005d3e <HAL_RCCEx_PeriphCLKConfig+0x86e>
    {
      /* Configure the CLK48 source */
      __HAL_RCC_CLK48_CONFIG(pPeriphClkInit->IclkClockSelection);
 8005d22:	4b25      	ldr	r3, [pc, #148]	@ (8005db8 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8005d24:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005d28:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8005d2c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005d30:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005d34:	4a20      	ldr	r2, [pc, #128]	@ (8005db8 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8005d36:	430b      	orrs	r3, r1
 8005d38:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8005d3c:	e003      	b.n	8005d46 <HAL_RCCEx_PeriphCLKConfig+0x876>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d3e:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8005d42:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8005d46:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005d4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d4e:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8005d52:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005d54:	2300      	movs	r3, #0
 8005d56:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005d58:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8005d5c:	460b      	mov	r3, r1
 8005d5e:	4313      	orrs	r3, r2
 8005d60:	d032      	beq.n	8005dc8 <HAL_RCCEx_PeriphCLKConfig+0x8f8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 8005d62:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005d66:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005d6a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005d6e:	d00b      	beq.n	8005d88 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 8005d70:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005d74:	d804      	bhi.n	8005d80 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d008      	beq.n	8005d8c <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 8005d7a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005d7e:	d007      	beq.n	8005d90 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      case RCC_RNGCLKSOURCE_HSI48:
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;
      default:
        ret = HAL_ERROR;
 8005d80:	2301      	movs	r3, #1
 8005d82:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8005d86:	e004      	b.n	8005d92 <HAL_RCCEx_PeriphCLKConfig+0x8c2>
        break;
 8005d88:	bf00      	nop
 8005d8a:	e002      	b.n	8005d92 <HAL_RCCEx_PeriphCLKConfig+0x8c2>
        break;
 8005d8c:	bf00      	nop
 8005d8e:	e000      	b.n	8005d92 <HAL_RCCEx_PeriphCLKConfig+0x8c2>
        break;
 8005d90:	bf00      	nop
    }
    if (ret == HAL_OK)
 8005d92:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d112      	bne.n	8005dc0 <HAL_RCCEx_PeriphCLKConfig+0x8f0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 8005d9a:	4b07      	ldr	r3, [pc, #28]	@ (8005db8 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8005d9c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005da0:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005da4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005da8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005dac:	4a02      	ldr	r2, [pc, #8]	@ (8005db8 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8005dae:	430b      	orrs	r3, r1
 8005db0:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8005db4:	e008      	b.n	8005dc8 <HAL_RCCEx_PeriphCLKConfig+0x8f8>
 8005db6:	bf00      	nop
 8005db8:	46020c00 	.word	0x46020c00
 8005dbc:	46020800 	.word	0x46020800
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005dc0:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8005dc4:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    __HAL_RCC_SAES_CONFIG(pPeriphClkInit->SaesClockSelection);
  }
#endif /* SAES */

  /*-------------------------- SDMMC1/2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == (RCC_PERIPHCLK_SDMMC))
 8005dc8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005dcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dd0:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8005dd4:	633b      	str	r3, [r7, #48]	@ 0x30
 8005dd6:	2300      	movs	r3, #0
 8005dd8:	637b      	str	r3, [r7, #52]	@ 0x34
 8005dda:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8005dde:	460b      	mov	r3, r1
 8005de0:	4313      	orrs	r3, r2
 8005de2:	d019      	beq.n	8005e18 <HAL_RCCEx_PeriphCLKConfig+0x948>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMCCLKSOURCE(pPeriphClkInit->SdmmcClockSelection));

    if (pPeriphClkInit->SdmmcClockSelection == RCC_SDMMCCLKSOURCE_PLL1)
 8005de4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005de8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8005dec:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005df0:	d105      	bne.n	8005dfe <HAL_RCCEx_PeriphCLKConfig+0x92e>
    {
      /* Enable PLL1 P CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005df2:	4b88      	ldr	r3, [pc, #544]	@ (8006014 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8005df4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005df6:	4a87      	ldr	r2, [pc, #540]	@ (8006014 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8005df8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005dfc:	6293      	str	r3, [r2, #40]	@ 0x28
    }

    /* Configure the SDMMC1/2 clock source */
    __HAL_RCC_SDMMC_CONFIG(pPeriphClkInit->SdmmcClockSelection);
 8005dfe:	4b85      	ldr	r3, [pc, #532]	@ (8006014 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8005e00:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005e04:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8005e08:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005e0c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8005e10:	4a80      	ldr	r2, [pc, #512]	@ (8006014 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8005e12:	430b      	orrs	r3, r1
 8005e14:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 8005e18:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005e1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e20:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8005e24:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005e26:	2300      	movs	r3, #0
 8005e28:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005e2a:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8005e2e:	460b      	mov	r3, r1
 8005e30:	4313      	orrs	r3, r2
 8005e32:	d00c      	beq.n	8005e4e <HAL_RCCEx_PeriphCLKConfig+0x97e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    /* Configure the SPI1 clock source */
    __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 8005e34:	4b77      	ldr	r3, [pc, #476]	@ (8006014 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8005e36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005e3a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005e3e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005e42:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005e46:	4973      	ldr	r1, [pc, #460]	@ (8006014 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8005e48:	4313      	orrs	r3, r2
 8005e4a:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 8005e4e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005e52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e56:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8005e5a:	623b      	str	r3, [r7, #32]
 8005e5c:	2300      	movs	r3, #0
 8005e5e:	627b      	str	r3, [r7, #36]	@ 0x24
 8005e60:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8005e64:	460b      	mov	r3, r1
 8005e66:	4313      	orrs	r3, r2
 8005e68:	d00c      	beq.n	8005e84 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    /* Configure the SPI2 clock source */
    __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 8005e6a:	4b6a      	ldr	r3, [pc, #424]	@ (8006014 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8005e6c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005e70:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005e74:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005e78:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005e7c:	4965      	ldr	r1, [pc, #404]	@ (8006014 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8005e7e:	4313      	orrs	r3, r2
 8005e80:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 8005e84:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005e88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e8c:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8005e90:	61bb      	str	r3, [r7, #24]
 8005e92:	2300      	movs	r3, #0
 8005e94:	61fb      	str	r3, [r7, #28]
 8005e96:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8005e9a:	460b      	mov	r3, r1
 8005e9c:	4313      	orrs	r3, r2
 8005e9e:	d00c      	beq.n	8005eba <HAL_RCCEx_PeriphCLKConfig+0x9ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    /* Configure the SPI3 clock source */
    __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 8005ea0:	4b5c      	ldr	r3, [pc, #368]	@ (8006014 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8005ea2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005ea6:	f023 0218 	bic.w	r2, r3, #24
 8005eaa:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005eae:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8005eb2:	4958      	ldr	r1, [pc, #352]	@ (8006014 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8005eb4:	4313      	orrs	r3, r2
 8005eb6:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8005eba:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005ebe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ec2:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 8005ec6:	613b      	str	r3, [r7, #16]
 8005ec8:	2300      	movs	r3, #0
 8005eca:	617b      	str	r3, [r7, #20]
 8005ecc:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8005ed0:	460b      	mov	r3, r1
 8005ed2:	4313      	orrs	r3, r2
 8005ed4:	d032      	beq.n	8005f3c <HAL_RCCEx_PeriphCLKConfig+0xa6c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL1)
 8005ed6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005eda:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8005ede:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005ee2:	d105      	bne.n	8005ef0 <HAL_RCCEx_PeriphCLKConfig+0xa20>
    {
      /* Enable PLL1 Q CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005ee4:	4b4b      	ldr	r3, [pc, #300]	@ (8006014 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8005ee6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ee8:	4a4a      	ldr	r2, [pc, #296]	@ (8006014 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8005eea:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005eee:	6293      	str	r3, [r2, #40]	@ 0x28
    }
    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL2)
 8005ef0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005ef4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8005ef8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005efc:	d108      	bne.n	8005f10 <HAL_RCCEx_PeriphCLKConfig+0xa40>
    {
      /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
      ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005efe:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005f02:	3308      	adds	r3, #8
 8005f04:	4618      	mov	r0, r3
 8005f06:	f001 fe4b 	bl	8007ba0 <RCCEx_PLL2_Config>
 8005f0a:	4603      	mov	r3, r0
 8005f0c:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
    }
    if (ret == HAL_OK)
 8005f10:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d10d      	bne.n	8005f34 <HAL_RCCEx_PeriphCLKConfig+0xa64>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 8005f18:	4b3e      	ldr	r3, [pc, #248]	@ (8006014 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8005f1a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005f1e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005f22:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005f26:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8005f2a:	493a      	ldr	r1, [pc, #232]	@ (8006014 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8005f2c:	4313      	orrs	r3, r2
 8005f2e:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 8005f32:	e003      	b.n	8005f3c <HAL_RCCEx_PeriphCLKConfig+0xa6c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f34:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8005f38:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }
#endif /* defined(HSPI1) */

  /*-------------------------- FDCAN1 kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN1) == (RCC_PERIPHCLK_FDCAN1))
 8005f3c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005f40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f44:	f002 6300 	and.w	r3, r2, #134217728	@ 0x8000000
 8005f48:	60bb      	str	r3, [r7, #8]
 8005f4a:	2300      	movs	r3, #0
 8005f4c:	60fb      	str	r3, [r7, #12]
 8005f4e:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8005f52:	460b      	mov	r3, r1
 8005f54:	4313      	orrs	r3, r2
 8005f56:	d03a      	beq.n	8005fce <HAL_RCCEx_PeriphCLKConfig+0xafe>
  {
    assert_param(IS_RCC_FDCAN1CLK(pPeriphClkInit->Fdcan1ClockSelection));

    switch (pPeriphClkInit->Fdcan1ClockSelection)
 8005f58:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005f5c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005f60:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005f64:	d00e      	beq.n	8005f84 <HAL_RCCEx_PeriphCLKConfig+0xab4>
 8005f66:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005f6a:	d815      	bhi.n	8005f98 <HAL_RCCEx_PeriphCLKConfig+0xac8>
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d017      	beq.n	8005fa0 <HAL_RCCEx_PeriphCLKConfig+0xad0>
 8005f70:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005f74:	d110      	bne.n	8005f98 <HAL_RCCEx_PeriphCLKConfig+0xac8>
      case RCC_FDCAN1CLKSOURCE_HSE:      /* HSE is used as source of FDCAN1 kernel clock*/
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
      case RCC_FDCAN1CLKSOURCE_PLL1:      /* PLL1 is used as clock source for FDCAN1 kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005f76:	4b27      	ldr	r3, [pc, #156]	@ (8006014 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8005f78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f7a:	4a26      	ldr	r2, [pc, #152]	@ (8006014 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8005f7c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005f80:	6293      	str	r3, [r2, #40]	@ 0x28
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 8005f82:	e00e      	b.n	8005fa2 <HAL_RCCEx_PeriphCLKConfig+0xad2>
      case RCC_FDCAN1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for FDCAN1 kernel clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005f84:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005f88:	3308      	adds	r3, #8
 8005f8a:	4618      	mov	r0, r3
 8005f8c:	f001 fe08 	bl	8007ba0 <RCCEx_PLL2_Config>
 8005f90:	4603      	mov	r3, r0
 8005f92:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 8005f96:	e004      	b.n	8005fa2 <HAL_RCCEx_PeriphCLKConfig+0xad2>
      default:
        ret = HAL_ERROR;
 8005f98:	2301      	movs	r3, #1
 8005f9a:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8005f9e:	e000      	b.n	8005fa2 <HAL_RCCEx_PeriphCLKConfig+0xad2>
        break;
 8005fa0:	bf00      	nop
    }
    if (ret == HAL_OK)
 8005fa2:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d10d      	bne.n	8005fc6 <HAL_RCCEx_PeriphCLKConfig+0xaf6>
    {
      /* Set the source of FDCAN1 kernel clock*/
      __HAL_RCC_FDCAN1_CONFIG(pPeriphClkInit->Fdcan1ClockSelection);
 8005faa:	4b1a      	ldr	r3, [pc, #104]	@ (8006014 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8005fac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005fb0:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8005fb4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005fb8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005fbc:	4915      	ldr	r1, [pc, #84]	@ (8006014 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8005fbe:	4313      	orrs	r3, r2
 8005fc0:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 8005fc4:	e003      	b.n	8005fce <HAL_RCCEx_PeriphCLKConfig+0xafe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005fc6:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8005fca:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }

  /*-------------------------- DAC1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC1) == RCC_PERIPHCLK_DAC1)
 8005fce:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005fd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fd6:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8005fda:	603b      	str	r3, [r7, #0]
 8005fdc:	2300      	movs	r3, #0
 8005fde:	607b      	str	r3, [r7, #4]
 8005fe0:	e9d7 1200 	ldrd	r1, r2, [r7]
 8005fe4:	460b      	mov	r3, r1
 8005fe6:	4313      	orrs	r3, r2
 8005fe8:	d00c      	beq.n	8006004 <HAL_RCCEx_PeriphCLKConfig+0xb34>

    /* Check the parameters */
    assert_param(IS_RCC_DAC1CLKSOURCE(pPeriphClkInit->Dac1ClockSelection));

    /* Configure the DAC1 clock source */
    __HAL_RCC_DAC1_CONFIG(pPeriphClkInit->Dac1ClockSelection);
 8005fea:	4b0a      	ldr	r3, [pc, #40]	@ (8006014 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8005fec:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005ff0:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8005ff4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005ff8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8005ffc:	4905      	ldr	r1, [pc, #20]	@ (8006014 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8005ffe:	4313      	orrs	r3, r2
 8006000:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
    }
  }

#endif /* defined(USB_OTG_HS) */

  return status;
 8006004:	f897 30da 	ldrb.w	r3, [r7, #218]	@ 0xda
}
 8006008:	4618      	mov	r0, r3
 800600a:	37e0      	adds	r7, #224	@ 0xe0
 800600c:	46bd      	mov	sp, r7
 800600e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006012:	bf00      	nop
 8006014:	46020c00 	.word	0x46020c00

08006018 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8006018:	b480      	push	{r7}
 800601a:	b089      	sub	sp, #36	@ 0x24
 800601c:	af00      	add	r7, sp, #0
 800601e:	6078      	str	r0, [r7, #4]
  uint32_t pll1n;
  uint32_t pll1fracen;
  float_t fracn1;
  float_t pll1vco;

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 8006020:	4ba6      	ldr	r3, [pc, #664]	@ (80062bc <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8006022:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006024:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006028:	61bb      	str	r3, [r7, #24]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 800602a:	4ba4      	ldr	r3, [pc, #656]	@ (80062bc <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800602c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800602e:	f003 0303 	and.w	r3, r3, #3
 8006032:	617b      	str	r3, [r7, #20]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8006034:	4ba1      	ldr	r3, [pc, #644]	@ (80062bc <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8006036:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006038:	0a1b      	lsrs	r3, r3, #8
 800603a:	f003 030f 	and.w	r3, r3, #15
 800603e:	3301      	adds	r3, #1
 8006040:	613b      	str	r3, [r7, #16]
  pll1fracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8006042:	4b9e      	ldr	r3, [pc, #632]	@ (80062bc <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8006044:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006046:	091b      	lsrs	r3, r3, #4
 8006048:	f003 0301 	and.w	r3, r3, #1
 800604c:	60fb      	str	r3, [r7, #12]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 800604e:	4b9b      	ldr	r3, [pc, #620]	@ (80062bc <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8006050:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006052:	08db      	lsrs	r3, r3, #3
 8006054:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006058:	68fa      	ldr	r2, [r7, #12]
 800605a:	fb02 f303 	mul.w	r3, r2, r3
 800605e:	ee07 3a90 	vmov	s15, r3
 8006062:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006066:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  switch (pll1source)
 800606a:	697b      	ldr	r3, [r7, #20]
 800606c:	2b03      	cmp	r3, #3
 800606e:	d062      	beq.n	8006136 <HAL_RCCEx_GetPLL1ClockFreq+0x11e>
 8006070:	697b      	ldr	r3, [r7, #20]
 8006072:	2b03      	cmp	r3, #3
 8006074:	f200 8081 	bhi.w	800617a <HAL_RCCEx_GetPLL1ClockFreq+0x162>
 8006078:	697b      	ldr	r3, [r7, #20]
 800607a:	2b01      	cmp	r3, #1
 800607c:	d024      	beq.n	80060c8 <HAL_RCCEx_GetPLL1ClockFreq+0xb0>
 800607e:	697b      	ldr	r3, [r7, #20]
 8006080:	2b02      	cmp	r3, #2
 8006082:	d17a      	bne.n	800617a <HAL_RCCEx_GetPLL1ClockFreq+0x162>
  {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006084:	693b      	ldr	r3, [r7, #16]
 8006086:	ee07 3a90 	vmov	s15, r3
 800608a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800608e:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 80062c0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a8>
 8006092:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006096:	4b89      	ldr	r3, [pc, #548]	@ (80062bc <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8006098:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800609a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800609e:	ee07 3a90 	vmov	s15, r3
 80060a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 80060a6:	ed97 6a02 	vldr	s12, [r7, #8]
 80060aa:	eddf 5a86 	vldr	s11, [pc, #536]	@ 80062c4 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 80060ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80060b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 80060b6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80060ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80060be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80060c2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80060c6:	e08f      	b.n	80061e8 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 80060c8:	4b7c      	ldr	r3, [pc, #496]	@ (80062bc <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80060ca:	689b      	ldr	r3, [r3, #8]
 80060cc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d005      	beq.n	80060e0 <HAL_RCCEx_GetPLL1ClockFreq+0xc8>
 80060d4:	4b79      	ldr	r3, [pc, #484]	@ (80062bc <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80060d6:	689b      	ldr	r3, [r3, #8]
 80060d8:	0f1b      	lsrs	r3, r3, #28
 80060da:	f003 030f 	and.w	r3, r3, #15
 80060de:	e006      	b.n	80060ee <HAL_RCCEx_GetPLL1ClockFreq+0xd6>
 80060e0:	4b76      	ldr	r3, [pc, #472]	@ (80062bc <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80060e2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80060e6:	041b      	lsls	r3, r3, #16
 80060e8:	0f1b      	lsrs	r3, r3, #28
 80060ea:	f003 030f 	and.w	r3, r3, #15
 80060ee:	4a76      	ldr	r2, [pc, #472]	@ (80062c8 <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>)
 80060f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80060f4:	ee07 3a90 	vmov	s15, r3
 80060f8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80060fc:	693b      	ldr	r3, [r7, #16]
 80060fe:	ee07 3a90 	vmov	s15, r3
 8006102:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006106:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 800610a:	69bb      	ldr	r3, [r7, #24]
 800610c:	ee07 3a90 	vmov	s15, r3
 8006110:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006114:	ed97 6a02 	vldr	s12, [r7, #8]
 8006118:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 80062c4 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 800611c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006120:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006124:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006128:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 800612c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006130:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006134:	e058      	b.n	80061e8 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006136:	693b      	ldr	r3, [r7, #16]
 8006138:	ee07 3a90 	vmov	s15, r3
 800613c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006140:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80062c0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a8>
 8006144:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006148:	4b5c      	ldr	r3, [pc, #368]	@ (80062bc <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800614a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800614c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006150:	ee07 3a90 	vmov	s15, r3
 8006154:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 8006158:	ed97 6a02 	vldr	s12, [r7, #8]
 800615c:	eddf 5a59 	vldr	s11, [pc, #356]	@ 80062c4 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 8006160:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006164:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 8006168:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800616c:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006170:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006174:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006178:	e036      	b.n	80061e8 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    default:
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 800617a:	4b50      	ldr	r3, [pc, #320]	@ (80062bc <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800617c:	689b      	ldr	r3, [r3, #8]
 800617e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006182:	2b00      	cmp	r3, #0
 8006184:	d005      	beq.n	8006192 <HAL_RCCEx_GetPLL1ClockFreq+0x17a>
 8006186:	4b4d      	ldr	r3, [pc, #308]	@ (80062bc <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8006188:	689b      	ldr	r3, [r3, #8]
 800618a:	0f1b      	lsrs	r3, r3, #28
 800618c:	f003 030f 	and.w	r3, r3, #15
 8006190:	e006      	b.n	80061a0 <HAL_RCCEx_GetPLL1ClockFreq+0x188>
 8006192:	4b4a      	ldr	r3, [pc, #296]	@ (80062bc <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8006194:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006198:	041b      	lsls	r3, r3, #16
 800619a:	0f1b      	lsrs	r3, r3, #28
 800619c:	f003 030f 	and.w	r3, r3, #15
 80061a0:	4a49      	ldr	r2, [pc, #292]	@ (80062c8 <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>)
 80061a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80061a6:	ee07 3a90 	vmov	s15, r3
 80061aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80061ae:	693b      	ldr	r3, [r7, #16]
 80061b0:	ee07 3a90 	vmov	s15, r3
 80061b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80061b8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 80061bc:	69bb      	ldr	r3, [r7, #24]
 80061be:	ee07 3a90 	vmov	s15, r3
 80061c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80061c6:	ed97 6a02 	vldr	s12, [r7, #8]
 80061ca:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 80062c4 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 80061ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80061d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80061d6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80061da:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 80061de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80061e2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80061e6:	bf00      	nop
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 80061e8:	4b34      	ldr	r3, [pc, #208]	@ (80062bc <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80061ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80061ec:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d017      	beq.n	8006224 <HAL_RCCEx_GetPLL1ClockFreq+0x20c>
  {
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80061f4:	4b31      	ldr	r3, [pc, #196]	@ (80062bc <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80061f6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80061f8:	0a5b      	lsrs	r3, r3, #9
 80061fa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80061fe:	ee07 3a90 	vmov	s15, r3
 8006202:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + \
 8006206:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800620a:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800620e:	edd7 6a07 	vldr	s13, [r7, #28]
 8006212:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006216:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800621a:	ee17 2a90 	vmov	r2, s15
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	601a      	str	r2, [r3, #0]
 8006222:	e002      	b.n	800622a <HAL_RCCEx_GetPLL1ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	2200      	movs	r2, #0
 8006228:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 800622a:	4b24      	ldr	r3, [pc, #144]	@ (80062bc <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800622c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800622e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006232:	2b00      	cmp	r3, #0
 8006234:	d017      	beq.n	8006266 <HAL_RCCEx_GetPLL1ClockFreq+0x24e>
  {
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8006236:	4b21      	ldr	r3, [pc, #132]	@ (80062bc <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8006238:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800623a:	0c1b      	lsrs	r3, r3, #16
 800623c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006240:	ee07 3a90 	vmov	s15, r3
 8006244:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1Q) >> RCC_PLL1DIVR_PLL1Q_Pos) + \
 8006248:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800624c:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8006250:	edd7 6a07 	vldr	s13, [r7, #28]
 8006254:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006258:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800625c:	ee17 2a90 	vmov	r2, s15
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	605a      	str	r2, [r3, #4]
 8006264:	e002      	b.n	800626c <HAL_RCCEx_GetPLL1ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	2200      	movs	r2, #0
 800626a:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 800626c:	4b13      	ldr	r3, [pc, #76]	@ (80062bc <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800626e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006270:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006274:	2b00      	cmp	r3, #0
 8006276:	d017      	beq.n	80062a8 <HAL_RCCEx_GetPLL1ClockFreq+0x290>
  {
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8006278:	4b10      	ldr	r3, [pc, #64]	@ (80062bc <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800627a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800627c:	0e1b      	lsrs	r3, r3, #24
 800627e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006282:	ee07 3a90 	vmov	s15, r3
 8006286:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + \
 800628a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800628e:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8006292:	edd7 6a07 	vldr	s13, [r7, #28]
 8006296:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800629a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800629e:	ee17 2a90 	vmov	r2, s15
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	609a      	str	r2, [r3, #8]
  else
  {
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 80062a6:	e002      	b.n	80062ae <HAL_RCCEx_GetPLL1ClockFreq+0x296>
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	2200      	movs	r2, #0
 80062ac:	609a      	str	r2, [r3, #8]
}
 80062ae:	bf00      	nop
 80062b0:	3724      	adds	r7, #36	@ 0x24
 80062b2:	46bd      	mov	sp, r7
 80062b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b8:	4770      	bx	lr
 80062ba:	bf00      	nop
 80062bc:	46020c00 	.word	0x46020c00
 80062c0:	4b742400 	.word	0x4b742400
 80062c4:	46000000 	.word	0x46000000
 80062c8:	0800d074 	.word	0x0800d074

080062cc <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 80062cc:	b480      	push	{r7}
 80062ce:	b089      	sub	sp, #36	@ 0x24
 80062d0:	af00      	add	r7, sp, #0
 80062d2:	6078      	str	r0, [r7, #4]
  float_t fracn2;
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 80062d4:	4ba6      	ldr	r3, [pc, #664]	@ (8006570 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80062d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80062d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80062dc:	61bb      	str	r3, [r7, #24]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 80062de:	4ba4      	ldr	r3, [pc, #656]	@ (8006570 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80062e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062e2:	f003 0303 	and.w	r3, r3, #3
 80062e6:	617b      	str	r3, [r7, #20]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos) + 1U;
 80062e8:	4ba1      	ldr	r3, [pc, #644]	@ (8006570 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80062ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062ec:	0a1b      	lsrs	r3, r3, #8
 80062ee:	f003 030f 	and.w	r3, r3, #15
 80062f2:	3301      	adds	r3, #1
 80062f4:	613b      	str	r3, [r7, #16]
  pll2fracen = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN) >> RCC_PLL2CFGR_PLL2FRACEN_Pos);
 80062f6:	4b9e      	ldr	r3, [pc, #632]	@ (8006570 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80062f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062fa:	091b      	lsrs	r3, r3, #4
 80062fc:	f003 0301 	and.w	r3, r3, #1
 8006300:	60fb      	str	r3, [r7, #12]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 8006302:	4b9b      	ldr	r3, [pc, #620]	@ (8006570 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8006304:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006306:	08db      	lsrs	r3, r3, #3
 8006308:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800630c:	68fa      	ldr	r2, [r7, #12]
 800630e:	fb02 f303 	mul.w	r3, r2, r3
 8006312:	ee07 3a90 	vmov	s15, r3
 8006316:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800631a:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  switch (pll2source)
 800631e:	697b      	ldr	r3, [r7, #20]
 8006320:	2b03      	cmp	r3, #3
 8006322:	d062      	beq.n	80063ea <HAL_RCCEx_GetPLL2ClockFreq+0x11e>
 8006324:	697b      	ldr	r3, [r7, #20]
 8006326:	2b03      	cmp	r3, #3
 8006328:	f200 8081 	bhi.w	800642e <HAL_RCCEx_GetPLL2ClockFreq+0x162>
 800632c:	697b      	ldr	r3, [r7, #20]
 800632e:	2b01      	cmp	r3, #1
 8006330:	d024      	beq.n	800637c <HAL_RCCEx_GetPLL2ClockFreq+0xb0>
 8006332:	697b      	ldr	r3, [r7, #20]
 8006334:	2b02      	cmp	r3, #2
 8006336:	d17a      	bne.n	800642e <HAL_RCCEx_GetPLL2ClockFreq+0x162>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8006338:	693b      	ldr	r3, [r7, #16]
 800633a:	ee07 3a90 	vmov	s15, r3
 800633e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006342:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 8006574 <HAL_RCCEx_GetPLL2ClockFreq+0x2a8>
 8006346:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800634a:	4b89      	ldr	r3, [pc, #548]	@ (8006570 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800634c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800634e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006352:	ee07 3a90 	vmov	s15, r3
 8006356:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 800635a:	ed97 6a02 	vldr	s12, [r7, #8]
 800635e:	eddf 5a86 	vldr	s11, [pc, #536]	@ 8006578 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 8006362:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8006366:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 800636a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800636e:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8006372:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006376:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800637a:	e08f      	b.n	800649c <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 800637c:	4b7c      	ldr	r3, [pc, #496]	@ (8006570 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800637e:	689b      	ldr	r3, [r3, #8]
 8006380:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006384:	2b00      	cmp	r3, #0
 8006386:	d005      	beq.n	8006394 <HAL_RCCEx_GetPLL2ClockFreq+0xc8>
 8006388:	4b79      	ldr	r3, [pc, #484]	@ (8006570 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800638a:	689b      	ldr	r3, [r3, #8]
 800638c:	0f1b      	lsrs	r3, r3, #28
 800638e:	f003 030f 	and.w	r3, r3, #15
 8006392:	e006      	b.n	80063a2 <HAL_RCCEx_GetPLL2ClockFreq+0xd6>
 8006394:	4b76      	ldr	r3, [pc, #472]	@ (8006570 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8006396:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800639a:	041b      	lsls	r3, r3, #16
 800639c:	0f1b      	lsrs	r3, r3, #28
 800639e:	f003 030f 	and.w	r3, r3, #15
 80063a2:	4a76      	ldr	r2, [pc, #472]	@ (800657c <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>)
 80063a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80063a8:	ee07 3a90 	vmov	s15, r3
 80063ac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80063b0:	693b      	ldr	r3, [r7, #16]
 80063b2:	ee07 3a90 	vmov	s15, r3
 80063b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80063ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 80063be:	69bb      	ldr	r3, [r7, #24]
 80063c0:	ee07 3a90 	vmov	s15, r3
 80063c4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80063c8:	ed97 6a02 	vldr	s12, [r7, #8]
 80063cc:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 8006578 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 80063d0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80063d4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80063d8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80063dc:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 80063e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80063e4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80063e8:	e058      	b.n	800649c <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 80063ea:	693b      	ldr	r3, [r7, #16]
 80063ec:	ee07 3a90 	vmov	s15, r3
 80063f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80063f4:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8006574 <HAL_RCCEx_GetPLL2ClockFreq+0x2a8>
 80063f8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80063fc:	4b5c      	ldr	r3, [pc, #368]	@ (8006570 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80063fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006400:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006404:	ee07 3a90 	vmov	s15, r3
 8006408:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 800640c:	ed97 6a02 	vldr	s12, [r7, #8]
 8006410:	eddf 5a59 	vldr	s11, [pc, #356]	@ 8006578 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 8006414:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8006418:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 800641c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006420:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8006424:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006428:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800642c:	e036      	b.n	800649c <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    default:
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 800642e:	4b50      	ldr	r3, [pc, #320]	@ (8006570 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8006430:	689b      	ldr	r3, [r3, #8]
 8006432:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006436:	2b00      	cmp	r3, #0
 8006438:	d005      	beq.n	8006446 <HAL_RCCEx_GetPLL2ClockFreq+0x17a>
 800643a:	4b4d      	ldr	r3, [pc, #308]	@ (8006570 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800643c:	689b      	ldr	r3, [r3, #8]
 800643e:	0f1b      	lsrs	r3, r3, #28
 8006440:	f003 030f 	and.w	r3, r3, #15
 8006444:	e006      	b.n	8006454 <HAL_RCCEx_GetPLL2ClockFreq+0x188>
 8006446:	4b4a      	ldr	r3, [pc, #296]	@ (8006570 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8006448:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800644c:	041b      	lsls	r3, r3, #16
 800644e:	0f1b      	lsrs	r3, r3, #28
 8006450:	f003 030f 	and.w	r3, r3, #15
 8006454:	4a49      	ldr	r2, [pc, #292]	@ (800657c <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>)
 8006456:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800645a:	ee07 3a90 	vmov	s15, r3
 800645e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006462:	693b      	ldr	r3, [r7, #16]
 8006464:	ee07 3a90 	vmov	s15, r3
 8006468:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800646c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                * ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006470:	69bb      	ldr	r3, [r7, #24]
 8006472:	ee07 3a90 	vmov	s15, r3
 8006476:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800647a:	ed97 6a02 	vldr	s12, [r7, #8]
 800647e:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 8006578 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 8006482:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006486:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800648a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800648e:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 8006492:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006496:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800649a:	bf00      	nop
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 800649c:	4b34      	ldr	r3, [pc, #208]	@ (8006570 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800649e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064a0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d017      	beq.n	80064d8 <HAL_RCCEx_GetPLL2ClockFreq+0x20c>
  {
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80064a8:	4b31      	ldr	r3, [pc, #196]	@ (8006570 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80064aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80064ac:	0a5b      	lsrs	r3, r3, #9
 80064ae:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80064b2:	ee07 3a90 	vmov	s15, r3
 80064b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2P) >> RCC_PLL2DIVR_PLL2P_Pos) + \
 80064ba:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80064be:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80064c2:	edd7 6a07 	vldr	s13, [r7, #28]
 80064c6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80064ca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80064ce:	ee17 2a90 	vmov	r2, s15
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	601a      	str	r2, [r3, #0]
 80064d6:	e002      	b.n	80064de <HAL_RCCEx_GetPLL2ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	2200      	movs	r2, #0
 80064dc:	601a      	str	r2, [r3, #0]
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 80064de:	4b24      	ldr	r3, [pc, #144]	@ (8006570 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80064e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d017      	beq.n	800651a <HAL_RCCEx_GetPLL2ClockFreq+0x24e>
  {
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80064ea:	4b21      	ldr	r3, [pc, #132]	@ (8006570 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80064ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80064ee:	0c1b      	lsrs	r3, r3, #16
 80064f0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80064f4:	ee07 3a90 	vmov	s15, r3
 80064f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2Q) >> RCC_PLL2DIVR_PLL2Q_Pos) + \
 80064fc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006500:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8006504:	edd7 6a07 	vldr	s13, [r7, #28]
 8006508:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800650c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006510:	ee17 2a90 	vmov	r2, s15
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	605a      	str	r2, [r3, #4]
 8006518:	e002      	b.n	8006520 <HAL_RCCEx_GetPLL2ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	2200      	movs	r2, #0
 800651e:	605a      	str	r2, [r3, #4]
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 8006520:	4b13      	ldr	r3, [pc, #76]	@ (8006570 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8006522:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006524:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006528:	2b00      	cmp	r3, #0
 800652a:	d017      	beq.n	800655c <HAL_RCCEx_GetPLL2ClockFreq+0x290>
  {
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800652c:	4b10      	ldr	r3, [pc, #64]	@ (8006570 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800652e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006530:	0e1b      	lsrs	r3, r3, #24
 8006532:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006536:	ee07 3a90 	vmov	s15, r3
 800653a:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2R) >> RCC_PLL2DIVR_PLL2R_Pos) + \
 800653e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006542:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8006546:	edd7 6a07 	vldr	s13, [r7, #28]
 800654a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800654e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006552:	ee17 2a90 	vmov	r2, s15
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	609a      	str	r2, [r3, #8]
  }
  else
  {
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800655a:	e002      	b.n	8006562 <HAL_RCCEx_GetPLL2ClockFreq+0x296>
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	2200      	movs	r2, #0
 8006560:	609a      	str	r2, [r3, #8]
}
 8006562:	bf00      	nop
 8006564:	3724      	adds	r7, #36	@ 0x24
 8006566:	46bd      	mov	sp, r7
 8006568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800656c:	4770      	bx	lr
 800656e:	bf00      	nop
 8006570:	46020c00 	.word	0x46020c00
 8006574:	4b742400 	.word	0x4b742400
 8006578:	46000000 	.word	0x46000000
 800657c:	0800d074 	.word	0x0800d074

08006580 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8006580:	b480      	push	{r7}
 8006582:	b089      	sub	sp, #36	@ 0x24
 8006584:	af00      	add	r7, sp, #0
 8006586:	6078      	str	r0, [r7, #4]

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLLxR
  */

  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 8006588:	4ba6      	ldr	r3, [pc, #664]	@ (8006824 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800658a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800658c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006590:	61bb      	str	r3, [r7, #24]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 8006592:	4ba4      	ldr	r3, [pc, #656]	@ (8006824 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8006594:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006596:	f003 0303 	and.w	r3, r3, #3
 800659a:	617b      	str	r3, [r7, #20]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos) + 1U;
 800659c:	4ba1      	ldr	r3, [pc, #644]	@ (8006824 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800659e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80065a0:	0a1b      	lsrs	r3, r3, #8
 80065a2:	f003 030f 	and.w	r3, r3, #15
 80065a6:	3301      	adds	r3, #1
 80065a8:	613b      	str	r3, [r7, #16]
  pll3fracen = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN) >> RCC_PLL3CFGR_PLL3FRACEN_Pos);
 80065aa:	4b9e      	ldr	r3, [pc, #632]	@ (8006824 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80065ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80065ae:	091b      	lsrs	r3, r3, #4
 80065b0:	f003 0301 	and.w	r3, r3, #1
 80065b4:	60fb      	str	r3, [r7, #12]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 80065b6:	4b9b      	ldr	r3, [pc, #620]	@ (8006824 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80065b8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80065ba:	08db      	lsrs	r3, r3, #3
 80065bc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80065c0:	68fa      	ldr	r2, [r7, #12]
 80065c2:	fb02 f303 	mul.w	r3, r2, r3
 80065c6:	ee07 3a90 	vmov	s15, r3
 80065ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80065ce:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  switch (pll3source)
 80065d2:	697b      	ldr	r3, [r7, #20]
 80065d4:	2b03      	cmp	r3, #3
 80065d6:	d062      	beq.n	800669e <HAL_RCCEx_GetPLL3ClockFreq+0x11e>
 80065d8:	697b      	ldr	r3, [r7, #20]
 80065da:	2b03      	cmp	r3, #3
 80065dc:	f200 8081 	bhi.w	80066e2 <HAL_RCCEx_GetPLL3ClockFreq+0x162>
 80065e0:	697b      	ldr	r3, [r7, #20]
 80065e2:	2b01      	cmp	r3, #1
 80065e4:	d024      	beq.n	8006630 <HAL_RCCEx_GetPLL3ClockFreq+0xb0>
 80065e6:	697b      	ldr	r3, [r7, #20]
 80065e8:	2b02      	cmp	r3, #2
 80065ea:	d17a      	bne.n	80066e2 <HAL_RCCEx_GetPLL3ClockFreq+0x162>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 80065ec:	693b      	ldr	r3, [r7, #16]
 80065ee:	ee07 3a90 	vmov	s15, r3
 80065f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80065f6:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 8006828 <HAL_RCCEx_GetPLL3ClockFreq+0x2a8>
 80065fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80065fe:	4b89      	ldr	r3, [pc, #548]	@ (8006824 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8006600:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006602:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006606:	ee07 3a90 	vmov	s15, r3
 800660a:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 800660e:	ed97 6a02 	vldr	s12, [r7, #8]
 8006612:	eddf 5a86 	vldr	s11, [pc, #536]	@ 800682c <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 8006616:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800661a:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 800661e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006622:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8006626:	ee67 7a27 	vmul.f32	s15, s14, s15
 800662a:	edc7 7a07 	vstr	s15, [r7, #28]

      break;
 800662e:	e08f      	b.n	8006750 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8006630:	4b7c      	ldr	r3, [pc, #496]	@ (8006824 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8006632:	689b      	ldr	r3, [r3, #8]
 8006634:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006638:	2b00      	cmp	r3, #0
 800663a:	d005      	beq.n	8006648 <HAL_RCCEx_GetPLL3ClockFreq+0xc8>
 800663c:	4b79      	ldr	r3, [pc, #484]	@ (8006824 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800663e:	689b      	ldr	r3, [r3, #8]
 8006640:	0f1b      	lsrs	r3, r3, #28
 8006642:	f003 030f 	and.w	r3, r3, #15
 8006646:	e006      	b.n	8006656 <HAL_RCCEx_GetPLL3ClockFreq+0xd6>
 8006648:	4b76      	ldr	r3, [pc, #472]	@ (8006824 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800664a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800664e:	041b      	lsls	r3, r3, #16
 8006650:	0f1b      	lsrs	r3, r3, #28
 8006652:	f003 030f 	and.w	r3, r3, #15
 8006656:	4a76      	ldr	r2, [pc, #472]	@ (8006830 <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>)
 8006658:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800665c:	ee07 3a90 	vmov	s15, r3
 8006660:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006664:	693b      	ldr	r3, [r7, #16]
 8006666:	ee07 3a90 	vmov	s15, r3
 800666a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800666e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006672:	69bb      	ldr	r3, [r7, #24]
 8006674:	ee07 3a90 	vmov	s15, r3
 8006678:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800667c:	ed97 6a02 	vldr	s12, [r7, #8]
 8006680:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 800682c <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 8006684:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006688:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800668c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006690:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8006694:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006698:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800669c:	e058      	b.n	8006750 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800669e:	693b      	ldr	r3, [r7, #16]
 80066a0:	ee07 3a90 	vmov	s15, r3
 80066a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80066a8:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8006828 <HAL_RCCEx_GetPLL3ClockFreq+0x2a8>
 80066ac:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80066b0:	4b5c      	ldr	r3, [pc, #368]	@ (8006824 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80066b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80066b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80066b8:	ee07 3a90 	vmov	s15, r3
 80066bc:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 80066c0:	ed97 6a02 	vldr	s12, [r7, #8]
 80066c4:	eddf 5a59 	vldr	s11, [pc, #356]	@ 800682c <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 80066c8:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 80066cc:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 80066d0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80066d4:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 80066d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80066dc:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80066e0:	e036      	b.n	8006750 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>

    default:
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 80066e2:	4b50      	ldr	r3, [pc, #320]	@ (8006824 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80066e4:	689b      	ldr	r3, [r3, #8]
 80066e6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d005      	beq.n	80066fa <HAL_RCCEx_GetPLL3ClockFreq+0x17a>
 80066ee:	4b4d      	ldr	r3, [pc, #308]	@ (8006824 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80066f0:	689b      	ldr	r3, [r3, #8]
 80066f2:	0f1b      	lsrs	r3, r3, #28
 80066f4:	f003 030f 	and.w	r3, r3, #15
 80066f8:	e006      	b.n	8006708 <HAL_RCCEx_GetPLL3ClockFreq+0x188>
 80066fa:	4b4a      	ldr	r3, [pc, #296]	@ (8006824 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80066fc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006700:	041b      	lsls	r3, r3, #16
 8006702:	0f1b      	lsrs	r3, r3, #28
 8006704:	f003 030f 	and.w	r3, r3, #15
 8006708:	4a49      	ldr	r2, [pc, #292]	@ (8006830 <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>)
 800670a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800670e:	ee07 3a90 	vmov	s15, r3
 8006712:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006716:	693b      	ldr	r3, [r7, #16]
 8006718:	ee07 3a90 	vmov	s15, r3
 800671c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006720:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006724:	69bb      	ldr	r3, [r7, #24]
 8006726:	ee07 3a90 	vmov	s15, r3
 800672a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800672e:	ed97 6a02 	vldr	s12, [r7, #8]
 8006732:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 800682c <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 8006736:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800673a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800673e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006742:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8006746:	ee67 7a27 	vmul.f32	s15, s14, s15
 800674a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800674e:	bf00      	nop
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 8006750:	4b34      	ldr	r3, [pc, #208]	@ (8006824 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8006752:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006754:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006758:	2b00      	cmp	r3, #0
 800675a:	d017      	beq.n	800678c <HAL_RCCEx_GetPLL3ClockFreq+0x20c>
  {
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800675c:	4b31      	ldr	r3, [pc, #196]	@ (8006824 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800675e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006760:	0a5b      	lsrs	r3, r3, #9
 8006762:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006766:	ee07 3a90 	vmov	s15, r3
 800676a:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3P) >> RCC_PLL3DIVR_PLL3P_Pos) + \
 800676e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006772:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8006776:	edd7 6a07 	vldr	s13, [r7, #28]
 800677a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800677e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006782:	ee17 2a90 	vmov	r2, s15
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	601a      	str	r2, [r3, #0]
 800678a:	e002      	b.n	8006792 <HAL_RCCEx_GetPLL3ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	2200      	movs	r2, #0
 8006790:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 8006792:	4b24      	ldr	r3, [pc, #144]	@ (8006824 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8006794:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006796:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800679a:	2b00      	cmp	r3, #0
 800679c:	d017      	beq.n	80067ce <HAL_RCCEx_GetPLL3ClockFreq+0x24e>
  {
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800679e:	4b21      	ldr	r3, [pc, #132]	@ (8006824 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80067a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80067a2:	0c1b      	lsrs	r3, r3, #16
 80067a4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80067a8:	ee07 3a90 	vmov	s15, r3
 80067ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3Q) >> RCC_PLL3DIVR_PLL3Q_Pos) + \
 80067b0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80067b4:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80067b8:	edd7 6a07 	vldr	s13, [r7, #28]
 80067bc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80067c0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80067c4:	ee17 2a90 	vmov	r2, s15
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	605a      	str	r2, [r3, #4]
 80067cc:	e002      	b.n	80067d4 <HAL_RCCEx_GetPLL3ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	2200      	movs	r2, #0
 80067d2:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 80067d4:	4b13      	ldr	r3, [pc, #76]	@ (8006824 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80067d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80067d8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d017      	beq.n	8006810 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
  {
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80067e0:	4b10      	ldr	r3, [pc, #64]	@ (8006824 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80067e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80067e4:	0e1b      	lsrs	r3, r3, #24
 80067e6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80067ea:	ee07 3a90 	vmov	s15, r3
 80067ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3R) >> RCC_PLL3DIVR_PLL3R_Pos) + \
 80067f2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80067f6:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80067fa:	edd7 6a07 	vldr	s13, [r7, #28]
 80067fe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006802:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006806:	ee17 2a90 	vmov	r2, s15
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	609a      	str	r2, [r3, #8]
  else
  {
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800680e:	e002      	b.n	8006816 <HAL_RCCEx_GetPLL3ClockFreq+0x296>
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	2200      	movs	r2, #0
 8006814:	609a      	str	r2, [r3, #8]
}
 8006816:	bf00      	nop
 8006818:	3724      	adds	r7, #36	@ 0x24
 800681a:	46bd      	mov	sp, r7
 800681c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006820:	4770      	bx	lr
 8006822:	bf00      	nop
 8006824:	46020c00 	.word	0x46020c00
 8006828:	4b742400 	.word	0x4b742400
 800682c:	46000000 	.word	0x46000000
 8006830:	0800d074 	.word	0x0800d074

08006834 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in Hz
  *
  *        (*) value not defined in all devices.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8006834:	b580      	push	{r7, lr}
 8006836:	b08e      	sub	sp, #56	@ 0x38
 8006838:	af00      	add	r7, sp, #0
 800683a:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 800683e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006842:	f5a2 2180 	sub.w	r1, r2, #262144	@ 0x40000
 8006846:	430b      	orrs	r3, r1
 8006848:	d145      	bne.n	80068d6 <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 800684a:	4baa      	ldr	r3, [pc, #680]	@ (8006af4 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 800684c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006850:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006854:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 8006856:	4ba7      	ldr	r3, [pc, #668]	@ (8006af4 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8006858:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800685c:	f003 0302 	and.w	r3, r3, #2
 8006860:	2b02      	cmp	r3, #2
 8006862:	d108      	bne.n	8006876 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 8006864:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006866:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800686a:	d104      	bne.n	8006876 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 800686c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006870:	637b      	str	r3, [r7, #52]	@ 0x34
 8006872:	f001 b987 	b.w	8007b84 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 8006876:	4b9f      	ldr	r3, [pc, #636]	@ (8006af4 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8006878:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800687c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006880:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006884:	d114      	bne.n	80068b0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
 8006886:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006888:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800688c:	d110      	bne.n	80068b0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800688e:	4b99      	ldr	r3, [pc, #612]	@ (8006af4 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8006890:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006894:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006898:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800689c:	d103      	bne.n	80068a6 <HAL_RCCEx_GetPeriphCLKFreq+0x72>
      {
        frequency = LSI_VALUE / 128U;
 800689e:	23fa      	movs	r3, #250	@ 0xfa
 80068a0:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80068a2:	f001 b96f 	b.w	8007b84 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = LSI_VALUE;
 80068a6:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80068aa:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80068ac:	f001 b96a 	b.w	8007b84 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    /* Check if HSE is ready  and if RTC clock selection is HSI_DIV32*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIV32))
 80068b0:	4b90      	ldr	r3, [pc, #576]	@ (8006af4 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80068b8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80068bc:	d107      	bne.n	80068ce <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
 80068be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068c0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80068c4:	d103      	bne.n	80068ce <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
    {
      frequency = HSE_VALUE / 32U;
 80068c6:	4b8c      	ldr	r3, [pc, #560]	@ (8006af8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 80068c8:	637b      	str	r3, [r7, #52]	@ 0x34
 80068ca:	f001 b95b 	b.w	8007b84 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 80068ce:	2300      	movs	r3, #0
 80068d0:	637b      	str	r3, [r7, #52]	@ 0x34
 80068d2:	f001 b957 	b.w	8007b84 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80068d6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80068da:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 80068de:	430b      	orrs	r3, r1
 80068e0:	d151      	bne.n	8006986 <HAL_RCCEx_GetPeriphCLKFreq+0x152>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 80068e2:	4b84      	ldr	r3, [pc, #528]	@ (8006af4 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 80068e4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80068e8:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 80068ec:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 80068ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068f0:	2b80      	cmp	r3, #128	@ 0x80
 80068f2:	d035      	beq.n	8006960 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
 80068f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068f6:	2b80      	cmp	r3, #128	@ 0x80
 80068f8:	d841      	bhi.n	800697e <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 80068fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068fc:	2b60      	cmp	r3, #96	@ 0x60
 80068fe:	d02a      	beq.n	8006956 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
 8006900:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006902:	2b60      	cmp	r3, #96	@ 0x60
 8006904:	d83b      	bhi.n	800697e <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 8006906:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006908:	2b40      	cmp	r3, #64	@ 0x40
 800690a:	d009      	beq.n	8006920 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800690c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800690e:	2b40      	cmp	r3, #64	@ 0x40
 8006910:	d835      	bhi.n	800697e <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 8006912:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006914:	2b00      	cmp	r3, #0
 8006916:	d00c      	beq.n	8006932 <HAL_RCCEx_GetPeriphCLKFreq+0xfe>
 8006918:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800691a:	2b20      	cmp	r3, #32
 800691c:	d012      	beq.n	8006944 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 800691e:	e02e      	b.n	800697e <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
    {
      case RCC_SAI1CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006920:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006924:	4618      	mov	r0, r3
 8006926:	f7ff fb77 	bl	8006018 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800692a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800692c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800692e:	f001 b929 	b.w	8007b84 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006932:	f107 0318 	add.w	r3, r7, #24
 8006936:	4618      	mov	r0, r3
 8006938:	f7ff fcc8 	bl	80062cc <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 800693c:	69bb      	ldr	r3, [r7, #24]
 800693e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006940:	f001 b920 	b.w	8007b84 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI1CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006944:	f107 030c 	add.w	r3, r7, #12
 8006948:	4618      	mov	r0, r3
 800694a:	f7ff fe19 	bl	8006580 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006952:	f001 b917 	b.w	8007b84 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8006956:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 800695a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800695c:	f001 b912 	b.w	8007b84 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI1CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006960:	4b64      	ldr	r3, [pc, #400]	@ (8006af4 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006968:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800696c:	d103      	bne.n	8006976 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        {
          frequency = HSI_VALUE;
 800696e:	4b63      	ldr	r3, [pc, #396]	@ (8006afc <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 8006970:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006972:	f001 b907 	b.w	8007b84 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8006976:	2300      	movs	r3, #0
 8006978:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800697a:	f001 b903 	b.w	8007b84 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default :
      {
        frequency = 0U;
 800697e:	2300      	movs	r3, #0
 8006980:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006982:	f001 b8ff 	b.w	8007b84 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
  }
#if defined(SAI2)
  else if (PeriphClk == RCC_PERIPHCLK_SAI2)
 8006986:	e9d7 2300 	ldrd	r2, r3, [r7]
 800698a:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 800698e:	430b      	orrs	r3, r1
 8006990:	d158      	bne.n	8006a44 <HAL_RCCEx_GetPeriphCLKFreq+0x210>
  {
    srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 8006992:	4b58      	ldr	r3, [pc, #352]	@ (8006af4 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8006994:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006998:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800699c:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800699e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069a0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80069a4:	d03b      	beq.n	8006a1e <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 80069a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069a8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80069ac:	d846      	bhi.n	8006a3c <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 80069ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069b0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80069b4:	d02e      	beq.n	8006a14 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
 80069b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069b8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80069bc:	d83e      	bhi.n	8006a3c <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 80069be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069c0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80069c4:	d00b      	beq.n	80069de <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
 80069c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069c8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80069cc:	d836      	bhi.n	8006a3c <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 80069ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d00d      	beq.n	80069f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 80069d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069d6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80069da:	d012      	beq.n	8006a02 <HAL_RCCEx_GetPeriphCLKFreq+0x1ce>
 80069dc:	e02e      	b.n	8006a3c <HAL_RCCEx_GetPeriphCLKFreq+0x208>
    {
      case RCC_SAI2CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80069de:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80069e2:	4618      	mov	r0, r3
 80069e4:	f7ff fb18 	bl	8006018 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 80069e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069ea:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80069ec:	f001 b8ca 	b.w	8007b84 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80069f0:	f107 0318 	add.w	r3, r7, #24
 80069f4:	4618      	mov	r0, r3
 80069f6:	f7ff fc69 	bl	80062cc <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 80069fa:	69bb      	ldr	r3, [r7, #24]
 80069fc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80069fe:	f001 b8c1 	b.w	8007b84 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI2CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006a02:	f107 030c 	add.w	r3, r7, #12
 8006a06:	4618      	mov	r0, r3
 8006a08:	f7ff fdba 	bl	8006580 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006a10:	f001 b8b8 	b.w	8007b84 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI2CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8006a14:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8006a18:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006a1a:	f001 b8b3 	b.w	8007b84 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI2CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006a1e:	4b35      	ldr	r3, [pc, #212]	@ (8006af4 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006a26:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006a2a:	d103      	bne.n	8006a34 <HAL_RCCEx_GetPeriphCLKFreq+0x200>
        {
          frequency = HSI_VALUE;
 8006a2c:	4b33      	ldr	r3, [pc, #204]	@ (8006afc <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 8006a2e:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006a30:	f001 b8a8 	b.w	8007b84 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8006a34:	2300      	movs	r3, #0
 8006a36:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006a38:	f001 b8a4 	b.w	8007b84 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default :

        frequency = 0U;
 8006a3c:	2300      	movs	r3, #0
 8006a3e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006a40:	f001 b8a0 	b.w	8007b84 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    {
      frequency = 0U;
    }
  }
#endif /* SAES */
  else if (PeriphClk == RCC_PERIPHCLK_ICLK)
 8006a44:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006a48:	f5a2 1180 	sub.w	r1, r2, #1048576	@ 0x100000
 8006a4c:	430b      	orrs	r3, r1
 8006a4e:	d16e      	bne.n	8006b2e <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
  {
    srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 8006a50:	4b28      	ldr	r3, [pc, #160]	@ (8006af4 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8006a52:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006a56:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 8006a5a:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8006a5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a5e:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8006a62:	d034      	beq.n	8006ace <HAL_RCCEx_GetPeriphCLKFreq+0x29a>
 8006a64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a66:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8006a6a:	d85c      	bhi.n	8006b26 <HAL_RCCEx_GetPeriphCLKFreq+0x2f2>
 8006a6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a6e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006a72:	d00b      	beq.n	8006a8c <HAL_RCCEx_GetPeriphCLKFreq+0x258>
 8006a74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a76:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006a7a:	d854      	bhi.n	8006b26 <HAL_RCCEx_GetPeriphCLKFreq+0x2f2>
 8006a7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d016      	beq.n	8006ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>
 8006a82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a84:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006a88:	d009      	beq.n	8006a9e <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 8006a8a:	e04c      	b.n	8006b26 <HAL_RCCEx_GetPeriphCLKFreq+0x2f2>
    {
      case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006a8c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006a90:	4618      	mov	r0, r3
 8006a92:	f7ff fac1 	bl	8006018 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 8006a96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a98:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006a9a:	f001 b873 	b.w	8007b84 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006a9e:	f107 0318 	add.w	r3, r7, #24
 8006aa2:	4618      	mov	r0, r3
 8006aa4:	f7ff fc12 	bl	80062cc <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 8006aa8:	69fb      	ldr	r3, [r7, #28]
 8006aaa:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006aac:	f001 b86a 	b.w	8007b84 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 8006ab0:	4b10      	ldr	r3, [pc, #64]	@ (8006af4 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006ab8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006abc:	d103      	bne.n	8006ac6 <HAL_RCCEx_GetPeriphCLKFreq+0x292>
        {
          frequency = HSI48_VALUE;
 8006abe:	4b10      	ldr	r3, [pc, #64]	@ (8006b00 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8006ac0:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006ac2:	f001 b85f 	b.w	8007b84 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8006ac6:	2300      	movs	r3, #0
 8006ac8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006aca:	f001 b85b 	b.w	8007b84 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8006ace:	4b09      	ldr	r3, [pc, #36]	@ (8006af4 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	f003 0320 	and.w	r3, r3, #32
 8006ad6:	2b20      	cmp	r3, #32
 8006ad8:	d121      	bne.n	8006b1e <HAL_RCCEx_GetPeriphCLKFreq+0x2ea>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006ada:	4b06      	ldr	r3, [pc, #24]	@ (8006af4 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8006adc:	689b      	ldr	r3, [r3, #8]
 8006ade:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d00e      	beq.n	8006b04 <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>
 8006ae6:	4b03      	ldr	r3, [pc, #12]	@ (8006af4 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8006ae8:	689b      	ldr	r3, [r3, #8]
 8006aea:	0e1b      	lsrs	r3, r3, #24
 8006aec:	f003 030f 	and.w	r3, r3, #15
 8006af0:	e00f      	b.n	8006b12 <HAL_RCCEx_GetPeriphCLKFreq+0x2de>
 8006af2:	bf00      	nop
 8006af4:	46020c00 	.word	0x46020c00
 8006af8:	0007a120 	.word	0x0007a120
 8006afc:	00f42400 	.word	0x00f42400
 8006b00:	02dc6c00 	.word	0x02dc6c00
 8006b04:	4ba7      	ldr	r3, [pc, #668]	@ (8006da4 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8006b06:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006b0a:	041b      	lsls	r3, r3, #16
 8006b0c:	0e1b      	lsrs	r3, r3, #24
 8006b0e:	f003 030f 	and.w	r3, r3, #15
 8006b12:	4aa5      	ldr	r2, [pc, #660]	@ (8006da8 <HAL_RCCEx_GetPeriphCLKFreq+0x574>)
 8006b14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006b18:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006b1a:	f001 b833 	b.w	8007b84 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8006b1e:	2300      	movs	r3, #0
 8006b20:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006b22:	f001 b82f 	b.w	8007b84 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default :

        frequency = 0U;
 8006b26:	2300      	movs	r3, #0
 8006b28:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006b2a:	f001 b82b 	b.w	8007b84 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8006b2e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006b32:	f5a2 1100 	sub.w	r1, r2, #2097152	@ 0x200000
 8006b36:	430b      	orrs	r3, r1
 8006b38:	d17f      	bne.n	8006c3a <HAL_RCCEx_GetPeriphCLKFreq+0x406>
  {
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8006b3a:	4b9a      	ldr	r3, [pc, #616]	@ (8006da4 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8006b3c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006b40:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006b44:	633b      	str	r3, [r7, #48]	@ 0x30
    if (srcclk == RCC_SDMMCCLKSOURCE_CLK48)
 8006b46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d165      	bne.n	8006c18 <HAL_RCCEx_GetPeriphCLKFreq+0x3e4>
    {
      srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 8006b4c:	4b95      	ldr	r3, [pc, #596]	@ (8006da4 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8006b4e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006b52:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 8006b56:	633b      	str	r3, [r7, #48]	@ 0x30

      switch (srcclk)
 8006b58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b5a:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8006b5e:	d034      	beq.n	8006bca <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 8006b60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b62:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8006b66:	d853      	bhi.n	8006c10 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 8006b68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b6a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006b6e:	d00b      	beq.n	8006b88 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
 8006b70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b72:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006b76:	d84b      	bhi.n	8006c10 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 8006b78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d016      	beq.n	8006bac <HAL_RCCEx_GetPeriphCLKFreq+0x378>
 8006b7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b80:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006b84:	d009      	beq.n	8006b9a <HAL_RCCEx_GetPeriphCLKFreq+0x366>
 8006b86:	e043      	b.n	8006c10 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
      {
        case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006b88:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006b8c:	4618      	mov	r0, r3
 8006b8e:	f7ff fa43 	bl	8006018 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006b92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b94:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8006b96:	f000 bff5 	b.w	8007b84 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
        }
        case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006b9a:	f107 0318 	add.w	r3, r7, #24
 8006b9e:	4618      	mov	r0, r3
 8006ba0:	f7ff fb94 	bl	80062cc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006ba4:	69fb      	ldr	r3, [r7, #28]
 8006ba6:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8006ba8:	f000 bfec 	b.w	8007b84 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
        }
        case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 8006bac:	4b7d      	ldr	r3, [pc, #500]	@ (8006da4 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006bb4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006bb8:	d103      	bne.n	8006bc2 <HAL_RCCEx_GetPeriphCLKFreq+0x38e>
          {
            frequency = HSI48_VALUE;
 8006bba:	4b7c      	ldr	r3, [pc, #496]	@ (8006dac <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 8006bbc:	637b      	str	r3, [r7, #52]	@ 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 8006bbe:	f000 bfe1 	b.w	8007b84 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
            frequency = 0U;
 8006bc2:	2300      	movs	r3, #0
 8006bc4:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8006bc6:	f000 bfdd 	b.w	8007b84 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
        }
        case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8006bca:	4b76      	ldr	r3, [pc, #472]	@ (8006da4 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	f003 0320 	and.w	r3, r3, #32
 8006bd2:	2b20      	cmp	r3, #32
 8006bd4:	d118      	bne.n	8006c08 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
          {
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006bd6:	4b73      	ldr	r3, [pc, #460]	@ (8006da4 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8006bd8:	689b      	ldr	r3, [r3, #8]
 8006bda:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d005      	beq.n	8006bee <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
 8006be2:	4b70      	ldr	r3, [pc, #448]	@ (8006da4 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8006be4:	689b      	ldr	r3, [r3, #8]
 8006be6:	0e1b      	lsrs	r3, r3, #24
 8006be8:	f003 030f 	and.w	r3, r3, #15
 8006bec:	e006      	b.n	8006bfc <HAL_RCCEx_GetPeriphCLKFreq+0x3c8>
 8006bee:	4b6d      	ldr	r3, [pc, #436]	@ (8006da4 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8006bf0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006bf4:	041b      	lsls	r3, r3, #16
 8006bf6:	0e1b      	lsrs	r3, r3, #24
 8006bf8:	f003 030f 	and.w	r3, r3, #15
 8006bfc:	4a6a      	ldr	r2, [pc, #424]	@ (8006da8 <HAL_RCCEx_GetPeriphCLKFreq+0x574>)
 8006bfe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006c02:	637b      	str	r3, [r7, #52]	@ 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 8006c04:	f000 bfbe 	b.w	8007b84 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
            frequency = 0U;
 8006c08:	2300      	movs	r3, #0
 8006c0a:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8006c0c:	f000 bfba 	b.w	8007b84 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
        }
        default :
        {
          frequency = 0U;
 8006c10:	2300      	movs	r3, #0
 8006c12:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8006c14:	f000 bfb6 	b.w	8007b84 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
        }
      }
    }
    else if (srcclk == RCC_SDMMCCLKSOURCE_PLL1)
 8006c18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c1a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006c1e:	d108      	bne.n	8006c32 <HAL_RCCEx_GetPeriphCLKFreq+0x3fe>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006c20:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006c24:	4618      	mov	r0, r3
 8006c26:	f7ff f9f7 	bl	8006018 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_P_Frequency;
 8006c2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c2c:	637b      	str	r3, [r7, #52]	@ 0x34
 8006c2e:	f000 bfa9 	b.w	8007b84 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else
    {
      frequency = 0U;
 8006c32:	2300      	movs	r3, #0
 8006c34:	637b      	str	r3, [r7, #52]	@ 0x34
 8006c36:	f000 bfa5 	b.w	8007b84 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_USART1)
 8006c3a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006c3e:	1e51      	subs	r1, r2, #1
 8006c40:	430b      	orrs	r3, r1
 8006c42:	d136      	bne.n	8006cb2 <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
  {
    /* Get the current USART1 source */
    srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8006c44:	4b57      	ldr	r3, [pc, #348]	@ (8006da4 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8006c46:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006c4a:	f003 0303 	and.w	r3, r3, #3
 8006c4e:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 8006c50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d104      	bne.n	8006c60 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
    {
      frequency = HAL_RCC_GetPCLK2Freq();
 8006c56:	f7fe fb55 	bl	8005304 <HAL_RCC_GetPCLK2Freq>
 8006c5a:	6378      	str	r0, [r7, #52]	@ 0x34
 8006c5c:	f000 bf92 	b.w	8007b84 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_USART1CLKSOURCE_SYSCLK)
 8006c60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c62:	2b01      	cmp	r3, #1
 8006c64:	d104      	bne.n	8006c70 <HAL_RCCEx_GetPeriphCLKFreq+0x43c>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8006c66:	f7fe fa1d 	bl	80050a4 <HAL_RCC_GetSysClockFreq>
 8006c6a:	6378      	str	r0, [r7, #52]	@ 0x34
 8006c6c:	f000 bf8a 	b.w	8007b84 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 8006c70:	4b4c      	ldr	r3, [pc, #304]	@ (8006da4 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006c78:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006c7c:	d106      	bne.n	8006c8c <HAL_RCCEx_GetPeriphCLKFreq+0x458>
 8006c7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c80:	2b02      	cmp	r3, #2
 8006c82:	d103      	bne.n	8006c8c <HAL_RCCEx_GetPeriphCLKFreq+0x458>
    {
      frequency = HSI_VALUE;
 8006c84:	4b4a      	ldr	r3, [pc, #296]	@ (8006db0 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 8006c86:	637b      	str	r3, [r7, #52]	@ 0x34
 8006c88:	f000 bf7c 	b.w	8007b84 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 8006c8c:	4b45      	ldr	r3, [pc, #276]	@ (8006da4 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8006c8e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006c92:	f003 0302 	and.w	r3, r3, #2
 8006c96:	2b02      	cmp	r3, #2
 8006c98:	d107      	bne.n	8006caa <HAL_RCCEx_GetPeriphCLKFreq+0x476>
 8006c9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c9c:	2b03      	cmp	r3, #3
 8006c9e:	d104      	bne.n	8006caa <HAL_RCCEx_GetPeriphCLKFreq+0x476>
    {
      frequency = LSE_VALUE;
 8006ca0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006ca4:	637b      	str	r3, [r7, #52]	@ 0x34
 8006ca6:	f000 bf6d 	b.w	8007b84 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for USART1 */
    else
    {
      frequency = 0U;
 8006caa:	2300      	movs	r3, #0
 8006cac:	637b      	str	r3, [r7, #52]	@ 0x34
 8006cae:	f000 bf69 	b.w	8007b84 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
#if defined(USART2)
  else if (PeriphClk == RCC_PERIPHCLK_USART2)
 8006cb2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006cb6:	1e91      	subs	r1, r2, #2
 8006cb8:	430b      	orrs	r3, r1
 8006cba:	d136      	bne.n	8006d2a <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
  {
    /* Get the current USART2 source */
    srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8006cbc:	4b39      	ldr	r3, [pc, #228]	@ (8006da4 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8006cbe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006cc2:	f003 030c 	and.w	r3, r3, #12
 8006cc6:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 8006cc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d104      	bne.n	8006cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x4a4>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8006cce:	f7fe fb05 	bl	80052dc <HAL_RCC_GetPCLK1Freq>
 8006cd2:	6378      	str	r0, [r7, #52]	@ 0x34
 8006cd4:	f000 bf56 	b.w	8007b84 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_USART2CLKSOURCE_SYSCLK)
 8006cd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cda:	2b04      	cmp	r3, #4
 8006cdc:	d104      	bne.n	8006ce8 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8006cde:	f7fe f9e1 	bl	80050a4 <HAL_RCC_GetSysClockFreq>
 8006ce2:	6378      	str	r0, [r7, #52]	@ 0x34
 8006ce4:	f000 bf4e 	b.w	8007b84 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 8006ce8:	4b2e      	ldr	r3, [pc, #184]	@ (8006da4 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006cf0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006cf4:	d106      	bne.n	8006d04 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 8006cf6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cf8:	2b08      	cmp	r3, #8
 8006cfa:	d103      	bne.n	8006d04 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
    {
      frequency = HSI_VALUE;
 8006cfc:	4b2c      	ldr	r3, [pc, #176]	@ (8006db0 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 8006cfe:	637b      	str	r3, [r7, #52]	@ 0x34
 8006d00:	f000 bf40 	b.w	8007b84 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 8006d04:	4b27      	ldr	r3, [pc, #156]	@ (8006da4 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8006d06:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006d0a:	f003 0302 	and.w	r3, r3, #2
 8006d0e:	2b02      	cmp	r3, #2
 8006d10:	d107      	bne.n	8006d22 <HAL_RCCEx_GetPeriphCLKFreq+0x4ee>
 8006d12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d14:	2b0c      	cmp	r3, #12
 8006d16:	d104      	bne.n	8006d22 <HAL_RCCEx_GetPeriphCLKFreq+0x4ee>
    {
      frequency = LSE_VALUE;
 8006d18:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006d1c:	637b      	str	r3, [r7, #52]	@ 0x34
 8006d1e:	f000 bf31 	b.w	8007b84 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for USART2 */
    else
    {
      frequency = 0U;
 8006d22:	2300      	movs	r3, #0
 8006d24:	637b      	str	r3, [r7, #52]	@ 0x34
 8006d26:	f000 bf2d 	b.w	8007b84 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
#endif /* USART2 */
  else if (PeriphClk == RCC_PERIPHCLK_USART3)
 8006d2a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006d2e:	1f11      	subs	r1, r2, #4
 8006d30:	430b      	orrs	r3, r1
 8006d32:	d13f      	bne.n	8006db4 <HAL_RCCEx_GetPeriphCLKFreq+0x580>
  {
    /* Get the current USART3 source */
    srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8006d34:	4b1b      	ldr	r3, [pc, #108]	@ (8006da4 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8006d36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006d3a:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8006d3e:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 8006d40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d104      	bne.n	8006d50 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8006d46:	f7fe fac9 	bl	80052dc <HAL_RCC_GetPCLK1Freq>
 8006d4a:	6378      	str	r0, [r7, #52]	@ 0x34
 8006d4c:	f000 bf1a 	b.w	8007b84 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_USART3CLKSOURCE_SYSCLK)
 8006d50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d52:	2b10      	cmp	r3, #16
 8006d54:	d104      	bne.n	8006d60 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8006d56:	f7fe f9a5 	bl	80050a4 <HAL_RCC_GetSysClockFreq>
 8006d5a:	6378      	str	r0, [r7, #52]	@ 0x34
 8006d5c:	f000 bf12 	b.w	8007b84 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 8006d60:	4b10      	ldr	r3, [pc, #64]	@ (8006da4 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006d68:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006d6c:	d106      	bne.n	8006d7c <HAL_RCCEx_GetPeriphCLKFreq+0x548>
 8006d6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d70:	2b20      	cmp	r3, #32
 8006d72:	d103      	bne.n	8006d7c <HAL_RCCEx_GetPeriphCLKFreq+0x548>
    {
      frequency = HSI_VALUE;
 8006d74:	4b0e      	ldr	r3, [pc, #56]	@ (8006db0 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 8006d76:	637b      	str	r3, [r7, #52]	@ 0x34
 8006d78:	f000 bf04 	b.w	8007b84 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 8006d7c:	4b09      	ldr	r3, [pc, #36]	@ (8006da4 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8006d7e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006d82:	f003 0302 	and.w	r3, r3, #2
 8006d86:	2b02      	cmp	r3, #2
 8006d88:	d107      	bne.n	8006d9a <HAL_RCCEx_GetPeriphCLKFreq+0x566>
 8006d8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d8c:	2b30      	cmp	r3, #48	@ 0x30
 8006d8e:	d104      	bne.n	8006d9a <HAL_RCCEx_GetPeriphCLKFreq+0x566>
    {
      frequency = LSE_VALUE;
 8006d90:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006d94:	637b      	str	r3, [r7, #52]	@ 0x34
 8006d96:	f000 bef5 	b.w	8007b84 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for USART3 */
    else
    {
      frequency = 0U;
 8006d9a:	2300      	movs	r3, #0
 8006d9c:	637b      	str	r3, [r7, #52]	@ 0x34
 8006d9e:	f000 bef1 	b.w	8007b84 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
 8006da2:	bf00      	nop
 8006da4:	46020c00 	.word	0x46020c00
 8006da8:	0800d074 	.word	0x0800d074
 8006dac:	02dc6c00 	.word	0x02dc6c00
 8006db0:	00f42400 	.word	0x00f42400
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART4)
 8006db4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006db8:	f1a2 0108 	sub.w	r1, r2, #8
 8006dbc:	430b      	orrs	r3, r1
 8006dbe:	d136      	bne.n	8006e2e <HAL_RCCEx_GetPeriphCLKFreq+0x5fa>
  {
    /* Get the current UART4 source */
    srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8006dc0:	4ba4      	ldr	r3, [pc, #656]	@ (8007054 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8006dc2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006dc6:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8006dca:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 8006dcc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d104      	bne.n	8006ddc <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8006dd2:	f7fe fa83 	bl	80052dc <HAL_RCC_GetPCLK1Freq>
 8006dd6:	6378      	str	r0, [r7, #52]	@ 0x34
 8006dd8:	f000 bed4 	b.w	8007b84 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_UART4CLKSOURCE_SYSCLK)
 8006ddc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006dde:	2b40      	cmp	r3, #64	@ 0x40
 8006de0:	d104      	bne.n	8006dec <HAL_RCCEx_GetPeriphCLKFreq+0x5b8>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8006de2:	f7fe f95f 	bl	80050a4 <HAL_RCC_GetSysClockFreq>
 8006de6:	6378      	str	r0, [r7, #52]	@ 0x34
 8006de8:	f000 becc 	b.w	8007b84 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 8006dec:	4b99      	ldr	r3, [pc, #612]	@ (8007054 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006df4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006df8:	d106      	bne.n	8006e08 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>
 8006dfa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006dfc:	2b80      	cmp	r3, #128	@ 0x80
 8006dfe:	d103      	bne.n	8006e08 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>
    {
      frequency = HSI_VALUE;
 8006e00:	4b95      	ldr	r3, [pc, #596]	@ (8007058 <HAL_RCCEx_GetPeriphCLKFreq+0x824>)
 8006e02:	637b      	str	r3, [r7, #52]	@ 0x34
 8006e04:	f000 bebe 	b.w	8007b84 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 8006e08:	4b92      	ldr	r3, [pc, #584]	@ (8007054 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8006e0a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006e0e:	f003 0302 	and.w	r3, r3, #2
 8006e12:	2b02      	cmp	r3, #2
 8006e14:	d107      	bne.n	8006e26 <HAL_RCCEx_GetPeriphCLKFreq+0x5f2>
 8006e16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e18:	2bc0      	cmp	r3, #192	@ 0xc0
 8006e1a:	d104      	bne.n	8006e26 <HAL_RCCEx_GetPeriphCLKFreq+0x5f2>
    {
      frequency = LSE_VALUE;
 8006e1c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006e20:	637b      	str	r3, [r7, #52]	@ 0x34
 8006e22:	f000 beaf 	b.w	8007b84 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for UART4 */
    else
    {
      frequency = 0U;
 8006e26:	2300      	movs	r3, #0
 8006e28:	637b      	str	r3, [r7, #52]	@ 0x34
 8006e2a:	f000 beab 	b.w	8007b84 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART5)
 8006e2e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006e32:	f1a2 0110 	sub.w	r1, r2, #16
 8006e36:	430b      	orrs	r3, r1
 8006e38:	d139      	bne.n	8006eae <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
  {
    /* Get the current UART5 source */
    srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8006e3a:	4b86      	ldr	r3, [pc, #536]	@ (8007054 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8006e3c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006e40:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006e44:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 8006e46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d104      	bne.n	8006e56 <HAL_RCCEx_GetPeriphCLKFreq+0x622>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8006e4c:	f7fe fa46 	bl	80052dc <HAL_RCC_GetPCLK1Freq>
 8006e50:	6378      	str	r0, [r7, #52]	@ 0x34
 8006e52:	f000 be97 	b.w	8007b84 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_UART5CLKSOURCE_SYSCLK)
 8006e56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e58:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006e5c:	d104      	bne.n	8006e68 <HAL_RCCEx_GetPeriphCLKFreq+0x634>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8006e5e:	f7fe f921 	bl	80050a4 <HAL_RCC_GetSysClockFreq>
 8006e62:	6378      	str	r0, [r7, #52]	@ 0x34
 8006e64:	f000 be8e 	b.w	8007b84 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 8006e68:	4b7a      	ldr	r3, [pc, #488]	@ (8007054 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006e70:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006e74:	d107      	bne.n	8006e86 <HAL_RCCEx_GetPeriphCLKFreq+0x652>
 8006e76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e78:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006e7c:	d103      	bne.n	8006e86 <HAL_RCCEx_GetPeriphCLKFreq+0x652>
    {
      frequency = HSI_VALUE;
 8006e7e:	4b76      	ldr	r3, [pc, #472]	@ (8007058 <HAL_RCCEx_GetPeriphCLKFreq+0x824>)
 8006e80:	637b      	str	r3, [r7, #52]	@ 0x34
 8006e82:	f000 be7f 	b.w	8007b84 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 8006e86:	4b73      	ldr	r3, [pc, #460]	@ (8007054 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8006e88:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006e8c:	f003 0302 	and.w	r3, r3, #2
 8006e90:	2b02      	cmp	r3, #2
 8006e92:	d108      	bne.n	8006ea6 <HAL_RCCEx_GetPeriphCLKFreq+0x672>
 8006e94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e96:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006e9a:	d104      	bne.n	8006ea6 <HAL_RCCEx_GetPeriphCLKFreq+0x672>
    {
      frequency = LSE_VALUE;
 8006e9c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006ea0:	637b      	str	r3, [r7, #52]	@ 0x34
 8006ea2:	f000 be6f 	b.w	8007b84 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for UART5 */
    else
    {
      frequency = 0U;
 8006ea6:	2300      	movs	r3, #0
 8006ea8:	637b      	str	r3, [r7, #52]	@ 0x34
 8006eaa:	f000 be6b 	b.w	8007b84 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    {
      frequency = 0U;
    }
  }
#endif /* USART6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPUART1)
 8006eae:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006eb2:	f1a2 0120 	sub.w	r1, r2, #32
 8006eb6:	430b      	orrs	r3, r1
 8006eb8:	d158      	bne.n	8006f6c <HAL_RCCEx_GetPeriphCLKFreq+0x738>
  {
    /* Get the current LPUART1 source */
    srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8006eba:	4b66      	ldr	r3, [pc, #408]	@ (8007054 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8006ebc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006ec0:	f003 0307 	and.w	r3, r3, #7
 8006ec4:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 8006ec6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d104      	bne.n	8006ed6 <HAL_RCCEx_GetPeriphCLKFreq+0x6a2>
    {
      frequency = HAL_RCC_GetPCLK3Freq();
 8006ecc:	f7fe fa2e 	bl	800532c <HAL_RCC_GetPCLK3Freq>
 8006ed0:	6378      	str	r0, [r7, #52]	@ 0x34
 8006ed2:	f000 be57 	b.w	8007b84 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 8006ed6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ed8:	2b01      	cmp	r3, #1
 8006eda:	d104      	bne.n	8006ee6 <HAL_RCCEx_GetPeriphCLKFreq+0x6b2>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8006edc:	f7fe f8e2 	bl	80050a4 <HAL_RCC_GetSysClockFreq>
 8006ee0:	6378      	str	r0, [r7, #52]	@ 0x34
 8006ee2:	f000 be4f 	b.w	8007b84 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 8006ee6:	4b5b      	ldr	r3, [pc, #364]	@ (8007054 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006eee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006ef2:	d106      	bne.n	8006f02 <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
 8006ef4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ef6:	2b02      	cmp	r3, #2
 8006ef8:	d103      	bne.n	8006f02 <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
    {
      frequency = HSI_VALUE;
 8006efa:	4b57      	ldr	r3, [pc, #348]	@ (8007058 <HAL_RCCEx_GetPeriphCLKFreq+0x824>)
 8006efc:	637b      	str	r3, [r7, #52]	@ 0x34
 8006efe:	f000 be41 	b.w	8007b84 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 8006f02:	4b54      	ldr	r3, [pc, #336]	@ (8007054 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8006f04:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006f08:	f003 0302 	and.w	r3, r3, #2
 8006f0c:	2b02      	cmp	r3, #2
 8006f0e:	d107      	bne.n	8006f20 <HAL_RCCEx_GetPeriphCLKFreq+0x6ec>
 8006f10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f12:	2b03      	cmp	r3, #3
 8006f14:	d104      	bne.n	8006f20 <HAL_RCCEx_GetPeriphCLKFreq+0x6ec>
    {
      frequency = LSE_VALUE;
 8006f16:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006f1a:	637b      	str	r3, [r7, #52]	@ 0x34
 8006f1c:	f000 be32 	b.w	8007b84 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_MSIK))
 8006f20:	4b4c      	ldr	r3, [pc, #304]	@ (8007054 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	f003 0320 	and.w	r3, r3, #32
 8006f28:	2b20      	cmp	r3, #32
 8006f2a:	d11b      	bne.n	8006f64 <HAL_RCCEx_GetPeriphCLKFreq+0x730>
 8006f2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f2e:	2b04      	cmp	r3, #4
 8006f30:	d118      	bne.n	8006f64 <HAL_RCCEx_GetPeriphCLKFreq+0x730>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006f32:	4b48      	ldr	r3, [pc, #288]	@ (8007054 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8006f34:	689b      	ldr	r3, [r3, #8]
 8006f36:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d005      	beq.n	8006f4a <HAL_RCCEx_GetPeriphCLKFreq+0x716>
 8006f3e:	4b45      	ldr	r3, [pc, #276]	@ (8007054 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8006f40:	689b      	ldr	r3, [r3, #8]
 8006f42:	0e1b      	lsrs	r3, r3, #24
 8006f44:	f003 030f 	and.w	r3, r3, #15
 8006f48:	e006      	b.n	8006f58 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8006f4a:	4b42      	ldr	r3, [pc, #264]	@ (8007054 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8006f4c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006f50:	041b      	lsls	r3, r3, #16
 8006f52:	0e1b      	lsrs	r3, r3, #24
 8006f54:	f003 030f 	and.w	r3, r3, #15
 8006f58:	4a40      	ldr	r2, [pc, #256]	@ (800705c <HAL_RCCEx_GetPeriphCLKFreq+0x828>)
 8006f5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006f5e:	637b      	str	r3, [r7, #52]	@ 0x34
 8006f60:	f000 be10 	b.w	8007b84 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for LPUART1 */
    else
    {
      frequency = 0U;
 8006f64:	2300      	movs	r3, #0
 8006f66:	637b      	str	r3, [r7, #52]	@ 0x34
 8006f68:	f000 be0c 	b.w	8007b84 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADCDAC)
 8006f6c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006f70:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 8006f74:	430b      	orrs	r3, r1
 8006f76:	d173      	bne.n	8007060 <HAL_RCCEx_GetPeriphCLKFreq+0x82c>
  {
    srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 8006f78:	4b36      	ldr	r3, [pc, #216]	@ (8007054 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8006f7a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006f7e:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8006f82:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 8006f84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f86:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006f8a:	d104      	bne.n	8006f96 <HAL_RCCEx_GetPeriphCLKFreq+0x762>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8006f8c:	f7fe f88a 	bl	80050a4 <HAL_RCC_GetSysClockFreq>
 8006f90:	6378      	str	r0, [r7, #52]	@ 0x34
 8006f92:	f000 bdf7 	b.w	8007b84 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2)
 8006f96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f98:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006f9c:	d108      	bne.n	8006fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x77c>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006f9e:	f107 0318 	add.w	r3, r7, #24
 8006fa2:	4618      	mov	r0, r3
 8006fa4:	f7ff f992 	bl	80062cc <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_R_Frequency;
 8006fa8:	6a3b      	ldr	r3, [r7, #32]
 8006faa:	637b      	str	r3, [r7, #52]	@ 0x34
 8006fac:	f000 bdea 	b.w	8007b84 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 8006fb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d104      	bne.n	8006fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>
    {
      frequency = HAL_RCC_GetHCLKFreq();
 8006fb6:	f7fe f977 	bl	80052a8 <HAL_RCC_GetHCLKFreq>
 8006fba:	6378      	str	r0, [r7, #52]	@ 0x34
 8006fbc:	f000 bde2 	b.w	8007b84 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_MSIK)
 8006fc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006fc2:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8006fc6:	d122      	bne.n	800700e <HAL_RCCEx_GetPeriphCLKFreq+0x7da>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8006fc8:	4b22      	ldr	r3, [pc, #136]	@ (8007054 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	f003 0320 	and.w	r3, r3, #32
 8006fd0:	2b20      	cmp	r3, #32
 8006fd2:	d118      	bne.n	8007006 <HAL_RCCEx_GetPeriphCLKFreq+0x7d2>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006fd4:	4b1f      	ldr	r3, [pc, #124]	@ (8007054 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8006fd6:	689b      	ldr	r3, [r3, #8]
 8006fd8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d005      	beq.n	8006fec <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
 8006fe0:	4b1c      	ldr	r3, [pc, #112]	@ (8007054 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8006fe2:	689b      	ldr	r3, [r3, #8]
 8006fe4:	0e1b      	lsrs	r3, r3, #24
 8006fe6:	f003 030f 	and.w	r3, r3, #15
 8006fea:	e006      	b.n	8006ffa <HAL_RCCEx_GetPeriphCLKFreq+0x7c6>
 8006fec:	4b19      	ldr	r3, [pc, #100]	@ (8007054 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8006fee:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006ff2:	041b      	lsls	r3, r3, #16
 8006ff4:	0e1b      	lsrs	r3, r3, #24
 8006ff6:	f003 030f 	and.w	r3, r3, #15
 8006ffa:	4a18      	ldr	r2, [pc, #96]	@ (800705c <HAL_RCCEx_GetPeriphCLKFreq+0x828>)
 8006ffc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007000:	637b      	str	r3, [r7, #52]	@ 0x34
 8007002:	f000 bdbf 	b.w	8007b84 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = 0U;
 8007006:	2300      	movs	r3, #0
 8007008:	637b      	str	r3, [r7, #52]	@ 0x34
 800700a:	f000 bdbb 	b.w	8007b84 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 800700e:	4b11      	ldr	r3, [pc, #68]	@ (8007054 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007016:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800701a:	d107      	bne.n	800702c <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>
 800701c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800701e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007022:	d103      	bne.n	800702c <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>
    {
      frequency = HSE_VALUE;
 8007024:	4b0c      	ldr	r3, [pc, #48]	@ (8007058 <HAL_RCCEx_GetPeriphCLKFreq+0x824>)
 8007026:	637b      	str	r3, [r7, #52]	@ 0x34
 8007028:	f000 bdac 	b.w	8007b84 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 800702c:	4b09      	ldr	r3, [pc, #36]	@ (8007054 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007034:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007038:	d107      	bne.n	800704a <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 800703a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800703c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007040:	d103      	bne.n	800704a <HAL_RCCEx_GetPeriphCLKFreq+0x816>
    {
      frequency = HSI_VALUE;
 8007042:	4b05      	ldr	r3, [pc, #20]	@ (8007058 <HAL_RCCEx_GetPeriphCLKFreq+0x824>)
 8007044:	637b      	str	r3, [r7, #52]	@ 0x34
 8007046:	f000 bd9d 	b.w	8007b84 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for ADC */
    else
    {
      frequency = 0U;
 800704a:	2300      	movs	r3, #0
 800704c:	637b      	str	r3, [r7, #52]	@ 0x34
 800704e:	f000 bd99 	b.w	8007b84 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
 8007052:	bf00      	nop
 8007054:	46020c00 	.word	0x46020c00
 8007058:	00f42400 	.word	0x00f42400
 800705c:	0800d074 	.word	0x0800d074
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_MDF1)
 8007060:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007064:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 8007068:	430b      	orrs	r3, r1
 800706a:	d158      	bne.n	800711e <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
  {
    /* Get the current MDF1 source */
    srcclk = __HAL_RCC_GET_MDF1_SOURCE();
 800706c:	4bad      	ldr	r3, [pc, #692]	@ (8007324 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 800706e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007072:	f003 0307 	and.w	r3, r3, #7
 8007076:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8007078:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800707a:	2b04      	cmp	r3, #4
 800707c:	d84b      	bhi.n	8007116 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800707e:	a201      	add	r2, pc, #4	@ (adr r2, 8007084 <HAL_RCCEx_GetPeriphCLKFreq+0x850>)
 8007080:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007084:	080070bd 	.word	0x080070bd
 8007088:	08007099 	.word	0x08007099
 800708c:	080070ab 	.word	0x080070ab
 8007090:	080070c7 	.word	0x080070c7
 8007094:	080070d1 	.word	0x080070d1
    {
      case RCC_MDF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007098:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800709c:	4618      	mov	r0, r3
 800709e:	f7fe ffbb 	bl	8006018 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 80070a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070a4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80070a6:	f000 bd6d 	b.w	8007b84 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_MDF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80070aa:	f107 030c 	add.w	r3, r7, #12
 80070ae:	4618      	mov	r0, r3
 80070b0:	f7ff fa66 	bl	8006580 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 80070b4:	693b      	ldr	r3, [r7, #16]
 80070b6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80070b8:	f000 bd64 	b.w	8007b84 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_MDF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 80070bc:	f7fe f8f4 	bl	80052a8 <HAL_RCC_GetHCLKFreq>
 80070c0:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 80070c2:	f000 bd5f 	b.w	8007b84 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_MDF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 80070c6:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 80070ca:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80070cc:	f000 bd5a 	b.w	8007b84 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_MDF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80070d0:	4b94      	ldr	r3, [pc, #592]	@ (8007324 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	f003 0320 	and.w	r3, r3, #32
 80070d8:	2b20      	cmp	r3, #32
 80070da:	d118      	bne.n	800710e <HAL_RCCEx_GetPeriphCLKFreq+0x8da>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80070dc:	4b91      	ldr	r3, [pc, #580]	@ (8007324 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 80070de:	689b      	ldr	r3, [r3, #8]
 80070e0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d005      	beq.n	80070f4 <HAL_RCCEx_GetPeriphCLKFreq+0x8c0>
 80070e8:	4b8e      	ldr	r3, [pc, #568]	@ (8007324 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 80070ea:	689b      	ldr	r3, [r3, #8]
 80070ec:	0e1b      	lsrs	r3, r3, #24
 80070ee:	f003 030f 	and.w	r3, r3, #15
 80070f2:	e006      	b.n	8007102 <HAL_RCCEx_GetPeriphCLKFreq+0x8ce>
 80070f4:	4b8b      	ldr	r3, [pc, #556]	@ (8007324 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 80070f6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80070fa:	041b      	lsls	r3, r3, #16
 80070fc:	0e1b      	lsrs	r3, r3, #24
 80070fe:	f003 030f 	and.w	r3, r3, #15
 8007102:	4a89      	ldr	r2, [pc, #548]	@ (8007328 <HAL_RCCEx_GetPeriphCLKFreq+0xaf4>)
 8007104:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007108:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800710a:	f000 bd3b 	b.w	8007b84 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 800710e:	2300      	movs	r3, #0
 8007110:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007112:	f000 bd37 	b.w	8007b84 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default:

        frequency = 0U;
 8007116:	2300      	movs	r3, #0
 8007118:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800711a:	f000 bd33 	b.w	8007b84 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADF1)
 800711e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007122:	f5a2 3100 	sub.w	r1, r2, #131072	@ 0x20000
 8007126:	430b      	orrs	r3, r1
 8007128:	d167      	bne.n	80071fa <HAL_RCCEx_GetPeriphCLKFreq+0x9c6>
  {
    /* Get the current ADF1 source */
    srcclk = __HAL_RCC_GET_ADF1_SOURCE();
 800712a:	4b7e      	ldr	r3, [pc, #504]	@ (8007324 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 800712c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007130:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8007134:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8007136:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007138:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800713c:	d036      	beq.n	80071ac <HAL_RCCEx_GetPeriphCLKFreq+0x978>
 800713e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007140:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007144:	d855      	bhi.n	80071f2 <HAL_RCCEx_GetPeriphCLKFreq+0x9be>
 8007146:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007148:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800714c:	d029      	beq.n	80071a2 <HAL_RCCEx_GetPeriphCLKFreq+0x96e>
 800714e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007150:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007154:	d84d      	bhi.n	80071f2 <HAL_RCCEx_GetPeriphCLKFreq+0x9be>
 8007156:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007158:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800715c:	d013      	beq.n	8007186 <HAL_RCCEx_GetPeriphCLKFreq+0x952>
 800715e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007160:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007164:	d845      	bhi.n	80071f2 <HAL_RCCEx_GetPeriphCLKFreq+0x9be>
 8007166:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007168:	2b00      	cmp	r3, #0
 800716a:	d015      	beq.n	8007198 <HAL_RCCEx_GetPeriphCLKFreq+0x964>
 800716c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800716e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007172:	d13e      	bne.n	80071f2 <HAL_RCCEx_GetPeriphCLKFreq+0x9be>
    {
      case RCC_ADF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007174:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007178:	4618      	mov	r0, r3
 800717a:	f7fe ff4d 	bl	8006018 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800717e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007180:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007182:	f000 bcff 	b.w	8007b84 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_ADF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007186:	f107 030c 	add.w	r3, r7, #12
 800718a:	4618      	mov	r0, r3
 800718c:	f7ff f9f8 	bl	8006580 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 8007190:	693b      	ldr	r3, [r7, #16]
 8007192:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007194:	f000 bcf6 	b.w	8007b84 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_ADF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 8007198:	f7fe f886 	bl	80052a8 <HAL_RCC_GetHCLKFreq>
 800719c:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800719e:	f000 bcf1 	b.w	8007b84 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_ADF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 80071a2:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 80071a6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80071a8:	f000 bcec 	b.w	8007b84 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_ADF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80071ac:	4b5d      	ldr	r3, [pc, #372]	@ (8007324 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	f003 0320 	and.w	r3, r3, #32
 80071b4:	2b20      	cmp	r3, #32
 80071b6:	d118      	bne.n	80071ea <HAL_RCCEx_GetPeriphCLKFreq+0x9b6>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80071b8:	4b5a      	ldr	r3, [pc, #360]	@ (8007324 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 80071ba:	689b      	ldr	r3, [r3, #8]
 80071bc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d005      	beq.n	80071d0 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>
 80071c4:	4b57      	ldr	r3, [pc, #348]	@ (8007324 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 80071c6:	689b      	ldr	r3, [r3, #8]
 80071c8:	0e1b      	lsrs	r3, r3, #24
 80071ca:	f003 030f 	and.w	r3, r3, #15
 80071ce:	e006      	b.n	80071de <HAL_RCCEx_GetPeriphCLKFreq+0x9aa>
 80071d0:	4b54      	ldr	r3, [pc, #336]	@ (8007324 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 80071d2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80071d6:	041b      	lsls	r3, r3, #16
 80071d8:	0e1b      	lsrs	r3, r3, #24
 80071da:	f003 030f 	and.w	r3, r3, #15
 80071de:	4a52      	ldr	r2, [pc, #328]	@ (8007328 <HAL_RCCEx_GetPeriphCLKFreq+0xaf4>)
 80071e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80071e4:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80071e6:	f000 bccd 	b.w	8007b84 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 80071ea:	2300      	movs	r3, #0
 80071ec:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80071ee:	f000 bcc9 	b.w	8007b84 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default:

        frequency = 0U;
 80071f2:	2300      	movs	r3, #0
 80071f4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80071f6:	f000 bcc5 	b.w	8007b84 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C1)
 80071fa:	e9d7 2300 	ldrd	r2, r3, [r7]
 80071fe:	f1a2 0140 	sub.w	r1, r2, #64	@ 0x40
 8007202:	430b      	orrs	r3, r1
 8007204:	d14c      	bne.n	80072a0 <HAL_RCCEx_GetPeriphCLKFreq+0xa6c>
  {
    /* Get the current I2C1 source */
    srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8007206:	4b47      	ldr	r3, [pc, #284]	@ (8007324 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8007208:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800720c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8007210:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 8007212:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007214:	2b00      	cmp	r3, #0
 8007216:	d104      	bne.n	8007222 <HAL_RCCEx_GetPeriphCLKFreq+0x9ee>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8007218:	f7fe f860 	bl	80052dc <HAL_RCC_GetPCLK1Freq>
 800721c:	6378      	str	r0, [r7, #52]	@ 0x34
 800721e:	f000 bcb1 	b.w	8007b84 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 8007222:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007224:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007228:	d104      	bne.n	8007234 <HAL_RCCEx_GetPeriphCLKFreq+0xa00>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800722a:	f7fd ff3b 	bl	80050a4 <HAL_RCC_GetSysClockFreq>
 800722e:	6378      	str	r0, [r7, #52]	@ 0x34
 8007230:	f000 bca8 	b.w	8007b84 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 8007234:	4b3b      	ldr	r3, [pc, #236]	@ (8007324 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800723c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007240:	d107      	bne.n	8007252 <HAL_RCCEx_GetPeriphCLKFreq+0xa1e>
 8007242:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007244:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007248:	d103      	bne.n	8007252 <HAL_RCCEx_GetPeriphCLKFreq+0xa1e>
    {
      frequency = HSI_VALUE;
 800724a:	4b38      	ldr	r3, [pc, #224]	@ (800732c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800724c:	637b      	str	r3, [r7, #52]	@ 0x34
 800724e:	f000 bc99 	b.w	8007b84 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C1CLKSOURCE_MSIK))
 8007252:	4b34      	ldr	r3, [pc, #208]	@ (8007324 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	f003 0320 	and.w	r3, r3, #32
 800725a:	2b20      	cmp	r3, #32
 800725c:	d11c      	bne.n	8007298 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
 800725e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007260:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007264:	d118      	bne.n	8007298 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007266:	4b2f      	ldr	r3, [pc, #188]	@ (8007324 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8007268:	689b      	ldr	r3, [r3, #8]
 800726a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800726e:	2b00      	cmp	r3, #0
 8007270:	d005      	beq.n	800727e <HAL_RCCEx_GetPeriphCLKFreq+0xa4a>
 8007272:	4b2c      	ldr	r3, [pc, #176]	@ (8007324 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8007274:	689b      	ldr	r3, [r3, #8]
 8007276:	0e1b      	lsrs	r3, r3, #24
 8007278:	f003 030f 	and.w	r3, r3, #15
 800727c:	e006      	b.n	800728c <HAL_RCCEx_GetPeriphCLKFreq+0xa58>
 800727e:	4b29      	ldr	r3, [pc, #164]	@ (8007324 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8007280:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007284:	041b      	lsls	r3, r3, #16
 8007286:	0e1b      	lsrs	r3, r3, #24
 8007288:	f003 030f 	and.w	r3, r3, #15
 800728c:	4a26      	ldr	r2, [pc, #152]	@ (8007328 <HAL_RCCEx_GetPeriphCLKFreq+0xaf4>)
 800728e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007292:	637b      	str	r3, [r7, #52]	@ 0x34
 8007294:	f000 bc76 	b.w	8007b84 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for I2C1 */
    else
    {
      frequency = 0U;
 8007298:	2300      	movs	r3, #0
 800729a:	637b      	str	r3, [r7, #52]	@ 0x34
 800729c:	f000 bc72 	b.w	8007b84 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C2)
 80072a0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80072a4:	f1a2 0180 	sub.w	r1, r2, #128	@ 0x80
 80072a8:	430b      	orrs	r3, r1
 80072aa:	d152      	bne.n	8007352 <HAL_RCCEx_GetPeriphCLKFreq+0xb1e>
  {
    /* Get the current I2C2 source */
    srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 80072ac:	4b1d      	ldr	r3, [pc, #116]	@ (8007324 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 80072ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80072b2:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 80072b6:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 80072b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d104      	bne.n	80072c8 <HAL_RCCEx_GetPeriphCLKFreq+0xa94>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80072be:	f7fe f80d 	bl	80052dc <HAL_RCC_GetPCLK1Freq>
 80072c2:	6378      	str	r0, [r7, #52]	@ 0x34
 80072c4:	f000 bc5e 	b.w	8007b84 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_I2C2CLKSOURCE_SYSCLK)
 80072c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072ca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80072ce:	d104      	bne.n	80072da <HAL_RCCEx_GetPeriphCLKFreq+0xaa6>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80072d0:	f7fd fee8 	bl	80050a4 <HAL_RCC_GetSysClockFreq>
 80072d4:	6378      	str	r0, [r7, #52]	@ 0x34
 80072d6:	f000 bc55 	b.w	8007b84 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 80072da:	4b12      	ldr	r3, [pc, #72]	@ (8007324 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80072e2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80072e6:	d107      	bne.n	80072f8 <HAL_RCCEx_GetPeriphCLKFreq+0xac4>
 80072e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072ea:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80072ee:	d103      	bne.n	80072f8 <HAL_RCCEx_GetPeriphCLKFreq+0xac4>
    {
      frequency = HSI_VALUE;
 80072f0:	4b0e      	ldr	r3, [pc, #56]	@ (800732c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80072f2:	637b      	str	r3, [r7, #52]	@ 0x34
 80072f4:	f000 bc46 	b.w	8007b84 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C2CLKSOURCE_MSIK))
 80072f8:	4b0a      	ldr	r3, [pc, #40]	@ (8007324 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	f003 0320 	and.w	r3, r3, #32
 8007300:	2b20      	cmp	r3, #32
 8007302:	d122      	bne.n	800734a <HAL_RCCEx_GetPeriphCLKFreq+0xb16>
 8007304:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007306:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800730a:	d11e      	bne.n	800734a <HAL_RCCEx_GetPeriphCLKFreq+0xb16>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800730c:	4b05      	ldr	r3, [pc, #20]	@ (8007324 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 800730e:	689b      	ldr	r3, [r3, #8]
 8007310:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007314:	2b00      	cmp	r3, #0
 8007316:	d00b      	beq.n	8007330 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>
 8007318:	4b02      	ldr	r3, [pc, #8]	@ (8007324 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 800731a:	689b      	ldr	r3, [r3, #8]
 800731c:	0e1b      	lsrs	r3, r3, #24
 800731e:	f003 030f 	and.w	r3, r3, #15
 8007322:	e00c      	b.n	800733e <HAL_RCCEx_GetPeriphCLKFreq+0xb0a>
 8007324:	46020c00 	.word	0x46020c00
 8007328:	0800d074 	.word	0x0800d074
 800732c:	00f42400 	.word	0x00f42400
 8007330:	4ba1      	ldr	r3, [pc, #644]	@ (80075b8 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8007332:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007336:	041b      	lsls	r3, r3, #16
 8007338:	0e1b      	lsrs	r3, r3, #24
 800733a:	f003 030f 	and.w	r3, r3, #15
 800733e:	4a9f      	ldr	r2, [pc, #636]	@ (80075bc <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8007340:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007344:	637b      	str	r3, [r7, #52]	@ 0x34
 8007346:	f000 bc1d 	b.w	8007b84 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for I2C2 */
    else
    {
      frequency = 0U;
 800734a:	2300      	movs	r3, #0
 800734c:	637b      	str	r3, [r7, #52]	@ 0x34
 800734e:	f000 bc19 	b.w	8007b84 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C3)
 8007352:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007356:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 800735a:	430b      	orrs	r3, r1
 800735c:	d151      	bne.n	8007402 <HAL_RCCEx_GetPeriphCLKFreq+0xbce>
  {
    /* Get the current I2C3 source */
    srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 800735e:	4b96      	ldr	r3, [pc, #600]	@ (80075b8 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8007360:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007364:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8007368:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800736a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800736c:	2bc0      	cmp	r3, #192	@ 0xc0
 800736e:	d024      	beq.n	80073ba <HAL_RCCEx_GetPeriphCLKFreq+0xb86>
 8007370:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007372:	2bc0      	cmp	r3, #192	@ 0xc0
 8007374:	d842      	bhi.n	80073fc <HAL_RCCEx_GetPeriphCLKFreq+0xbc8>
 8007376:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007378:	2b80      	cmp	r3, #128	@ 0x80
 800737a:	d00d      	beq.n	8007398 <HAL_RCCEx_GetPeriphCLKFreq+0xb64>
 800737c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800737e:	2b80      	cmp	r3, #128	@ 0x80
 8007380:	d83c      	bhi.n	80073fc <HAL_RCCEx_GetPeriphCLKFreq+0xbc8>
 8007382:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007384:	2b00      	cmp	r3, #0
 8007386:	d003      	beq.n	8007390 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
 8007388:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800738a:	2b40      	cmp	r3, #64	@ 0x40
 800738c:	d011      	beq.n	80073b2 <HAL_RCCEx_GetPeriphCLKFreq+0xb7e>
 800738e:	e035      	b.n	80073fc <HAL_RCCEx_GetPeriphCLKFreq+0xbc8>
    {
      case RCC_I2C3CLKSOURCE_PCLK3:
      {
        frequency = HAL_RCC_GetPCLK3Freq();
 8007390:	f7fd ffcc 	bl	800532c <HAL_RCC_GetPCLK3Freq>
 8007394:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8007396:	e3f5      	b.n	8007b84 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      case RCC_I2C3CLKSOURCE_HSI:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007398:	4b87      	ldr	r3, [pc, #540]	@ (80075b8 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80073a0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80073a4:	d102      	bne.n	80073ac <HAL_RCCEx_GetPeriphCLKFreq+0xb78>
        {
          frequency = HSI_VALUE;
 80073a6:	4b86      	ldr	r3, [pc, #536]	@ (80075c0 <HAL_RCCEx_GetPeriphCLKFreq+0xd8c>)
 80073a8:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80073aa:	e3eb      	b.n	8007b84 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 80073ac:	2300      	movs	r3, #0
 80073ae:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80073b0:	e3e8      	b.n	8007b84 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      case RCC_I2C3CLKSOURCE_SYSCLK:
      {
        frequency = HAL_RCC_GetSysClockFreq();
 80073b2:	f7fd fe77 	bl	80050a4 <HAL_RCC_GetSysClockFreq>
 80073b6:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 80073b8:	e3e4      	b.n	8007b84 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      case RCC_I2C3CLKSOURCE_MSIK:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80073ba:	4b7f      	ldr	r3, [pc, #508]	@ (80075b8 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	f003 0320 	and.w	r3, r3, #32
 80073c2:	2b20      	cmp	r3, #32
 80073c4:	d117      	bne.n	80073f6 <HAL_RCCEx_GetPeriphCLKFreq+0xbc2>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80073c6:	4b7c      	ldr	r3, [pc, #496]	@ (80075b8 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 80073c8:	689b      	ldr	r3, [r3, #8]
 80073ca:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d005      	beq.n	80073de <HAL_RCCEx_GetPeriphCLKFreq+0xbaa>
 80073d2:	4b79      	ldr	r3, [pc, #484]	@ (80075b8 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 80073d4:	689b      	ldr	r3, [r3, #8]
 80073d6:	0e1b      	lsrs	r3, r3, #24
 80073d8:	f003 030f 	and.w	r3, r3, #15
 80073dc:	e006      	b.n	80073ec <HAL_RCCEx_GetPeriphCLKFreq+0xbb8>
 80073de:	4b76      	ldr	r3, [pc, #472]	@ (80075b8 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 80073e0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80073e4:	041b      	lsls	r3, r3, #16
 80073e6:	0e1b      	lsrs	r3, r3, #24
 80073e8:	f003 030f 	and.w	r3, r3, #15
 80073ec:	4a73      	ldr	r2, [pc, #460]	@ (80075bc <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 80073ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80073f2:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80073f4:	e3c6      	b.n	8007b84 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 80073f6:	2300      	movs	r3, #0
 80073f8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80073fa:	e3c3      	b.n	8007b84 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      default:
      {
        frequency = 0U;
 80073fc:	2300      	movs	r3, #0
 80073fe:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007400:	e3c0      	b.n	8007b84 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C4)
 8007402:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007406:	f5a2 0180 	sub.w	r1, r2, #4194304	@ 0x400000
 800740a:	430b      	orrs	r3, r1
 800740c:	d147      	bne.n	800749e <HAL_RCCEx_GetPeriphCLKFreq+0xc6a>
  {
    /* Get the current I2C4 source */
    srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 800740e:	4b6a      	ldr	r3, [pc, #424]	@ (80075b8 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8007410:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007414:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8007418:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C4CLKSOURCE_PCLK1)
 800741a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800741c:	2b00      	cmp	r3, #0
 800741e:	d103      	bne.n	8007428 <HAL_RCCEx_GetPeriphCLKFreq+0xbf4>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8007420:	f7fd ff5c 	bl	80052dc <HAL_RCC_GetPCLK1Freq>
 8007424:	6378      	str	r0, [r7, #52]	@ 0x34
 8007426:	e3ad      	b.n	8007b84 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_I2C4CLKSOURCE_SYSCLK)
 8007428:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800742a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800742e:	d103      	bne.n	8007438 <HAL_RCCEx_GetPeriphCLKFreq+0xc04>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8007430:	f7fd fe38 	bl	80050a4 <HAL_RCC_GetSysClockFreq>
 8007434:	6378      	str	r0, [r7, #52]	@ 0x34
 8007436:	e3a5      	b.n	8007b84 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 8007438:	4b5f      	ldr	r3, [pc, #380]	@ (80075b8 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007440:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007444:	d106      	bne.n	8007454 <HAL_RCCEx_GetPeriphCLKFreq+0xc20>
 8007446:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007448:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800744c:	d102      	bne.n	8007454 <HAL_RCCEx_GetPeriphCLKFreq+0xc20>
    {
      frequency = HSI_VALUE;
 800744e:	4b5c      	ldr	r3, [pc, #368]	@ (80075c0 <HAL_RCCEx_GetPeriphCLKFreq+0xd8c>)
 8007450:	637b      	str	r3, [r7, #52]	@ 0x34
 8007452:	e397      	b.n	8007b84 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C4CLKSOURCE_MSIK))
 8007454:	4b58      	ldr	r3, [pc, #352]	@ (80075b8 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	f003 0320 	and.w	r3, r3, #32
 800745c:	2b20      	cmp	r3, #32
 800745e:	d11b      	bne.n	8007498 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
 8007460:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007462:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8007466:	d117      	bne.n	8007498 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007468:	4b53      	ldr	r3, [pc, #332]	@ (80075b8 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 800746a:	689b      	ldr	r3, [r3, #8]
 800746c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007470:	2b00      	cmp	r3, #0
 8007472:	d005      	beq.n	8007480 <HAL_RCCEx_GetPeriphCLKFreq+0xc4c>
 8007474:	4b50      	ldr	r3, [pc, #320]	@ (80075b8 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8007476:	689b      	ldr	r3, [r3, #8]
 8007478:	0e1b      	lsrs	r3, r3, #24
 800747a:	f003 030f 	and.w	r3, r3, #15
 800747e:	e006      	b.n	800748e <HAL_RCCEx_GetPeriphCLKFreq+0xc5a>
 8007480:	4b4d      	ldr	r3, [pc, #308]	@ (80075b8 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8007482:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007486:	041b      	lsls	r3, r3, #16
 8007488:	0e1b      	lsrs	r3, r3, #24
 800748a:	f003 030f 	and.w	r3, r3, #15
 800748e:	4a4b      	ldr	r2, [pc, #300]	@ (80075bc <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8007490:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007494:	637b      	str	r3, [r7, #52]	@ 0x34
 8007496:	e375      	b.n	8007b84 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for I2C4 */
    else
    {
      frequency = 0U;
 8007498:	2300      	movs	r3, #0
 800749a:	637b      	str	r3, [r7, #52]	@ 0x34
 800749c:	e372      	b.n	8007b84 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    {
      frequency = 0U;
    }
  }
#endif /* I2C6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM34)
 800749e:	e9d7 2300 	ldrd	r2, r3, [r7]
 80074a2:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 80074a6:	430b      	orrs	r3, r1
 80074a8:	d164      	bne.n	8007574 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>
  {
    /* Get the current LPTIM34 source */
    srcclk = __HAL_RCC_GET_LPTIM34_SOURCE();
 80074aa:	4b43      	ldr	r3, [pc, #268]	@ (80075b8 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 80074ac:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80074b0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80074b4:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM34CLKSOURCE_MSIK)
 80074b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d120      	bne.n	80074fe <HAL_RCCEx_GetPeriphCLKFreq+0xcca>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80074bc:	4b3e      	ldr	r3, [pc, #248]	@ (80075b8 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	f003 0320 	and.w	r3, r3, #32
 80074c4:	2b20      	cmp	r3, #32
 80074c6:	d117      	bne.n	80074f8 <HAL_RCCEx_GetPeriphCLKFreq+0xcc4>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80074c8:	4b3b      	ldr	r3, [pc, #236]	@ (80075b8 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 80074ca:	689b      	ldr	r3, [r3, #8]
 80074cc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d005      	beq.n	80074e0 <HAL_RCCEx_GetPeriphCLKFreq+0xcac>
 80074d4:	4b38      	ldr	r3, [pc, #224]	@ (80075b8 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 80074d6:	689b      	ldr	r3, [r3, #8]
 80074d8:	0e1b      	lsrs	r3, r3, #24
 80074da:	f003 030f 	and.w	r3, r3, #15
 80074de:	e006      	b.n	80074ee <HAL_RCCEx_GetPeriphCLKFreq+0xcba>
 80074e0:	4b35      	ldr	r3, [pc, #212]	@ (80075b8 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 80074e2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80074e6:	041b      	lsls	r3, r3, #16
 80074e8:	0e1b      	lsrs	r3, r3, #24
 80074ea:	f003 030f 	and.w	r3, r3, #15
 80074ee:	4a33      	ldr	r2, [pc, #204]	@ (80075bc <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 80074f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80074f4:	637b      	str	r3, [r7, #52]	@ 0x34
 80074f6:	e345      	b.n	8007b84 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = 0U;
 80074f8:	2300      	movs	r3, #0
 80074fa:	637b      	str	r3, [r7, #52]	@ 0x34
 80074fc:	e342      	b.n	8007b84 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSI))
 80074fe:	4b2e      	ldr	r3, [pc, #184]	@ (80075b8 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8007500:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007504:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007508:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800750c:	d112      	bne.n	8007534 <HAL_RCCEx_GetPeriphCLKFreq+0xd00>
 800750e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007510:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007514:	d10e      	bne.n	8007534 <HAL_RCCEx_GetPeriphCLKFreq+0xd00>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007516:	4b28      	ldr	r3, [pc, #160]	@ (80075b8 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8007518:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800751c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007520:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007524:	d102      	bne.n	800752c <HAL_RCCEx_GetPeriphCLKFreq+0xcf8>
      {
        frequency = LSI_VALUE / 128U;
 8007526:	23fa      	movs	r3, #250	@ 0xfa
 8007528:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800752a:	e32b      	b.n	8007b84 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = LSI_VALUE;
 800752c:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8007530:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007532:	e327      	b.n	8007b84 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_HSI))
 8007534:	4b20      	ldr	r3, [pc, #128]	@ (80075b8 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800753c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007540:	d106      	bne.n	8007550 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>
 8007542:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007544:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007548:	d102      	bne.n	8007550 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>
    {
      frequency = HSI_VALUE;
 800754a:	4b1d      	ldr	r3, [pc, #116]	@ (80075c0 <HAL_RCCEx_GetPeriphCLKFreq+0xd8c>)
 800754c:	637b      	str	r3, [r7, #52]	@ 0x34
 800754e:	e319      	b.n	8007b84 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSE))
 8007550:	4b19      	ldr	r3, [pc, #100]	@ (80075b8 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8007552:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007556:	f003 0302 	and.w	r3, r3, #2
 800755a:	2b02      	cmp	r3, #2
 800755c:	d107      	bne.n	800756e <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
 800755e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007560:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007564:	d103      	bne.n	800756e <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
    {
      frequency = LSE_VALUE;
 8007566:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800756a:	637b      	str	r3, [r7, #52]	@ 0x34
 800756c:	e30a      	b.n	8007b84 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for LPTIM34 */
    else
    {
      frequency = 0U;
 800756e:	2300      	movs	r3, #0
 8007570:	637b      	str	r3, [r7, #52]	@ 0x34
 8007572:	e307      	b.n	8007b84 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM1)
 8007574:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007578:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 800757c:	430b      	orrs	r3, r1
 800757e:	d16b      	bne.n	8007658 <HAL_RCCEx_GetPeriphCLKFreq+0xe24>
  {
    /* Get the current LPTIM1 source */
    srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8007580:	4b0d      	ldr	r3, [pc, #52]	@ (80075b8 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8007582:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007586:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800758a:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM1CLKSOURCE_MSIK)
 800758c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800758e:	2b00      	cmp	r3, #0
 8007590:	d127      	bne.n	80075e2 <HAL_RCCEx_GetPeriphCLKFreq+0xdae>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8007592:	4b09      	ldr	r3, [pc, #36]	@ (80075b8 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	f003 0320 	and.w	r3, r3, #32
 800759a:	2b20      	cmp	r3, #32
 800759c:	d11e      	bne.n	80075dc <HAL_RCCEx_GetPeriphCLKFreq+0xda8>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800759e:	4b06      	ldr	r3, [pc, #24]	@ (80075b8 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 80075a0:	689b      	ldr	r3, [r3, #8]
 80075a2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d00c      	beq.n	80075c4 <HAL_RCCEx_GetPeriphCLKFreq+0xd90>
 80075aa:	4b03      	ldr	r3, [pc, #12]	@ (80075b8 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 80075ac:	689b      	ldr	r3, [r3, #8]
 80075ae:	0e1b      	lsrs	r3, r3, #24
 80075b0:	f003 030f 	and.w	r3, r3, #15
 80075b4:	e00d      	b.n	80075d2 <HAL_RCCEx_GetPeriphCLKFreq+0xd9e>
 80075b6:	bf00      	nop
 80075b8:	46020c00 	.word	0x46020c00
 80075bc:	0800d074 	.word	0x0800d074
 80075c0:	00f42400 	.word	0x00f42400
 80075c4:	4b94      	ldr	r3, [pc, #592]	@ (8007818 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 80075c6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80075ca:	041b      	lsls	r3, r3, #16
 80075cc:	0e1b      	lsrs	r3, r3, #24
 80075ce:	f003 030f 	and.w	r3, r3, #15
 80075d2:	4a92      	ldr	r2, [pc, #584]	@ (800781c <HAL_RCCEx_GetPeriphCLKFreq+0xfe8>)
 80075d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80075d8:	637b      	str	r3, [r7, #52]	@ 0x34
 80075da:	e2d3      	b.n	8007b84 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = 0U;
 80075dc:	2300      	movs	r3, #0
 80075de:	637b      	str	r3, [r7, #52]	@ 0x34
 80075e0:	e2d0      	b.n	8007b84 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSI))
 80075e2:	4b8d      	ldr	r3, [pc, #564]	@ (8007818 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 80075e4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80075e8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80075ec:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80075f0:	d112      	bne.n	8007618 <HAL_RCCEx_GetPeriphCLKFreq+0xde4>
 80075f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075f4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80075f8:	d10e      	bne.n	8007618 <HAL_RCCEx_GetPeriphCLKFreq+0xde4>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80075fa:	4b87      	ldr	r3, [pc, #540]	@ (8007818 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 80075fc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007600:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007604:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007608:	d102      	bne.n	8007610 <HAL_RCCEx_GetPeriphCLKFreq+0xddc>
      {
        frequency = LSI_VALUE / 128U;
 800760a:	23fa      	movs	r3, #250	@ 0xfa
 800760c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800760e:	e2b9      	b.n	8007b84 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = LSI_VALUE;
 8007610:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8007614:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007616:	e2b5      	b.n	8007b84 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_HSI))
 8007618:	4b7f      	ldr	r3, [pc, #508]	@ (8007818 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007620:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007624:	d106      	bne.n	8007634 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>
 8007626:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007628:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800762c:	d102      	bne.n	8007634 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>
    {
      frequency = HSI_VALUE;
 800762e:	4b7c      	ldr	r3, [pc, #496]	@ (8007820 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8007630:	637b      	str	r3, [r7, #52]	@ 0x34
 8007632:	e2a7      	b.n	8007b84 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSE))
 8007634:	4b78      	ldr	r3, [pc, #480]	@ (8007818 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8007636:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800763a:	f003 0302 	and.w	r3, r3, #2
 800763e:	2b02      	cmp	r3, #2
 8007640:	d107      	bne.n	8007652 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
 8007642:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007644:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007648:	d103      	bne.n	8007652 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
    {
      frequency = LSE_VALUE;
 800764a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800764e:	637b      	str	r3, [r7, #52]	@ 0x34
 8007650:	e298      	b.n	8007b84 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for LPTIM1 */
    else
    {
      frequency = 0U;
 8007652:	2300      	movs	r3, #0
 8007654:	637b      	str	r3, [r7, #52]	@ 0x34
 8007656:	e295      	b.n	8007b84 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM2)
 8007658:	e9d7 2300 	ldrd	r2, r3, [r7]
 800765c:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 8007660:	430b      	orrs	r3, r1
 8007662:	d147      	bne.n	80076f4 <HAL_RCCEx_GetPeriphCLKFreq+0xec0>
  {
    /* Get the current LPTIM2 source */
    srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8007664:	4b6c      	ldr	r3, [pc, #432]	@ (8007818 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8007666:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800766a:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 800766e:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM2CLKSOURCE_PCLK1)
 8007670:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007672:	2b00      	cmp	r3, #0
 8007674:	d103      	bne.n	800767e <HAL_RCCEx_GetPeriphCLKFreq+0xe4a>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8007676:	f7fd fe31 	bl	80052dc <HAL_RCC_GetPCLK1Freq>
 800767a:	6378      	str	r0, [r7, #52]	@ 0x34
 800767c:	e282      	b.n	8007b84 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSI))
 800767e:	4b66      	ldr	r3, [pc, #408]	@ (8007818 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8007680:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007684:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007688:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800768c:	d112      	bne.n	80076b4 <HAL_RCCEx_GetPeriphCLKFreq+0xe80>
 800768e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007690:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007694:	d10e      	bne.n	80076b4 <HAL_RCCEx_GetPeriphCLKFreq+0xe80>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007696:	4b60      	ldr	r3, [pc, #384]	@ (8007818 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8007698:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800769c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80076a0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80076a4:	d102      	bne.n	80076ac <HAL_RCCEx_GetPeriphCLKFreq+0xe78>
      {
        frequency = LSI_VALUE / 128U;
 80076a6:	23fa      	movs	r3, #250	@ 0xfa
 80076a8:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80076aa:	e26b      	b.n	8007b84 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = LSI_VALUE;
 80076ac:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80076b0:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80076b2:	e267      	b.n	8007b84 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_HSI))
 80076b4:	4b58      	ldr	r3, [pc, #352]	@ (8007818 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80076bc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80076c0:	d106      	bne.n	80076d0 <HAL_RCCEx_GetPeriphCLKFreq+0xe9c>
 80076c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076c4:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80076c8:	d102      	bne.n	80076d0 <HAL_RCCEx_GetPeriphCLKFreq+0xe9c>
    {
      frequency = HSI_VALUE;
 80076ca:	4b55      	ldr	r3, [pc, #340]	@ (8007820 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80076cc:	637b      	str	r3, [r7, #52]	@ 0x34
 80076ce:	e259      	b.n	8007b84 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSE))
 80076d0:	4b51      	ldr	r3, [pc, #324]	@ (8007818 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 80076d2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80076d6:	f003 0302 	and.w	r3, r3, #2
 80076da:	2b02      	cmp	r3, #2
 80076dc:	d107      	bne.n	80076ee <HAL_RCCEx_GetPeriphCLKFreq+0xeba>
 80076de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076e0:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80076e4:	d103      	bne.n	80076ee <HAL_RCCEx_GetPeriphCLKFreq+0xeba>
    {
      frequency = LSE_VALUE;
 80076e6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80076ea:	637b      	str	r3, [r7, #52]	@ 0x34
 80076ec:	e24a      	b.n	8007b84 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for LPTIM2 */
    else
    {
      frequency = 0U;
 80076ee:	2300      	movs	r3, #0
 80076f0:	637b      	str	r3, [r7, #52]	@ 0x34
 80076f2:	e247      	b.n	8007b84 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN1)
 80076f4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80076f8:	f102 4178 	add.w	r1, r2, #4160749568	@ 0xf8000000
 80076fc:	430b      	orrs	r3, r1
 80076fe:	d12d      	bne.n	800775c <HAL_RCCEx_GetPeriphCLKFreq+0xf28>
  {
    /* Get the current FDCAN1 kernel source */
    srcclk = __HAL_RCC_GET_FDCAN1_SOURCE();
 8007700:	4b45      	ldr	r3, [pc, #276]	@ (8007818 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8007702:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007706:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 800770a:	633b      	str	r3, [r7, #48]	@ 0x30

    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCAN1CLKSOURCE_HSE))
 800770c:	4b42      	ldr	r3, [pc, #264]	@ (8007818 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007714:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007718:	d105      	bne.n	8007726 <HAL_RCCEx_GetPeriphCLKFreq+0xef2>
 800771a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800771c:	2b00      	cmp	r3, #0
 800771e:	d102      	bne.n	8007726 <HAL_RCCEx_GetPeriphCLKFreq+0xef2>
    {
      frequency = HSE_VALUE;
 8007720:	4b3f      	ldr	r3, [pc, #252]	@ (8007820 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8007722:	637b      	str	r3, [r7, #52]	@ 0x34
 8007724:	e22e      	b.n	8007b84 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL1) /* PLL1 ? */
 8007726:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007728:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800772c:	d107      	bne.n	800773e <HAL_RCCEx_GetPeriphCLKFreq+0xf0a>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800772e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007732:	4618      	mov	r0, r3
 8007734:	f7fe fc70 	bl	8006018 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_Q_Frequency;
 8007738:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800773a:	637b      	str	r3, [r7, #52]	@ 0x34
 800773c:	e222      	b.n	8007b84 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL2) /* PLL2 ? */
 800773e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007740:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007744:	d107      	bne.n	8007756 <HAL_RCCEx_GetPeriphCLKFreq+0xf22>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007746:	f107 0318 	add.w	r3, r7, #24
 800774a:	4618      	mov	r0, r3
 800774c:	f7fe fdbe 	bl	80062cc <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_P_Frequency;
 8007750:	69bb      	ldr	r3, [r7, #24]
 8007752:	637b      	str	r3, [r7, #52]	@ 0x34
 8007754:	e216      	b.n	8007b84 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for FDCAN1 */
    else
    {
      frequency = 0U;
 8007756:	2300      	movs	r3, #0
 8007758:	637b      	str	r3, [r7, #52]	@ 0x34
 800775a:	e213      	b.n	8007b84 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI1)
 800775c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007760:	f5a2 0100 	sub.w	r1, r2, #8388608	@ 0x800000
 8007764:	430b      	orrs	r3, r1
 8007766:	d15d      	bne.n	8007824 <HAL_RCCEx_GetPeriphCLKFreq+0xff0>
  {
    /* Get the current SPI1 kernel source */
    srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 8007768:	4b2b      	ldr	r3, [pc, #172]	@ (8007818 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 800776a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800776e:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8007772:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 8007774:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007776:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800777a:	d028      	beq.n	80077ce <HAL_RCCEx_GetPeriphCLKFreq+0xf9a>
 800777c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800777e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007782:	d845      	bhi.n	8007810 <HAL_RCCEx_GetPeriphCLKFreq+0xfdc>
 8007784:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007786:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800778a:	d013      	beq.n	80077b4 <HAL_RCCEx_GetPeriphCLKFreq+0xf80>
 800778c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800778e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007792:	d83d      	bhi.n	8007810 <HAL_RCCEx_GetPeriphCLKFreq+0xfdc>
 8007794:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007796:	2b00      	cmp	r3, #0
 8007798:	d004      	beq.n	80077a4 <HAL_RCCEx_GetPeriphCLKFreq+0xf70>
 800779a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800779c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80077a0:	d004      	beq.n	80077ac <HAL_RCCEx_GetPeriphCLKFreq+0xf78>
 80077a2:	e035      	b.n	8007810 <HAL_RCCEx_GetPeriphCLKFreq+0xfdc>
    {
      case RCC_SPI1CLKSOURCE_PCLK2:

        frequency = HAL_RCC_GetPCLK2Freq();
 80077a4:	f7fd fdae 	bl	8005304 <HAL_RCC_GetPCLK2Freq>
 80077a8:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 80077aa:	e1eb      	b.n	8007b84 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI1CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 80077ac:	f7fd fc7a 	bl	80050a4 <HAL_RCC_GetSysClockFreq>
 80077b0:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 80077b2:	e1e7      	b.n	8007b84 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI1CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80077b4:	4b18      	ldr	r3, [pc, #96]	@ (8007818 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80077bc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80077c0:	d102      	bne.n	80077c8 <HAL_RCCEx_GetPeriphCLKFreq+0xf94>
        {
          frequency = HSI_VALUE;
 80077c2:	4b17      	ldr	r3, [pc, #92]	@ (8007820 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80077c4:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80077c6:	e1dd      	b.n	8007b84 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 80077c8:	2300      	movs	r3, #0
 80077ca:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80077cc:	e1da      	b.n	8007b84 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80077ce:	4b12      	ldr	r3, [pc, #72]	@ (8007818 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	f003 0320 	and.w	r3, r3, #32
 80077d6:	2b20      	cmp	r3, #32
 80077d8:	d117      	bne.n	800780a <HAL_RCCEx_GetPeriphCLKFreq+0xfd6>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80077da:	4b0f      	ldr	r3, [pc, #60]	@ (8007818 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 80077dc:	689b      	ldr	r3, [r3, #8]
 80077de:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d005      	beq.n	80077f2 <HAL_RCCEx_GetPeriphCLKFreq+0xfbe>
 80077e6:	4b0c      	ldr	r3, [pc, #48]	@ (8007818 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 80077e8:	689b      	ldr	r3, [r3, #8]
 80077ea:	0e1b      	lsrs	r3, r3, #24
 80077ec:	f003 030f 	and.w	r3, r3, #15
 80077f0:	e006      	b.n	8007800 <HAL_RCCEx_GetPeriphCLKFreq+0xfcc>
 80077f2:	4b09      	ldr	r3, [pc, #36]	@ (8007818 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 80077f4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80077f8:	041b      	lsls	r3, r3, #16
 80077fa:	0e1b      	lsrs	r3, r3, #24
 80077fc:	f003 030f 	and.w	r3, r3, #15
 8007800:	4a06      	ldr	r2, [pc, #24]	@ (800781c <HAL_RCCEx_GetPeriphCLKFreq+0xfe8>)
 8007802:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007806:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8007808:	e1bc      	b.n	8007b84 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 800780a:	2300      	movs	r3, #0
 800780c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800780e:	e1b9      	b.n	8007b84 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default:

        frequency = 0U;
 8007810:	2300      	movs	r3, #0
 8007812:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007814:	e1b6      	b.n	8007b84 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
 8007816:	bf00      	nop
 8007818:	46020c00 	.word	0x46020c00
 800781c:	0800d074 	.word	0x0800d074
 8007820:	00f42400 	.word	0x00f42400
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI2)
 8007824:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007828:	f102 417f 	add.w	r1, r2, #4278190080	@ 0xff000000
 800782c:	430b      	orrs	r3, r1
 800782e:	d156      	bne.n	80078de <HAL_RCCEx_GetPeriphCLKFreq+0x10aa>
  {
    /* Get the current SPI2 kernel source */
    srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 8007830:	4ba5      	ldr	r3, [pc, #660]	@ (8007ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8007832:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007836:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800783a:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 800783c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800783e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007842:	d028      	beq.n	8007896 <HAL_RCCEx_GetPeriphCLKFreq+0x1062>
 8007844:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007846:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800784a:	d845      	bhi.n	80078d8 <HAL_RCCEx_GetPeriphCLKFreq+0x10a4>
 800784c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800784e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007852:	d013      	beq.n	800787c <HAL_RCCEx_GetPeriphCLKFreq+0x1048>
 8007854:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007856:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800785a:	d83d      	bhi.n	80078d8 <HAL_RCCEx_GetPeriphCLKFreq+0x10a4>
 800785c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800785e:	2b00      	cmp	r3, #0
 8007860:	d004      	beq.n	800786c <HAL_RCCEx_GetPeriphCLKFreq+0x1038>
 8007862:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007864:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007868:	d004      	beq.n	8007874 <HAL_RCCEx_GetPeriphCLKFreq+0x1040>
 800786a:	e035      	b.n	80078d8 <HAL_RCCEx_GetPeriphCLKFreq+0x10a4>
    {
      case RCC_SPI2CLKSOURCE_PCLK1:

        frequency = HAL_RCC_GetPCLK1Freq();
 800786c:	f7fd fd36 	bl	80052dc <HAL_RCC_GetPCLK1Freq>
 8007870:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8007872:	e187      	b.n	8007b84 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI2CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8007874:	f7fd fc16 	bl	80050a4 <HAL_RCC_GetSysClockFreq>
 8007878:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800787a:	e183      	b.n	8007b84 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI2CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800787c:	4b92      	ldr	r3, [pc, #584]	@ (8007ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007884:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007888:	d102      	bne.n	8007890 <HAL_RCCEx_GetPeriphCLKFreq+0x105c>
        {
          frequency = HSI_VALUE;
 800788a:	4b90      	ldr	r3, [pc, #576]	@ (8007acc <HAL_RCCEx_GetPeriphCLKFreq+0x1298>)
 800788c:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800788e:	e179      	b.n	8007b84 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8007890:	2300      	movs	r3, #0
 8007892:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007894:	e176      	b.n	8007b84 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI2CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8007896:	4b8c      	ldr	r3, [pc, #560]	@ (8007ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	f003 0320 	and.w	r3, r3, #32
 800789e:	2b20      	cmp	r3, #32
 80078a0:	d117      	bne.n	80078d2 <HAL_RCCEx_GetPeriphCLKFreq+0x109e>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80078a2:	4b89      	ldr	r3, [pc, #548]	@ (8007ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 80078a4:	689b      	ldr	r3, [r3, #8]
 80078a6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d005      	beq.n	80078ba <HAL_RCCEx_GetPeriphCLKFreq+0x1086>
 80078ae:	4b86      	ldr	r3, [pc, #536]	@ (8007ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 80078b0:	689b      	ldr	r3, [r3, #8]
 80078b2:	0e1b      	lsrs	r3, r3, #24
 80078b4:	f003 030f 	and.w	r3, r3, #15
 80078b8:	e006      	b.n	80078c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1094>
 80078ba:	4b83      	ldr	r3, [pc, #524]	@ (8007ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 80078bc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80078c0:	041b      	lsls	r3, r3, #16
 80078c2:	0e1b      	lsrs	r3, r3, #24
 80078c4:	f003 030f 	and.w	r3, r3, #15
 80078c8:	4a81      	ldr	r2, [pc, #516]	@ (8007ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x129c>)
 80078ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80078ce:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80078d0:	e158      	b.n	8007b84 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 80078d2:	2300      	movs	r3, #0
 80078d4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80078d6:	e155      	b.n	8007b84 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default:

        frequency = 0U;
 80078d8:	2300      	movs	r3, #0
 80078da:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80078dc:	e152      	b.n	8007b84 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI3)
 80078de:	e9d7 2300 	ldrd	r2, r3, [r7]
 80078e2:	f102 417e 	add.w	r1, r2, #4261412864	@ 0xfe000000
 80078e6:	430b      	orrs	r3, r1
 80078e8:	d177      	bne.n	80079da <HAL_RCCEx_GetPeriphCLKFreq+0x11a6>
  {
    /* Get the current SPI3 kernel source */
    srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 80078ea:	4b77      	ldr	r3, [pc, #476]	@ (8007ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 80078ec:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80078f0:	f003 0318 	and.w	r3, r3, #24
 80078f4:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 80078f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078f8:	2b18      	cmp	r3, #24
 80078fa:	d86b      	bhi.n	80079d4 <HAL_RCCEx_GetPeriphCLKFreq+0x11a0>
 80078fc:	a201      	add	r2, pc, #4	@ (adr r2, 8007904 <HAL_RCCEx_GetPeriphCLKFreq+0x10d0>)
 80078fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007902:	bf00      	nop
 8007904:	08007969 	.word	0x08007969
 8007908:	080079d5 	.word	0x080079d5
 800790c:	080079d5 	.word	0x080079d5
 8007910:	080079d5 	.word	0x080079d5
 8007914:	080079d5 	.word	0x080079d5
 8007918:	080079d5 	.word	0x080079d5
 800791c:	080079d5 	.word	0x080079d5
 8007920:	080079d5 	.word	0x080079d5
 8007924:	08007971 	.word	0x08007971
 8007928:	080079d5 	.word	0x080079d5
 800792c:	080079d5 	.word	0x080079d5
 8007930:	080079d5 	.word	0x080079d5
 8007934:	080079d5 	.word	0x080079d5
 8007938:	080079d5 	.word	0x080079d5
 800793c:	080079d5 	.word	0x080079d5
 8007940:	080079d5 	.word	0x080079d5
 8007944:	08007979 	.word	0x08007979
 8007948:	080079d5 	.word	0x080079d5
 800794c:	080079d5 	.word	0x080079d5
 8007950:	080079d5 	.word	0x080079d5
 8007954:	080079d5 	.word	0x080079d5
 8007958:	080079d5 	.word	0x080079d5
 800795c:	080079d5 	.word	0x080079d5
 8007960:	080079d5 	.word	0x080079d5
 8007964:	08007993 	.word	0x08007993
    {
      case RCC_SPI3CLKSOURCE_PCLK3:

        frequency = HAL_RCC_GetPCLK3Freq();
 8007968:	f7fd fce0 	bl	800532c <HAL_RCC_GetPCLK3Freq>
 800796c:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800796e:	e109      	b.n	8007b84 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI3CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8007970:	f7fd fb98 	bl	80050a4 <HAL_RCC_GetSysClockFreq>
 8007974:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8007976:	e105      	b.n	8007b84 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI3CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007978:	4b53      	ldr	r3, [pc, #332]	@ (8007ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007980:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007984:	d102      	bne.n	800798c <HAL_RCCEx_GetPeriphCLKFreq+0x1158>
        {
          frequency = HSI_VALUE;
 8007986:	4b51      	ldr	r3, [pc, #324]	@ (8007acc <HAL_RCCEx_GetPeriphCLKFreq+0x1298>)
 8007988:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800798a:	e0fb      	b.n	8007b84 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 800798c:	2300      	movs	r3, #0
 800798e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007990:	e0f8      	b.n	8007b84 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI3CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8007992:	4b4d      	ldr	r3, [pc, #308]	@ (8007ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	f003 0320 	and.w	r3, r3, #32
 800799a:	2b20      	cmp	r3, #32
 800799c:	d117      	bne.n	80079ce <HAL_RCCEx_GetPeriphCLKFreq+0x119a>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800799e:	4b4a      	ldr	r3, [pc, #296]	@ (8007ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 80079a0:	689b      	ldr	r3, [r3, #8]
 80079a2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d005      	beq.n	80079b6 <HAL_RCCEx_GetPeriphCLKFreq+0x1182>
 80079aa:	4b47      	ldr	r3, [pc, #284]	@ (8007ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 80079ac:	689b      	ldr	r3, [r3, #8]
 80079ae:	0e1b      	lsrs	r3, r3, #24
 80079b0:	f003 030f 	and.w	r3, r3, #15
 80079b4:	e006      	b.n	80079c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1190>
 80079b6:	4b44      	ldr	r3, [pc, #272]	@ (8007ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 80079b8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80079bc:	041b      	lsls	r3, r3, #16
 80079be:	0e1b      	lsrs	r3, r3, #24
 80079c0:	f003 030f 	and.w	r3, r3, #15
 80079c4:	4a42      	ldr	r2, [pc, #264]	@ (8007ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x129c>)
 80079c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80079ca:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80079cc:	e0da      	b.n	8007b84 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 80079ce:	2300      	movs	r3, #0
 80079d0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80079d2:	e0d7      	b.n	8007b84 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default:

        frequency = 0U;
 80079d4:	2300      	movs	r3, #0
 80079d6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80079d8:	e0d4      	b.n	8007b84 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_OSPI)
 80079da:	e9d7 2300 	ldrd	r2, r3, [r7]
 80079de:	f102 417c 	add.w	r1, r2, #4227858432	@ 0xfc000000
 80079e2:	430b      	orrs	r3, r1
 80079e4:	d155      	bne.n	8007a92 <HAL_RCCEx_GetPeriphCLKFreq+0x125e>
  {
    /* Get the current OSPI kernel source */
    srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 80079e6:	4b38      	ldr	r3, [pc, #224]	@ (8007ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 80079e8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80079ec:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 80079f0:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 80079f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079f4:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80079f8:	d013      	beq.n	8007a22 <HAL_RCCEx_GetPeriphCLKFreq+0x11ee>
 80079fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079fc:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007a00:	d844      	bhi.n	8007a8c <HAL_RCCEx_GetPeriphCLKFreq+0x1258>
 8007a02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a04:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007a08:	d013      	beq.n	8007a32 <HAL_RCCEx_GetPeriphCLKFreq+0x11fe>
 8007a0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a0c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007a10:	d83c      	bhi.n	8007a8c <HAL_RCCEx_GetPeriphCLKFreq+0x1258>
 8007a12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d014      	beq.n	8007a42 <HAL_RCCEx_GetPeriphCLKFreq+0x120e>
 8007a18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a1a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007a1e:	d014      	beq.n	8007a4a <HAL_RCCEx_GetPeriphCLKFreq+0x1216>
 8007a20:	e034      	b.n	8007a8c <HAL_RCCEx_GetPeriphCLKFreq+0x1258>
    {
      case RCC_OSPICLKSOURCE_PLL2:

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007a22:	f107 0318 	add.w	r3, r7, #24
 8007a26:	4618      	mov	r0, r3
 8007a28:	f7fe fc50 	bl	80062cc <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 8007a2c:	69fb      	ldr	r3, [r7, #28]
 8007a2e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007a30:	e0a8      	b.n	8007b84 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_OSPICLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007a32:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007a36:	4618      	mov	r0, r3
 8007a38:	f7fe faee 	bl	8006018 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 8007a3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a3e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007a40:	e0a0      	b.n	8007b84 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_OSPICLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8007a42:	f7fd fb2f 	bl	80050a4 <HAL_RCC_GetSysClockFreq>
 8007a46:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8007a48:	e09c      	b.n	8007b84 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_OSPICLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8007a4a:	4b1f      	ldr	r3, [pc, #124]	@ (8007ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	f003 0320 	and.w	r3, r3, #32
 8007a52:	2b20      	cmp	r3, #32
 8007a54:	d117      	bne.n	8007a86 <HAL_RCCEx_GetPeriphCLKFreq+0x1252>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007a56:	4b1c      	ldr	r3, [pc, #112]	@ (8007ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8007a58:	689b      	ldr	r3, [r3, #8]
 8007a5a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d005      	beq.n	8007a6e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
 8007a62:	4b19      	ldr	r3, [pc, #100]	@ (8007ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8007a64:	689b      	ldr	r3, [r3, #8]
 8007a66:	0e1b      	lsrs	r3, r3, #24
 8007a68:	f003 030f 	and.w	r3, r3, #15
 8007a6c:	e006      	b.n	8007a7c <HAL_RCCEx_GetPeriphCLKFreq+0x1248>
 8007a6e:	4b16      	ldr	r3, [pc, #88]	@ (8007ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8007a70:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007a74:	041b      	lsls	r3, r3, #16
 8007a76:	0e1b      	lsrs	r3, r3, #24
 8007a78:	f003 030f 	and.w	r3, r3, #15
 8007a7c:	4a14      	ldr	r2, [pc, #80]	@ (8007ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x129c>)
 8007a7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007a82:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8007a84:	e07e      	b.n	8007b84 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8007a86:	2300      	movs	r3, #0
 8007a88:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007a8a:	e07b      	b.n	8007b84 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default:

        frequency = 0U;
 8007a8c:	2300      	movs	r3, #0
 8007a8e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007a90:	e078      	b.n	8007b84 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
        frequency = 0U;
        break;
    }
  }
#endif /* defined(HSPI1) */
  else if (PeriphClk == RCC_PERIPHCLK_DAC1)
 8007a92:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007a96:	f102 4170 	add.w	r1, r2, #4026531840	@ 0xf0000000
 8007a9a:	430b      	orrs	r3, r1
 8007a9c:	d138      	bne.n	8007b10 <HAL_RCCEx_GetPeriphCLKFreq+0x12dc>
  {
    /* Get the current DAC1 kernel source */
    srcclk = __HAL_RCC_GET_DAC1_SOURCE();
 8007a9e:	4b0a      	ldr	r3, [pc, #40]	@ (8007ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8007aa0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007aa4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007aa8:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if DAC1 clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSE))
 8007aaa:	4b07      	ldr	r3, [pc, #28]	@ (8007ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8007aac:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007ab0:	f003 0302 	and.w	r3, r3, #2
 8007ab4:	2b02      	cmp	r3, #2
 8007ab6:	d10d      	bne.n	8007ad4 <HAL_RCCEx_GetPeriphCLKFreq+0x12a0>
 8007ab8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d10a      	bne.n	8007ad4 <HAL_RCCEx_GetPeriphCLKFreq+0x12a0>
    {
      frequency = LSE_VALUE;
 8007abe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007ac2:	637b      	str	r3, [r7, #52]	@ 0x34
 8007ac4:	e05e      	b.n	8007b84 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
 8007ac6:	bf00      	nop
 8007ac8:	46020c00 	.word	0x46020c00
 8007acc:	00f42400 	.word	0x00f42400
 8007ad0:	0800d074 	.word	0x0800d074
    }
    /* Check if LSI is ready and if DAC1 clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSI))
 8007ad4:	4b2e      	ldr	r3, [pc, #184]	@ (8007b90 <HAL_RCCEx_GetPeriphCLKFreq+0x135c>)
 8007ad6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007ada:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007ade:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007ae2:	d112      	bne.n	8007b0a <HAL_RCCEx_GetPeriphCLKFreq+0x12d6>
 8007ae4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ae6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007aea:	d10e      	bne.n	8007b0a <HAL_RCCEx_GetPeriphCLKFreq+0x12d6>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007aec:	4b28      	ldr	r3, [pc, #160]	@ (8007b90 <HAL_RCCEx_GetPeriphCLKFreq+0x135c>)
 8007aee:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007af2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007af6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007afa:	d102      	bne.n	8007b02 <HAL_RCCEx_GetPeriphCLKFreq+0x12ce>
      {
        frequency = LSI_VALUE / 128U;
 8007afc:	23fa      	movs	r3, #250	@ 0xfa
 8007afe:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007b00:	e040      	b.n	8007b84 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = LSI_VALUE;
 8007b02:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8007b06:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007b08:	e03c      	b.n	8007b84 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    /* Clock not enabled for DAC1*/
    else
    {
      frequency = 0U;
 8007b0a:	2300      	movs	r3, #0
 8007b0c:	637b      	str	r3, [r7, #52]	@ 0x34
 8007b0e:	e039      	b.n	8007b84 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }

  }
  else if (PeriphClk == RCC_PERIPHCLK_RNG)
 8007b10:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007b14:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 8007b18:	430b      	orrs	r3, r1
 8007b1a:	d131      	bne.n	8007b80 <HAL_RCCEx_GetPeriphCLKFreq+0x134c>
  {
    /* Get the current RNG kernel source */
    srcclk = __HAL_RCC_GET_RNG_SOURCE();
 8007b1c:	4b1c      	ldr	r3, [pc, #112]	@ (8007b90 <HAL_RCCEx_GetPeriphCLKFreq+0x135c>)
 8007b1e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007b22:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8007b26:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if HSI48 is ready and if RNG clock selection is HSI48 */
    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 8007b28:	4b19      	ldr	r3, [pc, #100]	@ (8007b90 <HAL_RCCEx_GetPeriphCLKFreq+0x135c>)
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007b30:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007b34:	d105      	bne.n	8007b42 <HAL_RCCEx_GetPeriphCLKFreq+0x130e>
 8007b36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d102      	bne.n	8007b42 <HAL_RCCEx_GetPeriphCLKFreq+0x130e>
    {
      frequency = HSI48_VALUE;
 8007b3c:	4b15      	ldr	r3, [pc, #84]	@ (8007b94 <HAL_RCCEx_GetPeriphCLKFreq+0x1360>)
 8007b3e:	637b      	str	r3, [r7, #52]	@ 0x34
 8007b40:	e020      	b.n	8007b84 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }

    /* Check if HSI48 is ready and if RNG clock selection is HSI48_DIV2 */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48_DIV2))
 8007b42:	4b13      	ldr	r3, [pc, #76]	@ (8007b90 <HAL_RCCEx_GetPeriphCLKFreq+0x135c>)
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007b4a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007b4e:	d106      	bne.n	8007b5e <HAL_RCCEx_GetPeriphCLKFreq+0x132a>
 8007b50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b52:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007b56:	d102      	bne.n	8007b5e <HAL_RCCEx_GetPeriphCLKFreq+0x132a>
    {
      frequency = HSI48_VALUE >> 1U ;
 8007b58:	4b0f      	ldr	r3, [pc, #60]	@ (8007b98 <HAL_RCCEx_GetPeriphCLKFreq+0x1364>)
 8007b5a:	637b      	str	r3, [r7, #52]	@ 0x34
 8007b5c:	e012      	b.n	8007b84 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }

    /* Check if HSI is ready and if RNG clock selection is HSI */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI))
 8007b5e:	4b0c      	ldr	r3, [pc, #48]	@ (8007b90 <HAL_RCCEx_GetPeriphCLKFreq+0x135c>)
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007b66:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007b6a:	d106      	bne.n	8007b7a <HAL_RCCEx_GetPeriphCLKFreq+0x1346>
 8007b6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b6e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007b72:	d102      	bne.n	8007b7a <HAL_RCCEx_GetPeriphCLKFreq+0x1346>
    {
      frequency = HSI_VALUE;
 8007b74:	4b09      	ldr	r3, [pc, #36]	@ (8007b9c <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 8007b76:	637b      	str	r3, [r7, #52]	@ 0x34
 8007b78:	e004      	b.n	8007b84 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for RNG */
    else
    {
      frequency = 0U;
 8007b7a:	2300      	movs	r3, #0
 8007b7c:	637b      	str	r3, [r7, #52]	@ 0x34
 8007b7e:	e001      	b.n	8007b84 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
  }
#endif /* defined(USB_OTG_HS) */

  else
  {
    frequency = 0;
 8007b80:	2300      	movs	r3, #0
 8007b82:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  return (frequency);
 8007b84:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8007b86:	4618      	mov	r0, r3
 8007b88:	3738      	adds	r7, #56	@ 0x38
 8007b8a:	46bd      	mov	sp, r7
 8007b8c:	bd80      	pop	{r7, pc}
 8007b8e:	bf00      	nop
 8007b90:	46020c00 	.word	0x46020c00
 8007b94:	02dc6c00 	.word	0x02dc6c00
 8007b98:	016e3600 	.word	0x016e3600
 8007b9c:	00f42400 	.word	0x00f42400

08007ba0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 8007ba0:	b580      	push	{r7, lr}
 8007ba2:	b084      	sub	sp, #16
 8007ba4:	af00      	add	r7, sp, #0
 8007ba6:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll2->PLL2P));
  assert_param(IS_RCC_PLLQ_VALUE(pll2->PLL2Q));
  assert_param(IS_RCC_PLLR_VALUE(pll2->PLL2R));

  /* Disable  PLL2 */
  __HAL_RCC_PLL2_DISABLE();
 8007ba8:	4b47      	ldr	r3, [pc, #284]	@ (8007cc8 <RCCEx_PLL2_Config+0x128>)
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	4a46      	ldr	r2, [pc, #280]	@ (8007cc8 <RCCEx_PLL2_Config+0x128>)
 8007bae:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007bb2:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8007bb4:	f7fa fcb6 	bl	8002524 <HAL_GetTick>
 8007bb8:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007bba:	e008      	b.n	8007bce <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007bbc:	f7fa fcb2 	bl	8002524 <HAL_GetTick>
 8007bc0:	4602      	mov	r2, r0
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	1ad3      	subs	r3, r2, r3
 8007bc6:	2b02      	cmp	r3, #2
 8007bc8:	d901      	bls.n	8007bce <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8007bca:	2303      	movs	r3, #3
 8007bcc:	e077      	b.n	8007cbe <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007bce:	4b3e      	ldr	r3, [pc, #248]	@ (8007cc8 <RCCEx_PLL2_Config+0x128>)
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d1f0      	bne.n	8007bbc <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 8007bda:	4b3b      	ldr	r3, [pc, #236]	@ (8007cc8 <RCCEx_PLL2_Config+0x128>)
 8007bdc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007bde:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8007be2:	f023 0303 	bic.w	r3, r3, #3
 8007be6:	687a      	ldr	r2, [r7, #4]
 8007be8:	6811      	ldr	r1, [r2, #0]
 8007bea:	687a      	ldr	r2, [r7, #4]
 8007bec:	6852      	ldr	r2, [r2, #4]
 8007bee:	3a01      	subs	r2, #1
 8007bf0:	0212      	lsls	r2, r2, #8
 8007bf2:	430a      	orrs	r2, r1
 8007bf4:	4934      	ldr	r1, [pc, #208]	@ (8007cc8 <RCCEx_PLL2_Config+0x128>)
 8007bf6:	4313      	orrs	r3, r2
 8007bf8:	62cb      	str	r3, [r1, #44]	@ 0x2c
 8007bfa:	4b33      	ldr	r3, [pc, #204]	@ (8007cc8 <RCCEx_PLL2_Config+0x128>)
 8007bfc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007bfe:	4b33      	ldr	r3, [pc, #204]	@ (8007ccc <RCCEx_PLL2_Config+0x12c>)
 8007c00:	4013      	ands	r3, r2
 8007c02:	687a      	ldr	r2, [r7, #4]
 8007c04:	6892      	ldr	r2, [r2, #8]
 8007c06:	3a01      	subs	r2, #1
 8007c08:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8007c0c:	687a      	ldr	r2, [r7, #4]
 8007c0e:	68d2      	ldr	r2, [r2, #12]
 8007c10:	3a01      	subs	r2, #1
 8007c12:	0252      	lsls	r2, r2, #9
 8007c14:	b292      	uxth	r2, r2
 8007c16:	4311      	orrs	r1, r2
 8007c18:	687a      	ldr	r2, [r7, #4]
 8007c1a:	6912      	ldr	r2, [r2, #16]
 8007c1c:	3a01      	subs	r2, #1
 8007c1e:	0412      	lsls	r2, r2, #16
 8007c20:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8007c24:	4311      	orrs	r1, r2
 8007c26:	687a      	ldr	r2, [r7, #4]
 8007c28:	6952      	ldr	r2, [r2, #20]
 8007c2a:	3a01      	subs	r2, #1
 8007c2c:	0612      	lsls	r2, r2, #24
 8007c2e:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8007c32:	430a      	orrs	r2, r1
 8007c34:	4924      	ldr	r1, [pc, #144]	@ (8007cc8 <RCCEx_PLL2_Config+0x128>)
 8007c36:	4313      	orrs	r3, r2
 8007c38:	63cb      	str	r3, [r1, #60]	@ 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 8007c3a:	4b23      	ldr	r3, [pc, #140]	@ (8007cc8 <RCCEx_PLL2_Config+0x128>)
 8007c3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c3e:	f023 020c 	bic.w	r2, r3, #12
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	699b      	ldr	r3, [r3, #24]
 8007c46:	4920      	ldr	r1, [pc, #128]	@ (8007cc8 <RCCEx_PLL2_Config+0x128>)
 8007c48:	4313      	orrs	r3, r2
 8007c4a:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2CLKOUT_ENABLE(pll2->PLL2ClockOut);
 8007c4c:	4b1e      	ldr	r3, [pc, #120]	@ (8007cc8 <RCCEx_PLL2_Config+0x128>)
 8007c4e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	6a1b      	ldr	r3, [r3, #32]
 8007c54:	491c      	ldr	r1, [pc, #112]	@ (8007cc8 <RCCEx_PLL2_Config+0x128>)
 8007c56:	4313      	orrs	r3, r2
 8007c58:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Disable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_DISABLE();
 8007c5a:	4b1b      	ldr	r3, [pc, #108]	@ (8007cc8 <RCCEx_PLL2_Config+0x128>)
 8007c5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c5e:	4a1a      	ldr	r2, [pc, #104]	@ (8007cc8 <RCCEx_PLL2_Config+0x128>)
 8007c60:	f023 0310 	bic.w	r3, r3, #16
 8007c64:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8007c66:	4b18      	ldr	r3, [pc, #96]	@ (8007cc8 <RCCEx_PLL2_Config+0x128>)
 8007c68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c6a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007c6e:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8007c72:	687a      	ldr	r2, [r7, #4]
 8007c74:	69d2      	ldr	r2, [r2, #28]
 8007c76:	00d2      	lsls	r2, r2, #3
 8007c78:	4913      	ldr	r1, [pc, #76]	@ (8007cc8 <RCCEx_PLL2_Config+0x128>)
 8007c7a:	4313      	orrs	r3, r2
 8007c7c:	640b      	str	r3, [r1, #64]	@ 0x40

  /* Enable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_ENABLE();
 8007c7e:	4b12      	ldr	r3, [pc, #72]	@ (8007cc8 <RCCEx_PLL2_Config+0x128>)
 8007c80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c82:	4a11      	ldr	r2, [pc, #68]	@ (8007cc8 <RCCEx_PLL2_Config+0x128>)
 8007c84:	f043 0310 	orr.w	r3, r3, #16
 8007c88:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Enable  PLL2 */
  __HAL_RCC_PLL2_ENABLE();
 8007c8a:	4b0f      	ldr	r3, [pc, #60]	@ (8007cc8 <RCCEx_PLL2_Config+0x128>)
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	4a0e      	ldr	r2, [pc, #56]	@ (8007cc8 <RCCEx_PLL2_Config+0x128>)
 8007c90:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8007c94:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8007c96:	f7fa fc45 	bl	8002524 <HAL_GetTick>
 8007c9a:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007c9c:	e008      	b.n	8007cb0 <RCCEx_PLL2_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007c9e:	f7fa fc41 	bl	8002524 <HAL_GetTick>
 8007ca2:	4602      	mov	r2, r0
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	1ad3      	subs	r3, r2, r3
 8007ca8:	2b02      	cmp	r3, #2
 8007caa:	d901      	bls.n	8007cb0 <RCCEx_PLL2_Config+0x110>
    {
      return HAL_TIMEOUT;
 8007cac:	2303      	movs	r3, #3
 8007cae:	e006      	b.n	8007cbe <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007cb0:	4b05      	ldr	r3, [pc, #20]	@ (8007cc8 <RCCEx_PLL2_Config+0x128>)
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d0f0      	beq.n	8007c9e <RCCEx_PLL2_Config+0xfe>
    }
  }
  return HAL_OK;
 8007cbc:	2300      	movs	r3, #0

}
 8007cbe:	4618      	mov	r0, r3
 8007cc0:	3710      	adds	r7, #16
 8007cc2:	46bd      	mov	sp, r7
 8007cc4:	bd80      	pop	{r7, pc}
 8007cc6:	bf00      	nop
 8007cc8:	46020c00 	.word	0x46020c00
 8007ccc:	80800000 	.word	0x80800000

08007cd0 <RCCEx_PLL3_Config>:
  *         contains the configuration parameters as well as VCI clock ranges.
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 8007cd0:	b580      	push	{r7, lr}
 8007cd2:	b084      	sub	sp, #16
 8007cd4:	af00      	add	r7, sp, #0
 8007cd6:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll3->PLL3P));
  assert_param(IS_RCC_PLLQ_VALUE(pll3->PLL3Q));
  assert_param(IS_RCC_PLLR_VALUE(pll3->PLL3R));

  /* Disable  PLL3 */
  __HAL_RCC_PLL3_DISABLE();
 8007cd8:	4b47      	ldr	r3, [pc, #284]	@ (8007df8 <RCCEx_PLL3_Config+0x128>)
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	4a46      	ldr	r2, [pc, #280]	@ (8007df8 <RCCEx_PLL3_Config+0x128>)
 8007cde:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007ce2:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8007ce4:	f7fa fc1e 	bl	8002524 <HAL_GetTick>
 8007ce8:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007cea:	e008      	b.n	8007cfe <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007cec:	f7fa fc1a 	bl	8002524 <HAL_GetTick>
 8007cf0:	4602      	mov	r2, r0
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	1ad3      	subs	r3, r2, r3
 8007cf6:	2b02      	cmp	r3, #2
 8007cf8:	d901      	bls.n	8007cfe <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8007cfa:	2303      	movs	r3, #3
 8007cfc:	e077      	b.n	8007dee <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007cfe:	4b3e      	ldr	r3, [pc, #248]	@ (8007df8 <RCCEx_PLL3_Config+0x128>)
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d1f0      	bne.n	8007cec <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 8007d0a:	4b3b      	ldr	r3, [pc, #236]	@ (8007df8 <RCCEx_PLL3_Config+0x128>)
 8007d0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007d0e:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8007d12:	f023 0303 	bic.w	r3, r3, #3
 8007d16:	687a      	ldr	r2, [r7, #4]
 8007d18:	6811      	ldr	r1, [r2, #0]
 8007d1a:	687a      	ldr	r2, [r7, #4]
 8007d1c:	6852      	ldr	r2, [r2, #4]
 8007d1e:	3a01      	subs	r2, #1
 8007d20:	0212      	lsls	r2, r2, #8
 8007d22:	430a      	orrs	r2, r1
 8007d24:	4934      	ldr	r1, [pc, #208]	@ (8007df8 <RCCEx_PLL3_Config+0x128>)
 8007d26:	4313      	orrs	r3, r2
 8007d28:	630b      	str	r3, [r1, #48]	@ 0x30
 8007d2a:	4b33      	ldr	r3, [pc, #204]	@ (8007df8 <RCCEx_PLL3_Config+0x128>)
 8007d2c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007d2e:	4b33      	ldr	r3, [pc, #204]	@ (8007dfc <RCCEx_PLL3_Config+0x12c>)
 8007d30:	4013      	ands	r3, r2
 8007d32:	687a      	ldr	r2, [r7, #4]
 8007d34:	6892      	ldr	r2, [r2, #8]
 8007d36:	3a01      	subs	r2, #1
 8007d38:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8007d3c:	687a      	ldr	r2, [r7, #4]
 8007d3e:	68d2      	ldr	r2, [r2, #12]
 8007d40:	3a01      	subs	r2, #1
 8007d42:	0252      	lsls	r2, r2, #9
 8007d44:	b292      	uxth	r2, r2
 8007d46:	4311      	orrs	r1, r2
 8007d48:	687a      	ldr	r2, [r7, #4]
 8007d4a:	6912      	ldr	r2, [r2, #16]
 8007d4c:	3a01      	subs	r2, #1
 8007d4e:	0412      	lsls	r2, r2, #16
 8007d50:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8007d54:	4311      	orrs	r1, r2
 8007d56:	687a      	ldr	r2, [r7, #4]
 8007d58:	6952      	ldr	r2, [r2, #20]
 8007d5a:	3a01      	subs	r2, #1
 8007d5c:	0612      	lsls	r2, r2, #24
 8007d5e:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8007d62:	430a      	orrs	r2, r1
 8007d64:	4924      	ldr	r1, [pc, #144]	@ (8007df8 <RCCEx_PLL3_Config+0x128>)
 8007d66:	4313      	orrs	r3, r2
 8007d68:	644b      	str	r3, [r1, #68]	@ 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE);
 8007d6a:	4b23      	ldr	r3, [pc, #140]	@ (8007df8 <RCCEx_PLL3_Config+0x128>)
 8007d6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007d6e:	f023 020c 	bic.w	r2, r3, #12
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	699b      	ldr	r3, [r3, #24]
 8007d76:	4920      	ldr	r1, [pc, #128]	@ (8007df8 <RCCEx_PLL3_Config+0x128>)
 8007d78:	4313      	orrs	r3, r2
 8007d7a:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3CLKOUT_ENABLE(pll3->PLL3ClockOut);
 8007d7c:	4b1e      	ldr	r3, [pc, #120]	@ (8007df8 <RCCEx_PLL3_Config+0x128>)
 8007d7e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	6a1b      	ldr	r3, [r3, #32]
 8007d84:	491c      	ldr	r1, [pc, #112]	@ (8007df8 <RCCEx_PLL3_Config+0x128>)
 8007d86:	4313      	orrs	r3, r2
 8007d88:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Disable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_DISABLE();
 8007d8a:	4b1b      	ldr	r3, [pc, #108]	@ (8007df8 <RCCEx_PLL3_Config+0x128>)
 8007d8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007d8e:	4a1a      	ldr	r2, [pc, #104]	@ (8007df8 <RCCEx_PLL3_Config+0x128>)
 8007d90:	f023 0310 	bic.w	r3, r3, #16
 8007d94:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8007d96:	4b18      	ldr	r3, [pc, #96]	@ (8007df8 <RCCEx_PLL3_Config+0x128>)
 8007d98:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007d9a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007d9e:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8007da2:	687a      	ldr	r2, [r7, #4]
 8007da4:	69d2      	ldr	r2, [r2, #28]
 8007da6:	00d2      	lsls	r2, r2, #3
 8007da8:	4913      	ldr	r1, [pc, #76]	@ (8007df8 <RCCEx_PLL3_Config+0x128>)
 8007daa:	4313      	orrs	r3, r2
 8007dac:	648b      	str	r3, [r1, #72]	@ 0x48

  /* Enable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_ENABLE();
 8007dae:	4b12      	ldr	r3, [pc, #72]	@ (8007df8 <RCCEx_PLL3_Config+0x128>)
 8007db0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007db2:	4a11      	ldr	r2, [pc, #68]	@ (8007df8 <RCCEx_PLL3_Config+0x128>)
 8007db4:	f043 0310 	orr.w	r3, r3, #16
 8007db8:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable  PLL3 */
  __HAL_RCC_PLL3_ENABLE();
 8007dba:	4b0f      	ldr	r3, [pc, #60]	@ (8007df8 <RCCEx_PLL3_Config+0x128>)
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	4a0e      	ldr	r2, [pc, #56]	@ (8007df8 <RCCEx_PLL3_Config+0x128>)
 8007dc0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007dc4:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8007dc6:	f7fa fbad 	bl	8002524 <HAL_GetTick>
 8007dca:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007dcc:	e008      	b.n	8007de0 <RCCEx_PLL3_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007dce:	f7fa fba9 	bl	8002524 <HAL_GetTick>
 8007dd2:	4602      	mov	r2, r0
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	1ad3      	subs	r3, r2, r3
 8007dd8:	2b02      	cmp	r3, #2
 8007dda:	d901      	bls.n	8007de0 <RCCEx_PLL3_Config+0x110>
    {
      return HAL_TIMEOUT;
 8007ddc:	2303      	movs	r3, #3
 8007dde:	e006      	b.n	8007dee <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007de0:	4b05      	ldr	r3, [pc, #20]	@ (8007df8 <RCCEx_PLL3_Config+0x128>)
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d0f0      	beq.n	8007dce <RCCEx_PLL3_Config+0xfe>
    }
  }
  return HAL_OK;
 8007dec:	2300      	movs	r3, #0
}
 8007dee:	4618      	mov	r0, r3
 8007df0:	3710      	adds	r7, #16
 8007df2:	46bd      	mov	sp, r7
 8007df4:	bd80      	pop	{r7, pc}
 8007df6:	bf00      	nop
 8007df8:	46020c00 	.word	0x46020c00
 8007dfc:	80800000 	.word	0x80800000

08007e00 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007e00:	b580      	push	{r7, lr}
 8007e02:	b084      	sub	sp, #16
 8007e04:	af00      	add	r7, sp, #0
 8007e06:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d101      	bne.n	8007e12 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007e0e:	2301      	movs	r3, #1
 8007e10:	e0fb      	b.n	800800a <HAL_SPI_Init+0x20a>

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
  if (IS_SPI_LIMITED_INSTANCE(hspi->Instance))
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	4a7f      	ldr	r2, [pc, #508]	@ (8008014 <HAL_SPI_Init+0x214>)
 8007e18:	4293      	cmp	r3, r2
 8007e1a:	d004      	beq.n	8007e26 <HAL_SPI_Init+0x26>
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	4a7d      	ldr	r2, [pc, #500]	@ (8008018 <HAL_SPI_Init+0x218>)
 8007e22:	4293      	cmp	r3, r2
 8007e24:	e000      	b.n	8007e28 <HAL_SPI_Init+0x28>
  {
    assert_param(IS_SPI_LIMITED_DATASIZE(hspi->Init.DataSize));
    assert_param(IS_SPI_LIMITED_FIFOTHRESHOLD(hspi->Init.FifoThreshold));
 8007e26:	bf00      	nop
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	2200      	movs	r2, #0
 8007e2c:	629a      	str	r2, [r3, #40]	@ 0x28
  assert_param(IS_SPI_RDY_MASTER_MANAGEMENT(hspi->Init.ReadyMasterManagement));
  assert_param(IS_SPI_RDY_POLARITY(hspi->Init.ReadyPolarity));
  assert_param(IS_SPI_MASTER_RX_AUTOSUSP(hspi->Init.MasterReceiverAutoSusp));

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	4a78      	ldr	r2, [pc, #480]	@ (8008014 <HAL_SPI_Init+0x214>)
 8007e34:	4293      	cmp	r3, r2
 8007e36:	d004      	beq.n	8007e42 <HAL_SPI_Init+0x42>
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	4a76      	ldr	r2, [pc, #472]	@ (8008018 <HAL_SPI_Init+0x218>)
 8007e3e:	4293      	cmp	r3, r2
 8007e40:	d105      	bne.n	8007e4e <HAL_SPI_Init+0x4e>
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	68db      	ldr	r3, [r3, #12]
 8007e46:	2b0f      	cmp	r3, #15
 8007e48:	d901      	bls.n	8007e4e <HAL_SPI_Init+0x4e>
  {
    return HAL_ERROR;
 8007e4a:	2301      	movs	r3, #1
 8007e4c:	e0dd      	b.n	800800a <HAL_SPI_Init+0x20a>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8007e4e:	6878      	ldr	r0, [r7, #4]
 8007e50:	f000 fdee 	bl	8008a30 <SPI_GetPacketSize>
 8007e54:	60f8      	str	r0, [r7, #12]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	4a6e      	ldr	r2, [pc, #440]	@ (8008014 <HAL_SPI_Init+0x214>)
 8007e5c:	4293      	cmp	r3, r2
 8007e5e:	d004      	beq.n	8007e6a <HAL_SPI_Init+0x6a>
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	4a6c      	ldr	r2, [pc, #432]	@ (8008018 <HAL_SPI_Init+0x218>)
 8007e66:	4293      	cmp	r3, r2
 8007e68:	d102      	bne.n	8007e70 <HAL_SPI_Init+0x70>
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	2b08      	cmp	r3, #8
 8007e6e:	d816      	bhi.n	8007e9e <HAL_SPI_Init+0x9e>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	681b      	ldr	r3, [r3, #0]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8007e74:	4a69      	ldr	r2, [pc, #420]	@ (800801c <HAL_SPI_Init+0x21c>)
 8007e76:	4293      	cmp	r3, r2
 8007e78:	d00e      	beq.n	8007e98 <HAL_SPI_Init+0x98>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	4a68      	ldr	r2, [pc, #416]	@ (8008020 <HAL_SPI_Init+0x220>)
 8007e80:	4293      	cmp	r3, r2
 8007e82:	d009      	beq.n	8007e98 <HAL_SPI_Init+0x98>
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	4a66      	ldr	r2, [pc, #408]	@ (8008024 <HAL_SPI_Init+0x224>)
 8007e8a:	4293      	cmp	r3, r2
 8007e8c:	d004      	beq.n	8007e98 <HAL_SPI_Init+0x98>
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	4a65      	ldr	r2, [pc, #404]	@ (8008028 <HAL_SPI_Init+0x228>)
 8007e94:	4293      	cmp	r3, r2
 8007e96:	d104      	bne.n	8007ea2 <HAL_SPI_Init+0xa2>
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	2b10      	cmp	r3, #16
 8007e9c:	d901      	bls.n	8007ea2 <HAL_SPI_Init+0xa2>
  {
    return HAL_ERROR;
 8007e9e:	2301      	movs	r3, #1
 8007ea0:	e0b3      	b.n	800800a <HAL_SPI_Init+0x20a>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 8007ea8:	b2db      	uxtb	r3, r3
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d106      	bne.n	8007ebc <HAL_SPI_Init+0xbc>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	2200      	movs	r2, #0
 8007eb2:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007eb6:	6878      	ldr	r0, [r7, #4]
 8007eb8:	f7f9 fb12 	bl	80014e0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	2202      	movs	r2, #2
 8007ec0:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	681a      	ldr	r2, [r3, #0]
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	f022 0201 	bic.w	r2, r2, #1
 8007ed2:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	689b      	ldr	r3, [r3, #8]
 8007eda:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 8007ede:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	699b      	ldr	r3, [r3, #24]
 8007ee4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007ee8:	d119      	bne.n	8007f1e <HAL_SPI_Init+0x11e>
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	685b      	ldr	r3, [r3, #4]
 8007eee:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007ef2:	d103      	bne.n	8007efc <HAL_SPI_Init+0xfc>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	d008      	beq.n	8007f0e <HAL_SPI_Init+0x10e>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	d10c      	bne.n	8007f1e <HAL_SPI_Init+0x11e>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8007f08:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007f0c:	d107      	bne.n	8007f1e <HAL_SPI_Init+0x11e>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	681a      	ldr	r2, [r3, #0]
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8007f1c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	685b      	ldr	r3, [r3, #4]
 8007f22:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d00f      	beq.n	8007f4a <HAL_SPI_Init+0x14a>
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	68db      	ldr	r3, [r3, #12]
 8007f2e:	2b06      	cmp	r3, #6
 8007f30:	d90b      	bls.n	8007f4a <HAL_SPI_Init+0x14a>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	430a      	orrs	r2, r1
 8007f46:	601a      	str	r2, [r3, #0]
 8007f48:	e007      	b.n	8007f5a <HAL_SPI_Init+0x15a>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	681a      	ldr	r2, [r3, #0]
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007f58:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	69da      	ldr	r2, [r3, #28]
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f62:	431a      	orrs	r2, r3
 8007f64:	68bb      	ldr	r3, [r7, #8]
 8007f66:	431a      	orrs	r2, r3
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007f6c:	ea42 0103 	orr.w	r1, r2, r3
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	68da      	ldr	r2, [r3, #12]
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	430a      	orrs	r2, r1
 8007f7a:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f84:	431a      	orrs	r2, r3
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007f8a:	431a      	orrs	r2, r3
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	699b      	ldr	r3, [r3, #24]
 8007f90:	431a      	orrs	r2, r3
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	691b      	ldr	r3, [r3, #16]
 8007f96:	431a      	orrs	r2, r3
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	695b      	ldr	r3, [r3, #20]
 8007f9c:	431a      	orrs	r2, r3
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	6a1b      	ldr	r3, [r3, #32]
 8007fa2:	431a      	orrs	r2, r3
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	685b      	ldr	r3, [r3, #4]
 8007fa8:	431a      	orrs	r2, r3
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007fae:	431a      	orrs	r2, r3
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	689b      	ldr	r3, [r3, #8]
 8007fb4:	431a      	orrs	r2, r3
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007fba:	431a      	orrs	r2, r3
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007fc0:	431a      	orrs	r2, r3
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007fc6:	ea42 0103 	orr.w	r1, r2, r3
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	430a      	orrs	r2, r1
 8007fd4:	60da      	str	r2, [r3, #12]
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	685b      	ldr	r3, [r3, #4]
 8007fda:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d00a      	beq.n	8007ff8 <HAL_SPI_Init+0x1f8>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	68db      	ldr	r3, [r3, #12]
 8007fe8:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	430a      	orrs	r2, r1
 8007ff6:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	2200      	movs	r2, #0
 8007ffc:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  hspi->State     = HAL_SPI_STATE_READY;
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	2201      	movs	r2, #1
 8008004:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  return HAL_OK;
 8008008:	2300      	movs	r3, #0
}
 800800a:	4618      	mov	r0, r3
 800800c:	3710      	adds	r7, #16
 800800e:	46bd      	mov	sp, r7
 8008010:	bd80      	pop	{r7, pc}
 8008012:	bf00      	nop
 8008014:	46002000 	.word	0x46002000
 8008018:	56002000 	.word	0x56002000
 800801c:	40013000 	.word	0x40013000
 8008020:	50013000 	.word	0x50013000
 8008024:	40003800 	.word	0x40003800
 8008028:	50003800 	.word	0x50003800

0800802c <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800802c:	b580      	push	{r7, lr}
 800802e:	b088      	sub	sp, #32
 8008030:	af02      	add	r7, sp, #8
 8008032:	60f8      	str	r0, [r7, #12]
 8008034:	60b9      	str	r1, [r7, #8]
 8008036:	603b      	str	r3, [r7, #0]
 8008038:	4613      	mov	r3, r2
 800803a:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	3320      	adds	r3, #32
 8008042:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Check transfer size parameter */
  if (IS_SPI_LIMITED_INSTANCE(hspi->Instance))
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	4a90      	ldr	r2, [pc, #576]	@ (800828c <HAL_SPI_Transmit+0x260>)
 800804a:	4293      	cmp	r3, r2
  {
    assert_param(IS_SPI_TRANSFER_SIZE(Size));
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800804c:	f7fa fa6a 	bl	8002524 <HAL_GetTick>
 8008050:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 8008058:	b2db      	uxtb	r3, r3
 800805a:	2b01      	cmp	r3, #1
 800805c:	d001      	beq.n	8008062 <HAL_SPI_Transmit+0x36>
  {
    return HAL_BUSY;
 800805e:	2302      	movs	r3, #2
 8008060:	e1f4      	b.n	800844c <HAL_SPI_Transmit+0x420>
  }

  if ((pData == NULL) || (Size == 0UL))
 8008062:	68bb      	ldr	r3, [r7, #8]
 8008064:	2b00      	cmp	r3, #0
 8008066:	d002      	beq.n	800806e <HAL_SPI_Transmit+0x42>
 8008068:	88fb      	ldrh	r3, [r7, #6]
 800806a:	2b00      	cmp	r3, #0
 800806c:	d101      	bne.n	8008072 <HAL_SPI_Transmit+0x46>
  {
    return HAL_ERROR;
 800806e:	2301      	movs	r3, #1
 8008070:	e1ec      	b.n	800844c <HAL_SPI_Transmit+0x420>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 8008078:	2b01      	cmp	r3, #1
 800807a:	d101      	bne.n	8008080 <HAL_SPI_Transmit+0x54>
 800807c:	2302      	movs	r3, #2
 800807e:	e1e5      	b.n	800844c <HAL_SPI_Transmit+0x420>
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	2201      	movs	r2, #1
 8008084:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	2203      	movs	r2, #3
 800808c:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	2200      	movs	r2, #0
 8008094:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	68ba      	ldr	r2, [r7, #8]
 800809c:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->TxXferSize  = Size;
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	88fa      	ldrh	r2, [r7, #6]
 80080a2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->TxXferCount = Size;
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	88fa      	ldrh	r2, [r7, #6]
 80080aa:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	2200      	movs	r2, #0
 80080b2:	66da      	str	r2, [r3, #108]	@ 0x6c
  hspi->RxXferSize  = (uint16_t) 0UL;
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	2200      	movs	r2, #0
 80080b8:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70
  hspi->RxXferCount = (uint16_t) 0UL;
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	2200      	movs	r2, #0
 80080c0:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
  hspi->TxISR       = NULL;
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	2200      	movs	r2, #0
 80080c8:	67da      	str	r2, [r3, #124]	@ 0x7c
  hspi->RxISR       = NULL;
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	2200      	movs	r2, #0
 80080ce:	679a      	str	r2, [r3, #120]	@ 0x78

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	689b      	ldr	r3, [r3, #8]
 80080d4:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 80080d8:	d108      	bne.n	80080ec <HAL_SPI_Transmit+0xc0>
  {
    SPI_1LINE_TX(hspi);
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	681a      	ldr	r2, [r3, #0]
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80080e8:	601a      	str	r2, [r3, #0]
 80080ea:	e009      	b.n	8008100 <HAL_SPI_Transmit+0xd4>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	68db      	ldr	r3, [r3, #12]
 80080f2:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 80080fe:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	685b      	ldr	r3, [r3, #4]
 8008106:	0c1b      	lsrs	r3, r3, #16
 8008108:	041b      	lsls	r3, r3, #16
 800810a:	88f9      	ldrh	r1, [r7, #6]
 800810c:	68fa      	ldr	r2, [r7, #12]
 800810e:	6812      	ldr	r2, [r2, #0]
 8008110:	430b      	orrs	r3, r1
 8008112:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	681a      	ldr	r2, [r3, #0]
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	f042 0201 	orr.w	r2, r2, #1
 8008122:	601a      	str	r2, [r3, #0]

  if (((hspi->Instance->AUTOCR & SPI_AUTOCR_TRIGEN) == 0U) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	69db      	ldr	r3, [r3, #28]
 800812a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800812e:	2b00      	cmp	r3, #0
 8008130:	d10c      	bne.n	800814c <HAL_SPI_Transmit+0x120>
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	685b      	ldr	r3, [r3, #4]
 8008136:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800813a:	d107      	bne.n	800814c <HAL_SPI_Transmit+0x120>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	681a      	ldr	r2, [r3, #0]
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800814a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	68db      	ldr	r3, [r3, #12]
 8008150:	2b0f      	cmp	r3, #15
 8008152:	d95b      	bls.n	800820c <HAL_SPI_Transmit+0x1e0>
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	4a4d      	ldr	r2, [pc, #308]	@ (8008290 <HAL_SPI_Transmit+0x264>)
 800815a:	4293      	cmp	r3, r2
 800815c:	d04f      	beq.n	80081fe <HAL_SPI_Transmit+0x1d2>
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	4a4c      	ldr	r2, [pc, #304]	@ (8008294 <HAL_SPI_Transmit+0x268>)
 8008164:	4293      	cmp	r3, r2
 8008166:	d04a      	beq.n	80081fe <HAL_SPI_Transmit+0x1d2>
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	4a4a      	ldr	r2, [pc, #296]	@ (8008298 <HAL_SPI_Transmit+0x26c>)
 800816e:	4293      	cmp	r3, r2
 8008170:	d045      	beq.n	80081fe <HAL_SPI_Transmit+0x1d2>
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	4a49      	ldr	r2, [pc, #292]	@ (800829c <HAL_SPI_Transmit+0x270>)
 8008178:	4293      	cmp	r3, r2
 800817a:	d147      	bne.n	800820c <HAL_SPI_Transmit+0x1e0>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800817c:	e03f      	b.n	80081fe <HAL_SPI_Transmit+0x1d2>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	695b      	ldr	r3, [r3, #20]
 8008184:	f003 0302 	and.w	r3, r3, #2
 8008188:	2b02      	cmp	r3, #2
 800818a:	d114      	bne.n	80081b6 <HAL_SPI_Transmit+0x18a>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	6812      	ldr	r2, [r2, #0]
 8008196:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800819c:	1d1a      	adds	r2, r3, #4
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->TxXferCount--;
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80081a8:	b29b      	uxth	r3, r3
 80081aa:	3b01      	subs	r3, #1
 80081ac:	b29a      	uxth	r2, r3
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 80081b4:	e023      	b.n	80081fe <HAL_SPI_Transmit+0x1d2>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80081b6:	f7fa f9b5 	bl	8002524 <HAL_GetTick>
 80081ba:	4602      	mov	r2, r0
 80081bc:	693b      	ldr	r3, [r7, #16]
 80081be:	1ad3      	subs	r3, r2, r3
 80081c0:	683a      	ldr	r2, [r7, #0]
 80081c2:	429a      	cmp	r2, r3
 80081c4:	d803      	bhi.n	80081ce <HAL_SPI_Transmit+0x1a2>
 80081c6:	683b      	ldr	r3, [r7, #0]
 80081c8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80081cc:	d102      	bne.n	80081d4 <HAL_SPI_Transmit+0x1a8>
 80081ce:	683b      	ldr	r3, [r7, #0]
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	d114      	bne.n	80081fe <HAL_SPI_Transmit+0x1d2>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80081d4:	68f8      	ldr	r0, [r7, #12]
 80081d6:	f000 fb5d 	bl	8008894 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80081e0:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	2201      	movs	r2, #1
 80081ee:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	2200      	movs	r2, #0
 80081f6:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

          return HAL_TIMEOUT;
 80081fa:	2303      	movs	r3, #3
 80081fc:	e126      	b.n	800844c <HAL_SPI_Transmit+0x420>
    while (hspi->TxXferCount > 0UL)
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008204:	b29b      	uxth	r3, r3
 8008206:	2b00      	cmp	r3, #0
 8008208:	d1b9      	bne.n	800817e <HAL_SPI_Transmit+0x152>
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 800820a:	e0f9      	b.n	8008400 <HAL_SPI_Transmit+0x3d4>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	68db      	ldr	r3, [r3, #12]
 8008210:	2b07      	cmp	r3, #7
 8008212:	f240 80ee 	bls.w	80083f2 <HAL_SPI_Transmit+0x3c6>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8008216:	e067      	b.n	80082e8 <HAL_SPI_Transmit+0x2bc>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	695b      	ldr	r3, [r3, #20]
 800821e:	f003 0302 	and.w	r3, r3, #2
 8008222:	2b02      	cmp	r3, #2
 8008224:	d13c      	bne.n	80082a0 <HAL_SPI_Transmit+0x274>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800822c:	b29b      	uxth	r3, r3
 800822e:	2b01      	cmp	r3, #1
 8008230:	d918      	bls.n	8008264 <HAL_SPI_Transmit+0x238>
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008236:	2b00      	cmp	r3, #0
 8008238:	d014      	beq.n	8008264 <HAL_SPI_Transmit+0x238>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	6812      	ldr	r2, [r2, #0]
 8008244:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800824a:	1d1a      	adds	r2, r3, #4
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount -= (uint16_t)2UL;
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008256:	b29b      	uxth	r3, r3
 8008258:	3b02      	subs	r3, #2
 800825a:	b29a      	uxth	r2, r3
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8008262:	e041      	b.n	80082e8 <HAL_SPI_Transmit+0x2bc>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008268:	881a      	ldrh	r2, [r3, #0]
 800826a:	697b      	ldr	r3, [r7, #20]
 800826c:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008272:	1c9a      	adds	r2, r3, #2
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount--;
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800827e:	b29b      	uxth	r3, r3
 8008280:	3b01      	subs	r3, #1
 8008282:	b29a      	uxth	r2, r3
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800828a:	e02d      	b.n	80082e8 <HAL_SPI_Transmit+0x2bc>
 800828c:	46002000 	.word	0x46002000
 8008290:	40013000 	.word	0x40013000
 8008294:	50013000 	.word	0x50013000
 8008298:	40003800 	.word	0x40003800
 800829c:	50003800 	.word	0x50003800
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80082a0:	f7fa f940 	bl	8002524 <HAL_GetTick>
 80082a4:	4602      	mov	r2, r0
 80082a6:	693b      	ldr	r3, [r7, #16]
 80082a8:	1ad3      	subs	r3, r2, r3
 80082aa:	683a      	ldr	r2, [r7, #0]
 80082ac:	429a      	cmp	r2, r3
 80082ae:	d803      	bhi.n	80082b8 <HAL_SPI_Transmit+0x28c>
 80082b0:	683b      	ldr	r3, [r7, #0]
 80082b2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80082b6:	d102      	bne.n	80082be <HAL_SPI_Transmit+0x292>
 80082b8:	683b      	ldr	r3, [r7, #0]
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d114      	bne.n	80082e8 <HAL_SPI_Transmit+0x2bc>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80082be:	68f8      	ldr	r0, [r7, #12]
 80082c0:	f000 fae8 	bl	8008894 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80082ca:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	2201      	movs	r2, #1
 80082d8:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	2200      	movs	r2, #0
 80082e0:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

          return HAL_TIMEOUT;
 80082e4:	2303      	movs	r3, #3
 80082e6:	e0b1      	b.n	800844c <HAL_SPI_Transmit+0x420>
    while (hspi->TxXferCount > 0UL)
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80082ee:	b29b      	uxth	r3, r3
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d191      	bne.n	8008218 <HAL_SPI_Transmit+0x1ec>
 80082f4:	e084      	b.n	8008400 <HAL_SPI_Transmit+0x3d4>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	695b      	ldr	r3, [r3, #20]
 80082fc:	f003 0302 	and.w	r3, r3, #2
 8008300:	2b02      	cmp	r3, #2
 8008302:	d152      	bne.n	80083aa <HAL_SPI_Transmit+0x37e>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800830a:	b29b      	uxth	r3, r3
 800830c:	2b03      	cmp	r3, #3
 800830e:	d918      	bls.n	8008342 <HAL_SPI_Transmit+0x316>
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008314:	2b40      	cmp	r3, #64	@ 0x40
 8008316:	d914      	bls.n	8008342 <HAL_SPI_Transmit+0x316>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	6812      	ldr	r2, [r2, #0]
 8008322:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008328:	1d1a      	adds	r2, r3, #4
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount -= (uint16_t)4UL;
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008334:	b29b      	uxth	r3, r3
 8008336:	3b04      	subs	r3, #4
 8008338:	b29a      	uxth	r2, r3
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8008340:	e057      	b.n	80083f2 <HAL_SPI_Transmit+0x3c6>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008348:	b29b      	uxth	r3, r3
 800834a:	2b01      	cmp	r3, #1
 800834c:	d917      	bls.n	800837e <HAL_SPI_Transmit+0x352>
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008352:	2b00      	cmp	r3, #0
 8008354:	d013      	beq.n	800837e <HAL_SPI_Transmit+0x352>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800835a:	881a      	ldrh	r2, [r3, #0]
 800835c:	697b      	ldr	r3, [r7, #20]
 800835e:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008364:	1c9a      	adds	r2, r3, #2
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount -= (uint16_t)2UL;
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008370:	b29b      	uxth	r3, r3
 8008372:	3b02      	subs	r3, #2
 8008374:	b29a      	uxth	r2, r3
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800837c:	e039      	b.n	80083f2 <HAL_SPI_Transmit+0x3c6>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	3320      	adds	r3, #32
 8008388:	7812      	ldrb	r2, [r2, #0]
 800838a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008390:	1c5a      	adds	r2, r3, #1
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount--;
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800839c:	b29b      	uxth	r3, r3
 800839e:	3b01      	subs	r3, #1
 80083a0:	b29a      	uxth	r2, r3
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 80083a8:	e023      	b.n	80083f2 <HAL_SPI_Transmit+0x3c6>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80083aa:	f7fa f8bb 	bl	8002524 <HAL_GetTick>
 80083ae:	4602      	mov	r2, r0
 80083b0:	693b      	ldr	r3, [r7, #16]
 80083b2:	1ad3      	subs	r3, r2, r3
 80083b4:	683a      	ldr	r2, [r7, #0]
 80083b6:	429a      	cmp	r2, r3
 80083b8:	d803      	bhi.n	80083c2 <HAL_SPI_Transmit+0x396>
 80083ba:	683b      	ldr	r3, [r7, #0]
 80083bc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80083c0:	d102      	bne.n	80083c8 <HAL_SPI_Transmit+0x39c>
 80083c2:	683b      	ldr	r3, [r7, #0]
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d114      	bne.n	80083f2 <HAL_SPI_Transmit+0x3c6>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80083c8:	68f8      	ldr	r0, [r7, #12]
 80083ca:	f000 fa63 	bl	8008894 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80083d4:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	2201      	movs	r2, #1
 80083e2:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	2200      	movs	r2, #0
 80083ea:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

          return HAL_TIMEOUT;
 80083ee:	2303      	movs	r3, #3
 80083f0:	e02c      	b.n	800844c <HAL_SPI_Transmit+0x420>
    while (hspi->TxXferCount > 0UL)
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80083f8:	b29b      	uxth	r3, r3
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	f47f af7b 	bne.w	80082f6 <HAL_SPI_Transmit+0x2ca>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 8008400:	693b      	ldr	r3, [r7, #16]
 8008402:	9300      	str	r3, [sp, #0]
 8008404:	683b      	ldr	r3, [r7, #0]
 8008406:	2200      	movs	r2, #0
 8008408:	2108      	movs	r1, #8
 800840a:	68f8      	ldr	r0, [r7, #12]
 800840c:	f000 fae2 	bl	80089d4 <SPI_WaitOnFlagUntilTimeout>
 8008410:	4603      	mov	r3, r0
 8008412:	2b00      	cmp	r3, #0
 8008414:	d007      	beq.n	8008426 <HAL_SPI_Transmit+0x3fa>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800841c:	f043 0220 	orr.w	r2, r3, #32
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8008426:	68f8      	ldr	r0, [r7, #12]
 8008428:	f000 fa34 	bl	8008894 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	2201      	movs	r2, #1
 8008430:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	2200      	movs	r2, #0
 8008438:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008442:	2b00      	cmp	r3, #0
 8008444:	d001      	beq.n	800844a <HAL_SPI_Transmit+0x41e>
  {
    return HAL_ERROR;
 8008446:	2301      	movs	r3, #1
 8008448:	e000      	b.n	800844c <HAL_SPI_Transmit+0x420>
  }
  else
  {
    return HAL_OK;
 800844a:	2300      	movs	r3, #0
  }
}
 800844c:	4618      	mov	r0, r3
 800844e:	3718      	adds	r7, #24
 8008450:	46bd      	mov	sp, r7
 8008452:	bd80      	pop	{r7, pc}

08008454 <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8008454:	b580      	push	{r7, lr}
 8008456:	b08a      	sub	sp, #40	@ 0x28
 8008458:	af00      	add	r7, sp, #0
 800845a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	691b      	ldr	r3, [r3, #16]
 8008462:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	695b      	ldr	r3, [r3, #20]
 800846a:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 800846c:	6a3a      	ldr	r2, [r7, #32]
 800846e:	69fb      	ldr	r3, [r7, #28]
 8008470:	4013      	ands	r3, r2
 8008472:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	689b      	ldr	r3, [r3, #8]
 800847a:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 800847c:	2300      	movs	r3, #0
 800847e:	627b      	str	r3, [r7, #36]	@ 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 8008486:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	3330      	adds	r3, #48	@ 0x30
 800848e:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */

  /* SPI in SUSPEND mode  ----------------------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 8008490:	69fb      	ldr	r3, [r7, #28]
 8008492:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008496:	2b00      	cmp	r3, #0
 8008498:	d010      	beq.n	80084bc <HAL_SPI_IRQHandler+0x68>
 800849a:	6a3b      	ldr	r3, [r7, #32]
 800849c:	f003 0308 	and.w	r3, r3, #8
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	d00b      	beq.n	80084bc <HAL_SPI_IRQHandler+0x68>
  {
    /* Clear the Suspend flag */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	699a      	ldr	r2, [r3, #24]
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80084b2:	619a      	str	r2, [r3, #24]

    /* Suspend on going, Call the Suspend callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->SuspendCallback(hspi);
#else
    HAL_SPI_SuspendCallback(hspi);
 80084b4:	6878      	ldr	r0, [r7, #4]
 80084b6:	f000 f9c9 	bl	800884c <HAL_SPI_SuspendCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    return;
 80084ba:	e19a      	b.n	80087f2 <HAL_SPI_IRQHandler+0x39e>
  }

  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 80084bc:	69bb      	ldr	r3, [r7, #24]
 80084be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d113      	bne.n	80084ee <HAL_SPI_IRQHandler+0x9a>
 80084c6:	69bb      	ldr	r3, [r7, #24]
 80084c8:	f003 0320 	and.w	r3, r3, #32
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d10e      	bne.n	80084ee <HAL_SPI_IRQHandler+0x9a>
      HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 80084d0:	69bb      	ldr	r3, [r7, #24]
 80084d2:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d009      	beq.n	80084ee <HAL_SPI_IRQHandler+0x9a>
  {
    hspi->TxISR(hspi);
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80084de:	6878      	ldr	r0, [r7, #4]
 80084e0:	4798      	blx	r3
    hspi->RxISR(hspi);
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80084e6:	6878      	ldr	r0, [r7, #4]
 80084e8:	4798      	blx	r3
    handled = 1UL;
 80084ea:	2301      	movs	r3, #1
 80084ec:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 80084ee:	69bb      	ldr	r3, [r7, #24]
 80084f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d10f      	bne.n	8008518 <HAL_SPI_IRQHandler+0xc4>
 80084f8:	69bb      	ldr	r3, [r7, #24]
 80084fa:	f003 0301 	and.w	r3, r3, #1
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d00a      	beq.n	8008518 <HAL_SPI_IRQHandler+0xc4>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8008502:	69bb      	ldr	r3, [r7, #24]
 8008504:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 8008508:	2b00      	cmp	r3, #0
 800850a:	d105      	bne.n	8008518 <HAL_SPI_IRQHandler+0xc4>
  {
    hspi->RxISR(hspi);
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008510:	6878      	ldr	r0, [r7, #4]
 8008512:	4798      	blx	r3
    handled = 1UL;
 8008514:	2301      	movs	r3, #1
 8008516:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 8008518:	69bb      	ldr	r3, [r7, #24]
 800851a:	f003 0320 	and.w	r3, r3, #32
 800851e:	2b00      	cmp	r3, #0
 8008520:	d10f      	bne.n	8008542 <HAL_SPI_IRQHandler+0xee>
 8008522:	69bb      	ldr	r3, [r7, #24]
 8008524:	f003 0302 	and.w	r3, r3, #2
 8008528:	2b00      	cmp	r3, #0
 800852a:	d00a      	beq.n	8008542 <HAL_SPI_IRQHandler+0xee>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 800852c:	69bb      	ldr	r3, [r7, #24]
 800852e:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 8008532:	2b00      	cmp	r3, #0
 8008534:	d105      	bne.n	8008542 <HAL_SPI_IRQHandler+0xee>
  {
    hspi->TxISR(hspi);
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800853a:	6878      	ldr	r0, [r7, #4]
 800853c:	4798      	blx	r3
    handled = 1UL;
 800853e:	2301      	movs	r3, #1
 8008540:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  if (handled != 0UL)
 8008542:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008544:	2b00      	cmp	r3, #0
 8008546:	f040 814f 	bne.w	80087e8 <HAL_SPI_IRQHandler+0x394>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 800854a:	69bb      	ldr	r3, [r7, #24]
 800854c:	f003 0308 	and.w	r3, r3, #8
 8008550:	2b00      	cmp	r3, #0
 8008552:	f000 808b 	beq.w	800866c <HAL_SPI_IRQHandler+0x218>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	699a      	ldr	r2, [r3, #24]
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	f042 0208 	orr.w	r2, r2, #8
 8008564:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	699a      	ldr	r2, [r3, #24]
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	f042 0210 	orr.w	r2, r2, #16
 8008574:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	699a      	ldr	r2, [r3, #24]
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008584:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	691a      	ldr	r2, [r3, #16]
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	f022 0208 	bic.w	r2, r2, #8
 8008594:	611a      	str	r2, [r3, #16]

    /* For the IT based receive extra polling maybe required for last packet */
    if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	689b      	ldr	r3, [r3, #8]
 800859c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d13d      	bne.n	8008620 <HAL_SPI_IRQHandler+0x1cc>
    {
      /* Pooling remaining data */
      while (hspi->RxXferCount != 0UL)
 80085a4:	e036      	b.n	8008614 <HAL_SPI_IRQHandler+0x1c0>
      {
        /* Receive data in 32 Bit mode */
        if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	68db      	ldr	r3, [r3, #12]
 80085aa:	2b0f      	cmp	r3, #15
 80085ac:	d90b      	bls.n	80085c6 <HAL_SPI_IRQHandler+0x172>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	681a      	ldr	r2, [r3, #0]
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80085b6:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80085b8:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80085be:	1d1a      	adds	r2, r3, #4
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	66da      	str	r2, [r3, #108]	@ 0x6c
 80085c4:	e01d      	b.n	8008602 <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 16 Bit mode */
        else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	68db      	ldr	r3, [r3, #12]
 80085ca:	2b07      	cmp	r3, #7
 80085cc:	d90b      	bls.n	80085e6 <HAL_SPI_IRQHandler+0x192>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80085d2:	68fa      	ldr	r2, [r7, #12]
 80085d4:	8812      	ldrh	r2, [r2, #0]
 80085d6:	b292      	uxth	r2, r2
 80085d8:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80085de:	1c9a      	adds	r2, r3, #2
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	66da      	str	r2, [r3, #108]	@ 0x6c
 80085e4:	e00d      	b.n	8008602 <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 8 Bit mode */
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80085f2:	7812      	ldrb	r2, [r2, #0]
 80085f4:	b2d2      	uxtb	r2, r2
 80085f6:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80085fc:	1c5a      	adds	r2, r3, #1
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	66da      	str	r2, [r3, #108]	@ 0x6c
        }

        hspi->RxXferCount--;
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8008608:	b29b      	uxth	r3, r3
 800860a:	3b01      	subs	r3, #1
 800860c:	b29a      	uxth	r2, r3
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
      while (hspi->RxXferCount != 0UL)
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 800861a:	b29b      	uxth	r3, r3
 800861c:	2b00      	cmp	r3, #0
 800861e:	d1c2      	bne.n	80085a6 <HAL_SPI_IRQHandler+0x152>
      }
    }

    /* Call SPI Standard close procedure */
    SPI_CloseTransfer(hspi);
 8008620:	6878      	ldr	r0, [r7, #4]
 8008622:	f000 f937 	bl	8008894 <SPI_CloseTransfer>

    hspi->State = HAL_SPI_STATE_READY;
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	2201      	movs	r2, #1
 800862a:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008634:	2b00      	cmp	r3, #0
 8008636:	d003      	beq.n	8008640 <HAL_SPI_IRQHandler+0x1ec>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8008638:	6878      	ldr	r0, [r7, #4]
 800863a:	f000 f8fd 	bl	8008838 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800863e:	e0d8      	b.n	80087f2 <HAL_SPI_IRQHandler+0x39e>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 8008640:	7cfb      	ldrb	r3, [r7, #19]
 8008642:	2b05      	cmp	r3, #5
 8008644:	d103      	bne.n	800864e <HAL_SPI_IRQHandler+0x1fa>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 8008646:	6878      	ldr	r0, [r7, #4]
 8008648:	f000 f8ec 	bl	8008824 <HAL_SPI_TxRxCpltCallback>
    else
    {
      /* End of the appropriate call */
    }

    return;
 800864c:	e0ce      	b.n	80087ec <HAL_SPI_IRQHandler+0x398>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 800864e:	7cfb      	ldrb	r3, [r7, #19]
 8008650:	2b04      	cmp	r3, #4
 8008652:	d103      	bne.n	800865c <HAL_SPI_IRQHandler+0x208>
      HAL_SPI_RxCpltCallback(hspi);
 8008654:	6878      	ldr	r0, [r7, #4]
 8008656:	f000 f8db 	bl	8008810 <HAL_SPI_RxCpltCallback>
    return;
 800865a:	e0c7      	b.n	80087ec <HAL_SPI_IRQHandler+0x398>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 800865c:	7cfb      	ldrb	r3, [r7, #19]
 800865e:	2b03      	cmp	r3, #3
 8008660:	f040 80c4 	bne.w	80087ec <HAL_SPI_IRQHandler+0x398>
      HAL_SPI_TxCpltCallback(hspi);
 8008664:	6878      	ldr	r0, [r7, #4]
 8008666:	f000 f8c9 	bl	80087fc <HAL_SPI_TxCpltCallback>
    return;
 800866a:	e0bf      	b.n	80087ec <HAL_SPI_IRQHandler+0x398>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 800866c:	69bb      	ldr	r3, [r7, #24]
 800866e:	f403 7358 	and.w	r3, r3, #864	@ 0x360
 8008672:	2b00      	cmp	r3, #0
 8008674:	f000 80bd 	beq.w	80087f2 <HAL_SPI_IRQHandler+0x39e>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 8008678:	69bb      	ldr	r3, [r7, #24]
 800867a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800867e:	2b00      	cmp	r3, #0
 8008680:	d00f      	beq.n	80086a2 <HAL_SPI_IRQHandler+0x24e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008688:	f043 0204 	orr.w	r2, r3, #4
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	699a      	ldr	r2, [r3, #24]
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80086a0:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 80086a2:	69bb      	ldr	r3, [r7, #24]
 80086a4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	d00f      	beq.n	80086cc <HAL_SPI_IRQHandler+0x278>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80086b2:	f043 0201 	orr.w	r2, r3, #1
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	699a      	ldr	r2, [r3, #24]
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80086ca:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 80086cc:	69bb      	ldr	r3, [r7, #24]
 80086ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d00f      	beq.n	80086f6 <HAL_SPI_IRQHandler+0x2a2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80086dc:	f043 0208 	orr.w	r2, r3, #8
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	699a      	ldr	r2, [r3, #24]
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80086f4:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 80086f6:	69bb      	ldr	r3, [r7, #24]
 80086f8:	f003 0320 	and.w	r3, r3, #32
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	d00f      	beq.n	8008720 <HAL_SPI_IRQHandler+0x2cc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008706:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	699a      	ldr	r2, [r3, #24]
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	f042 0220 	orr.w	r2, r2, #32
 800871e:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008726:	2b00      	cmp	r3, #0
 8008728:	d062      	beq.n	80087f0 <HAL_SPI_IRQHandler+0x39c>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	681a      	ldr	r2, [r3, #0]
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	f022 0201 	bic.w	r2, r2, #1
 8008738:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	691b      	ldr	r3, [r3, #16]
 8008740:	687a      	ldr	r2, [r7, #4]
 8008742:	6812      	ldr	r2, [r2, #0]
 8008744:	f423 735a 	bic.w	r3, r3, #872	@ 0x368
 8008748:	f023 0303 	bic.w	r3, r3, #3
 800874c:	6113      	str	r3, [r2, #16]
                                  SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR));

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800874e:	697b      	ldr	r3, [r7, #20]
 8008750:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8008754:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8008758:	d13e      	bne.n	80087d8 <HAL_SPI_IRQHandler+0x384>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	689a      	ldr	r2, [r3, #8]
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8008768:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008770:	2b00      	cmp	r3, #0
 8008772:	d015      	beq.n	80087a0 <HAL_SPI_IRQHandler+0x34c>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800877a:	4a1f      	ldr	r2, [pc, #124]	@ (80087f8 <HAL_SPI_IRQHandler+0x3a4>)
 800877c:	66da      	str	r2, [r3, #108]	@ 0x6c
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008784:	4618      	mov	r0, r3
 8008786:	f7fa f835 	bl	80027f4 <HAL_DMA_Abort_IT>
 800878a:	4603      	mov	r3, r0
 800878c:	2b00      	cmp	r3, #0
 800878e:	d007      	beq.n	80087a0 <HAL_SPI_IRQHandler+0x34c>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008796:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d022      	beq.n	80087f0 <HAL_SPI_IRQHandler+0x39c>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80087b0:	4a11      	ldr	r2, [pc, #68]	@ (80087f8 <HAL_SPI_IRQHandler+0x3a4>)
 80087b2:	66da      	str	r2, [r3, #108]	@ 0x6c
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80087ba:	4618      	mov	r0, r3
 80087bc:	f7fa f81a 	bl	80027f4 <HAL_DMA_Abort_IT>
 80087c0:	4603      	mov	r3, r0
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	d014      	beq.n	80087f0 <HAL_SPI_IRQHandler+0x39c>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80087cc:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80087d6:	e00b      	b.n	80087f0 <HAL_SPI_IRQHandler+0x39c>
        hspi->State = HAL_SPI_STATE_READY;
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	2201      	movs	r2, #1
 80087dc:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
        HAL_SPI_ErrorCallback(hspi);
 80087e0:	6878      	ldr	r0, [r7, #4]
 80087e2:	f000 f829 	bl	8008838 <HAL_SPI_ErrorCallback>
    return;
 80087e6:	e003      	b.n	80087f0 <HAL_SPI_IRQHandler+0x39c>
    return;
 80087e8:	bf00      	nop
 80087ea:	e002      	b.n	80087f2 <HAL_SPI_IRQHandler+0x39e>
    return;
 80087ec:	bf00      	nop
 80087ee:	e000      	b.n	80087f2 <HAL_SPI_IRQHandler+0x39e>
    return;
 80087f0:	bf00      	nop
  }
}
 80087f2:	3728      	adds	r7, #40	@ 0x28
 80087f4:	46bd      	mov	sp, r7
 80087f6:	bd80      	pop	{r7, pc}
 80087f8:	08008861 	.word	0x08008861

080087fc <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 80087fc:	b480      	push	{r7}
 80087fe:	b083      	sub	sp, #12
 8008800:	af00      	add	r7, sp, #0
 8008802:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 8008804:	bf00      	nop
 8008806:	370c      	adds	r7, #12
 8008808:	46bd      	mov	sp, r7
 800880a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800880e:	4770      	bx	lr

08008810 <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8008810:	b480      	push	{r7}
 8008812:	b083      	sub	sp, #12
 8008814:	af00      	add	r7, sp, #0
 8008816:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8008818:	bf00      	nop
 800881a:	370c      	adds	r7, #12
 800881c:	46bd      	mov	sp, r7
 800881e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008822:	4770      	bx	lr

08008824 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8008824:	b480      	push	{r7}
 8008826:	b083      	sub	sp, #12
 8008828:	af00      	add	r7, sp, #0
 800882a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 800882c:	bf00      	nop
 800882e:	370c      	adds	r7, #12
 8008830:	46bd      	mov	sp, r7
 8008832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008836:	4770      	bx	lr

08008838 <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8008838:	b480      	push	{r7}
 800883a:	b083      	sub	sp, #12
 800883c:	af00      	add	r7, sp, #0
 800883e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8008840:	bf00      	nop
 8008842:	370c      	adds	r7, #12
 8008844:	46bd      	mov	sp, r7
 8008846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800884a:	4770      	bx	lr

0800884c <HAL_SPI_SuspendCallback>:
  * @brief  SPI Suspend callback.
  * @param  hspi SPI handle.
  * @retval None
  */
__weak void HAL_SPI_SuspendCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 800884c:	b480      	push	{r7}
 800884e:	b083      	sub	sp, #12
 8008850:	af00      	add	r7, sp, #0
 8008852:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_SuspendCallback can be implemented in the user file.
   */
}
 8008854:	bf00      	nop
 8008856:	370c      	adds	r7, #12
 8008858:	46bd      	mov	sp, r7
 800885a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800885e:	4770      	bx	lr

08008860 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008860:	b580      	push	{r7, lr}
 8008862:	b084      	sub	sp, #16
 8008864:	af00      	add	r7, sp, #0
 8008866:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800886c:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	2200      	movs	r2, #0
 8008872:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
  hspi->TxXferCount = (uint16_t) 0UL;
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	2200      	movs	r2, #0
 800887a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	2201      	movs	r2, #1
 8008882:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8008886:	68f8      	ldr	r0, [r7, #12]
 8008888:	f7ff ffd6 	bl	8008838 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800888c:	bf00      	nop
 800888e:	3710      	adds	r7, #16
 8008890:	46bd      	mov	sp, r7
 8008892:	bd80      	pop	{r7, pc}

08008894 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8008894:	b480      	push	{r7}
 8008896:	b085      	sub	sp, #20
 8008898:	af00      	add	r7, sp, #0
 800889a:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	695b      	ldr	r3, [r3, #20]
 80088a2:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	699a      	ldr	r2, [r3, #24]
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	f042 0208 	orr.w	r2, r2, #8
 80088b2:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	699a      	ldr	r2, [r3, #24]
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	f042 0210 	orr.w	r2, r2, #16
 80088c2:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	681a      	ldr	r2, [r3, #0]
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	f022 0201 	bic.w	r2, r2, #1
 80088d2:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	691b      	ldr	r3, [r3, #16]
 80088da:	687a      	ldr	r2, [r7, #4]
 80088dc:	6812      	ldr	r2, [r2, #0]
 80088de:	f423 735b 	bic.w	r3, r3, #876	@ 0x36c
 80088e2:	f023 0303 	bic.w	r3, r3, #3
 80088e6:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	689a      	ldr	r2, [r3, #8]
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 80088f6:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 80088fe:	b2db      	uxtb	r3, r3
 8008900:	2b04      	cmp	r3, #4
 8008902:	d014      	beq.n	800892e <SPI_CloseTransfer+0x9a>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	f003 0320 	and.w	r3, r3, #32
 800890a:	2b00      	cmp	r3, #0
 800890c:	d00f      	beq.n	800892e <SPI_CloseTransfer+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008914:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	699a      	ldr	r2, [r3, #24]
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	f042 0220 	orr.w	r2, r2, #32
 800892c:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 8008934:	b2db      	uxtb	r3, r3
 8008936:	2b03      	cmp	r3, #3
 8008938:	d014      	beq.n	8008964 <SPI_CloseTransfer+0xd0>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800893a:	68fb      	ldr	r3, [r7, #12]
 800893c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008940:	2b00      	cmp	r3, #0
 8008942:	d00f      	beq.n	8008964 <SPI_CloseTransfer+0xd0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800894a:	f043 0204 	orr.w	r2, r3, #4
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	699a      	ldr	r2, [r3, #24]
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008962:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800896a:	2b00      	cmp	r3, #0
 800896c:	d00f      	beq.n	800898e <SPI_CloseTransfer+0xfa>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008974:	f043 0201 	orr.w	r2, r3, #1
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	699a      	ldr	r2, [r3, #24]
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800898c:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008994:	2b00      	cmp	r3, #0
 8008996:	d00f      	beq.n	80089b8 <SPI_CloseTransfer+0x124>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800899e:	f043 0208 	orr.w	r2, r3, #8
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	699a      	ldr	r2, [r3, #24]
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80089b6:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	2200      	movs	r2, #0
 80089bc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->RxXferCount = (uint16_t)0UL;
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	2200      	movs	r2, #0
 80089c4:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
}
 80089c8:	bf00      	nop
 80089ca:	3714      	adds	r7, #20
 80089cc:	46bd      	mov	sp, r7
 80089ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089d2:	4770      	bx	lr

080089d4 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80089d4:	b580      	push	{r7, lr}
 80089d6:	b084      	sub	sp, #16
 80089d8:	af00      	add	r7, sp, #0
 80089da:	60f8      	str	r0, [r7, #12]
 80089dc:	60b9      	str	r1, [r7, #8]
 80089de:	603b      	str	r3, [r7, #0]
 80089e0:	4613      	mov	r3, r2
 80089e2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 80089e4:	e010      	b.n	8008a08 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80089e6:	f7f9 fd9d 	bl	8002524 <HAL_GetTick>
 80089ea:	4602      	mov	r2, r0
 80089ec:	69bb      	ldr	r3, [r7, #24]
 80089ee:	1ad3      	subs	r3, r2, r3
 80089f0:	683a      	ldr	r2, [r7, #0]
 80089f2:	429a      	cmp	r2, r3
 80089f4:	d803      	bhi.n	80089fe <SPI_WaitOnFlagUntilTimeout+0x2a>
 80089f6:	683b      	ldr	r3, [r7, #0]
 80089f8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80089fc:	d102      	bne.n	8008a04 <SPI_WaitOnFlagUntilTimeout+0x30>
 80089fe:	683b      	ldr	r3, [r7, #0]
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	d101      	bne.n	8008a08 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8008a04:	2303      	movs	r3, #3
 8008a06:	e00f      	b.n	8008a28 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	695a      	ldr	r2, [r3, #20]
 8008a0e:	68bb      	ldr	r3, [r7, #8]
 8008a10:	4013      	ands	r3, r2
 8008a12:	68ba      	ldr	r2, [r7, #8]
 8008a14:	429a      	cmp	r2, r3
 8008a16:	bf0c      	ite	eq
 8008a18:	2301      	moveq	r3, #1
 8008a1a:	2300      	movne	r3, #0
 8008a1c:	b2db      	uxtb	r3, r3
 8008a1e:	461a      	mov	r2, r3
 8008a20:	79fb      	ldrb	r3, [r7, #7]
 8008a22:	429a      	cmp	r2, r3
 8008a24:	d0df      	beq.n	80089e6 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 8008a26:	2300      	movs	r3, #0
}
 8008a28:	4618      	mov	r0, r3
 8008a2a:	3710      	adds	r7, #16
 8008a2c:	46bd      	mov	sp, r7
 8008a2e:	bd80      	pop	{r7, pc}

08008a30 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 8008a30:	b480      	push	{r7}
 8008a32:	b085      	sub	sp, #20
 8008a34:	af00      	add	r7, sp, #0
 8008a36:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008a3c:	095b      	lsrs	r3, r3, #5
 8008a3e:	3301      	adds	r3, #1
 8008a40:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	68db      	ldr	r3, [r3, #12]
 8008a46:	3301      	adds	r3, #1
 8008a48:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8008a4a:	68bb      	ldr	r3, [r7, #8]
 8008a4c:	3307      	adds	r3, #7
 8008a4e:	08db      	lsrs	r3, r3, #3
 8008a50:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8008a52:	68bb      	ldr	r3, [r7, #8]
 8008a54:	68fa      	ldr	r2, [r7, #12]
 8008a56:	fb02 f303 	mul.w	r3, r2, r3
}
 8008a5a:	4618      	mov	r0, r3
 8008a5c:	3714      	adds	r7, #20
 8008a5e:	46bd      	mov	sp, r7
 8008a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a64:	4770      	bx	lr

08008a66 <HAL_SPIEx_SetConfigAutonomousMode>:
  *                the configuration information of the autonomous mode for the specified SPIx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPIEx_SetConfigAutonomousMode(SPI_HandleTypeDef *hspi,
                                                    const SPI_AutonomousModeConfTypeDef *sConfig)
{
 8008a66:	b480      	push	{r7}
 8008a68:	b083      	sub	sp, #12
 8008a6a:	af00      	add	r7, sp, #0
 8008a6c:	6078      	str	r0, [r7, #4]
 8008a6e:	6039      	str	r1, [r7, #0]
  if (hspi->State == HAL_SPI_STATE_READY)
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 8008a76:	b2db      	uxtb	r3, r3
 8008a78:	2b01      	cmp	r3, #1
 8008a7a:	d12e      	bne.n	8008ada <HAL_SPIEx_SetConfigAutonomousMode+0x74>
  {
    /* Process Locked */
    __HAL_LOCK(hspi);
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 8008a82:	2b01      	cmp	r3, #1
 8008a84:	d101      	bne.n	8008a8a <HAL_SPIEx_SetConfigAutonomousMode+0x24>
 8008a86:	2302      	movs	r3, #2
 8008a88:	e028      	b.n	8008adc <HAL_SPIEx_SetConfigAutonomousMode+0x76>
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	2201      	movs	r2, #1
 8008a8e:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

    hspi->State = HAL_SPI_STATE_BUSY;
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	2202      	movs	r2, #2
 8008a96:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
    assert_param(IS_SPI_AUTONOMOUS_INSTANCE(hspi->Instance));
    assert_param(IS_SPI_TRIG_SOURCE(hspi->Instance, sConfig->TriggerSelection));
    assert_param(IS_SPI_AUTO_MODE_TRG_POL(sConfig->TriggerPolarity));

    /* Disable the selected SPI peripheral to be able to configure AUTOCR */
    __HAL_SPI_DISABLE(hspi);
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	681a      	ldr	r2, [r3, #0]
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	f022 0201 	bic.w	r2, r2, #1
 8008aa8:	601a      	str	r2, [r3, #0]

    /* SPIx AUTOCR Configuration */
    WRITE_REG(hspi->Instance->AUTOCR, (sConfig->TriggerState | ((sConfig->TriggerSelection) & SPI_AUTOCR_TRIGSEL_Msk) |
 8008aaa:	683b      	ldr	r3, [r7, #0]
 8008aac:	681a      	ldr	r2, [r3, #0]
 8008aae:	683b      	ldr	r3, [r7, #0]
 8008ab0:	685b      	ldr	r3, [r3, #4]
 8008ab2:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8008ab6:	ea42 0103 	orr.w	r1, r2, r3
 8008aba:	683b      	ldr	r3, [r7, #0]
 8008abc:	689a      	ldr	r2, [r3, #8]
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	430a      	orrs	r2, r1
 8008ac4:	61da      	str	r2, [r3, #28]
                                       sConfig->TriggerPolarity));

    hspi->State = HAL_SPI_STATE_READY;
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	2201      	movs	r2, #1
 8008aca:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	2200      	movs	r2, #0
 8008ad2:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8008ad6:	2300      	movs	r3, #0
 8008ad8:	e000      	b.n	8008adc <HAL_SPIEx_SetConfigAutonomousMode+0x76>
  }
  else
  {
    return HAL_ERROR;
 8008ada:	2301      	movs	r3, #1
  }
}
 8008adc:	4618      	mov	r0, r3
 8008ade:	370c      	adds	r7, #12
 8008ae0:	46bd      	mov	sp, r7
 8008ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ae6:	4770      	bx	lr

08008ae8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008ae8:	b580      	push	{r7, lr}
 8008aea:	b082      	sub	sp, #8
 8008aec:	af00      	add	r7, sp, #0
 8008aee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d101      	bne.n	8008afa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008af6:	2301      	movs	r3, #1
 8008af8:	e049      	b.n	8008b8e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008b00:	b2db      	uxtb	r3, r3
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d106      	bne.n	8008b14 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	2200      	movs	r2, #0
 8008b0a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008b0e:	6878      	ldr	r0, [r7, #4]
 8008b10:	f7f9 fa70 	bl	8001ff4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	2202      	movs	r2, #2
 8008b18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	681a      	ldr	r2, [r3, #0]
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	3304      	adds	r3, #4
 8008b24:	4619      	mov	r1, r3
 8008b26:	4610      	mov	r0, r2
 8008b28:	f000 fbe8 	bl	80092fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	2201      	movs	r2, #1
 8008b30:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	2201      	movs	r2, #1
 8008b38:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	2201      	movs	r2, #1
 8008b40:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	2201      	movs	r2, #1
 8008b48:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	2201      	movs	r2, #1
 8008b50:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	2201      	movs	r2, #1
 8008b58:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	2201      	movs	r2, #1
 8008b60:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	2201      	movs	r2, #1
 8008b68:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	2201      	movs	r2, #1
 8008b70:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	2201      	movs	r2, #1
 8008b78:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	2201      	movs	r2, #1
 8008b80:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	2201      	movs	r2, #1
 8008b88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008b8c:	2300      	movs	r3, #0
}
 8008b8e:	4618      	mov	r0, r3
 8008b90:	3708      	adds	r7, #8
 8008b92:	46bd      	mov	sp, r7
 8008b94:	bd80      	pop	{r7, pc}
	...

08008b98 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8008b98:	b480      	push	{r7}
 8008b9a:	b085      	sub	sp, #20
 8008b9c:	af00      	add	r7, sp, #0
 8008b9e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008ba6:	b2db      	uxtb	r3, r3
 8008ba8:	2b01      	cmp	r3, #1
 8008baa:	d001      	beq.n	8008bb0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8008bac:	2301      	movs	r3, #1
 8008bae:	e06a      	b.n	8008c86 <HAL_TIM_Base_Start+0xee>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	2202      	movs	r2, #2
 8008bb4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	4a35      	ldr	r2, [pc, #212]	@ (8008c94 <HAL_TIM_Base_Start+0xfc>)
 8008bbe:	4293      	cmp	r3, r2
 8008bc0:	d040      	beq.n	8008c44 <HAL_TIM_Base_Start+0xac>
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	4a34      	ldr	r2, [pc, #208]	@ (8008c98 <HAL_TIM_Base_Start+0x100>)
 8008bc8:	4293      	cmp	r3, r2
 8008bca:	d03b      	beq.n	8008c44 <HAL_TIM_Base_Start+0xac>
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008bd4:	d036      	beq.n	8008c44 <HAL_TIM_Base_Start+0xac>
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008bde:	d031      	beq.n	8008c44 <HAL_TIM_Base_Start+0xac>
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	4a2d      	ldr	r2, [pc, #180]	@ (8008c9c <HAL_TIM_Base_Start+0x104>)
 8008be6:	4293      	cmp	r3, r2
 8008be8:	d02c      	beq.n	8008c44 <HAL_TIM_Base_Start+0xac>
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	4a2c      	ldr	r2, [pc, #176]	@ (8008ca0 <HAL_TIM_Base_Start+0x108>)
 8008bf0:	4293      	cmp	r3, r2
 8008bf2:	d027      	beq.n	8008c44 <HAL_TIM_Base_Start+0xac>
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	4a2a      	ldr	r2, [pc, #168]	@ (8008ca4 <HAL_TIM_Base_Start+0x10c>)
 8008bfa:	4293      	cmp	r3, r2
 8008bfc:	d022      	beq.n	8008c44 <HAL_TIM_Base_Start+0xac>
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	4a29      	ldr	r2, [pc, #164]	@ (8008ca8 <HAL_TIM_Base_Start+0x110>)
 8008c04:	4293      	cmp	r3, r2
 8008c06:	d01d      	beq.n	8008c44 <HAL_TIM_Base_Start+0xac>
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	4a27      	ldr	r2, [pc, #156]	@ (8008cac <HAL_TIM_Base_Start+0x114>)
 8008c0e:	4293      	cmp	r3, r2
 8008c10:	d018      	beq.n	8008c44 <HAL_TIM_Base_Start+0xac>
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	4a26      	ldr	r2, [pc, #152]	@ (8008cb0 <HAL_TIM_Base_Start+0x118>)
 8008c18:	4293      	cmp	r3, r2
 8008c1a:	d013      	beq.n	8008c44 <HAL_TIM_Base_Start+0xac>
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	4a24      	ldr	r2, [pc, #144]	@ (8008cb4 <HAL_TIM_Base_Start+0x11c>)
 8008c22:	4293      	cmp	r3, r2
 8008c24:	d00e      	beq.n	8008c44 <HAL_TIM_Base_Start+0xac>
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	4a23      	ldr	r2, [pc, #140]	@ (8008cb8 <HAL_TIM_Base_Start+0x120>)
 8008c2c:	4293      	cmp	r3, r2
 8008c2e:	d009      	beq.n	8008c44 <HAL_TIM_Base_Start+0xac>
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	4a21      	ldr	r2, [pc, #132]	@ (8008cbc <HAL_TIM_Base_Start+0x124>)
 8008c36:	4293      	cmp	r3, r2
 8008c38:	d004      	beq.n	8008c44 <HAL_TIM_Base_Start+0xac>
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	4a20      	ldr	r2, [pc, #128]	@ (8008cc0 <HAL_TIM_Base_Start+0x128>)
 8008c40:	4293      	cmp	r3, r2
 8008c42:	d115      	bne.n	8008c70 <HAL_TIM_Base_Start+0xd8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	689a      	ldr	r2, [r3, #8]
 8008c4a:	4b1e      	ldr	r3, [pc, #120]	@ (8008cc4 <HAL_TIM_Base_Start+0x12c>)
 8008c4c:	4013      	ands	r3, r2
 8008c4e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	2b06      	cmp	r3, #6
 8008c54:	d015      	beq.n	8008c82 <HAL_TIM_Base_Start+0xea>
 8008c56:	68fb      	ldr	r3, [r7, #12]
 8008c58:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008c5c:	d011      	beq.n	8008c82 <HAL_TIM_Base_Start+0xea>
    {
      __HAL_TIM_ENABLE(htim);
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	681a      	ldr	r2, [r3, #0]
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	f042 0201 	orr.w	r2, r2, #1
 8008c6c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008c6e:	e008      	b.n	8008c82 <HAL_TIM_Base_Start+0xea>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	681a      	ldr	r2, [r3, #0]
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	f042 0201 	orr.w	r2, r2, #1
 8008c7e:	601a      	str	r2, [r3, #0]
 8008c80:	e000      	b.n	8008c84 <HAL_TIM_Base_Start+0xec>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008c82:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008c84:	2300      	movs	r3, #0
}
 8008c86:	4618      	mov	r0, r3
 8008c88:	3714      	adds	r7, #20
 8008c8a:	46bd      	mov	sp, r7
 8008c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c90:	4770      	bx	lr
 8008c92:	bf00      	nop
 8008c94:	40012c00 	.word	0x40012c00
 8008c98:	50012c00 	.word	0x50012c00
 8008c9c:	40000400 	.word	0x40000400
 8008ca0:	50000400 	.word	0x50000400
 8008ca4:	40000800 	.word	0x40000800
 8008ca8:	50000800 	.word	0x50000800
 8008cac:	40000c00 	.word	0x40000c00
 8008cb0:	50000c00 	.word	0x50000c00
 8008cb4:	40013400 	.word	0x40013400
 8008cb8:	50013400 	.word	0x50013400
 8008cbc:	40014000 	.word	0x40014000
 8008cc0:	50014000 	.word	0x50014000
 8008cc4:	00010007 	.word	0x00010007

08008cc8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008cc8:	b480      	push	{r7}
 8008cca:	b085      	sub	sp, #20
 8008ccc:	af00      	add	r7, sp, #0
 8008cce:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008cd6:	b2db      	uxtb	r3, r3
 8008cd8:	2b01      	cmp	r3, #1
 8008cda:	d001      	beq.n	8008ce0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008cdc:	2301      	movs	r3, #1
 8008cde:	e072      	b.n	8008dc6 <HAL_TIM_Base_Start_IT+0xfe>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	2202      	movs	r2, #2
 8008ce4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	68da      	ldr	r2, [r3, #12]
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	f042 0201 	orr.w	r2, r2, #1
 8008cf6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	4a35      	ldr	r2, [pc, #212]	@ (8008dd4 <HAL_TIM_Base_Start_IT+0x10c>)
 8008cfe:	4293      	cmp	r3, r2
 8008d00:	d040      	beq.n	8008d84 <HAL_TIM_Base_Start_IT+0xbc>
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	4a34      	ldr	r2, [pc, #208]	@ (8008dd8 <HAL_TIM_Base_Start_IT+0x110>)
 8008d08:	4293      	cmp	r3, r2
 8008d0a:	d03b      	beq.n	8008d84 <HAL_TIM_Base_Start_IT+0xbc>
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008d14:	d036      	beq.n	8008d84 <HAL_TIM_Base_Start_IT+0xbc>
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008d1e:	d031      	beq.n	8008d84 <HAL_TIM_Base_Start_IT+0xbc>
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	4a2d      	ldr	r2, [pc, #180]	@ (8008ddc <HAL_TIM_Base_Start_IT+0x114>)
 8008d26:	4293      	cmp	r3, r2
 8008d28:	d02c      	beq.n	8008d84 <HAL_TIM_Base_Start_IT+0xbc>
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	4a2c      	ldr	r2, [pc, #176]	@ (8008de0 <HAL_TIM_Base_Start_IT+0x118>)
 8008d30:	4293      	cmp	r3, r2
 8008d32:	d027      	beq.n	8008d84 <HAL_TIM_Base_Start_IT+0xbc>
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	4a2a      	ldr	r2, [pc, #168]	@ (8008de4 <HAL_TIM_Base_Start_IT+0x11c>)
 8008d3a:	4293      	cmp	r3, r2
 8008d3c:	d022      	beq.n	8008d84 <HAL_TIM_Base_Start_IT+0xbc>
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	4a29      	ldr	r2, [pc, #164]	@ (8008de8 <HAL_TIM_Base_Start_IT+0x120>)
 8008d44:	4293      	cmp	r3, r2
 8008d46:	d01d      	beq.n	8008d84 <HAL_TIM_Base_Start_IT+0xbc>
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	4a27      	ldr	r2, [pc, #156]	@ (8008dec <HAL_TIM_Base_Start_IT+0x124>)
 8008d4e:	4293      	cmp	r3, r2
 8008d50:	d018      	beq.n	8008d84 <HAL_TIM_Base_Start_IT+0xbc>
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	4a26      	ldr	r2, [pc, #152]	@ (8008df0 <HAL_TIM_Base_Start_IT+0x128>)
 8008d58:	4293      	cmp	r3, r2
 8008d5a:	d013      	beq.n	8008d84 <HAL_TIM_Base_Start_IT+0xbc>
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	4a24      	ldr	r2, [pc, #144]	@ (8008df4 <HAL_TIM_Base_Start_IT+0x12c>)
 8008d62:	4293      	cmp	r3, r2
 8008d64:	d00e      	beq.n	8008d84 <HAL_TIM_Base_Start_IT+0xbc>
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	4a23      	ldr	r2, [pc, #140]	@ (8008df8 <HAL_TIM_Base_Start_IT+0x130>)
 8008d6c:	4293      	cmp	r3, r2
 8008d6e:	d009      	beq.n	8008d84 <HAL_TIM_Base_Start_IT+0xbc>
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	4a21      	ldr	r2, [pc, #132]	@ (8008dfc <HAL_TIM_Base_Start_IT+0x134>)
 8008d76:	4293      	cmp	r3, r2
 8008d78:	d004      	beq.n	8008d84 <HAL_TIM_Base_Start_IT+0xbc>
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	4a20      	ldr	r2, [pc, #128]	@ (8008e00 <HAL_TIM_Base_Start_IT+0x138>)
 8008d80:	4293      	cmp	r3, r2
 8008d82:	d115      	bne.n	8008db0 <HAL_TIM_Base_Start_IT+0xe8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	689a      	ldr	r2, [r3, #8]
 8008d8a:	4b1e      	ldr	r3, [pc, #120]	@ (8008e04 <HAL_TIM_Base_Start_IT+0x13c>)
 8008d8c:	4013      	ands	r3, r2
 8008d8e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008d90:	68fb      	ldr	r3, [r7, #12]
 8008d92:	2b06      	cmp	r3, #6
 8008d94:	d015      	beq.n	8008dc2 <HAL_TIM_Base_Start_IT+0xfa>
 8008d96:	68fb      	ldr	r3, [r7, #12]
 8008d98:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008d9c:	d011      	beq.n	8008dc2 <HAL_TIM_Base_Start_IT+0xfa>
    {
      __HAL_TIM_ENABLE(htim);
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	681a      	ldr	r2, [r3, #0]
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	f042 0201 	orr.w	r2, r2, #1
 8008dac:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008dae:	e008      	b.n	8008dc2 <HAL_TIM_Base_Start_IT+0xfa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	681a      	ldr	r2, [r3, #0]
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	f042 0201 	orr.w	r2, r2, #1
 8008dbe:	601a      	str	r2, [r3, #0]
 8008dc0:	e000      	b.n	8008dc4 <HAL_TIM_Base_Start_IT+0xfc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008dc2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008dc4:	2300      	movs	r3, #0
}
 8008dc6:	4618      	mov	r0, r3
 8008dc8:	3714      	adds	r7, #20
 8008dca:	46bd      	mov	sp, r7
 8008dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dd0:	4770      	bx	lr
 8008dd2:	bf00      	nop
 8008dd4:	40012c00 	.word	0x40012c00
 8008dd8:	50012c00 	.word	0x50012c00
 8008ddc:	40000400 	.word	0x40000400
 8008de0:	50000400 	.word	0x50000400
 8008de4:	40000800 	.word	0x40000800
 8008de8:	50000800 	.word	0x50000800
 8008dec:	40000c00 	.word	0x40000c00
 8008df0:	50000c00 	.word	0x50000c00
 8008df4:	40013400 	.word	0x40013400
 8008df8:	50013400 	.word	0x50013400
 8008dfc:	40014000 	.word	0x40014000
 8008e00:	50014000 	.word	0x50014000
 8008e04:	00010007 	.word	0x00010007

08008e08 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008e08:	b580      	push	{r7, lr}
 8008e0a:	b084      	sub	sp, #16
 8008e0c:	af00      	add	r7, sp, #0
 8008e0e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	68db      	ldr	r3, [r3, #12]
 8008e16:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	691b      	ldr	r3, [r3, #16]
 8008e1e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8008e20:	68bb      	ldr	r3, [r7, #8]
 8008e22:	f003 0302 	and.w	r3, r3, #2
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	d020      	beq.n	8008e6c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8008e2a:	68fb      	ldr	r3, [r7, #12]
 8008e2c:	f003 0302 	and.w	r3, r3, #2
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	d01b      	beq.n	8008e6c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	f06f 0202 	mvn.w	r2, #2
 8008e3c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	2201      	movs	r2, #1
 8008e42:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	699b      	ldr	r3, [r3, #24]
 8008e4a:	f003 0303 	and.w	r3, r3, #3
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	d003      	beq.n	8008e5a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008e52:	6878      	ldr	r0, [r7, #4]
 8008e54:	f000 fa34 	bl	80092c0 <HAL_TIM_IC_CaptureCallback>
 8008e58:	e005      	b.n	8008e66 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008e5a:	6878      	ldr	r0, [r7, #4]
 8008e5c:	f000 fa26 	bl	80092ac <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008e60:	6878      	ldr	r0, [r7, #4]
 8008e62:	f000 fa37 	bl	80092d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	2200      	movs	r2, #0
 8008e6a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8008e6c:	68bb      	ldr	r3, [r7, #8]
 8008e6e:	f003 0304 	and.w	r3, r3, #4
 8008e72:	2b00      	cmp	r3, #0
 8008e74:	d020      	beq.n	8008eb8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8008e76:	68fb      	ldr	r3, [r7, #12]
 8008e78:	f003 0304 	and.w	r3, r3, #4
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	d01b      	beq.n	8008eb8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	f06f 0204 	mvn.w	r2, #4
 8008e88:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	2202      	movs	r2, #2
 8008e8e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	699b      	ldr	r3, [r3, #24]
 8008e96:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	d003      	beq.n	8008ea6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008e9e:	6878      	ldr	r0, [r7, #4]
 8008ea0:	f000 fa0e 	bl	80092c0 <HAL_TIM_IC_CaptureCallback>
 8008ea4:	e005      	b.n	8008eb2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008ea6:	6878      	ldr	r0, [r7, #4]
 8008ea8:	f000 fa00 	bl	80092ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008eac:	6878      	ldr	r0, [r7, #4]
 8008eae:	f000 fa11 	bl	80092d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	2200      	movs	r2, #0
 8008eb6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8008eb8:	68bb      	ldr	r3, [r7, #8]
 8008eba:	f003 0308 	and.w	r3, r3, #8
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	d020      	beq.n	8008f04 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8008ec2:	68fb      	ldr	r3, [r7, #12]
 8008ec4:	f003 0308 	and.w	r3, r3, #8
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	d01b      	beq.n	8008f04 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	f06f 0208 	mvn.w	r2, #8
 8008ed4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	2204      	movs	r2, #4
 8008eda:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	69db      	ldr	r3, [r3, #28]
 8008ee2:	f003 0303 	and.w	r3, r3, #3
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	d003      	beq.n	8008ef2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008eea:	6878      	ldr	r0, [r7, #4]
 8008eec:	f000 f9e8 	bl	80092c0 <HAL_TIM_IC_CaptureCallback>
 8008ef0:	e005      	b.n	8008efe <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008ef2:	6878      	ldr	r0, [r7, #4]
 8008ef4:	f000 f9da 	bl	80092ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008ef8:	6878      	ldr	r0, [r7, #4]
 8008efa:	f000 f9eb 	bl	80092d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	2200      	movs	r2, #0
 8008f02:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8008f04:	68bb      	ldr	r3, [r7, #8]
 8008f06:	f003 0310 	and.w	r3, r3, #16
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	d020      	beq.n	8008f50 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8008f0e:	68fb      	ldr	r3, [r7, #12]
 8008f10:	f003 0310 	and.w	r3, r3, #16
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	d01b      	beq.n	8008f50 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	f06f 0210 	mvn.w	r2, #16
 8008f20:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	2208      	movs	r2, #8
 8008f26:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	69db      	ldr	r3, [r3, #28]
 8008f2e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	d003      	beq.n	8008f3e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008f36:	6878      	ldr	r0, [r7, #4]
 8008f38:	f000 f9c2 	bl	80092c0 <HAL_TIM_IC_CaptureCallback>
 8008f3c:	e005      	b.n	8008f4a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008f3e:	6878      	ldr	r0, [r7, #4]
 8008f40:	f000 f9b4 	bl	80092ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008f44:	6878      	ldr	r0, [r7, #4]
 8008f46:	f000 f9c5 	bl	80092d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	2200      	movs	r2, #0
 8008f4e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8008f50:	68bb      	ldr	r3, [r7, #8]
 8008f52:	f003 0301 	and.w	r3, r3, #1
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	d00c      	beq.n	8008f74 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8008f5a:	68fb      	ldr	r3, [r7, #12]
 8008f5c:	f003 0301 	and.w	r3, r3, #1
 8008f60:	2b00      	cmp	r3, #0
 8008f62:	d007      	beq.n	8008f74 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	f06f 0201 	mvn.w	r2, #1
 8008f6c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008f6e:	6878      	ldr	r0, [r7, #4]
 8008f70:	f7f8 fa2e 	bl	80013d0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8008f74:	68bb      	ldr	r3, [r7, #8]
 8008f76:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	d104      	bne.n	8008f88 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8008f7e:	68bb      	ldr	r3, [r7, #8]
 8008f80:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	d00c      	beq.n	8008fa2 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008f88:	68fb      	ldr	r3, [r7, #12]
 8008f8a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	d007      	beq.n	8008fa2 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8008f9a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008f9c:	6878      	ldr	r0, [r7, #4]
 8008f9e:	f000 fc77 	bl	8009890 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8008fa2:	68bb      	ldr	r3, [r7, #8]
 8008fa4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	d00c      	beq.n	8008fc6 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008fac:	68fb      	ldr	r3, [r7, #12]
 8008fae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	d007      	beq.n	8008fc6 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8008fbe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008fc0:	6878      	ldr	r0, [r7, #4]
 8008fc2:	f000 fc6f 	bl	80098a4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8008fc6:	68bb      	ldr	r3, [r7, #8]
 8008fc8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	d00c      	beq.n	8008fea <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8008fd0:	68fb      	ldr	r3, [r7, #12]
 8008fd2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	d007      	beq.n	8008fea <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8008fe2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008fe4:	6878      	ldr	r0, [r7, #4]
 8008fe6:	f000 f97f 	bl	80092e8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8008fea:	68bb      	ldr	r3, [r7, #8]
 8008fec:	f003 0320 	and.w	r3, r3, #32
 8008ff0:	2b00      	cmp	r3, #0
 8008ff2:	d00c      	beq.n	800900e <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8008ff4:	68fb      	ldr	r3, [r7, #12]
 8008ff6:	f003 0320 	and.w	r3, r3, #32
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	d007      	beq.n	800900e <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	f06f 0220 	mvn.w	r2, #32
 8009006:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009008:	6878      	ldr	r0, [r7, #4]
 800900a:	f000 fc37 	bl	800987c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 800900e:	68bb      	ldr	r3, [r7, #8]
 8009010:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8009014:	2b00      	cmp	r3, #0
 8009016:	d00c      	beq.n	8009032 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8009018:	68fb      	ldr	r3, [r7, #12]
 800901a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800901e:	2b00      	cmp	r3, #0
 8009020:	d007      	beq.n	8009032 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 800902a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 800902c:	6878      	ldr	r0, [r7, #4]
 800902e:	f000 fc43 	bl	80098b8 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8009032:	68bb      	ldr	r3, [r7, #8]
 8009034:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8009038:	2b00      	cmp	r3, #0
 800903a:	d00c      	beq.n	8009056 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 800903c:	68fb      	ldr	r3, [r7, #12]
 800903e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8009042:	2b00      	cmp	r3, #0
 8009044:	d007      	beq.n	8009056 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 800904e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8009050:	6878      	ldr	r0, [r7, #4]
 8009052:	f000 fc3b 	bl	80098cc <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8009056:	68bb      	ldr	r3, [r7, #8]
 8009058:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800905c:	2b00      	cmp	r3, #0
 800905e:	d00c      	beq.n	800907a <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009066:	2b00      	cmp	r3, #0
 8009068:	d007      	beq.n	800907a <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8009072:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8009074:	6878      	ldr	r0, [r7, #4]
 8009076:	f000 fc33 	bl	80098e0 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 800907a:	68bb      	ldr	r3, [r7, #8]
 800907c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009080:	2b00      	cmp	r3, #0
 8009082:	d00c      	beq.n	800909e <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8009084:	68fb      	ldr	r3, [r7, #12]
 8009086:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800908a:	2b00      	cmp	r3, #0
 800908c:	d007      	beq.n	800909e <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8009096:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8009098:	6878      	ldr	r0, [r7, #4]
 800909a:	f000 fc2b 	bl	80098f4 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800909e:	bf00      	nop
 80090a0:	3710      	adds	r7, #16
 80090a2:	46bd      	mov	sp, r7
 80090a4:	bd80      	pop	{r7, pc}
	...

080090a8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80090a8:	b580      	push	{r7, lr}
 80090aa:	b084      	sub	sp, #16
 80090ac:	af00      	add	r7, sp, #0
 80090ae:	6078      	str	r0, [r7, #4]
 80090b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80090b2:	2300      	movs	r3, #0
 80090b4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80090bc:	2b01      	cmp	r3, #1
 80090be:	d101      	bne.n	80090c4 <HAL_TIM_ConfigClockSource+0x1c>
 80090c0:	2302      	movs	r3, #2
 80090c2:	e0e6      	b.n	8009292 <HAL_TIM_ConfigClockSource+0x1ea>
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	2201      	movs	r2, #1
 80090c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	2202      	movs	r2, #2
 80090d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	689b      	ldr	r3, [r3, #8]
 80090da:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80090dc:	68bb      	ldr	r3, [r7, #8]
 80090de:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 80090e2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80090e6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80090e8:	68bb      	ldr	r3, [r7, #8]
 80090ea:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80090ee:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	68ba      	ldr	r2, [r7, #8]
 80090f6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80090f8:	683b      	ldr	r3, [r7, #0]
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	4a67      	ldr	r2, [pc, #412]	@ (800929c <HAL_TIM_ConfigClockSource+0x1f4>)
 80090fe:	4293      	cmp	r3, r2
 8009100:	f000 80b1 	beq.w	8009266 <HAL_TIM_ConfigClockSource+0x1be>
 8009104:	4a65      	ldr	r2, [pc, #404]	@ (800929c <HAL_TIM_ConfigClockSource+0x1f4>)
 8009106:	4293      	cmp	r3, r2
 8009108:	f200 80b6 	bhi.w	8009278 <HAL_TIM_ConfigClockSource+0x1d0>
 800910c:	4a64      	ldr	r2, [pc, #400]	@ (80092a0 <HAL_TIM_ConfigClockSource+0x1f8>)
 800910e:	4293      	cmp	r3, r2
 8009110:	f000 80a9 	beq.w	8009266 <HAL_TIM_ConfigClockSource+0x1be>
 8009114:	4a62      	ldr	r2, [pc, #392]	@ (80092a0 <HAL_TIM_ConfigClockSource+0x1f8>)
 8009116:	4293      	cmp	r3, r2
 8009118:	f200 80ae 	bhi.w	8009278 <HAL_TIM_ConfigClockSource+0x1d0>
 800911c:	4a61      	ldr	r2, [pc, #388]	@ (80092a4 <HAL_TIM_ConfigClockSource+0x1fc>)
 800911e:	4293      	cmp	r3, r2
 8009120:	f000 80a1 	beq.w	8009266 <HAL_TIM_ConfigClockSource+0x1be>
 8009124:	4a5f      	ldr	r2, [pc, #380]	@ (80092a4 <HAL_TIM_ConfigClockSource+0x1fc>)
 8009126:	4293      	cmp	r3, r2
 8009128:	f200 80a6 	bhi.w	8009278 <HAL_TIM_ConfigClockSource+0x1d0>
 800912c:	4a5e      	ldr	r2, [pc, #376]	@ (80092a8 <HAL_TIM_ConfigClockSource+0x200>)
 800912e:	4293      	cmp	r3, r2
 8009130:	f000 8099 	beq.w	8009266 <HAL_TIM_ConfigClockSource+0x1be>
 8009134:	4a5c      	ldr	r2, [pc, #368]	@ (80092a8 <HAL_TIM_ConfigClockSource+0x200>)
 8009136:	4293      	cmp	r3, r2
 8009138:	f200 809e 	bhi.w	8009278 <HAL_TIM_ConfigClockSource+0x1d0>
 800913c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8009140:	f000 8091 	beq.w	8009266 <HAL_TIM_ConfigClockSource+0x1be>
 8009144:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8009148:	f200 8096 	bhi.w	8009278 <HAL_TIM_ConfigClockSource+0x1d0>
 800914c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009150:	f000 8089 	beq.w	8009266 <HAL_TIM_ConfigClockSource+0x1be>
 8009154:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009158:	f200 808e 	bhi.w	8009278 <HAL_TIM_ConfigClockSource+0x1d0>
 800915c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009160:	d03e      	beq.n	80091e0 <HAL_TIM_ConfigClockSource+0x138>
 8009162:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009166:	f200 8087 	bhi.w	8009278 <HAL_TIM_ConfigClockSource+0x1d0>
 800916a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800916e:	f000 8086 	beq.w	800927e <HAL_TIM_ConfigClockSource+0x1d6>
 8009172:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009176:	d87f      	bhi.n	8009278 <HAL_TIM_ConfigClockSource+0x1d0>
 8009178:	2b70      	cmp	r3, #112	@ 0x70
 800917a:	d01a      	beq.n	80091b2 <HAL_TIM_ConfigClockSource+0x10a>
 800917c:	2b70      	cmp	r3, #112	@ 0x70
 800917e:	d87b      	bhi.n	8009278 <HAL_TIM_ConfigClockSource+0x1d0>
 8009180:	2b60      	cmp	r3, #96	@ 0x60
 8009182:	d050      	beq.n	8009226 <HAL_TIM_ConfigClockSource+0x17e>
 8009184:	2b60      	cmp	r3, #96	@ 0x60
 8009186:	d877      	bhi.n	8009278 <HAL_TIM_ConfigClockSource+0x1d0>
 8009188:	2b50      	cmp	r3, #80	@ 0x50
 800918a:	d03c      	beq.n	8009206 <HAL_TIM_ConfigClockSource+0x15e>
 800918c:	2b50      	cmp	r3, #80	@ 0x50
 800918e:	d873      	bhi.n	8009278 <HAL_TIM_ConfigClockSource+0x1d0>
 8009190:	2b40      	cmp	r3, #64	@ 0x40
 8009192:	d058      	beq.n	8009246 <HAL_TIM_ConfigClockSource+0x19e>
 8009194:	2b40      	cmp	r3, #64	@ 0x40
 8009196:	d86f      	bhi.n	8009278 <HAL_TIM_ConfigClockSource+0x1d0>
 8009198:	2b30      	cmp	r3, #48	@ 0x30
 800919a:	d064      	beq.n	8009266 <HAL_TIM_ConfigClockSource+0x1be>
 800919c:	2b30      	cmp	r3, #48	@ 0x30
 800919e:	d86b      	bhi.n	8009278 <HAL_TIM_ConfigClockSource+0x1d0>
 80091a0:	2b20      	cmp	r3, #32
 80091a2:	d060      	beq.n	8009266 <HAL_TIM_ConfigClockSource+0x1be>
 80091a4:	2b20      	cmp	r3, #32
 80091a6:	d867      	bhi.n	8009278 <HAL_TIM_ConfigClockSource+0x1d0>
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	d05c      	beq.n	8009266 <HAL_TIM_ConfigClockSource+0x1be>
 80091ac:	2b10      	cmp	r3, #16
 80091ae:	d05a      	beq.n	8009266 <HAL_TIM_ConfigClockSource+0x1be>
 80091b0:	e062      	b.n	8009278 <HAL_TIM_ConfigClockSource+0x1d0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80091b6:	683b      	ldr	r3, [r7, #0]
 80091b8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80091ba:	683b      	ldr	r3, [r7, #0]
 80091bc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80091be:	683b      	ldr	r3, [r7, #0]
 80091c0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80091c2:	f000 fa78 	bl	80096b6 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	689b      	ldr	r3, [r3, #8]
 80091cc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80091ce:	68bb      	ldr	r3, [r7, #8]
 80091d0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80091d4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	68ba      	ldr	r2, [r7, #8]
 80091dc:	609a      	str	r2, [r3, #8]
      break;
 80091de:	e04f      	b.n	8009280 <HAL_TIM_ConfigClockSource+0x1d8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80091e4:	683b      	ldr	r3, [r7, #0]
 80091e6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80091e8:	683b      	ldr	r3, [r7, #0]
 80091ea:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80091ec:	683b      	ldr	r3, [r7, #0]
 80091ee:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80091f0:	f000 fa61 	bl	80096b6 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	689a      	ldr	r2, [r3, #8]
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8009202:	609a      	str	r2, [r3, #8]
      break;
 8009204:	e03c      	b.n	8009280 <HAL_TIM_ConfigClockSource+0x1d8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800920a:	683b      	ldr	r3, [r7, #0]
 800920c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800920e:	683b      	ldr	r3, [r7, #0]
 8009210:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009212:	461a      	mov	r2, r3
 8009214:	f000 f972 	bl	80094fc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	2150      	movs	r1, #80	@ 0x50
 800921e:	4618      	mov	r0, r3
 8009220:	f000 fa2c 	bl	800967c <TIM_ITRx_SetConfig>
      break;
 8009224:	e02c      	b.n	8009280 <HAL_TIM_ConfigClockSource+0x1d8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800922a:	683b      	ldr	r3, [r7, #0]
 800922c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800922e:	683b      	ldr	r3, [r7, #0]
 8009230:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009232:	461a      	mov	r2, r3
 8009234:	f000 f9d4 	bl	80095e0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	2160      	movs	r1, #96	@ 0x60
 800923e:	4618      	mov	r0, r3
 8009240:	f000 fa1c 	bl	800967c <TIM_ITRx_SetConfig>
      break;
 8009244:	e01c      	b.n	8009280 <HAL_TIM_ConfigClockSource+0x1d8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800924a:	683b      	ldr	r3, [r7, #0]
 800924c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800924e:	683b      	ldr	r3, [r7, #0]
 8009250:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009252:	461a      	mov	r2, r3
 8009254:	f000 f952 	bl	80094fc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	2140      	movs	r1, #64	@ 0x40
 800925e:	4618      	mov	r0, r3
 8009260:	f000 fa0c 	bl	800967c <TIM_ITRx_SetConfig>
      break;
 8009264:	e00c      	b.n	8009280 <HAL_TIM_ConfigClockSource+0x1d8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	681a      	ldr	r2, [r3, #0]
 800926a:	683b      	ldr	r3, [r7, #0]
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	4619      	mov	r1, r3
 8009270:	4610      	mov	r0, r2
 8009272:	f000 fa03 	bl	800967c <TIM_ITRx_SetConfig>
      break;
 8009276:	e003      	b.n	8009280 <HAL_TIM_ConfigClockSource+0x1d8>
    }

    default:
      status = HAL_ERROR;
 8009278:	2301      	movs	r3, #1
 800927a:	73fb      	strb	r3, [r7, #15]
      break;
 800927c:	e000      	b.n	8009280 <HAL_TIM_ConfigClockSource+0x1d8>
      break;
 800927e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	2201      	movs	r2, #1
 8009284:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	2200      	movs	r2, #0
 800928c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8009290:	7bfb      	ldrb	r3, [r7, #15]
}
 8009292:	4618      	mov	r0, r3
 8009294:	3710      	adds	r7, #16
 8009296:	46bd      	mov	sp, r7
 8009298:	bd80      	pop	{r7, pc}
 800929a:	bf00      	nop
 800929c:	00100070 	.word	0x00100070
 80092a0:	00100040 	.word	0x00100040
 80092a4:	00100030 	.word	0x00100030
 80092a8:	00100020 	.word	0x00100020

080092ac <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80092ac:	b480      	push	{r7}
 80092ae:	b083      	sub	sp, #12
 80092b0:	af00      	add	r7, sp, #0
 80092b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80092b4:	bf00      	nop
 80092b6:	370c      	adds	r7, #12
 80092b8:	46bd      	mov	sp, r7
 80092ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092be:	4770      	bx	lr

080092c0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80092c0:	b480      	push	{r7}
 80092c2:	b083      	sub	sp, #12
 80092c4:	af00      	add	r7, sp, #0
 80092c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80092c8:	bf00      	nop
 80092ca:	370c      	adds	r7, #12
 80092cc:	46bd      	mov	sp, r7
 80092ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092d2:	4770      	bx	lr

080092d4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80092d4:	b480      	push	{r7}
 80092d6:	b083      	sub	sp, #12
 80092d8:	af00      	add	r7, sp, #0
 80092da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80092dc:	bf00      	nop
 80092de:	370c      	adds	r7, #12
 80092e0:	46bd      	mov	sp, r7
 80092e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092e6:	4770      	bx	lr

080092e8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80092e8:	b480      	push	{r7}
 80092ea:	b083      	sub	sp, #12
 80092ec:	af00      	add	r7, sp, #0
 80092ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80092f0:	bf00      	nop
 80092f2:	370c      	adds	r7, #12
 80092f4:	46bd      	mov	sp, r7
 80092f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092fa:	4770      	bx	lr

080092fc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80092fc:	b480      	push	{r7}
 80092fe:	b085      	sub	sp, #20
 8009300:	af00      	add	r7, sp, #0
 8009302:	6078      	str	r0, [r7, #4]
 8009304:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	4a6b      	ldr	r2, [pc, #428]	@ (80094bc <TIM_Base_SetConfig+0x1c0>)
 8009310:	4293      	cmp	r3, r2
 8009312:	d02b      	beq.n	800936c <TIM_Base_SetConfig+0x70>
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	4a6a      	ldr	r2, [pc, #424]	@ (80094c0 <TIM_Base_SetConfig+0x1c4>)
 8009318:	4293      	cmp	r3, r2
 800931a:	d027      	beq.n	800936c <TIM_Base_SetConfig+0x70>
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009322:	d023      	beq.n	800936c <TIM_Base_SetConfig+0x70>
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800932a:	d01f      	beq.n	800936c <TIM_Base_SetConfig+0x70>
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	4a65      	ldr	r2, [pc, #404]	@ (80094c4 <TIM_Base_SetConfig+0x1c8>)
 8009330:	4293      	cmp	r3, r2
 8009332:	d01b      	beq.n	800936c <TIM_Base_SetConfig+0x70>
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	4a64      	ldr	r2, [pc, #400]	@ (80094c8 <TIM_Base_SetConfig+0x1cc>)
 8009338:	4293      	cmp	r3, r2
 800933a:	d017      	beq.n	800936c <TIM_Base_SetConfig+0x70>
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	4a63      	ldr	r2, [pc, #396]	@ (80094cc <TIM_Base_SetConfig+0x1d0>)
 8009340:	4293      	cmp	r3, r2
 8009342:	d013      	beq.n	800936c <TIM_Base_SetConfig+0x70>
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	4a62      	ldr	r2, [pc, #392]	@ (80094d0 <TIM_Base_SetConfig+0x1d4>)
 8009348:	4293      	cmp	r3, r2
 800934a:	d00f      	beq.n	800936c <TIM_Base_SetConfig+0x70>
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	4a61      	ldr	r2, [pc, #388]	@ (80094d4 <TIM_Base_SetConfig+0x1d8>)
 8009350:	4293      	cmp	r3, r2
 8009352:	d00b      	beq.n	800936c <TIM_Base_SetConfig+0x70>
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	4a60      	ldr	r2, [pc, #384]	@ (80094d8 <TIM_Base_SetConfig+0x1dc>)
 8009358:	4293      	cmp	r3, r2
 800935a:	d007      	beq.n	800936c <TIM_Base_SetConfig+0x70>
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	4a5f      	ldr	r2, [pc, #380]	@ (80094dc <TIM_Base_SetConfig+0x1e0>)
 8009360:	4293      	cmp	r3, r2
 8009362:	d003      	beq.n	800936c <TIM_Base_SetConfig+0x70>
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	4a5e      	ldr	r2, [pc, #376]	@ (80094e0 <TIM_Base_SetConfig+0x1e4>)
 8009368:	4293      	cmp	r3, r2
 800936a:	d108      	bne.n	800937e <TIM_Base_SetConfig+0x82>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800936c:	68fb      	ldr	r3, [r7, #12]
 800936e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009372:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009374:	683b      	ldr	r3, [r7, #0]
 8009376:	685b      	ldr	r3, [r3, #4]
 8009378:	68fa      	ldr	r2, [r7, #12]
 800937a:	4313      	orrs	r3, r2
 800937c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	4a4e      	ldr	r2, [pc, #312]	@ (80094bc <TIM_Base_SetConfig+0x1c0>)
 8009382:	4293      	cmp	r3, r2
 8009384:	d043      	beq.n	800940e <TIM_Base_SetConfig+0x112>
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	4a4d      	ldr	r2, [pc, #308]	@ (80094c0 <TIM_Base_SetConfig+0x1c4>)
 800938a:	4293      	cmp	r3, r2
 800938c:	d03f      	beq.n	800940e <TIM_Base_SetConfig+0x112>
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009394:	d03b      	beq.n	800940e <TIM_Base_SetConfig+0x112>
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800939c:	d037      	beq.n	800940e <TIM_Base_SetConfig+0x112>
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	4a48      	ldr	r2, [pc, #288]	@ (80094c4 <TIM_Base_SetConfig+0x1c8>)
 80093a2:	4293      	cmp	r3, r2
 80093a4:	d033      	beq.n	800940e <TIM_Base_SetConfig+0x112>
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	4a47      	ldr	r2, [pc, #284]	@ (80094c8 <TIM_Base_SetConfig+0x1cc>)
 80093aa:	4293      	cmp	r3, r2
 80093ac:	d02f      	beq.n	800940e <TIM_Base_SetConfig+0x112>
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	4a46      	ldr	r2, [pc, #280]	@ (80094cc <TIM_Base_SetConfig+0x1d0>)
 80093b2:	4293      	cmp	r3, r2
 80093b4:	d02b      	beq.n	800940e <TIM_Base_SetConfig+0x112>
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	4a45      	ldr	r2, [pc, #276]	@ (80094d0 <TIM_Base_SetConfig+0x1d4>)
 80093ba:	4293      	cmp	r3, r2
 80093bc:	d027      	beq.n	800940e <TIM_Base_SetConfig+0x112>
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	4a44      	ldr	r2, [pc, #272]	@ (80094d4 <TIM_Base_SetConfig+0x1d8>)
 80093c2:	4293      	cmp	r3, r2
 80093c4:	d023      	beq.n	800940e <TIM_Base_SetConfig+0x112>
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	4a43      	ldr	r2, [pc, #268]	@ (80094d8 <TIM_Base_SetConfig+0x1dc>)
 80093ca:	4293      	cmp	r3, r2
 80093cc:	d01f      	beq.n	800940e <TIM_Base_SetConfig+0x112>
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	4a42      	ldr	r2, [pc, #264]	@ (80094dc <TIM_Base_SetConfig+0x1e0>)
 80093d2:	4293      	cmp	r3, r2
 80093d4:	d01b      	beq.n	800940e <TIM_Base_SetConfig+0x112>
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	4a41      	ldr	r2, [pc, #260]	@ (80094e0 <TIM_Base_SetConfig+0x1e4>)
 80093da:	4293      	cmp	r3, r2
 80093dc:	d017      	beq.n	800940e <TIM_Base_SetConfig+0x112>
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	4a40      	ldr	r2, [pc, #256]	@ (80094e4 <TIM_Base_SetConfig+0x1e8>)
 80093e2:	4293      	cmp	r3, r2
 80093e4:	d013      	beq.n	800940e <TIM_Base_SetConfig+0x112>
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	4a3f      	ldr	r2, [pc, #252]	@ (80094e8 <TIM_Base_SetConfig+0x1ec>)
 80093ea:	4293      	cmp	r3, r2
 80093ec:	d00f      	beq.n	800940e <TIM_Base_SetConfig+0x112>
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	4a3e      	ldr	r2, [pc, #248]	@ (80094ec <TIM_Base_SetConfig+0x1f0>)
 80093f2:	4293      	cmp	r3, r2
 80093f4:	d00b      	beq.n	800940e <TIM_Base_SetConfig+0x112>
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	4a3d      	ldr	r2, [pc, #244]	@ (80094f0 <TIM_Base_SetConfig+0x1f4>)
 80093fa:	4293      	cmp	r3, r2
 80093fc:	d007      	beq.n	800940e <TIM_Base_SetConfig+0x112>
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	4a3c      	ldr	r2, [pc, #240]	@ (80094f4 <TIM_Base_SetConfig+0x1f8>)
 8009402:	4293      	cmp	r3, r2
 8009404:	d003      	beq.n	800940e <TIM_Base_SetConfig+0x112>
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	4a3b      	ldr	r2, [pc, #236]	@ (80094f8 <TIM_Base_SetConfig+0x1fc>)
 800940a:	4293      	cmp	r3, r2
 800940c:	d108      	bne.n	8009420 <TIM_Base_SetConfig+0x124>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800940e:	68fb      	ldr	r3, [r7, #12]
 8009410:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009414:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009416:	683b      	ldr	r3, [r7, #0]
 8009418:	68db      	ldr	r3, [r3, #12]
 800941a:	68fa      	ldr	r2, [r7, #12]
 800941c:	4313      	orrs	r3, r2
 800941e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009420:	68fb      	ldr	r3, [r7, #12]
 8009422:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8009426:	683b      	ldr	r3, [r7, #0]
 8009428:	695b      	ldr	r3, [r3, #20]
 800942a:	4313      	orrs	r3, r2
 800942c:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800942e:	683b      	ldr	r3, [r7, #0]
 8009430:	689a      	ldr	r2, [r3, #8]
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009436:	683b      	ldr	r3, [r7, #0]
 8009438:	681a      	ldr	r2, [r3, #0]
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	4a1e      	ldr	r2, [pc, #120]	@ (80094bc <TIM_Base_SetConfig+0x1c0>)
 8009442:	4293      	cmp	r3, r2
 8009444:	d023      	beq.n	800948e <TIM_Base_SetConfig+0x192>
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	4a1d      	ldr	r2, [pc, #116]	@ (80094c0 <TIM_Base_SetConfig+0x1c4>)
 800944a:	4293      	cmp	r3, r2
 800944c:	d01f      	beq.n	800948e <TIM_Base_SetConfig+0x192>
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	4a22      	ldr	r2, [pc, #136]	@ (80094dc <TIM_Base_SetConfig+0x1e0>)
 8009452:	4293      	cmp	r3, r2
 8009454:	d01b      	beq.n	800948e <TIM_Base_SetConfig+0x192>
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	4a21      	ldr	r2, [pc, #132]	@ (80094e0 <TIM_Base_SetConfig+0x1e4>)
 800945a:	4293      	cmp	r3, r2
 800945c:	d017      	beq.n	800948e <TIM_Base_SetConfig+0x192>
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	4a20      	ldr	r2, [pc, #128]	@ (80094e4 <TIM_Base_SetConfig+0x1e8>)
 8009462:	4293      	cmp	r3, r2
 8009464:	d013      	beq.n	800948e <TIM_Base_SetConfig+0x192>
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	4a1f      	ldr	r2, [pc, #124]	@ (80094e8 <TIM_Base_SetConfig+0x1ec>)
 800946a:	4293      	cmp	r3, r2
 800946c:	d00f      	beq.n	800948e <TIM_Base_SetConfig+0x192>
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	4a1e      	ldr	r2, [pc, #120]	@ (80094ec <TIM_Base_SetConfig+0x1f0>)
 8009472:	4293      	cmp	r3, r2
 8009474:	d00b      	beq.n	800948e <TIM_Base_SetConfig+0x192>
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	4a1d      	ldr	r2, [pc, #116]	@ (80094f0 <TIM_Base_SetConfig+0x1f4>)
 800947a:	4293      	cmp	r3, r2
 800947c:	d007      	beq.n	800948e <TIM_Base_SetConfig+0x192>
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	4a1c      	ldr	r2, [pc, #112]	@ (80094f4 <TIM_Base_SetConfig+0x1f8>)
 8009482:	4293      	cmp	r3, r2
 8009484:	d003      	beq.n	800948e <TIM_Base_SetConfig+0x192>
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	4a1b      	ldr	r2, [pc, #108]	@ (80094f8 <TIM_Base_SetConfig+0x1fc>)
 800948a:	4293      	cmp	r3, r2
 800948c:	d103      	bne.n	8009496 <TIM_Base_SetConfig+0x19a>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800948e:	683b      	ldr	r3, [r7, #0]
 8009490:	691a      	ldr	r2, [r3, #16]
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	f043 0204 	orr.w	r2, r3, #4
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	2201      	movs	r2, #1
 80094a6:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	68fa      	ldr	r2, [r7, #12]
 80094ac:	601a      	str	r2, [r3, #0]
}
 80094ae:	bf00      	nop
 80094b0:	3714      	adds	r7, #20
 80094b2:	46bd      	mov	sp, r7
 80094b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094b8:	4770      	bx	lr
 80094ba:	bf00      	nop
 80094bc:	40012c00 	.word	0x40012c00
 80094c0:	50012c00 	.word	0x50012c00
 80094c4:	40000400 	.word	0x40000400
 80094c8:	50000400 	.word	0x50000400
 80094cc:	40000800 	.word	0x40000800
 80094d0:	50000800 	.word	0x50000800
 80094d4:	40000c00 	.word	0x40000c00
 80094d8:	50000c00 	.word	0x50000c00
 80094dc:	40013400 	.word	0x40013400
 80094e0:	50013400 	.word	0x50013400
 80094e4:	40014000 	.word	0x40014000
 80094e8:	50014000 	.word	0x50014000
 80094ec:	40014400 	.word	0x40014400
 80094f0:	50014400 	.word	0x50014400
 80094f4:	40014800 	.word	0x40014800
 80094f8:	50014800 	.word	0x50014800

080094fc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80094fc:	b480      	push	{r7}
 80094fe:	b087      	sub	sp, #28
 8009500:	af00      	add	r7, sp, #0
 8009502:	60f8      	str	r0, [r7, #12]
 8009504:	60b9      	str	r1, [r7, #8]
 8009506:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009508:	68fb      	ldr	r3, [r7, #12]
 800950a:	6a1b      	ldr	r3, [r3, #32]
 800950c:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800950e:	68fb      	ldr	r3, [r7, #12]
 8009510:	6a1b      	ldr	r3, [r3, #32]
 8009512:	f023 0201 	bic.w	r2, r3, #1
 8009516:	68fb      	ldr	r3, [r7, #12]
 8009518:	621a      	str	r2, [r3, #32]
  /* Disable the Channel 1N: Reset the CC1NE Bit */
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800951a:	68fb      	ldr	r3, [r7, #12]
 800951c:	4a26      	ldr	r2, [pc, #152]	@ (80095b8 <TIM_TI1_ConfigInputStage+0xbc>)
 800951e:	4293      	cmp	r3, r2
 8009520:	d023      	beq.n	800956a <TIM_TI1_ConfigInputStage+0x6e>
 8009522:	68fb      	ldr	r3, [r7, #12]
 8009524:	4a25      	ldr	r2, [pc, #148]	@ (80095bc <TIM_TI1_ConfigInputStage+0xc0>)
 8009526:	4293      	cmp	r3, r2
 8009528:	d01f      	beq.n	800956a <TIM_TI1_ConfigInputStage+0x6e>
 800952a:	68fb      	ldr	r3, [r7, #12]
 800952c:	4a24      	ldr	r2, [pc, #144]	@ (80095c0 <TIM_TI1_ConfigInputStage+0xc4>)
 800952e:	4293      	cmp	r3, r2
 8009530:	d01b      	beq.n	800956a <TIM_TI1_ConfigInputStage+0x6e>
 8009532:	68fb      	ldr	r3, [r7, #12]
 8009534:	4a23      	ldr	r2, [pc, #140]	@ (80095c4 <TIM_TI1_ConfigInputStage+0xc8>)
 8009536:	4293      	cmp	r3, r2
 8009538:	d017      	beq.n	800956a <TIM_TI1_ConfigInputStage+0x6e>
 800953a:	68fb      	ldr	r3, [r7, #12]
 800953c:	4a22      	ldr	r2, [pc, #136]	@ (80095c8 <TIM_TI1_ConfigInputStage+0xcc>)
 800953e:	4293      	cmp	r3, r2
 8009540:	d013      	beq.n	800956a <TIM_TI1_ConfigInputStage+0x6e>
 8009542:	68fb      	ldr	r3, [r7, #12]
 8009544:	4a21      	ldr	r2, [pc, #132]	@ (80095cc <TIM_TI1_ConfigInputStage+0xd0>)
 8009546:	4293      	cmp	r3, r2
 8009548:	d00f      	beq.n	800956a <TIM_TI1_ConfigInputStage+0x6e>
 800954a:	68fb      	ldr	r3, [r7, #12]
 800954c:	4a20      	ldr	r2, [pc, #128]	@ (80095d0 <TIM_TI1_ConfigInputStage+0xd4>)
 800954e:	4293      	cmp	r3, r2
 8009550:	d00b      	beq.n	800956a <TIM_TI1_ConfigInputStage+0x6e>
 8009552:	68fb      	ldr	r3, [r7, #12]
 8009554:	4a1f      	ldr	r2, [pc, #124]	@ (80095d4 <TIM_TI1_ConfigInputStage+0xd8>)
 8009556:	4293      	cmp	r3, r2
 8009558:	d007      	beq.n	800956a <TIM_TI1_ConfigInputStage+0x6e>
 800955a:	68fb      	ldr	r3, [r7, #12]
 800955c:	4a1e      	ldr	r2, [pc, #120]	@ (80095d8 <TIM_TI1_ConfigInputStage+0xdc>)
 800955e:	4293      	cmp	r3, r2
 8009560:	d003      	beq.n	800956a <TIM_TI1_ConfigInputStage+0x6e>
 8009562:	68fb      	ldr	r3, [r7, #12]
 8009564:	4a1d      	ldr	r2, [pc, #116]	@ (80095dc <TIM_TI1_ConfigInputStage+0xe0>)
 8009566:	4293      	cmp	r3, r2
 8009568:	d105      	bne.n	8009576 <TIM_TI1_ConfigInputStage+0x7a>
  {
    TIMx->CCER &= ~TIM_CCER_CC1NE;
 800956a:	68fb      	ldr	r3, [r7, #12]
 800956c:	6a1b      	ldr	r3, [r3, #32]
 800956e:	f023 0204 	bic.w	r2, r3, #4
 8009572:	68fb      	ldr	r3, [r7, #12]
 8009574:	621a      	str	r2, [r3, #32]
  }

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = TIMx->CCMR1;
 8009576:	68fb      	ldr	r3, [r7, #12]
 8009578:	699b      	ldr	r3, [r3, #24]
 800957a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800957c:	693b      	ldr	r3, [r7, #16]
 800957e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8009582:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	011b      	lsls	r3, r3, #4
 8009588:	693a      	ldr	r2, [r7, #16]
 800958a:	4313      	orrs	r3, r2
 800958c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800958e:	697b      	ldr	r3, [r7, #20]
 8009590:	f023 030a 	bic.w	r3, r3, #10
 8009594:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009596:	697a      	ldr	r2, [r7, #20]
 8009598:	68bb      	ldr	r3, [r7, #8]
 800959a:	4313      	orrs	r3, r2
 800959c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800959e:	68fb      	ldr	r3, [r7, #12]
 80095a0:	693a      	ldr	r2, [r7, #16]
 80095a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80095a4:	68fb      	ldr	r3, [r7, #12]
 80095a6:	697a      	ldr	r2, [r7, #20]
 80095a8:	621a      	str	r2, [r3, #32]
}
 80095aa:	bf00      	nop
 80095ac:	371c      	adds	r7, #28
 80095ae:	46bd      	mov	sp, r7
 80095b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095b4:	4770      	bx	lr
 80095b6:	bf00      	nop
 80095b8:	40012c00 	.word	0x40012c00
 80095bc:	50012c00 	.word	0x50012c00
 80095c0:	40013400 	.word	0x40013400
 80095c4:	50013400 	.word	0x50013400
 80095c8:	40014000 	.word	0x40014000
 80095cc:	50014000 	.word	0x50014000
 80095d0:	40014400 	.word	0x40014400
 80095d4:	50014400 	.word	0x50014400
 80095d8:	40014800 	.word	0x40014800
 80095dc:	50014800 	.word	0x50014800

080095e0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80095e0:	b480      	push	{r7}
 80095e2:	b087      	sub	sp, #28
 80095e4:	af00      	add	r7, sp, #0
 80095e6:	60f8      	str	r0, [r7, #12]
 80095e8:	60b9      	str	r1, [r7, #8]
 80095ea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80095ec:	68fb      	ldr	r3, [r7, #12]
 80095ee:	6a1b      	ldr	r3, [r3, #32]
 80095f0:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80095f2:	68fb      	ldr	r3, [r7, #12]
 80095f4:	6a1b      	ldr	r3, [r3, #32]
 80095f6:	f023 0210 	bic.w	r2, r3, #16
 80095fa:	68fb      	ldr	r3, [r7, #12]
 80095fc:	621a      	str	r2, [r3, #32]
  /* Disable the Channel 2N: Reset the CC2NE Bit */
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80095fe:	68fb      	ldr	r3, [r7, #12]
 8009600:	4a1a      	ldr	r2, [pc, #104]	@ (800966c <TIM_TI2_ConfigInputStage+0x8c>)
 8009602:	4293      	cmp	r3, r2
 8009604:	d00b      	beq.n	800961e <TIM_TI2_ConfigInputStage+0x3e>
 8009606:	68fb      	ldr	r3, [r7, #12]
 8009608:	4a19      	ldr	r2, [pc, #100]	@ (8009670 <TIM_TI2_ConfigInputStage+0x90>)
 800960a:	4293      	cmp	r3, r2
 800960c:	d007      	beq.n	800961e <TIM_TI2_ConfigInputStage+0x3e>
 800960e:	68fb      	ldr	r3, [r7, #12]
 8009610:	4a18      	ldr	r2, [pc, #96]	@ (8009674 <TIM_TI2_ConfigInputStage+0x94>)
 8009612:	4293      	cmp	r3, r2
 8009614:	d003      	beq.n	800961e <TIM_TI2_ConfigInputStage+0x3e>
 8009616:	68fb      	ldr	r3, [r7, #12]
 8009618:	4a17      	ldr	r2, [pc, #92]	@ (8009678 <TIM_TI2_ConfigInputStage+0x98>)
 800961a:	4293      	cmp	r3, r2
 800961c:	d105      	bne.n	800962a <TIM_TI2_ConfigInputStage+0x4a>
  {
    TIMx->CCER &= ~TIM_CCER_CC2NE;
 800961e:	68fb      	ldr	r3, [r7, #12]
 8009620:	6a1b      	ldr	r3, [r3, #32]
 8009622:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 8009626:	68fb      	ldr	r3, [r7, #12]
 8009628:	621a      	str	r2, [r3, #32]
  }

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = TIMx->CCMR1;
 800962a:	68fb      	ldr	r3, [r7, #12]
 800962c:	699b      	ldr	r3, [r3, #24]
 800962e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009630:	693b      	ldr	r3, [r7, #16]
 8009632:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8009636:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	031b      	lsls	r3, r3, #12
 800963c:	693a      	ldr	r2, [r7, #16]
 800963e:	4313      	orrs	r3, r2
 8009640:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009642:	697b      	ldr	r3, [r7, #20]
 8009644:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8009648:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800964a:	68bb      	ldr	r3, [r7, #8]
 800964c:	011b      	lsls	r3, r3, #4
 800964e:	697a      	ldr	r2, [r7, #20]
 8009650:	4313      	orrs	r3, r2
 8009652:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009654:	68fb      	ldr	r3, [r7, #12]
 8009656:	693a      	ldr	r2, [r7, #16]
 8009658:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800965a:	68fb      	ldr	r3, [r7, #12]
 800965c:	697a      	ldr	r2, [r7, #20]
 800965e:	621a      	str	r2, [r3, #32]
}
 8009660:	bf00      	nop
 8009662:	371c      	adds	r7, #28
 8009664:	46bd      	mov	sp, r7
 8009666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800966a:	4770      	bx	lr
 800966c:	40012c00 	.word	0x40012c00
 8009670:	50012c00 	.word	0x50012c00
 8009674:	40013400 	.word	0x40013400
 8009678:	50013400 	.word	0x50013400

0800967c <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800967c:	b480      	push	{r7}
 800967e:	b085      	sub	sp, #20
 8009680:	af00      	add	r7, sp, #0
 8009682:	6078      	str	r0, [r7, #4]
 8009684:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	689b      	ldr	r3, [r3, #8]
 800968a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800968c:	68fb      	ldr	r3, [r7, #12]
 800968e:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8009692:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009696:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009698:	683a      	ldr	r2, [r7, #0]
 800969a:	68fb      	ldr	r3, [r7, #12]
 800969c:	4313      	orrs	r3, r2
 800969e:	f043 0307 	orr.w	r3, r3, #7
 80096a2:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	68fa      	ldr	r2, [r7, #12]
 80096a8:	609a      	str	r2, [r3, #8]
}
 80096aa:	bf00      	nop
 80096ac:	3714      	adds	r7, #20
 80096ae:	46bd      	mov	sp, r7
 80096b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096b4:	4770      	bx	lr

080096b6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80096b6:	b480      	push	{r7}
 80096b8:	b087      	sub	sp, #28
 80096ba:	af00      	add	r7, sp, #0
 80096bc:	60f8      	str	r0, [r7, #12]
 80096be:	60b9      	str	r1, [r7, #8]
 80096c0:	607a      	str	r2, [r7, #4]
 80096c2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80096c4:	68fb      	ldr	r3, [r7, #12]
 80096c6:	689b      	ldr	r3, [r3, #8]
 80096c8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80096ca:	697b      	ldr	r3, [r7, #20]
 80096cc:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80096d0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80096d2:	683b      	ldr	r3, [r7, #0]
 80096d4:	021a      	lsls	r2, r3, #8
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	431a      	orrs	r2, r3
 80096da:	68bb      	ldr	r3, [r7, #8]
 80096dc:	4313      	orrs	r3, r2
 80096de:	697a      	ldr	r2, [r7, #20]
 80096e0:	4313      	orrs	r3, r2
 80096e2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80096e4:	68fb      	ldr	r3, [r7, #12]
 80096e6:	697a      	ldr	r2, [r7, #20]
 80096e8:	609a      	str	r2, [r3, #8]
}
 80096ea:	bf00      	nop
 80096ec:	371c      	adds	r7, #28
 80096ee:	46bd      	mov	sp, r7
 80096f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096f4:	4770      	bx	lr
	...

080096f8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80096f8:	b480      	push	{r7}
 80096fa:	b085      	sub	sp, #20
 80096fc:	af00      	add	r7, sp, #0
 80096fe:	6078      	str	r0, [r7, #4]
 8009700:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009708:	2b01      	cmp	r3, #1
 800970a:	d101      	bne.n	8009710 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800970c:	2302      	movs	r3, #2
 800970e:	e097      	b.n	8009840 <HAL_TIMEx_MasterConfigSynchronization+0x148>
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	2201      	movs	r2, #1
 8009714:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	2202      	movs	r2, #2
 800971c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	685b      	ldr	r3, [r3, #4]
 8009726:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	689b      	ldr	r3, [r3, #8]
 800972e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	681b      	ldr	r3, [r3, #0]
 8009734:	4a45      	ldr	r2, [pc, #276]	@ (800984c <HAL_TIMEx_MasterConfigSynchronization+0x154>)
 8009736:	4293      	cmp	r3, r2
 8009738:	d00e      	beq.n	8009758 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	4a44      	ldr	r2, [pc, #272]	@ (8009850 <HAL_TIMEx_MasterConfigSynchronization+0x158>)
 8009740:	4293      	cmp	r3, r2
 8009742:	d009      	beq.n	8009758 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	4a42      	ldr	r2, [pc, #264]	@ (8009854 <HAL_TIMEx_MasterConfigSynchronization+0x15c>)
 800974a:	4293      	cmp	r3, r2
 800974c:	d004      	beq.n	8009758 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	681b      	ldr	r3, [r3, #0]
 8009752:	4a41      	ldr	r2, [pc, #260]	@ (8009858 <HAL_TIMEx_MasterConfigSynchronization+0x160>)
 8009754:	4293      	cmp	r3, r2
 8009756:	d108      	bne.n	800976a <HAL_TIMEx_MasterConfigSynchronization+0x72>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8009758:	68fb      	ldr	r3, [r7, #12]
 800975a:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800975e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009760:	683b      	ldr	r3, [r7, #0]
 8009762:	685b      	ldr	r3, [r3, #4]
 8009764:	68fa      	ldr	r2, [r7, #12]
 8009766:	4313      	orrs	r3, r2
 8009768:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800976a:	68fb      	ldr	r3, [r7, #12]
 800976c:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8009770:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009774:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009776:	683b      	ldr	r3, [r7, #0]
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	68fa      	ldr	r2, [r7, #12]
 800977c:	4313      	orrs	r3, r2
 800977e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	681b      	ldr	r3, [r3, #0]
 8009784:	68fa      	ldr	r2, [r7, #12]
 8009786:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	4a2f      	ldr	r2, [pc, #188]	@ (800984c <HAL_TIMEx_MasterConfigSynchronization+0x154>)
 800978e:	4293      	cmp	r3, r2
 8009790:	d040      	beq.n	8009814 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	681b      	ldr	r3, [r3, #0]
 8009796:	4a2e      	ldr	r2, [pc, #184]	@ (8009850 <HAL_TIMEx_MasterConfigSynchronization+0x158>)
 8009798:	4293      	cmp	r3, r2
 800979a:	d03b      	beq.n	8009814 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80097a4:	d036      	beq.n	8009814 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	681b      	ldr	r3, [r3, #0]
 80097aa:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80097ae:	d031      	beq.n	8009814 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	4a29      	ldr	r2, [pc, #164]	@ (800985c <HAL_TIMEx_MasterConfigSynchronization+0x164>)
 80097b6:	4293      	cmp	r3, r2
 80097b8:	d02c      	beq.n	8009814 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	681b      	ldr	r3, [r3, #0]
 80097be:	4a28      	ldr	r2, [pc, #160]	@ (8009860 <HAL_TIMEx_MasterConfigSynchronization+0x168>)
 80097c0:	4293      	cmp	r3, r2
 80097c2:	d027      	beq.n	8009814 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	4a26      	ldr	r2, [pc, #152]	@ (8009864 <HAL_TIMEx_MasterConfigSynchronization+0x16c>)
 80097ca:	4293      	cmp	r3, r2
 80097cc:	d022      	beq.n	8009814 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	681b      	ldr	r3, [r3, #0]
 80097d2:	4a25      	ldr	r2, [pc, #148]	@ (8009868 <HAL_TIMEx_MasterConfigSynchronization+0x170>)
 80097d4:	4293      	cmp	r3, r2
 80097d6:	d01d      	beq.n	8009814 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	4a23      	ldr	r2, [pc, #140]	@ (800986c <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 80097de:	4293      	cmp	r3, r2
 80097e0:	d018      	beq.n	8009814 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	4a22      	ldr	r2, [pc, #136]	@ (8009870 <HAL_TIMEx_MasterConfigSynchronization+0x178>)
 80097e8:	4293      	cmp	r3, r2
 80097ea:	d013      	beq.n	8009814 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	4a18      	ldr	r2, [pc, #96]	@ (8009854 <HAL_TIMEx_MasterConfigSynchronization+0x15c>)
 80097f2:	4293      	cmp	r3, r2
 80097f4:	d00e      	beq.n	8009814 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	681b      	ldr	r3, [r3, #0]
 80097fa:	4a17      	ldr	r2, [pc, #92]	@ (8009858 <HAL_TIMEx_MasterConfigSynchronization+0x160>)
 80097fc:	4293      	cmp	r3, r2
 80097fe:	d009      	beq.n	8009814 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	4a1b      	ldr	r2, [pc, #108]	@ (8009874 <HAL_TIMEx_MasterConfigSynchronization+0x17c>)
 8009806:	4293      	cmp	r3, r2
 8009808:	d004      	beq.n	8009814 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	681b      	ldr	r3, [r3, #0]
 800980e:	4a1a      	ldr	r2, [pc, #104]	@ (8009878 <HAL_TIMEx_MasterConfigSynchronization+0x180>)
 8009810:	4293      	cmp	r3, r2
 8009812:	d10c      	bne.n	800982e <HAL_TIMEx_MasterConfigSynchronization+0x136>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009814:	68bb      	ldr	r3, [r7, #8]
 8009816:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800981a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800981c:	683b      	ldr	r3, [r7, #0]
 800981e:	689b      	ldr	r3, [r3, #8]
 8009820:	68ba      	ldr	r2, [r7, #8]
 8009822:	4313      	orrs	r3, r2
 8009824:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	681b      	ldr	r3, [r3, #0]
 800982a:	68ba      	ldr	r2, [r7, #8]
 800982c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	2201      	movs	r2, #1
 8009832:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	2200      	movs	r2, #0
 800983a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800983e:	2300      	movs	r3, #0
}
 8009840:	4618      	mov	r0, r3
 8009842:	3714      	adds	r7, #20
 8009844:	46bd      	mov	sp, r7
 8009846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800984a:	4770      	bx	lr
 800984c:	40012c00 	.word	0x40012c00
 8009850:	50012c00 	.word	0x50012c00
 8009854:	40013400 	.word	0x40013400
 8009858:	50013400 	.word	0x50013400
 800985c:	40000400 	.word	0x40000400
 8009860:	50000400 	.word	0x50000400
 8009864:	40000800 	.word	0x40000800
 8009868:	50000800 	.word	0x50000800
 800986c:	40000c00 	.word	0x40000c00
 8009870:	50000c00 	.word	0x50000c00
 8009874:	40014000 	.word	0x40014000
 8009878:	50014000 	.word	0x50014000

0800987c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800987c:	b480      	push	{r7}
 800987e:	b083      	sub	sp, #12
 8009880:	af00      	add	r7, sp, #0
 8009882:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009884:	bf00      	nop
 8009886:	370c      	adds	r7, #12
 8009888:	46bd      	mov	sp, r7
 800988a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800988e:	4770      	bx	lr

08009890 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009890:	b480      	push	{r7}
 8009892:	b083      	sub	sp, #12
 8009894:	af00      	add	r7, sp, #0
 8009896:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009898:	bf00      	nop
 800989a:	370c      	adds	r7, #12
 800989c:	46bd      	mov	sp, r7
 800989e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098a2:	4770      	bx	lr

080098a4 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80098a4:	b480      	push	{r7}
 80098a6:	b083      	sub	sp, #12
 80098a8:	af00      	add	r7, sp, #0
 80098aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80098ac:	bf00      	nop
 80098ae:	370c      	adds	r7, #12
 80098b0:	46bd      	mov	sp, r7
 80098b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098b6:	4770      	bx	lr

080098b8 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 80098b8:	b480      	push	{r7}
 80098ba:	b083      	sub	sp, #12
 80098bc:	af00      	add	r7, sp, #0
 80098be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 80098c0:	bf00      	nop
 80098c2:	370c      	adds	r7, #12
 80098c4:	46bd      	mov	sp, r7
 80098c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ca:	4770      	bx	lr

080098cc <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 80098cc:	b480      	push	{r7}
 80098ce:	b083      	sub	sp, #12
 80098d0:	af00      	add	r7, sp, #0
 80098d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 80098d4:	bf00      	nop
 80098d6:	370c      	adds	r7, #12
 80098d8:	46bd      	mov	sp, r7
 80098da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098de:	4770      	bx	lr

080098e0 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 80098e0:	b480      	push	{r7}
 80098e2:	b083      	sub	sp, #12
 80098e4:	af00      	add	r7, sp, #0
 80098e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 80098e8:	bf00      	nop
 80098ea:	370c      	adds	r7, #12
 80098ec:	46bd      	mov	sp, r7
 80098ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098f2:	4770      	bx	lr

080098f4 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 80098f4:	b480      	push	{r7}
 80098f6:	b083      	sub	sp, #12
 80098f8:	af00      	add	r7, sp, #0
 80098fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 80098fc:	bf00      	nop
 80098fe:	370c      	adds	r7, #12
 8009900:	46bd      	mov	sp, r7
 8009902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009906:	4770      	bx	lr

08009908 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009908:	b580      	push	{r7, lr}
 800990a:	b082      	sub	sp, #8
 800990c:	af00      	add	r7, sp, #0
 800990e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	2b00      	cmp	r3, #0
 8009914:	d101      	bne.n	800991a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009916:	2301      	movs	r3, #1
 8009918:	e042      	b.n	80099a0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009920:	2b00      	cmp	r3, #0
 8009922:	d106      	bne.n	8009932 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	2200      	movs	r2, #0
 8009928:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800992c:	6878      	ldr	r0, [r7, #4]
 800992e:	f000 f83b 	bl	80099a8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	2224      	movs	r2, #36	@ 0x24
 8009936:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	681b      	ldr	r3, [r3, #0]
 800993e:	681a      	ldr	r2, [r3, #0]
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	f022 0201 	bic.w	r2, r2, #1
 8009948:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800994e:	2b00      	cmp	r3, #0
 8009950:	d002      	beq.n	8009958 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8009952:	6878      	ldr	r0, [r7, #4]
 8009954:	f000 fa72 	bl	8009e3c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009958:	6878      	ldr	r0, [r7, #4]
 800995a:	f000 f8cd 	bl	8009af8 <UART_SetConfig>
 800995e:	4603      	mov	r3, r0
 8009960:	2b01      	cmp	r3, #1
 8009962:	d101      	bne.n	8009968 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8009964:	2301      	movs	r3, #1
 8009966:	e01b      	b.n	80099a0 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	681b      	ldr	r3, [r3, #0]
 800996c:	685a      	ldr	r2, [r3, #4]
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	681b      	ldr	r3, [r3, #0]
 8009972:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8009976:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	681b      	ldr	r3, [r3, #0]
 800997c:	689a      	ldr	r2, [r3, #8]
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	681b      	ldr	r3, [r3, #0]
 8009982:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8009986:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	681b      	ldr	r3, [r3, #0]
 800998c:	681a      	ldr	r2, [r3, #0]
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	681b      	ldr	r3, [r3, #0]
 8009992:	f042 0201 	orr.w	r2, r2, #1
 8009996:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009998:	6878      	ldr	r0, [r7, #4]
 800999a:	f000 faf1 	bl	8009f80 <UART_CheckIdleState>
 800999e:	4603      	mov	r3, r0
}
 80099a0:	4618      	mov	r0, r3
 80099a2:	3708      	adds	r7, #8
 80099a4:	46bd      	mov	sp, r7
 80099a6:	bd80      	pop	{r7, pc}

080099a8 <HAL_UART_MspInit>:
  * @brief Initialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 80099a8:	b480      	push	{r7}
 80099aa:	b083      	sub	sp, #12
 80099ac:	af00      	add	r7, sp, #0
 80099ae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 80099b0:	bf00      	nop
 80099b2:	370c      	adds	r7, #12
 80099b4:	46bd      	mov	sp, r7
 80099b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ba:	4770      	bx	lr

080099bc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80099bc:	b580      	push	{r7, lr}
 80099be:	b08a      	sub	sp, #40	@ 0x28
 80099c0:	af02      	add	r7, sp, #8
 80099c2:	60f8      	str	r0, [r7, #12]
 80099c4:	60b9      	str	r1, [r7, #8]
 80099c6:	603b      	str	r3, [r7, #0]
 80099c8:	4613      	mov	r3, r2
 80099ca:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80099cc:	68fb      	ldr	r3, [r7, #12]
 80099ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80099d2:	2b20      	cmp	r3, #32
 80099d4:	f040 808b 	bne.w	8009aee <HAL_UART_Transmit+0x132>
  {
    if ((pData == NULL) || (Size == 0U))
 80099d8:	68bb      	ldr	r3, [r7, #8]
 80099da:	2b00      	cmp	r3, #0
 80099dc:	d002      	beq.n	80099e4 <HAL_UART_Transmit+0x28>
 80099de:	88fb      	ldrh	r3, [r7, #6]
 80099e0:	2b00      	cmp	r3, #0
 80099e2:	d101      	bne.n	80099e8 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80099e4:	2301      	movs	r3, #1
 80099e6:	e083      	b.n	8009af0 <HAL_UART_Transmit+0x134>
    }

#if defined(USART_DMAREQUESTS_SW_WA)
    /* Disable the UART DMA Tx request if enabled */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 80099e8:	68fb      	ldr	r3, [r7, #12]
 80099ea:	681b      	ldr	r3, [r3, #0]
 80099ec:	689b      	ldr	r3, [r3, #8]
 80099ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80099f2:	2b80      	cmp	r3, #128	@ 0x80
 80099f4:	d107      	bne.n	8009a06 <HAL_UART_Transmit+0x4a>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80099f6:	68fb      	ldr	r3, [r7, #12]
 80099f8:	681b      	ldr	r3, [r3, #0]
 80099fa:	689a      	ldr	r2, [r3, #8]
 80099fc:	68fb      	ldr	r3, [r7, #12]
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8009a04:	609a      	str	r2, [r3, #8]
    }

#endif /* USART_DMAREQUESTS_SW_WA */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009a06:	68fb      	ldr	r3, [r7, #12]
 8009a08:	2200      	movs	r2, #0
 8009a0a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009a0e:	68fb      	ldr	r3, [r7, #12]
 8009a10:	2221      	movs	r2, #33	@ 0x21
 8009a12:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009a16:	f7f8 fd85 	bl	8002524 <HAL_GetTick>
 8009a1a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8009a1c:	68fb      	ldr	r3, [r7, #12]
 8009a1e:	88fa      	ldrh	r2, [r7, #6]
 8009a20:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8009a24:	68fb      	ldr	r3, [r7, #12]
 8009a26:	88fa      	ldrh	r2, [r7, #6]
 8009a28:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009a2c:	68fb      	ldr	r3, [r7, #12]
 8009a2e:	689b      	ldr	r3, [r3, #8]
 8009a30:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009a34:	d108      	bne.n	8009a48 <HAL_UART_Transmit+0x8c>
 8009a36:	68fb      	ldr	r3, [r7, #12]
 8009a38:	691b      	ldr	r3, [r3, #16]
 8009a3a:	2b00      	cmp	r3, #0
 8009a3c:	d104      	bne.n	8009a48 <HAL_UART_Transmit+0x8c>
    {
      pdata8bits  = NULL;
 8009a3e:	2300      	movs	r3, #0
 8009a40:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8009a42:	68bb      	ldr	r3, [r7, #8]
 8009a44:	61bb      	str	r3, [r7, #24]
 8009a46:	e003      	b.n	8009a50 <HAL_UART_Transmit+0x94>
    }
    else
    {
      pdata8bits  = pData;
 8009a48:	68bb      	ldr	r3, [r7, #8]
 8009a4a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009a4c:	2300      	movs	r3, #0
 8009a4e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8009a50:	e030      	b.n	8009ab4 <HAL_UART_Transmit+0xf8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009a52:	683b      	ldr	r3, [r7, #0]
 8009a54:	9300      	str	r3, [sp, #0]
 8009a56:	697b      	ldr	r3, [r7, #20]
 8009a58:	2200      	movs	r2, #0
 8009a5a:	2180      	movs	r1, #128	@ 0x80
 8009a5c:	68f8      	ldr	r0, [r7, #12]
 8009a5e:	f000 fb39 	bl	800a0d4 <UART_WaitOnFlagUntilTimeout>
 8009a62:	4603      	mov	r3, r0
 8009a64:	2b00      	cmp	r3, #0
 8009a66:	d005      	beq.n	8009a74 <HAL_UART_Transmit+0xb8>
      {

        huart->gState = HAL_UART_STATE_READY;
 8009a68:	68fb      	ldr	r3, [r7, #12]
 8009a6a:	2220      	movs	r2, #32
 8009a6c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8009a70:	2303      	movs	r3, #3
 8009a72:	e03d      	b.n	8009af0 <HAL_UART_Transmit+0x134>
      }
      if (pdata8bits == NULL)
 8009a74:	69fb      	ldr	r3, [r7, #28]
 8009a76:	2b00      	cmp	r3, #0
 8009a78:	d10b      	bne.n	8009a92 <HAL_UART_Transmit+0xd6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009a7a:	69bb      	ldr	r3, [r7, #24]
 8009a7c:	881b      	ldrh	r3, [r3, #0]
 8009a7e:	461a      	mov	r2, r3
 8009a80:	68fb      	ldr	r3, [r7, #12]
 8009a82:	681b      	ldr	r3, [r3, #0]
 8009a84:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009a88:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8009a8a:	69bb      	ldr	r3, [r7, #24]
 8009a8c:	3302      	adds	r3, #2
 8009a8e:	61bb      	str	r3, [r7, #24]
 8009a90:	e007      	b.n	8009aa2 <HAL_UART_Transmit+0xe6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8009a92:	69fb      	ldr	r3, [r7, #28]
 8009a94:	781a      	ldrb	r2, [r3, #0]
 8009a96:	68fb      	ldr	r3, [r7, #12]
 8009a98:	681b      	ldr	r3, [r3, #0]
 8009a9a:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8009a9c:	69fb      	ldr	r3, [r7, #28]
 8009a9e:	3301      	adds	r3, #1
 8009aa0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009aa2:	68fb      	ldr	r3, [r7, #12]
 8009aa4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8009aa8:	b29b      	uxth	r3, r3
 8009aaa:	3b01      	subs	r3, #1
 8009aac:	b29a      	uxth	r2, r3
 8009aae:	68fb      	ldr	r3, [r7, #12]
 8009ab0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8009ab4:	68fb      	ldr	r3, [r7, #12]
 8009ab6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8009aba:	b29b      	uxth	r3, r3
 8009abc:	2b00      	cmp	r3, #0
 8009abe:	d1c8      	bne.n	8009a52 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009ac0:	683b      	ldr	r3, [r7, #0]
 8009ac2:	9300      	str	r3, [sp, #0]
 8009ac4:	697b      	ldr	r3, [r7, #20]
 8009ac6:	2200      	movs	r2, #0
 8009ac8:	2140      	movs	r1, #64	@ 0x40
 8009aca:	68f8      	ldr	r0, [r7, #12]
 8009acc:	f000 fb02 	bl	800a0d4 <UART_WaitOnFlagUntilTimeout>
 8009ad0:	4603      	mov	r3, r0
 8009ad2:	2b00      	cmp	r3, #0
 8009ad4:	d005      	beq.n	8009ae2 <HAL_UART_Transmit+0x126>
    {
      huart->gState = HAL_UART_STATE_READY;
 8009ad6:	68fb      	ldr	r3, [r7, #12]
 8009ad8:	2220      	movs	r2, #32
 8009ada:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8009ade:	2303      	movs	r3, #3
 8009ae0:	e006      	b.n	8009af0 <HAL_UART_Transmit+0x134>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009ae2:	68fb      	ldr	r3, [r7, #12]
 8009ae4:	2220      	movs	r2, #32
 8009ae6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8009aea:	2300      	movs	r3, #0
 8009aec:	e000      	b.n	8009af0 <HAL_UART_Transmit+0x134>
  }
  else
  {
    return HAL_BUSY;
 8009aee:	2302      	movs	r3, #2
  }
}
 8009af0:	4618      	mov	r0, r3
 8009af2:	3720      	adds	r7, #32
 8009af4:	46bd      	mov	sp, r7
 8009af6:	bd80      	pop	{r7, pc}

08009af8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009af8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009afc:	b094      	sub	sp, #80	@ 0x50
 8009afe:	af00      	add	r7, sp, #0
 8009b00:	62f8      	str	r0, [r7, #44]	@ 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009b02:	2300      	movs	r3, #0
 8009b04:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 8009b08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009b0a:	681a      	ldr	r2, [r3, #0]
 8009b0c:	4b7e      	ldr	r3, [pc, #504]	@ (8009d08 <UART_SetConfig+0x210>)
 8009b0e:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009b10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009b12:	689a      	ldr	r2, [r3, #8]
 8009b14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009b16:	691b      	ldr	r3, [r3, #16]
 8009b18:	431a      	orrs	r2, r3
 8009b1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009b1c:	695b      	ldr	r3, [r3, #20]
 8009b1e:	431a      	orrs	r2, r3
 8009b20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009b22:	69db      	ldr	r3, [r3, #28]
 8009b24:	4313      	orrs	r3, r2
 8009b26:	64fb      	str	r3, [r7, #76]	@ 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009b28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009b2a:	681b      	ldr	r3, [r3, #0]
 8009b2c:	681b      	ldr	r3, [r3, #0]
 8009b2e:	4977      	ldr	r1, [pc, #476]	@ (8009d0c <UART_SetConfig+0x214>)
 8009b30:	4019      	ands	r1, r3
 8009b32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009b34:	681a      	ldr	r2, [r3, #0]
 8009b36:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009b38:	430b      	orrs	r3, r1
 8009b3a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009b3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009b3e:	681b      	ldr	r3, [r3, #0]
 8009b40:	685b      	ldr	r3, [r3, #4]
 8009b42:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8009b46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009b48:	68d9      	ldr	r1, [r3, #12]
 8009b4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009b4c:	681a      	ldr	r2, [r3, #0]
 8009b4e:	ea40 0301 	orr.w	r3, r0, r1
 8009b52:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009b54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009b56:	699b      	ldr	r3, [r3, #24]
 8009b58:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009b5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009b5c:	681a      	ldr	r2, [r3, #0]
 8009b5e:	4b6a      	ldr	r3, [pc, #424]	@ (8009d08 <UART_SetConfig+0x210>)
 8009b60:	429a      	cmp	r2, r3
 8009b62:	d009      	beq.n	8009b78 <UART_SetConfig+0x80>
 8009b64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009b66:	681a      	ldr	r2, [r3, #0]
 8009b68:	4b69      	ldr	r3, [pc, #420]	@ (8009d10 <UART_SetConfig+0x218>)
 8009b6a:	429a      	cmp	r2, r3
 8009b6c:	d004      	beq.n	8009b78 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009b6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009b70:	6a1a      	ldr	r2, [r3, #32]
 8009b72:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009b74:	4313      	orrs	r3, r2
 8009b76:	64fb      	str	r3, [r7, #76]	@ 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009b78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009b7a:	681b      	ldr	r3, [r3, #0]
 8009b7c:	689b      	ldr	r3, [r3, #8]
 8009b7e:	f023 416e 	bic.w	r1, r3, #3992977408	@ 0xee000000
 8009b82:	f421 6130 	bic.w	r1, r1, #2816	@ 0xb00
 8009b86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009b88:	681a      	ldr	r2, [r3, #0]
 8009b8a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009b8c:	430b      	orrs	r3, r1
 8009b8e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009b90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009b92:	681b      	ldr	r3, [r3, #0]
 8009b94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009b96:	f023 000f 	bic.w	r0, r3, #15
 8009b9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009b9c:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8009b9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009ba0:	681a      	ldr	r2, [r3, #0]
 8009ba2:	ea40 0301 	orr.w	r3, r0, r1
 8009ba6:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009ba8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009baa:	681a      	ldr	r2, [r3, #0]
 8009bac:	4b59      	ldr	r3, [pc, #356]	@ (8009d14 <UART_SetConfig+0x21c>)
 8009bae:	429a      	cmp	r2, r3
 8009bb0:	d102      	bne.n	8009bb8 <UART_SetConfig+0xc0>
 8009bb2:	2301      	movs	r3, #1
 8009bb4:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009bb6:	e029      	b.n	8009c0c <UART_SetConfig+0x114>
 8009bb8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009bba:	681a      	ldr	r2, [r3, #0]
 8009bbc:	4b56      	ldr	r3, [pc, #344]	@ (8009d18 <UART_SetConfig+0x220>)
 8009bbe:	429a      	cmp	r2, r3
 8009bc0:	d102      	bne.n	8009bc8 <UART_SetConfig+0xd0>
 8009bc2:	2302      	movs	r3, #2
 8009bc4:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009bc6:	e021      	b.n	8009c0c <UART_SetConfig+0x114>
 8009bc8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009bca:	681a      	ldr	r2, [r3, #0]
 8009bcc:	4b53      	ldr	r3, [pc, #332]	@ (8009d1c <UART_SetConfig+0x224>)
 8009bce:	429a      	cmp	r2, r3
 8009bd0:	d102      	bne.n	8009bd8 <UART_SetConfig+0xe0>
 8009bd2:	2304      	movs	r3, #4
 8009bd4:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009bd6:	e019      	b.n	8009c0c <UART_SetConfig+0x114>
 8009bd8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009bda:	681a      	ldr	r2, [r3, #0]
 8009bdc:	4b50      	ldr	r3, [pc, #320]	@ (8009d20 <UART_SetConfig+0x228>)
 8009bde:	429a      	cmp	r2, r3
 8009be0:	d102      	bne.n	8009be8 <UART_SetConfig+0xf0>
 8009be2:	2308      	movs	r3, #8
 8009be4:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009be6:	e011      	b.n	8009c0c <UART_SetConfig+0x114>
 8009be8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009bea:	681a      	ldr	r2, [r3, #0]
 8009bec:	4b4d      	ldr	r3, [pc, #308]	@ (8009d24 <UART_SetConfig+0x22c>)
 8009bee:	429a      	cmp	r2, r3
 8009bf0:	d102      	bne.n	8009bf8 <UART_SetConfig+0x100>
 8009bf2:	2310      	movs	r3, #16
 8009bf4:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009bf6:	e009      	b.n	8009c0c <UART_SetConfig+0x114>
 8009bf8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009bfa:	681a      	ldr	r2, [r3, #0]
 8009bfc:	4b42      	ldr	r3, [pc, #264]	@ (8009d08 <UART_SetConfig+0x210>)
 8009bfe:	429a      	cmp	r2, r3
 8009c00:	d102      	bne.n	8009c08 <UART_SetConfig+0x110>
 8009c02:	2320      	movs	r3, #32
 8009c04:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009c06:	e001      	b.n	8009c0c <UART_SetConfig+0x114>
 8009c08:	2300      	movs	r3, #0
 8009c0a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009c0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009c0e:	681a      	ldr	r2, [r3, #0]
 8009c10:	4b3d      	ldr	r3, [pc, #244]	@ (8009d08 <UART_SetConfig+0x210>)
 8009c12:	429a      	cmp	r2, r3
 8009c14:	d005      	beq.n	8009c22 <UART_SetConfig+0x12a>
 8009c16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009c18:	681a      	ldr	r2, [r3, #0]
 8009c1a:	4b3d      	ldr	r3, [pc, #244]	@ (8009d10 <UART_SetConfig+0x218>)
 8009c1c:	429a      	cmp	r2, r3
 8009c1e:	f040 8085 	bne.w	8009d2c <UART_SetConfig+0x234>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8009c22:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009c24:	2200      	movs	r2, #0
 8009c26:	623b      	str	r3, [r7, #32]
 8009c28:	627a      	str	r2, [r7, #36]	@ 0x24
 8009c2a:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8009c2e:	f7fc fe01 	bl	8006834 <HAL_RCCEx_GetPeriphCLKFreq>
 8009c32:	6438      	str	r0, [r7, #64]	@ 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 8009c34:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009c36:	2b00      	cmp	r3, #0
 8009c38:	f000 80e8 	beq.w	8009e0c <UART_SetConfig+0x314>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8009c3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009c3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009c40:	4a39      	ldr	r2, [pc, #228]	@ (8009d28 <UART_SetConfig+0x230>)
 8009c42:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009c46:	461a      	mov	r2, r3
 8009c48:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009c4a:	fbb3 f3f2 	udiv	r3, r3, r2
 8009c4e:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009c50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009c52:	685a      	ldr	r2, [r3, #4]
 8009c54:	4613      	mov	r3, r2
 8009c56:	005b      	lsls	r3, r3, #1
 8009c58:	4413      	add	r3, r2
 8009c5a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009c5c:	429a      	cmp	r2, r3
 8009c5e:	d305      	bcc.n	8009c6c <UART_SetConfig+0x174>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8009c60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009c62:	685b      	ldr	r3, [r3, #4]
 8009c64:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009c66:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009c68:	429a      	cmp	r2, r3
 8009c6a:	d903      	bls.n	8009c74 <UART_SetConfig+0x17c>
      {
        ret = HAL_ERROR;
 8009c6c:	2301      	movs	r3, #1
 8009c6e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8009c72:	e048      	b.n	8009d06 <UART_SetConfig+0x20e>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009c74:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009c76:	2200      	movs	r2, #0
 8009c78:	61bb      	str	r3, [r7, #24]
 8009c7a:	61fa      	str	r2, [r7, #28]
 8009c7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009c7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009c80:	4a29      	ldr	r2, [pc, #164]	@ (8009d28 <UART_SetConfig+0x230>)
 8009c82:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009c86:	b29b      	uxth	r3, r3
 8009c88:	2200      	movs	r2, #0
 8009c8a:	613b      	str	r3, [r7, #16]
 8009c8c:	617a      	str	r2, [r7, #20]
 8009c8e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8009c92:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8009c96:	f7f6 ff8b 	bl	8000bb0 <__aeabi_uldivmod>
 8009c9a:	4602      	mov	r2, r0
 8009c9c:	460b      	mov	r3, r1
 8009c9e:	4610      	mov	r0, r2
 8009ca0:	4619      	mov	r1, r3
 8009ca2:	f04f 0200 	mov.w	r2, #0
 8009ca6:	f04f 0300 	mov.w	r3, #0
 8009caa:	020b      	lsls	r3, r1, #8
 8009cac:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8009cb0:	0202      	lsls	r2, r0, #8
 8009cb2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009cb4:	6849      	ldr	r1, [r1, #4]
 8009cb6:	0849      	lsrs	r1, r1, #1
 8009cb8:	2000      	movs	r0, #0
 8009cba:	460c      	mov	r4, r1
 8009cbc:	4605      	mov	r5, r0
 8009cbe:	eb12 0804 	adds.w	r8, r2, r4
 8009cc2:	eb43 0905 	adc.w	r9, r3, r5
 8009cc6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009cc8:	685b      	ldr	r3, [r3, #4]
 8009cca:	2200      	movs	r2, #0
 8009ccc:	60bb      	str	r3, [r7, #8]
 8009cce:	60fa      	str	r2, [r7, #12]
 8009cd0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009cd4:	4640      	mov	r0, r8
 8009cd6:	4649      	mov	r1, r9
 8009cd8:	f7f6 ff6a 	bl	8000bb0 <__aeabi_uldivmod>
 8009cdc:	4602      	mov	r2, r0
 8009cde:	460b      	mov	r3, r1
 8009ce0:	4613      	mov	r3, r2
 8009ce2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009ce4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009ce6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009cea:	d308      	bcc.n	8009cfe <UART_SetConfig+0x206>
 8009cec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009cee:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009cf2:	d204      	bcs.n	8009cfe <UART_SetConfig+0x206>
        {
          huart->Instance->BRR = usartdiv;
 8009cf4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009cf6:	681b      	ldr	r3, [r3, #0]
 8009cf8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8009cfa:	60da      	str	r2, [r3, #12]
 8009cfc:	e003      	b.n	8009d06 <UART_SetConfig+0x20e>
        }
        else
        {
          ret = HAL_ERROR;
 8009cfe:	2301      	movs	r3, #1
 8009d00:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    if (pclk != 0U)
 8009d04:	e082      	b.n	8009e0c <UART_SetConfig+0x314>
 8009d06:	e081      	b.n	8009e0c <UART_SetConfig+0x314>
 8009d08:	46002400 	.word	0x46002400
 8009d0c:	cfff69f3 	.word	0xcfff69f3
 8009d10:	56002400 	.word	0x56002400
 8009d14:	40013800 	.word	0x40013800
 8009d18:	40004400 	.word	0x40004400
 8009d1c:	40004800 	.word	0x40004800
 8009d20:	40004c00 	.word	0x40004c00
 8009d24:	40005000 	.word	0x40005000
 8009d28:	0800d140 	.word	0x0800d140
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009d2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009d2e:	69db      	ldr	r3, [r3, #28]
 8009d30:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009d34:	d13c      	bne.n	8009db0 <UART_SetConfig+0x2b8>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8009d36:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009d38:	2200      	movs	r2, #0
 8009d3a:	603b      	str	r3, [r7, #0]
 8009d3c:	607a      	str	r2, [r7, #4]
 8009d3e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009d42:	f7fc fd77 	bl	8006834 <HAL_RCCEx_GetPeriphCLKFreq>
 8009d46:	6438      	str	r0, [r7, #64]	@ 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009d48:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009d4a:	2b00      	cmp	r3, #0
 8009d4c:	d05e      	beq.n	8009e0c <UART_SetConfig+0x314>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009d4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009d50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009d52:	4a39      	ldr	r2, [pc, #228]	@ (8009e38 <UART_SetConfig+0x340>)
 8009d54:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009d58:	461a      	mov	r2, r3
 8009d5a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009d5c:	fbb3 f3f2 	udiv	r3, r3, r2
 8009d60:	005a      	lsls	r2, r3, #1
 8009d62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009d64:	685b      	ldr	r3, [r3, #4]
 8009d66:	085b      	lsrs	r3, r3, #1
 8009d68:	441a      	add	r2, r3
 8009d6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009d6c:	685b      	ldr	r3, [r3, #4]
 8009d6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009d72:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009d74:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009d76:	2b0f      	cmp	r3, #15
 8009d78:	d916      	bls.n	8009da8 <UART_SetConfig+0x2b0>
 8009d7a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009d7c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009d80:	d212      	bcs.n	8009da8 <UART_SetConfig+0x2b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009d82:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009d84:	b29b      	uxth	r3, r3
 8009d86:	f023 030f 	bic.w	r3, r3, #15
 8009d8a:	877b      	strh	r3, [r7, #58]	@ 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009d8c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009d8e:	085b      	lsrs	r3, r3, #1
 8009d90:	b29b      	uxth	r3, r3
 8009d92:	f003 0307 	and.w	r3, r3, #7
 8009d96:	b29a      	uxth	r2, r3
 8009d98:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8009d9a:	4313      	orrs	r3, r2
 8009d9c:	877b      	strh	r3, [r7, #58]	@ 0x3a
        huart->Instance->BRR = brrtemp;
 8009d9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009da0:	681b      	ldr	r3, [r3, #0]
 8009da2:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8009da4:	60da      	str	r2, [r3, #12]
 8009da6:	e031      	b.n	8009e0c <UART_SetConfig+0x314>
      }
      else
      {
        ret = HAL_ERROR;
 8009da8:	2301      	movs	r3, #1
 8009daa:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8009dae:	e02d      	b.n	8009e0c <UART_SetConfig+0x314>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8009db0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009db2:	2200      	movs	r2, #0
 8009db4:	469a      	mov	sl, r3
 8009db6:	4693      	mov	fp, r2
 8009db8:	4650      	mov	r0, sl
 8009dba:	4659      	mov	r1, fp
 8009dbc:	f7fc fd3a 	bl	8006834 <HAL_RCCEx_GetPeriphCLKFreq>
 8009dc0:	6438      	str	r0, [r7, #64]	@ 0x40

    if (pclk != 0U)
 8009dc2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009dc4:	2b00      	cmp	r3, #0
 8009dc6:	d021      	beq.n	8009e0c <UART_SetConfig+0x314>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009dc8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009dca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009dcc:	4a1a      	ldr	r2, [pc, #104]	@ (8009e38 <UART_SetConfig+0x340>)
 8009dce:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009dd2:	461a      	mov	r2, r3
 8009dd4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009dd6:	fbb3 f2f2 	udiv	r2, r3, r2
 8009dda:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009ddc:	685b      	ldr	r3, [r3, #4]
 8009dde:	085b      	lsrs	r3, r3, #1
 8009de0:	441a      	add	r2, r3
 8009de2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009de4:	685b      	ldr	r3, [r3, #4]
 8009de6:	fbb2 f3f3 	udiv	r3, r2, r3
 8009dea:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009dec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009dee:	2b0f      	cmp	r3, #15
 8009df0:	d909      	bls.n	8009e06 <UART_SetConfig+0x30e>
 8009df2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009df4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009df8:	d205      	bcs.n	8009e06 <UART_SetConfig+0x30e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009dfa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009dfc:	b29a      	uxth	r2, r3
 8009dfe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009e00:	681b      	ldr	r3, [r3, #0]
 8009e02:	60da      	str	r2, [r3, #12]
 8009e04:	e002      	b.n	8009e0c <UART_SetConfig+0x314>
      }
      else
      {
        ret = HAL_ERROR;
 8009e06:	2301      	movs	r3, #1
 8009e08:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8009e0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009e0e:	2201      	movs	r2, #1
 8009e10:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8009e14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009e16:	2201      	movs	r2, #1
 8009e18:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009e1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009e1e:	2200      	movs	r2, #0
 8009e20:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8009e22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009e24:	2200      	movs	r2, #0
 8009e26:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8009e28:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 8009e2c:	4618      	mov	r0, r3
 8009e2e:	3750      	adds	r7, #80	@ 0x50
 8009e30:	46bd      	mov	sp, r7
 8009e32:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009e36:	bf00      	nop
 8009e38:	0800d140 	.word	0x0800d140

08009e3c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009e3c:	b480      	push	{r7}
 8009e3e:	b083      	sub	sp, #12
 8009e40:	af00      	add	r7, sp, #0
 8009e42:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009e48:	f003 0308 	and.w	r3, r3, #8
 8009e4c:	2b00      	cmp	r3, #0
 8009e4e:	d00a      	beq.n	8009e66 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	681b      	ldr	r3, [r3, #0]
 8009e54:	685b      	ldr	r3, [r3, #4]
 8009e56:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	430a      	orrs	r2, r1
 8009e64:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009e6a:	f003 0301 	and.w	r3, r3, #1
 8009e6e:	2b00      	cmp	r3, #0
 8009e70:	d00a      	beq.n	8009e88 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	681b      	ldr	r3, [r3, #0]
 8009e76:	685b      	ldr	r3, [r3, #4]
 8009e78:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	681b      	ldr	r3, [r3, #0]
 8009e84:	430a      	orrs	r2, r1
 8009e86:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009e8c:	f003 0302 	and.w	r3, r3, #2
 8009e90:	2b00      	cmp	r3, #0
 8009e92:	d00a      	beq.n	8009eaa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	681b      	ldr	r3, [r3, #0]
 8009e98:	685b      	ldr	r3, [r3, #4]
 8009e9a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	681b      	ldr	r3, [r3, #0]
 8009ea6:	430a      	orrs	r2, r1
 8009ea8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009eae:	f003 0304 	and.w	r3, r3, #4
 8009eb2:	2b00      	cmp	r3, #0
 8009eb4:	d00a      	beq.n	8009ecc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	681b      	ldr	r3, [r3, #0]
 8009eba:	685b      	ldr	r3, [r3, #4]
 8009ebc:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	681b      	ldr	r3, [r3, #0]
 8009ec8:	430a      	orrs	r2, r1
 8009eca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009ed0:	f003 0310 	and.w	r3, r3, #16
 8009ed4:	2b00      	cmp	r3, #0
 8009ed6:	d00a      	beq.n	8009eee <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	681b      	ldr	r3, [r3, #0]
 8009edc:	689b      	ldr	r3, [r3, #8]
 8009ede:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	681b      	ldr	r3, [r3, #0]
 8009eea:	430a      	orrs	r2, r1
 8009eec:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009ef2:	f003 0320 	and.w	r3, r3, #32
 8009ef6:	2b00      	cmp	r3, #0
 8009ef8:	d00a      	beq.n	8009f10 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	681b      	ldr	r3, [r3, #0]
 8009efe:	689b      	ldr	r3, [r3, #8]
 8009f00:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	681b      	ldr	r3, [r3, #0]
 8009f0c:	430a      	orrs	r2, r1
 8009f0e:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009f14:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009f18:	2b00      	cmp	r3, #0
 8009f1a:	d01a      	beq.n	8009f52 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	681b      	ldr	r3, [r3, #0]
 8009f20:	685b      	ldr	r3, [r3, #4]
 8009f22:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	681b      	ldr	r3, [r3, #0]
 8009f2e:	430a      	orrs	r2, r1
 8009f30:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009f36:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009f3a:	d10a      	bne.n	8009f52 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	681b      	ldr	r3, [r3, #0]
 8009f40:	685b      	ldr	r3, [r3, #4]
 8009f42:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	681b      	ldr	r3, [r3, #0]
 8009f4e:	430a      	orrs	r2, r1
 8009f50:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009f56:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009f5a:	2b00      	cmp	r3, #0
 8009f5c:	d00a      	beq.n	8009f74 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	681b      	ldr	r3, [r3, #0]
 8009f62:	685b      	ldr	r3, [r3, #4]
 8009f64:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	681b      	ldr	r3, [r3, #0]
 8009f70:	430a      	orrs	r2, r1
 8009f72:	605a      	str	r2, [r3, #4]
  }
}
 8009f74:	bf00      	nop
 8009f76:	370c      	adds	r7, #12
 8009f78:	46bd      	mov	sp, r7
 8009f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f7e:	4770      	bx	lr

08009f80 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009f80:	b580      	push	{r7, lr}
 8009f82:	b098      	sub	sp, #96	@ 0x60
 8009f84:	af02      	add	r7, sp, #8
 8009f86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	2200      	movs	r2, #0
 8009f8c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009f90:	f7f8 fac8 	bl	8002524 <HAL_GetTick>
 8009f94:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	681b      	ldr	r3, [r3, #0]
 8009f9a:	681b      	ldr	r3, [r3, #0]
 8009f9c:	f003 0308 	and.w	r3, r3, #8
 8009fa0:	2b08      	cmp	r3, #8
 8009fa2:	d12f      	bne.n	800a004 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009fa4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009fa8:	9300      	str	r3, [sp, #0]
 8009faa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009fac:	2200      	movs	r2, #0
 8009fae:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8009fb2:	6878      	ldr	r0, [r7, #4]
 8009fb4:	f000 f88e 	bl	800a0d4 <UART_WaitOnFlagUntilTimeout>
 8009fb8:	4603      	mov	r3, r0
 8009fba:	2b00      	cmp	r3, #0
 8009fbc:	d022      	beq.n	800a004 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	681b      	ldr	r3, [r3, #0]
 8009fc2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009fc4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009fc6:	e853 3f00 	ldrex	r3, [r3]
 8009fca:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009fcc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009fce:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009fd2:	653b      	str	r3, [r7, #80]	@ 0x50
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	681b      	ldr	r3, [r3, #0]
 8009fd8:	461a      	mov	r2, r3
 8009fda:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009fdc:	647b      	str	r3, [r7, #68]	@ 0x44
 8009fde:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009fe0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009fe2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009fe4:	e841 2300 	strex	r3, r2, [r1]
 8009fe8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009fea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009fec:	2b00      	cmp	r3, #0
 8009fee:	d1e6      	bne.n	8009fbe <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	2220      	movs	r2, #32
 8009ff4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	2200      	movs	r2, #0
 8009ffc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a000:	2303      	movs	r3, #3
 800a002:	e063      	b.n	800a0cc <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	681b      	ldr	r3, [r3, #0]
 800a008:	681b      	ldr	r3, [r3, #0]
 800a00a:	f003 0304 	and.w	r3, r3, #4
 800a00e:	2b04      	cmp	r3, #4
 800a010:	d149      	bne.n	800a0a6 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a012:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a016:	9300      	str	r3, [sp, #0]
 800a018:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a01a:	2200      	movs	r2, #0
 800a01c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800a020:	6878      	ldr	r0, [r7, #4]
 800a022:	f000 f857 	bl	800a0d4 <UART_WaitOnFlagUntilTimeout>
 800a026:	4603      	mov	r3, r0
 800a028:	2b00      	cmp	r3, #0
 800a02a:	d03c      	beq.n	800a0a6 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	681b      	ldr	r3, [r3, #0]
 800a030:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a032:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a034:	e853 3f00 	ldrex	r3, [r3]
 800a038:	623b      	str	r3, [r7, #32]
   return(result);
 800a03a:	6a3b      	ldr	r3, [r7, #32]
 800a03c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a040:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	681b      	ldr	r3, [r3, #0]
 800a046:	461a      	mov	r2, r3
 800a048:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a04a:	633b      	str	r3, [r7, #48]	@ 0x30
 800a04c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a04e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a050:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a052:	e841 2300 	strex	r3, r2, [r1]
 800a056:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a058:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a05a:	2b00      	cmp	r3, #0
 800a05c:	d1e6      	bne.n	800a02c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	681b      	ldr	r3, [r3, #0]
 800a062:	3308      	adds	r3, #8
 800a064:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a066:	693b      	ldr	r3, [r7, #16]
 800a068:	e853 3f00 	ldrex	r3, [r3]
 800a06c:	60fb      	str	r3, [r7, #12]
   return(result);
 800a06e:	68fb      	ldr	r3, [r7, #12]
 800a070:	f023 0301 	bic.w	r3, r3, #1
 800a074:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	681b      	ldr	r3, [r3, #0]
 800a07a:	3308      	adds	r3, #8
 800a07c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a07e:	61fa      	str	r2, [r7, #28]
 800a080:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a082:	69b9      	ldr	r1, [r7, #24]
 800a084:	69fa      	ldr	r2, [r7, #28]
 800a086:	e841 2300 	strex	r3, r2, [r1]
 800a08a:	617b      	str	r3, [r7, #20]
   return(result);
 800a08c:	697b      	ldr	r3, [r7, #20]
 800a08e:	2b00      	cmp	r3, #0
 800a090:	d1e5      	bne.n	800a05e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	2220      	movs	r2, #32
 800a096:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	2200      	movs	r2, #0
 800a09e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a0a2:	2303      	movs	r3, #3
 800a0a4:	e012      	b.n	800a0cc <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	2220      	movs	r2, #32
 800a0aa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	2220      	movs	r2, #32
 800a0b2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	2200      	movs	r2, #0
 800a0ba:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	2200      	movs	r2, #0
 800a0c0:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	2200      	movs	r2, #0
 800a0c6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a0ca:	2300      	movs	r3, #0
}
 800a0cc:	4618      	mov	r0, r3
 800a0ce:	3758      	adds	r7, #88	@ 0x58
 800a0d0:	46bd      	mov	sp, r7
 800a0d2:	bd80      	pop	{r7, pc}

0800a0d4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a0d4:	b580      	push	{r7, lr}
 800a0d6:	b084      	sub	sp, #16
 800a0d8:	af00      	add	r7, sp, #0
 800a0da:	60f8      	str	r0, [r7, #12]
 800a0dc:	60b9      	str	r1, [r7, #8]
 800a0de:	603b      	str	r3, [r7, #0]
 800a0e0:	4613      	mov	r3, r2
 800a0e2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a0e4:	e04f      	b.n	800a186 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a0e6:	69bb      	ldr	r3, [r7, #24]
 800a0e8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a0ec:	d04b      	beq.n	800a186 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a0ee:	f7f8 fa19 	bl	8002524 <HAL_GetTick>
 800a0f2:	4602      	mov	r2, r0
 800a0f4:	683b      	ldr	r3, [r7, #0]
 800a0f6:	1ad3      	subs	r3, r2, r3
 800a0f8:	69ba      	ldr	r2, [r7, #24]
 800a0fa:	429a      	cmp	r2, r3
 800a0fc:	d302      	bcc.n	800a104 <UART_WaitOnFlagUntilTimeout+0x30>
 800a0fe:	69bb      	ldr	r3, [r7, #24]
 800a100:	2b00      	cmp	r3, #0
 800a102:	d101      	bne.n	800a108 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800a104:	2303      	movs	r3, #3
 800a106:	e04e      	b.n	800a1a6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800a108:	68fb      	ldr	r3, [r7, #12]
 800a10a:	681b      	ldr	r3, [r3, #0]
 800a10c:	681b      	ldr	r3, [r3, #0]
 800a10e:	f003 0304 	and.w	r3, r3, #4
 800a112:	2b00      	cmp	r3, #0
 800a114:	d037      	beq.n	800a186 <UART_WaitOnFlagUntilTimeout+0xb2>
 800a116:	68bb      	ldr	r3, [r7, #8]
 800a118:	2b80      	cmp	r3, #128	@ 0x80
 800a11a:	d034      	beq.n	800a186 <UART_WaitOnFlagUntilTimeout+0xb2>
 800a11c:	68bb      	ldr	r3, [r7, #8]
 800a11e:	2b40      	cmp	r3, #64	@ 0x40
 800a120:	d031      	beq.n	800a186 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800a122:	68fb      	ldr	r3, [r7, #12]
 800a124:	681b      	ldr	r3, [r3, #0]
 800a126:	69db      	ldr	r3, [r3, #28]
 800a128:	f003 0308 	and.w	r3, r3, #8
 800a12c:	2b08      	cmp	r3, #8
 800a12e:	d110      	bne.n	800a152 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a130:	68fb      	ldr	r3, [r7, #12]
 800a132:	681b      	ldr	r3, [r3, #0]
 800a134:	2208      	movs	r2, #8
 800a136:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a138:	68f8      	ldr	r0, [r7, #12]
 800a13a:	f000 f838 	bl	800a1ae <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800a13e:	68fb      	ldr	r3, [r7, #12]
 800a140:	2208      	movs	r2, #8
 800a142:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a146:	68fb      	ldr	r3, [r7, #12]
 800a148:	2200      	movs	r2, #0
 800a14a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800a14e:	2301      	movs	r3, #1
 800a150:	e029      	b.n	800a1a6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a152:	68fb      	ldr	r3, [r7, #12]
 800a154:	681b      	ldr	r3, [r3, #0]
 800a156:	69db      	ldr	r3, [r3, #28]
 800a158:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a15c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a160:	d111      	bne.n	800a186 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a162:	68fb      	ldr	r3, [r7, #12]
 800a164:	681b      	ldr	r3, [r3, #0]
 800a166:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800a16a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a16c:	68f8      	ldr	r0, [r7, #12]
 800a16e:	f000 f81e 	bl	800a1ae <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a172:	68fb      	ldr	r3, [r7, #12]
 800a174:	2220      	movs	r2, #32
 800a176:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a17a:	68fb      	ldr	r3, [r7, #12]
 800a17c:	2200      	movs	r2, #0
 800a17e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800a182:	2303      	movs	r3, #3
 800a184:	e00f      	b.n	800a1a6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a186:	68fb      	ldr	r3, [r7, #12]
 800a188:	681b      	ldr	r3, [r3, #0]
 800a18a:	69da      	ldr	r2, [r3, #28]
 800a18c:	68bb      	ldr	r3, [r7, #8]
 800a18e:	4013      	ands	r3, r2
 800a190:	68ba      	ldr	r2, [r7, #8]
 800a192:	429a      	cmp	r2, r3
 800a194:	bf0c      	ite	eq
 800a196:	2301      	moveq	r3, #1
 800a198:	2300      	movne	r3, #0
 800a19a:	b2db      	uxtb	r3, r3
 800a19c:	461a      	mov	r2, r3
 800a19e:	79fb      	ldrb	r3, [r7, #7]
 800a1a0:	429a      	cmp	r2, r3
 800a1a2:	d0a0      	beq.n	800a0e6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a1a4:	2300      	movs	r3, #0
}
 800a1a6:	4618      	mov	r0, r3
 800a1a8:	3710      	adds	r7, #16
 800a1aa:	46bd      	mov	sp, r7
 800a1ac:	bd80      	pop	{r7, pc}

0800a1ae <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a1ae:	b480      	push	{r7}
 800a1b0:	b095      	sub	sp, #84	@ 0x54
 800a1b2:	af00      	add	r7, sp, #0
 800a1b4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	681b      	ldr	r3, [r3, #0]
 800a1ba:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a1be:	e853 3f00 	ldrex	r3, [r3]
 800a1c2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800a1c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a1c6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a1ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	681b      	ldr	r3, [r3, #0]
 800a1d0:	461a      	mov	r2, r3
 800a1d2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a1d4:	643b      	str	r3, [r7, #64]	@ 0x40
 800a1d6:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1d8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a1da:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a1dc:	e841 2300 	strex	r3, r2, [r1]
 800a1e0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a1e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a1e4:	2b00      	cmp	r3, #0
 800a1e6:	d1e6      	bne.n	800a1b6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	681b      	ldr	r3, [r3, #0]
 800a1ec:	3308      	adds	r3, #8
 800a1ee:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1f0:	6a3b      	ldr	r3, [r7, #32]
 800a1f2:	e853 3f00 	ldrex	r3, [r3]
 800a1f6:	61fb      	str	r3, [r7, #28]
   return(result);
 800a1f8:	69fb      	ldr	r3, [r7, #28]
 800a1fa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a1fe:	f023 0301 	bic.w	r3, r3, #1
 800a202:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	681b      	ldr	r3, [r3, #0]
 800a208:	3308      	adds	r3, #8
 800a20a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a20c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800a20e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a210:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a212:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a214:	e841 2300 	strex	r3, r2, [r1]
 800a218:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a21a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a21c:	2b00      	cmp	r3, #0
 800a21e:	d1e3      	bne.n	800a1e8 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a224:	2b01      	cmp	r3, #1
 800a226:	d118      	bne.n	800a25a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	681b      	ldr	r3, [r3, #0]
 800a22c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a22e:	68fb      	ldr	r3, [r7, #12]
 800a230:	e853 3f00 	ldrex	r3, [r3]
 800a234:	60bb      	str	r3, [r7, #8]
   return(result);
 800a236:	68bb      	ldr	r3, [r7, #8]
 800a238:	f023 0310 	bic.w	r3, r3, #16
 800a23c:	647b      	str	r3, [r7, #68]	@ 0x44
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	681b      	ldr	r3, [r3, #0]
 800a242:	461a      	mov	r2, r3
 800a244:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a246:	61bb      	str	r3, [r7, #24]
 800a248:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a24a:	6979      	ldr	r1, [r7, #20]
 800a24c:	69ba      	ldr	r2, [r7, #24]
 800a24e:	e841 2300 	strex	r3, r2, [r1]
 800a252:	613b      	str	r3, [r7, #16]
   return(result);
 800a254:	693b      	ldr	r3, [r7, #16]
 800a256:	2b00      	cmp	r3, #0
 800a258:	d1e6      	bne.n	800a228 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	2220      	movs	r2, #32
 800a25e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	2200      	movs	r2, #0
 800a266:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	2200      	movs	r2, #0
 800a26c:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800a26e:	bf00      	nop
 800a270:	3754      	adds	r7, #84	@ 0x54
 800a272:	46bd      	mov	sp, r7
 800a274:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a278:	4770      	bx	lr

0800a27a <__cvt>:
 800a27a:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a27e:	ec57 6b10 	vmov	r6, r7, d0
 800a282:	2f00      	cmp	r7, #0
 800a284:	460c      	mov	r4, r1
 800a286:	4619      	mov	r1, r3
 800a288:	463b      	mov	r3, r7
 800a28a:	bfb4      	ite	lt
 800a28c:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800a290:	2300      	movge	r3, #0
 800a292:	4691      	mov	r9, r2
 800a294:	bfbf      	itttt	lt
 800a296:	4632      	movlt	r2, r6
 800a298:	461f      	movlt	r7, r3
 800a29a:	232d      	movlt	r3, #45	@ 0x2d
 800a29c:	4616      	movlt	r6, r2
 800a29e:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800a2a2:	700b      	strb	r3, [r1, #0]
 800a2a4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a2a6:	f023 0820 	bic.w	r8, r3, #32
 800a2aa:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800a2ae:	d005      	beq.n	800a2bc <__cvt+0x42>
 800a2b0:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800a2b4:	d100      	bne.n	800a2b8 <__cvt+0x3e>
 800a2b6:	3401      	adds	r4, #1
 800a2b8:	2102      	movs	r1, #2
 800a2ba:	e000      	b.n	800a2be <__cvt+0x44>
 800a2bc:	2103      	movs	r1, #3
 800a2be:	ab03      	add	r3, sp, #12
 800a2c0:	4622      	mov	r2, r4
 800a2c2:	9301      	str	r3, [sp, #4]
 800a2c4:	ab02      	add	r3, sp, #8
 800a2c6:	ec47 6b10 	vmov	d0, r6, r7
 800a2ca:	9300      	str	r3, [sp, #0]
 800a2cc:	4653      	mov	r3, sl
 800a2ce:	f000 fdc7 	bl	800ae60 <_dtoa_r>
 800a2d2:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800a2d6:	4605      	mov	r5, r0
 800a2d8:	d119      	bne.n	800a30e <__cvt+0x94>
 800a2da:	f019 0f01 	tst.w	r9, #1
 800a2de:	d00e      	beq.n	800a2fe <__cvt+0x84>
 800a2e0:	eb00 0904 	add.w	r9, r0, r4
 800a2e4:	2200      	movs	r2, #0
 800a2e6:	2300      	movs	r3, #0
 800a2e8:	4630      	mov	r0, r6
 800a2ea:	4639      	mov	r1, r7
 800a2ec:	f7f6 fbf0 	bl	8000ad0 <__aeabi_dcmpeq>
 800a2f0:	b108      	cbz	r0, 800a2f6 <__cvt+0x7c>
 800a2f2:	f8cd 900c 	str.w	r9, [sp, #12]
 800a2f6:	2230      	movs	r2, #48	@ 0x30
 800a2f8:	9b03      	ldr	r3, [sp, #12]
 800a2fa:	454b      	cmp	r3, r9
 800a2fc:	d31e      	bcc.n	800a33c <__cvt+0xc2>
 800a2fe:	9b03      	ldr	r3, [sp, #12]
 800a300:	4628      	mov	r0, r5
 800a302:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a304:	1b5b      	subs	r3, r3, r5
 800a306:	6013      	str	r3, [r2, #0]
 800a308:	b004      	add	sp, #16
 800a30a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a30e:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800a312:	eb00 0904 	add.w	r9, r0, r4
 800a316:	d1e5      	bne.n	800a2e4 <__cvt+0x6a>
 800a318:	7803      	ldrb	r3, [r0, #0]
 800a31a:	2b30      	cmp	r3, #48	@ 0x30
 800a31c:	d10a      	bne.n	800a334 <__cvt+0xba>
 800a31e:	2200      	movs	r2, #0
 800a320:	2300      	movs	r3, #0
 800a322:	4630      	mov	r0, r6
 800a324:	4639      	mov	r1, r7
 800a326:	f7f6 fbd3 	bl	8000ad0 <__aeabi_dcmpeq>
 800a32a:	b918      	cbnz	r0, 800a334 <__cvt+0xba>
 800a32c:	f1c4 0401 	rsb	r4, r4, #1
 800a330:	f8ca 4000 	str.w	r4, [sl]
 800a334:	f8da 3000 	ldr.w	r3, [sl]
 800a338:	4499      	add	r9, r3
 800a33a:	e7d3      	b.n	800a2e4 <__cvt+0x6a>
 800a33c:	1c59      	adds	r1, r3, #1
 800a33e:	9103      	str	r1, [sp, #12]
 800a340:	701a      	strb	r2, [r3, #0]
 800a342:	e7d9      	b.n	800a2f8 <__cvt+0x7e>

0800a344 <__exponent>:
 800a344:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a346:	2900      	cmp	r1, #0
 800a348:	7002      	strb	r2, [r0, #0]
 800a34a:	bfba      	itte	lt
 800a34c:	4249      	neglt	r1, r1
 800a34e:	232d      	movlt	r3, #45	@ 0x2d
 800a350:	232b      	movge	r3, #43	@ 0x2b
 800a352:	2909      	cmp	r1, #9
 800a354:	7043      	strb	r3, [r0, #1]
 800a356:	dd28      	ble.n	800a3aa <__exponent+0x66>
 800a358:	f10d 0307 	add.w	r3, sp, #7
 800a35c:	270a      	movs	r7, #10
 800a35e:	461d      	mov	r5, r3
 800a360:	461a      	mov	r2, r3
 800a362:	3b01      	subs	r3, #1
 800a364:	fbb1 f6f7 	udiv	r6, r1, r7
 800a368:	fb07 1416 	mls	r4, r7, r6, r1
 800a36c:	3430      	adds	r4, #48	@ 0x30
 800a36e:	f802 4c01 	strb.w	r4, [r2, #-1]
 800a372:	460c      	mov	r4, r1
 800a374:	4631      	mov	r1, r6
 800a376:	2c63      	cmp	r4, #99	@ 0x63
 800a378:	dcf2      	bgt.n	800a360 <__exponent+0x1c>
 800a37a:	3130      	adds	r1, #48	@ 0x30
 800a37c:	1e94      	subs	r4, r2, #2
 800a37e:	f803 1c01 	strb.w	r1, [r3, #-1]
 800a382:	1c41      	adds	r1, r0, #1
 800a384:	4623      	mov	r3, r4
 800a386:	42ab      	cmp	r3, r5
 800a388:	d30a      	bcc.n	800a3a0 <__exponent+0x5c>
 800a38a:	f10d 0309 	add.w	r3, sp, #9
 800a38e:	1a9b      	subs	r3, r3, r2
 800a390:	42ac      	cmp	r4, r5
 800a392:	bf88      	it	hi
 800a394:	2300      	movhi	r3, #0
 800a396:	3302      	adds	r3, #2
 800a398:	4403      	add	r3, r0
 800a39a:	1a18      	subs	r0, r3, r0
 800a39c:	b003      	add	sp, #12
 800a39e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a3a0:	f813 6b01 	ldrb.w	r6, [r3], #1
 800a3a4:	f801 6f01 	strb.w	r6, [r1, #1]!
 800a3a8:	e7ed      	b.n	800a386 <__exponent+0x42>
 800a3aa:	2330      	movs	r3, #48	@ 0x30
 800a3ac:	3130      	adds	r1, #48	@ 0x30
 800a3ae:	7083      	strb	r3, [r0, #2]
 800a3b0:	1d03      	adds	r3, r0, #4
 800a3b2:	70c1      	strb	r1, [r0, #3]
 800a3b4:	e7f1      	b.n	800a39a <__exponent+0x56>
	...

0800a3b8 <_printf_float>:
 800a3b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a3bc:	b08d      	sub	sp, #52	@ 0x34
 800a3be:	460c      	mov	r4, r1
 800a3c0:	4616      	mov	r6, r2
 800a3c2:	461f      	mov	r7, r3
 800a3c4:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800a3c8:	4605      	mov	r5, r0
 800a3ca:	f000 fca7 	bl	800ad1c <_localeconv_r>
 800a3ce:	6803      	ldr	r3, [r0, #0]
 800a3d0:	4618      	mov	r0, r3
 800a3d2:	9304      	str	r3, [sp, #16]
 800a3d4:	f7f5 ff50 	bl	8000278 <strlen>
 800a3d8:	2300      	movs	r3, #0
 800a3da:	9005      	str	r0, [sp, #20]
 800a3dc:	930a      	str	r3, [sp, #40]	@ 0x28
 800a3de:	f8d8 3000 	ldr.w	r3, [r8]
 800a3e2:	f894 a018 	ldrb.w	sl, [r4, #24]
 800a3e6:	3307      	adds	r3, #7
 800a3e8:	f8d4 b000 	ldr.w	fp, [r4]
 800a3ec:	f023 0307 	bic.w	r3, r3, #7
 800a3f0:	f103 0208 	add.w	r2, r3, #8
 800a3f4:	f8c8 2000 	str.w	r2, [r8]
 800a3f8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800a3fc:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a400:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800a404:	f8cd 8018 	str.w	r8, [sp, #24]
 800a408:	9307      	str	r3, [sp, #28]
 800a40a:	4b9d      	ldr	r3, [pc, #628]	@ (800a680 <_printf_float+0x2c8>)
 800a40c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a410:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800a414:	f7f6 fb8e 	bl	8000b34 <__aeabi_dcmpun>
 800a418:	bb70      	cbnz	r0, 800a478 <_printf_float+0xc0>
 800a41a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800a41e:	4b98      	ldr	r3, [pc, #608]	@ (800a680 <_printf_float+0x2c8>)
 800a420:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a424:	f7f6 fb68 	bl	8000af8 <__aeabi_dcmple>
 800a428:	bb30      	cbnz	r0, 800a478 <_printf_float+0xc0>
 800a42a:	2200      	movs	r2, #0
 800a42c:	2300      	movs	r3, #0
 800a42e:	4640      	mov	r0, r8
 800a430:	4649      	mov	r1, r9
 800a432:	f7f6 fb57 	bl	8000ae4 <__aeabi_dcmplt>
 800a436:	b110      	cbz	r0, 800a43e <_printf_float+0x86>
 800a438:	232d      	movs	r3, #45	@ 0x2d
 800a43a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a43e:	4a91      	ldr	r2, [pc, #580]	@ (800a684 <_printf_float+0x2cc>)
 800a440:	4b91      	ldr	r3, [pc, #580]	@ (800a688 <_printf_float+0x2d0>)
 800a442:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800a446:	bf8c      	ite	hi
 800a448:	4690      	movhi	r8, r2
 800a44a:	4698      	movls	r8, r3
 800a44c:	2303      	movs	r3, #3
 800a44e:	f04f 0900 	mov.w	r9, #0
 800a452:	6123      	str	r3, [r4, #16]
 800a454:	f02b 0304 	bic.w	r3, fp, #4
 800a458:	6023      	str	r3, [r4, #0]
 800a45a:	4633      	mov	r3, r6
 800a45c:	aa0b      	add	r2, sp, #44	@ 0x2c
 800a45e:	4621      	mov	r1, r4
 800a460:	4628      	mov	r0, r5
 800a462:	9700      	str	r7, [sp, #0]
 800a464:	f000 f9d2 	bl	800a80c <_printf_common>
 800a468:	3001      	adds	r0, #1
 800a46a:	f040 808d 	bne.w	800a588 <_printf_float+0x1d0>
 800a46e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a472:	b00d      	add	sp, #52	@ 0x34
 800a474:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a478:	4642      	mov	r2, r8
 800a47a:	464b      	mov	r3, r9
 800a47c:	4640      	mov	r0, r8
 800a47e:	4649      	mov	r1, r9
 800a480:	f7f6 fb58 	bl	8000b34 <__aeabi_dcmpun>
 800a484:	b140      	cbz	r0, 800a498 <_printf_float+0xe0>
 800a486:	464b      	mov	r3, r9
 800a488:	4a80      	ldr	r2, [pc, #512]	@ (800a68c <_printf_float+0x2d4>)
 800a48a:	2b00      	cmp	r3, #0
 800a48c:	bfbc      	itt	lt
 800a48e:	232d      	movlt	r3, #45	@ 0x2d
 800a490:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800a494:	4b7e      	ldr	r3, [pc, #504]	@ (800a690 <_printf_float+0x2d8>)
 800a496:	e7d4      	b.n	800a442 <_printf_float+0x8a>
 800a498:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800a49c:	6863      	ldr	r3, [r4, #4]
 800a49e:	9206      	str	r2, [sp, #24]
 800a4a0:	1c5a      	adds	r2, r3, #1
 800a4a2:	d13b      	bne.n	800a51c <_printf_float+0x164>
 800a4a4:	2306      	movs	r3, #6
 800a4a6:	6063      	str	r3, [r4, #4]
 800a4a8:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800a4ac:	2300      	movs	r3, #0
 800a4ae:	4628      	mov	r0, r5
 800a4b0:	6022      	str	r2, [r4, #0]
 800a4b2:	9303      	str	r3, [sp, #12]
 800a4b4:	ab0a      	add	r3, sp, #40	@ 0x28
 800a4b6:	e9cd a301 	strd	sl, r3, [sp, #4]
 800a4ba:	ab09      	add	r3, sp, #36	@ 0x24
 800a4bc:	ec49 8b10 	vmov	d0, r8, r9
 800a4c0:	9300      	str	r3, [sp, #0]
 800a4c2:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800a4c6:	6861      	ldr	r1, [r4, #4]
 800a4c8:	f7ff fed7 	bl	800a27a <__cvt>
 800a4cc:	9b06      	ldr	r3, [sp, #24]
 800a4ce:	4680      	mov	r8, r0
 800a4d0:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a4d2:	2b47      	cmp	r3, #71	@ 0x47
 800a4d4:	d129      	bne.n	800a52a <_printf_float+0x172>
 800a4d6:	1cc8      	adds	r0, r1, #3
 800a4d8:	db02      	blt.n	800a4e0 <_printf_float+0x128>
 800a4da:	6863      	ldr	r3, [r4, #4]
 800a4dc:	4299      	cmp	r1, r3
 800a4de:	dd41      	ble.n	800a564 <_printf_float+0x1ac>
 800a4e0:	f1aa 0a02 	sub.w	sl, sl, #2
 800a4e4:	fa5f fa8a 	uxtb.w	sl, sl
 800a4e8:	3901      	subs	r1, #1
 800a4ea:	4652      	mov	r2, sl
 800a4ec:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800a4f0:	9109      	str	r1, [sp, #36]	@ 0x24
 800a4f2:	f7ff ff27 	bl	800a344 <__exponent>
 800a4f6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a4f8:	4681      	mov	r9, r0
 800a4fa:	1813      	adds	r3, r2, r0
 800a4fc:	2a01      	cmp	r2, #1
 800a4fe:	6123      	str	r3, [r4, #16]
 800a500:	dc02      	bgt.n	800a508 <_printf_float+0x150>
 800a502:	6822      	ldr	r2, [r4, #0]
 800a504:	07d2      	lsls	r2, r2, #31
 800a506:	d501      	bpl.n	800a50c <_printf_float+0x154>
 800a508:	3301      	adds	r3, #1
 800a50a:	6123      	str	r3, [r4, #16]
 800a50c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800a510:	2b00      	cmp	r3, #0
 800a512:	d0a2      	beq.n	800a45a <_printf_float+0xa2>
 800a514:	232d      	movs	r3, #45	@ 0x2d
 800a516:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a51a:	e79e      	b.n	800a45a <_printf_float+0xa2>
 800a51c:	9a06      	ldr	r2, [sp, #24]
 800a51e:	2a47      	cmp	r2, #71	@ 0x47
 800a520:	d1c2      	bne.n	800a4a8 <_printf_float+0xf0>
 800a522:	2b00      	cmp	r3, #0
 800a524:	d1c0      	bne.n	800a4a8 <_printf_float+0xf0>
 800a526:	2301      	movs	r3, #1
 800a528:	e7bd      	b.n	800a4a6 <_printf_float+0xee>
 800a52a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800a52e:	d9db      	bls.n	800a4e8 <_printf_float+0x130>
 800a530:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800a534:	d118      	bne.n	800a568 <_printf_float+0x1b0>
 800a536:	2900      	cmp	r1, #0
 800a538:	6863      	ldr	r3, [r4, #4]
 800a53a:	dd0b      	ble.n	800a554 <_printf_float+0x19c>
 800a53c:	6121      	str	r1, [r4, #16]
 800a53e:	b913      	cbnz	r3, 800a546 <_printf_float+0x18e>
 800a540:	6822      	ldr	r2, [r4, #0]
 800a542:	07d0      	lsls	r0, r2, #31
 800a544:	d502      	bpl.n	800a54c <_printf_float+0x194>
 800a546:	3301      	adds	r3, #1
 800a548:	440b      	add	r3, r1
 800a54a:	6123      	str	r3, [r4, #16]
 800a54c:	f04f 0900 	mov.w	r9, #0
 800a550:	65a1      	str	r1, [r4, #88]	@ 0x58
 800a552:	e7db      	b.n	800a50c <_printf_float+0x154>
 800a554:	b913      	cbnz	r3, 800a55c <_printf_float+0x1a4>
 800a556:	6822      	ldr	r2, [r4, #0]
 800a558:	07d2      	lsls	r2, r2, #31
 800a55a:	d501      	bpl.n	800a560 <_printf_float+0x1a8>
 800a55c:	3302      	adds	r3, #2
 800a55e:	e7f4      	b.n	800a54a <_printf_float+0x192>
 800a560:	2301      	movs	r3, #1
 800a562:	e7f2      	b.n	800a54a <_printf_float+0x192>
 800a564:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800a568:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a56a:	4299      	cmp	r1, r3
 800a56c:	db05      	blt.n	800a57a <_printf_float+0x1c2>
 800a56e:	6823      	ldr	r3, [r4, #0]
 800a570:	6121      	str	r1, [r4, #16]
 800a572:	07d8      	lsls	r0, r3, #31
 800a574:	d5ea      	bpl.n	800a54c <_printf_float+0x194>
 800a576:	1c4b      	adds	r3, r1, #1
 800a578:	e7e7      	b.n	800a54a <_printf_float+0x192>
 800a57a:	2900      	cmp	r1, #0
 800a57c:	bfd4      	ite	le
 800a57e:	f1c1 0202 	rsble	r2, r1, #2
 800a582:	2201      	movgt	r2, #1
 800a584:	4413      	add	r3, r2
 800a586:	e7e0      	b.n	800a54a <_printf_float+0x192>
 800a588:	6823      	ldr	r3, [r4, #0]
 800a58a:	055a      	lsls	r2, r3, #21
 800a58c:	d407      	bmi.n	800a59e <_printf_float+0x1e6>
 800a58e:	6923      	ldr	r3, [r4, #16]
 800a590:	4642      	mov	r2, r8
 800a592:	4631      	mov	r1, r6
 800a594:	4628      	mov	r0, r5
 800a596:	47b8      	blx	r7
 800a598:	3001      	adds	r0, #1
 800a59a:	d12b      	bne.n	800a5f4 <_printf_float+0x23c>
 800a59c:	e767      	b.n	800a46e <_printf_float+0xb6>
 800a59e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800a5a2:	f240 80dd 	bls.w	800a760 <_printf_float+0x3a8>
 800a5a6:	2200      	movs	r2, #0
 800a5a8:	2300      	movs	r3, #0
 800a5aa:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800a5ae:	f7f6 fa8f 	bl	8000ad0 <__aeabi_dcmpeq>
 800a5b2:	2800      	cmp	r0, #0
 800a5b4:	d033      	beq.n	800a61e <_printf_float+0x266>
 800a5b6:	2301      	movs	r3, #1
 800a5b8:	4a36      	ldr	r2, [pc, #216]	@ (800a694 <_printf_float+0x2dc>)
 800a5ba:	4631      	mov	r1, r6
 800a5bc:	4628      	mov	r0, r5
 800a5be:	47b8      	blx	r7
 800a5c0:	3001      	adds	r0, #1
 800a5c2:	f43f af54 	beq.w	800a46e <_printf_float+0xb6>
 800a5c6:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800a5ca:	4543      	cmp	r3, r8
 800a5cc:	db02      	blt.n	800a5d4 <_printf_float+0x21c>
 800a5ce:	6823      	ldr	r3, [r4, #0]
 800a5d0:	07d8      	lsls	r0, r3, #31
 800a5d2:	d50f      	bpl.n	800a5f4 <_printf_float+0x23c>
 800a5d4:	4631      	mov	r1, r6
 800a5d6:	4628      	mov	r0, r5
 800a5d8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a5dc:	47b8      	blx	r7
 800a5de:	3001      	adds	r0, #1
 800a5e0:	f43f af45 	beq.w	800a46e <_printf_float+0xb6>
 800a5e4:	f04f 0900 	mov.w	r9, #0
 800a5e8:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 800a5ec:	f104 0a1a 	add.w	sl, r4, #26
 800a5f0:	45c8      	cmp	r8, r9
 800a5f2:	dc09      	bgt.n	800a608 <_printf_float+0x250>
 800a5f4:	6823      	ldr	r3, [r4, #0]
 800a5f6:	079b      	lsls	r3, r3, #30
 800a5f8:	f100 8103 	bmi.w	800a802 <_printf_float+0x44a>
 800a5fc:	68e0      	ldr	r0, [r4, #12]
 800a5fe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a600:	4298      	cmp	r0, r3
 800a602:	bfb8      	it	lt
 800a604:	4618      	movlt	r0, r3
 800a606:	e734      	b.n	800a472 <_printf_float+0xba>
 800a608:	2301      	movs	r3, #1
 800a60a:	4652      	mov	r2, sl
 800a60c:	4631      	mov	r1, r6
 800a60e:	4628      	mov	r0, r5
 800a610:	47b8      	blx	r7
 800a612:	3001      	adds	r0, #1
 800a614:	f43f af2b 	beq.w	800a46e <_printf_float+0xb6>
 800a618:	f109 0901 	add.w	r9, r9, #1
 800a61c:	e7e8      	b.n	800a5f0 <_printf_float+0x238>
 800a61e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a620:	2b00      	cmp	r3, #0
 800a622:	dc39      	bgt.n	800a698 <_printf_float+0x2e0>
 800a624:	2301      	movs	r3, #1
 800a626:	4a1b      	ldr	r2, [pc, #108]	@ (800a694 <_printf_float+0x2dc>)
 800a628:	4631      	mov	r1, r6
 800a62a:	4628      	mov	r0, r5
 800a62c:	47b8      	blx	r7
 800a62e:	3001      	adds	r0, #1
 800a630:	f43f af1d 	beq.w	800a46e <_printf_float+0xb6>
 800a634:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800a638:	ea59 0303 	orrs.w	r3, r9, r3
 800a63c:	d102      	bne.n	800a644 <_printf_float+0x28c>
 800a63e:	6823      	ldr	r3, [r4, #0]
 800a640:	07d9      	lsls	r1, r3, #31
 800a642:	d5d7      	bpl.n	800a5f4 <_printf_float+0x23c>
 800a644:	4631      	mov	r1, r6
 800a646:	4628      	mov	r0, r5
 800a648:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a64c:	47b8      	blx	r7
 800a64e:	3001      	adds	r0, #1
 800a650:	f43f af0d 	beq.w	800a46e <_printf_float+0xb6>
 800a654:	f04f 0a00 	mov.w	sl, #0
 800a658:	f104 0b1a 	add.w	fp, r4, #26
 800a65c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a65e:	425b      	negs	r3, r3
 800a660:	4553      	cmp	r3, sl
 800a662:	dc01      	bgt.n	800a668 <_printf_float+0x2b0>
 800a664:	464b      	mov	r3, r9
 800a666:	e793      	b.n	800a590 <_printf_float+0x1d8>
 800a668:	2301      	movs	r3, #1
 800a66a:	465a      	mov	r2, fp
 800a66c:	4631      	mov	r1, r6
 800a66e:	4628      	mov	r0, r5
 800a670:	47b8      	blx	r7
 800a672:	3001      	adds	r0, #1
 800a674:	f43f aefb 	beq.w	800a46e <_printf_float+0xb6>
 800a678:	f10a 0a01 	add.w	sl, sl, #1
 800a67c:	e7ee      	b.n	800a65c <_printf_float+0x2a4>
 800a67e:	bf00      	nop
 800a680:	7fefffff 	.word	0x7fefffff
 800a684:	0800d15c 	.word	0x0800d15c
 800a688:	0800d158 	.word	0x0800d158
 800a68c:	0800d164 	.word	0x0800d164
 800a690:	0800d160 	.word	0x0800d160
 800a694:	0800d168 	.word	0x0800d168
 800a698:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800a69a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800a69e:	4553      	cmp	r3, sl
 800a6a0:	bfa8      	it	ge
 800a6a2:	4653      	movge	r3, sl
 800a6a4:	2b00      	cmp	r3, #0
 800a6a6:	4699      	mov	r9, r3
 800a6a8:	dc36      	bgt.n	800a718 <_printf_float+0x360>
 800a6aa:	f04f 0b00 	mov.w	fp, #0
 800a6ae:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a6b2:	f104 021a 	add.w	r2, r4, #26
 800a6b6:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800a6b8:	9306      	str	r3, [sp, #24]
 800a6ba:	eba3 0309 	sub.w	r3, r3, r9
 800a6be:	455b      	cmp	r3, fp
 800a6c0:	dc31      	bgt.n	800a726 <_printf_float+0x36e>
 800a6c2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a6c4:	459a      	cmp	sl, r3
 800a6c6:	dc3a      	bgt.n	800a73e <_printf_float+0x386>
 800a6c8:	6823      	ldr	r3, [r4, #0]
 800a6ca:	07da      	lsls	r2, r3, #31
 800a6cc:	d437      	bmi.n	800a73e <_printf_float+0x386>
 800a6ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a6d0:	ebaa 0903 	sub.w	r9, sl, r3
 800a6d4:	9b06      	ldr	r3, [sp, #24]
 800a6d6:	ebaa 0303 	sub.w	r3, sl, r3
 800a6da:	4599      	cmp	r9, r3
 800a6dc:	bfa8      	it	ge
 800a6de:	4699      	movge	r9, r3
 800a6e0:	f1b9 0f00 	cmp.w	r9, #0
 800a6e4:	dc33      	bgt.n	800a74e <_printf_float+0x396>
 800a6e6:	f04f 0800 	mov.w	r8, #0
 800a6ea:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a6ee:	f104 0b1a 	add.w	fp, r4, #26
 800a6f2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a6f4:	ebaa 0303 	sub.w	r3, sl, r3
 800a6f8:	eba3 0309 	sub.w	r3, r3, r9
 800a6fc:	4543      	cmp	r3, r8
 800a6fe:	f77f af79 	ble.w	800a5f4 <_printf_float+0x23c>
 800a702:	2301      	movs	r3, #1
 800a704:	465a      	mov	r2, fp
 800a706:	4631      	mov	r1, r6
 800a708:	4628      	mov	r0, r5
 800a70a:	47b8      	blx	r7
 800a70c:	3001      	adds	r0, #1
 800a70e:	f43f aeae 	beq.w	800a46e <_printf_float+0xb6>
 800a712:	f108 0801 	add.w	r8, r8, #1
 800a716:	e7ec      	b.n	800a6f2 <_printf_float+0x33a>
 800a718:	4642      	mov	r2, r8
 800a71a:	4631      	mov	r1, r6
 800a71c:	4628      	mov	r0, r5
 800a71e:	47b8      	blx	r7
 800a720:	3001      	adds	r0, #1
 800a722:	d1c2      	bne.n	800a6aa <_printf_float+0x2f2>
 800a724:	e6a3      	b.n	800a46e <_printf_float+0xb6>
 800a726:	2301      	movs	r3, #1
 800a728:	4631      	mov	r1, r6
 800a72a:	4628      	mov	r0, r5
 800a72c:	9206      	str	r2, [sp, #24]
 800a72e:	47b8      	blx	r7
 800a730:	3001      	adds	r0, #1
 800a732:	f43f ae9c 	beq.w	800a46e <_printf_float+0xb6>
 800a736:	f10b 0b01 	add.w	fp, fp, #1
 800a73a:	9a06      	ldr	r2, [sp, #24]
 800a73c:	e7bb      	b.n	800a6b6 <_printf_float+0x2fe>
 800a73e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a742:	4631      	mov	r1, r6
 800a744:	4628      	mov	r0, r5
 800a746:	47b8      	blx	r7
 800a748:	3001      	adds	r0, #1
 800a74a:	d1c0      	bne.n	800a6ce <_printf_float+0x316>
 800a74c:	e68f      	b.n	800a46e <_printf_float+0xb6>
 800a74e:	9a06      	ldr	r2, [sp, #24]
 800a750:	464b      	mov	r3, r9
 800a752:	4631      	mov	r1, r6
 800a754:	4628      	mov	r0, r5
 800a756:	4442      	add	r2, r8
 800a758:	47b8      	blx	r7
 800a75a:	3001      	adds	r0, #1
 800a75c:	d1c3      	bne.n	800a6e6 <_printf_float+0x32e>
 800a75e:	e686      	b.n	800a46e <_printf_float+0xb6>
 800a760:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800a764:	f1ba 0f01 	cmp.w	sl, #1
 800a768:	dc01      	bgt.n	800a76e <_printf_float+0x3b6>
 800a76a:	07db      	lsls	r3, r3, #31
 800a76c:	d536      	bpl.n	800a7dc <_printf_float+0x424>
 800a76e:	2301      	movs	r3, #1
 800a770:	4642      	mov	r2, r8
 800a772:	4631      	mov	r1, r6
 800a774:	4628      	mov	r0, r5
 800a776:	47b8      	blx	r7
 800a778:	3001      	adds	r0, #1
 800a77a:	f43f ae78 	beq.w	800a46e <_printf_float+0xb6>
 800a77e:	4631      	mov	r1, r6
 800a780:	4628      	mov	r0, r5
 800a782:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a786:	47b8      	blx	r7
 800a788:	3001      	adds	r0, #1
 800a78a:	f43f ae70 	beq.w	800a46e <_printf_float+0xb6>
 800a78e:	2200      	movs	r2, #0
 800a790:	2300      	movs	r3, #0
 800a792:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800a796:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800a79a:	f7f6 f999 	bl	8000ad0 <__aeabi_dcmpeq>
 800a79e:	b9c0      	cbnz	r0, 800a7d2 <_printf_float+0x41a>
 800a7a0:	4653      	mov	r3, sl
 800a7a2:	f108 0201 	add.w	r2, r8, #1
 800a7a6:	4631      	mov	r1, r6
 800a7a8:	4628      	mov	r0, r5
 800a7aa:	47b8      	blx	r7
 800a7ac:	3001      	adds	r0, #1
 800a7ae:	d10c      	bne.n	800a7ca <_printf_float+0x412>
 800a7b0:	e65d      	b.n	800a46e <_printf_float+0xb6>
 800a7b2:	2301      	movs	r3, #1
 800a7b4:	465a      	mov	r2, fp
 800a7b6:	4631      	mov	r1, r6
 800a7b8:	4628      	mov	r0, r5
 800a7ba:	47b8      	blx	r7
 800a7bc:	3001      	adds	r0, #1
 800a7be:	f43f ae56 	beq.w	800a46e <_printf_float+0xb6>
 800a7c2:	f108 0801 	add.w	r8, r8, #1
 800a7c6:	45d0      	cmp	r8, sl
 800a7c8:	dbf3      	blt.n	800a7b2 <_printf_float+0x3fa>
 800a7ca:	464b      	mov	r3, r9
 800a7cc:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800a7d0:	e6df      	b.n	800a592 <_printf_float+0x1da>
 800a7d2:	f04f 0800 	mov.w	r8, #0
 800a7d6:	f104 0b1a 	add.w	fp, r4, #26
 800a7da:	e7f4      	b.n	800a7c6 <_printf_float+0x40e>
 800a7dc:	2301      	movs	r3, #1
 800a7de:	4642      	mov	r2, r8
 800a7e0:	e7e1      	b.n	800a7a6 <_printf_float+0x3ee>
 800a7e2:	2301      	movs	r3, #1
 800a7e4:	464a      	mov	r2, r9
 800a7e6:	4631      	mov	r1, r6
 800a7e8:	4628      	mov	r0, r5
 800a7ea:	47b8      	blx	r7
 800a7ec:	3001      	adds	r0, #1
 800a7ee:	f43f ae3e 	beq.w	800a46e <_printf_float+0xb6>
 800a7f2:	f108 0801 	add.w	r8, r8, #1
 800a7f6:	68e3      	ldr	r3, [r4, #12]
 800a7f8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800a7fa:	1a5b      	subs	r3, r3, r1
 800a7fc:	4543      	cmp	r3, r8
 800a7fe:	dcf0      	bgt.n	800a7e2 <_printf_float+0x42a>
 800a800:	e6fc      	b.n	800a5fc <_printf_float+0x244>
 800a802:	f04f 0800 	mov.w	r8, #0
 800a806:	f104 0919 	add.w	r9, r4, #25
 800a80a:	e7f4      	b.n	800a7f6 <_printf_float+0x43e>

0800a80c <_printf_common>:
 800a80c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a810:	4616      	mov	r6, r2
 800a812:	4698      	mov	r8, r3
 800a814:	688a      	ldr	r2, [r1, #8]
 800a816:	4607      	mov	r7, r0
 800a818:	690b      	ldr	r3, [r1, #16]
 800a81a:	460c      	mov	r4, r1
 800a81c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a820:	4293      	cmp	r3, r2
 800a822:	bfb8      	it	lt
 800a824:	4613      	movlt	r3, r2
 800a826:	6033      	str	r3, [r6, #0]
 800a828:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800a82c:	b10a      	cbz	r2, 800a832 <_printf_common+0x26>
 800a82e:	3301      	adds	r3, #1
 800a830:	6033      	str	r3, [r6, #0]
 800a832:	6823      	ldr	r3, [r4, #0]
 800a834:	0699      	lsls	r1, r3, #26
 800a836:	bf42      	ittt	mi
 800a838:	6833      	ldrmi	r3, [r6, #0]
 800a83a:	3302      	addmi	r3, #2
 800a83c:	6033      	strmi	r3, [r6, #0]
 800a83e:	6825      	ldr	r5, [r4, #0]
 800a840:	f015 0506 	ands.w	r5, r5, #6
 800a844:	d106      	bne.n	800a854 <_printf_common+0x48>
 800a846:	f104 0a19 	add.w	sl, r4, #25
 800a84a:	68e3      	ldr	r3, [r4, #12]
 800a84c:	6832      	ldr	r2, [r6, #0]
 800a84e:	1a9b      	subs	r3, r3, r2
 800a850:	42ab      	cmp	r3, r5
 800a852:	dc2b      	bgt.n	800a8ac <_printf_common+0xa0>
 800a854:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800a858:	6822      	ldr	r2, [r4, #0]
 800a85a:	3b00      	subs	r3, #0
 800a85c:	bf18      	it	ne
 800a85e:	2301      	movne	r3, #1
 800a860:	0692      	lsls	r2, r2, #26
 800a862:	d430      	bmi.n	800a8c6 <_printf_common+0xba>
 800a864:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800a868:	4641      	mov	r1, r8
 800a86a:	4638      	mov	r0, r7
 800a86c:	47c8      	blx	r9
 800a86e:	3001      	adds	r0, #1
 800a870:	d023      	beq.n	800a8ba <_printf_common+0xae>
 800a872:	6823      	ldr	r3, [r4, #0]
 800a874:	341a      	adds	r4, #26
 800a876:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 800a87a:	f003 0306 	and.w	r3, r3, #6
 800a87e:	2b04      	cmp	r3, #4
 800a880:	bf0a      	itet	eq
 800a882:	f854 5c0e 	ldreq.w	r5, [r4, #-14]
 800a886:	2500      	movne	r5, #0
 800a888:	6833      	ldreq	r3, [r6, #0]
 800a88a:	f04f 0600 	mov.w	r6, #0
 800a88e:	bf08      	it	eq
 800a890:	1aed      	subeq	r5, r5, r3
 800a892:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800a896:	bf08      	it	eq
 800a898:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a89c:	4293      	cmp	r3, r2
 800a89e:	bfc4      	itt	gt
 800a8a0:	1a9b      	subgt	r3, r3, r2
 800a8a2:	18ed      	addgt	r5, r5, r3
 800a8a4:	42b5      	cmp	r5, r6
 800a8a6:	d11a      	bne.n	800a8de <_printf_common+0xd2>
 800a8a8:	2000      	movs	r0, #0
 800a8aa:	e008      	b.n	800a8be <_printf_common+0xb2>
 800a8ac:	2301      	movs	r3, #1
 800a8ae:	4652      	mov	r2, sl
 800a8b0:	4641      	mov	r1, r8
 800a8b2:	4638      	mov	r0, r7
 800a8b4:	47c8      	blx	r9
 800a8b6:	3001      	adds	r0, #1
 800a8b8:	d103      	bne.n	800a8c2 <_printf_common+0xb6>
 800a8ba:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a8be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a8c2:	3501      	adds	r5, #1
 800a8c4:	e7c1      	b.n	800a84a <_printf_common+0x3e>
 800a8c6:	18e1      	adds	r1, r4, r3
 800a8c8:	1c5a      	adds	r2, r3, #1
 800a8ca:	2030      	movs	r0, #48	@ 0x30
 800a8cc:	3302      	adds	r3, #2
 800a8ce:	4422      	add	r2, r4
 800a8d0:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800a8d4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800a8d8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800a8dc:	e7c2      	b.n	800a864 <_printf_common+0x58>
 800a8de:	2301      	movs	r3, #1
 800a8e0:	4622      	mov	r2, r4
 800a8e2:	4641      	mov	r1, r8
 800a8e4:	4638      	mov	r0, r7
 800a8e6:	47c8      	blx	r9
 800a8e8:	3001      	adds	r0, #1
 800a8ea:	d0e6      	beq.n	800a8ba <_printf_common+0xae>
 800a8ec:	3601      	adds	r6, #1
 800a8ee:	e7d9      	b.n	800a8a4 <_printf_common+0x98>

0800a8f0 <_printf_i>:
 800a8f0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a8f4:	7e0f      	ldrb	r7, [r1, #24]
 800a8f6:	4691      	mov	r9, r2
 800a8f8:	4680      	mov	r8, r0
 800a8fa:	460c      	mov	r4, r1
 800a8fc:	2f78      	cmp	r7, #120	@ 0x78
 800a8fe:	469a      	mov	sl, r3
 800a900:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800a902:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800a906:	d807      	bhi.n	800a918 <_printf_i+0x28>
 800a908:	2f62      	cmp	r7, #98	@ 0x62
 800a90a:	d80a      	bhi.n	800a922 <_printf_i+0x32>
 800a90c:	2f00      	cmp	r7, #0
 800a90e:	f000 80d1 	beq.w	800aab4 <_printf_i+0x1c4>
 800a912:	2f58      	cmp	r7, #88	@ 0x58
 800a914:	f000 80b8 	beq.w	800aa88 <_printf_i+0x198>
 800a918:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a91c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800a920:	e03a      	b.n	800a998 <_printf_i+0xa8>
 800a922:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800a926:	2b15      	cmp	r3, #21
 800a928:	d8f6      	bhi.n	800a918 <_printf_i+0x28>
 800a92a:	a101      	add	r1, pc, #4	@ (adr r1, 800a930 <_printf_i+0x40>)
 800a92c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a930:	0800a989 	.word	0x0800a989
 800a934:	0800a99d 	.word	0x0800a99d
 800a938:	0800a919 	.word	0x0800a919
 800a93c:	0800a919 	.word	0x0800a919
 800a940:	0800a919 	.word	0x0800a919
 800a944:	0800a919 	.word	0x0800a919
 800a948:	0800a99d 	.word	0x0800a99d
 800a94c:	0800a919 	.word	0x0800a919
 800a950:	0800a919 	.word	0x0800a919
 800a954:	0800a919 	.word	0x0800a919
 800a958:	0800a919 	.word	0x0800a919
 800a95c:	0800aa9b 	.word	0x0800aa9b
 800a960:	0800a9c7 	.word	0x0800a9c7
 800a964:	0800aa55 	.word	0x0800aa55
 800a968:	0800a919 	.word	0x0800a919
 800a96c:	0800a919 	.word	0x0800a919
 800a970:	0800aabd 	.word	0x0800aabd
 800a974:	0800a919 	.word	0x0800a919
 800a978:	0800a9c7 	.word	0x0800a9c7
 800a97c:	0800a919 	.word	0x0800a919
 800a980:	0800a919 	.word	0x0800a919
 800a984:	0800aa5d 	.word	0x0800aa5d
 800a988:	6833      	ldr	r3, [r6, #0]
 800a98a:	1d1a      	adds	r2, r3, #4
 800a98c:	681b      	ldr	r3, [r3, #0]
 800a98e:	6032      	str	r2, [r6, #0]
 800a990:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a994:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800a998:	2301      	movs	r3, #1
 800a99a:	e09c      	b.n	800aad6 <_printf_i+0x1e6>
 800a99c:	6833      	ldr	r3, [r6, #0]
 800a99e:	6820      	ldr	r0, [r4, #0]
 800a9a0:	1d19      	adds	r1, r3, #4
 800a9a2:	6031      	str	r1, [r6, #0]
 800a9a4:	0606      	lsls	r6, r0, #24
 800a9a6:	d501      	bpl.n	800a9ac <_printf_i+0xbc>
 800a9a8:	681d      	ldr	r5, [r3, #0]
 800a9aa:	e003      	b.n	800a9b4 <_printf_i+0xc4>
 800a9ac:	0645      	lsls	r5, r0, #25
 800a9ae:	d5fb      	bpl.n	800a9a8 <_printf_i+0xb8>
 800a9b0:	f9b3 5000 	ldrsh.w	r5, [r3]
 800a9b4:	2d00      	cmp	r5, #0
 800a9b6:	da03      	bge.n	800a9c0 <_printf_i+0xd0>
 800a9b8:	232d      	movs	r3, #45	@ 0x2d
 800a9ba:	426d      	negs	r5, r5
 800a9bc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a9c0:	4858      	ldr	r0, [pc, #352]	@ (800ab24 <_printf_i+0x234>)
 800a9c2:	230a      	movs	r3, #10
 800a9c4:	e011      	b.n	800a9ea <_printf_i+0xfa>
 800a9c6:	6821      	ldr	r1, [r4, #0]
 800a9c8:	6833      	ldr	r3, [r6, #0]
 800a9ca:	0608      	lsls	r0, r1, #24
 800a9cc:	f853 5b04 	ldr.w	r5, [r3], #4
 800a9d0:	d402      	bmi.n	800a9d8 <_printf_i+0xe8>
 800a9d2:	0649      	lsls	r1, r1, #25
 800a9d4:	bf48      	it	mi
 800a9d6:	b2ad      	uxthmi	r5, r5
 800a9d8:	2f6f      	cmp	r7, #111	@ 0x6f
 800a9da:	6033      	str	r3, [r6, #0]
 800a9dc:	4851      	ldr	r0, [pc, #324]	@ (800ab24 <_printf_i+0x234>)
 800a9de:	bf14      	ite	ne
 800a9e0:	230a      	movne	r3, #10
 800a9e2:	2308      	moveq	r3, #8
 800a9e4:	2100      	movs	r1, #0
 800a9e6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800a9ea:	6866      	ldr	r6, [r4, #4]
 800a9ec:	2e00      	cmp	r6, #0
 800a9ee:	60a6      	str	r6, [r4, #8]
 800a9f0:	db05      	blt.n	800a9fe <_printf_i+0x10e>
 800a9f2:	6821      	ldr	r1, [r4, #0]
 800a9f4:	432e      	orrs	r6, r5
 800a9f6:	f021 0104 	bic.w	r1, r1, #4
 800a9fa:	6021      	str	r1, [r4, #0]
 800a9fc:	d04b      	beq.n	800aa96 <_printf_i+0x1a6>
 800a9fe:	4616      	mov	r6, r2
 800aa00:	fbb5 f1f3 	udiv	r1, r5, r3
 800aa04:	fb03 5711 	mls	r7, r3, r1, r5
 800aa08:	5dc7      	ldrb	r7, [r0, r7]
 800aa0a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800aa0e:	462f      	mov	r7, r5
 800aa10:	460d      	mov	r5, r1
 800aa12:	42bb      	cmp	r3, r7
 800aa14:	d9f4      	bls.n	800aa00 <_printf_i+0x110>
 800aa16:	2b08      	cmp	r3, #8
 800aa18:	d10b      	bne.n	800aa32 <_printf_i+0x142>
 800aa1a:	6823      	ldr	r3, [r4, #0]
 800aa1c:	07df      	lsls	r7, r3, #31
 800aa1e:	d508      	bpl.n	800aa32 <_printf_i+0x142>
 800aa20:	6923      	ldr	r3, [r4, #16]
 800aa22:	6861      	ldr	r1, [r4, #4]
 800aa24:	4299      	cmp	r1, r3
 800aa26:	bfde      	ittt	le
 800aa28:	2330      	movle	r3, #48	@ 0x30
 800aa2a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800aa2e:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800aa32:	1b92      	subs	r2, r2, r6
 800aa34:	6122      	str	r2, [r4, #16]
 800aa36:	464b      	mov	r3, r9
 800aa38:	aa03      	add	r2, sp, #12
 800aa3a:	4621      	mov	r1, r4
 800aa3c:	4640      	mov	r0, r8
 800aa3e:	f8cd a000 	str.w	sl, [sp]
 800aa42:	f7ff fee3 	bl	800a80c <_printf_common>
 800aa46:	3001      	adds	r0, #1
 800aa48:	d14a      	bne.n	800aae0 <_printf_i+0x1f0>
 800aa4a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800aa4e:	b004      	add	sp, #16
 800aa50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aa54:	6823      	ldr	r3, [r4, #0]
 800aa56:	f043 0320 	orr.w	r3, r3, #32
 800aa5a:	6023      	str	r3, [r4, #0]
 800aa5c:	2778      	movs	r7, #120	@ 0x78
 800aa5e:	4832      	ldr	r0, [pc, #200]	@ (800ab28 <_printf_i+0x238>)
 800aa60:	6823      	ldr	r3, [r4, #0]
 800aa62:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800aa66:	061f      	lsls	r7, r3, #24
 800aa68:	6831      	ldr	r1, [r6, #0]
 800aa6a:	f851 5b04 	ldr.w	r5, [r1], #4
 800aa6e:	d402      	bmi.n	800aa76 <_printf_i+0x186>
 800aa70:	065f      	lsls	r7, r3, #25
 800aa72:	bf48      	it	mi
 800aa74:	b2ad      	uxthmi	r5, r5
 800aa76:	6031      	str	r1, [r6, #0]
 800aa78:	07d9      	lsls	r1, r3, #31
 800aa7a:	bf44      	itt	mi
 800aa7c:	f043 0320 	orrmi.w	r3, r3, #32
 800aa80:	6023      	strmi	r3, [r4, #0]
 800aa82:	b11d      	cbz	r5, 800aa8c <_printf_i+0x19c>
 800aa84:	2310      	movs	r3, #16
 800aa86:	e7ad      	b.n	800a9e4 <_printf_i+0xf4>
 800aa88:	4826      	ldr	r0, [pc, #152]	@ (800ab24 <_printf_i+0x234>)
 800aa8a:	e7e9      	b.n	800aa60 <_printf_i+0x170>
 800aa8c:	6823      	ldr	r3, [r4, #0]
 800aa8e:	f023 0320 	bic.w	r3, r3, #32
 800aa92:	6023      	str	r3, [r4, #0]
 800aa94:	e7f6      	b.n	800aa84 <_printf_i+0x194>
 800aa96:	4616      	mov	r6, r2
 800aa98:	e7bd      	b.n	800aa16 <_printf_i+0x126>
 800aa9a:	6833      	ldr	r3, [r6, #0]
 800aa9c:	6825      	ldr	r5, [r4, #0]
 800aa9e:	1d18      	adds	r0, r3, #4
 800aaa0:	6961      	ldr	r1, [r4, #20]
 800aaa2:	6030      	str	r0, [r6, #0]
 800aaa4:	062e      	lsls	r6, r5, #24
 800aaa6:	681b      	ldr	r3, [r3, #0]
 800aaa8:	d501      	bpl.n	800aaae <_printf_i+0x1be>
 800aaaa:	6019      	str	r1, [r3, #0]
 800aaac:	e002      	b.n	800aab4 <_printf_i+0x1c4>
 800aaae:	0668      	lsls	r0, r5, #25
 800aab0:	d5fb      	bpl.n	800aaaa <_printf_i+0x1ba>
 800aab2:	8019      	strh	r1, [r3, #0]
 800aab4:	2300      	movs	r3, #0
 800aab6:	4616      	mov	r6, r2
 800aab8:	6123      	str	r3, [r4, #16]
 800aaba:	e7bc      	b.n	800aa36 <_printf_i+0x146>
 800aabc:	6833      	ldr	r3, [r6, #0]
 800aabe:	2100      	movs	r1, #0
 800aac0:	1d1a      	adds	r2, r3, #4
 800aac2:	6032      	str	r2, [r6, #0]
 800aac4:	681e      	ldr	r6, [r3, #0]
 800aac6:	6862      	ldr	r2, [r4, #4]
 800aac8:	4630      	mov	r0, r6
 800aaca:	f000 f92b 	bl	800ad24 <memchr>
 800aace:	b108      	cbz	r0, 800aad4 <_printf_i+0x1e4>
 800aad0:	1b80      	subs	r0, r0, r6
 800aad2:	6060      	str	r0, [r4, #4]
 800aad4:	6863      	ldr	r3, [r4, #4]
 800aad6:	6123      	str	r3, [r4, #16]
 800aad8:	2300      	movs	r3, #0
 800aada:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800aade:	e7aa      	b.n	800aa36 <_printf_i+0x146>
 800aae0:	6923      	ldr	r3, [r4, #16]
 800aae2:	4632      	mov	r2, r6
 800aae4:	4649      	mov	r1, r9
 800aae6:	4640      	mov	r0, r8
 800aae8:	47d0      	blx	sl
 800aaea:	3001      	adds	r0, #1
 800aaec:	d0ad      	beq.n	800aa4a <_printf_i+0x15a>
 800aaee:	6823      	ldr	r3, [r4, #0]
 800aaf0:	079b      	lsls	r3, r3, #30
 800aaf2:	d413      	bmi.n	800ab1c <_printf_i+0x22c>
 800aaf4:	68e0      	ldr	r0, [r4, #12]
 800aaf6:	9b03      	ldr	r3, [sp, #12]
 800aaf8:	4298      	cmp	r0, r3
 800aafa:	bfb8      	it	lt
 800aafc:	4618      	movlt	r0, r3
 800aafe:	e7a6      	b.n	800aa4e <_printf_i+0x15e>
 800ab00:	2301      	movs	r3, #1
 800ab02:	4632      	mov	r2, r6
 800ab04:	4649      	mov	r1, r9
 800ab06:	4640      	mov	r0, r8
 800ab08:	47d0      	blx	sl
 800ab0a:	3001      	adds	r0, #1
 800ab0c:	d09d      	beq.n	800aa4a <_printf_i+0x15a>
 800ab0e:	3501      	adds	r5, #1
 800ab10:	68e3      	ldr	r3, [r4, #12]
 800ab12:	9903      	ldr	r1, [sp, #12]
 800ab14:	1a5b      	subs	r3, r3, r1
 800ab16:	42ab      	cmp	r3, r5
 800ab18:	dcf2      	bgt.n	800ab00 <_printf_i+0x210>
 800ab1a:	e7eb      	b.n	800aaf4 <_printf_i+0x204>
 800ab1c:	2500      	movs	r5, #0
 800ab1e:	f104 0619 	add.w	r6, r4, #25
 800ab22:	e7f5      	b.n	800ab10 <_printf_i+0x220>
 800ab24:	0800d16a 	.word	0x0800d16a
 800ab28:	0800d17b 	.word	0x0800d17b

0800ab2c <std>:
 800ab2c:	2300      	movs	r3, #0
 800ab2e:	b510      	push	{r4, lr}
 800ab30:	4604      	mov	r4, r0
 800ab32:	6083      	str	r3, [r0, #8]
 800ab34:	8181      	strh	r1, [r0, #12]
 800ab36:	4619      	mov	r1, r3
 800ab38:	6643      	str	r3, [r0, #100]	@ 0x64
 800ab3a:	81c2      	strh	r2, [r0, #14]
 800ab3c:	2208      	movs	r2, #8
 800ab3e:	6183      	str	r3, [r0, #24]
 800ab40:	e9c0 3300 	strd	r3, r3, [r0]
 800ab44:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ab48:	305c      	adds	r0, #92	@ 0x5c
 800ab4a:	f000 f8b1 	bl	800acb0 <memset>
 800ab4e:	4b0d      	ldr	r3, [pc, #52]	@ (800ab84 <std+0x58>)
 800ab50:	6224      	str	r4, [r4, #32]
 800ab52:	6263      	str	r3, [r4, #36]	@ 0x24
 800ab54:	4b0c      	ldr	r3, [pc, #48]	@ (800ab88 <std+0x5c>)
 800ab56:	62a3      	str	r3, [r4, #40]	@ 0x28
 800ab58:	4b0c      	ldr	r3, [pc, #48]	@ (800ab8c <std+0x60>)
 800ab5a:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800ab5c:	4b0c      	ldr	r3, [pc, #48]	@ (800ab90 <std+0x64>)
 800ab5e:	6323      	str	r3, [r4, #48]	@ 0x30
 800ab60:	4b0c      	ldr	r3, [pc, #48]	@ (800ab94 <std+0x68>)
 800ab62:	429c      	cmp	r4, r3
 800ab64:	d006      	beq.n	800ab74 <std+0x48>
 800ab66:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800ab6a:	4294      	cmp	r4, r2
 800ab6c:	d002      	beq.n	800ab74 <std+0x48>
 800ab6e:	33d0      	adds	r3, #208	@ 0xd0
 800ab70:	429c      	cmp	r4, r3
 800ab72:	d105      	bne.n	800ab80 <std+0x54>
 800ab74:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800ab78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ab7c:	f000 b8ca 	b.w	800ad14 <__retarget_lock_init_recursive>
 800ab80:	bd10      	pop	{r4, pc}
 800ab82:	bf00      	nop
 800ab84:	0800c3cd 	.word	0x0800c3cd
 800ab88:	0800c3ef 	.word	0x0800c3ef
 800ab8c:	0800c427 	.word	0x0800c427
 800ab90:	0800c44b 	.word	0x0800c44b
 800ab94:	20000450 	.word	0x20000450

0800ab98 <stdio_exit_handler>:
 800ab98:	4a02      	ldr	r2, [pc, #8]	@ (800aba4 <stdio_exit_handler+0xc>)
 800ab9a:	4903      	ldr	r1, [pc, #12]	@ (800aba8 <stdio_exit_handler+0x10>)
 800ab9c:	4803      	ldr	r0, [pc, #12]	@ (800abac <stdio_exit_handler+0x14>)
 800ab9e:	f000 b869 	b.w	800ac74 <_fwalk_sglue>
 800aba2:	bf00      	nop
 800aba4:	20000030 	.word	0x20000030
 800aba8:	0800bc61 	.word	0x0800bc61
 800abac:	20000040 	.word	0x20000040

0800abb0 <cleanup_stdio>:
 800abb0:	6841      	ldr	r1, [r0, #4]
 800abb2:	4b0c      	ldr	r3, [pc, #48]	@ (800abe4 <cleanup_stdio+0x34>)
 800abb4:	4299      	cmp	r1, r3
 800abb6:	b510      	push	{r4, lr}
 800abb8:	4604      	mov	r4, r0
 800abba:	d001      	beq.n	800abc0 <cleanup_stdio+0x10>
 800abbc:	f001 f850 	bl	800bc60 <_fflush_r>
 800abc0:	68a1      	ldr	r1, [r4, #8]
 800abc2:	4b09      	ldr	r3, [pc, #36]	@ (800abe8 <cleanup_stdio+0x38>)
 800abc4:	4299      	cmp	r1, r3
 800abc6:	d002      	beq.n	800abce <cleanup_stdio+0x1e>
 800abc8:	4620      	mov	r0, r4
 800abca:	f001 f849 	bl	800bc60 <_fflush_r>
 800abce:	68e1      	ldr	r1, [r4, #12]
 800abd0:	4b06      	ldr	r3, [pc, #24]	@ (800abec <cleanup_stdio+0x3c>)
 800abd2:	4299      	cmp	r1, r3
 800abd4:	d004      	beq.n	800abe0 <cleanup_stdio+0x30>
 800abd6:	4620      	mov	r0, r4
 800abd8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800abdc:	f001 b840 	b.w	800bc60 <_fflush_r>
 800abe0:	bd10      	pop	{r4, pc}
 800abe2:	bf00      	nop
 800abe4:	20000450 	.word	0x20000450
 800abe8:	200004b8 	.word	0x200004b8
 800abec:	20000520 	.word	0x20000520

0800abf0 <global_stdio_init.part.0>:
 800abf0:	b510      	push	{r4, lr}
 800abf2:	4b0b      	ldr	r3, [pc, #44]	@ (800ac20 <global_stdio_init.part.0+0x30>)
 800abf4:	2104      	movs	r1, #4
 800abf6:	4c0b      	ldr	r4, [pc, #44]	@ (800ac24 <global_stdio_init.part.0+0x34>)
 800abf8:	4a0b      	ldr	r2, [pc, #44]	@ (800ac28 <global_stdio_init.part.0+0x38>)
 800abfa:	4620      	mov	r0, r4
 800abfc:	601a      	str	r2, [r3, #0]
 800abfe:	2200      	movs	r2, #0
 800ac00:	f7ff ff94 	bl	800ab2c <std>
 800ac04:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800ac08:	2201      	movs	r2, #1
 800ac0a:	2109      	movs	r1, #9
 800ac0c:	f7ff ff8e 	bl	800ab2c <std>
 800ac10:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800ac14:	2202      	movs	r2, #2
 800ac16:	2112      	movs	r1, #18
 800ac18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ac1c:	f7ff bf86 	b.w	800ab2c <std>
 800ac20:	20000588 	.word	0x20000588
 800ac24:	20000450 	.word	0x20000450
 800ac28:	0800ab99 	.word	0x0800ab99

0800ac2c <__sfp_lock_acquire>:
 800ac2c:	4801      	ldr	r0, [pc, #4]	@ (800ac34 <__sfp_lock_acquire+0x8>)
 800ac2e:	f000 b872 	b.w	800ad16 <__retarget_lock_acquire_recursive>
 800ac32:	bf00      	nop
 800ac34:	2000058d 	.word	0x2000058d

0800ac38 <__sfp_lock_release>:
 800ac38:	4801      	ldr	r0, [pc, #4]	@ (800ac40 <__sfp_lock_release+0x8>)
 800ac3a:	f000 b86d 	b.w	800ad18 <__retarget_lock_release_recursive>
 800ac3e:	bf00      	nop
 800ac40:	2000058d 	.word	0x2000058d

0800ac44 <__sinit>:
 800ac44:	b510      	push	{r4, lr}
 800ac46:	4604      	mov	r4, r0
 800ac48:	f7ff fff0 	bl	800ac2c <__sfp_lock_acquire>
 800ac4c:	6a23      	ldr	r3, [r4, #32]
 800ac4e:	b11b      	cbz	r3, 800ac58 <__sinit+0x14>
 800ac50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ac54:	f7ff bff0 	b.w	800ac38 <__sfp_lock_release>
 800ac58:	4b04      	ldr	r3, [pc, #16]	@ (800ac6c <__sinit+0x28>)
 800ac5a:	6223      	str	r3, [r4, #32]
 800ac5c:	4b04      	ldr	r3, [pc, #16]	@ (800ac70 <__sinit+0x2c>)
 800ac5e:	681b      	ldr	r3, [r3, #0]
 800ac60:	2b00      	cmp	r3, #0
 800ac62:	d1f5      	bne.n	800ac50 <__sinit+0xc>
 800ac64:	f7ff ffc4 	bl	800abf0 <global_stdio_init.part.0>
 800ac68:	e7f2      	b.n	800ac50 <__sinit+0xc>
 800ac6a:	bf00      	nop
 800ac6c:	0800abb1 	.word	0x0800abb1
 800ac70:	20000588 	.word	0x20000588

0800ac74 <_fwalk_sglue>:
 800ac74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ac78:	4607      	mov	r7, r0
 800ac7a:	4688      	mov	r8, r1
 800ac7c:	4614      	mov	r4, r2
 800ac7e:	2600      	movs	r6, #0
 800ac80:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ac84:	f1b9 0901 	subs.w	r9, r9, #1
 800ac88:	d505      	bpl.n	800ac96 <_fwalk_sglue+0x22>
 800ac8a:	6824      	ldr	r4, [r4, #0]
 800ac8c:	2c00      	cmp	r4, #0
 800ac8e:	d1f7      	bne.n	800ac80 <_fwalk_sglue+0xc>
 800ac90:	4630      	mov	r0, r6
 800ac92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ac96:	89ab      	ldrh	r3, [r5, #12]
 800ac98:	2b01      	cmp	r3, #1
 800ac9a:	d907      	bls.n	800acac <_fwalk_sglue+0x38>
 800ac9c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800aca0:	3301      	adds	r3, #1
 800aca2:	d003      	beq.n	800acac <_fwalk_sglue+0x38>
 800aca4:	4629      	mov	r1, r5
 800aca6:	4638      	mov	r0, r7
 800aca8:	47c0      	blx	r8
 800acaa:	4306      	orrs	r6, r0
 800acac:	3568      	adds	r5, #104	@ 0x68
 800acae:	e7e9      	b.n	800ac84 <_fwalk_sglue+0x10>

0800acb0 <memset>:
 800acb0:	4402      	add	r2, r0
 800acb2:	4603      	mov	r3, r0
 800acb4:	4293      	cmp	r3, r2
 800acb6:	d100      	bne.n	800acba <memset+0xa>
 800acb8:	4770      	bx	lr
 800acba:	f803 1b01 	strb.w	r1, [r3], #1
 800acbe:	e7f9      	b.n	800acb4 <memset+0x4>

0800acc0 <__errno>:
 800acc0:	4b01      	ldr	r3, [pc, #4]	@ (800acc8 <__errno+0x8>)
 800acc2:	6818      	ldr	r0, [r3, #0]
 800acc4:	4770      	bx	lr
 800acc6:	bf00      	nop
 800acc8:	2000003c 	.word	0x2000003c

0800accc <__libc_init_array>:
 800accc:	b570      	push	{r4, r5, r6, lr}
 800acce:	4d0d      	ldr	r5, [pc, #52]	@ (800ad04 <__libc_init_array+0x38>)
 800acd0:	2600      	movs	r6, #0
 800acd2:	4c0d      	ldr	r4, [pc, #52]	@ (800ad08 <__libc_init_array+0x3c>)
 800acd4:	1b64      	subs	r4, r4, r5
 800acd6:	10a4      	asrs	r4, r4, #2
 800acd8:	42a6      	cmp	r6, r4
 800acda:	d109      	bne.n	800acf0 <__libc_init_array+0x24>
 800acdc:	4d0b      	ldr	r5, [pc, #44]	@ (800ad0c <__libc_init_array+0x40>)
 800acde:	2600      	movs	r6, #0
 800ace0:	4c0b      	ldr	r4, [pc, #44]	@ (800ad10 <__libc_init_array+0x44>)
 800ace2:	f001 ff6d 	bl	800cbc0 <_init>
 800ace6:	1b64      	subs	r4, r4, r5
 800ace8:	10a4      	asrs	r4, r4, #2
 800acea:	42a6      	cmp	r6, r4
 800acec:	d105      	bne.n	800acfa <__libc_init_array+0x2e>
 800acee:	bd70      	pop	{r4, r5, r6, pc}
 800acf0:	f855 3b04 	ldr.w	r3, [r5], #4
 800acf4:	3601      	adds	r6, #1
 800acf6:	4798      	blx	r3
 800acf8:	e7ee      	b.n	800acd8 <__libc_init_array+0xc>
 800acfa:	f855 3b04 	ldr.w	r3, [r5], #4
 800acfe:	3601      	adds	r6, #1
 800ad00:	4798      	blx	r3
 800ad02:	e7f2      	b.n	800acea <__libc_init_array+0x1e>
 800ad04:	0800d4d4 	.word	0x0800d4d4
 800ad08:	0800d4d4 	.word	0x0800d4d4
 800ad0c:	0800d4d4 	.word	0x0800d4d4
 800ad10:	0800d4d8 	.word	0x0800d4d8

0800ad14 <__retarget_lock_init_recursive>:
 800ad14:	4770      	bx	lr

0800ad16 <__retarget_lock_acquire_recursive>:
 800ad16:	4770      	bx	lr

0800ad18 <__retarget_lock_release_recursive>:
 800ad18:	4770      	bx	lr
	...

0800ad1c <_localeconv_r>:
 800ad1c:	4800      	ldr	r0, [pc, #0]	@ (800ad20 <_localeconv_r+0x4>)
 800ad1e:	4770      	bx	lr
 800ad20:	2000017c 	.word	0x2000017c

0800ad24 <memchr>:
 800ad24:	b2c9      	uxtb	r1, r1
 800ad26:	4603      	mov	r3, r0
 800ad28:	4402      	add	r2, r0
 800ad2a:	b510      	push	{r4, lr}
 800ad2c:	4293      	cmp	r3, r2
 800ad2e:	4618      	mov	r0, r3
 800ad30:	d101      	bne.n	800ad36 <memchr+0x12>
 800ad32:	2000      	movs	r0, #0
 800ad34:	e003      	b.n	800ad3e <memchr+0x1a>
 800ad36:	7804      	ldrb	r4, [r0, #0]
 800ad38:	3301      	adds	r3, #1
 800ad3a:	428c      	cmp	r4, r1
 800ad3c:	d1f6      	bne.n	800ad2c <memchr+0x8>
 800ad3e:	bd10      	pop	{r4, pc}

0800ad40 <quorem>:
 800ad40:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad44:	6903      	ldr	r3, [r0, #16]
 800ad46:	4607      	mov	r7, r0
 800ad48:	690c      	ldr	r4, [r1, #16]
 800ad4a:	42a3      	cmp	r3, r4
 800ad4c:	f2c0 8083 	blt.w	800ae56 <quorem+0x116>
 800ad50:	3c01      	subs	r4, #1
 800ad52:	f100 0514 	add.w	r5, r0, #20
 800ad56:	f101 0814 	add.w	r8, r1, #20
 800ad5a:	00a3      	lsls	r3, r4, #2
 800ad5c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ad60:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800ad64:	9300      	str	r3, [sp, #0]
 800ad66:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ad6a:	9301      	str	r3, [sp, #4]
 800ad6c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800ad70:	3301      	adds	r3, #1
 800ad72:	429a      	cmp	r2, r3
 800ad74:	fbb2 f6f3 	udiv	r6, r2, r3
 800ad78:	d331      	bcc.n	800adde <quorem+0x9e>
 800ad7a:	f04f 0a00 	mov.w	sl, #0
 800ad7e:	46c4      	mov	ip, r8
 800ad80:	46ae      	mov	lr, r5
 800ad82:	46d3      	mov	fp, sl
 800ad84:	f85c 3b04 	ldr.w	r3, [ip], #4
 800ad88:	b298      	uxth	r0, r3
 800ad8a:	45e1      	cmp	r9, ip
 800ad8c:	ea4f 4313 	mov.w	r3, r3, lsr #16
 800ad90:	fb06 a000 	mla	r0, r6, r0, sl
 800ad94:	ea4f 4210 	mov.w	r2, r0, lsr #16
 800ad98:	b280      	uxth	r0, r0
 800ad9a:	fb06 2303 	mla	r3, r6, r3, r2
 800ad9e:	f8de 2000 	ldr.w	r2, [lr]
 800ada2:	b292      	uxth	r2, r2
 800ada4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ada8:	eba2 0200 	sub.w	r2, r2, r0
 800adac:	b29b      	uxth	r3, r3
 800adae:	f8de 0000 	ldr.w	r0, [lr]
 800adb2:	445a      	add	r2, fp
 800adb4:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800adb8:	b292      	uxth	r2, r2
 800adba:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800adbe:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800adc2:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800adc6:	f84e 2b04 	str.w	r2, [lr], #4
 800adca:	d2db      	bcs.n	800ad84 <quorem+0x44>
 800adcc:	9b00      	ldr	r3, [sp, #0]
 800adce:	58eb      	ldr	r3, [r5, r3]
 800add0:	b92b      	cbnz	r3, 800adde <quorem+0x9e>
 800add2:	9b01      	ldr	r3, [sp, #4]
 800add4:	3b04      	subs	r3, #4
 800add6:	429d      	cmp	r5, r3
 800add8:	461a      	mov	r2, r3
 800adda:	d330      	bcc.n	800ae3e <quorem+0xfe>
 800addc:	613c      	str	r4, [r7, #16]
 800adde:	4638      	mov	r0, r7
 800ade0:	f001 f9e8 	bl	800c1b4 <__mcmp>
 800ade4:	2800      	cmp	r0, #0
 800ade6:	db26      	blt.n	800ae36 <quorem+0xf6>
 800ade8:	4629      	mov	r1, r5
 800adea:	2000      	movs	r0, #0
 800adec:	f858 2b04 	ldr.w	r2, [r8], #4
 800adf0:	f8d1 c000 	ldr.w	ip, [r1]
 800adf4:	fa1f fe82 	uxth.w	lr, r2
 800adf8:	45c1      	cmp	r9, r8
 800adfa:	fa1f f38c 	uxth.w	r3, ip
 800adfe:	ea4f 4212 	mov.w	r2, r2, lsr #16
 800ae02:	eba3 030e 	sub.w	r3, r3, lr
 800ae06:	4403      	add	r3, r0
 800ae08:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800ae0c:	b29b      	uxth	r3, r3
 800ae0e:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800ae12:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ae16:	ea4f 4022 	mov.w	r0, r2, asr #16
 800ae1a:	f841 3b04 	str.w	r3, [r1], #4
 800ae1e:	d2e5      	bcs.n	800adec <quorem+0xac>
 800ae20:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ae24:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ae28:	b922      	cbnz	r2, 800ae34 <quorem+0xf4>
 800ae2a:	3b04      	subs	r3, #4
 800ae2c:	429d      	cmp	r5, r3
 800ae2e:	461a      	mov	r2, r3
 800ae30:	d30b      	bcc.n	800ae4a <quorem+0x10a>
 800ae32:	613c      	str	r4, [r7, #16]
 800ae34:	3601      	adds	r6, #1
 800ae36:	4630      	mov	r0, r6
 800ae38:	b003      	add	sp, #12
 800ae3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae3e:	6812      	ldr	r2, [r2, #0]
 800ae40:	3b04      	subs	r3, #4
 800ae42:	2a00      	cmp	r2, #0
 800ae44:	d1ca      	bne.n	800addc <quorem+0x9c>
 800ae46:	3c01      	subs	r4, #1
 800ae48:	e7c5      	b.n	800add6 <quorem+0x96>
 800ae4a:	6812      	ldr	r2, [r2, #0]
 800ae4c:	3b04      	subs	r3, #4
 800ae4e:	2a00      	cmp	r2, #0
 800ae50:	d1ef      	bne.n	800ae32 <quorem+0xf2>
 800ae52:	3c01      	subs	r4, #1
 800ae54:	e7ea      	b.n	800ae2c <quorem+0xec>
 800ae56:	2000      	movs	r0, #0
 800ae58:	e7ee      	b.n	800ae38 <quorem+0xf8>
 800ae5a:	0000      	movs	r0, r0
 800ae5c:	0000      	movs	r0, r0
	...

0800ae60 <_dtoa_r>:
 800ae60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae64:	69c7      	ldr	r7, [r0, #28]
 800ae66:	b097      	sub	sp, #92	@ 0x5c
 800ae68:	4681      	mov	r9, r0
 800ae6a:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800ae6c:	9107      	str	r1, [sp, #28]
 800ae6e:	920c      	str	r2, [sp, #48]	@ 0x30
 800ae70:	9311      	str	r3, [sp, #68]	@ 0x44
 800ae72:	ec55 4b10 	vmov	r4, r5, d0
 800ae76:	ed8d 0b04 	vstr	d0, [sp, #16]
 800ae7a:	b97f      	cbnz	r7, 800ae9c <_dtoa_r+0x3c>
 800ae7c:	2010      	movs	r0, #16
 800ae7e:	f000 fdc1 	bl	800ba04 <malloc>
 800ae82:	4602      	mov	r2, r0
 800ae84:	f8c9 001c 	str.w	r0, [r9, #28]
 800ae88:	b920      	cbnz	r0, 800ae94 <_dtoa_r+0x34>
 800ae8a:	4ba9      	ldr	r3, [pc, #676]	@ (800b130 <_dtoa_r+0x2d0>)
 800ae8c:	21ef      	movs	r1, #239	@ 0xef
 800ae8e:	48a9      	ldr	r0, [pc, #676]	@ (800b134 <_dtoa_r+0x2d4>)
 800ae90:	f001 fb44 	bl	800c51c <__assert_func>
 800ae94:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800ae98:	6007      	str	r7, [r0, #0]
 800ae9a:	60c7      	str	r7, [r0, #12]
 800ae9c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800aea0:	6819      	ldr	r1, [r3, #0]
 800aea2:	b159      	cbz	r1, 800aebc <_dtoa_r+0x5c>
 800aea4:	685a      	ldr	r2, [r3, #4]
 800aea6:	2301      	movs	r3, #1
 800aea8:	4648      	mov	r0, r9
 800aeaa:	4093      	lsls	r3, r2
 800aeac:	604a      	str	r2, [r1, #4]
 800aeae:	608b      	str	r3, [r1, #8]
 800aeb0:	f000 ff4a 	bl	800bd48 <_Bfree>
 800aeb4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800aeb8:	2200      	movs	r2, #0
 800aeba:	601a      	str	r2, [r3, #0]
 800aebc:	1e2b      	subs	r3, r5, #0
 800aebe:	bfb7      	itett	lt
 800aec0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800aec4:	2300      	movge	r3, #0
 800aec6:	2201      	movlt	r2, #1
 800aec8:	9305      	strlt	r3, [sp, #20]
 800aeca:	bfa8      	it	ge
 800aecc:	6033      	strge	r3, [r6, #0]
 800aece:	9f05      	ldr	r7, [sp, #20]
 800aed0:	4b99      	ldr	r3, [pc, #612]	@ (800b138 <_dtoa_r+0x2d8>)
 800aed2:	bfb8      	it	lt
 800aed4:	6032      	strlt	r2, [r6, #0]
 800aed6:	43bb      	bics	r3, r7
 800aed8:	d112      	bne.n	800af00 <_dtoa_r+0xa0>
 800aeda:	f242 730f 	movw	r3, #9999	@ 0x270f
 800aede:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800aee0:	6013      	str	r3, [r2, #0]
 800aee2:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800aee6:	4323      	orrs	r3, r4
 800aee8:	f000 855a 	beq.w	800b9a0 <_dtoa_r+0xb40>
 800aeec:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800aeee:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 800b14c <_dtoa_r+0x2ec>
 800aef2:	2b00      	cmp	r3, #0
 800aef4:	f000 855c 	beq.w	800b9b0 <_dtoa_r+0xb50>
 800aef8:	f10a 0303 	add.w	r3, sl, #3
 800aefc:	f000 bd56 	b.w	800b9ac <_dtoa_r+0xb4c>
 800af00:	ed9d 7b04 	vldr	d7, [sp, #16]
 800af04:	2200      	movs	r2, #0
 800af06:	2300      	movs	r3, #0
 800af08:	ec51 0b17 	vmov	r0, r1, d7
 800af0c:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800af10:	f7f5 fdde 	bl	8000ad0 <__aeabi_dcmpeq>
 800af14:	4680      	mov	r8, r0
 800af16:	b158      	cbz	r0, 800af30 <_dtoa_r+0xd0>
 800af18:	2301      	movs	r3, #1
 800af1a:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800af1c:	6013      	str	r3, [r2, #0]
 800af1e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800af20:	b113      	cbz	r3, 800af28 <_dtoa_r+0xc8>
 800af22:	4b86      	ldr	r3, [pc, #536]	@ (800b13c <_dtoa_r+0x2dc>)
 800af24:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800af26:	6013      	str	r3, [r2, #0]
 800af28:	f8df a224 	ldr.w	sl, [pc, #548]	@ 800b150 <_dtoa_r+0x2f0>
 800af2c:	f000 bd40 	b.w	800b9b0 <_dtoa_r+0xb50>
 800af30:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800af34:	aa14      	add	r2, sp, #80	@ 0x50
 800af36:	a915      	add	r1, sp, #84	@ 0x54
 800af38:	4648      	mov	r0, r9
 800af3a:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 800af3e:	f001 f9ed 	bl	800c31c <__d2b>
 800af42:	9002      	str	r0, [sp, #8]
 800af44:	2e00      	cmp	r6, #0
 800af46:	d076      	beq.n	800b036 <_dtoa_r+0x1d6>
 800af48:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800af4a:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800af4e:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 800af52:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800af56:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800af5a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800af5e:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800af62:	4619      	mov	r1, r3
 800af64:	2200      	movs	r2, #0
 800af66:	4b76      	ldr	r3, [pc, #472]	@ (800b140 <_dtoa_r+0x2e0>)
 800af68:	f7f5 f992 	bl	8000290 <__aeabi_dsub>
 800af6c:	a36a      	add	r3, pc, #424	@ (adr r3, 800b118 <_dtoa_r+0x2b8>)
 800af6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af72:	f7f5 fb45 	bl	8000600 <__aeabi_dmul>
 800af76:	a36a      	add	r3, pc, #424	@ (adr r3, 800b120 <_dtoa_r+0x2c0>)
 800af78:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af7c:	f7f5 f98a 	bl	8000294 <__adddf3>
 800af80:	4604      	mov	r4, r0
 800af82:	460d      	mov	r5, r1
 800af84:	4630      	mov	r0, r6
 800af86:	f7f5 fad1 	bl	800052c <__aeabi_i2d>
 800af8a:	a367      	add	r3, pc, #412	@ (adr r3, 800b128 <_dtoa_r+0x2c8>)
 800af8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af90:	f7f5 fb36 	bl	8000600 <__aeabi_dmul>
 800af94:	4602      	mov	r2, r0
 800af96:	460b      	mov	r3, r1
 800af98:	4620      	mov	r0, r4
 800af9a:	4629      	mov	r1, r5
 800af9c:	f7f5 f97a 	bl	8000294 <__adddf3>
 800afa0:	4604      	mov	r4, r0
 800afa2:	460d      	mov	r5, r1
 800afa4:	f7f5 fddc 	bl	8000b60 <__aeabi_d2iz>
 800afa8:	2200      	movs	r2, #0
 800afaa:	4607      	mov	r7, r0
 800afac:	2300      	movs	r3, #0
 800afae:	4620      	mov	r0, r4
 800afb0:	4629      	mov	r1, r5
 800afb2:	f7f5 fd97 	bl	8000ae4 <__aeabi_dcmplt>
 800afb6:	b140      	cbz	r0, 800afca <_dtoa_r+0x16a>
 800afb8:	4638      	mov	r0, r7
 800afba:	f7f5 fab7 	bl	800052c <__aeabi_i2d>
 800afbe:	4622      	mov	r2, r4
 800afc0:	462b      	mov	r3, r5
 800afc2:	f7f5 fd85 	bl	8000ad0 <__aeabi_dcmpeq>
 800afc6:	b900      	cbnz	r0, 800afca <_dtoa_r+0x16a>
 800afc8:	3f01      	subs	r7, #1
 800afca:	2f16      	cmp	r7, #22
 800afcc:	d852      	bhi.n	800b074 <_dtoa_r+0x214>
 800afce:	4b5d      	ldr	r3, [pc, #372]	@ (800b144 <_dtoa_r+0x2e4>)
 800afd0:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800afd4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800afd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afdc:	f7f5 fd82 	bl	8000ae4 <__aeabi_dcmplt>
 800afe0:	2800      	cmp	r0, #0
 800afe2:	d049      	beq.n	800b078 <_dtoa_r+0x218>
 800afe4:	3f01      	subs	r7, #1
 800afe6:	2300      	movs	r3, #0
 800afe8:	9310      	str	r3, [sp, #64]	@ 0x40
 800afea:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800afec:	1b9b      	subs	r3, r3, r6
 800afee:	1e5a      	subs	r2, r3, #1
 800aff0:	bf4c      	ite	mi
 800aff2:	f1c3 0301 	rsbmi	r3, r3, #1
 800aff6:	2300      	movpl	r3, #0
 800aff8:	9206      	str	r2, [sp, #24]
 800affa:	bf45      	ittet	mi
 800affc:	9300      	strmi	r3, [sp, #0]
 800affe:	2300      	movmi	r3, #0
 800b000:	9300      	strpl	r3, [sp, #0]
 800b002:	9306      	strmi	r3, [sp, #24]
 800b004:	2f00      	cmp	r7, #0
 800b006:	db39      	blt.n	800b07c <_dtoa_r+0x21c>
 800b008:	9b06      	ldr	r3, [sp, #24]
 800b00a:	970d      	str	r7, [sp, #52]	@ 0x34
 800b00c:	443b      	add	r3, r7
 800b00e:	9306      	str	r3, [sp, #24]
 800b010:	2300      	movs	r3, #0
 800b012:	9308      	str	r3, [sp, #32]
 800b014:	9b07      	ldr	r3, [sp, #28]
 800b016:	2b09      	cmp	r3, #9
 800b018:	d863      	bhi.n	800b0e2 <_dtoa_r+0x282>
 800b01a:	2b05      	cmp	r3, #5
 800b01c:	bfc5      	ittet	gt
 800b01e:	3b04      	subgt	r3, #4
 800b020:	2400      	movgt	r4, #0
 800b022:	2401      	movle	r4, #1
 800b024:	9307      	strgt	r3, [sp, #28]
 800b026:	9b07      	ldr	r3, [sp, #28]
 800b028:	3b02      	subs	r3, #2
 800b02a:	2b03      	cmp	r3, #3
 800b02c:	d865      	bhi.n	800b0fa <_dtoa_r+0x29a>
 800b02e:	e8df f003 	tbb	[pc, r3]
 800b032:	5654      	.short	0x5654
 800b034:	2d39      	.short	0x2d39
 800b036:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800b03a:	441e      	add	r6, r3
 800b03c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800b040:	2b20      	cmp	r3, #32
 800b042:	bfc9      	itett	gt
 800b044:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800b048:	f1c3 0320 	rsble	r3, r3, #32
 800b04c:	409f      	lslgt	r7, r3
 800b04e:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800b052:	bfd8      	it	le
 800b054:	fa04 f003 	lslle.w	r0, r4, r3
 800b058:	f106 36ff 	add.w	r6, r6, #4294967295	@ 0xffffffff
 800b05c:	bfc4      	itt	gt
 800b05e:	fa24 f303 	lsrgt.w	r3, r4, r3
 800b062:	ea47 0003 	orrgt.w	r0, r7, r3
 800b066:	f7f5 fa51 	bl	800050c <__aeabi_ui2d>
 800b06a:	2201      	movs	r2, #1
 800b06c:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800b070:	9212      	str	r2, [sp, #72]	@ 0x48
 800b072:	e776      	b.n	800af62 <_dtoa_r+0x102>
 800b074:	2301      	movs	r3, #1
 800b076:	e7b7      	b.n	800afe8 <_dtoa_r+0x188>
 800b078:	9010      	str	r0, [sp, #64]	@ 0x40
 800b07a:	e7b6      	b.n	800afea <_dtoa_r+0x18a>
 800b07c:	9b00      	ldr	r3, [sp, #0]
 800b07e:	1bdb      	subs	r3, r3, r7
 800b080:	9300      	str	r3, [sp, #0]
 800b082:	427b      	negs	r3, r7
 800b084:	9308      	str	r3, [sp, #32]
 800b086:	2300      	movs	r3, #0
 800b088:	930d      	str	r3, [sp, #52]	@ 0x34
 800b08a:	e7c3      	b.n	800b014 <_dtoa_r+0x1b4>
 800b08c:	2301      	movs	r3, #1
 800b08e:	9309      	str	r3, [sp, #36]	@ 0x24
 800b090:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b092:	eb07 0b03 	add.w	fp, r7, r3
 800b096:	f10b 0301 	add.w	r3, fp, #1
 800b09a:	2b01      	cmp	r3, #1
 800b09c:	9303      	str	r3, [sp, #12]
 800b09e:	bfb8      	it	lt
 800b0a0:	2301      	movlt	r3, #1
 800b0a2:	e006      	b.n	800b0b2 <_dtoa_r+0x252>
 800b0a4:	2301      	movs	r3, #1
 800b0a6:	9309      	str	r3, [sp, #36]	@ 0x24
 800b0a8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b0aa:	2b00      	cmp	r3, #0
 800b0ac:	dd28      	ble.n	800b100 <_dtoa_r+0x2a0>
 800b0ae:	469b      	mov	fp, r3
 800b0b0:	9303      	str	r3, [sp, #12]
 800b0b2:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800b0b6:	2100      	movs	r1, #0
 800b0b8:	2204      	movs	r2, #4
 800b0ba:	f102 0514 	add.w	r5, r2, #20
 800b0be:	429d      	cmp	r5, r3
 800b0c0:	d926      	bls.n	800b110 <_dtoa_r+0x2b0>
 800b0c2:	6041      	str	r1, [r0, #4]
 800b0c4:	4648      	mov	r0, r9
 800b0c6:	f000 fdff 	bl	800bcc8 <_Balloc>
 800b0ca:	4682      	mov	sl, r0
 800b0cc:	2800      	cmp	r0, #0
 800b0ce:	d141      	bne.n	800b154 <_dtoa_r+0x2f4>
 800b0d0:	4b1d      	ldr	r3, [pc, #116]	@ (800b148 <_dtoa_r+0x2e8>)
 800b0d2:	4602      	mov	r2, r0
 800b0d4:	f240 11af 	movw	r1, #431	@ 0x1af
 800b0d8:	e6d9      	b.n	800ae8e <_dtoa_r+0x2e>
 800b0da:	2300      	movs	r3, #0
 800b0dc:	e7e3      	b.n	800b0a6 <_dtoa_r+0x246>
 800b0de:	2300      	movs	r3, #0
 800b0e0:	e7d5      	b.n	800b08e <_dtoa_r+0x22e>
 800b0e2:	2401      	movs	r4, #1
 800b0e4:	2300      	movs	r3, #0
 800b0e6:	9409      	str	r4, [sp, #36]	@ 0x24
 800b0e8:	9307      	str	r3, [sp, #28]
 800b0ea:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
 800b0ee:	2200      	movs	r2, #0
 800b0f0:	2312      	movs	r3, #18
 800b0f2:	f8cd b00c 	str.w	fp, [sp, #12]
 800b0f6:	920c      	str	r2, [sp, #48]	@ 0x30
 800b0f8:	e7db      	b.n	800b0b2 <_dtoa_r+0x252>
 800b0fa:	2301      	movs	r3, #1
 800b0fc:	9309      	str	r3, [sp, #36]	@ 0x24
 800b0fe:	e7f4      	b.n	800b0ea <_dtoa_r+0x28a>
 800b100:	f04f 0b01 	mov.w	fp, #1
 800b104:	465b      	mov	r3, fp
 800b106:	f8cd b00c 	str.w	fp, [sp, #12]
 800b10a:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 800b10e:	e7d0      	b.n	800b0b2 <_dtoa_r+0x252>
 800b110:	3101      	adds	r1, #1
 800b112:	0052      	lsls	r2, r2, #1
 800b114:	e7d1      	b.n	800b0ba <_dtoa_r+0x25a>
 800b116:	bf00      	nop
 800b118:	636f4361 	.word	0x636f4361
 800b11c:	3fd287a7 	.word	0x3fd287a7
 800b120:	8b60c8b3 	.word	0x8b60c8b3
 800b124:	3fc68a28 	.word	0x3fc68a28
 800b128:	509f79fb 	.word	0x509f79fb
 800b12c:	3fd34413 	.word	0x3fd34413
 800b130:	0800d199 	.word	0x0800d199
 800b134:	0800d1b0 	.word	0x0800d1b0
 800b138:	7ff00000 	.word	0x7ff00000
 800b13c:	0800d169 	.word	0x0800d169
 800b140:	3ff80000 	.word	0x3ff80000
 800b144:	0800d300 	.word	0x0800d300
 800b148:	0800d208 	.word	0x0800d208
 800b14c:	0800d195 	.word	0x0800d195
 800b150:	0800d168 	.word	0x0800d168
 800b154:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800b158:	6018      	str	r0, [r3, #0]
 800b15a:	9b03      	ldr	r3, [sp, #12]
 800b15c:	2b0e      	cmp	r3, #14
 800b15e:	f200 80a1 	bhi.w	800b2a4 <_dtoa_r+0x444>
 800b162:	2c00      	cmp	r4, #0
 800b164:	f000 809e 	beq.w	800b2a4 <_dtoa_r+0x444>
 800b168:	2f00      	cmp	r7, #0
 800b16a:	dd33      	ble.n	800b1d4 <_dtoa_r+0x374>
 800b16c:	f007 020f 	and.w	r2, r7, #15
 800b170:	4b9b      	ldr	r3, [pc, #620]	@ (800b3e0 <_dtoa_r+0x580>)
 800b172:	05f8      	lsls	r0, r7, #23
 800b174:	ea4f 1427 	mov.w	r4, r7, asr #4
 800b178:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b17c:	ed93 7b00 	vldr	d7, [r3]
 800b180:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 800b184:	d516      	bpl.n	800b1b4 <_dtoa_r+0x354>
 800b186:	4b97      	ldr	r3, [pc, #604]	@ (800b3e4 <_dtoa_r+0x584>)
 800b188:	f004 040f 	and.w	r4, r4, #15
 800b18c:	2603      	movs	r6, #3
 800b18e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b192:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800b196:	f7f5 fb5d 	bl	8000854 <__aeabi_ddiv>
 800b19a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b19e:	4d91      	ldr	r5, [pc, #580]	@ (800b3e4 <_dtoa_r+0x584>)
 800b1a0:	b954      	cbnz	r4, 800b1b8 <_dtoa_r+0x358>
 800b1a2:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800b1a6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b1aa:	f7f5 fb53 	bl	8000854 <__aeabi_ddiv>
 800b1ae:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b1b2:	e028      	b.n	800b206 <_dtoa_r+0x3a6>
 800b1b4:	2602      	movs	r6, #2
 800b1b6:	e7f2      	b.n	800b19e <_dtoa_r+0x33e>
 800b1b8:	07e1      	lsls	r1, r4, #31
 800b1ba:	d508      	bpl.n	800b1ce <_dtoa_r+0x36e>
 800b1bc:	3601      	adds	r6, #1
 800b1be:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800b1c2:	e9d5 2300 	ldrd	r2, r3, [r5]
 800b1c6:	f7f5 fa1b 	bl	8000600 <__aeabi_dmul>
 800b1ca:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800b1ce:	1064      	asrs	r4, r4, #1
 800b1d0:	3508      	adds	r5, #8
 800b1d2:	e7e5      	b.n	800b1a0 <_dtoa_r+0x340>
 800b1d4:	f000 80af 	beq.w	800b336 <_dtoa_r+0x4d6>
 800b1d8:	427c      	negs	r4, r7
 800b1da:	4b81      	ldr	r3, [pc, #516]	@ (800b3e0 <_dtoa_r+0x580>)
 800b1dc:	4d81      	ldr	r5, [pc, #516]	@ (800b3e4 <_dtoa_r+0x584>)
 800b1de:	2602      	movs	r6, #2
 800b1e0:	f004 020f 	and.w	r2, r4, #15
 800b1e4:	1124      	asrs	r4, r4, #4
 800b1e6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b1ea:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800b1ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1f2:	f7f5 fa05 	bl	8000600 <__aeabi_dmul>
 800b1f6:	2300      	movs	r3, #0
 800b1f8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b1fc:	2c00      	cmp	r4, #0
 800b1fe:	f040 808f 	bne.w	800b320 <_dtoa_r+0x4c0>
 800b202:	2b00      	cmp	r3, #0
 800b204:	d1d3      	bne.n	800b1ae <_dtoa_r+0x34e>
 800b206:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800b208:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800b20c:	2b00      	cmp	r3, #0
 800b20e:	f000 8094 	beq.w	800b33a <_dtoa_r+0x4da>
 800b212:	2200      	movs	r2, #0
 800b214:	4b74      	ldr	r3, [pc, #464]	@ (800b3e8 <_dtoa_r+0x588>)
 800b216:	4620      	mov	r0, r4
 800b218:	4629      	mov	r1, r5
 800b21a:	f7f5 fc63 	bl	8000ae4 <__aeabi_dcmplt>
 800b21e:	2800      	cmp	r0, #0
 800b220:	f000 808b 	beq.w	800b33a <_dtoa_r+0x4da>
 800b224:	9b03      	ldr	r3, [sp, #12]
 800b226:	2b00      	cmp	r3, #0
 800b228:	f000 8087 	beq.w	800b33a <_dtoa_r+0x4da>
 800b22c:	f1bb 0f00 	cmp.w	fp, #0
 800b230:	dd34      	ble.n	800b29c <_dtoa_r+0x43c>
 800b232:	4620      	mov	r0, r4
 800b234:	f107 38ff 	add.w	r8, r7, #4294967295	@ 0xffffffff
 800b238:	3601      	adds	r6, #1
 800b23a:	465c      	mov	r4, fp
 800b23c:	2200      	movs	r2, #0
 800b23e:	4b6b      	ldr	r3, [pc, #428]	@ (800b3ec <_dtoa_r+0x58c>)
 800b240:	4629      	mov	r1, r5
 800b242:	f7f5 f9dd 	bl	8000600 <__aeabi_dmul>
 800b246:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b24a:	4630      	mov	r0, r6
 800b24c:	f7f5 f96e 	bl	800052c <__aeabi_i2d>
 800b250:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b254:	f7f5 f9d4 	bl	8000600 <__aeabi_dmul>
 800b258:	2200      	movs	r2, #0
 800b25a:	4b65      	ldr	r3, [pc, #404]	@ (800b3f0 <_dtoa_r+0x590>)
 800b25c:	f7f5 f81a 	bl	8000294 <__adddf3>
 800b260:	4605      	mov	r5, r0
 800b262:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800b266:	2c00      	cmp	r4, #0
 800b268:	d16a      	bne.n	800b340 <_dtoa_r+0x4e0>
 800b26a:	2200      	movs	r2, #0
 800b26c:	4b61      	ldr	r3, [pc, #388]	@ (800b3f4 <_dtoa_r+0x594>)
 800b26e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b272:	f7f5 f80d 	bl	8000290 <__aeabi_dsub>
 800b276:	4602      	mov	r2, r0
 800b278:	460b      	mov	r3, r1
 800b27a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800b27e:	462a      	mov	r2, r5
 800b280:	4633      	mov	r3, r6
 800b282:	f7f5 fc4d 	bl	8000b20 <__aeabi_dcmpgt>
 800b286:	2800      	cmp	r0, #0
 800b288:	f040 8298 	bne.w	800b7bc <_dtoa_r+0x95c>
 800b28c:	462a      	mov	r2, r5
 800b28e:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800b292:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b296:	f7f5 fc25 	bl	8000ae4 <__aeabi_dcmplt>
 800b29a:	bb38      	cbnz	r0, 800b2ec <_dtoa_r+0x48c>
 800b29c:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 800b2a0:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800b2a4:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800b2a6:	2b00      	cmp	r3, #0
 800b2a8:	f2c0 8157 	blt.w	800b55a <_dtoa_r+0x6fa>
 800b2ac:	2f0e      	cmp	r7, #14
 800b2ae:	f300 8154 	bgt.w	800b55a <_dtoa_r+0x6fa>
 800b2b2:	4b4b      	ldr	r3, [pc, #300]	@ (800b3e0 <_dtoa_r+0x580>)
 800b2b4:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800b2b8:	ed93 7b00 	vldr	d7, [r3]
 800b2bc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b2be:	2b00      	cmp	r3, #0
 800b2c0:	ed8d 7b00 	vstr	d7, [sp]
 800b2c4:	f280 80e5 	bge.w	800b492 <_dtoa_r+0x632>
 800b2c8:	9b03      	ldr	r3, [sp, #12]
 800b2ca:	2b00      	cmp	r3, #0
 800b2cc:	f300 80e1 	bgt.w	800b492 <_dtoa_r+0x632>
 800b2d0:	d10c      	bne.n	800b2ec <_dtoa_r+0x48c>
 800b2d2:	2200      	movs	r2, #0
 800b2d4:	4b47      	ldr	r3, [pc, #284]	@ (800b3f4 <_dtoa_r+0x594>)
 800b2d6:	ec51 0b17 	vmov	r0, r1, d7
 800b2da:	f7f5 f991 	bl	8000600 <__aeabi_dmul>
 800b2de:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b2e2:	f7f5 fc13 	bl	8000b0c <__aeabi_dcmpge>
 800b2e6:	2800      	cmp	r0, #0
 800b2e8:	f000 8266 	beq.w	800b7b8 <_dtoa_r+0x958>
 800b2ec:	2400      	movs	r4, #0
 800b2ee:	4625      	mov	r5, r4
 800b2f0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b2f2:	4656      	mov	r6, sl
 800b2f4:	ea6f 0803 	mvn.w	r8, r3
 800b2f8:	2700      	movs	r7, #0
 800b2fa:	4621      	mov	r1, r4
 800b2fc:	4648      	mov	r0, r9
 800b2fe:	f000 fd23 	bl	800bd48 <_Bfree>
 800b302:	2d00      	cmp	r5, #0
 800b304:	f000 80bd 	beq.w	800b482 <_dtoa_r+0x622>
 800b308:	b12f      	cbz	r7, 800b316 <_dtoa_r+0x4b6>
 800b30a:	42af      	cmp	r7, r5
 800b30c:	d003      	beq.n	800b316 <_dtoa_r+0x4b6>
 800b30e:	4639      	mov	r1, r7
 800b310:	4648      	mov	r0, r9
 800b312:	f000 fd19 	bl	800bd48 <_Bfree>
 800b316:	4629      	mov	r1, r5
 800b318:	4648      	mov	r0, r9
 800b31a:	f000 fd15 	bl	800bd48 <_Bfree>
 800b31e:	e0b0      	b.n	800b482 <_dtoa_r+0x622>
 800b320:	07e2      	lsls	r2, r4, #31
 800b322:	d505      	bpl.n	800b330 <_dtoa_r+0x4d0>
 800b324:	3601      	adds	r6, #1
 800b326:	e9d5 2300 	ldrd	r2, r3, [r5]
 800b32a:	f7f5 f969 	bl	8000600 <__aeabi_dmul>
 800b32e:	2301      	movs	r3, #1
 800b330:	1064      	asrs	r4, r4, #1
 800b332:	3508      	adds	r5, #8
 800b334:	e762      	b.n	800b1fc <_dtoa_r+0x39c>
 800b336:	2602      	movs	r6, #2
 800b338:	e765      	b.n	800b206 <_dtoa_r+0x3a6>
 800b33a:	46b8      	mov	r8, r7
 800b33c:	9c03      	ldr	r4, [sp, #12]
 800b33e:	e784      	b.n	800b24a <_dtoa_r+0x3ea>
 800b340:	4b27      	ldr	r3, [pc, #156]	@ (800b3e0 <_dtoa_r+0x580>)
 800b342:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800b344:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b348:	4454      	add	r4, sl
 800b34a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800b34e:	2900      	cmp	r1, #0
 800b350:	d054      	beq.n	800b3fc <_dtoa_r+0x59c>
 800b352:	2000      	movs	r0, #0
 800b354:	4928      	ldr	r1, [pc, #160]	@ (800b3f8 <_dtoa_r+0x598>)
 800b356:	f7f5 fa7d 	bl	8000854 <__aeabi_ddiv>
 800b35a:	4633      	mov	r3, r6
 800b35c:	4656      	mov	r6, sl
 800b35e:	462a      	mov	r2, r5
 800b360:	f7f4 ff96 	bl	8000290 <__aeabi_dsub>
 800b364:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800b368:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b36c:	f7f5 fbf8 	bl	8000b60 <__aeabi_d2iz>
 800b370:	4605      	mov	r5, r0
 800b372:	f7f5 f8db 	bl	800052c <__aeabi_i2d>
 800b376:	4602      	mov	r2, r0
 800b378:	460b      	mov	r3, r1
 800b37a:	3530      	adds	r5, #48	@ 0x30
 800b37c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b380:	f7f4 ff86 	bl	8000290 <__aeabi_dsub>
 800b384:	4602      	mov	r2, r0
 800b386:	460b      	mov	r3, r1
 800b388:	f806 5b01 	strb.w	r5, [r6], #1
 800b38c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800b390:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800b394:	f7f5 fba6 	bl	8000ae4 <__aeabi_dcmplt>
 800b398:	2800      	cmp	r0, #0
 800b39a:	d172      	bne.n	800b482 <_dtoa_r+0x622>
 800b39c:	2000      	movs	r0, #0
 800b39e:	4912      	ldr	r1, [pc, #72]	@ (800b3e8 <_dtoa_r+0x588>)
 800b3a0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b3a4:	f7f4 ff74 	bl	8000290 <__aeabi_dsub>
 800b3a8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800b3ac:	f7f5 fb9a 	bl	8000ae4 <__aeabi_dcmplt>
 800b3b0:	2800      	cmp	r0, #0
 800b3b2:	f040 80b4 	bne.w	800b51e <_dtoa_r+0x6be>
 800b3b6:	42a6      	cmp	r6, r4
 800b3b8:	f43f af70 	beq.w	800b29c <_dtoa_r+0x43c>
 800b3bc:	2200      	movs	r2, #0
 800b3be:	4b0b      	ldr	r3, [pc, #44]	@ (800b3ec <_dtoa_r+0x58c>)
 800b3c0:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800b3c4:	f7f5 f91c 	bl	8000600 <__aeabi_dmul>
 800b3c8:	2200      	movs	r2, #0
 800b3ca:	4b08      	ldr	r3, [pc, #32]	@ (800b3ec <_dtoa_r+0x58c>)
 800b3cc:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800b3d0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b3d4:	f7f5 f914 	bl	8000600 <__aeabi_dmul>
 800b3d8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b3dc:	e7c4      	b.n	800b368 <_dtoa_r+0x508>
 800b3de:	bf00      	nop
 800b3e0:	0800d300 	.word	0x0800d300
 800b3e4:	0800d2d8 	.word	0x0800d2d8
 800b3e8:	3ff00000 	.word	0x3ff00000
 800b3ec:	40240000 	.word	0x40240000
 800b3f0:	401c0000 	.word	0x401c0000
 800b3f4:	40140000 	.word	0x40140000
 800b3f8:	3fe00000 	.word	0x3fe00000
 800b3fc:	4631      	mov	r1, r6
 800b3fe:	4656      	mov	r6, sl
 800b400:	4628      	mov	r0, r5
 800b402:	f7f5 f8fd 	bl	8000600 <__aeabi_dmul>
 800b406:	9413      	str	r4, [sp, #76]	@ 0x4c
 800b408:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800b40c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b410:	f7f5 fba6 	bl	8000b60 <__aeabi_d2iz>
 800b414:	4605      	mov	r5, r0
 800b416:	f7f5 f889 	bl	800052c <__aeabi_i2d>
 800b41a:	4602      	mov	r2, r0
 800b41c:	3530      	adds	r5, #48	@ 0x30
 800b41e:	460b      	mov	r3, r1
 800b420:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b424:	f7f4 ff34 	bl	8000290 <__aeabi_dsub>
 800b428:	f806 5b01 	strb.w	r5, [r6], #1
 800b42c:	4602      	mov	r2, r0
 800b42e:	460b      	mov	r3, r1
 800b430:	42a6      	cmp	r6, r4
 800b432:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800b436:	f04f 0200 	mov.w	r2, #0
 800b43a:	d124      	bne.n	800b486 <_dtoa_r+0x626>
 800b43c:	4baf      	ldr	r3, [pc, #700]	@ (800b6fc <_dtoa_r+0x89c>)
 800b43e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800b442:	f7f4 ff27 	bl	8000294 <__adddf3>
 800b446:	4602      	mov	r2, r0
 800b448:	460b      	mov	r3, r1
 800b44a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b44e:	f7f5 fb67 	bl	8000b20 <__aeabi_dcmpgt>
 800b452:	2800      	cmp	r0, #0
 800b454:	d163      	bne.n	800b51e <_dtoa_r+0x6be>
 800b456:	2000      	movs	r0, #0
 800b458:	49a8      	ldr	r1, [pc, #672]	@ (800b6fc <_dtoa_r+0x89c>)
 800b45a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800b45e:	f7f4 ff17 	bl	8000290 <__aeabi_dsub>
 800b462:	4602      	mov	r2, r0
 800b464:	460b      	mov	r3, r1
 800b466:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b46a:	f7f5 fb3b 	bl	8000ae4 <__aeabi_dcmplt>
 800b46e:	2800      	cmp	r0, #0
 800b470:	f43f af14 	beq.w	800b29c <_dtoa_r+0x43c>
 800b474:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800b476:	1e73      	subs	r3, r6, #1
 800b478:	9313      	str	r3, [sp, #76]	@ 0x4c
 800b47a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800b47e:	2b30      	cmp	r3, #48	@ 0x30
 800b480:	d0f8      	beq.n	800b474 <_dtoa_r+0x614>
 800b482:	4647      	mov	r7, r8
 800b484:	e03b      	b.n	800b4fe <_dtoa_r+0x69e>
 800b486:	4b9e      	ldr	r3, [pc, #632]	@ (800b700 <_dtoa_r+0x8a0>)
 800b488:	f7f5 f8ba 	bl	8000600 <__aeabi_dmul>
 800b48c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b490:	e7bc      	b.n	800b40c <_dtoa_r+0x5ac>
 800b492:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800b496:	4656      	mov	r6, sl
 800b498:	4620      	mov	r0, r4
 800b49a:	4629      	mov	r1, r5
 800b49c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b4a0:	f7f5 f9d8 	bl	8000854 <__aeabi_ddiv>
 800b4a4:	f7f5 fb5c 	bl	8000b60 <__aeabi_d2iz>
 800b4a8:	4680      	mov	r8, r0
 800b4aa:	f7f5 f83f 	bl	800052c <__aeabi_i2d>
 800b4ae:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b4b2:	f7f5 f8a5 	bl	8000600 <__aeabi_dmul>
 800b4b6:	4602      	mov	r2, r0
 800b4b8:	4620      	mov	r0, r4
 800b4ba:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800b4be:	460b      	mov	r3, r1
 800b4c0:	4629      	mov	r1, r5
 800b4c2:	f7f4 fee5 	bl	8000290 <__aeabi_dsub>
 800b4c6:	9d03      	ldr	r5, [sp, #12]
 800b4c8:	f806 4b01 	strb.w	r4, [r6], #1
 800b4cc:	eba6 040a 	sub.w	r4, r6, sl
 800b4d0:	4602      	mov	r2, r0
 800b4d2:	460b      	mov	r3, r1
 800b4d4:	42a5      	cmp	r5, r4
 800b4d6:	d133      	bne.n	800b540 <_dtoa_r+0x6e0>
 800b4d8:	f7f4 fedc 	bl	8000294 <__adddf3>
 800b4dc:	4604      	mov	r4, r0
 800b4de:	460d      	mov	r5, r1
 800b4e0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b4e4:	f7f5 fb1c 	bl	8000b20 <__aeabi_dcmpgt>
 800b4e8:	b9c0      	cbnz	r0, 800b51c <_dtoa_r+0x6bc>
 800b4ea:	4620      	mov	r0, r4
 800b4ec:	4629      	mov	r1, r5
 800b4ee:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b4f2:	f7f5 faed 	bl	8000ad0 <__aeabi_dcmpeq>
 800b4f6:	b110      	cbz	r0, 800b4fe <_dtoa_r+0x69e>
 800b4f8:	f018 0f01 	tst.w	r8, #1
 800b4fc:	d10e      	bne.n	800b51c <_dtoa_r+0x6bc>
 800b4fe:	9902      	ldr	r1, [sp, #8]
 800b500:	4648      	mov	r0, r9
 800b502:	f000 fc21 	bl	800bd48 <_Bfree>
 800b506:	2300      	movs	r3, #0
 800b508:	3701      	adds	r7, #1
 800b50a:	7033      	strb	r3, [r6, #0]
 800b50c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800b50e:	601f      	str	r7, [r3, #0]
 800b510:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800b512:	2b00      	cmp	r3, #0
 800b514:	f000 824c 	beq.w	800b9b0 <_dtoa_r+0xb50>
 800b518:	601e      	str	r6, [r3, #0]
 800b51a:	e249      	b.n	800b9b0 <_dtoa_r+0xb50>
 800b51c:	46b8      	mov	r8, r7
 800b51e:	4633      	mov	r3, r6
 800b520:	461e      	mov	r6, r3
 800b522:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b526:	2a39      	cmp	r2, #57	@ 0x39
 800b528:	d106      	bne.n	800b538 <_dtoa_r+0x6d8>
 800b52a:	459a      	cmp	sl, r3
 800b52c:	d1f8      	bne.n	800b520 <_dtoa_r+0x6c0>
 800b52e:	2230      	movs	r2, #48	@ 0x30
 800b530:	f108 0801 	add.w	r8, r8, #1
 800b534:	f88a 2000 	strb.w	r2, [sl]
 800b538:	781a      	ldrb	r2, [r3, #0]
 800b53a:	3201      	adds	r2, #1
 800b53c:	701a      	strb	r2, [r3, #0]
 800b53e:	e7a0      	b.n	800b482 <_dtoa_r+0x622>
 800b540:	2200      	movs	r2, #0
 800b542:	4b6f      	ldr	r3, [pc, #444]	@ (800b700 <_dtoa_r+0x8a0>)
 800b544:	f7f5 f85c 	bl	8000600 <__aeabi_dmul>
 800b548:	2200      	movs	r2, #0
 800b54a:	2300      	movs	r3, #0
 800b54c:	4604      	mov	r4, r0
 800b54e:	460d      	mov	r5, r1
 800b550:	f7f5 fabe 	bl	8000ad0 <__aeabi_dcmpeq>
 800b554:	2800      	cmp	r0, #0
 800b556:	d09f      	beq.n	800b498 <_dtoa_r+0x638>
 800b558:	e7d1      	b.n	800b4fe <_dtoa_r+0x69e>
 800b55a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b55c:	2a00      	cmp	r2, #0
 800b55e:	f000 80ea 	beq.w	800b736 <_dtoa_r+0x8d6>
 800b562:	9a07      	ldr	r2, [sp, #28]
 800b564:	2a01      	cmp	r2, #1
 800b566:	f300 80cd 	bgt.w	800b704 <_dtoa_r+0x8a4>
 800b56a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800b56c:	2a00      	cmp	r2, #0
 800b56e:	f000 80c1 	beq.w	800b6f4 <_dtoa_r+0x894>
 800b572:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800b576:	9c08      	ldr	r4, [sp, #32]
 800b578:	9e00      	ldr	r6, [sp, #0]
 800b57a:	9a00      	ldr	r2, [sp, #0]
 800b57c:	2101      	movs	r1, #1
 800b57e:	4648      	mov	r0, r9
 800b580:	441a      	add	r2, r3
 800b582:	9200      	str	r2, [sp, #0]
 800b584:	9a06      	ldr	r2, [sp, #24]
 800b586:	441a      	add	r2, r3
 800b588:	9206      	str	r2, [sp, #24]
 800b58a:	f000 fc93 	bl	800beb4 <__i2b>
 800b58e:	4605      	mov	r5, r0
 800b590:	b166      	cbz	r6, 800b5ac <_dtoa_r+0x74c>
 800b592:	9b06      	ldr	r3, [sp, #24]
 800b594:	2b00      	cmp	r3, #0
 800b596:	dd09      	ble.n	800b5ac <_dtoa_r+0x74c>
 800b598:	42b3      	cmp	r3, r6
 800b59a:	9a00      	ldr	r2, [sp, #0]
 800b59c:	bfa8      	it	ge
 800b59e:	4633      	movge	r3, r6
 800b5a0:	1ad2      	subs	r2, r2, r3
 800b5a2:	1af6      	subs	r6, r6, r3
 800b5a4:	9200      	str	r2, [sp, #0]
 800b5a6:	9a06      	ldr	r2, [sp, #24]
 800b5a8:	1ad3      	subs	r3, r2, r3
 800b5aa:	9306      	str	r3, [sp, #24]
 800b5ac:	9b08      	ldr	r3, [sp, #32]
 800b5ae:	b30b      	cbz	r3, 800b5f4 <_dtoa_r+0x794>
 800b5b0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b5b2:	2b00      	cmp	r3, #0
 800b5b4:	f000 80c6 	beq.w	800b744 <_dtoa_r+0x8e4>
 800b5b8:	2c00      	cmp	r4, #0
 800b5ba:	f000 80c0 	beq.w	800b73e <_dtoa_r+0x8de>
 800b5be:	4629      	mov	r1, r5
 800b5c0:	4622      	mov	r2, r4
 800b5c2:	4648      	mov	r0, r9
 800b5c4:	f000 fd30 	bl	800c028 <__pow5mult>
 800b5c8:	9a02      	ldr	r2, [sp, #8]
 800b5ca:	4601      	mov	r1, r0
 800b5cc:	4605      	mov	r5, r0
 800b5ce:	4648      	mov	r0, r9
 800b5d0:	f000 fc86 	bl	800bee0 <__multiply>
 800b5d4:	9902      	ldr	r1, [sp, #8]
 800b5d6:	4680      	mov	r8, r0
 800b5d8:	4648      	mov	r0, r9
 800b5da:	f000 fbb5 	bl	800bd48 <_Bfree>
 800b5de:	9b08      	ldr	r3, [sp, #32]
 800b5e0:	1b1b      	subs	r3, r3, r4
 800b5e2:	9308      	str	r3, [sp, #32]
 800b5e4:	f000 80b1 	beq.w	800b74a <_dtoa_r+0x8ea>
 800b5e8:	9a08      	ldr	r2, [sp, #32]
 800b5ea:	4641      	mov	r1, r8
 800b5ec:	4648      	mov	r0, r9
 800b5ee:	f000 fd1b 	bl	800c028 <__pow5mult>
 800b5f2:	9002      	str	r0, [sp, #8]
 800b5f4:	2101      	movs	r1, #1
 800b5f6:	4648      	mov	r0, r9
 800b5f8:	f000 fc5c 	bl	800beb4 <__i2b>
 800b5fc:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b5fe:	4604      	mov	r4, r0
 800b600:	2b00      	cmp	r3, #0
 800b602:	f000 81d9 	beq.w	800b9b8 <_dtoa_r+0xb58>
 800b606:	461a      	mov	r2, r3
 800b608:	4601      	mov	r1, r0
 800b60a:	4648      	mov	r0, r9
 800b60c:	f000 fd0c 	bl	800c028 <__pow5mult>
 800b610:	9b07      	ldr	r3, [sp, #28]
 800b612:	4604      	mov	r4, r0
 800b614:	2b01      	cmp	r3, #1
 800b616:	f300 809f 	bgt.w	800b758 <_dtoa_r+0x8f8>
 800b61a:	9b04      	ldr	r3, [sp, #16]
 800b61c:	2b00      	cmp	r3, #0
 800b61e:	f040 8097 	bne.w	800b750 <_dtoa_r+0x8f0>
 800b622:	9b05      	ldr	r3, [sp, #20]
 800b624:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b628:	2b00      	cmp	r3, #0
 800b62a:	f040 8093 	bne.w	800b754 <_dtoa_r+0x8f4>
 800b62e:	9b05      	ldr	r3, [sp, #20]
 800b630:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800b634:	0d1b      	lsrs	r3, r3, #20
 800b636:	051b      	lsls	r3, r3, #20
 800b638:	b133      	cbz	r3, 800b648 <_dtoa_r+0x7e8>
 800b63a:	9b00      	ldr	r3, [sp, #0]
 800b63c:	3301      	adds	r3, #1
 800b63e:	9300      	str	r3, [sp, #0]
 800b640:	9b06      	ldr	r3, [sp, #24]
 800b642:	3301      	adds	r3, #1
 800b644:	9306      	str	r3, [sp, #24]
 800b646:	2301      	movs	r3, #1
 800b648:	9308      	str	r3, [sp, #32]
 800b64a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b64c:	2b00      	cmp	r3, #0
 800b64e:	f000 81b9 	beq.w	800b9c4 <_dtoa_r+0xb64>
 800b652:	6923      	ldr	r3, [r4, #16]
 800b654:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b658:	6918      	ldr	r0, [r3, #16]
 800b65a:	f000 fbdf 	bl	800be1c <__hi0bits>
 800b65e:	f1c0 0020 	rsb	r0, r0, #32
 800b662:	9b06      	ldr	r3, [sp, #24]
 800b664:	4418      	add	r0, r3
 800b666:	f010 001f 	ands.w	r0, r0, #31
 800b66a:	f000 8082 	beq.w	800b772 <_dtoa_r+0x912>
 800b66e:	f1c0 0320 	rsb	r3, r0, #32
 800b672:	2b04      	cmp	r3, #4
 800b674:	dd73      	ble.n	800b75e <_dtoa_r+0x8fe>
 800b676:	f1c0 001c 	rsb	r0, r0, #28
 800b67a:	9b00      	ldr	r3, [sp, #0]
 800b67c:	4403      	add	r3, r0
 800b67e:	4406      	add	r6, r0
 800b680:	9300      	str	r3, [sp, #0]
 800b682:	9b06      	ldr	r3, [sp, #24]
 800b684:	4403      	add	r3, r0
 800b686:	9306      	str	r3, [sp, #24]
 800b688:	9b00      	ldr	r3, [sp, #0]
 800b68a:	2b00      	cmp	r3, #0
 800b68c:	dd05      	ble.n	800b69a <_dtoa_r+0x83a>
 800b68e:	461a      	mov	r2, r3
 800b690:	9902      	ldr	r1, [sp, #8]
 800b692:	4648      	mov	r0, r9
 800b694:	f000 fd22 	bl	800c0dc <__lshift>
 800b698:	9002      	str	r0, [sp, #8]
 800b69a:	9b06      	ldr	r3, [sp, #24]
 800b69c:	2b00      	cmp	r3, #0
 800b69e:	dd05      	ble.n	800b6ac <_dtoa_r+0x84c>
 800b6a0:	4621      	mov	r1, r4
 800b6a2:	461a      	mov	r2, r3
 800b6a4:	4648      	mov	r0, r9
 800b6a6:	f000 fd19 	bl	800c0dc <__lshift>
 800b6aa:	4604      	mov	r4, r0
 800b6ac:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800b6ae:	2b00      	cmp	r3, #0
 800b6b0:	d061      	beq.n	800b776 <_dtoa_r+0x916>
 800b6b2:	4621      	mov	r1, r4
 800b6b4:	9802      	ldr	r0, [sp, #8]
 800b6b6:	f000 fd7d 	bl	800c1b4 <__mcmp>
 800b6ba:	2800      	cmp	r0, #0
 800b6bc:	da5b      	bge.n	800b776 <_dtoa_r+0x916>
 800b6be:	2300      	movs	r3, #0
 800b6c0:	220a      	movs	r2, #10
 800b6c2:	9902      	ldr	r1, [sp, #8]
 800b6c4:	4648      	mov	r0, r9
 800b6c6:	f000 fb61 	bl	800bd8c <__multadd>
 800b6ca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b6cc:	f107 38ff 	add.w	r8, r7, #4294967295	@ 0xffffffff
 800b6d0:	9002      	str	r0, [sp, #8]
 800b6d2:	2b00      	cmp	r3, #0
 800b6d4:	f000 8178 	beq.w	800b9c8 <_dtoa_r+0xb68>
 800b6d8:	4629      	mov	r1, r5
 800b6da:	2300      	movs	r3, #0
 800b6dc:	220a      	movs	r2, #10
 800b6de:	4648      	mov	r0, r9
 800b6e0:	f000 fb54 	bl	800bd8c <__multadd>
 800b6e4:	f1bb 0f00 	cmp.w	fp, #0
 800b6e8:	4605      	mov	r5, r0
 800b6ea:	dc6f      	bgt.n	800b7cc <_dtoa_r+0x96c>
 800b6ec:	9b07      	ldr	r3, [sp, #28]
 800b6ee:	2b02      	cmp	r3, #2
 800b6f0:	dc49      	bgt.n	800b786 <_dtoa_r+0x926>
 800b6f2:	e06b      	b.n	800b7cc <_dtoa_r+0x96c>
 800b6f4:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800b6f6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800b6fa:	e73c      	b.n	800b576 <_dtoa_r+0x716>
 800b6fc:	3fe00000 	.word	0x3fe00000
 800b700:	40240000 	.word	0x40240000
 800b704:	9b03      	ldr	r3, [sp, #12]
 800b706:	1e5c      	subs	r4, r3, #1
 800b708:	9b08      	ldr	r3, [sp, #32]
 800b70a:	42a3      	cmp	r3, r4
 800b70c:	db09      	blt.n	800b722 <_dtoa_r+0x8c2>
 800b70e:	1b1c      	subs	r4, r3, r4
 800b710:	9b03      	ldr	r3, [sp, #12]
 800b712:	2b00      	cmp	r3, #0
 800b714:	f6bf af30 	bge.w	800b578 <_dtoa_r+0x718>
 800b718:	9b00      	ldr	r3, [sp, #0]
 800b71a:	9a03      	ldr	r2, [sp, #12]
 800b71c:	1a9e      	subs	r6, r3, r2
 800b71e:	2300      	movs	r3, #0
 800b720:	e72b      	b.n	800b57a <_dtoa_r+0x71a>
 800b722:	9b08      	ldr	r3, [sp, #32]
 800b724:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800b726:	1ae3      	subs	r3, r4, r3
 800b728:	9408      	str	r4, [sp, #32]
 800b72a:	9e00      	ldr	r6, [sp, #0]
 800b72c:	2400      	movs	r4, #0
 800b72e:	441a      	add	r2, r3
 800b730:	9b03      	ldr	r3, [sp, #12]
 800b732:	920d      	str	r2, [sp, #52]	@ 0x34
 800b734:	e721      	b.n	800b57a <_dtoa_r+0x71a>
 800b736:	9c08      	ldr	r4, [sp, #32]
 800b738:	9e00      	ldr	r6, [sp, #0]
 800b73a:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800b73c:	e728      	b.n	800b590 <_dtoa_r+0x730>
 800b73e:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800b742:	e751      	b.n	800b5e8 <_dtoa_r+0x788>
 800b744:	9a08      	ldr	r2, [sp, #32]
 800b746:	9902      	ldr	r1, [sp, #8]
 800b748:	e750      	b.n	800b5ec <_dtoa_r+0x78c>
 800b74a:	f8cd 8008 	str.w	r8, [sp, #8]
 800b74e:	e751      	b.n	800b5f4 <_dtoa_r+0x794>
 800b750:	2300      	movs	r3, #0
 800b752:	e779      	b.n	800b648 <_dtoa_r+0x7e8>
 800b754:	9b04      	ldr	r3, [sp, #16]
 800b756:	e777      	b.n	800b648 <_dtoa_r+0x7e8>
 800b758:	2300      	movs	r3, #0
 800b75a:	9308      	str	r3, [sp, #32]
 800b75c:	e779      	b.n	800b652 <_dtoa_r+0x7f2>
 800b75e:	d093      	beq.n	800b688 <_dtoa_r+0x828>
 800b760:	331c      	adds	r3, #28
 800b762:	9a00      	ldr	r2, [sp, #0]
 800b764:	441a      	add	r2, r3
 800b766:	441e      	add	r6, r3
 800b768:	9200      	str	r2, [sp, #0]
 800b76a:	9a06      	ldr	r2, [sp, #24]
 800b76c:	441a      	add	r2, r3
 800b76e:	9206      	str	r2, [sp, #24]
 800b770:	e78a      	b.n	800b688 <_dtoa_r+0x828>
 800b772:	4603      	mov	r3, r0
 800b774:	e7f4      	b.n	800b760 <_dtoa_r+0x900>
 800b776:	9b03      	ldr	r3, [sp, #12]
 800b778:	46b8      	mov	r8, r7
 800b77a:	2b00      	cmp	r3, #0
 800b77c:	dc20      	bgt.n	800b7c0 <_dtoa_r+0x960>
 800b77e:	469b      	mov	fp, r3
 800b780:	9b07      	ldr	r3, [sp, #28]
 800b782:	2b02      	cmp	r3, #2
 800b784:	dd1e      	ble.n	800b7c4 <_dtoa_r+0x964>
 800b786:	f1bb 0f00 	cmp.w	fp, #0
 800b78a:	f47f adb1 	bne.w	800b2f0 <_dtoa_r+0x490>
 800b78e:	4621      	mov	r1, r4
 800b790:	465b      	mov	r3, fp
 800b792:	2205      	movs	r2, #5
 800b794:	4648      	mov	r0, r9
 800b796:	f000 faf9 	bl	800bd8c <__multadd>
 800b79a:	4601      	mov	r1, r0
 800b79c:	4604      	mov	r4, r0
 800b79e:	9802      	ldr	r0, [sp, #8]
 800b7a0:	f000 fd08 	bl	800c1b4 <__mcmp>
 800b7a4:	2800      	cmp	r0, #0
 800b7a6:	f77f ada3 	ble.w	800b2f0 <_dtoa_r+0x490>
 800b7aa:	4656      	mov	r6, sl
 800b7ac:	2331      	movs	r3, #49	@ 0x31
 800b7ae:	f108 0801 	add.w	r8, r8, #1
 800b7b2:	f806 3b01 	strb.w	r3, [r6], #1
 800b7b6:	e59f      	b.n	800b2f8 <_dtoa_r+0x498>
 800b7b8:	46b8      	mov	r8, r7
 800b7ba:	9c03      	ldr	r4, [sp, #12]
 800b7bc:	4625      	mov	r5, r4
 800b7be:	e7f4      	b.n	800b7aa <_dtoa_r+0x94a>
 800b7c0:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800b7c4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b7c6:	2b00      	cmp	r3, #0
 800b7c8:	f000 8102 	beq.w	800b9d0 <_dtoa_r+0xb70>
 800b7cc:	2e00      	cmp	r6, #0
 800b7ce:	dd05      	ble.n	800b7dc <_dtoa_r+0x97c>
 800b7d0:	4629      	mov	r1, r5
 800b7d2:	4632      	mov	r2, r6
 800b7d4:	4648      	mov	r0, r9
 800b7d6:	f000 fc81 	bl	800c0dc <__lshift>
 800b7da:	4605      	mov	r5, r0
 800b7dc:	9b08      	ldr	r3, [sp, #32]
 800b7de:	2b00      	cmp	r3, #0
 800b7e0:	d05c      	beq.n	800b89c <_dtoa_r+0xa3c>
 800b7e2:	6869      	ldr	r1, [r5, #4]
 800b7e4:	4648      	mov	r0, r9
 800b7e6:	f000 fa6f 	bl	800bcc8 <_Balloc>
 800b7ea:	4606      	mov	r6, r0
 800b7ec:	b928      	cbnz	r0, 800b7fa <_dtoa_r+0x99a>
 800b7ee:	4b83      	ldr	r3, [pc, #524]	@ (800b9fc <_dtoa_r+0xb9c>)
 800b7f0:	4602      	mov	r2, r0
 800b7f2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800b7f6:	f7ff bb4a 	b.w	800ae8e <_dtoa_r+0x2e>
 800b7fa:	692a      	ldr	r2, [r5, #16]
 800b7fc:	f105 010c 	add.w	r1, r5, #12
 800b800:	300c      	adds	r0, #12
 800b802:	3202      	adds	r2, #2
 800b804:	0092      	lsls	r2, r2, #2
 800b806:	f000 fe7b 	bl	800c500 <memcpy>
 800b80a:	2201      	movs	r2, #1
 800b80c:	4631      	mov	r1, r6
 800b80e:	4648      	mov	r0, r9
 800b810:	f000 fc64 	bl	800c0dc <__lshift>
 800b814:	f10a 0301 	add.w	r3, sl, #1
 800b818:	462f      	mov	r7, r5
 800b81a:	4605      	mov	r5, r0
 800b81c:	9300      	str	r3, [sp, #0]
 800b81e:	eb0a 030b 	add.w	r3, sl, fp
 800b822:	9308      	str	r3, [sp, #32]
 800b824:	9b04      	ldr	r3, [sp, #16]
 800b826:	f003 0301 	and.w	r3, r3, #1
 800b82a:	9306      	str	r3, [sp, #24]
 800b82c:	9b00      	ldr	r3, [sp, #0]
 800b82e:	4621      	mov	r1, r4
 800b830:	9802      	ldr	r0, [sp, #8]
 800b832:	f103 3bff 	add.w	fp, r3, #4294967295	@ 0xffffffff
 800b836:	f7ff fa83 	bl	800ad40 <quorem>
 800b83a:	4603      	mov	r3, r0
 800b83c:	4639      	mov	r1, r7
 800b83e:	9003      	str	r0, [sp, #12]
 800b840:	3330      	adds	r3, #48	@ 0x30
 800b842:	9802      	ldr	r0, [sp, #8]
 800b844:	9309      	str	r3, [sp, #36]	@ 0x24
 800b846:	f000 fcb5 	bl	800c1b4 <__mcmp>
 800b84a:	462a      	mov	r2, r5
 800b84c:	9004      	str	r0, [sp, #16]
 800b84e:	4621      	mov	r1, r4
 800b850:	4648      	mov	r0, r9
 800b852:	f000 fccb 	bl	800c1ec <__mdiff>
 800b856:	68c2      	ldr	r2, [r0, #12]
 800b858:	4606      	mov	r6, r0
 800b85a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b85c:	bb02      	cbnz	r2, 800b8a0 <_dtoa_r+0xa40>
 800b85e:	4601      	mov	r1, r0
 800b860:	9802      	ldr	r0, [sp, #8]
 800b862:	f000 fca7 	bl	800c1b4 <__mcmp>
 800b866:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b868:	4602      	mov	r2, r0
 800b86a:	4631      	mov	r1, r6
 800b86c:	4648      	mov	r0, r9
 800b86e:	920c      	str	r2, [sp, #48]	@ 0x30
 800b870:	9309      	str	r3, [sp, #36]	@ 0x24
 800b872:	f000 fa69 	bl	800bd48 <_Bfree>
 800b876:	9b07      	ldr	r3, [sp, #28]
 800b878:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800b87a:	9e00      	ldr	r6, [sp, #0]
 800b87c:	ea42 0103 	orr.w	r1, r2, r3
 800b880:	9b06      	ldr	r3, [sp, #24]
 800b882:	4319      	orrs	r1, r3
 800b884:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b886:	d10d      	bne.n	800b8a4 <_dtoa_r+0xa44>
 800b888:	2b39      	cmp	r3, #57	@ 0x39
 800b88a:	d027      	beq.n	800b8dc <_dtoa_r+0xa7c>
 800b88c:	9a04      	ldr	r2, [sp, #16]
 800b88e:	2a00      	cmp	r2, #0
 800b890:	dd01      	ble.n	800b896 <_dtoa_r+0xa36>
 800b892:	9b03      	ldr	r3, [sp, #12]
 800b894:	3331      	adds	r3, #49	@ 0x31
 800b896:	f88b 3000 	strb.w	r3, [fp]
 800b89a:	e52e      	b.n	800b2fa <_dtoa_r+0x49a>
 800b89c:	4628      	mov	r0, r5
 800b89e:	e7b9      	b.n	800b814 <_dtoa_r+0x9b4>
 800b8a0:	2201      	movs	r2, #1
 800b8a2:	e7e2      	b.n	800b86a <_dtoa_r+0xa0a>
 800b8a4:	9904      	ldr	r1, [sp, #16]
 800b8a6:	2900      	cmp	r1, #0
 800b8a8:	db04      	blt.n	800b8b4 <_dtoa_r+0xa54>
 800b8aa:	9807      	ldr	r0, [sp, #28]
 800b8ac:	4301      	orrs	r1, r0
 800b8ae:	9806      	ldr	r0, [sp, #24]
 800b8b0:	4301      	orrs	r1, r0
 800b8b2:	d120      	bne.n	800b8f6 <_dtoa_r+0xa96>
 800b8b4:	2a00      	cmp	r2, #0
 800b8b6:	ddee      	ble.n	800b896 <_dtoa_r+0xa36>
 800b8b8:	2201      	movs	r2, #1
 800b8ba:	9902      	ldr	r1, [sp, #8]
 800b8bc:	4648      	mov	r0, r9
 800b8be:	9300      	str	r3, [sp, #0]
 800b8c0:	f000 fc0c 	bl	800c0dc <__lshift>
 800b8c4:	4621      	mov	r1, r4
 800b8c6:	9002      	str	r0, [sp, #8]
 800b8c8:	f000 fc74 	bl	800c1b4 <__mcmp>
 800b8cc:	2800      	cmp	r0, #0
 800b8ce:	9b00      	ldr	r3, [sp, #0]
 800b8d0:	dc02      	bgt.n	800b8d8 <_dtoa_r+0xa78>
 800b8d2:	d1e0      	bne.n	800b896 <_dtoa_r+0xa36>
 800b8d4:	07da      	lsls	r2, r3, #31
 800b8d6:	d5de      	bpl.n	800b896 <_dtoa_r+0xa36>
 800b8d8:	2b39      	cmp	r3, #57	@ 0x39
 800b8da:	d1da      	bne.n	800b892 <_dtoa_r+0xa32>
 800b8dc:	2339      	movs	r3, #57	@ 0x39
 800b8de:	f88b 3000 	strb.w	r3, [fp]
 800b8e2:	4633      	mov	r3, r6
 800b8e4:	461e      	mov	r6, r3
 800b8e6:	3b01      	subs	r3, #1
 800b8e8:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800b8ec:	2a39      	cmp	r2, #57	@ 0x39
 800b8ee:	d04f      	beq.n	800b990 <_dtoa_r+0xb30>
 800b8f0:	3201      	adds	r2, #1
 800b8f2:	701a      	strb	r2, [r3, #0]
 800b8f4:	e501      	b.n	800b2fa <_dtoa_r+0x49a>
 800b8f6:	2a00      	cmp	r2, #0
 800b8f8:	dd03      	ble.n	800b902 <_dtoa_r+0xaa2>
 800b8fa:	2b39      	cmp	r3, #57	@ 0x39
 800b8fc:	d0ee      	beq.n	800b8dc <_dtoa_r+0xa7c>
 800b8fe:	3301      	adds	r3, #1
 800b900:	e7c9      	b.n	800b896 <_dtoa_r+0xa36>
 800b902:	9a00      	ldr	r2, [sp, #0]
 800b904:	9908      	ldr	r1, [sp, #32]
 800b906:	f802 3c01 	strb.w	r3, [r2, #-1]
 800b90a:	428a      	cmp	r2, r1
 800b90c:	d029      	beq.n	800b962 <_dtoa_r+0xb02>
 800b90e:	2300      	movs	r3, #0
 800b910:	220a      	movs	r2, #10
 800b912:	9902      	ldr	r1, [sp, #8]
 800b914:	4648      	mov	r0, r9
 800b916:	f000 fa39 	bl	800bd8c <__multadd>
 800b91a:	42af      	cmp	r7, r5
 800b91c:	9002      	str	r0, [sp, #8]
 800b91e:	f04f 0300 	mov.w	r3, #0
 800b922:	f04f 020a 	mov.w	r2, #10
 800b926:	4639      	mov	r1, r7
 800b928:	4648      	mov	r0, r9
 800b92a:	d107      	bne.n	800b93c <_dtoa_r+0xadc>
 800b92c:	f000 fa2e 	bl	800bd8c <__multadd>
 800b930:	4607      	mov	r7, r0
 800b932:	4605      	mov	r5, r0
 800b934:	9b00      	ldr	r3, [sp, #0]
 800b936:	3301      	adds	r3, #1
 800b938:	9300      	str	r3, [sp, #0]
 800b93a:	e777      	b.n	800b82c <_dtoa_r+0x9cc>
 800b93c:	f000 fa26 	bl	800bd8c <__multadd>
 800b940:	4629      	mov	r1, r5
 800b942:	4607      	mov	r7, r0
 800b944:	2300      	movs	r3, #0
 800b946:	220a      	movs	r2, #10
 800b948:	4648      	mov	r0, r9
 800b94a:	f000 fa1f 	bl	800bd8c <__multadd>
 800b94e:	4605      	mov	r5, r0
 800b950:	e7f0      	b.n	800b934 <_dtoa_r+0xad4>
 800b952:	f1bb 0f00 	cmp.w	fp, #0
 800b956:	f04f 0700 	mov.w	r7, #0
 800b95a:	bfcc      	ite	gt
 800b95c:	465e      	movgt	r6, fp
 800b95e:	2601      	movle	r6, #1
 800b960:	4456      	add	r6, sl
 800b962:	2201      	movs	r2, #1
 800b964:	9902      	ldr	r1, [sp, #8]
 800b966:	4648      	mov	r0, r9
 800b968:	9300      	str	r3, [sp, #0]
 800b96a:	f000 fbb7 	bl	800c0dc <__lshift>
 800b96e:	4621      	mov	r1, r4
 800b970:	9002      	str	r0, [sp, #8]
 800b972:	f000 fc1f 	bl	800c1b4 <__mcmp>
 800b976:	2800      	cmp	r0, #0
 800b978:	dcb3      	bgt.n	800b8e2 <_dtoa_r+0xa82>
 800b97a:	d102      	bne.n	800b982 <_dtoa_r+0xb22>
 800b97c:	9b00      	ldr	r3, [sp, #0]
 800b97e:	07db      	lsls	r3, r3, #31
 800b980:	d4af      	bmi.n	800b8e2 <_dtoa_r+0xa82>
 800b982:	4633      	mov	r3, r6
 800b984:	461e      	mov	r6, r3
 800b986:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b98a:	2a30      	cmp	r2, #48	@ 0x30
 800b98c:	d0fa      	beq.n	800b984 <_dtoa_r+0xb24>
 800b98e:	e4b4      	b.n	800b2fa <_dtoa_r+0x49a>
 800b990:	459a      	cmp	sl, r3
 800b992:	d1a7      	bne.n	800b8e4 <_dtoa_r+0xa84>
 800b994:	2331      	movs	r3, #49	@ 0x31
 800b996:	f108 0801 	add.w	r8, r8, #1
 800b99a:	f88a 3000 	strb.w	r3, [sl]
 800b99e:	e4ac      	b.n	800b2fa <_dtoa_r+0x49a>
 800b9a0:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800b9a2:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800ba00 <_dtoa_r+0xba0>
 800b9a6:	b11b      	cbz	r3, 800b9b0 <_dtoa_r+0xb50>
 800b9a8:	f10a 0308 	add.w	r3, sl, #8
 800b9ac:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800b9ae:	6013      	str	r3, [r2, #0]
 800b9b0:	4650      	mov	r0, sl
 800b9b2:	b017      	add	sp, #92	@ 0x5c
 800b9b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b9b8:	9b07      	ldr	r3, [sp, #28]
 800b9ba:	2b01      	cmp	r3, #1
 800b9bc:	f77f ae2d 	ble.w	800b61a <_dtoa_r+0x7ba>
 800b9c0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b9c2:	9308      	str	r3, [sp, #32]
 800b9c4:	2001      	movs	r0, #1
 800b9c6:	e64c      	b.n	800b662 <_dtoa_r+0x802>
 800b9c8:	f1bb 0f00 	cmp.w	fp, #0
 800b9cc:	f77f aed8 	ble.w	800b780 <_dtoa_r+0x920>
 800b9d0:	4656      	mov	r6, sl
 800b9d2:	4621      	mov	r1, r4
 800b9d4:	9802      	ldr	r0, [sp, #8]
 800b9d6:	f7ff f9b3 	bl	800ad40 <quorem>
 800b9da:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800b9de:	f806 3b01 	strb.w	r3, [r6], #1
 800b9e2:	eba6 020a 	sub.w	r2, r6, sl
 800b9e6:	4593      	cmp	fp, r2
 800b9e8:	ddb3      	ble.n	800b952 <_dtoa_r+0xaf2>
 800b9ea:	2300      	movs	r3, #0
 800b9ec:	220a      	movs	r2, #10
 800b9ee:	9902      	ldr	r1, [sp, #8]
 800b9f0:	4648      	mov	r0, r9
 800b9f2:	f000 f9cb 	bl	800bd8c <__multadd>
 800b9f6:	9002      	str	r0, [sp, #8]
 800b9f8:	e7eb      	b.n	800b9d2 <_dtoa_r+0xb72>
 800b9fa:	bf00      	nop
 800b9fc:	0800d208 	.word	0x0800d208
 800ba00:	0800d18c 	.word	0x0800d18c

0800ba04 <malloc>:
 800ba04:	4b02      	ldr	r3, [pc, #8]	@ (800ba10 <malloc+0xc>)
 800ba06:	4601      	mov	r1, r0
 800ba08:	6818      	ldr	r0, [r3, #0]
 800ba0a:	f000 b825 	b.w	800ba58 <_malloc_r>
 800ba0e:	bf00      	nop
 800ba10:	2000003c 	.word	0x2000003c

0800ba14 <sbrk_aligned>:
 800ba14:	b570      	push	{r4, r5, r6, lr}
 800ba16:	4e0f      	ldr	r6, [pc, #60]	@ (800ba54 <sbrk_aligned+0x40>)
 800ba18:	460c      	mov	r4, r1
 800ba1a:	4605      	mov	r5, r0
 800ba1c:	6831      	ldr	r1, [r6, #0]
 800ba1e:	b911      	cbnz	r1, 800ba26 <sbrk_aligned+0x12>
 800ba20:	f000 fd3c 	bl	800c49c <_sbrk_r>
 800ba24:	6030      	str	r0, [r6, #0]
 800ba26:	4621      	mov	r1, r4
 800ba28:	4628      	mov	r0, r5
 800ba2a:	f000 fd37 	bl	800c49c <_sbrk_r>
 800ba2e:	1c43      	adds	r3, r0, #1
 800ba30:	d103      	bne.n	800ba3a <sbrk_aligned+0x26>
 800ba32:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800ba36:	4620      	mov	r0, r4
 800ba38:	bd70      	pop	{r4, r5, r6, pc}
 800ba3a:	1cc4      	adds	r4, r0, #3
 800ba3c:	f024 0403 	bic.w	r4, r4, #3
 800ba40:	42a0      	cmp	r0, r4
 800ba42:	d0f8      	beq.n	800ba36 <sbrk_aligned+0x22>
 800ba44:	1a21      	subs	r1, r4, r0
 800ba46:	4628      	mov	r0, r5
 800ba48:	f000 fd28 	bl	800c49c <_sbrk_r>
 800ba4c:	3001      	adds	r0, #1
 800ba4e:	d1f2      	bne.n	800ba36 <sbrk_aligned+0x22>
 800ba50:	e7ef      	b.n	800ba32 <sbrk_aligned+0x1e>
 800ba52:	bf00      	nop
 800ba54:	20000590 	.word	0x20000590

0800ba58 <_malloc_r>:
 800ba58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ba5c:	1ccd      	adds	r5, r1, #3
 800ba5e:	4606      	mov	r6, r0
 800ba60:	f025 0503 	bic.w	r5, r5, #3
 800ba64:	3508      	adds	r5, #8
 800ba66:	2d0c      	cmp	r5, #12
 800ba68:	bf38      	it	cc
 800ba6a:	250c      	movcc	r5, #12
 800ba6c:	2d00      	cmp	r5, #0
 800ba6e:	db01      	blt.n	800ba74 <_malloc_r+0x1c>
 800ba70:	42a9      	cmp	r1, r5
 800ba72:	d904      	bls.n	800ba7e <_malloc_r+0x26>
 800ba74:	230c      	movs	r3, #12
 800ba76:	6033      	str	r3, [r6, #0]
 800ba78:	2000      	movs	r0, #0
 800ba7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ba7e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800bb54 <_malloc_r+0xfc>
 800ba82:	f000 f915 	bl	800bcb0 <__malloc_lock>
 800ba86:	f8d8 3000 	ldr.w	r3, [r8]
 800ba8a:	461c      	mov	r4, r3
 800ba8c:	bb44      	cbnz	r4, 800bae0 <_malloc_r+0x88>
 800ba8e:	4629      	mov	r1, r5
 800ba90:	4630      	mov	r0, r6
 800ba92:	f7ff ffbf 	bl	800ba14 <sbrk_aligned>
 800ba96:	1c43      	adds	r3, r0, #1
 800ba98:	4604      	mov	r4, r0
 800ba9a:	d158      	bne.n	800bb4e <_malloc_r+0xf6>
 800ba9c:	f8d8 4000 	ldr.w	r4, [r8]
 800baa0:	4627      	mov	r7, r4
 800baa2:	2f00      	cmp	r7, #0
 800baa4:	d143      	bne.n	800bb2e <_malloc_r+0xd6>
 800baa6:	2c00      	cmp	r4, #0
 800baa8:	d04b      	beq.n	800bb42 <_malloc_r+0xea>
 800baaa:	6823      	ldr	r3, [r4, #0]
 800baac:	4639      	mov	r1, r7
 800baae:	4630      	mov	r0, r6
 800bab0:	eb04 0903 	add.w	r9, r4, r3
 800bab4:	f000 fcf2 	bl	800c49c <_sbrk_r>
 800bab8:	4581      	cmp	r9, r0
 800baba:	d142      	bne.n	800bb42 <_malloc_r+0xea>
 800babc:	6821      	ldr	r1, [r4, #0]
 800babe:	4630      	mov	r0, r6
 800bac0:	1a6d      	subs	r5, r5, r1
 800bac2:	4629      	mov	r1, r5
 800bac4:	f7ff ffa6 	bl	800ba14 <sbrk_aligned>
 800bac8:	3001      	adds	r0, #1
 800baca:	d03a      	beq.n	800bb42 <_malloc_r+0xea>
 800bacc:	6823      	ldr	r3, [r4, #0]
 800bace:	442b      	add	r3, r5
 800bad0:	6023      	str	r3, [r4, #0]
 800bad2:	f8d8 3000 	ldr.w	r3, [r8]
 800bad6:	685a      	ldr	r2, [r3, #4]
 800bad8:	bb62      	cbnz	r2, 800bb34 <_malloc_r+0xdc>
 800bada:	f8c8 7000 	str.w	r7, [r8]
 800bade:	e00f      	b.n	800bb00 <_malloc_r+0xa8>
 800bae0:	6822      	ldr	r2, [r4, #0]
 800bae2:	1b52      	subs	r2, r2, r5
 800bae4:	d420      	bmi.n	800bb28 <_malloc_r+0xd0>
 800bae6:	2a0b      	cmp	r2, #11
 800bae8:	d917      	bls.n	800bb1a <_malloc_r+0xc2>
 800baea:	1961      	adds	r1, r4, r5
 800baec:	42a3      	cmp	r3, r4
 800baee:	6025      	str	r5, [r4, #0]
 800baf0:	bf18      	it	ne
 800baf2:	6059      	strne	r1, [r3, #4]
 800baf4:	6863      	ldr	r3, [r4, #4]
 800baf6:	bf08      	it	eq
 800baf8:	f8c8 1000 	streq.w	r1, [r8]
 800bafc:	5162      	str	r2, [r4, r5]
 800bafe:	604b      	str	r3, [r1, #4]
 800bb00:	4630      	mov	r0, r6
 800bb02:	f000 f8db 	bl	800bcbc <__malloc_unlock>
 800bb06:	f104 000b 	add.w	r0, r4, #11
 800bb0a:	1d23      	adds	r3, r4, #4
 800bb0c:	f020 0007 	bic.w	r0, r0, #7
 800bb10:	1ac2      	subs	r2, r0, r3
 800bb12:	bf1c      	itt	ne
 800bb14:	1a1b      	subne	r3, r3, r0
 800bb16:	50a3      	strne	r3, [r4, r2]
 800bb18:	e7af      	b.n	800ba7a <_malloc_r+0x22>
 800bb1a:	6862      	ldr	r2, [r4, #4]
 800bb1c:	42a3      	cmp	r3, r4
 800bb1e:	bf0c      	ite	eq
 800bb20:	f8c8 2000 	streq.w	r2, [r8]
 800bb24:	605a      	strne	r2, [r3, #4]
 800bb26:	e7eb      	b.n	800bb00 <_malloc_r+0xa8>
 800bb28:	4623      	mov	r3, r4
 800bb2a:	6864      	ldr	r4, [r4, #4]
 800bb2c:	e7ae      	b.n	800ba8c <_malloc_r+0x34>
 800bb2e:	463c      	mov	r4, r7
 800bb30:	687f      	ldr	r7, [r7, #4]
 800bb32:	e7b6      	b.n	800baa2 <_malloc_r+0x4a>
 800bb34:	461a      	mov	r2, r3
 800bb36:	685b      	ldr	r3, [r3, #4]
 800bb38:	42a3      	cmp	r3, r4
 800bb3a:	d1fb      	bne.n	800bb34 <_malloc_r+0xdc>
 800bb3c:	2300      	movs	r3, #0
 800bb3e:	6053      	str	r3, [r2, #4]
 800bb40:	e7de      	b.n	800bb00 <_malloc_r+0xa8>
 800bb42:	230c      	movs	r3, #12
 800bb44:	4630      	mov	r0, r6
 800bb46:	6033      	str	r3, [r6, #0]
 800bb48:	f000 f8b8 	bl	800bcbc <__malloc_unlock>
 800bb4c:	e794      	b.n	800ba78 <_malloc_r+0x20>
 800bb4e:	6005      	str	r5, [r0, #0]
 800bb50:	e7d6      	b.n	800bb00 <_malloc_r+0xa8>
 800bb52:	bf00      	nop
 800bb54:	20000594 	.word	0x20000594

0800bb58 <__sflush_r>:
 800bb58:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800bb5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bb60:	0716      	lsls	r6, r2, #28
 800bb62:	4605      	mov	r5, r0
 800bb64:	460c      	mov	r4, r1
 800bb66:	d454      	bmi.n	800bc12 <__sflush_r+0xba>
 800bb68:	684b      	ldr	r3, [r1, #4]
 800bb6a:	2b00      	cmp	r3, #0
 800bb6c:	dc02      	bgt.n	800bb74 <__sflush_r+0x1c>
 800bb6e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800bb70:	2b00      	cmp	r3, #0
 800bb72:	dd48      	ble.n	800bc06 <__sflush_r+0xae>
 800bb74:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800bb76:	2e00      	cmp	r6, #0
 800bb78:	d045      	beq.n	800bc06 <__sflush_r+0xae>
 800bb7a:	2300      	movs	r3, #0
 800bb7c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800bb80:	682f      	ldr	r7, [r5, #0]
 800bb82:	6a21      	ldr	r1, [r4, #32]
 800bb84:	602b      	str	r3, [r5, #0]
 800bb86:	d030      	beq.n	800bbea <__sflush_r+0x92>
 800bb88:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800bb8a:	89a3      	ldrh	r3, [r4, #12]
 800bb8c:	0759      	lsls	r1, r3, #29
 800bb8e:	d505      	bpl.n	800bb9c <__sflush_r+0x44>
 800bb90:	6863      	ldr	r3, [r4, #4]
 800bb92:	1ad2      	subs	r2, r2, r3
 800bb94:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800bb96:	b10b      	cbz	r3, 800bb9c <__sflush_r+0x44>
 800bb98:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800bb9a:	1ad2      	subs	r2, r2, r3
 800bb9c:	2300      	movs	r3, #0
 800bb9e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800bba0:	6a21      	ldr	r1, [r4, #32]
 800bba2:	4628      	mov	r0, r5
 800bba4:	47b0      	blx	r6
 800bba6:	1c43      	adds	r3, r0, #1
 800bba8:	89a3      	ldrh	r3, [r4, #12]
 800bbaa:	d106      	bne.n	800bbba <__sflush_r+0x62>
 800bbac:	6829      	ldr	r1, [r5, #0]
 800bbae:	291d      	cmp	r1, #29
 800bbb0:	d82b      	bhi.n	800bc0a <__sflush_r+0xb2>
 800bbb2:	4a2a      	ldr	r2, [pc, #168]	@ (800bc5c <__sflush_r+0x104>)
 800bbb4:	40ca      	lsrs	r2, r1
 800bbb6:	07d6      	lsls	r6, r2, #31
 800bbb8:	d527      	bpl.n	800bc0a <__sflush_r+0xb2>
 800bbba:	2200      	movs	r2, #0
 800bbbc:	04d9      	lsls	r1, r3, #19
 800bbbe:	6062      	str	r2, [r4, #4]
 800bbc0:	6922      	ldr	r2, [r4, #16]
 800bbc2:	6022      	str	r2, [r4, #0]
 800bbc4:	d504      	bpl.n	800bbd0 <__sflush_r+0x78>
 800bbc6:	1c42      	adds	r2, r0, #1
 800bbc8:	d101      	bne.n	800bbce <__sflush_r+0x76>
 800bbca:	682b      	ldr	r3, [r5, #0]
 800bbcc:	b903      	cbnz	r3, 800bbd0 <__sflush_r+0x78>
 800bbce:	6560      	str	r0, [r4, #84]	@ 0x54
 800bbd0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800bbd2:	602f      	str	r7, [r5, #0]
 800bbd4:	b1b9      	cbz	r1, 800bc06 <__sflush_r+0xae>
 800bbd6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800bbda:	4299      	cmp	r1, r3
 800bbdc:	d002      	beq.n	800bbe4 <__sflush_r+0x8c>
 800bbde:	4628      	mov	r0, r5
 800bbe0:	f000 fcce 	bl	800c580 <_free_r>
 800bbe4:	2300      	movs	r3, #0
 800bbe6:	6363      	str	r3, [r4, #52]	@ 0x34
 800bbe8:	e00d      	b.n	800bc06 <__sflush_r+0xae>
 800bbea:	2301      	movs	r3, #1
 800bbec:	4628      	mov	r0, r5
 800bbee:	47b0      	blx	r6
 800bbf0:	4602      	mov	r2, r0
 800bbf2:	1c50      	adds	r0, r2, #1
 800bbf4:	d1c9      	bne.n	800bb8a <__sflush_r+0x32>
 800bbf6:	682b      	ldr	r3, [r5, #0]
 800bbf8:	2b00      	cmp	r3, #0
 800bbfa:	d0c6      	beq.n	800bb8a <__sflush_r+0x32>
 800bbfc:	2b1d      	cmp	r3, #29
 800bbfe:	d001      	beq.n	800bc04 <__sflush_r+0xac>
 800bc00:	2b16      	cmp	r3, #22
 800bc02:	d11d      	bne.n	800bc40 <__sflush_r+0xe8>
 800bc04:	602f      	str	r7, [r5, #0]
 800bc06:	2000      	movs	r0, #0
 800bc08:	e021      	b.n	800bc4e <__sflush_r+0xf6>
 800bc0a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bc0e:	b21b      	sxth	r3, r3
 800bc10:	e01a      	b.n	800bc48 <__sflush_r+0xf0>
 800bc12:	690f      	ldr	r7, [r1, #16]
 800bc14:	2f00      	cmp	r7, #0
 800bc16:	d0f6      	beq.n	800bc06 <__sflush_r+0xae>
 800bc18:	0793      	lsls	r3, r2, #30
 800bc1a:	680e      	ldr	r6, [r1, #0]
 800bc1c:	600f      	str	r7, [r1, #0]
 800bc1e:	bf0c      	ite	eq
 800bc20:	694b      	ldreq	r3, [r1, #20]
 800bc22:	2300      	movne	r3, #0
 800bc24:	eba6 0807 	sub.w	r8, r6, r7
 800bc28:	608b      	str	r3, [r1, #8]
 800bc2a:	f1b8 0f00 	cmp.w	r8, #0
 800bc2e:	ddea      	ble.n	800bc06 <__sflush_r+0xae>
 800bc30:	4643      	mov	r3, r8
 800bc32:	463a      	mov	r2, r7
 800bc34:	6a21      	ldr	r1, [r4, #32]
 800bc36:	4628      	mov	r0, r5
 800bc38:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800bc3a:	47b0      	blx	r6
 800bc3c:	2800      	cmp	r0, #0
 800bc3e:	dc08      	bgt.n	800bc52 <__sflush_r+0xfa>
 800bc40:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bc44:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bc48:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800bc4c:	81a3      	strh	r3, [r4, #12]
 800bc4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bc52:	4407      	add	r7, r0
 800bc54:	eba8 0800 	sub.w	r8, r8, r0
 800bc58:	e7e7      	b.n	800bc2a <__sflush_r+0xd2>
 800bc5a:	bf00      	nop
 800bc5c:	20400001 	.word	0x20400001

0800bc60 <_fflush_r>:
 800bc60:	b538      	push	{r3, r4, r5, lr}
 800bc62:	690b      	ldr	r3, [r1, #16]
 800bc64:	4605      	mov	r5, r0
 800bc66:	460c      	mov	r4, r1
 800bc68:	b913      	cbnz	r3, 800bc70 <_fflush_r+0x10>
 800bc6a:	2500      	movs	r5, #0
 800bc6c:	4628      	mov	r0, r5
 800bc6e:	bd38      	pop	{r3, r4, r5, pc}
 800bc70:	b118      	cbz	r0, 800bc7a <_fflush_r+0x1a>
 800bc72:	6a03      	ldr	r3, [r0, #32]
 800bc74:	b90b      	cbnz	r3, 800bc7a <_fflush_r+0x1a>
 800bc76:	f7fe ffe5 	bl	800ac44 <__sinit>
 800bc7a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bc7e:	2b00      	cmp	r3, #0
 800bc80:	d0f3      	beq.n	800bc6a <_fflush_r+0xa>
 800bc82:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800bc84:	07d0      	lsls	r0, r2, #31
 800bc86:	d404      	bmi.n	800bc92 <_fflush_r+0x32>
 800bc88:	0599      	lsls	r1, r3, #22
 800bc8a:	d402      	bmi.n	800bc92 <_fflush_r+0x32>
 800bc8c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800bc8e:	f7ff f842 	bl	800ad16 <__retarget_lock_acquire_recursive>
 800bc92:	4628      	mov	r0, r5
 800bc94:	4621      	mov	r1, r4
 800bc96:	f7ff ff5f 	bl	800bb58 <__sflush_r>
 800bc9a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800bc9c:	4605      	mov	r5, r0
 800bc9e:	07da      	lsls	r2, r3, #31
 800bca0:	d4e4      	bmi.n	800bc6c <_fflush_r+0xc>
 800bca2:	89a3      	ldrh	r3, [r4, #12]
 800bca4:	059b      	lsls	r3, r3, #22
 800bca6:	d4e1      	bmi.n	800bc6c <_fflush_r+0xc>
 800bca8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800bcaa:	f7ff f835 	bl	800ad18 <__retarget_lock_release_recursive>
 800bcae:	e7dd      	b.n	800bc6c <_fflush_r+0xc>

0800bcb0 <__malloc_lock>:
 800bcb0:	4801      	ldr	r0, [pc, #4]	@ (800bcb8 <__malloc_lock+0x8>)
 800bcb2:	f7ff b830 	b.w	800ad16 <__retarget_lock_acquire_recursive>
 800bcb6:	bf00      	nop
 800bcb8:	2000058c 	.word	0x2000058c

0800bcbc <__malloc_unlock>:
 800bcbc:	4801      	ldr	r0, [pc, #4]	@ (800bcc4 <__malloc_unlock+0x8>)
 800bcbe:	f7ff b82b 	b.w	800ad18 <__retarget_lock_release_recursive>
 800bcc2:	bf00      	nop
 800bcc4:	2000058c 	.word	0x2000058c

0800bcc8 <_Balloc>:
 800bcc8:	b570      	push	{r4, r5, r6, lr}
 800bcca:	69c6      	ldr	r6, [r0, #28]
 800bccc:	4604      	mov	r4, r0
 800bcce:	460d      	mov	r5, r1
 800bcd0:	b976      	cbnz	r6, 800bcf0 <_Balloc+0x28>
 800bcd2:	2010      	movs	r0, #16
 800bcd4:	f7ff fe96 	bl	800ba04 <malloc>
 800bcd8:	4602      	mov	r2, r0
 800bcda:	61e0      	str	r0, [r4, #28]
 800bcdc:	b920      	cbnz	r0, 800bce8 <_Balloc+0x20>
 800bcde:	4b18      	ldr	r3, [pc, #96]	@ (800bd40 <_Balloc+0x78>)
 800bce0:	216b      	movs	r1, #107	@ 0x6b
 800bce2:	4818      	ldr	r0, [pc, #96]	@ (800bd44 <_Balloc+0x7c>)
 800bce4:	f000 fc1a 	bl	800c51c <__assert_func>
 800bce8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bcec:	6006      	str	r6, [r0, #0]
 800bcee:	60c6      	str	r6, [r0, #12]
 800bcf0:	69e6      	ldr	r6, [r4, #28]
 800bcf2:	68f3      	ldr	r3, [r6, #12]
 800bcf4:	b183      	cbz	r3, 800bd18 <_Balloc+0x50>
 800bcf6:	69e3      	ldr	r3, [r4, #28]
 800bcf8:	68db      	ldr	r3, [r3, #12]
 800bcfa:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800bcfe:	b9b8      	cbnz	r0, 800bd30 <_Balloc+0x68>
 800bd00:	2101      	movs	r1, #1
 800bd02:	4620      	mov	r0, r4
 800bd04:	fa01 f605 	lsl.w	r6, r1, r5
 800bd08:	1d72      	adds	r2, r6, #5
 800bd0a:	0092      	lsls	r2, r2, #2
 800bd0c:	f000 fc24 	bl	800c558 <_calloc_r>
 800bd10:	b160      	cbz	r0, 800bd2c <_Balloc+0x64>
 800bd12:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800bd16:	e00e      	b.n	800bd36 <_Balloc+0x6e>
 800bd18:	2221      	movs	r2, #33	@ 0x21
 800bd1a:	2104      	movs	r1, #4
 800bd1c:	4620      	mov	r0, r4
 800bd1e:	f000 fc1b 	bl	800c558 <_calloc_r>
 800bd22:	69e3      	ldr	r3, [r4, #28]
 800bd24:	60f0      	str	r0, [r6, #12]
 800bd26:	68db      	ldr	r3, [r3, #12]
 800bd28:	2b00      	cmp	r3, #0
 800bd2a:	d1e4      	bne.n	800bcf6 <_Balloc+0x2e>
 800bd2c:	2000      	movs	r0, #0
 800bd2e:	bd70      	pop	{r4, r5, r6, pc}
 800bd30:	6802      	ldr	r2, [r0, #0]
 800bd32:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800bd36:	2300      	movs	r3, #0
 800bd38:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800bd3c:	e7f7      	b.n	800bd2e <_Balloc+0x66>
 800bd3e:	bf00      	nop
 800bd40:	0800d199 	.word	0x0800d199
 800bd44:	0800d219 	.word	0x0800d219

0800bd48 <_Bfree>:
 800bd48:	b570      	push	{r4, r5, r6, lr}
 800bd4a:	69c6      	ldr	r6, [r0, #28]
 800bd4c:	4605      	mov	r5, r0
 800bd4e:	460c      	mov	r4, r1
 800bd50:	b976      	cbnz	r6, 800bd70 <_Bfree+0x28>
 800bd52:	2010      	movs	r0, #16
 800bd54:	f7ff fe56 	bl	800ba04 <malloc>
 800bd58:	4602      	mov	r2, r0
 800bd5a:	61e8      	str	r0, [r5, #28]
 800bd5c:	b920      	cbnz	r0, 800bd68 <_Bfree+0x20>
 800bd5e:	4b09      	ldr	r3, [pc, #36]	@ (800bd84 <_Bfree+0x3c>)
 800bd60:	218f      	movs	r1, #143	@ 0x8f
 800bd62:	4809      	ldr	r0, [pc, #36]	@ (800bd88 <_Bfree+0x40>)
 800bd64:	f000 fbda 	bl	800c51c <__assert_func>
 800bd68:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bd6c:	6006      	str	r6, [r0, #0]
 800bd6e:	60c6      	str	r6, [r0, #12]
 800bd70:	b13c      	cbz	r4, 800bd82 <_Bfree+0x3a>
 800bd72:	69eb      	ldr	r3, [r5, #28]
 800bd74:	6862      	ldr	r2, [r4, #4]
 800bd76:	68db      	ldr	r3, [r3, #12]
 800bd78:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800bd7c:	6021      	str	r1, [r4, #0]
 800bd7e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800bd82:	bd70      	pop	{r4, r5, r6, pc}
 800bd84:	0800d199 	.word	0x0800d199
 800bd88:	0800d219 	.word	0x0800d219

0800bd8c <__multadd>:
 800bd8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bd90:	f101 0c14 	add.w	ip, r1, #20
 800bd94:	4607      	mov	r7, r0
 800bd96:	460c      	mov	r4, r1
 800bd98:	461e      	mov	r6, r3
 800bd9a:	690d      	ldr	r5, [r1, #16]
 800bd9c:	2000      	movs	r0, #0
 800bd9e:	f8dc 3000 	ldr.w	r3, [ip]
 800bda2:	3001      	adds	r0, #1
 800bda4:	b299      	uxth	r1, r3
 800bda6:	4285      	cmp	r5, r0
 800bda8:	fb02 6101 	mla	r1, r2, r1, r6
 800bdac:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800bdb0:	ea4f 4311 	mov.w	r3, r1, lsr #16
 800bdb4:	b289      	uxth	r1, r1
 800bdb6:	fb02 3306 	mla	r3, r2, r6, r3
 800bdba:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800bdbe:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800bdc2:	f84c 1b04 	str.w	r1, [ip], #4
 800bdc6:	dcea      	bgt.n	800bd9e <__multadd+0x12>
 800bdc8:	b30e      	cbz	r6, 800be0e <__multadd+0x82>
 800bdca:	68a3      	ldr	r3, [r4, #8]
 800bdcc:	42ab      	cmp	r3, r5
 800bdce:	dc19      	bgt.n	800be04 <__multadd+0x78>
 800bdd0:	6861      	ldr	r1, [r4, #4]
 800bdd2:	4638      	mov	r0, r7
 800bdd4:	3101      	adds	r1, #1
 800bdd6:	f7ff ff77 	bl	800bcc8 <_Balloc>
 800bdda:	4680      	mov	r8, r0
 800bddc:	b928      	cbnz	r0, 800bdea <__multadd+0x5e>
 800bdde:	4602      	mov	r2, r0
 800bde0:	4b0c      	ldr	r3, [pc, #48]	@ (800be14 <__multadd+0x88>)
 800bde2:	21ba      	movs	r1, #186	@ 0xba
 800bde4:	480c      	ldr	r0, [pc, #48]	@ (800be18 <__multadd+0x8c>)
 800bde6:	f000 fb99 	bl	800c51c <__assert_func>
 800bdea:	6922      	ldr	r2, [r4, #16]
 800bdec:	f104 010c 	add.w	r1, r4, #12
 800bdf0:	300c      	adds	r0, #12
 800bdf2:	3202      	adds	r2, #2
 800bdf4:	0092      	lsls	r2, r2, #2
 800bdf6:	f000 fb83 	bl	800c500 <memcpy>
 800bdfa:	4621      	mov	r1, r4
 800bdfc:	4644      	mov	r4, r8
 800bdfe:	4638      	mov	r0, r7
 800be00:	f7ff ffa2 	bl	800bd48 <_Bfree>
 800be04:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800be08:	3501      	adds	r5, #1
 800be0a:	615e      	str	r6, [r3, #20]
 800be0c:	6125      	str	r5, [r4, #16]
 800be0e:	4620      	mov	r0, r4
 800be10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800be14:	0800d208 	.word	0x0800d208
 800be18:	0800d219 	.word	0x0800d219

0800be1c <__hi0bits>:
 800be1c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800be20:	4603      	mov	r3, r0
 800be22:	bf36      	itet	cc
 800be24:	0403      	lslcc	r3, r0, #16
 800be26:	2000      	movcs	r0, #0
 800be28:	2010      	movcc	r0, #16
 800be2a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800be2e:	bf3c      	itt	cc
 800be30:	021b      	lslcc	r3, r3, #8
 800be32:	3008      	addcc	r0, #8
 800be34:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800be38:	bf3c      	itt	cc
 800be3a:	011b      	lslcc	r3, r3, #4
 800be3c:	3004      	addcc	r0, #4
 800be3e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800be42:	bf3c      	itt	cc
 800be44:	009b      	lslcc	r3, r3, #2
 800be46:	3002      	addcc	r0, #2
 800be48:	2b00      	cmp	r3, #0
 800be4a:	db05      	blt.n	800be58 <__hi0bits+0x3c>
 800be4c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800be50:	f100 0001 	add.w	r0, r0, #1
 800be54:	bf08      	it	eq
 800be56:	2020      	moveq	r0, #32
 800be58:	4770      	bx	lr

0800be5a <__lo0bits>:
 800be5a:	6803      	ldr	r3, [r0, #0]
 800be5c:	4602      	mov	r2, r0
 800be5e:	f013 0007 	ands.w	r0, r3, #7
 800be62:	d00b      	beq.n	800be7c <__lo0bits+0x22>
 800be64:	07d9      	lsls	r1, r3, #31
 800be66:	d421      	bmi.n	800beac <__lo0bits+0x52>
 800be68:	0798      	lsls	r0, r3, #30
 800be6a:	bf47      	ittee	mi
 800be6c:	085b      	lsrmi	r3, r3, #1
 800be6e:	2001      	movmi	r0, #1
 800be70:	089b      	lsrpl	r3, r3, #2
 800be72:	2002      	movpl	r0, #2
 800be74:	bf4c      	ite	mi
 800be76:	6013      	strmi	r3, [r2, #0]
 800be78:	6013      	strpl	r3, [r2, #0]
 800be7a:	4770      	bx	lr
 800be7c:	b299      	uxth	r1, r3
 800be7e:	b909      	cbnz	r1, 800be84 <__lo0bits+0x2a>
 800be80:	0c1b      	lsrs	r3, r3, #16
 800be82:	2010      	movs	r0, #16
 800be84:	b2d9      	uxtb	r1, r3
 800be86:	b909      	cbnz	r1, 800be8c <__lo0bits+0x32>
 800be88:	3008      	adds	r0, #8
 800be8a:	0a1b      	lsrs	r3, r3, #8
 800be8c:	0719      	lsls	r1, r3, #28
 800be8e:	bf04      	itt	eq
 800be90:	091b      	lsreq	r3, r3, #4
 800be92:	3004      	addeq	r0, #4
 800be94:	0799      	lsls	r1, r3, #30
 800be96:	bf04      	itt	eq
 800be98:	089b      	lsreq	r3, r3, #2
 800be9a:	3002      	addeq	r0, #2
 800be9c:	07d9      	lsls	r1, r3, #31
 800be9e:	d403      	bmi.n	800bea8 <__lo0bits+0x4e>
 800bea0:	085b      	lsrs	r3, r3, #1
 800bea2:	f100 0001 	add.w	r0, r0, #1
 800bea6:	d003      	beq.n	800beb0 <__lo0bits+0x56>
 800bea8:	6013      	str	r3, [r2, #0]
 800beaa:	4770      	bx	lr
 800beac:	2000      	movs	r0, #0
 800beae:	4770      	bx	lr
 800beb0:	2020      	movs	r0, #32
 800beb2:	4770      	bx	lr

0800beb4 <__i2b>:
 800beb4:	b510      	push	{r4, lr}
 800beb6:	460c      	mov	r4, r1
 800beb8:	2101      	movs	r1, #1
 800beba:	f7ff ff05 	bl	800bcc8 <_Balloc>
 800bebe:	4602      	mov	r2, r0
 800bec0:	b928      	cbnz	r0, 800bece <__i2b+0x1a>
 800bec2:	4b05      	ldr	r3, [pc, #20]	@ (800bed8 <__i2b+0x24>)
 800bec4:	f240 1145 	movw	r1, #325	@ 0x145
 800bec8:	4804      	ldr	r0, [pc, #16]	@ (800bedc <__i2b+0x28>)
 800beca:	f000 fb27 	bl	800c51c <__assert_func>
 800bece:	2301      	movs	r3, #1
 800bed0:	6144      	str	r4, [r0, #20]
 800bed2:	6103      	str	r3, [r0, #16]
 800bed4:	bd10      	pop	{r4, pc}
 800bed6:	bf00      	nop
 800bed8:	0800d208 	.word	0x0800d208
 800bedc:	0800d219 	.word	0x0800d219

0800bee0 <__multiply>:
 800bee0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bee4:	4617      	mov	r7, r2
 800bee6:	690a      	ldr	r2, [r1, #16]
 800bee8:	4689      	mov	r9, r1
 800beea:	b085      	sub	sp, #20
 800beec:	693b      	ldr	r3, [r7, #16]
 800beee:	429a      	cmp	r2, r3
 800bef0:	bfa2      	ittt	ge
 800bef2:	463b      	movge	r3, r7
 800bef4:	460f      	movge	r7, r1
 800bef6:	4699      	movge	r9, r3
 800bef8:	693d      	ldr	r5, [r7, #16]
 800befa:	68bb      	ldr	r3, [r7, #8]
 800befc:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800bf00:	6879      	ldr	r1, [r7, #4]
 800bf02:	eb05 060a 	add.w	r6, r5, sl
 800bf06:	42b3      	cmp	r3, r6
 800bf08:	bfb8      	it	lt
 800bf0a:	3101      	addlt	r1, #1
 800bf0c:	f7ff fedc 	bl	800bcc8 <_Balloc>
 800bf10:	b930      	cbnz	r0, 800bf20 <__multiply+0x40>
 800bf12:	4602      	mov	r2, r0
 800bf14:	4b42      	ldr	r3, [pc, #264]	@ (800c020 <__multiply+0x140>)
 800bf16:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800bf1a:	4842      	ldr	r0, [pc, #264]	@ (800c024 <__multiply+0x144>)
 800bf1c:	f000 fafe 	bl	800c51c <__assert_func>
 800bf20:	f100 0414 	add.w	r4, r0, #20
 800bf24:	2200      	movs	r2, #0
 800bf26:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800bf2a:	4623      	mov	r3, r4
 800bf2c:	4573      	cmp	r3, lr
 800bf2e:	d320      	bcc.n	800bf72 <__multiply+0x92>
 800bf30:	f107 0814 	add.w	r8, r7, #20
 800bf34:	f109 0114 	add.w	r1, r9, #20
 800bf38:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800bf3c:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800bf40:	9302      	str	r3, [sp, #8]
 800bf42:	1beb      	subs	r3, r5, r7
 800bf44:	3715      	adds	r7, #21
 800bf46:	3b15      	subs	r3, #21
 800bf48:	f023 0303 	bic.w	r3, r3, #3
 800bf4c:	3304      	adds	r3, #4
 800bf4e:	42bd      	cmp	r5, r7
 800bf50:	bf38      	it	cc
 800bf52:	2304      	movcc	r3, #4
 800bf54:	9301      	str	r3, [sp, #4]
 800bf56:	9b02      	ldr	r3, [sp, #8]
 800bf58:	9103      	str	r1, [sp, #12]
 800bf5a:	428b      	cmp	r3, r1
 800bf5c:	d80c      	bhi.n	800bf78 <__multiply+0x98>
 800bf5e:	2e00      	cmp	r6, #0
 800bf60:	dd03      	ble.n	800bf6a <__multiply+0x8a>
 800bf62:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800bf66:	2b00      	cmp	r3, #0
 800bf68:	d057      	beq.n	800c01a <__multiply+0x13a>
 800bf6a:	6106      	str	r6, [r0, #16]
 800bf6c:	b005      	add	sp, #20
 800bf6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bf72:	f843 2b04 	str.w	r2, [r3], #4
 800bf76:	e7d9      	b.n	800bf2c <__multiply+0x4c>
 800bf78:	f8b1 a000 	ldrh.w	sl, [r1]
 800bf7c:	f1ba 0f00 	cmp.w	sl, #0
 800bf80:	d021      	beq.n	800bfc6 <__multiply+0xe6>
 800bf82:	46c4      	mov	ip, r8
 800bf84:	46a1      	mov	r9, r4
 800bf86:	2700      	movs	r7, #0
 800bf88:	f85c 2b04 	ldr.w	r2, [ip], #4
 800bf8c:	f8d9 3000 	ldr.w	r3, [r9]
 800bf90:	fa1f fb82 	uxth.w	fp, r2
 800bf94:	4565      	cmp	r5, ip
 800bf96:	b29b      	uxth	r3, r3
 800bf98:	ea4f 4212 	mov.w	r2, r2, lsr #16
 800bf9c:	fb0a 330b 	mla	r3, sl, fp, r3
 800bfa0:	443b      	add	r3, r7
 800bfa2:	f8d9 7000 	ldr.w	r7, [r9]
 800bfa6:	ea4f 4717 	mov.w	r7, r7, lsr #16
 800bfaa:	fb0a 7202 	mla	r2, sl, r2, r7
 800bfae:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800bfb2:	b29b      	uxth	r3, r3
 800bfb4:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800bfb8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800bfbc:	f849 3b04 	str.w	r3, [r9], #4
 800bfc0:	d8e2      	bhi.n	800bf88 <__multiply+0xa8>
 800bfc2:	9b01      	ldr	r3, [sp, #4]
 800bfc4:	50e7      	str	r7, [r4, r3]
 800bfc6:	9b03      	ldr	r3, [sp, #12]
 800bfc8:	3104      	adds	r1, #4
 800bfca:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800bfce:	f1b9 0f00 	cmp.w	r9, #0
 800bfd2:	d020      	beq.n	800c016 <__multiply+0x136>
 800bfd4:	6823      	ldr	r3, [r4, #0]
 800bfd6:	4647      	mov	r7, r8
 800bfd8:	46a4      	mov	ip, r4
 800bfda:	f04f 0a00 	mov.w	sl, #0
 800bfde:	f8b7 b000 	ldrh.w	fp, [r7]
 800bfe2:	b29b      	uxth	r3, r3
 800bfe4:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800bfe8:	fb09 220b 	mla	r2, r9, fp, r2
 800bfec:	4452      	add	r2, sl
 800bfee:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800bff2:	f84c 3b04 	str.w	r3, [ip], #4
 800bff6:	f857 3b04 	ldr.w	r3, [r7], #4
 800bffa:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800bffe:	f8bc 3000 	ldrh.w	r3, [ip]
 800c002:	42bd      	cmp	r5, r7
 800c004:	fb09 330a 	mla	r3, r9, sl, r3
 800c008:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800c00c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c010:	d8e5      	bhi.n	800bfde <__multiply+0xfe>
 800c012:	9a01      	ldr	r2, [sp, #4]
 800c014:	50a3      	str	r3, [r4, r2]
 800c016:	3404      	adds	r4, #4
 800c018:	e79d      	b.n	800bf56 <__multiply+0x76>
 800c01a:	3e01      	subs	r6, #1
 800c01c:	e79f      	b.n	800bf5e <__multiply+0x7e>
 800c01e:	bf00      	nop
 800c020:	0800d208 	.word	0x0800d208
 800c024:	0800d219 	.word	0x0800d219

0800c028 <__pow5mult>:
 800c028:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c02c:	4615      	mov	r5, r2
 800c02e:	f012 0203 	ands.w	r2, r2, #3
 800c032:	4607      	mov	r7, r0
 800c034:	460e      	mov	r6, r1
 800c036:	d007      	beq.n	800c048 <__pow5mult+0x20>
 800c038:	3a01      	subs	r2, #1
 800c03a:	4c25      	ldr	r4, [pc, #148]	@ (800c0d0 <__pow5mult+0xa8>)
 800c03c:	2300      	movs	r3, #0
 800c03e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c042:	f7ff fea3 	bl	800bd8c <__multadd>
 800c046:	4606      	mov	r6, r0
 800c048:	10ad      	asrs	r5, r5, #2
 800c04a:	d03d      	beq.n	800c0c8 <__pow5mult+0xa0>
 800c04c:	69fc      	ldr	r4, [r7, #28]
 800c04e:	b97c      	cbnz	r4, 800c070 <__pow5mult+0x48>
 800c050:	2010      	movs	r0, #16
 800c052:	f7ff fcd7 	bl	800ba04 <malloc>
 800c056:	4602      	mov	r2, r0
 800c058:	61f8      	str	r0, [r7, #28]
 800c05a:	b928      	cbnz	r0, 800c068 <__pow5mult+0x40>
 800c05c:	4b1d      	ldr	r3, [pc, #116]	@ (800c0d4 <__pow5mult+0xac>)
 800c05e:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800c062:	481d      	ldr	r0, [pc, #116]	@ (800c0d8 <__pow5mult+0xb0>)
 800c064:	f000 fa5a 	bl	800c51c <__assert_func>
 800c068:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c06c:	6004      	str	r4, [r0, #0]
 800c06e:	60c4      	str	r4, [r0, #12]
 800c070:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800c074:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c078:	b94c      	cbnz	r4, 800c08e <__pow5mult+0x66>
 800c07a:	f240 2171 	movw	r1, #625	@ 0x271
 800c07e:	4638      	mov	r0, r7
 800c080:	f7ff ff18 	bl	800beb4 <__i2b>
 800c084:	2300      	movs	r3, #0
 800c086:	4604      	mov	r4, r0
 800c088:	f8c8 0008 	str.w	r0, [r8, #8]
 800c08c:	6003      	str	r3, [r0, #0]
 800c08e:	f04f 0900 	mov.w	r9, #0
 800c092:	07eb      	lsls	r3, r5, #31
 800c094:	d50a      	bpl.n	800c0ac <__pow5mult+0x84>
 800c096:	4631      	mov	r1, r6
 800c098:	4622      	mov	r2, r4
 800c09a:	4638      	mov	r0, r7
 800c09c:	f7ff ff20 	bl	800bee0 <__multiply>
 800c0a0:	4680      	mov	r8, r0
 800c0a2:	4631      	mov	r1, r6
 800c0a4:	4638      	mov	r0, r7
 800c0a6:	4646      	mov	r6, r8
 800c0a8:	f7ff fe4e 	bl	800bd48 <_Bfree>
 800c0ac:	106d      	asrs	r5, r5, #1
 800c0ae:	d00b      	beq.n	800c0c8 <__pow5mult+0xa0>
 800c0b0:	6820      	ldr	r0, [r4, #0]
 800c0b2:	b938      	cbnz	r0, 800c0c4 <__pow5mult+0x9c>
 800c0b4:	4622      	mov	r2, r4
 800c0b6:	4621      	mov	r1, r4
 800c0b8:	4638      	mov	r0, r7
 800c0ba:	f7ff ff11 	bl	800bee0 <__multiply>
 800c0be:	6020      	str	r0, [r4, #0]
 800c0c0:	f8c0 9000 	str.w	r9, [r0]
 800c0c4:	4604      	mov	r4, r0
 800c0c6:	e7e4      	b.n	800c092 <__pow5mult+0x6a>
 800c0c8:	4630      	mov	r0, r6
 800c0ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c0ce:	bf00      	nop
 800c0d0:	0800d2cc 	.word	0x0800d2cc
 800c0d4:	0800d199 	.word	0x0800d199
 800c0d8:	0800d219 	.word	0x0800d219

0800c0dc <__lshift>:
 800c0dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c0e0:	460c      	mov	r4, r1
 800c0e2:	4607      	mov	r7, r0
 800c0e4:	4691      	mov	r9, r2
 800c0e6:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c0ea:	6923      	ldr	r3, [r4, #16]
 800c0ec:	6849      	ldr	r1, [r1, #4]
 800c0ee:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c0f2:	68a3      	ldr	r3, [r4, #8]
 800c0f4:	f108 0601 	add.w	r6, r8, #1
 800c0f8:	42b3      	cmp	r3, r6
 800c0fa:	db0b      	blt.n	800c114 <__lshift+0x38>
 800c0fc:	4638      	mov	r0, r7
 800c0fe:	f7ff fde3 	bl	800bcc8 <_Balloc>
 800c102:	4605      	mov	r5, r0
 800c104:	b948      	cbnz	r0, 800c11a <__lshift+0x3e>
 800c106:	4602      	mov	r2, r0
 800c108:	4b28      	ldr	r3, [pc, #160]	@ (800c1ac <__lshift+0xd0>)
 800c10a:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800c10e:	4828      	ldr	r0, [pc, #160]	@ (800c1b0 <__lshift+0xd4>)
 800c110:	f000 fa04 	bl	800c51c <__assert_func>
 800c114:	3101      	adds	r1, #1
 800c116:	005b      	lsls	r3, r3, #1
 800c118:	e7ee      	b.n	800c0f8 <__lshift+0x1c>
 800c11a:	2300      	movs	r3, #0
 800c11c:	f100 0114 	add.w	r1, r0, #20
 800c120:	f100 0210 	add.w	r2, r0, #16
 800c124:	4618      	mov	r0, r3
 800c126:	4553      	cmp	r3, sl
 800c128:	db33      	blt.n	800c192 <__lshift+0xb6>
 800c12a:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c12e:	f104 0314 	add.w	r3, r4, #20
 800c132:	6920      	ldr	r0, [r4, #16]
 800c134:	f019 091f 	ands.w	r9, r9, #31
 800c138:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c13c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800c140:	d02b      	beq.n	800c19a <__lshift+0xbe>
 800c142:	f1c9 0e20 	rsb	lr, r9, #32
 800c146:	468a      	mov	sl, r1
 800c148:	2200      	movs	r2, #0
 800c14a:	6818      	ldr	r0, [r3, #0]
 800c14c:	fa00 f009 	lsl.w	r0, r0, r9
 800c150:	4310      	orrs	r0, r2
 800c152:	f84a 0b04 	str.w	r0, [sl], #4
 800c156:	f853 2b04 	ldr.w	r2, [r3], #4
 800c15a:	459c      	cmp	ip, r3
 800c15c:	fa22 f20e 	lsr.w	r2, r2, lr
 800c160:	d8f3      	bhi.n	800c14a <__lshift+0x6e>
 800c162:	ebac 0304 	sub.w	r3, ip, r4
 800c166:	f104 0015 	add.w	r0, r4, #21
 800c16a:	3b15      	subs	r3, #21
 800c16c:	f023 0303 	bic.w	r3, r3, #3
 800c170:	3304      	adds	r3, #4
 800c172:	4560      	cmp	r0, ip
 800c174:	bf88      	it	hi
 800c176:	2304      	movhi	r3, #4
 800c178:	50ca      	str	r2, [r1, r3]
 800c17a:	b10a      	cbz	r2, 800c180 <__lshift+0xa4>
 800c17c:	f108 0602 	add.w	r6, r8, #2
 800c180:	3e01      	subs	r6, #1
 800c182:	4638      	mov	r0, r7
 800c184:	4621      	mov	r1, r4
 800c186:	612e      	str	r6, [r5, #16]
 800c188:	f7ff fdde 	bl	800bd48 <_Bfree>
 800c18c:	4628      	mov	r0, r5
 800c18e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c192:	3301      	adds	r3, #1
 800c194:	f842 0f04 	str.w	r0, [r2, #4]!
 800c198:	e7c5      	b.n	800c126 <__lshift+0x4a>
 800c19a:	3904      	subs	r1, #4
 800c19c:	f853 2b04 	ldr.w	r2, [r3], #4
 800c1a0:	459c      	cmp	ip, r3
 800c1a2:	f841 2f04 	str.w	r2, [r1, #4]!
 800c1a6:	d8f9      	bhi.n	800c19c <__lshift+0xc0>
 800c1a8:	e7ea      	b.n	800c180 <__lshift+0xa4>
 800c1aa:	bf00      	nop
 800c1ac:	0800d208 	.word	0x0800d208
 800c1b0:	0800d219 	.word	0x0800d219

0800c1b4 <__mcmp>:
 800c1b4:	4603      	mov	r3, r0
 800c1b6:	690a      	ldr	r2, [r1, #16]
 800c1b8:	6900      	ldr	r0, [r0, #16]
 800c1ba:	1a80      	subs	r0, r0, r2
 800c1bc:	b530      	push	{r4, r5, lr}
 800c1be:	d10e      	bne.n	800c1de <__mcmp+0x2a>
 800c1c0:	3314      	adds	r3, #20
 800c1c2:	3114      	adds	r1, #20
 800c1c4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800c1c8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800c1cc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800c1d0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800c1d4:	4295      	cmp	r5, r2
 800c1d6:	d003      	beq.n	800c1e0 <__mcmp+0x2c>
 800c1d8:	d205      	bcs.n	800c1e6 <__mcmp+0x32>
 800c1da:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c1de:	bd30      	pop	{r4, r5, pc}
 800c1e0:	42a3      	cmp	r3, r4
 800c1e2:	d3f3      	bcc.n	800c1cc <__mcmp+0x18>
 800c1e4:	e7fb      	b.n	800c1de <__mcmp+0x2a>
 800c1e6:	2001      	movs	r0, #1
 800c1e8:	e7f9      	b.n	800c1de <__mcmp+0x2a>
	...

0800c1ec <__mdiff>:
 800c1ec:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c1f0:	4689      	mov	r9, r1
 800c1f2:	4606      	mov	r6, r0
 800c1f4:	4611      	mov	r1, r2
 800c1f6:	4614      	mov	r4, r2
 800c1f8:	4648      	mov	r0, r9
 800c1fa:	f7ff ffdb 	bl	800c1b4 <__mcmp>
 800c1fe:	1e05      	subs	r5, r0, #0
 800c200:	d112      	bne.n	800c228 <__mdiff+0x3c>
 800c202:	4629      	mov	r1, r5
 800c204:	4630      	mov	r0, r6
 800c206:	f7ff fd5f 	bl	800bcc8 <_Balloc>
 800c20a:	4602      	mov	r2, r0
 800c20c:	b928      	cbnz	r0, 800c21a <__mdiff+0x2e>
 800c20e:	4b41      	ldr	r3, [pc, #260]	@ (800c314 <__mdiff+0x128>)
 800c210:	f240 2137 	movw	r1, #567	@ 0x237
 800c214:	4840      	ldr	r0, [pc, #256]	@ (800c318 <__mdiff+0x12c>)
 800c216:	f000 f981 	bl	800c51c <__assert_func>
 800c21a:	2301      	movs	r3, #1
 800c21c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c220:	4610      	mov	r0, r2
 800c222:	b003      	add	sp, #12
 800c224:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c228:	bfbc      	itt	lt
 800c22a:	464b      	movlt	r3, r9
 800c22c:	46a1      	movlt	r9, r4
 800c22e:	4630      	mov	r0, r6
 800c230:	bfb8      	it	lt
 800c232:	2501      	movlt	r5, #1
 800c234:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800c238:	bfb4      	ite	lt
 800c23a:	461c      	movlt	r4, r3
 800c23c:	2500      	movge	r5, #0
 800c23e:	f7ff fd43 	bl	800bcc8 <_Balloc>
 800c242:	4602      	mov	r2, r0
 800c244:	b918      	cbnz	r0, 800c24e <__mdiff+0x62>
 800c246:	4b33      	ldr	r3, [pc, #204]	@ (800c314 <__mdiff+0x128>)
 800c248:	f240 2145 	movw	r1, #581	@ 0x245
 800c24c:	e7e2      	b.n	800c214 <__mdiff+0x28>
 800c24e:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800c252:	f104 0e14 	add.w	lr, r4, #20
 800c256:	6926      	ldr	r6, [r4, #16]
 800c258:	f100 0b14 	add.w	fp, r0, #20
 800c25c:	60c5      	str	r5, [r0, #12]
 800c25e:	f109 0514 	add.w	r5, r9, #20
 800c262:	f109 0310 	add.w	r3, r9, #16
 800c266:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800c26a:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800c26e:	46d9      	mov	r9, fp
 800c270:	f04f 0c00 	mov.w	ip, #0
 800c274:	9301      	str	r3, [sp, #4]
 800c276:	9b01      	ldr	r3, [sp, #4]
 800c278:	f85e 0b04 	ldr.w	r0, [lr], #4
 800c27c:	f853 af04 	ldr.w	sl, [r3, #4]!
 800c280:	4576      	cmp	r6, lr
 800c282:	9301      	str	r3, [sp, #4]
 800c284:	fa1f f38a 	uxth.w	r3, sl
 800c288:	4619      	mov	r1, r3
 800c28a:	b283      	uxth	r3, r0
 800c28c:	ea4f 4010 	mov.w	r0, r0, lsr #16
 800c290:	eba1 0303 	sub.w	r3, r1, r3
 800c294:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800c298:	4463      	add	r3, ip
 800c29a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800c29e:	b29b      	uxth	r3, r3
 800c2a0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800c2a4:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800c2a8:	f849 3b04 	str.w	r3, [r9], #4
 800c2ac:	d8e3      	bhi.n	800c276 <__mdiff+0x8a>
 800c2ae:	1b33      	subs	r3, r6, r4
 800c2b0:	3415      	adds	r4, #21
 800c2b2:	3b15      	subs	r3, #21
 800c2b4:	f023 0303 	bic.w	r3, r3, #3
 800c2b8:	3304      	adds	r3, #4
 800c2ba:	42a6      	cmp	r6, r4
 800c2bc:	bf38      	it	cc
 800c2be:	2304      	movcc	r3, #4
 800c2c0:	441d      	add	r5, r3
 800c2c2:	445b      	add	r3, fp
 800c2c4:	462c      	mov	r4, r5
 800c2c6:	461e      	mov	r6, r3
 800c2c8:	4544      	cmp	r4, r8
 800c2ca:	d30e      	bcc.n	800c2ea <__mdiff+0xfe>
 800c2cc:	f108 0103 	add.w	r1, r8, #3
 800c2d0:	1b49      	subs	r1, r1, r5
 800c2d2:	3d03      	subs	r5, #3
 800c2d4:	f021 0103 	bic.w	r1, r1, #3
 800c2d8:	45a8      	cmp	r8, r5
 800c2da:	bf38      	it	cc
 800c2dc:	2100      	movcc	r1, #0
 800c2de:	440b      	add	r3, r1
 800c2e0:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c2e4:	b199      	cbz	r1, 800c30e <__mdiff+0x122>
 800c2e6:	6117      	str	r7, [r2, #16]
 800c2e8:	e79a      	b.n	800c220 <__mdiff+0x34>
 800c2ea:	f854 1b04 	ldr.w	r1, [r4], #4
 800c2ee:	46e6      	mov	lr, ip
 800c2f0:	fa1f fc81 	uxth.w	ip, r1
 800c2f4:	0c08      	lsrs	r0, r1, #16
 800c2f6:	4471      	add	r1, lr
 800c2f8:	44f4      	add	ip, lr
 800c2fa:	b289      	uxth	r1, r1
 800c2fc:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800c300:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800c304:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800c308:	f846 1b04 	str.w	r1, [r6], #4
 800c30c:	e7dc      	b.n	800c2c8 <__mdiff+0xdc>
 800c30e:	3f01      	subs	r7, #1
 800c310:	e7e6      	b.n	800c2e0 <__mdiff+0xf4>
 800c312:	bf00      	nop
 800c314:	0800d208 	.word	0x0800d208
 800c318:	0800d219 	.word	0x0800d219

0800c31c <__d2b>:
 800c31c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c320:	460f      	mov	r7, r1
 800c322:	2101      	movs	r1, #1
 800c324:	4616      	mov	r6, r2
 800c326:	ec59 8b10 	vmov	r8, r9, d0
 800c32a:	f7ff fccd 	bl	800bcc8 <_Balloc>
 800c32e:	4604      	mov	r4, r0
 800c330:	b930      	cbnz	r0, 800c340 <__d2b+0x24>
 800c332:	4602      	mov	r2, r0
 800c334:	4b23      	ldr	r3, [pc, #140]	@ (800c3c4 <__d2b+0xa8>)
 800c336:	f240 310f 	movw	r1, #783	@ 0x30f
 800c33a:	4823      	ldr	r0, [pc, #140]	@ (800c3c8 <__d2b+0xac>)
 800c33c:	f000 f8ee 	bl	800c51c <__assert_func>
 800c340:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800c344:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c348:	b10d      	cbz	r5, 800c34e <__d2b+0x32>
 800c34a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800c34e:	9301      	str	r3, [sp, #4]
 800c350:	f1b8 0300 	subs.w	r3, r8, #0
 800c354:	d023      	beq.n	800c39e <__d2b+0x82>
 800c356:	4668      	mov	r0, sp
 800c358:	9300      	str	r3, [sp, #0]
 800c35a:	f7ff fd7e 	bl	800be5a <__lo0bits>
 800c35e:	e9dd 1200 	ldrd	r1, r2, [sp]
 800c362:	b1d0      	cbz	r0, 800c39a <__d2b+0x7e>
 800c364:	f1c0 0320 	rsb	r3, r0, #32
 800c368:	fa02 f303 	lsl.w	r3, r2, r3
 800c36c:	40c2      	lsrs	r2, r0
 800c36e:	430b      	orrs	r3, r1
 800c370:	9201      	str	r2, [sp, #4]
 800c372:	6163      	str	r3, [r4, #20]
 800c374:	9b01      	ldr	r3, [sp, #4]
 800c376:	2b00      	cmp	r3, #0
 800c378:	61a3      	str	r3, [r4, #24]
 800c37a:	bf0c      	ite	eq
 800c37c:	2201      	moveq	r2, #1
 800c37e:	2202      	movne	r2, #2
 800c380:	6122      	str	r2, [r4, #16]
 800c382:	b1a5      	cbz	r5, 800c3ae <__d2b+0x92>
 800c384:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800c388:	4405      	add	r5, r0
 800c38a:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800c38e:	603d      	str	r5, [r7, #0]
 800c390:	6030      	str	r0, [r6, #0]
 800c392:	4620      	mov	r0, r4
 800c394:	b003      	add	sp, #12
 800c396:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c39a:	6161      	str	r1, [r4, #20]
 800c39c:	e7ea      	b.n	800c374 <__d2b+0x58>
 800c39e:	a801      	add	r0, sp, #4
 800c3a0:	f7ff fd5b 	bl	800be5a <__lo0bits>
 800c3a4:	9b01      	ldr	r3, [sp, #4]
 800c3a6:	3020      	adds	r0, #32
 800c3a8:	2201      	movs	r2, #1
 800c3aa:	6163      	str	r3, [r4, #20]
 800c3ac:	e7e8      	b.n	800c380 <__d2b+0x64>
 800c3ae:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800c3b2:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c3b6:	6038      	str	r0, [r7, #0]
 800c3b8:	6918      	ldr	r0, [r3, #16]
 800c3ba:	f7ff fd2f 	bl	800be1c <__hi0bits>
 800c3be:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c3c2:	e7e5      	b.n	800c390 <__d2b+0x74>
 800c3c4:	0800d208 	.word	0x0800d208
 800c3c8:	0800d219 	.word	0x0800d219

0800c3cc <__sread>:
 800c3cc:	b510      	push	{r4, lr}
 800c3ce:	460c      	mov	r4, r1
 800c3d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c3d4:	f000 f850 	bl	800c478 <_read_r>
 800c3d8:	2800      	cmp	r0, #0
 800c3da:	bfab      	itete	ge
 800c3dc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800c3de:	89a3      	ldrhlt	r3, [r4, #12]
 800c3e0:	181b      	addge	r3, r3, r0
 800c3e2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800c3e6:	bfac      	ite	ge
 800c3e8:	6563      	strge	r3, [r4, #84]	@ 0x54
 800c3ea:	81a3      	strhlt	r3, [r4, #12]
 800c3ec:	bd10      	pop	{r4, pc}

0800c3ee <__swrite>:
 800c3ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c3f2:	461f      	mov	r7, r3
 800c3f4:	898b      	ldrh	r3, [r1, #12]
 800c3f6:	4605      	mov	r5, r0
 800c3f8:	460c      	mov	r4, r1
 800c3fa:	05db      	lsls	r3, r3, #23
 800c3fc:	4616      	mov	r6, r2
 800c3fe:	d505      	bpl.n	800c40c <__swrite+0x1e>
 800c400:	2302      	movs	r3, #2
 800c402:	2200      	movs	r2, #0
 800c404:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c408:	f000 f824 	bl	800c454 <_lseek_r>
 800c40c:	89a3      	ldrh	r3, [r4, #12]
 800c40e:	4632      	mov	r2, r6
 800c410:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c414:	4628      	mov	r0, r5
 800c416:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800c41a:	81a3      	strh	r3, [r4, #12]
 800c41c:	463b      	mov	r3, r7
 800c41e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c422:	f000 b84b 	b.w	800c4bc <_write_r>

0800c426 <__sseek>:
 800c426:	b510      	push	{r4, lr}
 800c428:	460c      	mov	r4, r1
 800c42a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c42e:	f000 f811 	bl	800c454 <_lseek_r>
 800c432:	1c43      	adds	r3, r0, #1
 800c434:	89a3      	ldrh	r3, [r4, #12]
 800c436:	bf15      	itete	ne
 800c438:	6560      	strne	r0, [r4, #84]	@ 0x54
 800c43a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800c43e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800c442:	81a3      	strheq	r3, [r4, #12]
 800c444:	bf18      	it	ne
 800c446:	81a3      	strhne	r3, [r4, #12]
 800c448:	bd10      	pop	{r4, pc}

0800c44a <__sclose>:
 800c44a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c44e:	f000 b847 	b.w	800c4e0 <_close_r>
	...

0800c454 <_lseek_r>:
 800c454:	b538      	push	{r3, r4, r5, lr}
 800c456:	4604      	mov	r4, r0
 800c458:	4d06      	ldr	r5, [pc, #24]	@ (800c474 <_lseek_r+0x20>)
 800c45a:	4608      	mov	r0, r1
 800c45c:	4611      	mov	r1, r2
 800c45e:	2200      	movs	r2, #0
 800c460:	602a      	str	r2, [r5, #0]
 800c462:	461a      	mov	r2, r3
 800c464:	f7f5 fcfd 	bl	8001e62 <_lseek>
 800c468:	1c43      	adds	r3, r0, #1
 800c46a:	d102      	bne.n	800c472 <_lseek_r+0x1e>
 800c46c:	682b      	ldr	r3, [r5, #0]
 800c46e:	b103      	cbz	r3, 800c472 <_lseek_r+0x1e>
 800c470:	6023      	str	r3, [r4, #0]
 800c472:	bd38      	pop	{r3, r4, r5, pc}
 800c474:	20000598 	.word	0x20000598

0800c478 <_read_r>:
 800c478:	b538      	push	{r3, r4, r5, lr}
 800c47a:	4604      	mov	r4, r0
 800c47c:	4d06      	ldr	r5, [pc, #24]	@ (800c498 <_read_r+0x20>)
 800c47e:	4608      	mov	r0, r1
 800c480:	4611      	mov	r1, r2
 800c482:	2200      	movs	r2, #0
 800c484:	602a      	str	r2, [r5, #0]
 800c486:	461a      	mov	r2, r3
 800c488:	f7f5 fc8b 	bl	8001da2 <_read>
 800c48c:	1c43      	adds	r3, r0, #1
 800c48e:	d102      	bne.n	800c496 <_read_r+0x1e>
 800c490:	682b      	ldr	r3, [r5, #0]
 800c492:	b103      	cbz	r3, 800c496 <_read_r+0x1e>
 800c494:	6023      	str	r3, [r4, #0]
 800c496:	bd38      	pop	{r3, r4, r5, pc}
 800c498:	20000598 	.word	0x20000598

0800c49c <_sbrk_r>:
 800c49c:	b538      	push	{r3, r4, r5, lr}
 800c49e:	2300      	movs	r3, #0
 800c4a0:	4d05      	ldr	r5, [pc, #20]	@ (800c4b8 <_sbrk_r+0x1c>)
 800c4a2:	4604      	mov	r4, r0
 800c4a4:	4608      	mov	r0, r1
 800c4a6:	602b      	str	r3, [r5, #0]
 800c4a8:	f7f5 fce8 	bl	8001e7c <_sbrk>
 800c4ac:	1c43      	adds	r3, r0, #1
 800c4ae:	d102      	bne.n	800c4b6 <_sbrk_r+0x1a>
 800c4b0:	682b      	ldr	r3, [r5, #0]
 800c4b2:	b103      	cbz	r3, 800c4b6 <_sbrk_r+0x1a>
 800c4b4:	6023      	str	r3, [r4, #0]
 800c4b6:	bd38      	pop	{r3, r4, r5, pc}
 800c4b8:	20000598 	.word	0x20000598

0800c4bc <_write_r>:
 800c4bc:	b538      	push	{r3, r4, r5, lr}
 800c4be:	4604      	mov	r4, r0
 800c4c0:	4d06      	ldr	r5, [pc, #24]	@ (800c4dc <_write_r+0x20>)
 800c4c2:	4608      	mov	r0, r1
 800c4c4:	4611      	mov	r1, r2
 800c4c6:	2200      	movs	r2, #0
 800c4c8:	602a      	str	r2, [r5, #0]
 800c4ca:	461a      	mov	r2, r3
 800c4cc:	f7f5 fc86 	bl	8001ddc <_write>
 800c4d0:	1c43      	adds	r3, r0, #1
 800c4d2:	d102      	bne.n	800c4da <_write_r+0x1e>
 800c4d4:	682b      	ldr	r3, [r5, #0]
 800c4d6:	b103      	cbz	r3, 800c4da <_write_r+0x1e>
 800c4d8:	6023      	str	r3, [r4, #0]
 800c4da:	bd38      	pop	{r3, r4, r5, pc}
 800c4dc:	20000598 	.word	0x20000598

0800c4e0 <_close_r>:
 800c4e0:	b538      	push	{r3, r4, r5, lr}
 800c4e2:	2300      	movs	r3, #0
 800c4e4:	4d05      	ldr	r5, [pc, #20]	@ (800c4fc <_close_r+0x1c>)
 800c4e6:	4604      	mov	r4, r0
 800c4e8:	4608      	mov	r0, r1
 800c4ea:	602b      	str	r3, [r5, #0]
 800c4ec:	f7f5 fc92 	bl	8001e14 <_close>
 800c4f0:	1c43      	adds	r3, r0, #1
 800c4f2:	d102      	bne.n	800c4fa <_close_r+0x1a>
 800c4f4:	682b      	ldr	r3, [r5, #0]
 800c4f6:	b103      	cbz	r3, 800c4fa <_close_r+0x1a>
 800c4f8:	6023      	str	r3, [r4, #0]
 800c4fa:	bd38      	pop	{r3, r4, r5, pc}
 800c4fc:	20000598 	.word	0x20000598

0800c500 <memcpy>:
 800c500:	440a      	add	r2, r1
 800c502:	1e43      	subs	r3, r0, #1
 800c504:	4291      	cmp	r1, r2
 800c506:	d100      	bne.n	800c50a <memcpy+0xa>
 800c508:	4770      	bx	lr
 800c50a:	b510      	push	{r4, lr}
 800c50c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c510:	4291      	cmp	r1, r2
 800c512:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c516:	d1f9      	bne.n	800c50c <memcpy+0xc>
 800c518:	bd10      	pop	{r4, pc}
	...

0800c51c <__assert_func>:
 800c51c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c51e:	4614      	mov	r4, r2
 800c520:	461a      	mov	r2, r3
 800c522:	4b09      	ldr	r3, [pc, #36]	@ (800c548 <__assert_func+0x2c>)
 800c524:	4605      	mov	r5, r0
 800c526:	681b      	ldr	r3, [r3, #0]
 800c528:	68d8      	ldr	r0, [r3, #12]
 800c52a:	b14c      	cbz	r4, 800c540 <__assert_func+0x24>
 800c52c:	4b07      	ldr	r3, [pc, #28]	@ (800c54c <__assert_func+0x30>)
 800c52e:	9100      	str	r1, [sp, #0]
 800c530:	4907      	ldr	r1, [pc, #28]	@ (800c550 <__assert_func+0x34>)
 800c532:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c536:	462b      	mov	r3, r5
 800c538:	f000 f87e 	bl	800c638 <fiprintf>
 800c53c:	f000 f89b 	bl	800c676 <abort>
 800c540:	4b04      	ldr	r3, [pc, #16]	@ (800c554 <__assert_func+0x38>)
 800c542:	461c      	mov	r4, r3
 800c544:	e7f3      	b.n	800c52e <__assert_func+0x12>
 800c546:	bf00      	nop
 800c548:	2000003c 	.word	0x2000003c
 800c54c:	0800d27c 	.word	0x0800d27c
 800c550:	0800d289 	.word	0x0800d289
 800c554:	0800d2b7 	.word	0x0800d2b7

0800c558 <_calloc_r>:
 800c558:	b570      	push	{r4, r5, r6, lr}
 800c55a:	fba1 5402 	umull	r5, r4, r1, r2
 800c55e:	b934      	cbnz	r4, 800c56e <_calloc_r+0x16>
 800c560:	4629      	mov	r1, r5
 800c562:	f7ff fa79 	bl	800ba58 <_malloc_r>
 800c566:	4606      	mov	r6, r0
 800c568:	b928      	cbnz	r0, 800c576 <_calloc_r+0x1e>
 800c56a:	4630      	mov	r0, r6
 800c56c:	bd70      	pop	{r4, r5, r6, pc}
 800c56e:	220c      	movs	r2, #12
 800c570:	2600      	movs	r6, #0
 800c572:	6002      	str	r2, [r0, #0]
 800c574:	e7f9      	b.n	800c56a <_calloc_r+0x12>
 800c576:	462a      	mov	r2, r5
 800c578:	4621      	mov	r1, r4
 800c57a:	f7fe fb99 	bl	800acb0 <memset>
 800c57e:	e7f4      	b.n	800c56a <_calloc_r+0x12>

0800c580 <_free_r>:
 800c580:	b538      	push	{r3, r4, r5, lr}
 800c582:	4605      	mov	r5, r0
 800c584:	2900      	cmp	r1, #0
 800c586:	d041      	beq.n	800c60c <_free_r+0x8c>
 800c588:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c58c:	1f0c      	subs	r4, r1, #4
 800c58e:	2b00      	cmp	r3, #0
 800c590:	bfb8      	it	lt
 800c592:	18e4      	addlt	r4, r4, r3
 800c594:	f7ff fb8c 	bl	800bcb0 <__malloc_lock>
 800c598:	4a1d      	ldr	r2, [pc, #116]	@ (800c610 <_free_r+0x90>)
 800c59a:	6813      	ldr	r3, [r2, #0]
 800c59c:	b933      	cbnz	r3, 800c5ac <_free_r+0x2c>
 800c59e:	6063      	str	r3, [r4, #4]
 800c5a0:	6014      	str	r4, [r2, #0]
 800c5a2:	4628      	mov	r0, r5
 800c5a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c5a8:	f7ff bb88 	b.w	800bcbc <__malloc_unlock>
 800c5ac:	42a3      	cmp	r3, r4
 800c5ae:	d908      	bls.n	800c5c2 <_free_r+0x42>
 800c5b0:	6820      	ldr	r0, [r4, #0]
 800c5b2:	1821      	adds	r1, r4, r0
 800c5b4:	428b      	cmp	r3, r1
 800c5b6:	bf01      	itttt	eq
 800c5b8:	6819      	ldreq	r1, [r3, #0]
 800c5ba:	685b      	ldreq	r3, [r3, #4]
 800c5bc:	1809      	addeq	r1, r1, r0
 800c5be:	6021      	streq	r1, [r4, #0]
 800c5c0:	e7ed      	b.n	800c59e <_free_r+0x1e>
 800c5c2:	461a      	mov	r2, r3
 800c5c4:	685b      	ldr	r3, [r3, #4]
 800c5c6:	b10b      	cbz	r3, 800c5cc <_free_r+0x4c>
 800c5c8:	42a3      	cmp	r3, r4
 800c5ca:	d9fa      	bls.n	800c5c2 <_free_r+0x42>
 800c5cc:	6811      	ldr	r1, [r2, #0]
 800c5ce:	1850      	adds	r0, r2, r1
 800c5d0:	42a0      	cmp	r0, r4
 800c5d2:	d10b      	bne.n	800c5ec <_free_r+0x6c>
 800c5d4:	6820      	ldr	r0, [r4, #0]
 800c5d6:	4401      	add	r1, r0
 800c5d8:	1850      	adds	r0, r2, r1
 800c5da:	6011      	str	r1, [r2, #0]
 800c5dc:	4283      	cmp	r3, r0
 800c5de:	d1e0      	bne.n	800c5a2 <_free_r+0x22>
 800c5e0:	6818      	ldr	r0, [r3, #0]
 800c5e2:	685b      	ldr	r3, [r3, #4]
 800c5e4:	4408      	add	r0, r1
 800c5e6:	6053      	str	r3, [r2, #4]
 800c5e8:	6010      	str	r0, [r2, #0]
 800c5ea:	e7da      	b.n	800c5a2 <_free_r+0x22>
 800c5ec:	d902      	bls.n	800c5f4 <_free_r+0x74>
 800c5ee:	230c      	movs	r3, #12
 800c5f0:	602b      	str	r3, [r5, #0]
 800c5f2:	e7d6      	b.n	800c5a2 <_free_r+0x22>
 800c5f4:	6820      	ldr	r0, [r4, #0]
 800c5f6:	1821      	adds	r1, r4, r0
 800c5f8:	428b      	cmp	r3, r1
 800c5fa:	bf02      	ittt	eq
 800c5fc:	6819      	ldreq	r1, [r3, #0]
 800c5fe:	685b      	ldreq	r3, [r3, #4]
 800c600:	1809      	addeq	r1, r1, r0
 800c602:	6063      	str	r3, [r4, #4]
 800c604:	bf08      	it	eq
 800c606:	6021      	streq	r1, [r4, #0]
 800c608:	6054      	str	r4, [r2, #4]
 800c60a:	e7ca      	b.n	800c5a2 <_free_r+0x22>
 800c60c:	bd38      	pop	{r3, r4, r5, pc}
 800c60e:	bf00      	nop
 800c610:	20000594 	.word	0x20000594

0800c614 <__ascii_mbtowc>:
 800c614:	b082      	sub	sp, #8
 800c616:	b901      	cbnz	r1, 800c61a <__ascii_mbtowc+0x6>
 800c618:	a901      	add	r1, sp, #4
 800c61a:	b142      	cbz	r2, 800c62e <__ascii_mbtowc+0x1a>
 800c61c:	b14b      	cbz	r3, 800c632 <__ascii_mbtowc+0x1e>
 800c61e:	7813      	ldrb	r3, [r2, #0]
 800c620:	600b      	str	r3, [r1, #0]
 800c622:	7812      	ldrb	r2, [r2, #0]
 800c624:	1e10      	subs	r0, r2, #0
 800c626:	bf18      	it	ne
 800c628:	2001      	movne	r0, #1
 800c62a:	b002      	add	sp, #8
 800c62c:	4770      	bx	lr
 800c62e:	4610      	mov	r0, r2
 800c630:	e7fb      	b.n	800c62a <__ascii_mbtowc+0x16>
 800c632:	f06f 0001 	mvn.w	r0, #1
 800c636:	e7f8      	b.n	800c62a <__ascii_mbtowc+0x16>

0800c638 <fiprintf>:
 800c638:	b40e      	push	{r1, r2, r3}
 800c63a:	b503      	push	{r0, r1, lr}
 800c63c:	ab03      	add	r3, sp, #12
 800c63e:	4601      	mov	r1, r0
 800c640:	4805      	ldr	r0, [pc, #20]	@ (800c658 <fiprintf+0x20>)
 800c642:	f853 2b04 	ldr.w	r2, [r3], #4
 800c646:	6800      	ldr	r0, [r0, #0]
 800c648:	9301      	str	r3, [sp, #4]
 800c64a:	f000 f845 	bl	800c6d8 <_vfiprintf_r>
 800c64e:	b002      	add	sp, #8
 800c650:	f85d eb04 	ldr.w	lr, [sp], #4
 800c654:	b003      	add	sp, #12
 800c656:	4770      	bx	lr
 800c658:	2000003c 	.word	0x2000003c

0800c65c <__ascii_wctomb>:
 800c65c:	4603      	mov	r3, r0
 800c65e:	4608      	mov	r0, r1
 800c660:	b141      	cbz	r1, 800c674 <__ascii_wctomb+0x18>
 800c662:	2aff      	cmp	r2, #255	@ 0xff
 800c664:	d904      	bls.n	800c670 <__ascii_wctomb+0x14>
 800c666:	228a      	movs	r2, #138	@ 0x8a
 800c668:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c66c:	601a      	str	r2, [r3, #0]
 800c66e:	4770      	bx	lr
 800c670:	2001      	movs	r0, #1
 800c672:	700a      	strb	r2, [r1, #0]
 800c674:	4770      	bx	lr

0800c676 <abort>:
 800c676:	2006      	movs	r0, #6
 800c678:	b508      	push	{r3, lr}
 800c67a:	f000 fa63 	bl	800cb44 <raise>
 800c67e:	2001      	movs	r0, #1
 800c680:	f7f5 fb84 	bl	8001d8c <_exit>

0800c684 <__sfputc_r>:
 800c684:	6893      	ldr	r3, [r2, #8]
 800c686:	3b01      	subs	r3, #1
 800c688:	2b00      	cmp	r3, #0
 800c68a:	b410      	push	{r4}
 800c68c:	6093      	str	r3, [r2, #8]
 800c68e:	da08      	bge.n	800c6a2 <__sfputc_r+0x1e>
 800c690:	6994      	ldr	r4, [r2, #24]
 800c692:	42a3      	cmp	r3, r4
 800c694:	db01      	blt.n	800c69a <__sfputc_r+0x16>
 800c696:	290a      	cmp	r1, #10
 800c698:	d103      	bne.n	800c6a2 <__sfputc_r+0x1e>
 800c69a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c69e:	f000 b933 	b.w	800c908 <__swbuf_r>
 800c6a2:	6813      	ldr	r3, [r2, #0]
 800c6a4:	1c58      	adds	r0, r3, #1
 800c6a6:	6010      	str	r0, [r2, #0]
 800c6a8:	4608      	mov	r0, r1
 800c6aa:	7019      	strb	r1, [r3, #0]
 800c6ac:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c6b0:	4770      	bx	lr

0800c6b2 <__sfputs_r>:
 800c6b2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c6b4:	4606      	mov	r6, r0
 800c6b6:	460f      	mov	r7, r1
 800c6b8:	4614      	mov	r4, r2
 800c6ba:	18d5      	adds	r5, r2, r3
 800c6bc:	42ac      	cmp	r4, r5
 800c6be:	d101      	bne.n	800c6c4 <__sfputs_r+0x12>
 800c6c0:	2000      	movs	r0, #0
 800c6c2:	e007      	b.n	800c6d4 <__sfputs_r+0x22>
 800c6c4:	463a      	mov	r2, r7
 800c6c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c6ca:	4630      	mov	r0, r6
 800c6cc:	f7ff ffda 	bl	800c684 <__sfputc_r>
 800c6d0:	1c43      	adds	r3, r0, #1
 800c6d2:	d1f3      	bne.n	800c6bc <__sfputs_r+0xa>
 800c6d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c6d8 <_vfiprintf_r>:
 800c6d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c6dc:	460d      	mov	r5, r1
 800c6de:	b09d      	sub	sp, #116	@ 0x74
 800c6e0:	4614      	mov	r4, r2
 800c6e2:	4698      	mov	r8, r3
 800c6e4:	4606      	mov	r6, r0
 800c6e6:	b118      	cbz	r0, 800c6f0 <_vfiprintf_r+0x18>
 800c6e8:	6a03      	ldr	r3, [r0, #32]
 800c6ea:	b90b      	cbnz	r3, 800c6f0 <_vfiprintf_r+0x18>
 800c6ec:	f7fe faaa 	bl	800ac44 <__sinit>
 800c6f0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c6f2:	07d9      	lsls	r1, r3, #31
 800c6f4:	d405      	bmi.n	800c702 <_vfiprintf_r+0x2a>
 800c6f6:	89ab      	ldrh	r3, [r5, #12]
 800c6f8:	059a      	lsls	r2, r3, #22
 800c6fa:	d402      	bmi.n	800c702 <_vfiprintf_r+0x2a>
 800c6fc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c6fe:	f7fe fb0a 	bl	800ad16 <__retarget_lock_acquire_recursive>
 800c702:	89ab      	ldrh	r3, [r5, #12]
 800c704:	071b      	lsls	r3, r3, #28
 800c706:	d501      	bpl.n	800c70c <_vfiprintf_r+0x34>
 800c708:	692b      	ldr	r3, [r5, #16]
 800c70a:	b99b      	cbnz	r3, 800c734 <_vfiprintf_r+0x5c>
 800c70c:	4629      	mov	r1, r5
 800c70e:	4630      	mov	r0, r6
 800c710:	f000 f938 	bl	800c984 <__swsetup_r>
 800c714:	b170      	cbz	r0, 800c734 <_vfiprintf_r+0x5c>
 800c716:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c718:	07dc      	lsls	r4, r3, #31
 800c71a:	d504      	bpl.n	800c726 <_vfiprintf_r+0x4e>
 800c71c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c720:	b01d      	add	sp, #116	@ 0x74
 800c722:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c726:	89ab      	ldrh	r3, [r5, #12]
 800c728:	0598      	lsls	r0, r3, #22
 800c72a:	d4f7      	bmi.n	800c71c <_vfiprintf_r+0x44>
 800c72c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c72e:	f7fe faf3 	bl	800ad18 <__retarget_lock_release_recursive>
 800c732:	e7f3      	b.n	800c71c <_vfiprintf_r+0x44>
 800c734:	2300      	movs	r3, #0
 800c736:	f8cd 800c 	str.w	r8, [sp, #12]
 800c73a:	f04f 0901 	mov.w	r9, #1
 800c73e:	f8df 81b4 	ldr.w	r8, [pc, #436]	@ 800c8f4 <_vfiprintf_r+0x21c>
 800c742:	9309      	str	r3, [sp, #36]	@ 0x24
 800c744:	2320      	movs	r3, #32
 800c746:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c74a:	2330      	movs	r3, #48	@ 0x30
 800c74c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c750:	4623      	mov	r3, r4
 800c752:	469a      	mov	sl, r3
 800c754:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c758:	b10a      	cbz	r2, 800c75e <_vfiprintf_r+0x86>
 800c75a:	2a25      	cmp	r2, #37	@ 0x25
 800c75c:	d1f9      	bne.n	800c752 <_vfiprintf_r+0x7a>
 800c75e:	ebba 0b04 	subs.w	fp, sl, r4
 800c762:	d00b      	beq.n	800c77c <_vfiprintf_r+0xa4>
 800c764:	465b      	mov	r3, fp
 800c766:	4622      	mov	r2, r4
 800c768:	4629      	mov	r1, r5
 800c76a:	4630      	mov	r0, r6
 800c76c:	f7ff ffa1 	bl	800c6b2 <__sfputs_r>
 800c770:	3001      	adds	r0, #1
 800c772:	f000 80a7 	beq.w	800c8c4 <_vfiprintf_r+0x1ec>
 800c776:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c778:	445a      	add	r2, fp
 800c77a:	9209      	str	r2, [sp, #36]	@ 0x24
 800c77c:	f89a 3000 	ldrb.w	r3, [sl]
 800c780:	2b00      	cmp	r3, #0
 800c782:	f000 809f 	beq.w	800c8c4 <_vfiprintf_r+0x1ec>
 800c786:	2300      	movs	r3, #0
 800c788:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800c78c:	f10a 0a01 	add.w	sl, sl, #1
 800c790:	9304      	str	r3, [sp, #16]
 800c792:	9307      	str	r3, [sp, #28]
 800c794:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c798:	931a      	str	r3, [sp, #104]	@ 0x68
 800c79a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c79e:	4654      	mov	r4, sl
 800c7a0:	2205      	movs	r2, #5
 800c7a2:	4854      	ldr	r0, [pc, #336]	@ (800c8f4 <_vfiprintf_r+0x21c>)
 800c7a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c7a8:	f7fe fabc 	bl	800ad24 <memchr>
 800c7ac:	9a04      	ldr	r2, [sp, #16]
 800c7ae:	b9d8      	cbnz	r0, 800c7e8 <_vfiprintf_r+0x110>
 800c7b0:	06d1      	lsls	r1, r2, #27
 800c7b2:	bf44      	itt	mi
 800c7b4:	2320      	movmi	r3, #32
 800c7b6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c7ba:	0713      	lsls	r3, r2, #28
 800c7bc:	bf44      	itt	mi
 800c7be:	232b      	movmi	r3, #43	@ 0x2b
 800c7c0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c7c4:	f89a 3000 	ldrb.w	r3, [sl]
 800c7c8:	2b2a      	cmp	r3, #42	@ 0x2a
 800c7ca:	d015      	beq.n	800c7f8 <_vfiprintf_r+0x120>
 800c7cc:	9a07      	ldr	r2, [sp, #28]
 800c7ce:	4654      	mov	r4, sl
 800c7d0:	2000      	movs	r0, #0
 800c7d2:	f04f 0c0a 	mov.w	ip, #10
 800c7d6:	4621      	mov	r1, r4
 800c7d8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c7dc:	3b30      	subs	r3, #48	@ 0x30
 800c7de:	2b09      	cmp	r3, #9
 800c7e0:	d94b      	bls.n	800c87a <_vfiprintf_r+0x1a2>
 800c7e2:	b1b0      	cbz	r0, 800c812 <_vfiprintf_r+0x13a>
 800c7e4:	9207      	str	r2, [sp, #28]
 800c7e6:	e014      	b.n	800c812 <_vfiprintf_r+0x13a>
 800c7e8:	eba0 0308 	sub.w	r3, r0, r8
 800c7ec:	46a2      	mov	sl, r4
 800c7ee:	fa09 f303 	lsl.w	r3, r9, r3
 800c7f2:	4313      	orrs	r3, r2
 800c7f4:	9304      	str	r3, [sp, #16]
 800c7f6:	e7d2      	b.n	800c79e <_vfiprintf_r+0xc6>
 800c7f8:	9b03      	ldr	r3, [sp, #12]
 800c7fa:	1d19      	adds	r1, r3, #4
 800c7fc:	681b      	ldr	r3, [r3, #0]
 800c7fe:	2b00      	cmp	r3, #0
 800c800:	9103      	str	r1, [sp, #12]
 800c802:	bfbb      	ittet	lt
 800c804:	425b      	neglt	r3, r3
 800c806:	f042 0202 	orrlt.w	r2, r2, #2
 800c80a:	9307      	strge	r3, [sp, #28]
 800c80c:	9307      	strlt	r3, [sp, #28]
 800c80e:	bfb8      	it	lt
 800c810:	9204      	strlt	r2, [sp, #16]
 800c812:	7823      	ldrb	r3, [r4, #0]
 800c814:	2b2e      	cmp	r3, #46	@ 0x2e
 800c816:	d10a      	bne.n	800c82e <_vfiprintf_r+0x156>
 800c818:	7863      	ldrb	r3, [r4, #1]
 800c81a:	2b2a      	cmp	r3, #42	@ 0x2a
 800c81c:	d132      	bne.n	800c884 <_vfiprintf_r+0x1ac>
 800c81e:	9b03      	ldr	r3, [sp, #12]
 800c820:	3402      	adds	r4, #2
 800c822:	1d1a      	adds	r2, r3, #4
 800c824:	681b      	ldr	r3, [r3, #0]
 800c826:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c82a:	9203      	str	r2, [sp, #12]
 800c82c:	9305      	str	r3, [sp, #20]
 800c82e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800c904 <_vfiprintf_r+0x22c>
 800c832:	2203      	movs	r2, #3
 800c834:	7821      	ldrb	r1, [r4, #0]
 800c836:	4650      	mov	r0, sl
 800c838:	f7fe fa74 	bl	800ad24 <memchr>
 800c83c:	b138      	cbz	r0, 800c84e <_vfiprintf_r+0x176>
 800c83e:	eba0 000a 	sub.w	r0, r0, sl
 800c842:	2240      	movs	r2, #64	@ 0x40
 800c844:	9b04      	ldr	r3, [sp, #16]
 800c846:	3401      	adds	r4, #1
 800c848:	4082      	lsls	r2, r0
 800c84a:	4313      	orrs	r3, r2
 800c84c:	9304      	str	r3, [sp, #16]
 800c84e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c852:	2206      	movs	r2, #6
 800c854:	4828      	ldr	r0, [pc, #160]	@ (800c8f8 <_vfiprintf_r+0x220>)
 800c856:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c85a:	f7fe fa63 	bl	800ad24 <memchr>
 800c85e:	2800      	cmp	r0, #0
 800c860:	d03f      	beq.n	800c8e2 <_vfiprintf_r+0x20a>
 800c862:	4b26      	ldr	r3, [pc, #152]	@ (800c8fc <_vfiprintf_r+0x224>)
 800c864:	bb1b      	cbnz	r3, 800c8ae <_vfiprintf_r+0x1d6>
 800c866:	9b03      	ldr	r3, [sp, #12]
 800c868:	3307      	adds	r3, #7
 800c86a:	f023 0307 	bic.w	r3, r3, #7
 800c86e:	3308      	adds	r3, #8
 800c870:	9303      	str	r3, [sp, #12]
 800c872:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c874:	443b      	add	r3, r7
 800c876:	9309      	str	r3, [sp, #36]	@ 0x24
 800c878:	e76a      	b.n	800c750 <_vfiprintf_r+0x78>
 800c87a:	fb0c 3202 	mla	r2, ip, r2, r3
 800c87e:	460c      	mov	r4, r1
 800c880:	2001      	movs	r0, #1
 800c882:	e7a8      	b.n	800c7d6 <_vfiprintf_r+0xfe>
 800c884:	2300      	movs	r3, #0
 800c886:	3401      	adds	r4, #1
 800c888:	f04f 0c0a 	mov.w	ip, #10
 800c88c:	4619      	mov	r1, r3
 800c88e:	9305      	str	r3, [sp, #20]
 800c890:	4620      	mov	r0, r4
 800c892:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c896:	3a30      	subs	r2, #48	@ 0x30
 800c898:	2a09      	cmp	r2, #9
 800c89a:	d903      	bls.n	800c8a4 <_vfiprintf_r+0x1cc>
 800c89c:	2b00      	cmp	r3, #0
 800c89e:	d0c6      	beq.n	800c82e <_vfiprintf_r+0x156>
 800c8a0:	9105      	str	r1, [sp, #20]
 800c8a2:	e7c4      	b.n	800c82e <_vfiprintf_r+0x156>
 800c8a4:	fb0c 2101 	mla	r1, ip, r1, r2
 800c8a8:	4604      	mov	r4, r0
 800c8aa:	2301      	movs	r3, #1
 800c8ac:	e7f0      	b.n	800c890 <_vfiprintf_r+0x1b8>
 800c8ae:	ab03      	add	r3, sp, #12
 800c8b0:	462a      	mov	r2, r5
 800c8b2:	a904      	add	r1, sp, #16
 800c8b4:	4630      	mov	r0, r6
 800c8b6:	9300      	str	r3, [sp, #0]
 800c8b8:	4b11      	ldr	r3, [pc, #68]	@ (800c900 <_vfiprintf_r+0x228>)
 800c8ba:	f7fd fd7d 	bl	800a3b8 <_printf_float>
 800c8be:	4607      	mov	r7, r0
 800c8c0:	1c78      	adds	r0, r7, #1
 800c8c2:	d1d6      	bne.n	800c872 <_vfiprintf_r+0x19a>
 800c8c4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c8c6:	07d9      	lsls	r1, r3, #31
 800c8c8:	d405      	bmi.n	800c8d6 <_vfiprintf_r+0x1fe>
 800c8ca:	89ab      	ldrh	r3, [r5, #12]
 800c8cc:	059a      	lsls	r2, r3, #22
 800c8ce:	d402      	bmi.n	800c8d6 <_vfiprintf_r+0x1fe>
 800c8d0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c8d2:	f7fe fa21 	bl	800ad18 <__retarget_lock_release_recursive>
 800c8d6:	89ab      	ldrh	r3, [r5, #12]
 800c8d8:	065b      	lsls	r3, r3, #25
 800c8da:	f53f af1f 	bmi.w	800c71c <_vfiprintf_r+0x44>
 800c8de:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c8e0:	e71e      	b.n	800c720 <_vfiprintf_r+0x48>
 800c8e2:	ab03      	add	r3, sp, #12
 800c8e4:	462a      	mov	r2, r5
 800c8e6:	a904      	add	r1, sp, #16
 800c8e8:	4630      	mov	r0, r6
 800c8ea:	9300      	str	r3, [sp, #0]
 800c8ec:	4b04      	ldr	r3, [pc, #16]	@ (800c900 <_vfiprintf_r+0x228>)
 800c8ee:	f7fd ffff 	bl	800a8f0 <_printf_i>
 800c8f2:	e7e4      	b.n	800c8be <_vfiprintf_r+0x1e6>
 800c8f4:	0800d2b8 	.word	0x0800d2b8
 800c8f8:	0800d2c2 	.word	0x0800d2c2
 800c8fc:	0800a3b9 	.word	0x0800a3b9
 800c900:	0800c6b3 	.word	0x0800c6b3
 800c904:	0800d2be 	.word	0x0800d2be

0800c908 <__swbuf_r>:
 800c908:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c90a:	460e      	mov	r6, r1
 800c90c:	4614      	mov	r4, r2
 800c90e:	4605      	mov	r5, r0
 800c910:	b118      	cbz	r0, 800c91a <__swbuf_r+0x12>
 800c912:	6a03      	ldr	r3, [r0, #32]
 800c914:	b90b      	cbnz	r3, 800c91a <__swbuf_r+0x12>
 800c916:	f7fe f995 	bl	800ac44 <__sinit>
 800c91a:	69a3      	ldr	r3, [r4, #24]
 800c91c:	60a3      	str	r3, [r4, #8]
 800c91e:	89a3      	ldrh	r3, [r4, #12]
 800c920:	071a      	lsls	r2, r3, #28
 800c922:	d501      	bpl.n	800c928 <__swbuf_r+0x20>
 800c924:	6923      	ldr	r3, [r4, #16]
 800c926:	b943      	cbnz	r3, 800c93a <__swbuf_r+0x32>
 800c928:	4621      	mov	r1, r4
 800c92a:	4628      	mov	r0, r5
 800c92c:	f000 f82a 	bl	800c984 <__swsetup_r>
 800c930:	b118      	cbz	r0, 800c93a <__swbuf_r+0x32>
 800c932:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800c936:	4638      	mov	r0, r7
 800c938:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c93a:	6823      	ldr	r3, [r4, #0]
 800c93c:	b2f6      	uxtb	r6, r6
 800c93e:	6922      	ldr	r2, [r4, #16]
 800c940:	4637      	mov	r7, r6
 800c942:	1a98      	subs	r0, r3, r2
 800c944:	6963      	ldr	r3, [r4, #20]
 800c946:	4283      	cmp	r3, r0
 800c948:	dc05      	bgt.n	800c956 <__swbuf_r+0x4e>
 800c94a:	4621      	mov	r1, r4
 800c94c:	4628      	mov	r0, r5
 800c94e:	f7ff f987 	bl	800bc60 <_fflush_r>
 800c952:	2800      	cmp	r0, #0
 800c954:	d1ed      	bne.n	800c932 <__swbuf_r+0x2a>
 800c956:	68a3      	ldr	r3, [r4, #8]
 800c958:	3b01      	subs	r3, #1
 800c95a:	60a3      	str	r3, [r4, #8]
 800c95c:	6823      	ldr	r3, [r4, #0]
 800c95e:	1c5a      	adds	r2, r3, #1
 800c960:	6022      	str	r2, [r4, #0]
 800c962:	701e      	strb	r6, [r3, #0]
 800c964:	1c43      	adds	r3, r0, #1
 800c966:	6962      	ldr	r2, [r4, #20]
 800c968:	429a      	cmp	r2, r3
 800c96a:	d004      	beq.n	800c976 <__swbuf_r+0x6e>
 800c96c:	89a3      	ldrh	r3, [r4, #12]
 800c96e:	07db      	lsls	r3, r3, #31
 800c970:	d5e1      	bpl.n	800c936 <__swbuf_r+0x2e>
 800c972:	2e0a      	cmp	r6, #10
 800c974:	d1df      	bne.n	800c936 <__swbuf_r+0x2e>
 800c976:	4621      	mov	r1, r4
 800c978:	4628      	mov	r0, r5
 800c97a:	f7ff f971 	bl	800bc60 <_fflush_r>
 800c97e:	2800      	cmp	r0, #0
 800c980:	d0d9      	beq.n	800c936 <__swbuf_r+0x2e>
 800c982:	e7d6      	b.n	800c932 <__swbuf_r+0x2a>

0800c984 <__swsetup_r>:
 800c984:	b538      	push	{r3, r4, r5, lr}
 800c986:	4b29      	ldr	r3, [pc, #164]	@ (800ca2c <__swsetup_r+0xa8>)
 800c988:	4605      	mov	r5, r0
 800c98a:	460c      	mov	r4, r1
 800c98c:	6818      	ldr	r0, [r3, #0]
 800c98e:	b118      	cbz	r0, 800c998 <__swsetup_r+0x14>
 800c990:	6a03      	ldr	r3, [r0, #32]
 800c992:	b90b      	cbnz	r3, 800c998 <__swsetup_r+0x14>
 800c994:	f7fe f956 	bl	800ac44 <__sinit>
 800c998:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c99c:	0719      	lsls	r1, r3, #28
 800c99e:	d422      	bmi.n	800c9e6 <__swsetup_r+0x62>
 800c9a0:	06da      	lsls	r2, r3, #27
 800c9a2:	d407      	bmi.n	800c9b4 <__swsetup_r+0x30>
 800c9a4:	2209      	movs	r2, #9
 800c9a6:	602a      	str	r2, [r5, #0]
 800c9a8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c9ac:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c9b0:	81a3      	strh	r3, [r4, #12]
 800c9b2:	e033      	b.n	800ca1c <__swsetup_r+0x98>
 800c9b4:	0758      	lsls	r0, r3, #29
 800c9b6:	d512      	bpl.n	800c9de <__swsetup_r+0x5a>
 800c9b8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c9ba:	b141      	cbz	r1, 800c9ce <__swsetup_r+0x4a>
 800c9bc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c9c0:	4299      	cmp	r1, r3
 800c9c2:	d002      	beq.n	800c9ca <__swsetup_r+0x46>
 800c9c4:	4628      	mov	r0, r5
 800c9c6:	f7ff fddb 	bl	800c580 <_free_r>
 800c9ca:	2300      	movs	r3, #0
 800c9cc:	6363      	str	r3, [r4, #52]	@ 0x34
 800c9ce:	89a3      	ldrh	r3, [r4, #12]
 800c9d0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800c9d4:	81a3      	strh	r3, [r4, #12]
 800c9d6:	2300      	movs	r3, #0
 800c9d8:	6063      	str	r3, [r4, #4]
 800c9da:	6923      	ldr	r3, [r4, #16]
 800c9dc:	6023      	str	r3, [r4, #0]
 800c9de:	89a3      	ldrh	r3, [r4, #12]
 800c9e0:	f043 0308 	orr.w	r3, r3, #8
 800c9e4:	81a3      	strh	r3, [r4, #12]
 800c9e6:	6923      	ldr	r3, [r4, #16]
 800c9e8:	b94b      	cbnz	r3, 800c9fe <__swsetup_r+0x7a>
 800c9ea:	89a3      	ldrh	r3, [r4, #12]
 800c9ec:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800c9f0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c9f4:	d003      	beq.n	800c9fe <__swsetup_r+0x7a>
 800c9f6:	4621      	mov	r1, r4
 800c9f8:	4628      	mov	r0, r5
 800c9fa:	f000 f83e 	bl	800ca7a <__smakebuf_r>
 800c9fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ca02:	f013 0201 	ands.w	r2, r3, #1
 800ca06:	d00a      	beq.n	800ca1e <__swsetup_r+0x9a>
 800ca08:	2200      	movs	r2, #0
 800ca0a:	60a2      	str	r2, [r4, #8]
 800ca0c:	6962      	ldr	r2, [r4, #20]
 800ca0e:	4252      	negs	r2, r2
 800ca10:	61a2      	str	r2, [r4, #24]
 800ca12:	6922      	ldr	r2, [r4, #16]
 800ca14:	b942      	cbnz	r2, 800ca28 <__swsetup_r+0xa4>
 800ca16:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800ca1a:	d1c5      	bne.n	800c9a8 <__swsetup_r+0x24>
 800ca1c:	bd38      	pop	{r3, r4, r5, pc}
 800ca1e:	0799      	lsls	r1, r3, #30
 800ca20:	bf58      	it	pl
 800ca22:	6962      	ldrpl	r2, [r4, #20]
 800ca24:	60a2      	str	r2, [r4, #8]
 800ca26:	e7f4      	b.n	800ca12 <__swsetup_r+0x8e>
 800ca28:	2000      	movs	r0, #0
 800ca2a:	e7f7      	b.n	800ca1c <__swsetup_r+0x98>
 800ca2c:	2000003c 	.word	0x2000003c

0800ca30 <__swhatbuf_r>:
 800ca30:	b570      	push	{r4, r5, r6, lr}
 800ca32:	460c      	mov	r4, r1
 800ca34:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ca38:	b096      	sub	sp, #88	@ 0x58
 800ca3a:	4615      	mov	r5, r2
 800ca3c:	2900      	cmp	r1, #0
 800ca3e:	461e      	mov	r6, r3
 800ca40:	da0c      	bge.n	800ca5c <__swhatbuf_r+0x2c>
 800ca42:	89a3      	ldrh	r3, [r4, #12]
 800ca44:	2100      	movs	r1, #0
 800ca46:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800ca4a:	bf14      	ite	ne
 800ca4c:	2340      	movne	r3, #64	@ 0x40
 800ca4e:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800ca52:	2000      	movs	r0, #0
 800ca54:	6031      	str	r1, [r6, #0]
 800ca56:	602b      	str	r3, [r5, #0]
 800ca58:	b016      	add	sp, #88	@ 0x58
 800ca5a:	bd70      	pop	{r4, r5, r6, pc}
 800ca5c:	466a      	mov	r2, sp
 800ca5e:	f000 f89d 	bl	800cb9c <_fstat_r>
 800ca62:	2800      	cmp	r0, #0
 800ca64:	dbed      	blt.n	800ca42 <__swhatbuf_r+0x12>
 800ca66:	9901      	ldr	r1, [sp, #4]
 800ca68:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800ca6c:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800ca70:	4259      	negs	r1, r3
 800ca72:	4159      	adcs	r1, r3
 800ca74:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ca78:	e7eb      	b.n	800ca52 <__swhatbuf_r+0x22>

0800ca7a <__smakebuf_r>:
 800ca7a:	898b      	ldrh	r3, [r1, #12]
 800ca7c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ca7e:	079d      	lsls	r5, r3, #30
 800ca80:	4606      	mov	r6, r0
 800ca82:	460c      	mov	r4, r1
 800ca84:	d507      	bpl.n	800ca96 <__smakebuf_r+0x1c>
 800ca86:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800ca8a:	6023      	str	r3, [r4, #0]
 800ca8c:	6123      	str	r3, [r4, #16]
 800ca8e:	2301      	movs	r3, #1
 800ca90:	6163      	str	r3, [r4, #20]
 800ca92:	b003      	add	sp, #12
 800ca94:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ca96:	ab01      	add	r3, sp, #4
 800ca98:	466a      	mov	r2, sp
 800ca9a:	f7ff ffc9 	bl	800ca30 <__swhatbuf_r>
 800ca9e:	9f00      	ldr	r7, [sp, #0]
 800caa0:	4605      	mov	r5, r0
 800caa2:	4630      	mov	r0, r6
 800caa4:	4639      	mov	r1, r7
 800caa6:	f7fe ffd7 	bl	800ba58 <_malloc_r>
 800caaa:	b948      	cbnz	r0, 800cac0 <__smakebuf_r+0x46>
 800caac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cab0:	059a      	lsls	r2, r3, #22
 800cab2:	d4ee      	bmi.n	800ca92 <__smakebuf_r+0x18>
 800cab4:	f023 0303 	bic.w	r3, r3, #3
 800cab8:	f043 0302 	orr.w	r3, r3, #2
 800cabc:	81a3      	strh	r3, [r4, #12]
 800cabe:	e7e2      	b.n	800ca86 <__smakebuf_r+0xc>
 800cac0:	89a3      	ldrh	r3, [r4, #12]
 800cac2:	6020      	str	r0, [r4, #0]
 800cac4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cac8:	81a3      	strh	r3, [r4, #12]
 800caca:	9b01      	ldr	r3, [sp, #4]
 800cacc:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800cad0:	b15b      	cbz	r3, 800caea <__smakebuf_r+0x70>
 800cad2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cad6:	4630      	mov	r0, r6
 800cad8:	f000 f83c 	bl	800cb54 <_isatty_r>
 800cadc:	b128      	cbz	r0, 800caea <__smakebuf_r+0x70>
 800cade:	89a3      	ldrh	r3, [r4, #12]
 800cae0:	f023 0303 	bic.w	r3, r3, #3
 800cae4:	f043 0301 	orr.w	r3, r3, #1
 800cae8:	81a3      	strh	r3, [r4, #12]
 800caea:	89a3      	ldrh	r3, [r4, #12]
 800caec:	431d      	orrs	r5, r3
 800caee:	81a5      	strh	r5, [r4, #12]
 800caf0:	e7cf      	b.n	800ca92 <__smakebuf_r+0x18>

0800caf2 <_raise_r>:
 800caf2:	291f      	cmp	r1, #31
 800caf4:	b538      	push	{r3, r4, r5, lr}
 800caf6:	4605      	mov	r5, r0
 800caf8:	460c      	mov	r4, r1
 800cafa:	d904      	bls.n	800cb06 <_raise_r+0x14>
 800cafc:	2316      	movs	r3, #22
 800cafe:	6003      	str	r3, [r0, #0]
 800cb00:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800cb04:	bd38      	pop	{r3, r4, r5, pc}
 800cb06:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800cb08:	b112      	cbz	r2, 800cb10 <_raise_r+0x1e>
 800cb0a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800cb0e:	b94b      	cbnz	r3, 800cb24 <_raise_r+0x32>
 800cb10:	4628      	mov	r0, r5
 800cb12:	f000 f841 	bl	800cb98 <_getpid_r>
 800cb16:	4622      	mov	r2, r4
 800cb18:	4601      	mov	r1, r0
 800cb1a:	4628      	mov	r0, r5
 800cb1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cb20:	f000 b828 	b.w	800cb74 <_kill_r>
 800cb24:	2b01      	cmp	r3, #1
 800cb26:	d00a      	beq.n	800cb3e <_raise_r+0x4c>
 800cb28:	1c59      	adds	r1, r3, #1
 800cb2a:	d103      	bne.n	800cb34 <_raise_r+0x42>
 800cb2c:	2316      	movs	r3, #22
 800cb2e:	6003      	str	r3, [r0, #0]
 800cb30:	2001      	movs	r0, #1
 800cb32:	e7e7      	b.n	800cb04 <_raise_r+0x12>
 800cb34:	2100      	movs	r1, #0
 800cb36:	4620      	mov	r0, r4
 800cb38:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800cb3c:	4798      	blx	r3
 800cb3e:	2000      	movs	r0, #0
 800cb40:	e7e0      	b.n	800cb04 <_raise_r+0x12>
	...

0800cb44 <raise>:
 800cb44:	4b02      	ldr	r3, [pc, #8]	@ (800cb50 <raise+0xc>)
 800cb46:	4601      	mov	r1, r0
 800cb48:	6818      	ldr	r0, [r3, #0]
 800cb4a:	f7ff bfd2 	b.w	800caf2 <_raise_r>
 800cb4e:	bf00      	nop
 800cb50:	2000003c 	.word	0x2000003c

0800cb54 <_isatty_r>:
 800cb54:	b538      	push	{r3, r4, r5, lr}
 800cb56:	2300      	movs	r3, #0
 800cb58:	4d05      	ldr	r5, [pc, #20]	@ (800cb70 <_isatty_r+0x1c>)
 800cb5a:	4604      	mov	r4, r0
 800cb5c:	4608      	mov	r0, r1
 800cb5e:	602b      	str	r3, [r5, #0]
 800cb60:	f7f5 f974 	bl	8001e4c <_isatty>
 800cb64:	1c43      	adds	r3, r0, #1
 800cb66:	d102      	bne.n	800cb6e <_isatty_r+0x1a>
 800cb68:	682b      	ldr	r3, [r5, #0]
 800cb6a:	b103      	cbz	r3, 800cb6e <_isatty_r+0x1a>
 800cb6c:	6023      	str	r3, [r4, #0]
 800cb6e:	bd38      	pop	{r3, r4, r5, pc}
 800cb70:	20000598 	.word	0x20000598

0800cb74 <_kill_r>:
 800cb74:	b538      	push	{r3, r4, r5, lr}
 800cb76:	2300      	movs	r3, #0
 800cb78:	4d06      	ldr	r5, [pc, #24]	@ (800cb94 <_kill_r+0x20>)
 800cb7a:	4604      	mov	r4, r0
 800cb7c:	4608      	mov	r0, r1
 800cb7e:	4611      	mov	r1, r2
 800cb80:	602b      	str	r3, [r5, #0]
 800cb82:	f7f5 f8f3 	bl	8001d6c <_kill>
 800cb86:	1c43      	adds	r3, r0, #1
 800cb88:	d102      	bne.n	800cb90 <_kill_r+0x1c>
 800cb8a:	682b      	ldr	r3, [r5, #0]
 800cb8c:	b103      	cbz	r3, 800cb90 <_kill_r+0x1c>
 800cb8e:	6023      	str	r3, [r4, #0]
 800cb90:	bd38      	pop	{r3, r4, r5, pc}
 800cb92:	bf00      	nop
 800cb94:	20000598 	.word	0x20000598

0800cb98 <_getpid_r>:
 800cb98:	f7f5 b8e0 	b.w	8001d5c <_getpid>

0800cb9c <_fstat_r>:
 800cb9c:	b538      	push	{r3, r4, r5, lr}
 800cb9e:	2300      	movs	r3, #0
 800cba0:	4d06      	ldr	r5, [pc, #24]	@ (800cbbc <_fstat_r+0x20>)
 800cba2:	4604      	mov	r4, r0
 800cba4:	4608      	mov	r0, r1
 800cba6:	4611      	mov	r1, r2
 800cba8:	602b      	str	r3, [r5, #0]
 800cbaa:	f7f5 f93f 	bl	8001e2c <_fstat>
 800cbae:	1c43      	adds	r3, r0, #1
 800cbb0:	d102      	bne.n	800cbb8 <_fstat_r+0x1c>
 800cbb2:	682b      	ldr	r3, [r5, #0]
 800cbb4:	b103      	cbz	r3, 800cbb8 <_fstat_r+0x1c>
 800cbb6:	6023      	str	r3, [r4, #0]
 800cbb8:	bd38      	pop	{r3, r4, r5, pc}
 800cbba:	bf00      	nop
 800cbbc:	20000598 	.word	0x20000598

0800cbc0 <_init>:
 800cbc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cbc2:	bf00      	nop
 800cbc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cbc6:	bc08      	pop	{r3}
 800cbc8:	469e      	mov	lr, r3
 800cbca:	4770      	bx	lr

0800cbcc <_fini>:
 800cbcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cbce:	bf00      	nop
 800cbd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cbd2:	bc08      	pop	{r3}
 800cbd4:	469e      	mov	lr, r3
 800cbd6:	4770      	bx	lr
