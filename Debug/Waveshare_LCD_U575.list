
Waveshare_LCD_U575.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000238  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009fc4  08000238  08000238  00001238  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000697  0800a1fc  0800a1fc  0000b1fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800a894  0800a894  0000b894  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800a89c  0800a89c  0000b89c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800a8a0  0800a8a0  0000b8a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000090  20000000  0800a8a4  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000360  20000090  0800a934  0000c090  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  200003f0  0800a934  0000c3f0  2**0
                  ALLOC
  9 .ARM.attributes 00000036  00000000  00000000  0000c090  2**0
                  CONTENTS, READONLY
 10 .debug_info   00022ab0  00000000  00000000  0000c0c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0000418e  00000000  00000000  0002eb76  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001bb8  00000000  00000000  00032d08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 0000158f  00000000  00000000  000348c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003651d  00000000  00000000  00035e4f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00026553  00000000  00000000  0006c36c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0014f9b9  00000000  00000000  000928bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001e2278  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00007a80  00000000  00000000  001e22bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000006d  00000000  00000000  001e9d3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000238 <__do_global_dtors_aux>:
 8000238:	b510      	push	{r4, lr}
 800023a:	4c05      	ldr	r4, [pc, #20]	@ (8000250 <__do_global_dtors_aux+0x18>)
 800023c:	7823      	ldrb	r3, [r4, #0]
 800023e:	b933      	cbnz	r3, 800024e <__do_global_dtors_aux+0x16>
 8000240:	4b04      	ldr	r3, [pc, #16]	@ (8000254 <__do_global_dtors_aux+0x1c>)
 8000242:	b113      	cbz	r3, 800024a <__do_global_dtors_aux+0x12>
 8000244:	4804      	ldr	r0, [pc, #16]	@ (8000258 <__do_global_dtors_aux+0x20>)
 8000246:	f3af 8000 	nop.w
 800024a:	2301      	movs	r3, #1
 800024c:	7023      	strb	r3, [r4, #0]
 800024e:	bd10      	pop	{r4, pc}
 8000250:	20000090 	.word	0x20000090
 8000254:	00000000 	.word	0x00000000
 8000258:	0800a1e4 	.word	0x0800a1e4

0800025c <frame_dummy>:
 800025c:	b508      	push	{r3, lr}
 800025e:	4b03      	ldr	r3, [pc, #12]	@ (800026c <frame_dummy+0x10>)
 8000260:	b11b      	cbz	r3, 800026a <frame_dummy+0xe>
 8000262:	4903      	ldr	r1, [pc, #12]	@ (8000270 <frame_dummy+0x14>)
 8000264:	4803      	ldr	r0, [pc, #12]	@ (8000274 <frame_dummy+0x18>)
 8000266:	f3af 8000 	nop.w
 800026a:	bd08      	pop	{r3, pc}
 800026c:	00000000 	.word	0x00000000
 8000270:	20000094 	.word	0x20000094
 8000274:	0800a1e4 	.word	0x0800a1e4

08000278 <__aeabi_uldivmod>:
 8000278:	b953      	cbnz	r3, 8000290 <__aeabi_uldivmod+0x18>
 800027a:	b94a      	cbnz	r2, 8000290 <__aeabi_uldivmod+0x18>
 800027c:	2900      	cmp	r1, #0
 800027e:	bf08      	it	eq
 8000280:	2800      	cmpeq	r0, #0
 8000282:	bf1c      	itt	ne
 8000284:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000288:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 800028c:	f000 b9b0 	b.w	80005f0 <__aeabi_idiv0>
 8000290:	f1ad 0c08 	sub.w	ip, sp, #8
 8000294:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000298:	f000 f806 	bl	80002a8 <__udivmoddi4>
 800029c:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002a4:	b004      	add	sp, #16
 80002a6:	4770      	bx	lr

080002a8 <__udivmoddi4>:
 80002a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80002ac:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 80002ae:	4688      	mov	r8, r1
 80002b0:	4604      	mov	r4, r0
 80002b2:	468e      	mov	lr, r1
 80002b4:	2b00      	cmp	r3, #0
 80002b6:	d14a      	bne.n	800034e <__udivmoddi4+0xa6>
 80002b8:	428a      	cmp	r2, r1
 80002ba:	4617      	mov	r7, r2
 80002bc:	d95f      	bls.n	800037e <__udivmoddi4+0xd6>
 80002be:	fab2 f682 	clz	r6, r2
 80002c2:	b14e      	cbz	r6, 80002d8 <__udivmoddi4+0x30>
 80002c4:	f1c6 0320 	rsb	r3, r6, #32
 80002c8:	fa01 fe06 	lsl.w	lr, r1, r6
 80002cc:	40b7      	lsls	r7, r6
 80002ce:	40b4      	lsls	r4, r6
 80002d0:	fa20 f303 	lsr.w	r3, r0, r3
 80002d4:	ea43 0e0e 	orr.w	lr, r3, lr
 80002d8:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002dc:	fa1f fc87 	uxth.w	ip, r7
 80002e0:	0c23      	lsrs	r3, r4, #16
 80002e2:	fbbe f1f8 	udiv	r1, lr, r8
 80002e6:	fb08 ee11 	mls	lr, r8, r1, lr
 80002ea:	fb01 f20c 	mul.w	r2, r1, ip
 80002ee:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 80002f2:	429a      	cmp	r2, r3
 80002f4:	d907      	bls.n	8000306 <__udivmoddi4+0x5e>
 80002f6:	18fb      	adds	r3, r7, r3
 80002f8:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 80002fc:	d202      	bcs.n	8000304 <__udivmoddi4+0x5c>
 80002fe:	429a      	cmp	r2, r3
 8000300:	f200 8154 	bhi.w	80005ac <__udivmoddi4+0x304>
 8000304:	4601      	mov	r1, r0
 8000306:	1a9b      	subs	r3, r3, r2
 8000308:	b2a2      	uxth	r2, r4
 800030a:	fbb3 f0f8 	udiv	r0, r3, r8
 800030e:	fb08 3310 	mls	r3, r8, r0, r3
 8000312:	fb00 fc0c 	mul.w	ip, r0, ip
 8000316:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800031a:	4594      	cmp	ip, r2
 800031c:	d90b      	bls.n	8000336 <__udivmoddi4+0x8e>
 800031e:	18ba      	adds	r2, r7, r2
 8000320:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8000324:	bf2c      	ite	cs
 8000326:	2401      	movcs	r4, #1
 8000328:	2400      	movcc	r4, #0
 800032a:	4594      	cmp	ip, r2
 800032c:	d902      	bls.n	8000334 <__udivmoddi4+0x8c>
 800032e:	2c00      	cmp	r4, #0
 8000330:	f000 813f 	beq.w	80005b2 <__udivmoddi4+0x30a>
 8000334:	4618      	mov	r0, r3
 8000336:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800033a:	eba2 020c 	sub.w	r2, r2, ip
 800033e:	2100      	movs	r1, #0
 8000340:	b11d      	cbz	r5, 800034a <__udivmoddi4+0xa2>
 8000342:	40f2      	lsrs	r2, r6
 8000344:	2300      	movs	r3, #0
 8000346:	e9c5 2300 	strd	r2, r3, [r5]
 800034a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800034e:	428b      	cmp	r3, r1
 8000350:	d905      	bls.n	800035e <__udivmoddi4+0xb6>
 8000352:	b10d      	cbz	r5, 8000358 <__udivmoddi4+0xb0>
 8000354:	e9c5 0100 	strd	r0, r1, [r5]
 8000358:	2100      	movs	r1, #0
 800035a:	4608      	mov	r0, r1
 800035c:	e7f5      	b.n	800034a <__udivmoddi4+0xa2>
 800035e:	fab3 f183 	clz	r1, r3
 8000362:	2900      	cmp	r1, #0
 8000364:	d14e      	bne.n	8000404 <__udivmoddi4+0x15c>
 8000366:	4543      	cmp	r3, r8
 8000368:	f0c0 8112 	bcc.w	8000590 <__udivmoddi4+0x2e8>
 800036c:	4282      	cmp	r2, r0
 800036e:	f240 810f 	bls.w	8000590 <__udivmoddi4+0x2e8>
 8000372:	4608      	mov	r0, r1
 8000374:	2d00      	cmp	r5, #0
 8000376:	d0e8      	beq.n	800034a <__udivmoddi4+0xa2>
 8000378:	e9c5 4e00 	strd	r4, lr, [r5]
 800037c:	e7e5      	b.n	800034a <__udivmoddi4+0xa2>
 800037e:	2a00      	cmp	r2, #0
 8000380:	f000 80ac 	beq.w	80004dc <__udivmoddi4+0x234>
 8000384:	fab2 f682 	clz	r6, r2
 8000388:	2e00      	cmp	r6, #0
 800038a:	f040 80bb 	bne.w	8000504 <__udivmoddi4+0x25c>
 800038e:	1a8b      	subs	r3, r1, r2
 8000390:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8000394:	b2bc      	uxth	r4, r7
 8000396:	2101      	movs	r1, #1
 8000398:	0c02      	lsrs	r2, r0, #16
 800039a:	b280      	uxth	r0, r0
 800039c:	fbb3 fcfe 	udiv	ip, r3, lr
 80003a0:	fb0e 331c 	mls	r3, lr, ip, r3
 80003a4:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
 80003a8:	fb04 f20c 	mul.w	r2, r4, ip
 80003ac:	429a      	cmp	r2, r3
 80003ae:	d90e      	bls.n	80003ce <__udivmoddi4+0x126>
 80003b0:	18fb      	adds	r3, r7, r3
 80003b2:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 80003b6:	bf2c      	ite	cs
 80003b8:	f04f 0901 	movcs.w	r9, #1
 80003bc:	f04f 0900 	movcc.w	r9, #0
 80003c0:	429a      	cmp	r2, r3
 80003c2:	d903      	bls.n	80003cc <__udivmoddi4+0x124>
 80003c4:	f1b9 0f00 	cmp.w	r9, #0
 80003c8:	f000 80ec 	beq.w	80005a4 <__udivmoddi4+0x2fc>
 80003cc:	46c4      	mov	ip, r8
 80003ce:	1a9b      	subs	r3, r3, r2
 80003d0:	fbb3 f8fe 	udiv	r8, r3, lr
 80003d4:	fb0e 3318 	mls	r3, lr, r8, r3
 80003d8:	fb04 f408 	mul.w	r4, r4, r8
 80003dc:	ea40 4203 	orr.w	r2, r0, r3, lsl #16
 80003e0:	4294      	cmp	r4, r2
 80003e2:	d90b      	bls.n	80003fc <__udivmoddi4+0x154>
 80003e4:	18ba      	adds	r2, r7, r2
 80003e6:	f108 33ff 	add.w	r3, r8, #4294967295	@ 0xffffffff
 80003ea:	bf2c      	ite	cs
 80003ec:	2001      	movcs	r0, #1
 80003ee:	2000      	movcc	r0, #0
 80003f0:	4294      	cmp	r4, r2
 80003f2:	d902      	bls.n	80003fa <__udivmoddi4+0x152>
 80003f4:	2800      	cmp	r0, #0
 80003f6:	f000 80d1 	beq.w	800059c <__udivmoddi4+0x2f4>
 80003fa:	4698      	mov	r8, r3
 80003fc:	1b12      	subs	r2, r2, r4
 80003fe:	ea48 400c 	orr.w	r0, r8, ip, lsl #16
 8000402:	e79d      	b.n	8000340 <__udivmoddi4+0x98>
 8000404:	f1c1 0620 	rsb	r6, r1, #32
 8000408:	408b      	lsls	r3, r1
 800040a:	fa08 f401 	lsl.w	r4, r8, r1
 800040e:	fa00 f901 	lsl.w	r9, r0, r1
 8000412:	fa22 f706 	lsr.w	r7, r2, r6
 8000416:	fa28 f806 	lsr.w	r8, r8, r6
 800041a:	408a      	lsls	r2, r1
 800041c:	431f      	orrs	r7, r3
 800041e:	fa20 f306 	lsr.w	r3, r0, r6
 8000422:	0c38      	lsrs	r0, r7, #16
 8000424:	4323      	orrs	r3, r4
 8000426:	fa1f fc87 	uxth.w	ip, r7
 800042a:	0c1c      	lsrs	r4, r3, #16
 800042c:	fbb8 fef0 	udiv	lr, r8, r0
 8000430:	fb00 881e 	mls	r8, r0, lr, r8
 8000434:	ea44 4408 	orr.w	r4, r4, r8, lsl #16
 8000438:	fb0e f80c 	mul.w	r8, lr, ip
 800043c:	45a0      	cmp	r8, r4
 800043e:	d90e      	bls.n	800045e <__udivmoddi4+0x1b6>
 8000440:	193c      	adds	r4, r7, r4
 8000442:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000446:	bf2c      	ite	cs
 8000448:	f04f 0b01 	movcs.w	fp, #1
 800044c:	f04f 0b00 	movcc.w	fp, #0
 8000450:	45a0      	cmp	r8, r4
 8000452:	d903      	bls.n	800045c <__udivmoddi4+0x1b4>
 8000454:	f1bb 0f00 	cmp.w	fp, #0
 8000458:	f000 80b8 	beq.w	80005cc <__udivmoddi4+0x324>
 800045c:	46d6      	mov	lr, sl
 800045e:	eba4 0408 	sub.w	r4, r4, r8
 8000462:	fa1f f883 	uxth.w	r8, r3
 8000466:	fbb4 f3f0 	udiv	r3, r4, r0
 800046a:	fb00 4413 	mls	r4, r0, r3, r4
 800046e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000472:	ea48 4404 	orr.w	r4, r8, r4, lsl #16
 8000476:	45a4      	cmp	ip, r4
 8000478:	d90e      	bls.n	8000498 <__udivmoddi4+0x1f0>
 800047a:	193c      	adds	r4, r7, r4
 800047c:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000480:	bf2c      	ite	cs
 8000482:	f04f 0801 	movcs.w	r8, #1
 8000486:	f04f 0800 	movcc.w	r8, #0
 800048a:	45a4      	cmp	ip, r4
 800048c:	d903      	bls.n	8000496 <__udivmoddi4+0x1ee>
 800048e:	f1b8 0f00 	cmp.w	r8, #0
 8000492:	f000 809f 	beq.w	80005d4 <__udivmoddi4+0x32c>
 8000496:	4603      	mov	r3, r0
 8000498:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800049c:	eba4 040c 	sub.w	r4, r4, ip
 80004a0:	fba0 ec02 	umull	lr, ip, r0, r2
 80004a4:	4564      	cmp	r4, ip
 80004a6:	4673      	mov	r3, lr
 80004a8:	46e0      	mov	r8, ip
 80004aa:	d302      	bcc.n	80004b2 <__udivmoddi4+0x20a>
 80004ac:	d107      	bne.n	80004be <__udivmoddi4+0x216>
 80004ae:	45f1      	cmp	r9, lr
 80004b0:	d205      	bcs.n	80004be <__udivmoddi4+0x216>
 80004b2:	ebbe 0302 	subs.w	r3, lr, r2
 80004b6:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004ba:	3801      	subs	r0, #1
 80004bc:	46e0      	mov	r8, ip
 80004be:	b15d      	cbz	r5, 80004d8 <__udivmoddi4+0x230>
 80004c0:	ebb9 0203 	subs.w	r2, r9, r3
 80004c4:	eb64 0408 	sbc.w	r4, r4, r8
 80004c8:	fa04 f606 	lsl.w	r6, r4, r6
 80004cc:	fa22 f301 	lsr.w	r3, r2, r1
 80004d0:	40cc      	lsrs	r4, r1
 80004d2:	431e      	orrs	r6, r3
 80004d4:	e9c5 6400 	strd	r6, r4, [r5]
 80004d8:	2100      	movs	r1, #0
 80004da:	e736      	b.n	800034a <__udivmoddi4+0xa2>
 80004dc:	fbb1 fcf2 	udiv	ip, r1, r2
 80004e0:	0c01      	lsrs	r1, r0, #16
 80004e2:	4614      	mov	r4, r2
 80004e4:	b280      	uxth	r0, r0
 80004e6:	4696      	mov	lr, r2
 80004e8:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
 80004ec:	2620      	movs	r6, #32
 80004ee:	4690      	mov	r8, r2
 80004f0:	ea40 4301 	orr.w	r3, r0, r1, lsl #16
 80004f4:	4610      	mov	r0, r2
 80004f6:	fbb1 f1f2 	udiv	r1, r1, r2
 80004fa:	eba3 0308 	sub.w	r3, r3, r8
 80004fe:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000502:	e74b      	b.n	800039c <__udivmoddi4+0xf4>
 8000504:	40b7      	lsls	r7, r6
 8000506:	f1c6 0320 	rsb	r3, r6, #32
 800050a:	fa01 f206 	lsl.w	r2, r1, r6
 800050e:	fa21 f803 	lsr.w	r8, r1, r3
 8000512:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000516:	fa20 f303 	lsr.w	r3, r0, r3
 800051a:	b2bc      	uxth	r4, r7
 800051c:	40b0      	lsls	r0, r6
 800051e:	4313      	orrs	r3, r2
 8000520:	0c02      	lsrs	r2, r0, #16
 8000522:	0c19      	lsrs	r1, r3, #16
 8000524:	b280      	uxth	r0, r0
 8000526:	fbb8 f9fe 	udiv	r9, r8, lr
 800052a:	fb0e 8819 	mls	r8, lr, r9, r8
 800052e:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
 8000532:	fb09 f804 	mul.w	r8, r9, r4
 8000536:	4588      	cmp	r8, r1
 8000538:	d951      	bls.n	80005de <__udivmoddi4+0x336>
 800053a:	1879      	adds	r1, r7, r1
 800053c:	f109 3cff 	add.w	ip, r9, #4294967295	@ 0xffffffff
 8000540:	bf2c      	ite	cs
 8000542:	f04f 0a01 	movcs.w	sl, #1
 8000546:	f04f 0a00 	movcc.w	sl, #0
 800054a:	4588      	cmp	r8, r1
 800054c:	d902      	bls.n	8000554 <__udivmoddi4+0x2ac>
 800054e:	f1ba 0f00 	cmp.w	sl, #0
 8000552:	d031      	beq.n	80005b8 <__udivmoddi4+0x310>
 8000554:	eba1 0108 	sub.w	r1, r1, r8
 8000558:	fbb1 f9fe 	udiv	r9, r1, lr
 800055c:	fb09 f804 	mul.w	r8, r9, r4
 8000560:	fb0e 1119 	mls	r1, lr, r9, r1
 8000564:	b29b      	uxth	r3, r3
 8000566:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800056a:	4543      	cmp	r3, r8
 800056c:	d235      	bcs.n	80005da <__udivmoddi4+0x332>
 800056e:	18fb      	adds	r3, r7, r3
 8000570:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000574:	bf2c      	ite	cs
 8000576:	f04f 0a01 	movcs.w	sl, #1
 800057a:	f04f 0a00 	movcc.w	sl, #0
 800057e:	4543      	cmp	r3, r8
 8000580:	d2bb      	bcs.n	80004fa <__udivmoddi4+0x252>
 8000582:	f1ba 0f00 	cmp.w	sl, #0
 8000586:	d1b8      	bne.n	80004fa <__udivmoddi4+0x252>
 8000588:	f1a9 0102 	sub.w	r1, r9, #2
 800058c:	443b      	add	r3, r7
 800058e:	e7b4      	b.n	80004fa <__udivmoddi4+0x252>
 8000590:	1a84      	subs	r4, r0, r2
 8000592:	eb68 0203 	sbc.w	r2, r8, r3
 8000596:	2001      	movs	r0, #1
 8000598:	4696      	mov	lr, r2
 800059a:	e6eb      	b.n	8000374 <__udivmoddi4+0xcc>
 800059c:	443a      	add	r2, r7
 800059e:	f1a8 0802 	sub.w	r8, r8, #2
 80005a2:	e72b      	b.n	80003fc <__udivmoddi4+0x154>
 80005a4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005a8:	443b      	add	r3, r7
 80005aa:	e710      	b.n	80003ce <__udivmoddi4+0x126>
 80005ac:	3902      	subs	r1, #2
 80005ae:	443b      	add	r3, r7
 80005b0:	e6a9      	b.n	8000306 <__udivmoddi4+0x5e>
 80005b2:	443a      	add	r2, r7
 80005b4:	3802      	subs	r0, #2
 80005b6:	e6be      	b.n	8000336 <__udivmoddi4+0x8e>
 80005b8:	eba7 0808 	sub.w	r8, r7, r8
 80005bc:	f1a9 0c02 	sub.w	ip, r9, #2
 80005c0:	4441      	add	r1, r8
 80005c2:	fbb1 f9fe 	udiv	r9, r1, lr
 80005c6:	fb09 f804 	mul.w	r8, r9, r4
 80005ca:	e7c9      	b.n	8000560 <__udivmoddi4+0x2b8>
 80005cc:	f1ae 0e02 	sub.w	lr, lr, #2
 80005d0:	443c      	add	r4, r7
 80005d2:	e744      	b.n	800045e <__udivmoddi4+0x1b6>
 80005d4:	3b02      	subs	r3, #2
 80005d6:	443c      	add	r4, r7
 80005d8:	e75e      	b.n	8000498 <__udivmoddi4+0x1f0>
 80005da:	4649      	mov	r1, r9
 80005dc:	e78d      	b.n	80004fa <__udivmoddi4+0x252>
 80005de:	eba1 0108 	sub.w	r1, r1, r8
 80005e2:	46cc      	mov	ip, r9
 80005e4:	fbb1 f9fe 	udiv	r9, r1, lr
 80005e8:	fb09 f804 	mul.w	r8, r9, r4
 80005ec:	e7b8      	b.n	8000560 <__udivmoddi4+0x2b8>
 80005ee:	bf00      	nop

080005f0 <__aeabi_idiv0>:
 80005f0:	4770      	bx	lr
 80005f2:	bf00      	nop

080005f4 <CST816T_Init>:
#include <stdbool.h> // For true/false

I2C_HandleTypeDef *hi2c_cst816t;
volatile bool touch_event_pending = false; // Flag for touch interrupt

void CST816T_Init(I2C_HandleTypeDef *hi2c) {
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b084      	sub	sp, #16
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	6078      	str	r0, [r7, #4]
    hi2c_cst816t = hi2c;
 80005fc:	4a0d      	ldr	r2, [pc, #52]	@ (8000634 <CST816T_Init+0x40>)
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	6013      	str	r3, [r2, #0]

    // --- Hardware Reset for CST816T ---
	HAL_GPIO_WritePin(CST816T_RST_GPIO_Port, CST816T_RST_Pin, GPIO_PIN_RESET); // Pull low to reset
 8000602:	2200      	movs	r2, #0
 8000604:	2104      	movs	r1, #4
 8000606:	480c      	ldr	r0, [pc, #48]	@ (8000638 <CST816T_Init+0x44>)
 8000608:	f001 ff2c 	bl	8002464 <HAL_GPIO_WritePin>
	HAL_Delay(10); // Hold low for a short period
 800060c:	200a      	movs	r0, #10
 800060e:	f001 fb1f 	bl	8001c50 <HAL_Delay>
	HAL_GPIO_WritePin(CST816T_RST_GPIO_Port, CST816T_RST_Pin, GPIO_PIN_SET);   // Pull high for normal operation
 8000612:	2201      	movs	r2, #1
 8000614:	2104      	movs	r1, #4
 8000616:	4808      	ldr	r0, [pc, #32]	@ (8000638 <CST816T_Init+0x44>)
 8000618:	f001 ff24 	bl	8002464 <HAL_GPIO_WritePin>
	HAL_Delay(100); // Wait for the touch controller to come out of reset
 800061c:	2064      	movs	r0, #100	@ 0x64
 800061e:	f001 fb17 	bl	8001c50 <HAL_Delay>
    // This is handled in the .ioc file, but ensure it's correct.

    // No specific initialization commands needed for CST816T typically,
    // as it wakes up and starts reporting automatically.
    // Just verify communication.
    uint8_t chip_id = CST816T_WhoAmI();
 8000622:	f000 f87f 	bl	8000724 <CST816T_WhoAmI>
 8000626:	4603      	mov	r3, r0
 8000628:	73fb      	strb	r3, [r7, #15]
        // printf("CST816T found, Chip ID: 0x%02X\r\n", chip_id);
    } else {
        // Error: Chip ID mismatch
        // printf("CST816T not found or incorrect Chip ID: 0x%02X\r\n", chip_id);
    }
}
 800062a:	bf00      	nop
 800062c:	3710      	adds	r7, #16
 800062e:	46bd      	mov	sp, r7
 8000630:	bd80      	pop	{r7, pc}
 8000632:	bf00      	nop
 8000634:	200000ac 	.word	0x200000ac
 8000638:	42020800 	.word	0x42020800

0800063c <CST816T_ReadTouch>:

uint8_t CST816T_ReadTouch(TS_State_t *ts_state) {
 800063c:	b580      	push	{r7, lr}
 800063e:	b08c      	sub	sp, #48	@ 0x30
 8000640:	af04      	add	r7, sp, #16
 8000642:	6078      	str	r0, [r7, #4]
    uint8_t data[6]; // To read Gesture ID, Finger Num, X/Y coords
    HAL_StatusTypeDef status;

    // Read multiple registers starting from GESTURE_ID (0x01)
    status = HAL_I2C_Mem_Read(hi2c_cst816t, CST816T_I2C_ADDR_READ, CST816T_GESTURE_ID, I2C_MEMADD_SIZE_8BIT, data, 6, HAL_MAX_DELAY);
 8000644:	4b36      	ldr	r3, [pc, #216]	@ (8000720 <CST816T_ReadTouch+0xe4>)
 8000646:	6818      	ldr	r0, [r3, #0]
 8000648:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800064c:	9302      	str	r3, [sp, #8]
 800064e:	2306      	movs	r3, #6
 8000650:	9301      	str	r3, [sp, #4]
 8000652:	f107 030c 	add.w	r3, r7, #12
 8000656:	9300      	str	r3, [sp, #0]
 8000658:	2301      	movs	r3, #1
 800065a:	2201      	movs	r2, #1
 800065c:	21bb      	movs	r1, #187	@ 0xbb
 800065e:	f001 fff1 	bl	8002644 <HAL_I2C_Mem_Read>
 8000662:	4603      	mov	r3, r0
 8000664:	77fb      	strb	r3, [r7, #31]

    if (status == HAL_OK) {
 8000666:	7ffb      	ldrb	r3, [r7, #31]
 8000668:	2b00      	cmp	r3, #0
 800066a:	d151      	bne.n	8000710 <CST816T_ReadTouch+0xd4>
        ts_state->gesture_id = data[0];
 800066c:	7b3a      	ldrb	r2, [r7, #12]
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	719a      	strb	r2, [r3, #6]
        ts_state->touch_detected = (data[1] & 0x0F) > 0; // Finger Num is lower 4 bits of data[1]
 8000672:	7b7b      	ldrb	r3, [r7, #13]
 8000674:	f003 030f 	and.w	r3, r3, #15
 8000678:	2b00      	cmp	r3, #0
 800067a:	bfcc      	ite	gt
 800067c:	2301      	movgt	r3, #1
 800067e:	2300      	movle	r3, #0
 8000680:	b2db      	uxtb	r3, r3
 8000682:	461a      	mov	r2, r3
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	701a      	strb	r2, [r3, #0]

        if (ts_state->touch_detected) {
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	781b      	ldrb	r3, [r3, #0]
 800068c:	2b00      	cmp	r3, #0
 800068e:	d03c      	beq.n	800070a <CST816T_ReadTouch+0xce>
            ts_state->x = ((data[2] & 0x0F) << 8) | data[3]; // X coords from data[2] (4 bits) and data[3] (8 bits)
 8000690:	7bbb      	ldrb	r3, [r7, #14]
 8000692:	b21b      	sxth	r3, r3
 8000694:	021b      	lsls	r3, r3, #8
 8000696:	b21b      	sxth	r3, r3
 8000698:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 800069c:	b21a      	sxth	r2, r3
 800069e:	7bfb      	ldrb	r3, [r7, #15]
 80006a0:	b21b      	sxth	r3, r3
 80006a2:	4313      	orrs	r3, r2
 80006a4:	b21b      	sxth	r3, r3
 80006a6:	b29a      	uxth	r2, r3
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	805a      	strh	r2, [r3, #2]
            ts_state->y = ((data[4] & 0x0F) << 8) | data[5]; // Y coords from data[4] (4 bits) and data[5] (8 bits)
 80006ac:	7c3b      	ldrb	r3, [r7, #16]
 80006ae:	b21b      	sxth	r3, r3
 80006b0:	021b      	lsls	r3, r3, #8
 80006b2:	b21b      	sxth	r3, r3
 80006b4:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80006b8:	b21a      	sxth	r2, r3
 80006ba:	7c7b      	ldrb	r3, [r7, #17]
 80006bc:	b21b      	sxth	r3, r3
 80006be:	4313      	orrs	r3, r2
 80006c0:	b21b      	sxth	r3, r3
 80006c2:	b29a      	uxth	r2, r3
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	809a      	strh	r2, [r3, #4]
            // For a 170x320 portrait display:
            // X-axis mapping: 0-239 (touch) -> 0-169 (display) with a 35 pixel offset on the display.
            // Y-axis mapping: 0-279 (touch) -> 0-319 (display). Often Y is inverted.
            //
            // Corrected mapping often looks like:
            int raw_x = ts_state->x;
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	885b      	ldrh	r3, [r3, #2]
 80006cc:	61bb      	str	r3, [r7, #24]
            int raw_y = ts_state->y;
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	889b      	ldrh	r3, [r3, #4]
 80006d2:	617b      	str	r3, [r7, #20]
            // Example mapping for 1.69" 170x320:
            // Assuming touch reports 240x280 (width x height)
            // And display is 170x320 (width x height)
            // Usually, the X-axis of the touch is shifted by 35 or 40 pixels.
            // And Y-axis is inverted.
            ts_state->x = (raw_x * ST7789_WIDTH) / 240; // Scale X
 80006d4:	69bb      	ldr	r3, [r7, #24]
 80006d6:	b29a      	uxth	r2, r3
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	805a      	strh	r2, [r3, #2]
            ts_state->y = ST7789_HEIGHT - (raw_y * ST7789_HEIGHT) / 280; // Scale Y and invert
 80006dc:	697b      	ldr	r3, [r7, #20]
 80006de:	b29b      	uxth	r3, r3
 80006e0:	f5c3 738c 	rsb	r3, r3, #280	@ 0x118
 80006e4:	b29a      	uxth	r2, r3
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	809a      	strh	r2, [r3, #4]
            // For now, let's just use raw scaled coordinates.
            // You will almost certainly need to adjust these `ts_state->x` and `ts_state->y` lines
            // after initial testing to align touch with display.

            // Ensure coordinates are within display bounds
            if (ts_state->x >= ST7789_WIDTH) ts_state->x = ST7789_WIDTH - 1;
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	885b      	ldrh	r3, [r3, #2]
 80006ee:	2bef      	cmp	r3, #239	@ 0xef
 80006f0:	d902      	bls.n	80006f8 <CST816T_ReadTouch+0xbc>
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	22ef      	movs	r2, #239	@ 0xef
 80006f6:	805a      	strh	r2, [r3, #2]
            if (ts_state->y >= ST7789_HEIGHT) ts_state->y = ST7789_HEIGHT - 1;
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	889b      	ldrh	r3, [r3, #4]
 80006fc:	f5b3 7f8c 	cmp.w	r3, #280	@ 0x118
 8000700:	d303      	bcc.n	800070a <CST816T_ReadTouch+0xce>
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	f240 1217 	movw	r2, #279	@ 0x117
 8000708:	809a      	strh	r2, [r3, #4]
        }
        return ts_state->touch_detected;
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	781b      	ldrb	r3, [r3, #0]
 800070e:	e003      	b.n	8000718 <CST816T_ReadTouch+0xdc>
    } else {
        ts_state->touch_detected = 0;
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	2200      	movs	r2, #0
 8000714:	701a      	strb	r2, [r3, #0]
        return 0; // Error or no touch
 8000716:	2300      	movs	r3, #0
    }
}
 8000718:	4618      	mov	r0, r3
 800071a:	3720      	adds	r7, #32
 800071c:	46bd      	mov	sp, r7
 800071e:	bd80      	pop	{r7, pc}
 8000720:	200000ac 	.word	0x200000ac

08000724 <CST816T_WhoAmI>:

uint8_t CST816T_WhoAmI(void) {
 8000724:	b580      	push	{r7, lr}
 8000726:	b086      	sub	sp, #24
 8000728:	af04      	add	r7, sp, #16
    uint8_t chip_id = 0;
 800072a:	2300      	movs	r3, #0
 800072c:	71bb      	strb	r3, [r7, #6]
    HAL_StatusTypeDef status = HAL_I2C_Mem_Read(hi2c_cst816t, CST816T_I2C_ADDR_READ, CST816T_CHIP_ID, I2C_MEMADD_SIZE_8BIT, &chip_id, 1, HAL_MAX_DELAY);
 800072e:	4b0d      	ldr	r3, [pc, #52]	@ (8000764 <CST816T_WhoAmI+0x40>)
 8000730:	6818      	ldr	r0, [r3, #0]
 8000732:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000736:	9302      	str	r3, [sp, #8]
 8000738:	2301      	movs	r3, #1
 800073a:	9301      	str	r3, [sp, #4]
 800073c:	1dbb      	adds	r3, r7, #6
 800073e:	9300      	str	r3, [sp, #0]
 8000740:	2301      	movs	r3, #1
 8000742:	22a7      	movs	r2, #167	@ 0xa7
 8000744:	21bb      	movs	r1, #187	@ 0xbb
 8000746:	f001 ff7d 	bl	8002644 <HAL_I2C_Mem_Read>
 800074a:	4603      	mov	r3, r0
 800074c:	71fb      	strb	r3, [r7, #7]
    if (status == HAL_OK) {
 800074e:	79fb      	ldrb	r3, [r7, #7]
 8000750:	2b00      	cmp	r3, #0
 8000752:	d101      	bne.n	8000758 <CST816T_WhoAmI+0x34>
        return chip_id;
 8000754:	79bb      	ldrb	r3, [r7, #6]
 8000756:	e000      	b.n	800075a <CST816T_WhoAmI+0x36>
    }
    return 0x00; // Error
 8000758:	2300      	movs	r3, #0
}
 800075a:	4618      	mov	r0, r3
 800075c:	3708      	adds	r7, #8
 800075e:	46bd      	mov	sp, r7
 8000760:	bd80      	pop	{r7, pc}
 8000762:	bf00      	nop
 8000764:	200000ac 	.word	0x200000ac

08000768 <MX_GPIO_Init>:
     PA13 (JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PA14 (JTCK/SWCLK)   ------> DEBUG_JTCK-SWCLK
     PB3 (JTDO/TRACESWO)   ------> DEBUG_JTDO-SWO
*/
void MX_GPIO_Init(void)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	b088      	sub	sp, #32
 800076c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800076e:	f107 030c 	add.w	r3, r7, #12
 8000772:	2200      	movs	r2, #0
 8000774:	601a      	str	r2, [r3, #0]
 8000776:	605a      	str	r2, [r3, #4]
 8000778:	609a      	str	r2, [r3, #8]
 800077a:	60da      	str	r2, [r3, #12]
 800077c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800077e:	4b44      	ldr	r3, [pc, #272]	@ (8000890 <MX_GPIO_Init+0x128>)
 8000780:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000784:	4a42      	ldr	r2, [pc, #264]	@ (8000890 <MX_GPIO_Init+0x128>)
 8000786:	f043 0304 	orr.w	r3, r3, #4
 800078a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800078e:	4b40      	ldr	r3, [pc, #256]	@ (8000890 <MX_GPIO_Init+0x128>)
 8000790:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000794:	f003 0304 	and.w	r3, r3, #4
 8000798:	60bb      	str	r3, [r7, #8]
 800079a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800079c:	4b3c      	ldr	r3, [pc, #240]	@ (8000890 <MX_GPIO_Init+0x128>)
 800079e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80007a2:	4a3b      	ldr	r2, [pc, #236]	@ (8000890 <MX_GPIO_Init+0x128>)
 80007a4:	f043 0301 	orr.w	r3, r3, #1
 80007a8:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80007ac:	4b38      	ldr	r3, [pc, #224]	@ (8000890 <MX_GPIO_Init+0x128>)
 80007ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80007b2:	f003 0301 	and.w	r3, r3, #1
 80007b6:	607b      	str	r3, [r7, #4]
 80007b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007ba:	4b35      	ldr	r3, [pc, #212]	@ (8000890 <MX_GPIO_Init+0x128>)
 80007bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80007c0:	4a33      	ldr	r2, [pc, #204]	@ (8000890 <MX_GPIO_Init+0x128>)
 80007c2:	f043 0302 	orr.w	r3, r3, #2
 80007c6:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80007ca:	4b31      	ldr	r3, [pc, #196]	@ (8000890 <MX_GPIO_Init+0x128>)
 80007cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80007d0:	f003 0302 	and.w	r3, r3, #2
 80007d4:	603b      	str	r3, [r7, #0]
 80007d6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RST_GPIO_Port, RST_Pin, GPIO_PIN_RESET);
 80007d8:	2200      	movs	r2, #0
 80007da:	2101      	movs	r1, #1
 80007dc:	482d      	ldr	r0, [pc, #180]	@ (8000894 <MX_GPIO_Init+0x12c>)
 80007de:	f001 fe41 	bl	8002464 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TP_RST_GPIO_Port, TP_RST_Pin, GPIO_PIN_SET);
 80007e2:	2201      	movs	r2, #1
 80007e4:	2104      	movs	r1, #4
 80007e6:	482b      	ldr	r0, [pc, #172]	@ (8000894 <MX_GPIO_Init+0x12c>)
 80007e8:	f001 fe3c 	bl	8002464 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 80007ec:	2201      	movs	r2, #1
 80007ee:	2110      	movs	r1, #16
 80007f0:	4829      	ldr	r0, [pc, #164]	@ (8000898 <MX_GPIO_Init+0x130>)
 80007f2:	f001 fe37 	bl	8002464 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DC_GPIO_Port, DC_Pin, GPIO_PIN_RESET);
 80007f6:	2200      	movs	r2, #0
 80007f8:	2101      	movs	r1, #1
 80007fa:	4828      	ldr	r0, [pc, #160]	@ (800089c <MX_GPIO_Init+0x134>)
 80007fc:	f001 fe32 	bl	8002464 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BL_GPIO_Port, BL_Pin, GPIO_PIN_SET);
 8000800:	2201      	movs	r2, #1
 8000802:	2102      	movs	r1, #2
 8000804:	4825      	ldr	r0, [pc, #148]	@ (800089c <MX_GPIO_Init+0x134>)
 8000806:	f001 fe2d 	bl	8002464 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : RST_Pin TP_RST_Pin */
  GPIO_InitStruct.Pin = RST_Pin|TP_RST_Pin;
 800080a:	2305      	movs	r3, #5
 800080c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800080e:	2301      	movs	r3, #1
 8000810:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000812:	2300      	movs	r3, #0
 8000814:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000816:	2303      	movs	r3, #3
 8000818:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800081a:	f107 030c 	add.w	r3, r7, #12
 800081e:	4619      	mov	r1, r3
 8000820:	481c      	ldr	r0, [pc, #112]	@ (8000894 <MX_GPIO_Init+0x12c>)
 8000822:	f001 fc3f 	bl	80020a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : INT_Pin */
  GPIO_InitStruct.Pin = INT_Pin;
 8000826:	2302      	movs	r3, #2
 8000828:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800082a:	4b1d      	ldr	r3, [pc, #116]	@ (80008a0 <MX_GPIO_Init+0x138>)
 800082c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800082e:	2301      	movs	r3, #1
 8000830:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(INT_GPIO_Port, &GPIO_InitStruct);
 8000832:	f107 030c 	add.w	r3, r7, #12
 8000836:	4619      	mov	r1, r3
 8000838:	4816      	ldr	r0, [pc, #88]	@ (8000894 <MX_GPIO_Init+0x12c>)
 800083a:	f001 fc33 	bl	80020a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 800083e:	2310      	movs	r3, #16
 8000840:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000842:	2301      	movs	r3, #1
 8000844:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000846:	2300      	movs	r3, #0
 8000848:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800084a:	2303      	movs	r3, #3
 800084c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800084e:	f107 030c 	add.w	r3, r7, #12
 8000852:	4619      	mov	r1, r3
 8000854:	4810      	ldr	r0, [pc, #64]	@ (8000898 <MX_GPIO_Init+0x130>)
 8000856:	f001 fc25 	bl	80020a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : DC_Pin BL_Pin */
  GPIO_InitStruct.Pin = DC_Pin|BL_Pin;
 800085a:	2303      	movs	r3, #3
 800085c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800085e:	2301      	movs	r3, #1
 8000860:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000862:	2300      	movs	r3, #0
 8000864:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000866:	2303      	movs	r3, #3
 8000868:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800086a:	f107 030c 	add.w	r3, r7, #12
 800086e:	4619      	mov	r1, r3
 8000870:	480a      	ldr	r0, [pc, #40]	@ (800089c <MX_GPIO_Init+0x134>)
 8000872:	f001 fc17 	bl	80020a4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8000876:	2200      	movs	r2, #0
 8000878:	2100      	movs	r1, #0
 800087a:	200c      	movs	r0, #12
 800087c:	f001 fac4 	bl	8001e08 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8000880:	200c      	movs	r0, #12
 8000882:	f001 fadb 	bl	8001e3c <HAL_NVIC_EnableIRQ>

}
 8000886:	bf00      	nop
 8000888:	3720      	adds	r7, #32
 800088a:	46bd      	mov	sp, r7
 800088c:	bd80      	pop	{r7, pc}
 800088e:	bf00      	nop
 8000890:	46020c00 	.word	0x46020c00
 8000894:	42020800 	.word	0x42020800
 8000898:	42020000 	.word	0x42020000
 800089c:	42020400 	.word	0x42020400
 80008a0:	10210000 	.word	0x10210000

080008a4 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80008a8:	4b1b      	ldr	r3, [pc, #108]	@ (8000918 <MX_I2C1_Init+0x74>)
 80008aa:	4a1c      	ldr	r2, [pc, #112]	@ (800091c <MX_I2C1_Init+0x78>)
 80008ac:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00F07BFF;
 80008ae:	4b1a      	ldr	r3, [pc, #104]	@ (8000918 <MX_I2C1_Init+0x74>)
 80008b0:	4a1b      	ldr	r2, [pc, #108]	@ (8000920 <MX_I2C1_Init+0x7c>)
 80008b2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80008b4:	4b18      	ldr	r3, [pc, #96]	@ (8000918 <MX_I2C1_Init+0x74>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80008ba:	4b17      	ldr	r3, [pc, #92]	@ (8000918 <MX_I2C1_Init+0x74>)
 80008bc:	2201      	movs	r2, #1
 80008be:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80008c0:	4b15      	ldr	r3, [pc, #84]	@ (8000918 <MX_I2C1_Init+0x74>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80008c6:	4b14      	ldr	r3, [pc, #80]	@ (8000918 <MX_I2C1_Init+0x74>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80008cc:	4b12      	ldr	r3, [pc, #72]	@ (8000918 <MX_I2C1_Init+0x74>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80008d2:	4b11      	ldr	r3, [pc, #68]	@ (8000918 <MX_I2C1_Init+0x74>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80008d8:	4b0f      	ldr	r3, [pc, #60]	@ (8000918 <MX_I2C1_Init+0x74>)
 80008da:	2200      	movs	r2, #0
 80008dc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80008de:	480e      	ldr	r0, [pc, #56]	@ (8000918 <MX_I2C1_Init+0x74>)
 80008e0:	f001 fe14 	bl	800250c <HAL_I2C_Init>
 80008e4:	4603      	mov	r3, r0
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d001      	beq.n	80008ee <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80008ea:	f000 fa0b 	bl	8000d04 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80008ee:	2100      	movs	r1, #0
 80008f0:	4809      	ldr	r0, [pc, #36]	@ (8000918 <MX_I2C1_Init+0x74>)
 80008f2:	f003 f835 	bl	8003960 <HAL_I2CEx_ConfigAnalogFilter>
 80008f6:	4603      	mov	r3, r0
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d001      	beq.n	8000900 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80008fc:	f000 fa02 	bl	8000d04 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000900:	2100      	movs	r1, #0
 8000902:	4805      	ldr	r0, [pc, #20]	@ (8000918 <MX_I2C1_Init+0x74>)
 8000904:	f003 f877 	bl	80039f6 <HAL_I2CEx_ConfigDigitalFilter>
 8000908:	4603      	mov	r3, r0
 800090a:	2b00      	cmp	r3, #0
 800090c:	d001      	beq.n	8000912 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800090e:	f000 f9f9 	bl	8000d04 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000912:	bf00      	nop
 8000914:	bd80      	pop	{r7, pc}
 8000916:	bf00      	nop
 8000918:	200000b4 	.word	0x200000b4
 800091c:	40005400 	.word	0x40005400
 8000920:	00f07bff 	.word	0x00f07bff

08000924 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b0ba      	sub	sp, #232	@ 0xe8
 8000928:	af00      	add	r7, sp, #0
 800092a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800092c:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000930:	2200      	movs	r2, #0
 8000932:	601a      	str	r2, [r3, #0]
 8000934:	605a      	str	r2, [r3, #4]
 8000936:	609a      	str	r2, [r3, #8]
 8000938:	60da      	str	r2, [r3, #12]
 800093a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800093c:	f107 0310 	add.w	r3, r7, #16
 8000940:	22c0      	movs	r2, #192	@ 0xc0
 8000942:	2100      	movs	r1, #0
 8000944:	4618      	mov	r0, r3
 8000946:	f008 ffbd 	bl	80098c4 <memset>
  if(i2cHandle->Instance==I2C1)
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	681b      	ldr	r3, [r3, #0]
 800094e:	4a2e      	ldr	r2, [pc, #184]	@ (8000a08 <HAL_I2C_MspInit+0xe4>)
 8000950:	4293      	cmp	r3, r2
 8000952:	d154      	bne.n	80009fe <HAL_I2C_MspInit+0xda>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000954:	f04f 0240 	mov.w	r2, #64	@ 0x40
 8000958:	f04f 0300 	mov.w	r3, #0
 800095c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000960:	2300      	movs	r3, #0
 8000962:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000964:	f107 0310 	add.w	r3, r7, #16
 8000968:	4618      	mov	r0, r3
 800096a:	f004 fca1 	bl	80052b0 <HAL_RCCEx_PeriphCLKConfig>
 800096e:	4603      	mov	r3, r0
 8000970:	2b00      	cmp	r3, #0
 8000972:	d001      	beq.n	8000978 <HAL_I2C_MspInit+0x54>
    {
      Error_Handler();
 8000974:	f000 f9c6 	bl	8000d04 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000978:	4b24      	ldr	r3, [pc, #144]	@ (8000a0c <HAL_I2C_MspInit+0xe8>)
 800097a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800097e:	4a23      	ldr	r2, [pc, #140]	@ (8000a0c <HAL_I2C_MspInit+0xe8>)
 8000980:	f043 0302 	orr.w	r3, r3, #2
 8000984:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000988:	4b20      	ldr	r3, [pc, #128]	@ (8000a0c <HAL_I2C_MspInit+0xe8>)
 800098a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800098e:	f003 0302 	and.w	r3, r3, #2
 8000992:	60fb      	str	r3, [r7, #12]
 8000994:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000996:	23c0      	movs	r3, #192	@ 0xc0
 8000998:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800099c:	2312      	movs	r3, #18
 800099e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a2:	2300      	movs	r3, #0
 80009a4:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009a8:	2300      	movs	r3, #0
 80009aa:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80009ae:	2304      	movs	r3, #4
 80009b0:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009b4:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80009b8:	4619      	mov	r1, r3
 80009ba:	4815      	ldr	r0, [pc, #84]	@ (8000a10 <HAL_I2C_MspInit+0xec>)
 80009bc:	f001 fb72 	bl	80020a4 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80009c0:	4b12      	ldr	r3, [pc, #72]	@ (8000a0c <HAL_I2C_MspInit+0xe8>)
 80009c2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80009c6:	4a11      	ldr	r2, [pc, #68]	@ (8000a0c <HAL_I2C_MspInit+0xe8>)
 80009c8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80009cc:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 80009d0:	4b0e      	ldr	r3, [pc, #56]	@ (8000a0c <HAL_I2C_MspInit+0xe8>)
 80009d2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80009d6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80009da:	60bb      	str	r3, [r7, #8]
 80009dc:	68bb      	ldr	r3, [r7, #8]

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80009de:	2200      	movs	r2, #0
 80009e0:	2100      	movs	r1, #0
 80009e2:	2037      	movs	r0, #55	@ 0x37
 80009e4:	f001 fa10 	bl	8001e08 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80009e8:	2037      	movs	r0, #55	@ 0x37
 80009ea:	f001 fa27 	bl	8001e3c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 80009ee:	2200      	movs	r2, #0
 80009f0:	2100      	movs	r1, #0
 80009f2:	2038      	movs	r0, #56	@ 0x38
 80009f4:	f001 fa08 	bl	8001e08 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 80009f8:	2038      	movs	r0, #56	@ 0x38
 80009fa:	f001 fa1f 	bl	8001e3c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80009fe:	bf00      	nop
 8000a00:	37e8      	adds	r7, #232	@ 0xe8
 8000a02:	46bd      	mov	sp, r7
 8000a04:	bd80      	pop	{r7, pc}
 8000a06:	bf00      	nop
 8000a08:	40005400 	.word	0x40005400
 8000a0c:	46020c00 	.word	0x46020c00
 8000a10:	42020400 	.word	0x42020400

08000a14 <MX_ICACHE_Init>:

/* USER CODE END 0 */

/* ICACHE init function */
void MX_ICACHE_Init(void)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache in 1-way (direct mapped cache)
  */
  if (HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY) != HAL_OK)
 8000a18:	2000      	movs	r0, #0
 8000a1a:	f003 f839 	bl	8003a90 <HAL_ICACHE_ConfigAssociativityMode>
 8000a1e:	4603      	mov	r3, r0
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d001      	beq.n	8000a28 <MX_ICACHE_Init+0x14>
  {
    Error_Handler();
 8000a24:	f000 f96e 	bl	8000d04 <Error_Handler>
  }
  if (HAL_ICACHE_Enable() != HAL_OK)
 8000a28:	f003 f852 	bl	8003ad0 <HAL_ICACHE_Enable>
 8000a2c:	4603      	mov	r3, r0
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d001      	beq.n	8000a36 <MX_ICACHE_Init+0x22>
  {
    Error_Handler();
 8000a32:	f000 f967 	bl	8000d04 <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 8000a36:	bf00      	nop
 8000a38:	bd80      	pop	{r7, pc}
	...

08000a3c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b090      	sub	sp, #64	@ 0x40
 8000a40:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a42:	f001 f8b5 	bl	8001bb0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the System Power */
  SystemPower_Config();
 8000a46:	f000 f93d 	bl	8000cc4 <SystemPower_Config>

  /* Configure the system clock */
  SystemClock_Config();
 8000a4a:	f000 f8e1 	bl	8000c10 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a4e:	f7ff fe8b 	bl	8000768 <MX_GPIO_Init>
  MX_ICACHE_Init();
 8000a52:	f7ff ffdf 	bl	8000a14 <MX_ICACHE_Init>
  MX_I2C1_Init();
 8000a56:	f7ff ff25 	bl	80008a4 <MX_I2C1_Init>
  MX_SPI1_Init();
 8000a5a:	f000 f959 	bl	8000d10 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  ST7789_Init(&hspi1); // Initialize the display
 8000a5e:	4861      	ldr	r0, [pc, #388]	@ (8000be4 <main+0x1a8>)
 8000a60:	f000 fae0 	bl	8001024 <ST7789_Init>
  CST816T_Init(&hi2c1); // Initialize the touch controller
 8000a64:	4860      	ldr	r0, [pc, #384]	@ (8000be8 <main+0x1ac>)
 8000a66:	f7ff fdc5 	bl	80005f4 <CST816T_Init>

  // Initial screen setup
  ST7789_FillScreen(ST7789_BLUE);
 8000a6a:	201f      	movs	r0, #31
 8000a6c:	f000 fb44 	bl	80010f8 <ST7789_FillScreen>
  HAL_Delay(500);
 8000a70:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000a74:	f001 f8ec 	bl	8001c50 <HAL_Delay>
  //ST7789_WriteString(10, 10, "!Hello, Gemini!", &Font_16x26, ST7789_WHITE, ST7789_BLUE);
//  ST7789_WriteString(50, 50, "!STM32 NUCLEO-U575ZI-Q", &Font_7x10, ST7789_YELLOW, ST7789_BLUE);
  ST7789_WriteString(50, 50, "Hello", &Font_7x10, ST7789_YELLOW, ST7789_BLUE);
 8000a78:	231f      	movs	r3, #31
 8000a7a:	9301      	str	r3, [sp, #4]
 8000a7c:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8000a80:	9300      	str	r3, [sp, #0]
 8000a82:	4b5a      	ldr	r3, [pc, #360]	@ (8000bec <main+0x1b0>)
 8000a84:	4a5a      	ldr	r2, [pc, #360]	@ (8000bf0 <main+0x1b4>)
 8000a86:	2132      	movs	r1, #50	@ 0x32
 8000a88:	2032      	movs	r0, #50	@ 0x32
 8000a8a:	f000 fcbe 	bl	800140a <ST7789_WriteString>
//  ST7789_WriteString(10, 60, "!Waveshare 1.69inch LCD", &Font_11x18, ST7789_GREENYELLOW, ST7789_BLUE);
//  ST7789_WriteString(10, 90, "!Touch and Display Demo", &Font_7x10, ST7789_CYAN, ST7789_BLUE);

  char buffer[50];
  int touch_display_y = 150; // Y position to display touch coordinates
 8000a8e:	2396      	movs	r3, #150	@ 0x96
 8000a90:	637b      	str	r3, [r7, #52]	@ 0x34

  /* USER CODE END 2 */

  /* Initialize leds */
  BSP_LED_Init(LED_GREEN);
 8000a92:	2000      	movs	r0, #0
 8000a94:	f000 fe9e 	bl	80017d4 <BSP_LED_Init>
  BSP_LED_Init(LED_BLUE);
 8000a98:	2001      	movs	r0, #1
 8000a9a:	f000 fe9b 	bl	80017d4 <BSP_LED_Init>
  BSP_LED_Init(LED_RED);
 8000a9e:	2002      	movs	r0, #2
 8000aa0:	f000 fe98 	bl	80017d4 <BSP_LED_Init>

  /* Initialize USER push-button, will be used to trigger an interrupt each time it's pressed.*/
  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 8000aa4:	2101      	movs	r1, #1
 8000aa6:	2000      	movs	r0, #0
 8000aa8:	f000 ff24 	bl	80018f4 <BSP_PB_Init>

  /* Initialize COM1 port (115200, 8 bits (7-bit data + 1 stop bit), no parity */
  BspCOMInit.BaudRate   = 115200;
 8000aac:	4b51      	ldr	r3, [pc, #324]	@ (8000bf4 <main+0x1b8>)
 8000aae:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000ab2:	601a      	str	r2, [r3, #0]
  BspCOMInit.WordLength = COM_WORDLENGTH_8B;
 8000ab4:	4b4f      	ldr	r3, [pc, #316]	@ (8000bf4 <main+0x1b8>)
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	605a      	str	r2, [r3, #4]
  BspCOMInit.StopBits   = COM_STOPBITS_1;
 8000aba:	4b4e      	ldr	r3, [pc, #312]	@ (8000bf4 <main+0x1b8>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	811a      	strh	r2, [r3, #8]
  BspCOMInit.Parity     = COM_PARITY_NONE;
 8000ac0:	4b4c      	ldr	r3, [pc, #304]	@ (8000bf4 <main+0x1b8>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	815a      	strh	r2, [r3, #10]
  BspCOMInit.HwFlowCtl  = COM_HWCONTROL_NONE;
 8000ac6:	4b4b      	ldr	r3, [pc, #300]	@ (8000bf4 <main+0x1b8>)
 8000ac8:	2200      	movs	r2, #0
 8000aca:	819a      	strh	r2, [r3, #12]
  if (BSP_COM_Init(COM1, &BspCOMInit) != BSP_ERROR_NONE)
 8000acc:	4949      	ldr	r1, [pc, #292]	@ (8000bf4 <main+0x1b8>)
 8000ace:	2000      	movs	r0, #0
 8000ad0:	f000 ffaa 	bl	8001a28 <BSP_COM_Init>
 8000ad4:	4603      	mov	r3, r0
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d001      	beq.n	8000ade <main+0xa2>
  {
    Error_Handler();
 8000ada:	f000 f913 	bl	8000d04 <Error_Handler>
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	// Check for touch event
	if (touch_event_pending) {
 8000ade:	4b46      	ldr	r3, [pc, #280]	@ (8000bf8 <main+0x1bc>)
 8000ae0:	781b      	ldrb	r3, [r3, #0]
 8000ae2:	b2db      	uxtb	r3, r3
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d078      	beq.n	8000bda <main+0x19e>
		touch_event_pending = false; // Clear the flag
 8000ae8:	4b43      	ldr	r3, [pc, #268]	@ (8000bf8 <main+0x1bc>)
 8000aea:	2200      	movs	r2, #0
 8000aec:	701a      	strb	r2, [r3, #0]
		if (CST816T_ReadTouch(&touch_state)) {
 8000aee:	4843      	ldr	r0, [pc, #268]	@ (8000bfc <main+0x1c0>)
 8000af0:	f7ff fda4 	bl	800063c <CST816T_ReadTouch>
 8000af4:	4603      	mov	r3, r0
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d06f      	beq.n	8000bda <main+0x19e>
			if (touch_state.touch_detected) {
 8000afa:	4b40      	ldr	r3, [pc, #256]	@ (8000bfc <main+0x1c0>)
 8000afc:	781b      	ldrb	r3, [r3, #0]
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d050      	beq.n	8000ba4 <main+0x168>
				// Clear previous touch info
				ST7789_FillRectangle(0, touch_display_y, ST7789_WIDTH, Font_16x26.height * 2 + 10, ST7789_BLUE);
 8000b02:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000b04:	b219      	sxth	r1, r3
 8000b06:	4b3e      	ldr	r3, [pc, #248]	@ (8000c00 <main+0x1c4>)
 8000b08:	88db      	ldrh	r3, [r3, #6]
 8000b0a:	3305      	adds	r3, #5
 8000b0c:	b29b      	uxth	r3, r3
 8000b0e:	005b      	lsls	r3, r3, #1
 8000b10:	b29b      	uxth	r3, r3
 8000b12:	b21b      	sxth	r3, r3
 8000b14:	221f      	movs	r2, #31
 8000b16:	9200      	str	r2, [sp, #0]
 8000b18:	22f0      	movs	r2, #240	@ 0xf0
 8000b1a:	2000      	movs	r0, #0
 8000b1c:	f000 fb36 	bl	800118c <ST7789_FillRectangle>

				// Display touch coordinates
				sprintf(buffer, "X: %03d Y: %03d", touch_state.x, touch_state.y);
 8000b20:	4b36      	ldr	r3, [pc, #216]	@ (8000bfc <main+0x1c0>)
 8000b22:	885b      	ldrh	r3, [r3, #2]
 8000b24:	461a      	mov	r2, r3
 8000b26:	4b35      	ldr	r3, [pc, #212]	@ (8000bfc <main+0x1c0>)
 8000b28:	889b      	ldrh	r3, [r3, #4]
 8000b2a:	4638      	mov	r0, r7
 8000b2c:	4935      	ldr	r1, [pc, #212]	@ (8000c04 <main+0x1c8>)
 8000b2e:	f008 fea7 	bl	8009880 <siprintf>
				ST7789_WriteString(10, touch_display_y, buffer, &Font_16x26, ST7789_WHITE, ST7789_BLUE);
 8000b32:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000b34:	b219      	sxth	r1, r3
 8000b36:	463a      	mov	r2, r7
 8000b38:	231f      	movs	r3, #31
 8000b3a:	9301      	str	r3, [sp, #4]
 8000b3c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000b40:	9300      	str	r3, [sp, #0]
 8000b42:	4b2f      	ldr	r3, [pc, #188]	@ (8000c00 <main+0x1c4>)
 8000b44:	200a      	movs	r0, #10
 8000b46:	f000 fc60 	bl	800140a <ST7789_WriteString>

				// Display gesture (if any)
				// You can decode gesture_id (e.g., 0x01=Tap, 0x02=Swipe Up, etc. - check CST816T datasheet)
				sprintf(buffer, "Gesture: 0x%02X", touch_state.gesture_id);
 8000b4a:	4b2c      	ldr	r3, [pc, #176]	@ (8000bfc <main+0x1c0>)
 8000b4c:	799b      	ldrb	r3, [r3, #6]
 8000b4e:	461a      	mov	r2, r3
 8000b50:	463b      	mov	r3, r7
 8000b52:	492d      	ldr	r1, [pc, #180]	@ (8000c08 <main+0x1cc>)
 8000b54:	4618      	mov	r0, r3
 8000b56:	f008 fe93 	bl	8009880 <siprintf>
				ST7789_WriteString(10, touch_display_y + Font_16x26.height + 5, buffer, &Font_7x10, ST7789_ORANGE, ST7789_BLUE);
 8000b5a:	4b29      	ldr	r3, [pc, #164]	@ (8000c00 <main+0x1c4>)
 8000b5c:	88da      	ldrh	r2, [r3, #6]
 8000b5e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000b60:	b29b      	uxth	r3, r3
 8000b62:	4413      	add	r3, r2
 8000b64:	b29b      	uxth	r3, r3
 8000b66:	3305      	adds	r3, #5
 8000b68:	b29b      	uxth	r3, r3
 8000b6a:	b219      	sxth	r1, r3
 8000b6c:	463a      	mov	r2, r7
 8000b6e:	231f      	movs	r3, #31
 8000b70:	9301      	str	r3, [sp, #4]
 8000b72:	f64f 5320 	movw	r3, #64800	@ 0xfd20
 8000b76:	9300      	str	r3, [sp, #0]
 8000b78:	4b1c      	ldr	r3, [pc, #112]	@ (8000bec <main+0x1b0>)
 8000b7a:	200a      	movs	r0, #10
 8000b7c:	f000 fc45 	bl	800140a <ST7789_WriteString>

				// Optionally, draw a circle at the touch point
				ST7789_FillRectangle(touch_state.x - 2, touch_state.y - 2, 5, 5, ST7789_RED);
 8000b80:	4b1e      	ldr	r3, [pc, #120]	@ (8000bfc <main+0x1c0>)
 8000b82:	885b      	ldrh	r3, [r3, #2]
 8000b84:	3b02      	subs	r3, #2
 8000b86:	b29b      	uxth	r3, r3
 8000b88:	b218      	sxth	r0, r3
 8000b8a:	4b1c      	ldr	r3, [pc, #112]	@ (8000bfc <main+0x1c0>)
 8000b8c:	889b      	ldrh	r3, [r3, #4]
 8000b8e:	3b02      	subs	r3, #2
 8000b90:	b29b      	uxth	r3, r3
 8000b92:	b219      	sxth	r1, r3
 8000b94:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8000b98:	9300      	str	r3, [sp, #0]
 8000b9a:	2305      	movs	r3, #5
 8000b9c:	2205      	movs	r2, #5
 8000b9e:	f000 faf5 	bl	800118c <ST7789_FillRectangle>
 8000ba2:	e01a      	b.n	8000bda <main+0x19e>
			} else {
				// No touch detected, clear touch info after release
				ST7789_FillRectangle(0, touch_display_y, ST7789_WIDTH, Font_16x26.height * 2 + 10, ST7789_BLUE);
 8000ba4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000ba6:	b219      	sxth	r1, r3
 8000ba8:	4b15      	ldr	r3, [pc, #84]	@ (8000c00 <main+0x1c4>)
 8000baa:	88db      	ldrh	r3, [r3, #6]
 8000bac:	3305      	adds	r3, #5
 8000bae:	b29b      	uxth	r3, r3
 8000bb0:	005b      	lsls	r3, r3, #1
 8000bb2:	b29b      	uxth	r3, r3
 8000bb4:	b21b      	sxth	r3, r3
 8000bb6:	221f      	movs	r2, #31
 8000bb8:	9200      	str	r2, [sp, #0]
 8000bba:	22f0      	movs	r2, #240	@ 0xf0
 8000bbc:	2000      	movs	r0, #0
 8000bbe:	f000 fae5 	bl	800118c <ST7789_FillRectangle>
				ST7789_WriteString(10, touch_display_y, "No Touch", &Font_16x26, ST7789_WHITE, ST7789_BLUE);
 8000bc2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000bc4:	b219      	sxth	r1, r3
 8000bc6:	231f      	movs	r3, #31
 8000bc8:	9301      	str	r3, [sp, #4]
 8000bca:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000bce:	9300      	str	r3, [sp, #0]
 8000bd0:	4b0b      	ldr	r3, [pc, #44]	@ (8000c00 <main+0x1c4>)
 8000bd2:	4a0e      	ldr	r2, [pc, #56]	@ (8000c0c <main+0x1d0>)
 8000bd4:	200a      	movs	r0, #10
 8000bd6:	f000 fc18 	bl	800140a <ST7789_WriteString>
		}
	}
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	HAL_Delay(10); // Small delay to prevent busy-waiting if no touch event
 8000bda:	200a      	movs	r0, #10
 8000bdc:	f001 f838 	bl	8001c50 <HAL_Delay>
	if (touch_event_pending) {
 8000be0:	e77d      	b.n	8000ade <main+0xa2>
 8000be2:	bf00      	nop
 8000be4:	20000120 	.word	0x20000120
 8000be8:	200000b4 	.word	0x200000b4
 8000bec:	20000000 	.word	0x20000000
 8000bf0:	0800a1fc 	.word	0x0800a1fc
 8000bf4:	20000108 	.word	0x20000108
 8000bf8:	200000b0 	.word	0x200000b0
 8000bfc:	20000118 	.word	0x20000118
 8000c00:	2000000c 	.word	0x2000000c
 8000c04:	0800a204 	.word	0x0800a204
 8000c08:	0800a214 	.word	0x0800a214
 8000c0c:	0800a224 	.word	0x0800a224

08000c10 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b09e      	sub	sp, #120	@ 0x78
 8000c14:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c16:	f107 0318 	add.w	r3, r7, #24
 8000c1a:	2260      	movs	r2, #96	@ 0x60
 8000c1c:	2100      	movs	r1, #0
 8000c1e:	4618      	mov	r0, r3
 8000c20:	f008 fe50 	bl	80098c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c24:	463b      	mov	r3, r7
 8000c26:	2200      	movs	r2, #0
 8000c28:	601a      	str	r2, [r3, #0]
 8000c2a:	605a      	str	r2, [r3, #4]
 8000c2c:	609a      	str	r2, [r3, #8]
 8000c2e:	60da      	str	r2, [r3, #12]
 8000c30:	611a      	str	r2, [r3, #16]
 8000c32:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000c34:	f44f 3040 	mov.w	r0, #196608	@ 0x30000
 8000c38:	f002 ff5a 	bl	8003af0 <HAL_PWREx_ControlVoltageScaling>
 8000c3c:	4603      	mov	r3, r0
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d001      	beq.n	8000c46 <SystemClock_Config+0x36>
  {
    Error_Handler();
 8000c42:	f000 f85f 	bl	8000d04 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000c46:	2302      	movs	r3, #2
 8000c48:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c4a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000c4e:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c50:	2310      	movs	r3, #16
 8000c52:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c54:	2302      	movs	r3, #2
 8000c56:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000c58:	2302      	movs	r3, #2
 8000c5a:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLMBOOST = RCC_PLLMBOOST_DIV1;
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000c60:	2301      	movs	r3, #1
 8000c62:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000c64:	230a      	movs	r3, #10
 8000c66:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000c68:	2302      	movs	r3, #2
 8000c6a:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000c6c:	2302      	movs	r3, #2
 8000c6e:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLR = 1;
 8000c70:	2301      	movs	r3, #1
 8000c72:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLLVCIRANGE_1;
 8000c74:	230c      	movs	r3, #12
 8000c76:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000c78:	2300      	movs	r3, #0
 8000c7a:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c7c:	f107 0318 	add.w	r3, r7, #24
 8000c80:	4618      	mov	r0, r3
 8000c82:	f003 f831 	bl	8003ce8 <HAL_RCC_OscConfig>
 8000c86:	4603      	mov	r3, r0
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d001      	beq.n	8000c90 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000c8c:	f000 f83a 	bl	8000d04 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c90:	231f      	movs	r3, #31
 8000c92:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c94:	2303      	movs	r3, #3
 8000c96:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000ca8:	463b      	mov	r3, r7
 8000caa:	2104      	movs	r1, #4
 8000cac:	4618      	mov	r0, r3
 8000cae:	f003 fef7 	bl	8004aa0 <HAL_RCC_ClockConfig>
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d001      	beq.n	8000cbc <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000cb8:	f000 f824 	bl	8000d04 <Error_Handler>
  }
}
 8000cbc:	bf00      	nop
 8000cbe:	3778      	adds	r7, #120	@ 0x78
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	bd80      	pop	{r7, pc}

08000cc4 <SystemPower_Config>:
/**
  * @brief Power Configuration
  * @retval None
  */
static void SystemPower_Config(void)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	af00      	add	r7, sp, #0

  /*
   * Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
   */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000cc8:	f002 fffe 	bl	8003cc8 <HAL_PWREx_DisableUCPDDeadBattery>

  /*
   * Switch to SMPS regulator instead of LDO
   */
  if (HAL_PWREx_ConfigSupply(PWR_SMPS_SUPPLY) != HAL_OK)
 8000ccc:	2002      	movs	r0, #2
 8000cce:	f002 ff9b 	bl	8003c08 <HAL_PWREx_ConfigSupply>
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d001      	beq.n	8000cdc <SystemPower_Config+0x18>
  {
    Error_Handler();
 8000cd8:	f000 f814 	bl	8000d04 <Error_Handler>
  }
/* USER CODE BEGIN PWR */
/* USER CODE END PWR */
}
 8000cdc:	bf00      	nop
 8000cde:	bd80      	pop	{r7, pc}

08000ce0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b082      	sub	sp, #8
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM17)
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	4a04      	ldr	r2, [pc, #16]	@ (8000d00 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000cee:	4293      	cmp	r3, r2
 8000cf0:	d101      	bne.n	8000cf6 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8000cf2:	f000 ff8d 	bl	8001c10 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000cf6:	bf00      	nop
 8000cf8:	3708      	adds	r7, #8
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	bd80      	pop	{r7, pc}
 8000cfe:	bf00      	nop
 8000d00:	40014800 	.word	0x40014800

08000d04 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d04:	b480      	push	{r7}
 8000d06:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d08:	b672      	cpsid	i
}
 8000d0a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d0c:	bf00      	nop
 8000d0e:	e7fd      	b.n	8000d0c <Error_Handler+0x8>

08000d10 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b084      	sub	sp, #16
 8000d14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 0 */

  /* USER CODE END SPI1_Init 0 */

  SPI_AutonomousModeConfTypeDef HAL_SPI_AutonomousMode_Cfg_Struct = {0};
 8000d16:	1d3b      	adds	r3, r7, #4
 8000d18:	2200      	movs	r2, #0
 8000d1a:	601a      	str	r2, [r3, #0]
 8000d1c:	605a      	str	r2, [r3, #4]
 8000d1e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000d20:	4b31      	ldr	r3, [pc, #196]	@ (8000de8 <MX_SPI1_Init+0xd8>)
 8000d22:	4a32      	ldr	r2, [pc, #200]	@ (8000dec <MX_SPI1_Init+0xdc>)
 8000d24:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000d26:	4b30      	ldr	r3, [pc, #192]	@ (8000de8 <MX_SPI1_Init+0xd8>)
 8000d28:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000d2c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000d2e:	4b2e      	ldr	r3, [pc, #184]	@ (8000de8 <MX_SPI1_Init+0xd8>)
 8000d30:	2200      	movs	r2, #0
 8000d32:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000d34:	4b2c      	ldr	r3, [pc, #176]	@ (8000de8 <MX_SPI1_Init+0xd8>)
 8000d36:	2207      	movs	r2, #7
 8000d38:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000d3a:	4b2b      	ldr	r3, [pc, #172]	@ (8000de8 <MX_SPI1_Init+0xd8>)
 8000d3c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8000d40:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000d42:	4b29      	ldr	r3, [pc, #164]	@ (8000de8 <MX_SPI1_Init+0xd8>)
 8000d44:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8000d48:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000d4a:	4b27      	ldr	r3, [pc, #156]	@ (8000de8 <MX_SPI1_Init+0xd8>)
 8000d4c:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8000d50:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000d52:	4b25      	ldr	r3, [pc, #148]	@ (8000de8 <MX_SPI1_Init+0xd8>)
 8000d54:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8000d58:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000d5a:	4b23      	ldr	r3, [pc, #140]	@ (8000de8 <MX_SPI1_Init+0xd8>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000d60:	4b21      	ldr	r3, [pc, #132]	@ (8000de8 <MX_SPI1_Init+0xd8>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000d66:	4b20      	ldr	r3, [pc, #128]	@ (8000de8 <MX_SPI1_Init+0xd8>)
 8000d68:	2200      	movs	r2, #0
 8000d6a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x7;
 8000d6c:	4b1e      	ldr	r3, [pc, #120]	@ (8000de8 <MX_SPI1_Init+0xd8>)
 8000d6e:	2207      	movs	r2, #7
 8000d70:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000d72:	4b1d      	ldr	r3, [pc, #116]	@ (8000de8 <MX_SPI1_Init+0xd8>)
 8000d74:	2200      	movs	r2, #0
 8000d76:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000d78:	4b1b      	ldr	r3, [pc, #108]	@ (8000de8 <MX_SPI1_Init+0xd8>)
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000d7e:	4b1a      	ldr	r3, [pc, #104]	@ (8000de8 <MX_SPI1_Init+0xd8>)
 8000d80:	2200      	movs	r2, #0
 8000d82:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000d84:	4b18      	ldr	r3, [pc, #96]	@ (8000de8 <MX_SPI1_Init+0xd8>)
 8000d86:	2200      	movs	r2, #0
 8000d88:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000d8a:	4b17      	ldr	r3, [pc, #92]	@ (8000de8 <MX_SPI1_Init+0xd8>)
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000d90:	4b15      	ldr	r3, [pc, #84]	@ (8000de8 <MX_SPI1_Init+0xd8>)
 8000d92:	2200      	movs	r2, #0
 8000d94:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000d96:	4b14      	ldr	r3, [pc, #80]	@ (8000de8 <MX_SPI1_Init+0xd8>)
 8000d98:	2200      	movs	r2, #0
 8000d9a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000d9c:	4b12      	ldr	r3, [pc, #72]	@ (8000de8 <MX_SPI1_Init+0xd8>)
 8000d9e:	2200      	movs	r2, #0
 8000da0:	659a      	str	r2, [r3, #88]	@ 0x58
  hspi1.Init.ReadyMasterManagement = SPI_RDY_MASTER_MANAGEMENT_INTERNALLY;
 8000da2:	4b11      	ldr	r3, [pc, #68]	@ (8000de8 <MX_SPI1_Init+0xd8>)
 8000da4:	2200      	movs	r2, #0
 8000da6:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi1.Init.ReadyPolarity = SPI_RDY_POLARITY_HIGH;
 8000da8:	4b0f      	ldr	r3, [pc, #60]	@ (8000de8 <MX_SPI1_Init+0xd8>)
 8000daa:	2200      	movs	r2, #0
 8000dac:	661a      	str	r2, [r3, #96]	@ 0x60
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000dae:	480e      	ldr	r0, [pc, #56]	@ (8000de8 <MX_SPI1_Init+0xd8>)
 8000db0:	f006 ff16 	bl	8007be0 <HAL_SPI_Init>
 8000db4:	4603      	mov	r3, r0
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d001      	beq.n	8000dbe <MX_SPI1_Init+0xae>
  {
    Error_Handler();
 8000dba:	f7ff ffa3 	bl	8000d04 <Error_Handler>
  }
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerState = SPI_AUTO_MODE_DISABLE;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	607b      	str	r3, [r7, #4]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerSelection = SPI_GRP1_GPDMA_CH0_TCF_TRG;
 8000dc2:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000dc6:	60bb      	str	r3, [r7, #8]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerPolarity = SPI_TRIG_POLARITY_RISING;
 8000dc8:	2300      	movs	r3, #0
 8000dca:	60fb      	str	r3, [r7, #12]
  if (HAL_SPIEx_SetConfigAutonomousMode(&hspi1, &HAL_SPI_AutonomousMode_Cfg_Struct) != HAL_OK)
 8000dcc:	1d3b      	adds	r3, r7, #4
 8000dce:	4619      	mov	r1, r3
 8000dd0:	4805      	ldr	r0, [pc, #20]	@ (8000de8 <MX_SPI1_Init+0xd8>)
 8000dd2:	f007 fd38 	bl	8008846 <HAL_SPIEx_SetConfigAutonomousMode>
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d001      	beq.n	8000de0 <MX_SPI1_Init+0xd0>
  {
    Error_Handler();
 8000ddc:	f7ff ff92 	bl	8000d04 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000de0:	bf00      	nop
 8000de2:	3710      	adds	r7, #16
 8000de4:	46bd      	mov	sp, r7
 8000de6:	bd80      	pop	{r7, pc}
 8000de8:	20000120 	.word	0x20000120
 8000dec:	40013000 	.word	0x40013000

08000df0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b0ba      	sub	sp, #232	@ 0xe8
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000df8:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	601a      	str	r2, [r3, #0]
 8000e00:	605a      	str	r2, [r3, #4]
 8000e02:	609a      	str	r2, [r3, #8]
 8000e04:	60da      	str	r2, [r3, #12]
 8000e06:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e08:	f107 0310 	add.w	r3, r7, #16
 8000e0c:	22c0      	movs	r2, #192	@ 0xc0
 8000e0e:	2100      	movs	r1, #0
 8000e10:	4618      	mov	r0, r3
 8000e12:	f008 fd57 	bl	80098c4 <memset>
  if(spiHandle->Instance==SPI1)
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	4a2b      	ldr	r2, [pc, #172]	@ (8000ec8 <HAL_SPI_MspInit+0xd8>)
 8000e1c:	4293      	cmp	r3, r2
 8000e1e:	d14e      	bne.n	8000ebe <HAL_SPI_MspInit+0xce>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8000e20:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8000e24:	f04f 0300 	mov.w	r3, #0
 8000e28:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.Spi1ClockSelection = RCC_SPI1CLKSOURCE_SYSCLK;
 8000e2c:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8000e30:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e34:	f107 0310 	add.w	r3, r7, #16
 8000e38:	4618      	mov	r0, r3
 8000e3a:	f004 fa39 	bl	80052b0 <HAL_RCCEx_PeriphCLKConfig>
 8000e3e:	4603      	mov	r3, r0
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d001      	beq.n	8000e48 <HAL_SPI_MspInit+0x58>
    {
      Error_Handler();
 8000e44:	f7ff ff5e 	bl	8000d04 <Error_Handler>
    }

    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000e48:	4b20      	ldr	r3, [pc, #128]	@ (8000ecc <HAL_SPI_MspInit+0xdc>)
 8000e4a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8000e4e:	4a1f      	ldr	r2, [pc, #124]	@ (8000ecc <HAL_SPI_MspInit+0xdc>)
 8000e50:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000e54:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8000e58:	4b1c      	ldr	r3, [pc, #112]	@ (8000ecc <HAL_SPI_MspInit+0xdc>)
 8000e5a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8000e5e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000e62:	60fb      	str	r3, [r7, #12]
 8000e64:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e66:	4b19      	ldr	r3, [pc, #100]	@ (8000ecc <HAL_SPI_MspInit+0xdc>)
 8000e68:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000e6c:	4a17      	ldr	r2, [pc, #92]	@ (8000ecc <HAL_SPI_MspInit+0xdc>)
 8000e6e:	f043 0301 	orr.w	r3, r3, #1
 8000e72:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000e76:	4b15      	ldr	r3, [pc, #84]	@ (8000ecc <HAL_SPI_MspInit+0xdc>)
 8000e78:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000e7c:	f003 0301 	and.w	r3, r3, #1
 8000e80:	60bb      	str	r3, [r7, #8]
 8000e82:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000e84:	23e0      	movs	r3, #224	@ 0xe0
 8000e86:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e8a:	2302      	movs	r3, #2
 8000e8c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e90:	2300      	movs	r3, #0
 8000e92:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e96:	2300      	movs	r3, #0
 8000e98:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000e9c:	2305      	movs	r3, #5
 8000e9e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ea2:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000ea6:	4619      	mov	r1, r3
 8000ea8:	4809      	ldr	r0, [pc, #36]	@ (8000ed0 <HAL_SPI_MspInit+0xe0>)
 8000eaa:	f001 f8fb 	bl	80020a4 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8000eae:	2200      	movs	r2, #0
 8000eb0:	2100      	movs	r1, #0
 8000eb2:	203b      	movs	r0, #59	@ 0x3b
 8000eb4:	f000 ffa8 	bl	8001e08 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8000eb8:	203b      	movs	r0, #59	@ 0x3b
 8000eba:	f000 ffbf 	bl	8001e3c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000ebe:	bf00      	nop
 8000ec0:	37e8      	adds	r7, #232	@ 0xe8
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	bd80      	pop	{r7, pc}
 8000ec6:	bf00      	nop
 8000ec8:	40013000 	.word	0x40013000
 8000ecc:	46020c00 	.word	0x46020c00
 8000ed0:	42020000 	.word	0x42020000

08000ed4 <ST7789_Select>:

// Global SPI handle pointer
SPI_HandleTypeDef *hspi_st7789;

// Internal functions
static void ST7789_Select() {
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ST7789_CS_GPIO_Port, ST7789_CS_Pin, GPIO_PIN_RESET);
 8000ed8:	2200      	movs	r2, #0
 8000eda:	2110      	movs	r1, #16
 8000edc:	4802      	ldr	r0, [pc, #8]	@ (8000ee8 <ST7789_Select+0x14>)
 8000ede:	f001 fac1 	bl	8002464 <HAL_GPIO_WritePin>
}
 8000ee2:	bf00      	nop
 8000ee4:	bd80      	pop	{r7, pc}
 8000ee6:	bf00      	nop
 8000ee8:	42020000 	.word	0x42020000

08000eec <ST7789_Unselect>:

static void ST7789_Unselect() {
 8000eec:	b580      	push	{r7, lr}
 8000eee:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ST7789_CS_GPIO_Port, ST7789_CS_Pin, GPIO_PIN_SET);
 8000ef0:	2201      	movs	r2, #1
 8000ef2:	2110      	movs	r1, #16
 8000ef4:	4802      	ldr	r0, [pc, #8]	@ (8000f00 <ST7789_Unselect+0x14>)
 8000ef6:	f001 fab5 	bl	8002464 <HAL_GPIO_WritePin>
}
 8000efa:	bf00      	nop
 8000efc:	bd80      	pop	{r7, pc}
 8000efe:	bf00      	nop
 8000f00:	42020000 	.word	0x42020000

08000f04 <ST7789_WriteCommand>:

void ST7789_WriteCommand(uint8_t cmd) {
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b082      	sub	sp, #8
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	71fb      	strb	r3, [r7, #7]
    ST7789_Select();
 8000f0e:	f7ff ffe1 	bl	8000ed4 <ST7789_Select>
    HAL_GPIO_WritePin(ST7789_DC_GPIO_Port, ST7789_DC_Pin, GPIO_PIN_RESET); // Command mode
 8000f12:	2200      	movs	r2, #0
 8000f14:	2101      	movs	r1, #1
 8000f16:	4808      	ldr	r0, [pc, #32]	@ (8000f38 <ST7789_WriteCommand+0x34>)
 8000f18:	f001 faa4 	bl	8002464 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(hspi_st7789, &cmd, 1, HAL_MAX_DELAY);
 8000f1c:	4b07      	ldr	r3, [pc, #28]	@ (8000f3c <ST7789_WriteCommand+0x38>)
 8000f1e:	6818      	ldr	r0, [r3, #0]
 8000f20:	1df9      	adds	r1, r7, #7
 8000f22:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000f26:	2201      	movs	r2, #1
 8000f28:	f006 ff70 	bl	8007e0c <HAL_SPI_Transmit>
    ST7789_Unselect();
 8000f2c:	f7ff ffde 	bl	8000eec <ST7789_Unselect>
}
 8000f30:	bf00      	nop
 8000f32:	3708      	adds	r7, #8
 8000f34:	46bd      	mov	sp, r7
 8000f36:	bd80      	pop	{r7, pc}
 8000f38:	42020400 	.word	0x42020400
 8000f3c:	200001b0 	.word	0x200001b0

08000f40 <ST7789_WriteData>:

void ST7789_WriteData(uint8_t *buff, size_t buff_size) {
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b082      	sub	sp, #8
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
 8000f48:	6039      	str	r1, [r7, #0]
    ST7789_Select();
 8000f4a:	f7ff ffc3 	bl	8000ed4 <ST7789_Select>
    HAL_GPIO_WritePin(ST7789_DC_GPIO_Port, ST7789_DC_Pin, GPIO_PIN_SET); // Data mode
 8000f4e:	2201      	movs	r2, #1
 8000f50:	2101      	movs	r1, #1
 8000f52:	4809      	ldr	r0, [pc, #36]	@ (8000f78 <ST7789_WriteData+0x38>)
 8000f54:	f001 fa86 	bl	8002464 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(hspi_st7789, buff, buff_size, HAL_MAX_DELAY);
 8000f58:	4b08      	ldr	r3, [pc, #32]	@ (8000f7c <ST7789_WriteData+0x3c>)
 8000f5a:	6818      	ldr	r0, [r3, #0]
 8000f5c:	683b      	ldr	r3, [r7, #0]
 8000f5e:	b29a      	uxth	r2, r3
 8000f60:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000f64:	6879      	ldr	r1, [r7, #4]
 8000f66:	f006 ff51 	bl	8007e0c <HAL_SPI_Transmit>
    ST7789_Unselect();
 8000f6a:	f7ff ffbf 	bl	8000eec <ST7789_Unselect>
}
 8000f6e:	bf00      	nop
 8000f70:	3708      	adds	r7, #8
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bd80      	pop	{r7, pc}
 8000f76:	bf00      	nop
 8000f78:	42020400 	.word	0x42020400
 8000f7c:	200001b0 	.word	0x200001b0

08000f80 <ST7789_SetAddressWindow>:

void ST7789_SetAddressWindow(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1) {
 8000f80:	b590      	push	{r4, r7, lr}
 8000f82:	b085      	sub	sp, #20
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	4604      	mov	r4, r0
 8000f88:	4608      	mov	r0, r1
 8000f8a:	4611      	mov	r1, r2
 8000f8c:	461a      	mov	r2, r3
 8000f8e:	4623      	mov	r3, r4
 8000f90:	80fb      	strh	r3, [r7, #6]
 8000f92:	4603      	mov	r3, r0
 8000f94:	80bb      	strh	r3, [r7, #4]
 8000f96:	460b      	mov	r3, r1
 8000f98:	807b      	strh	r3, [r7, #2]
 8000f9a:	4613      	mov	r3, r2
 8000f9c:	803b      	strh	r3, [r7, #0]

	// --- THIS IS THE KEY MODIFICATION ---
	// For Waveshare 1.69inch 170x320, a common X-offset is 35 pixels.
	// This shifts our drawing origin to the correct visible area on the panel.
	uint16_t y_hardware_offset = 20; // Start with 35. Some panels use 50.
 8000f9e:	2314      	movs	r3, #20
 8000fa0:	81fb      	strh	r3, [r7, #14]

	y0 += y_hardware_offset;
 8000fa2:	88ba      	ldrh	r2, [r7, #4]
 8000fa4:	89fb      	ldrh	r3, [r7, #14]
 8000fa6:	4413      	add	r3, r2
 8000fa8:	80bb      	strh	r3, [r7, #4]
	y1 += y_hardware_offset;
 8000faa:	883a      	ldrh	r2, [r7, #0]
 8000fac:	89fb      	ldrh	r3, [r7, #14]
 8000fae:	4413      	add	r3, r2
 8000fb0:	803b      	strh	r3, [r7, #0]
	// --- END OF KEY MODIFICATION ---

    uint8_t data[4];

    // Column Address Set (CASET)
    ST7789_WriteCommand(ST7789_CASET);
 8000fb2:	202a      	movs	r0, #42	@ 0x2a
 8000fb4:	f7ff ffa6 	bl	8000f04 <ST7789_WriteCommand>
    data[0] = (x0 >> 8) & 0xFF;
 8000fb8:	88fb      	ldrh	r3, [r7, #6]
 8000fba:	0a1b      	lsrs	r3, r3, #8
 8000fbc:	b29b      	uxth	r3, r3
 8000fbe:	b2db      	uxtb	r3, r3
 8000fc0:	723b      	strb	r3, [r7, #8]
    data[1] = x0 & 0xFF;
 8000fc2:	88fb      	ldrh	r3, [r7, #6]
 8000fc4:	b2db      	uxtb	r3, r3
 8000fc6:	727b      	strb	r3, [r7, #9]
    data[2] = (x1 >> 8) & 0xFF;
 8000fc8:	887b      	ldrh	r3, [r7, #2]
 8000fca:	0a1b      	lsrs	r3, r3, #8
 8000fcc:	b29b      	uxth	r3, r3
 8000fce:	b2db      	uxtb	r3, r3
 8000fd0:	72bb      	strb	r3, [r7, #10]
    data[3] = x1 & 0xFF;
 8000fd2:	887b      	ldrh	r3, [r7, #2]
 8000fd4:	b2db      	uxtb	r3, r3
 8000fd6:	72fb      	strb	r3, [r7, #11]
    ST7789_WriteData(data, 4);
 8000fd8:	f107 0308 	add.w	r3, r7, #8
 8000fdc:	2104      	movs	r1, #4
 8000fde:	4618      	mov	r0, r3
 8000fe0:	f7ff ffae 	bl	8000f40 <ST7789_WriteData>

    // Row Address Set (RASET)
    ST7789_WriteCommand(ST7789_RASET);
 8000fe4:	202b      	movs	r0, #43	@ 0x2b
 8000fe6:	f7ff ff8d 	bl	8000f04 <ST7789_WriteCommand>
    data[0] = (y0 >> 8) & 0xFF;
 8000fea:	88bb      	ldrh	r3, [r7, #4]
 8000fec:	0a1b      	lsrs	r3, r3, #8
 8000fee:	b29b      	uxth	r3, r3
 8000ff0:	b2db      	uxtb	r3, r3
 8000ff2:	723b      	strb	r3, [r7, #8]
    data[1] = y0 & 0xFF;
 8000ff4:	88bb      	ldrh	r3, [r7, #4]
 8000ff6:	b2db      	uxtb	r3, r3
 8000ff8:	727b      	strb	r3, [r7, #9]
    data[2] = (y1 >> 8) & 0xFF;
 8000ffa:	883b      	ldrh	r3, [r7, #0]
 8000ffc:	0a1b      	lsrs	r3, r3, #8
 8000ffe:	b29b      	uxth	r3, r3
 8001000:	b2db      	uxtb	r3, r3
 8001002:	72bb      	strb	r3, [r7, #10]
    data[3] = y1 & 0xFF;
 8001004:	883b      	ldrh	r3, [r7, #0]
 8001006:	b2db      	uxtb	r3, r3
 8001008:	72fb      	strb	r3, [r7, #11]
    ST7789_WriteData(data, 4);
 800100a:	f107 0308 	add.w	r3, r7, #8
 800100e:	2104      	movs	r1, #4
 8001010:	4618      	mov	r0, r3
 8001012:	f7ff ff95 	bl	8000f40 <ST7789_WriteData>

    ST7789_WriteCommand(ST7789_RAMWR); // Memory Write
 8001016:	202c      	movs	r0, #44	@ 0x2c
 8001018:	f7ff ff74 	bl	8000f04 <ST7789_WriteCommand>
}
 800101c:	bf00      	nop
 800101e:	3714      	adds	r7, #20
 8001020:	46bd      	mov	sp, r7
 8001022:	bd90      	pop	{r4, r7, pc}

08001024 <ST7789_Init>:

void ST7789_Init(SPI_HandleTypeDef *hspi) {
 8001024:	b580      	push	{r7, lr}
 8001026:	b084      	sub	sp, #16
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
    hspi_st7789 = hspi;
 800102c:	4a30      	ldr	r2, [pc, #192]	@ (80010f0 <ST7789_Init+0xcc>)
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	6013      	str	r3, [r2, #0]

    // Hardware Reset
    HAL_GPIO_WritePin(ST7789_RST_GPIO_Port, ST7789_RST_Pin, GPIO_PIN_SET);
 8001032:	2201      	movs	r2, #1
 8001034:	2101      	movs	r1, #1
 8001036:	482f      	ldr	r0, [pc, #188]	@ (80010f4 <ST7789_Init+0xd0>)
 8001038:	f001 fa14 	bl	8002464 <HAL_GPIO_WritePin>
    HAL_Delay(10);
 800103c:	200a      	movs	r0, #10
 800103e:	f000 fe07 	bl	8001c50 <HAL_Delay>
    HAL_GPIO_WritePin(ST7789_RST_GPIO_Port, ST7789_RST_Pin, GPIO_PIN_RESET);
 8001042:	2200      	movs	r2, #0
 8001044:	2101      	movs	r1, #1
 8001046:	482b      	ldr	r0, [pc, #172]	@ (80010f4 <ST7789_Init+0xd0>)
 8001048:	f001 fa0c 	bl	8002464 <HAL_GPIO_WritePin>
    HAL_Delay(10);
 800104c:	200a      	movs	r0, #10
 800104e:	f000 fdff 	bl	8001c50 <HAL_Delay>
    HAL_GPIO_WritePin(ST7789_RST_GPIO_Port, ST7789_RST_Pin, GPIO_PIN_SET);
 8001052:	2201      	movs	r2, #1
 8001054:	2101      	movs	r1, #1
 8001056:	4827      	ldr	r0, [pc, #156]	@ (80010f4 <ST7789_Init+0xd0>)
 8001058:	f001 fa04 	bl	8002464 <HAL_GPIO_WritePin>
    HAL_Delay(120); // Wait for reset to complete
 800105c:	2078      	movs	r0, #120	@ 0x78
 800105e:	f000 fdf7 	bl	8001c50 <HAL_Delay>

    // Backlight ON
    ST7789_SetBacklight(1);
 8001062:	2001      	movs	r0, #1
 8001064:	f000 fa12 	bl	800148c <ST7789_SetBacklight>
    HAL_Delay(10);
 8001068:	200a      	movs	r0, #10
 800106a:	f000 fdf1 	bl	8001c50 <HAL_Delay>

    // Initial sequence for ST7789V2 (common for 1.69inch)
    ST7789_WriteCommand(ST7789_SWRESET); // Software reset
 800106e:	2001      	movs	r0, #1
 8001070:	f7ff ff48 	bl	8000f04 <ST7789_WriteCommand>
    HAL_Delay(150);
 8001074:	2096      	movs	r0, #150	@ 0x96
 8001076:	f000 fdeb 	bl	8001c50 <HAL_Delay>

    ST7789_WriteCommand(ST7789_SLPOUT);  // Exit sleep
 800107a:	2011      	movs	r0, #17
 800107c:	f7ff ff42 	bl	8000f04 <ST7789_WriteCommand>
    HAL_Delay(10);
 8001080:	200a      	movs	r0, #10
 8001082:	f000 fde5 	bl	8001c50 <HAL_Delay>

    ST7789_WriteCommand(ST7789_COLMOD);  // Set color mode
 8001086:	203a      	movs	r0, #58	@ 0x3a
 8001088:	f7ff ff3c 	bl	8000f04 <ST7789_WriteCommand>
    uint8_t data_colmod[] = {0x05};      // 16-bit color (RGB565)
 800108c:	2305      	movs	r3, #5
 800108e:	733b      	strb	r3, [r7, #12]
    ST7789_WriteData(data_colmod, 1);
 8001090:	f107 030c 	add.w	r3, r7, #12
 8001094:	2101      	movs	r1, #1
 8001096:	4618      	mov	r0, r3
 8001098:	f7ff ff52 	bl	8000f40 <ST7789_WriteData>
    HAL_Delay(10);
 800109c:	200a      	movs	r0, #10
 800109e:	f000 fdd7 	bl	8001c50 <HAL_Delay>

    ST7789_WriteCommand(ST7789_MADCTL);  // Memory Data Access Control
 80010a2:	2036      	movs	r0, #54	@ 0x36
 80010a4:	f7ff ff2e 	bl	8000f04 <ST7789_WriteCommand>
    uint8_t data_madctl[] = {0x00};      // Default: MX=0, MY=0, MV=0, ML=0, RGB=0 (Portrait, top-to-bottom, left-to-right)
 80010a8:	2300      	movs	r3, #0
 80010aa:	723b      	strb	r3, [r7, #8]
    // 0x60: MV + MX (90deg landscape)
    // 0xA0: MY + MV (270deg landscape)
    // 0xC0: MY + MX + MV + ML (Portrait, 180deg)
    // For 1.69" often 0x00 or 0x60 (landscape)
    // Let's use 0x00 for initial portrait and add rotation function.
    ST7789_WriteData(data_madctl, 1);
 80010ac:	f107 0308 	add.w	r3, r7, #8
 80010b0:	2101      	movs	r1, #1
 80010b2:	4618      	mov	r0, r3
 80010b4:	f7ff ff44 	bl	8000f40 <ST7789_WriteData>
    HAL_Delay(10);
 80010b8:	200a      	movs	r0, #10
 80010ba:	f000 fdc9 	bl	8001c50 <HAL_Delay>
    //
    // ST7789_WriteCommand(0xB7); // Gate Control
    // uint8_t data_gate[] = {0x35};
    // ST7789_WriteData(data_gate, 1);

    ST7789_WriteCommand(ST7789_INVON);   // Inversion ON
 80010be:	2021      	movs	r0, #33	@ 0x21
 80010c0:	f7ff ff20 	bl	8000f04 <ST7789_WriteCommand>
    HAL_Delay(10);
 80010c4:	200a      	movs	r0, #10
 80010c6:	f000 fdc3 	bl	8001c50 <HAL_Delay>

    ST7789_WriteCommand(ST7789_NORON);   // Normal display mode
 80010ca:	2013      	movs	r0, #19
 80010cc:	f7ff ff1a 	bl	8000f04 <ST7789_WriteCommand>
    HAL_Delay(10);
 80010d0:	200a      	movs	r0, #10
 80010d2:	f000 fdbd 	bl	8001c50 <HAL_Delay>

    ST7789_WriteCommand(ST7789_DISPON);  // Display ON
 80010d6:	2029      	movs	r0, #41	@ 0x29
 80010d8:	f7ff ff14 	bl	8000f04 <ST7789_WriteCommand>
    HAL_Delay(120);
 80010dc:	2078      	movs	r0, #120	@ 0x78
 80010de:	f000 fdb7 	bl	8001c50 <HAL_Delay>

    // Initial fill to black
    ST7789_FillScreen(ST7789_BLACK);
 80010e2:	2000      	movs	r0, #0
 80010e4:	f000 f808 	bl	80010f8 <ST7789_FillScreen>
}
 80010e8:	bf00      	nop
 80010ea:	3710      	adds	r7, #16
 80010ec:	46bd      	mov	sp, r7
 80010ee:	bd80      	pop	{r7, pc}
 80010f0:	200001b0 	.word	0x200001b0
 80010f4:	42020800 	.word	0x42020800

080010f8 <ST7789_FillScreen>:

void ST7789_FillScreen(uint16_t color) {
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b084      	sub	sp, #16
 80010fc:	af02      	add	r7, sp, #8
 80010fe:	4603      	mov	r3, r0
 8001100:	80fb      	strh	r3, [r7, #6]
    ST7789_FillRectangle(0, 0, ST7789_WIDTH, ST7789_HEIGHT, color);
 8001102:	88fb      	ldrh	r3, [r7, #6]
 8001104:	9300      	str	r3, [sp, #0]
 8001106:	f44f 738c 	mov.w	r3, #280	@ 0x118
 800110a:	22f0      	movs	r2, #240	@ 0xf0
 800110c:	2100      	movs	r1, #0
 800110e:	2000      	movs	r0, #0
 8001110:	f000 f83c 	bl	800118c <ST7789_FillRectangle>
}
 8001114:	bf00      	nop
 8001116:	3708      	adds	r7, #8
 8001118:	46bd      	mov	sp, r7
 800111a:	bd80      	pop	{r7, pc}

0800111c <ST7789_DrawPixel>:

void ST7789_DrawPixel(int16_t x, int16_t y, uint16_t color) {
 800111c:	b580      	push	{r7, lr}
 800111e:	b084      	sub	sp, #16
 8001120:	af00      	add	r7, sp, #0
 8001122:	4603      	mov	r3, r0
 8001124:	80fb      	strh	r3, [r7, #6]
 8001126:	460b      	mov	r3, r1
 8001128:	80bb      	strh	r3, [r7, #4]
 800112a:	4613      	mov	r3, r2
 800112c:	807b      	strh	r3, [r7, #2]
    if ((x < 0) || (x >= ST7789_WIDTH) || (y < 0) || (y >= ST7789_HEIGHT)) return;
 800112e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001132:	2b00      	cmp	r3, #0
 8001134:	db25      	blt.n	8001182 <ST7789_DrawPixel+0x66>
 8001136:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800113a:	2bef      	cmp	r3, #239	@ 0xef
 800113c:	dc21      	bgt.n	8001182 <ST7789_DrawPixel+0x66>
 800113e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001142:	2b00      	cmp	r3, #0
 8001144:	db1d      	blt.n	8001182 <ST7789_DrawPixel+0x66>
 8001146:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800114a:	f5b3 7f8c 	cmp.w	r3, #280	@ 0x118
 800114e:	da18      	bge.n	8001182 <ST7789_DrawPixel+0x66>
    ST7789_SetAddressWindow(x, y, x + 1, y + 1);
 8001150:	88f8      	ldrh	r0, [r7, #6]
 8001152:	88b9      	ldrh	r1, [r7, #4]
 8001154:	88fb      	ldrh	r3, [r7, #6]
 8001156:	3301      	adds	r3, #1
 8001158:	b29a      	uxth	r2, r3
 800115a:	88bb      	ldrh	r3, [r7, #4]
 800115c:	3301      	adds	r3, #1
 800115e:	b29b      	uxth	r3, r3
 8001160:	f7ff ff0e 	bl	8000f80 <ST7789_SetAddressWindow>
    uint8_t data[2];
    data[0] = (uint8_t)(color >> 8);
 8001164:	887b      	ldrh	r3, [r7, #2]
 8001166:	0a1b      	lsrs	r3, r3, #8
 8001168:	b29b      	uxth	r3, r3
 800116a:	b2db      	uxtb	r3, r3
 800116c:	733b      	strb	r3, [r7, #12]
    data[1] = (uint8_t)(color & 0xFF);
 800116e:	887b      	ldrh	r3, [r7, #2]
 8001170:	b2db      	uxtb	r3, r3
 8001172:	737b      	strb	r3, [r7, #13]
    ST7789_WriteData(data, 2);
 8001174:	f107 030c 	add.w	r3, r7, #12
 8001178:	2102      	movs	r1, #2
 800117a:	4618      	mov	r0, r3
 800117c:	f7ff fee0 	bl	8000f40 <ST7789_WriteData>
 8001180:	e000      	b.n	8001184 <ST7789_DrawPixel+0x68>
    if ((x < 0) || (x >= ST7789_WIDTH) || (y < 0) || (y >= ST7789_HEIGHT)) return;
 8001182:	bf00      	nop
}
 8001184:	3710      	adds	r7, #16
 8001186:	46bd      	mov	sp, r7
 8001188:	bd80      	pop	{r7, pc}
	...

0800118c <ST7789_FillRectangle>:

void ST7789_FillRectangle(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color) {
 800118c:	b590      	push	{r4, r7, lr}
 800118e:	b085      	sub	sp, #20
 8001190:	af00      	add	r7, sp, #0
 8001192:	4604      	mov	r4, r0
 8001194:	4608      	mov	r0, r1
 8001196:	4611      	mov	r1, r2
 8001198:	461a      	mov	r2, r3
 800119a:	4623      	mov	r3, r4
 800119c:	80fb      	strh	r3, [r7, #6]
 800119e:	4603      	mov	r3, r0
 80011a0:	80bb      	strh	r3, [r7, #4]
 80011a2:	460b      	mov	r3, r1
 80011a4:	807b      	strh	r3, [r7, #2]
 80011a6:	4613      	mov	r3, r2
 80011a8:	803b      	strh	r3, [r7, #0]
    if ((x >= ST7789_WIDTH) || (y >= ST7789_HEIGHT)) return;
 80011aa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80011ae:	2bef      	cmp	r3, #239	@ 0xef
 80011b0:	dc5a      	bgt.n	8001268 <ST7789_FillRectangle+0xdc>
 80011b2:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80011b6:	f5b3 7f8c 	cmp.w	r3, #280	@ 0x118
 80011ba:	da55      	bge.n	8001268 <ST7789_FillRectangle+0xdc>
    if ((x + w - 1) >= ST7789_WIDTH) w = ST7789_WIDTH - x;
 80011bc:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80011c0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80011c4:	4413      	add	r3, r2
 80011c6:	2bf0      	cmp	r3, #240	@ 0xf0
 80011c8:	dd04      	ble.n	80011d4 <ST7789_FillRectangle+0x48>
 80011ca:	88fb      	ldrh	r3, [r7, #6]
 80011cc:	f1c3 03f0 	rsb	r3, r3, #240	@ 0xf0
 80011d0:	b29b      	uxth	r3, r3
 80011d2:	807b      	strh	r3, [r7, #2]
    if ((y + h - 1) >= ST7789_HEIGHT) h = ST7789_HEIGHT - y;
 80011d4:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80011d8:	f9b7 3000 	ldrsh.w	r3, [r7]
 80011dc:	4413      	add	r3, r2
 80011de:	f5b3 7f8c 	cmp.w	r3, #280	@ 0x118
 80011e2:	dd04      	ble.n	80011ee <ST7789_FillRectangle+0x62>
 80011e4:	88bb      	ldrh	r3, [r7, #4]
 80011e6:	f5c3 738c 	rsb	r3, r3, #280	@ 0x118
 80011ea:	b29b      	uxth	r3, r3
 80011ec:	803b      	strh	r3, [r7, #0]

    ST7789_SetAddressWindow(x, y, x + w - 1, y + h - 1);
 80011ee:	88f8      	ldrh	r0, [r7, #6]
 80011f0:	88b9      	ldrh	r1, [r7, #4]
 80011f2:	88fa      	ldrh	r2, [r7, #6]
 80011f4:	887b      	ldrh	r3, [r7, #2]
 80011f6:	4413      	add	r3, r2
 80011f8:	b29b      	uxth	r3, r3
 80011fa:	3b01      	subs	r3, #1
 80011fc:	b29c      	uxth	r4, r3
 80011fe:	88ba      	ldrh	r2, [r7, #4]
 8001200:	883b      	ldrh	r3, [r7, #0]
 8001202:	4413      	add	r3, r2
 8001204:	b29b      	uxth	r3, r3
 8001206:	3b01      	subs	r3, #1
 8001208:	b29b      	uxth	r3, r3
 800120a:	4622      	mov	r2, r4
 800120c:	f7ff feb8 	bl	8000f80 <ST7789_SetAddressWindow>

    uint8_t data[2];
    data[0] = (uint8_t)(color >> 8);
 8001210:	8c3b      	ldrh	r3, [r7, #32]
 8001212:	0a1b      	lsrs	r3, r3, #8
 8001214:	b29b      	uxth	r3, r3
 8001216:	b2db      	uxtb	r3, r3
 8001218:	723b      	strb	r3, [r7, #8]
    data[1] = (uint8_t)(color & 0xFF);
 800121a:	8c3b      	ldrh	r3, [r7, #32]
 800121c:	b2db      	uxtb	r3, r3
 800121e:	727b      	strb	r3, [r7, #9]

    uint32_t i = 0;
 8001220:	2300      	movs	r3, #0
 8001222:	60fb      	str	r3, [r7, #12]
    ST7789_Select();
 8001224:	f7ff fe56 	bl	8000ed4 <ST7789_Select>
    HAL_GPIO_WritePin(ST7789_DC_GPIO_Port, ST7789_DC_Pin, GPIO_PIN_SET); // Data mode
 8001228:	2201      	movs	r2, #1
 800122a:	2101      	movs	r1, #1
 800122c:	4810      	ldr	r0, [pc, #64]	@ (8001270 <ST7789_FillRectangle+0xe4>)
 800122e:	f001 f919 	bl	8002464 <HAL_GPIO_WritePin>

    // Transmit in chunks if the buffer is large, or just directly
    for (i = 0; i < (uint32_t)w * h; i++) {
 8001232:	2300      	movs	r3, #0
 8001234:	60fb      	str	r3, [r7, #12]
 8001236:	e00b      	b.n	8001250 <ST7789_FillRectangle+0xc4>
        HAL_SPI_Transmit(hspi_st7789, data, 2, HAL_MAX_DELAY);
 8001238:	4b0e      	ldr	r3, [pc, #56]	@ (8001274 <ST7789_FillRectangle+0xe8>)
 800123a:	6818      	ldr	r0, [r3, #0]
 800123c:	f107 0108 	add.w	r1, r7, #8
 8001240:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001244:	2202      	movs	r2, #2
 8001246:	f006 fde1 	bl	8007e0c <HAL_SPI_Transmit>
    for (i = 0; i < (uint32_t)w * h; i++) {
 800124a:	68fb      	ldr	r3, [r7, #12]
 800124c:	3301      	adds	r3, #1
 800124e:	60fb      	str	r3, [r7, #12]
 8001250:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001254:	f9b7 2000 	ldrsh.w	r2, [r7]
 8001258:	fb02 f303 	mul.w	r3, r2, r3
 800125c:	68fa      	ldr	r2, [r7, #12]
 800125e:	429a      	cmp	r2, r3
 8001260:	d3ea      	bcc.n	8001238 <ST7789_FillRectangle+0xac>
    }
    ST7789_Unselect();
 8001262:	f7ff fe43 	bl	8000eec <ST7789_Unselect>
 8001266:	e000      	b.n	800126a <ST7789_FillRectangle+0xde>
    if ((x >= ST7789_WIDTH) || (y >= ST7789_HEIGHT)) return;
 8001268:	bf00      	nop
}
 800126a:	3714      	adds	r7, #20
 800126c:	46bd      	mov	sp, r7
 800126e:	bd90      	pop	{r4, r7, pc}
 8001270:	42020400 	.word	0x42020400
 8001274:	200001b0 	.word	0x200001b0

08001278 <ST7789_DrawChar>:
        if (e2 > -dx) { err -= dy; x0 += sx; }
        if (e2 < dy) { err += dx; y0 += sy; }
    }
}

void ST7789_DrawChar(int16_t x, int16_t y, unsigned char c, const FontDef_t *font, uint16_t color, uint16_t bgcolor) {
 8001278:	b580      	push	{r7, lr}
 800127a:	b088      	sub	sp, #32
 800127c:	af00      	add	r7, sp, #0
 800127e:	607b      	str	r3, [r7, #4]
 8001280:	4603      	mov	r3, r0
 8001282:	81fb      	strh	r3, [r7, #14]
 8001284:	460b      	mov	r3, r1
 8001286:	81bb      	strh	r3, [r7, #12]
 8001288:	4613      	mov	r3, r2
 800128a:	72fb      	strb	r3, [r7, #11]
    if ((x >= ST7789_WIDTH) || (y >= ST7789_HEIGHT) ||
 800128c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001290:	2bef      	cmp	r3, #239	@ 0xef
 8001292:	f300 80b6 	bgt.w	8001402 <ST7789_DrawChar+0x18a>
 8001296:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800129a:	f5b3 7f8c 	cmp.w	r3, #280	@ 0x118
 800129e:	f280 80b0 	bge.w	8001402 <ST7789_DrawChar+0x18a>
        ((x + font->width) < 0) || ((y + font->height) < 0))
 80012a2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80012a6:	687a      	ldr	r2, [r7, #4]
 80012a8:	8892      	ldrh	r2, [r2, #4]
 80012aa:	4413      	add	r3, r2
    if ((x >= ST7789_WIDTH) || (y >= ST7789_HEIGHT) ||
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	f2c0 80a8 	blt.w	8001402 <ST7789_DrawChar+0x18a>
        ((x + font->width) < 0) || ((y + font->height) < 0))
 80012b2:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80012b6:	687a      	ldr	r2, [r7, #4]
 80012b8:	88d2      	ldrh	r2, [r2, #6]
 80012ba:	4413      	add	r3, r2
 80012bc:	2b00      	cmp	r3, #0
 80012be:	f2c0 80a0 	blt.w	8001402 <ST7789_DrawChar+0x18a>
        return;

    uint8_t i, j;
    const uint8_t *glyph = &font->data[(c - font->firstChar) * font->width * ((font->height + 7) / 8)];
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	681a      	ldr	r2, [r3, #0]
 80012c6:	7afb      	ldrb	r3, [r7, #11]
 80012c8:	6879      	ldr	r1, [r7, #4]
 80012ca:	8909      	ldrh	r1, [r1, #8]
 80012cc:	1a5b      	subs	r3, r3, r1
 80012ce:	6879      	ldr	r1, [r7, #4]
 80012d0:	8889      	ldrh	r1, [r1, #4]
 80012d2:	fb03 f101 	mul.w	r1, r3, r1
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	88db      	ldrh	r3, [r3, #6]
 80012da:	3307      	adds	r3, #7
 80012dc:	2b00      	cmp	r3, #0
 80012de:	da00      	bge.n	80012e2 <ST7789_DrawChar+0x6a>
 80012e0:	3307      	adds	r3, #7
 80012e2:	10db      	asrs	r3, r3, #3
 80012e4:	fb01 f303 	mul.w	r3, r1, r3
 80012e8:	4413      	add	r3, r2
 80012ea:	61bb      	str	r3, [r7, #24]

    for (i = 0; i < font->width; i++) {
 80012ec:	2300      	movs	r3, #0
 80012ee:	77fb      	strb	r3, [r7, #31]
 80012f0:	e07f      	b.n	80013f2 <ST7789_DrawChar+0x17a>
        uint8_t line_data = 0;
 80012f2:	2300      	movs	r3, #0
 80012f4:	75fb      	strb	r3, [r7, #23]
        for (j = 0; j < font->height; j++) {
 80012f6:	2300      	movs	r3, #0
 80012f8:	77bb      	strb	r3, [r7, #30]
 80012fa:	e071      	b.n	80013e0 <ST7789_DrawChar+0x168>
            if (font->height <= 8) { // 1 byte per column
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	88db      	ldrh	r3, [r3, #6]
 8001300:	2b08      	cmp	r3, #8
 8001302:	d82e      	bhi.n	8001362 <ST7789_DrawChar+0xea>
                line_data = glyph[i];
 8001304:	7ffb      	ldrb	r3, [r7, #31]
 8001306:	69ba      	ldr	r2, [r7, #24]
 8001308:	4413      	add	r3, r2
 800130a:	781b      	ldrb	r3, [r3, #0]
 800130c:	75fb      	strb	r3, [r7, #23]
                if (((line_data >> j) & 0x01) == 0x01) {
 800130e:	7dfa      	ldrb	r2, [r7, #23]
 8001310:	7fbb      	ldrb	r3, [r7, #30]
 8001312:	fa42 f303 	asr.w	r3, r2, r3
 8001316:	f003 0301 	and.w	r3, r3, #1
 800131a:	2b00      	cmp	r3, #0
 800131c:	d010      	beq.n	8001340 <ST7789_DrawChar+0xc8>
                    ST7789_DrawPixel(x + i, y + j, color);
 800131e:	7ffb      	ldrb	r3, [r7, #31]
 8001320:	b29a      	uxth	r2, r3
 8001322:	89fb      	ldrh	r3, [r7, #14]
 8001324:	4413      	add	r3, r2
 8001326:	b29b      	uxth	r3, r3
 8001328:	b218      	sxth	r0, r3
 800132a:	7fbb      	ldrb	r3, [r7, #30]
 800132c:	b29a      	uxth	r2, r3
 800132e:	89bb      	ldrh	r3, [r7, #12]
 8001330:	4413      	add	r3, r2
 8001332:	b29b      	uxth	r3, r3
 8001334:	b21b      	sxth	r3, r3
 8001336:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8001338:	4619      	mov	r1, r3
 800133a:	f7ff feef 	bl	800111c <ST7789_DrawPixel>
 800133e:	e04c      	b.n	80013da <ST7789_DrawChar+0x162>
                } else {
                    ST7789_DrawPixel(x + i, y + j, bgcolor);
 8001340:	7ffb      	ldrb	r3, [r7, #31]
 8001342:	b29a      	uxth	r2, r3
 8001344:	89fb      	ldrh	r3, [r7, #14]
 8001346:	4413      	add	r3, r2
 8001348:	b29b      	uxth	r3, r3
 800134a:	b218      	sxth	r0, r3
 800134c:	7fbb      	ldrb	r3, [r7, #30]
 800134e:	b29a      	uxth	r2, r3
 8001350:	89bb      	ldrh	r3, [r7, #12]
 8001352:	4413      	add	r3, r2
 8001354:	b29b      	uxth	r3, r3
 8001356:	b21b      	sxth	r3, r3
 8001358:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 800135a:	4619      	mov	r1, r3
 800135c:	f7ff fede 	bl	800111c <ST7789_DrawPixel>
 8001360:	e03b      	b.n	80013da <ST7789_DrawChar+0x162>
                }
            } else { // Multiple bytes per column (for taller fonts)
                uint8_t byte_idx = j / 8;
 8001362:	7fbb      	ldrb	r3, [r7, #30]
 8001364:	08db      	lsrs	r3, r3, #3
 8001366:	75bb      	strb	r3, [r7, #22]
                uint8_t bit_idx = j % 8;
 8001368:	7fbb      	ldrb	r3, [r7, #30]
 800136a:	f003 0307 	and.w	r3, r3, #7
 800136e:	757b      	strb	r3, [r7, #21]
                line_data = glyph[i + byte_idx * font->width];
 8001370:	7ffa      	ldrb	r2, [r7, #31]
 8001372:	7dbb      	ldrb	r3, [r7, #22]
 8001374:	6879      	ldr	r1, [r7, #4]
 8001376:	8889      	ldrh	r1, [r1, #4]
 8001378:	fb01 f303 	mul.w	r3, r1, r3
 800137c:	4413      	add	r3, r2
 800137e:	461a      	mov	r2, r3
 8001380:	69bb      	ldr	r3, [r7, #24]
 8001382:	4413      	add	r3, r2
 8001384:	781b      	ldrb	r3, [r3, #0]
 8001386:	75fb      	strb	r3, [r7, #23]
                if (((line_data >> bit_idx) & 0x01) == 0x01) {
 8001388:	7dfa      	ldrb	r2, [r7, #23]
 800138a:	7d7b      	ldrb	r3, [r7, #21]
 800138c:	fa42 f303 	asr.w	r3, r2, r3
 8001390:	f003 0301 	and.w	r3, r3, #1
 8001394:	2b00      	cmp	r3, #0
 8001396:	d010      	beq.n	80013ba <ST7789_DrawChar+0x142>
                    ST7789_DrawPixel(x + i, y + j, color);
 8001398:	7ffb      	ldrb	r3, [r7, #31]
 800139a:	b29a      	uxth	r2, r3
 800139c:	89fb      	ldrh	r3, [r7, #14]
 800139e:	4413      	add	r3, r2
 80013a0:	b29b      	uxth	r3, r3
 80013a2:	b218      	sxth	r0, r3
 80013a4:	7fbb      	ldrb	r3, [r7, #30]
 80013a6:	b29a      	uxth	r2, r3
 80013a8:	89bb      	ldrh	r3, [r7, #12]
 80013aa:	4413      	add	r3, r2
 80013ac:	b29b      	uxth	r3, r3
 80013ae:	b21b      	sxth	r3, r3
 80013b0:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 80013b2:	4619      	mov	r1, r3
 80013b4:	f7ff feb2 	bl	800111c <ST7789_DrawPixel>
 80013b8:	e00f      	b.n	80013da <ST7789_DrawChar+0x162>
                } else {
                    ST7789_DrawPixel(x + i, y + j, bgcolor);
 80013ba:	7ffb      	ldrb	r3, [r7, #31]
 80013bc:	b29a      	uxth	r2, r3
 80013be:	89fb      	ldrh	r3, [r7, #14]
 80013c0:	4413      	add	r3, r2
 80013c2:	b29b      	uxth	r3, r3
 80013c4:	b218      	sxth	r0, r3
 80013c6:	7fbb      	ldrb	r3, [r7, #30]
 80013c8:	b29a      	uxth	r2, r3
 80013ca:	89bb      	ldrh	r3, [r7, #12]
 80013cc:	4413      	add	r3, r2
 80013ce:	b29b      	uxth	r3, r3
 80013d0:	b21b      	sxth	r3, r3
 80013d2:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 80013d4:	4619      	mov	r1, r3
 80013d6:	f7ff fea1 	bl	800111c <ST7789_DrawPixel>
        for (j = 0; j < font->height; j++) {
 80013da:	7fbb      	ldrb	r3, [r7, #30]
 80013dc:	3301      	adds	r3, #1
 80013de:	77bb      	strb	r3, [r7, #30]
 80013e0:	7fbb      	ldrb	r3, [r7, #30]
 80013e2:	b29a      	uxth	r2, r3
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	88db      	ldrh	r3, [r3, #6]
 80013e8:	429a      	cmp	r2, r3
 80013ea:	d387      	bcc.n	80012fc <ST7789_DrawChar+0x84>
    for (i = 0; i < font->width; i++) {
 80013ec:	7ffb      	ldrb	r3, [r7, #31]
 80013ee:	3301      	adds	r3, #1
 80013f0:	77fb      	strb	r3, [r7, #31]
 80013f2:	7ffb      	ldrb	r3, [r7, #31]
 80013f4:	b29a      	uxth	r2, r3
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	889b      	ldrh	r3, [r3, #4]
 80013fa:	429a      	cmp	r2, r3
 80013fc:	f4ff af79 	bcc.w	80012f2 <ST7789_DrawChar+0x7a>
 8001400:	e000      	b.n	8001404 <ST7789_DrawChar+0x18c>
        return;
 8001402:	bf00      	nop
                }
            }
        }
    }
}
 8001404:	3720      	adds	r7, #32
 8001406:	46bd      	mov	sp, r7
 8001408:	bd80      	pop	{r7, pc}

0800140a <ST7789_WriteString>:

void ST7789_WriteString(int16_t x, int16_t y, const char* str, const FontDef_t *font, uint16_t color, uint16_t bgcolor) {
 800140a:	b580      	push	{r7, lr}
 800140c:	b086      	sub	sp, #24
 800140e:	af02      	add	r7, sp, #8
 8001410:	60ba      	str	r2, [r7, #8]
 8001412:	607b      	str	r3, [r7, #4]
 8001414:	4603      	mov	r3, r0
 8001416:	81fb      	strh	r3, [r7, #14]
 8001418:	460b      	mov	r3, r1
 800141a:	81bb      	strh	r3, [r7, #12]
    while (*str) {
 800141c:	e02b      	b.n	8001476 <ST7789_WriteString+0x6c>
        if (x + font->width >= ST7789_WIDTH) { // Wrap text if it exceeds screen width
 800141e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001422:	687a      	ldr	r2, [r7, #4]
 8001424:	8892      	ldrh	r2, [r2, #4]
 8001426:	4413      	add	r3, r2
 8001428:	2bef      	cmp	r3, #239	@ 0xef
 800142a:	dd0f      	ble.n	800144c <ST7789_WriteString+0x42>
            x = 0;
 800142c:	2300      	movs	r3, #0
 800142e:	81fb      	strh	r3, [r7, #14]
            y += font->height;
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	88da      	ldrh	r2, [r3, #6]
 8001434:	89bb      	ldrh	r3, [r7, #12]
 8001436:	4413      	add	r3, r2
 8001438:	b29b      	uxth	r3, r3
 800143a:	81bb      	strh	r3, [r7, #12]
            if (y + font->height >= ST7789_HEIGHT) break; // Don't draw if going off screen
 800143c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001440:	687a      	ldr	r2, [r7, #4]
 8001442:	88d2      	ldrh	r2, [r2, #6]
 8001444:	4413      	add	r3, r2
 8001446:	f5b3 7f8c 	cmp.w	r3, #280	@ 0x118
 800144a:	da19      	bge.n	8001480 <ST7789_WriteString+0x76>
        }
        ST7789_DrawChar(x, y, *str++, font, color, bgcolor);
 800144c:	68bb      	ldr	r3, [r7, #8]
 800144e:	1c5a      	adds	r2, r3, #1
 8001450:	60ba      	str	r2, [r7, #8]
 8001452:	781a      	ldrb	r2, [r3, #0]
 8001454:	f9b7 100c 	ldrsh.w	r1, [r7, #12]
 8001458:	f9b7 000e 	ldrsh.w	r0, [r7, #14]
 800145c:	8bbb      	ldrh	r3, [r7, #28]
 800145e:	9301      	str	r3, [sp, #4]
 8001460:	8b3b      	ldrh	r3, [r7, #24]
 8001462:	9300      	str	r3, [sp, #0]
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	f7ff ff07 	bl	8001278 <ST7789_DrawChar>
        x += font->width;
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	889a      	ldrh	r2, [r3, #4]
 800146e:	89fb      	ldrh	r3, [r7, #14]
 8001470:	4413      	add	r3, r2
 8001472:	b29b      	uxth	r3, r3
 8001474:	81fb      	strh	r3, [r7, #14]
    while (*str) {
 8001476:	68bb      	ldr	r3, [r7, #8]
 8001478:	781b      	ldrb	r3, [r3, #0]
 800147a:	2b00      	cmp	r3, #0
 800147c:	d1cf      	bne.n	800141e <ST7789_WriteString+0x14>
    }
}
 800147e:	e000      	b.n	8001482 <ST7789_WriteString+0x78>
            if (y + font->height >= ST7789_HEIGHT) break; // Don't draw if going off screen
 8001480:	bf00      	nop
}
 8001482:	bf00      	nop
 8001484:	3710      	adds	r7, #16
 8001486:	46bd      	mov	sp, r7
 8001488:	bd80      	pop	{r7, pc}
	...

0800148c <ST7789_SetBacklight>:

void ST7789_DisplayOff(void) {
    ST7789_WriteCommand(ST7789_DISPOFF);
}

void ST7789_SetBacklight(uint8_t state) {
 800148c:	b580      	push	{r7, lr}
 800148e:	b082      	sub	sp, #8
 8001490:	af00      	add	r7, sp, #0
 8001492:	4603      	mov	r3, r0
 8001494:	71fb      	strb	r3, [r7, #7]
    if (state) {
 8001496:	79fb      	ldrb	r3, [r7, #7]
 8001498:	2b00      	cmp	r3, #0
 800149a:	d005      	beq.n	80014a8 <ST7789_SetBacklight+0x1c>
        HAL_GPIO_WritePin(ST7789_BL_GPIO_Port, ST7789_BL_Pin, GPIO_PIN_SET);
 800149c:	2201      	movs	r2, #1
 800149e:	2102      	movs	r1, #2
 80014a0:	4806      	ldr	r0, [pc, #24]	@ (80014bc <ST7789_SetBacklight+0x30>)
 80014a2:	f000 ffdf 	bl	8002464 <HAL_GPIO_WritePin>
    } else {
        HAL_GPIO_WritePin(ST7789_BL_GPIO_Port, ST7789_BL_Pin, GPIO_PIN_RESET);
    }
}
 80014a6:	e004      	b.n	80014b2 <ST7789_SetBacklight+0x26>
        HAL_GPIO_WritePin(ST7789_BL_GPIO_Port, ST7789_BL_Pin, GPIO_PIN_RESET);
 80014a8:	2200      	movs	r2, #0
 80014aa:	2102      	movs	r1, #2
 80014ac:	4803      	ldr	r0, [pc, #12]	@ (80014bc <ST7789_SetBacklight+0x30>)
 80014ae:	f000 ffd9 	bl	8002464 <HAL_GPIO_WritePin>
}
 80014b2:	bf00      	nop
 80014b4:	3708      	adds	r7, #8
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bd80      	pop	{r7, pc}
 80014ba:	bf00      	nop
 80014bc:	42020400 	.word	0x42020400

080014c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b082      	sub	sp, #8
 80014c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80014c6:	4b0b      	ldr	r3, [pc, #44]	@ (80014f4 <HAL_MspInit+0x34>)
 80014c8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80014cc:	4a09      	ldr	r2, [pc, #36]	@ (80014f4 <HAL_MspInit+0x34>)
 80014ce:	f043 0304 	orr.w	r3, r3, #4
 80014d2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80014d6:	4b07      	ldr	r3, [pc, #28]	@ (80014f4 <HAL_MspInit+0x34>)
 80014d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80014dc:	f003 0304 	and.w	r3, r3, #4
 80014e0:	607b      	str	r3, [r7, #4]
 80014e2:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 80014e4:	2004      	movs	r0, #4
 80014e6:	f000 fc84 	bl	8001df2 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014ea:	bf00      	nop
 80014ec:	3708      	adds	r7, #8
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bd80      	pop	{r7, pc}
 80014f2:	bf00      	nop
 80014f4:	46020c00 	.word	0x46020c00

080014f8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b08e      	sub	sp, #56	@ 0x38
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001500:	2300      	movs	r3, #0
 8001502:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t              uwPrescalerValue = 0;
 8001504:	2300      	movs	r3, #0
 8001506:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM17 clock */
  __HAL_RCC_TIM17_CLK_ENABLE();
 8001508:	4b2e      	ldr	r3, [pc, #184]	@ (80015c4 <HAL_InitTick+0xcc>)
 800150a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800150e:	4a2d      	ldr	r2, [pc, #180]	@ (80015c4 <HAL_InitTick+0xcc>)
 8001510:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001514:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8001518:	4b2a      	ldr	r3, [pc, #168]	@ (80015c4 <HAL_InitTick+0xcc>)
 800151a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800151e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001522:	60fb      	str	r3, [r7, #12]
 8001524:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001526:	f107 0210 	add.w	r2, r7, #16
 800152a:	f107 0314 	add.w	r3, r7, #20
 800152e:	4611      	mov	r1, r2
 8001530:	4618      	mov	r0, r3
 8001532:	f003 fdff 	bl	8005134 <HAL_RCC_GetClockConfig>

  /* Compute TIM17 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001536:	f003 fdd5 	bl	80050e4 <HAL_RCC_GetPCLK2Freq>
 800153a:	6338      	str	r0, [r7, #48]	@ 0x30

  /* Compute the prescaler value to have TIM17 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800153c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800153e:	4a22      	ldr	r2, [pc, #136]	@ (80015c8 <HAL_InitTick+0xd0>)
 8001540:	fba2 2303 	umull	r2, r3, r2, r3
 8001544:	0c9b      	lsrs	r3, r3, #18
 8001546:	3b01      	subs	r3, #1
 8001548:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Initialize TIM17 */
  htim17.Instance = TIM17;
 800154a:	4b20      	ldr	r3, [pc, #128]	@ (80015cc <HAL_InitTick+0xd4>)
 800154c:	4a20      	ldr	r2, [pc, #128]	@ (80015d0 <HAL_InitTick+0xd8>)
 800154e:	601a      	str	r2, [r3, #0]
   * Period = [(TIM17CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim17.Init.Period = (1000000U / 1000U) - 1U;
 8001550:	4b1e      	ldr	r3, [pc, #120]	@ (80015cc <HAL_InitTick+0xd4>)
 8001552:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001556:	60da      	str	r2, [r3, #12]
  htim17.Init.Prescaler = uwPrescalerValue;
 8001558:	4a1c      	ldr	r2, [pc, #112]	@ (80015cc <HAL_InitTick+0xd4>)
 800155a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800155c:	6053      	str	r3, [r2, #4]
  htim17.Init.ClockDivision = 0;
 800155e:	4b1b      	ldr	r3, [pc, #108]	@ (80015cc <HAL_InitTick+0xd4>)
 8001560:	2200      	movs	r2, #0
 8001562:	611a      	str	r2, [r3, #16]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001564:	4b19      	ldr	r3, [pc, #100]	@ (80015cc <HAL_InitTick+0xd4>)
 8001566:	2200      	movs	r2, #0
 8001568:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim17);
 800156a:	4818      	ldr	r0, [pc, #96]	@ (80015cc <HAL_InitTick+0xd4>)
 800156c:	f007 f9ac 	bl	80088c8 <HAL_TIM_Base_Init>
 8001570:	4603      	mov	r3, r0
 8001572:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  if (status == HAL_OK)
 8001576:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800157a:	2b00      	cmp	r3, #0
 800157c:	d118      	bne.n	80015b0 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim17);
 800157e:	4813      	ldr	r0, [pc, #76]	@ (80015cc <HAL_InitTick+0xd4>)
 8001580:	f007 fa04 	bl	800898c <HAL_TIM_Base_Start_IT>
 8001584:	4603      	mov	r3, r0
 8001586:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    if (status == HAL_OK)
 800158a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800158e:	2b00      	cmp	r3, #0
 8001590:	d10e      	bne.n	80015b0 <HAL_InitTick+0xb8>
    {
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	2b0f      	cmp	r3, #15
 8001596:	d808      	bhi.n	80015aa <HAL_InitTick+0xb2>
      {
        /* Enable the TIM17 global Interrupt */
        HAL_NVIC_SetPriority(TIM17_IRQn, TickPriority, 0U);
 8001598:	2200      	movs	r2, #0
 800159a:	6879      	ldr	r1, [r7, #4]
 800159c:	2047      	movs	r0, #71	@ 0x47
 800159e:	f000 fc33 	bl	8001e08 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80015a2:	4a0c      	ldr	r2, [pc, #48]	@ (80015d4 <HAL_InitTick+0xdc>)
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	6013      	str	r3, [r2, #0]
 80015a8:	e002      	b.n	80015b0 <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 80015aa:	2301      	movs	r3, #1
 80015ac:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
      }
    }
  }

  /* Enable the TIM17 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM17_IRQn);
 80015b0:	2047      	movs	r0, #71	@ 0x47
 80015b2:	f000 fc43 	bl	8001e3c <HAL_NVIC_EnableIRQ>

 /* Return function status */
  return status;
 80015b6:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
}
 80015ba:	4618      	mov	r0, r3
 80015bc:	3738      	adds	r7, #56	@ 0x38
 80015be:	46bd      	mov	sp, r7
 80015c0:	bd80      	pop	{r7, pc}
 80015c2:	bf00      	nop
 80015c4:	46020c00 	.word	0x46020c00
 80015c8:	431bde83 	.word	0x431bde83
 80015cc:	200001b4 	.word	0x200001b4
 80015d0:	40014800 	.word	0x40014800
 80015d4:	20000038 	.word	0x20000038

080015d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015d8:	b480      	push	{r7}
 80015da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80015dc:	bf00      	nop
 80015de:	e7fd      	b.n	80015dc <NMI_Handler+0x4>

080015e0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015e0:	b480      	push	{r7}
 80015e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015e4:	bf00      	nop
 80015e6:	e7fd      	b.n	80015e4 <HardFault_Handler+0x4>

080015e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015e8:	b480      	push	{r7}
 80015ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015ec:	bf00      	nop
 80015ee:	e7fd      	b.n	80015ec <MemManage_Handler+0x4>

080015f0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015f0:	b480      	push	{r7}
 80015f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015f4:	bf00      	nop
 80015f6:	e7fd      	b.n	80015f4 <BusFault_Handler+0x4>

080015f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015f8:	b480      	push	{r7}
 80015fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015fc:	bf00      	nop
 80015fe:	e7fd      	b.n	80015fc <UsageFault_Handler+0x4>

08001600 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001600:	b480      	push	{r7}
 8001602:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001604:	bf00      	nop
 8001606:	46bd      	mov	sp, r7
 8001608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160c:	4770      	bx	lr

0800160e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800160e:	b480      	push	{r7}
 8001610:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001612:	bf00      	nop
 8001614:	46bd      	mov	sp, r7
 8001616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161a:	4770      	bx	lr

0800161c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800161c:	b480      	push	{r7}
 800161e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001620:	bf00      	nop
 8001622:	46bd      	mov	sp, r7
 8001624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001628:	4770      	bx	lr

0800162a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800162a:	b480      	push	{r7}
 800162c:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800162e:	bf00      	nop
 8001630:	46bd      	mov	sp, r7
 8001632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001636:	4770      	bx	lr

08001638 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI Line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INT_Pin);
 800163c:	2002      	movs	r0, #2
 800163e:	f000 ff29 	bl	8002494 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8001642:	bf00      	nop
 8001644:	bd80      	pop	{r7, pc}

08001646 <EXTI13_IRQHandler>:

/**
  * @brief This function handles EXTI Line13 interrupt.
  */
void EXTI13_IRQHandler(void)
{
 8001646:	b580      	push	{r7, lr}
 8001648:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI13_IRQn 0 */

  /* USER CODE END EXTI13_IRQn 0 */
  BSP_PB_IRQHandler(BUTTON_USER);
 800164a:	2000      	movs	r0, #0
 800164c:	f000 f9ca 	bl	80019e4 <BSP_PB_IRQHandler>
  /* USER CODE BEGIN EXTI13_IRQn 1 */

  /* USER CODE END EXTI13_IRQn 1 */
}
 8001650:	bf00      	nop
 8001652:	bd80      	pop	{r7, pc}

08001654 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 Event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001658:	4802      	ldr	r0, [pc, #8]	@ (8001664 <I2C1_EV_IRQHandler+0x10>)
 800165a:	f001 f90d 	bl	8002878 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800165e:	bf00      	nop
 8001660:	bd80      	pop	{r7, pc}
 8001662:	bf00      	nop
 8001664:	200000b4 	.word	0x200000b4

08001668 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 Error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 800166c:	4802      	ldr	r0, [pc, #8]	@ (8001678 <I2C1_ER_IRQHandler+0x10>)
 800166e:	f001 f91d 	bl	80028ac <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8001672:	bf00      	nop
 8001674:	bd80      	pop	{r7, pc}
 8001676:	bf00      	nop
 8001678:	200000b4 	.word	0x200000b4

0800167c <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8001680:	4802      	ldr	r0, [pc, #8]	@ (800168c <SPI1_IRQHandler+0x10>)
 8001682:	f006 fdd7 	bl	8008234 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8001686:	bf00      	nop
 8001688:	bd80      	pop	{r7, pc}
 800168a:	bf00      	nop
 800168c:	20000120 	.word	0x20000120

08001690 <TIM17_IRQHandler>:

/**
  * @brief This function handles TIM17 global interrupt.
  */
void TIM17_IRQHandler(void)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM17_IRQn 0 */

  /* USER CODE END TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8001694:	4802      	ldr	r0, [pc, #8]	@ (80016a0 <TIM17_IRQHandler+0x10>)
 8001696:	f007 fa19 	bl	8008acc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM17_IRQn 1 */

  /* USER CODE END TIM17_IRQn 1 */
}
 800169a:	bf00      	nop
 800169c:	bd80      	pop	{r7, pc}
 800169e:	bf00      	nop
 80016a0:	200001b4 	.word	0x200001b4

080016a4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b086      	sub	sp, #24
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80016ac:	4a14      	ldr	r2, [pc, #80]	@ (8001700 <_sbrk+0x5c>)
 80016ae:	4b15      	ldr	r3, [pc, #84]	@ (8001704 <_sbrk+0x60>)
 80016b0:	1ad3      	subs	r3, r2, r3
 80016b2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80016b4:	697b      	ldr	r3, [r7, #20]
 80016b6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80016b8:	4b13      	ldr	r3, [pc, #76]	@ (8001708 <_sbrk+0x64>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d102      	bne.n	80016c6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80016c0:	4b11      	ldr	r3, [pc, #68]	@ (8001708 <_sbrk+0x64>)
 80016c2:	4a12      	ldr	r2, [pc, #72]	@ (800170c <_sbrk+0x68>)
 80016c4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80016c6:	4b10      	ldr	r3, [pc, #64]	@ (8001708 <_sbrk+0x64>)
 80016c8:	681a      	ldr	r2, [r3, #0]
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	4413      	add	r3, r2
 80016ce:	693a      	ldr	r2, [r7, #16]
 80016d0:	429a      	cmp	r2, r3
 80016d2:	d207      	bcs.n	80016e4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80016d4:	f008 f8fe 	bl	80098d4 <__errno>
 80016d8:	4603      	mov	r3, r0
 80016da:	220c      	movs	r2, #12
 80016dc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80016de:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80016e2:	e009      	b.n	80016f8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80016e4:	4b08      	ldr	r3, [pc, #32]	@ (8001708 <_sbrk+0x64>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80016ea:	4b07      	ldr	r3, [pc, #28]	@ (8001708 <_sbrk+0x64>)
 80016ec:	681a      	ldr	r2, [r3, #0]
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	4413      	add	r3, r2
 80016f2:	4a05      	ldr	r2, [pc, #20]	@ (8001708 <_sbrk+0x64>)
 80016f4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80016f6:	68fb      	ldr	r3, [r7, #12]
}
 80016f8:	4618      	mov	r0, r3
 80016fa:	3718      	adds	r7, #24
 80016fc:	46bd      	mov	sp, r7
 80016fe:	bd80      	pop	{r7, pc}
 8001700:	200c0000 	.word	0x200c0000
 8001704:	00000400 	.word	0x00000400
 8001708:	20000200 	.word	0x20000200
 800170c:	200003f0 	.word	0x200003f0

08001710 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001710:	b480      	push	{r7}
 8001712:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001714:	4b18      	ldr	r3, [pc, #96]	@ (8001778 <SystemInit+0x68>)
 8001716:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800171a:	4a17      	ldr	r2, [pc, #92]	@ (8001778 <SystemInit+0x68>)
 800171c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001720:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR = RCC_CR_MSISON;
 8001724:	4b15      	ldr	r3, [pc, #84]	@ (800177c <SystemInit+0x6c>)
 8001726:	2201      	movs	r2, #1
 8001728:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 800172a:	4b14      	ldr	r3, [pc, #80]	@ (800177c <SystemInit+0x6c>)
 800172c:	2200      	movs	r2, #0
 800172e:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 8001730:	4b12      	ldr	r3, [pc, #72]	@ (800177c <SystemInit+0x6c>)
 8001732:	2200      	movs	r2, #0
 8001734:	621a      	str	r2, [r3, #32]
  RCC->CFGR3 = 0U;
 8001736:	4b11      	ldr	r3, [pc, #68]	@ (800177c <SystemInit+0x6c>)
 8001738:	2200      	movs	r2, #0
 800173a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Reset HSEON, CSSON , HSION, PLLxON bits */
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
 800173c:	4b0f      	ldr	r3, [pc, #60]	@ (800177c <SystemInit+0x6c>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	4a0e      	ldr	r2, [pc, #56]	@ (800177c <SystemInit+0x6c>)
 8001742:	f023 53a8 	bic.w	r3, r3, #352321536	@ 0x15000000
 8001746:	f423 2310 	bic.w	r3, r3, #589824	@ 0x90000
 800174a:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLL1CFGR = 0U;
 800174c:	4b0b      	ldr	r3, [pc, #44]	@ (800177c <SystemInit+0x6c>)
 800174e:	2200      	movs	r2, #0
 8001750:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 8001752:	4b0a      	ldr	r3, [pc, #40]	@ (800177c <SystemInit+0x6c>)
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	4a09      	ldr	r2, [pc, #36]	@ (800177c <SystemInit+0x6c>)
 8001758:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800175c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 800175e:	4b07      	ldr	r3, [pc, #28]	@ (800177c <SystemInit+0x6c>)
 8001760:	2200      	movs	r2, #0
 8001762:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001764:	4b04      	ldr	r3, [pc, #16]	@ (8001778 <SystemInit+0x68>)
 8001766:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800176a:	609a      	str	r2, [r3, #8]
  #endif
}
 800176c:	bf00      	nop
 800176e:	46bd      	mov	sp, r7
 8001770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001774:	4770      	bx	lr
 8001776:	bf00      	nop
 8001778:	e000ed00 	.word	0xe000ed00
 800177c:	46020c00 	.word	0x46020c00

08001780 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8001780:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80017b8 <LoopForever+0x2>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001784:	f7ff ffc4 	bl	8001710 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001788:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800178a:	e003      	b.n	8001794 <LoopCopyDataInit>

0800178c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 800178c:	4b0b      	ldr	r3, [pc, #44]	@ (80017bc <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800178e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001790:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001792:	3104      	adds	r1, #4

08001794 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001794:	480a      	ldr	r0, [pc, #40]	@ (80017c0 <LoopForever+0xa>)
	ldr	r3, =_edata
 8001796:	4b0b      	ldr	r3, [pc, #44]	@ (80017c4 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001798:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800179a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 800179c:	d3f6      	bcc.n	800178c <CopyDataInit>
	ldr	r2, =_sbss
 800179e:	4a0a      	ldr	r2, [pc, #40]	@ (80017c8 <LoopForever+0x12>)
	b	LoopFillZerobss
 80017a0:	e002      	b.n	80017a8 <LoopFillZerobss>

080017a2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80017a2:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80017a4:	f842 3b04 	str.w	r3, [r2], #4

080017a8 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80017a8:	4b08      	ldr	r3, [pc, #32]	@ (80017cc <LoopForever+0x16>)
	cmp	r2, r3
 80017aa:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80017ac:	d3f9      	bcc.n	80017a2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80017ae:	f008 f897 	bl	80098e0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80017b2:	f7ff f943 	bl	8000a3c <main>

080017b6 <LoopForever>:

LoopForever:
    b LoopForever
 80017b6:	e7fe      	b.n	80017b6 <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 80017b8:	200c0000 	.word	0x200c0000
	ldr	r3, =_sidata
 80017bc:	0800a8a4 	.word	0x0800a8a4
	ldr	r0, =_sdata
 80017c0:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80017c4:	20000090 	.word	0x20000090
	ldr	r2, =_sbss
 80017c8:	20000090 	.word	0x20000090
	ldr	r3, = _ebss
 80017cc:	200003f0 	.word	0x200003f0

080017d0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80017d0:	e7fe      	b.n	80017d0 <ADC1_IRQHandler>
	...

080017d4 <BSP_LED_Init>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b08e      	sub	sp, #56	@ 0x38
 80017d8:	af00      	add	r7, sp, #0
 80017da:	4603      	mov	r3, r0
 80017dc:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 80017de:	2300      	movs	r3, #0
 80017e0:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitTypeDef  gpio_init_structure;
#if defined (USE_NUCLEO_144)
  uint32_t pwrenabled = 0U;
 80017e2:	2300      	movs	r3, #0
 80017e4:	633b      	str	r3, [r7, #48]	@ 0x30
#endif /* USE_NUCLEO_144 */

  if ((Led != LED2)
 80017e6:	79fb      	ldrb	r3, [r7, #7]
 80017e8:	2b01      	cmp	r3, #1
 80017ea:	d009      	beq.n	8001800 <BSP_LED_Init+0x2c>
#if defined (USE_NUCLEO_144)
      && (Led != LED1) && (Led != LED3)
 80017ec:	79fb      	ldrb	r3, [r7, #7]
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d006      	beq.n	8001800 <BSP_LED_Init+0x2c>
 80017f2:	79fb      	ldrb	r3, [r7, #7]
 80017f4:	2b02      	cmp	r3, #2
 80017f6:	d003      	beq.n	8001800 <BSP_LED_Init+0x2c>
#endif /* defined (USE_NUCLEO_144) */
     )
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80017f8:	f06f 0301 	mvn.w	r3, #1
 80017fc:	637b      	str	r3, [r7, #52]	@ 0x34
 80017fe:	e06e      	b.n	80018de <BSP_LED_Init+0x10a>
  }
  else
  {
    /* Enable the GPIO LED Clock */
    if (Led == LED2)
 8001800:	79fb      	ldrb	r3, [r7, #7]
 8001802:	2b01      	cmp	r3, #1
 8001804:	d10f      	bne.n	8001826 <BSP_LED_Init+0x52>
    {
      LED2_GPIO_CLK_ENABLE();
 8001806:	4b38      	ldr	r3, [pc, #224]	@ (80018e8 <BSP_LED_Init+0x114>)
 8001808:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800180c:	4a36      	ldr	r2, [pc, #216]	@ (80018e8 <BSP_LED_Init+0x114>)
 800180e:	f043 0302 	orr.w	r3, r3, #2
 8001812:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001816:	4b34      	ldr	r3, [pc, #208]	@ (80018e8 <BSP_LED_Init+0x114>)
 8001818:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800181c:	f003 0302 	and.w	r3, r3, #2
 8001820:	61bb      	str	r3, [r7, #24]
 8001822:	69bb      	ldr	r3, [r7, #24]
 8001824:	e046      	b.n	80018b4 <BSP_LED_Init+0xe0>
    }
#if defined (USE_NUCLEO_144)
    else if (Led == LED1)
 8001826:	79fb      	ldrb	r3, [r7, #7]
 8001828:	2b00      	cmp	r3, #0
 800182a:	d10f      	bne.n	800184c <BSP_LED_Init+0x78>
    {
      LED1_GPIO_CLK_ENABLE();
 800182c:	4b2e      	ldr	r3, [pc, #184]	@ (80018e8 <BSP_LED_Init+0x114>)
 800182e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001832:	4a2d      	ldr	r2, [pc, #180]	@ (80018e8 <BSP_LED_Init+0x114>)
 8001834:	f043 0304 	orr.w	r3, r3, #4
 8001838:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800183c:	4b2a      	ldr	r3, [pc, #168]	@ (80018e8 <BSP_LED_Init+0x114>)
 800183e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001842:	f003 0304 	and.w	r3, r3, #4
 8001846:	617b      	str	r3, [r7, #20]
 8001848:	697b      	ldr	r3, [r7, #20]
 800184a:	e033      	b.n	80018b4 <BSP_LED_Init+0xe0>
    }
    else /* Led == Led3 */
    {
      /* Enable VddIO2 for Led3 */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800184c:	4b26      	ldr	r3, [pc, #152]	@ (80018e8 <BSP_LED_Init+0x114>)
 800184e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001852:	f003 0304 	and.w	r3, r3, #4
 8001856:	2b00      	cmp	r3, #0
 8001858:	d110      	bne.n	800187c <BSP_LED_Init+0xa8>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 800185a:	4b23      	ldr	r3, [pc, #140]	@ (80018e8 <BSP_LED_Init+0x114>)
 800185c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001860:	4a21      	ldr	r2, [pc, #132]	@ (80018e8 <BSP_LED_Init+0x114>)
 8001862:	f043 0304 	orr.w	r3, r3, #4
 8001866:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800186a:	4b1f      	ldr	r3, [pc, #124]	@ (80018e8 <BSP_LED_Init+0x114>)
 800186c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001870:	f003 0304 	and.w	r3, r3, #4
 8001874:	613b      	str	r3, [r7, #16]
 8001876:	693b      	ldr	r3, [r7, #16]
        pwrenabled = 1U;
 8001878:	2301      	movs	r3, #1
 800187a:	633b      	str	r3, [r7, #48]	@ 0x30
      }

      HAL_PWREx_EnableVddIO2();
 800187c:	f002 fa14 	bl	8003ca8 <HAL_PWREx_EnableVddIO2>

      if (pwrenabled == 1U)
 8001880:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001882:	2b01      	cmp	r3, #1
 8001884:	d107      	bne.n	8001896 <BSP_LED_Init+0xc2>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8001886:	4b18      	ldr	r3, [pc, #96]	@ (80018e8 <BSP_LED_Init+0x114>)
 8001888:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800188c:	4a16      	ldr	r2, [pc, #88]	@ (80018e8 <BSP_LED_Init+0x114>)
 800188e:	f023 0304 	bic.w	r3, r3, #4
 8001892:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
      }

      LED3_GPIO_CLK_ENABLE();
 8001896:	4b14      	ldr	r3, [pc, #80]	@ (80018e8 <BSP_LED_Init+0x114>)
 8001898:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800189c:	4a12      	ldr	r2, [pc, #72]	@ (80018e8 <BSP_LED_Init+0x114>)
 800189e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80018a2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80018a6:	4b10      	ldr	r3, [pc, #64]	@ (80018e8 <BSP_LED_Init+0x114>)
 80018a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80018ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80018b0:	60fb      	str	r3, [r7, #12]
 80018b2:	68fb      	ldr	r3, [r7, #12]
    }
#endif /* defined (USE_NUCLEO_144) */
    /* Configure the GPIO_LED pin */
    gpio_init_structure.Pin   = LED_PIN[Led];
 80018b4:	79fb      	ldrb	r3, [r7, #7]
 80018b6:	4a0d      	ldr	r2, [pc, #52]	@ (80018ec <BSP_LED_Init+0x118>)
 80018b8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80018bc:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 80018be:	2301      	movs	r3, #1
 80018c0:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull  = GPIO_NOPULL;
 80018c2:	2300      	movs	r3, #0
 80018c4:	627b      	str	r3, [r7, #36]	@ 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018c6:	2303      	movs	r3, #3
 80018c8:	62bb      	str	r3, [r7, #40]	@ 0x28

    HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 80018ca:	79fb      	ldrb	r3, [r7, #7]
 80018cc:	4a08      	ldr	r2, [pc, #32]	@ (80018f0 <BSP_LED_Init+0x11c>)
 80018ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018d2:	f107 021c 	add.w	r2, r7, #28
 80018d6:	4611      	mov	r1, r2
 80018d8:	4618      	mov	r0, r3
 80018da:	f000 fbe3 	bl	80020a4 <HAL_GPIO_Init>
  }

  return ret;
 80018de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 80018e0:	4618      	mov	r0, r3
 80018e2:	3738      	adds	r7, #56	@ 0x38
 80018e4:	46bd      	mov	sp, r7
 80018e6:	bd80      	pop	{r7, pc}
 80018e8:	46020c00 	.word	0x46020c00
 80018ec:	0800a7bc 	.word	0x0800a7bc
 80018f0:	20000020 	.word	0x20000020

080018f4 <BSP_PB_Init>:
  *            @arg  BUTTON_MODE_GPIO: Button will be used as simple IO
  *            @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                    with interrupt generation capability
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b088      	sub	sp, #32
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	4603      	mov	r3, r0
 80018fc:	460a      	mov	r2, r1
 80018fe:	71fb      	strb	r3, [r7, #7]
 8001900:	4613      	mov	r3, r2
 8001902:	71bb      	strb	r3, [r7, #6]
  static BSP_EXTI_LineCallback ButtonCallback[BUTTONn] = {BUTTON_USER_EXTI_Callback};
  static uint32_t  BSP_BUTTON_PRIO [BUTTONn] = {BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] = {BUTTON_USER_EXTI_LINE};

  /* Enable the BUTTON clock */
  BUTTON_USER_GPIO_CLK_ENABLE();
 8001904:	4b30      	ldr	r3, [pc, #192]	@ (80019c8 <BSP_PB_Init+0xd4>)
 8001906:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800190a:	4a2f      	ldr	r2, [pc, #188]	@ (80019c8 <BSP_PB_Init+0xd4>)
 800190c:	f043 0304 	orr.w	r3, r3, #4
 8001910:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001914:	4b2c      	ldr	r3, [pc, #176]	@ (80019c8 <BSP_PB_Init+0xd4>)
 8001916:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800191a:	f003 0304 	and.w	r3, r3, #4
 800191e:	60bb      	str	r3, [r7, #8]
 8001920:	68bb      	ldr	r3, [r7, #8]

  gpio_init_structure.Pin = BUTTON_PIN [Button];
 8001922:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001926:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Pull = GPIO_PULLDOWN;
 8001928:	2302      	movs	r3, #2
 800192a:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 800192c:	2302      	movs	r3, #2
 800192e:	61bb      	str	r3, [r7, #24]

  if (ButtonMode == BUTTON_MODE_GPIO)
 8001930:	79bb      	ldrb	r3, [r7, #6]
 8001932:	2b00      	cmp	r3, #0
 8001934:	d10c      	bne.n	8001950 <BSP_PB_Init+0x5c>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 8001936:	2300      	movs	r3, #0
 8001938:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT [Button], &gpio_init_structure);
 800193a:	79fb      	ldrb	r3, [r7, #7]
 800193c:	4a23      	ldr	r2, [pc, #140]	@ (80019cc <BSP_PB_Init+0xd8>)
 800193e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001942:	f107 020c 	add.w	r2, r7, #12
 8001946:	4611      	mov	r1, r2
 8001948:	4618      	mov	r0, r3
 800194a:	f000 fbab 	bl	80020a4 <HAL_GPIO_Init>
 800194e:	e036      	b.n	80019be <BSP_PB_Init+0xca>
  }
  else /* (ButtonMode == BUTTON_MODE_EXTI) */
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 8001950:	4b1f      	ldr	r3, [pc, #124]	@ (80019d0 <BSP_PB_Init+0xdc>)
 8001952:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8001954:	79fb      	ldrb	r3, [r7, #7]
 8001956:	4a1d      	ldr	r2, [pc, #116]	@ (80019cc <BSP_PB_Init+0xd8>)
 8001958:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800195c:	f107 020c 	add.w	r2, r7, #12
 8001960:	4611      	mov	r1, r2
 8001962:	4618      	mov	r0, r3
 8001964:	f000 fb9e 	bl	80020a4 <HAL_GPIO_Init>

    (void)HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]);
 8001968:	79fa      	ldrb	r2, [r7, #7]
 800196a:	4613      	mov	r3, r2
 800196c:	005b      	lsls	r3, r3, #1
 800196e:	4413      	add	r3, r2
 8001970:	009b      	lsls	r3, r3, #2
 8001972:	4a18      	ldr	r2, [pc, #96]	@ (80019d4 <BSP_PB_Init+0xe0>)
 8001974:	441a      	add	r2, r3
 8001976:	79fb      	ldrb	r3, [r7, #7]
 8001978:	4917      	ldr	r1, [pc, #92]	@ (80019d8 <BSP_PB_Init+0xe4>)
 800197a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800197e:	4619      	mov	r1, r3
 8001980:	4610      	mov	r0, r2
 8001982:	f000 fb33 	bl	8001fec <HAL_EXTI_GetHandle>
    (void)HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]);
 8001986:	79fa      	ldrb	r2, [r7, #7]
 8001988:	4613      	mov	r3, r2
 800198a:	005b      	lsls	r3, r3, #1
 800198c:	4413      	add	r3, r2
 800198e:	009b      	lsls	r3, r3, #2
 8001990:	4a10      	ldr	r2, [pc, #64]	@ (80019d4 <BSP_PB_Init+0xe0>)
 8001992:	1898      	adds	r0, r3, r2
 8001994:	79fb      	ldrb	r3, [r7, #7]
 8001996:	4a11      	ldr	r2, [pc, #68]	@ (80019dc <BSP_PB_Init+0xe8>)
 8001998:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800199c:	461a      	mov	r2, r3
 800199e:	2100      	movs	r1, #0
 80019a0:	f000 faf8 	bl	8001f94 <HAL_EXTI_RegisterCallback>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 80019a4:	2018      	movs	r0, #24
 80019a6:	79fb      	ldrb	r3, [r7, #7]
 80019a8:	4a0d      	ldr	r2, [pc, #52]	@ (80019e0 <BSP_PB_Init+0xec>)
 80019aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019ae:	2200      	movs	r2, #0
 80019b0:	4619      	mov	r1, r3
 80019b2:	f000 fa29 	bl	8001e08 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 80019b6:	2318      	movs	r3, #24
 80019b8:	4618      	mov	r0, r3
 80019ba:	f000 fa3f 	bl	8001e3c <HAL_NVIC_EnableIRQ>
  }

  return BSP_ERROR_NONE;
 80019be:	2300      	movs	r3, #0
}
 80019c0:	4618      	mov	r0, r3
 80019c2:	3720      	adds	r7, #32
 80019c4:	46bd      	mov	sp, r7
 80019c6:	bd80      	pop	{r7, pc}
 80019c8:	46020c00 	.word	0x46020c00
 80019cc:	2000002c 	.word	0x2000002c
 80019d0:	10110000 	.word	0x10110000
 80019d4:	20000204 	.word	0x20000204
 80019d8:	0800a7c4 	.word	0x0800a7c4
 80019dc:	20000030 	.word	0x20000030
 80019e0:	20000034 	.word	0x20000034

080019e4 <BSP_PB_IRQHandler>:
  * @brief  BSP Button IRQ handler
  * @param  Button Can only be BUTTON_USER
  * @retval None
  */
void BSP_PB_IRQHandler(Button_TypeDef Button)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b082      	sub	sp, #8
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	4603      	mov	r3, r0
 80019ec:	71fb      	strb	r3, [r7, #7]
  HAL_EXTI_IRQHandler(&hpb_exti[Button]);
 80019ee:	79fa      	ldrb	r2, [r7, #7]
 80019f0:	4613      	mov	r3, r2
 80019f2:	005b      	lsls	r3, r3, #1
 80019f4:	4413      	add	r3, r2
 80019f6:	009b      	lsls	r3, r3, #2
 80019f8:	4a04      	ldr	r2, [pc, #16]	@ (8001a0c <BSP_PB_IRQHandler+0x28>)
 80019fa:	4413      	add	r3, r2
 80019fc:	4618      	mov	r0, r3
 80019fe:	f000 fb09 	bl	8002014 <HAL_EXTI_IRQHandler>
}
 8001a02:	bf00      	nop
 8001a04:	3708      	adds	r7, #8
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bd80      	pop	{r7, pc}
 8001a0a:	bf00      	nop
 8001a0c:	20000204 	.word	0x20000204

08001a10 <BSP_PB_Callback>:
  * @brief  BSP Push Button callback
  * @param  Button Specifies the pin connected EXTI line
  * @retval None
  */
__weak void BSP_PB_Callback(Button_TypeDef Button)
{
 8001a10:	b480      	push	{r7}
 8001a12:	b083      	sub	sp, #12
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	4603      	mov	r3, r0
 8001a18:	71fb      	strb	r3, [r7, #7]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Button);

  /* This function should be implemented by the user application.
     It is called into this driver when an event on Button is triggered. */
}
 8001a1a:	bf00      	nop
 8001a1c:	370c      	adds	r7, #12
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a24:	4770      	bx	lr
	...

08001a28 <BSP_COM_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval BSP error code
  */
int32_t BSP_COM_Init(COM_TypeDef COM, COM_InitTypeDef *COM_Init)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b084      	sub	sp, #16
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	4603      	mov	r3, r0
 8001a30:	6039      	str	r1, [r7, #0]
 8001a32:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8001a34:	2300      	movs	r3, #0
 8001a36:	60fb      	str	r3, [r7, #12]

  if (COM >= COMn)
 8001a38:	79fb      	ldrb	r3, [r7, #7]
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d003      	beq.n	8001a46 <BSP_COM_Init+0x1e>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001a3e:	f06f 0301 	mvn.w	r3, #1
 8001a42:	60fb      	str	r3, [r7, #12]
 8001a44:	e018      	b.n	8001a78 <BSP_COM_Init+0x50>
  }
  else
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0)
    /* Init the UART Msp */
    COM1_MspInit(&hcom_uart[COM]);
 8001a46:	79fb      	ldrb	r3, [r7, #7]
 8001a48:	2294      	movs	r2, #148	@ 0x94
 8001a4a:	fb02 f303 	mul.w	r3, r2, r3
 8001a4e:	4a0d      	ldr	r2, [pc, #52]	@ (8001a84 <BSP_COM_Init+0x5c>)
 8001a50:	4413      	add	r3, r2
 8001a52:	4618      	mov	r0, r3
 8001a54:	f000 f854 	bl	8001b00 <COM1_MspInit>
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS == 0) */

    if (MX_USART1_Init(&hcom_uart[COM], COM_Init) != HAL_OK)
 8001a58:	79fb      	ldrb	r3, [r7, #7]
 8001a5a:	2294      	movs	r2, #148	@ 0x94
 8001a5c:	fb02 f303 	mul.w	r3, r2, r3
 8001a60:	4a08      	ldr	r2, [pc, #32]	@ (8001a84 <BSP_COM_Init+0x5c>)
 8001a62:	4413      	add	r3, r2
 8001a64:	6839      	ldr	r1, [r7, #0]
 8001a66:	4618      	mov	r0, r3
 8001a68:	f000 f80e 	bl	8001a88 <MX_USART1_Init>
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d002      	beq.n	8001a78 <BSP_COM_Init+0x50>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8001a72:	f06f 0303 	mvn.w	r3, #3
 8001a76:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8001a78:	68fb      	ldr	r3, [r7, #12]
}
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	3710      	adds	r7, #16
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	bd80      	pop	{r7, pc}
 8001a82:	bf00      	nop
 8001a84:	20000210 	.word	0x20000210

08001a88 <MX_USART1_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval HAL error code
  */
__weak HAL_StatusTypeDef MX_USART1_Init(UART_HandleTypeDef *huart, MX_UART_InitTypeDef *COM_Init)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b082      	sub	sp, #8
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
 8001a90:	6039      	str	r1, [r7, #0]
  /* USART configuration */
  huart->Instance                = COM_USART[COM1];
 8001a92:	4b16      	ldr	r3, [pc, #88]	@ (8001aec <MX_USART1_Init+0x64>)
 8001a94:	681a      	ldr	r2, [r3, #0]
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	601a      	str	r2, [r3, #0]
  huart->Init.BaudRate           = COM_Init->BaudRate;
 8001a9a:	683b      	ldr	r3, [r7, #0]
 8001a9c:	681a      	ldr	r2, [r3, #0]
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	605a      	str	r2, [r3, #4]
  huart->Init.Mode               = UART_MODE_TX_RX;
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	220c      	movs	r2, #12
 8001aa6:	615a      	str	r2, [r3, #20]
  huart->Init.Parity             = (uint32_t)COM_Init->Parity;
 8001aa8:	683b      	ldr	r3, [r7, #0]
 8001aaa:	895b      	ldrh	r3, [r3, #10]
 8001aac:	461a      	mov	r2, r3
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	611a      	str	r2, [r3, #16]
  huart->Init.WordLength         = (uint32_t)COM_Init->WordLength;
 8001ab2:	683b      	ldr	r3, [r7, #0]
 8001ab4:	685a      	ldr	r2, [r3, #4]
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	609a      	str	r2, [r3, #8]
  huart->Init.StopBits           = (uint32_t)COM_Init->StopBits;
 8001aba:	683b      	ldr	r3, [r7, #0]
 8001abc:	891b      	ldrh	r3, [r3, #8]
 8001abe:	461a      	mov	r2, r3
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	60da      	str	r2, [r3, #12]
  huart->Init.HwFlowCtl          = (uint32_t)COM_Init->HwFlowCtl;
 8001ac4:	683b      	ldr	r3, [r7, #0]
 8001ac6:	899b      	ldrh	r3, [r3, #12]
 8001ac8:	461a      	mov	r2, r3
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	619a      	str	r2, [r3, #24]
  huart->Init.OverSampling       = UART_OVERSAMPLING_8;
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001ad4:	61da      	str	r2, [r3, #28]
  huart->Init.ClockPrescaler     = UART_PRESCALER_DIV1;
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	2200      	movs	r2, #0
 8001ada:	625a      	str	r2, [r3, #36]	@ 0x24
  return HAL_UART_Init(huart);
 8001adc:	6878      	ldr	r0, [r7, #4]
 8001ade:	f007 fab3 	bl	8009048 <HAL_UART_Init>
 8001ae2:	4603      	mov	r3, r0
}
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	3708      	adds	r7, #8
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	bd80      	pop	{r7, pc}
 8001aec:	2000001c 	.word	0x2000001c

08001af0 <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  Key EXTI line detection callbacks.
  * @retval BSP status
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 8001af4:	2000      	movs	r0, #0
 8001af6:	f7ff ff8b 	bl	8001a10 <BSP_PB_Callback>
}
 8001afa:	bf00      	nop
 8001afc:	bd80      	pop	{r7, pc}
	...

08001b00 <COM1_MspInit>:
  * @brief  Initializes UART MSP.
  * @param  huart UART handle
  * @retval BSP status
  */
static void COM1_MspInit(UART_HandleTypeDef *huart)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b08a      	sub	sp, #40	@ 0x28
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);

  /* Enable GPIO clock */
  COM1_TX_GPIO_CLK_ENABLE();
 8001b08:	4b27      	ldr	r3, [pc, #156]	@ (8001ba8 <COM1_MspInit+0xa8>)
 8001b0a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001b0e:	4a26      	ldr	r2, [pc, #152]	@ (8001ba8 <COM1_MspInit+0xa8>)
 8001b10:	f043 0301 	orr.w	r3, r3, #1
 8001b14:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001b18:	4b23      	ldr	r3, [pc, #140]	@ (8001ba8 <COM1_MspInit+0xa8>)
 8001b1a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001b1e:	f003 0301 	and.w	r3, r3, #1
 8001b22:	613b      	str	r3, [r7, #16]
 8001b24:	693b      	ldr	r3, [r7, #16]
  COM1_RX_GPIO_CLK_ENABLE();
 8001b26:	4b20      	ldr	r3, [pc, #128]	@ (8001ba8 <COM1_MspInit+0xa8>)
 8001b28:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001b2c:	4a1e      	ldr	r2, [pc, #120]	@ (8001ba8 <COM1_MspInit+0xa8>)
 8001b2e:	f043 0301 	orr.w	r3, r3, #1
 8001b32:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001b36:	4b1c      	ldr	r3, [pc, #112]	@ (8001ba8 <COM1_MspInit+0xa8>)
 8001b38:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001b3c:	f003 0301 	and.w	r3, r3, #1
 8001b40:	60fb      	str	r3, [r7, #12]
 8001b42:	68fb      	ldr	r3, [r7, #12]

  /* Enable USART clock */
  COM1_CLK_ENABLE();
 8001b44:	4b18      	ldr	r3, [pc, #96]	@ (8001ba8 <COM1_MspInit+0xa8>)
 8001b46:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8001b4a:	4a17      	ldr	r2, [pc, #92]	@ (8001ba8 <COM1_MspInit+0xa8>)
 8001b4c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001b50:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8001b54:	4b14      	ldr	r3, [pc, #80]	@ (8001ba8 <COM1_MspInit+0xa8>)
 8001b56:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8001b5a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001b5e:	60bb      	str	r3, [r7, #8]
 8001b60:	68bb      	ldr	r3, [r7, #8]

  /* Configure USART Tx as alternate function */
  gpio_init_structure.Pin       = COM1_TX_PIN;
 8001b62:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001b66:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8001b68:	2302      	movs	r3, #2
 8001b6a:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 8001b6c:	2302      	movs	r3, #2
 8001b6e:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8001b70:	2301      	movs	r3, #1
 8001b72:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Alternate = COM1_TX_AF;
 8001b74:	2307      	movs	r3, #7
 8001b76:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_TX_GPIO_PORT, &gpio_init_structure);
 8001b78:	f107 0314 	add.w	r3, r7, #20
 8001b7c:	4619      	mov	r1, r3
 8001b7e:	480b      	ldr	r0, [pc, #44]	@ (8001bac <COM1_MspInit+0xac>)
 8001b80:	f000 fa90 	bl	80020a4 <HAL_GPIO_Init>

  /* Configure USART Rx as alternate function */
  gpio_init_structure.Pin       = COM1_RX_PIN;
 8001b84:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001b88:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8001b8a:	2302      	movs	r3, #2
 8001b8c:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Alternate = COM1_RX_AF;
 8001b8e:	2307      	movs	r3, #7
 8001b90:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_RX_GPIO_PORT, &gpio_init_structure);
 8001b92:	f107 0314 	add.w	r3, r7, #20
 8001b96:	4619      	mov	r1, r3
 8001b98:	4804      	ldr	r0, [pc, #16]	@ (8001bac <COM1_MspInit+0xac>)
 8001b9a:	f000 fa83 	bl	80020a4 <HAL_GPIO_Init>
}
 8001b9e:	bf00      	nop
 8001ba0:	3728      	adds	r7, #40	@ 0x28
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	bd80      	pop	{r7, pc}
 8001ba6:	bf00      	nop
 8001ba8:	46020c00 	.word	0x46020c00
 8001bac:	42020000 	.word	0x42020000

08001bb0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001bb4:	4b12      	ldr	r3, [pc, #72]	@ (8001c00 <HAL_Init+0x50>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	4a11      	ldr	r2, [pc, #68]	@ (8001c00 <HAL_Init+0x50>)
 8001bba:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001bbe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001bc0:	2003      	movs	r0, #3
 8001bc2:	f000 f916 	bl	8001df2 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8001bc6:	f003 f95d 	bl	8004e84 <HAL_RCC_GetSysClockFreq>
 8001bca:	4602      	mov	r2, r0
 8001bcc:	4b0d      	ldr	r3, [pc, #52]	@ (8001c04 <HAL_Init+0x54>)
 8001bce:	6a1b      	ldr	r3, [r3, #32]
 8001bd0:	f003 030f 	and.w	r3, r3, #15
 8001bd4:	490c      	ldr	r1, [pc, #48]	@ (8001c08 <HAL_Init+0x58>)
 8001bd6:	5ccb      	ldrb	r3, [r1, r3]
 8001bd8:	fa22 f303 	lsr.w	r3, r2, r3
 8001bdc:	4a0b      	ldr	r2, [pc, #44]	@ (8001c0c <HAL_Init+0x5c>)
 8001bde:	6013      	str	r3, [r2, #0]

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8001be0:	2004      	movs	r0, #4
 8001be2:	f000 f939 	bl	8001e58 <HAL_SYSTICK_CLKSourceConfig>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001be6:	2007      	movs	r0, #7
 8001be8:	f7ff fc86 	bl	80014f8 <HAL_InitTick>
 8001bec:	4603      	mov	r3, r0
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d001      	beq.n	8001bf6 <HAL_Init+0x46>
  {
    return HAL_ERROR;
 8001bf2:	2301      	movs	r3, #1
 8001bf4:	e002      	b.n	8001bfc <HAL_Init+0x4c>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001bf6:	f7ff fc63 	bl	80014c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001bfa:	2300      	movs	r3, #0
}
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	bd80      	pop	{r7, pc}
 8001c00:	40022000 	.word	0x40022000
 8001c04:	46020c00 	.word	0x46020c00
 8001c08:	0800a764 	.word	0x0800a764
 8001c0c:	20000018 	.word	0x20000018

08001c10 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c10:	b480      	push	{r7}
 8001c12:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001c14:	4b06      	ldr	r3, [pc, #24]	@ (8001c30 <HAL_IncTick+0x20>)
 8001c16:	781b      	ldrb	r3, [r3, #0]
 8001c18:	461a      	mov	r2, r3
 8001c1a:	4b06      	ldr	r3, [pc, #24]	@ (8001c34 <HAL_IncTick+0x24>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	4413      	add	r3, r2
 8001c20:	4a04      	ldr	r2, [pc, #16]	@ (8001c34 <HAL_IncTick+0x24>)
 8001c22:	6013      	str	r3, [r2, #0]
}
 8001c24:	bf00      	nop
 8001c26:	46bd      	mov	sp, r7
 8001c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2c:	4770      	bx	lr
 8001c2e:	bf00      	nop
 8001c30:	2000003c 	.word	0x2000003c
 8001c34:	200002a4 	.word	0x200002a4

08001c38 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	af00      	add	r7, sp, #0
  return uwTick;
 8001c3c:	4b03      	ldr	r3, [pc, #12]	@ (8001c4c <HAL_GetTick+0x14>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
}
 8001c40:	4618      	mov	r0, r3
 8001c42:	46bd      	mov	sp, r7
 8001c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c48:	4770      	bx	lr
 8001c4a:	bf00      	nop
 8001c4c:	200002a4 	.word	0x200002a4

08001c50 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b084      	sub	sp, #16
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c58:	f7ff ffee 	bl	8001c38 <HAL_GetTick>
 8001c5c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001c68:	d005      	beq.n	8001c76 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c6a:	4b0a      	ldr	r3, [pc, #40]	@ (8001c94 <HAL_Delay+0x44>)
 8001c6c:	781b      	ldrb	r3, [r3, #0]
 8001c6e:	461a      	mov	r2, r3
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	4413      	add	r3, r2
 8001c74:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001c76:	bf00      	nop
 8001c78:	f7ff ffde 	bl	8001c38 <HAL_GetTick>
 8001c7c:	4602      	mov	r2, r0
 8001c7e:	68bb      	ldr	r3, [r7, #8]
 8001c80:	1ad3      	subs	r3, r2, r3
 8001c82:	68fa      	ldr	r2, [r7, #12]
 8001c84:	429a      	cmp	r2, r3
 8001c86:	d8f7      	bhi.n	8001c78 <HAL_Delay+0x28>
  {
  }
}
 8001c88:	bf00      	nop
 8001c8a:	bf00      	nop
 8001c8c:	3710      	adds	r7, #16
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bd80      	pop	{r7, pc}
 8001c92:	bf00      	nop
 8001c94:	2000003c 	.word	0x2000003c

08001c98 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c98:	b480      	push	{r7}
 8001c9a:	b085      	sub	sp, #20
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	f003 0307 	and.w	r3, r3, #7
 8001ca6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ca8:	4b0c      	ldr	r3, [pc, #48]	@ (8001cdc <__NVIC_SetPriorityGrouping+0x44>)
 8001caa:	68db      	ldr	r3, [r3, #12]
 8001cac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001cae:	68ba      	ldr	r2, [r7, #8]
 8001cb0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001cb4:	4013      	ands	r3, r2
 8001cb6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001cbc:	68bb      	ldr	r3, [r7, #8]
 8001cbe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001cc0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001cc4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001cc8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001cca:	4a04      	ldr	r2, [pc, #16]	@ (8001cdc <__NVIC_SetPriorityGrouping+0x44>)
 8001ccc:	68bb      	ldr	r3, [r7, #8]
 8001cce:	60d3      	str	r3, [r2, #12]
}
 8001cd0:	bf00      	nop
 8001cd2:	3714      	adds	r7, #20
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cda:	4770      	bx	lr
 8001cdc:	e000ed00 	.word	0xe000ed00

08001ce0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ce4:	4b04      	ldr	r3, [pc, #16]	@ (8001cf8 <__NVIC_GetPriorityGrouping+0x18>)
 8001ce6:	68db      	ldr	r3, [r3, #12]
 8001ce8:	0a1b      	lsrs	r3, r3, #8
 8001cea:	f003 0307 	and.w	r3, r3, #7
}
 8001cee:	4618      	mov	r0, r3
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf6:	4770      	bx	lr
 8001cf8:	e000ed00 	.word	0xe000ed00

08001cfc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	b083      	sub	sp, #12
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	4603      	mov	r3, r0
 8001d04:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	db0b      	blt.n	8001d26 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d0e:	79fb      	ldrb	r3, [r7, #7]
 8001d10:	f003 021f 	and.w	r2, r3, #31
 8001d14:	4907      	ldr	r1, [pc, #28]	@ (8001d34 <__NVIC_EnableIRQ+0x38>)
 8001d16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d1a:	095b      	lsrs	r3, r3, #5
 8001d1c:	2001      	movs	r0, #1
 8001d1e:	fa00 f202 	lsl.w	r2, r0, r2
 8001d22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001d26:	bf00      	nop
 8001d28:	370c      	adds	r7, #12
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d30:	4770      	bx	lr
 8001d32:	bf00      	nop
 8001d34:	e000e100 	.word	0xe000e100

08001d38 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d38:	b480      	push	{r7}
 8001d3a:	b083      	sub	sp, #12
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	4603      	mov	r3, r0
 8001d40:	6039      	str	r1, [r7, #0]
 8001d42:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	db0a      	blt.n	8001d62 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d4c:	683b      	ldr	r3, [r7, #0]
 8001d4e:	b2da      	uxtb	r2, r3
 8001d50:	490c      	ldr	r1, [pc, #48]	@ (8001d84 <__NVIC_SetPriority+0x4c>)
 8001d52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d56:	0112      	lsls	r2, r2, #4
 8001d58:	b2d2      	uxtb	r2, r2
 8001d5a:	440b      	add	r3, r1
 8001d5c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d60:	e00a      	b.n	8001d78 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d62:	683b      	ldr	r3, [r7, #0]
 8001d64:	b2da      	uxtb	r2, r3
 8001d66:	4908      	ldr	r1, [pc, #32]	@ (8001d88 <__NVIC_SetPriority+0x50>)
 8001d68:	79fb      	ldrb	r3, [r7, #7]
 8001d6a:	f003 030f 	and.w	r3, r3, #15
 8001d6e:	3b04      	subs	r3, #4
 8001d70:	0112      	lsls	r2, r2, #4
 8001d72:	b2d2      	uxtb	r2, r2
 8001d74:	440b      	add	r3, r1
 8001d76:	761a      	strb	r2, [r3, #24]
}
 8001d78:	bf00      	nop
 8001d7a:	370c      	adds	r7, #12
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d82:	4770      	bx	lr
 8001d84:	e000e100 	.word	0xe000e100
 8001d88:	e000ed00 	.word	0xe000ed00

08001d8c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	b089      	sub	sp, #36	@ 0x24
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	60f8      	str	r0, [r7, #12]
 8001d94:	60b9      	str	r1, [r7, #8]
 8001d96:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	f003 0307 	and.w	r3, r3, #7
 8001d9e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001da0:	69fb      	ldr	r3, [r7, #28]
 8001da2:	f1c3 0307 	rsb	r3, r3, #7
 8001da6:	2b04      	cmp	r3, #4
 8001da8:	bf28      	it	cs
 8001daa:	2304      	movcs	r3, #4
 8001dac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001dae:	69fb      	ldr	r3, [r7, #28]
 8001db0:	3304      	adds	r3, #4
 8001db2:	2b06      	cmp	r3, #6
 8001db4:	d902      	bls.n	8001dbc <NVIC_EncodePriority+0x30>
 8001db6:	69fb      	ldr	r3, [r7, #28]
 8001db8:	3b03      	subs	r3, #3
 8001dba:	e000      	b.n	8001dbe <NVIC_EncodePriority+0x32>
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001dc0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001dc4:	69bb      	ldr	r3, [r7, #24]
 8001dc6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dca:	43da      	mvns	r2, r3
 8001dcc:	68bb      	ldr	r3, [r7, #8]
 8001dce:	401a      	ands	r2, r3
 8001dd0:	697b      	ldr	r3, [r7, #20]
 8001dd2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001dd4:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001dd8:	697b      	ldr	r3, [r7, #20]
 8001dda:	fa01 f303 	lsl.w	r3, r1, r3
 8001dde:	43d9      	mvns	r1, r3
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001de4:	4313      	orrs	r3, r2
         );
}
 8001de6:	4618      	mov	r0, r3
 8001de8:	3724      	adds	r7, #36	@ 0x24
 8001dea:	46bd      	mov	sp, r7
 8001dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df0:	4770      	bx	lr

08001df2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001df2:	b580      	push	{r7, lr}
 8001df4:	b082      	sub	sp, #8
 8001df6:	af00      	add	r7, sp, #0
 8001df8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001dfa:	6878      	ldr	r0, [r7, #4]
 8001dfc:	f7ff ff4c 	bl	8001c98 <__NVIC_SetPriorityGrouping>
}
 8001e00:	bf00      	nop
 8001e02:	3708      	adds	r7, #8
 8001e04:	46bd      	mov	sp, r7
 8001e06:	bd80      	pop	{r7, pc}

08001e08 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b086      	sub	sp, #24
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	4603      	mov	r3, r0
 8001e10:	60b9      	str	r1, [r7, #8]
 8001e12:	607a      	str	r2, [r7, #4]
 8001e14:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001e16:	f7ff ff63 	bl	8001ce0 <__NVIC_GetPriorityGrouping>
 8001e1a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e1c:	687a      	ldr	r2, [r7, #4]
 8001e1e:	68b9      	ldr	r1, [r7, #8]
 8001e20:	6978      	ldr	r0, [r7, #20]
 8001e22:	f7ff ffb3 	bl	8001d8c <NVIC_EncodePriority>
 8001e26:	4602      	mov	r2, r0
 8001e28:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e2c:	4611      	mov	r1, r2
 8001e2e:	4618      	mov	r0, r3
 8001e30:	f7ff ff82 	bl	8001d38 <__NVIC_SetPriority>
}
 8001e34:	bf00      	nop
 8001e36:	3718      	adds	r7, #24
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	bd80      	pop	{r7, pc}

08001e3c <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32u5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b082      	sub	sp, #8
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	4603      	mov	r3, r0
 8001e44:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	f7ff ff56 	bl	8001cfc <__NVIC_EnableIRQ>
}
 8001e50:	bf00      	nop
 8001e52:	3708      	adds	r7, #8
 8001e54:	46bd      	mov	sp, r7
 8001e56:	bd80      	pop	{r7, pc}

08001e58 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8001e58:	b480      	push	{r7}
 8001e5a:	b083      	sub	sp, #12
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	2b04      	cmp	r3, #4
 8001e64:	d844      	bhi.n	8001ef0 <HAL_SYSTICK_CLKSourceConfig+0x98>
 8001e66:	a201      	add	r2, pc, #4	@ (adr r2, 8001e6c <HAL_SYSTICK_CLKSourceConfig+0x14>)
 8001e68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e6c:	08001e8f 	.word	0x08001e8f
 8001e70:	08001ead 	.word	0x08001ead
 8001e74:	08001ecf 	.word	0x08001ecf
 8001e78:	08001ef1 	.word	0x08001ef1
 8001e7c:	08001e81 	.word	0x08001e81
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8001e80:	4b1f      	ldr	r3, [pc, #124]	@ (8001f00 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	4a1e      	ldr	r2, [pc, #120]	@ (8001f00 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001e86:	f043 0304 	orr.w	r3, r3, #4
 8001e8a:	6013      	str	r3, [r2, #0]
      break;
 8001e8c:	e031      	b.n	8001ef2 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8001e8e:	4b1c      	ldr	r3, [pc, #112]	@ (8001f00 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	4a1b      	ldr	r2, [pc, #108]	@ (8001f00 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001e94:	f023 0304 	bic.w	r3, r3, #4
 8001e98:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, (0x00000000U));
 8001e9a:	4b1a      	ldr	r3, [pc, #104]	@ (8001f04 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001e9c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001ea0:	4a18      	ldr	r2, [pc, #96]	@ (8001f04 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001ea2:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8001ea6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 8001eaa:	e022      	b.n	8001ef2 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8001eac:	4b14      	ldr	r3, [pc, #80]	@ (8001f00 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	4a13      	ldr	r2, [pc, #76]	@ (8001f00 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001eb2:	f023 0304 	bic.w	r3, r3, #4
 8001eb6:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_0);
 8001eb8:	4b12      	ldr	r3, [pc, #72]	@ (8001f04 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001eba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001ebe:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8001ec2:	4a10      	ldr	r2, [pc, #64]	@ (8001f04 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001ec4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001ec8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 8001ecc:	e011      	b.n	8001ef2 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8001ece:	4b0c      	ldr	r3, [pc, #48]	@ (8001f00 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	4a0b      	ldr	r2, [pc, #44]	@ (8001f00 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001ed4:	f023 0304 	bic.w	r3, r3, #4
 8001ed8:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_1);
 8001eda:	4b0a      	ldr	r3, [pc, #40]	@ (8001f04 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001edc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001ee0:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8001ee4:	4a07      	ldr	r2, [pc, #28]	@ (8001f04 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001ee6:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001eea:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 8001eee:	e000      	b.n	8001ef2 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 8001ef0:	bf00      	nop
  }
}
 8001ef2:	bf00      	nop
 8001ef4:	370c      	adds	r7, #12
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efc:	4770      	bx	lr
 8001efe:	bf00      	nop
 8001f00:	e000e010 	.word	0xe000e010
 8001f04:	46020c00 	.word	0x46020c00

08001f08 <HAL_DMA_Abort_IT>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *const hdma)
{
 8001f08:	b480      	push	{r7}
 8001f0a:	b083      	sub	sp, #12
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d101      	bne.n	8001f1a <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8001f16:	2301      	movs	r3, #1
 8001f18:	e019      	b.n	8001f4e <HAL_DMA_Abort_IT+0x46>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8001f20:	b2db      	uxtb	r3, r3
 8001f22:	2b02      	cmp	r3, #2
 8001f24:	d004      	beq.n	8001f30 <HAL_DMA_Abort_IT+0x28>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	2220      	movs	r2, #32
 8001f2a:	659a      	str	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8001f2c:	2301      	movs	r3, #1
 8001f2e:	e00e      	b.n	8001f4e <HAL_DMA_Abort_IT+0x46>
  }
  else
  {
    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	2204      	movs	r2, #4
 8001f34:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Suspend the channel and activate suspend interrupt */
    hdma->Instance->CCR |= (DMA_CCR_SUSP | DMA_CCR_SUSPIE);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	695b      	ldr	r3, [r3, #20]
 8001f3e:	687a      	ldr	r2, [r7, #4]
 8001f40:	6812      	ldr	r2, [r2, #0]
 8001f42:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001f46:	f043 0304 	orr.w	r3, r3, #4
 8001f4a:	6153      	str	r3, [r2, #20]
  }

  return HAL_OK;
 8001f4c:	2300      	movs	r3, #0
}
 8001f4e:	4618      	mov	r0, r3
 8001f50:	370c      	adds	r7, #12
 8001f52:	46bd      	mov	sp, r7
 8001f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f58:	4770      	bx	lr

08001f5a <HAL_DMA_GetState>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval DMA state.
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef const *const hdma)
{
 8001f5a:	b480      	push	{r7}
 8001f5c:	b083      	sub	sp, #12
 8001f5e:	af00      	add	r7, sp, #0
 8001f60:	6078      	str	r0, [r7, #4]
  /* Return the DMA channel state */
  return hdma->State;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8001f68:	b2db      	uxtb	r3, r3
}
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	370c      	adds	r7, #12
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f74:	4770      	bx	lr

08001f76 <HAL_DMAEx_GetFifoLevel>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval Returns the number of available beats in FIFO.
  */
uint32_t HAL_DMAEx_GetFifoLevel(DMA_HandleTypeDef const *const hdma)
{
 8001f76:	b480      	push	{r7}
 8001f78:	b083      	sub	sp, #12
 8001f7a:	af00      	add	r7, sp, #0
 8001f7c:	6078      	str	r0, [r7, #4]
  return ((hdma->Instance->CSR & DMA_CSR_FIFOL) >> DMA_CSR_FIFOL_Pos);
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	691b      	ldr	r3, [r3, #16]
 8001f84:	0c1b      	lsrs	r3, r3, #16
 8001f86:	b2db      	uxtb	r3, r3
}
 8001f88:	4618      	mov	r0, r3
 8001f8a:	370c      	adds	r7, #12
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f92:	4770      	bx	lr

08001f94 <HAL_EXTI_RegisterCallback>:
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID,
                                            void (*pPendingCbfn)(void))
{
 8001f94:	b480      	push	{r7}
 8001f96:	b087      	sub	sp, #28
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	60f8      	str	r0, [r7, #12]
 8001f9c:	460b      	mov	r3, r1
 8001f9e:	607a      	str	r2, [r7, #4]
 8001fa0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	75fb      	strb	r3, [r7, #23]

  switch (CallbackID)
 8001fa6:	7afb      	ldrb	r3, [r7, #11]
 8001fa8:	2b02      	cmp	r3, #2
 8001faa:	d011      	beq.n	8001fd0 <HAL_EXTI_RegisterCallback+0x3c>
 8001fac:	2b02      	cmp	r3, #2
 8001fae:	dc13      	bgt.n	8001fd8 <HAL_EXTI_RegisterCallback+0x44>
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d002      	beq.n	8001fba <HAL_EXTI_RegisterCallback+0x26>
 8001fb4:	2b01      	cmp	r3, #1
 8001fb6:	d007      	beq.n	8001fc8 <HAL_EXTI_RegisterCallback+0x34>
 8001fb8:	e00e      	b.n	8001fd8 <HAL_EXTI_RegisterCallback+0x44>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->RisingCallback = pPendingCbfn;
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	687a      	ldr	r2, [r7, #4]
 8001fbe:	605a      	str	r2, [r3, #4]
      hexti->FallingCallback = pPendingCbfn;
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	687a      	ldr	r2, [r7, #4]
 8001fc4:	609a      	str	r2, [r3, #8]
      break;
 8001fc6:	e00a      	b.n	8001fde <HAL_EXTI_RegisterCallback+0x4a>

    case  HAL_EXTI_RISING_CB_ID:
      hexti->RisingCallback = pPendingCbfn;
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	687a      	ldr	r2, [r7, #4]
 8001fcc:	605a      	str	r2, [r3, #4]
      break;
 8001fce:	e006      	b.n	8001fde <HAL_EXTI_RegisterCallback+0x4a>

    case  HAL_EXTI_FALLING_CB_ID:
      hexti->FallingCallback = pPendingCbfn;
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	687a      	ldr	r2, [r7, #4]
 8001fd4:	609a      	str	r2, [r3, #8]
      break;
 8001fd6:	e002      	b.n	8001fde <HAL_EXTI_RegisterCallback+0x4a>

    default:
      status = HAL_ERROR;
 8001fd8:	2301      	movs	r3, #1
 8001fda:	75fb      	strb	r3, [r7, #23]
      break;
 8001fdc:	bf00      	nop
  }

  return status;
 8001fde:	7dfb      	ldrb	r3, [r7, #23]
}
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	371c      	adds	r7, #28
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fea:	4770      	bx	lr

08001fec <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 8001fec:	b480      	push	{r7}
 8001fee:	b083      	sub	sp, #12
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
 8001ff4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d101      	bne.n	8002000 <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 8001ffc:	2301      	movs	r3, #1
 8001ffe:	e003      	b.n	8002008 <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	683a      	ldr	r2, [r7, #0]
 8002004:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8002006:	2300      	movs	r3, #0
  }
}
 8002008:	4618      	mov	r0, r3
 800200a:	370c      	adds	r7, #12
 800200c:	46bd      	mov	sp, r7
 800200e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002012:	4770      	bx	lr

08002014 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(const EXTI_HandleTypeDef *hexti)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	b086      	sub	sp, #24
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	0c1b      	lsrs	r3, r3, #16
 8002022:	f003 0301 	and.w	r3, r3, #1
 8002026:	617b      	str	r3, [r7, #20]
  maskline = (1UL << (hexti->Line & EXTI_PIN_MASK));
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f003 031f 	and.w	r3, r3, #31
 8002030:	2201      	movs	r2, #1
 8002032:	fa02 f303 	lsl.w	r3, r2, r3
 8002036:	613b      	str	r3, [r7, #16]

  /* Get rising edge pending bit  */
  regaddr = (__IO uint32_t *)(&EXTI->RPR1 + (EXTI_CONFIG_OFFSET * offset));
 8002038:	697b      	ldr	r3, [r7, #20]
 800203a:	015a      	lsls	r2, r3, #5
 800203c:	4b17      	ldr	r3, [pc, #92]	@ (800209c <HAL_EXTI_IRQHandler+0x88>)
 800203e:	4413      	add	r3, r2
 8002040:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	693a      	ldr	r2, [r7, #16]
 8002048:	4013      	ands	r3, r2
 800204a:	60bb      	str	r3, [r7, #8]

  if (regval != 0U)
 800204c:	68bb      	ldr	r3, [r7, #8]
 800204e:	2b00      	cmp	r3, #0
 8002050:	d009      	beq.n	8002066 <HAL_EXTI_IRQHandler+0x52>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	693a      	ldr	r2, [r7, #16]
 8002056:	601a      	str	r2, [r3, #0]

    /* Call rising callback */
    if (hexti->RisingCallback != NULL)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	685b      	ldr	r3, [r3, #4]
 800205c:	2b00      	cmp	r3, #0
 800205e:	d002      	beq.n	8002066 <HAL_EXTI_IRQHandler+0x52>
    {
      hexti->RisingCallback();
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	685b      	ldr	r3, [r3, #4]
 8002064:	4798      	blx	r3
    }
  }

  /* Get falling edge pending bit  */
  regaddr = (__IO uint32_t *)(&EXTI->FPR1 + (EXTI_CONFIG_OFFSET * offset));
 8002066:	697b      	ldr	r3, [r7, #20]
 8002068:	015a      	lsls	r2, r3, #5
 800206a:	4b0d      	ldr	r3, [pc, #52]	@ (80020a0 <HAL_EXTI_IRQHandler+0x8c>)
 800206c:	4413      	add	r3, r2
 800206e:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	693a      	ldr	r2, [r7, #16]
 8002076:	4013      	ands	r3, r2
 8002078:	60bb      	str	r3, [r7, #8]

  if (regval != 0U)
 800207a:	68bb      	ldr	r3, [r7, #8]
 800207c:	2b00      	cmp	r3, #0
 800207e:	d009      	beq.n	8002094 <HAL_EXTI_IRQHandler+0x80>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	693a      	ldr	r2, [r7, #16]
 8002084:	601a      	str	r2, [r3, #0]

    /* Call rising callback */
    if (hexti->FallingCallback != NULL)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	689b      	ldr	r3, [r3, #8]
 800208a:	2b00      	cmp	r3, #0
 800208c:	d002      	beq.n	8002094 <HAL_EXTI_IRQHandler+0x80>
    {
      hexti->FallingCallback();
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	689b      	ldr	r3, [r3, #8]
 8002092:	4798      	blx	r3
    }
  }
}
 8002094:	bf00      	nop
 8002096:	3718      	adds	r7, #24
 8002098:	46bd      	mov	sp, r7
 800209a:	bd80      	pop	{r7, pc}
 800209c:	4602200c 	.word	0x4602200c
 80020a0:	46022010 	.word	0x46022010

080020a4 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 80020a4:	b480      	push	{r7}
 80020a6:	b089      	sub	sp, #36	@ 0x24
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
 80020ac:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 80020ae:	2300      	movs	r3, #0
 80020b0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	613b      	str	r3, [r7, #16]

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80020b6:	e1c2      	b.n	800243e <HAL_GPIO_Init+0x39a>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 80020b8:	683b      	ldr	r3, [r7, #0]
 80020ba:	681a      	ldr	r2, [r3, #0]
 80020bc:	2101      	movs	r1, #1
 80020be:	697b      	ldr	r3, [r7, #20]
 80020c0:	fa01 f303 	lsl.w	r3, r1, r3
 80020c4:	4013      	ands	r3, r2
 80020c6:	60fb      	str	r3, [r7, #12]

    /* Save Pin Position */
    pin_position = position;
 80020c8:	697b      	ldr	r3, [r7, #20]
 80020ca:	61bb      	str	r3, [r7, #24]

    if (iocurrent != 0U)
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	f000 81b2 	beq.w	8002438 <HAL_GPIO_Init+0x394>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if (GPIOx == LPGPIO1)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	4a55      	ldr	r2, [pc, #340]	@ (800222c <HAL_GPIO_Init+0x188>)
 80020d8:	4293      	cmp	r3, r2
 80020da:	d15d      	bne.n	8002198 <HAL_GPIO_Init+0xf4>
      {
        /* MODER configuration */
        tmp = GPIOx->MODER;
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	61fb      	str	r3, [r7, #28]
        tmp &= ~(LPGPIO_MODER_MOD0 << position);
 80020e2:	2201      	movs	r2, #1
 80020e4:	697b      	ldr	r3, [r7, #20]
 80020e6:	fa02 f303 	lsl.w	r3, r2, r3
 80020ea:	43db      	mvns	r3, r3
 80020ec:	69fa      	ldr	r2, [r7, #28]
 80020ee:	4013      	ands	r3, r2
 80020f0:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE_OUTPUT_PP) << position);
 80020f2:	683b      	ldr	r3, [r7, #0]
 80020f4:	685b      	ldr	r3, [r3, #4]
 80020f6:	f003 0201 	and.w	r2, r3, #1
 80020fa:	697b      	ldr	r3, [r7, #20]
 80020fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002100:	69fa      	ldr	r2, [r7, #28]
 8002102:	4313      	orrs	r3, r2
 8002104:	61fb      	str	r3, [r7, #28]
        GPIOx->MODER = tmp;
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	69fa      	ldr	r2, [r7, #28]
 800210a:	601a      	str	r2, [r3, #0]

        /* Save GPIO Port and pin index */
        p_gpio = LPGPIO_Map[position].GPIO_PORT;
 800210c:	4a48      	ldr	r2, [pc, #288]	@ (8002230 <HAL_GPIO_Init+0x18c>)
 800210e:	697b      	ldr	r3, [r7, #20]
 8002110:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002114:	613b      	str	r3, [r7, #16]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 8002116:	4a46      	ldr	r2, [pc, #280]	@ (8002230 <HAL_GPIO_Init+0x18c>)
 8002118:	697b      	ldr	r3, [r7, #20]
 800211a:	00db      	lsls	r3, r3, #3
 800211c:	4413      	add	r3, r2
 800211e:	685b      	ldr	r3, [r3, #4]
 8002120:	61bb      	str	r3, [r7, #24]

        /* Configure Alternate function mapped with the current IO */
        tmp = p_gpio->AFR[(pin_position) >> 3U];
 8002122:	69bb      	ldr	r3, [r7, #24]
 8002124:	08da      	lsrs	r2, r3, #3
 8002126:	693b      	ldr	r3, [r7, #16]
 8002128:	3208      	adds	r2, #8
 800212a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800212e:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << (((pin_position) & 0x07U) * 4U));
 8002130:	69bb      	ldr	r3, [r7, #24]
 8002132:	f003 0307 	and.w	r3, r3, #7
 8002136:	009b      	lsls	r3, r3, #2
 8002138:	220f      	movs	r2, #15
 800213a:	fa02 f303 	lsl.w	r3, r2, r3
 800213e:	43db      	mvns	r3, r3
 8002140:	69fa      	ldr	r2, [r7, #28]
 8002142:	4013      	ands	r3, r2
 8002144:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_AF11_LPGPIO1 & 0x0FUL) << (((pin_position) & 0x07U) * 4U));
 8002146:	69bb      	ldr	r3, [r7, #24]
 8002148:	f003 0307 	and.w	r3, r3, #7
 800214c:	009b      	lsls	r3, r3, #2
 800214e:	220b      	movs	r2, #11
 8002150:	fa02 f303 	lsl.w	r3, r2, r3
 8002154:	69fa      	ldr	r2, [r7, #28]
 8002156:	4313      	orrs	r3, r2
 8002158:	61fb      	str	r3, [r7, #28]
        p_gpio->AFR[(pin_position) >> 3U] = tmp;
 800215a:	69bb      	ldr	r3, [r7, #24]
 800215c:	08da      	lsrs	r2, r3, #3
 800215e:	693b      	ldr	r3, [r7, #16]
 8002160:	3208      	adds	r2, #8
 8002162:	69f9      	ldr	r1, [r7, #28]
 8002164:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8002168:	693b      	ldr	r3, [r7, #16]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 800216e:	69bb      	ldr	r3, [r7, #24]
 8002170:	005b      	lsls	r3, r3, #1
 8002172:	2203      	movs	r2, #3
 8002174:	fa02 f303 	lsl.w	r3, r2, r3
 8002178:	43db      	mvns	r3, r3
 800217a:	69fa      	ldr	r2, [r7, #28]
 800217c:	4013      	ands	r3, r2
 800217e:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_MODE_AF_PP & 0x0FUL) << (pin_position * GPIO_MODER_MODE1_Pos));
 8002180:	69bb      	ldr	r3, [r7, #24]
 8002182:	005b      	lsls	r3, r3, #1
 8002184:	2202      	movs	r2, #2
 8002186:	fa02 f303 	lsl.w	r3, r2, r3
 800218a:	69fa      	ldr	r2, [r7, #28]
 800218c:	4313      	orrs	r3, r2
 800218e:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8002190:	693b      	ldr	r3, [r7, #16]
 8002192:	69fa      	ldr	r2, [r7, #28]
 8002194:	601a      	str	r2, [r3, #0]
 8002196:	e067      	b.n	8002268 <HAL_GPIO_Init+0x1c4>
      }
      else if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	685b      	ldr	r3, [r3, #4]
 800219c:	2b02      	cmp	r3, #2
 800219e:	d003      	beq.n	80021a8 <HAL_GPIO_Init+0x104>
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	685b      	ldr	r3, [r3, #4]
 80021a4:	2b12      	cmp	r3, #18
 80021a6:	d145      	bne.n	8002234 <HAL_GPIO_Init+0x190>
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 80021a8:	697b      	ldr	r3, [r7, #20]
 80021aa:	08da      	lsrs	r2, r3, #3
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	3208      	adds	r2, #8
 80021b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80021b4:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 80021b6:	697b      	ldr	r3, [r7, #20]
 80021b8:	f003 0307 	and.w	r3, r3, #7
 80021bc:	009b      	lsls	r3, r3, #2
 80021be:	220f      	movs	r2, #15
 80021c0:	fa02 f303 	lsl.w	r3, r2, r3
 80021c4:	43db      	mvns	r3, r3
 80021c6:	69fa      	ldr	r2, [r7, #28]
 80021c8:	4013      	ands	r3, r2
 80021ca:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 80021cc:	683b      	ldr	r3, [r7, #0]
 80021ce:	691b      	ldr	r3, [r3, #16]
 80021d0:	f003 020f 	and.w	r2, r3, #15
 80021d4:	697b      	ldr	r3, [r7, #20]
 80021d6:	f003 0307 	and.w	r3, r3, #7
 80021da:	009b      	lsls	r3, r3, #2
 80021dc:	fa02 f303 	lsl.w	r3, r2, r3
 80021e0:	69fa      	ldr	r2, [r7, #28]
 80021e2:	4313      	orrs	r3, r2
 80021e4:	61fb      	str	r3, [r7, #28]
        GPIOx->AFR[position >> 3U] = tmp;
 80021e6:	697b      	ldr	r3, [r7, #20]
 80021e8:	08da      	lsrs	r2, r3, #3
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	3208      	adds	r2, #8
 80021ee:	69f9      	ldr	r1, [r7, #28]
 80021f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 80021f4:	693b      	ldr	r3, [r7, #16]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 80021fa:	69bb      	ldr	r3, [r7, #24]
 80021fc:	005b      	lsls	r3, r3, #1
 80021fe:	2203      	movs	r2, #3
 8002200:	fa02 f303 	lsl.w	r3, r2, r3
 8002204:	43db      	mvns	r3, r3
 8002206:	69fa      	ldr	r2, [r7, #28]
 8002208:	4013      	ands	r3, r2
 800220a:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 800220c:	683b      	ldr	r3, [r7, #0]
 800220e:	685b      	ldr	r3, [r3, #4]
 8002210:	f003 0203 	and.w	r2, r3, #3
 8002214:	69bb      	ldr	r3, [r7, #24]
 8002216:	005b      	lsls	r3, r3, #1
 8002218:	fa02 f303 	lsl.w	r3, r2, r3
 800221c:	69fa      	ldr	r2, [r7, #28]
 800221e:	4313      	orrs	r3, r2
 8002220:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8002222:	693b      	ldr	r3, [r7, #16]
 8002224:	69fa      	ldr	r2, [r7, #28]
 8002226:	601a      	str	r2, [r3, #0]
 8002228:	e01e      	b.n	8002268 <HAL_GPIO_Init+0x1c4>
 800222a:	bf00      	nop
 800222c:	46020000 	.word	0x46020000
 8002230:	0800a7c8 	.word	0x0800a7c8
      {
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
        tmp = p_gpio->MODER;
 8002234:	693b      	ldr	r3, [r7, #16]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 800223a:	69bb      	ldr	r3, [r7, #24]
 800223c:	005b      	lsls	r3, r3, #1
 800223e:	2203      	movs	r2, #3
 8002240:	fa02 f303 	lsl.w	r3, r2, r3
 8002244:	43db      	mvns	r3, r3
 8002246:	69fa      	ldr	r2, [r7, #28]
 8002248:	4013      	ands	r3, r2
 800224a:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	685b      	ldr	r3, [r3, #4]
 8002250:	f003 0203 	and.w	r2, r3, #3
 8002254:	69bb      	ldr	r3, [r7, #24]
 8002256:	005b      	lsls	r3, r3, #1
 8002258:	fa02 f303 	lsl.w	r3, r2, r3
 800225c:	69fa      	ldr	r2, [r7, #28]
 800225e:	4313      	orrs	r3, r2
 8002260:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8002262:	693b      	ldr	r3, [r7, #16]
 8002264:	69fa      	ldr	r2, [r7, #28]
 8002266:	601a      	str	r2, [r3, #0]
      }

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	685b      	ldr	r3, [r3, #4]
 800226c:	2b01      	cmp	r3, #1
 800226e:	d00b      	beq.n	8002288 <HAL_GPIO_Init+0x1e4>
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	685b      	ldr	r3, [r3, #4]
 8002274:	2b02      	cmp	r3, #2
 8002276:	d007      	beq.n	8002288 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800227c:	2b11      	cmp	r3, #17
 800227e:	d003      	beq.n	8002288 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002280:	683b      	ldr	r3, [r7, #0]
 8002282:	685b      	ldr	r3, [r3, #4]
 8002284:	2b12      	cmp	r3, #18
 8002286:	d130      	bne.n	80022ea <HAL_GPIO_Init+0x246>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = p_gpio->OSPEEDR;
 8002288:	693b      	ldr	r3, [r7, #16]
 800228a:	689b      	ldr	r3, [r3, #8]
 800228c:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 800228e:	69bb      	ldr	r3, [r7, #24]
 8002290:	005b      	lsls	r3, r3, #1
 8002292:	2203      	movs	r2, #3
 8002294:	fa02 f303 	lsl.w	r3, r2, r3
 8002298:	43db      	mvns	r3, r3
 800229a:	69fa      	ldr	r2, [r7, #28]
 800229c:	4013      	ands	r3, r2
 800229e:	61fb      	str	r3, [r7, #28]
        tmp |= (pGPIO_Init->Speed << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 80022a0:	683b      	ldr	r3, [r7, #0]
 80022a2:	68da      	ldr	r2, [r3, #12]
 80022a4:	69bb      	ldr	r3, [r7, #24]
 80022a6:	005b      	lsls	r3, r3, #1
 80022a8:	fa02 f303 	lsl.w	r3, r2, r3
 80022ac:	69fa      	ldr	r2, [r7, #28]
 80022ae:	4313      	orrs	r3, r2
 80022b0:	61fb      	str	r3, [r7, #28]
        p_gpio->OSPEEDR = tmp;
 80022b2:	693b      	ldr	r3, [r7, #16]
 80022b4:	69fa      	ldr	r2, [r7, #28]
 80022b6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = p_gpio->OTYPER;
 80022b8:	693b      	ldr	r3, [r7, #16]
 80022ba:	685b      	ldr	r3, [r3, #4]
 80022bc:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OTYPER_OT0 << pin_position);
 80022be:	2201      	movs	r2, #1
 80022c0:	69bb      	ldr	r3, [r7, #24]
 80022c2:	fa02 f303 	lsl.w	r3, r2, r3
 80022c6:	43db      	mvns	r3, r3
 80022c8:	69fa      	ldr	r2, [r7, #28]
 80022ca:	4013      	ands	r3, r2
 80022cc:	61fb      	str	r3, [r7, #28]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 80022ce:	683b      	ldr	r3, [r7, #0]
 80022d0:	685b      	ldr	r3, [r3, #4]
 80022d2:	091b      	lsrs	r3, r3, #4
 80022d4:	f003 0201 	and.w	r2, r3, #1
 80022d8:	69bb      	ldr	r3, [r7, #24]
 80022da:	fa02 f303 	lsl.w	r3, r2, r3
 80022de:	69fa      	ldr	r2, [r7, #28]
 80022e0:	4313      	orrs	r3, r2
 80022e2:	61fb      	str	r3, [r7, #28]
        p_gpio->OTYPER = tmp;
 80022e4:	693b      	ldr	r3, [r7, #16]
 80022e6:	69fa      	ldr	r2, [r7, #28]
 80022e8:	605a      	str	r2, [r3, #4]
      }

      if ((pGPIO_Init->Mode != GPIO_MODE_ANALOG) || 
 80022ea:	683b      	ldr	r3, [r7, #0]
 80022ec:	685b      	ldr	r3, [r3, #4]
 80022ee:	2b03      	cmp	r3, #3
 80022f0:	d107      	bne.n	8002302 <HAL_GPIO_Init+0x25e>
          ((pGPIO_Init->Mode == GPIO_MODE_ANALOG) && (pGPIO_Init->Pull != GPIO_PULLUP)))
 80022f2:	683b      	ldr	r3, [r7, #0]
 80022f4:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode != GPIO_MODE_ANALOG) || 
 80022f6:	2b03      	cmp	r3, #3
 80022f8:	d11b      	bne.n	8002332 <HAL_GPIO_Init+0x28e>
          ((pGPIO_Init->Mode == GPIO_MODE_ANALOG) && (pGPIO_Init->Pull != GPIO_PULLUP)))
 80022fa:	683b      	ldr	r3, [r7, #0]
 80022fc:	689b      	ldr	r3, [r3, #8]
 80022fe:	2b01      	cmp	r3, #1
 8002300:	d017      	beq.n	8002332 <HAL_GPIO_Init+0x28e>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = p_gpio->PUPDR;
 8002302:	693b      	ldr	r3, [r7, #16]
 8002304:	68db      	ldr	r3, [r3, #12]
 8002306:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 8002308:	69bb      	ldr	r3, [r7, #24]
 800230a:	005b      	lsls	r3, r3, #1
 800230c:	2203      	movs	r2, #3
 800230e:	fa02 f303 	lsl.w	r3, r2, r3
 8002312:	43db      	mvns	r3, r3
 8002314:	69fa      	ldr	r2, [r7, #28]
 8002316:	4013      	ands	r3, r2
 8002318:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Pull) << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 800231a:	683b      	ldr	r3, [r7, #0]
 800231c:	689a      	ldr	r2, [r3, #8]
 800231e:	69bb      	ldr	r3, [r7, #24]
 8002320:	005b      	lsls	r3, r3, #1
 8002322:	fa02 f303 	lsl.w	r3, r2, r3
 8002326:	69fa      	ldr	r2, [r7, #28]
 8002328:	4313      	orrs	r3, r2
 800232a:	61fb      	str	r3, [r7, #28]
        p_gpio->PUPDR = tmp;
 800232c:	693b      	ldr	r3, [r7, #16]
 800232e:	69fa      	ldr	r2, [r7, #28]
 8002330:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002332:	683b      	ldr	r3, [r7, #0]
 8002334:	685b      	ldr	r3, [r3, #4]
 8002336:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800233a:	2b00      	cmp	r3, #0
 800233c:	d07c      	beq.n	8002438 <HAL_GPIO_Init+0x394>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 800233e:	4a47      	ldr	r2, [pc, #284]	@ (800245c <HAL_GPIO_Init+0x3b8>)
 8002340:	697b      	ldr	r3, [r7, #20]
 8002342:	089b      	lsrs	r3, r3, #2
 8002344:	3318      	adds	r3, #24
 8002346:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800234a:	61fb      	str	r3, [r7, #28]
        tmp &= ~((0x0FUL) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 800234c:	697b      	ldr	r3, [r7, #20]
 800234e:	f003 0303 	and.w	r3, r3, #3
 8002352:	00db      	lsls	r3, r3, #3
 8002354:	220f      	movs	r2, #15
 8002356:	fa02 f303 	lsl.w	r3, r2, r3
 800235a:	43db      	mvns	r3, r3
 800235c:	69fa      	ldr	r2, [r7, #28]
 800235e:	4013      	ands	r3, r2
 8002360:	61fb      	str	r3, [r7, #28]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	0a9a      	lsrs	r2, r3, #10
 8002366:	4b3e      	ldr	r3, [pc, #248]	@ (8002460 <HAL_GPIO_Init+0x3bc>)
 8002368:	4013      	ands	r3, r2
 800236a:	697a      	ldr	r2, [r7, #20]
 800236c:	f002 0203 	and.w	r2, r2, #3
 8002370:	00d2      	lsls	r2, r2, #3
 8002372:	4093      	lsls	r3, r2
 8002374:	69fa      	ldr	r2, [r7, #28]
 8002376:	4313      	orrs	r3, r2
 8002378:	61fb      	str	r3, [r7, #28]
        EXTI->EXTICR[position >> 2U] = tmp;
 800237a:	4938      	ldr	r1, [pc, #224]	@ (800245c <HAL_GPIO_Init+0x3b8>)
 800237c:	697b      	ldr	r3, [r7, #20]
 800237e:	089b      	lsrs	r3, r3, #2
 8002380:	3318      	adds	r3, #24
 8002382:	69fa      	ldr	r2, [r7, #28]
 8002384:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8002388:	4b34      	ldr	r3, [pc, #208]	@ (800245c <HAL_GPIO_Init+0x3b8>)
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	43db      	mvns	r3, r3
 8002392:	69fa      	ldr	r2, [r7, #28]
 8002394:	4013      	ands	r3, r2
 8002396:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	685b      	ldr	r3, [r3, #4]
 800239c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d003      	beq.n	80023ac <HAL_GPIO_Init+0x308>
        {
          tmp |= iocurrent;
 80023a4:	69fa      	ldr	r2, [r7, #28]
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	4313      	orrs	r3, r2
 80023aa:	61fb      	str	r3, [r7, #28]
        }
        EXTI->RTSR1 = tmp;
 80023ac:	4a2b      	ldr	r2, [pc, #172]	@ (800245c <HAL_GPIO_Init+0x3b8>)
 80023ae:	69fb      	ldr	r3, [r7, #28]
 80023b0:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 80023b2:	4b2a      	ldr	r3, [pc, #168]	@ (800245c <HAL_GPIO_Init+0x3b8>)
 80023b4:	685b      	ldr	r3, [r3, #4]
 80023b6:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	43db      	mvns	r3, r3
 80023bc:	69fa      	ldr	r2, [r7, #28]
 80023be:	4013      	ands	r3, r2
 80023c0:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80023c2:	683b      	ldr	r3, [r7, #0]
 80023c4:	685b      	ldr	r3, [r3, #4]
 80023c6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d003      	beq.n	80023d6 <HAL_GPIO_Init+0x332>
        {
          tmp |= iocurrent;
 80023ce:	69fa      	ldr	r2, [r7, #28]
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	4313      	orrs	r3, r2
 80023d4:	61fb      	str	r3, [r7, #28]
        }
        EXTI->FTSR1 = tmp;
 80023d6:	4a21      	ldr	r2, [pc, #132]	@ (800245c <HAL_GPIO_Init+0x3b8>)
 80023d8:	69fb      	ldr	r3, [r7, #28]
 80023da:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 80023dc:	4b1f      	ldr	r3, [pc, #124]	@ (800245c <HAL_GPIO_Init+0x3b8>)
 80023de:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80023e2:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	43db      	mvns	r3, r3
 80023e8:	69fa      	ldr	r2, [r7, #28]
 80023ea:	4013      	ands	r3, r2
 80023ec:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80023ee:	683b      	ldr	r3, [r7, #0]
 80023f0:	685b      	ldr	r3, [r3, #4]
 80023f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d003      	beq.n	8002402 <HAL_GPIO_Init+0x35e>
        {
          tmp |= iocurrent;
 80023fa:	69fa      	ldr	r2, [r7, #28]
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	4313      	orrs	r3, r2
 8002400:	61fb      	str	r3, [r7, #28]
        }
        EXTI->EMR1 = tmp;
 8002402:	4a16      	ldr	r2, [pc, #88]	@ (800245c <HAL_GPIO_Init+0x3b8>)
 8002404:	69fb      	ldr	r3, [r7, #28]
 8002406:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        tmp = EXTI->IMR1;
 800240a:	4b14      	ldr	r3, [pc, #80]	@ (800245c <HAL_GPIO_Init+0x3b8>)
 800240c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002410:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	43db      	mvns	r3, r3
 8002416:	69fa      	ldr	r2, [r7, #28]
 8002418:	4013      	ands	r3, r2
 800241a:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800241c:	683b      	ldr	r3, [r7, #0]
 800241e:	685b      	ldr	r3, [r3, #4]
 8002420:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002424:	2b00      	cmp	r3, #0
 8002426:	d003      	beq.n	8002430 <HAL_GPIO_Init+0x38c>
        {
          tmp |= iocurrent;
 8002428:	69fa      	ldr	r2, [r7, #28]
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	4313      	orrs	r3, r2
 800242e:	61fb      	str	r3, [r7, #28]
        }
        EXTI->IMR1 = tmp;
 8002430:	4a0a      	ldr	r2, [pc, #40]	@ (800245c <HAL_GPIO_Init+0x3b8>)
 8002432:	69fb      	ldr	r3, [r7, #28]
 8002434:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }
    position++;
 8002438:	697b      	ldr	r3, [r7, #20]
 800243a:	3301      	adds	r3, #1
 800243c:	617b      	str	r3, [r7, #20]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 800243e:	683b      	ldr	r3, [r7, #0]
 8002440:	681a      	ldr	r2, [r3, #0]
 8002442:	697b      	ldr	r3, [r7, #20]
 8002444:	fa22 f303 	lsr.w	r3, r2, r3
 8002448:	2b00      	cmp	r3, #0
 800244a:	f47f ae35 	bne.w	80020b8 <HAL_GPIO_Init+0x14>
  }
}
 800244e:	bf00      	nop
 8002450:	bf00      	nop
 8002452:	3724      	adds	r7, #36	@ 0x24
 8002454:	46bd      	mov	sp, r7
 8002456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245a:	4770      	bx	lr
 800245c:	46022000 	.word	0x46022000
 8002460:	002f7f7f 	.word	0x002f7f7f

08002464 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002464:	b480      	push	{r7}
 8002466:	b083      	sub	sp, #12
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
 800246c:	460b      	mov	r3, r1
 800246e:	807b      	strh	r3, [r7, #2]
 8002470:	4613      	mov	r3, r2
 8002472:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002474:	787b      	ldrb	r3, [r7, #1]
 8002476:	2b00      	cmp	r3, #0
 8002478:	d003      	beq.n	8002482 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800247a:	887a      	ldrh	r2, [r7, #2]
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
  }
}
 8002480:	e002      	b.n	8002488 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
 8002482:	887a      	ldrh	r2, [r7, #2]
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002488:	bf00      	nop
 800248a:	370c      	adds	r7, #12
 800248c:	46bd      	mov	sp, r7
 800248e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002492:	4770      	bx	lr

08002494 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	b082      	sub	sp, #8
 8002498:	af00      	add	r7, sp, #0
 800249a:	4603      	mov	r3, r0
 800249c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0U)
 800249e:	4b0f      	ldr	r3, [pc, #60]	@ (80024dc <HAL_GPIO_EXTI_IRQHandler+0x48>)
 80024a0:	68da      	ldr	r2, [r3, #12]
 80024a2:	88fb      	ldrh	r3, [r7, #6]
 80024a4:	4013      	ands	r3, r2
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d006      	beq.n	80024b8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 80024aa:	4a0c      	ldr	r2, [pc, #48]	@ (80024dc <HAL_GPIO_EXTI_IRQHandler+0x48>)
 80024ac:	88fb      	ldrh	r3, [r7, #6]
 80024ae:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 80024b0:	88fb      	ldrh	r3, [r7, #6]
 80024b2:	4618      	mov	r0, r3
 80024b4:	f000 f814 	bl	80024e0 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0U)
 80024b8:	4b08      	ldr	r3, [pc, #32]	@ (80024dc <HAL_GPIO_EXTI_IRQHandler+0x48>)
 80024ba:	691a      	ldr	r2, [r3, #16]
 80024bc:	88fb      	ldrh	r3, [r7, #6]
 80024be:	4013      	ands	r3, r2
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d006      	beq.n	80024d2 <HAL_GPIO_EXTI_IRQHandler+0x3e>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 80024c4:	4a05      	ldr	r2, [pc, #20]	@ (80024dc <HAL_GPIO_EXTI_IRQHandler+0x48>)
 80024c6:	88fb      	ldrh	r3, [r7, #6]
 80024c8:	6113      	str	r3, [r2, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 80024ca:	88fb      	ldrh	r3, [r7, #6]
 80024cc:	4618      	mov	r0, r3
 80024ce:	f000 f812 	bl	80024f6 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 80024d2:	bf00      	nop
 80024d4:	3708      	adds	r7, #8
 80024d6:	46bd      	mov	sp, r7
 80024d8:	bd80      	pop	{r7, pc}
 80024da:	bf00      	nop
 80024dc:	46022000 	.word	0x46022000

080024e0 <HAL_GPIO_EXTI_Rising_Callback>:
  * @brief  EXTI line rising detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 80024e0:	b480      	push	{r7}
 80024e2:	b083      	sub	sp, #12
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	4603      	mov	r3, r0
 80024e8:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Rising_Callback could be implemented in the user file
   */
}
 80024ea:	bf00      	nop
 80024ec:	370c      	adds	r7, #12
 80024ee:	46bd      	mov	sp, r7
 80024f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f4:	4770      	bx	lr

080024f6 <HAL_GPIO_EXTI_Falling_Callback>:
  * @brief  EXTI line falling detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 80024f6:	b480      	push	{r7}
 80024f8:	b083      	sub	sp, #12
 80024fa:	af00      	add	r7, sp, #0
 80024fc:	4603      	mov	r3, r0
 80024fe:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Falling_Callback could be implemented in the user file
   */
}
 8002500:	bf00      	nop
 8002502:	370c      	adds	r7, #12
 8002504:	46bd      	mov	sp, r7
 8002506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250a:	4770      	bx	lr

0800250c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800250c:	b580      	push	{r7, lr}
 800250e:	b082      	sub	sp, #8
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	2b00      	cmp	r3, #0
 8002518:	d101      	bne.n	800251e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800251a:	2301      	movs	r3, #1
 800251c:	e08d      	b.n	800263a <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002524:	b2db      	uxtb	r3, r3
 8002526:	2b00      	cmp	r3, #0
 8002528:	d106      	bne.n	8002538 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	2200      	movs	r2, #0
 800252e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002532:	6878      	ldr	r0, [r7, #4]
 8002534:	f7fe f9f6 	bl	8000924 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	2224      	movs	r2, #36	@ 0x24
 800253c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	681a      	ldr	r2, [r3, #0]
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f022 0201 	bic.w	r2, r2, #1
 800254e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	685a      	ldr	r2, [r3, #4]
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800255c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	689a      	ldr	r2, [r3, #8]
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800256c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	68db      	ldr	r3, [r3, #12]
 8002572:	2b01      	cmp	r3, #1
 8002574:	d107      	bne.n	8002586 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	689a      	ldr	r2, [r3, #8]
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002582:	609a      	str	r2, [r3, #8]
 8002584:	e006      	b.n	8002594 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	689a      	ldr	r2, [r3, #8]
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8002592:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	68db      	ldr	r3, [r3, #12]
 8002598:	2b02      	cmp	r3, #2
 800259a:	d108      	bne.n	80025ae <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	685a      	ldr	r2, [r3, #4]
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80025aa:	605a      	str	r2, [r3, #4]
 80025ac:	e007      	b.n	80025be <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	685a      	ldr	r2, [r3, #4]
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80025bc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	685b      	ldr	r3, [r3, #4]
 80025c4:	687a      	ldr	r2, [r7, #4]
 80025c6:	6812      	ldr	r2, [r2, #0]
 80025c8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80025cc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80025d0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	68da      	ldr	r2, [r3, #12]
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80025e0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	691a      	ldr	r2, [r3, #16]
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	695b      	ldr	r3, [r3, #20]
 80025ea:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	699b      	ldr	r3, [r3, #24]
 80025f2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	430a      	orrs	r2, r1
 80025fa:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	69d9      	ldr	r1, [r3, #28]
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	6a1a      	ldr	r2, [r3, #32]
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	430a      	orrs	r2, r1
 800260a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	681a      	ldr	r2, [r3, #0]
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f042 0201 	orr.w	r2, r2, #1
 800261a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	2200      	movs	r2, #0
 8002620:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	2220      	movs	r2, #32
 8002626:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	2200      	movs	r2, #0
 800262e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	2200      	movs	r2, #0
 8002634:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8002638:	2300      	movs	r3, #0
}
 800263a:	4618      	mov	r0, r3
 800263c:	3708      	adds	r7, #8
 800263e:	46bd      	mov	sp, r7
 8002640:	bd80      	pop	{r7, pc}
	...

08002644 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	b088      	sub	sp, #32
 8002648:	af02      	add	r7, sp, #8
 800264a:	60f8      	str	r0, [r7, #12]
 800264c:	4608      	mov	r0, r1
 800264e:	4611      	mov	r1, r2
 8002650:	461a      	mov	r2, r3
 8002652:	4603      	mov	r3, r0
 8002654:	817b      	strh	r3, [r7, #10]
 8002656:	460b      	mov	r3, r1
 8002658:	813b      	strh	r3, [r7, #8]
 800265a:	4613      	mov	r3, r2
 800265c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002664:	b2db      	uxtb	r3, r3
 8002666:	2b20      	cmp	r3, #32
 8002668:	f040 80fd 	bne.w	8002866 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800266c:	6a3b      	ldr	r3, [r7, #32]
 800266e:	2b00      	cmp	r3, #0
 8002670:	d002      	beq.n	8002678 <HAL_I2C_Mem_Read+0x34>
 8002672:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002674:	2b00      	cmp	r3, #0
 8002676:	d105      	bne.n	8002684 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800267e:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8002680:	2301      	movs	r3, #1
 8002682:	e0f1      	b.n	8002868 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800268a:	2b01      	cmp	r3, #1
 800268c:	d101      	bne.n	8002692 <HAL_I2C_Mem_Read+0x4e>
 800268e:	2302      	movs	r3, #2
 8002690:	e0ea      	b.n	8002868 <HAL_I2C_Mem_Read+0x224>
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	2201      	movs	r2, #1
 8002696:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800269a:	f7ff facd 	bl	8001c38 <HAL_GetTick>
 800269e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80026a0:	697b      	ldr	r3, [r7, #20]
 80026a2:	9300      	str	r3, [sp, #0]
 80026a4:	2319      	movs	r3, #25
 80026a6:	2201      	movs	r2, #1
 80026a8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80026ac:	68f8      	ldr	r0, [r7, #12]
 80026ae:	f000 ff04 	bl	80034ba <I2C_WaitOnFlagUntilTimeout>
 80026b2:	4603      	mov	r3, r0
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d001      	beq.n	80026bc <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80026b8:	2301      	movs	r3, #1
 80026ba:	e0d5      	b.n	8002868 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	2222      	movs	r2, #34	@ 0x22
 80026c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	2240      	movs	r2, #64	@ 0x40
 80026c8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	2200      	movs	r2, #0
 80026d0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	6a3a      	ldr	r2, [r7, #32]
 80026d6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80026dc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	2200      	movs	r2, #0
 80026e2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80026e4:	88f8      	ldrh	r0, [r7, #6]
 80026e6:	893a      	ldrh	r2, [r7, #8]
 80026e8:	8979      	ldrh	r1, [r7, #10]
 80026ea:	697b      	ldr	r3, [r7, #20]
 80026ec:	9301      	str	r3, [sp, #4]
 80026ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80026f0:	9300      	str	r3, [sp, #0]
 80026f2:	4603      	mov	r3, r0
 80026f4:	68f8      	ldr	r0, [r7, #12]
 80026f6:	f000 fa7f 	bl	8002bf8 <I2C_RequestMemoryRead>
 80026fa:	4603      	mov	r3, r0
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d005      	beq.n	800270c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	2200      	movs	r2, #0
 8002704:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8002708:	2301      	movs	r3, #1
 800270a:	e0ad      	b.n	8002868 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002710:	b29b      	uxth	r3, r3
 8002712:	2bff      	cmp	r3, #255	@ 0xff
 8002714:	d90e      	bls.n	8002734 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	22ff      	movs	r2, #255	@ 0xff
 800271a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002720:	b2da      	uxtb	r2, r3
 8002722:	8979      	ldrh	r1, [r7, #10]
 8002724:	4b52      	ldr	r3, [pc, #328]	@ (8002870 <HAL_I2C_Mem_Read+0x22c>)
 8002726:	9300      	str	r3, [sp, #0]
 8002728:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800272c:	68f8      	ldr	r0, [r7, #12]
 800272e:	f001 f887 	bl	8003840 <I2C_TransferConfig>
 8002732:	e00f      	b.n	8002754 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002738:	b29a      	uxth	r2, r3
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002742:	b2da      	uxtb	r2, r3
 8002744:	8979      	ldrh	r1, [r7, #10]
 8002746:	4b4a      	ldr	r3, [pc, #296]	@ (8002870 <HAL_I2C_Mem_Read+0x22c>)
 8002748:	9300      	str	r3, [sp, #0]
 800274a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800274e:	68f8      	ldr	r0, [r7, #12]
 8002750:	f001 f876 	bl	8003840 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8002754:	697b      	ldr	r3, [r7, #20]
 8002756:	9300      	str	r3, [sp, #0]
 8002758:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800275a:	2200      	movs	r2, #0
 800275c:	2104      	movs	r1, #4
 800275e:	68f8      	ldr	r0, [r7, #12]
 8002760:	f000 feab 	bl	80034ba <I2C_WaitOnFlagUntilTimeout>
 8002764:	4603      	mov	r3, r0
 8002766:	2b00      	cmp	r3, #0
 8002768:	d001      	beq.n	800276e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800276a:	2301      	movs	r3, #1
 800276c:	e07c      	b.n	8002868 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002778:	b2d2      	uxtb	r2, r2
 800277a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002780:	1c5a      	adds	r2, r3, #1
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800278a:	3b01      	subs	r3, #1
 800278c:	b29a      	uxth	r2, r3
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002796:	b29b      	uxth	r3, r3
 8002798:	3b01      	subs	r3, #1
 800279a:	b29a      	uxth	r2, r3
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80027a4:	b29b      	uxth	r3, r3
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d034      	beq.n	8002814 <HAL_I2C_Mem_Read+0x1d0>
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d130      	bne.n	8002814 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80027b2:	697b      	ldr	r3, [r7, #20]
 80027b4:	9300      	str	r3, [sp, #0]
 80027b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80027b8:	2200      	movs	r2, #0
 80027ba:	2180      	movs	r1, #128	@ 0x80
 80027bc:	68f8      	ldr	r0, [r7, #12]
 80027be:	f000 fe7c 	bl	80034ba <I2C_WaitOnFlagUntilTimeout>
 80027c2:	4603      	mov	r3, r0
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d001      	beq.n	80027cc <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80027c8:	2301      	movs	r3, #1
 80027ca:	e04d      	b.n	8002868 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80027d0:	b29b      	uxth	r3, r3
 80027d2:	2bff      	cmp	r3, #255	@ 0xff
 80027d4:	d90e      	bls.n	80027f4 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	22ff      	movs	r2, #255	@ 0xff
 80027da:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80027e0:	b2da      	uxtb	r2, r3
 80027e2:	8979      	ldrh	r1, [r7, #10]
 80027e4:	2300      	movs	r3, #0
 80027e6:	9300      	str	r3, [sp, #0]
 80027e8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80027ec:	68f8      	ldr	r0, [r7, #12]
 80027ee:	f001 f827 	bl	8003840 <I2C_TransferConfig>
 80027f2:	e00f      	b.n	8002814 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80027f8:	b29a      	uxth	r2, r3
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002802:	b2da      	uxtb	r2, r3
 8002804:	8979      	ldrh	r1, [r7, #10]
 8002806:	2300      	movs	r3, #0
 8002808:	9300      	str	r3, [sp, #0]
 800280a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800280e:	68f8      	ldr	r0, [r7, #12]
 8002810:	f001 f816 	bl	8003840 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002818:	b29b      	uxth	r3, r3
 800281a:	2b00      	cmp	r3, #0
 800281c:	d19a      	bne.n	8002754 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800281e:	697a      	ldr	r2, [r7, #20]
 8002820:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002822:	68f8      	ldr	r0, [r7, #12]
 8002824:	f000 fee9 	bl	80035fa <I2C_WaitOnSTOPFlagUntilTimeout>
 8002828:	4603      	mov	r3, r0
 800282a:	2b00      	cmp	r3, #0
 800282c:	d001      	beq.n	8002832 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800282e:	2301      	movs	r3, #1
 8002830:	e01a      	b.n	8002868 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	2220      	movs	r2, #32
 8002838:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	6859      	ldr	r1, [r3, #4]
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	681a      	ldr	r2, [r3, #0]
 8002844:	4b0b      	ldr	r3, [pc, #44]	@ (8002874 <HAL_I2C_Mem_Read+0x230>)
 8002846:	400b      	ands	r3, r1
 8002848:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	2220      	movs	r2, #32
 800284e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	2200      	movs	r2, #0
 8002856:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	2200      	movs	r2, #0
 800285e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002862:	2300      	movs	r3, #0
 8002864:	e000      	b.n	8002868 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8002866:	2302      	movs	r3, #2
  }
}
 8002868:	4618      	mov	r0, r3
 800286a:	3718      	adds	r7, #24
 800286c:	46bd      	mov	sp, r7
 800286e:	bd80      	pop	{r7, pc}
 8002870:	80002400 	.word	0x80002400
 8002874:	fe00e800 	.word	0xfe00e800

08002878 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8002878:	b580      	push	{r7, lr}
 800287a:	b084      	sub	sp, #16
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	699b      	ldr	r3, [r3, #24]
 8002886:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002894:	2b00      	cmp	r3, #0
 8002896:	d005      	beq.n	80028a4 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800289c:	68ba      	ldr	r2, [r7, #8]
 800289e:	68f9      	ldr	r1, [r7, #12]
 80028a0:	6878      	ldr	r0, [r7, #4]
 80028a2:	4798      	blx	r3
  }
}
 80028a4:	bf00      	nop
 80028a6:	3710      	adds	r7, #16
 80028a8:	46bd      	mov	sp, r7
 80028aa:	bd80      	pop	{r7, pc}

080028ac <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80028ac:	b580      	push	{r7, lr}
 80028ae:	b086      	sub	sp, #24
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	699b      	ldr	r3, [r3, #24]
 80028ba:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80028c4:	697b      	ldr	r3, [r7, #20]
 80028c6:	0a1b      	lsrs	r3, r3, #8
 80028c8:	f003 0301 	and.w	r3, r3, #1
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d010      	beq.n	80028f2 <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80028d0:	693b      	ldr	r3, [r7, #16]
 80028d2:	09db      	lsrs	r3, r3, #7
 80028d4:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d00a      	beq.n	80028f2 <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028e0:	f043 0201 	orr.w	r2, r3, #1
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80028f0:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80028f2:	697b      	ldr	r3, [r7, #20]
 80028f4:	0a9b      	lsrs	r3, r3, #10
 80028f6:	f003 0301 	and.w	r3, r3, #1
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d010      	beq.n	8002920 <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80028fe:	693b      	ldr	r3, [r7, #16]
 8002900:	09db      	lsrs	r3, r3, #7
 8002902:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8002906:	2b00      	cmp	r3, #0
 8002908:	d00a      	beq.n	8002920 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800290e:	f043 0208 	orr.w	r2, r3, #8
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800291e:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8002920:	697b      	ldr	r3, [r7, #20]
 8002922:	0a5b      	lsrs	r3, r3, #9
 8002924:	f003 0301 	and.w	r3, r3, #1
 8002928:	2b00      	cmp	r3, #0
 800292a:	d010      	beq.n	800294e <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800292c:	693b      	ldr	r3, [r7, #16]
 800292e:	09db      	lsrs	r3, r3, #7
 8002930:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8002934:	2b00      	cmp	r3, #0
 8002936:	d00a      	beq.n	800294e <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800293c:	f043 0202 	orr.w	r2, r3, #2
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800294c:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002952:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	f003 030b 	and.w	r3, r3, #11
 800295a:	2b00      	cmp	r3, #0
 800295c:	d003      	beq.n	8002966 <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 800295e:	68f9      	ldr	r1, [r7, #12]
 8002960:	6878      	ldr	r0, [r7, #4]
 8002962:	f000 fc51 	bl	8003208 <I2C_ITError>
  }
}
 8002966:	bf00      	nop
 8002968:	3718      	adds	r7, #24
 800296a:	46bd      	mov	sp, r7
 800296c:	bd80      	pop	{r7, pc}

0800296e <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800296e:	b480      	push	{r7}
 8002970:	b083      	sub	sp, #12
 8002972:	af00      	add	r7, sp, #0
 8002974:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8002976:	bf00      	nop
 8002978:	370c      	adds	r7, #12
 800297a:	46bd      	mov	sp, r7
 800297c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002980:	4770      	bx	lr

08002982 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002982:	b480      	push	{r7}
 8002984:	b083      	sub	sp, #12
 8002986:	af00      	add	r7, sp, #0
 8002988:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800298a:	bf00      	nop
 800298c:	370c      	adds	r7, #12
 800298e:	46bd      	mov	sp, r7
 8002990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002994:	4770      	bx	lr

08002996 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8002996:	b480      	push	{r7}
 8002998:	b083      	sub	sp, #12
 800299a:	af00      	add	r7, sp, #0
 800299c:	6078      	str	r0, [r7, #4]
 800299e:	460b      	mov	r3, r1
 80029a0:	70fb      	strb	r3, [r7, #3]
 80029a2:	4613      	mov	r3, r2
 80029a4:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80029a6:	bf00      	nop
 80029a8:	370c      	adds	r7, #12
 80029aa:	46bd      	mov	sp, r7
 80029ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b0:	4770      	bx	lr

080029b2 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80029b2:	b480      	push	{r7}
 80029b4:	b083      	sub	sp, #12
 80029b6:	af00      	add	r7, sp, #0
 80029b8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 80029ba:	bf00      	nop
 80029bc:	370c      	adds	r7, #12
 80029be:	46bd      	mov	sp, r7
 80029c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c4:	4770      	bx	lr

080029c6 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80029c6:	b480      	push	{r7}
 80029c8:	b083      	sub	sp, #12
 80029ca:	af00      	add	r7, sp, #0
 80029cc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80029ce:	bf00      	nop
 80029d0:	370c      	adds	r7, #12
 80029d2:	46bd      	mov	sp, r7
 80029d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d8:	4770      	bx	lr

080029da <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80029da:	b480      	push	{r7}
 80029dc:	b083      	sub	sp, #12
 80029de:	af00      	add	r7, sp, #0
 80029e0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80029e2:	bf00      	nop
 80029e4:	370c      	adds	r7, #12
 80029e6:	46bd      	mov	sp, r7
 80029e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ec:	4770      	bx	lr

080029ee <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 80029ee:	b580      	push	{r7, lr}
 80029f0:	b086      	sub	sp, #24
 80029f2:	af00      	add	r7, sp, #0
 80029f4:	60f8      	str	r0, [r7, #12]
 80029f6:	60b9      	str	r1, [r7, #8]
 80029f8:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029fe:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8002a00:	68bb      	ldr	r3, [r7, #8]
 8002a02:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002a0a:	2b01      	cmp	r3, #1
 8002a0c:	d101      	bne.n	8002a12 <I2C_Slave_ISR_IT+0x24>
 8002a0e:	2302      	movs	r3, #2
 8002a10:	e0ed      	b.n	8002bee <I2C_Slave_ISR_IT+0x200>
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	2201      	movs	r2, #1
 8002a16:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002a1a:	693b      	ldr	r3, [r7, #16]
 8002a1c:	095b      	lsrs	r3, r3, #5
 8002a1e:	f003 0301 	and.w	r3, r3, #1
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d00a      	beq.n	8002a3c <I2C_Slave_ISR_IT+0x4e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	095b      	lsrs	r3, r3, #5
 8002a2a:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d004      	beq.n	8002a3c <I2C_Slave_ISR_IT+0x4e>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8002a32:	6939      	ldr	r1, [r7, #16]
 8002a34:	68f8      	ldr	r0, [r7, #12]
 8002a36:	f000 fa15 	bl	8002e64 <I2C_ITSlaveCplt>
 8002a3a:	e0d3      	b.n	8002be4 <I2C_Slave_ISR_IT+0x1f6>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8002a3c:	693b      	ldr	r3, [r7, #16]
 8002a3e:	091b      	lsrs	r3, r3, #4
 8002a40:	f003 0301 	and.w	r3, r3, #1
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d04d      	beq.n	8002ae4 <I2C_Slave_ISR_IT+0xf6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	091b      	lsrs	r3, r3, #4
 8002a4c:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d047      	beq.n	8002ae4 <I2C_Slave_ISR_IT+0xf6>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a58:	b29b      	uxth	r3, r3
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d128      	bne.n	8002ab0 <I2C_Slave_ISR_IT+0xc2>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002a64:	b2db      	uxtb	r3, r3
 8002a66:	2b28      	cmp	r3, #40	@ 0x28
 8002a68:	d108      	bne.n	8002a7c <I2C_Slave_ISR_IT+0x8e>
 8002a6a:	697b      	ldr	r3, [r7, #20]
 8002a6c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002a70:	d104      	bne.n	8002a7c <I2C_Slave_ISR_IT+0x8e>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8002a72:	6939      	ldr	r1, [r7, #16]
 8002a74:	68f8      	ldr	r0, [r7, #12]
 8002a76:	f000 fb71 	bl	800315c <I2C_ITListenCplt>
 8002a7a:	e032      	b.n	8002ae2 <I2C_Slave_ISR_IT+0xf4>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002a82:	b2db      	uxtb	r3, r3
 8002a84:	2b29      	cmp	r3, #41	@ 0x29
 8002a86:	d10e      	bne.n	8002aa6 <I2C_Slave_ISR_IT+0xb8>
 8002a88:	697b      	ldr	r3, [r7, #20]
 8002a8a:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002a8e:	d00a      	beq.n	8002aa6 <I2C_Slave_ISR_IT+0xb8>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	2210      	movs	r2, #16
 8002a96:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8002a98:	68f8      	ldr	r0, [r7, #12]
 8002a9a:	f000 fccc 	bl	8003436 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8002a9e:	68f8      	ldr	r0, [r7, #12]
 8002aa0:	f000 f982 	bl	8002da8 <I2C_ITSlaveSeqCplt>
 8002aa4:	e01d      	b.n	8002ae2 <I2C_Slave_ISR_IT+0xf4>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	2210      	movs	r2, #16
 8002aac:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8002aae:	e096      	b.n	8002bde <I2C_Slave_ISR_IT+0x1f0>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	2210      	movs	r2, #16
 8002ab6:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002abc:	f043 0204 	orr.w	r2, r3, #4
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8002ac4:	697b      	ldr	r3, [r7, #20]
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d004      	beq.n	8002ad4 <I2C_Slave_ISR_IT+0xe6>
 8002aca:	697b      	ldr	r3, [r7, #20]
 8002acc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002ad0:	f040 8085 	bne.w	8002bde <I2C_Slave_ISR_IT+0x1f0>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ad8:	4619      	mov	r1, r3
 8002ada:	68f8      	ldr	r0, [r7, #12]
 8002adc:	f000 fb94 	bl	8003208 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8002ae0:	e07d      	b.n	8002bde <I2C_Slave_ISR_IT+0x1f0>
 8002ae2:	e07c      	b.n	8002bde <I2C_Slave_ISR_IT+0x1f0>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8002ae4:	693b      	ldr	r3, [r7, #16]
 8002ae6:	089b      	lsrs	r3, r3, #2
 8002ae8:	f003 0301 	and.w	r3, r3, #1
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d030      	beq.n	8002b52 <I2C_Slave_ISR_IT+0x164>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	089b      	lsrs	r3, r3, #2
 8002af4:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d02a      	beq.n	8002b52 <I2C_Slave_ISR_IT+0x164>
  {
    if (hi2c->XferCount > 0U)
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b00:	b29b      	uxth	r3, r3
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d018      	beq.n	8002b38 <I2C_Slave_ISR_IT+0x14a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b10:	b2d2      	uxtb	r2, r2
 8002b12:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b18:	1c5a      	adds	r2, r3, #1
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b22:	3b01      	subs	r3, #1
 8002b24:	b29a      	uxth	r2, r3
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b2e:	b29b      	uxth	r3, r3
 8002b30:	3b01      	subs	r3, #1
 8002b32:	b29a      	uxth	r2, r3
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b3c:	b29b      	uxth	r3, r3
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d14f      	bne.n	8002be2 <I2C_Slave_ISR_IT+0x1f4>
 8002b42:	697b      	ldr	r3, [r7, #20]
 8002b44:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002b48:	d04b      	beq.n	8002be2 <I2C_Slave_ISR_IT+0x1f4>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8002b4a:	68f8      	ldr	r0, [r7, #12]
 8002b4c:	f000 f92c 	bl	8002da8 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8002b50:	e047      	b.n	8002be2 <I2C_Slave_ISR_IT+0x1f4>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8002b52:	693b      	ldr	r3, [r7, #16]
 8002b54:	08db      	lsrs	r3, r3, #3
 8002b56:	f003 0301 	and.w	r3, r3, #1
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d00a      	beq.n	8002b74 <I2C_Slave_ISR_IT+0x186>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	08db      	lsrs	r3, r3, #3
 8002b62:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d004      	beq.n	8002b74 <I2C_Slave_ISR_IT+0x186>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8002b6a:	6939      	ldr	r1, [r7, #16]
 8002b6c:	68f8      	ldr	r0, [r7, #12]
 8002b6e:	f000 f897 	bl	8002ca0 <I2C_ITAddrCplt>
 8002b72:	e037      	b.n	8002be4 <I2C_Slave_ISR_IT+0x1f6>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8002b74:	693b      	ldr	r3, [r7, #16]
 8002b76:	085b      	lsrs	r3, r3, #1
 8002b78:	f003 0301 	and.w	r3, r3, #1
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d031      	beq.n	8002be4 <I2C_Slave_ISR_IT+0x1f6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	085b      	lsrs	r3, r3, #1
 8002b84:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d02b      	beq.n	8002be4 <I2C_Slave_ISR_IT+0x1f6>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b90:	b29b      	uxth	r3, r3
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d018      	beq.n	8002bc8 <I2C_Slave_ISR_IT+0x1da>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b9a:	781a      	ldrb	r2, [r3, #0]
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ba6:	1c5a      	adds	r2, r3, #1
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002bb0:	b29b      	uxth	r3, r3
 8002bb2:	3b01      	subs	r3, #1
 8002bb4:	b29a      	uxth	r2, r3
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002bbe:	3b01      	subs	r3, #1
 8002bc0:	b29a      	uxth	r2, r3
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	851a      	strh	r2, [r3, #40]	@ 0x28
 8002bc6:	e00d      	b.n	8002be4 <I2C_Slave_ISR_IT+0x1f6>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8002bc8:	697b      	ldr	r3, [r7, #20]
 8002bca:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002bce:	d002      	beq.n	8002bd6 <I2C_Slave_ISR_IT+0x1e8>
 8002bd0:	697b      	ldr	r3, [r7, #20]
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d106      	bne.n	8002be4 <I2C_Slave_ISR_IT+0x1f6>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8002bd6:	68f8      	ldr	r0, [r7, #12]
 8002bd8:	f000 f8e6 	bl	8002da8 <I2C_ITSlaveSeqCplt>
 8002bdc:	e002      	b.n	8002be4 <I2C_Slave_ISR_IT+0x1f6>
    if (hi2c->XferCount == 0U)
 8002bde:	bf00      	nop
 8002be0:	e000      	b.n	8002be4 <I2C_Slave_ISR_IT+0x1f6>
    if ((hi2c->XferCount == 0U) && \
 8002be2:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	2200      	movs	r2, #0
 8002be8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8002bec:	2300      	movs	r3, #0
}
 8002bee:	4618      	mov	r0, r3
 8002bf0:	3718      	adds	r7, #24
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	bd80      	pop	{r7, pc}
	...

08002bf8 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	b086      	sub	sp, #24
 8002bfc:	af02      	add	r7, sp, #8
 8002bfe:	60f8      	str	r0, [r7, #12]
 8002c00:	4608      	mov	r0, r1
 8002c02:	4611      	mov	r1, r2
 8002c04:	461a      	mov	r2, r3
 8002c06:	4603      	mov	r3, r0
 8002c08:	817b      	strh	r3, [r7, #10]
 8002c0a:	460b      	mov	r3, r1
 8002c0c:	813b      	strh	r3, [r7, #8]
 8002c0e:	4613      	mov	r3, r2
 8002c10:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8002c12:	88fb      	ldrh	r3, [r7, #6]
 8002c14:	b2da      	uxtb	r2, r3
 8002c16:	8979      	ldrh	r1, [r7, #10]
 8002c18:	4b20      	ldr	r3, [pc, #128]	@ (8002c9c <I2C_RequestMemoryRead+0xa4>)
 8002c1a:	9300      	str	r3, [sp, #0]
 8002c1c:	2300      	movs	r3, #0
 8002c1e:	68f8      	ldr	r0, [r7, #12]
 8002c20:	f000 fe0e 	bl	8003840 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002c24:	69fa      	ldr	r2, [r7, #28]
 8002c26:	69b9      	ldr	r1, [r7, #24]
 8002c28:	68f8      	ldr	r0, [r7, #12]
 8002c2a:	f000 fc9f 	bl	800356c <I2C_WaitOnTXISFlagUntilTimeout>
 8002c2e:	4603      	mov	r3, r0
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d001      	beq.n	8002c38 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8002c34:	2301      	movs	r3, #1
 8002c36:	e02c      	b.n	8002c92 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002c38:	88fb      	ldrh	r3, [r7, #6]
 8002c3a:	2b01      	cmp	r3, #1
 8002c3c:	d105      	bne.n	8002c4a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002c3e:	893b      	ldrh	r3, [r7, #8]
 8002c40:	b2da      	uxtb	r2, r3
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	629a      	str	r2, [r3, #40]	@ 0x28
 8002c48:	e015      	b.n	8002c76 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002c4a:	893b      	ldrh	r3, [r7, #8]
 8002c4c:	0a1b      	lsrs	r3, r3, #8
 8002c4e:	b29b      	uxth	r3, r3
 8002c50:	b2da      	uxtb	r2, r3
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002c58:	69fa      	ldr	r2, [r7, #28]
 8002c5a:	69b9      	ldr	r1, [r7, #24]
 8002c5c:	68f8      	ldr	r0, [r7, #12]
 8002c5e:	f000 fc85 	bl	800356c <I2C_WaitOnTXISFlagUntilTimeout>
 8002c62:	4603      	mov	r3, r0
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d001      	beq.n	8002c6c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8002c68:	2301      	movs	r3, #1
 8002c6a:	e012      	b.n	8002c92 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002c6c:	893b      	ldrh	r3, [r7, #8]
 8002c6e:	b2da      	uxtb	r2, r3
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8002c76:	69fb      	ldr	r3, [r7, #28]
 8002c78:	9300      	str	r3, [sp, #0]
 8002c7a:	69bb      	ldr	r3, [r7, #24]
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	2140      	movs	r1, #64	@ 0x40
 8002c80:	68f8      	ldr	r0, [r7, #12]
 8002c82:	f000 fc1a 	bl	80034ba <I2C_WaitOnFlagUntilTimeout>
 8002c86:	4603      	mov	r3, r0
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d001      	beq.n	8002c90 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8002c8c:	2301      	movs	r3, #1
 8002c8e:	e000      	b.n	8002c92 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8002c90:	2300      	movs	r3, #0
}
 8002c92:	4618      	mov	r0, r3
 8002c94:	3710      	adds	r7, #16
 8002c96:	46bd      	mov	sp, r7
 8002c98:	bd80      	pop	{r7, pc}
 8002c9a:	bf00      	nop
 8002c9c:	80002000 	.word	0x80002000

08002ca0 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b084      	sub	sp, #16
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
 8002ca8:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002cb0:	b2db      	uxtb	r3, r3
 8002cb2:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8002cb6:	2b28      	cmp	r3, #40	@ 0x28
 8002cb8:	d16a      	bne.n	8002d90 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	699b      	ldr	r3, [r3, #24]
 8002cc0:	0c1b      	lsrs	r3, r3, #16
 8002cc2:	b2db      	uxtb	r3, r3
 8002cc4:	f003 0301 	and.w	r3, r3, #1
 8002cc8:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	699b      	ldr	r3, [r3, #24]
 8002cd0:	0c1b      	lsrs	r3, r3, #16
 8002cd2:	b29b      	uxth	r3, r3
 8002cd4:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8002cd8:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	689b      	ldr	r3, [r3, #8]
 8002ce0:	b29b      	uxth	r3, r3
 8002ce2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002ce6:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	68db      	ldr	r3, [r3, #12]
 8002cee:	b29b      	uxth	r3, r3
 8002cf0:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8002cf4:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	68db      	ldr	r3, [r3, #12]
 8002cfa:	2b02      	cmp	r3, #2
 8002cfc:	d138      	bne.n	8002d70 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8002cfe:	897b      	ldrh	r3, [r7, #10]
 8002d00:	09db      	lsrs	r3, r3, #7
 8002d02:	b29a      	uxth	r2, r3
 8002d04:	89bb      	ldrh	r3, [r7, #12]
 8002d06:	4053      	eors	r3, r2
 8002d08:	b29b      	uxth	r3, r3
 8002d0a:	f003 0306 	and.w	r3, r3, #6
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d11c      	bne.n	8002d4c <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8002d12:	897b      	ldrh	r3, [r7, #10]
 8002d14:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002d1a:	1c5a      	adds	r2, r3, #1
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002d24:	2b02      	cmp	r3, #2
 8002d26:	d13b      	bne.n	8002da0 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	2208      	movs	r2, #8
 8002d34:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	2200      	movs	r2, #0
 8002d3a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002d3e:	89ba      	ldrh	r2, [r7, #12]
 8002d40:	7bfb      	ldrb	r3, [r7, #15]
 8002d42:	4619      	mov	r1, r3
 8002d44:	6878      	ldr	r0, [r7, #4]
 8002d46:	f7ff fe26 	bl	8002996 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8002d4a:	e029      	b.n	8002da0 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8002d4c:	893b      	ldrh	r3, [r7, #8]
 8002d4e:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8002d50:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002d54:	6878      	ldr	r0, [r7, #4]
 8002d56:	f000 fda5 	bl	80038a4 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002d62:	89ba      	ldrh	r2, [r7, #12]
 8002d64:	7bfb      	ldrb	r3, [r7, #15]
 8002d66:	4619      	mov	r1, r3
 8002d68:	6878      	ldr	r0, [r7, #4]
 8002d6a:	f7ff fe14 	bl	8002996 <HAL_I2C_AddrCallback>
}
 8002d6e:	e017      	b.n	8002da0 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8002d70:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002d74:	6878      	ldr	r0, [r7, #4]
 8002d76:	f000 fd95 	bl	80038a4 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002d82:	89ba      	ldrh	r2, [r7, #12]
 8002d84:	7bfb      	ldrb	r3, [r7, #15]
 8002d86:	4619      	mov	r1, r3
 8002d88:	6878      	ldr	r0, [r7, #4]
 8002d8a:	f7ff fe04 	bl	8002996 <HAL_I2C_AddrCallback>
}
 8002d8e:	e007      	b.n	8002da0 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	2208      	movs	r2, #8
 8002d96:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 8002da0:	bf00      	nop
 8002da2:	3710      	adds	r7, #16
 8002da4:	46bd      	mov	sp, r7
 8002da6:	bd80      	pop	{r7, pc}

08002da8 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8002da8:	b580      	push	{r7, lr}
 8002daa:	b084      	sub	sp, #16
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	2200      	movs	r2, #0
 8002dbc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

#if defined(HAL_DMA_MODULE_ENABLED)
  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	0b9b      	lsrs	r3, r3, #14
 8002dc4:	f003 0301 	and.w	r3, r3, #1
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d008      	beq.n	8002dde <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	681a      	ldr	r2, [r3, #0]
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8002dda:	601a      	str	r2, [r3, #0]
 8002ddc:	e00d      	b.n	8002dfa <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	0bdb      	lsrs	r3, r3, #15
 8002de2:	f003 0301 	and.w	r3, r3, #1
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d007      	beq.n	8002dfa <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	681a      	ldr	r2, [r3, #0]
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002df8:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002e00:	b2db      	uxtb	r3, r3
 8002e02:	2b29      	cmp	r3, #41	@ 0x29
 8002e04:	d112      	bne.n	8002e2c <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	2228      	movs	r2, #40	@ 0x28
 8002e0a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	2221      	movs	r2, #33	@ 0x21
 8002e12:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002e14:	2101      	movs	r1, #1
 8002e16:	6878      	ldr	r0, [r7, #4]
 8002e18:	f000 fd44 	bl	80038a4 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	2200      	movs	r2, #0
 8002e20:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002e24:	6878      	ldr	r0, [r7, #4]
 8002e26:	f7ff fda2 	bl	800296e <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8002e2a:	e017      	b.n	8002e5c <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002e32:	b2db      	uxtb	r3, r3
 8002e34:	2b2a      	cmp	r3, #42	@ 0x2a
 8002e36:	d111      	bne.n	8002e5c <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	2228      	movs	r2, #40	@ 0x28
 8002e3c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	2222      	movs	r2, #34	@ 0x22
 8002e44:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8002e46:	2102      	movs	r1, #2
 8002e48:	6878      	ldr	r0, [r7, #4]
 8002e4a:	f000 fd2b 	bl	80038a4 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	2200      	movs	r2, #0
 8002e52:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002e56:	6878      	ldr	r0, [r7, #4]
 8002e58:	f7ff fd93 	bl	8002982 <HAL_I2C_SlaveRxCpltCallback>
}
 8002e5c:	bf00      	nop
 8002e5e:	3710      	adds	r7, #16
 8002e60:	46bd      	mov	sp, r7
 8002e62:	bd80      	pop	{r7, pc}

08002e64 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002e64:	b590      	push	{r4, r7, lr}
 8002e66:	b087      	sub	sp, #28
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	6078      	str	r0, [r7, #4]
 8002e6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8002e76:	683b      	ldr	r3, [r7, #0]
 8002e78:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e7e:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002e86:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	2220      	movs	r2, #32
 8002e8e:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002e90:	7afb      	ldrb	r3, [r7, #11]
 8002e92:	2b21      	cmp	r3, #33	@ 0x21
 8002e94:	d002      	beq.n	8002e9c <I2C_ITSlaveCplt+0x38>
 8002e96:	7afb      	ldrb	r3, [r7, #11]
 8002e98:	2b29      	cmp	r3, #41	@ 0x29
 8002e9a:	d108      	bne.n	8002eae <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8002e9c:	f248 0101 	movw	r1, #32769	@ 0x8001
 8002ea0:	6878      	ldr	r0, [r7, #4]
 8002ea2:	f000 fcff 	bl	80038a4 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	2221      	movs	r2, #33	@ 0x21
 8002eaa:	631a      	str	r2, [r3, #48]	@ 0x30
 8002eac:	e019      	b.n	8002ee2 <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002eae:	7afb      	ldrb	r3, [r7, #11]
 8002eb0:	2b22      	cmp	r3, #34	@ 0x22
 8002eb2:	d002      	beq.n	8002eba <I2C_ITSlaveCplt+0x56>
 8002eb4:	7afb      	ldrb	r3, [r7, #11]
 8002eb6:	2b2a      	cmp	r3, #42	@ 0x2a
 8002eb8:	d108      	bne.n	8002ecc <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8002eba:	f248 0102 	movw	r1, #32770	@ 0x8002
 8002ebe:	6878      	ldr	r0, [r7, #4]
 8002ec0:	f000 fcf0 	bl	80038a4 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	2222      	movs	r2, #34	@ 0x22
 8002ec8:	631a      	str	r2, [r3, #48]	@ 0x30
 8002eca:	e00a      	b.n	8002ee2 <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 8002ecc:	7afb      	ldrb	r3, [r7, #11]
 8002ece:	2b28      	cmp	r3, #40	@ 0x28
 8002ed0:	d107      	bne.n	8002ee2 <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8002ed2:	f248 0103 	movw	r1, #32771	@ 0x8003
 8002ed6:	6878      	ldr	r0, [r7, #4]
 8002ed8:	f000 fce4 	bl	80038a4 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	2200      	movs	r2, #0
 8002ee0:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	685a      	ldr	r2, [r3, #4]
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002ef0:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	6859      	ldr	r1, [r3, #4]
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681a      	ldr	r2, [r3, #0]
 8002efc:	4b95      	ldr	r3, [pc, #596]	@ (8003154 <I2C_ITSlaveCplt+0x2f0>)
 8002efe:	400b      	ands	r3, r1
 8002f00:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8002f02:	6878      	ldr	r0, [r7, #4]
 8002f04:	f000 fa97 	bl	8003436 <I2C_Flush_TXDR>

#if defined(HAL_DMA_MODULE_ENABLED)
  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8002f08:	693b      	ldr	r3, [r7, #16]
 8002f0a:	0b9b      	lsrs	r3, r3, #14
 8002f0c:	f003 0301 	and.w	r3, r3, #1
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d01c      	beq.n	8002f4e <I2C_ITSlaveCplt+0xea>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	681a      	ldr	r2, [r3, #0]
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8002f22:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d032      	beq.n	8002f92 <I2C_ITSlaveCplt+0x12e>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002f34:	b29c      	uxth	r4, r3
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	f7ff f81b 	bl	8001f76 <HAL_DMAEx_GetFifoLevel>
 8002f40:	4603      	mov	r3, r0
 8002f42:	b29b      	uxth	r3, r3
 8002f44:	4423      	add	r3, r4
 8002f46:	b29a      	uxth	r2, r3
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002f4c:	e021      	b.n	8002f92 <I2C_ITSlaveCplt+0x12e>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8002f4e:	693b      	ldr	r3, [r7, #16]
 8002f50:	0bdb      	lsrs	r3, r3, #15
 8002f52:	f003 0301 	and.w	r3, r3, #1
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d01b      	beq.n	8002f92 <I2C_ITSlaveCplt+0x12e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	681a      	ldr	r2, [r3, #0]
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002f68:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d00f      	beq.n	8002f92 <I2C_ITSlaveCplt+0x12e>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002f7a:	b29c      	uxth	r4, r3
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f80:	4618      	mov	r0, r3
 8002f82:	f7fe fff8 	bl	8001f76 <HAL_DMAEx_GetFifoLevel>
 8002f86:	4603      	mov	r3, r0
 8002f88:	b29b      	uxth	r3, r3
 8002f8a:	4423      	add	r3, r4
 8002f8c:	b29a      	uxth	r2, r3
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	855a      	strh	r2, [r3, #42]	@ 0x2a
    /* Do nothing */
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8002f92:	697b      	ldr	r3, [r7, #20]
 8002f94:	089b      	lsrs	r3, r3, #2
 8002f96:	f003 0301 	and.w	r3, r3, #1
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d020      	beq.n	8002fe0 <I2C_ITSlaveCplt+0x17c>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8002f9e:	697b      	ldr	r3, [r7, #20]
 8002fa0:	f023 0304 	bic.w	r3, r3, #4
 8002fa4:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fb0:	b2d2      	uxtb	r2, r2
 8002fb2:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fb8:	1c5a      	adds	r2, r3, #1
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	625a      	str	r2, [r3, #36]	@ 0x24

    if (hi2c->XferSize > 0U)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d00c      	beq.n	8002fe0 <I2C_ITSlaveCplt+0x17c>
    {
      hi2c->XferSize--;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002fca:	3b01      	subs	r3, #1
 8002fcc:	b29a      	uxth	r2, r3
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002fd6:	b29b      	uxth	r3, r3
 8002fd8:	3b01      	subs	r3, #1
 8002fda:	b29a      	uxth	r2, r3
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002fe4:	b29b      	uxth	r3, r3
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d005      	beq.n	8002ff6 <I2C_ITSlaveCplt+0x192>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002fee:	f043 0204 	orr.w	r2, r3, #4
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8002ff6:	697b      	ldr	r3, [r7, #20]
 8002ff8:	091b      	lsrs	r3, r3, #4
 8002ffa:	f003 0301 	and.w	r3, r3, #1
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d04a      	beq.n	8003098 <I2C_ITSlaveCplt+0x234>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 8003002:	693b      	ldr	r3, [r7, #16]
 8003004:	091b      	lsrs	r3, r3, #4
 8003006:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800300a:	2b00      	cmp	r3, #0
 800300c:	d044      	beq.n	8003098 <I2C_ITSlaveCplt+0x234>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003012:	b29b      	uxth	r3, r3
 8003014:	2b00      	cmp	r3, #0
 8003016:	d128      	bne.n	800306a <I2C_ITSlaveCplt+0x206>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800301e:	b2db      	uxtb	r3, r3
 8003020:	2b28      	cmp	r3, #40	@ 0x28
 8003022:	d108      	bne.n	8003036 <I2C_ITSlaveCplt+0x1d2>
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800302a:	d104      	bne.n	8003036 <I2C_ITSlaveCplt+0x1d2>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800302c:	6979      	ldr	r1, [r7, #20]
 800302e:	6878      	ldr	r0, [r7, #4]
 8003030:	f000 f894 	bl	800315c <I2C_ITListenCplt>
 8003034:	e030      	b.n	8003098 <I2C_ITSlaveCplt+0x234>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800303c:	b2db      	uxtb	r3, r3
 800303e:	2b29      	cmp	r3, #41	@ 0x29
 8003040:	d10e      	bne.n	8003060 <I2C_ITSlaveCplt+0x1fc>
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003048:	d00a      	beq.n	8003060 <I2C_ITSlaveCplt+0x1fc>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	2210      	movs	r2, #16
 8003050:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8003052:	6878      	ldr	r0, [r7, #4]
 8003054:	f000 f9ef 	bl	8003436 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8003058:	6878      	ldr	r0, [r7, #4]
 800305a:	f7ff fea5 	bl	8002da8 <I2C_ITSlaveSeqCplt>
 800305e:	e01b      	b.n	8003098 <I2C_ITSlaveCplt+0x234>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	2210      	movs	r2, #16
 8003066:	61da      	str	r2, [r3, #28]
 8003068:	e016      	b.n	8003098 <I2C_ITSlaveCplt+0x234>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	2210      	movs	r2, #16
 8003070:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003076:	f043 0204 	orr.w	r2, r3, #4
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	2b00      	cmp	r3, #0
 8003082:	d003      	beq.n	800308c <I2C_ITSlaveCplt+0x228>
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800308a:	d105      	bne.n	8003098 <I2C_ITSlaveCplt+0x234>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003090:	4619      	mov	r1, r3
 8003092:	6878      	ldr	r0, [r7, #4]
 8003094:	f000 f8b8 	bl	8003208 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	2200      	movs	r2, #0
 800309c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	2200      	movs	r2, #0
 80030a4:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d010      	beq.n	80030d0 <I2C_ITSlaveCplt+0x26c>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030b2:	4619      	mov	r1, r3
 80030b4:	6878      	ldr	r0, [r7, #4]
 80030b6:	f000 f8a7 	bl	8003208 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80030c0:	b2db      	uxtb	r3, r3
 80030c2:	2b28      	cmp	r3, #40	@ 0x28
 80030c4:	d141      	bne.n	800314a <I2C_ITSlaveCplt+0x2e6>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 80030c6:	6979      	ldr	r1, [r7, #20]
 80030c8:	6878      	ldr	r0, [r7, #4]
 80030ca:	f000 f847 	bl	800315c <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80030ce:	e03c      	b.n	800314a <I2C_ITSlaveCplt+0x2e6>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030d4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80030d8:	d014      	beq.n	8003104 <I2C_ITSlaveCplt+0x2a0>
    I2C_ITSlaveSeqCplt(hi2c);
 80030da:	6878      	ldr	r0, [r7, #4]
 80030dc:	f7ff fe64 	bl	8002da8 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	4a1d      	ldr	r2, [pc, #116]	@ (8003158 <I2C_ITSlaveCplt+0x2f4>)
 80030e4:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	2220      	movs	r2, #32
 80030ea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	2200      	movs	r2, #0
 80030f2:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	2200      	movs	r2, #0
 80030f8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 80030fc:	6878      	ldr	r0, [r7, #4]
 80030fe:	f7ff fc58 	bl	80029b2 <HAL_I2C_ListenCpltCallback>
}
 8003102:	e022      	b.n	800314a <I2C_ITSlaveCplt+0x2e6>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800310a:	b2db      	uxtb	r3, r3
 800310c:	2b22      	cmp	r3, #34	@ 0x22
 800310e:	d10e      	bne.n	800312e <I2C_ITSlaveCplt+0x2ca>
    hi2c->State = HAL_I2C_STATE_READY;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	2220      	movs	r2, #32
 8003114:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	2200      	movs	r2, #0
 800311c:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	2200      	movs	r2, #0
 8003122:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003126:	6878      	ldr	r0, [r7, #4]
 8003128:	f7ff fc2b 	bl	8002982 <HAL_I2C_SlaveRxCpltCallback>
}
 800312c:	e00d      	b.n	800314a <I2C_ITSlaveCplt+0x2e6>
    hi2c->State = HAL_I2C_STATE_READY;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	2220      	movs	r2, #32
 8003132:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	2200      	movs	r2, #0
 800313a:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	2200      	movs	r2, #0
 8003140:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003144:	6878      	ldr	r0, [r7, #4]
 8003146:	f7ff fc12 	bl	800296e <HAL_I2C_SlaveTxCpltCallback>
}
 800314a:	bf00      	nop
 800314c:	371c      	adds	r7, #28
 800314e:	46bd      	mov	sp, r7
 8003150:	bd90      	pop	{r4, r7, pc}
 8003152:	bf00      	nop
 8003154:	fe00e800 	.word	0xfe00e800
 8003158:	ffff0000 	.word	0xffff0000

0800315c <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800315c:	b580      	push	{r7, lr}
 800315e:	b082      	sub	sp, #8
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]
 8003164:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	4a26      	ldr	r2, [pc, #152]	@ (8003204 <I2C_ITListenCplt+0xa8>)
 800316a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	2200      	movs	r2, #0
 8003170:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	2220      	movs	r2, #32
 8003176:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	2200      	movs	r2, #0
 800317e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	2200      	movs	r2, #0
 8003186:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8003188:	683b      	ldr	r3, [r7, #0]
 800318a:	089b      	lsrs	r3, r3, #2
 800318c:	f003 0301 	and.w	r3, r3, #1
 8003190:	2b00      	cmp	r3, #0
 8003192:	d022      	beq.n	80031da <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800319e:	b2d2      	uxtb	r2, r2
 80031a0:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031a6:	1c5a      	adds	r2, r3, #1
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	625a      	str	r2, [r3, #36]	@ 0x24

    if (hi2c->XferSize > 0U)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d012      	beq.n	80031da <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80031b8:	3b01      	subs	r3, #1
 80031ba:	b29a      	uxth	r2, r3
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80031c4:	b29b      	uxth	r3, r3
 80031c6:	3b01      	subs	r3, #1
 80031c8:	b29a      	uxth	r2, r3
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031d2:	f043 0204 	orr.w	r2, r3, #4
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80031da:	f248 0103 	movw	r1, #32771	@ 0x8003
 80031de:	6878      	ldr	r0, [r7, #4]
 80031e0:	f000 fb60 	bl	80038a4 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	2210      	movs	r2, #16
 80031ea:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	2200      	movs	r2, #0
 80031f0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 80031f4:	6878      	ldr	r0, [r7, #4]
 80031f6:	f7ff fbdc 	bl	80029b2 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 80031fa:	bf00      	nop
 80031fc:	3708      	adds	r7, #8
 80031fe:	46bd      	mov	sp, r7
 8003200:	bd80      	pop	{r7, pc}
 8003202:	bf00      	nop
 8003204:	ffff0000 	.word	0xffff0000

08003208 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8003208:	b580      	push	{r7, lr}
 800320a:	b084      	sub	sp, #16
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]
 8003210:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003218:	73fb      	strb	r3, [r7, #15]
#if defined(HAL_DMA_MODULE_ENABLED)
  uint32_t tmppreviousstate;
#endif /* HAL_DMA_MODULE_ENABLED */

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	2200      	movs	r2, #0
 800321e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	4a6d      	ldr	r2, [pc, #436]	@ (80033dc <I2C_ITError+0x1d4>)
 8003226:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	2200      	movs	r2, #0
 800322c:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003232:	683b      	ldr	r3, [r7, #0]
 8003234:	431a      	orrs	r2, r3
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 800323a:	7bfb      	ldrb	r3, [r7, #15]
 800323c:	2b28      	cmp	r3, #40	@ 0x28
 800323e:	d005      	beq.n	800324c <I2C_ITError+0x44>
 8003240:	7bfb      	ldrb	r3, [r7, #15]
 8003242:	2b29      	cmp	r3, #41	@ 0x29
 8003244:	d002      	beq.n	800324c <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8003246:	7bfb      	ldrb	r3, [r7, #15]
 8003248:	2b2a      	cmp	r3, #42	@ 0x2a
 800324a:	d10b      	bne.n	8003264 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800324c:	2103      	movs	r1, #3
 800324e:	6878      	ldr	r0, [r7, #4]
 8003250:	f000 fb28 	bl	80038a4 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	2228      	movs	r2, #40	@ 0x28
 8003258:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	4a60      	ldr	r2, [pc, #384]	@ (80033e0 <I2C_ITError+0x1d8>)
 8003260:	635a      	str	r2, [r3, #52]	@ 0x34
 8003262:	e030      	b.n	80032c6 <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8003264:	f248 0103 	movw	r1, #32771	@ 0x8003
 8003268:	6878      	ldr	r0, [r7, #4]
 800326a:	f000 fb1b 	bl	80038a4 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800326e:	6878      	ldr	r0, [r7, #4]
 8003270:	f000 f8e1 	bl	8003436 <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800327a:	b2db      	uxtb	r3, r3
 800327c:	2b60      	cmp	r3, #96	@ 0x60
 800327e:	d01f      	beq.n	80032c0 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	2220      	movs	r2, #32
 8003284:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	699b      	ldr	r3, [r3, #24]
 800328e:	f003 0320 	and.w	r3, r3, #32
 8003292:	2b20      	cmp	r3, #32
 8003294:	d114      	bne.n	80032c0 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	699b      	ldr	r3, [r3, #24]
 800329c:	f003 0310 	and.w	r3, r3, #16
 80032a0:	2b10      	cmp	r3, #16
 80032a2:	d109      	bne.n	80032b8 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	2210      	movs	r2, #16
 80032aa:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032b0:	f043 0204 	orr.w	r2, r3, #4
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	2220      	movs	r2, #32
 80032be:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	2200      	movs	r2, #0
 80032c4:	635a      	str	r2, [r3, #52]	@ 0x34
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032ca:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d039      	beq.n	8003348 <I2C_ITError+0x140>
 80032d4:	68bb      	ldr	r3, [r7, #8]
 80032d6:	2b11      	cmp	r3, #17
 80032d8:	d002      	beq.n	80032e0 <I2C_ITError+0xd8>
 80032da:	68bb      	ldr	r3, [r7, #8]
 80032dc:	2b21      	cmp	r3, #33	@ 0x21
 80032de:	d133      	bne.n	8003348 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80032ea:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80032ee:	d107      	bne.n	8003300 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	681a      	ldr	r2, [r3, #0]
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80032fe:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003304:	4618      	mov	r0, r3
 8003306:	f7fe fe28 	bl	8001f5a <HAL_DMA_GetState>
 800330a:	4603      	mov	r3, r0
 800330c:	2b01      	cmp	r3, #1
 800330e:	d017      	beq.n	8003340 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003314:	4a33      	ldr	r2, [pc, #204]	@ (80033e4 <I2C_ITError+0x1dc>)
 8003316:	66da      	str	r2, [r3, #108]	@ 0x6c

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	2200      	movs	r2, #0
 800331c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003324:	4618      	mov	r0, r3
 8003326:	f7fe fdef 	bl	8001f08 <HAL_DMA_Abort_IT>
 800332a:	4603      	mov	r3, r0
 800332c:	2b00      	cmp	r3, #0
 800332e:	d04d      	beq.n	80033cc <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003334:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003336:	687a      	ldr	r2, [r7, #4]
 8003338:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800333a:	4610      	mov	r0, r2
 800333c:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800333e:	e045      	b.n	80033cc <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8003340:	6878      	ldr	r0, [r7, #4]
 8003342:	f000 f851 	bl	80033e8 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003346:	e041      	b.n	80033cc <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800334c:	2b00      	cmp	r3, #0
 800334e:	d039      	beq.n	80033c4 <I2C_ITError+0x1bc>
 8003350:	68bb      	ldr	r3, [r7, #8]
 8003352:	2b12      	cmp	r3, #18
 8003354:	d002      	beq.n	800335c <I2C_ITError+0x154>
 8003356:	68bb      	ldr	r3, [r7, #8]
 8003358:	2b22      	cmp	r3, #34	@ 0x22
 800335a:	d133      	bne.n	80033c4 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003366:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800336a:	d107      	bne.n	800337c <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	681a      	ldr	r2, [r3, #0]
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800337a:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003380:	4618      	mov	r0, r3
 8003382:	f7fe fdea 	bl	8001f5a <HAL_DMA_GetState>
 8003386:	4603      	mov	r3, r0
 8003388:	2b01      	cmp	r3, #1
 800338a:	d017      	beq.n	80033bc <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003390:	4a14      	ldr	r2, [pc, #80]	@ (80033e4 <I2C_ITError+0x1dc>)
 8003392:	66da      	str	r2, [r3, #108]	@ 0x6c

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	2200      	movs	r2, #0
 8003398:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80033a0:	4618      	mov	r0, r3
 80033a2:	f7fe fdb1 	bl	8001f08 <HAL_DMA_Abort_IT>
 80033a6:	4603      	mov	r3, r0
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d011      	beq.n	80033d0 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80033b0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80033b2:	687a      	ldr	r2, [r7, #4]
 80033b4:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80033b6:	4610      	mov	r0, r2
 80033b8:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80033ba:	e009      	b.n	80033d0 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80033bc:	6878      	ldr	r0, [r7, #4]
 80033be:	f000 f813 	bl	80033e8 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80033c2:	e005      	b.n	80033d0 <I2C_ITError+0x1c8>
    }
  }
  else
#endif /* HAL_DMA_MODULE_ENABLED */
  {
    I2C_TreatErrorCallback(hi2c);
 80033c4:	6878      	ldr	r0, [r7, #4]
 80033c6:	f000 f80f 	bl	80033e8 <I2C_TreatErrorCallback>
  }
}
 80033ca:	e002      	b.n	80033d2 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80033cc:	bf00      	nop
 80033ce:	e000      	b.n	80033d2 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80033d0:	bf00      	nop
}
 80033d2:	bf00      	nop
 80033d4:	3710      	adds	r7, #16
 80033d6:	46bd      	mov	sp, r7
 80033d8:	bd80      	pop	{r7, pc}
 80033da:	bf00      	nop
 80033dc:	ffff0000 	.word	0xffff0000
 80033e0:	080029ef 	.word	0x080029ef
 80033e4:	0800347f 	.word	0x0800347f

080033e8 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	b082      	sub	sp, #8
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80033f6:	b2db      	uxtb	r3, r3
 80033f8:	2b60      	cmp	r3, #96	@ 0x60
 80033fa:	d10e      	bne.n	800341a <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	2220      	movs	r2, #32
 8003400:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	2200      	movs	r2, #0
 8003408:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	2200      	movs	r2, #0
 800340e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8003412:	6878      	ldr	r0, [r7, #4]
 8003414:	f7ff fae1 	bl	80029da <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003418:	e009      	b.n	800342e <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	2200      	movs	r2, #0
 800341e:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	2200      	movs	r2, #0
 8003424:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8003428:	6878      	ldr	r0, [r7, #4]
 800342a:	f7ff facc 	bl	80029c6 <HAL_I2C_ErrorCallback>
}
 800342e:	bf00      	nop
 8003430:	3708      	adds	r7, #8
 8003432:	46bd      	mov	sp, r7
 8003434:	bd80      	pop	{r7, pc}

08003436 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003436:	b480      	push	{r7}
 8003438:	b083      	sub	sp, #12
 800343a:	af00      	add	r7, sp, #0
 800343c:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	699b      	ldr	r3, [r3, #24]
 8003444:	f003 0302 	and.w	r3, r3, #2
 8003448:	2b02      	cmp	r3, #2
 800344a:	d103      	bne.n	8003454 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	2200      	movs	r2, #0
 8003452:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	699b      	ldr	r3, [r3, #24]
 800345a:	f003 0301 	and.w	r3, r3, #1
 800345e:	2b01      	cmp	r3, #1
 8003460:	d007      	beq.n	8003472 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	699a      	ldr	r2, [r3, #24]
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f042 0201 	orr.w	r2, r2, #1
 8003470:	619a      	str	r2, [r3, #24]
  }
}
 8003472:	bf00      	nop
 8003474:	370c      	adds	r7, #12
 8003476:	46bd      	mov	sp, r7
 8003478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347c:	4770      	bx	lr

0800347e <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800347e:	b580      	push	{r7, lr}
 8003480:	b084      	sub	sp, #16
 8003482:	af00      	add	r7, sp, #0
 8003484:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800348a:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003490:	2b00      	cmp	r3, #0
 8003492:	d003      	beq.n	800349c <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003498:	2200      	movs	r2, #0
 800349a:	66da      	str	r2, [r3, #108]	@ 0x6c
  }
  if (hi2c->hdmarx != NULL)
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d003      	beq.n	80034ac <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80034a8:	2200      	movs	r2, #0
 80034aa:	66da      	str	r2, [r3, #108]	@ 0x6c
  }

  I2C_TreatErrorCallback(hi2c);
 80034ac:	68f8      	ldr	r0, [r7, #12]
 80034ae:	f7ff ff9b 	bl	80033e8 <I2C_TreatErrorCallback>
}
 80034b2:	bf00      	nop
 80034b4:	3710      	adds	r7, #16
 80034b6:	46bd      	mov	sp, r7
 80034b8:	bd80      	pop	{r7, pc}

080034ba <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80034ba:	b580      	push	{r7, lr}
 80034bc:	b084      	sub	sp, #16
 80034be:	af00      	add	r7, sp, #0
 80034c0:	60f8      	str	r0, [r7, #12]
 80034c2:	60b9      	str	r1, [r7, #8]
 80034c4:	603b      	str	r3, [r7, #0]
 80034c6:	4613      	mov	r3, r2
 80034c8:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80034ca:	e03b      	b.n	8003544 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80034cc:	69ba      	ldr	r2, [r7, #24]
 80034ce:	6839      	ldr	r1, [r7, #0]
 80034d0:	68f8      	ldr	r0, [r7, #12]
 80034d2:	f000 f8d5 	bl	8003680 <I2C_IsErrorOccurred>
 80034d6:	4603      	mov	r3, r0
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d001      	beq.n	80034e0 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 80034dc:	2301      	movs	r3, #1
 80034de:	e041      	b.n	8003564 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80034e0:	683b      	ldr	r3, [r7, #0]
 80034e2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80034e6:	d02d      	beq.n	8003544 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80034e8:	f7fe fba6 	bl	8001c38 <HAL_GetTick>
 80034ec:	4602      	mov	r2, r0
 80034ee:	69bb      	ldr	r3, [r7, #24]
 80034f0:	1ad3      	subs	r3, r2, r3
 80034f2:	683a      	ldr	r2, [r7, #0]
 80034f4:	429a      	cmp	r2, r3
 80034f6:	d302      	bcc.n	80034fe <I2C_WaitOnFlagUntilTimeout+0x44>
 80034f8:	683b      	ldr	r3, [r7, #0]
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d122      	bne.n	8003544 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	699a      	ldr	r2, [r3, #24]
 8003504:	68bb      	ldr	r3, [r7, #8]
 8003506:	4013      	ands	r3, r2
 8003508:	68ba      	ldr	r2, [r7, #8]
 800350a:	429a      	cmp	r2, r3
 800350c:	bf0c      	ite	eq
 800350e:	2301      	moveq	r3, #1
 8003510:	2300      	movne	r3, #0
 8003512:	b2db      	uxtb	r3, r3
 8003514:	461a      	mov	r2, r3
 8003516:	79fb      	ldrb	r3, [r7, #7]
 8003518:	429a      	cmp	r2, r3
 800351a:	d113      	bne.n	8003544 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003520:	f043 0220 	orr.w	r2, r3, #32
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	2220      	movs	r2, #32
 800352c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	2200      	movs	r2, #0
 8003534:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	2200      	movs	r2, #0
 800353c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8003540:	2301      	movs	r3, #1
 8003542:	e00f      	b.n	8003564 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	699a      	ldr	r2, [r3, #24]
 800354a:	68bb      	ldr	r3, [r7, #8]
 800354c:	4013      	ands	r3, r2
 800354e:	68ba      	ldr	r2, [r7, #8]
 8003550:	429a      	cmp	r2, r3
 8003552:	bf0c      	ite	eq
 8003554:	2301      	moveq	r3, #1
 8003556:	2300      	movne	r3, #0
 8003558:	b2db      	uxtb	r3, r3
 800355a:	461a      	mov	r2, r3
 800355c:	79fb      	ldrb	r3, [r7, #7]
 800355e:	429a      	cmp	r2, r3
 8003560:	d0b4      	beq.n	80034cc <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003562:	2300      	movs	r3, #0
}
 8003564:	4618      	mov	r0, r3
 8003566:	3710      	adds	r7, #16
 8003568:	46bd      	mov	sp, r7
 800356a:	bd80      	pop	{r7, pc}

0800356c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800356c:	b580      	push	{r7, lr}
 800356e:	b084      	sub	sp, #16
 8003570:	af00      	add	r7, sp, #0
 8003572:	60f8      	str	r0, [r7, #12]
 8003574:	60b9      	str	r1, [r7, #8]
 8003576:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003578:	e033      	b.n	80035e2 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800357a:	687a      	ldr	r2, [r7, #4]
 800357c:	68b9      	ldr	r1, [r7, #8]
 800357e:	68f8      	ldr	r0, [r7, #12]
 8003580:	f000 f87e 	bl	8003680 <I2C_IsErrorOccurred>
 8003584:	4603      	mov	r3, r0
 8003586:	2b00      	cmp	r3, #0
 8003588:	d001      	beq.n	800358e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800358a:	2301      	movs	r3, #1
 800358c:	e031      	b.n	80035f2 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800358e:	68bb      	ldr	r3, [r7, #8]
 8003590:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003594:	d025      	beq.n	80035e2 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003596:	f7fe fb4f 	bl	8001c38 <HAL_GetTick>
 800359a:	4602      	mov	r2, r0
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	1ad3      	subs	r3, r2, r3
 80035a0:	68ba      	ldr	r2, [r7, #8]
 80035a2:	429a      	cmp	r2, r3
 80035a4:	d302      	bcc.n	80035ac <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80035a6:	68bb      	ldr	r3, [r7, #8]
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d11a      	bne.n	80035e2 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	699b      	ldr	r3, [r3, #24]
 80035b2:	f003 0302 	and.w	r3, r3, #2
 80035b6:	2b02      	cmp	r3, #2
 80035b8:	d013      	beq.n	80035e2 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035be:	f043 0220 	orr.w	r2, r3, #32
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	2220      	movs	r2, #32
 80035ca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	2200      	movs	r2, #0
 80035d2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	2200      	movs	r2, #0
 80035da:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80035de:	2301      	movs	r3, #1
 80035e0:	e007      	b.n	80035f2 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	699b      	ldr	r3, [r3, #24]
 80035e8:	f003 0302 	and.w	r3, r3, #2
 80035ec:	2b02      	cmp	r3, #2
 80035ee:	d1c4      	bne.n	800357a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80035f0:	2300      	movs	r3, #0
}
 80035f2:	4618      	mov	r0, r3
 80035f4:	3710      	adds	r7, #16
 80035f6:	46bd      	mov	sp, r7
 80035f8:	bd80      	pop	{r7, pc}

080035fa <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80035fa:	b580      	push	{r7, lr}
 80035fc:	b084      	sub	sp, #16
 80035fe:	af00      	add	r7, sp, #0
 8003600:	60f8      	str	r0, [r7, #12]
 8003602:	60b9      	str	r1, [r7, #8]
 8003604:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003606:	e02f      	b.n	8003668 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003608:	687a      	ldr	r2, [r7, #4]
 800360a:	68b9      	ldr	r1, [r7, #8]
 800360c:	68f8      	ldr	r0, [r7, #12]
 800360e:	f000 f837 	bl	8003680 <I2C_IsErrorOccurred>
 8003612:	4603      	mov	r3, r0
 8003614:	2b00      	cmp	r3, #0
 8003616:	d001      	beq.n	800361c <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003618:	2301      	movs	r3, #1
 800361a:	e02d      	b.n	8003678 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800361c:	f7fe fb0c 	bl	8001c38 <HAL_GetTick>
 8003620:	4602      	mov	r2, r0
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	1ad3      	subs	r3, r2, r3
 8003626:	68ba      	ldr	r2, [r7, #8]
 8003628:	429a      	cmp	r2, r3
 800362a:	d302      	bcc.n	8003632 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800362c:	68bb      	ldr	r3, [r7, #8]
 800362e:	2b00      	cmp	r3, #0
 8003630:	d11a      	bne.n	8003668 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	699b      	ldr	r3, [r3, #24]
 8003638:	f003 0320 	and.w	r3, r3, #32
 800363c:	2b20      	cmp	r3, #32
 800363e:	d013      	beq.n	8003668 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003644:	f043 0220 	orr.w	r2, r3, #32
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	2220      	movs	r2, #32
 8003650:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	2200      	movs	r2, #0
 8003658:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	2200      	movs	r2, #0
 8003660:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8003664:	2301      	movs	r3, #1
 8003666:	e007      	b.n	8003678 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	699b      	ldr	r3, [r3, #24]
 800366e:	f003 0320 	and.w	r3, r3, #32
 8003672:	2b20      	cmp	r3, #32
 8003674:	d1c8      	bne.n	8003608 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003676:	2300      	movs	r3, #0
}
 8003678:	4618      	mov	r0, r3
 800367a:	3710      	adds	r7, #16
 800367c:	46bd      	mov	sp, r7
 800367e:	bd80      	pop	{r7, pc}

08003680 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003680:	b580      	push	{r7, lr}
 8003682:	b08a      	sub	sp, #40	@ 0x28
 8003684:	af00      	add	r7, sp, #0
 8003686:	60f8      	str	r0, [r7, #12]
 8003688:	60b9      	str	r1, [r7, #8]
 800368a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800368c:	2300      	movs	r3, #0
 800368e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	699b      	ldr	r3, [r3, #24]
 8003698:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800369a:	2300      	movs	r3, #0
 800369c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80036a2:	69bb      	ldr	r3, [r7, #24]
 80036a4:	f003 0310 	and.w	r3, r3, #16
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d068      	beq.n	800377e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	2210      	movs	r2, #16
 80036b2:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80036b4:	e049      	b.n	800374a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80036b6:	68bb      	ldr	r3, [r7, #8]
 80036b8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80036bc:	d045      	beq.n	800374a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80036be:	f7fe fabb 	bl	8001c38 <HAL_GetTick>
 80036c2:	4602      	mov	r2, r0
 80036c4:	69fb      	ldr	r3, [r7, #28]
 80036c6:	1ad3      	subs	r3, r2, r3
 80036c8:	68ba      	ldr	r2, [r7, #8]
 80036ca:	429a      	cmp	r2, r3
 80036cc:	d302      	bcc.n	80036d4 <I2C_IsErrorOccurred+0x54>
 80036ce:	68bb      	ldr	r3, [r7, #8]
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d13a      	bne.n	800374a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	685b      	ldr	r3, [r3, #4]
 80036da:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80036de:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80036e6:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	699b      	ldr	r3, [r3, #24]
 80036ee:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80036f2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80036f6:	d121      	bne.n	800373c <I2C_IsErrorOccurred+0xbc>
 80036f8:	697b      	ldr	r3, [r7, #20]
 80036fa:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80036fe:	d01d      	beq.n	800373c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8003700:	7cfb      	ldrb	r3, [r7, #19]
 8003702:	2b20      	cmp	r3, #32
 8003704:	d01a      	beq.n	800373c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	685a      	ldr	r2, [r3, #4]
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003714:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003716:	f7fe fa8f 	bl	8001c38 <HAL_GetTick>
 800371a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800371c:	e00e      	b.n	800373c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800371e:	f7fe fa8b 	bl	8001c38 <HAL_GetTick>
 8003722:	4602      	mov	r2, r0
 8003724:	69fb      	ldr	r3, [r7, #28]
 8003726:	1ad3      	subs	r3, r2, r3
 8003728:	2b19      	cmp	r3, #25
 800372a:	d907      	bls.n	800373c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800372c:	6a3b      	ldr	r3, [r7, #32]
 800372e:	f043 0320 	orr.w	r3, r3, #32
 8003732:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003734:	2301      	movs	r3, #1
 8003736:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 800373a:	e006      	b.n	800374a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	699b      	ldr	r3, [r3, #24]
 8003742:	f003 0320 	and.w	r3, r3, #32
 8003746:	2b20      	cmp	r3, #32
 8003748:	d1e9      	bne.n	800371e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	699b      	ldr	r3, [r3, #24]
 8003750:	f003 0320 	and.w	r3, r3, #32
 8003754:	2b20      	cmp	r3, #32
 8003756:	d003      	beq.n	8003760 <I2C_IsErrorOccurred+0xe0>
 8003758:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800375c:	2b00      	cmp	r3, #0
 800375e:	d0aa      	beq.n	80036b6 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003760:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003764:	2b00      	cmp	r3, #0
 8003766:	d103      	bne.n	8003770 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	2220      	movs	r2, #32
 800376e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003770:	6a3b      	ldr	r3, [r7, #32]
 8003772:	f043 0304 	orr.w	r3, r3, #4
 8003776:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003778:	2301      	movs	r3, #1
 800377a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	699b      	ldr	r3, [r3, #24]
 8003784:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003786:	69bb      	ldr	r3, [r7, #24]
 8003788:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800378c:	2b00      	cmp	r3, #0
 800378e:	d00b      	beq.n	80037a8 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003790:	6a3b      	ldr	r3, [r7, #32]
 8003792:	f043 0301 	orr.w	r3, r3, #1
 8003796:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80037a0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80037a2:	2301      	movs	r3, #1
 80037a4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80037a8:	69bb      	ldr	r3, [r7, #24]
 80037aa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d00b      	beq.n	80037ca <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80037b2:	6a3b      	ldr	r3, [r7, #32]
 80037b4:	f043 0308 	orr.w	r3, r3, #8
 80037b8:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80037c2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80037c4:	2301      	movs	r3, #1
 80037c6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80037ca:	69bb      	ldr	r3, [r7, #24]
 80037cc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d00b      	beq.n	80037ec <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80037d4:	6a3b      	ldr	r3, [r7, #32]
 80037d6:	f043 0302 	orr.w	r3, r3, #2
 80037da:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80037e4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80037e6:	2301      	movs	r3, #1
 80037e8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 80037ec:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d01c      	beq.n	800382e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80037f4:	68f8      	ldr	r0, [r7, #12]
 80037f6:	f7ff fe1e 	bl	8003436 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	6859      	ldr	r1, [r3, #4]
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	681a      	ldr	r2, [r3, #0]
 8003804:	4b0d      	ldr	r3, [pc, #52]	@ (800383c <I2C_IsErrorOccurred+0x1bc>)
 8003806:	400b      	ands	r3, r1
 8003808:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800380e:	6a3b      	ldr	r3, [r7, #32]
 8003810:	431a      	orrs	r2, r3
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	2220      	movs	r2, #32
 800381a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	2200      	movs	r2, #0
 8003822:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	2200      	movs	r2, #0
 800382a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 800382e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8003832:	4618      	mov	r0, r3
 8003834:	3728      	adds	r7, #40	@ 0x28
 8003836:	46bd      	mov	sp, r7
 8003838:	bd80      	pop	{r7, pc}
 800383a:	bf00      	nop
 800383c:	fe00e800 	.word	0xfe00e800

08003840 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003840:	b480      	push	{r7}
 8003842:	b087      	sub	sp, #28
 8003844:	af00      	add	r7, sp, #0
 8003846:	60f8      	str	r0, [r7, #12]
 8003848:	607b      	str	r3, [r7, #4]
 800384a:	460b      	mov	r3, r1
 800384c:	817b      	strh	r3, [r7, #10]
 800384e:	4613      	mov	r3, r2
 8003850:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003852:	897b      	ldrh	r3, [r7, #10]
 8003854:	f3c3 0209 	ubfx	r2, r3, #0, #10
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003858:	7a7b      	ldrb	r3, [r7, #9]
 800385a:	041b      	lsls	r3, r3, #16
 800385c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003860:	431a      	orrs	r2, r3
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	431a      	orrs	r2, r3
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003866:	6a3b      	ldr	r3, [r7, #32]
 8003868:	4313      	orrs	r3, r2
 800386a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800386e:	617b      	str	r3, [r7, #20]
                    (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	685a      	ldr	r2, [r3, #4]
 8003876:	6a3b      	ldr	r3, [r7, #32]
 8003878:	0d5b      	lsrs	r3, r3, #21
 800387a:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 800387e:	4b08      	ldr	r3, [pc, #32]	@ (80038a0 <I2C_TransferConfig+0x60>)
 8003880:	430b      	orrs	r3, r1
 8003882:	43db      	mvns	r3, r3
 8003884:	ea02 0103 	and.w	r1, r2, r3
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	697a      	ldr	r2, [r7, #20]
 800388e:	430a      	orrs	r2, r1
 8003890:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003892:	bf00      	nop
 8003894:	371c      	adds	r7, #28
 8003896:	46bd      	mov	sp, r7
 8003898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800389c:	4770      	bx	lr
 800389e:	bf00      	nop
 80038a0:	03ff63ff 	.word	0x03ff63ff

080038a4 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 80038a4:	b480      	push	{r7}
 80038a6:	b085      	sub	sp, #20
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]
 80038ac:	460b      	mov	r3, r1
 80038ae:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 80038b0:	2300      	movs	r3, #0
 80038b2:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80038b4:	887b      	ldrh	r3, [r7, #2]
 80038b6:	f003 0301 	and.w	r3, r3, #1
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d00f      	beq.n	80038de <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 80038c4:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80038cc:	b2db      	uxtb	r3, r3
 80038ce:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80038d2:	2b28      	cmp	r3, #40	@ 0x28
 80038d4:	d003      	beq.n	80038de <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 80038dc:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80038de:	887b      	ldrh	r3, [r7, #2]
 80038e0:	f003 0302 	and.w	r3, r3, #2
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d00f      	beq.n	8003908 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 80038ee:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80038f6:	b2db      	uxtb	r3, r3
 80038f8:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80038fc:	2b28      	cmp	r3, #40	@ 0x28
 80038fe:	d003      	beq.n	8003908 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8003906:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8003908:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800390c:	2b00      	cmp	r3, #0
 800390e:	da03      	bge.n	8003918 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8003916:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8003918:	887b      	ldrh	r3, [r7, #2]
 800391a:	2b10      	cmp	r3, #16
 800391c:	d103      	bne.n	8003926 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8003924:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8003926:	887b      	ldrh	r3, [r7, #2]
 8003928:	2b20      	cmp	r3, #32
 800392a:	d103      	bne.n	8003934 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	f043 0320 	orr.w	r3, r3, #32
 8003932:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8003934:	887b      	ldrh	r3, [r7, #2]
 8003936:	2b40      	cmp	r3, #64	@ 0x40
 8003938:	d103      	bne.n	8003942 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003940:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	6819      	ldr	r1, [r3, #0]
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	43da      	mvns	r2, r3
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	400a      	ands	r2, r1
 8003952:	601a      	str	r2, [r3, #0]
}
 8003954:	bf00      	nop
 8003956:	3714      	adds	r7, #20
 8003958:	46bd      	mov	sp, r7
 800395a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395e:	4770      	bx	lr

08003960 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003960:	b480      	push	{r7}
 8003962:	b083      	sub	sp, #12
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]
 8003968:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003970:	b2db      	uxtb	r3, r3
 8003972:	2b20      	cmp	r3, #32
 8003974:	d138      	bne.n	80039e8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800397c:	2b01      	cmp	r3, #1
 800397e:	d101      	bne.n	8003984 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003980:	2302      	movs	r3, #2
 8003982:	e032      	b.n	80039ea <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	2201      	movs	r2, #1
 8003988:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	2224      	movs	r2, #36	@ 0x24
 8003990:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	681a      	ldr	r2, [r3, #0]
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f022 0201 	bic.w	r2, r2, #1
 80039a2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	681a      	ldr	r2, [r3, #0]
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80039b2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	6819      	ldr	r1, [r3, #0]
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	683a      	ldr	r2, [r7, #0]
 80039c0:	430a      	orrs	r2, r1
 80039c2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	681a      	ldr	r2, [r3, #0]
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f042 0201 	orr.w	r2, r2, #1
 80039d2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	2220      	movs	r2, #32
 80039d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	2200      	movs	r2, #0
 80039e0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80039e4:	2300      	movs	r3, #0
 80039e6:	e000      	b.n	80039ea <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80039e8:	2302      	movs	r3, #2
  }
}
 80039ea:	4618      	mov	r0, r3
 80039ec:	370c      	adds	r7, #12
 80039ee:	46bd      	mov	sp, r7
 80039f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f4:	4770      	bx	lr

080039f6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80039f6:	b480      	push	{r7}
 80039f8:	b085      	sub	sp, #20
 80039fa:	af00      	add	r7, sp, #0
 80039fc:	6078      	str	r0, [r7, #4]
 80039fe:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003a06:	b2db      	uxtb	r3, r3
 8003a08:	2b20      	cmp	r3, #32
 8003a0a:	d139      	bne.n	8003a80 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003a12:	2b01      	cmp	r3, #1
 8003a14:	d101      	bne.n	8003a1a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003a16:	2302      	movs	r3, #2
 8003a18:	e033      	b.n	8003a82 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	2201      	movs	r2, #1
 8003a1e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	2224      	movs	r2, #36	@ 0x24
 8003a26:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	681a      	ldr	r2, [r3, #0]
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f022 0201 	bic.w	r2, r2, #1
 8003a38:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003a48:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003a4a:	683b      	ldr	r3, [r7, #0]
 8003a4c:	021b      	lsls	r3, r3, #8
 8003a4e:	68fa      	ldr	r2, [r7, #12]
 8003a50:	4313      	orrs	r3, r2
 8003a52:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	68fa      	ldr	r2, [r7, #12]
 8003a5a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	681a      	ldr	r2, [r3, #0]
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f042 0201 	orr.w	r2, r2, #1
 8003a6a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	2220      	movs	r2, #32
 8003a70:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2200      	movs	r2, #0
 8003a78:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003a7c:	2300      	movs	r3, #0
 8003a7e:	e000      	b.n	8003a82 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003a80:	2302      	movs	r3, #2
  }
}
 8003a82:	4618      	mov	r0, r3
 8003a84:	3714      	adds	r7, #20
 8003a86:	46bd      	mov	sp, r7
 8003a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8c:	4770      	bx	lr
	...

08003a90 <HAL_ICACHE_ConfigAssociativityMode>:
  *            @arg ICACHE_1WAY   1-way cache (direct mapped cache)
  *            @arg ICACHE_2WAYS  2-ways set associative cache (default)
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef HAL_ICACHE_ConfigAssociativityMode(uint32_t AssociativityMode)
{
 8003a90:	b480      	push	{r7}
 8003a92:	b085      	sub	sp, #20
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003a98:	2300      	movs	r3, #0
 8003a9a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 8003a9c:	4b0b      	ldr	r3, [pc, #44]	@ (8003acc <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f003 0301 	and.w	r3, r3, #1
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d002      	beq.n	8003aae <HAL_ICACHE_ConfigAssociativityMode+0x1e>
  {
    status = HAL_ERROR;
 8003aa8:	2301      	movs	r3, #1
 8003aaa:	73fb      	strb	r3, [r7, #15]
 8003aac:	e007      	b.n	8003abe <HAL_ICACHE_ConfigAssociativityMode+0x2e>
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 8003aae:	4b07      	ldr	r3, [pc, #28]	@ (8003acc <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f023 0204 	bic.w	r2, r3, #4
 8003ab6:	4905      	ldr	r1, [pc, #20]	@ (8003acc <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	4313      	orrs	r3, r2
 8003abc:	600b      	str	r3, [r1, #0]
  }

  return status;
 8003abe:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ac0:	4618      	mov	r0, r3
 8003ac2:	3714      	adds	r7, #20
 8003ac4:	46bd      	mov	sp, r7
 8003ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aca:	4770      	bx	lr
 8003acc:	40030400 	.word	0x40030400

08003ad0 <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 8003ad0:	b480      	push	{r7}
 8003ad2:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 8003ad4:	4b05      	ldr	r3, [pc, #20]	@ (8003aec <HAL_ICACHE_Enable+0x1c>)
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	4a04      	ldr	r2, [pc, #16]	@ (8003aec <HAL_ICACHE_Enable+0x1c>)
 8003ada:	f043 0301 	orr.w	r3, r3, #1
 8003ade:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8003ae0:	2300      	movs	r3, #0
}
 8003ae2:	4618      	mov	r0, r3
 8003ae4:	46bd      	mov	sp, r7
 8003ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aea:	4770      	bx	lr
 8003aec:	40030400 	.word	0x40030400

08003af0 <HAL_PWREx_ControlVoltageScaling>:
  * @note  Before moving to voltage scaling 4, it is mandatory to ensure that
  *        the system frequency is below 24 MHz.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003af0:	b480      	push	{r7}
 8003af2:	b085      	sub	sp, #20
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Get the current voltage scale applied */
  vos_old = READ_BIT(PWR->SVMSR, PWR_SVMSR_ACTVOS);
 8003af8:	4b39      	ldr	r3, [pc, #228]	@ (8003be0 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8003afa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003afc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003b00:	60bb      	str	r3, [r7, #8]

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 8003b02:	68ba      	ldr	r2, [r7, #8]
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	429a      	cmp	r2, r3
 8003b08:	d10b      	bne.n	8003b22 <HAL_PWREx_ControlVoltageScaling+0x32>
  {
    /* Enable USB BOOST after wake up from Stop mode */
    if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003b10:	d905      	bls.n	8003b1e <HAL_PWREx_ControlVoltageScaling+0x2e>
    {
      /* Enable USB BOOST */
      SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8003b12:	4b33      	ldr	r3, [pc, #204]	@ (8003be0 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8003b14:	68db      	ldr	r3, [r3, #12]
 8003b16:	4a32      	ldr	r2, [pc, #200]	@ (8003be0 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8003b18:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003b1c:	60d3      	str	r3, [r2, #12]
    }

    return HAL_OK;
 8003b1e:	2300      	movs	r3, #0
 8003b20:	e057      	b.n	8003bd2 <HAL_PWREx_ControlVoltageScaling+0xe2>
  /* Check voltage scaling level */
  /*
   *  The Embedded power distribution (EPOD) must be enabled before switching to
   *  voltage scale 1 / 2 from voltage scale lower.
   */
  if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003b28:	d90a      	bls.n	8003b40 <HAL_PWREx_ControlVoltageScaling+0x50>
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), (VoltageScaling | PWR_VOSR_BOOSTEN));
 8003b2a:	4b2d      	ldr	r3, [pc, #180]	@ (8003be0 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8003b2c:	68db      	ldr	r3, [r3, #12]
 8003b2e:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	4313      	orrs	r3, r2
 8003b36:	4a2a      	ldr	r2, [pc, #168]	@ (8003be0 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8003b38:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003b3c:	60d3      	str	r3, [r2, #12]
 8003b3e:	e007      	b.n	8003b50 <HAL_PWREx_ControlVoltageScaling+0x60>
  }
  else
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), VoltageScaling);
 8003b40:	4b27      	ldr	r3, [pc, #156]	@ (8003be0 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8003b42:	68db      	ldr	r3, [r3, #12]
 8003b44:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 8003b48:	4925      	ldr	r1, [pc, #148]	@ (8003be0 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	4313      	orrs	r3, r2
 8003b4e:	60cb      	str	r3, [r1, #12]
  }

  /* Wait until VOSRDY is raised */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8003b50:	4b24      	ldr	r3, [pc, #144]	@ (8003be4 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	4a24      	ldr	r2, [pc, #144]	@ (8003be8 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8003b56:	fba2 2303 	umull	r2, r3, r2, r3
 8003b5a:	099b      	lsrs	r3, r3, #6
 8003b5c:	2232      	movs	r2, #50	@ 0x32
 8003b5e:	fb02 f303 	mul.w	r3, r2, r3
 8003b62:	4a21      	ldr	r2, [pc, #132]	@ (8003be8 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8003b64:	fba2 2303 	umull	r2, r3, r2, r3
 8003b68:	099b      	lsrs	r3, r3, #6
 8003b6a:	3301      	adds	r3, #1
 8003b6c:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8003b6e:	e002      	b.n	8003b76 <HAL_PWREx_ControlVoltageScaling+0x86>
  {
    timeout--;
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	3b01      	subs	r3, #1
 8003b74:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8003b76:	4b1a      	ldr	r3, [pc, #104]	@ (8003be0 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8003b78:	68db      	ldr	r3, [r3, #12]
 8003b7a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d102      	bne.n	8003b88 <HAL_PWREx_ControlVoltageScaling+0x98>
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d1f3      	bne.n	8003b70 <HAL_PWREx_ControlVoltageScaling+0x80>
  }

  /* Check time out */
  if (timeout != 0U)
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d01b      	beq.n	8003bc6 <HAL_PWREx_ControlVoltageScaling+0xd6>
  {
    /* Wait until ACTVOSRDY is raised */
    timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8003b8e:	4b15      	ldr	r3, [pc, #84]	@ (8003be4 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	4a15      	ldr	r2, [pc, #84]	@ (8003be8 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8003b94:	fba2 2303 	umull	r2, r3, r2, r3
 8003b98:	099b      	lsrs	r3, r3, #6
 8003b9a:	2232      	movs	r2, #50	@ 0x32
 8003b9c:	fb02 f303 	mul.w	r3, r2, r3
 8003ba0:	4a11      	ldr	r2, [pc, #68]	@ (8003be8 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8003ba2:	fba2 2303 	umull	r2, r3, r2, r3
 8003ba6:	099b      	lsrs	r3, r3, #6
 8003ba8:	3301      	adds	r3, #1
 8003baa:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8003bac:	e002      	b.n	8003bb4 <HAL_PWREx_ControlVoltageScaling+0xc4>
    {
      timeout--;
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	3b01      	subs	r3, #1
 8003bb2:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8003bb4:	4b0a      	ldr	r3, [pc, #40]	@ (8003be0 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8003bb6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003bb8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d102      	bne.n	8003bc6 <HAL_PWREx_ControlVoltageScaling+0xd6>
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d1f3      	bne.n	8003bae <HAL_PWREx_ControlVoltageScaling+0xbe>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d101      	bne.n	8003bd0 <HAL_PWREx_ControlVoltageScaling+0xe0>
  {
    return HAL_TIMEOUT;
 8003bcc:	2303      	movs	r3, #3
 8003bce:	e000      	b.n	8003bd2 <HAL_PWREx_ControlVoltageScaling+0xe2>
  }

  return HAL_OK;
 8003bd0:	2300      	movs	r3, #0
}
 8003bd2:	4618      	mov	r0, r3
 8003bd4:	3714      	adds	r7, #20
 8003bd6:	46bd      	mov	sp, r7
 8003bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bdc:	4770      	bx	lr
 8003bde:	bf00      	nop
 8003be0:	46020800 	.word	0x46020800
 8003be4:	20000018 	.word	0x20000018
 8003be8:	10624dd3 	.word	0x10624dd3

08003bec <HAL_PWREx_GetVoltageRange>:
/**
  * @brief  Return Voltage Scaling Range.
  * @retval Applied voltage scaling value.
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003bec:	b480      	push	{r7}
 8003bee:	af00      	add	r7, sp, #0
  return (PWR->SVMSR & PWR_SVMSR_ACTVOS);
 8003bf0:	4b04      	ldr	r3, [pc, #16]	@ (8003c04 <HAL_PWREx_GetVoltageRange+0x18>)
 8003bf2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003bf4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
}
 8003bf8:	4618      	mov	r0, r3
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c00:	4770      	bx	lr
 8003c02:	bf00      	nop
 8003c04:	46020800 	.word	0x46020800

08003c08 <HAL_PWREx_ConfigSupply>:
  *                        @arg PWR_LDO_SUPPLY  : The LDO regulator supplies the Vcore Power Domains.
  *                        @arg PWR_SMPS_SUPPLY : The SMPS regulator supplies the Vcore Power Domains.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply(uint32_t SupplySource)
{
 8003c08:	b480      	push	{r7}
 8003c0a:	b085      	sub	sp, #20
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_SUPPLY(SupplySource));

  /* Set maximum time out */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8003c10:	4b22      	ldr	r3, [pc, #136]	@ (8003c9c <HAL_PWREx_ConfigSupply+0x94>)
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	4a22      	ldr	r2, [pc, #136]	@ (8003ca0 <HAL_PWREx_ConfigSupply+0x98>)
 8003c16:	fba2 2303 	umull	r2, r3, r2, r3
 8003c1a:	099b      	lsrs	r3, r3, #6
 8003c1c:	2232      	movs	r2, #50	@ 0x32
 8003c1e:	fb02 f303 	mul.w	r3, r2, r3
 8003c22:	4a1f      	ldr	r2, [pc, #124]	@ (8003ca0 <HAL_PWREx_ConfigSupply+0x98>)
 8003c24:	fba2 2303 	umull	r2, r3, r2, r3
 8003c28:	099b      	lsrs	r3, r3, #6
 8003c2a:	3301      	adds	r3, #1
 8003c2c:	60fb      	str	r3, [r7, #12]

  /* Configure the LDO as system regulator supply */
  if (SupplySource == PWR_LDO_SUPPLY)
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d113      	bne.n	8003c5c <HAL_PWREx_ConfigSupply+0x54>
  {
    /* Set the power supply configuration */
    CLEAR_BIT(PWR->CR3, PWR_CR3_REGSEL);
 8003c34:	4b1b      	ldr	r3, [pc, #108]	@ (8003ca4 <HAL_PWREx_ConfigSupply+0x9c>)
 8003c36:	689b      	ldr	r3, [r3, #8]
 8003c38:	4a1a      	ldr	r2, [pc, #104]	@ (8003ca4 <HAL_PWREx_ConfigSupply+0x9c>)
 8003c3a:	f023 0302 	bic.w	r3, r3, #2
 8003c3e:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8003c40:	e002      	b.n	8003c48 <HAL_PWREx_ConfigSupply+0x40>
    {
      timeout--;
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	3b01      	subs	r3, #1
 8003c46:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8003c48:	4b16      	ldr	r3, [pc, #88]	@ (8003ca4 <HAL_PWREx_ConfigSupply+0x9c>)
 8003c4a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c4c:	f003 0302 	and.w	r3, r3, #2
 8003c50:	2b02      	cmp	r3, #2
 8003c52:	d116      	bne.n	8003c82 <HAL_PWREx_ConfigSupply+0x7a>
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d1f3      	bne.n	8003c42 <HAL_PWREx_ConfigSupply+0x3a>
 8003c5a:	e012      	b.n	8003c82 <HAL_PWREx_ConfigSupply+0x7a>
  }
  /* Configure the SMPS as system regulator supply */
  else
  {
    /* Set the power supply configuration */
    SET_BIT(PWR->CR3, PWR_CR3_REGSEL);
 8003c5c:	4b11      	ldr	r3, [pc, #68]	@ (8003ca4 <HAL_PWREx_ConfigSupply+0x9c>)
 8003c5e:	689b      	ldr	r3, [r3, #8]
 8003c60:	4a10      	ldr	r2, [pc, #64]	@ (8003ca4 <HAL_PWREx_ConfigSupply+0x9c>)
 8003c62:	f043 0302 	orr.w	r3, r3, #2
 8003c66:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8003c68:	e002      	b.n	8003c70 <HAL_PWREx_ConfigSupply+0x68>
    {
      timeout--;
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	3b01      	subs	r3, #1
 8003c6e:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8003c70:	4b0c      	ldr	r3, [pc, #48]	@ (8003ca4 <HAL_PWREx_ConfigSupply+0x9c>)
 8003c72:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c74:	f003 0302 	and.w	r3, r3, #2
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d102      	bne.n	8003c82 <HAL_PWREx_ConfigSupply+0x7a>
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d1f3      	bne.n	8003c6a <HAL_PWREx_ConfigSupply+0x62>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d101      	bne.n	8003c8c <HAL_PWREx_ConfigSupply+0x84>
  {
    return HAL_TIMEOUT;
 8003c88:	2303      	movs	r3, #3
 8003c8a:	e000      	b.n	8003c8e <HAL_PWREx_ConfigSupply+0x86>
  }

  return HAL_OK;
 8003c8c:	2300      	movs	r3, #0
}
 8003c8e:	4618      	mov	r0, r3
 8003c90:	3714      	adds	r7, #20
 8003c92:	46bd      	mov	sp, r7
 8003c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c98:	4770      	bx	lr
 8003c9a:	bf00      	nop
 8003c9c:	20000018 	.word	0x20000018
 8003ca0:	10624dd3 	.word	0x10624dd3
 8003ca4:	46020800 	.word	0x46020800

08003ca8 <HAL_PWREx_EnableVddIO2>:
  * @note   Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8003ca8:	b480      	push	{r7}
 8003caa:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_IO2SV);
 8003cac:	4b05      	ldr	r3, [pc, #20]	@ (8003cc4 <HAL_PWREx_EnableVddIO2+0x1c>)
 8003cae:	691b      	ldr	r3, [r3, #16]
 8003cb0:	4a04      	ldr	r2, [pc, #16]	@ (8003cc4 <HAL_PWREx_EnableVddIO2+0x1c>)
 8003cb2:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8003cb6:	6113      	str	r3, [r2, #16]
}
 8003cb8:	bf00      	nop
 8003cba:	46bd      	mov	sp, r7
 8003cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc0:	4770      	bx	lr
 8003cc2:	bf00      	nop
 8003cc4:	46020800 	.word	0x46020800

08003cc8 <HAL_PWREx_DisableUCPDDeadBattery>:
  *         pull-down or to handover control to the UCPD (the UCPD must be
  *         initialized before doing the disable).
  * @retval None.
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8003cc8:	b480      	push	{r7}
 8003cca:	af00      	add	r7, sp, #0
  SET_BIT(PWR->UCPDR, PWR_UCPDR_UCPD_DBDIS);
 8003ccc:	4b05      	ldr	r3, [pc, #20]	@ (8003ce4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003cce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cd0:	4a04      	ldr	r2, [pc, #16]	@ (8003ce4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003cd2:	f043 0301 	orr.w	r3, r3, #1
 8003cd6:	62d3      	str	r3, [r2, #44]	@ 0x2c
}
 8003cd8:	bf00      	nop
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce0:	4770      	bx	lr
 8003ce2:	bf00      	nop
 8003ce4:	46020800 	.word	0x46020800

08003ce8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pRCC_OscInitStruct)
{
 8003ce8:	b580      	push	{r7, lr}
 8003cea:	b08e      	sub	sp, #56	@ 0x38
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source;
  uint32_t pll_config;
  FlagStatus pwrboosten = RESET;
 8003cf0:	2300      	movs	r3, #0
 8003cf2:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pRCC_OscInitStruct == NULL)
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d102      	bne.n	8003d02 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8003cfc:	2301      	movs	r3, #1
 8003cfe:	f000 bec8 	b.w	8004a92 <HAL_RCC_OscConfig+0xdaa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pRCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003d02:	4b99      	ldr	r3, [pc, #612]	@ (8003f68 <HAL_RCC_OscConfig+0x280>)
 8003d04:	69db      	ldr	r3, [r3, #28]
 8003d06:	f003 030c 	and.w	r3, r3, #12
 8003d0a:	633b      	str	r3, [r7, #48]	@ 0x30
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003d0c:	4b96      	ldr	r3, [pc, #600]	@ (8003f68 <HAL_RCC_OscConfig+0x280>)
 8003d0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d10:	f003 0303 	and.w	r3, r3, #3
 8003d14:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /*----------------------------- MSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f003 0310 	and.w	r3, r3, #16
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	f000 816c 	beq.w	8003ffc <HAL_RCC_OscConfig+0x314>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(pRCC_OscInitStruct->MSIClockRange));

    /*Check if MSI is used as system clock or as PLL source when PLL is selected as system clock*/

    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8003d24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d007      	beq.n	8003d3a <HAL_RCC_OscConfig+0x52>
 8003d2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d2c:	2b0c      	cmp	r3, #12
 8003d2e:	f040 80de 	bne.w	8003eee <HAL_RCC_OscConfig+0x206>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003d32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d34:	2b01      	cmp	r3, #1
 8003d36:	f040 80da 	bne.w	8003eee <HAL_RCC_OscConfig+0x206>
    {
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	69db      	ldr	r3, [r3, #28]
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d102      	bne.n	8003d48 <HAL_RCC_OscConfig+0x60>
      {
        return HAL_ERROR;
 8003d42:	2301      	movs	r3, #1
 8003d44:	f000 bea5 	b.w	8004a92 <HAL_RCC_OscConfig+0xdaa>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device */
        if (pRCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003d4c:	4b86      	ldr	r3, [pc, #536]	@ (8003f68 <HAL_RCC_OscConfig+0x280>)
 8003d4e:	689b      	ldr	r3, [r3, #8]
 8003d50:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d004      	beq.n	8003d62 <HAL_RCC_OscConfig+0x7a>
 8003d58:	4b83      	ldr	r3, [pc, #524]	@ (8003f68 <HAL_RCC_OscConfig+0x280>)
 8003d5a:	689b      	ldr	r3, [r3, #8]
 8003d5c:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8003d60:	e005      	b.n	8003d6e <HAL_RCC_OscConfig+0x86>
 8003d62:	4b81      	ldr	r3, [pc, #516]	@ (8003f68 <HAL_RCC_OscConfig+0x280>)
 8003d64:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8003d68:	041b      	lsls	r3, r3, #16
 8003d6a:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8003d6e:	4293      	cmp	r3, r2
 8003d70:	d255      	bcs.n	8003e1e <HAL_RCC_OscConfig+0x136>
        {
          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8003d72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d10a      	bne.n	8003d8e <HAL_RCC_OscConfig+0xa6>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d7c:	4618      	mov	r0, r3
 8003d7e:	f001 fa11 	bl	80051a4 <RCC_SetFlashLatencyFromMSIRange>
 8003d82:	4603      	mov	r3, r0
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d002      	beq.n	8003d8e <HAL_RCC_OscConfig+0xa6>
            {
              return HAL_ERROR;
 8003d88:	2301      	movs	r3, #1
 8003d8a:	f000 be82 	b.w	8004a92 <HAL_RCC_OscConfig+0xdaa>
            }
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8003d8e:	4b76      	ldr	r3, [pc, #472]	@ (8003f68 <HAL_RCC_OscConfig+0x280>)
 8003d90:	689b      	ldr	r3, [r3, #8]
 8003d92:	4a75      	ldr	r2, [pc, #468]	@ (8003f68 <HAL_RCC_OscConfig+0x280>)
 8003d94:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003d98:	6093      	str	r3, [r2, #8]
 8003d9a:	4b73      	ldr	r3, [pc, #460]	@ (8003f68 <HAL_RCC_OscConfig+0x280>)
 8003d9c:	689b      	ldr	r3, [r3, #8]
 8003d9e:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003da6:	4970      	ldr	r1, [pc, #448]	@ (8003f68 <HAL_RCC_OscConfig+0x280>)
 8003da8:	4313      	orrs	r3, r2
 8003daa:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003db0:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8003db4:	d309      	bcc.n	8003dca <HAL_RCC_OscConfig+0xe2>
 8003db6:	4b6c      	ldr	r3, [pc, #432]	@ (8003f68 <HAL_RCC_OscConfig+0x280>)
 8003db8:	68db      	ldr	r3, [r3, #12]
 8003dba:	f023 021f 	bic.w	r2, r3, #31
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	6a1b      	ldr	r3, [r3, #32]
 8003dc2:	4969      	ldr	r1, [pc, #420]	@ (8003f68 <HAL_RCC_OscConfig+0x280>)
 8003dc4:	4313      	orrs	r3, r2
 8003dc6:	60cb      	str	r3, [r1, #12]
 8003dc8:	e07e      	b.n	8003ec8 <HAL_RCC_OscConfig+0x1e0>
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	da0a      	bge.n	8003de8 <HAL_RCC_OscConfig+0x100>
 8003dd2:	4b65      	ldr	r3, [pc, #404]	@ (8003f68 <HAL_RCC_OscConfig+0x280>)
 8003dd4:	68db      	ldr	r3, [r3, #12]
 8003dd6:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	6a1b      	ldr	r3, [r3, #32]
 8003dde:	015b      	lsls	r3, r3, #5
 8003de0:	4961      	ldr	r1, [pc, #388]	@ (8003f68 <HAL_RCC_OscConfig+0x280>)
 8003de2:	4313      	orrs	r3, r2
 8003de4:	60cb      	str	r3, [r1, #12]
 8003de6:	e06f      	b.n	8003ec8 <HAL_RCC_OscConfig+0x1e0>
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003df0:	d30a      	bcc.n	8003e08 <HAL_RCC_OscConfig+0x120>
 8003df2:	4b5d      	ldr	r3, [pc, #372]	@ (8003f68 <HAL_RCC_OscConfig+0x280>)
 8003df4:	68db      	ldr	r3, [r3, #12]
 8003df6:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	6a1b      	ldr	r3, [r3, #32]
 8003dfe:	029b      	lsls	r3, r3, #10
 8003e00:	4959      	ldr	r1, [pc, #356]	@ (8003f68 <HAL_RCC_OscConfig+0x280>)
 8003e02:	4313      	orrs	r3, r2
 8003e04:	60cb      	str	r3, [r1, #12]
 8003e06:	e05f      	b.n	8003ec8 <HAL_RCC_OscConfig+0x1e0>
 8003e08:	4b57      	ldr	r3, [pc, #348]	@ (8003f68 <HAL_RCC_OscConfig+0x280>)
 8003e0a:	68db      	ldr	r3, [r3, #12]
 8003e0c:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	6a1b      	ldr	r3, [r3, #32]
 8003e14:	03db      	lsls	r3, r3, #15
 8003e16:	4954      	ldr	r1, [pc, #336]	@ (8003f68 <HAL_RCC_OscConfig+0x280>)
 8003e18:	4313      	orrs	r3, r2
 8003e1a:	60cb      	str	r3, [r1, #12]
 8003e1c:	e054      	b.n	8003ec8 <HAL_RCC_OscConfig+0x1e0>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8003e1e:	4b52      	ldr	r3, [pc, #328]	@ (8003f68 <HAL_RCC_OscConfig+0x280>)
 8003e20:	689b      	ldr	r3, [r3, #8]
 8003e22:	4a51      	ldr	r2, [pc, #324]	@ (8003f68 <HAL_RCC_OscConfig+0x280>)
 8003e24:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003e28:	6093      	str	r3, [r2, #8]
 8003e2a:	4b4f      	ldr	r3, [pc, #316]	@ (8003f68 <HAL_RCC_OscConfig+0x280>)
 8003e2c:	689b      	ldr	r3, [r3, #8]
 8003e2e:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e36:	494c      	ldr	r1, [pc, #304]	@ (8003f68 <HAL_RCC_OscConfig+0x280>)
 8003e38:	4313      	orrs	r3, r2
 8003e3a:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e40:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8003e44:	d309      	bcc.n	8003e5a <HAL_RCC_OscConfig+0x172>
 8003e46:	4b48      	ldr	r3, [pc, #288]	@ (8003f68 <HAL_RCC_OscConfig+0x280>)
 8003e48:	68db      	ldr	r3, [r3, #12]
 8003e4a:	f023 021f 	bic.w	r2, r3, #31
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	6a1b      	ldr	r3, [r3, #32]
 8003e52:	4945      	ldr	r1, [pc, #276]	@ (8003f68 <HAL_RCC_OscConfig+0x280>)
 8003e54:	4313      	orrs	r3, r2
 8003e56:	60cb      	str	r3, [r1, #12]
 8003e58:	e028      	b.n	8003eac <HAL_RCC_OscConfig+0x1c4>
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	da0a      	bge.n	8003e78 <HAL_RCC_OscConfig+0x190>
 8003e62:	4b41      	ldr	r3, [pc, #260]	@ (8003f68 <HAL_RCC_OscConfig+0x280>)
 8003e64:	68db      	ldr	r3, [r3, #12]
 8003e66:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	6a1b      	ldr	r3, [r3, #32]
 8003e6e:	015b      	lsls	r3, r3, #5
 8003e70:	493d      	ldr	r1, [pc, #244]	@ (8003f68 <HAL_RCC_OscConfig+0x280>)
 8003e72:	4313      	orrs	r3, r2
 8003e74:	60cb      	str	r3, [r1, #12]
 8003e76:	e019      	b.n	8003eac <HAL_RCC_OscConfig+0x1c4>
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e7c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003e80:	d30a      	bcc.n	8003e98 <HAL_RCC_OscConfig+0x1b0>
 8003e82:	4b39      	ldr	r3, [pc, #228]	@ (8003f68 <HAL_RCC_OscConfig+0x280>)
 8003e84:	68db      	ldr	r3, [r3, #12]
 8003e86:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	6a1b      	ldr	r3, [r3, #32]
 8003e8e:	029b      	lsls	r3, r3, #10
 8003e90:	4935      	ldr	r1, [pc, #212]	@ (8003f68 <HAL_RCC_OscConfig+0x280>)
 8003e92:	4313      	orrs	r3, r2
 8003e94:	60cb      	str	r3, [r1, #12]
 8003e96:	e009      	b.n	8003eac <HAL_RCC_OscConfig+0x1c4>
 8003e98:	4b33      	ldr	r3, [pc, #204]	@ (8003f68 <HAL_RCC_OscConfig+0x280>)
 8003e9a:	68db      	ldr	r3, [r3, #12]
 8003e9c:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	6a1b      	ldr	r3, [r3, #32]
 8003ea4:	03db      	lsls	r3, r3, #15
 8003ea6:	4930      	ldr	r1, [pc, #192]	@ (8003f68 <HAL_RCC_OscConfig+0x280>)
 8003ea8:	4313      	orrs	r3, r2
 8003eaa:	60cb      	str	r3, [r1, #12]
                                                (pRCC_OscInitStruct->MSIClockRange));

          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8003eac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d10a      	bne.n	8003ec8 <HAL_RCC_OscConfig+0x1e0>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003eb6:	4618      	mov	r0, r3
 8003eb8:	f001 f974 	bl	80051a4 <RCC_SetFlashLatencyFromMSIRange>
 8003ebc:	4603      	mov	r3, r0
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d002      	beq.n	8003ec8 <HAL_RCC_OscConfig+0x1e0>
            {
              return HAL_ERROR;
 8003ec2:	2301      	movs	r3, #1
 8003ec4:	f000 bde5 	b.w	8004a92 <HAL_RCC_OscConfig+0xdaa>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        (void) HAL_RCC_GetHCLKFreq();
 8003ec8:	f001 f8de 	bl	8005088 <HAL_RCC_GetHCLKFreq>
        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003ecc:	4b27      	ldr	r3, [pc, #156]	@ (8003f6c <HAL_RCC_OscConfig+0x284>)
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	4618      	mov	r0, r3
 8003ed2:	f7fd fb11 	bl	80014f8 <HAL_InitTick>
 8003ed6:	4603      	mov	r3, r0
 8003ed8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if (status != HAL_OK)
 8003edc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	f000 808a 	beq.w	8003ffa <HAL_RCC_OscConfig+0x312>
        {
          return status;
 8003ee6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003eea:	f000 bdd2 	b.w	8004a92 <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Check the MSI State */
      if (pRCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	69db      	ldr	r3, [r3, #28]
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d066      	beq.n	8003fc4 <HAL_RCC_OscConfig+0x2dc>
      {
        /* Enable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_ENABLE();
 8003ef6:	4b1c      	ldr	r3, [pc, #112]	@ (8003f68 <HAL_RCC_OscConfig+0x280>)
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	4a1b      	ldr	r2, [pc, #108]	@ (8003f68 <HAL_RCC_OscConfig+0x280>)
 8003efc:	f043 0301 	orr.w	r3, r3, #1
 8003f00:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8003f02:	f7fd fe99 	bl	8001c38 <HAL_GetTick>
 8003f06:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8003f08:	e009      	b.n	8003f1e <HAL_RCC_OscConfig+0x236>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003f0a:	f7fd fe95 	bl	8001c38 <HAL_GetTick>
 8003f0e:	4602      	mov	r2, r0
 8003f10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f12:	1ad3      	subs	r3, r2, r3
 8003f14:	2b02      	cmp	r3, #2
 8003f16:	d902      	bls.n	8003f1e <HAL_RCC_OscConfig+0x236>
          {
            return HAL_TIMEOUT;
 8003f18:	2303      	movs	r3, #3
 8003f1a:	f000 bdba 	b.w	8004a92 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8003f1e:	4b12      	ldr	r3, [pc, #72]	@ (8003f68 <HAL_RCC_OscConfig+0x280>)
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f003 0304 	and.w	r3, r3, #4
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d0ef      	beq.n	8003f0a <HAL_RCC_OscConfig+0x222>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range */
        __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8003f2a:	4b0f      	ldr	r3, [pc, #60]	@ (8003f68 <HAL_RCC_OscConfig+0x280>)
 8003f2c:	689b      	ldr	r3, [r3, #8]
 8003f2e:	4a0e      	ldr	r2, [pc, #56]	@ (8003f68 <HAL_RCC_OscConfig+0x280>)
 8003f30:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003f34:	6093      	str	r3, [r2, #8]
 8003f36:	4b0c      	ldr	r3, [pc, #48]	@ (8003f68 <HAL_RCC_OscConfig+0x280>)
 8003f38:	689b      	ldr	r3, [r3, #8]
 8003f3a:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f42:	4909      	ldr	r1, [pc, #36]	@ (8003f68 <HAL_RCC_OscConfig+0x280>)
 8003f44:	4313      	orrs	r3, r2
 8003f46:	608b      	str	r3, [r1, #8]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f4c:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8003f50:	d30e      	bcc.n	8003f70 <HAL_RCC_OscConfig+0x288>
 8003f52:	4b05      	ldr	r3, [pc, #20]	@ (8003f68 <HAL_RCC_OscConfig+0x280>)
 8003f54:	68db      	ldr	r3, [r3, #12]
 8003f56:	f023 021f 	bic.w	r2, r3, #31
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	6a1b      	ldr	r3, [r3, #32]
 8003f5e:	4902      	ldr	r1, [pc, #8]	@ (8003f68 <HAL_RCC_OscConfig+0x280>)
 8003f60:	4313      	orrs	r3, r2
 8003f62:	60cb      	str	r3, [r1, #12]
 8003f64:	e04a      	b.n	8003ffc <HAL_RCC_OscConfig+0x314>
 8003f66:	bf00      	nop
 8003f68:	46020c00 	.word	0x46020c00
 8003f6c:	20000038 	.word	0x20000038
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	da0a      	bge.n	8003f8e <HAL_RCC_OscConfig+0x2a6>
 8003f78:	4b98      	ldr	r3, [pc, #608]	@ (80041dc <HAL_RCC_OscConfig+0x4f4>)
 8003f7a:	68db      	ldr	r3, [r3, #12]
 8003f7c:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	6a1b      	ldr	r3, [r3, #32]
 8003f84:	015b      	lsls	r3, r3, #5
 8003f86:	4995      	ldr	r1, [pc, #596]	@ (80041dc <HAL_RCC_OscConfig+0x4f4>)
 8003f88:	4313      	orrs	r3, r2
 8003f8a:	60cb      	str	r3, [r1, #12]
 8003f8c:	e036      	b.n	8003ffc <HAL_RCC_OscConfig+0x314>
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f92:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003f96:	d30a      	bcc.n	8003fae <HAL_RCC_OscConfig+0x2c6>
 8003f98:	4b90      	ldr	r3, [pc, #576]	@ (80041dc <HAL_RCC_OscConfig+0x4f4>)
 8003f9a:	68db      	ldr	r3, [r3, #12]
 8003f9c:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	6a1b      	ldr	r3, [r3, #32]
 8003fa4:	029b      	lsls	r3, r3, #10
 8003fa6:	498d      	ldr	r1, [pc, #564]	@ (80041dc <HAL_RCC_OscConfig+0x4f4>)
 8003fa8:	4313      	orrs	r3, r2
 8003faa:	60cb      	str	r3, [r1, #12]
 8003fac:	e026      	b.n	8003ffc <HAL_RCC_OscConfig+0x314>
 8003fae:	4b8b      	ldr	r3, [pc, #556]	@ (80041dc <HAL_RCC_OscConfig+0x4f4>)
 8003fb0:	68db      	ldr	r3, [r3, #12]
 8003fb2:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	6a1b      	ldr	r3, [r3, #32]
 8003fba:	03db      	lsls	r3, r3, #15
 8003fbc:	4987      	ldr	r1, [pc, #540]	@ (80041dc <HAL_RCC_OscConfig+0x4f4>)
 8003fbe:	4313      	orrs	r3, r2
 8003fc0:	60cb      	str	r3, [r1, #12]
 8003fc2:	e01b      	b.n	8003ffc <HAL_RCC_OscConfig+0x314>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_DISABLE();
 8003fc4:	4b85      	ldr	r3, [pc, #532]	@ (80041dc <HAL_RCC_OscConfig+0x4f4>)
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	4a84      	ldr	r2, [pc, #528]	@ (80041dc <HAL_RCC_OscConfig+0x4f4>)
 8003fca:	f023 0301 	bic.w	r3, r3, #1
 8003fce:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8003fd0:	f7fd fe32 	bl	8001c38 <HAL_GetTick>
 8003fd4:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8003fd6:	e009      	b.n	8003fec <HAL_RCC_OscConfig+0x304>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003fd8:	f7fd fe2e 	bl	8001c38 <HAL_GetTick>
 8003fdc:	4602      	mov	r2, r0
 8003fde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003fe0:	1ad3      	subs	r3, r2, r3
 8003fe2:	2b02      	cmp	r3, #2
 8003fe4:	d902      	bls.n	8003fec <HAL_RCC_OscConfig+0x304>
          {
            return HAL_TIMEOUT;
 8003fe6:	2303      	movs	r3, #3
 8003fe8:	f000 bd53 	b.w	8004a92 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8003fec:	4b7b      	ldr	r3, [pc, #492]	@ (80041dc <HAL_RCC_OscConfig+0x4f4>)
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f003 0304 	and.w	r3, r3, #4
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d1ef      	bne.n	8003fd8 <HAL_RCC_OscConfig+0x2f0>
 8003ff8:	e000      	b.n	8003ffc <HAL_RCC_OscConfig+0x314>
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8003ffa:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f003 0301 	and.w	r3, r3, #1
 8004004:	2b00      	cmp	r3, #0
 8004006:	f000 808b 	beq.w	8004120 <HAL_RCC_OscConfig+0x438>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pRCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800400a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800400c:	2b08      	cmp	r3, #8
 800400e:	d005      	beq.n	800401c <HAL_RCC_OscConfig+0x334>
 8004010:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004012:	2b0c      	cmp	r3, #12
 8004014:	d109      	bne.n	800402a <HAL_RCC_OscConfig+0x342>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004016:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004018:	2b03      	cmp	r3, #3
 800401a:	d106      	bne.n	800402a <HAL_RCC_OscConfig+0x342>
    {
      if (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	685b      	ldr	r3, [r3, #4]
 8004020:	2b00      	cmp	r3, #0
 8004022:	d17d      	bne.n	8004120 <HAL_RCC_OscConfig+0x438>
      {
        return HAL_ERROR;
 8004024:	2301      	movs	r3, #1
 8004026:	f000 bd34 	b.w	8004a92 <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	685b      	ldr	r3, [r3, #4]
 800402e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004032:	d106      	bne.n	8004042 <HAL_RCC_OscConfig+0x35a>
 8004034:	4b69      	ldr	r3, [pc, #420]	@ (80041dc <HAL_RCC_OscConfig+0x4f4>)
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	4a68      	ldr	r2, [pc, #416]	@ (80041dc <HAL_RCC_OscConfig+0x4f4>)
 800403a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800403e:	6013      	str	r3, [r2, #0]
 8004040:	e041      	b.n	80040c6 <HAL_RCC_OscConfig+0x3de>
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	685b      	ldr	r3, [r3, #4]
 8004046:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800404a:	d112      	bne.n	8004072 <HAL_RCC_OscConfig+0x38a>
 800404c:	4b63      	ldr	r3, [pc, #396]	@ (80041dc <HAL_RCC_OscConfig+0x4f4>)
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	4a62      	ldr	r2, [pc, #392]	@ (80041dc <HAL_RCC_OscConfig+0x4f4>)
 8004052:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004056:	6013      	str	r3, [r2, #0]
 8004058:	4b60      	ldr	r3, [pc, #384]	@ (80041dc <HAL_RCC_OscConfig+0x4f4>)
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	4a5f      	ldr	r2, [pc, #380]	@ (80041dc <HAL_RCC_OscConfig+0x4f4>)
 800405e:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8004062:	6013      	str	r3, [r2, #0]
 8004064:	4b5d      	ldr	r3, [pc, #372]	@ (80041dc <HAL_RCC_OscConfig+0x4f4>)
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	4a5c      	ldr	r2, [pc, #368]	@ (80041dc <HAL_RCC_OscConfig+0x4f4>)
 800406a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800406e:	6013      	str	r3, [r2, #0]
 8004070:	e029      	b.n	80040c6 <HAL_RCC_OscConfig+0x3de>
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	685b      	ldr	r3, [r3, #4]
 8004076:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 800407a:	d112      	bne.n	80040a2 <HAL_RCC_OscConfig+0x3ba>
 800407c:	4b57      	ldr	r3, [pc, #348]	@ (80041dc <HAL_RCC_OscConfig+0x4f4>)
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	4a56      	ldr	r2, [pc, #344]	@ (80041dc <HAL_RCC_OscConfig+0x4f4>)
 8004082:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004086:	6013      	str	r3, [r2, #0]
 8004088:	4b54      	ldr	r3, [pc, #336]	@ (80041dc <HAL_RCC_OscConfig+0x4f4>)
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	4a53      	ldr	r2, [pc, #332]	@ (80041dc <HAL_RCC_OscConfig+0x4f4>)
 800408e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004092:	6013      	str	r3, [r2, #0]
 8004094:	4b51      	ldr	r3, [pc, #324]	@ (80041dc <HAL_RCC_OscConfig+0x4f4>)
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	4a50      	ldr	r2, [pc, #320]	@ (80041dc <HAL_RCC_OscConfig+0x4f4>)
 800409a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800409e:	6013      	str	r3, [r2, #0]
 80040a0:	e011      	b.n	80040c6 <HAL_RCC_OscConfig+0x3de>
 80040a2:	4b4e      	ldr	r3, [pc, #312]	@ (80041dc <HAL_RCC_OscConfig+0x4f4>)
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	4a4d      	ldr	r2, [pc, #308]	@ (80041dc <HAL_RCC_OscConfig+0x4f4>)
 80040a8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80040ac:	6013      	str	r3, [r2, #0]
 80040ae:	4b4b      	ldr	r3, [pc, #300]	@ (80041dc <HAL_RCC_OscConfig+0x4f4>)
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	4a4a      	ldr	r2, [pc, #296]	@ (80041dc <HAL_RCC_OscConfig+0x4f4>)
 80040b4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80040b8:	6013      	str	r3, [r2, #0]
 80040ba:	4b48      	ldr	r3, [pc, #288]	@ (80041dc <HAL_RCC_OscConfig+0x4f4>)
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	4a47      	ldr	r2, [pc, #284]	@ (80041dc <HAL_RCC_OscConfig+0x4f4>)
 80040c0:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80040c4:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	685b      	ldr	r3, [r3, #4]
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d014      	beq.n	80040f8 <HAL_RCC_OscConfig+0x410>
      {
        tickstart = HAL_GetTick();
 80040ce:	f7fd fdb3 	bl	8001c38 <HAL_GetTick>
 80040d2:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80040d4:	e009      	b.n	80040ea <HAL_RCC_OscConfig+0x402>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80040d6:	f7fd fdaf 	bl	8001c38 <HAL_GetTick>
 80040da:	4602      	mov	r2, r0
 80040dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040de:	1ad3      	subs	r3, r2, r3
 80040e0:	2b64      	cmp	r3, #100	@ 0x64
 80040e2:	d902      	bls.n	80040ea <HAL_RCC_OscConfig+0x402>
          {
            return HAL_TIMEOUT;
 80040e4:	2303      	movs	r3, #3
 80040e6:	f000 bcd4 	b.w	8004a92 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80040ea:	4b3c      	ldr	r3, [pc, #240]	@ (80041dc <HAL_RCC_OscConfig+0x4f4>)
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d0ef      	beq.n	80040d6 <HAL_RCC_OscConfig+0x3ee>
 80040f6:	e013      	b.n	8004120 <HAL_RCC_OscConfig+0x438>
          }
        }
      }
      else
      {
        tickstart = HAL_GetTick();
 80040f8:	f7fd fd9e 	bl	8001c38 <HAL_GetTick>
 80040fc:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80040fe:	e009      	b.n	8004114 <HAL_RCC_OscConfig+0x42c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004100:	f7fd fd9a 	bl	8001c38 <HAL_GetTick>
 8004104:	4602      	mov	r2, r0
 8004106:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004108:	1ad3      	subs	r3, r2, r3
 800410a:	2b64      	cmp	r3, #100	@ 0x64
 800410c:	d902      	bls.n	8004114 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 800410e:	2303      	movs	r3, #3
 8004110:	f000 bcbf 	b.w	8004a92 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004114:	4b31      	ldr	r3, [pc, #196]	@ (80041dc <HAL_RCC_OscConfig+0x4f4>)
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800411c:	2b00      	cmp	r3, #0
 800411e:	d1ef      	bne.n	8004100 <HAL_RCC_OscConfig+0x418>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f003 0302 	and.w	r3, r3, #2
 8004128:	2b00      	cmp	r3, #0
 800412a:	d05f      	beq.n	80041ec <HAL_RCC_OscConfig+0x504>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(pRCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800412c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800412e:	2b04      	cmp	r3, #4
 8004130:	d005      	beq.n	800413e <HAL_RCC_OscConfig+0x456>
 8004132:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004134:	2b0c      	cmp	r3, #12
 8004136:	d114      	bne.n	8004162 <HAL_RCC_OscConfig+0x47a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004138:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800413a:	2b02      	cmp	r3, #2
 800413c:	d111      	bne.n	8004162 <HAL_RCC_OscConfig+0x47a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	68db      	ldr	r3, [r3, #12]
 8004142:	2b00      	cmp	r3, #0
 8004144:	d102      	bne.n	800414c <HAL_RCC_OscConfig+0x464>
      {
        return HAL_ERROR;
 8004146:	2301      	movs	r3, #1
 8004148:	f000 bca3 	b.w	8004a92 <HAL_RCC_OscConfig+0xdaa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 800414c:	4b23      	ldr	r3, [pc, #140]	@ (80041dc <HAL_RCC_OscConfig+0x4f4>)
 800414e:	691b      	ldr	r3, [r3, #16]
 8004150:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	691b      	ldr	r3, [r3, #16]
 8004158:	041b      	lsls	r3, r3, #16
 800415a:	4920      	ldr	r1, [pc, #128]	@ (80041dc <HAL_RCC_OscConfig+0x4f4>)
 800415c:	4313      	orrs	r3, r2
 800415e:	610b      	str	r3, [r1, #16]
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8004160:	e044      	b.n	80041ec <HAL_RCC_OscConfig+0x504>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	68db      	ldr	r3, [r3, #12]
 8004166:	2b00      	cmp	r3, #0
 8004168:	d024      	beq.n	80041b4 <HAL_RCC_OscConfig+0x4cc>
      {
        /* Enable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_ENABLE();
 800416a:	4b1c      	ldr	r3, [pc, #112]	@ (80041dc <HAL_RCC_OscConfig+0x4f4>)
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	4a1b      	ldr	r2, [pc, #108]	@ (80041dc <HAL_RCC_OscConfig+0x4f4>)
 8004170:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004174:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8004176:	f7fd fd5f 	bl	8001c38 <HAL_GetTick>
 800417a:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800417c:	e009      	b.n	8004192 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800417e:	f7fd fd5b 	bl	8001c38 <HAL_GetTick>
 8004182:	4602      	mov	r2, r0
 8004184:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004186:	1ad3      	subs	r3, r2, r3
 8004188:	2b02      	cmp	r3, #2
 800418a:	d902      	bls.n	8004192 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800418c:	2303      	movs	r3, #3
 800418e:	f000 bc80 	b.w	8004a92 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004192:	4b12      	ldr	r3, [pc, #72]	@ (80041dc <HAL_RCC_OscConfig+0x4f4>)
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800419a:	2b00      	cmp	r3, #0
 800419c:	d0ef      	beq.n	800417e <HAL_RCC_OscConfig+0x496>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 800419e:	4b0f      	ldr	r3, [pc, #60]	@ (80041dc <HAL_RCC_OscConfig+0x4f4>)
 80041a0:	691b      	ldr	r3, [r3, #16]
 80041a2:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	691b      	ldr	r3, [r3, #16]
 80041aa:	041b      	lsls	r3, r3, #16
 80041ac:	490b      	ldr	r1, [pc, #44]	@ (80041dc <HAL_RCC_OscConfig+0x4f4>)
 80041ae:	4313      	orrs	r3, r2
 80041b0:	610b      	str	r3, [r1, #16]
 80041b2:	e01b      	b.n	80041ec <HAL_RCC_OscConfig+0x504>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_DISABLE();
 80041b4:	4b09      	ldr	r3, [pc, #36]	@ (80041dc <HAL_RCC_OscConfig+0x4f4>)
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	4a08      	ldr	r2, [pc, #32]	@ (80041dc <HAL_RCC_OscConfig+0x4f4>)
 80041ba:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80041be:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80041c0:	f7fd fd3a 	bl	8001c38 <HAL_GetTick>
 80041c4:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80041c6:	e00b      	b.n	80041e0 <HAL_RCC_OscConfig+0x4f8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80041c8:	f7fd fd36 	bl	8001c38 <HAL_GetTick>
 80041cc:	4602      	mov	r2, r0
 80041ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041d0:	1ad3      	subs	r3, r2, r3
 80041d2:	2b02      	cmp	r3, #2
 80041d4:	d904      	bls.n	80041e0 <HAL_RCC_OscConfig+0x4f8>
          {
            return HAL_TIMEOUT;
 80041d6:	2303      	movs	r3, #3
 80041d8:	f000 bc5b 	b.w	8004a92 <HAL_RCC_OscConfig+0xdaa>
 80041dc:	46020c00 	.word	0x46020c00
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80041e0:	4baf      	ldr	r3, [pc, #700]	@ (80044a0 <HAL_RCC_OscConfig+0x7b8>)
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d1ed      	bne.n	80041c8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f003 0308 	and.w	r3, r3, #8
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	f000 80c8 	beq.w	800438a <HAL_RCC_OscConfig+0x6a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(pRCC_OscInitStruct->LSIState));

    FlagStatus  pwrclkchanged = RESET;
 80041fa:	2300      	movs	r3, #0
 80041fc:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

    /* Update LSI configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004200:	4ba7      	ldr	r3, [pc, #668]	@ (80044a0 <HAL_RCC_OscConfig+0x7b8>)
 8004202:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004206:	f003 0304 	and.w	r3, r3, #4
 800420a:	2b00      	cmp	r3, #0
 800420c:	d111      	bne.n	8004232 <HAL_RCC_OscConfig+0x54a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800420e:	4ba4      	ldr	r3, [pc, #656]	@ (80044a0 <HAL_RCC_OscConfig+0x7b8>)
 8004210:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004214:	4aa2      	ldr	r2, [pc, #648]	@ (80044a0 <HAL_RCC_OscConfig+0x7b8>)
 8004216:	f043 0304 	orr.w	r3, r3, #4
 800421a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800421e:	4ba0      	ldr	r3, [pc, #640]	@ (80044a0 <HAL_RCC_OscConfig+0x7b8>)
 8004220:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004224:	f003 0304 	and.w	r3, r3, #4
 8004228:	617b      	str	r3, [r7, #20]
 800422a:	697b      	ldr	r3, [r7, #20]
      pwrclkchanged = SET;
 800422c:	2301      	movs	r3, #1
 800422e:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8004232:	4b9c      	ldr	r3, [pc, #624]	@ (80044a4 <HAL_RCC_OscConfig+0x7bc>)
 8004234:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004236:	f003 0301 	and.w	r3, r3, #1
 800423a:	2b00      	cmp	r3, #0
 800423c:	d119      	bne.n	8004272 <HAL_RCC_OscConfig+0x58a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 800423e:	4b99      	ldr	r3, [pc, #612]	@ (80044a4 <HAL_RCC_OscConfig+0x7bc>)
 8004240:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004242:	4a98      	ldr	r2, [pc, #608]	@ (80044a4 <HAL_RCC_OscConfig+0x7bc>)
 8004244:	f043 0301 	orr.w	r3, r3, #1
 8004248:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800424a:	f7fd fcf5 	bl	8001c38 <HAL_GetTick>
 800424e:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8004250:	e009      	b.n	8004266 <HAL_RCC_OscConfig+0x57e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004252:	f7fd fcf1 	bl	8001c38 <HAL_GetTick>
 8004256:	4602      	mov	r2, r0
 8004258:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800425a:	1ad3      	subs	r3, r2, r3
 800425c:	2b02      	cmp	r3, #2
 800425e:	d902      	bls.n	8004266 <HAL_RCC_OscConfig+0x57e>
        {
          return HAL_TIMEOUT;
 8004260:	2303      	movs	r3, #3
 8004262:	f000 bc16 	b.w	8004a92 <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8004266:	4b8f      	ldr	r3, [pc, #572]	@ (80044a4 <HAL_RCC_OscConfig+0x7bc>)
 8004268:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800426a:	f003 0301 	and.w	r3, r3, #1
 800426e:	2b00      	cmp	r3, #0
 8004270:	d0ef      	beq.n	8004252 <HAL_RCC_OscConfig+0x56a>
        }
      }
    }
    /* Check the LSI State */
    if (pRCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	695b      	ldr	r3, [r3, #20]
 8004276:	2b00      	cmp	r3, #0
 8004278:	d05f      	beq.n	800433a <HAL_RCC_OscConfig+0x652>
    {
      uint32_t bdcr_temp = RCC->BDCR;
 800427a:	4b89      	ldr	r3, [pc, #548]	@ (80044a0 <HAL_RCC_OscConfig+0x7b8>)
 800427c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004280:	623b      	str	r3, [r7, #32]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(pRCC_OscInitStruct->LSIDiv));

      if (pRCC_OscInitStruct->LSIDiv != (bdcr_temp & RCC_BDCR_LSIPREDIV))
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	699a      	ldr	r2, [r3, #24]
 8004286:	6a3b      	ldr	r3, [r7, #32]
 8004288:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800428c:	429a      	cmp	r2, r3
 800428e:	d037      	beq.n	8004300 <HAL_RCC_OscConfig+0x618>
      {
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8004290:	6a3b      	ldr	r3, [r7, #32]
 8004292:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004296:	2b00      	cmp	r3, #0
 8004298:	d006      	beq.n	80042a8 <HAL_RCC_OscConfig+0x5c0>
            ((bdcr_temp & RCC_BDCR_LSION) != RCC_BDCR_LSION))
 800429a:	6a3b      	ldr	r3, [r7, #32]
 800429c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d101      	bne.n	80042a8 <HAL_RCC_OscConfig+0x5c0>
        {
          /* If LSIRDY is set while LSION is not enabled, LSIPREDIV can't be updated */
          /* The LSIPREDIV cannot be changed if the LSI is used by the IWDG or by the RTC */
          return HAL_ERROR;
 80042a4:	2301      	movs	r3, #1
 80042a6:	e3f4      	b.n	8004a92 <HAL_RCC_OscConfig+0xdaa>
        }

        /* Turn off LSI before changing RCC_BDCR_LSIPREDIV */
        if ((bdcr_temp & RCC_BDCR_LSION) == RCC_BDCR_LSION)
 80042a8:	6a3b      	ldr	r3, [r7, #32]
 80042aa:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d01b      	beq.n	80042ea <HAL_RCC_OscConfig+0x602>
        {
          __HAL_RCC_LSI_DISABLE();
 80042b2:	4b7b      	ldr	r3, [pc, #492]	@ (80044a0 <HAL_RCC_OscConfig+0x7b8>)
 80042b4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80042b8:	4a79      	ldr	r2, [pc, #484]	@ (80044a0 <HAL_RCC_OscConfig+0x7b8>)
 80042ba:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 80042be:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

          tickstart = HAL_GetTick();
 80042c2:	f7fd fcb9 	bl	8001c38 <HAL_GetTick>
 80042c6:	62b8      	str	r0, [r7, #40]	@ 0x28

          /* Wait till LSI is disabled */
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80042c8:	e008      	b.n	80042dc <HAL_RCC_OscConfig+0x5f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80042ca:	f7fd fcb5 	bl	8001c38 <HAL_GetTick>
 80042ce:	4602      	mov	r2, r0
 80042d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042d2:	1ad3      	subs	r3, r2, r3
 80042d4:	2b05      	cmp	r3, #5
 80042d6:	d901      	bls.n	80042dc <HAL_RCC_OscConfig+0x5f4>
            {
              return HAL_TIMEOUT;
 80042d8:	2303      	movs	r3, #3
 80042da:	e3da      	b.n	8004a92 <HAL_RCC_OscConfig+0xdaa>
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80042dc:	4b70      	ldr	r3, [pc, #448]	@ (80044a0 <HAL_RCC_OscConfig+0x7b8>)
 80042de:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80042e2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d1ef      	bne.n	80042ca <HAL_RCC_OscConfig+0x5e2>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->BDCR, RCC_BDCR_LSIPREDIV, pRCC_OscInitStruct->LSIDiv);
 80042ea:	4b6d      	ldr	r3, [pc, #436]	@ (80044a0 <HAL_RCC_OscConfig+0x7b8>)
 80042ec:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80042f0:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	699b      	ldr	r3, [r3, #24]
 80042f8:	4969      	ldr	r1, [pc, #420]	@ (80044a0 <HAL_RCC_OscConfig+0x7b8>)
 80042fa:	4313      	orrs	r3, r2
 80042fc:	f8c1 30f0 	str.w	r3, [r1, #240]	@ 0xf0
      }

      /* Enable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_ENABLE();
 8004300:	4b67      	ldr	r3, [pc, #412]	@ (80044a0 <HAL_RCC_OscConfig+0x7b8>)
 8004302:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004306:	4a66      	ldr	r2, [pc, #408]	@ (80044a0 <HAL_RCC_OscConfig+0x7b8>)
 8004308:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800430c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 8004310:	f7fd fc92 	bl	8001c38 <HAL_GetTick>
 8004314:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8004316:	e008      	b.n	800432a <HAL_RCC_OscConfig+0x642>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004318:	f7fd fc8e 	bl	8001c38 <HAL_GetTick>
 800431c:	4602      	mov	r2, r0
 800431e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004320:	1ad3      	subs	r3, r2, r3
 8004322:	2b05      	cmp	r3, #5
 8004324:	d901      	bls.n	800432a <HAL_RCC_OscConfig+0x642>
        {
          return HAL_TIMEOUT;
 8004326:	2303      	movs	r3, #3
 8004328:	e3b3      	b.n	8004a92 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 800432a:	4b5d      	ldr	r3, [pc, #372]	@ (80044a0 <HAL_RCC_OscConfig+0x7b8>)
 800432c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004330:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004334:	2b00      	cmp	r3, #0
 8004336:	d0ef      	beq.n	8004318 <HAL_RCC_OscConfig+0x630>
 8004338:	e01b      	b.n	8004372 <HAL_RCC_OscConfig+0x68a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_DISABLE();
 800433a:	4b59      	ldr	r3, [pc, #356]	@ (80044a0 <HAL_RCC_OscConfig+0x7b8>)
 800433c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004340:	4a57      	ldr	r2, [pc, #348]	@ (80044a0 <HAL_RCC_OscConfig+0x7b8>)
 8004342:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 8004346:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 800434a:	f7fd fc75 	bl	8001c38 <HAL_GetTick>
 800434e:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8004350:	e008      	b.n	8004364 <HAL_RCC_OscConfig+0x67c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004352:	f7fd fc71 	bl	8001c38 <HAL_GetTick>
 8004356:	4602      	mov	r2, r0
 8004358:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800435a:	1ad3      	subs	r3, r2, r3
 800435c:	2b05      	cmp	r3, #5
 800435e:	d901      	bls.n	8004364 <HAL_RCC_OscConfig+0x67c>
        {
          return HAL_TIMEOUT;
 8004360:	2303      	movs	r3, #3
 8004362:	e396      	b.n	8004a92 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8004364:	4b4e      	ldr	r3, [pc, #312]	@ (80044a0 <HAL_RCC_OscConfig+0x7b8>)
 8004366:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800436a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800436e:	2b00      	cmp	r3, #0
 8004370:	d1ef      	bne.n	8004352 <HAL_RCC_OscConfig+0x66a>
        }
      }
    }
    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004372:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8004376:	2b01      	cmp	r3, #1
 8004378:	d107      	bne.n	800438a <HAL_RCC_OscConfig+0x6a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800437a:	4b49      	ldr	r3, [pc, #292]	@ (80044a0 <HAL_RCC_OscConfig+0x7b8>)
 800437c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004380:	4a47      	ldr	r2, [pc, #284]	@ (80044a0 <HAL_RCC_OscConfig+0x7b8>)
 8004382:	f023 0304 	bic.w	r3, r3, #4
 8004386:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f003 0304 	and.w	r3, r3, #4
 8004392:	2b00      	cmp	r3, #0
 8004394:	f000 8111 	beq.w	80045ba <HAL_RCC_OscConfig+0x8d2>
  {
    FlagStatus pwrclkchanged = RESET;
 8004398:	2300      	movs	r3, #0
 800439a:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pRCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800439e:	4b40      	ldr	r3, [pc, #256]	@ (80044a0 <HAL_RCC_OscConfig+0x7b8>)
 80043a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80043a4:	f003 0304 	and.w	r3, r3, #4
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d111      	bne.n	80043d0 <HAL_RCC_OscConfig+0x6e8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80043ac:	4b3c      	ldr	r3, [pc, #240]	@ (80044a0 <HAL_RCC_OscConfig+0x7b8>)
 80043ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80043b2:	4a3b      	ldr	r2, [pc, #236]	@ (80044a0 <HAL_RCC_OscConfig+0x7b8>)
 80043b4:	f043 0304 	orr.w	r3, r3, #4
 80043b8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80043bc:	4b38      	ldr	r3, [pc, #224]	@ (80044a0 <HAL_RCC_OscConfig+0x7b8>)
 80043be:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80043c2:	f003 0304 	and.w	r3, r3, #4
 80043c6:	613b      	str	r3, [r7, #16]
 80043c8:	693b      	ldr	r3, [r7, #16]
      pwrclkchanged = SET;
 80043ca:	2301      	movs	r3, #1
 80043cc:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80043d0:	4b34      	ldr	r3, [pc, #208]	@ (80044a4 <HAL_RCC_OscConfig+0x7bc>)
 80043d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043d4:	f003 0301 	and.w	r3, r3, #1
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d118      	bne.n	800440e <HAL_RCC_OscConfig+0x726>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 80043dc:	4b31      	ldr	r3, [pc, #196]	@ (80044a4 <HAL_RCC_OscConfig+0x7bc>)
 80043de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043e0:	4a30      	ldr	r2, [pc, #192]	@ (80044a4 <HAL_RCC_OscConfig+0x7bc>)
 80043e2:	f043 0301 	orr.w	r3, r3, #1
 80043e6:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80043e8:	f7fd fc26 	bl	8001c38 <HAL_GetTick>
 80043ec:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80043ee:	e008      	b.n	8004402 <HAL_RCC_OscConfig+0x71a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80043f0:	f7fd fc22 	bl	8001c38 <HAL_GetTick>
 80043f4:	4602      	mov	r2, r0
 80043f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043f8:	1ad3      	subs	r3, r2, r3
 80043fa:	2b02      	cmp	r3, #2
 80043fc:	d901      	bls.n	8004402 <HAL_RCC_OscConfig+0x71a>
        {
          return HAL_TIMEOUT;
 80043fe:	2303      	movs	r3, #3
 8004400:	e347      	b.n	8004a92 <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8004402:	4b28      	ldr	r3, [pc, #160]	@ (80044a4 <HAL_RCC_OscConfig+0x7bc>)
 8004404:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004406:	f003 0301 	and.w	r3, r3, #1
 800440a:	2b00      	cmp	r3, #0
 800440c:	d0f0      	beq.n	80043f0 <HAL_RCC_OscConfig+0x708>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	689b      	ldr	r3, [r3, #8]
 8004412:	f003 0301 	and.w	r3, r3, #1
 8004416:	2b00      	cmp	r3, #0
 8004418:	d01f      	beq.n	800445a <HAL_RCC_OscConfig+0x772>
    {
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	689b      	ldr	r3, [r3, #8]
 800441e:	f003 0304 	and.w	r3, r3, #4
 8004422:	2b00      	cmp	r3, #0
 8004424:	d010      	beq.n	8004448 <HAL_RCC_OscConfig+0x760>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8004426:	4b1e      	ldr	r3, [pc, #120]	@ (80044a0 <HAL_RCC_OscConfig+0x7b8>)
 8004428:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800442c:	4a1c      	ldr	r2, [pc, #112]	@ (80044a0 <HAL_RCC_OscConfig+0x7b8>)
 800442e:	f043 0304 	orr.w	r3, r3, #4
 8004432:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004436:	4b1a      	ldr	r3, [pc, #104]	@ (80044a0 <HAL_RCC_OscConfig+0x7b8>)
 8004438:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800443c:	4a18      	ldr	r2, [pc, #96]	@ (80044a0 <HAL_RCC_OscConfig+0x7b8>)
 800443e:	f043 0301 	orr.w	r3, r3, #1
 8004442:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8004446:	e018      	b.n	800447a <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004448:	4b15      	ldr	r3, [pc, #84]	@ (80044a0 <HAL_RCC_OscConfig+0x7b8>)
 800444a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800444e:	4a14      	ldr	r2, [pc, #80]	@ (80044a0 <HAL_RCC_OscConfig+0x7b8>)
 8004450:	f043 0301 	orr.w	r3, r3, #1
 8004454:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8004458:	e00f      	b.n	800447a <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800445a:	4b11      	ldr	r3, [pc, #68]	@ (80044a0 <HAL_RCC_OscConfig+0x7b8>)
 800445c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004460:	4a0f      	ldr	r2, [pc, #60]	@ (80044a0 <HAL_RCC_OscConfig+0x7b8>)
 8004462:	f023 0301 	bic.w	r3, r3, #1
 8004466:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800446a:	4b0d      	ldr	r3, [pc, #52]	@ (80044a0 <HAL_RCC_OscConfig+0x7b8>)
 800446c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004470:	4a0b      	ldr	r2, [pc, #44]	@ (80044a0 <HAL_RCC_OscConfig+0x7b8>)
 8004472:	f023 0304 	bic.w	r3, r3, #4
 8004476:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
    }

    /* Check the LSE State */
    if (pRCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	689b      	ldr	r3, [r3, #8]
 800447e:	2b00      	cmp	r3, #0
 8004480:	d057      	beq.n	8004532 <HAL_RCC_OscConfig+0x84a>
    {
      tickstart = HAL_GetTick();
 8004482:	f7fd fbd9 	bl	8001c38 <HAL_GetTick>
 8004486:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004488:	e00e      	b.n	80044a8 <HAL_RCC_OscConfig+0x7c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800448a:	f7fd fbd5 	bl	8001c38 <HAL_GetTick>
 800448e:	4602      	mov	r2, r0
 8004490:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004492:	1ad3      	subs	r3, r2, r3
 8004494:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004498:	4293      	cmp	r3, r2
 800449a:	d905      	bls.n	80044a8 <HAL_RCC_OscConfig+0x7c0>
        {
          return HAL_TIMEOUT;
 800449c:	2303      	movs	r3, #3
 800449e:	e2f8      	b.n	8004a92 <HAL_RCC_OscConfig+0xdaa>
 80044a0:	46020c00 	.word	0x46020c00
 80044a4:	46020800 	.word	0x46020800
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80044a8:	4b9c      	ldr	r3, [pc, #624]	@ (800471c <HAL_RCC_OscConfig+0xa34>)
 80044aa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80044ae:	f003 0302 	and.w	r3, r3, #2
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d0e9      	beq.n	800448a <HAL_RCC_OscConfig+0x7a2>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	689b      	ldr	r3, [r3, #8]
 80044ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d01b      	beq.n	80044fa <HAL_RCC_OscConfig+0x812>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80044c2:	4b96      	ldr	r3, [pc, #600]	@ (800471c <HAL_RCC_OscConfig+0xa34>)
 80044c4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80044c8:	4a94      	ldr	r2, [pc, #592]	@ (800471c <HAL_RCC_OscConfig+0xa34>)
 80044ca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80044ce:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80044d2:	e00a      	b.n	80044ea <HAL_RCC_OscConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80044d4:	f7fd fbb0 	bl	8001c38 <HAL_GetTick>
 80044d8:	4602      	mov	r2, r0
 80044da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80044dc:	1ad3      	subs	r3, r2, r3
 80044de:	f241 3288 	movw	r2, #5000	@ 0x1388
 80044e2:	4293      	cmp	r3, r2
 80044e4:	d901      	bls.n	80044ea <HAL_RCC_OscConfig+0x802>
          {
            return HAL_TIMEOUT;
 80044e6:	2303      	movs	r3, #3
 80044e8:	e2d3      	b.n	8004a92 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80044ea:	4b8c      	ldr	r3, [pc, #560]	@ (800471c <HAL_RCC_OscConfig+0xa34>)
 80044ec:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80044f0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d0ed      	beq.n	80044d4 <HAL_RCC_OscConfig+0x7ec>
 80044f8:	e053      	b.n	80045a2 <HAL_RCC_OscConfig+0x8ba>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80044fa:	4b88      	ldr	r3, [pc, #544]	@ (800471c <HAL_RCC_OscConfig+0xa34>)
 80044fc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004500:	4a86      	ldr	r2, [pc, #536]	@ (800471c <HAL_RCC_OscConfig+0xa34>)
 8004502:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004506:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800450a:	e00a      	b.n	8004522 <HAL_RCC_OscConfig+0x83a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800450c:	f7fd fb94 	bl	8001c38 <HAL_GetTick>
 8004510:	4602      	mov	r2, r0
 8004512:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004514:	1ad3      	subs	r3, r2, r3
 8004516:	f241 3288 	movw	r2, #5000	@ 0x1388
 800451a:	4293      	cmp	r3, r2
 800451c:	d901      	bls.n	8004522 <HAL_RCC_OscConfig+0x83a>
          {
            return HAL_TIMEOUT;
 800451e:	2303      	movs	r3, #3
 8004520:	e2b7      	b.n	8004a92 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8004522:	4b7e      	ldr	r3, [pc, #504]	@ (800471c <HAL_RCC_OscConfig+0xa34>)
 8004524:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004528:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800452c:	2b00      	cmp	r3, #0
 800452e:	d1ed      	bne.n	800450c <HAL_RCC_OscConfig+0x824>
 8004530:	e037      	b.n	80045a2 <HAL_RCC_OscConfig+0x8ba>
        }
      }
    }
    else
    {
      tickstart = HAL_GetTick();
 8004532:	f7fd fb81 	bl	8001c38 <HAL_GetTick>
 8004536:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004538:	e00a      	b.n	8004550 <HAL_RCC_OscConfig+0x868>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800453a:	f7fd fb7d 	bl	8001c38 <HAL_GetTick>
 800453e:	4602      	mov	r2, r0
 8004540:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004542:	1ad3      	subs	r3, r2, r3
 8004544:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004548:	4293      	cmp	r3, r2
 800454a:	d901      	bls.n	8004550 <HAL_RCC_OscConfig+0x868>
        {
          return HAL_TIMEOUT;
 800454c:	2303      	movs	r3, #3
 800454e:	e2a0      	b.n	8004a92 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004550:	4b72      	ldr	r3, [pc, #456]	@ (800471c <HAL_RCC_OscConfig+0xa34>)
 8004552:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004556:	f003 0302 	and.w	r3, r3, #2
 800455a:	2b00      	cmp	r3, #0
 800455c:	d1ed      	bne.n	800453a <HAL_RCC_OscConfig+0x852>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 800455e:	4b6f      	ldr	r3, [pc, #444]	@ (800471c <HAL_RCC_OscConfig+0xa34>)
 8004560:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004564:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004568:	2b00      	cmp	r3, #0
 800456a:	d01a      	beq.n	80045a2 <HAL_RCC_OscConfig+0x8ba>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800456c:	4b6b      	ldr	r3, [pc, #428]	@ (800471c <HAL_RCC_OscConfig+0xa34>)
 800456e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004572:	4a6a      	ldr	r2, [pc, #424]	@ (800471c <HAL_RCC_OscConfig+0xa34>)
 8004574:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004578:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800457c:	e00a      	b.n	8004594 <HAL_RCC_OscConfig+0x8ac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800457e:	f7fd fb5b 	bl	8001c38 <HAL_GetTick>
 8004582:	4602      	mov	r2, r0
 8004584:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004586:	1ad3      	subs	r3, r2, r3
 8004588:	f241 3288 	movw	r2, #5000	@ 0x1388
 800458c:	4293      	cmp	r3, r2
 800458e:	d901      	bls.n	8004594 <HAL_RCC_OscConfig+0x8ac>
          {
            return HAL_TIMEOUT;
 8004590:	2303      	movs	r3, #3
 8004592:	e27e      	b.n	8004a92 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8004594:	4b61      	ldr	r3, [pc, #388]	@ (800471c <HAL_RCC_OscConfig+0xa34>)
 8004596:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800459a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d1ed      	bne.n	800457e <HAL_RCC_OscConfig+0x896>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80045a2:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 80045a6:	2b01      	cmp	r3, #1
 80045a8:	d107      	bne.n	80045ba <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80045aa:	4b5c      	ldr	r3, [pc, #368]	@ (800471c <HAL_RCC_OscConfig+0xa34>)
 80045ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80045b0:	4a5a      	ldr	r2, [pc, #360]	@ (800471c <HAL_RCC_OscConfig+0xa34>)
 80045b2:	f023 0304 	bic.w	r3, r3, #4
 80045b6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	f003 0320 	and.w	r3, r3, #32
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d036      	beq.n	8004634 <HAL_RCC_OscConfig+0x94c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pRCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pRCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d019      	beq.n	8004602 <HAL_RCC_OscConfig+0x91a>
    {
      /* Enable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_ENABLE();
 80045ce:	4b53      	ldr	r3, [pc, #332]	@ (800471c <HAL_RCC_OscConfig+0xa34>)
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	4a52      	ldr	r2, [pc, #328]	@ (800471c <HAL_RCC_OscConfig+0xa34>)
 80045d4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80045d8:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80045da:	f7fd fb2d 	bl	8001c38 <HAL_GetTick>
 80045de:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80045e0:	e008      	b.n	80045f4 <HAL_RCC_OscConfig+0x90c>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80045e2:	f7fd fb29 	bl	8001c38 <HAL_GetTick>
 80045e6:	4602      	mov	r2, r0
 80045e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045ea:	1ad3      	subs	r3, r2, r3
 80045ec:	2b02      	cmp	r3, #2
 80045ee:	d901      	bls.n	80045f4 <HAL_RCC_OscConfig+0x90c>
        {
          return HAL_TIMEOUT;
 80045f0:	2303      	movs	r3, #3
 80045f2:	e24e      	b.n	8004a92 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80045f4:	4b49      	ldr	r3, [pc, #292]	@ (800471c <HAL_RCC_OscConfig+0xa34>)
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d0f0      	beq.n	80045e2 <HAL_RCC_OscConfig+0x8fa>
 8004600:	e018      	b.n	8004634 <HAL_RCC_OscConfig+0x94c>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_DISABLE();
 8004602:	4b46      	ldr	r3, [pc, #280]	@ (800471c <HAL_RCC_OscConfig+0xa34>)
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	4a45      	ldr	r2, [pc, #276]	@ (800471c <HAL_RCC_OscConfig+0xa34>)
 8004608:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800460c:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800460e:	f7fd fb13 	bl	8001c38 <HAL_GetTick>
 8004612:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8004614:	e008      	b.n	8004628 <HAL_RCC_OscConfig+0x940>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004616:	f7fd fb0f 	bl	8001c38 <HAL_GetTick>
 800461a:	4602      	mov	r2, r0
 800461c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800461e:	1ad3      	subs	r3, r2, r3
 8004620:	2b02      	cmp	r3, #2
 8004622:	d901      	bls.n	8004628 <HAL_RCC_OscConfig+0x940>
        {
          return HAL_TIMEOUT;
 8004624:	2303      	movs	r3, #3
 8004626:	e234      	b.n	8004a92 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8004628:	4b3c      	ldr	r3, [pc, #240]	@ (800471c <HAL_RCC_OscConfig+0xa34>)
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004630:	2b00      	cmp	r3, #0
 8004632:	d1f0      	bne.n	8004616 <HAL_RCC_OscConfig+0x92e>
      }
    }
  }

  /*------------------------------ SHSI Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_SHSI) == RCC_OSCILLATORTYPE_SHSI)
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800463c:	2b00      	cmp	r3, #0
 800463e:	d036      	beq.n	80046ae <HAL_RCC_OscConfig+0x9c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SHSI(pRCC_OscInitStruct->SHSIState));

    /* Check the SHSI State */
    if (pRCC_OscInitStruct->SHSIState != RCC_SHSI_OFF)
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004644:	2b00      	cmp	r3, #0
 8004646:	d019      	beq.n	800467c <HAL_RCC_OscConfig+0x994>
    {
      /* Enable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_ENABLE();
 8004648:	4b34      	ldr	r3, [pc, #208]	@ (800471c <HAL_RCC_OscConfig+0xa34>)
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	4a33      	ldr	r2, [pc, #204]	@ (800471c <HAL_RCC_OscConfig+0xa34>)
 800464e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004652:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8004654:	f7fd faf0 	bl	8001c38 <HAL_GetTick>
 8004658:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is ready */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 800465a:	e008      	b.n	800466e <HAL_RCC_OscConfig+0x986>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 800465c:	f7fd faec 	bl	8001c38 <HAL_GetTick>
 8004660:	4602      	mov	r2, r0
 8004662:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004664:	1ad3      	subs	r3, r2, r3
 8004666:	2b02      	cmp	r3, #2
 8004668:	d901      	bls.n	800466e <HAL_RCC_OscConfig+0x986>
        {
          return HAL_TIMEOUT;
 800466a:	2303      	movs	r3, #3
 800466c:	e211      	b.n	8004a92 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 800466e:	4b2b      	ldr	r3, [pc, #172]	@ (800471c <HAL_RCC_OscConfig+0xa34>)
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004676:	2b00      	cmp	r3, #0
 8004678:	d0f0      	beq.n	800465c <HAL_RCC_OscConfig+0x974>
 800467a:	e018      	b.n	80046ae <HAL_RCC_OscConfig+0x9c6>
      }
    }
    else
    {
      /* Disable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_DISABLE();
 800467c:	4b27      	ldr	r3, [pc, #156]	@ (800471c <HAL_RCC_OscConfig+0xa34>)
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	4a26      	ldr	r2, [pc, #152]	@ (800471c <HAL_RCC_OscConfig+0xa34>)
 8004682:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004686:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8004688:	f7fd fad6 	bl	8001c38 <HAL_GetTick>
 800468c:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 800468e:	e008      	b.n	80046a2 <HAL_RCC_OscConfig+0x9ba>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8004690:	f7fd fad2 	bl	8001c38 <HAL_GetTick>
 8004694:	4602      	mov	r2, r0
 8004696:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004698:	1ad3      	subs	r3, r2, r3
 800469a:	2b02      	cmp	r3, #2
 800469c:	d901      	bls.n	80046a2 <HAL_RCC_OscConfig+0x9ba>
        {
          return HAL_TIMEOUT;
 800469e:	2303      	movs	r3, #3
 80046a0:	e1f7      	b.n	8004a92 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 80046a2:	4b1e      	ldr	r3, [pc, #120]	@ (800471c <HAL_RCC_OscConfig+0xa34>)
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d1f0      	bne.n	8004690 <HAL_RCC_OscConfig+0x9a8>
        }
      }
    }
  }
  /*------------------------------ MSIK Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIK) == RCC_OSCILLATORTYPE_MSIK)
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d07f      	beq.n	80047ba <HAL_RCC_OscConfig+0xad2>
    assert_param(IS_RCC_MSIK(pRCC_OscInitStruct->MSIKState));
    assert_param(IS_RCC_MSIK_CLOCK_RANGE(pRCC_OscInitStruct->MSIKClockRange));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));

    /* Check the MSIK State */
    if (pRCC_OscInitStruct->MSIKState != RCC_MSIK_OFF)
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d062      	beq.n	8004788 <HAL_RCC_OscConfig+0xaa0>
    {

      /* Selects the Multiple Speed of kernel high speed oscillator (MSIK) clock range .*/
      __HAL_RCC_MSIK_RANGE_CONFIG(pRCC_OscInitStruct->MSIKClockRange);
 80046c2:	4b16      	ldr	r3, [pc, #88]	@ (800471c <HAL_RCC_OscConfig+0xa34>)
 80046c4:	689b      	ldr	r3, [r3, #8]
 80046c6:	4a15      	ldr	r2, [pc, #84]	@ (800471c <HAL_RCC_OscConfig+0xa34>)
 80046c8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80046cc:	6093      	str	r3, [r2, #8]
 80046ce:	4b13      	ldr	r3, [pc, #76]	@ (800471c <HAL_RCC_OscConfig+0xa34>)
 80046d0:	689b      	ldr	r3, [r3, #8]
 80046d2:	f023 6270 	bic.w	r2, r3, #251658240	@ 0xf000000
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046da:	4910      	ldr	r1, [pc, #64]	@ (800471c <HAL_RCC_OscConfig+0xa34>)
 80046dc:	4313      	orrs	r3, r2
 80046de:	608b      	str	r3, [r1, #8]
      /* Adjusts the Multiple Speed of kernel high speed oscillator (MSIK) calibration value.*/
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046e4:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 80046e8:	d309      	bcc.n	80046fe <HAL_RCC_OscConfig+0xa16>
 80046ea:	4b0c      	ldr	r3, [pc, #48]	@ (800471c <HAL_RCC_OscConfig+0xa34>)
 80046ec:	68db      	ldr	r3, [r3, #12]
 80046ee:	f023 021f 	bic.w	r2, r3, #31
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	6a1b      	ldr	r3, [r3, #32]
 80046f6:	4909      	ldr	r1, [pc, #36]	@ (800471c <HAL_RCC_OscConfig+0xa34>)
 80046f8:	4313      	orrs	r3, r2
 80046fa:	60cb      	str	r3, [r1, #12]
 80046fc:	e02a      	b.n	8004754 <HAL_RCC_OscConfig+0xa6c>
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004702:	2b00      	cmp	r3, #0
 8004704:	da0c      	bge.n	8004720 <HAL_RCC_OscConfig+0xa38>
 8004706:	4b05      	ldr	r3, [pc, #20]	@ (800471c <HAL_RCC_OscConfig+0xa34>)
 8004708:	68db      	ldr	r3, [r3, #12]
 800470a:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	6a1b      	ldr	r3, [r3, #32]
 8004712:	015b      	lsls	r3, r3, #5
 8004714:	4901      	ldr	r1, [pc, #4]	@ (800471c <HAL_RCC_OscConfig+0xa34>)
 8004716:	4313      	orrs	r3, r2
 8004718:	60cb      	str	r3, [r1, #12]
 800471a:	e01b      	b.n	8004754 <HAL_RCC_OscConfig+0xa6c>
 800471c:	46020c00 	.word	0x46020c00
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004724:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004728:	d30a      	bcc.n	8004740 <HAL_RCC_OscConfig+0xa58>
 800472a:	4ba1      	ldr	r3, [pc, #644]	@ (80049b0 <HAL_RCC_OscConfig+0xcc8>)
 800472c:	68db      	ldr	r3, [r3, #12]
 800472e:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	6a1b      	ldr	r3, [r3, #32]
 8004736:	029b      	lsls	r3, r3, #10
 8004738:	499d      	ldr	r1, [pc, #628]	@ (80049b0 <HAL_RCC_OscConfig+0xcc8>)
 800473a:	4313      	orrs	r3, r2
 800473c:	60cb      	str	r3, [r1, #12]
 800473e:	e009      	b.n	8004754 <HAL_RCC_OscConfig+0xa6c>
 8004740:	4b9b      	ldr	r3, [pc, #620]	@ (80049b0 <HAL_RCC_OscConfig+0xcc8>)
 8004742:	68db      	ldr	r3, [r3, #12]
 8004744:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	6a1b      	ldr	r3, [r3, #32]
 800474c:	03db      	lsls	r3, r3, #15
 800474e:	4998      	ldr	r1, [pc, #608]	@ (80049b0 <HAL_RCC_OscConfig+0xcc8>)
 8004750:	4313      	orrs	r3, r2
 8004752:	60cb      	str	r3, [r1, #12]
                                            (pRCC_OscInitStruct->MSIClockRange));

      /* Enable the Internal kernel High Speed oscillator (MSIK) */
      __HAL_RCC_MSIK_ENABLE();
 8004754:	4b96      	ldr	r3, [pc, #600]	@ (80049b0 <HAL_RCC_OscConfig+0xcc8>)
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	4a95      	ldr	r2, [pc, #596]	@ (80049b0 <HAL_RCC_OscConfig+0xcc8>)
 800475a:	f043 0310 	orr.w	r3, r3, #16
 800475e:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8004760:	f7fd fa6a 	bl	8001c38 <HAL_GetTick>
 8004764:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is ready */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 8004766:	e008      	b.n	800477a <HAL_RCC_OscConfig+0xa92>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8004768:	f7fd fa66 	bl	8001c38 <HAL_GetTick>
 800476c:	4602      	mov	r2, r0
 800476e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004770:	1ad3      	subs	r3, r2, r3
 8004772:	2b02      	cmp	r3, #2
 8004774:	d901      	bls.n	800477a <HAL_RCC_OscConfig+0xa92>
        {
          return HAL_TIMEOUT;
 8004776:	2303      	movs	r3, #3
 8004778:	e18b      	b.n	8004a92 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 800477a:	4b8d      	ldr	r3, [pc, #564]	@ (80049b0 <HAL_RCC_OscConfig+0xcc8>)
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	f003 0320 	and.w	r3, r3, #32
 8004782:	2b00      	cmp	r3, #0
 8004784:	d0f0      	beq.n	8004768 <HAL_RCC_OscConfig+0xa80>
 8004786:	e018      	b.n	80047ba <HAL_RCC_OscConfig+0xad2>
      }
    }
    else
    {
      /* Disable the Internal High Speed Kernel oscillator (MSIK) */
      __HAL_RCC_MSIK_DISABLE();
 8004788:	4b89      	ldr	r3, [pc, #548]	@ (80049b0 <HAL_RCC_OscConfig+0xcc8>)
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	4a88      	ldr	r2, [pc, #544]	@ (80049b0 <HAL_RCC_OscConfig+0xcc8>)
 800478e:	f023 0310 	bic.w	r3, r3, #16
 8004792:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8004794:	f7fd fa50 	bl	8001c38 <HAL_GetTick>
 8004798:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 800479a:	e008      	b.n	80047ae <HAL_RCC_OscConfig+0xac6>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 800479c:	f7fd fa4c 	bl	8001c38 <HAL_GetTick>
 80047a0:	4602      	mov	r2, r0
 80047a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047a4:	1ad3      	subs	r3, r2, r3
 80047a6:	2b02      	cmp	r3, #2
 80047a8:	d901      	bls.n	80047ae <HAL_RCC_OscConfig+0xac6>
        {
          return HAL_TIMEOUT;
 80047aa:	2303      	movs	r3, #3
 80047ac:	e171      	b.n	8004a92 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 80047ae:	4b80      	ldr	r3, [pc, #512]	@ (80049b0 <HAL_RCC_OscConfig+0xcc8>)
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f003 0320 	and.w	r3, r3, #32
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d1f0      	bne.n	800479c <HAL_RCC_OscConfig+0xab4>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL.PLLState));

  if ((pRCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80047be:	2b00      	cmp	r3, #0
 80047c0:	f000 8166 	beq.w	8004a90 <HAL_RCC_OscConfig+0xda8>
  {
    FlagStatus  pwrclkchanged = RESET;
 80047c4:	2300      	movs	r3, #0
 80047c6:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34

    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80047ca:	4b79      	ldr	r3, [pc, #484]	@ (80049b0 <HAL_RCC_OscConfig+0xcc8>)
 80047cc:	69db      	ldr	r3, [r3, #28]
 80047ce:	f003 030c 	and.w	r3, r3, #12
 80047d2:	2b0c      	cmp	r3, #12
 80047d4:	f000 80f2 	beq.w	80049bc <HAL_RCC_OscConfig+0xcd4>
    {
      if ((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80047dc:	2b02      	cmp	r3, #2
 80047de:	f040 80c5 	bne.w	800496c <HAL_RCC_OscConfig+0xc84>
        assert_param(IS_RCC_PLLP_VALUE(pRCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(pRCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(pRCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 80047e2:	4b73      	ldr	r3, [pc, #460]	@ (80049b0 <HAL_RCC_OscConfig+0xcc8>)
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	4a72      	ldr	r2, [pc, #456]	@ (80049b0 <HAL_RCC_OscConfig+0xcc8>)
 80047e8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80047ec:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80047ee:	f7fd fa23 	bl	8001c38 <HAL_GetTick>
 80047f2:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80047f4:	e008      	b.n	8004808 <HAL_RCC_OscConfig+0xb20>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80047f6:	f7fd fa1f 	bl	8001c38 <HAL_GetTick>
 80047fa:	4602      	mov	r2, r0
 80047fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047fe:	1ad3      	subs	r3, r2, r3
 8004800:	2b02      	cmp	r3, #2
 8004802:	d901      	bls.n	8004808 <HAL_RCC_OscConfig+0xb20>
          {
            return HAL_TIMEOUT;
 8004804:	2303      	movs	r3, #3
 8004806:	e144      	b.n	8004a92 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8004808:	4b69      	ldr	r3, [pc, #420]	@ (80049b0 <HAL_RCC_OscConfig+0xcc8>)
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004810:	2b00      	cmp	r3, #0
 8004812:	d1f0      	bne.n	80047f6 <HAL_RCC_OscConfig+0xb0e>
          }
        }

        /* Requires to enable write access to Backup Domain of necessary */
        if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004814:	4b66      	ldr	r3, [pc, #408]	@ (80049b0 <HAL_RCC_OscConfig+0xcc8>)
 8004816:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800481a:	f003 0304 	and.w	r3, r3, #4
 800481e:	2b00      	cmp	r3, #0
 8004820:	d111      	bne.n	8004846 <HAL_RCC_OscConfig+0xb5e>
        {
          __HAL_RCC_PWR_CLK_ENABLE();
 8004822:	4b63      	ldr	r3, [pc, #396]	@ (80049b0 <HAL_RCC_OscConfig+0xcc8>)
 8004824:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004828:	4a61      	ldr	r2, [pc, #388]	@ (80049b0 <HAL_RCC_OscConfig+0xcc8>)
 800482a:	f043 0304 	orr.w	r3, r3, #4
 800482e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8004832:	4b5f      	ldr	r3, [pc, #380]	@ (80049b0 <HAL_RCC_OscConfig+0xcc8>)
 8004834:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004838:	f003 0304 	and.w	r3, r3, #4
 800483c:	60fb      	str	r3, [r7, #12]
 800483e:	68fb      	ldr	r3, [r7, #12]
          pwrclkchanged = SET;
 8004840:	2301      	movs	r3, #1
 8004842:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
        }

        /*Disable EPOD to configure PLL1MBOOST*/
        if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) == PWR_VOSR_BOOSTEN)
 8004846:	4b5b      	ldr	r3, [pc, #364]	@ (80049b4 <HAL_RCC_OscConfig+0xccc>)
 8004848:	68db      	ldr	r3, [r3, #12]
 800484a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800484e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004852:	d102      	bne.n	800485a <HAL_RCC_OscConfig+0xb72>
        {
          pwrboosten = SET;
 8004854:	2301      	movs	r3, #1
 8004856:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
        }
        CLEAR_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 800485a:	4b56      	ldr	r3, [pc, #344]	@ (80049b4 <HAL_RCC_OscConfig+0xccc>)
 800485c:	68db      	ldr	r3, [r3, #12]
 800485e:	4a55      	ldr	r2, [pc, #340]	@ (80049b4 <HAL_RCC_OscConfig+0xccc>)
 8004860:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004864:	60d3      	str	r3, [r2, #12]

        /* Configure the main PLL clock source, multiplication and division factors */
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 8004866:	4b52      	ldr	r3, [pc, #328]	@ (80049b0 <HAL_RCC_OscConfig+0xcc8>)
 8004868:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800486a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800486e:	f023 0303 	bic.w	r3, r3, #3
 8004872:	687a      	ldr	r2, [r7, #4]
 8004874:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8004876:	687a      	ldr	r2, [r7, #4]
 8004878:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800487a:	3a01      	subs	r2, #1
 800487c:	0212      	lsls	r2, r2, #8
 800487e:	4311      	orrs	r1, r2
 8004880:	687a      	ldr	r2, [r7, #4]
 8004882:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8004884:	430a      	orrs	r2, r1
 8004886:	494a      	ldr	r1, [pc, #296]	@ (80049b0 <HAL_RCC_OscConfig+0xcc8>)
 8004888:	4313      	orrs	r3, r2
 800488a:	628b      	str	r3, [r1, #40]	@ 0x28
 800488c:	4b48      	ldr	r3, [pc, #288]	@ (80049b0 <HAL_RCC_OscConfig+0xcc8>)
 800488e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004890:	4b49      	ldr	r3, [pc, #292]	@ (80049b8 <HAL_RCC_OscConfig+0xcd0>)
 8004892:	4013      	ands	r3, r2
 8004894:	687a      	ldr	r2, [r7, #4]
 8004896:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8004898:	3a01      	subs	r2, #1
 800489a:	f3c2 0108 	ubfx	r1, r2, #0, #9
 800489e:	687a      	ldr	r2, [r7, #4]
 80048a0:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80048a2:	3a01      	subs	r2, #1
 80048a4:	0252      	lsls	r2, r2, #9
 80048a6:	b292      	uxth	r2, r2
 80048a8:	4311      	orrs	r1, r2
 80048aa:	687a      	ldr	r2, [r7, #4]
 80048ac:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80048ae:	3a01      	subs	r2, #1
 80048b0:	0412      	lsls	r2, r2, #16
 80048b2:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 80048b6:	4311      	orrs	r1, r2
 80048b8:	687a      	ldr	r2, [r7, #4]
 80048ba:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 80048bc:	3a01      	subs	r2, #1
 80048be:	0612      	lsls	r2, r2, #24
 80048c0:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 80048c4:	430a      	orrs	r2, r1
 80048c6:	493a      	ldr	r1, [pc, #232]	@ (80049b0 <HAL_RCC_OscConfig+0xcc8>)
 80048c8:	4313      	orrs	r3, r2
 80048ca:	634b      	str	r3, [r1, #52]	@ 0x34
                             pRCC_OscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_DISABLE();
 80048cc:	4b38      	ldr	r3, [pc, #224]	@ (80049b0 <HAL_RCC_OscConfig+0xcc8>)
 80048ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048d0:	4a37      	ldr	r2, [pc, #220]	@ (80049b0 <HAL_RCC_OscConfig+0xcc8>)
 80048d2:	f023 0310 	bic.w	r3, r3, #16
 80048d6:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80048dc:	4a34      	ldr	r2, [pc, #208]	@ (80049b0 <HAL_RCC_OscConfig+0xcc8>)
 80048de:	00db      	lsls	r3, r3, #3
 80048e0:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_ENABLE();
 80048e2:	4b33      	ldr	r3, [pc, #204]	@ (80049b0 <HAL_RCC_OscConfig+0xcc8>)
 80048e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048e6:	4a32      	ldr	r2, [pc, #200]	@ (80049b0 <HAL_RCC_OscConfig+0xcc8>)
 80048e8:	f043 0310 	orr.w	r3, r3, #16
 80048ec:	6293      	str	r3, [r2, #40]	@ 0x28

        assert_param(IS_RCC_PLLRGE_VALUE(pRCC_OscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(pRCC_OscInitStruct->PLL.PLLRGE);
 80048ee:	4b30      	ldr	r3, [pc, #192]	@ (80049b0 <HAL_RCC_OscConfig+0xcc8>)
 80048f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048f2:	f023 020c 	bic.w	r2, r3, #12
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80048fa:	492d      	ldr	r1, [pc, #180]	@ (80049b0 <HAL_RCC_OscConfig+0xcc8>)
 80048fc:	4313      	orrs	r3, r2
 80048fe:	628b      	str	r3, [r1, #40]	@ 0x28

        if (pwrboosten == SET)
 8004900:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8004904:	2b01      	cmp	r3, #1
 8004906:	d105      	bne.n	8004914 <HAL_RCC_OscConfig+0xc2c>
        {
          /* Enable the EPOD to reach max frequency */
          SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8004908:	4b2a      	ldr	r3, [pc, #168]	@ (80049b4 <HAL_RCC_OscConfig+0xccc>)
 800490a:	68db      	ldr	r3, [r3, #12]
 800490c:	4a29      	ldr	r2, [pc, #164]	@ (80049b4 <HAL_RCC_OscConfig+0xccc>)
 800490e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004912:	60d3      	str	r3, [r2, #12]
        }

        /* Restore clock configuration if changed */
        if (pwrclkchanged == SET)
 8004914:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8004918:	2b01      	cmp	r3, #1
 800491a:	d107      	bne.n	800492c <HAL_RCC_OscConfig+0xc44>
        {
          __HAL_RCC_PWR_CLK_DISABLE();
 800491c:	4b24      	ldr	r3, [pc, #144]	@ (80049b0 <HAL_RCC_OscConfig+0xcc8>)
 800491e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004922:	4a23      	ldr	r2, [pc, #140]	@ (80049b0 <HAL_RCC_OscConfig+0xcc8>)
 8004924:	f023 0304 	bic.w	r3, r3, #4
 8004928:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
        }

        /* Enable the main PLL */
        __HAL_RCC_PLL_ENABLE();
 800492c:	4b20      	ldr	r3, [pc, #128]	@ (80049b0 <HAL_RCC_OscConfig+0xcc8>)
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	4a1f      	ldr	r2, [pc, #124]	@ (80049b0 <HAL_RCC_OscConfig+0xcc8>)
 8004932:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004936:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8004938:	f7fd f97e 	bl	8001c38 <HAL_GetTick>
 800493c:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800493e:	e008      	b.n	8004952 <HAL_RCC_OscConfig+0xc6a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004940:	f7fd f97a 	bl	8001c38 <HAL_GetTick>
 8004944:	4602      	mov	r2, r0
 8004946:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004948:	1ad3      	subs	r3, r2, r3
 800494a:	2b02      	cmp	r3, #2
 800494c:	d901      	bls.n	8004952 <HAL_RCC_OscConfig+0xc6a>
          {
            return HAL_TIMEOUT;
 800494e:	2303      	movs	r3, #3
 8004950:	e09f      	b.n	8004a92 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8004952:	4b17      	ldr	r3, [pc, #92]	@ (80049b0 <HAL_RCC_OscConfig+0xcc8>)
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800495a:	2b00      	cmp	r3, #0
 800495c:	d0f0      	beq.n	8004940 <HAL_RCC_OscConfig+0xc58>
          }
        }

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800495e:	4b14      	ldr	r3, [pc, #80]	@ (80049b0 <HAL_RCC_OscConfig+0xcc8>)
 8004960:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004962:	4a13      	ldr	r2, [pc, #76]	@ (80049b0 <HAL_RCC_OscConfig+0xcc8>)
 8004964:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004968:	6293      	str	r3, [r2, #40]	@ 0x28
 800496a:	e091      	b.n	8004a90 <HAL_RCC_OscConfig+0xda8>

      }
      else
      {
        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 800496c:	4b10      	ldr	r3, [pc, #64]	@ (80049b0 <HAL_RCC_OscConfig+0xcc8>)
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	4a0f      	ldr	r2, [pc, #60]	@ (80049b0 <HAL_RCC_OscConfig+0xcc8>)
 8004972:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004976:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8004978:	f7fd f95e 	bl	8001c38 <HAL_GetTick>
 800497c:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800497e:	e008      	b.n	8004992 <HAL_RCC_OscConfig+0xcaa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004980:	f7fd f95a 	bl	8001c38 <HAL_GetTick>
 8004984:	4602      	mov	r2, r0
 8004986:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004988:	1ad3      	subs	r3, r2, r3
 800498a:	2b02      	cmp	r3, #2
 800498c:	d901      	bls.n	8004992 <HAL_RCC_OscConfig+0xcaa>
          {
            return HAL_TIMEOUT;
 800498e:	2303      	movs	r3, #3
 8004990:	e07f      	b.n	8004a92 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8004992:	4b07      	ldr	r3, [pc, #28]	@ (80049b0 <HAL_RCC_OscConfig+0xcc8>)
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800499a:	2b00      	cmp	r3, #0
 800499c:	d1f0      	bne.n	8004980 <HAL_RCC_OscConfig+0xc98>
          }
        }

        /* Unselect main PLL clock source and disable main PLL outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 800499e:	4b04      	ldr	r3, [pc, #16]	@ (80049b0 <HAL_RCC_OscConfig+0xcc8>)
 80049a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049a2:	4a03      	ldr	r2, [pc, #12]	@ (80049b0 <HAL_RCC_OscConfig+0xcc8>)
 80049a4:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 80049a8:	f023 0303 	bic.w	r3, r3, #3
 80049ac:	6293      	str	r3, [r2, #40]	@ 0x28
 80049ae:	e06f      	b.n	8004a90 <HAL_RCC_OscConfig+0xda8>
 80049b0:	46020c00 	.word	0x46020c00
 80049b4:	46020800 	.word	0x46020800
 80049b8:	80800000 	.word	0x80800000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 80049bc:	4b37      	ldr	r3, [pc, #220]	@ (8004a9c <HAL_RCC_OscConfig+0xdb4>)
 80049be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049c0:	61fb      	str	r3, [r7, #28]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80049c2:	4b36      	ldr	r3, [pc, #216]	@ (8004a9c <HAL_RCC_OscConfig+0xdb4>)
 80049c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80049c6:	61bb      	str	r3, [r7, #24]
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049cc:	2b01      	cmp	r3, #1
 80049ce:	d039      	beq.n	8004a44 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 80049d0:	69fb      	ldr	r3, [r7, #28]
 80049d2:	f003 0203 	and.w	r2, r3, #3
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80049da:	429a      	cmp	r2, r3
 80049dc:	d132      	bne.n	8004a44 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 80049de:	69fb      	ldr	r3, [r7, #28]
 80049e0:	0a1b      	lsrs	r3, r3, #8
 80049e2:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049ea:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 80049ec:	429a      	cmp	r2, r3
 80049ee:	d129      	bne.n	8004a44 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 80049f0:	69fb      	ldr	r3, [r7, #28]
 80049f2:	f403 4270 	and.w	r2, r3, #61440	@ 0xf000
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 80049fa:	429a      	cmp	r2, r3
 80049fc:	d122      	bne.n	8004a44 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80049fe:	69bb      	ldr	r3, [r7, #24]
 8004a00:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004a08:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 8004a0a:	429a      	cmp	r2, r3
 8004a0c:	d11a      	bne.n	8004a44 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 8004a0e:	69bb      	ldr	r3, [r7, #24]
 8004a10:	0a5b      	lsrs	r3, r3, #9
 8004a12:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004a1a:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004a1c:	429a      	cmp	r2, r3
 8004a1e:	d111      	bne.n	8004a44 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 8004a20:	69bb      	ldr	r3, [r7, #24]
 8004a22:	0c1b      	lsrs	r3, r3, #16
 8004a24:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004a2c:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004a2e:	429a      	cmp	r2, r3
 8004a30:	d108      	bne.n	8004a44 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 8004a32:	69bb      	ldr	r3, [r7, #24]
 8004a34:	0e1b      	lsrs	r3, r3, #24
 8004a36:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pRCC_OscInitStruct->PLL.PLLR - 1U)))
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a3e:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004a40:	429a      	cmp	r2, r3
 8004a42:	d001      	beq.n	8004a48 <HAL_RCC_OscConfig+0xd60>
      {
        return HAL_ERROR;
 8004a44:	2301      	movs	r3, #1
 8004a46:	e024      	b.n	8004a92 <HAL_RCC_OscConfig+0xdaa>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8004a48:	4b14      	ldr	r3, [pc, #80]	@ (8004a9c <HAL_RCC_OscConfig+0xdb4>)
 8004a4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a4c:	08db      	lsrs	r3, r3, #3
 8004a4e:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pRCC_OscInitStruct->PLL.PLLFRACN))
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8004a56:	429a      	cmp	r2, r3
 8004a58:	d01a      	beq.n	8004a90 <HAL_RCC_OscConfig+0xda8>
      {
        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN. */
        __HAL_RCC_PLL_FRACN_DISABLE();
 8004a5a:	4b10      	ldr	r3, [pc, #64]	@ (8004a9c <HAL_RCC_OscConfig+0xdb4>)
 8004a5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a5e:	4a0f      	ldr	r2, [pc, #60]	@ (8004a9c <HAL_RCC_OscConfig+0xdb4>)
 8004a60:	f023 0310 	bic.w	r3, r3, #16
 8004a64:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a66:	f7fd f8e7 	bl	8001c38 <HAL_GetTick>
 8004a6a:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait at least 2 CK_REF (PLL1 input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < PLL_FRAC_WAIT_VALUE)
 8004a6c:	bf00      	nop
 8004a6e:	f7fd f8e3 	bl	8001c38 <HAL_GetTick>
 8004a72:	4602      	mov	r2, r0
 8004a74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a76:	4293      	cmp	r3, r2
 8004a78:	d0f9      	beq.n	8004a6e <HAL_RCC_OscConfig+0xd86>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a7e:	4a07      	ldr	r2, [pc, #28]	@ (8004a9c <HAL_RCC_OscConfig+0xdb4>)
 8004a80:	00db      	lsls	r3, r3, #3
 8004a82:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL_FRACN_ENABLE();
 8004a84:	4b05      	ldr	r3, [pc, #20]	@ (8004a9c <HAL_RCC_OscConfig+0xdb4>)
 8004a86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a88:	4a04      	ldr	r2, [pc, #16]	@ (8004a9c <HAL_RCC_OscConfig+0xdb4>)
 8004a8a:	f043 0310 	orr.w	r3, r3, #16
 8004a8e:	6293      	str	r3, [r2, #40]	@ 0x28
      }
    }
  }
  return HAL_OK;
 8004a90:	2300      	movs	r3, #0
}
 8004a92:	4618      	mov	r0, r3
 8004a94:	3738      	adds	r7, #56	@ 0x38
 8004a96:	46bd      	mov	sp, r7
 8004a98:	bd80      	pop	{r7, pc}
 8004a9a:	bf00      	nop
 8004a9c:	46020c00 	.word	0x46020c00

08004aa0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef   *const pRCC_ClkInitStruct, uint32_t FLatency)
{
 8004aa0:	b580      	push	{r7, lr}
 8004aa2:	b086      	sub	sp, #24
 8004aa4:	af00      	add	r7, sp, #0
 8004aa6:	6078      	str	r0, [r7, #4]
 8004aa8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pRCC_ClkInitStruct == NULL)
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d101      	bne.n	8004ab4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004ab0:	2301      	movs	r3, #1
 8004ab2:	e1d9      	b.n	8004e68 <HAL_RCC_ClockConfig+0x3c8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
   must be correctly programmed according to the frequency of the CPU clock
   (HCLK) and the supply voltage of the device */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004ab4:	4b9b      	ldr	r3, [pc, #620]	@ (8004d24 <HAL_RCC_ClockConfig+0x284>)
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	f003 030f 	and.w	r3, r3, #15
 8004abc:	683a      	ldr	r2, [r7, #0]
 8004abe:	429a      	cmp	r2, r3
 8004ac0:	d910      	bls.n	8004ae4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ac2:	4b98      	ldr	r3, [pc, #608]	@ (8004d24 <HAL_RCC_ClockConfig+0x284>)
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	f023 020f 	bic.w	r2, r3, #15
 8004aca:	4996      	ldr	r1, [pc, #600]	@ (8004d24 <HAL_RCC_ClockConfig+0x284>)
 8004acc:	683b      	ldr	r3, [r7, #0]
 8004ace:	4313      	orrs	r3, r2
 8004ad0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ad2:	4b94      	ldr	r3, [pc, #592]	@ (8004d24 <HAL_RCC_ClockConfig+0x284>)
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f003 030f 	and.w	r3, r3, #15
 8004ada:	683a      	ldr	r2, [r7, #0]
 8004adc:	429a      	cmp	r2, r3
 8004ade:	d001      	beq.n	8004ae4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004ae0:	2301      	movs	r3, #1
 8004ae2:	e1c1      	b.n	8004e68 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	f003 0310 	and.w	r3, r3, #16
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d010      	beq.n	8004b12 <HAL_RCC_ClockConfig+0x72>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) > (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	695a      	ldr	r2, [r3, #20]
 8004af4:	4b8c      	ldr	r3, [pc, #560]	@ (8004d28 <HAL_RCC_ClockConfig+0x288>)
 8004af6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004af8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004afc:	429a      	cmp	r2, r3
 8004afe:	d908      	bls.n	8004b12 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, pRCC_ClkInitStruct->APB3CLKDivider);
 8004b00:	4b89      	ldr	r3, [pc, #548]	@ (8004d28 <HAL_RCC_ClockConfig+0x288>)
 8004b02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b04:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	695b      	ldr	r3, [r3, #20]
 8004b0c:	4986      	ldr	r1, [pc, #536]	@ (8004d28 <HAL_RCC_ClockConfig+0x288>)
 8004b0e:	4313      	orrs	r3, r2
 8004b10:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	f003 0308 	and.w	r3, r3, #8
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d012      	beq.n	8004b44 <HAL_RCC_ClockConfig+0xa4>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	691a      	ldr	r2, [r3, #16]
 8004b22:	4b81      	ldr	r3, [pc, #516]	@ (8004d28 <HAL_RCC_ClockConfig+0x288>)
 8004b24:	6a1b      	ldr	r3, [r3, #32]
 8004b26:	091b      	lsrs	r3, r3, #4
 8004b28:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004b2c:	429a      	cmp	r2, r3
 8004b2e:	d909      	bls.n	8004b44 <HAL_RCC_ClockConfig+0xa4>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8004b30:	4b7d      	ldr	r3, [pc, #500]	@ (8004d28 <HAL_RCC_ClockConfig+0x288>)
 8004b32:	6a1b      	ldr	r3, [r3, #32]
 8004b34:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	691b      	ldr	r3, [r3, #16]
 8004b3c:	011b      	lsls	r3, r3, #4
 8004b3e:	497a      	ldr	r1, [pc, #488]	@ (8004d28 <HAL_RCC_ClockConfig+0x288>)
 8004b40:	4313      	orrs	r3, r2
 8004b42:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	f003 0304 	and.w	r3, r3, #4
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d010      	beq.n	8004b72 <HAL_RCC_ClockConfig+0xd2>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	68da      	ldr	r2, [r3, #12]
 8004b54:	4b74      	ldr	r3, [pc, #464]	@ (8004d28 <HAL_RCC_ClockConfig+0x288>)
 8004b56:	6a1b      	ldr	r3, [r3, #32]
 8004b58:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004b5c:	429a      	cmp	r2, r3
 8004b5e:	d908      	bls.n	8004b72 <HAL_RCC_ClockConfig+0xd2>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8004b60:	4b71      	ldr	r3, [pc, #452]	@ (8004d28 <HAL_RCC_ClockConfig+0x288>)
 8004b62:	6a1b      	ldr	r3, [r3, #32]
 8004b64:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	68db      	ldr	r3, [r3, #12]
 8004b6c:	496e      	ldr	r1, [pc, #440]	@ (8004d28 <HAL_RCC_ClockConfig+0x288>)
 8004b6e:	4313      	orrs	r3, r2
 8004b70:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	f003 0302 	and.w	r3, r3, #2
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d010      	beq.n	8004ba0 <HAL_RCC_ClockConfig+0x100>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	689a      	ldr	r2, [r3, #8]
 8004b82:	4b69      	ldr	r3, [pc, #420]	@ (8004d28 <HAL_RCC_ClockConfig+0x288>)
 8004b84:	6a1b      	ldr	r3, [r3, #32]
 8004b86:	f003 030f 	and.w	r3, r3, #15
 8004b8a:	429a      	cmp	r2, r3
 8004b8c:	d908      	bls.n	8004ba0 <HAL_RCC_ClockConfig+0x100>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 8004b8e:	4b66      	ldr	r3, [pc, #408]	@ (8004d28 <HAL_RCC_ClockConfig+0x288>)
 8004b90:	6a1b      	ldr	r3, [r3, #32]
 8004b92:	f023 020f 	bic.w	r2, r3, #15
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	689b      	ldr	r3, [r3, #8]
 8004b9a:	4963      	ldr	r1, [pc, #396]	@ (8004d28 <HAL_RCC_ClockConfig+0x288>)
 8004b9c:	4313      	orrs	r3, r2
 8004b9e:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	f003 0301 	and.w	r3, r3, #1
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	f000 80d2 	beq.w	8004d52 <HAL_RCC_ClockConfig+0x2b2>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pRCC_ClkInitStruct->SYSCLKSource));
    FlagStatus  pwrclkchanged = RESET;
 8004bae:	2300      	movs	r3, #0
 8004bb0:	75fb      	strb	r3, [r7, #23]

    /* PLL is selected as System Clock Source */
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	685b      	ldr	r3, [r3, #4]
 8004bb6:	2b03      	cmp	r3, #3
 8004bb8:	d143      	bne.n	8004c42 <HAL_RCC_ClockConfig+0x1a2>
    {
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004bba:	4b5b      	ldr	r3, [pc, #364]	@ (8004d28 <HAL_RCC_ClockConfig+0x288>)
 8004bbc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004bc0:	f003 0304 	and.w	r3, r3, #4
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d110      	bne.n	8004bea <HAL_RCC_ClockConfig+0x14a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8004bc8:	4b57      	ldr	r3, [pc, #348]	@ (8004d28 <HAL_RCC_ClockConfig+0x288>)
 8004bca:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004bce:	4a56      	ldr	r2, [pc, #344]	@ (8004d28 <HAL_RCC_ClockConfig+0x288>)
 8004bd0:	f043 0304 	orr.w	r3, r3, #4
 8004bd4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8004bd8:	4b53      	ldr	r3, [pc, #332]	@ (8004d28 <HAL_RCC_ClockConfig+0x288>)
 8004bda:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004bde:	f003 0304 	and.w	r3, r3, #4
 8004be2:	60bb      	str	r3, [r7, #8]
 8004be4:	68bb      	ldr	r3, [r7, #8]
        pwrclkchanged = SET;
 8004be6:	2301      	movs	r3, #1
 8004be8:	75fb      	strb	r3, [r7, #23]
      }
      tickstart = HAL_GetTick();
 8004bea:	f7fd f825 	bl	8001c38 <HAL_GetTick>
 8004bee:	6138      	str	r0, [r7, #16]
      /* Check if EPOD is enabled */
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 8004bf0:	4b4e      	ldr	r3, [pc, #312]	@ (8004d2c <HAL_RCC_ClockConfig+0x28c>)
 8004bf2:	68db      	ldr	r3, [r3, #12]
 8004bf4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d00f      	beq.n	8004c1c <HAL_RCC_ClockConfig+0x17c>
      {
        /* Wait till BOOST is ready */
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8004bfc:	e008      	b.n	8004c10 <HAL_RCC_ClockConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > EPOD_TIMEOUT_VALUE)
 8004bfe:	f7fd f81b 	bl	8001c38 <HAL_GetTick>
 8004c02:	4602      	mov	r2, r0
 8004c04:	693b      	ldr	r3, [r7, #16]
 8004c06:	1ad3      	subs	r3, r2, r3
 8004c08:	2b02      	cmp	r3, #2
 8004c0a:	d901      	bls.n	8004c10 <HAL_RCC_ClockConfig+0x170>
          {
            return HAL_TIMEOUT;
 8004c0c:	2303      	movs	r3, #3
 8004c0e:	e12b      	b.n	8004e68 <HAL_RCC_ClockConfig+0x3c8>
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8004c10:	4b46      	ldr	r3, [pc, #280]	@ (8004d2c <HAL_RCC_ClockConfig+0x28c>)
 8004c12:	68db      	ldr	r3, [r3, #12]
 8004c14:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d0f0      	beq.n	8004bfe <HAL_RCC_ClockConfig+0x15e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8004c1c:	7dfb      	ldrb	r3, [r7, #23]
 8004c1e:	2b01      	cmp	r3, #1
 8004c20:	d107      	bne.n	8004c32 <HAL_RCC_ClockConfig+0x192>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8004c22:	4b41      	ldr	r3, [pc, #260]	@ (8004d28 <HAL_RCC_ClockConfig+0x288>)
 8004c24:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004c28:	4a3f      	ldr	r2, [pc, #252]	@ (8004d28 <HAL_RCC_ClockConfig+0x288>)
 8004c2a:	f023 0304 	bic.w	r3, r3, #4
 8004c2e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
      }

      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8004c32:	4b3d      	ldr	r3, [pc, #244]	@ (8004d28 <HAL_RCC_ClockConfig+0x288>)
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d121      	bne.n	8004c82 <HAL_RCC_ClockConfig+0x1e2>
      {
        return HAL_ERROR;
 8004c3e:	2301      	movs	r3, #1
 8004c40:	e112      	b.n	8004e68 <HAL_RCC_ClockConfig+0x3c8>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	685b      	ldr	r3, [r3, #4]
 8004c46:	2b02      	cmp	r3, #2
 8004c48:	d107      	bne.n	8004c5a <HAL_RCC_ClockConfig+0x1ba>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004c4a:	4b37      	ldr	r3, [pc, #220]	@ (8004d28 <HAL_RCC_ClockConfig+0x288>)
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d115      	bne.n	8004c82 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8004c56:	2301      	movs	r3, #1
 8004c58:	e106      	b.n	8004e68 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	685b      	ldr	r3, [r3, #4]
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d107      	bne.n	8004c72 <HAL_RCC_ClockConfig+0x1d2>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8004c62:	4b31      	ldr	r3, [pc, #196]	@ (8004d28 <HAL_RCC_ClockConfig+0x288>)
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	f003 0304 	and.w	r3, r3, #4
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d109      	bne.n	8004c82 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8004c6e:	2301      	movs	r3, #1
 8004c70:	e0fa      	b.n	8004e68 <HAL_RCC_ClockConfig+0x3c8>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004c72:	4b2d      	ldr	r3, [pc, #180]	@ (8004d28 <HAL_RCC_ClockConfig+0x288>)
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d101      	bne.n	8004c82 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8004c7e:	2301      	movs	r3, #1
 8004c80:	e0f2      	b.n	8004e68 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 8004c82:	4b29      	ldr	r3, [pc, #164]	@ (8004d28 <HAL_RCC_ClockConfig+0x288>)
 8004c84:	69db      	ldr	r3, [r3, #28]
 8004c86:	f023 0203 	bic.w	r2, r3, #3
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	685b      	ldr	r3, [r3, #4]
 8004c8e:	4926      	ldr	r1, [pc, #152]	@ (8004d28 <HAL_RCC_ClockConfig+0x288>)
 8004c90:	4313      	orrs	r3, r2
 8004c92:	61cb      	str	r3, [r1, #28]

    tickstart = HAL_GetTick();
 8004c94:	f7fc ffd0 	bl	8001c38 <HAL_GetTick>
 8004c98:	6138      	str	r0, [r7, #16]

    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	685b      	ldr	r3, [r3, #4]
 8004c9e:	2b03      	cmp	r3, #3
 8004ca0:	d112      	bne.n	8004cc8 <HAL_RCC_ClockConfig+0x228>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004ca2:	e00a      	b.n	8004cba <HAL_RCC_ClockConfig+0x21a>
      {
        if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004ca4:	f7fc ffc8 	bl	8001c38 <HAL_GetTick>
 8004ca8:	4602      	mov	r2, r0
 8004caa:	693b      	ldr	r3, [r7, #16]
 8004cac:	1ad3      	subs	r3, r2, r3
 8004cae:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004cb2:	4293      	cmp	r3, r2
 8004cb4:	d901      	bls.n	8004cba <HAL_RCC_ClockConfig+0x21a>
        {
          return HAL_TIMEOUT;
 8004cb6:	2303      	movs	r3, #3
 8004cb8:	e0d6      	b.n	8004e68 <HAL_RCC_ClockConfig+0x3c8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004cba:	4b1b      	ldr	r3, [pc, #108]	@ (8004d28 <HAL_RCC_ClockConfig+0x288>)
 8004cbc:	69db      	ldr	r3, [r3, #28]
 8004cbe:	f003 030c 	and.w	r3, r3, #12
 8004cc2:	2b0c      	cmp	r3, #12
 8004cc4:	d1ee      	bne.n	8004ca4 <HAL_RCC_ClockConfig+0x204>
 8004cc6:	e044      	b.n	8004d52 <HAL_RCC_ClockConfig+0x2b2>
        }
      }
    }
    else
    {
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	685b      	ldr	r3, [r3, #4]
 8004ccc:	2b02      	cmp	r3, #2
 8004cce:	d112      	bne.n	8004cf6 <HAL_RCC_ClockConfig+0x256>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8004cd0:	e00a      	b.n	8004ce8 <HAL_RCC_ClockConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004cd2:	f7fc ffb1 	bl	8001c38 <HAL_GetTick>
 8004cd6:	4602      	mov	r2, r0
 8004cd8:	693b      	ldr	r3, [r7, #16]
 8004cda:	1ad3      	subs	r3, r2, r3
 8004cdc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004ce0:	4293      	cmp	r3, r2
 8004ce2:	d901      	bls.n	8004ce8 <HAL_RCC_ClockConfig+0x248>
          {
            return HAL_TIMEOUT;
 8004ce4:	2303      	movs	r3, #3
 8004ce6:	e0bf      	b.n	8004e68 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8004ce8:	4b0f      	ldr	r3, [pc, #60]	@ (8004d28 <HAL_RCC_ClockConfig+0x288>)
 8004cea:	69db      	ldr	r3, [r3, #28]
 8004cec:	f003 030c 	and.w	r3, r3, #12
 8004cf0:	2b08      	cmp	r3, #8
 8004cf2:	d1ee      	bne.n	8004cd2 <HAL_RCC_ClockConfig+0x232>
 8004cf4:	e02d      	b.n	8004d52 <HAL_RCC_ClockConfig+0x2b2>
          }
        }
      }
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	685b      	ldr	r3, [r3, #4]
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d123      	bne.n	8004d46 <HAL_RCC_ClockConfig+0x2a6>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8004cfe:	e00a      	b.n	8004d16 <HAL_RCC_ClockConfig+0x276>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004d00:	f7fc ff9a 	bl	8001c38 <HAL_GetTick>
 8004d04:	4602      	mov	r2, r0
 8004d06:	693b      	ldr	r3, [r7, #16]
 8004d08:	1ad3      	subs	r3, r2, r3
 8004d0a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004d0e:	4293      	cmp	r3, r2
 8004d10:	d901      	bls.n	8004d16 <HAL_RCC_ClockConfig+0x276>
          {
            return HAL_TIMEOUT;
 8004d12:	2303      	movs	r3, #3
 8004d14:	e0a8      	b.n	8004e68 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8004d16:	4b04      	ldr	r3, [pc, #16]	@ (8004d28 <HAL_RCC_ClockConfig+0x288>)
 8004d18:	69db      	ldr	r3, [r3, #28]
 8004d1a:	f003 030c 	and.w	r3, r3, #12
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d1ee      	bne.n	8004d00 <HAL_RCC_ClockConfig+0x260>
 8004d22:	e016      	b.n	8004d52 <HAL_RCC_ClockConfig+0x2b2>
 8004d24:	40022000 	.word	0x40022000
 8004d28:	46020c00 	.word	0x46020c00
 8004d2c:	46020800 	.word	0x46020800
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004d30:	f7fc ff82 	bl	8001c38 <HAL_GetTick>
 8004d34:	4602      	mov	r2, r0
 8004d36:	693b      	ldr	r3, [r7, #16]
 8004d38:	1ad3      	subs	r3, r2, r3
 8004d3a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004d3e:	4293      	cmp	r3, r2
 8004d40:	d901      	bls.n	8004d46 <HAL_RCC_ClockConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 8004d42:	2303      	movs	r3, #3
 8004d44:	e090      	b.n	8004e68 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8004d46:	4b4a      	ldr	r3, [pc, #296]	@ (8004e70 <HAL_RCC_ClockConfig+0x3d0>)
 8004d48:	69db      	ldr	r3, [r3, #28]
 8004d4a:	f003 030c 	and.w	r3, r3, #12
 8004d4e:	2b04      	cmp	r3, #4
 8004d50:	d1ee      	bne.n	8004d30 <HAL_RCC_ClockConfig+0x290>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	f003 0302 	and.w	r3, r3, #2
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d010      	beq.n	8004d80 <HAL_RCC_ClockConfig+0x2e0>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	689a      	ldr	r2, [r3, #8]
 8004d62:	4b43      	ldr	r3, [pc, #268]	@ (8004e70 <HAL_RCC_ClockConfig+0x3d0>)
 8004d64:	6a1b      	ldr	r3, [r3, #32]
 8004d66:	f003 030f 	and.w	r3, r3, #15
 8004d6a:	429a      	cmp	r2, r3
 8004d6c:	d208      	bcs.n	8004d80 <HAL_RCC_ClockConfig+0x2e0>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 8004d6e:	4b40      	ldr	r3, [pc, #256]	@ (8004e70 <HAL_RCC_ClockConfig+0x3d0>)
 8004d70:	6a1b      	ldr	r3, [r3, #32]
 8004d72:	f023 020f 	bic.w	r2, r3, #15
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	689b      	ldr	r3, [r3, #8]
 8004d7a:	493d      	ldr	r1, [pc, #244]	@ (8004e70 <HAL_RCC_ClockConfig+0x3d0>)
 8004d7c:	4313      	orrs	r3, r2
 8004d7e:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004d80:	4b3c      	ldr	r3, [pc, #240]	@ (8004e74 <HAL_RCC_ClockConfig+0x3d4>)
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	f003 030f 	and.w	r3, r3, #15
 8004d88:	683a      	ldr	r2, [r7, #0]
 8004d8a:	429a      	cmp	r2, r3
 8004d8c:	d210      	bcs.n	8004db0 <HAL_RCC_ClockConfig+0x310>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d8e:	4b39      	ldr	r3, [pc, #228]	@ (8004e74 <HAL_RCC_ClockConfig+0x3d4>)
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	f023 020f 	bic.w	r2, r3, #15
 8004d96:	4937      	ldr	r1, [pc, #220]	@ (8004e74 <HAL_RCC_ClockConfig+0x3d4>)
 8004d98:	683b      	ldr	r3, [r7, #0]
 8004d9a:	4313      	orrs	r3, r2
 8004d9c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d9e:	4b35      	ldr	r3, [pc, #212]	@ (8004e74 <HAL_RCC_ClockConfig+0x3d4>)
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	f003 030f 	and.w	r3, r3, #15
 8004da6:	683a      	ldr	r2, [r7, #0]
 8004da8:	429a      	cmp	r2, r3
 8004daa:	d001      	beq.n	8004db0 <HAL_RCC_ClockConfig+0x310>
    {
      return HAL_ERROR;
 8004dac:	2301      	movs	r3, #1
 8004dae:	e05b      	b.n	8004e68 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	f003 0304 	and.w	r3, r3, #4
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d010      	beq.n	8004dde <HAL_RCC_ClockConfig+0x33e>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	68da      	ldr	r2, [r3, #12]
 8004dc0:	4b2b      	ldr	r3, [pc, #172]	@ (8004e70 <HAL_RCC_ClockConfig+0x3d0>)
 8004dc2:	6a1b      	ldr	r3, [r3, #32]
 8004dc4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004dc8:	429a      	cmp	r2, r3
 8004dca:	d208      	bcs.n	8004dde <HAL_RCC_ClockConfig+0x33e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8004dcc:	4b28      	ldr	r3, [pc, #160]	@ (8004e70 <HAL_RCC_ClockConfig+0x3d0>)
 8004dce:	6a1b      	ldr	r3, [r3, #32]
 8004dd0:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	68db      	ldr	r3, [r3, #12]
 8004dd8:	4925      	ldr	r1, [pc, #148]	@ (8004e70 <HAL_RCC_ClockConfig+0x3d0>)
 8004dda:	4313      	orrs	r3, r2
 8004ddc:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	f003 0308 	and.w	r3, r3, #8
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d012      	beq.n	8004e10 <HAL_RCC_ClockConfig+0x370>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	691a      	ldr	r2, [r3, #16]
 8004dee:	4b20      	ldr	r3, [pc, #128]	@ (8004e70 <HAL_RCC_ClockConfig+0x3d0>)
 8004df0:	6a1b      	ldr	r3, [r3, #32]
 8004df2:	091b      	lsrs	r3, r3, #4
 8004df4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004df8:	429a      	cmp	r2, r3
 8004dfa:	d209      	bcs.n	8004e10 <HAL_RCC_ClockConfig+0x370>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8004dfc:	4b1c      	ldr	r3, [pc, #112]	@ (8004e70 <HAL_RCC_ClockConfig+0x3d0>)
 8004dfe:	6a1b      	ldr	r3, [r3, #32]
 8004e00:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	691b      	ldr	r3, [r3, #16]
 8004e08:	011b      	lsls	r3, r3, #4
 8004e0a:	4919      	ldr	r1, [pc, #100]	@ (8004e70 <HAL_RCC_ClockConfig+0x3d0>)
 8004e0c:	4313      	orrs	r3, r2
 8004e0e:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	f003 0310 	and.w	r3, r3, #16
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d010      	beq.n	8004e3e <HAL_RCC_ClockConfig+0x39e>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) < (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	695a      	ldr	r2, [r3, #20]
 8004e20:	4b13      	ldr	r3, [pc, #76]	@ (8004e70 <HAL_RCC_ClockConfig+0x3d0>)
 8004e22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e24:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004e28:	429a      	cmp	r2, r3
 8004e2a:	d208      	bcs.n	8004e3e <HAL_RCC_ClockConfig+0x39e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, (pRCC_ClkInitStruct->APB3CLKDivider));
 8004e2c:	4b10      	ldr	r3, [pc, #64]	@ (8004e70 <HAL_RCC_ClockConfig+0x3d0>)
 8004e2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e30:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	695b      	ldr	r3, [r3, #20]
 8004e38:	490d      	ldr	r1, [pc, #52]	@ (8004e70 <HAL_RCC_ClockConfig+0x3d0>)
 8004e3a:	4313      	orrs	r3, r2
 8004e3c:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8004e3e:	f000 f821 	bl	8004e84 <HAL_RCC_GetSysClockFreq>
 8004e42:	4602      	mov	r2, r0
 8004e44:	4b0a      	ldr	r3, [pc, #40]	@ (8004e70 <HAL_RCC_ClockConfig+0x3d0>)
 8004e46:	6a1b      	ldr	r3, [r3, #32]
 8004e48:	f003 030f 	and.w	r3, r3, #15
 8004e4c:	490a      	ldr	r1, [pc, #40]	@ (8004e78 <HAL_RCC_ClockConfig+0x3d8>)
 8004e4e:	5ccb      	ldrb	r3, [r1, r3]
 8004e50:	fa22 f303 	lsr.w	r3, r2, r3
 8004e54:	4a09      	ldr	r2, [pc, #36]	@ (8004e7c <HAL_RCC_ClockConfig+0x3dc>)
 8004e56:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004e58:	4b09      	ldr	r3, [pc, #36]	@ (8004e80 <HAL_RCC_ClockConfig+0x3e0>)
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	4618      	mov	r0, r3
 8004e5e:	f7fc fb4b 	bl	80014f8 <HAL_InitTick>
 8004e62:	4603      	mov	r3, r0
 8004e64:	73fb      	strb	r3, [r7, #15]

  return status;
 8004e66:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e68:	4618      	mov	r0, r3
 8004e6a:	3718      	adds	r7, #24
 8004e6c:	46bd      	mov	sp, r7
 8004e6e:	bd80      	pop	{r7, pc}
 8004e70:	46020c00 	.word	0x46020c00
 8004e74:	40022000 	.word	0x40022000
 8004e78:	0800a764 	.word	0x0800a764
 8004e7c:	20000018 	.word	0x20000018
 8004e80:	20000038 	.word	0x20000038

08004e84 <HAL_RCC_GetSysClockFreq>:
  * @note   Each time SYSCLK changes, this function must be called to update the
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004e84:	b480      	push	{r7}
 8004e86:	b08b      	sub	sp, #44	@ 0x2c
 8004e88:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 8004e8a:	2300      	movs	r3, #0
 8004e8c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pllsource;
  uint32_t pllr;
  uint32_t pllm;
  uint32_t pllfracen;
  uint32_t sysclockfreq = 0U;
 8004e8e:	2300      	movs	r3, #0
 8004e90:	623b      	str	r3, [r7, #32]
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  float_t fracn1;
  float_t pllvco;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004e92:	4b78      	ldr	r3, [pc, #480]	@ (8005074 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004e94:	69db      	ldr	r3, [r3, #28]
 8004e96:	f003 030c 	and.w	r3, r3, #12
 8004e9a:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004e9c:	4b75      	ldr	r3, [pc, #468]	@ (8005074 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004e9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ea0:	f003 0303 	and.w	r3, r3, #3
 8004ea4:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8004ea6:	69bb      	ldr	r3, [r7, #24]
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d005      	beq.n	8004eb8 <HAL_RCC_GetSysClockFreq+0x34>
 8004eac:	69bb      	ldr	r3, [r7, #24]
 8004eae:	2b0c      	cmp	r3, #12
 8004eb0:	d121      	bne.n	8004ef6 <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004eb2:	697b      	ldr	r3, [r7, #20]
 8004eb4:	2b01      	cmp	r3, #1
 8004eb6:	d11e      	bne.n	8004ef6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 8004eb8:	4b6e      	ldr	r3, [pc, #440]	@ (8005074 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004eba:	689b      	ldr	r3, [r3, #8]
 8004ebc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d107      	bne.n	8004ed4 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 8004ec4:	4b6b      	ldr	r3, [pc, #428]	@ (8005074 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004ec6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004eca:	0b1b      	lsrs	r3, r3, #12
 8004ecc:	f003 030f 	and.w	r3, r3, #15
 8004ed0:	627b      	str	r3, [r7, #36]	@ 0x24
 8004ed2:	e005      	b.n	8004ee0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 8004ed4:	4b67      	ldr	r3, [pc, #412]	@ (8005074 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004ed6:	689b      	ldr	r3, [r3, #8]
 8004ed8:	0f1b      	lsrs	r3, r3, #28
 8004eda:	f003 030f 	and.w	r3, r3, #15
 8004ede:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004ee0:	4a65      	ldr	r2, [pc, #404]	@ (8005078 <HAL_RCC_GetSysClockFreq+0x1f4>)
 8004ee2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ee4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004ee8:	627b      	str	r3, [r7, #36]	@ 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8004eea:	69bb      	ldr	r3, [r7, #24]
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d110      	bne.n	8004f12 <HAL_RCC_GetSysClockFreq+0x8e>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004ef0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ef2:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8004ef4:	e00d      	b.n	8004f12 <HAL_RCC_GetSysClockFreq+0x8e>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004ef6:	4b5f      	ldr	r3, [pc, #380]	@ (8005074 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004ef8:	69db      	ldr	r3, [r3, #28]
 8004efa:	f003 030c 	and.w	r3, r3, #12
 8004efe:	2b04      	cmp	r3, #4
 8004f00:	d102      	bne.n	8004f08 <HAL_RCC_GetSysClockFreq+0x84>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004f02:	4b5e      	ldr	r3, [pc, #376]	@ (800507c <HAL_RCC_GetSysClockFreq+0x1f8>)
 8004f04:	623b      	str	r3, [r7, #32]
 8004f06:	e004      	b.n	8004f12 <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004f08:	69bb      	ldr	r3, [r7, #24]
 8004f0a:	2b08      	cmp	r3, #8
 8004f0c:	d101      	bne.n	8004f12 <HAL_RCC_GetSysClockFreq+0x8e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004f0e:	4b5b      	ldr	r3, [pc, #364]	@ (800507c <HAL_RCC_GetSysClockFreq+0x1f8>)
 8004f10:	623b      	str	r3, [r7, #32]
  else
  {
    /* Nothing to do */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004f12:	69bb      	ldr	r3, [r7, #24]
 8004f14:	2b0c      	cmp	r3, #12
 8004f16:	f040 80a5 	bne.w	8005064 <HAL_RCC_GetSysClockFreq+0x1e0>
  {
    /* PLL used as system clock  source
       PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
       SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8004f1a:	4b56      	ldr	r3, [pc, #344]	@ (8005074 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004f1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f1e:	f003 0303 	and.w	r3, r3, #3
 8004f22:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8004f24:	4b53      	ldr	r3, [pc, #332]	@ (8005074 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004f26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f28:	0a1b      	lsrs	r3, r3, #8
 8004f2a:	f003 030f 	and.w	r3, r3, #15
 8004f2e:	3301      	adds	r3, #1
 8004f30:	60fb      	str	r3, [r7, #12]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8004f32:	4b50      	ldr	r3, [pc, #320]	@ (8005074 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004f34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f36:	091b      	lsrs	r3, r3, #4
 8004f38:	f003 0301 	and.w	r3, r3, #1
 8004f3c:	60bb      	str	r3, [r7, #8]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8004f3e:	4b4d      	ldr	r3, [pc, #308]	@ (8005074 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004f40:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f42:	08db      	lsrs	r3, r3, #3
 8004f44:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004f48:	68ba      	ldr	r2, [r7, #8]
 8004f4a:	fb02 f303 	mul.w	r3, r2, r3
 8004f4e:	ee07 3a90 	vmov	s15, r3
 8004f52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f56:	edc7 7a01 	vstr	s15, [r7, #4]
                                              RCC_PLL1FRACR_PLL1FRACN_Pos));

    switch (pllsource)
 8004f5a:	693b      	ldr	r3, [r7, #16]
 8004f5c:	2b02      	cmp	r3, #2
 8004f5e:	d003      	beq.n	8004f68 <HAL_RCC_GetSysClockFreq+0xe4>
 8004f60:	693b      	ldr	r3, [r7, #16]
 8004f62:	2b03      	cmp	r3, #3
 8004f64:	d022      	beq.n	8004fac <HAL_RCC_GetSysClockFreq+0x128>
 8004f66:	e043      	b.n	8004ff0 <HAL_RCC_GetSysClockFreq+0x16c>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	ee07 3a90 	vmov	s15, r3
 8004f6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f72:	eddf 6a43 	vldr	s13, [pc, #268]	@ 8005080 <HAL_RCC_GetSysClockFreq+0x1fc>
 8004f76:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004f7a:	4b3e      	ldr	r3, [pc, #248]	@ (8005074 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004f7c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004f7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f82:	ee07 3a90 	vmov	s15, r3
 8004f86:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8004f8a:	ed97 6a01 	vldr	s12, [r7, #4]
 8004f8e:	eddf 5a3d 	vldr	s11, [pc, #244]	@ 8005084 <HAL_RCC_GetSysClockFreq+0x200>
 8004f92:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004f96:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8004f9a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004f9e:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004fa2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004fa6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004faa:	e046      	b.n	800503a <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	ee07 3a90 	vmov	s15, r3
 8004fb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004fb6:	eddf 6a32 	vldr	s13, [pc, #200]	@ 8005080 <HAL_RCC_GetSysClockFreq+0x1fc>
 8004fba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004fbe:	4b2d      	ldr	r3, [pc, #180]	@ (8005074 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004fc0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004fc2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004fc6:	ee07 3a90 	vmov	s15, r3
 8004fca:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8004fce:	ed97 6a01 	vldr	s12, [r7, #4]
 8004fd2:	eddf 5a2c 	vldr	s11, [pc, #176]	@ 8005084 <HAL_RCC_GetSysClockFreq+0x200>
 8004fd6:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004fda:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8004fde:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004fe2:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004fe6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004fea:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004fee:	e024      	b.n	800503a <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004ff0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ff2:	ee07 3a90 	vmov	s15, r3
 8004ff6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	ee07 3a90 	vmov	s15, r3
 8005000:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005004:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005008:	4b1a      	ldr	r3, [pc, #104]	@ (8005074 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800500a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800500c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005010:	ee07 3a90 	vmov	s15, r3
 8005014:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8005018:	ed97 6a01 	vldr	s12, [r7, #4]
 800501c:	eddf 5a19 	vldr	s11, [pc, #100]	@ 8005084 <HAL_RCC_GetSysClockFreq+0x200>
 8005020:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005024:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8005028:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800502c:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005030:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005034:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005038:	bf00      	nop
    }

    pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 800503a:	4b0e      	ldr	r3, [pc, #56]	@ (8005074 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800503c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800503e:	0e1b      	lsrs	r3, r3, #24
 8005040:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005044:	3301      	adds	r3, #1
 8005046:	603b      	str	r3, [r7, #0]
    sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 8005048:	683b      	ldr	r3, [r7, #0]
 800504a:	ee07 3a90 	vmov	s15, r3
 800504e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005052:	edd7 6a07 	vldr	s13, [r7, #28]
 8005056:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800505a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800505e:	ee17 3a90 	vmov	r3, s15
 8005062:	623b      	str	r3, [r7, #32]
  }

  return sysclockfreq;
 8005064:	6a3b      	ldr	r3, [r7, #32]
}
 8005066:	4618      	mov	r0, r3
 8005068:	372c      	adds	r7, #44	@ 0x2c
 800506a:	46bd      	mov	sp, r7
 800506c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005070:	4770      	bx	lr
 8005072:	bf00      	nop
 8005074:	46020c00 	.word	0x46020c00
 8005078:	0800a77c 	.word	0x0800a77c
 800507c:	00f42400 	.word	0x00f42400
 8005080:	4b742400 	.word	0x4b742400
 8005084:	46000000 	.word	0x46000000

08005088 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005088:	b580      	push	{r7, lr}
 800508a:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 800508c:	f7ff fefa 	bl	8004e84 <HAL_RCC_GetSysClockFreq>
 8005090:	4602      	mov	r2, r0
 8005092:	4b07      	ldr	r3, [pc, #28]	@ (80050b0 <HAL_RCC_GetHCLKFreq+0x28>)
 8005094:	6a1b      	ldr	r3, [r3, #32]
 8005096:	f003 030f 	and.w	r3, r3, #15
 800509a:	4906      	ldr	r1, [pc, #24]	@ (80050b4 <HAL_RCC_GetHCLKFreq+0x2c>)
 800509c:	5ccb      	ldrb	r3, [r1, r3]
 800509e:	fa22 f303 	lsr.w	r3, r2, r3
 80050a2:	4a05      	ldr	r2, [pc, #20]	@ (80050b8 <HAL_RCC_GetHCLKFreq+0x30>)
 80050a4:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 80050a6:	4b04      	ldr	r3, [pc, #16]	@ (80050b8 <HAL_RCC_GetHCLKFreq+0x30>)
 80050a8:	681b      	ldr	r3, [r3, #0]
}
 80050aa:	4618      	mov	r0, r3
 80050ac:	bd80      	pop	{r7, pc}
 80050ae:	bf00      	nop
 80050b0:	46020c00 	.word	0x46020c00
 80050b4:	0800a764 	.word	0x0800a764
 80050b8:	20000018 	.word	0x20000018

080050bc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80050bc:	b580      	push	{r7, lr}
 80050be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]);
 80050c0:	f7ff ffe2 	bl	8005088 <HAL_RCC_GetHCLKFreq>
 80050c4:	4602      	mov	r2, r0
 80050c6:	4b05      	ldr	r3, [pc, #20]	@ (80050dc <HAL_RCC_GetPCLK1Freq+0x20>)
 80050c8:	6a1b      	ldr	r3, [r3, #32]
 80050ca:	091b      	lsrs	r3, r3, #4
 80050cc:	f003 0307 	and.w	r3, r3, #7
 80050d0:	4903      	ldr	r1, [pc, #12]	@ (80050e0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80050d2:	5ccb      	ldrb	r3, [r1, r3]
 80050d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80050d8:	4618      	mov	r0, r3
 80050da:	bd80      	pop	{r7, pc}
 80050dc:	46020c00 	.word	0x46020c00
 80050e0:	0800a774 	.word	0x0800a774

080050e4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80050e4:	b580      	push	{r7, lr}
 80050e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]);
 80050e8:	f7ff ffce 	bl	8005088 <HAL_RCC_GetHCLKFreq>
 80050ec:	4602      	mov	r2, r0
 80050ee:	4b05      	ldr	r3, [pc, #20]	@ (8005104 <HAL_RCC_GetPCLK2Freq+0x20>)
 80050f0:	6a1b      	ldr	r3, [r3, #32]
 80050f2:	0a1b      	lsrs	r3, r3, #8
 80050f4:	f003 0307 	and.w	r3, r3, #7
 80050f8:	4903      	ldr	r1, [pc, #12]	@ (8005108 <HAL_RCC_GetPCLK2Freq+0x24>)
 80050fa:	5ccb      	ldrb	r3, [r1, r3]
 80050fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005100:	4618      	mov	r0, r3
 8005102:	bd80      	pop	{r7, pc}
 8005104:	46020c00 	.word	0x46020c00
 8005108:	0800a774 	.word	0x0800a774

0800510c <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 800510c:	b580      	push	{r7, lr}
 800510e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR3 & RCC_CFGR3_PPRE3) >> RCC_CFGR3_PPRE3_Pos]);
 8005110:	f7ff ffba 	bl	8005088 <HAL_RCC_GetHCLKFreq>
 8005114:	4602      	mov	r2, r0
 8005116:	4b05      	ldr	r3, [pc, #20]	@ (800512c <HAL_RCC_GetPCLK3Freq+0x20>)
 8005118:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800511a:	091b      	lsrs	r3, r3, #4
 800511c:	f003 0307 	and.w	r3, r3, #7
 8005120:	4903      	ldr	r1, [pc, #12]	@ (8005130 <HAL_RCC_GetPCLK3Freq+0x24>)
 8005122:	5ccb      	ldrb	r3, [r1, r3]
 8005124:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005128:	4618      	mov	r0, r3
 800512a:	bd80      	pop	{r7, pc}
 800512c:	46020c00 	.word	0x46020c00
 8005130:	0800a774 	.word	0x0800a774

08005134 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *pRCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005134:	b480      	push	{r7}
 8005136:	b083      	sub	sp, #12
 8005138:	af00      	add	r7, sp, #0
 800513a:	6078      	str	r0, [r7, #4]
 800513c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(pRCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  pRCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | \
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	221f      	movs	r2, #31
 8005142:	601a      	str	r2, [r3, #0]
                                  RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_PCLK3;

  /* Get the SYSCLK configuration --------------------------------------------*/
  pRCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR1 & RCC_CFGR1_SW);
 8005144:	4b15      	ldr	r3, [pc, #84]	@ (800519c <HAL_RCC_GetClockConfig+0x68>)
 8005146:	69db      	ldr	r3, [r3, #28]
 8005148:	f003 0203 	and.w	r2, r3, #3
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR2 & RCC_CFGR2_HPRE);
 8005150:	4b12      	ldr	r3, [pc, #72]	@ (800519c <HAL_RCC_GetClockConfig+0x68>)
 8005152:	6a1b      	ldr	r3, [r3, #32]
 8005154:	f003 020f 	and.w	r2, r3, #15
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR2 & RCC_CFGR2_PPRE1);
 800515c:	4b0f      	ldr	r3, [pc, #60]	@ (800519c <HAL_RCC_GetClockConfig+0x68>)
 800515e:	6a1b      	ldr	r3, [r3, #32]
 8005160:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4);
 8005168:	4b0c      	ldr	r3, [pc, #48]	@ (800519c <HAL_RCC_GetClockConfig+0x68>)
 800516a:	6a1b      	ldr	r3, [r3, #32]
 800516c:	091b      	lsrs	r3, r3, #4
 800516e:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	611a      	str	r2, [r3, #16]

  /* Get the APB3 configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->CFGR3 & RCC_CFGR3_PPRE3);
 8005176:	4b09      	ldr	r3, [pc, #36]	@ (800519c <HAL_RCC_GetClockConfig+0x68>)
 8005178:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800517a:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	615a      	str	r2, [r3, #20]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8005182:	4b07      	ldr	r3, [pc, #28]	@ (80051a0 <HAL_RCC_GetClockConfig+0x6c>)
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	f003 020f 	and.w	r2, r3, #15
 800518a:	683b      	ldr	r3, [r7, #0]
 800518c:	601a      	str	r2, [r3, #0]
}
 800518e:	bf00      	nop
 8005190:	370c      	adds	r7, #12
 8005192:	46bd      	mov	sp, r7
 8005194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005198:	4770      	bx	lr
 800519a:	bf00      	nop
 800519c:	46020c00 	.word	0x46020c00
 80051a0:	40022000 	.word	0x40022000

080051a4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80051a4:	b580      	push	{r7, lr}
 80051a6:	b086      	sub	sp, #24
 80051a8:	af00      	add	r7, sp, #0
 80051aa:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency;  /* default value 0WS */

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 80051ac:	4b3e      	ldr	r3, [pc, #248]	@ (80052a8 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80051ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80051b2:	f003 0304 	and.w	r3, r3, #4
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d003      	beq.n	80051c2 <RCC_SetFlashLatencyFromMSIRange+0x1e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80051ba:	f7fe fd17 	bl	8003bec <HAL_PWREx_GetVoltageRange>
 80051be:	6178      	str	r0, [r7, #20]
 80051c0:	e019      	b.n	80051f6 <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80051c2:	4b39      	ldr	r3, [pc, #228]	@ (80052a8 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80051c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80051c8:	4a37      	ldr	r2, [pc, #220]	@ (80052a8 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80051ca:	f043 0304 	orr.w	r3, r3, #4
 80051ce:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80051d2:	4b35      	ldr	r3, [pc, #212]	@ (80052a8 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80051d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80051d8:	f003 0304 	and.w	r3, r3, #4
 80051dc:	60fb      	str	r3, [r7, #12]
 80051de:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80051e0:	f7fe fd04 	bl	8003bec <HAL_PWREx_GetVoltageRange>
 80051e4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80051e6:	4b30      	ldr	r3, [pc, #192]	@ (80052a8 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80051e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80051ec:	4a2e      	ldr	r2, [pc, #184]	@ (80052a8 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80051ee:	f023 0304 	bic.w	r3, r3, #4
 80051f2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 80051f6:	697b      	ldr	r3, [r7, #20]
 80051f8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80051fc:	d003      	beq.n	8005206 <RCC_SetFlashLatencyFromMSIRange+0x62>
 80051fe:	697b      	ldr	r3, [r7, #20]
 8005200:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005204:	d109      	bne.n	800521a <RCC_SetFlashLatencyFromMSIRange+0x76>
  {

    if (msirange < RCC_MSIRANGE_1)
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800520c:	d202      	bcs.n	8005214 <RCC_SetFlashLatencyFromMSIRange+0x70>
    {
      /* MSI = 48Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 800520e:	2301      	movs	r3, #1
 8005210:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 8005212:	e033      	b.n	800527c <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
    else
    {
      /*  MSI < 48Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 8005214:	2300      	movs	r3, #0
 8005216:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 8005218:	e030      	b.n	800527c <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
  }
  else
  {
    if (msirange < RCC_MSIRANGE_1)
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005220:	d208      	bcs.n	8005234 <RCC_SetFlashLatencyFromMSIRange+0x90>
    {
      /* MSI = 48Mhz */
      if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8005222:	697b      	ldr	r3, [r7, #20]
 8005224:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005228:	d102      	bne.n	8005230 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        latency = FLASH_LATENCY_3; /* 3WS */
 800522a:	2303      	movs	r3, #3
 800522c:	613b      	str	r3, [r7, #16]
 800522e:	e025      	b.n	800527c <RCC_SetFlashLatencyFromMSIRange+0xd8>
      }
      else
      {
        return HAL_ERROR;
 8005230:	2301      	movs	r3, #1
 8005232:	e035      	b.n	80052a0 <RCC_SetFlashLatencyFromMSIRange+0xfc>
      }
    }
    else
    {
      if (msirange > RCC_MSIRANGE_2)
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800523a:	d90f      	bls.n	800525c <RCC_SetFlashLatencyFromMSIRange+0xb8>
      {
        if (vos == PWR_REGULATOR_VOLTAGE_SCALE4)
 800523c:	697b      	ldr	r3, [r7, #20]
 800523e:	2b00      	cmp	r3, #0
 8005240:	d109      	bne.n	8005256 <RCC_SetFlashLatencyFromMSIRange+0xb2>
        {
          if (msirange > RCC_MSIRANGE_3)
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005248:	d902      	bls.n	8005250 <RCC_SetFlashLatencyFromMSIRange+0xac>
          {
            latency = FLASH_LATENCY_0; /* 1WS */
 800524a:	2300      	movs	r3, #0
 800524c:	613b      	str	r3, [r7, #16]
 800524e:	e015      	b.n	800527c <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_1; /* 0WS */
 8005250:	2301      	movs	r3, #1
 8005252:	613b      	str	r3, [r7, #16]
 8005254:	e012      	b.n	800527c <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_0; /* 0WS */
 8005256:	2300      	movs	r3, #0
 8005258:	613b      	str	r3, [r7, #16]
 800525a:	e00f      	b.n	800527c <RCC_SetFlashLatencyFromMSIRange+0xd8>
        }
      }
      else
      {
        if (msirange == RCC_MSIRANGE_1)
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005262:	d109      	bne.n	8005278 <RCC_SetFlashLatencyFromMSIRange+0xd4>
        {
          if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8005264:	697b      	ldr	r3, [r7, #20]
 8005266:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800526a:	d102      	bne.n	8005272 <RCC_SetFlashLatencyFromMSIRange+0xce>
          {
            latency = FLASH_LATENCY_1; /* 1WS */
 800526c:	2301      	movs	r3, #1
 800526e:	613b      	str	r3, [r7, #16]
 8005270:	e004      	b.n	800527c <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_2; /* 2WS */
 8005272:	2302      	movs	r3, #2
 8005274:	613b      	str	r3, [r7, #16]
 8005276:	e001      	b.n	800527c <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_1; /* 1WS */
 8005278:	2301      	movs	r3, #1
 800527a:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800527c:	4b0b      	ldr	r3, [pc, #44]	@ (80052ac <RCC_SetFlashLatencyFromMSIRange+0x108>)
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	f023 020f 	bic.w	r2, r3, #15
 8005284:	4909      	ldr	r1, [pc, #36]	@ (80052ac <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8005286:	693b      	ldr	r3, [r7, #16]
 8005288:	4313      	orrs	r3, r2
 800528a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
  memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 800528c:	4b07      	ldr	r3, [pc, #28]	@ (80052ac <RCC_SetFlashLatencyFromMSIRange+0x108>)
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	f003 030f 	and.w	r3, r3, #15
 8005294:	693a      	ldr	r2, [r7, #16]
 8005296:	429a      	cmp	r2, r3
 8005298:	d001      	beq.n	800529e <RCC_SetFlashLatencyFromMSIRange+0xfa>
  {
    return HAL_ERROR;
 800529a:	2301      	movs	r3, #1
 800529c:	e000      	b.n	80052a0 <RCC_SetFlashLatencyFromMSIRange+0xfc>
  }

  return HAL_OK;
 800529e:	2300      	movs	r3, #0
}
 80052a0:	4618      	mov	r0, r3
 80052a2:	3718      	adds	r7, #24
 80052a4:	46bd      	mov	sp, r7
 80052a6:	bd80      	pop	{r7, pc}
 80052a8:	46020c00 	.word	0x46020c00
 80052ac:	40022000 	.word	0x40022000

080052b0 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  *
  *         (*) value not defined in all devices.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 80052b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80052b4:	b0b8      	sub	sp, #224	@ 0xe0
 80052b6:	af00      	add	r7, sp, #0
 80052b8:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80052bc:	2300      	movs	r3, #0
 80052be:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80052c2:	2300      	movs	r3, #0
 80052c4:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80052c8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80052cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052d0:	f002 0401 	and.w	r4, r2, #1
 80052d4:	2500      	movs	r5, #0
 80052d6:	ea54 0305 	orrs.w	r3, r4, r5
 80052da:	d00b      	beq.n	80052f4 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 80052dc:	4bca      	ldr	r3, [pc, #808]	@ (8005608 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80052de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80052e2:	f023 0103 	bic.w	r1, r3, #3
 80052e6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80052ea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80052ec:	4ac6      	ldr	r2, [pc, #792]	@ (8005608 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80052ee:	430b      	orrs	r3, r1
 80052f0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

#if defined(USART2)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80052f4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80052f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052fc:	f002 0802 	and.w	r8, r2, #2
 8005300:	f04f 0900 	mov.w	r9, #0
 8005304:	ea58 0309 	orrs.w	r3, r8, r9
 8005308:	d00b      	beq.n	8005322 <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 800530a:	4bbf      	ldr	r3, [pc, #764]	@ (8005608 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800530c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005310:	f023 010c 	bic.w	r1, r3, #12
 8005314:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005318:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800531a:	4abb      	ldr	r2, [pc, #748]	@ (8005608 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800531c:	430b      	orrs	r3, r1
 800531e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }
#endif /* USART2 */

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005322:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005326:	e9d3 2300 	ldrd	r2, r3, [r3]
 800532a:	f002 0a04 	and.w	sl, r2, #4
 800532e:	f04f 0b00 	mov.w	fp, #0
 8005332:	ea5a 030b 	orrs.w	r3, sl, fp
 8005336:	d00b      	beq.n	8005350 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 8005338:	4bb3      	ldr	r3, [pc, #716]	@ (8005608 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800533a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800533e:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8005342:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005346:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005348:	4aaf      	ldr	r2, [pc, #700]	@ (8005608 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800534a:	430b      	orrs	r3, r1
 800534c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005350:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005354:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005358:	f002 0308 	and.w	r3, r2, #8
 800535c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005360:	2300      	movs	r3, #0
 8005362:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005366:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800536a:	460b      	mov	r3, r1
 800536c:	4313      	orrs	r3, r2
 800536e:	d00b      	beq.n	8005388 <HAL_RCCEx_PeriphCLKConfig+0xd8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 8005370:	4ba5      	ldr	r3, [pc, #660]	@ (8005608 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8005372:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005376:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800537a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800537e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005380:	4aa1      	ldr	r2, [pc, #644]	@ (8005608 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8005382:	430b      	orrs	r3, r1
 8005384:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005388:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800538c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005390:	f002 0310 	and.w	r3, r2, #16
 8005394:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005398:	2300      	movs	r3, #0
 800539a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800539e:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 80053a2:	460b      	mov	r3, r1
 80053a4:	4313      	orrs	r3, r2
 80053a6:	d00b      	beq.n	80053c0 <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 80053a8:	4b97      	ldr	r3, [pc, #604]	@ (8005608 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80053aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80053ae:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80053b2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80053b6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80053b8:	4a93      	ldr	r2, [pc, #588]	@ (8005608 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80053ba:	430b      	orrs	r3, r1
 80053bc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
    __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
  }
#endif /* USART6 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80053c0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80053c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053c8:	f002 0320 	and.w	r3, r2, #32
 80053cc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80053d0:	2300      	movs	r3, #0
 80053d2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80053d6:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 80053da:	460b      	mov	r3, r1
 80053dc:	4313      	orrs	r3, r2
 80053de:	d00b      	beq.n	80053f8 <HAL_RCCEx_PeriphCLKConfig+0x148>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 80053e0:	4b89      	ldr	r3, [pc, #548]	@ (8005608 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80053e2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80053e6:	f023 0107 	bic.w	r1, r3, #7
 80053ea:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80053ee:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80053f0:	4a85      	ldr	r2, [pc, #532]	@ (8005608 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80053f2:	430b      	orrs	r3, r1
 80053f4:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80053f8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80053fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005400:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8005404:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005408:	2300      	movs	r3, #0
 800540a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800540e:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005412:	460b      	mov	r3, r1
 8005414:	4313      	orrs	r3, r2
 8005416:	d00b      	beq.n	8005430 <HAL_RCCEx_PeriphCLKConfig+0x180>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 8005418:	4b7b      	ldr	r3, [pc, #492]	@ (8005608 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800541a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800541e:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 8005422:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005426:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005428:	4a77      	ldr	r2, [pc, #476]	@ (8005608 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800542a:	430b      	orrs	r3, r1
 800542c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005430:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005434:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005438:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 800543c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005440:	2300      	movs	r3, #0
 8005442:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8005446:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 800544a:	460b      	mov	r3, r1
 800544c:	4313      	orrs	r3, r2
 800544e:	d00b      	beq.n	8005468 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 8005450:	4b6d      	ldr	r3, [pc, #436]	@ (8005608 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8005452:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005456:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800545a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800545e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005460:	4a69      	ldr	r2, [pc, #420]	@ (8005608 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8005462:	430b      	orrs	r3, r1
 8005464:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005468:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800546c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005470:	f402 7380 	and.w	r3, r2, #256	@ 0x100
 8005474:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005478:	2300      	movs	r3, #0
 800547a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800547e:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8005482:	460b      	mov	r3, r1
 8005484:	4313      	orrs	r3, r2
 8005486:	d00b      	beq.n	80054a0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 8005488:	4b5f      	ldr	r3, [pc, #380]	@ (8005608 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800548a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800548e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8005492:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005496:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005498:	4a5b      	ldr	r2, [pc, #364]	@ (8005608 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800549a:	430b      	orrs	r3, r1
 800549c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80054a0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80054a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054a8:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 80054ac:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80054b0:	2300      	movs	r3, #0
 80054b2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80054b6:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 80054ba:	460b      	mov	r3, r1
 80054bc:	4313      	orrs	r3, r2
 80054be:	d00b      	beq.n	80054d8 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 80054c0:	4b51      	ldr	r3, [pc, #324]	@ (8005608 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80054c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80054c6:	f423 4140 	bic.w	r1, r3, #49152	@ 0xc000
 80054ca:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80054ce:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80054d0:	4a4d      	ldr	r2, [pc, #308]	@ (8005608 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80054d2:	430b      	orrs	r3, r1
 80054d4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
    __HAL_RCC_I2C6_CONFIG(pPeriphClkInit->I2c6ClockSelection);
  }
#endif /* I2C6 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80054d8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80054dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054e0:	f402 7300 	and.w	r3, r2, #512	@ 0x200
 80054e4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80054e8:	2300      	movs	r3, #0
 80054ea:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80054ee:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 80054f2:	460b      	mov	r3, r1
 80054f4:	4313      	orrs	r3, r2
 80054f6:	d00b      	beq.n	8005510 <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 80054f8:	4b43      	ldr	r3, [pc, #268]	@ (8005608 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80054fa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80054fe:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 8005502:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005506:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005508:	4a3f      	ldr	r2, [pc, #252]	@ (8005608 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800550a:	430b      	orrs	r3, r1
 800550c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005510:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005514:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005518:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 800551c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005520:	2300      	movs	r3, #0
 8005522:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005526:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800552a:	460b      	mov	r3, r1
 800552c:	4313      	orrs	r3, r2
 800552e:	d00b      	beq.n	8005548 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 8005530:	4b35      	ldr	r3, [pc, #212]	@ (8005608 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8005532:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005536:	f423 2140 	bic.w	r1, r3, #786432	@ 0xc0000
 800553a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800553e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005540:	4a31      	ldr	r2, [pc, #196]	@ (8005608 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8005542:	430b      	orrs	r3, r1
 8005544:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- LPTIM34 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM34) == (RCC_PERIPHCLK_LPTIM34))
 8005548:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800554c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005550:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8005554:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005556:	2300      	movs	r3, #0
 8005558:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800555a:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800555e:	460b      	mov	r3, r1
 8005560:	4313      	orrs	r3, r2
 8005562:	d00c      	beq.n	800557e <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    assert_param(IS_RCC_LPTIM34CLK(pPeriphClkInit->Lptim34ClockSelection));
    __HAL_RCC_LPTIM34_CONFIG(pPeriphClkInit->Lptim34ClockSelection);
 8005564:	4b28      	ldr	r3, [pc, #160]	@ (8005608 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8005566:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800556a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800556e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005572:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005576:	4a24      	ldr	r2, [pc, #144]	@ (8005608 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8005578:	430b      	orrs	r3, r1
 800557a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800557e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005582:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005586:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800558a:	673b      	str	r3, [r7, #112]	@ 0x70
 800558c:	2300      	movs	r3, #0
 800558e:	677b      	str	r3, [r7, #116]	@ 0x74
 8005590:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8005594:	460b      	mov	r3, r1
 8005596:	4313      	orrs	r3, r2
 8005598:	d04f      	beq.n	800563a <HAL_RCCEx_PeriphCLKConfig+0x38a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 800559a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800559e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80055a2:	2b80      	cmp	r3, #128	@ 0x80
 80055a4:	d02d      	beq.n	8005602 <HAL_RCCEx_PeriphCLKConfig+0x352>
 80055a6:	2b80      	cmp	r3, #128	@ 0x80
 80055a8:	d827      	bhi.n	80055fa <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80055aa:	2b60      	cmp	r3, #96	@ 0x60
 80055ac:	d02e      	beq.n	800560c <HAL_RCCEx_PeriphCLKConfig+0x35c>
 80055ae:	2b60      	cmp	r3, #96	@ 0x60
 80055b0:	d823      	bhi.n	80055fa <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80055b2:	2b40      	cmp	r3, #64	@ 0x40
 80055b4:	d006      	beq.n	80055c4 <HAL_RCCEx_PeriphCLKConfig+0x314>
 80055b6:	2b40      	cmp	r3, #64	@ 0x40
 80055b8:	d81f      	bhi.n	80055fa <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d009      	beq.n	80055d2 <HAL_RCCEx_PeriphCLKConfig+0x322>
 80055be:	2b20      	cmp	r3, #32
 80055c0:	d011      	beq.n	80055e6 <HAL_RCCEx_PeriphCLKConfig+0x336>
 80055c2:	e01a      	b.n	80055fa <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      case RCC_SAI1CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80055c4:	4b10      	ldr	r3, [pc, #64]	@ (8005608 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80055c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055c8:	4a0f      	ldr	r2, [pc, #60]	@ (8005608 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80055ca:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80055ce:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 80055d0:	e01d      	b.n	800560e <HAL_RCCEx_PeriphCLKConfig+0x35e>

      case RCC_SAI1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80055d2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80055d6:	3308      	adds	r3, #8
 80055d8:	4618      	mov	r0, r3
 80055da:	f002 f9d1 	bl	8007980 <RCCEx_PLL2_Config>
 80055de:	4603      	mov	r3, r0
 80055e0:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        /* SAI1 clock source config set later after clock selection check */
        break;
 80055e4:	e013      	b.n	800560e <HAL_RCCEx_PeriphCLKConfig+0x35e>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80055e6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80055ea:	332c      	adds	r3, #44	@ 0x2c
 80055ec:	4618      	mov	r0, r3
 80055ee:	f002 fa5f 	bl	8007ab0 <RCCEx_PLL3_Config>
 80055f2:	4603      	mov	r3, r0
 80055f4:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        /* SAI1 clock source config set later after clock selection check */
        break;
 80055f8:	e009      	b.n	800560e <HAL_RCCEx_PeriphCLKConfig+0x35e>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80055fa:	2301      	movs	r3, #1
 80055fc:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8005600:	e005      	b.n	800560e <HAL_RCCEx_PeriphCLKConfig+0x35e>
        break;
 8005602:	bf00      	nop
 8005604:	e003      	b.n	800560e <HAL_RCCEx_PeriphCLKConfig+0x35e>
 8005606:	bf00      	nop
 8005608:	46020c00 	.word	0x46020c00
        break;
 800560c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800560e:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8005612:	2b00      	cmp	r3, #0
 8005614:	d10d      	bne.n	8005632 <HAL_RCCEx_PeriphCLKConfig+0x382>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 8005616:	4bb6      	ldr	r3, [pc, #728]	@ (80058f0 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8005618:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800561c:	f023 01e0 	bic.w	r1, r3, #224	@ 0xe0
 8005620:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005624:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005628:	4ab1      	ldr	r2, [pc, #708]	@ (80058f0 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 800562a:	430b      	orrs	r3, r1
 800562c:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8005630:	e003      	b.n	800563a <HAL_RCCEx_PeriphCLKConfig+0x38a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005632:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8005636:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }

#if defined(SAI2)
  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800563a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800563e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005642:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8005646:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005648:	2300      	movs	r3, #0
 800564a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800564c:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8005650:	460b      	mov	r3, r1
 8005652:	4313      	orrs	r3, r2
 8005654:	d053      	beq.n	80056fe <HAL_RCCEx_PeriphCLKConfig+0x44e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 8005656:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800565a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800565e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005662:	d033      	beq.n	80056cc <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8005664:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005668:	d82c      	bhi.n	80056c4 <HAL_RCCEx_PeriphCLKConfig+0x414>
 800566a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800566e:	d02f      	beq.n	80056d0 <HAL_RCCEx_PeriphCLKConfig+0x420>
 8005670:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005674:	d826      	bhi.n	80056c4 <HAL_RCCEx_PeriphCLKConfig+0x414>
 8005676:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800567a:	d008      	beq.n	800568e <HAL_RCCEx_PeriphCLKConfig+0x3de>
 800567c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005680:	d820      	bhi.n	80056c4 <HAL_RCCEx_PeriphCLKConfig+0x414>
 8005682:	2b00      	cmp	r3, #0
 8005684:	d00a      	beq.n	800569c <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 8005686:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800568a:	d011      	beq.n	80056b0 <HAL_RCCEx_PeriphCLKConfig+0x400>
 800568c:	e01a      	b.n	80056c4 <HAL_RCCEx_PeriphCLKConfig+0x414>
    {
      case RCC_SAI2CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800568e:	4b98      	ldr	r3, [pc, #608]	@ (80058f0 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8005690:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005692:	4a97      	ldr	r2, [pc, #604]	@ (80058f0 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8005694:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005698:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 800569a:	e01a      	b.n	80056d2 <HAL_RCCEx_PeriphCLKConfig+0x422>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800569c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80056a0:	3308      	adds	r3, #8
 80056a2:	4618      	mov	r0, r3
 80056a4:	f002 f96c 	bl	8007980 <RCCEx_PLL2_Config>
 80056a8:	4603      	mov	r3, r0
 80056aa:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        /* SAI2 clock source config set later after clock selection check */
        break;
 80056ae:	e010      	b.n	80056d2 <HAL_RCCEx_PeriphCLKConfig+0x422>

      case RCC_SAI2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80056b0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80056b4:	332c      	adds	r3, #44	@ 0x2c
 80056b6:	4618      	mov	r0, r3
 80056b8:	f002 f9fa 	bl	8007ab0 <RCCEx_PLL3_Config>
 80056bc:	4603      	mov	r3, r0
 80056be:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        /* SAI2 clock source config set later after clock selection check */
        break;
 80056c2:	e006      	b.n	80056d2 <HAL_RCCEx_PeriphCLKConfig+0x422>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80056c4:	2301      	movs	r3, #1
 80056c6:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 80056ca:	e002      	b.n	80056d2 <HAL_RCCEx_PeriphCLKConfig+0x422>
        break;
 80056cc:	bf00      	nop
 80056ce:	e000      	b.n	80056d2 <HAL_RCCEx_PeriphCLKConfig+0x422>
        break;
 80056d0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80056d2:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d10d      	bne.n	80056f6 <HAL_RCCEx_PeriphCLKConfig+0x446>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 80056da:	4b85      	ldr	r3, [pc, #532]	@ (80058f0 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 80056dc:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80056e0:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 80056e4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80056e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80056ec:	4a80      	ldr	r2, [pc, #512]	@ (80058f0 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 80056ee:	430b      	orrs	r3, r1
 80056f0:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 80056f4:	e003      	b.n	80056fe <HAL_RCCEx_PeriphCLKConfig+0x44e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80056f6:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 80056fa:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }
#endif /* SAI2 */

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 80056fe:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005702:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005706:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 800570a:	663b      	str	r3, [r7, #96]	@ 0x60
 800570c:	2300      	movs	r3, #0
 800570e:	667b      	str	r3, [r7, #100]	@ 0x64
 8005710:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8005714:	460b      	mov	r3, r1
 8005716:	4313      	orrs	r3, r2
 8005718:	d046      	beq.n	80057a8 <HAL_RCCEx_PeriphCLKConfig+0x4f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 800571a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800571e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005722:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8005726:	d028      	beq.n	800577a <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8005728:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800572c:	d821      	bhi.n	8005772 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 800572e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005732:	d022      	beq.n	800577a <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8005734:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005738:	d81b      	bhi.n	8005772 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 800573a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800573e:	d01c      	beq.n	800577a <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8005740:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005744:	d815      	bhi.n	8005772 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 8005746:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800574a:	d008      	beq.n	800575e <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 800574c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005750:	d80f      	bhi.n	8005772 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 8005752:	2b00      	cmp	r3, #0
 8005754:	d011      	beq.n	800577a <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8005756:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800575a:	d00e      	beq.n	800577a <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 800575c:	e009      	b.n	8005772 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
    {
      case RCC_ADCDACCLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P, & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800575e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005762:	3308      	adds	r3, #8
 8005764:	4618      	mov	r0, r3
 8005766:	f002 f90b 	bl	8007980 <RCCEx_PLL2_Config>
 800576a:	4603      	mov	r3, r0
 800576c:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8005770:	e004      	b.n	800577c <HAL_RCCEx_PeriphCLKConfig+0x4cc>
      case RCC_ADCDACCLKSOURCE_HSE:
      case RCC_ADCDACCLKSOURCE_HSI:
      case RCC_ADCDACCLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8005772:	2301      	movs	r3, #1
 8005774:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8005778:	e000      	b.n	800577c <HAL_RCCEx_PeriphCLKConfig+0x4cc>
        break;
 800577a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800577c:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8005780:	2b00      	cmp	r3, #0
 8005782:	d10d      	bne.n	80057a0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Configure the ADC1 interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 8005784:	4b5a      	ldr	r3, [pc, #360]	@ (80058f0 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8005786:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800578a:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 800578e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005792:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005796:	4a56      	ldr	r2, [pc, #344]	@ (80058f0 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8005798:	430b      	orrs	r3, r1
 800579a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800579e:	e003      	b.n	80057a8 <HAL_RCCEx_PeriphCLKConfig+0x4f8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80057a0:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 80057a4:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }

  /*-------------------------- MDF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_MDF1) == RCC_PERIPHCLK_MDF1)
 80057a8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80057ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057b0:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 80057b4:	65bb      	str	r3, [r7, #88]	@ 0x58
 80057b6:	2300      	movs	r3, #0
 80057b8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80057ba:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 80057be:	460b      	mov	r3, r1
 80057c0:	4313      	orrs	r3, r2
 80057c2:	d03f      	beq.n	8005844 <HAL_RCCEx_PeriphCLKConfig+0x594>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MDF1CLKSOURCE(pPeriphClkInit->Mdf1ClockSelection));

    switch (pPeriphClkInit->Mdf1ClockSelection)
 80057c4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80057c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80057cc:	2b04      	cmp	r3, #4
 80057ce:	d81e      	bhi.n	800580e <HAL_RCCEx_PeriphCLKConfig+0x55e>
 80057d0:	a201      	add	r2, pc, #4	@ (adr r2, 80057d8 <HAL_RCCEx_PeriphCLKConfig+0x528>)
 80057d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057d6:	bf00      	nop
 80057d8:	08005817 	.word	0x08005817
 80057dc:	080057ed 	.word	0x080057ed
 80057e0:	080057fb 	.word	0x080057fb
 80057e4:	08005817 	.word	0x08005817
 80057e8:	08005817 	.word	0x08005817
    {
      case RCC_MDF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80057ec:	4b40      	ldr	r3, [pc, #256]	@ (80058f0 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 80057ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80057f0:	4a3f      	ldr	r2, [pc, #252]	@ (80058f0 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 80057f2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80057f6:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 80057f8:	e00e      	b.n	8005818 <HAL_RCCEx_PeriphCLKConfig+0x568>
      case RCC_MDF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80057fa:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80057fe:	332c      	adds	r3, #44	@ 0x2c
 8005800:	4618      	mov	r0, r3
 8005802:	f002 f955 	bl	8007ab0 <RCCEx_PLL3_Config>
 8005806:	4603      	mov	r3, r0
 8005808:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 800580c:	e004      	b.n	8005818 <HAL_RCCEx_PeriphCLKConfig+0x568>
      case RCC_MDF1CLKSOURCE_PIN:
        break;
      case RCC_MDF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 800580e:	2301      	movs	r3, #1
 8005810:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8005814:	e000      	b.n	8005818 <HAL_RCCEx_PeriphCLKConfig+0x568>
        break;
 8005816:	bf00      	nop
    }
    if (ret == HAL_OK)
 8005818:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 800581c:	2b00      	cmp	r3, #0
 800581e:	d10d      	bne.n	800583c <HAL_RCCEx_PeriphCLKConfig+0x58c>
    {
      /* Configure the MDF1 interface clock source */
      __HAL_RCC_MDF1_CONFIG(pPeriphClkInit->Mdf1ClockSelection);
 8005820:	4b33      	ldr	r3, [pc, #204]	@ (80058f0 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8005822:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005826:	f023 0107 	bic.w	r1, r3, #7
 800582a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800582e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005832:	4a2f      	ldr	r2, [pc, #188]	@ (80058f0 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8005834:	430b      	orrs	r3, r1
 8005836:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800583a:	e003      	b.n	8005844 <HAL_RCCEx_PeriphCLKConfig+0x594>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800583c:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8005840:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }

  /*-------------------------- ADF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
 8005844:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005848:	e9d3 2300 	ldrd	r2, r3, [r3]
 800584c:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8005850:	653b      	str	r3, [r7, #80]	@ 0x50
 8005852:	2300      	movs	r3, #0
 8005854:	657b      	str	r3, [r7, #84]	@ 0x54
 8005856:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800585a:	460b      	mov	r3, r1
 800585c:	4313      	orrs	r3, r2
 800585e:	d04d      	beq.n	80058fc <HAL_RCCEx_PeriphCLKConfig+0x64c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADF1CLKSOURCE(pPeriphClkInit->Adf1ClockSelection));
    switch (pPeriphClkInit->Adf1ClockSelection)
 8005860:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005864:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005868:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800586c:	d028      	beq.n	80058c0 <HAL_RCCEx_PeriphCLKConfig+0x610>
 800586e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005872:	d821      	bhi.n	80058b8 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8005874:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005878:	d024      	beq.n	80058c4 <HAL_RCCEx_PeriphCLKConfig+0x614>
 800587a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800587e:	d81b      	bhi.n	80058b8 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8005880:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005884:	d00e      	beq.n	80058a4 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
 8005886:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800588a:	d815      	bhi.n	80058b8 <HAL_RCCEx_PeriphCLKConfig+0x608>
 800588c:	2b00      	cmp	r3, #0
 800588e:	d01b      	beq.n	80058c8 <HAL_RCCEx_PeriphCLKConfig+0x618>
 8005890:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005894:	d110      	bne.n	80058b8 <HAL_RCCEx_PeriphCLKConfig+0x608>
    {
      case RCC_ADF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005896:	4b16      	ldr	r3, [pc, #88]	@ (80058f0 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8005898:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800589a:	4a15      	ldr	r2, [pc, #84]	@ (80058f0 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 800589c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80058a0:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 80058a2:	e012      	b.n	80058ca <HAL_RCCEx_PeriphCLKConfig+0x61a>
      case RCC_ADF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80058a4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80058a8:	332c      	adds	r3, #44	@ 0x2c
 80058aa:	4618      	mov	r0, r3
 80058ac:	f002 f900 	bl	8007ab0 <RCCEx_PLL3_Config>
 80058b0:	4603      	mov	r3, r0
 80058b2:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 80058b6:	e008      	b.n	80058ca <HAL_RCCEx_PeriphCLKConfig+0x61a>
      case RCC_ADF1CLKSOURCE_PIN:
        break;
      case RCC_ADF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 80058b8:	2301      	movs	r3, #1
 80058ba:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 80058be:	e004      	b.n	80058ca <HAL_RCCEx_PeriphCLKConfig+0x61a>
        break;
 80058c0:	bf00      	nop
 80058c2:	e002      	b.n	80058ca <HAL_RCCEx_PeriphCLKConfig+0x61a>
        break;
 80058c4:	bf00      	nop
 80058c6:	e000      	b.n	80058ca <HAL_RCCEx_PeriphCLKConfig+0x61a>
        break;
 80058c8:	bf00      	nop
    }
    if (ret == HAL_OK)
 80058ca:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d110      	bne.n	80058f4 <HAL_RCCEx_PeriphCLKConfig+0x644>
    {
      /* Configure the ADF1 interface clock source */
      __HAL_RCC_ADF1_CONFIG(pPeriphClkInit->Adf1ClockSelection);
 80058d2:	4b07      	ldr	r3, [pc, #28]	@ (80058f0 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 80058d4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80058d8:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 80058dc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80058e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80058e4:	4a02      	ldr	r2, [pc, #8]	@ (80058f0 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 80058e6:	430b      	orrs	r3, r1
 80058e8:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80058ec:	e006      	b.n	80058fc <HAL_RCCEx_PeriphCLKConfig+0x64c>
 80058ee:	bf00      	nop
 80058f0:	46020c00 	.word	0x46020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 80058f4:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 80058f8:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((pPeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80058fc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005900:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005904:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8005908:	64bb      	str	r3, [r7, #72]	@ 0x48
 800590a:	2300      	movs	r3, #0
 800590c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800590e:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8005912:	460b      	mov	r3, r1
 8005914:	4313      	orrs	r3, r2
 8005916:	f000 80b5 	beq.w	8005a84 <HAL_RCCEx_PeriphCLKConfig+0x7d4>
  {
    FlagStatus       pwrclkchanged = RESET;
 800591a:	2300      	movs	r3, #0
 800591c:	f887 30d9 	strb.w	r3, [r7, #217]	@ 0xd9
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));
    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005920:	4b9d      	ldr	r3, [pc, #628]	@ (8005b98 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8005922:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005926:	f003 0304 	and.w	r3, r3, #4
 800592a:	2b00      	cmp	r3, #0
 800592c:	d113      	bne.n	8005956 <HAL_RCCEx_PeriphCLKConfig+0x6a6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800592e:	4b9a      	ldr	r3, [pc, #616]	@ (8005b98 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8005930:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005934:	4a98      	ldr	r2, [pc, #608]	@ (8005b98 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8005936:	f043 0304 	orr.w	r3, r3, #4
 800593a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800593e:	4b96      	ldr	r3, [pc, #600]	@ (8005b98 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8005940:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005944:	f003 0304 	and.w	r3, r3, #4
 8005948:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800594c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
      pwrclkchanged = SET;
 8005950:	2301      	movs	r3, #1
 8005952:	f887 30d9 	strb.w	r3, [r7, #217]	@ 0xd9
    }
    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8005956:	4b91      	ldr	r3, [pc, #580]	@ (8005b9c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005958:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800595a:	4a90      	ldr	r2, [pc, #576]	@ (8005b9c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800595c:	f043 0301 	orr.w	r3, r3, #1
 8005960:	6293      	str	r3, [r2, #40]	@ 0x28

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005962:	f7fc f969 	bl	8001c38 <HAL_GetTick>
 8005966:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4

    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800596a:	e00b      	b.n	8005984 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800596c:	f7fc f964 	bl	8001c38 <HAL_GetTick>
 8005970:	4602      	mov	r2, r0
 8005972:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005976:	1ad3      	subs	r3, r2, r3
 8005978:	2b02      	cmp	r3, #2
 800597a:	d903      	bls.n	8005984 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
      {
        ret = HAL_TIMEOUT;
 800597c:	2303      	movs	r3, #3
 800597e:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8005982:	e005      	b.n	8005990 <HAL_RCCEx_PeriphCLKConfig+0x6e0>
    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8005984:	4b85      	ldr	r3, [pc, #532]	@ (8005b9c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005986:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005988:	f003 0301 	and.w	r3, r3, #1
 800598c:	2b00      	cmp	r3, #0
 800598e:	d0ed      	beq.n	800596c <HAL_RCCEx_PeriphCLKConfig+0x6bc>
      }
    }

    if (ret == HAL_OK)
 8005990:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8005994:	2b00      	cmp	r3, #0
 8005996:	d165      	bne.n	8005a64 <HAL_RCCEx_PeriphCLKConfig+0x7b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005998:	4b7f      	ldr	r3, [pc, #508]	@ (8005b98 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 800599a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800599e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80059a2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 80059a6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d023      	beq.n	80059f6 <HAL_RCCEx_PeriphCLKConfig+0x746>
 80059ae:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80059b2:	f8d3 20bc 	ldr.w	r2, [r3, #188]	@ 0xbc
 80059b6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80059ba:	4293      	cmp	r3, r2
 80059bc:	d01b      	beq.n	80059f6 <HAL_RCCEx_PeriphCLKConfig+0x746>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80059be:	4b76      	ldr	r3, [pc, #472]	@ (8005b98 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80059c0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80059c4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80059c8:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80059cc:	4b72      	ldr	r3, [pc, #456]	@ (8005b98 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80059ce:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80059d2:	4a71      	ldr	r2, [pc, #452]	@ (8005b98 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80059d4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80059d8:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 80059dc:	4b6e      	ldr	r3, [pc, #440]	@ (8005b98 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80059de:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80059e2:	4a6d      	ldr	r2, [pc, #436]	@ (8005b98 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80059e4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80059e8:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80059ec:	4a6a      	ldr	r2, [pc, #424]	@ (8005b98 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80059ee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80059f2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80059f6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80059fa:	f003 0301 	and.w	r3, r3, #1
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d019      	beq.n	8005a36 <HAL_RCCEx_PeriphCLKConfig+0x786>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a02:	f7fc f919 	bl	8001c38 <HAL_GetTick>
 8005a06:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005a0a:	e00d      	b.n	8005a28 <HAL_RCCEx_PeriphCLKConfig+0x778>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005a0c:	f7fc f914 	bl	8001c38 <HAL_GetTick>
 8005a10:	4602      	mov	r2, r0
 8005a12:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005a16:	1ad2      	subs	r2, r2, r3
 8005a18:	f241 3388 	movw	r3, #5000	@ 0x1388
 8005a1c:	429a      	cmp	r2, r3
 8005a1e:	d903      	bls.n	8005a28 <HAL_RCCEx_PeriphCLKConfig+0x778>
          {
            ret = HAL_TIMEOUT;
 8005a20:	2303      	movs	r3, #3
 8005a22:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
            break;
 8005a26:	e006      	b.n	8005a36 <HAL_RCCEx_PeriphCLKConfig+0x786>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005a28:	4b5b      	ldr	r3, [pc, #364]	@ (8005b98 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8005a2a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005a2e:	f003 0302 	and.w	r3, r3, #2
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d0ea      	beq.n	8005a0c <HAL_RCCEx_PeriphCLKConfig+0x75c>
          }
        }
      }

      if (ret == HAL_OK)
 8005a36:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d10d      	bne.n	8005a5a <HAL_RCCEx_PeriphCLKConfig+0x7aa>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 8005a3e:	4b56      	ldr	r3, [pc, #344]	@ (8005b98 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8005a40:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005a44:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005a48:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005a4c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8005a50:	4a51      	ldr	r2, [pc, #324]	@ (8005b98 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8005a52:	430b      	orrs	r3, r1
 8005a54:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8005a58:	e008      	b.n	8005a6c <HAL_RCCEx_PeriphCLKConfig+0x7bc>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005a5a:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8005a5e:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
 8005a62:	e003      	b.n	8005a6c <HAL_RCCEx_PeriphCLKConfig+0x7bc>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a64:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8005a68:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005a6c:	f897 30d9 	ldrb.w	r3, [r7, #217]	@ 0xd9
 8005a70:	2b01      	cmp	r3, #1
 8005a72:	d107      	bne.n	8005a84 <HAL_RCCEx_PeriphCLKConfig+0x7d4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005a74:	4b48      	ldr	r3, [pc, #288]	@ (8005b98 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8005a76:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005a7a:	4a47      	ldr	r2, [pc, #284]	@ (8005b98 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8005a7c:	f023 0304 	bic.w	r3, r3, #4
 8005a80:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }

  /*-------------------------------------- ICLK Configuration -----------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ICLK) == RCC_PERIPHCLK_ICLK)
 8005a84:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005a88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a8c:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8005a90:	643b      	str	r3, [r7, #64]	@ 0x40
 8005a92:	2300      	movs	r3, #0
 8005a94:	647b      	str	r3, [r7, #68]	@ 0x44
 8005a96:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8005a9a:	460b      	mov	r3, r1
 8005a9c:	4313      	orrs	r3, r2
 8005a9e:	d042      	beq.n	8005b26 <HAL_RCCEx_PeriphCLKConfig+0x876>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ICLKCLKSOURCE(pPeriphClkInit->IclkClockSelection));

    switch (pPeriphClkInit->IclkClockSelection)
 8005aa0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005aa4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005aa8:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8005aac:	d022      	beq.n	8005af4 <HAL_RCCEx_PeriphCLKConfig+0x844>
 8005aae:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8005ab2:	d81b      	bhi.n	8005aec <HAL_RCCEx_PeriphCLKConfig+0x83c>
 8005ab4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005ab8:	d011      	beq.n	8005ade <HAL_RCCEx_PeriphCLKConfig+0x82e>
 8005aba:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005abe:	d815      	bhi.n	8005aec <HAL_RCCEx_PeriphCLKConfig+0x83c>
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d019      	beq.n	8005af8 <HAL_RCCEx_PeriphCLKConfig+0x848>
 8005ac4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005ac8:	d110      	bne.n	8005aec <HAL_RCCEx_PeriphCLKConfig+0x83c>
    {
      case RCC_ICLK_CLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P,Q & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005aca:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005ace:	3308      	adds	r3, #8
 8005ad0:	4618      	mov	r0, r3
 8005ad2:	f001 ff55 	bl	8007980 <RCCEx_PLL2_Config>
 8005ad6:	4603      	mov	r3, r0
 8005ad8:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8005adc:	e00d      	b.n	8005afa <HAL_RCCEx_PeriphCLKConfig+0x84a>
      case RCC_ICLK_CLKSOURCE_PLL1:
        /* Enable ICLK Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005ade:	4b2e      	ldr	r3, [pc, #184]	@ (8005b98 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8005ae0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ae2:	4a2d      	ldr	r2, [pc, #180]	@ (8005b98 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8005ae4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005ae8:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 8005aea:	e006      	b.n	8005afa <HAL_RCCEx_PeriphCLKConfig+0x84a>
      case RCC_ICLK_CLKSOURCE_HSI48:
        break;
      case RCC_ICLK_CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8005aec:	2301      	movs	r3, #1
 8005aee:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8005af2:	e002      	b.n	8005afa <HAL_RCCEx_PeriphCLKConfig+0x84a>
        break;
 8005af4:	bf00      	nop
 8005af6:	e000      	b.n	8005afa <HAL_RCCEx_PeriphCLKConfig+0x84a>
        break;
 8005af8:	bf00      	nop
    }
    if (ret == HAL_OK)
 8005afa:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d10d      	bne.n	8005b1e <HAL_RCCEx_PeriphCLKConfig+0x86e>
    {
      /* Configure the CLK48 source */
      __HAL_RCC_CLK48_CONFIG(pPeriphClkInit->IclkClockSelection);
 8005b02:	4b25      	ldr	r3, [pc, #148]	@ (8005b98 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8005b04:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005b08:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8005b0c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005b10:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005b14:	4a20      	ldr	r2, [pc, #128]	@ (8005b98 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8005b16:	430b      	orrs	r3, r1
 8005b18:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8005b1c:	e003      	b.n	8005b26 <HAL_RCCEx_PeriphCLKConfig+0x876>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b1e:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8005b22:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8005b26:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005b2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b2e:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8005b32:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005b34:	2300      	movs	r3, #0
 8005b36:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005b38:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8005b3c:	460b      	mov	r3, r1
 8005b3e:	4313      	orrs	r3, r2
 8005b40:	d032      	beq.n	8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x8f8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 8005b42:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005b46:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005b4a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005b4e:	d00b      	beq.n	8005b68 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 8005b50:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005b54:	d804      	bhi.n	8005b60 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d008      	beq.n	8005b6c <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 8005b5a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005b5e:	d007      	beq.n	8005b70 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      case RCC_RNGCLKSOURCE_HSI48:
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;
      default:
        ret = HAL_ERROR;
 8005b60:	2301      	movs	r3, #1
 8005b62:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8005b66:	e004      	b.n	8005b72 <HAL_RCCEx_PeriphCLKConfig+0x8c2>
        break;
 8005b68:	bf00      	nop
 8005b6a:	e002      	b.n	8005b72 <HAL_RCCEx_PeriphCLKConfig+0x8c2>
        break;
 8005b6c:	bf00      	nop
 8005b6e:	e000      	b.n	8005b72 <HAL_RCCEx_PeriphCLKConfig+0x8c2>
        break;
 8005b70:	bf00      	nop
    }
    if (ret == HAL_OK)
 8005b72:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d112      	bne.n	8005ba0 <HAL_RCCEx_PeriphCLKConfig+0x8f0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 8005b7a:	4b07      	ldr	r3, [pc, #28]	@ (8005b98 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8005b7c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005b80:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005b84:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005b88:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005b8c:	4a02      	ldr	r2, [pc, #8]	@ (8005b98 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8005b8e:	430b      	orrs	r3, r1
 8005b90:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8005b94:	e008      	b.n	8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x8f8>
 8005b96:	bf00      	nop
 8005b98:	46020c00 	.word	0x46020c00
 8005b9c:	46020800 	.word	0x46020800
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ba0:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8005ba4:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    __HAL_RCC_SAES_CONFIG(pPeriphClkInit->SaesClockSelection);
  }
#endif /* SAES */

  /*-------------------------- SDMMC1/2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == (RCC_PERIPHCLK_SDMMC))
 8005ba8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005bac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bb0:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8005bb4:	633b      	str	r3, [r7, #48]	@ 0x30
 8005bb6:	2300      	movs	r3, #0
 8005bb8:	637b      	str	r3, [r7, #52]	@ 0x34
 8005bba:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8005bbe:	460b      	mov	r3, r1
 8005bc0:	4313      	orrs	r3, r2
 8005bc2:	d019      	beq.n	8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x948>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMCCLKSOURCE(pPeriphClkInit->SdmmcClockSelection));

    if (pPeriphClkInit->SdmmcClockSelection == RCC_SDMMCCLKSOURCE_PLL1)
 8005bc4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005bc8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8005bcc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005bd0:	d105      	bne.n	8005bde <HAL_RCCEx_PeriphCLKConfig+0x92e>
    {
      /* Enable PLL1 P CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005bd2:	4b88      	ldr	r3, [pc, #544]	@ (8005df4 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8005bd4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005bd6:	4a87      	ldr	r2, [pc, #540]	@ (8005df4 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8005bd8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005bdc:	6293      	str	r3, [r2, #40]	@ 0x28
    }

    /* Configure the SDMMC1/2 clock source */
    __HAL_RCC_SDMMC_CONFIG(pPeriphClkInit->SdmmcClockSelection);
 8005bde:	4b85      	ldr	r3, [pc, #532]	@ (8005df4 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8005be0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005be4:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8005be8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005bec:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8005bf0:	4a80      	ldr	r2, [pc, #512]	@ (8005df4 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8005bf2:	430b      	orrs	r3, r1
 8005bf4:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 8005bf8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005bfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c00:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8005c04:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005c06:	2300      	movs	r3, #0
 8005c08:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005c0a:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8005c0e:	460b      	mov	r3, r1
 8005c10:	4313      	orrs	r3, r2
 8005c12:	d00c      	beq.n	8005c2e <HAL_RCCEx_PeriphCLKConfig+0x97e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    /* Configure the SPI1 clock source */
    __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 8005c14:	4b77      	ldr	r3, [pc, #476]	@ (8005df4 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8005c16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005c1a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005c1e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005c22:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005c26:	4973      	ldr	r1, [pc, #460]	@ (8005df4 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8005c28:	4313      	orrs	r3, r2
 8005c2a:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 8005c2e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005c32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c36:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8005c3a:	623b      	str	r3, [r7, #32]
 8005c3c:	2300      	movs	r3, #0
 8005c3e:	627b      	str	r3, [r7, #36]	@ 0x24
 8005c40:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8005c44:	460b      	mov	r3, r1
 8005c46:	4313      	orrs	r3, r2
 8005c48:	d00c      	beq.n	8005c64 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    /* Configure the SPI2 clock source */
    __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 8005c4a:	4b6a      	ldr	r3, [pc, #424]	@ (8005df4 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8005c4c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005c50:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005c54:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005c58:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005c5c:	4965      	ldr	r1, [pc, #404]	@ (8005df4 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8005c5e:	4313      	orrs	r3, r2
 8005c60:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 8005c64:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005c68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c6c:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8005c70:	61bb      	str	r3, [r7, #24]
 8005c72:	2300      	movs	r3, #0
 8005c74:	61fb      	str	r3, [r7, #28]
 8005c76:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8005c7a:	460b      	mov	r3, r1
 8005c7c:	4313      	orrs	r3, r2
 8005c7e:	d00c      	beq.n	8005c9a <HAL_RCCEx_PeriphCLKConfig+0x9ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    /* Configure the SPI3 clock source */
    __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 8005c80:	4b5c      	ldr	r3, [pc, #368]	@ (8005df4 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8005c82:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005c86:	f023 0218 	bic.w	r2, r3, #24
 8005c8a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005c8e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8005c92:	4958      	ldr	r1, [pc, #352]	@ (8005df4 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8005c94:	4313      	orrs	r3, r2
 8005c96:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8005c9a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005c9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ca2:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 8005ca6:	613b      	str	r3, [r7, #16]
 8005ca8:	2300      	movs	r3, #0
 8005caa:	617b      	str	r3, [r7, #20]
 8005cac:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8005cb0:	460b      	mov	r3, r1
 8005cb2:	4313      	orrs	r3, r2
 8005cb4:	d032      	beq.n	8005d1c <HAL_RCCEx_PeriphCLKConfig+0xa6c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL1)
 8005cb6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005cba:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8005cbe:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005cc2:	d105      	bne.n	8005cd0 <HAL_RCCEx_PeriphCLKConfig+0xa20>
    {
      /* Enable PLL1 Q CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005cc4:	4b4b      	ldr	r3, [pc, #300]	@ (8005df4 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8005cc6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005cc8:	4a4a      	ldr	r2, [pc, #296]	@ (8005df4 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8005cca:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005cce:	6293      	str	r3, [r2, #40]	@ 0x28
    }
    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL2)
 8005cd0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005cd4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8005cd8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005cdc:	d108      	bne.n	8005cf0 <HAL_RCCEx_PeriphCLKConfig+0xa40>
    {
      /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
      ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005cde:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005ce2:	3308      	adds	r3, #8
 8005ce4:	4618      	mov	r0, r3
 8005ce6:	f001 fe4b 	bl	8007980 <RCCEx_PLL2_Config>
 8005cea:	4603      	mov	r3, r0
 8005cec:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
    }
    if (ret == HAL_OK)
 8005cf0:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d10d      	bne.n	8005d14 <HAL_RCCEx_PeriphCLKConfig+0xa64>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 8005cf8:	4b3e      	ldr	r3, [pc, #248]	@ (8005df4 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8005cfa:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005cfe:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005d02:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005d06:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8005d0a:	493a      	ldr	r1, [pc, #232]	@ (8005df4 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8005d0c:	4313      	orrs	r3, r2
 8005d0e:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 8005d12:	e003      	b.n	8005d1c <HAL_RCCEx_PeriphCLKConfig+0xa6c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d14:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8005d18:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }
#endif /* defined(HSPI1) */

  /*-------------------------- FDCAN1 kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN1) == (RCC_PERIPHCLK_FDCAN1))
 8005d1c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005d20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d24:	f002 6300 	and.w	r3, r2, #134217728	@ 0x8000000
 8005d28:	60bb      	str	r3, [r7, #8]
 8005d2a:	2300      	movs	r3, #0
 8005d2c:	60fb      	str	r3, [r7, #12]
 8005d2e:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8005d32:	460b      	mov	r3, r1
 8005d34:	4313      	orrs	r3, r2
 8005d36:	d03a      	beq.n	8005dae <HAL_RCCEx_PeriphCLKConfig+0xafe>
  {
    assert_param(IS_RCC_FDCAN1CLK(pPeriphClkInit->Fdcan1ClockSelection));

    switch (pPeriphClkInit->Fdcan1ClockSelection)
 8005d38:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005d3c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005d40:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005d44:	d00e      	beq.n	8005d64 <HAL_RCCEx_PeriphCLKConfig+0xab4>
 8005d46:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005d4a:	d815      	bhi.n	8005d78 <HAL_RCCEx_PeriphCLKConfig+0xac8>
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d017      	beq.n	8005d80 <HAL_RCCEx_PeriphCLKConfig+0xad0>
 8005d50:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005d54:	d110      	bne.n	8005d78 <HAL_RCCEx_PeriphCLKConfig+0xac8>
      case RCC_FDCAN1CLKSOURCE_HSE:      /* HSE is used as source of FDCAN1 kernel clock*/
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
      case RCC_FDCAN1CLKSOURCE_PLL1:      /* PLL1 is used as clock source for FDCAN1 kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005d56:	4b27      	ldr	r3, [pc, #156]	@ (8005df4 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8005d58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d5a:	4a26      	ldr	r2, [pc, #152]	@ (8005df4 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8005d5c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005d60:	6293      	str	r3, [r2, #40]	@ 0x28
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 8005d62:	e00e      	b.n	8005d82 <HAL_RCCEx_PeriphCLKConfig+0xad2>
      case RCC_FDCAN1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for FDCAN1 kernel clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005d64:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005d68:	3308      	adds	r3, #8
 8005d6a:	4618      	mov	r0, r3
 8005d6c:	f001 fe08 	bl	8007980 <RCCEx_PLL2_Config>
 8005d70:	4603      	mov	r3, r0
 8005d72:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 8005d76:	e004      	b.n	8005d82 <HAL_RCCEx_PeriphCLKConfig+0xad2>
      default:
        ret = HAL_ERROR;
 8005d78:	2301      	movs	r3, #1
 8005d7a:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8005d7e:	e000      	b.n	8005d82 <HAL_RCCEx_PeriphCLKConfig+0xad2>
        break;
 8005d80:	bf00      	nop
    }
    if (ret == HAL_OK)
 8005d82:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d10d      	bne.n	8005da6 <HAL_RCCEx_PeriphCLKConfig+0xaf6>
    {
      /* Set the source of FDCAN1 kernel clock*/
      __HAL_RCC_FDCAN1_CONFIG(pPeriphClkInit->Fdcan1ClockSelection);
 8005d8a:	4b1a      	ldr	r3, [pc, #104]	@ (8005df4 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8005d8c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005d90:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8005d94:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005d98:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005d9c:	4915      	ldr	r1, [pc, #84]	@ (8005df4 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8005d9e:	4313      	orrs	r3, r2
 8005da0:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 8005da4:	e003      	b.n	8005dae <HAL_RCCEx_PeriphCLKConfig+0xafe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005da6:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8005daa:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }

  /*-------------------------- DAC1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC1) == RCC_PERIPHCLK_DAC1)
 8005dae:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005db2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005db6:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8005dba:	603b      	str	r3, [r7, #0]
 8005dbc:	2300      	movs	r3, #0
 8005dbe:	607b      	str	r3, [r7, #4]
 8005dc0:	e9d7 1200 	ldrd	r1, r2, [r7]
 8005dc4:	460b      	mov	r3, r1
 8005dc6:	4313      	orrs	r3, r2
 8005dc8:	d00c      	beq.n	8005de4 <HAL_RCCEx_PeriphCLKConfig+0xb34>

    /* Check the parameters */
    assert_param(IS_RCC_DAC1CLKSOURCE(pPeriphClkInit->Dac1ClockSelection));

    /* Configure the DAC1 clock source */
    __HAL_RCC_DAC1_CONFIG(pPeriphClkInit->Dac1ClockSelection);
 8005dca:	4b0a      	ldr	r3, [pc, #40]	@ (8005df4 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8005dcc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005dd0:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8005dd4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005dd8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8005ddc:	4905      	ldr	r1, [pc, #20]	@ (8005df4 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8005dde:	4313      	orrs	r3, r2
 8005de0:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
    }
  }

#endif /* defined(USB_OTG_HS) */

  return status;
 8005de4:	f897 30da 	ldrb.w	r3, [r7, #218]	@ 0xda
}
 8005de8:	4618      	mov	r0, r3
 8005dea:	37e0      	adds	r7, #224	@ 0xe0
 8005dec:	46bd      	mov	sp, r7
 8005dee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005df2:	bf00      	nop
 8005df4:	46020c00 	.word	0x46020c00

08005df8 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8005df8:	b480      	push	{r7}
 8005dfa:	b089      	sub	sp, #36	@ 0x24
 8005dfc:	af00      	add	r7, sp, #0
 8005dfe:	6078      	str	r0, [r7, #4]
  uint32_t pll1n;
  uint32_t pll1fracen;
  float_t fracn1;
  float_t pll1vco;

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 8005e00:	4ba6      	ldr	r3, [pc, #664]	@ (800609c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005e02:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005e04:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e08:	61bb      	str	r3, [r7, #24]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8005e0a:	4ba4      	ldr	r3, [pc, #656]	@ (800609c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005e0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e0e:	f003 0303 	and.w	r3, r3, #3
 8005e12:	617b      	str	r3, [r7, #20]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8005e14:	4ba1      	ldr	r3, [pc, #644]	@ (800609c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005e16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e18:	0a1b      	lsrs	r3, r3, #8
 8005e1a:	f003 030f 	and.w	r3, r3, #15
 8005e1e:	3301      	adds	r3, #1
 8005e20:	613b      	str	r3, [r7, #16]
  pll1fracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8005e22:	4b9e      	ldr	r3, [pc, #632]	@ (800609c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005e24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e26:	091b      	lsrs	r3, r3, #4
 8005e28:	f003 0301 	and.w	r3, r3, #1
 8005e2c:	60fb      	str	r3, [r7, #12]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8005e2e:	4b9b      	ldr	r3, [pc, #620]	@ (800609c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005e30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e32:	08db      	lsrs	r3, r3, #3
 8005e34:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005e38:	68fa      	ldr	r2, [r7, #12]
 8005e3a:	fb02 f303 	mul.w	r3, r2, r3
 8005e3e:	ee07 3a90 	vmov	s15, r3
 8005e42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e46:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  switch (pll1source)
 8005e4a:	697b      	ldr	r3, [r7, #20]
 8005e4c:	2b03      	cmp	r3, #3
 8005e4e:	d062      	beq.n	8005f16 <HAL_RCCEx_GetPLL1ClockFreq+0x11e>
 8005e50:	697b      	ldr	r3, [r7, #20]
 8005e52:	2b03      	cmp	r3, #3
 8005e54:	f200 8081 	bhi.w	8005f5a <HAL_RCCEx_GetPLL1ClockFreq+0x162>
 8005e58:	697b      	ldr	r3, [r7, #20]
 8005e5a:	2b01      	cmp	r3, #1
 8005e5c:	d024      	beq.n	8005ea8 <HAL_RCCEx_GetPLL1ClockFreq+0xb0>
 8005e5e:	697b      	ldr	r3, [r7, #20]
 8005e60:	2b02      	cmp	r3, #2
 8005e62:	d17a      	bne.n	8005f5a <HAL_RCCEx_GetPLL1ClockFreq+0x162>
  {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005e64:	693b      	ldr	r3, [r7, #16]
 8005e66:	ee07 3a90 	vmov	s15, r3
 8005e6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e6e:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 80060a0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a8>
 8005e72:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005e76:	4b89      	ldr	r3, [pc, #548]	@ (800609c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005e78:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005e7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e7e:	ee07 3a90 	vmov	s15, r3
 8005e82:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 8005e86:	ed97 6a02 	vldr	s12, [r7, #8]
 8005e8a:	eddf 5a86 	vldr	s11, [pc, #536]	@ 80060a4 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 8005e8e:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005e92:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 8005e96:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005e9a:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005e9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005ea2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005ea6:	e08f      	b.n	8005fc8 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8005ea8:	4b7c      	ldr	r3, [pc, #496]	@ (800609c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005eaa:	689b      	ldr	r3, [r3, #8]
 8005eac:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d005      	beq.n	8005ec0 <HAL_RCCEx_GetPLL1ClockFreq+0xc8>
 8005eb4:	4b79      	ldr	r3, [pc, #484]	@ (800609c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005eb6:	689b      	ldr	r3, [r3, #8]
 8005eb8:	0f1b      	lsrs	r3, r3, #28
 8005eba:	f003 030f 	and.w	r3, r3, #15
 8005ebe:	e006      	b.n	8005ece <HAL_RCCEx_GetPLL1ClockFreq+0xd6>
 8005ec0:	4b76      	ldr	r3, [pc, #472]	@ (800609c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005ec2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005ec6:	041b      	lsls	r3, r3, #16
 8005ec8:	0f1b      	lsrs	r3, r3, #28
 8005eca:	f003 030f 	and.w	r3, r3, #15
 8005ece:	4a76      	ldr	r2, [pc, #472]	@ (80060a8 <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>)
 8005ed0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005ed4:	ee07 3a90 	vmov	s15, r3
 8005ed8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005edc:	693b      	ldr	r3, [r7, #16]
 8005ede:	ee07 3a90 	vmov	s15, r3
 8005ee2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ee6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005eea:	69bb      	ldr	r3, [r7, #24]
 8005eec:	ee07 3a90 	vmov	s15, r3
 8005ef0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005ef4:	ed97 6a02 	vldr	s12, [r7, #8]
 8005ef8:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 80060a4 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 8005efc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005f00:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005f04:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005f08:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8005f0c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f10:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005f14:	e058      	b.n	8005fc8 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005f16:	693b      	ldr	r3, [r7, #16]
 8005f18:	ee07 3a90 	vmov	s15, r3
 8005f1c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f20:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80060a0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a8>
 8005f24:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005f28:	4b5c      	ldr	r3, [pc, #368]	@ (800609c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005f2a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005f2c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f30:	ee07 3a90 	vmov	s15, r3
 8005f34:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 8005f38:	ed97 6a02 	vldr	s12, [r7, #8]
 8005f3c:	eddf 5a59 	vldr	s11, [pc, #356]	@ 80060a4 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 8005f40:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005f44:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 8005f48:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005f4c:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005f50:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f54:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005f58:	e036      	b.n	8005fc8 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    default:
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8005f5a:	4b50      	ldr	r3, [pc, #320]	@ (800609c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005f5c:	689b      	ldr	r3, [r3, #8]
 8005f5e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d005      	beq.n	8005f72 <HAL_RCCEx_GetPLL1ClockFreq+0x17a>
 8005f66:	4b4d      	ldr	r3, [pc, #308]	@ (800609c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005f68:	689b      	ldr	r3, [r3, #8]
 8005f6a:	0f1b      	lsrs	r3, r3, #28
 8005f6c:	f003 030f 	and.w	r3, r3, #15
 8005f70:	e006      	b.n	8005f80 <HAL_RCCEx_GetPLL1ClockFreq+0x188>
 8005f72:	4b4a      	ldr	r3, [pc, #296]	@ (800609c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005f74:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005f78:	041b      	lsls	r3, r3, #16
 8005f7a:	0f1b      	lsrs	r3, r3, #28
 8005f7c:	f003 030f 	and.w	r3, r3, #15
 8005f80:	4a49      	ldr	r2, [pc, #292]	@ (80060a8 <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>)
 8005f82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005f86:	ee07 3a90 	vmov	s15, r3
 8005f8a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f8e:	693b      	ldr	r3, [r7, #16]
 8005f90:	ee07 3a90 	vmov	s15, r3
 8005f94:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f98:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005f9c:	69bb      	ldr	r3, [r7, #24]
 8005f9e:	ee07 3a90 	vmov	s15, r3
 8005fa2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005fa6:	ed97 6a02 	vldr	s12, [r7, #8]
 8005faa:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 80060a4 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 8005fae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005fb2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005fb6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005fba:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8005fbe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005fc2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005fc6:	bf00      	nop
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 8005fc8:	4b34      	ldr	r3, [pc, #208]	@ (800609c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005fca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005fcc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d017      	beq.n	8006004 <HAL_RCCEx_GetPLL1ClockFreq+0x20c>
  {
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8005fd4:	4b31      	ldr	r3, [pc, #196]	@ (800609c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005fd6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005fd8:	0a5b      	lsrs	r3, r3, #9
 8005fda:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005fde:	ee07 3a90 	vmov	s15, r3
 8005fe2:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + \
 8005fe6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005fea:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8005fee:	edd7 6a07 	vldr	s13, [r7, #28]
 8005ff2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005ff6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005ffa:	ee17 2a90 	vmov	r2, s15
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	601a      	str	r2, [r3, #0]
 8006002:	e002      	b.n	800600a <HAL_RCCEx_GetPLL1ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	2200      	movs	r2, #0
 8006008:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 800600a:	4b24      	ldr	r3, [pc, #144]	@ (800609c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800600c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800600e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006012:	2b00      	cmp	r3, #0
 8006014:	d017      	beq.n	8006046 <HAL_RCCEx_GetPLL1ClockFreq+0x24e>
  {
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8006016:	4b21      	ldr	r3, [pc, #132]	@ (800609c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8006018:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800601a:	0c1b      	lsrs	r3, r3, #16
 800601c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006020:	ee07 3a90 	vmov	s15, r3
 8006024:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1Q) >> RCC_PLL1DIVR_PLL1Q_Pos) + \
 8006028:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800602c:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8006030:	edd7 6a07 	vldr	s13, [r7, #28]
 8006034:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006038:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800603c:	ee17 2a90 	vmov	r2, s15
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	605a      	str	r2, [r3, #4]
 8006044:	e002      	b.n	800604c <HAL_RCCEx_GetPLL1ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	2200      	movs	r2, #0
 800604a:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 800604c:	4b13      	ldr	r3, [pc, #76]	@ (800609c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800604e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006050:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006054:	2b00      	cmp	r3, #0
 8006056:	d017      	beq.n	8006088 <HAL_RCCEx_GetPLL1ClockFreq+0x290>
  {
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8006058:	4b10      	ldr	r3, [pc, #64]	@ (800609c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800605a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800605c:	0e1b      	lsrs	r3, r3, #24
 800605e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006062:	ee07 3a90 	vmov	s15, r3
 8006066:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + \
 800606a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800606e:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8006072:	edd7 6a07 	vldr	s13, [r7, #28]
 8006076:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800607a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800607e:	ee17 2a90 	vmov	r2, s15
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	609a      	str	r2, [r3, #8]
  else
  {
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8006086:	e002      	b.n	800608e <HAL_RCCEx_GetPLL1ClockFreq+0x296>
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	2200      	movs	r2, #0
 800608c:	609a      	str	r2, [r3, #8]
}
 800608e:	bf00      	nop
 8006090:	3724      	adds	r7, #36	@ 0x24
 8006092:	46bd      	mov	sp, r7
 8006094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006098:	4770      	bx	lr
 800609a:	bf00      	nop
 800609c:	46020c00 	.word	0x46020c00
 80060a0:	4b742400 	.word	0x4b742400
 80060a4:	46000000 	.word	0x46000000
 80060a8:	0800a77c 	.word	0x0800a77c

080060ac <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 80060ac:	b480      	push	{r7}
 80060ae:	b089      	sub	sp, #36	@ 0x24
 80060b0:	af00      	add	r7, sp, #0
 80060b2:	6078      	str	r0, [r7, #4]
  float_t fracn2;
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 80060b4:	4ba6      	ldr	r3, [pc, #664]	@ (8006350 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80060b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80060b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80060bc:	61bb      	str	r3, [r7, #24]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 80060be:	4ba4      	ldr	r3, [pc, #656]	@ (8006350 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80060c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80060c2:	f003 0303 	and.w	r3, r3, #3
 80060c6:	617b      	str	r3, [r7, #20]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos) + 1U;
 80060c8:	4ba1      	ldr	r3, [pc, #644]	@ (8006350 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80060ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80060cc:	0a1b      	lsrs	r3, r3, #8
 80060ce:	f003 030f 	and.w	r3, r3, #15
 80060d2:	3301      	adds	r3, #1
 80060d4:	613b      	str	r3, [r7, #16]
  pll2fracen = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN) >> RCC_PLL2CFGR_PLL2FRACEN_Pos);
 80060d6:	4b9e      	ldr	r3, [pc, #632]	@ (8006350 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80060d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80060da:	091b      	lsrs	r3, r3, #4
 80060dc:	f003 0301 	and.w	r3, r3, #1
 80060e0:	60fb      	str	r3, [r7, #12]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 80060e2:	4b9b      	ldr	r3, [pc, #620]	@ (8006350 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80060e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80060e6:	08db      	lsrs	r3, r3, #3
 80060e8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80060ec:	68fa      	ldr	r2, [r7, #12]
 80060ee:	fb02 f303 	mul.w	r3, r2, r3
 80060f2:	ee07 3a90 	vmov	s15, r3
 80060f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80060fa:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  switch (pll2source)
 80060fe:	697b      	ldr	r3, [r7, #20]
 8006100:	2b03      	cmp	r3, #3
 8006102:	d062      	beq.n	80061ca <HAL_RCCEx_GetPLL2ClockFreq+0x11e>
 8006104:	697b      	ldr	r3, [r7, #20]
 8006106:	2b03      	cmp	r3, #3
 8006108:	f200 8081 	bhi.w	800620e <HAL_RCCEx_GetPLL2ClockFreq+0x162>
 800610c:	697b      	ldr	r3, [r7, #20]
 800610e:	2b01      	cmp	r3, #1
 8006110:	d024      	beq.n	800615c <HAL_RCCEx_GetPLL2ClockFreq+0xb0>
 8006112:	697b      	ldr	r3, [r7, #20]
 8006114:	2b02      	cmp	r3, #2
 8006116:	d17a      	bne.n	800620e <HAL_RCCEx_GetPLL2ClockFreq+0x162>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8006118:	693b      	ldr	r3, [r7, #16]
 800611a:	ee07 3a90 	vmov	s15, r3
 800611e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006122:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 8006354 <HAL_RCCEx_GetPLL2ClockFreq+0x2a8>
 8006126:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800612a:	4b89      	ldr	r3, [pc, #548]	@ (8006350 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800612c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800612e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006132:	ee07 3a90 	vmov	s15, r3
 8006136:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 800613a:	ed97 6a02 	vldr	s12, [r7, #8]
 800613e:	eddf 5a86 	vldr	s11, [pc, #536]	@ 8006358 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 8006142:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8006146:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 800614a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800614e:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8006152:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006156:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800615a:	e08f      	b.n	800627c <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 800615c:	4b7c      	ldr	r3, [pc, #496]	@ (8006350 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800615e:	689b      	ldr	r3, [r3, #8]
 8006160:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006164:	2b00      	cmp	r3, #0
 8006166:	d005      	beq.n	8006174 <HAL_RCCEx_GetPLL2ClockFreq+0xc8>
 8006168:	4b79      	ldr	r3, [pc, #484]	@ (8006350 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800616a:	689b      	ldr	r3, [r3, #8]
 800616c:	0f1b      	lsrs	r3, r3, #28
 800616e:	f003 030f 	and.w	r3, r3, #15
 8006172:	e006      	b.n	8006182 <HAL_RCCEx_GetPLL2ClockFreq+0xd6>
 8006174:	4b76      	ldr	r3, [pc, #472]	@ (8006350 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8006176:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800617a:	041b      	lsls	r3, r3, #16
 800617c:	0f1b      	lsrs	r3, r3, #28
 800617e:	f003 030f 	and.w	r3, r3, #15
 8006182:	4a76      	ldr	r2, [pc, #472]	@ (800635c <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>)
 8006184:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006188:	ee07 3a90 	vmov	s15, r3
 800618c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006190:	693b      	ldr	r3, [r7, #16]
 8006192:	ee07 3a90 	vmov	s15, r3
 8006196:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800619a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 800619e:	69bb      	ldr	r3, [r7, #24]
 80061a0:	ee07 3a90 	vmov	s15, r3
 80061a4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80061a8:	ed97 6a02 	vldr	s12, [r7, #8]
 80061ac:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 8006358 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 80061b0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80061b4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80061b8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80061bc:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 80061c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80061c4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80061c8:	e058      	b.n	800627c <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 80061ca:	693b      	ldr	r3, [r7, #16]
 80061cc:	ee07 3a90 	vmov	s15, r3
 80061d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80061d4:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8006354 <HAL_RCCEx_GetPLL2ClockFreq+0x2a8>
 80061d8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80061dc:	4b5c      	ldr	r3, [pc, #368]	@ (8006350 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80061de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80061e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80061e4:	ee07 3a90 	vmov	s15, r3
 80061e8:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 80061ec:	ed97 6a02 	vldr	s12, [r7, #8]
 80061f0:	eddf 5a59 	vldr	s11, [pc, #356]	@ 8006358 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 80061f4:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 80061f8:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 80061fc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006200:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8006204:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006208:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800620c:	e036      	b.n	800627c <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    default:
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 800620e:	4b50      	ldr	r3, [pc, #320]	@ (8006350 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8006210:	689b      	ldr	r3, [r3, #8]
 8006212:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006216:	2b00      	cmp	r3, #0
 8006218:	d005      	beq.n	8006226 <HAL_RCCEx_GetPLL2ClockFreq+0x17a>
 800621a:	4b4d      	ldr	r3, [pc, #308]	@ (8006350 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800621c:	689b      	ldr	r3, [r3, #8]
 800621e:	0f1b      	lsrs	r3, r3, #28
 8006220:	f003 030f 	and.w	r3, r3, #15
 8006224:	e006      	b.n	8006234 <HAL_RCCEx_GetPLL2ClockFreq+0x188>
 8006226:	4b4a      	ldr	r3, [pc, #296]	@ (8006350 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8006228:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800622c:	041b      	lsls	r3, r3, #16
 800622e:	0f1b      	lsrs	r3, r3, #28
 8006230:	f003 030f 	and.w	r3, r3, #15
 8006234:	4a49      	ldr	r2, [pc, #292]	@ (800635c <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>)
 8006236:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800623a:	ee07 3a90 	vmov	s15, r3
 800623e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006242:	693b      	ldr	r3, [r7, #16]
 8006244:	ee07 3a90 	vmov	s15, r3
 8006248:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800624c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                * ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006250:	69bb      	ldr	r3, [r7, #24]
 8006252:	ee07 3a90 	vmov	s15, r3
 8006256:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800625a:	ed97 6a02 	vldr	s12, [r7, #8]
 800625e:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 8006358 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 8006262:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006266:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800626a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800626e:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 8006272:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006276:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800627a:	bf00      	nop
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 800627c:	4b34      	ldr	r3, [pc, #208]	@ (8006350 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800627e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006280:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006284:	2b00      	cmp	r3, #0
 8006286:	d017      	beq.n	80062b8 <HAL_RCCEx_GetPLL2ClockFreq+0x20c>
  {
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8006288:	4b31      	ldr	r3, [pc, #196]	@ (8006350 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800628a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800628c:	0a5b      	lsrs	r3, r3, #9
 800628e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006292:	ee07 3a90 	vmov	s15, r3
 8006296:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2P) >> RCC_PLL2DIVR_PLL2P_Pos) + \
 800629a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800629e:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80062a2:	edd7 6a07 	vldr	s13, [r7, #28]
 80062a6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80062aa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80062ae:	ee17 2a90 	vmov	r2, s15
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	601a      	str	r2, [r3, #0]
 80062b6:	e002      	b.n	80062be <HAL_RCCEx_GetPLL2ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	2200      	movs	r2, #0
 80062bc:	601a      	str	r2, [r3, #0]
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 80062be:	4b24      	ldr	r3, [pc, #144]	@ (8006350 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80062c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d017      	beq.n	80062fa <HAL_RCCEx_GetPLL2ClockFreq+0x24e>
  {
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80062ca:	4b21      	ldr	r3, [pc, #132]	@ (8006350 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80062cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80062ce:	0c1b      	lsrs	r3, r3, #16
 80062d0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80062d4:	ee07 3a90 	vmov	s15, r3
 80062d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2Q) >> RCC_PLL2DIVR_PLL2Q_Pos) + \
 80062dc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80062e0:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80062e4:	edd7 6a07 	vldr	s13, [r7, #28]
 80062e8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80062ec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80062f0:	ee17 2a90 	vmov	r2, s15
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	605a      	str	r2, [r3, #4]
 80062f8:	e002      	b.n	8006300 <HAL_RCCEx_GetPLL2ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	2200      	movs	r2, #0
 80062fe:	605a      	str	r2, [r3, #4]
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 8006300:	4b13      	ldr	r3, [pc, #76]	@ (8006350 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8006302:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006304:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006308:	2b00      	cmp	r3, #0
 800630a:	d017      	beq.n	800633c <HAL_RCCEx_GetPLL2ClockFreq+0x290>
  {
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800630c:	4b10      	ldr	r3, [pc, #64]	@ (8006350 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800630e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006310:	0e1b      	lsrs	r3, r3, #24
 8006312:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006316:	ee07 3a90 	vmov	s15, r3
 800631a:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2R) >> RCC_PLL2DIVR_PLL2R_Pos) + \
 800631e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006322:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8006326:	edd7 6a07 	vldr	s13, [r7, #28]
 800632a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800632e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006332:	ee17 2a90 	vmov	r2, s15
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	609a      	str	r2, [r3, #8]
  }
  else
  {
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800633a:	e002      	b.n	8006342 <HAL_RCCEx_GetPLL2ClockFreq+0x296>
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	2200      	movs	r2, #0
 8006340:	609a      	str	r2, [r3, #8]
}
 8006342:	bf00      	nop
 8006344:	3724      	adds	r7, #36	@ 0x24
 8006346:	46bd      	mov	sp, r7
 8006348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800634c:	4770      	bx	lr
 800634e:	bf00      	nop
 8006350:	46020c00 	.word	0x46020c00
 8006354:	4b742400 	.word	0x4b742400
 8006358:	46000000 	.word	0x46000000
 800635c:	0800a77c 	.word	0x0800a77c

08006360 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8006360:	b480      	push	{r7}
 8006362:	b089      	sub	sp, #36	@ 0x24
 8006364:	af00      	add	r7, sp, #0
 8006366:	6078      	str	r0, [r7, #4]

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLLxR
  */

  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 8006368:	4ba6      	ldr	r3, [pc, #664]	@ (8006604 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800636a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800636c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006370:	61bb      	str	r3, [r7, #24]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 8006372:	4ba4      	ldr	r3, [pc, #656]	@ (8006604 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8006374:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006376:	f003 0303 	and.w	r3, r3, #3
 800637a:	617b      	str	r3, [r7, #20]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos) + 1U;
 800637c:	4ba1      	ldr	r3, [pc, #644]	@ (8006604 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800637e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006380:	0a1b      	lsrs	r3, r3, #8
 8006382:	f003 030f 	and.w	r3, r3, #15
 8006386:	3301      	adds	r3, #1
 8006388:	613b      	str	r3, [r7, #16]
  pll3fracen = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN) >> RCC_PLL3CFGR_PLL3FRACEN_Pos);
 800638a:	4b9e      	ldr	r3, [pc, #632]	@ (8006604 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800638c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800638e:	091b      	lsrs	r3, r3, #4
 8006390:	f003 0301 	and.w	r3, r3, #1
 8006394:	60fb      	str	r3, [r7, #12]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 8006396:	4b9b      	ldr	r3, [pc, #620]	@ (8006604 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8006398:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800639a:	08db      	lsrs	r3, r3, #3
 800639c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80063a0:	68fa      	ldr	r2, [r7, #12]
 80063a2:	fb02 f303 	mul.w	r3, r2, r3
 80063a6:	ee07 3a90 	vmov	s15, r3
 80063aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80063ae:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  switch (pll3source)
 80063b2:	697b      	ldr	r3, [r7, #20]
 80063b4:	2b03      	cmp	r3, #3
 80063b6:	d062      	beq.n	800647e <HAL_RCCEx_GetPLL3ClockFreq+0x11e>
 80063b8:	697b      	ldr	r3, [r7, #20]
 80063ba:	2b03      	cmp	r3, #3
 80063bc:	f200 8081 	bhi.w	80064c2 <HAL_RCCEx_GetPLL3ClockFreq+0x162>
 80063c0:	697b      	ldr	r3, [r7, #20]
 80063c2:	2b01      	cmp	r3, #1
 80063c4:	d024      	beq.n	8006410 <HAL_RCCEx_GetPLL3ClockFreq+0xb0>
 80063c6:	697b      	ldr	r3, [r7, #20]
 80063c8:	2b02      	cmp	r3, #2
 80063ca:	d17a      	bne.n	80064c2 <HAL_RCCEx_GetPLL3ClockFreq+0x162>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 80063cc:	693b      	ldr	r3, [r7, #16]
 80063ce:	ee07 3a90 	vmov	s15, r3
 80063d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80063d6:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 8006608 <HAL_RCCEx_GetPLL3ClockFreq+0x2a8>
 80063da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80063de:	4b89      	ldr	r3, [pc, #548]	@ (8006604 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80063e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80063e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80063e6:	ee07 3a90 	vmov	s15, r3
 80063ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 80063ee:	ed97 6a02 	vldr	s12, [r7, #8]
 80063f2:	eddf 5a86 	vldr	s11, [pc, #536]	@ 800660c <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 80063f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 80063fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 80063fe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006402:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8006406:	ee67 7a27 	vmul.f32	s15, s14, s15
 800640a:	edc7 7a07 	vstr	s15, [r7, #28]

      break;
 800640e:	e08f      	b.n	8006530 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8006410:	4b7c      	ldr	r3, [pc, #496]	@ (8006604 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8006412:	689b      	ldr	r3, [r3, #8]
 8006414:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006418:	2b00      	cmp	r3, #0
 800641a:	d005      	beq.n	8006428 <HAL_RCCEx_GetPLL3ClockFreq+0xc8>
 800641c:	4b79      	ldr	r3, [pc, #484]	@ (8006604 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800641e:	689b      	ldr	r3, [r3, #8]
 8006420:	0f1b      	lsrs	r3, r3, #28
 8006422:	f003 030f 	and.w	r3, r3, #15
 8006426:	e006      	b.n	8006436 <HAL_RCCEx_GetPLL3ClockFreq+0xd6>
 8006428:	4b76      	ldr	r3, [pc, #472]	@ (8006604 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800642a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800642e:	041b      	lsls	r3, r3, #16
 8006430:	0f1b      	lsrs	r3, r3, #28
 8006432:	f003 030f 	and.w	r3, r3, #15
 8006436:	4a76      	ldr	r2, [pc, #472]	@ (8006610 <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>)
 8006438:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800643c:	ee07 3a90 	vmov	s15, r3
 8006440:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006444:	693b      	ldr	r3, [r7, #16]
 8006446:	ee07 3a90 	vmov	s15, r3
 800644a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800644e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006452:	69bb      	ldr	r3, [r7, #24]
 8006454:	ee07 3a90 	vmov	s15, r3
 8006458:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800645c:	ed97 6a02 	vldr	s12, [r7, #8]
 8006460:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 800660c <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 8006464:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006468:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800646c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006470:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8006474:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006478:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800647c:	e058      	b.n	8006530 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800647e:	693b      	ldr	r3, [r7, #16]
 8006480:	ee07 3a90 	vmov	s15, r3
 8006484:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006488:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8006608 <HAL_RCCEx_GetPLL3ClockFreq+0x2a8>
 800648c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006490:	4b5c      	ldr	r3, [pc, #368]	@ (8006604 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8006492:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006494:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006498:	ee07 3a90 	vmov	s15, r3
 800649c:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 80064a0:	ed97 6a02 	vldr	s12, [r7, #8]
 80064a4:	eddf 5a59 	vldr	s11, [pc, #356]	@ 800660c <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 80064a8:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 80064ac:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 80064b0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80064b4:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 80064b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80064bc:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80064c0:	e036      	b.n	8006530 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>

    default:
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 80064c2:	4b50      	ldr	r3, [pc, #320]	@ (8006604 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80064c4:	689b      	ldr	r3, [r3, #8]
 80064c6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d005      	beq.n	80064da <HAL_RCCEx_GetPLL3ClockFreq+0x17a>
 80064ce:	4b4d      	ldr	r3, [pc, #308]	@ (8006604 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80064d0:	689b      	ldr	r3, [r3, #8]
 80064d2:	0f1b      	lsrs	r3, r3, #28
 80064d4:	f003 030f 	and.w	r3, r3, #15
 80064d8:	e006      	b.n	80064e8 <HAL_RCCEx_GetPLL3ClockFreq+0x188>
 80064da:	4b4a      	ldr	r3, [pc, #296]	@ (8006604 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80064dc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80064e0:	041b      	lsls	r3, r3, #16
 80064e2:	0f1b      	lsrs	r3, r3, #28
 80064e4:	f003 030f 	and.w	r3, r3, #15
 80064e8:	4a49      	ldr	r2, [pc, #292]	@ (8006610 <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>)
 80064ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80064ee:	ee07 3a90 	vmov	s15, r3
 80064f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80064f6:	693b      	ldr	r3, [r7, #16]
 80064f8:	ee07 3a90 	vmov	s15, r3
 80064fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006500:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006504:	69bb      	ldr	r3, [r7, #24]
 8006506:	ee07 3a90 	vmov	s15, r3
 800650a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800650e:	ed97 6a02 	vldr	s12, [r7, #8]
 8006512:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 800660c <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 8006516:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800651a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800651e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006522:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8006526:	ee67 7a27 	vmul.f32	s15, s14, s15
 800652a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800652e:	bf00      	nop
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 8006530:	4b34      	ldr	r3, [pc, #208]	@ (8006604 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8006532:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006534:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006538:	2b00      	cmp	r3, #0
 800653a:	d017      	beq.n	800656c <HAL_RCCEx_GetPLL3ClockFreq+0x20c>
  {
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800653c:	4b31      	ldr	r3, [pc, #196]	@ (8006604 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800653e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006540:	0a5b      	lsrs	r3, r3, #9
 8006542:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006546:	ee07 3a90 	vmov	s15, r3
 800654a:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3P) >> RCC_PLL3DIVR_PLL3P_Pos) + \
 800654e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006552:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8006556:	edd7 6a07 	vldr	s13, [r7, #28]
 800655a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800655e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006562:	ee17 2a90 	vmov	r2, s15
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	601a      	str	r2, [r3, #0]
 800656a:	e002      	b.n	8006572 <HAL_RCCEx_GetPLL3ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	2200      	movs	r2, #0
 8006570:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 8006572:	4b24      	ldr	r3, [pc, #144]	@ (8006604 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8006574:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006576:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800657a:	2b00      	cmp	r3, #0
 800657c:	d017      	beq.n	80065ae <HAL_RCCEx_GetPLL3ClockFreq+0x24e>
  {
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800657e:	4b21      	ldr	r3, [pc, #132]	@ (8006604 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8006580:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006582:	0c1b      	lsrs	r3, r3, #16
 8006584:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006588:	ee07 3a90 	vmov	s15, r3
 800658c:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3Q) >> RCC_PLL3DIVR_PLL3Q_Pos) + \
 8006590:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006594:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8006598:	edd7 6a07 	vldr	s13, [r7, #28]
 800659c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80065a0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80065a4:	ee17 2a90 	vmov	r2, s15
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	605a      	str	r2, [r3, #4]
 80065ac:	e002      	b.n	80065b4 <HAL_RCCEx_GetPLL3ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	2200      	movs	r2, #0
 80065b2:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 80065b4:	4b13      	ldr	r3, [pc, #76]	@ (8006604 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80065b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80065b8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d017      	beq.n	80065f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
  {
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80065c0:	4b10      	ldr	r3, [pc, #64]	@ (8006604 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80065c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80065c4:	0e1b      	lsrs	r3, r3, #24
 80065c6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80065ca:	ee07 3a90 	vmov	s15, r3
 80065ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3R) >> RCC_PLL3DIVR_PLL3R_Pos) + \
 80065d2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80065d6:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80065da:	edd7 6a07 	vldr	s13, [r7, #28]
 80065de:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80065e2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80065e6:	ee17 2a90 	vmov	r2, s15
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	609a      	str	r2, [r3, #8]
  else
  {
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80065ee:	e002      	b.n	80065f6 <HAL_RCCEx_GetPLL3ClockFreq+0x296>
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	2200      	movs	r2, #0
 80065f4:	609a      	str	r2, [r3, #8]
}
 80065f6:	bf00      	nop
 80065f8:	3724      	adds	r7, #36	@ 0x24
 80065fa:	46bd      	mov	sp, r7
 80065fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006600:	4770      	bx	lr
 8006602:	bf00      	nop
 8006604:	46020c00 	.word	0x46020c00
 8006608:	4b742400 	.word	0x4b742400
 800660c:	46000000 	.word	0x46000000
 8006610:	0800a77c 	.word	0x0800a77c

08006614 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in Hz
  *
  *        (*) value not defined in all devices.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8006614:	b580      	push	{r7, lr}
 8006616:	b08e      	sub	sp, #56	@ 0x38
 8006618:	af00      	add	r7, sp, #0
 800661a:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 800661e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006622:	f5a2 2180 	sub.w	r1, r2, #262144	@ 0x40000
 8006626:	430b      	orrs	r3, r1
 8006628:	d145      	bne.n	80066b6 <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 800662a:	4baa      	ldr	r3, [pc, #680]	@ (80068d4 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 800662c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006630:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006634:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 8006636:	4ba7      	ldr	r3, [pc, #668]	@ (80068d4 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8006638:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800663c:	f003 0302 	and.w	r3, r3, #2
 8006640:	2b02      	cmp	r3, #2
 8006642:	d108      	bne.n	8006656 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 8006644:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006646:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800664a:	d104      	bne.n	8006656 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 800664c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006650:	637b      	str	r3, [r7, #52]	@ 0x34
 8006652:	f001 b987 	b.w	8007964 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 8006656:	4b9f      	ldr	r3, [pc, #636]	@ (80068d4 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8006658:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800665c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006660:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006664:	d114      	bne.n	8006690 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
 8006666:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006668:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800666c:	d110      	bne.n	8006690 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800666e:	4b99      	ldr	r3, [pc, #612]	@ (80068d4 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8006670:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006674:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006678:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800667c:	d103      	bne.n	8006686 <HAL_RCCEx_GetPeriphCLKFreq+0x72>
      {
        frequency = LSI_VALUE / 128U;
 800667e:	23fa      	movs	r3, #250	@ 0xfa
 8006680:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006682:	f001 b96f 	b.w	8007964 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = LSI_VALUE;
 8006686:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800668a:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800668c:	f001 b96a 	b.w	8007964 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    /* Check if HSE is ready  and if RTC clock selection is HSI_DIV32*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIV32))
 8006690:	4b90      	ldr	r3, [pc, #576]	@ (80068d4 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006698:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800669c:	d107      	bne.n	80066ae <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
 800669e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066a0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80066a4:	d103      	bne.n	80066ae <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
    {
      frequency = HSE_VALUE / 32U;
 80066a6:	4b8c      	ldr	r3, [pc, #560]	@ (80068d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 80066a8:	637b      	str	r3, [r7, #52]	@ 0x34
 80066aa:	f001 b95b 	b.w	8007964 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 80066ae:	2300      	movs	r3, #0
 80066b0:	637b      	str	r3, [r7, #52]	@ 0x34
 80066b2:	f001 b957 	b.w	8007964 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80066b6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80066ba:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 80066be:	430b      	orrs	r3, r1
 80066c0:	d151      	bne.n	8006766 <HAL_RCCEx_GetPeriphCLKFreq+0x152>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 80066c2:	4b84      	ldr	r3, [pc, #528]	@ (80068d4 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 80066c4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80066c8:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 80066cc:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 80066ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066d0:	2b80      	cmp	r3, #128	@ 0x80
 80066d2:	d035      	beq.n	8006740 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
 80066d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066d6:	2b80      	cmp	r3, #128	@ 0x80
 80066d8:	d841      	bhi.n	800675e <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 80066da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066dc:	2b60      	cmp	r3, #96	@ 0x60
 80066de:	d02a      	beq.n	8006736 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
 80066e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066e2:	2b60      	cmp	r3, #96	@ 0x60
 80066e4:	d83b      	bhi.n	800675e <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 80066e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066e8:	2b40      	cmp	r3, #64	@ 0x40
 80066ea:	d009      	beq.n	8006700 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 80066ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066ee:	2b40      	cmp	r3, #64	@ 0x40
 80066f0:	d835      	bhi.n	800675e <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 80066f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d00c      	beq.n	8006712 <HAL_RCCEx_GetPeriphCLKFreq+0xfe>
 80066f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066fa:	2b20      	cmp	r3, #32
 80066fc:	d012      	beq.n	8006724 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 80066fe:	e02e      	b.n	800675e <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
    {
      case RCC_SAI1CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006700:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006704:	4618      	mov	r0, r3
 8006706:	f7ff fb77 	bl	8005df8 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800670a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800670c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800670e:	f001 b929 	b.w	8007964 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006712:	f107 0318 	add.w	r3, r7, #24
 8006716:	4618      	mov	r0, r3
 8006718:	f7ff fcc8 	bl	80060ac <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 800671c:	69bb      	ldr	r3, [r7, #24]
 800671e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006720:	f001 b920 	b.w	8007964 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI1CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006724:	f107 030c 	add.w	r3, r7, #12
 8006728:	4618      	mov	r0, r3
 800672a:	f7ff fe19 	bl	8006360 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006732:	f001 b917 	b.w	8007964 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8006736:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 800673a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800673c:	f001 b912 	b.w	8007964 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI1CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006740:	4b64      	ldr	r3, [pc, #400]	@ (80068d4 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006748:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800674c:	d103      	bne.n	8006756 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        {
          frequency = HSI_VALUE;
 800674e:	4b63      	ldr	r3, [pc, #396]	@ (80068dc <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 8006750:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006752:	f001 b907 	b.w	8007964 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8006756:	2300      	movs	r3, #0
 8006758:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800675a:	f001 b903 	b.w	8007964 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default :
      {
        frequency = 0U;
 800675e:	2300      	movs	r3, #0
 8006760:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006762:	f001 b8ff 	b.w	8007964 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
  }
#if defined(SAI2)
  else if (PeriphClk == RCC_PERIPHCLK_SAI2)
 8006766:	e9d7 2300 	ldrd	r2, r3, [r7]
 800676a:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 800676e:	430b      	orrs	r3, r1
 8006770:	d158      	bne.n	8006824 <HAL_RCCEx_GetPeriphCLKFreq+0x210>
  {
    srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 8006772:	4b58      	ldr	r3, [pc, #352]	@ (80068d4 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8006774:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006778:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800677c:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800677e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006780:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006784:	d03b      	beq.n	80067fe <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 8006786:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006788:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800678c:	d846      	bhi.n	800681c <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 800678e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006790:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006794:	d02e      	beq.n	80067f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
 8006796:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006798:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800679c:	d83e      	bhi.n	800681c <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 800679e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067a0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80067a4:	d00b      	beq.n	80067be <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
 80067a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067a8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80067ac:	d836      	bhi.n	800681c <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 80067ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d00d      	beq.n	80067d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 80067b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067b6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80067ba:	d012      	beq.n	80067e2 <HAL_RCCEx_GetPeriphCLKFreq+0x1ce>
 80067bc:	e02e      	b.n	800681c <HAL_RCCEx_GetPeriphCLKFreq+0x208>
    {
      case RCC_SAI2CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80067be:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80067c2:	4618      	mov	r0, r3
 80067c4:	f7ff fb18 	bl	8005df8 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 80067c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067ca:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80067cc:	f001 b8ca 	b.w	8007964 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80067d0:	f107 0318 	add.w	r3, r7, #24
 80067d4:	4618      	mov	r0, r3
 80067d6:	f7ff fc69 	bl	80060ac <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 80067da:	69bb      	ldr	r3, [r7, #24]
 80067dc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80067de:	f001 b8c1 	b.w	8007964 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI2CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80067e2:	f107 030c 	add.w	r3, r7, #12
 80067e6:	4618      	mov	r0, r3
 80067e8:	f7ff fdba 	bl	8006360 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80067f0:	f001 b8b8 	b.w	8007964 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI2CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 80067f4:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 80067f8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80067fa:	f001 b8b3 	b.w	8007964 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI2CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80067fe:	4b35      	ldr	r3, [pc, #212]	@ (80068d4 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006806:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800680a:	d103      	bne.n	8006814 <HAL_RCCEx_GetPeriphCLKFreq+0x200>
        {
          frequency = HSI_VALUE;
 800680c:	4b33      	ldr	r3, [pc, #204]	@ (80068dc <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 800680e:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006810:	f001 b8a8 	b.w	8007964 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8006814:	2300      	movs	r3, #0
 8006816:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006818:	f001 b8a4 	b.w	8007964 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default :

        frequency = 0U;
 800681c:	2300      	movs	r3, #0
 800681e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006820:	f001 b8a0 	b.w	8007964 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    {
      frequency = 0U;
    }
  }
#endif /* SAES */
  else if (PeriphClk == RCC_PERIPHCLK_ICLK)
 8006824:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006828:	f5a2 1180 	sub.w	r1, r2, #1048576	@ 0x100000
 800682c:	430b      	orrs	r3, r1
 800682e:	d16e      	bne.n	800690e <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
  {
    srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 8006830:	4b28      	ldr	r3, [pc, #160]	@ (80068d4 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8006832:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006836:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 800683a:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800683c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800683e:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8006842:	d034      	beq.n	80068ae <HAL_RCCEx_GetPeriphCLKFreq+0x29a>
 8006844:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006846:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800684a:	d85c      	bhi.n	8006906 <HAL_RCCEx_GetPeriphCLKFreq+0x2f2>
 800684c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800684e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006852:	d00b      	beq.n	800686c <HAL_RCCEx_GetPeriphCLKFreq+0x258>
 8006854:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006856:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800685a:	d854      	bhi.n	8006906 <HAL_RCCEx_GetPeriphCLKFreq+0x2f2>
 800685c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800685e:	2b00      	cmp	r3, #0
 8006860:	d016      	beq.n	8006890 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>
 8006862:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006864:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006868:	d009      	beq.n	800687e <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 800686a:	e04c      	b.n	8006906 <HAL_RCCEx_GetPeriphCLKFreq+0x2f2>
    {
      case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800686c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006870:	4618      	mov	r0, r3
 8006872:	f7ff fac1 	bl	8005df8 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 8006876:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006878:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800687a:	f001 b873 	b.w	8007964 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800687e:	f107 0318 	add.w	r3, r7, #24
 8006882:	4618      	mov	r0, r3
 8006884:	f7ff fc12 	bl	80060ac <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 8006888:	69fb      	ldr	r3, [r7, #28]
 800688a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800688c:	f001 b86a 	b.w	8007964 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 8006890:	4b10      	ldr	r3, [pc, #64]	@ (80068d4 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006898:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800689c:	d103      	bne.n	80068a6 <HAL_RCCEx_GetPeriphCLKFreq+0x292>
        {
          frequency = HSI48_VALUE;
 800689e:	4b10      	ldr	r3, [pc, #64]	@ (80068e0 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80068a0:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80068a2:	f001 b85f 	b.w	8007964 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 80068a6:	2300      	movs	r3, #0
 80068a8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80068aa:	f001 b85b 	b.w	8007964 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80068ae:	4b09      	ldr	r3, [pc, #36]	@ (80068d4 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	f003 0320 	and.w	r3, r3, #32
 80068b6:	2b20      	cmp	r3, #32
 80068b8:	d121      	bne.n	80068fe <HAL_RCCEx_GetPeriphCLKFreq+0x2ea>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80068ba:	4b06      	ldr	r3, [pc, #24]	@ (80068d4 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 80068bc:	689b      	ldr	r3, [r3, #8]
 80068be:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d00e      	beq.n	80068e4 <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>
 80068c6:	4b03      	ldr	r3, [pc, #12]	@ (80068d4 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 80068c8:	689b      	ldr	r3, [r3, #8]
 80068ca:	0e1b      	lsrs	r3, r3, #24
 80068cc:	f003 030f 	and.w	r3, r3, #15
 80068d0:	e00f      	b.n	80068f2 <HAL_RCCEx_GetPeriphCLKFreq+0x2de>
 80068d2:	bf00      	nop
 80068d4:	46020c00 	.word	0x46020c00
 80068d8:	0007a120 	.word	0x0007a120
 80068dc:	00f42400 	.word	0x00f42400
 80068e0:	02dc6c00 	.word	0x02dc6c00
 80068e4:	4ba7      	ldr	r3, [pc, #668]	@ (8006b84 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 80068e6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80068ea:	041b      	lsls	r3, r3, #16
 80068ec:	0e1b      	lsrs	r3, r3, #24
 80068ee:	f003 030f 	and.w	r3, r3, #15
 80068f2:	4aa5      	ldr	r2, [pc, #660]	@ (8006b88 <HAL_RCCEx_GetPeriphCLKFreq+0x574>)
 80068f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80068f8:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80068fa:	f001 b833 	b.w	8007964 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 80068fe:	2300      	movs	r3, #0
 8006900:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006902:	f001 b82f 	b.w	8007964 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default :

        frequency = 0U;
 8006906:	2300      	movs	r3, #0
 8006908:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800690a:	f001 b82b 	b.w	8007964 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800690e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006912:	f5a2 1100 	sub.w	r1, r2, #2097152	@ 0x200000
 8006916:	430b      	orrs	r3, r1
 8006918:	d17f      	bne.n	8006a1a <HAL_RCCEx_GetPeriphCLKFreq+0x406>
  {
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800691a:	4b9a      	ldr	r3, [pc, #616]	@ (8006b84 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 800691c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006920:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006924:	633b      	str	r3, [r7, #48]	@ 0x30
    if (srcclk == RCC_SDMMCCLKSOURCE_CLK48)
 8006926:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006928:	2b00      	cmp	r3, #0
 800692a:	d165      	bne.n	80069f8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e4>
    {
      srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 800692c:	4b95      	ldr	r3, [pc, #596]	@ (8006b84 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 800692e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006932:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 8006936:	633b      	str	r3, [r7, #48]	@ 0x30

      switch (srcclk)
 8006938:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800693a:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800693e:	d034      	beq.n	80069aa <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 8006940:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006942:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8006946:	d853      	bhi.n	80069f0 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 8006948:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800694a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800694e:	d00b      	beq.n	8006968 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
 8006950:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006952:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006956:	d84b      	bhi.n	80069f0 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 8006958:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800695a:	2b00      	cmp	r3, #0
 800695c:	d016      	beq.n	800698c <HAL_RCCEx_GetPeriphCLKFreq+0x378>
 800695e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006960:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006964:	d009      	beq.n	800697a <HAL_RCCEx_GetPeriphCLKFreq+0x366>
 8006966:	e043      	b.n	80069f0 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
      {
        case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006968:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800696c:	4618      	mov	r0, r3
 800696e:	f7ff fa43 	bl	8005df8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006972:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006974:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8006976:	f000 bff5 	b.w	8007964 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
        }
        case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800697a:	f107 0318 	add.w	r3, r7, #24
 800697e:	4618      	mov	r0, r3
 8006980:	f7ff fb94 	bl	80060ac <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006984:	69fb      	ldr	r3, [r7, #28]
 8006986:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8006988:	f000 bfec 	b.w	8007964 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
        }
        case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 800698c:	4b7d      	ldr	r3, [pc, #500]	@ (8006b84 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006994:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006998:	d103      	bne.n	80069a2 <HAL_RCCEx_GetPeriphCLKFreq+0x38e>
          {
            frequency = HSI48_VALUE;
 800699a:	4b7c      	ldr	r3, [pc, #496]	@ (8006b8c <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 800699c:	637b      	str	r3, [r7, #52]	@ 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 800699e:	f000 bfe1 	b.w	8007964 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
            frequency = 0U;
 80069a2:	2300      	movs	r3, #0
 80069a4:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 80069a6:	f000 bfdd 	b.w	8007964 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
        }
        case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80069aa:	4b76      	ldr	r3, [pc, #472]	@ (8006b84 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	f003 0320 	and.w	r3, r3, #32
 80069b2:	2b20      	cmp	r3, #32
 80069b4:	d118      	bne.n	80069e8 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
          {
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80069b6:	4b73      	ldr	r3, [pc, #460]	@ (8006b84 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 80069b8:	689b      	ldr	r3, [r3, #8]
 80069ba:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d005      	beq.n	80069ce <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
 80069c2:	4b70      	ldr	r3, [pc, #448]	@ (8006b84 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 80069c4:	689b      	ldr	r3, [r3, #8]
 80069c6:	0e1b      	lsrs	r3, r3, #24
 80069c8:	f003 030f 	and.w	r3, r3, #15
 80069cc:	e006      	b.n	80069dc <HAL_RCCEx_GetPeriphCLKFreq+0x3c8>
 80069ce:	4b6d      	ldr	r3, [pc, #436]	@ (8006b84 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 80069d0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80069d4:	041b      	lsls	r3, r3, #16
 80069d6:	0e1b      	lsrs	r3, r3, #24
 80069d8:	f003 030f 	and.w	r3, r3, #15
 80069dc:	4a6a      	ldr	r2, [pc, #424]	@ (8006b88 <HAL_RCCEx_GetPeriphCLKFreq+0x574>)
 80069de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80069e2:	637b      	str	r3, [r7, #52]	@ 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 80069e4:	f000 bfbe 	b.w	8007964 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
            frequency = 0U;
 80069e8:	2300      	movs	r3, #0
 80069ea:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 80069ec:	f000 bfba 	b.w	8007964 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
        }
        default :
        {
          frequency = 0U;
 80069f0:	2300      	movs	r3, #0
 80069f2:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 80069f4:	f000 bfb6 	b.w	8007964 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
        }
      }
    }
    else if (srcclk == RCC_SDMMCCLKSOURCE_PLL1)
 80069f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069fa:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80069fe:	d108      	bne.n	8006a12 <HAL_RCCEx_GetPeriphCLKFreq+0x3fe>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006a00:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006a04:	4618      	mov	r0, r3
 8006a06:	f7ff f9f7 	bl	8005df8 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_P_Frequency;
 8006a0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a0c:	637b      	str	r3, [r7, #52]	@ 0x34
 8006a0e:	f000 bfa9 	b.w	8007964 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else
    {
      frequency = 0U;
 8006a12:	2300      	movs	r3, #0
 8006a14:	637b      	str	r3, [r7, #52]	@ 0x34
 8006a16:	f000 bfa5 	b.w	8007964 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_USART1)
 8006a1a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006a1e:	1e51      	subs	r1, r2, #1
 8006a20:	430b      	orrs	r3, r1
 8006a22:	d136      	bne.n	8006a92 <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
  {
    /* Get the current USART1 source */
    srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8006a24:	4b57      	ldr	r3, [pc, #348]	@ (8006b84 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8006a26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006a2a:	f003 0303 	and.w	r3, r3, #3
 8006a2e:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 8006a30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d104      	bne.n	8006a40 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
    {
      frequency = HAL_RCC_GetPCLK2Freq();
 8006a36:	f7fe fb55 	bl	80050e4 <HAL_RCC_GetPCLK2Freq>
 8006a3a:	6378      	str	r0, [r7, #52]	@ 0x34
 8006a3c:	f000 bf92 	b.w	8007964 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_USART1CLKSOURCE_SYSCLK)
 8006a40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a42:	2b01      	cmp	r3, #1
 8006a44:	d104      	bne.n	8006a50 <HAL_RCCEx_GetPeriphCLKFreq+0x43c>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8006a46:	f7fe fa1d 	bl	8004e84 <HAL_RCC_GetSysClockFreq>
 8006a4a:	6378      	str	r0, [r7, #52]	@ 0x34
 8006a4c:	f000 bf8a 	b.w	8007964 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 8006a50:	4b4c      	ldr	r3, [pc, #304]	@ (8006b84 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006a58:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006a5c:	d106      	bne.n	8006a6c <HAL_RCCEx_GetPeriphCLKFreq+0x458>
 8006a5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a60:	2b02      	cmp	r3, #2
 8006a62:	d103      	bne.n	8006a6c <HAL_RCCEx_GetPeriphCLKFreq+0x458>
    {
      frequency = HSI_VALUE;
 8006a64:	4b4a      	ldr	r3, [pc, #296]	@ (8006b90 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 8006a66:	637b      	str	r3, [r7, #52]	@ 0x34
 8006a68:	f000 bf7c 	b.w	8007964 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 8006a6c:	4b45      	ldr	r3, [pc, #276]	@ (8006b84 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8006a6e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006a72:	f003 0302 	and.w	r3, r3, #2
 8006a76:	2b02      	cmp	r3, #2
 8006a78:	d107      	bne.n	8006a8a <HAL_RCCEx_GetPeriphCLKFreq+0x476>
 8006a7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a7c:	2b03      	cmp	r3, #3
 8006a7e:	d104      	bne.n	8006a8a <HAL_RCCEx_GetPeriphCLKFreq+0x476>
    {
      frequency = LSE_VALUE;
 8006a80:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006a84:	637b      	str	r3, [r7, #52]	@ 0x34
 8006a86:	f000 bf6d 	b.w	8007964 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for USART1 */
    else
    {
      frequency = 0U;
 8006a8a:	2300      	movs	r3, #0
 8006a8c:	637b      	str	r3, [r7, #52]	@ 0x34
 8006a8e:	f000 bf69 	b.w	8007964 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
#if defined(USART2)
  else if (PeriphClk == RCC_PERIPHCLK_USART2)
 8006a92:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006a96:	1e91      	subs	r1, r2, #2
 8006a98:	430b      	orrs	r3, r1
 8006a9a:	d136      	bne.n	8006b0a <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
  {
    /* Get the current USART2 source */
    srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8006a9c:	4b39      	ldr	r3, [pc, #228]	@ (8006b84 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8006a9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006aa2:	f003 030c 	and.w	r3, r3, #12
 8006aa6:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 8006aa8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d104      	bne.n	8006ab8 <HAL_RCCEx_GetPeriphCLKFreq+0x4a4>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8006aae:	f7fe fb05 	bl	80050bc <HAL_RCC_GetPCLK1Freq>
 8006ab2:	6378      	str	r0, [r7, #52]	@ 0x34
 8006ab4:	f000 bf56 	b.w	8007964 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_USART2CLKSOURCE_SYSCLK)
 8006ab8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006aba:	2b04      	cmp	r3, #4
 8006abc:	d104      	bne.n	8006ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8006abe:	f7fe f9e1 	bl	8004e84 <HAL_RCC_GetSysClockFreq>
 8006ac2:	6378      	str	r0, [r7, #52]	@ 0x34
 8006ac4:	f000 bf4e 	b.w	8007964 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 8006ac8:	4b2e      	ldr	r3, [pc, #184]	@ (8006b84 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006ad0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006ad4:	d106      	bne.n	8006ae4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 8006ad6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ad8:	2b08      	cmp	r3, #8
 8006ada:	d103      	bne.n	8006ae4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
    {
      frequency = HSI_VALUE;
 8006adc:	4b2c      	ldr	r3, [pc, #176]	@ (8006b90 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 8006ade:	637b      	str	r3, [r7, #52]	@ 0x34
 8006ae0:	f000 bf40 	b.w	8007964 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 8006ae4:	4b27      	ldr	r3, [pc, #156]	@ (8006b84 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8006ae6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006aea:	f003 0302 	and.w	r3, r3, #2
 8006aee:	2b02      	cmp	r3, #2
 8006af0:	d107      	bne.n	8006b02 <HAL_RCCEx_GetPeriphCLKFreq+0x4ee>
 8006af2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006af4:	2b0c      	cmp	r3, #12
 8006af6:	d104      	bne.n	8006b02 <HAL_RCCEx_GetPeriphCLKFreq+0x4ee>
    {
      frequency = LSE_VALUE;
 8006af8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006afc:	637b      	str	r3, [r7, #52]	@ 0x34
 8006afe:	f000 bf31 	b.w	8007964 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for USART2 */
    else
    {
      frequency = 0U;
 8006b02:	2300      	movs	r3, #0
 8006b04:	637b      	str	r3, [r7, #52]	@ 0x34
 8006b06:	f000 bf2d 	b.w	8007964 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
#endif /* USART2 */
  else if (PeriphClk == RCC_PERIPHCLK_USART3)
 8006b0a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006b0e:	1f11      	subs	r1, r2, #4
 8006b10:	430b      	orrs	r3, r1
 8006b12:	d13f      	bne.n	8006b94 <HAL_RCCEx_GetPeriphCLKFreq+0x580>
  {
    /* Get the current USART3 source */
    srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8006b14:	4b1b      	ldr	r3, [pc, #108]	@ (8006b84 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8006b16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006b1a:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8006b1e:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 8006b20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d104      	bne.n	8006b30 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8006b26:	f7fe fac9 	bl	80050bc <HAL_RCC_GetPCLK1Freq>
 8006b2a:	6378      	str	r0, [r7, #52]	@ 0x34
 8006b2c:	f000 bf1a 	b.w	8007964 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_USART3CLKSOURCE_SYSCLK)
 8006b30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b32:	2b10      	cmp	r3, #16
 8006b34:	d104      	bne.n	8006b40 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8006b36:	f7fe f9a5 	bl	8004e84 <HAL_RCC_GetSysClockFreq>
 8006b3a:	6378      	str	r0, [r7, #52]	@ 0x34
 8006b3c:	f000 bf12 	b.w	8007964 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 8006b40:	4b10      	ldr	r3, [pc, #64]	@ (8006b84 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006b48:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006b4c:	d106      	bne.n	8006b5c <HAL_RCCEx_GetPeriphCLKFreq+0x548>
 8006b4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b50:	2b20      	cmp	r3, #32
 8006b52:	d103      	bne.n	8006b5c <HAL_RCCEx_GetPeriphCLKFreq+0x548>
    {
      frequency = HSI_VALUE;
 8006b54:	4b0e      	ldr	r3, [pc, #56]	@ (8006b90 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 8006b56:	637b      	str	r3, [r7, #52]	@ 0x34
 8006b58:	f000 bf04 	b.w	8007964 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 8006b5c:	4b09      	ldr	r3, [pc, #36]	@ (8006b84 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8006b5e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006b62:	f003 0302 	and.w	r3, r3, #2
 8006b66:	2b02      	cmp	r3, #2
 8006b68:	d107      	bne.n	8006b7a <HAL_RCCEx_GetPeriphCLKFreq+0x566>
 8006b6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b6c:	2b30      	cmp	r3, #48	@ 0x30
 8006b6e:	d104      	bne.n	8006b7a <HAL_RCCEx_GetPeriphCLKFreq+0x566>
    {
      frequency = LSE_VALUE;
 8006b70:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006b74:	637b      	str	r3, [r7, #52]	@ 0x34
 8006b76:	f000 bef5 	b.w	8007964 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for USART3 */
    else
    {
      frequency = 0U;
 8006b7a:	2300      	movs	r3, #0
 8006b7c:	637b      	str	r3, [r7, #52]	@ 0x34
 8006b7e:	f000 bef1 	b.w	8007964 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
 8006b82:	bf00      	nop
 8006b84:	46020c00 	.word	0x46020c00
 8006b88:	0800a77c 	.word	0x0800a77c
 8006b8c:	02dc6c00 	.word	0x02dc6c00
 8006b90:	00f42400 	.word	0x00f42400
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART4)
 8006b94:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006b98:	f1a2 0108 	sub.w	r1, r2, #8
 8006b9c:	430b      	orrs	r3, r1
 8006b9e:	d136      	bne.n	8006c0e <HAL_RCCEx_GetPeriphCLKFreq+0x5fa>
  {
    /* Get the current UART4 source */
    srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8006ba0:	4ba4      	ldr	r3, [pc, #656]	@ (8006e34 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8006ba2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006ba6:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8006baa:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 8006bac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d104      	bne.n	8006bbc <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8006bb2:	f7fe fa83 	bl	80050bc <HAL_RCC_GetPCLK1Freq>
 8006bb6:	6378      	str	r0, [r7, #52]	@ 0x34
 8006bb8:	f000 bed4 	b.w	8007964 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_UART4CLKSOURCE_SYSCLK)
 8006bbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bbe:	2b40      	cmp	r3, #64	@ 0x40
 8006bc0:	d104      	bne.n	8006bcc <HAL_RCCEx_GetPeriphCLKFreq+0x5b8>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8006bc2:	f7fe f95f 	bl	8004e84 <HAL_RCC_GetSysClockFreq>
 8006bc6:	6378      	str	r0, [r7, #52]	@ 0x34
 8006bc8:	f000 becc 	b.w	8007964 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 8006bcc:	4b99      	ldr	r3, [pc, #612]	@ (8006e34 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006bd4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006bd8:	d106      	bne.n	8006be8 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>
 8006bda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bdc:	2b80      	cmp	r3, #128	@ 0x80
 8006bde:	d103      	bne.n	8006be8 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>
    {
      frequency = HSI_VALUE;
 8006be0:	4b95      	ldr	r3, [pc, #596]	@ (8006e38 <HAL_RCCEx_GetPeriphCLKFreq+0x824>)
 8006be2:	637b      	str	r3, [r7, #52]	@ 0x34
 8006be4:	f000 bebe 	b.w	8007964 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 8006be8:	4b92      	ldr	r3, [pc, #584]	@ (8006e34 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8006bea:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006bee:	f003 0302 	and.w	r3, r3, #2
 8006bf2:	2b02      	cmp	r3, #2
 8006bf4:	d107      	bne.n	8006c06 <HAL_RCCEx_GetPeriphCLKFreq+0x5f2>
 8006bf6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bf8:	2bc0      	cmp	r3, #192	@ 0xc0
 8006bfa:	d104      	bne.n	8006c06 <HAL_RCCEx_GetPeriphCLKFreq+0x5f2>
    {
      frequency = LSE_VALUE;
 8006bfc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006c00:	637b      	str	r3, [r7, #52]	@ 0x34
 8006c02:	f000 beaf 	b.w	8007964 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for UART4 */
    else
    {
      frequency = 0U;
 8006c06:	2300      	movs	r3, #0
 8006c08:	637b      	str	r3, [r7, #52]	@ 0x34
 8006c0a:	f000 beab 	b.w	8007964 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART5)
 8006c0e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006c12:	f1a2 0110 	sub.w	r1, r2, #16
 8006c16:	430b      	orrs	r3, r1
 8006c18:	d139      	bne.n	8006c8e <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
  {
    /* Get the current UART5 source */
    srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8006c1a:	4b86      	ldr	r3, [pc, #536]	@ (8006e34 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8006c1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006c20:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006c24:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 8006c26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d104      	bne.n	8006c36 <HAL_RCCEx_GetPeriphCLKFreq+0x622>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8006c2c:	f7fe fa46 	bl	80050bc <HAL_RCC_GetPCLK1Freq>
 8006c30:	6378      	str	r0, [r7, #52]	@ 0x34
 8006c32:	f000 be97 	b.w	8007964 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_UART5CLKSOURCE_SYSCLK)
 8006c36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c38:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006c3c:	d104      	bne.n	8006c48 <HAL_RCCEx_GetPeriphCLKFreq+0x634>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8006c3e:	f7fe f921 	bl	8004e84 <HAL_RCC_GetSysClockFreq>
 8006c42:	6378      	str	r0, [r7, #52]	@ 0x34
 8006c44:	f000 be8e 	b.w	8007964 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 8006c48:	4b7a      	ldr	r3, [pc, #488]	@ (8006e34 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006c50:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006c54:	d107      	bne.n	8006c66 <HAL_RCCEx_GetPeriphCLKFreq+0x652>
 8006c56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c58:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006c5c:	d103      	bne.n	8006c66 <HAL_RCCEx_GetPeriphCLKFreq+0x652>
    {
      frequency = HSI_VALUE;
 8006c5e:	4b76      	ldr	r3, [pc, #472]	@ (8006e38 <HAL_RCCEx_GetPeriphCLKFreq+0x824>)
 8006c60:	637b      	str	r3, [r7, #52]	@ 0x34
 8006c62:	f000 be7f 	b.w	8007964 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 8006c66:	4b73      	ldr	r3, [pc, #460]	@ (8006e34 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8006c68:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006c6c:	f003 0302 	and.w	r3, r3, #2
 8006c70:	2b02      	cmp	r3, #2
 8006c72:	d108      	bne.n	8006c86 <HAL_RCCEx_GetPeriphCLKFreq+0x672>
 8006c74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c76:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006c7a:	d104      	bne.n	8006c86 <HAL_RCCEx_GetPeriphCLKFreq+0x672>
    {
      frequency = LSE_VALUE;
 8006c7c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006c80:	637b      	str	r3, [r7, #52]	@ 0x34
 8006c82:	f000 be6f 	b.w	8007964 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for UART5 */
    else
    {
      frequency = 0U;
 8006c86:	2300      	movs	r3, #0
 8006c88:	637b      	str	r3, [r7, #52]	@ 0x34
 8006c8a:	f000 be6b 	b.w	8007964 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    {
      frequency = 0U;
    }
  }
#endif /* USART6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPUART1)
 8006c8e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006c92:	f1a2 0120 	sub.w	r1, r2, #32
 8006c96:	430b      	orrs	r3, r1
 8006c98:	d158      	bne.n	8006d4c <HAL_RCCEx_GetPeriphCLKFreq+0x738>
  {
    /* Get the current LPUART1 source */
    srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8006c9a:	4b66      	ldr	r3, [pc, #408]	@ (8006e34 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8006c9c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006ca0:	f003 0307 	and.w	r3, r3, #7
 8006ca4:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 8006ca6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d104      	bne.n	8006cb6 <HAL_RCCEx_GetPeriphCLKFreq+0x6a2>
    {
      frequency = HAL_RCC_GetPCLK3Freq();
 8006cac:	f7fe fa2e 	bl	800510c <HAL_RCC_GetPCLK3Freq>
 8006cb0:	6378      	str	r0, [r7, #52]	@ 0x34
 8006cb2:	f000 be57 	b.w	8007964 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 8006cb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cb8:	2b01      	cmp	r3, #1
 8006cba:	d104      	bne.n	8006cc6 <HAL_RCCEx_GetPeriphCLKFreq+0x6b2>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8006cbc:	f7fe f8e2 	bl	8004e84 <HAL_RCC_GetSysClockFreq>
 8006cc0:	6378      	str	r0, [r7, #52]	@ 0x34
 8006cc2:	f000 be4f 	b.w	8007964 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 8006cc6:	4b5b      	ldr	r3, [pc, #364]	@ (8006e34 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006cce:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006cd2:	d106      	bne.n	8006ce2 <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
 8006cd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cd6:	2b02      	cmp	r3, #2
 8006cd8:	d103      	bne.n	8006ce2 <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
    {
      frequency = HSI_VALUE;
 8006cda:	4b57      	ldr	r3, [pc, #348]	@ (8006e38 <HAL_RCCEx_GetPeriphCLKFreq+0x824>)
 8006cdc:	637b      	str	r3, [r7, #52]	@ 0x34
 8006cde:	f000 be41 	b.w	8007964 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 8006ce2:	4b54      	ldr	r3, [pc, #336]	@ (8006e34 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8006ce4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006ce8:	f003 0302 	and.w	r3, r3, #2
 8006cec:	2b02      	cmp	r3, #2
 8006cee:	d107      	bne.n	8006d00 <HAL_RCCEx_GetPeriphCLKFreq+0x6ec>
 8006cf0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cf2:	2b03      	cmp	r3, #3
 8006cf4:	d104      	bne.n	8006d00 <HAL_RCCEx_GetPeriphCLKFreq+0x6ec>
    {
      frequency = LSE_VALUE;
 8006cf6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006cfa:	637b      	str	r3, [r7, #52]	@ 0x34
 8006cfc:	f000 be32 	b.w	8007964 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_MSIK))
 8006d00:	4b4c      	ldr	r3, [pc, #304]	@ (8006e34 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	f003 0320 	and.w	r3, r3, #32
 8006d08:	2b20      	cmp	r3, #32
 8006d0a:	d11b      	bne.n	8006d44 <HAL_RCCEx_GetPeriphCLKFreq+0x730>
 8006d0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d0e:	2b04      	cmp	r3, #4
 8006d10:	d118      	bne.n	8006d44 <HAL_RCCEx_GetPeriphCLKFreq+0x730>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006d12:	4b48      	ldr	r3, [pc, #288]	@ (8006e34 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8006d14:	689b      	ldr	r3, [r3, #8]
 8006d16:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d005      	beq.n	8006d2a <HAL_RCCEx_GetPeriphCLKFreq+0x716>
 8006d1e:	4b45      	ldr	r3, [pc, #276]	@ (8006e34 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8006d20:	689b      	ldr	r3, [r3, #8]
 8006d22:	0e1b      	lsrs	r3, r3, #24
 8006d24:	f003 030f 	and.w	r3, r3, #15
 8006d28:	e006      	b.n	8006d38 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8006d2a:	4b42      	ldr	r3, [pc, #264]	@ (8006e34 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8006d2c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006d30:	041b      	lsls	r3, r3, #16
 8006d32:	0e1b      	lsrs	r3, r3, #24
 8006d34:	f003 030f 	and.w	r3, r3, #15
 8006d38:	4a40      	ldr	r2, [pc, #256]	@ (8006e3c <HAL_RCCEx_GetPeriphCLKFreq+0x828>)
 8006d3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006d3e:	637b      	str	r3, [r7, #52]	@ 0x34
 8006d40:	f000 be10 	b.w	8007964 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for LPUART1 */
    else
    {
      frequency = 0U;
 8006d44:	2300      	movs	r3, #0
 8006d46:	637b      	str	r3, [r7, #52]	@ 0x34
 8006d48:	f000 be0c 	b.w	8007964 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADCDAC)
 8006d4c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006d50:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 8006d54:	430b      	orrs	r3, r1
 8006d56:	d173      	bne.n	8006e40 <HAL_RCCEx_GetPeriphCLKFreq+0x82c>
  {
    srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 8006d58:	4b36      	ldr	r3, [pc, #216]	@ (8006e34 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8006d5a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006d5e:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8006d62:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 8006d64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d66:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006d6a:	d104      	bne.n	8006d76 <HAL_RCCEx_GetPeriphCLKFreq+0x762>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8006d6c:	f7fe f88a 	bl	8004e84 <HAL_RCC_GetSysClockFreq>
 8006d70:	6378      	str	r0, [r7, #52]	@ 0x34
 8006d72:	f000 bdf7 	b.w	8007964 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2)
 8006d76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d78:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006d7c:	d108      	bne.n	8006d90 <HAL_RCCEx_GetPeriphCLKFreq+0x77c>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006d7e:	f107 0318 	add.w	r3, r7, #24
 8006d82:	4618      	mov	r0, r3
 8006d84:	f7ff f992 	bl	80060ac <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_R_Frequency;
 8006d88:	6a3b      	ldr	r3, [r7, #32]
 8006d8a:	637b      	str	r3, [r7, #52]	@ 0x34
 8006d8c:	f000 bdea 	b.w	8007964 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 8006d90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d104      	bne.n	8006da0 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>
    {
      frequency = HAL_RCC_GetHCLKFreq();
 8006d96:	f7fe f977 	bl	8005088 <HAL_RCC_GetHCLKFreq>
 8006d9a:	6378      	str	r0, [r7, #52]	@ 0x34
 8006d9c:	f000 bde2 	b.w	8007964 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_MSIK)
 8006da0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006da2:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8006da6:	d122      	bne.n	8006dee <HAL_RCCEx_GetPeriphCLKFreq+0x7da>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8006da8:	4b22      	ldr	r3, [pc, #136]	@ (8006e34 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	f003 0320 	and.w	r3, r3, #32
 8006db0:	2b20      	cmp	r3, #32
 8006db2:	d118      	bne.n	8006de6 <HAL_RCCEx_GetPeriphCLKFreq+0x7d2>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006db4:	4b1f      	ldr	r3, [pc, #124]	@ (8006e34 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8006db6:	689b      	ldr	r3, [r3, #8]
 8006db8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d005      	beq.n	8006dcc <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
 8006dc0:	4b1c      	ldr	r3, [pc, #112]	@ (8006e34 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8006dc2:	689b      	ldr	r3, [r3, #8]
 8006dc4:	0e1b      	lsrs	r3, r3, #24
 8006dc6:	f003 030f 	and.w	r3, r3, #15
 8006dca:	e006      	b.n	8006dda <HAL_RCCEx_GetPeriphCLKFreq+0x7c6>
 8006dcc:	4b19      	ldr	r3, [pc, #100]	@ (8006e34 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8006dce:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006dd2:	041b      	lsls	r3, r3, #16
 8006dd4:	0e1b      	lsrs	r3, r3, #24
 8006dd6:	f003 030f 	and.w	r3, r3, #15
 8006dda:	4a18      	ldr	r2, [pc, #96]	@ (8006e3c <HAL_RCCEx_GetPeriphCLKFreq+0x828>)
 8006ddc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006de0:	637b      	str	r3, [r7, #52]	@ 0x34
 8006de2:	f000 bdbf 	b.w	8007964 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = 0U;
 8006de6:	2300      	movs	r3, #0
 8006de8:	637b      	str	r3, [r7, #52]	@ 0x34
 8006dea:	f000 bdbb 	b.w	8007964 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 8006dee:	4b11      	ldr	r3, [pc, #68]	@ (8006e34 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006df6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006dfa:	d107      	bne.n	8006e0c <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>
 8006dfc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006dfe:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006e02:	d103      	bne.n	8006e0c <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>
    {
      frequency = HSE_VALUE;
 8006e04:	4b0c      	ldr	r3, [pc, #48]	@ (8006e38 <HAL_RCCEx_GetPeriphCLKFreq+0x824>)
 8006e06:	637b      	str	r3, [r7, #52]	@ 0x34
 8006e08:	f000 bdac 	b.w	8007964 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 8006e0c:	4b09      	ldr	r3, [pc, #36]	@ (8006e34 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006e14:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006e18:	d107      	bne.n	8006e2a <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 8006e1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e1c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006e20:	d103      	bne.n	8006e2a <HAL_RCCEx_GetPeriphCLKFreq+0x816>
    {
      frequency = HSI_VALUE;
 8006e22:	4b05      	ldr	r3, [pc, #20]	@ (8006e38 <HAL_RCCEx_GetPeriphCLKFreq+0x824>)
 8006e24:	637b      	str	r3, [r7, #52]	@ 0x34
 8006e26:	f000 bd9d 	b.w	8007964 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for ADC */
    else
    {
      frequency = 0U;
 8006e2a:	2300      	movs	r3, #0
 8006e2c:	637b      	str	r3, [r7, #52]	@ 0x34
 8006e2e:	f000 bd99 	b.w	8007964 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
 8006e32:	bf00      	nop
 8006e34:	46020c00 	.word	0x46020c00
 8006e38:	00f42400 	.word	0x00f42400
 8006e3c:	0800a77c 	.word	0x0800a77c
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_MDF1)
 8006e40:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006e44:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 8006e48:	430b      	orrs	r3, r1
 8006e4a:	d158      	bne.n	8006efe <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
  {
    /* Get the current MDF1 source */
    srcclk = __HAL_RCC_GET_MDF1_SOURCE();
 8006e4c:	4bad      	ldr	r3, [pc, #692]	@ (8007104 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8006e4e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006e52:	f003 0307 	and.w	r3, r3, #7
 8006e56:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8006e58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e5a:	2b04      	cmp	r3, #4
 8006e5c:	d84b      	bhi.n	8006ef6 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 8006e5e:	a201      	add	r2, pc, #4	@ (adr r2, 8006e64 <HAL_RCCEx_GetPeriphCLKFreq+0x850>)
 8006e60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e64:	08006e9d 	.word	0x08006e9d
 8006e68:	08006e79 	.word	0x08006e79
 8006e6c:	08006e8b 	.word	0x08006e8b
 8006e70:	08006ea7 	.word	0x08006ea7
 8006e74:	08006eb1 	.word	0x08006eb1
    {
      case RCC_MDF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006e78:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006e7c:	4618      	mov	r0, r3
 8006e7e:	f7fe ffbb 	bl	8005df8 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8006e82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e84:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006e86:	f000 bd6d 	b.w	8007964 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_MDF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006e8a:	f107 030c 	add.w	r3, r7, #12
 8006e8e:	4618      	mov	r0, r3
 8006e90:	f7ff fa66 	bl	8006360 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 8006e94:	693b      	ldr	r3, [r7, #16]
 8006e96:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006e98:	f000 bd64 	b.w	8007964 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_MDF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 8006e9c:	f7fe f8f4 	bl	8005088 <HAL_RCC_GetHCLKFreq>
 8006ea0:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8006ea2:	f000 bd5f 	b.w	8007964 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_MDF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8006ea6:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8006eaa:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006eac:	f000 bd5a 	b.w	8007964 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_MDF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8006eb0:	4b94      	ldr	r3, [pc, #592]	@ (8007104 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	f003 0320 	and.w	r3, r3, #32
 8006eb8:	2b20      	cmp	r3, #32
 8006eba:	d118      	bne.n	8006eee <HAL_RCCEx_GetPeriphCLKFreq+0x8da>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006ebc:	4b91      	ldr	r3, [pc, #580]	@ (8007104 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8006ebe:	689b      	ldr	r3, [r3, #8]
 8006ec0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d005      	beq.n	8006ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x8c0>
 8006ec8:	4b8e      	ldr	r3, [pc, #568]	@ (8007104 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8006eca:	689b      	ldr	r3, [r3, #8]
 8006ecc:	0e1b      	lsrs	r3, r3, #24
 8006ece:	f003 030f 	and.w	r3, r3, #15
 8006ed2:	e006      	b.n	8006ee2 <HAL_RCCEx_GetPeriphCLKFreq+0x8ce>
 8006ed4:	4b8b      	ldr	r3, [pc, #556]	@ (8007104 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8006ed6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006eda:	041b      	lsls	r3, r3, #16
 8006edc:	0e1b      	lsrs	r3, r3, #24
 8006ede:	f003 030f 	and.w	r3, r3, #15
 8006ee2:	4a89      	ldr	r2, [pc, #548]	@ (8007108 <HAL_RCCEx_GetPeriphCLKFreq+0xaf4>)
 8006ee4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006ee8:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006eea:	f000 bd3b 	b.w	8007964 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8006eee:	2300      	movs	r3, #0
 8006ef0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006ef2:	f000 bd37 	b.w	8007964 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default:

        frequency = 0U;
 8006ef6:	2300      	movs	r3, #0
 8006ef8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006efa:	f000 bd33 	b.w	8007964 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADF1)
 8006efe:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006f02:	f5a2 3100 	sub.w	r1, r2, #131072	@ 0x20000
 8006f06:	430b      	orrs	r3, r1
 8006f08:	d167      	bne.n	8006fda <HAL_RCCEx_GetPeriphCLKFreq+0x9c6>
  {
    /* Get the current ADF1 source */
    srcclk = __HAL_RCC_GET_ADF1_SOURCE();
 8006f0a:	4b7e      	ldr	r3, [pc, #504]	@ (8007104 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8006f0c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006f10:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8006f14:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8006f16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f18:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006f1c:	d036      	beq.n	8006f8c <HAL_RCCEx_GetPeriphCLKFreq+0x978>
 8006f1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f20:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006f24:	d855      	bhi.n	8006fd2 <HAL_RCCEx_GetPeriphCLKFreq+0x9be>
 8006f26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f28:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006f2c:	d029      	beq.n	8006f82 <HAL_RCCEx_GetPeriphCLKFreq+0x96e>
 8006f2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f30:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006f34:	d84d      	bhi.n	8006fd2 <HAL_RCCEx_GetPeriphCLKFreq+0x9be>
 8006f36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f38:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006f3c:	d013      	beq.n	8006f66 <HAL_RCCEx_GetPeriphCLKFreq+0x952>
 8006f3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f40:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006f44:	d845      	bhi.n	8006fd2 <HAL_RCCEx_GetPeriphCLKFreq+0x9be>
 8006f46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d015      	beq.n	8006f78 <HAL_RCCEx_GetPeriphCLKFreq+0x964>
 8006f4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f4e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006f52:	d13e      	bne.n	8006fd2 <HAL_RCCEx_GetPeriphCLKFreq+0x9be>
    {
      case RCC_ADF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006f54:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006f58:	4618      	mov	r0, r3
 8006f5a:	f7fe ff4d 	bl	8005df8 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8006f5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f60:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006f62:	f000 bcff 	b.w	8007964 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_ADF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006f66:	f107 030c 	add.w	r3, r7, #12
 8006f6a:	4618      	mov	r0, r3
 8006f6c:	f7ff f9f8 	bl	8006360 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 8006f70:	693b      	ldr	r3, [r7, #16]
 8006f72:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006f74:	f000 bcf6 	b.w	8007964 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_ADF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 8006f78:	f7fe f886 	bl	8005088 <HAL_RCC_GetHCLKFreq>
 8006f7c:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8006f7e:	f000 bcf1 	b.w	8007964 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_ADF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8006f82:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8006f86:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006f88:	f000 bcec 	b.w	8007964 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_ADF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8006f8c:	4b5d      	ldr	r3, [pc, #372]	@ (8007104 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	f003 0320 	and.w	r3, r3, #32
 8006f94:	2b20      	cmp	r3, #32
 8006f96:	d118      	bne.n	8006fca <HAL_RCCEx_GetPeriphCLKFreq+0x9b6>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006f98:	4b5a      	ldr	r3, [pc, #360]	@ (8007104 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8006f9a:	689b      	ldr	r3, [r3, #8]
 8006f9c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d005      	beq.n	8006fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>
 8006fa4:	4b57      	ldr	r3, [pc, #348]	@ (8007104 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8006fa6:	689b      	ldr	r3, [r3, #8]
 8006fa8:	0e1b      	lsrs	r3, r3, #24
 8006faa:	f003 030f 	and.w	r3, r3, #15
 8006fae:	e006      	b.n	8006fbe <HAL_RCCEx_GetPeriphCLKFreq+0x9aa>
 8006fb0:	4b54      	ldr	r3, [pc, #336]	@ (8007104 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8006fb2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006fb6:	041b      	lsls	r3, r3, #16
 8006fb8:	0e1b      	lsrs	r3, r3, #24
 8006fba:	f003 030f 	and.w	r3, r3, #15
 8006fbe:	4a52      	ldr	r2, [pc, #328]	@ (8007108 <HAL_RCCEx_GetPeriphCLKFreq+0xaf4>)
 8006fc0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006fc4:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006fc6:	f000 bccd 	b.w	8007964 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8006fca:	2300      	movs	r3, #0
 8006fcc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006fce:	f000 bcc9 	b.w	8007964 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default:

        frequency = 0U;
 8006fd2:	2300      	movs	r3, #0
 8006fd4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006fd6:	f000 bcc5 	b.w	8007964 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C1)
 8006fda:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006fde:	f1a2 0140 	sub.w	r1, r2, #64	@ 0x40
 8006fe2:	430b      	orrs	r3, r1
 8006fe4:	d14c      	bne.n	8007080 <HAL_RCCEx_GetPeriphCLKFreq+0xa6c>
  {
    /* Get the current I2C1 source */
    srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8006fe6:	4b47      	ldr	r3, [pc, #284]	@ (8007104 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8006fe8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006fec:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8006ff0:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 8006ff2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d104      	bne.n	8007002 <HAL_RCCEx_GetPeriphCLKFreq+0x9ee>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8006ff8:	f7fe f860 	bl	80050bc <HAL_RCC_GetPCLK1Freq>
 8006ffc:	6378      	str	r0, [r7, #52]	@ 0x34
 8006ffe:	f000 bcb1 	b.w	8007964 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 8007002:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007004:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007008:	d104      	bne.n	8007014 <HAL_RCCEx_GetPeriphCLKFreq+0xa00>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800700a:	f7fd ff3b 	bl	8004e84 <HAL_RCC_GetSysClockFreq>
 800700e:	6378      	str	r0, [r7, #52]	@ 0x34
 8007010:	f000 bca8 	b.w	8007964 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 8007014:	4b3b      	ldr	r3, [pc, #236]	@ (8007104 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800701c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007020:	d107      	bne.n	8007032 <HAL_RCCEx_GetPeriphCLKFreq+0xa1e>
 8007022:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007024:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007028:	d103      	bne.n	8007032 <HAL_RCCEx_GetPeriphCLKFreq+0xa1e>
    {
      frequency = HSI_VALUE;
 800702a:	4b38      	ldr	r3, [pc, #224]	@ (800710c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800702c:	637b      	str	r3, [r7, #52]	@ 0x34
 800702e:	f000 bc99 	b.w	8007964 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C1CLKSOURCE_MSIK))
 8007032:	4b34      	ldr	r3, [pc, #208]	@ (8007104 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	f003 0320 	and.w	r3, r3, #32
 800703a:	2b20      	cmp	r3, #32
 800703c:	d11c      	bne.n	8007078 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
 800703e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007040:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007044:	d118      	bne.n	8007078 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007046:	4b2f      	ldr	r3, [pc, #188]	@ (8007104 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8007048:	689b      	ldr	r3, [r3, #8]
 800704a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800704e:	2b00      	cmp	r3, #0
 8007050:	d005      	beq.n	800705e <HAL_RCCEx_GetPeriphCLKFreq+0xa4a>
 8007052:	4b2c      	ldr	r3, [pc, #176]	@ (8007104 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8007054:	689b      	ldr	r3, [r3, #8]
 8007056:	0e1b      	lsrs	r3, r3, #24
 8007058:	f003 030f 	and.w	r3, r3, #15
 800705c:	e006      	b.n	800706c <HAL_RCCEx_GetPeriphCLKFreq+0xa58>
 800705e:	4b29      	ldr	r3, [pc, #164]	@ (8007104 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8007060:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007064:	041b      	lsls	r3, r3, #16
 8007066:	0e1b      	lsrs	r3, r3, #24
 8007068:	f003 030f 	and.w	r3, r3, #15
 800706c:	4a26      	ldr	r2, [pc, #152]	@ (8007108 <HAL_RCCEx_GetPeriphCLKFreq+0xaf4>)
 800706e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007072:	637b      	str	r3, [r7, #52]	@ 0x34
 8007074:	f000 bc76 	b.w	8007964 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for I2C1 */
    else
    {
      frequency = 0U;
 8007078:	2300      	movs	r3, #0
 800707a:	637b      	str	r3, [r7, #52]	@ 0x34
 800707c:	f000 bc72 	b.w	8007964 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C2)
 8007080:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007084:	f1a2 0180 	sub.w	r1, r2, #128	@ 0x80
 8007088:	430b      	orrs	r3, r1
 800708a:	d152      	bne.n	8007132 <HAL_RCCEx_GetPeriphCLKFreq+0xb1e>
  {
    /* Get the current I2C2 source */
    srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 800708c:	4b1d      	ldr	r3, [pc, #116]	@ (8007104 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 800708e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007092:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8007096:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 8007098:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800709a:	2b00      	cmp	r3, #0
 800709c:	d104      	bne.n	80070a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa94>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800709e:	f7fe f80d 	bl	80050bc <HAL_RCC_GetPCLK1Freq>
 80070a2:	6378      	str	r0, [r7, #52]	@ 0x34
 80070a4:	f000 bc5e 	b.w	8007964 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_I2C2CLKSOURCE_SYSCLK)
 80070a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070aa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80070ae:	d104      	bne.n	80070ba <HAL_RCCEx_GetPeriphCLKFreq+0xaa6>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80070b0:	f7fd fee8 	bl	8004e84 <HAL_RCC_GetSysClockFreq>
 80070b4:	6378      	str	r0, [r7, #52]	@ 0x34
 80070b6:	f000 bc55 	b.w	8007964 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 80070ba:	4b12      	ldr	r3, [pc, #72]	@ (8007104 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80070c2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80070c6:	d107      	bne.n	80070d8 <HAL_RCCEx_GetPeriphCLKFreq+0xac4>
 80070c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070ca:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80070ce:	d103      	bne.n	80070d8 <HAL_RCCEx_GetPeriphCLKFreq+0xac4>
    {
      frequency = HSI_VALUE;
 80070d0:	4b0e      	ldr	r3, [pc, #56]	@ (800710c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80070d2:	637b      	str	r3, [r7, #52]	@ 0x34
 80070d4:	f000 bc46 	b.w	8007964 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C2CLKSOURCE_MSIK))
 80070d8:	4b0a      	ldr	r3, [pc, #40]	@ (8007104 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	f003 0320 	and.w	r3, r3, #32
 80070e0:	2b20      	cmp	r3, #32
 80070e2:	d122      	bne.n	800712a <HAL_RCCEx_GetPeriphCLKFreq+0xb16>
 80070e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070e6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80070ea:	d11e      	bne.n	800712a <HAL_RCCEx_GetPeriphCLKFreq+0xb16>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80070ec:	4b05      	ldr	r3, [pc, #20]	@ (8007104 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 80070ee:	689b      	ldr	r3, [r3, #8]
 80070f0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d00b      	beq.n	8007110 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>
 80070f8:	4b02      	ldr	r3, [pc, #8]	@ (8007104 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 80070fa:	689b      	ldr	r3, [r3, #8]
 80070fc:	0e1b      	lsrs	r3, r3, #24
 80070fe:	f003 030f 	and.w	r3, r3, #15
 8007102:	e00c      	b.n	800711e <HAL_RCCEx_GetPeriphCLKFreq+0xb0a>
 8007104:	46020c00 	.word	0x46020c00
 8007108:	0800a77c 	.word	0x0800a77c
 800710c:	00f42400 	.word	0x00f42400
 8007110:	4ba1      	ldr	r3, [pc, #644]	@ (8007398 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8007112:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007116:	041b      	lsls	r3, r3, #16
 8007118:	0e1b      	lsrs	r3, r3, #24
 800711a:	f003 030f 	and.w	r3, r3, #15
 800711e:	4a9f      	ldr	r2, [pc, #636]	@ (800739c <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8007120:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007124:	637b      	str	r3, [r7, #52]	@ 0x34
 8007126:	f000 bc1d 	b.w	8007964 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for I2C2 */
    else
    {
      frequency = 0U;
 800712a:	2300      	movs	r3, #0
 800712c:	637b      	str	r3, [r7, #52]	@ 0x34
 800712e:	f000 bc19 	b.w	8007964 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C3)
 8007132:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007136:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 800713a:	430b      	orrs	r3, r1
 800713c:	d151      	bne.n	80071e2 <HAL_RCCEx_GetPeriphCLKFreq+0xbce>
  {
    /* Get the current I2C3 source */
    srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 800713e:	4b96      	ldr	r3, [pc, #600]	@ (8007398 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8007140:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007144:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8007148:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800714a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800714c:	2bc0      	cmp	r3, #192	@ 0xc0
 800714e:	d024      	beq.n	800719a <HAL_RCCEx_GetPeriphCLKFreq+0xb86>
 8007150:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007152:	2bc0      	cmp	r3, #192	@ 0xc0
 8007154:	d842      	bhi.n	80071dc <HAL_RCCEx_GetPeriphCLKFreq+0xbc8>
 8007156:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007158:	2b80      	cmp	r3, #128	@ 0x80
 800715a:	d00d      	beq.n	8007178 <HAL_RCCEx_GetPeriphCLKFreq+0xb64>
 800715c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800715e:	2b80      	cmp	r3, #128	@ 0x80
 8007160:	d83c      	bhi.n	80071dc <HAL_RCCEx_GetPeriphCLKFreq+0xbc8>
 8007162:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007164:	2b00      	cmp	r3, #0
 8007166:	d003      	beq.n	8007170 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
 8007168:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800716a:	2b40      	cmp	r3, #64	@ 0x40
 800716c:	d011      	beq.n	8007192 <HAL_RCCEx_GetPeriphCLKFreq+0xb7e>
 800716e:	e035      	b.n	80071dc <HAL_RCCEx_GetPeriphCLKFreq+0xbc8>
    {
      case RCC_I2C3CLKSOURCE_PCLK3:
      {
        frequency = HAL_RCC_GetPCLK3Freq();
 8007170:	f7fd ffcc 	bl	800510c <HAL_RCC_GetPCLK3Freq>
 8007174:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8007176:	e3f5      	b.n	8007964 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      case RCC_I2C3CLKSOURCE_HSI:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007178:	4b87      	ldr	r3, [pc, #540]	@ (8007398 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007180:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007184:	d102      	bne.n	800718c <HAL_RCCEx_GetPeriphCLKFreq+0xb78>
        {
          frequency = HSI_VALUE;
 8007186:	4b86      	ldr	r3, [pc, #536]	@ (80073a0 <HAL_RCCEx_GetPeriphCLKFreq+0xd8c>)
 8007188:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800718a:	e3eb      	b.n	8007964 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 800718c:	2300      	movs	r3, #0
 800718e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007190:	e3e8      	b.n	8007964 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      case RCC_I2C3CLKSOURCE_SYSCLK:
      {
        frequency = HAL_RCC_GetSysClockFreq();
 8007192:	f7fd fe77 	bl	8004e84 <HAL_RCC_GetSysClockFreq>
 8007196:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8007198:	e3e4      	b.n	8007964 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      case RCC_I2C3CLKSOURCE_MSIK:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800719a:	4b7f      	ldr	r3, [pc, #508]	@ (8007398 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	f003 0320 	and.w	r3, r3, #32
 80071a2:	2b20      	cmp	r3, #32
 80071a4:	d117      	bne.n	80071d6 <HAL_RCCEx_GetPeriphCLKFreq+0xbc2>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80071a6:	4b7c      	ldr	r3, [pc, #496]	@ (8007398 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 80071a8:	689b      	ldr	r3, [r3, #8]
 80071aa:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d005      	beq.n	80071be <HAL_RCCEx_GetPeriphCLKFreq+0xbaa>
 80071b2:	4b79      	ldr	r3, [pc, #484]	@ (8007398 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 80071b4:	689b      	ldr	r3, [r3, #8]
 80071b6:	0e1b      	lsrs	r3, r3, #24
 80071b8:	f003 030f 	and.w	r3, r3, #15
 80071bc:	e006      	b.n	80071cc <HAL_RCCEx_GetPeriphCLKFreq+0xbb8>
 80071be:	4b76      	ldr	r3, [pc, #472]	@ (8007398 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 80071c0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80071c4:	041b      	lsls	r3, r3, #16
 80071c6:	0e1b      	lsrs	r3, r3, #24
 80071c8:	f003 030f 	and.w	r3, r3, #15
 80071cc:	4a73      	ldr	r2, [pc, #460]	@ (800739c <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 80071ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80071d2:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80071d4:	e3c6      	b.n	8007964 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 80071d6:	2300      	movs	r3, #0
 80071d8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80071da:	e3c3      	b.n	8007964 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      default:
      {
        frequency = 0U;
 80071dc:	2300      	movs	r3, #0
 80071de:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80071e0:	e3c0      	b.n	8007964 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C4)
 80071e2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80071e6:	f5a2 0180 	sub.w	r1, r2, #4194304	@ 0x400000
 80071ea:	430b      	orrs	r3, r1
 80071ec:	d147      	bne.n	800727e <HAL_RCCEx_GetPeriphCLKFreq+0xc6a>
  {
    /* Get the current I2C4 source */
    srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 80071ee:	4b6a      	ldr	r3, [pc, #424]	@ (8007398 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 80071f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80071f4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80071f8:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C4CLKSOURCE_PCLK1)
 80071fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d103      	bne.n	8007208 <HAL_RCCEx_GetPeriphCLKFreq+0xbf4>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8007200:	f7fd ff5c 	bl	80050bc <HAL_RCC_GetPCLK1Freq>
 8007204:	6378      	str	r0, [r7, #52]	@ 0x34
 8007206:	e3ad      	b.n	8007964 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_I2C4CLKSOURCE_SYSCLK)
 8007208:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800720a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800720e:	d103      	bne.n	8007218 <HAL_RCCEx_GetPeriphCLKFreq+0xc04>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8007210:	f7fd fe38 	bl	8004e84 <HAL_RCC_GetSysClockFreq>
 8007214:	6378      	str	r0, [r7, #52]	@ 0x34
 8007216:	e3a5      	b.n	8007964 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 8007218:	4b5f      	ldr	r3, [pc, #380]	@ (8007398 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007220:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007224:	d106      	bne.n	8007234 <HAL_RCCEx_GetPeriphCLKFreq+0xc20>
 8007226:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007228:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800722c:	d102      	bne.n	8007234 <HAL_RCCEx_GetPeriphCLKFreq+0xc20>
    {
      frequency = HSI_VALUE;
 800722e:	4b5c      	ldr	r3, [pc, #368]	@ (80073a0 <HAL_RCCEx_GetPeriphCLKFreq+0xd8c>)
 8007230:	637b      	str	r3, [r7, #52]	@ 0x34
 8007232:	e397      	b.n	8007964 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C4CLKSOURCE_MSIK))
 8007234:	4b58      	ldr	r3, [pc, #352]	@ (8007398 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	f003 0320 	and.w	r3, r3, #32
 800723c:	2b20      	cmp	r3, #32
 800723e:	d11b      	bne.n	8007278 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
 8007240:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007242:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8007246:	d117      	bne.n	8007278 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007248:	4b53      	ldr	r3, [pc, #332]	@ (8007398 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 800724a:	689b      	ldr	r3, [r3, #8]
 800724c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007250:	2b00      	cmp	r3, #0
 8007252:	d005      	beq.n	8007260 <HAL_RCCEx_GetPeriphCLKFreq+0xc4c>
 8007254:	4b50      	ldr	r3, [pc, #320]	@ (8007398 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8007256:	689b      	ldr	r3, [r3, #8]
 8007258:	0e1b      	lsrs	r3, r3, #24
 800725a:	f003 030f 	and.w	r3, r3, #15
 800725e:	e006      	b.n	800726e <HAL_RCCEx_GetPeriphCLKFreq+0xc5a>
 8007260:	4b4d      	ldr	r3, [pc, #308]	@ (8007398 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8007262:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007266:	041b      	lsls	r3, r3, #16
 8007268:	0e1b      	lsrs	r3, r3, #24
 800726a:	f003 030f 	and.w	r3, r3, #15
 800726e:	4a4b      	ldr	r2, [pc, #300]	@ (800739c <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8007270:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007274:	637b      	str	r3, [r7, #52]	@ 0x34
 8007276:	e375      	b.n	8007964 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for I2C4 */
    else
    {
      frequency = 0U;
 8007278:	2300      	movs	r3, #0
 800727a:	637b      	str	r3, [r7, #52]	@ 0x34
 800727c:	e372      	b.n	8007964 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    {
      frequency = 0U;
    }
  }
#endif /* I2C6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM34)
 800727e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007282:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 8007286:	430b      	orrs	r3, r1
 8007288:	d164      	bne.n	8007354 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>
  {
    /* Get the current LPTIM34 source */
    srcclk = __HAL_RCC_GET_LPTIM34_SOURCE();
 800728a:	4b43      	ldr	r3, [pc, #268]	@ (8007398 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 800728c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007290:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007294:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM34CLKSOURCE_MSIK)
 8007296:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007298:	2b00      	cmp	r3, #0
 800729a:	d120      	bne.n	80072de <HAL_RCCEx_GetPeriphCLKFreq+0xcca>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800729c:	4b3e      	ldr	r3, [pc, #248]	@ (8007398 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	f003 0320 	and.w	r3, r3, #32
 80072a4:	2b20      	cmp	r3, #32
 80072a6:	d117      	bne.n	80072d8 <HAL_RCCEx_GetPeriphCLKFreq+0xcc4>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80072a8:	4b3b      	ldr	r3, [pc, #236]	@ (8007398 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 80072aa:	689b      	ldr	r3, [r3, #8]
 80072ac:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d005      	beq.n	80072c0 <HAL_RCCEx_GetPeriphCLKFreq+0xcac>
 80072b4:	4b38      	ldr	r3, [pc, #224]	@ (8007398 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 80072b6:	689b      	ldr	r3, [r3, #8]
 80072b8:	0e1b      	lsrs	r3, r3, #24
 80072ba:	f003 030f 	and.w	r3, r3, #15
 80072be:	e006      	b.n	80072ce <HAL_RCCEx_GetPeriphCLKFreq+0xcba>
 80072c0:	4b35      	ldr	r3, [pc, #212]	@ (8007398 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 80072c2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80072c6:	041b      	lsls	r3, r3, #16
 80072c8:	0e1b      	lsrs	r3, r3, #24
 80072ca:	f003 030f 	and.w	r3, r3, #15
 80072ce:	4a33      	ldr	r2, [pc, #204]	@ (800739c <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 80072d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80072d4:	637b      	str	r3, [r7, #52]	@ 0x34
 80072d6:	e345      	b.n	8007964 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = 0U;
 80072d8:	2300      	movs	r3, #0
 80072da:	637b      	str	r3, [r7, #52]	@ 0x34
 80072dc:	e342      	b.n	8007964 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSI))
 80072de:	4b2e      	ldr	r3, [pc, #184]	@ (8007398 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 80072e0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80072e4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80072e8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80072ec:	d112      	bne.n	8007314 <HAL_RCCEx_GetPeriphCLKFreq+0xd00>
 80072ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072f0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80072f4:	d10e      	bne.n	8007314 <HAL_RCCEx_GetPeriphCLKFreq+0xd00>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80072f6:	4b28      	ldr	r3, [pc, #160]	@ (8007398 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 80072f8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80072fc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007300:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007304:	d102      	bne.n	800730c <HAL_RCCEx_GetPeriphCLKFreq+0xcf8>
      {
        frequency = LSI_VALUE / 128U;
 8007306:	23fa      	movs	r3, #250	@ 0xfa
 8007308:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800730a:	e32b      	b.n	8007964 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = LSI_VALUE;
 800730c:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8007310:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007312:	e327      	b.n	8007964 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_HSI))
 8007314:	4b20      	ldr	r3, [pc, #128]	@ (8007398 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800731c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007320:	d106      	bne.n	8007330 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>
 8007322:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007324:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007328:	d102      	bne.n	8007330 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>
    {
      frequency = HSI_VALUE;
 800732a:	4b1d      	ldr	r3, [pc, #116]	@ (80073a0 <HAL_RCCEx_GetPeriphCLKFreq+0xd8c>)
 800732c:	637b      	str	r3, [r7, #52]	@ 0x34
 800732e:	e319      	b.n	8007964 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSE))
 8007330:	4b19      	ldr	r3, [pc, #100]	@ (8007398 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8007332:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007336:	f003 0302 	and.w	r3, r3, #2
 800733a:	2b02      	cmp	r3, #2
 800733c:	d107      	bne.n	800734e <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
 800733e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007340:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007344:	d103      	bne.n	800734e <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
    {
      frequency = LSE_VALUE;
 8007346:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800734a:	637b      	str	r3, [r7, #52]	@ 0x34
 800734c:	e30a      	b.n	8007964 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for LPTIM34 */
    else
    {
      frequency = 0U;
 800734e:	2300      	movs	r3, #0
 8007350:	637b      	str	r3, [r7, #52]	@ 0x34
 8007352:	e307      	b.n	8007964 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM1)
 8007354:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007358:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 800735c:	430b      	orrs	r3, r1
 800735e:	d16b      	bne.n	8007438 <HAL_RCCEx_GetPeriphCLKFreq+0xe24>
  {
    /* Get the current LPTIM1 source */
    srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8007360:	4b0d      	ldr	r3, [pc, #52]	@ (8007398 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8007362:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007366:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800736a:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM1CLKSOURCE_MSIK)
 800736c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800736e:	2b00      	cmp	r3, #0
 8007370:	d127      	bne.n	80073c2 <HAL_RCCEx_GetPeriphCLKFreq+0xdae>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8007372:	4b09      	ldr	r3, [pc, #36]	@ (8007398 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	f003 0320 	and.w	r3, r3, #32
 800737a:	2b20      	cmp	r3, #32
 800737c:	d11e      	bne.n	80073bc <HAL_RCCEx_GetPeriphCLKFreq+0xda8>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800737e:	4b06      	ldr	r3, [pc, #24]	@ (8007398 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8007380:	689b      	ldr	r3, [r3, #8]
 8007382:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007386:	2b00      	cmp	r3, #0
 8007388:	d00c      	beq.n	80073a4 <HAL_RCCEx_GetPeriphCLKFreq+0xd90>
 800738a:	4b03      	ldr	r3, [pc, #12]	@ (8007398 <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 800738c:	689b      	ldr	r3, [r3, #8]
 800738e:	0e1b      	lsrs	r3, r3, #24
 8007390:	f003 030f 	and.w	r3, r3, #15
 8007394:	e00d      	b.n	80073b2 <HAL_RCCEx_GetPeriphCLKFreq+0xd9e>
 8007396:	bf00      	nop
 8007398:	46020c00 	.word	0x46020c00
 800739c:	0800a77c 	.word	0x0800a77c
 80073a0:	00f42400 	.word	0x00f42400
 80073a4:	4b94      	ldr	r3, [pc, #592]	@ (80075f8 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 80073a6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80073aa:	041b      	lsls	r3, r3, #16
 80073ac:	0e1b      	lsrs	r3, r3, #24
 80073ae:	f003 030f 	and.w	r3, r3, #15
 80073b2:	4a92      	ldr	r2, [pc, #584]	@ (80075fc <HAL_RCCEx_GetPeriphCLKFreq+0xfe8>)
 80073b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80073b8:	637b      	str	r3, [r7, #52]	@ 0x34
 80073ba:	e2d3      	b.n	8007964 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = 0U;
 80073bc:	2300      	movs	r3, #0
 80073be:	637b      	str	r3, [r7, #52]	@ 0x34
 80073c0:	e2d0      	b.n	8007964 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSI))
 80073c2:	4b8d      	ldr	r3, [pc, #564]	@ (80075f8 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 80073c4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80073c8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80073cc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80073d0:	d112      	bne.n	80073f8 <HAL_RCCEx_GetPeriphCLKFreq+0xde4>
 80073d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073d4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80073d8:	d10e      	bne.n	80073f8 <HAL_RCCEx_GetPeriphCLKFreq+0xde4>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80073da:	4b87      	ldr	r3, [pc, #540]	@ (80075f8 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 80073dc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80073e0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80073e4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80073e8:	d102      	bne.n	80073f0 <HAL_RCCEx_GetPeriphCLKFreq+0xddc>
      {
        frequency = LSI_VALUE / 128U;
 80073ea:	23fa      	movs	r3, #250	@ 0xfa
 80073ec:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80073ee:	e2b9      	b.n	8007964 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = LSI_VALUE;
 80073f0:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80073f4:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80073f6:	e2b5      	b.n	8007964 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_HSI))
 80073f8:	4b7f      	ldr	r3, [pc, #508]	@ (80075f8 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007400:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007404:	d106      	bne.n	8007414 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>
 8007406:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007408:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800740c:	d102      	bne.n	8007414 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>
    {
      frequency = HSI_VALUE;
 800740e:	4b7c      	ldr	r3, [pc, #496]	@ (8007600 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8007410:	637b      	str	r3, [r7, #52]	@ 0x34
 8007412:	e2a7      	b.n	8007964 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSE))
 8007414:	4b78      	ldr	r3, [pc, #480]	@ (80075f8 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8007416:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800741a:	f003 0302 	and.w	r3, r3, #2
 800741e:	2b02      	cmp	r3, #2
 8007420:	d107      	bne.n	8007432 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
 8007422:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007424:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007428:	d103      	bne.n	8007432 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
    {
      frequency = LSE_VALUE;
 800742a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800742e:	637b      	str	r3, [r7, #52]	@ 0x34
 8007430:	e298      	b.n	8007964 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for LPTIM1 */
    else
    {
      frequency = 0U;
 8007432:	2300      	movs	r3, #0
 8007434:	637b      	str	r3, [r7, #52]	@ 0x34
 8007436:	e295      	b.n	8007964 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM2)
 8007438:	e9d7 2300 	ldrd	r2, r3, [r7]
 800743c:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 8007440:	430b      	orrs	r3, r1
 8007442:	d147      	bne.n	80074d4 <HAL_RCCEx_GetPeriphCLKFreq+0xec0>
  {
    /* Get the current LPTIM2 source */
    srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8007444:	4b6c      	ldr	r3, [pc, #432]	@ (80075f8 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8007446:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800744a:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 800744e:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM2CLKSOURCE_PCLK1)
 8007450:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007452:	2b00      	cmp	r3, #0
 8007454:	d103      	bne.n	800745e <HAL_RCCEx_GetPeriphCLKFreq+0xe4a>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8007456:	f7fd fe31 	bl	80050bc <HAL_RCC_GetPCLK1Freq>
 800745a:	6378      	str	r0, [r7, #52]	@ 0x34
 800745c:	e282      	b.n	8007964 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSI))
 800745e:	4b66      	ldr	r3, [pc, #408]	@ (80075f8 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8007460:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007464:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007468:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800746c:	d112      	bne.n	8007494 <HAL_RCCEx_GetPeriphCLKFreq+0xe80>
 800746e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007470:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007474:	d10e      	bne.n	8007494 <HAL_RCCEx_GetPeriphCLKFreq+0xe80>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007476:	4b60      	ldr	r3, [pc, #384]	@ (80075f8 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8007478:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800747c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007480:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007484:	d102      	bne.n	800748c <HAL_RCCEx_GetPeriphCLKFreq+0xe78>
      {
        frequency = LSI_VALUE / 128U;
 8007486:	23fa      	movs	r3, #250	@ 0xfa
 8007488:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800748a:	e26b      	b.n	8007964 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = LSI_VALUE;
 800748c:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8007490:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007492:	e267      	b.n	8007964 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_HSI))
 8007494:	4b58      	ldr	r3, [pc, #352]	@ (80075f8 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800749c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80074a0:	d106      	bne.n	80074b0 <HAL_RCCEx_GetPeriphCLKFreq+0xe9c>
 80074a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074a4:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80074a8:	d102      	bne.n	80074b0 <HAL_RCCEx_GetPeriphCLKFreq+0xe9c>
    {
      frequency = HSI_VALUE;
 80074aa:	4b55      	ldr	r3, [pc, #340]	@ (8007600 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80074ac:	637b      	str	r3, [r7, #52]	@ 0x34
 80074ae:	e259      	b.n	8007964 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSE))
 80074b0:	4b51      	ldr	r3, [pc, #324]	@ (80075f8 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 80074b2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80074b6:	f003 0302 	and.w	r3, r3, #2
 80074ba:	2b02      	cmp	r3, #2
 80074bc:	d107      	bne.n	80074ce <HAL_RCCEx_GetPeriphCLKFreq+0xeba>
 80074be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074c0:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80074c4:	d103      	bne.n	80074ce <HAL_RCCEx_GetPeriphCLKFreq+0xeba>
    {
      frequency = LSE_VALUE;
 80074c6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80074ca:	637b      	str	r3, [r7, #52]	@ 0x34
 80074cc:	e24a      	b.n	8007964 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for LPTIM2 */
    else
    {
      frequency = 0U;
 80074ce:	2300      	movs	r3, #0
 80074d0:	637b      	str	r3, [r7, #52]	@ 0x34
 80074d2:	e247      	b.n	8007964 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN1)
 80074d4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80074d8:	f102 4178 	add.w	r1, r2, #4160749568	@ 0xf8000000
 80074dc:	430b      	orrs	r3, r1
 80074de:	d12d      	bne.n	800753c <HAL_RCCEx_GetPeriphCLKFreq+0xf28>
  {
    /* Get the current FDCAN1 kernel source */
    srcclk = __HAL_RCC_GET_FDCAN1_SOURCE();
 80074e0:	4b45      	ldr	r3, [pc, #276]	@ (80075f8 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 80074e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80074e6:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 80074ea:	633b      	str	r3, [r7, #48]	@ 0x30

    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCAN1CLKSOURCE_HSE))
 80074ec:	4b42      	ldr	r3, [pc, #264]	@ (80075f8 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80074f4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80074f8:	d105      	bne.n	8007506 <HAL_RCCEx_GetPeriphCLKFreq+0xef2>
 80074fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d102      	bne.n	8007506 <HAL_RCCEx_GetPeriphCLKFreq+0xef2>
    {
      frequency = HSE_VALUE;
 8007500:	4b3f      	ldr	r3, [pc, #252]	@ (8007600 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8007502:	637b      	str	r3, [r7, #52]	@ 0x34
 8007504:	e22e      	b.n	8007964 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL1) /* PLL1 ? */
 8007506:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007508:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800750c:	d107      	bne.n	800751e <HAL_RCCEx_GetPeriphCLKFreq+0xf0a>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800750e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007512:	4618      	mov	r0, r3
 8007514:	f7fe fc70 	bl	8005df8 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_Q_Frequency;
 8007518:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800751a:	637b      	str	r3, [r7, #52]	@ 0x34
 800751c:	e222      	b.n	8007964 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL2) /* PLL2 ? */
 800751e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007520:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007524:	d107      	bne.n	8007536 <HAL_RCCEx_GetPeriphCLKFreq+0xf22>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007526:	f107 0318 	add.w	r3, r7, #24
 800752a:	4618      	mov	r0, r3
 800752c:	f7fe fdbe 	bl	80060ac <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_P_Frequency;
 8007530:	69bb      	ldr	r3, [r7, #24]
 8007532:	637b      	str	r3, [r7, #52]	@ 0x34
 8007534:	e216      	b.n	8007964 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for FDCAN1 */
    else
    {
      frequency = 0U;
 8007536:	2300      	movs	r3, #0
 8007538:	637b      	str	r3, [r7, #52]	@ 0x34
 800753a:	e213      	b.n	8007964 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI1)
 800753c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007540:	f5a2 0100 	sub.w	r1, r2, #8388608	@ 0x800000
 8007544:	430b      	orrs	r3, r1
 8007546:	d15d      	bne.n	8007604 <HAL_RCCEx_GetPeriphCLKFreq+0xff0>
  {
    /* Get the current SPI1 kernel source */
    srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 8007548:	4b2b      	ldr	r3, [pc, #172]	@ (80075f8 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 800754a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800754e:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8007552:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 8007554:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007556:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800755a:	d028      	beq.n	80075ae <HAL_RCCEx_GetPeriphCLKFreq+0xf9a>
 800755c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800755e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007562:	d845      	bhi.n	80075f0 <HAL_RCCEx_GetPeriphCLKFreq+0xfdc>
 8007564:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007566:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800756a:	d013      	beq.n	8007594 <HAL_RCCEx_GetPeriphCLKFreq+0xf80>
 800756c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800756e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007572:	d83d      	bhi.n	80075f0 <HAL_RCCEx_GetPeriphCLKFreq+0xfdc>
 8007574:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007576:	2b00      	cmp	r3, #0
 8007578:	d004      	beq.n	8007584 <HAL_RCCEx_GetPeriphCLKFreq+0xf70>
 800757a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800757c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007580:	d004      	beq.n	800758c <HAL_RCCEx_GetPeriphCLKFreq+0xf78>
 8007582:	e035      	b.n	80075f0 <HAL_RCCEx_GetPeriphCLKFreq+0xfdc>
    {
      case RCC_SPI1CLKSOURCE_PCLK2:

        frequency = HAL_RCC_GetPCLK2Freq();
 8007584:	f7fd fdae 	bl	80050e4 <HAL_RCC_GetPCLK2Freq>
 8007588:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800758a:	e1eb      	b.n	8007964 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI1CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800758c:	f7fd fc7a 	bl	8004e84 <HAL_RCC_GetSysClockFreq>
 8007590:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8007592:	e1e7      	b.n	8007964 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI1CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007594:	4b18      	ldr	r3, [pc, #96]	@ (80075f8 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800759c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80075a0:	d102      	bne.n	80075a8 <HAL_RCCEx_GetPeriphCLKFreq+0xf94>
        {
          frequency = HSI_VALUE;
 80075a2:	4b17      	ldr	r3, [pc, #92]	@ (8007600 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80075a4:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80075a6:	e1dd      	b.n	8007964 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 80075a8:	2300      	movs	r3, #0
 80075aa:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80075ac:	e1da      	b.n	8007964 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80075ae:	4b12      	ldr	r3, [pc, #72]	@ (80075f8 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	f003 0320 	and.w	r3, r3, #32
 80075b6:	2b20      	cmp	r3, #32
 80075b8:	d117      	bne.n	80075ea <HAL_RCCEx_GetPeriphCLKFreq+0xfd6>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80075ba:	4b0f      	ldr	r3, [pc, #60]	@ (80075f8 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 80075bc:	689b      	ldr	r3, [r3, #8]
 80075be:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d005      	beq.n	80075d2 <HAL_RCCEx_GetPeriphCLKFreq+0xfbe>
 80075c6:	4b0c      	ldr	r3, [pc, #48]	@ (80075f8 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 80075c8:	689b      	ldr	r3, [r3, #8]
 80075ca:	0e1b      	lsrs	r3, r3, #24
 80075cc:	f003 030f 	and.w	r3, r3, #15
 80075d0:	e006      	b.n	80075e0 <HAL_RCCEx_GetPeriphCLKFreq+0xfcc>
 80075d2:	4b09      	ldr	r3, [pc, #36]	@ (80075f8 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 80075d4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80075d8:	041b      	lsls	r3, r3, #16
 80075da:	0e1b      	lsrs	r3, r3, #24
 80075dc:	f003 030f 	and.w	r3, r3, #15
 80075e0:	4a06      	ldr	r2, [pc, #24]	@ (80075fc <HAL_RCCEx_GetPeriphCLKFreq+0xfe8>)
 80075e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80075e6:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80075e8:	e1bc      	b.n	8007964 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 80075ea:	2300      	movs	r3, #0
 80075ec:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80075ee:	e1b9      	b.n	8007964 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default:

        frequency = 0U;
 80075f0:	2300      	movs	r3, #0
 80075f2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80075f4:	e1b6      	b.n	8007964 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
 80075f6:	bf00      	nop
 80075f8:	46020c00 	.word	0x46020c00
 80075fc:	0800a77c 	.word	0x0800a77c
 8007600:	00f42400 	.word	0x00f42400
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI2)
 8007604:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007608:	f102 417f 	add.w	r1, r2, #4278190080	@ 0xff000000
 800760c:	430b      	orrs	r3, r1
 800760e:	d156      	bne.n	80076be <HAL_RCCEx_GetPeriphCLKFreq+0x10aa>
  {
    /* Get the current SPI2 kernel source */
    srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 8007610:	4ba5      	ldr	r3, [pc, #660]	@ (80078a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8007612:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007616:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800761a:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 800761c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800761e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007622:	d028      	beq.n	8007676 <HAL_RCCEx_GetPeriphCLKFreq+0x1062>
 8007624:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007626:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800762a:	d845      	bhi.n	80076b8 <HAL_RCCEx_GetPeriphCLKFreq+0x10a4>
 800762c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800762e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007632:	d013      	beq.n	800765c <HAL_RCCEx_GetPeriphCLKFreq+0x1048>
 8007634:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007636:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800763a:	d83d      	bhi.n	80076b8 <HAL_RCCEx_GetPeriphCLKFreq+0x10a4>
 800763c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800763e:	2b00      	cmp	r3, #0
 8007640:	d004      	beq.n	800764c <HAL_RCCEx_GetPeriphCLKFreq+0x1038>
 8007642:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007644:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007648:	d004      	beq.n	8007654 <HAL_RCCEx_GetPeriphCLKFreq+0x1040>
 800764a:	e035      	b.n	80076b8 <HAL_RCCEx_GetPeriphCLKFreq+0x10a4>
    {
      case RCC_SPI2CLKSOURCE_PCLK1:

        frequency = HAL_RCC_GetPCLK1Freq();
 800764c:	f7fd fd36 	bl	80050bc <HAL_RCC_GetPCLK1Freq>
 8007650:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8007652:	e187      	b.n	8007964 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI2CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8007654:	f7fd fc16 	bl	8004e84 <HAL_RCC_GetSysClockFreq>
 8007658:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800765a:	e183      	b.n	8007964 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI2CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800765c:	4b92      	ldr	r3, [pc, #584]	@ (80078a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007664:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007668:	d102      	bne.n	8007670 <HAL_RCCEx_GetPeriphCLKFreq+0x105c>
        {
          frequency = HSI_VALUE;
 800766a:	4b90      	ldr	r3, [pc, #576]	@ (80078ac <HAL_RCCEx_GetPeriphCLKFreq+0x1298>)
 800766c:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800766e:	e179      	b.n	8007964 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8007670:	2300      	movs	r3, #0
 8007672:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007674:	e176      	b.n	8007964 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI2CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8007676:	4b8c      	ldr	r3, [pc, #560]	@ (80078a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	f003 0320 	and.w	r3, r3, #32
 800767e:	2b20      	cmp	r3, #32
 8007680:	d117      	bne.n	80076b2 <HAL_RCCEx_GetPeriphCLKFreq+0x109e>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007682:	4b89      	ldr	r3, [pc, #548]	@ (80078a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8007684:	689b      	ldr	r3, [r3, #8]
 8007686:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800768a:	2b00      	cmp	r3, #0
 800768c:	d005      	beq.n	800769a <HAL_RCCEx_GetPeriphCLKFreq+0x1086>
 800768e:	4b86      	ldr	r3, [pc, #536]	@ (80078a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8007690:	689b      	ldr	r3, [r3, #8]
 8007692:	0e1b      	lsrs	r3, r3, #24
 8007694:	f003 030f 	and.w	r3, r3, #15
 8007698:	e006      	b.n	80076a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1094>
 800769a:	4b83      	ldr	r3, [pc, #524]	@ (80078a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 800769c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80076a0:	041b      	lsls	r3, r3, #16
 80076a2:	0e1b      	lsrs	r3, r3, #24
 80076a4:	f003 030f 	and.w	r3, r3, #15
 80076a8:	4a81      	ldr	r2, [pc, #516]	@ (80078b0 <HAL_RCCEx_GetPeriphCLKFreq+0x129c>)
 80076aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80076ae:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80076b0:	e158      	b.n	8007964 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 80076b2:	2300      	movs	r3, #0
 80076b4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80076b6:	e155      	b.n	8007964 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default:

        frequency = 0U;
 80076b8:	2300      	movs	r3, #0
 80076ba:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80076bc:	e152      	b.n	8007964 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI3)
 80076be:	e9d7 2300 	ldrd	r2, r3, [r7]
 80076c2:	f102 417e 	add.w	r1, r2, #4261412864	@ 0xfe000000
 80076c6:	430b      	orrs	r3, r1
 80076c8:	d177      	bne.n	80077ba <HAL_RCCEx_GetPeriphCLKFreq+0x11a6>
  {
    /* Get the current SPI3 kernel source */
    srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 80076ca:	4b77      	ldr	r3, [pc, #476]	@ (80078a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 80076cc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80076d0:	f003 0318 	and.w	r3, r3, #24
 80076d4:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 80076d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076d8:	2b18      	cmp	r3, #24
 80076da:	d86b      	bhi.n	80077b4 <HAL_RCCEx_GetPeriphCLKFreq+0x11a0>
 80076dc:	a201      	add	r2, pc, #4	@ (adr r2, 80076e4 <HAL_RCCEx_GetPeriphCLKFreq+0x10d0>)
 80076de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076e2:	bf00      	nop
 80076e4:	08007749 	.word	0x08007749
 80076e8:	080077b5 	.word	0x080077b5
 80076ec:	080077b5 	.word	0x080077b5
 80076f0:	080077b5 	.word	0x080077b5
 80076f4:	080077b5 	.word	0x080077b5
 80076f8:	080077b5 	.word	0x080077b5
 80076fc:	080077b5 	.word	0x080077b5
 8007700:	080077b5 	.word	0x080077b5
 8007704:	08007751 	.word	0x08007751
 8007708:	080077b5 	.word	0x080077b5
 800770c:	080077b5 	.word	0x080077b5
 8007710:	080077b5 	.word	0x080077b5
 8007714:	080077b5 	.word	0x080077b5
 8007718:	080077b5 	.word	0x080077b5
 800771c:	080077b5 	.word	0x080077b5
 8007720:	080077b5 	.word	0x080077b5
 8007724:	08007759 	.word	0x08007759
 8007728:	080077b5 	.word	0x080077b5
 800772c:	080077b5 	.word	0x080077b5
 8007730:	080077b5 	.word	0x080077b5
 8007734:	080077b5 	.word	0x080077b5
 8007738:	080077b5 	.word	0x080077b5
 800773c:	080077b5 	.word	0x080077b5
 8007740:	080077b5 	.word	0x080077b5
 8007744:	08007773 	.word	0x08007773
    {
      case RCC_SPI3CLKSOURCE_PCLK3:

        frequency = HAL_RCC_GetPCLK3Freq();
 8007748:	f7fd fce0 	bl	800510c <HAL_RCC_GetPCLK3Freq>
 800774c:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800774e:	e109      	b.n	8007964 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI3CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8007750:	f7fd fb98 	bl	8004e84 <HAL_RCC_GetSysClockFreq>
 8007754:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8007756:	e105      	b.n	8007964 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI3CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007758:	4b53      	ldr	r3, [pc, #332]	@ (80078a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007760:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007764:	d102      	bne.n	800776c <HAL_RCCEx_GetPeriphCLKFreq+0x1158>
        {
          frequency = HSI_VALUE;
 8007766:	4b51      	ldr	r3, [pc, #324]	@ (80078ac <HAL_RCCEx_GetPeriphCLKFreq+0x1298>)
 8007768:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800776a:	e0fb      	b.n	8007964 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 800776c:	2300      	movs	r3, #0
 800776e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007770:	e0f8      	b.n	8007964 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI3CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8007772:	4b4d      	ldr	r3, [pc, #308]	@ (80078a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	f003 0320 	and.w	r3, r3, #32
 800777a:	2b20      	cmp	r3, #32
 800777c:	d117      	bne.n	80077ae <HAL_RCCEx_GetPeriphCLKFreq+0x119a>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800777e:	4b4a      	ldr	r3, [pc, #296]	@ (80078a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8007780:	689b      	ldr	r3, [r3, #8]
 8007782:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007786:	2b00      	cmp	r3, #0
 8007788:	d005      	beq.n	8007796 <HAL_RCCEx_GetPeriphCLKFreq+0x1182>
 800778a:	4b47      	ldr	r3, [pc, #284]	@ (80078a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 800778c:	689b      	ldr	r3, [r3, #8]
 800778e:	0e1b      	lsrs	r3, r3, #24
 8007790:	f003 030f 	and.w	r3, r3, #15
 8007794:	e006      	b.n	80077a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1190>
 8007796:	4b44      	ldr	r3, [pc, #272]	@ (80078a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8007798:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800779c:	041b      	lsls	r3, r3, #16
 800779e:	0e1b      	lsrs	r3, r3, #24
 80077a0:	f003 030f 	and.w	r3, r3, #15
 80077a4:	4a42      	ldr	r2, [pc, #264]	@ (80078b0 <HAL_RCCEx_GetPeriphCLKFreq+0x129c>)
 80077a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80077aa:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80077ac:	e0da      	b.n	8007964 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 80077ae:	2300      	movs	r3, #0
 80077b0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80077b2:	e0d7      	b.n	8007964 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default:

        frequency = 0U;
 80077b4:	2300      	movs	r3, #0
 80077b6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80077b8:	e0d4      	b.n	8007964 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_OSPI)
 80077ba:	e9d7 2300 	ldrd	r2, r3, [r7]
 80077be:	f102 417c 	add.w	r1, r2, #4227858432	@ 0xfc000000
 80077c2:	430b      	orrs	r3, r1
 80077c4:	d155      	bne.n	8007872 <HAL_RCCEx_GetPeriphCLKFreq+0x125e>
  {
    /* Get the current OSPI kernel source */
    srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 80077c6:	4b38      	ldr	r3, [pc, #224]	@ (80078a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 80077c8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80077cc:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 80077d0:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 80077d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077d4:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80077d8:	d013      	beq.n	8007802 <HAL_RCCEx_GetPeriphCLKFreq+0x11ee>
 80077da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077dc:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80077e0:	d844      	bhi.n	800786c <HAL_RCCEx_GetPeriphCLKFreq+0x1258>
 80077e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077e4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80077e8:	d013      	beq.n	8007812 <HAL_RCCEx_GetPeriphCLKFreq+0x11fe>
 80077ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077ec:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80077f0:	d83c      	bhi.n	800786c <HAL_RCCEx_GetPeriphCLKFreq+0x1258>
 80077f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d014      	beq.n	8007822 <HAL_RCCEx_GetPeriphCLKFreq+0x120e>
 80077f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077fa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80077fe:	d014      	beq.n	800782a <HAL_RCCEx_GetPeriphCLKFreq+0x1216>
 8007800:	e034      	b.n	800786c <HAL_RCCEx_GetPeriphCLKFreq+0x1258>
    {
      case RCC_OSPICLKSOURCE_PLL2:

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007802:	f107 0318 	add.w	r3, r7, #24
 8007806:	4618      	mov	r0, r3
 8007808:	f7fe fc50 	bl	80060ac <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 800780c:	69fb      	ldr	r3, [r7, #28]
 800780e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007810:	e0a8      	b.n	8007964 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_OSPICLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007812:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007816:	4618      	mov	r0, r3
 8007818:	f7fe faee 	bl	8005df8 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 800781c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800781e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007820:	e0a0      	b.n	8007964 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_OSPICLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8007822:	f7fd fb2f 	bl	8004e84 <HAL_RCC_GetSysClockFreq>
 8007826:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8007828:	e09c      	b.n	8007964 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_OSPICLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800782a:	4b1f      	ldr	r3, [pc, #124]	@ (80078a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	f003 0320 	and.w	r3, r3, #32
 8007832:	2b20      	cmp	r3, #32
 8007834:	d117      	bne.n	8007866 <HAL_RCCEx_GetPeriphCLKFreq+0x1252>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007836:	4b1c      	ldr	r3, [pc, #112]	@ (80078a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8007838:	689b      	ldr	r3, [r3, #8]
 800783a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800783e:	2b00      	cmp	r3, #0
 8007840:	d005      	beq.n	800784e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
 8007842:	4b19      	ldr	r3, [pc, #100]	@ (80078a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8007844:	689b      	ldr	r3, [r3, #8]
 8007846:	0e1b      	lsrs	r3, r3, #24
 8007848:	f003 030f 	and.w	r3, r3, #15
 800784c:	e006      	b.n	800785c <HAL_RCCEx_GetPeriphCLKFreq+0x1248>
 800784e:	4b16      	ldr	r3, [pc, #88]	@ (80078a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8007850:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007854:	041b      	lsls	r3, r3, #16
 8007856:	0e1b      	lsrs	r3, r3, #24
 8007858:	f003 030f 	and.w	r3, r3, #15
 800785c:	4a14      	ldr	r2, [pc, #80]	@ (80078b0 <HAL_RCCEx_GetPeriphCLKFreq+0x129c>)
 800785e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007862:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8007864:	e07e      	b.n	8007964 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8007866:	2300      	movs	r3, #0
 8007868:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800786a:	e07b      	b.n	8007964 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default:

        frequency = 0U;
 800786c:	2300      	movs	r3, #0
 800786e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007870:	e078      	b.n	8007964 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
        frequency = 0U;
        break;
    }
  }
#endif /* defined(HSPI1) */
  else if (PeriphClk == RCC_PERIPHCLK_DAC1)
 8007872:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007876:	f102 4170 	add.w	r1, r2, #4026531840	@ 0xf0000000
 800787a:	430b      	orrs	r3, r1
 800787c:	d138      	bne.n	80078f0 <HAL_RCCEx_GetPeriphCLKFreq+0x12dc>
  {
    /* Get the current DAC1 kernel source */
    srcclk = __HAL_RCC_GET_DAC1_SOURCE();
 800787e:	4b0a      	ldr	r3, [pc, #40]	@ (80078a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8007880:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007884:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007888:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if DAC1 clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSE))
 800788a:	4b07      	ldr	r3, [pc, #28]	@ (80078a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 800788c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007890:	f003 0302 	and.w	r3, r3, #2
 8007894:	2b02      	cmp	r3, #2
 8007896:	d10d      	bne.n	80078b4 <HAL_RCCEx_GetPeriphCLKFreq+0x12a0>
 8007898:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800789a:	2b00      	cmp	r3, #0
 800789c:	d10a      	bne.n	80078b4 <HAL_RCCEx_GetPeriphCLKFreq+0x12a0>
    {
      frequency = LSE_VALUE;
 800789e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80078a2:	637b      	str	r3, [r7, #52]	@ 0x34
 80078a4:	e05e      	b.n	8007964 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
 80078a6:	bf00      	nop
 80078a8:	46020c00 	.word	0x46020c00
 80078ac:	00f42400 	.word	0x00f42400
 80078b0:	0800a77c 	.word	0x0800a77c
    }
    /* Check if LSI is ready and if DAC1 clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSI))
 80078b4:	4b2e      	ldr	r3, [pc, #184]	@ (8007970 <HAL_RCCEx_GetPeriphCLKFreq+0x135c>)
 80078b6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80078ba:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80078be:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80078c2:	d112      	bne.n	80078ea <HAL_RCCEx_GetPeriphCLKFreq+0x12d6>
 80078c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078c6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80078ca:	d10e      	bne.n	80078ea <HAL_RCCEx_GetPeriphCLKFreq+0x12d6>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80078cc:	4b28      	ldr	r3, [pc, #160]	@ (8007970 <HAL_RCCEx_GetPeriphCLKFreq+0x135c>)
 80078ce:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80078d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80078d6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80078da:	d102      	bne.n	80078e2 <HAL_RCCEx_GetPeriphCLKFreq+0x12ce>
      {
        frequency = LSI_VALUE / 128U;
 80078dc:	23fa      	movs	r3, #250	@ 0xfa
 80078de:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80078e0:	e040      	b.n	8007964 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = LSI_VALUE;
 80078e2:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80078e6:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80078e8:	e03c      	b.n	8007964 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    /* Clock not enabled for DAC1*/
    else
    {
      frequency = 0U;
 80078ea:	2300      	movs	r3, #0
 80078ec:	637b      	str	r3, [r7, #52]	@ 0x34
 80078ee:	e039      	b.n	8007964 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }

  }
  else if (PeriphClk == RCC_PERIPHCLK_RNG)
 80078f0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80078f4:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 80078f8:	430b      	orrs	r3, r1
 80078fa:	d131      	bne.n	8007960 <HAL_RCCEx_GetPeriphCLKFreq+0x134c>
  {
    /* Get the current RNG kernel source */
    srcclk = __HAL_RCC_GET_RNG_SOURCE();
 80078fc:	4b1c      	ldr	r3, [pc, #112]	@ (8007970 <HAL_RCCEx_GetPeriphCLKFreq+0x135c>)
 80078fe:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007902:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8007906:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if HSI48 is ready and if RNG clock selection is HSI48 */
    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 8007908:	4b19      	ldr	r3, [pc, #100]	@ (8007970 <HAL_RCCEx_GetPeriphCLKFreq+0x135c>)
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007910:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007914:	d105      	bne.n	8007922 <HAL_RCCEx_GetPeriphCLKFreq+0x130e>
 8007916:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007918:	2b00      	cmp	r3, #0
 800791a:	d102      	bne.n	8007922 <HAL_RCCEx_GetPeriphCLKFreq+0x130e>
    {
      frequency = HSI48_VALUE;
 800791c:	4b15      	ldr	r3, [pc, #84]	@ (8007974 <HAL_RCCEx_GetPeriphCLKFreq+0x1360>)
 800791e:	637b      	str	r3, [r7, #52]	@ 0x34
 8007920:	e020      	b.n	8007964 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }

    /* Check if HSI48 is ready and if RNG clock selection is HSI48_DIV2 */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48_DIV2))
 8007922:	4b13      	ldr	r3, [pc, #76]	@ (8007970 <HAL_RCCEx_GetPeriphCLKFreq+0x135c>)
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800792a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800792e:	d106      	bne.n	800793e <HAL_RCCEx_GetPeriphCLKFreq+0x132a>
 8007930:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007932:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007936:	d102      	bne.n	800793e <HAL_RCCEx_GetPeriphCLKFreq+0x132a>
    {
      frequency = HSI48_VALUE >> 1U ;
 8007938:	4b0f      	ldr	r3, [pc, #60]	@ (8007978 <HAL_RCCEx_GetPeriphCLKFreq+0x1364>)
 800793a:	637b      	str	r3, [r7, #52]	@ 0x34
 800793c:	e012      	b.n	8007964 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }

    /* Check if HSI is ready and if RNG clock selection is HSI */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI))
 800793e:	4b0c      	ldr	r3, [pc, #48]	@ (8007970 <HAL_RCCEx_GetPeriphCLKFreq+0x135c>)
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007946:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800794a:	d106      	bne.n	800795a <HAL_RCCEx_GetPeriphCLKFreq+0x1346>
 800794c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800794e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007952:	d102      	bne.n	800795a <HAL_RCCEx_GetPeriphCLKFreq+0x1346>
    {
      frequency = HSI_VALUE;
 8007954:	4b09      	ldr	r3, [pc, #36]	@ (800797c <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 8007956:	637b      	str	r3, [r7, #52]	@ 0x34
 8007958:	e004      	b.n	8007964 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for RNG */
    else
    {
      frequency = 0U;
 800795a:	2300      	movs	r3, #0
 800795c:	637b      	str	r3, [r7, #52]	@ 0x34
 800795e:	e001      	b.n	8007964 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
  }
#endif /* defined(USB_OTG_HS) */

  else
  {
    frequency = 0;
 8007960:	2300      	movs	r3, #0
 8007962:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  return (frequency);
 8007964:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8007966:	4618      	mov	r0, r3
 8007968:	3738      	adds	r7, #56	@ 0x38
 800796a:	46bd      	mov	sp, r7
 800796c:	bd80      	pop	{r7, pc}
 800796e:	bf00      	nop
 8007970:	46020c00 	.word	0x46020c00
 8007974:	02dc6c00 	.word	0x02dc6c00
 8007978:	016e3600 	.word	0x016e3600
 800797c:	00f42400 	.word	0x00f42400

08007980 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 8007980:	b580      	push	{r7, lr}
 8007982:	b084      	sub	sp, #16
 8007984:	af00      	add	r7, sp, #0
 8007986:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll2->PLL2P));
  assert_param(IS_RCC_PLLQ_VALUE(pll2->PLL2Q));
  assert_param(IS_RCC_PLLR_VALUE(pll2->PLL2R));

  /* Disable  PLL2 */
  __HAL_RCC_PLL2_DISABLE();
 8007988:	4b47      	ldr	r3, [pc, #284]	@ (8007aa8 <RCCEx_PLL2_Config+0x128>)
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	4a46      	ldr	r2, [pc, #280]	@ (8007aa8 <RCCEx_PLL2_Config+0x128>)
 800798e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007992:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8007994:	f7fa f950 	bl	8001c38 <HAL_GetTick>
 8007998:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800799a:	e008      	b.n	80079ae <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800799c:	f7fa f94c 	bl	8001c38 <HAL_GetTick>
 80079a0:	4602      	mov	r2, r0
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	1ad3      	subs	r3, r2, r3
 80079a6:	2b02      	cmp	r3, #2
 80079a8:	d901      	bls.n	80079ae <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 80079aa:	2303      	movs	r3, #3
 80079ac:	e077      	b.n	8007a9e <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80079ae:	4b3e      	ldr	r3, [pc, #248]	@ (8007aa8 <RCCEx_PLL2_Config+0x128>)
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d1f0      	bne.n	800799c <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 80079ba:	4b3b      	ldr	r3, [pc, #236]	@ (8007aa8 <RCCEx_PLL2_Config+0x128>)
 80079bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80079be:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80079c2:	f023 0303 	bic.w	r3, r3, #3
 80079c6:	687a      	ldr	r2, [r7, #4]
 80079c8:	6811      	ldr	r1, [r2, #0]
 80079ca:	687a      	ldr	r2, [r7, #4]
 80079cc:	6852      	ldr	r2, [r2, #4]
 80079ce:	3a01      	subs	r2, #1
 80079d0:	0212      	lsls	r2, r2, #8
 80079d2:	430a      	orrs	r2, r1
 80079d4:	4934      	ldr	r1, [pc, #208]	@ (8007aa8 <RCCEx_PLL2_Config+0x128>)
 80079d6:	4313      	orrs	r3, r2
 80079d8:	62cb      	str	r3, [r1, #44]	@ 0x2c
 80079da:	4b33      	ldr	r3, [pc, #204]	@ (8007aa8 <RCCEx_PLL2_Config+0x128>)
 80079dc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80079de:	4b33      	ldr	r3, [pc, #204]	@ (8007aac <RCCEx_PLL2_Config+0x12c>)
 80079e0:	4013      	ands	r3, r2
 80079e2:	687a      	ldr	r2, [r7, #4]
 80079e4:	6892      	ldr	r2, [r2, #8]
 80079e6:	3a01      	subs	r2, #1
 80079e8:	f3c2 0108 	ubfx	r1, r2, #0, #9
 80079ec:	687a      	ldr	r2, [r7, #4]
 80079ee:	68d2      	ldr	r2, [r2, #12]
 80079f0:	3a01      	subs	r2, #1
 80079f2:	0252      	lsls	r2, r2, #9
 80079f4:	b292      	uxth	r2, r2
 80079f6:	4311      	orrs	r1, r2
 80079f8:	687a      	ldr	r2, [r7, #4]
 80079fa:	6912      	ldr	r2, [r2, #16]
 80079fc:	3a01      	subs	r2, #1
 80079fe:	0412      	lsls	r2, r2, #16
 8007a00:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8007a04:	4311      	orrs	r1, r2
 8007a06:	687a      	ldr	r2, [r7, #4]
 8007a08:	6952      	ldr	r2, [r2, #20]
 8007a0a:	3a01      	subs	r2, #1
 8007a0c:	0612      	lsls	r2, r2, #24
 8007a0e:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8007a12:	430a      	orrs	r2, r1
 8007a14:	4924      	ldr	r1, [pc, #144]	@ (8007aa8 <RCCEx_PLL2_Config+0x128>)
 8007a16:	4313      	orrs	r3, r2
 8007a18:	63cb      	str	r3, [r1, #60]	@ 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 8007a1a:	4b23      	ldr	r3, [pc, #140]	@ (8007aa8 <RCCEx_PLL2_Config+0x128>)
 8007a1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a1e:	f023 020c 	bic.w	r2, r3, #12
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	699b      	ldr	r3, [r3, #24]
 8007a26:	4920      	ldr	r1, [pc, #128]	@ (8007aa8 <RCCEx_PLL2_Config+0x128>)
 8007a28:	4313      	orrs	r3, r2
 8007a2a:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2CLKOUT_ENABLE(pll2->PLL2ClockOut);
 8007a2c:	4b1e      	ldr	r3, [pc, #120]	@ (8007aa8 <RCCEx_PLL2_Config+0x128>)
 8007a2e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	6a1b      	ldr	r3, [r3, #32]
 8007a34:	491c      	ldr	r1, [pc, #112]	@ (8007aa8 <RCCEx_PLL2_Config+0x128>)
 8007a36:	4313      	orrs	r3, r2
 8007a38:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Disable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_DISABLE();
 8007a3a:	4b1b      	ldr	r3, [pc, #108]	@ (8007aa8 <RCCEx_PLL2_Config+0x128>)
 8007a3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a3e:	4a1a      	ldr	r2, [pc, #104]	@ (8007aa8 <RCCEx_PLL2_Config+0x128>)
 8007a40:	f023 0310 	bic.w	r3, r3, #16
 8007a44:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8007a46:	4b18      	ldr	r3, [pc, #96]	@ (8007aa8 <RCCEx_PLL2_Config+0x128>)
 8007a48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a4a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007a4e:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8007a52:	687a      	ldr	r2, [r7, #4]
 8007a54:	69d2      	ldr	r2, [r2, #28]
 8007a56:	00d2      	lsls	r2, r2, #3
 8007a58:	4913      	ldr	r1, [pc, #76]	@ (8007aa8 <RCCEx_PLL2_Config+0x128>)
 8007a5a:	4313      	orrs	r3, r2
 8007a5c:	640b      	str	r3, [r1, #64]	@ 0x40

  /* Enable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_ENABLE();
 8007a5e:	4b12      	ldr	r3, [pc, #72]	@ (8007aa8 <RCCEx_PLL2_Config+0x128>)
 8007a60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a62:	4a11      	ldr	r2, [pc, #68]	@ (8007aa8 <RCCEx_PLL2_Config+0x128>)
 8007a64:	f043 0310 	orr.w	r3, r3, #16
 8007a68:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Enable  PLL2 */
  __HAL_RCC_PLL2_ENABLE();
 8007a6a:	4b0f      	ldr	r3, [pc, #60]	@ (8007aa8 <RCCEx_PLL2_Config+0x128>)
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	4a0e      	ldr	r2, [pc, #56]	@ (8007aa8 <RCCEx_PLL2_Config+0x128>)
 8007a70:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8007a74:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8007a76:	f7fa f8df 	bl	8001c38 <HAL_GetTick>
 8007a7a:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007a7c:	e008      	b.n	8007a90 <RCCEx_PLL2_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007a7e:	f7fa f8db 	bl	8001c38 <HAL_GetTick>
 8007a82:	4602      	mov	r2, r0
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	1ad3      	subs	r3, r2, r3
 8007a88:	2b02      	cmp	r3, #2
 8007a8a:	d901      	bls.n	8007a90 <RCCEx_PLL2_Config+0x110>
    {
      return HAL_TIMEOUT;
 8007a8c:	2303      	movs	r3, #3
 8007a8e:	e006      	b.n	8007a9e <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007a90:	4b05      	ldr	r3, [pc, #20]	@ (8007aa8 <RCCEx_PLL2_Config+0x128>)
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d0f0      	beq.n	8007a7e <RCCEx_PLL2_Config+0xfe>
    }
  }
  return HAL_OK;
 8007a9c:	2300      	movs	r3, #0

}
 8007a9e:	4618      	mov	r0, r3
 8007aa0:	3710      	adds	r7, #16
 8007aa2:	46bd      	mov	sp, r7
 8007aa4:	bd80      	pop	{r7, pc}
 8007aa6:	bf00      	nop
 8007aa8:	46020c00 	.word	0x46020c00
 8007aac:	80800000 	.word	0x80800000

08007ab0 <RCCEx_PLL3_Config>:
  *         contains the configuration parameters as well as VCI clock ranges.
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 8007ab0:	b580      	push	{r7, lr}
 8007ab2:	b084      	sub	sp, #16
 8007ab4:	af00      	add	r7, sp, #0
 8007ab6:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll3->PLL3P));
  assert_param(IS_RCC_PLLQ_VALUE(pll3->PLL3Q));
  assert_param(IS_RCC_PLLR_VALUE(pll3->PLL3R));

  /* Disable  PLL3 */
  __HAL_RCC_PLL3_DISABLE();
 8007ab8:	4b47      	ldr	r3, [pc, #284]	@ (8007bd8 <RCCEx_PLL3_Config+0x128>)
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	4a46      	ldr	r2, [pc, #280]	@ (8007bd8 <RCCEx_PLL3_Config+0x128>)
 8007abe:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007ac2:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8007ac4:	f7fa f8b8 	bl	8001c38 <HAL_GetTick>
 8007ac8:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007aca:	e008      	b.n	8007ade <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007acc:	f7fa f8b4 	bl	8001c38 <HAL_GetTick>
 8007ad0:	4602      	mov	r2, r0
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	1ad3      	subs	r3, r2, r3
 8007ad6:	2b02      	cmp	r3, #2
 8007ad8:	d901      	bls.n	8007ade <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8007ada:	2303      	movs	r3, #3
 8007adc:	e077      	b.n	8007bce <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007ade:	4b3e      	ldr	r3, [pc, #248]	@ (8007bd8 <RCCEx_PLL3_Config+0x128>)
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d1f0      	bne.n	8007acc <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 8007aea:	4b3b      	ldr	r3, [pc, #236]	@ (8007bd8 <RCCEx_PLL3_Config+0x128>)
 8007aec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007aee:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8007af2:	f023 0303 	bic.w	r3, r3, #3
 8007af6:	687a      	ldr	r2, [r7, #4]
 8007af8:	6811      	ldr	r1, [r2, #0]
 8007afa:	687a      	ldr	r2, [r7, #4]
 8007afc:	6852      	ldr	r2, [r2, #4]
 8007afe:	3a01      	subs	r2, #1
 8007b00:	0212      	lsls	r2, r2, #8
 8007b02:	430a      	orrs	r2, r1
 8007b04:	4934      	ldr	r1, [pc, #208]	@ (8007bd8 <RCCEx_PLL3_Config+0x128>)
 8007b06:	4313      	orrs	r3, r2
 8007b08:	630b      	str	r3, [r1, #48]	@ 0x30
 8007b0a:	4b33      	ldr	r3, [pc, #204]	@ (8007bd8 <RCCEx_PLL3_Config+0x128>)
 8007b0c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007b0e:	4b33      	ldr	r3, [pc, #204]	@ (8007bdc <RCCEx_PLL3_Config+0x12c>)
 8007b10:	4013      	ands	r3, r2
 8007b12:	687a      	ldr	r2, [r7, #4]
 8007b14:	6892      	ldr	r2, [r2, #8]
 8007b16:	3a01      	subs	r2, #1
 8007b18:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8007b1c:	687a      	ldr	r2, [r7, #4]
 8007b1e:	68d2      	ldr	r2, [r2, #12]
 8007b20:	3a01      	subs	r2, #1
 8007b22:	0252      	lsls	r2, r2, #9
 8007b24:	b292      	uxth	r2, r2
 8007b26:	4311      	orrs	r1, r2
 8007b28:	687a      	ldr	r2, [r7, #4]
 8007b2a:	6912      	ldr	r2, [r2, #16]
 8007b2c:	3a01      	subs	r2, #1
 8007b2e:	0412      	lsls	r2, r2, #16
 8007b30:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8007b34:	4311      	orrs	r1, r2
 8007b36:	687a      	ldr	r2, [r7, #4]
 8007b38:	6952      	ldr	r2, [r2, #20]
 8007b3a:	3a01      	subs	r2, #1
 8007b3c:	0612      	lsls	r2, r2, #24
 8007b3e:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8007b42:	430a      	orrs	r2, r1
 8007b44:	4924      	ldr	r1, [pc, #144]	@ (8007bd8 <RCCEx_PLL3_Config+0x128>)
 8007b46:	4313      	orrs	r3, r2
 8007b48:	644b      	str	r3, [r1, #68]	@ 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE);
 8007b4a:	4b23      	ldr	r3, [pc, #140]	@ (8007bd8 <RCCEx_PLL3_Config+0x128>)
 8007b4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007b4e:	f023 020c 	bic.w	r2, r3, #12
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	699b      	ldr	r3, [r3, #24]
 8007b56:	4920      	ldr	r1, [pc, #128]	@ (8007bd8 <RCCEx_PLL3_Config+0x128>)
 8007b58:	4313      	orrs	r3, r2
 8007b5a:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3CLKOUT_ENABLE(pll3->PLL3ClockOut);
 8007b5c:	4b1e      	ldr	r3, [pc, #120]	@ (8007bd8 <RCCEx_PLL3_Config+0x128>)
 8007b5e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	6a1b      	ldr	r3, [r3, #32]
 8007b64:	491c      	ldr	r1, [pc, #112]	@ (8007bd8 <RCCEx_PLL3_Config+0x128>)
 8007b66:	4313      	orrs	r3, r2
 8007b68:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Disable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_DISABLE();
 8007b6a:	4b1b      	ldr	r3, [pc, #108]	@ (8007bd8 <RCCEx_PLL3_Config+0x128>)
 8007b6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007b6e:	4a1a      	ldr	r2, [pc, #104]	@ (8007bd8 <RCCEx_PLL3_Config+0x128>)
 8007b70:	f023 0310 	bic.w	r3, r3, #16
 8007b74:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8007b76:	4b18      	ldr	r3, [pc, #96]	@ (8007bd8 <RCCEx_PLL3_Config+0x128>)
 8007b78:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007b7a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007b7e:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8007b82:	687a      	ldr	r2, [r7, #4]
 8007b84:	69d2      	ldr	r2, [r2, #28]
 8007b86:	00d2      	lsls	r2, r2, #3
 8007b88:	4913      	ldr	r1, [pc, #76]	@ (8007bd8 <RCCEx_PLL3_Config+0x128>)
 8007b8a:	4313      	orrs	r3, r2
 8007b8c:	648b      	str	r3, [r1, #72]	@ 0x48

  /* Enable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_ENABLE();
 8007b8e:	4b12      	ldr	r3, [pc, #72]	@ (8007bd8 <RCCEx_PLL3_Config+0x128>)
 8007b90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007b92:	4a11      	ldr	r2, [pc, #68]	@ (8007bd8 <RCCEx_PLL3_Config+0x128>)
 8007b94:	f043 0310 	orr.w	r3, r3, #16
 8007b98:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable  PLL3 */
  __HAL_RCC_PLL3_ENABLE();
 8007b9a:	4b0f      	ldr	r3, [pc, #60]	@ (8007bd8 <RCCEx_PLL3_Config+0x128>)
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	4a0e      	ldr	r2, [pc, #56]	@ (8007bd8 <RCCEx_PLL3_Config+0x128>)
 8007ba0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007ba4:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8007ba6:	f7fa f847 	bl	8001c38 <HAL_GetTick>
 8007baa:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007bac:	e008      	b.n	8007bc0 <RCCEx_PLL3_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007bae:	f7fa f843 	bl	8001c38 <HAL_GetTick>
 8007bb2:	4602      	mov	r2, r0
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	1ad3      	subs	r3, r2, r3
 8007bb8:	2b02      	cmp	r3, #2
 8007bba:	d901      	bls.n	8007bc0 <RCCEx_PLL3_Config+0x110>
    {
      return HAL_TIMEOUT;
 8007bbc:	2303      	movs	r3, #3
 8007bbe:	e006      	b.n	8007bce <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007bc0:	4b05      	ldr	r3, [pc, #20]	@ (8007bd8 <RCCEx_PLL3_Config+0x128>)
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d0f0      	beq.n	8007bae <RCCEx_PLL3_Config+0xfe>
    }
  }
  return HAL_OK;
 8007bcc:	2300      	movs	r3, #0
}
 8007bce:	4618      	mov	r0, r3
 8007bd0:	3710      	adds	r7, #16
 8007bd2:	46bd      	mov	sp, r7
 8007bd4:	bd80      	pop	{r7, pc}
 8007bd6:	bf00      	nop
 8007bd8:	46020c00 	.word	0x46020c00
 8007bdc:	80800000 	.word	0x80800000

08007be0 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007be0:	b580      	push	{r7, lr}
 8007be2:	b084      	sub	sp, #16
 8007be4:	af00      	add	r7, sp, #0
 8007be6:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d101      	bne.n	8007bf2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007bee:	2301      	movs	r3, #1
 8007bf0:	e0fb      	b.n	8007dea <HAL_SPI_Init+0x20a>

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
  if (IS_SPI_LIMITED_INSTANCE(hspi->Instance))
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	4a7f      	ldr	r2, [pc, #508]	@ (8007df4 <HAL_SPI_Init+0x214>)
 8007bf8:	4293      	cmp	r3, r2
 8007bfa:	d004      	beq.n	8007c06 <HAL_SPI_Init+0x26>
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	4a7d      	ldr	r2, [pc, #500]	@ (8007df8 <HAL_SPI_Init+0x218>)
 8007c02:	4293      	cmp	r3, r2
 8007c04:	e000      	b.n	8007c08 <HAL_SPI_Init+0x28>
  {
    assert_param(IS_SPI_LIMITED_DATASIZE(hspi->Init.DataSize));
    assert_param(IS_SPI_LIMITED_FIFOTHRESHOLD(hspi->Init.FifoThreshold));
 8007c06:	bf00      	nop
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	2200      	movs	r2, #0
 8007c0c:	629a      	str	r2, [r3, #40]	@ 0x28
  assert_param(IS_SPI_RDY_MASTER_MANAGEMENT(hspi->Init.ReadyMasterManagement));
  assert_param(IS_SPI_RDY_POLARITY(hspi->Init.ReadyPolarity));
  assert_param(IS_SPI_MASTER_RX_AUTOSUSP(hspi->Init.MasterReceiverAutoSusp));

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	4a78      	ldr	r2, [pc, #480]	@ (8007df4 <HAL_SPI_Init+0x214>)
 8007c14:	4293      	cmp	r3, r2
 8007c16:	d004      	beq.n	8007c22 <HAL_SPI_Init+0x42>
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	4a76      	ldr	r2, [pc, #472]	@ (8007df8 <HAL_SPI_Init+0x218>)
 8007c1e:	4293      	cmp	r3, r2
 8007c20:	d105      	bne.n	8007c2e <HAL_SPI_Init+0x4e>
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	68db      	ldr	r3, [r3, #12]
 8007c26:	2b0f      	cmp	r3, #15
 8007c28:	d901      	bls.n	8007c2e <HAL_SPI_Init+0x4e>
  {
    return HAL_ERROR;
 8007c2a:	2301      	movs	r3, #1
 8007c2c:	e0dd      	b.n	8007dea <HAL_SPI_Init+0x20a>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8007c2e:	6878      	ldr	r0, [r7, #4]
 8007c30:	f000 fdee 	bl	8008810 <SPI_GetPacketSize>
 8007c34:	60f8      	str	r0, [r7, #12]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	4a6e      	ldr	r2, [pc, #440]	@ (8007df4 <HAL_SPI_Init+0x214>)
 8007c3c:	4293      	cmp	r3, r2
 8007c3e:	d004      	beq.n	8007c4a <HAL_SPI_Init+0x6a>
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	4a6c      	ldr	r2, [pc, #432]	@ (8007df8 <HAL_SPI_Init+0x218>)
 8007c46:	4293      	cmp	r3, r2
 8007c48:	d102      	bne.n	8007c50 <HAL_SPI_Init+0x70>
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	2b08      	cmp	r3, #8
 8007c4e:	d816      	bhi.n	8007c7e <HAL_SPI_Init+0x9e>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	681b      	ldr	r3, [r3, #0]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8007c54:	4a69      	ldr	r2, [pc, #420]	@ (8007dfc <HAL_SPI_Init+0x21c>)
 8007c56:	4293      	cmp	r3, r2
 8007c58:	d00e      	beq.n	8007c78 <HAL_SPI_Init+0x98>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	4a68      	ldr	r2, [pc, #416]	@ (8007e00 <HAL_SPI_Init+0x220>)
 8007c60:	4293      	cmp	r3, r2
 8007c62:	d009      	beq.n	8007c78 <HAL_SPI_Init+0x98>
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	4a66      	ldr	r2, [pc, #408]	@ (8007e04 <HAL_SPI_Init+0x224>)
 8007c6a:	4293      	cmp	r3, r2
 8007c6c:	d004      	beq.n	8007c78 <HAL_SPI_Init+0x98>
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	4a65      	ldr	r2, [pc, #404]	@ (8007e08 <HAL_SPI_Init+0x228>)
 8007c74:	4293      	cmp	r3, r2
 8007c76:	d104      	bne.n	8007c82 <HAL_SPI_Init+0xa2>
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	2b10      	cmp	r3, #16
 8007c7c:	d901      	bls.n	8007c82 <HAL_SPI_Init+0xa2>
  {
    return HAL_ERROR;
 8007c7e:	2301      	movs	r3, #1
 8007c80:	e0b3      	b.n	8007dea <HAL_SPI_Init+0x20a>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 8007c88:	b2db      	uxtb	r3, r3
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d106      	bne.n	8007c9c <HAL_SPI_Init+0xbc>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	2200      	movs	r2, #0
 8007c92:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007c96:	6878      	ldr	r0, [r7, #4]
 8007c98:	f7f9 f8aa 	bl	8000df0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	2202      	movs	r2, #2
 8007ca0:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	681a      	ldr	r2, [r3, #0]
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	f022 0201 	bic.w	r2, r2, #1
 8007cb2:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	689b      	ldr	r3, [r3, #8]
 8007cba:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 8007cbe:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	699b      	ldr	r3, [r3, #24]
 8007cc4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007cc8:	d119      	bne.n	8007cfe <HAL_SPI_Init+0x11e>
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	685b      	ldr	r3, [r3, #4]
 8007cce:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007cd2:	d103      	bne.n	8007cdc <HAL_SPI_Init+0xfc>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d008      	beq.n	8007cee <HAL_SPI_Init+0x10e>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d10c      	bne.n	8007cfe <HAL_SPI_Init+0x11e>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8007ce8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007cec:	d107      	bne.n	8007cfe <HAL_SPI_Init+0x11e>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	681a      	ldr	r2, [r3, #0]
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8007cfc:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	685b      	ldr	r3, [r3, #4]
 8007d02:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d00f      	beq.n	8007d2a <HAL_SPI_Init+0x14a>
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	68db      	ldr	r3, [r3, #12]
 8007d0e:	2b06      	cmp	r3, #6
 8007d10:	d90b      	bls.n	8007d2a <HAL_SPI_Init+0x14a>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	430a      	orrs	r2, r1
 8007d26:	601a      	str	r2, [r3, #0]
 8007d28:	e007      	b.n	8007d3a <HAL_SPI_Init+0x15a>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	681a      	ldr	r2, [r3, #0]
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007d38:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	69da      	ldr	r2, [r3, #28]
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d42:	431a      	orrs	r2, r3
 8007d44:	68bb      	ldr	r3, [r7, #8]
 8007d46:	431a      	orrs	r2, r3
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007d4c:	ea42 0103 	orr.w	r1, r2, r3
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	68da      	ldr	r2, [r3, #12]
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	430a      	orrs	r2, r1
 8007d5a:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d64:	431a      	orrs	r2, r3
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d6a:	431a      	orrs	r2, r3
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	699b      	ldr	r3, [r3, #24]
 8007d70:	431a      	orrs	r2, r3
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	691b      	ldr	r3, [r3, #16]
 8007d76:	431a      	orrs	r2, r3
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	695b      	ldr	r3, [r3, #20]
 8007d7c:	431a      	orrs	r2, r3
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	6a1b      	ldr	r3, [r3, #32]
 8007d82:	431a      	orrs	r2, r3
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	685b      	ldr	r3, [r3, #4]
 8007d88:	431a      	orrs	r2, r3
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007d8e:	431a      	orrs	r2, r3
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	689b      	ldr	r3, [r3, #8]
 8007d94:	431a      	orrs	r2, r3
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007d9a:	431a      	orrs	r2, r3
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007da0:	431a      	orrs	r2, r3
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007da6:	ea42 0103 	orr.w	r1, r2, r3
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	430a      	orrs	r2, r1
 8007db4:	60da      	str	r2, [r3, #12]
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	685b      	ldr	r3, [r3, #4]
 8007dba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d00a      	beq.n	8007dd8 <HAL_SPI_Init+0x1f8>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	68db      	ldr	r3, [r3, #12]
 8007dc8:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	430a      	orrs	r2, r1
 8007dd6:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	2200      	movs	r2, #0
 8007ddc:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  hspi->State     = HAL_SPI_STATE_READY;
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	2201      	movs	r2, #1
 8007de4:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  return HAL_OK;
 8007de8:	2300      	movs	r3, #0
}
 8007dea:	4618      	mov	r0, r3
 8007dec:	3710      	adds	r7, #16
 8007dee:	46bd      	mov	sp, r7
 8007df0:	bd80      	pop	{r7, pc}
 8007df2:	bf00      	nop
 8007df4:	46002000 	.word	0x46002000
 8007df8:	56002000 	.word	0x56002000
 8007dfc:	40013000 	.word	0x40013000
 8007e00:	50013000 	.word	0x50013000
 8007e04:	40003800 	.word	0x40003800
 8007e08:	50003800 	.word	0x50003800

08007e0c <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007e0c:	b580      	push	{r7, lr}
 8007e0e:	b088      	sub	sp, #32
 8007e10:	af02      	add	r7, sp, #8
 8007e12:	60f8      	str	r0, [r7, #12]
 8007e14:	60b9      	str	r1, [r7, #8]
 8007e16:	603b      	str	r3, [r7, #0]
 8007e18:	4613      	mov	r3, r2
 8007e1a:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	3320      	adds	r3, #32
 8007e22:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Check transfer size parameter */
  if (IS_SPI_LIMITED_INSTANCE(hspi->Instance))
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	4a90      	ldr	r2, [pc, #576]	@ (800806c <HAL_SPI_Transmit+0x260>)
 8007e2a:	4293      	cmp	r3, r2
  {
    assert_param(IS_SPI_TRANSFER_SIZE(Size));
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007e2c:	f7f9 ff04 	bl	8001c38 <HAL_GetTick>
 8007e30:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 8007e38:	b2db      	uxtb	r3, r3
 8007e3a:	2b01      	cmp	r3, #1
 8007e3c:	d001      	beq.n	8007e42 <HAL_SPI_Transmit+0x36>
  {
    return HAL_BUSY;
 8007e3e:	2302      	movs	r3, #2
 8007e40:	e1f4      	b.n	800822c <HAL_SPI_Transmit+0x420>
  }

  if ((pData == NULL) || (Size == 0UL))
 8007e42:	68bb      	ldr	r3, [r7, #8]
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d002      	beq.n	8007e4e <HAL_SPI_Transmit+0x42>
 8007e48:	88fb      	ldrh	r3, [r7, #6]
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d101      	bne.n	8007e52 <HAL_SPI_Transmit+0x46>
  {
    return HAL_ERROR;
 8007e4e:	2301      	movs	r3, #1
 8007e50:	e1ec      	b.n	800822c <HAL_SPI_Transmit+0x420>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 8007e58:	2b01      	cmp	r3, #1
 8007e5a:	d101      	bne.n	8007e60 <HAL_SPI_Transmit+0x54>
 8007e5c:	2302      	movs	r3, #2
 8007e5e:	e1e5      	b.n	800822c <HAL_SPI_Transmit+0x420>
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	2201      	movs	r2, #1
 8007e64:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	2203      	movs	r2, #3
 8007e6c:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	2200      	movs	r2, #0
 8007e74:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	68ba      	ldr	r2, [r7, #8]
 8007e7c:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->TxXferSize  = Size;
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	88fa      	ldrh	r2, [r7, #6]
 8007e82:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->TxXferCount = Size;
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	88fa      	ldrh	r2, [r7, #6]
 8007e8a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	2200      	movs	r2, #0
 8007e92:	66da      	str	r2, [r3, #108]	@ 0x6c
  hspi->RxXferSize  = (uint16_t) 0UL;
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	2200      	movs	r2, #0
 8007e98:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70
  hspi->RxXferCount = (uint16_t) 0UL;
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	2200      	movs	r2, #0
 8007ea0:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
  hspi->TxISR       = NULL;
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	2200      	movs	r2, #0
 8007ea8:	67da      	str	r2, [r3, #124]	@ 0x7c
  hspi->RxISR       = NULL;
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	2200      	movs	r2, #0
 8007eae:	679a      	str	r2, [r3, #120]	@ 0x78

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	689b      	ldr	r3, [r3, #8]
 8007eb4:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 8007eb8:	d108      	bne.n	8007ecc <HAL_SPI_Transmit+0xc0>
  {
    SPI_1LINE_TX(hspi);
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	681a      	ldr	r2, [r3, #0]
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007ec8:	601a      	str	r2, [r3, #0]
 8007eca:	e009      	b.n	8007ee0 <HAL_SPI_Transmit+0xd4>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	68db      	ldr	r3, [r3, #12]
 8007ed2:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8007ede:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	685b      	ldr	r3, [r3, #4]
 8007ee6:	0c1b      	lsrs	r3, r3, #16
 8007ee8:	041b      	lsls	r3, r3, #16
 8007eea:	88f9      	ldrh	r1, [r7, #6]
 8007eec:	68fa      	ldr	r2, [r7, #12]
 8007eee:	6812      	ldr	r2, [r2, #0]
 8007ef0:	430b      	orrs	r3, r1
 8007ef2:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	681a      	ldr	r2, [r3, #0]
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	f042 0201 	orr.w	r2, r2, #1
 8007f02:	601a      	str	r2, [r3, #0]

  if (((hspi->Instance->AUTOCR & SPI_AUTOCR_TRIGEN) == 0U) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	69db      	ldr	r3, [r3, #28]
 8007f0a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d10c      	bne.n	8007f2c <HAL_SPI_Transmit+0x120>
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	685b      	ldr	r3, [r3, #4]
 8007f16:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007f1a:	d107      	bne.n	8007f2c <HAL_SPI_Transmit+0x120>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	681a      	ldr	r2, [r3, #0]
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007f2a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	68db      	ldr	r3, [r3, #12]
 8007f30:	2b0f      	cmp	r3, #15
 8007f32:	d95b      	bls.n	8007fec <HAL_SPI_Transmit+0x1e0>
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	4a4d      	ldr	r2, [pc, #308]	@ (8008070 <HAL_SPI_Transmit+0x264>)
 8007f3a:	4293      	cmp	r3, r2
 8007f3c:	d04f      	beq.n	8007fde <HAL_SPI_Transmit+0x1d2>
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	4a4c      	ldr	r2, [pc, #304]	@ (8008074 <HAL_SPI_Transmit+0x268>)
 8007f44:	4293      	cmp	r3, r2
 8007f46:	d04a      	beq.n	8007fde <HAL_SPI_Transmit+0x1d2>
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	4a4a      	ldr	r2, [pc, #296]	@ (8008078 <HAL_SPI_Transmit+0x26c>)
 8007f4e:	4293      	cmp	r3, r2
 8007f50:	d045      	beq.n	8007fde <HAL_SPI_Transmit+0x1d2>
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	4a49      	ldr	r2, [pc, #292]	@ (800807c <HAL_SPI_Transmit+0x270>)
 8007f58:	4293      	cmp	r3, r2
 8007f5a:	d147      	bne.n	8007fec <HAL_SPI_Transmit+0x1e0>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8007f5c:	e03f      	b.n	8007fde <HAL_SPI_Transmit+0x1d2>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	695b      	ldr	r3, [r3, #20]
 8007f64:	f003 0302 	and.w	r3, r3, #2
 8007f68:	2b02      	cmp	r3, #2
 8007f6a:	d114      	bne.n	8007f96 <HAL_SPI_Transmit+0x18a>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	6812      	ldr	r2, [r2, #0]
 8007f76:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007f7c:	1d1a      	adds	r2, r3, #4
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->TxXferCount--;
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007f88:	b29b      	uxth	r3, r3
 8007f8a:	3b01      	subs	r3, #1
 8007f8c:	b29a      	uxth	r2, r3
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8007f94:	e023      	b.n	8007fde <HAL_SPI_Transmit+0x1d2>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007f96:	f7f9 fe4f 	bl	8001c38 <HAL_GetTick>
 8007f9a:	4602      	mov	r2, r0
 8007f9c:	693b      	ldr	r3, [r7, #16]
 8007f9e:	1ad3      	subs	r3, r2, r3
 8007fa0:	683a      	ldr	r2, [r7, #0]
 8007fa2:	429a      	cmp	r2, r3
 8007fa4:	d803      	bhi.n	8007fae <HAL_SPI_Transmit+0x1a2>
 8007fa6:	683b      	ldr	r3, [r7, #0]
 8007fa8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007fac:	d102      	bne.n	8007fb4 <HAL_SPI_Transmit+0x1a8>
 8007fae:	683b      	ldr	r3, [r7, #0]
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d114      	bne.n	8007fde <HAL_SPI_Transmit+0x1d2>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8007fb4:	68f8      	ldr	r0, [r7, #12]
 8007fb6:	f000 fb5d 	bl	8008674 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007fc0:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	2201      	movs	r2, #1
 8007fce:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	2200      	movs	r2, #0
 8007fd6:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

          return HAL_TIMEOUT;
 8007fda:	2303      	movs	r3, #3
 8007fdc:	e126      	b.n	800822c <HAL_SPI_Transmit+0x420>
    while (hspi->TxXferCount > 0UL)
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007fe4:	b29b      	uxth	r3, r3
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d1b9      	bne.n	8007f5e <HAL_SPI_Transmit+0x152>
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 8007fea:	e0f9      	b.n	80081e0 <HAL_SPI_Transmit+0x3d4>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	68db      	ldr	r3, [r3, #12]
 8007ff0:	2b07      	cmp	r3, #7
 8007ff2:	f240 80ee 	bls.w	80081d2 <HAL_SPI_Transmit+0x3c6>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8007ff6:	e067      	b.n	80080c8 <HAL_SPI_Transmit+0x2bc>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	695b      	ldr	r3, [r3, #20]
 8007ffe:	f003 0302 	and.w	r3, r3, #2
 8008002:	2b02      	cmp	r3, #2
 8008004:	d13c      	bne.n	8008080 <HAL_SPI_Transmit+0x274>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800800c:	b29b      	uxth	r3, r3
 800800e:	2b01      	cmp	r3, #1
 8008010:	d918      	bls.n	8008044 <HAL_SPI_Transmit+0x238>
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008016:	2b00      	cmp	r3, #0
 8008018:	d014      	beq.n	8008044 <HAL_SPI_Transmit+0x238>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	6812      	ldr	r2, [r2, #0]
 8008024:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800802a:	1d1a      	adds	r2, r3, #4
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount -= (uint16_t)2UL;
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008036:	b29b      	uxth	r3, r3
 8008038:	3b02      	subs	r3, #2
 800803a:	b29a      	uxth	r2, r3
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8008042:	e041      	b.n	80080c8 <HAL_SPI_Transmit+0x2bc>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008048:	881a      	ldrh	r2, [r3, #0]
 800804a:	697b      	ldr	r3, [r7, #20]
 800804c:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008052:	1c9a      	adds	r2, r3, #2
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount--;
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800805e:	b29b      	uxth	r3, r3
 8008060:	3b01      	subs	r3, #1
 8008062:	b29a      	uxth	r2, r3
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800806a:	e02d      	b.n	80080c8 <HAL_SPI_Transmit+0x2bc>
 800806c:	46002000 	.word	0x46002000
 8008070:	40013000 	.word	0x40013000
 8008074:	50013000 	.word	0x50013000
 8008078:	40003800 	.word	0x40003800
 800807c:	50003800 	.word	0x50003800
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008080:	f7f9 fdda 	bl	8001c38 <HAL_GetTick>
 8008084:	4602      	mov	r2, r0
 8008086:	693b      	ldr	r3, [r7, #16]
 8008088:	1ad3      	subs	r3, r2, r3
 800808a:	683a      	ldr	r2, [r7, #0]
 800808c:	429a      	cmp	r2, r3
 800808e:	d803      	bhi.n	8008098 <HAL_SPI_Transmit+0x28c>
 8008090:	683b      	ldr	r3, [r7, #0]
 8008092:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008096:	d102      	bne.n	800809e <HAL_SPI_Transmit+0x292>
 8008098:	683b      	ldr	r3, [r7, #0]
 800809a:	2b00      	cmp	r3, #0
 800809c:	d114      	bne.n	80080c8 <HAL_SPI_Transmit+0x2bc>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800809e:	68f8      	ldr	r0, [r7, #12]
 80080a0:	f000 fae8 	bl	8008674 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80080aa:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	2201      	movs	r2, #1
 80080b8:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	2200      	movs	r2, #0
 80080c0:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

          return HAL_TIMEOUT;
 80080c4:	2303      	movs	r3, #3
 80080c6:	e0b1      	b.n	800822c <HAL_SPI_Transmit+0x420>
    while (hspi->TxXferCount > 0UL)
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80080ce:	b29b      	uxth	r3, r3
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	d191      	bne.n	8007ff8 <HAL_SPI_Transmit+0x1ec>
 80080d4:	e084      	b.n	80081e0 <HAL_SPI_Transmit+0x3d4>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	695b      	ldr	r3, [r3, #20]
 80080dc:	f003 0302 	and.w	r3, r3, #2
 80080e0:	2b02      	cmp	r3, #2
 80080e2:	d152      	bne.n	800818a <HAL_SPI_Transmit+0x37e>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80080ea:	b29b      	uxth	r3, r3
 80080ec:	2b03      	cmp	r3, #3
 80080ee:	d918      	bls.n	8008122 <HAL_SPI_Transmit+0x316>
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80080f4:	2b40      	cmp	r3, #64	@ 0x40
 80080f6:	d914      	bls.n	8008122 <HAL_SPI_Transmit+0x316>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	6812      	ldr	r2, [r2, #0]
 8008102:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008108:	1d1a      	adds	r2, r3, #4
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount -= (uint16_t)4UL;
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008114:	b29b      	uxth	r3, r3
 8008116:	3b04      	subs	r3, #4
 8008118:	b29a      	uxth	r2, r3
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8008120:	e057      	b.n	80081d2 <HAL_SPI_Transmit+0x3c6>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008128:	b29b      	uxth	r3, r3
 800812a:	2b01      	cmp	r3, #1
 800812c:	d917      	bls.n	800815e <HAL_SPI_Transmit+0x352>
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008132:	2b00      	cmp	r3, #0
 8008134:	d013      	beq.n	800815e <HAL_SPI_Transmit+0x352>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800813a:	881a      	ldrh	r2, [r3, #0]
 800813c:	697b      	ldr	r3, [r7, #20]
 800813e:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008144:	1c9a      	adds	r2, r3, #2
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount -= (uint16_t)2UL;
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008150:	b29b      	uxth	r3, r3
 8008152:	3b02      	subs	r3, #2
 8008154:	b29a      	uxth	r2, r3
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800815c:	e039      	b.n	80081d2 <HAL_SPI_Transmit+0x3c6>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	3320      	adds	r3, #32
 8008168:	7812      	ldrb	r2, [r2, #0]
 800816a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008170:	1c5a      	adds	r2, r3, #1
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount--;
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800817c:	b29b      	uxth	r3, r3
 800817e:	3b01      	subs	r3, #1
 8008180:	b29a      	uxth	r2, r3
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8008188:	e023      	b.n	80081d2 <HAL_SPI_Transmit+0x3c6>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800818a:	f7f9 fd55 	bl	8001c38 <HAL_GetTick>
 800818e:	4602      	mov	r2, r0
 8008190:	693b      	ldr	r3, [r7, #16]
 8008192:	1ad3      	subs	r3, r2, r3
 8008194:	683a      	ldr	r2, [r7, #0]
 8008196:	429a      	cmp	r2, r3
 8008198:	d803      	bhi.n	80081a2 <HAL_SPI_Transmit+0x396>
 800819a:	683b      	ldr	r3, [r7, #0]
 800819c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80081a0:	d102      	bne.n	80081a8 <HAL_SPI_Transmit+0x39c>
 80081a2:	683b      	ldr	r3, [r7, #0]
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d114      	bne.n	80081d2 <HAL_SPI_Transmit+0x3c6>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80081a8:	68f8      	ldr	r0, [r7, #12]
 80081aa:	f000 fa63 	bl	8008674 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80081b4:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	2201      	movs	r2, #1
 80081c2:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	2200      	movs	r2, #0
 80081ca:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

          return HAL_TIMEOUT;
 80081ce:	2303      	movs	r3, #3
 80081d0:	e02c      	b.n	800822c <HAL_SPI_Transmit+0x420>
    while (hspi->TxXferCount > 0UL)
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80081d8:	b29b      	uxth	r3, r3
 80081da:	2b00      	cmp	r3, #0
 80081dc:	f47f af7b 	bne.w	80080d6 <HAL_SPI_Transmit+0x2ca>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 80081e0:	693b      	ldr	r3, [r7, #16]
 80081e2:	9300      	str	r3, [sp, #0]
 80081e4:	683b      	ldr	r3, [r7, #0]
 80081e6:	2200      	movs	r2, #0
 80081e8:	2108      	movs	r1, #8
 80081ea:	68f8      	ldr	r0, [r7, #12]
 80081ec:	f000 fae2 	bl	80087b4 <SPI_WaitOnFlagUntilTimeout>
 80081f0:	4603      	mov	r3, r0
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d007      	beq.n	8008206 <HAL_SPI_Transmit+0x3fa>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80081fc:	f043 0220 	orr.w	r2, r3, #32
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8008206:	68f8      	ldr	r0, [r7, #12]
 8008208:	f000 fa34 	bl	8008674 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	2201      	movs	r2, #1
 8008210:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	2200      	movs	r2, #0
 8008218:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008222:	2b00      	cmp	r3, #0
 8008224:	d001      	beq.n	800822a <HAL_SPI_Transmit+0x41e>
  {
    return HAL_ERROR;
 8008226:	2301      	movs	r3, #1
 8008228:	e000      	b.n	800822c <HAL_SPI_Transmit+0x420>
  }
  else
  {
    return HAL_OK;
 800822a:	2300      	movs	r3, #0
  }
}
 800822c:	4618      	mov	r0, r3
 800822e:	3718      	adds	r7, #24
 8008230:	46bd      	mov	sp, r7
 8008232:	bd80      	pop	{r7, pc}

08008234 <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8008234:	b580      	push	{r7, lr}
 8008236:	b08a      	sub	sp, #40	@ 0x28
 8008238:	af00      	add	r7, sp, #0
 800823a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	691b      	ldr	r3, [r3, #16]
 8008242:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	695b      	ldr	r3, [r3, #20]
 800824a:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 800824c:	6a3a      	ldr	r2, [r7, #32]
 800824e:	69fb      	ldr	r3, [r7, #28]
 8008250:	4013      	ands	r3, r2
 8008252:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	689b      	ldr	r3, [r3, #8]
 800825a:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 800825c:	2300      	movs	r3, #0
 800825e:	627b      	str	r3, [r7, #36]	@ 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 8008266:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	3330      	adds	r3, #48	@ 0x30
 800826e:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */

  /* SPI in SUSPEND mode  ----------------------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 8008270:	69fb      	ldr	r3, [r7, #28]
 8008272:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008276:	2b00      	cmp	r3, #0
 8008278:	d010      	beq.n	800829c <HAL_SPI_IRQHandler+0x68>
 800827a:	6a3b      	ldr	r3, [r7, #32]
 800827c:	f003 0308 	and.w	r3, r3, #8
 8008280:	2b00      	cmp	r3, #0
 8008282:	d00b      	beq.n	800829c <HAL_SPI_IRQHandler+0x68>
  {
    /* Clear the Suspend flag */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	699a      	ldr	r2, [r3, #24]
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008292:	619a      	str	r2, [r3, #24]

    /* Suspend on going, Call the Suspend callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->SuspendCallback(hspi);
#else
    HAL_SPI_SuspendCallback(hspi);
 8008294:	6878      	ldr	r0, [r7, #4]
 8008296:	f000 f9c9 	bl	800862c <HAL_SPI_SuspendCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    return;
 800829a:	e19a      	b.n	80085d2 <HAL_SPI_IRQHandler+0x39e>
  }

  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 800829c:	69bb      	ldr	r3, [r7, #24]
 800829e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d113      	bne.n	80082ce <HAL_SPI_IRQHandler+0x9a>
 80082a6:	69bb      	ldr	r3, [r7, #24]
 80082a8:	f003 0320 	and.w	r3, r3, #32
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d10e      	bne.n	80082ce <HAL_SPI_IRQHandler+0x9a>
      HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 80082b0:	69bb      	ldr	r3, [r7, #24]
 80082b2:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d009      	beq.n	80082ce <HAL_SPI_IRQHandler+0x9a>
  {
    hspi->TxISR(hspi);
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80082be:	6878      	ldr	r0, [r7, #4]
 80082c0:	4798      	blx	r3
    hspi->RxISR(hspi);
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80082c6:	6878      	ldr	r0, [r7, #4]
 80082c8:	4798      	blx	r3
    handled = 1UL;
 80082ca:	2301      	movs	r3, #1
 80082cc:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 80082ce:	69bb      	ldr	r3, [r7, #24]
 80082d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	d10f      	bne.n	80082f8 <HAL_SPI_IRQHandler+0xc4>
 80082d8:	69bb      	ldr	r3, [r7, #24]
 80082da:	f003 0301 	and.w	r3, r3, #1
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d00a      	beq.n	80082f8 <HAL_SPI_IRQHandler+0xc4>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 80082e2:	69bb      	ldr	r3, [r7, #24]
 80082e4:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d105      	bne.n	80082f8 <HAL_SPI_IRQHandler+0xc4>
  {
    hspi->RxISR(hspi);
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80082f0:	6878      	ldr	r0, [r7, #4]
 80082f2:	4798      	blx	r3
    handled = 1UL;
 80082f4:	2301      	movs	r3, #1
 80082f6:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 80082f8:	69bb      	ldr	r3, [r7, #24]
 80082fa:	f003 0320 	and.w	r3, r3, #32
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d10f      	bne.n	8008322 <HAL_SPI_IRQHandler+0xee>
 8008302:	69bb      	ldr	r3, [r7, #24]
 8008304:	f003 0302 	and.w	r3, r3, #2
 8008308:	2b00      	cmp	r3, #0
 800830a:	d00a      	beq.n	8008322 <HAL_SPI_IRQHandler+0xee>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 800830c:	69bb      	ldr	r3, [r7, #24]
 800830e:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 8008312:	2b00      	cmp	r3, #0
 8008314:	d105      	bne.n	8008322 <HAL_SPI_IRQHandler+0xee>
  {
    hspi->TxISR(hspi);
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800831a:	6878      	ldr	r0, [r7, #4]
 800831c:	4798      	blx	r3
    handled = 1UL;
 800831e:	2301      	movs	r3, #1
 8008320:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  if (handled != 0UL)
 8008322:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008324:	2b00      	cmp	r3, #0
 8008326:	f040 814f 	bne.w	80085c8 <HAL_SPI_IRQHandler+0x394>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 800832a:	69bb      	ldr	r3, [r7, #24]
 800832c:	f003 0308 	and.w	r3, r3, #8
 8008330:	2b00      	cmp	r3, #0
 8008332:	f000 808b 	beq.w	800844c <HAL_SPI_IRQHandler+0x218>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	699a      	ldr	r2, [r3, #24]
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	f042 0208 	orr.w	r2, r2, #8
 8008344:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	699a      	ldr	r2, [r3, #24]
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	f042 0210 	orr.w	r2, r2, #16
 8008354:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	699a      	ldr	r2, [r3, #24]
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008364:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	691a      	ldr	r2, [r3, #16]
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	f022 0208 	bic.w	r2, r2, #8
 8008374:	611a      	str	r2, [r3, #16]

    /* For the IT based receive extra polling maybe required for last packet */
    if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	689b      	ldr	r3, [r3, #8]
 800837c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8008380:	2b00      	cmp	r3, #0
 8008382:	d13d      	bne.n	8008400 <HAL_SPI_IRQHandler+0x1cc>
    {
      /* Pooling remaining data */
      while (hspi->RxXferCount != 0UL)
 8008384:	e036      	b.n	80083f4 <HAL_SPI_IRQHandler+0x1c0>
      {
        /* Receive data in 32 Bit mode */
        if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	68db      	ldr	r3, [r3, #12]
 800838a:	2b0f      	cmp	r3, #15
 800838c:	d90b      	bls.n	80083a6 <HAL_SPI_IRQHandler+0x172>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	681a      	ldr	r2, [r3, #0]
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008396:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8008398:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800839e:	1d1a      	adds	r2, r3, #4
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	66da      	str	r2, [r3, #108]	@ 0x6c
 80083a4:	e01d      	b.n	80083e2 <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 16 Bit mode */
        else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	68db      	ldr	r3, [r3, #12]
 80083aa:	2b07      	cmp	r3, #7
 80083ac:	d90b      	bls.n	80083c6 <HAL_SPI_IRQHandler+0x192>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80083b2:	68fa      	ldr	r2, [r7, #12]
 80083b4:	8812      	ldrh	r2, [r2, #0]
 80083b6:	b292      	uxth	r2, r2
 80083b8:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80083be:	1c9a      	adds	r2, r3, #2
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	66da      	str	r2, [r3, #108]	@ 0x6c
 80083c4:	e00d      	b.n	80083e2 <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 8 Bit mode */
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80083d2:	7812      	ldrb	r2, [r2, #0]
 80083d4:	b2d2      	uxtb	r2, r2
 80083d6:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80083dc:	1c5a      	adds	r2, r3, #1
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	66da      	str	r2, [r3, #108]	@ 0x6c
        }

        hspi->RxXferCount--;
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 80083e8:	b29b      	uxth	r3, r3
 80083ea:	3b01      	subs	r3, #1
 80083ec:	b29a      	uxth	r2, r3
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
      while (hspi->RxXferCount != 0UL)
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 80083fa:	b29b      	uxth	r3, r3
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d1c2      	bne.n	8008386 <HAL_SPI_IRQHandler+0x152>
      }
    }

    /* Call SPI Standard close procedure */
    SPI_CloseTransfer(hspi);
 8008400:	6878      	ldr	r0, [r7, #4]
 8008402:	f000 f937 	bl	8008674 <SPI_CloseTransfer>

    hspi->State = HAL_SPI_STATE_READY;
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	2201      	movs	r2, #1
 800840a:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008414:	2b00      	cmp	r3, #0
 8008416:	d003      	beq.n	8008420 <HAL_SPI_IRQHandler+0x1ec>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8008418:	6878      	ldr	r0, [r7, #4]
 800841a:	f000 f8fd 	bl	8008618 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800841e:	e0d8      	b.n	80085d2 <HAL_SPI_IRQHandler+0x39e>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 8008420:	7cfb      	ldrb	r3, [r7, #19]
 8008422:	2b05      	cmp	r3, #5
 8008424:	d103      	bne.n	800842e <HAL_SPI_IRQHandler+0x1fa>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 8008426:	6878      	ldr	r0, [r7, #4]
 8008428:	f000 f8ec 	bl	8008604 <HAL_SPI_TxRxCpltCallback>
    else
    {
      /* End of the appropriate call */
    }

    return;
 800842c:	e0ce      	b.n	80085cc <HAL_SPI_IRQHandler+0x398>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 800842e:	7cfb      	ldrb	r3, [r7, #19]
 8008430:	2b04      	cmp	r3, #4
 8008432:	d103      	bne.n	800843c <HAL_SPI_IRQHandler+0x208>
      HAL_SPI_RxCpltCallback(hspi);
 8008434:	6878      	ldr	r0, [r7, #4]
 8008436:	f000 f8db 	bl	80085f0 <HAL_SPI_RxCpltCallback>
    return;
 800843a:	e0c7      	b.n	80085cc <HAL_SPI_IRQHandler+0x398>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 800843c:	7cfb      	ldrb	r3, [r7, #19]
 800843e:	2b03      	cmp	r3, #3
 8008440:	f040 80c4 	bne.w	80085cc <HAL_SPI_IRQHandler+0x398>
      HAL_SPI_TxCpltCallback(hspi);
 8008444:	6878      	ldr	r0, [r7, #4]
 8008446:	f000 f8c9 	bl	80085dc <HAL_SPI_TxCpltCallback>
    return;
 800844a:	e0bf      	b.n	80085cc <HAL_SPI_IRQHandler+0x398>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 800844c:	69bb      	ldr	r3, [r7, #24]
 800844e:	f403 7358 	and.w	r3, r3, #864	@ 0x360
 8008452:	2b00      	cmp	r3, #0
 8008454:	f000 80bd 	beq.w	80085d2 <HAL_SPI_IRQHandler+0x39e>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 8008458:	69bb      	ldr	r3, [r7, #24]
 800845a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800845e:	2b00      	cmp	r3, #0
 8008460:	d00f      	beq.n	8008482 <HAL_SPI_IRQHandler+0x24e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008468:	f043 0204 	orr.w	r2, r3, #4
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	699a      	ldr	r2, [r3, #24]
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008480:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 8008482:	69bb      	ldr	r3, [r7, #24]
 8008484:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008488:	2b00      	cmp	r3, #0
 800848a:	d00f      	beq.n	80084ac <HAL_SPI_IRQHandler+0x278>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008492:	f043 0201 	orr.w	r2, r3, #1
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	699a      	ldr	r2, [r3, #24]
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80084aa:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 80084ac:	69bb      	ldr	r3, [r7, #24]
 80084ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d00f      	beq.n	80084d6 <HAL_SPI_IRQHandler+0x2a2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80084bc:	f043 0208 	orr.w	r2, r3, #8
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	699a      	ldr	r2, [r3, #24]
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80084d4:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 80084d6:	69bb      	ldr	r3, [r7, #24]
 80084d8:	f003 0320 	and.w	r3, r3, #32
 80084dc:	2b00      	cmp	r3, #0
 80084de:	d00f      	beq.n	8008500 <HAL_SPI_IRQHandler+0x2cc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80084e6:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	699a      	ldr	r2, [r3, #24]
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	f042 0220 	orr.w	r2, r2, #32
 80084fe:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008506:	2b00      	cmp	r3, #0
 8008508:	d062      	beq.n	80085d0 <HAL_SPI_IRQHandler+0x39c>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	681a      	ldr	r2, [r3, #0]
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	f022 0201 	bic.w	r2, r2, #1
 8008518:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	691b      	ldr	r3, [r3, #16]
 8008520:	687a      	ldr	r2, [r7, #4]
 8008522:	6812      	ldr	r2, [r2, #0]
 8008524:	f423 735a 	bic.w	r3, r3, #872	@ 0x368
 8008528:	f023 0303 	bic.w	r3, r3, #3
 800852c:	6113      	str	r3, [r2, #16]
                                  SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR));

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800852e:	697b      	ldr	r3, [r7, #20]
 8008530:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8008534:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8008538:	d13e      	bne.n	80085b8 <HAL_SPI_IRQHandler+0x384>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	689a      	ldr	r2, [r3, #8]
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8008548:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008550:	2b00      	cmp	r3, #0
 8008552:	d015      	beq.n	8008580 <HAL_SPI_IRQHandler+0x34c>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800855a:	4a1f      	ldr	r2, [pc, #124]	@ (80085d8 <HAL_SPI_IRQHandler+0x3a4>)
 800855c:	66da      	str	r2, [r3, #108]	@ 0x6c
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008564:	4618      	mov	r0, r3
 8008566:	f7f9 fccf 	bl	8001f08 <HAL_DMA_Abort_IT>
 800856a:	4603      	mov	r3, r0
 800856c:	2b00      	cmp	r3, #0
 800856e:	d007      	beq.n	8008580 <HAL_SPI_IRQHandler+0x34c>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008576:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008586:	2b00      	cmp	r3, #0
 8008588:	d022      	beq.n	80085d0 <HAL_SPI_IRQHandler+0x39c>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008590:	4a11      	ldr	r2, [pc, #68]	@ (80085d8 <HAL_SPI_IRQHandler+0x3a4>)
 8008592:	66da      	str	r2, [r3, #108]	@ 0x6c
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800859a:	4618      	mov	r0, r3
 800859c:	f7f9 fcb4 	bl	8001f08 <HAL_DMA_Abort_IT>
 80085a0:	4603      	mov	r3, r0
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d014      	beq.n	80085d0 <HAL_SPI_IRQHandler+0x39c>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80085ac:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80085b6:	e00b      	b.n	80085d0 <HAL_SPI_IRQHandler+0x39c>
        hspi->State = HAL_SPI_STATE_READY;
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	2201      	movs	r2, #1
 80085bc:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
        HAL_SPI_ErrorCallback(hspi);
 80085c0:	6878      	ldr	r0, [r7, #4]
 80085c2:	f000 f829 	bl	8008618 <HAL_SPI_ErrorCallback>
    return;
 80085c6:	e003      	b.n	80085d0 <HAL_SPI_IRQHandler+0x39c>
    return;
 80085c8:	bf00      	nop
 80085ca:	e002      	b.n	80085d2 <HAL_SPI_IRQHandler+0x39e>
    return;
 80085cc:	bf00      	nop
 80085ce:	e000      	b.n	80085d2 <HAL_SPI_IRQHandler+0x39e>
    return;
 80085d0:	bf00      	nop
  }
}
 80085d2:	3728      	adds	r7, #40	@ 0x28
 80085d4:	46bd      	mov	sp, r7
 80085d6:	bd80      	pop	{r7, pc}
 80085d8:	08008641 	.word	0x08008641

080085dc <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 80085dc:	b480      	push	{r7}
 80085de:	b083      	sub	sp, #12
 80085e0:	af00      	add	r7, sp, #0
 80085e2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 80085e4:	bf00      	nop
 80085e6:	370c      	adds	r7, #12
 80085e8:	46bd      	mov	sp, r7
 80085ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ee:	4770      	bx	lr

080085f0 <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 80085f0:	b480      	push	{r7}
 80085f2:	b083      	sub	sp, #12
 80085f4:	af00      	add	r7, sp, #0
 80085f6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 80085f8:	bf00      	nop
 80085fa:	370c      	adds	r7, #12
 80085fc:	46bd      	mov	sp, r7
 80085fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008602:	4770      	bx	lr

08008604 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8008604:	b480      	push	{r7}
 8008606:	b083      	sub	sp, #12
 8008608:	af00      	add	r7, sp, #0
 800860a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 800860c:	bf00      	nop
 800860e:	370c      	adds	r7, #12
 8008610:	46bd      	mov	sp, r7
 8008612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008616:	4770      	bx	lr

08008618 <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8008618:	b480      	push	{r7}
 800861a:	b083      	sub	sp, #12
 800861c:	af00      	add	r7, sp, #0
 800861e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8008620:	bf00      	nop
 8008622:	370c      	adds	r7, #12
 8008624:	46bd      	mov	sp, r7
 8008626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800862a:	4770      	bx	lr

0800862c <HAL_SPI_SuspendCallback>:
  * @brief  SPI Suspend callback.
  * @param  hspi SPI handle.
  * @retval None
  */
__weak void HAL_SPI_SuspendCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 800862c:	b480      	push	{r7}
 800862e:	b083      	sub	sp, #12
 8008630:	af00      	add	r7, sp, #0
 8008632:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_SuspendCallback can be implemented in the user file.
   */
}
 8008634:	bf00      	nop
 8008636:	370c      	adds	r7, #12
 8008638:	46bd      	mov	sp, r7
 800863a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800863e:	4770      	bx	lr

08008640 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008640:	b580      	push	{r7, lr}
 8008642:	b084      	sub	sp, #16
 8008644:	af00      	add	r7, sp, #0
 8008646:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800864c:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	2200      	movs	r2, #0
 8008652:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
  hspi->TxXferCount = (uint16_t) 0UL;
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	2200      	movs	r2, #0
 800865a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	2201      	movs	r2, #1
 8008662:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8008666:	68f8      	ldr	r0, [r7, #12]
 8008668:	f7ff ffd6 	bl	8008618 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800866c:	bf00      	nop
 800866e:	3710      	adds	r7, #16
 8008670:	46bd      	mov	sp, r7
 8008672:	bd80      	pop	{r7, pc}

08008674 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8008674:	b480      	push	{r7}
 8008676:	b085      	sub	sp, #20
 8008678:	af00      	add	r7, sp, #0
 800867a:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	695b      	ldr	r3, [r3, #20]
 8008682:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	699a      	ldr	r2, [r3, #24]
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	f042 0208 	orr.w	r2, r2, #8
 8008692:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	699a      	ldr	r2, [r3, #24]
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	f042 0210 	orr.w	r2, r2, #16
 80086a2:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	681a      	ldr	r2, [r3, #0]
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	f022 0201 	bic.w	r2, r2, #1
 80086b2:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	691b      	ldr	r3, [r3, #16]
 80086ba:	687a      	ldr	r2, [r7, #4]
 80086bc:	6812      	ldr	r2, [r2, #0]
 80086be:	f423 735b 	bic.w	r3, r3, #876	@ 0x36c
 80086c2:	f023 0303 	bic.w	r3, r3, #3
 80086c6:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	689a      	ldr	r2, [r3, #8]
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 80086d6:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 80086de:	b2db      	uxtb	r3, r3
 80086e0:	2b04      	cmp	r3, #4
 80086e2:	d014      	beq.n	800870e <SPI_CloseTransfer+0x9a>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	f003 0320 	and.w	r3, r3, #32
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	d00f      	beq.n	800870e <SPI_CloseTransfer+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80086f4:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	699a      	ldr	r2, [r3, #24]
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	f042 0220 	orr.w	r2, r2, #32
 800870c:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 8008714:	b2db      	uxtb	r3, r3
 8008716:	2b03      	cmp	r3, #3
 8008718:	d014      	beq.n	8008744 <SPI_CloseTransfer+0xd0>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008720:	2b00      	cmp	r3, #0
 8008722:	d00f      	beq.n	8008744 <SPI_CloseTransfer+0xd0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800872a:	f043 0204 	orr.w	r2, r3, #4
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	699a      	ldr	r2, [r3, #24]
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008742:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800874a:	2b00      	cmp	r3, #0
 800874c:	d00f      	beq.n	800876e <SPI_CloseTransfer+0xfa>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008754:	f043 0201 	orr.w	r2, r3, #1
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	699a      	ldr	r2, [r3, #24]
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800876c:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008774:	2b00      	cmp	r3, #0
 8008776:	d00f      	beq.n	8008798 <SPI_CloseTransfer+0x124>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800877e:	f043 0208 	orr.w	r2, r3, #8
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	699a      	ldr	r2, [r3, #24]
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008796:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	2200      	movs	r2, #0
 800879c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->RxXferCount = (uint16_t)0UL;
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	2200      	movs	r2, #0
 80087a4:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
}
 80087a8:	bf00      	nop
 80087aa:	3714      	adds	r7, #20
 80087ac:	46bd      	mov	sp, r7
 80087ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087b2:	4770      	bx	lr

080087b4 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80087b4:	b580      	push	{r7, lr}
 80087b6:	b084      	sub	sp, #16
 80087b8:	af00      	add	r7, sp, #0
 80087ba:	60f8      	str	r0, [r7, #12]
 80087bc:	60b9      	str	r1, [r7, #8]
 80087be:	603b      	str	r3, [r7, #0]
 80087c0:	4613      	mov	r3, r2
 80087c2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 80087c4:	e010      	b.n	80087e8 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80087c6:	f7f9 fa37 	bl	8001c38 <HAL_GetTick>
 80087ca:	4602      	mov	r2, r0
 80087cc:	69bb      	ldr	r3, [r7, #24]
 80087ce:	1ad3      	subs	r3, r2, r3
 80087d0:	683a      	ldr	r2, [r7, #0]
 80087d2:	429a      	cmp	r2, r3
 80087d4:	d803      	bhi.n	80087de <SPI_WaitOnFlagUntilTimeout+0x2a>
 80087d6:	683b      	ldr	r3, [r7, #0]
 80087d8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80087dc:	d102      	bne.n	80087e4 <SPI_WaitOnFlagUntilTimeout+0x30>
 80087de:	683b      	ldr	r3, [r7, #0]
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	d101      	bne.n	80087e8 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 80087e4:	2303      	movs	r3, #3
 80087e6:	e00f      	b.n	8008808 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	695a      	ldr	r2, [r3, #20]
 80087ee:	68bb      	ldr	r3, [r7, #8]
 80087f0:	4013      	ands	r3, r2
 80087f2:	68ba      	ldr	r2, [r7, #8]
 80087f4:	429a      	cmp	r2, r3
 80087f6:	bf0c      	ite	eq
 80087f8:	2301      	moveq	r3, #1
 80087fa:	2300      	movne	r3, #0
 80087fc:	b2db      	uxtb	r3, r3
 80087fe:	461a      	mov	r2, r3
 8008800:	79fb      	ldrb	r3, [r7, #7]
 8008802:	429a      	cmp	r2, r3
 8008804:	d0df      	beq.n	80087c6 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 8008806:	2300      	movs	r3, #0
}
 8008808:	4618      	mov	r0, r3
 800880a:	3710      	adds	r7, #16
 800880c:	46bd      	mov	sp, r7
 800880e:	bd80      	pop	{r7, pc}

08008810 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 8008810:	b480      	push	{r7}
 8008812:	b085      	sub	sp, #20
 8008814:	af00      	add	r7, sp, #0
 8008816:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800881c:	095b      	lsrs	r3, r3, #5
 800881e:	3301      	adds	r3, #1
 8008820:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	68db      	ldr	r3, [r3, #12]
 8008826:	3301      	adds	r3, #1
 8008828:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800882a:	68bb      	ldr	r3, [r7, #8]
 800882c:	3307      	adds	r3, #7
 800882e:	08db      	lsrs	r3, r3, #3
 8008830:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8008832:	68bb      	ldr	r3, [r7, #8]
 8008834:	68fa      	ldr	r2, [r7, #12]
 8008836:	fb02 f303 	mul.w	r3, r2, r3
}
 800883a:	4618      	mov	r0, r3
 800883c:	3714      	adds	r7, #20
 800883e:	46bd      	mov	sp, r7
 8008840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008844:	4770      	bx	lr

08008846 <HAL_SPIEx_SetConfigAutonomousMode>:
  *                the configuration information of the autonomous mode for the specified SPIx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPIEx_SetConfigAutonomousMode(SPI_HandleTypeDef *hspi,
                                                    const SPI_AutonomousModeConfTypeDef *sConfig)
{
 8008846:	b480      	push	{r7}
 8008848:	b083      	sub	sp, #12
 800884a:	af00      	add	r7, sp, #0
 800884c:	6078      	str	r0, [r7, #4]
 800884e:	6039      	str	r1, [r7, #0]
  if (hspi->State == HAL_SPI_STATE_READY)
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 8008856:	b2db      	uxtb	r3, r3
 8008858:	2b01      	cmp	r3, #1
 800885a:	d12e      	bne.n	80088ba <HAL_SPIEx_SetConfigAutonomousMode+0x74>
  {
    /* Process Locked */
    __HAL_LOCK(hspi);
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 8008862:	2b01      	cmp	r3, #1
 8008864:	d101      	bne.n	800886a <HAL_SPIEx_SetConfigAutonomousMode+0x24>
 8008866:	2302      	movs	r3, #2
 8008868:	e028      	b.n	80088bc <HAL_SPIEx_SetConfigAutonomousMode+0x76>
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	2201      	movs	r2, #1
 800886e:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

    hspi->State = HAL_SPI_STATE_BUSY;
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	2202      	movs	r2, #2
 8008876:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
    assert_param(IS_SPI_AUTONOMOUS_INSTANCE(hspi->Instance));
    assert_param(IS_SPI_TRIG_SOURCE(hspi->Instance, sConfig->TriggerSelection));
    assert_param(IS_SPI_AUTO_MODE_TRG_POL(sConfig->TriggerPolarity));

    /* Disable the selected SPI peripheral to be able to configure AUTOCR */
    __HAL_SPI_DISABLE(hspi);
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	681a      	ldr	r2, [r3, #0]
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	f022 0201 	bic.w	r2, r2, #1
 8008888:	601a      	str	r2, [r3, #0]

    /* SPIx AUTOCR Configuration */
    WRITE_REG(hspi->Instance->AUTOCR, (sConfig->TriggerState | ((sConfig->TriggerSelection) & SPI_AUTOCR_TRIGSEL_Msk) |
 800888a:	683b      	ldr	r3, [r7, #0]
 800888c:	681a      	ldr	r2, [r3, #0]
 800888e:	683b      	ldr	r3, [r7, #0]
 8008890:	685b      	ldr	r3, [r3, #4]
 8008892:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8008896:	ea42 0103 	orr.w	r1, r2, r3
 800889a:	683b      	ldr	r3, [r7, #0]
 800889c:	689a      	ldr	r2, [r3, #8]
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	430a      	orrs	r2, r1
 80088a4:	61da      	str	r2, [r3, #28]
                                       sConfig->TriggerPolarity));

    hspi->State = HAL_SPI_STATE_READY;
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	2201      	movs	r2, #1
 80088aa:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	2200      	movs	r2, #0
 80088b2:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 80088b6:	2300      	movs	r3, #0
 80088b8:	e000      	b.n	80088bc <HAL_SPIEx_SetConfigAutonomousMode+0x76>
  }
  else
  {
    return HAL_ERROR;
 80088ba:	2301      	movs	r3, #1
  }
}
 80088bc:	4618      	mov	r0, r3
 80088be:	370c      	adds	r7, #12
 80088c0:	46bd      	mov	sp, r7
 80088c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088c6:	4770      	bx	lr

080088c8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80088c8:	b580      	push	{r7, lr}
 80088ca:	b082      	sub	sp, #8
 80088cc:	af00      	add	r7, sp, #0
 80088ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	d101      	bne.n	80088da <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80088d6:	2301      	movs	r3, #1
 80088d8:	e049      	b.n	800896e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80088e0:	b2db      	uxtb	r3, r3
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	d106      	bne.n	80088f4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	2200      	movs	r2, #0
 80088ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80088ee:	6878      	ldr	r0, [r7, #4]
 80088f0:	f000 f841 	bl	8008976 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	2202      	movs	r2, #2
 80088f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	681a      	ldr	r2, [r3, #0]
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	3304      	adds	r3, #4
 8008904:	4619      	mov	r1, r3
 8008906:	4610      	mov	r0, r2
 8008908:	f000 fa58 	bl	8008dbc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	2201      	movs	r2, #1
 8008910:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	2201      	movs	r2, #1
 8008918:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	2201      	movs	r2, #1
 8008920:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	2201      	movs	r2, #1
 8008928:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	2201      	movs	r2, #1
 8008930:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	2201      	movs	r2, #1
 8008938:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	2201      	movs	r2, #1
 8008940:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	2201      	movs	r2, #1
 8008948:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	2201      	movs	r2, #1
 8008950:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	2201      	movs	r2, #1
 8008958:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	2201      	movs	r2, #1
 8008960:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	2201      	movs	r2, #1
 8008968:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800896c:	2300      	movs	r3, #0
}
 800896e:	4618      	mov	r0, r3
 8008970:	3708      	adds	r7, #8
 8008972:	46bd      	mov	sp, r7
 8008974:	bd80      	pop	{r7, pc}

08008976 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8008976:	b480      	push	{r7}
 8008978:	b083      	sub	sp, #12
 800897a:	af00      	add	r7, sp, #0
 800897c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800897e:	bf00      	nop
 8008980:	370c      	adds	r7, #12
 8008982:	46bd      	mov	sp, r7
 8008984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008988:	4770      	bx	lr
	...

0800898c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800898c:	b480      	push	{r7}
 800898e:	b085      	sub	sp, #20
 8008990:	af00      	add	r7, sp, #0
 8008992:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800899a:	b2db      	uxtb	r3, r3
 800899c:	2b01      	cmp	r3, #1
 800899e:	d001      	beq.n	80089a4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80089a0:	2301      	movs	r3, #1
 80089a2:	e072      	b.n	8008a8a <HAL_TIM_Base_Start_IT+0xfe>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	2202      	movs	r2, #2
 80089a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	68da      	ldr	r2, [r3, #12]
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	f042 0201 	orr.w	r2, r2, #1
 80089ba:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	4a35      	ldr	r2, [pc, #212]	@ (8008a98 <HAL_TIM_Base_Start_IT+0x10c>)
 80089c2:	4293      	cmp	r3, r2
 80089c4:	d040      	beq.n	8008a48 <HAL_TIM_Base_Start_IT+0xbc>
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	4a34      	ldr	r2, [pc, #208]	@ (8008a9c <HAL_TIM_Base_Start_IT+0x110>)
 80089cc:	4293      	cmp	r3, r2
 80089ce:	d03b      	beq.n	8008a48 <HAL_TIM_Base_Start_IT+0xbc>
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80089d8:	d036      	beq.n	8008a48 <HAL_TIM_Base_Start_IT+0xbc>
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80089e2:	d031      	beq.n	8008a48 <HAL_TIM_Base_Start_IT+0xbc>
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	4a2d      	ldr	r2, [pc, #180]	@ (8008aa0 <HAL_TIM_Base_Start_IT+0x114>)
 80089ea:	4293      	cmp	r3, r2
 80089ec:	d02c      	beq.n	8008a48 <HAL_TIM_Base_Start_IT+0xbc>
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	4a2c      	ldr	r2, [pc, #176]	@ (8008aa4 <HAL_TIM_Base_Start_IT+0x118>)
 80089f4:	4293      	cmp	r3, r2
 80089f6:	d027      	beq.n	8008a48 <HAL_TIM_Base_Start_IT+0xbc>
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	4a2a      	ldr	r2, [pc, #168]	@ (8008aa8 <HAL_TIM_Base_Start_IT+0x11c>)
 80089fe:	4293      	cmp	r3, r2
 8008a00:	d022      	beq.n	8008a48 <HAL_TIM_Base_Start_IT+0xbc>
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	4a29      	ldr	r2, [pc, #164]	@ (8008aac <HAL_TIM_Base_Start_IT+0x120>)
 8008a08:	4293      	cmp	r3, r2
 8008a0a:	d01d      	beq.n	8008a48 <HAL_TIM_Base_Start_IT+0xbc>
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	4a27      	ldr	r2, [pc, #156]	@ (8008ab0 <HAL_TIM_Base_Start_IT+0x124>)
 8008a12:	4293      	cmp	r3, r2
 8008a14:	d018      	beq.n	8008a48 <HAL_TIM_Base_Start_IT+0xbc>
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	4a26      	ldr	r2, [pc, #152]	@ (8008ab4 <HAL_TIM_Base_Start_IT+0x128>)
 8008a1c:	4293      	cmp	r3, r2
 8008a1e:	d013      	beq.n	8008a48 <HAL_TIM_Base_Start_IT+0xbc>
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	4a24      	ldr	r2, [pc, #144]	@ (8008ab8 <HAL_TIM_Base_Start_IT+0x12c>)
 8008a26:	4293      	cmp	r3, r2
 8008a28:	d00e      	beq.n	8008a48 <HAL_TIM_Base_Start_IT+0xbc>
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	4a23      	ldr	r2, [pc, #140]	@ (8008abc <HAL_TIM_Base_Start_IT+0x130>)
 8008a30:	4293      	cmp	r3, r2
 8008a32:	d009      	beq.n	8008a48 <HAL_TIM_Base_Start_IT+0xbc>
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	4a21      	ldr	r2, [pc, #132]	@ (8008ac0 <HAL_TIM_Base_Start_IT+0x134>)
 8008a3a:	4293      	cmp	r3, r2
 8008a3c:	d004      	beq.n	8008a48 <HAL_TIM_Base_Start_IT+0xbc>
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	4a20      	ldr	r2, [pc, #128]	@ (8008ac4 <HAL_TIM_Base_Start_IT+0x138>)
 8008a44:	4293      	cmp	r3, r2
 8008a46:	d115      	bne.n	8008a74 <HAL_TIM_Base_Start_IT+0xe8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	689a      	ldr	r2, [r3, #8]
 8008a4e:	4b1e      	ldr	r3, [pc, #120]	@ (8008ac8 <HAL_TIM_Base_Start_IT+0x13c>)
 8008a50:	4013      	ands	r3, r2
 8008a52:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008a54:	68fb      	ldr	r3, [r7, #12]
 8008a56:	2b06      	cmp	r3, #6
 8008a58:	d015      	beq.n	8008a86 <HAL_TIM_Base_Start_IT+0xfa>
 8008a5a:	68fb      	ldr	r3, [r7, #12]
 8008a5c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008a60:	d011      	beq.n	8008a86 <HAL_TIM_Base_Start_IT+0xfa>
    {
      __HAL_TIM_ENABLE(htim);
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	681a      	ldr	r2, [r3, #0]
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	f042 0201 	orr.w	r2, r2, #1
 8008a70:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008a72:	e008      	b.n	8008a86 <HAL_TIM_Base_Start_IT+0xfa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	681a      	ldr	r2, [r3, #0]
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	f042 0201 	orr.w	r2, r2, #1
 8008a82:	601a      	str	r2, [r3, #0]
 8008a84:	e000      	b.n	8008a88 <HAL_TIM_Base_Start_IT+0xfc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008a86:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008a88:	2300      	movs	r3, #0
}
 8008a8a:	4618      	mov	r0, r3
 8008a8c:	3714      	adds	r7, #20
 8008a8e:	46bd      	mov	sp, r7
 8008a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a94:	4770      	bx	lr
 8008a96:	bf00      	nop
 8008a98:	40012c00 	.word	0x40012c00
 8008a9c:	50012c00 	.word	0x50012c00
 8008aa0:	40000400 	.word	0x40000400
 8008aa4:	50000400 	.word	0x50000400
 8008aa8:	40000800 	.word	0x40000800
 8008aac:	50000800 	.word	0x50000800
 8008ab0:	40000c00 	.word	0x40000c00
 8008ab4:	50000c00 	.word	0x50000c00
 8008ab8:	40013400 	.word	0x40013400
 8008abc:	50013400 	.word	0x50013400
 8008ac0:	40014000 	.word	0x40014000
 8008ac4:	50014000 	.word	0x50014000
 8008ac8:	00010007 	.word	0x00010007

08008acc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008acc:	b580      	push	{r7, lr}
 8008ace:	b084      	sub	sp, #16
 8008ad0:	af00      	add	r7, sp, #0
 8008ad2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	68db      	ldr	r3, [r3, #12]
 8008ada:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	691b      	ldr	r3, [r3, #16]
 8008ae2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8008ae4:	68bb      	ldr	r3, [r7, #8]
 8008ae6:	f003 0302 	and.w	r3, r3, #2
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	d020      	beq.n	8008b30 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8008aee:	68fb      	ldr	r3, [r7, #12]
 8008af0:	f003 0302 	and.w	r3, r3, #2
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	d01b      	beq.n	8008b30 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	f06f 0202 	mvn.w	r2, #2
 8008b00:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	2201      	movs	r2, #1
 8008b06:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	699b      	ldr	r3, [r3, #24]
 8008b0e:	f003 0303 	and.w	r3, r3, #3
 8008b12:	2b00      	cmp	r3, #0
 8008b14:	d003      	beq.n	8008b1e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008b16:	6878      	ldr	r0, [r7, #4]
 8008b18:	f000 f931 	bl	8008d7e <HAL_TIM_IC_CaptureCallback>
 8008b1c:	e005      	b.n	8008b2a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008b1e:	6878      	ldr	r0, [r7, #4]
 8008b20:	f000 f923 	bl	8008d6a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008b24:	6878      	ldr	r0, [r7, #4]
 8008b26:	f000 f934 	bl	8008d92 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	2200      	movs	r2, #0
 8008b2e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8008b30:	68bb      	ldr	r3, [r7, #8]
 8008b32:	f003 0304 	and.w	r3, r3, #4
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	d020      	beq.n	8008b7c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8008b3a:	68fb      	ldr	r3, [r7, #12]
 8008b3c:	f003 0304 	and.w	r3, r3, #4
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	d01b      	beq.n	8008b7c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	f06f 0204 	mvn.w	r2, #4
 8008b4c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	2202      	movs	r2, #2
 8008b52:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	699b      	ldr	r3, [r3, #24]
 8008b5a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	d003      	beq.n	8008b6a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008b62:	6878      	ldr	r0, [r7, #4]
 8008b64:	f000 f90b 	bl	8008d7e <HAL_TIM_IC_CaptureCallback>
 8008b68:	e005      	b.n	8008b76 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008b6a:	6878      	ldr	r0, [r7, #4]
 8008b6c:	f000 f8fd 	bl	8008d6a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008b70:	6878      	ldr	r0, [r7, #4]
 8008b72:	f000 f90e 	bl	8008d92 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	2200      	movs	r2, #0
 8008b7a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8008b7c:	68bb      	ldr	r3, [r7, #8]
 8008b7e:	f003 0308 	and.w	r3, r3, #8
 8008b82:	2b00      	cmp	r3, #0
 8008b84:	d020      	beq.n	8008bc8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	f003 0308 	and.w	r3, r3, #8
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	d01b      	beq.n	8008bc8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	f06f 0208 	mvn.w	r2, #8
 8008b98:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	2204      	movs	r2, #4
 8008b9e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	69db      	ldr	r3, [r3, #28]
 8008ba6:	f003 0303 	and.w	r3, r3, #3
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	d003      	beq.n	8008bb6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008bae:	6878      	ldr	r0, [r7, #4]
 8008bb0:	f000 f8e5 	bl	8008d7e <HAL_TIM_IC_CaptureCallback>
 8008bb4:	e005      	b.n	8008bc2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008bb6:	6878      	ldr	r0, [r7, #4]
 8008bb8:	f000 f8d7 	bl	8008d6a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008bbc:	6878      	ldr	r0, [r7, #4]
 8008bbe:	f000 f8e8 	bl	8008d92 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	2200      	movs	r2, #0
 8008bc6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8008bc8:	68bb      	ldr	r3, [r7, #8]
 8008bca:	f003 0310 	and.w	r3, r3, #16
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	d020      	beq.n	8008c14 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8008bd2:	68fb      	ldr	r3, [r7, #12]
 8008bd4:	f003 0310 	and.w	r3, r3, #16
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	d01b      	beq.n	8008c14 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	f06f 0210 	mvn.w	r2, #16
 8008be4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	2208      	movs	r2, #8
 8008bea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	69db      	ldr	r3, [r3, #28]
 8008bf2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	d003      	beq.n	8008c02 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008bfa:	6878      	ldr	r0, [r7, #4]
 8008bfc:	f000 f8bf 	bl	8008d7e <HAL_TIM_IC_CaptureCallback>
 8008c00:	e005      	b.n	8008c0e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008c02:	6878      	ldr	r0, [r7, #4]
 8008c04:	f000 f8b1 	bl	8008d6a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008c08:	6878      	ldr	r0, [r7, #4]
 8008c0a:	f000 f8c2 	bl	8008d92 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	2200      	movs	r2, #0
 8008c12:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8008c14:	68bb      	ldr	r3, [r7, #8]
 8008c16:	f003 0301 	and.w	r3, r3, #1
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d00c      	beq.n	8008c38 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8008c1e:	68fb      	ldr	r3, [r7, #12]
 8008c20:	f003 0301 	and.w	r3, r3, #1
 8008c24:	2b00      	cmp	r3, #0
 8008c26:	d007      	beq.n	8008c38 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	f06f 0201 	mvn.w	r2, #1
 8008c30:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008c32:	6878      	ldr	r0, [r7, #4]
 8008c34:	f7f8 f854 	bl	8000ce0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8008c38:	68bb      	ldr	r3, [r7, #8]
 8008c3a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	d104      	bne.n	8008c4c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8008c42:	68bb      	ldr	r3, [r7, #8]
 8008c44:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	d00c      	beq.n	8008c66 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	d007      	beq.n	8008c66 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8008c5e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008c60:	6878      	ldr	r0, [r7, #4]
 8008c62:	f000 f9b5 	bl	8008fd0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8008c66:	68bb      	ldr	r3, [r7, #8]
 8008c68:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	d00c      	beq.n	8008c8a <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008c70:	68fb      	ldr	r3, [r7, #12]
 8008c72:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	d007      	beq.n	8008c8a <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8008c82:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008c84:	6878      	ldr	r0, [r7, #4]
 8008c86:	f000 f9ad 	bl	8008fe4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8008c8a:	68bb      	ldr	r3, [r7, #8]
 8008c8c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	d00c      	beq.n	8008cae <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	d007      	beq.n	8008cae <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8008ca6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008ca8:	6878      	ldr	r0, [r7, #4]
 8008caa:	f000 f87c 	bl	8008da6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8008cae:	68bb      	ldr	r3, [r7, #8]
 8008cb0:	f003 0320 	and.w	r3, r3, #32
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	d00c      	beq.n	8008cd2 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	f003 0320 	and.w	r3, r3, #32
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	d007      	beq.n	8008cd2 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	f06f 0220 	mvn.w	r2, #32
 8008cca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008ccc:	6878      	ldr	r0, [r7, #4]
 8008cce:	f000 f975 	bl	8008fbc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8008cd2:	68bb      	ldr	r3, [r7, #8]
 8008cd4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	d00c      	beq.n	8008cf6 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	d007      	beq.n	8008cf6 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8008cee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8008cf0:	6878      	ldr	r0, [r7, #4]
 8008cf2:	f000 f981 	bl	8008ff8 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8008cf6:	68bb      	ldr	r3, [r7, #8]
 8008cf8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	d00c      	beq.n	8008d1a <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8008d00:	68fb      	ldr	r3, [r7, #12]
 8008d02:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	d007      	beq.n	8008d1a <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8008d12:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8008d14:	6878      	ldr	r0, [r7, #4]
 8008d16:	f000 f979 	bl	800900c <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8008d1a:	68bb      	ldr	r3, [r7, #8]
 8008d1c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	d00c      	beq.n	8008d3e <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8008d24:	68fb      	ldr	r3, [r7, #12]
 8008d26:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	d007      	beq.n	8008d3e <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8008d36:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8008d38:	6878      	ldr	r0, [r7, #4]
 8008d3a:	f000 f971 	bl	8009020 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8008d3e:	68bb      	ldr	r3, [r7, #8]
 8008d40:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	d00c      	beq.n	8008d62 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8008d48:	68fb      	ldr	r3, [r7, #12]
 8008d4a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008d4e:	2b00      	cmp	r3, #0
 8008d50:	d007      	beq.n	8008d62 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8008d5a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8008d5c:	6878      	ldr	r0, [r7, #4]
 8008d5e:	f000 f969 	bl	8009034 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008d62:	bf00      	nop
 8008d64:	3710      	adds	r7, #16
 8008d66:	46bd      	mov	sp, r7
 8008d68:	bd80      	pop	{r7, pc}

08008d6a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008d6a:	b480      	push	{r7}
 8008d6c:	b083      	sub	sp, #12
 8008d6e:	af00      	add	r7, sp, #0
 8008d70:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008d72:	bf00      	nop
 8008d74:	370c      	adds	r7, #12
 8008d76:	46bd      	mov	sp, r7
 8008d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d7c:	4770      	bx	lr

08008d7e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008d7e:	b480      	push	{r7}
 8008d80:	b083      	sub	sp, #12
 8008d82:	af00      	add	r7, sp, #0
 8008d84:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008d86:	bf00      	nop
 8008d88:	370c      	adds	r7, #12
 8008d8a:	46bd      	mov	sp, r7
 8008d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d90:	4770      	bx	lr

08008d92 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008d92:	b480      	push	{r7}
 8008d94:	b083      	sub	sp, #12
 8008d96:	af00      	add	r7, sp, #0
 8008d98:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008d9a:	bf00      	nop
 8008d9c:	370c      	adds	r7, #12
 8008d9e:	46bd      	mov	sp, r7
 8008da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008da4:	4770      	bx	lr

08008da6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008da6:	b480      	push	{r7}
 8008da8:	b083      	sub	sp, #12
 8008daa:	af00      	add	r7, sp, #0
 8008dac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008dae:	bf00      	nop
 8008db0:	370c      	adds	r7, #12
 8008db2:	46bd      	mov	sp, r7
 8008db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008db8:	4770      	bx	lr
	...

08008dbc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008dbc:	b480      	push	{r7}
 8008dbe:	b085      	sub	sp, #20
 8008dc0:	af00      	add	r7, sp, #0
 8008dc2:	6078      	str	r0, [r7, #4]
 8008dc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	4a6b      	ldr	r2, [pc, #428]	@ (8008f7c <TIM_Base_SetConfig+0x1c0>)
 8008dd0:	4293      	cmp	r3, r2
 8008dd2:	d02b      	beq.n	8008e2c <TIM_Base_SetConfig+0x70>
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	4a6a      	ldr	r2, [pc, #424]	@ (8008f80 <TIM_Base_SetConfig+0x1c4>)
 8008dd8:	4293      	cmp	r3, r2
 8008dda:	d027      	beq.n	8008e2c <TIM_Base_SetConfig+0x70>
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008de2:	d023      	beq.n	8008e2c <TIM_Base_SetConfig+0x70>
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008dea:	d01f      	beq.n	8008e2c <TIM_Base_SetConfig+0x70>
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	4a65      	ldr	r2, [pc, #404]	@ (8008f84 <TIM_Base_SetConfig+0x1c8>)
 8008df0:	4293      	cmp	r3, r2
 8008df2:	d01b      	beq.n	8008e2c <TIM_Base_SetConfig+0x70>
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	4a64      	ldr	r2, [pc, #400]	@ (8008f88 <TIM_Base_SetConfig+0x1cc>)
 8008df8:	4293      	cmp	r3, r2
 8008dfa:	d017      	beq.n	8008e2c <TIM_Base_SetConfig+0x70>
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	4a63      	ldr	r2, [pc, #396]	@ (8008f8c <TIM_Base_SetConfig+0x1d0>)
 8008e00:	4293      	cmp	r3, r2
 8008e02:	d013      	beq.n	8008e2c <TIM_Base_SetConfig+0x70>
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	4a62      	ldr	r2, [pc, #392]	@ (8008f90 <TIM_Base_SetConfig+0x1d4>)
 8008e08:	4293      	cmp	r3, r2
 8008e0a:	d00f      	beq.n	8008e2c <TIM_Base_SetConfig+0x70>
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	4a61      	ldr	r2, [pc, #388]	@ (8008f94 <TIM_Base_SetConfig+0x1d8>)
 8008e10:	4293      	cmp	r3, r2
 8008e12:	d00b      	beq.n	8008e2c <TIM_Base_SetConfig+0x70>
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	4a60      	ldr	r2, [pc, #384]	@ (8008f98 <TIM_Base_SetConfig+0x1dc>)
 8008e18:	4293      	cmp	r3, r2
 8008e1a:	d007      	beq.n	8008e2c <TIM_Base_SetConfig+0x70>
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	4a5f      	ldr	r2, [pc, #380]	@ (8008f9c <TIM_Base_SetConfig+0x1e0>)
 8008e20:	4293      	cmp	r3, r2
 8008e22:	d003      	beq.n	8008e2c <TIM_Base_SetConfig+0x70>
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	4a5e      	ldr	r2, [pc, #376]	@ (8008fa0 <TIM_Base_SetConfig+0x1e4>)
 8008e28:	4293      	cmp	r3, r2
 8008e2a:	d108      	bne.n	8008e3e <TIM_Base_SetConfig+0x82>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008e2c:	68fb      	ldr	r3, [r7, #12]
 8008e2e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008e32:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008e34:	683b      	ldr	r3, [r7, #0]
 8008e36:	685b      	ldr	r3, [r3, #4]
 8008e38:	68fa      	ldr	r2, [r7, #12]
 8008e3a:	4313      	orrs	r3, r2
 8008e3c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	4a4e      	ldr	r2, [pc, #312]	@ (8008f7c <TIM_Base_SetConfig+0x1c0>)
 8008e42:	4293      	cmp	r3, r2
 8008e44:	d043      	beq.n	8008ece <TIM_Base_SetConfig+0x112>
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	4a4d      	ldr	r2, [pc, #308]	@ (8008f80 <TIM_Base_SetConfig+0x1c4>)
 8008e4a:	4293      	cmp	r3, r2
 8008e4c:	d03f      	beq.n	8008ece <TIM_Base_SetConfig+0x112>
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008e54:	d03b      	beq.n	8008ece <TIM_Base_SetConfig+0x112>
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008e5c:	d037      	beq.n	8008ece <TIM_Base_SetConfig+0x112>
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	4a48      	ldr	r2, [pc, #288]	@ (8008f84 <TIM_Base_SetConfig+0x1c8>)
 8008e62:	4293      	cmp	r3, r2
 8008e64:	d033      	beq.n	8008ece <TIM_Base_SetConfig+0x112>
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	4a47      	ldr	r2, [pc, #284]	@ (8008f88 <TIM_Base_SetConfig+0x1cc>)
 8008e6a:	4293      	cmp	r3, r2
 8008e6c:	d02f      	beq.n	8008ece <TIM_Base_SetConfig+0x112>
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	4a46      	ldr	r2, [pc, #280]	@ (8008f8c <TIM_Base_SetConfig+0x1d0>)
 8008e72:	4293      	cmp	r3, r2
 8008e74:	d02b      	beq.n	8008ece <TIM_Base_SetConfig+0x112>
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	4a45      	ldr	r2, [pc, #276]	@ (8008f90 <TIM_Base_SetConfig+0x1d4>)
 8008e7a:	4293      	cmp	r3, r2
 8008e7c:	d027      	beq.n	8008ece <TIM_Base_SetConfig+0x112>
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	4a44      	ldr	r2, [pc, #272]	@ (8008f94 <TIM_Base_SetConfig+0x1d8>)
 8008e82:	4293      	cmp	r3, r2
 8008e84:	d023      	beq.n	8008ece <TIM_Base_SetConfig+0x112>
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	4a43      	ldr	r2, [pc, #268]	@ (8008f98 <TIM_Base_SetConfig+0x1dc>)
 8008e8a:	4293      	cmp	r3, r2
 8008e8c:	d01f      	beq.n	8008ece <TIM_Base_SetConfig+0x112>
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	4a42      	ldr	r2, [pc, #264]	@ (8008f9c <TIM_Base_SetConfig+0x1e0>)
 8008e92:	4293      	cmp	r3, r2
 8008e94:	d01b      	beq.n	8008ece <TIM_Base_SetConfig+0x112>
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	4a41      	ldr	r2, [pc, #260]	@ (8008fa0 <TIM_Base_SetConfig+0x1e4>)
 8008e9a:	4293      	cmp	r3, r2
 8008e9c:	d017      	beq.n	8008ece <TIM_Base_SetConfig+0x112>
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	4a40      	ldr	r2, [pc, #256]	@ (8008fa4 <TIM_Base_SetConfig+0x1e8>)
 8008ea2:	4293      	cmp	r3, r2
 8008ea4:	d013      	beq.n	8008ece <TIM_Base_SetConfig+0x112>
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	4a3f      	ldr	r2, [pc, #252]	@ (8008fa8 <TIM_Base_SetConfig+0x1ec>)
 8008eaa:	4293      	cmp	r3, r2
 8008eac:	d00f      	beq.n	8008ece <TIM_Base_SetConfig+0x112>
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	4a3e      	ldr	r2, [pc, #248]	@ (8008fac <TIM_Base_SetConfig+0x1f0>)
 8008eb2:	4293      	cmp	r3, r2
 8008eb4:	d00b      	beq.n	8008ece <TIM_Base_SetConfig+0x112>
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	4a3d      	ldr	r2, [pc, #244]	@ (8008fb0 <TIM_Base_SetConfig+0x1f4>)
 8008eba:	4293      	cmp	r3, r2
 8008ebc:	d007      	beq.n	8008ece <TIM_Base_SetConfig+0x112>
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	4a3c      	ldr	r2, [pc, #240]	@ (8008fb4 <TIM_Base_SetConfig+0x1f8>)
 8008ec2:	4293      	cmp	r3, r2
 8008ec4:	d003      	beq.n	8008ece <TIM_Base_SetConfig+0x112>
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	4a3b      	ldr	r2, [pc, #236]	@ (8008fb8 <TIM_Base_SetConfig+0x1fc>)
 8008eca:	4293      	cmp	r3, r2
 8008ecc:	d108      	bne.n	8008ee0 <TIM_Base_SetConfig+0x124>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008ece:	68fb      	ldr	r3, [r7, #12]
 8008ed0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008ed4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008ed6:	683b      	ldr	r3, [r7, #0]
 8008ed8:	68db      	ldr	r3, [r3, #12]
 8008eda:	68fa      	ldr	r2, [r7, #12]
 8008edc:	4313      	orrs	r3, r2
 8008ede:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008ee0:	68fb      	ldr	r3, [r7, #12]
 8008ee2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8008ee6:	683b      	ldr	r3, [r7, #0]
 8008ee8:	695b      	ldr	r3, [r3, #20]
 8008eea:	4313      	orrs	r3, r2
 8008eec:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008eee:	683b      	ldr	r3, [r7, #0]
 8008ef0:	689a      	ldr	r2, [r3, #8]
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008ef6:	683b      	ldr	r3, [r7, #0]
 8008ef8:	681a      	ldr	r2, [r3, #0]
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	4a1e      	ldr	r2, [pc, #120]	@ (8008f7c <TIM_Base_SetConfig+0x1c0>)
 8008f02:	4293      	cmp	r3, r2
 8008f04:	d023      	beq.n	8008f4e <TIM_Base_SetConfig+0x192>
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	4a1d      	ldr	r2, [pc, #116]	@ (8008f80 <TIM_Base_SetConfig+0x1c4>)
 8008f0a:	4293      	cmp	r3, r2
 8008f0c:	d01f      	beq.n	8008f4e <TIM_Base_SetConfig+0x192>
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	4a22      	ldr	r2, [pc, #136]	@ (8008f9c <TIM_Base_SetConfig+0x1e0>)
 8008f12:	4293      	cmp	r3, r2
 8008f14:	d01b      	beq.n	8008f4e <TIM_Base_SetConfig+0x192>
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	4a21      	ldr	r2, [pc, #132]	@ (8008fa0 <TIM_Base_SetConfig+0x1e4>)
 8008f1a:	4293      	cmp	r3, r2
 8008f1c:	d017      	beq.n	8008f4e <TIM_Base_SetConfig+0x192>
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	4a20      	ldr	r2, [pc, #128]	@ (8008fa4 <TIM_Base_SetConfig+0x1e8>)
 8008f22:	4293      	cmp	r3, r2
 8008f24:	d013      	beq.n	8008f4e <TIM_Base_SetConfig+0x192>
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	4a1f      	ldr	r2, [pc, #124]	@ (8008fa8 <TIM_Base_SetConfig+0x1ec>)
 8008f2a:	4293      	cmp	r3, r2
 8008f2c:	d00f      	beq.n	8008f4e <TIM_Base_SetConfig+0x192>
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	4a1e      	ldr	r2, [pc, #120]	@ (8008fac <TIM_Base_SetConfig+0x1f0>)
 8008f32:	4293      	cmp	r3, r2
 8008f34:	d00b      	beq.n	8008f4e <TIM_Base_SetConfig+0x192>
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	4a1d      	ldr	r2, [pc, #116]	@ (8008fb0 <TIM_Base_SetConfig+0x1f4>)
 8008f3a:	4293      	cmp	r3, r2
 8008f3c:	d007      	beq.n	8008f4e <TIM_Base_SetConfig+0x192>
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	4a1c      	ldr	r2, [pc, #112]	@ (8008fb4 <TIM_Base_SetConfig+0x1f8>)
 8008f42:	4293      	cmp	r3, r2
 8008f44:	d003      	beq.n	8008f4e <TIM_Base_SetConfig+0x192>
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	4a1b      	ldr	r2, [pc, #108]	@ (8008fb8 <TIM_Base_SetConfig+0x1fc>)
 8008f4a:	4293      	cmp	r3, r2
 8008f4c:	d103      	bne.n	8008f56 <TIM_Base_SetConfig+0x19a>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008f4e:	683b      	ldr	r3, [r7, #0]
 8008f50:	691a      	ldr	r2, [r3, #16]
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	f043 0204 	orr.w	r2, r3, #4
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	2201      	movs	r2, #1
 8008f66:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	68fa      	ldr	r2, [r7, #12]
 8008f6c:	601a      	str	r2, [r3, #0]
}
 8008f6e:	bf00      	nop
 8008f70:	3714      	adds	r7, #20
 8008f72:	46bd      	mov	sp, r7
 8008f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f78:	4770      	bx	lr
 8008f7a:	bf00      	nop
 8008f7c:	40012c00 	.word	0x40012c00
 8008f80:	50012c00 	.word	0x50012c00
 8008f84:	40000400 	.word	0x40000400
 8008f88:	50000400 	.word	0x50000400
 8008f8c:	40000800 	.word	0x40000800
 8008f90:	50000800 	.word	0x50000800
 8008f94:	40000c00 	.word	0x40000c00
 8008f98:	50000c00 	.word	0x50000c00
 8008f9c:	40013400 	.word	0x40013400
 8008fa0:	50013400 	.word	0x50013400
 8008fa4:	40014000 	.word	0x40014000
 8008fa8:	50014000 	.word	0x50014000
 8008fac:	40014400 	.word	0x40014400
 8008fb0:	50014400 	.word	0x50014400
 8008fb4:	40014800 	.word	0x40014800
 8008fb8:	50014800 	.word	0x50014800

08008fbc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008fbc:	b480      	push	{r7}
 8008fbe:	b083      	sub	sp, #12
 8008fc0:	af00      	add	r7, sp, #0
 8008fc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008fc4:	bf00      	nop
 8008fc6:	370c      	adds	r7, #12
 8008fc8:	46bd      	mov	sp, r7
 8008fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fce:	4770      	bx	lr

08008fd0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008fd0:	b480      	push	{r7}
 8008fd2:	b083      	sub	sp, #12
 8008fd4:	af00      	add	r7, sp, #0
 8008fd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008fd8:	bf00      	nop
 8008fda:	370c      	adds	r7, #12
 8008fdc:	46bd      	mov	sp, r7
 8008fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fe2:	4770      	bx	lr

08008fe4 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008fe4:	b480      	push	{r7}
 8008fe6:	b083      	sub	sp, #12
 8008fe8:	af00      	add	r7, sp, #0
 8008fea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008fec:	bf00      	nop
 8008fee:	370c      	adds	r7, #12
 8008ff0:	46bd      	mov	sp, r7
 8008ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ff6:	4770      	bx	lr

08008ff8 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8008ff8:	b480      	push	{r7}
 8008ffa:	b083      	sub	sp, #12
 8008ffc:	af00      	add	r7, sp, #0
 8008ffe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8009000:	bf00      	nop
 8009002:	370c      	adds	r7, #12
 8009004:	46bd      	mov	sp, r7
 8009006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800900a:	4770      	bx	lr

0800900c <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800900c:	b480      	push	{r7}
 800900e:	b083      	sub	sp, #12
 8009010:	af00      	add	r7, sp, #0
 8009012:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8009014:	bf00      	nop
 8009016:	370c      	adds	r7, #12
 8009018:	46bd      	mov	sp, r7
 800901a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800901e:	4770      	bx	lr

08009020 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8009020:	b480      	push	{r7}
 8009022:	b083      	sub	sp, #12
 8009024:	af00      	add	r7, sp, #0
 8009026:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8009028:	bf00      	nop
 800902a:	370c      	adds	r7, #12
 800902c:	46bd      	mov	sp, r7
 800902e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009032:	4770      	bx	lr

08009034 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8009034:	b480      	push	{r7}
 8009036:	b083      	sub	sp, #12
 8009038:	af00      	add	r7, sp, #0
 800903a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800903c:	bf00      	nop
 800903e:	370c      	adds	r7, #12
 8009040:	46bd      	mov	sp, r7
 8009042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009046:	4770      	bx	lr

08009048 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009048:	b580      	push	{r7, lr}
 800904a:	b082      	sub	sp, #8
 800904c:	af00      	add	r7, sp, #0
 800904e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	2b00      	cmp	r3, #0
 8009054:	d101      	bne.n	800905a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009056:	2301      	movs	r3, #1
 8009058:	e042      	b.n	80090e0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009060:	2b00      	cmp	r3, #0
 8009062:	d106      	bne.n	8009072 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	2200      	movs	r2, #0
 8009068:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800906c:	6878      	ldr	r0, [r7, #4]
 800906e:	f000 f83b 	bl	80090e8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	2224      	movs	r2, #36	@ 0x24
 8009076:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	681a      	ldr	r2, [r3, #0]
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	f022 0201 	bic.w	r2, r2, #1
 8009088:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800908e:	2b00      	cmp	r3, #0
 8009090:	d002      	beq.n	8009098 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8009092:	6878      	ldr	r0, [r7, #4]
 8009094:	f000 f9d4 	bl	8009440 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009098:	6878      	ldr	r0, [r7, #4]
 800909a:	f000 f82f 	bl	80090fc <UART_SetConfig>
 800909e:	4603      	mov	r3, r0
 80090a0:	2b01      	cmp	r3, #1
 80090a2:	d101      	bne.n	80090a8 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80090a4:	2301      	movs	r3, #1
 80090a6:	e01b      	b.n	80090e0 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	685a      	ldr	r2, [r3, #4]
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80090b6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	689a      	ldr	r2, [r3, #8]
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80090c6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	681a      	ldr	r2, [r3, #0]
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	f042 0201 	orr.w	r2, r2, #1
 80090d6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80090d8:	6878      	ldr	r0, [r7, #4]
 80090da:	f000 fa53 	bl	8009584 <UART_CheckIdleState>
 80090de:	4603      	mov	r3, r0
}
 80090e0:	4618      	mov	r0, r3
 80090e2:	3708      	adds	r7, #8
 80090e4:	46bd      	mov	sp, r7
 80090e6:	bd80      	pop	{r7, pc}

080090e8 <HAL_UART_MspInit>:
  * @brief Initialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 80090e8:	b480      	push	{r7}
 80090ea:	b083      	sub	sp, #12
 80090ec:	af00      	add	r7, sp, #0
 80090ee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 80090f0:	bf00      	nop
 80090f2:	370c      	adds	r7, #12
 80090f4:	46bd      	mov	sp, r7
 80090f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090fa:	4770      	bx	lr

080090fc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80090fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009100:	b094      	sub	sp, #80	@ 0x50
 8009102:	af00      	add	r7, sp, #0
 8009104:	62f8      	str	r0, [r7, #44]	@ 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009106:	2300      	movs	r3, #0
 8009108:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 800910c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800910e:	681a      	ldr	r2, [r3, #0]
 8009110:	4b7e      	ldr	r3, [pc, #504]	@ (800930c <UART_SetConfig+0x210>)
 8009112:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009114:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009116:	689a      	ldr	r2, [r3, #8]
 8009118:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800911a:	691b      	ldr	r3, [r3, #16]
 800911c:	431a      	orrs	r2, r3
 800911e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009120:	695b      	ldr	r3, [r3, #20]
 8009122:	431a      	orrs	r2, r3
 8009124:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009126:	69db      	ldr	r3, [r3, #28]
 8009128:	4313      	orrs	r3, r2
 800912a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800912c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	4977      	ldr	r1, [pc, #476]	@ (8009310 <UART_SetConfig+0x214>)
 8009134:	4019      	ands	r1, r3
 8009136:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009138:	681a      	ldr	r2, [r3, #0]
 800913a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800913c:	430b      	orrs	r3, r1
 800913e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009140:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	685b      	ldr	r3, [r3, #4]
 8009146:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800914a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800914c:	68d9      	ldr	r1, [r3, #12]
 800914e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009150:	681a      	ldr	r2, [r3, #0]
 8009152:	ea40 0301 	orr.w	r3, r0, r1
 8009156:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009158:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800915a:	699b      	ldr	r3, [r3, #24]
 800915c:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800915e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009160:	681a      	ldr	r2, [r3, #0]
 8009162:	4b6a      	ldr	r3, [pc, #424]	@ (800930c <UART_SetConfig+0x210>)
 8009164:	429a      	cmp	r2, r3
 8009166:	d009      	beq.n	800917c <UART_SetConfig+0x80>
 8009168:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800916a:	681a      	ldr	r2, [r3, #0]
 800916c:	4b69      	ldr	r3, [pc, #420]	@ (8009314 <UART_SetConfig+0x218>)
 800916e:	429a      	cmp	r2, r3
 8009170:	d004      	beq.n	800917c <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009172:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009174:	6a1a      	ldr	r2, [r3, #32]
 8009176:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009178:	4313      	orrs	r3, r2
 800917a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800917c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	689b      	ldr	r3, [r3, #8]
 8009182:	f023 416e 	bic.w	r1, r3, #3992977408	@ 0xee000000
 8009186:	f421 6130 	bic.w	r1, r1, #2816	@ 0xb00
 800918a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800918c:	681a      	ldr	r2, [r3, #0]
 800918e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009190:	430b      	orrs	r3, r1
 8009192:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009194:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800919a:	f023 000f 	bic.w	r0, r3, #15
 800919e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80091a0:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80091a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80091a4:	681a      	ldr	r2, [r3, #0]
 80091a6:	ea40 0301 	orr.w	r3, r0, r1
 80091aa:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80091ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80091ae:	681a      	ldr	r2, [r3, #0]
 80091b0:	4b59      	ldr	r3, [pc, #356]	@ (8009318 <UART_SetConfig+0x21c>)
 80091b2:	429a      	cmp	r2, r3
 80091b4:	d102      	bne.n	80091bc <UART_SetConfig+0xc0>
 80091b6:	2301      	movs	r3, #1
 80091b8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80091ba:	e029      	b.n	8009210 <UART_SetConfig+0x114>
 80091bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80091be:	681a      	ldr	r2, [r3, #0]
 80091c0:	4b56      	ldr	r3, [pc, #344]	@ (800931c <UART_SetConfig+0x220>)
 80091c2:	429a      	cmp	r2, r3
 80091c4:	d102      	bne.n	80091cc <UART_SetConfig+0xd0>
 80091c6:	2302      	movs	r3, #2
 80091c8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80091ca:	e021      	b.n	8009210 <UART_SetConfig+0x114>
 80091cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80091ce:	681a      	ldr	r2, [r3, #0]
 80091d0:	4b53      	ldr	r3, [pc, #332]	@ (8009320 <UART_SetConfig+0x224>)
 80091d2:	429a      	cmp	r2, r3
 80091d4:	d102      	bne.n	80091dc <UART_SetConfig+0xe0>
 80091d6:	2304      	movs	r3, #4
 80091d8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80091da:	e019      	b.n	8009210 <UART_SetConfig+0x114>
 80091dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80091de:	681a      	ldr	r2, [r3, #0]
 80091e0:	4b50      	ldr	r3, [pc, #320]	@ (8009324 <UART_SetConfig+0x228>)
 80091e2:	429a      	cmp	r2, r3
 80091e4:	d102      	bne.n	80091ec <UART_SetConfig+0xf0>
 80091e6:	2308      	movs	r3, #8
 80091e8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80091ea:	e011      	b.n	8009210 <UART_SetConfig+0x114>
 80091ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80091ee:	681a      	ldr	r2, [r3, #0]
 80091f0:	4b4d      	ldr	r3, [pc, #308]	@ (8009328 <UART_SetConfig+0x22c>)
 80091f2:	429a      	cmp	r2, r3
 80091f4:	d102      	bne.n	80091fc <UART_SetConfig+0x100>
 80091f6:	2310      	movs	r3, #16
 80091f8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80091fa:	e009      	b.n	8009210 <UART_SetConfig+0x114>
 80091fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80091fe:	681a      	ldr	r2, [r3, #0]
 8009200:	4b42      	ldr	r3, [pc, #264]	@ (800930c <UART_SetConfig+0x210>)
 8009202:	429a      	cmp	r2, r3
 8009204:	d102      	bne.n	800920c <UART_SetConfig+0x110>
 8009206:	2320      	movs	r3, #32
 8009208:	64bb      	str	r3, [r7, #72]	@ 0x48
 800920a:	e001      	b.n	8009210 <UART_SetConfig+0x114>
 800920c:	2300      	movs	r3, #0
 800920e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009210:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009212:	681a      	ldr	r2, [r3, #0]
 8009214:	4b3d      	ldr	r3, [pc, #244]	@ (800930c <UART_SetConfig+0x210>)
 8009216:	429a      	cmp	r2, r3
 8009218:	d005      	beq.n	8009226 <UART_SetConfig+0x12a>
 800921a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800921c:	681a      	ldr	r2, [r3, #0]
 800921e:	4b3d      	ldr	r3, [pc, #244]	@ (8009314 <UART_SetConfig+0x218>)
 8009220:	429a      	cmp	r2, r3
 8009222:	f040 8085 	bne.w	8009330 <UART_SetConfig+0x234>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8009226:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009228:	2200      	movs	r2, #0
 800922a:	623b      	str	r3, [r7, #32]
 800922c:	627a      	str	r2, [r7, #36]	@ 0x24
 800922e:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8009232:	f7fd f9ef 	bl	8006614 <HAL_RCCEx_GetPeriphCLKFreq>
 8009236:	6438      	str	r0, [r7, #64]	@ 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 8009238:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800923a:	2b00      	cmp	r3, #0
 800923c:	f000 80e8 	beq.w	8009410 <UART_SetConfig+0x314>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8009240:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009242:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009244:	4a39      	ldr	r2, [pc, #228]	@ (800932c <UART_SetConfig+0x230>)
 8009246:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800924a:	461a      	mov	r2, r3
 800924c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800924e:	fbb3 f3f2 	udiv	r3, r3, r2
 8009252:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009254:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009256:	685a      	ldr	r2, [r3, #4]
 8009258:	4613      	mov	r3, r2
 800925a:	005b      	lsls	r3, r3, #1
 800925c:	4413      	add	r3, r2
 800925e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009260:	429a      	cmp	r2, r3
 8009262:	d305      	bcc.n	8009270 <UART_SetConfig+0x174>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8009264:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009266:	685b      	ldr	r3, [r3, #4]
 8009268:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800926a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800926c:	429a      	cmp	r2, r3
 800926e:	d903      	bls.n	8009278 <UART_SetConfig+0x17c>
      {
        ret = HAL_ERROR;
 8009270:	2301      	movs	r3, #1
 8009272:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8009276:	e048      	b.n	800930a <UART_SetConfig+0x20e>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009278:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800927a:	2200      	movs	r2, #0
 800927c:	61bb      	str	r3, [r7, #24]
 800927e:	61fa      	str	r2, [r7, #28]
 8009280:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009282:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009284:	4a29      	ldr	r2, [pc, #164]	@ (800932c <UART_SetConfig+0x230>)
 8009286:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800928a:	b29b      	uxth	r3, r3
 800928c:	2200      	movs	r2, #0
 800928e:	613b      	str	r3, [r7, #16]
 8009290:	617a      	str	r2, [r7, #20]
 8009292:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8009296:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800929a:	f7f6 ffed 	bl	8000278 <__aeabi_uldivmod>
 800929e:	4602      	mov	r2, r0
 80092a0:	460b      	mov	r3, r1
 80092a2:	4610      	mov	r0, r2
 80092a4:	4619      	mov	r1, r3
 80092a6:	f04f 0200 	mov.w	r2, #0
 80092aa:	f04f 0300 	mov.w	r3, #0
 80092ae:	020b      	lsls	r3, r1, #8
 80092b0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80092b4:	0202      	lsls	r2, r0, #8
 80092b6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80092b8:	6849      	ldr	r1, [r1, #4]
 80092ba:	0849      	lsrs	r1, r1, #1
 80092bc:	2000      	movs	r0, #0
 80092be:	460c      	mov	r4, r1
 80092c0:	4605      	mov	r5, r0
 80092c2:	eb12 0804 	adds.w	r8, r2, r4
 80092c6:	eb43 0905 	adc.w	r9, r3, r5
 80092ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80092cc:	685b      	ldr	r3, [r3, #4]
 80092ce:	2200      	movs	r2, #0
 80092d0:	60bb      	str	r3, [r7, #8]
 80092d2:	60fa      	str	r2, [r7, #12]
 80092d4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80092d8:	4640      	mov	r0, r8
 80092da:	4649      	mov	r1, r9
 80092dc:	f7f6 ffcc 	bl	8000278 <__aeabi_uldivmod>
 80092e0:	4602      	mov	r2, r0
 80092e2:	460b      	mov	r3, r1
 80092e4:	4613      	mov	r3, r2
 80092e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80092e8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80092ea:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80092ee:	d308      	bcc.n	8009302 <UART_SetConfig+0x206>
 80092f0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80092f2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80092f6:	d204      	bcs.n	8009302 <UART_SetConfig+0x206>
        {
          huart->Instance->BRR = usartdiv;
 80092f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80092fe:	60da      	str	r2, [r3, #12]
 8009300:	e003      	b.n	800930a <UART_SetConfig+0x20e>
        }
        else
        {
          ret = HAL_ERROR;
 8009302:	2301      	movs	r3, #1
 8009304:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    if (pclk != 0U)
 8009308:	e082      	b.n	8009410 <UART_SetConfig+0x314>
 800930a:	e081      	b.n	8009410 <UART_SetConfig+0x314>
 800930c:	46002400 	.word	0x46002400
 8009310:	cfff69f3 	.word	0xcfff69f3
 8009314:	56002400 	.word	0x56002400
 8009318:	40013800 	.word	0x40013800
 800931c:	40004400 	.word	0x40004400
 8009320:	40004800 	.word	0x40004800
 8009324:	40004c00 	.word	0x40004c00
 8009328:	40005000 	.word	0x40005000
 800932c:	0800a848 	.word	0x0800a848
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009330:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009332:	69db      	ldr	r3, [r3, #28]
 8009334:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009338:	d13c      	bne.n	80093b4 <UART_SetConfig+0x2b8>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800933a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800933c:	2200      	movs	r2, #0
 800933e:	603b      	str	r3, [r7, #0]
 8009340:	607a      	str	r2, [r7, #4]
 8009342:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009346:	f7fd f965 	bl	8006614 <HAL_RCCEx_GetPeriphCLKFreq>
 800934a:	6438      	str	r0, [r7, #64]	@ 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800934c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800934e:	2b00      	cmp	r3, #0
 8009350:	d05e      	beq.n	8009410 <UART_SetConfig+0x314>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009352:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009354:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009356:	4a39      	ldr	r2, [pc, #228]	@ (800943c <UART_SetConfig+0x340>)
 8009358:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800935c:	461a      	mov	r2, r3
 800935e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009360:	fbb3 f3f2 	udiv	r3, r3, r2
 8009364:	005a      	lsls	r2, r3, #1
 8009366:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009368:	685b      	ldr	r3, [r3, #4]
 800936a:	085b      	lsrs	r3, r3, #1
 800936c:	441a      	add	r2, r3
 800936e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009370:	685b      	ldr	r3, [r3, #4]
 8009372:	fbb2 f3f3 	udiv	r3, r2, r3
 8009376:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009378:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800937a:	2b0f      	cmp	r3, #15
 800937c:	d916      	bls.n	80093ac <UART_SetConfig+0x2b0>
 800937e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009380:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009384:	d212      	bcs.n	80093ac <UART_SetConfig+0x2b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009386:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009388:	b29b      	uxth	r3, r3
 800938a:	f023 030f 	bic.w	r3, r3, #15
 800938e:	877b      	strh	r3, [r7, #58]	@ 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009390:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009392:	085b      	lsrs	r3, r3, #1
 8009394:	b29b      	uxth	r3, r3
 8009396:	f003 0307 	and.w	r3, r3, #7
 800939a:	b29a      	uxth	r2, r3
 800939c:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800939e:	4313      	orrs	r3, r2
 80093a0:	877b      	strh	r3, [r7, #58]	@ 0x3a
        huart->Instance->BRR = brrtemp;
 80093a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 80093a8:	60da      	str	r2, [r3, #12]
 80093aa:	e031      	b.n	8009410 <UART_SetConfig+0x314>
      }
      else
      {
        ret = HAL_ERROR;
 80093ac:	2301      	movs	r3, #1
 80093ae:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 80093b2:	e02d      	b.n	8009410 <UART_SetConfig+0x314>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 80093b4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80093b6:	2200      	movs	r2, #0
 80093b8:	469a      	mov	sl, r3
 80093ba:	4693      	mov	fp, r2
 80093bc:	4650      	mov	r0, sl
 80093be:	4659      	mov	r1, fp
 80093c0:	f7fd f928 	bl	8006614 <HAL_RCCEx_GetPeriphCLKFreq>
 80093c4:	6438      	str	r0, [r7, #64]	@ 0x40

    if (pclk != 0U)
 80093c6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80093c8:	2b00      	cmp	r3, #0
 80093ca:	d021      	beq.n	8009410 <UART_SetConfig+0x314>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80093cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80093ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80093d0:	4a1a      	ldr	r2, [pc, #104]	@ (800943c <UART_SetConfig+0x340>)
 80093d2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80093d6:	461a      	mov	r2, r3
 80093d8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80093da:	fbb3 f2f2 	udiv	r2, r3, r2
 80093de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80093e0:	685b      	ldr	r3, [r3, #4]
 80093e2:	085b      	lsrs	r3, r3, #1
 80093e4:	441a      	add	r2, r3
 80093e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80093e8:	685b      	ldr	r3, [r3, #4]
 80093ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80093ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80093f0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80093f2:	2b0f      	cmp	r3, #15
 80093f4:	d909      	bls.n	800940a <UART_SetConfig+0x30e>
 80093f6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80093f8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80093fc:	d205      	bcs.n	800940a <UART_SetConfig+0x30e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80093fe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009400:	b29a      	uxth	r2, r3
 8009402:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	60da      	str	r2, [r3, #12]
 8009408:	e002      	b.n	8009410 <UART_SetConfig+0x314>
      }
      else
      {
        ret = HAL_ERROR;
 800940a:	2301      	movs	r3, #1
 800940c:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8009410:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009412:	2201      	movs	r2, #1
 8009414:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8009418:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800941a:	2201      	movs	r2, #1
 800941c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009420:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009422:	2200      	movs	r2, #0
 8009424:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8009426:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009428:	2200      	movs	r2, #0
 800942a:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800942c:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 8009430:	4618      	mov	r0, r3
 8009432:	3750      	adds	r7, #80	@ 0x50
 8009434:	46bd      	mov	sp, r7
 8009436:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800943a:	bf00      	nop
 800943c:	0800a848 	.word	0x0800a848

08009440 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009440:	b480      	push	{r7}
 8009442:	b083      	sub	sp, #12
 8009444:	af00      	add	r7, sp, #0
 8009446:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800944c:	f003 0308 	and.w	r3, r3, #8
 8009450:	2b00      	cmp	r3, #0
 8009452:	d00a      	beq.n	800946a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	685b      	ldr	r3, [r3, #4]
 800945a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	681b      	ldr	r3, [r3, #0]
 8009466:	430a      	orrs	r2, r1
 8009468:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800946e:	f003 0301 	and.w	r3, r3, #1
 8009472:	2b00      	cmp	r3, #0
 8009474:	d00a      	beq.n	800948c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	685b      	ldr	r3, [r3, #4]
 800947c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	430a      	orrs	r2, r1
 800948a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009490:	f003 0302 	and.w	r3, r3, #2
 8009494:	2b00      	cmp	r3, #0
 8009496:	d00a      	beq.n	80094ae <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	685b      	ldr	r3, [r3, #4]
 800949e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	430a      	orrs	r2, r1
 80094ac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80094b2:	f003 0304 	and.w	r3, r3, #4
 80094b6:	2b00      	cmp	r3, #0
 80094b8:	d00a      	beq.n	80094d0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	685b      	ldr	r3, [r3, #4]
 80094c0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	430a      	orrs	r2, r1
 80094ce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80094d4:	f003 0310 	and.w	r3, r3, #16
 80094d8:	2b00      	cmp	r3, #0
 80094da:	d00a      	beq.n	80094f2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	689b      	ldr	r3, [r3, #8]
 80094e2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	430a      	orrs	r2, r1
 80094f0:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80094f6:	f003 0320 	and.w	r3, r3, #32
 80094fa:	2b00      	cmp	r3, #0
 80094fc:	d00a      	beq.n	8009514 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	689b      	ldr	r3, [r3, #8]
 8009504:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	430a      	orrs	r2, r1
 8009512:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009518:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800951c:	2b00      	cmp	r3, #0
 800951e:	d01a      	beq.n	8009556 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	681b      	ldr	r3, [r3, #0]
 8009524:	685b      	ldr	r3, [r3, #4]
 8009526:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	430a      	orrs	r2, r1
 8009534:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800953a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800953e:	d10a      	bne.n	8009556 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	685b      	ldr	r3, [r3, #4]
 8009546:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	430a      	orrs	r2, r1
 8009554:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800955a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800955e:	2b00      	cmp	r3, #0
 8009560:	d00a      	beq.n	8009578 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	685b      	ldr	r3, [r3, #4]
 8009568:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	430a      	orrs	r2, r1
 8009576:	605a      	str	r2, [r3, #4]
  }
}
 8009578:	bf00      	nop
 800957a:	370c      	adds	r7, #12
 800957c:	46bd      	mov	sp, r7
 800957e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009582:	4770      	bx	lr

08009584 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009584:	b580      	push	{r7, lr}
 8009586:	b098      	sub	sp, #96	@ 0x60
 8009588:	af02      	add	r7, sp, #8
 800958a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	2200      	movs	r2, #0
 8009590:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009594:	f7f8 fb50 	bl	8001c38 <HAL_GetTick>
 8009598:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	f003 0308 	and.w	r3, r3, #8
 80095a4:	2b08      	cmp	r3, #8
 80095a6:	d12f      	bne.n	8009608 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80095a8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80095ac:	9300      	str	r3, [sp, #0]
 80095ae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80095b0:	2200      	movs	r2, #0
 80095b2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80095b6:	6878      	ldr	r0, [r7, #4]
 80095b8:	f000 f88e 	bl	80096d8 <UART_WaitOnFlagUntilTimeout>
 80095bc:	4603      	mov	r3, r0
 80095be:	2b00      	cmp	r3, #0
 80095c0:	d022      	beq.n	8009608 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80095ca:	e853 3f00 	ldrex	r3, [r3]
 80095ce:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80095d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80095d2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80095d6:	653b      	str	r3, [r7, #80]	@ 0x50
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	461a      	mov	r2, r3
 80095de:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80095e0:	647b      	str	r3, [r7, #68]	@ 0x44
 80095e2:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095e4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80095e6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80095e8:	e841 2300 	strex	r3, r2, [r1]
 80095ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80095ee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	d1e6      	bne.n	80095c2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	2220      	movs	r2, #32
 80095f8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	2200      	movs	r2, #0
 8009600:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009604:	2303      	movs	r3, #3
 8009606:	e063      	b.n	80096d0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	f003 0304 	and.w	r3, r3, #4
 8009612:	2b04      	cmp	r3, #4
 8009614:	d149      	bne.n	80096aa <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009616:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800961a:	9300      	str	r3, [sp, #0]
 800961c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800961e:	2200      	movs	r2, #0
 8009620:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8009624:	6878      	ldr	r0, [r7, #4]
 8009626:	f000 f857 	bl	80096d8 <UART_WaitOnFlagUntilTimeout>
 800962a:	4603      	mov	r3, r0
 800962c:	2b00      	cmp	r3, #0
 800962e:	d03c      	beq.n	80096aa <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009636:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009638:	e853 3f00 	ldrex	r3, [r3]
 800963c:	623b      	str	r3, [r7, #32]
   return(result);
 800963e:	6a3b      	ldr	r3, [r7, #32]
 8009640:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009644:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	461a      	mov	r2, r3
 800964c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800964e:	633b      	str	r3, [r7, #48]	@ 0x30
 8009650:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009652:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009654:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009656:	e841 2300 	strex	r3, r2, [r1]
 800965a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800965c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800965e:	2b00      	cmp	r3, #0
 8009660:	d1e6      	bne.n	8009630 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	681b      	ldr	r3, [r3, #0]
 8009666:	3308      	adds	r3, #8
 8009668:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800966a:	693b      	ldr	r3, [r7, #16]
 800966c:	e853 3f00 	ldrex	r3, [r3]
 8009670:	60fb      	str	r3, [r7, #12]
   return(result);
 8009672:	68fb      	ldr	r3, [r7, #12]
 8009674:	f023 0301 	bic.w	r3, r3, #1
 8009678:	64bb      	str	r3, [r7, #72]	@ 0x48
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	3308      	adds	r3, #8
 8009680:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009682:	61fa      	str	r2, [r7, #28]
 8009684:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009686:	69b9      	ldr	r1, [r7, #24]
 8009688:	69fa      	ldr	r2, [r7, #28]
 800968a:	e841 2300 	strex	r3, r2, [r1]
 800968e:	617b      	str	r3, [r7, #20]
   return(result);
 8009690:	697b      	ldr	r3, [r7, #20]
 8009692:	2b00      	cmp	r3, #0
 8009694:	d1e5      	bne.n	8009662 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	2220      	movs	r2, #32
 800969a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	2200      	movs	r2, #0
 80096a2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80096a6:	2303      	movs	r3, #3
 80096a8:	e012      	b.n	80096d0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	2220      	movs	r2, #32
 80096ae:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	2220      	movs	r2, #32
 80096b6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	2200      	movs	r2, #0
 80096be:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	2200      	movs	r2, #0
 80096c4:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	2200      	movs	r2, #0
 80096ca:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80096ce:	2300      	movs	r3, #0
}
 80096d0:	4618      	mov	r0, r3
 80096d2:	3758      	adds	r7, #88	@ 0x58
 80096d4:	46bd      	mov	sp, r7
 80096d6:	bd80      	pop	{r7, pc}

080096d8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80096d8:	b580      	push	{r7, lr}
 80096da:	b084      	sub	sp, #16
 80096dc:	af00      	add	r7, sp, #0
 80096de:	60f8      	str	r0, [r7, #12]
 80096e0:	60b9      	str	r1, [r7, #8]
 80096e2:	603b      	str	r3, [r7, #0]
 80096e4:	4613      	mov	r3, r2
 80096e6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80096e8:	e04f      	b.n	800978a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80096ea:	69bb      	ldr	r3, [r7, #24]
 80096ec:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80096f0:	d04b      	beq.n	800978a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80096f2:	f7f8 faa1 	bl	8001c38 <HAL_GetTick>
 80096f6:	4602      	mov	r2, r0
 80096f8:	683b      	ldr	r3, [r7, #0]
 80096fa:	1ad3      	subs	r3, r2, r3
 80096fc:	69ba      	ldr	r2, [r7, #24]
 80096fe:	429a      	cmp	r2, r3
 8009700:	d302      	bcc.n	8009708 <UART_WaitOnFlagUntilTimeout+0x30>
 8009702:	69bb      	ldr	r3, [r7, #24]
 8009704:	2b00      	cmp	r3, #0
 8009706:	d101      	bne.n	800970c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8009708:	2303      	movs	r3, #3
 800970a:	e04e      	b.n	80097aa <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800970c:	68fb      	ldr	r3, [r7, #12]
 800970e:	681b      	ldr	r3, [r3, #0]
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	f003 0304 	and.w	r3, r3, #4
 8009716:	2b00      	cmp	r3, #0
 8009718:	d037      	beq.n	800978a <UART_WaitOnFlagUntilTimeout+0xb2>
 800971a:	68bb      	ldr	r3, [r7, #8]
 800971c:	2b80      	cmp	r3, #128	@ 0x80
 800971e:	d034      	beq.n	800978a <UART_WaitOnFlagUntilTimeout+0xb2>
 8009720:	68bb      	ldr	r3, [r7, #8]
 8009722:	2b40      	cmp	r3, #64	@ 0x40
 8009724:	d031      	beq.n	800978a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8009726:	68fb      	ldr	r3, [r7, #12]
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	69db      	ldr	r3, [r3, #28]
 800972c:	f003 0308 	and.w	r3, r3, #8
 8009730:	2b08      	cmp	r3, #8
 8009732:	d110      	bne.n	8009756 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009734:	68fb      	ldr	r3, [r7, #12]
 8009736:	681b      	ldr	r3, [r3, #0]
 8009738:	2208      	movs	r2, #8
 800973a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800973c:	68f8      	ldr	r0, [r7, #12]
 800973e:	f000 f838 	bl	80097b2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8009742:	68fb      	ldr	r3, [r7, #12]
 8009744:	2208      	movs	r2, #8
 8009746:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800974a:	68fb      	ldr	r3, [r7, #12]
 800974c:	2200      	movs	r2, #0
 800974e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8009752:	2301      	movs	r3, #1
 8009754:	e029      	b.n	80097aa <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009756:	68fb      	ldr	r3, [r7, #12]
 8009758:	681b      	ldr	r3, [r3, #0]
 800975a:	69db      	ldr	r3, [r3, #28]
 800975c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009760:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009764:	d111      	bne.n	800978a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009766:	68fb      	ldr	r3, [r7, #12]
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800976e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009770:	68f8      	ldr	r0, [r7, #12]
 8009772:	f000 f81e 	bl	80097b2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009776:	68fb      	ldr	r3, [r7, #12]
 8009778:	2220      	movs	r2, #32
 800977a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800977e:	68fb      	ldr	r3, [r7, #12]
 8009780:	2200      	movs	r2, #0
 8009782:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8009786:	2303      	movs	r3, #3
 8009788:	e00f      	b.n	80097aa <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800978a:	68fb      	ldr	r3, [r7, #12]
 800978c:	681b      	ldr	r3, [r3, #0]
 800978e:	69da      	ldr	r2, [r3, #28]
 8009790:	68bb      	ldr	r3, [r7, #8]
 8009792:	4013      	ands	r3, r2
 8009794:	68ba      	ldr	r2, [r7, #8]
 8009796:	429a      	cmp	r2, r3
 8009798:	bf0c      	ite	eq
 800979a:	2301      	moveq	r3, #1
 800979c:	2300      	movne	r3, #0
 800979e:	b2db      	uxtb	r3, r3
 80097a0:	461a      	mov	r2, r3
 80097a2:	79fb      	ldrb	r3, [r7, #7]
 80097a4:	429a      	cmp	r2, r3
 80097a6:	d0a0      	beq.n	80096ea <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80097a8:	2300      	movs	r3, #0
}
 80097aa:	4618      	mov	r0, r3
 80097ac:	3710      	adds	r7, #16
 80097ae:	46bd      	mov	sp, r7
 80097b0:	bd80      	pop	{r7, pc}

080097b2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80097b2:	b480      	push	{r7}
 80097b4:	b095      	sub	sp, #84	@ 0x54
 80097b6:	af00      	add	r7, sp, #0
 80097b8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	681b      	ldr	r3, [r3, #0]
 80097be:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80097c2:	e853 3f00 	ldrex	r3, [r3]
 80097c6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80097c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80097ca:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80097ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	461a      	mov	r2, r3
 80097d6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80097d8:	643b      	str	r3, [r7, #64]	@ 0x40
 80097da:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097dc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80097de:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80097e0:	e841 2300 	strex	r3, r2, [r1]
 80097e4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80097e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80097e8:	2b00      	cmp	r3, #0
 80097ea:	d1e6      	bne.n	80097ba <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	3308      	adds	r3, #8
 80097f2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097f4:	6a3b      	ldr	r3, [r7, #32]
 80097f6:	e853 3f00 	ldrex	r3, [r3]
 80097fa:	61fb      	str	r3, [r7, #28]
   return(result);
 80097fc:	69fb      	ldr	r3, [r7, #28]
 80097fe:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009802:	f023 0301 	bic.w	r3, r3, #1
 8009806:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	3308      	adds	r3, #8
 800980e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009810:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009812:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009814:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009816:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009818:	e841 2300 	strex	r3, r2, [r1]
 800981c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800981e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009820:	2b00      	cmp	r3, #0
 8009822:	d1e3      	bne.n	80097ec <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009828:	2b01      	cmp	r3, #1
 800982a:	d118      	bne.n	800985e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009832:	68fb      	ldr	r3, [r7, #12]
 8009834:	e853 3f00 	ldrex	r3, [r3]
 8009838:	60bb      	str	r3, [r7, #8]
   return(result);
 800983a:	68bb      	ldr	r3, [r7, #8]
 800983c:	f023 0310 	bic.w	r3, r3, #16
 8009840:	647b      	str	r3, [r7, #68]	@ 0x44
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	681b      	ldr	r3, [r3, #0]
 8009846:	461a      	mov	r2, r3
 8009848:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800984a:	61bb      	str	r3, [r7, #24]
 800984c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800984e:	6979      	ldr	r1, [r7, #20]
 8009850:	69ba      	ldr	r2, [r7, #24]
 8009852:	e841 2300 	strex	r3, r2, [r1]
 8009856:	613b      	str	r3, [r7, #16]
   return(result);
 8009858:	693b      	ldr	r3, [r7, #16]
 800985a:	2b00      	cmp	r3, #0
 800985c:	d1e6      	bne.n	800982c <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	2220      	movs	r2, #32
 8009862:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	2200      	movs	r2, #0
 800986a:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	2200      	movs	r2, #0
 8009870:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8009872:	bf00      	nop
 8009874:	3754      	adds	r7, #84	@ 0x54
 8009876:	46bd      	mov	sp, r7
 8009878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800987c:	4770      	bx	lr
	...

08009880 <siprintf>:
 8009880:	b40e      	push	{r1, r2, r3}
 8009882:	b510      	push	{r4, lr}
 8009884:	b09d      	sub	sp, #116	@ 0x74
 8009886:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800988a:	2400      	movs	r4, #0
 800988c:	ab1f      	add	r3, sp, #124	@ 0x7c
 800988e:	9002      	str	r0, [sp, #8]
 8009890:	9006      	str	r0, [sp, #24]
 8009892:	9107      	str	r1, [sp, #28]
 8009894:	9104      	str	r1, [sp, #16]
 8009896:	4809      	ldr	r0, [pc, #36]	@ (80098bc <siprintf+0x3c>)
 8009898:	4909      	ldr	r1, [pc, #36]	@ (80098c0 <siprintf+0x40>)
 800989a:	f853 2b04 	ldr.w	r2, [r3], #4
 800989e:	9105      	str	r1, [sp, #20]
 80098a0:	a902      	add	r1, sp, #8
 80098a2:	6800      	ldr	r0, [r0, #0]
 80098a4:	9301      	str	r3, [sp, #4]
 80098a6:	941b      	str	r4, [sp, #108]	@ 0x6c
 80098a8:	f000 f89c 	bl	80099e4 <_svfiprintf_r>
 80098ac:	9b02      	ldr	r3, [sp, #8]
 80098ae:	701c      	strb	r4, [r3, #0]
 80098b0:	b01d      	add	sp, #116	@ 0x74
 80098b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80098b6:	b003      	add	sp, #12
 80098b8:	4770      	bx	lr
 80098ba:	bf00      	nop
 80098bc:	20000040 	.word	0x20000040
 80098c0:	ffff0208 	.word	0xffff0208

080098c4 <memset>:
 80098c4:	4402      	add	r2, r0
 80098c6:	4603      	mov	r3, r0
 80098c8:	4293      	cmp	r3, r2
 80098ca:	d100      	bne.n	80098ce <memset+0xa>
 80098cc:	4770      	bx	lr
 80098ce:	f803 1b01 	strb.w	r1, [r3], #1
 80098d2:	e7f9      	b.n	80098c8 <memset+0x4>

080098d4 <__errno>:
 80098d4:	4b01      	ldr	r3, [pc, #4]	@ (80098dc <__errno+0x8>)
 80098d6:	6818      	ldr	r0, [r3, #0]
 80098d8:	4770      	bx	lr
 80098da:	bf00      	nop
 80098dc:	20000040 	.word	0x20000040

080098e0 <__libc_init_array>:
 80098e0:	b570      	push	{r4, r5, r6, lr}
 80098e2:	4d0d      	ldr	r5, [pc, #52]	@ (8009918 <__libc_init_array+0x38>)
 80098e4:	2600      	movs	r6, #0
 80098e6:	4c0d      	ldr	r4, [pc, #52]	@ (800991c <__libc_init_array+0x3c>)
 80098e8:	1b64      	subs	r4, r4, r5
 80098ea:	10a4      	asrs	r4, r4, #2
 80098ec:	42a6      	cmp	r6, r4
 80098ee:	d109      	bne.n	8009904 <__libc_init_array+0x24>
 80098f0:	4d0b      	ldr	r5, [pc, #44]	@ (8009920 <__libc_init_array+0x40>)
 80098f2:	2600      	movs	r6, #0
 80098f4:	4c0b      	ldr	r4, [pc, #44]	@ (8009924 <__libc_init_array+0x44>)
 80098f6:	f000 fc75 	bl	800a1e4 <_init>
 80098fa:	1b64      	subs	r4, r4, r5
 80098fc:	10a4      	asrs	r4, r4, #2
 80098fe:	42a6      	cmp	r6, r4
 8009900:	d105      	bne.n	800990e <__libc_init_array+0x2e>
 8009902:	bd70      	pop	{r4, r5, r6, pc}
 8009904:	f855 3b04 	ldr.w	r3, [r5], #4
 8009908:	3601      	adds	r6, #1
 800990a:	4798      	blx	r3
 800990c:	e7ee      	b.n	80098ec <__libc_init_array+0xc>
 800990e:	f855 3b04 	ldr.w	r3, [r5], #4
 8009912:	3601      	adds	r6, #1
 8009914:	4798      	blx	r3
 8009916:	e7f2      	b.n	80098fe <__libc_init_array+0x1e>
 8009918:	0800a89c 	.word	0x0800a89c
 800991c:	0800a89c 	.word	0x0800a89c
 8009920:	0800a89c 	.word	0x0800a89c
 8009924:	0800a8a0 	.word	0x0800a8a0

08009928 <__retarget_lock_acquire_recursive>:
 8009928:	4770      	bx	lr

0800992a <__retarget_lock_release_recursive>:
 800992a:	4770      	bx	lr

0800992c <__ssputs_r>:
 800992c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009930:	461f      	mov	r7, r3
 8009932:	688e      	ldr	r6, [r1, #8]
 8009934:	4682      	mov	sl, r0
 8009936:	460c      	mov	r4, r1
 8009938:	42be      	cmp	r6, r7
 800993a:	4690      	mov	r8, r2
 800993c:	680b      	ldr	r3, [r1, #0]
 800993e:	d82d      	bhi.n	800999c <__ssputs_r+0x70>
 8009940:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009944:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8009948:	d026      	beq.n	8009998 <__ssputs_r+0x6c>
 800994a:	6965      	ldr	r5, [r4, #20]
 800994c:	6909      	ldr	r1, [r1, #16]
 800994e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009952:	eba3 0901 	sub.w	r9, r3, r1
 8009956:	1c7b      	adds	r3, r7, #1
 8009958:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800995c:	444b      	add	r3, r9
 800995e:	106d      	asrs	r5, r5, #1
 8009960:	429d      	cmp	r5, r3
 8009962:	bf38      	it	cc
 8009964:	461d      	movcc	r5, r3
 8009966:	0553      	lsls	r3, r2, #21
 8009968:	d527      	bpl.n	80099ba <__ssputs_r+0x8e>
 800996a:	4629      	mov	r1, r5
 800996c:	f000 f958 	bl	8009c20 <_malloc_r>
 8009970:	4606      	mov	r6, r0
 8009972:	b360      	cbz	r0, 80099ce <__ssputs_r+0xa2>
 8009974:	464a      	mov	r2, r9
 8009976:	6921      	ldr	r1, [r4, #16]
 8009978:	f000 fbd4 	bl	800a124 <memcpy>
 800997c:	89a3      	ldrh	r3, [r4, #12]
 800997e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8009982:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009986:	81a3      	strh	r3, [r4, #12]
 8009988:	6126      	str	r6, [r4, #16]
 800998a:	444e      	add	r6, r9
 800998c:	6165      	str	r5, [r4, #20]
 800998e:	eba5 0509 	sub.w	r5, r5, r9
 8009992:	6026      	str	r6, [r4, #0]
 8009994:	463e      	mov	r6, r7
 8009996:	60a5      	str	r5, [r4, #8]
 8009998:	42be      	cmp	r6, r7
 800999a:	d900      	bls.n	800999e <__ssputs_r+0x72>
 800999c:	463e      	mov	r6, r7
 800999e:	4632      	mov	r2, r6
 80099a0:	4641      	mov	r1, r8
 80099a2:	6820      	ldr	r0, [r4, #0]
 80099a4:	f000 fb86 	bl	800a0b4 <memmove>
 80099a8:	68a3      	ldr	r3, [r4, #8]
 80099aa:	2000      	movs	r0, #0
 80099ac:	1b9b      	subs	r3, r3, r6
 80099ae:	60a3      	str	r3, [r4, #8]
 80099b0:	6823      	ldr	r3, [r4, #0]
 80099b2:	4433      	add	r3, r6
 80099b4:	6023      	str	r3, [r4, #0]
 80099b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80099ba:	462a      	mov	r2, r5
 80099bc:	f000 fb4c 	bl	800a058 <_realloc_r>
 80099c0:	4606      	mov	r6, r0
 80099c2:	2800      	cmp	r0, #0
 80099c4:	d1e0      	bne.n	8009988 <__ssputs_r+0x5c>
 80099c6:	6921      	ldr	r1, [r4, #16]
 80099c8:	4650      	mov	r0, sl
 80099ca:	f000 fbb9 	bl	800a140 <_free_r>
 80099ce:	230c      	movs	r3, #12
 80099d0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80099d4:	f8ca 3000 	str.w	r3, [sl]
 80099d8:	89a3      	ldrh	r3, [r4, #12]
 80099da:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80099de:	81a3      	strh	r3, [r4, #12]
 80099e0:	e7e9      	b.n	80099b6 <__ssputs_r+0x8a>
	...

080099e4 <_svfiprintf_r>:
 80099e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80099e8:	4698      	mov	r8, r3
 80099ea:	898b      	ldrh	r3, [r1, #12]
 80099ec:	b09d      	sub	sp, #116	@ 0x74
 80099ee:	4607      	mov	r7, r0
 80099f0:	061b      	lsls	r3, r3, #24
 80099f2:	460d      	mov	r5, r1
 80099f4:	4614      	mov	r4, r2
 80099f6:	d510      	bpl.n	8009a1a <_svfiprintf_r+0x36>
 80099f8:	690b      	ldr	r3, [r1, #16]
 80099fa:	b973      	cbnz	r3, 8009a1a <_svfiprintf_r+0x36>
 80099fc:	2140      	movs	r1, #64	@ 0x40
 80099fe:	f000 f90f 	bl	8009c20 <_malloc_r>
 8009a02:	6028      	str	r0, [r5, #0]
 8009a04:	6128      	str	r0, [r5, #16]
 8009a06:	b930      	cbnz	r0, 8009a16 <_svfiprintf_r+0x32>
 8009a08:	230c      	movs	r3, #12
 8009a0a:	603b      	str	r3, [r7, #0]
 8009a0c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009a10:	b01d      	add	sp, #116	@ 0x74
 8009a12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a16:	2340      	movs	r3, #64	@ 0x40
 8009a18:	616b      	str	r3, [r5, #20]
 8009a1a:	2300      	movs	r3, #0
 8009a1c:	f8cd 800c 	str.w	r8, [sp, #12]
 8009a20:	f04f 0901 	mov.w	r9, #1
 8009a24:	f8df 81a0 	ldr.w	r8, [pc, #416]	@ 8009bc8 <_svfiprintf_r+0x1e4>
 8009a28:	9309      	str	r3, [sp, #36]	@ 0x24
 8009a2a:	2320      	movs	r3, #32
 8009a2c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009a30:	2330      	movs	r3, #48	@ 0x30
 8009a32:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009a36:	4623      	mov	r3, r4
 8009a38:	469a      	mov	sl, r3
 8009a3a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009a3e:	b10a      	cbz	r2, 8009a44 <_svfiprintf_r+0x60>
 8009a40:	2a25      	cmp	r2, #37	@ 0x25
 8009a42:	d1f9      	bne.n	8009a38 <_svfiprintf_r+0x54>
 8009a44:	ebba 0b04 	subs.w	fp, sl, r4
 8009a48:	d00b      	beq.n	8009a62 <_svfiprintf_r+0x7e>
 8009a4a:	465b      	mov	r3, fp
 8009a4c:	4622      	mov	r2, r4
 8009a4e:	4629      	mov	r1, r5
 8009a50:	4638      	mov	r0, r7
 8009a52:	f7ff ff6b 	bl	800992c <__ssputs_r>
 8009a56:	3001      	adds	r0, #1
 8009a58:	f000 80a7 	beq.w	8009baa <_svfiprintf_r+0x1c6>
 8009a5c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009a5e:	445a      	add	r2, fp
 8009a60:	9209      	str	r2, [sp, #36]	@ 0x24
 8009a62:	f89a 3000 	ldrb.w	r3, [sl]
 8009a66:	2b00      	cmp	r3, #0
 8009a68:	f000 809f 	beq.w	8009baa <_svfiprintf_r+0x1c6>
 8009a6c:	2300      	movs	r3, #0
 8009a6e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009a72:	f10a 0a01 	add.w	sl, sl, #1
 8009a76:	9304      	str	r3, [sp, #16]
 8009a78:	9307      	str	r3, [sp, #28]
 8009a7a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009a7e:	931a      	str	r3, [sp, #104]	@ 0x68
 8009a80:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009a84:	4654      	mov	r4, sl
 8009a86:	2205      	movs	r2, #5
 8009a88:	484f      	ldr	r0, [pc, #316]	@ (8009bc8 <_svfiprintf_r+0x1e4>)
 8009a8a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009a8e:	f000 fb3b 	bl	800a108 <memchr>
 8009a92:	9a04      	ldr	r2, [sp, #16]
 8009a94:	b9d8      	cbnz	r0, 8009ace <_svfiprintf_r+0xea>
 8009a96:	06d0      	lsls	r0, r2, #27
 8009a98:	bf44      	itt	mi
 8009a9a:	2320      	movmi	r3, #32
 8009a9c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009aa0:	0711      	lsls	r1, r2, #28
 8009aa2:	bf44      	itt	mi
 8009aa4:	232b      	movmi	r3, #43	@ 0x2b
 8009aa6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009aaa:	f89a 3000 	ldrb.w	r3, [sl]
 8009aae:	2b2a      	cmp	r3, #42	@ 0x2a
 8009ab0:	d015      	beq.n	8009ade <_svfiprintf_r+0xfa>
 8009ab2:	9a07      	ldr	r2, [sp, #28]
 8009ab4:	4654      	mov	r4, sl
 8009ab6:	2000      	movs	r0, #0
 8009ab8:	f04f 0c0a 	mov.w	ip, #10
 8009abc:	4621      	mov	r1, r4
 8009abe:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009ac2:	3b30      	subs	r3, #48	@ 0x30
 8009ac4:	2b09      	cmp	r3, #9
 8009ac6:	d94b      	bls.n	8009b60 <_svfiprintf_r+0x17c>
 8009ac8:	b1b0      	cbz	r0, 8009af8 <_svfiprintf_r+0x114>
 8009aca:	9207      	str	r2, [sp, #28]
 8009acc:	e014      	b.n	8009af8 <_svfiprintf_r+0x114>
 8009ace:	eba0 0308 	sub.w	r3, r0, r8
 8009ad2:	46a2      	mov	sl, r4
 8009ad4:	fa09 f303 	lsl.w	r3, r9, r3
 8009ad8:	4313      	orrs	r3, r2
 8009ada:	9304      	str	r3, [sp, #16]
 8009adc:	e7d2      	b.n	8009a84 <_svfiprintf_r+0xa0>
 8009ade:	9b03      	ldr	r3, [sp, #12]
 8009ae0:	1d19      	adds	r1, r3, #4
 8009ae2:	681b      	ldr	r3, [r3, #0]
 8009ae4:	2b00      	cmp	r3, #0
 8009ae6:	9103      	str	r1, [sp, #12]
 8009ae8:	bfbb      	ittet	lt
 8009aea:	425b      	neglt	r3, r3
 8009aec:	f042 0202 	orrlt.w	r2, r2, #2
 8009af0:	9307      	strge	r3, [sp, #28]
 8009af2:	9307      	strlt	r3, [sp, #28]
 8009af4:	bfb8      	it	lt
 8009af6:	9204      	strlt	r2, [sp, #16]
 8009af8:	7823      	ldrb	r3, [r4, #0]
 8009afa:	2b2e      	cmp	r3, #46	@ 0x2e
 8009afc:	d10a      	bne.n	8009b14 <_svfiprintf_r+0x130>
 8009afe:	7863      	ldrb	r3, [r4, #1]
 8009b00:	2b2a      	cmp	r3, #42	@ 0x2a
 8009b02:	d132      	bne.n	8009b6a <_svfiprintf_r+0x186>
 8009b04:	9b03      	ldr	r3, [sp, #12]
 8009b06:	3402      	adds	r4, #2
 8009b08:	1d1a      	adds	r2, r3, #4
 8009b0a:	681b      	ldr	r3, [r3, #0]
 8009b0c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009b10:	9203      	str	r2, [sp, #12]
 8009b12:	9305      	str	r3, [sp, #20]
 8009b14:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8009bd8 <_svfiprintf_r+0x1f4>
 8009b18:	2203      	movs	r2, #3
 8009b1a:	7821      	ldrb	r1, [r4, #0]
 8009b1c:	4650      	mov	r0, sl
 8009b1e:	f000 faf3 	bl	800a108 <memchr>
 8009b22:	b138      	cbz	r0, 8009b34 <_svfiprintf_r+0x150>
 8009b24:	eba0 000a 	sub.w	r0, r0, sl
 8009b28:	2240      	movs	r2, #64	@ 0x40
 8009b2a:	9b04      	ldr	r3, [sp, #16]
 8009b2c:	3401      	adds	r4, #1
 8009b2e:	4082      	lsls	r2, r0
 8009b30:	4313      	orrs	r3, r2
 8009b32:	9304      	str	r3, [sp, #16]
 8009b34:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009b38:	2206      	movs	r2, #6
 8009b3a:	4824      	ldr	r0, [pc, #144]	@ (8009bcc <_svfiprintf_r+0x1e8>)
 8009b3c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009b40:	f000 fae2 	bl	800a108 <memchr>
 8009b44:	2800      	cmp	r0, #0
 8009b46:	d036      	beq.n	8009bb6 <_svfiprintf_r+0x1d2>
 8009b48:	4b21      	ldr	r3, [pc, #132]	@ (8009bd0 <_svfiprintf_r+0x1ec>)
 8009b4a:	bb1b      	cbnz	r3, 8009b94 <_svfiprintf_r+0x1b0>
 8009b4c:	9b03      	ldr	r3, [sp, #12]
 8009b4e:	3307      	adds	r3, #7
 8009b50:	f023 0307 	bic.w	r3, r3, #7
 8009b54:	3308      	adds	r3, #8
 8009b56:	9303      	str	r3, [sp, #12]
 8009b58:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009b5a:	4433      	add	r3, r6
 8009b5c:	9309      	str	r3, [sp, #36]	@ 0x24
 8009b5e:	e76a      	b.n	8009a36 <_svfiprintf_r+0x52>
 8009b60:	fb0c 3202 	mla	r2, ip, r2, r3
 8009b64:	460c      	mov	r4, r1
 8009b66:	2001      	movs	r0, #1
 8009b68:	e7a8      	b.n	8009abc <_svfiprintf_r+0xd8>
 8009b6a:	2300      	movs	r3, #0
 8009b6c:	3401      	adds	r4, #1
 8009b6e:	f04f 0c0a 	mov.w	ip, #10
 8009b72:	4619      	mov	r1, r3
 8009b74:	9305      	str	r3, [sp, #20]
 8009b76:	4620      	mov	r0, r4
 8009b78:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009b7c:	3a30      	subs	r2, #48	@ 0x30
 8009b7e:	2a09      	cmp	r2, #9
 8009b80:	d903      	bls.n	8009b8a <_svfiprintf_r+0x1a6>
 8009b82:	2b00      	cmp	r3, #0
 8009b84:	d0c6      	beq.n	8009b14 <_svfiprintf_r+0x130>
 8009b86:	9105      	str	r1, [sp, #20]
 8009b88:	e7c4      	b.n	8009b14 <_svfiprintf_r+0x130>
 8009b8a:	fb0c 2101 	mla	r1, ip, r1, r2
 8009b8e:	4604      	mov	r4, r0
 8009b90:	2301      	movs	r3, #1
 8009b92:	e7f0      	b.n	8009b76 <_svfiprintf_r+0x192>
 8009b94:	ab03      	add	r3, sp, #12
 8009b96:	462a      	mov	r2, r5
 8009b98:	a904      	add	r1, sp, #16
 8009b9a:	4638      	mov	r0, r7
 8009b9c:	9300      	str	r3, [sp, #0]
 8009b9e:	4b0d      	ldr	r3, [pc, #52]	@ (8009bd4 <_svfiprintf_r+0x1f0>)
 8009ba0:	f3af 8000 	nop.w
 8009ba4:	1c42      	adds	r2, r0, #1
 8009ba6:	4606      	mov	r6, r0
 8009ba8:	d1d6      	bne.n	8009b58 <_svfiprintf_r+0x174>
 8009baa:	89ab      	ldrh	r3, [r5, #12]
 8009bac:	065b      	lsls	r3, r3, #25
 8009bae:	f53f af2d 	bmi.w	8009a0c <_svfiprintf_r+0x28>
 8009bb2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009bb4:	e72c      	b.n	8009a10 <_svfiprintf_r+0x2c>
 8009bb6:	ab03      	add	r3, sp, #12
 8009bb8:	462a      	mov	r2, r5
 8009bba:	a904      	add	r1, sp, #16
 8009bbc:	4638      	mov	r0, r7
 8009bbe:	9300      	str	r3, [sp, #0]
 8009bc0:	4b04      	ldr	r3, [pc, #16]	@ (8009bd4 <_svfiprintf_r+0x1f0>)
 8009bc2:	f000 f91f 	bl	8009e04 <_printf_i>
 8009bc6:	e7ed      	b.n	8009ba4 <_svfiprintf_r+0x1c0>
 8009bc8:	0800a860 	.word	0x0800a860
 8009bcc:	0800a86a 	.word	0x0800a86a
 8009bd0:	00000000 	.word	0x00000000
 8009bd4:	0800992d 	.word	0x0800992d
 8009bd8:	0800a866 	.word	0x0800a866

08009bdc <sbrk_aligned>:
 8009bdc:	b570      	push	{r4, r5, r6, lr}
 8009bde:	4e0f      	ldr	r6, [pc, #60]	@ (8009c1c <sbrk_aligned+0x40>)
 8009be0:	460c      	mov	r4, r1
 8009be2:	4605      	mov	r5, r0
 8009be4:	6831      	ldr	r1, [r6, #0]
 8009be6:	b911      	cbnz	r1, 8009bee <sbrk_aligned+0x12>
 8009be8:	f000 fa7e 	bl	800a0e8 <_sbrk_r>
 8009bec:	6030      	str	r0, [r6, #0]
 8009bee:	4621      	mov	r1, r4
 8009bf0:	4628      	mov	r0, r5
 8009bf2:	f000 fa79 	bl	800a0e8 <_sbrk_r>
 8009bf6:	1c43      	adds	r3, r0, #1
 8009bf8:	d103      	bne.n	8009c02 <sbrk_aligned+0x26>
 8009bfa:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8009bfe:	4620      	mov	r0, r4
 8009c00:	bd70      	pop	{r4, r5, r6, pc}
 8009c02:	1cc4      	adds	r4, r0, #3
 8009c04:	f024 0403 	bic.w	r4, r4, #3
 8009c08:	42a0      	cmp	r0, r4
 8009c0a:	d0f8      	beq.n	8009bfe <sbrk_aligned+0x22>
 8009c0c:	1a21      	subs	r1, r4, r0
 8009c0e:	4628      	mov	r0, r5
 8009c10:	f000 fa6a 	bl	800a0e8 <_sbrk_r>
 8009c14:	3001      	adds	r0, #1
 8009c16:	d1f2      	bne.n	8009bfe <sbrk_aligned+0x22>
 8009c18:	e7ef      	b.n	8009bfa <sbrk_aligned+0x1e>
 8009c1a:	bf00      	nop
 8009c1c:	200003e4 	.word	0x200003e4

08009c20 <_malloc_r>:
 8009c20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009c24:	1ccd      	adds	r5, r1, #3
 8009c26:	4606      	mov	r6, r0
 8009c28:	f025 0503 	bic.w	r5, r5, #3
 8009c2c:	3508      	adds	r5, #8
 8009c2e:	2d0c      	cmp	r5, #12
 8009c30:	bf38      	it	cc
 8009c32:	250c      	movcc	r5, #12
 8009c34:	2d00      	cmp	r5, #0
 8009c36:	db01      	blt.n	8009c3c <_malloc_r+0x1c>
 8009c38:	42a9      	cmp	r1, r5
 8009c3a:	d904      	bls.n	8009c46 <_malloc_r+0x26>
 8009c3c:	230c      	movs	r3, #12
 8009c3e:	6033      	str	r3, [r6, #0]
 8009c40:	2000      	movs	r0, #0
 8009c42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009c46:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009d1c <_malloc_r+0xfc>
 8009c4a:	f000 f9f9 	bl	800a040 <__malloc_lock>
 8009c4e:	f8d8 3000 	ldr.w	r3, [r8]
 8009c52:	461c      	mov	r4, r3
 8009c54:	bb44      	cbnz	r4, 8009ca8 <_malloc_r+0x88>
 8009c56:	4629      	mov	r1, r5
 8009c58:	4630      	mov	r0, r6
 8009c5a:	f7ff ffbf 	bl	8009bdc <sbrk_aligned>
 8009c5e:	1c43      	adds	r3, r0, #1
 8009c60:	4604      	mov	r4, r0
 8009c62:	d158      	bne.n	8009d16 <_malloc_r+0xf6>
 8009c64:	f8d8 4000 	ldr.w	r4, [r8]
 8009c68:	4627      	mov	r7, r4
 8009c6a:	2f00      	cmp	r7, #0
 8009c6c:	d143      	bne.n	8009cf6 <_malloc_r+0xd6>
 8009c6e:	2c00      	cmp	r4, #0
 8009c70:	d04b      	beq.n	8009d0a <_malloc_r+0xea>
 8009c72:	6823      	ldr	r3, [r4, #0]
 8009c74:	4639      	mov	r1, r7
 8009c76:	4630      	mov	r0, r6
 8009c78:	eb04 0903 	add.w	r9, r4, r3
 8009c7c:	f000 fa34 	bl	800a0e8 <_sbrk_r>
 8009c80:	4581      	cmp	r9, r0
 8009c82:	d142      	bne.n	8009d0a <_malloc_r+0xea>
 8009c84:	6821      	ldr	r1, [r4, #0]
 8009c86:	4630      	mov	r0, r6
 8009c88:	1a6d      	subs	r5, r5, r1
 8009c8a:	4629      	mov	r1, r5
 8009c8c:	f7ff ffa6 	bl	8009bdc <sbrk_aligned>
 8009c90:	3001      	adds	r0, #1
 8009c92:	d03a      	beq.n	8009d0a <_malloc_r+0xea>
 8009c94:	6823      	ldr	r3, [r4, #0]
 8009c96:	442b      	add	r3, r5
 8009c98:	6023      	str	r3, [r4, #0]
 8009c9a:	f8d8 3000 	ldr.w	r3, [r8]
 8009c9e:	685a      	ldr	r2, [r3, #4]
 8009ca0:	bb62      	cbnz	r2, 8009cfc <_malloc_r+0xdc>
 8009ca2:	f8c8 7000 	str.w	r7, [r8]
 8009ca6:	e00f      	b.n	8009cc8 <_malloc_r+0xa8>
 8009ca8:	6822      	ldr	r2, [r4, #0]
 8009caa:	1b52      	subs	r2, r2, r5
 8009cac:	d420      	bmi.n	8009cf0 <_malloc_r+0xd0>
 8009cae:	2a0b      	cmp	r2, #11
 8009cb0:	d917      	bls.n	8009ce2 <_malloc_r+0xc2>
 8009cb2:	1961      	adds	r1, r4, r5
 8009cb4:	42a3      	cmp	r3, r4
 8009cb6:	6025      	str	r5, [r4, #0]
 8009cb8:	bf18      	it	ne
 8009cba:	6059      	strne	r1, [r3, #4]
 8009cbc:	6863      	ldr	r3, [r4, #4]
 8009cbe:	bf08      	it	eq
 8009cc0:	f8c8 1000 	streq.w	r1, [r8]
 8009cc4:	5162      	str	r2, [r4, r5]
 8009cc6:	604b      	str	r3, [r1, #4]
 8009cc8:	4630      	mov	r0, r6
 8009cca:	f000 f9bf 	bl	800a04c <__malloc_unlock>
 8009cce:	f104 000b 	add.w	r0, r4, #11
 8009cd2:	1d23      	adds	r3, r4, #4
 8009cd4:	f020 0007 	bic.w	r0, r0, #7
 8009cd8:	1ac2      	subs	r2, r0, r3
 8009cda:	bf1c      	itt	ne
 8009cdc:	1a1b      	subne	r3, r3, r0
 8009cde:	50a3      	strne	r3, [r4, r2]
 8009ce0:	e7af      	b.n	8009c42 <_malloc_r+0x22>
 8009ce2:	6862      	ldr	r2, [r4, #4]
 8009ce4:	42a3      	cmp	r3, r4
 8009ce6:	bf0c      	ite	eq
 8009ce8:	f8c8 2000 	streq.w	r2, [r8]
 8009cec:	605a      	strne	r2, [r3, #4]
 8009cee:	e7eb      	b.n	8009cc8 <_malloc_r+0xa8>
 8009cf0:	4623      	mov	r3, r4
 8009cf2:	6864      	ldr	r4, [r4, #4]
 8009cf4:	e7ae      	b.n	8009c54 <_malloc_r+0x34>
 8009cf6:	463c      	mov	r4, r7
 8009cf8:	687f      	ldr	r7, [r7, #4]
 8009cfa:	e7b6      	b.n	8009c6a <_malloc_r+0x4a>
 8009cfc:	461a      	mov	r2, r3
 8009cfe:	685b      	ldr	r3, [r3, #4]
 8009d00:	42a3      	cmp	r3, r4
 8009d02:	d1fb      	bne.n	8009cfc <_malloc_r+0xdc>
 8009d04:	2300      	movs	r3, #0
 8009d06:	6053      	str	r3, [r2, #4]
 8009d08:	e7de      	b.n	8009cc8 <_malloc_r+0xa8>
 8009d0a:	230c      	movs	r3, #12
 8009d0c:	4630      	mov	r0, r6
 8009d0e:	6033      	str	r3, [r6, #0]
 8009d10:	f000 f99c 	bl	800a04c <__malloc_unlock>
 8009d14:	e794      	b.n	8009c40 <_malloc_r+0x20>
 8009d16:	6005      	str	r5, [r0, #0]
 8009d18:	e7d6      	b.n	8009cc8 <_malloc_r+0xa8>
 8009d1a:	bf00      	nop
 8009d1c:	200003e8 	.word	0x200003e8

08009d20 <_printf_common>:
 8009d20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009d24:	4616      	mov	r6, r2
 8009d26:	4698      	mov	r8, r3
 8009d28:	688a      	ldr	r2, [r1, #8]
 8009d2a:	4607      	mov	r7, r0
 8009d2c:	690b      	ldr	r3, [r1, #16]
 8009d2e:	460c      	mov	r4, r1
 8009d30:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009d34:	4293      	cmp	r3, r2
 8009d36:	bfb8      	it	lt
 8009d38:	4613      	movlt	r3, r2
 8009d3a:	6033      	str	r3, [r6, #0]
 8009d3c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8009d40:	b10a      	cbz	r2, 8009d46 <_printf_common+0x26>
 8009d42:	3301      	adds	r3, #1
 8009d44:	6033      	str	r3, [r6, #0]
 8009d46:	6823      	ldr	r3, [r4, #0]
 8009d48:	0699      	lsls	r1, r3, #26
 8009d4a:	bf42      	ittt	mi
 8009d4c:	6833      	ldrmi	r3, [r6, #0]
 8009d4e:	3302      	addmi	r3, #2
 8009d50:	6033      	strmi	r3, [r6, #0]
 8009d52:	6825      	ldr	r5, [r4, #0]
 8009d54:	f015 0506 	ands.w	r5, r5, #6
 8009d58:	d106      	bne.n	8009d68 <_printf_common+0x48>
 8009d5a:	f104 0a19 	add.w	sl, r4, #25
 8009d5e:	68e3      	ldr	r3, [r4, #12]
 8009d60:	6832      	ldr	r2, [r6, #0]
 8009d62:	1a9b      	subs	r3, r3, r2
 8009d64:	42ab      	cmp	r3, r5
 8009d66:	dc2b      	bgt.n	8009dc0 <_printf_common+0xa0>
 8009d68:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8009d6c:	6822      	ldr	r2, [r4, #0]
 8009d6e:	3b00      	subs	r3, #0
 8009d70:	bf18      	it	ne
 8009d72:	2301      	movne	r3, #1
 8009d74:	0692      	lsls	r2, r2, #26
 8009d76:	d430      	bmi.n	8009dda <_printf_common+0xba>
 8009d78:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8009d7c:	4641      	mov	r1, r8
 8009d7e:	4638      	mov	r0, r7
 8009d80:	47c8      	blx	r9
 8009d82:	3001      	adds	r0, #1
 8009d84:	d023      	beq.n	8009dce <_printf_common+0xae>
 8009d86:	6823      	ldr	r3, [r4, #0]
 8009d88:	341a      	adds	r4, #26
 8009d8a:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 8009d8e:	f003 0306 	and.w	r3, r3, #6
 8009d92:	2b04      	cmp	r3, #4
 8009d94:	bf0a      	itet	eq
 8009d96:	f854 5c0e 	ldreq.w	r5, [r4, #-14]
 8009d9a:	2500      	movne	r5, #0
 8009d9c:	6833      	ldreq	r3, [r6, #0]
 8009d9e:	f04f 0600 	mov.w	r6, #0
 8009da2:	bf08      	it	eq
 8009da4:	1aed      	subeq	r5, r5, r3
 8009da6:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8009daa:	bf08      	it	eq
 8009dac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009db0:	4293      	cmp	r3, r2
 8009db2:	bfc4      	itt	gt
 8009db4:	1a9b      	subgt	r3, r3, r2
 8009db6:	18ed      	addgt	r5, r5, r3
 8009db8:	42b5      	cmp	r5, r6
 8009dba:	d11a      	bne.n	8009df2 <_printf_common+0xd2>
 8009dbc:	2000      	movs	r0, #0
 8009dbe:	e008      	b.n	8009dd2 <_printf_common+0xb2>
 8009dc0:	2301      	movs	r3, #1
 8009dc2:	4652      	mov	r2, sl
 8009dc4:	4641      	mov	r1, r8
 8009dc6:	4638      	mov	r0, r7
 8009dc8:	47c8      	blx	r9
 8009dca:	3001      	adds	r0, #1
 8009dcc:	d103      	bne.n	8009dd6 <_printf_common+0xb6>
 8009dce:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009dd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009dd6:	3501      	adds	r5, #1
 8009dd8:	e7c1      	b.n	8009d5e <_printf_common+0x3e>
 8009dda:	18e1      	adds	r1, r4, r3
 8009ddc:	1c5a      	adds	r2, r3, #1
 8009dde:	2030      	movs	r0, #48	@ 0x30
 8009de0:	3302      	adds	r3, #2
 8009de2:	4422      	add	r2, r4
 8009de4:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8009de8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8009dec:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8009df0:	e7c2      	b.n	8009d78 <_printf_common+0x58>
 8009df2:	2301      	movs	r3, #1
 8009df4:	4622      	mov	r2, r4
 8009df6:	4641      	mov	r1, r8
 8009df8:	4638      	mov	r0, r7
 8009dfa:	47c8      	blx	r9
 8009dfc:	3001      	adds	r0, #1
 8009dfe:	d0e6      	beq.n	8009dce <_printf_common+0xae>
 8009e00:	3601      	adds	r6, #1
 8009e02:	e7d9      	b.n	8009db8 <_printf_common+0x98>

08009e04 <_printf_i>:
 8009e04:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009e08:	7e0f      	ldrb	r7, [r1, #24]
 8009e0a:	4691      	mov	r9, r2
 8009e0c:	4680      	mov	r8, r0
 8009e0e:	460c      	mov	r4, r1
 8009e10:	2f78      	cmp	r7, #120	@ 0x78
 8009e12:	469a      	mov	sl, r3
 8009e14:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8009e16:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8009e1a:	d807      	bhi.n	8009e2c <_printf_i+0x28>
 8009e1c:	2f62      	cmp	r7, #98	@ 0x62
 8009e1e:	d80a      	bhi.n	8009e36 <_printf_i+0x32>
 8009e20:	2f00      	cmp	r7, #0
 8009e22:	f000 80d1 	beq.w	8009fc8 <_printf_i+0x1c4>
 8009e26:	2f58      	cmp	r7, #88	@ 0x58
 8009e28:	f000 80b8 	beq.w	8009f9c <_printf_i+0x198>
 8009e2c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009e30:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8009e34:	e03a      	b.n	8009eac <_printf_i+0xa8>
 8009e36:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8009e3a:	2b15      	cmp	r3, #21
 8009e3c:	d8f6      	bhi.n	8009e2c <_printf_i+0x28>
 8009e3e:	a101      	add	r1, pc, #4	@ (adr r1, 8009e44 <_printf_i+0x40>)
 8009e40:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009e44:	08009e9d 	.word	0x08009e9d
 8009e48:	08009eb1 	.word	0x08009eb1
 8009e4c:	08009e2d 	.word	0x08009e2d
 8009e50:	08009e2d 	.word	0x08009e2d
 8009e54:	08009e2d 	.word	0x08009e2d
 8009e58:	08009e2d 	.word	0x08009e2d
 8009e5c:	08009eb1 	.word	0x08009eb1
 8009e60:	08009e2d 	.word	0x08009e2d
 8009e64:	08009e2d 	.word	0x08009e2d
 8009e68:	08009e2d 	.word	0x08009e2d
 8009e6c:	08009e2d 	.word	0x08009e2d
 8009e70:	08009faf 	.word	0x08009faf
 8009e74:	08009edb 	.word	0x08009edb
 8009e78:	08009f69 	.word	0x08009f69
 8009e7c:	08009e2d 	.word	0x08009e2d
 8009e80:	08009e2d 	.word	0x08009e2d
 8009e84:	08009fd1 	.word	0x08009fd1
 8009e88:	08009e2d 	.word	0x08009e2d
 8009e8c:	08009edb 	.word	0x08009edb
 8009e90:	08009e2d 	.word	0x08009e2d
 8009e94:	08009e2d 	.word	0x08009e2d
 8009e98:	08009f71 	.word	0x08009f71
 8009e9c:	6833      	ldr	r3, [r6, #0]
 8009e9e:	1d1a      	adds	r2, r3, #4
 8009ea0:	681b      	ldr	r3, [r3, #0]
 8009ea2:	6032      	str	r2, [r6, #0]
 8009ea4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009ea8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8009eac:	2301      	movs	r3, #1
 8009eae:	e09c      	b.n	8009fea <_printf_i+0x1e6>
 8009eb0:	6833      	ldr	r3, [r6, #0]
 8009eb2:	6820      	ldr	r0, [r4, #0]
 8009eb4:	1d19      	adds	r1, r3, #4
 8009eb6:	6031      	str	r1, [r6, #0]
 8009eb8:	0606      	lsls	r6, r0, #24
 8009eba:	d501      	bpl.n	8009ec0 <_printf_i+0xbc>
 8009ebc:	681d      	ldr	r5, [r3, #0]
 8009ebe:	e003      	b.n	8009ec8 <_printf_i+0xc4>
 8009ec0:	0645      	lsls	r5, r0, #25
 8009ec2:	d5fb      	bpl.n	8009ebc <_printf_i+0xb8>
 8009ec4:	f9b3 5000 	ldrsh.w	r5, [r3]
 8009ec8:	2d00      	cmp	r5, #0
 8009eca:	da03      	bge.n	8009ed4 <_printf_i+0xd0>
 8009ecc:	232d      	movs	r3, #45	@ 0x2d
 8009ece:	426d      	negs	r5, r5
 8009ed0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009ed4:	4858      	ldr	r0, [pc, #352]	@ (800a038 <_printf_i+0x234>)
 8009ed6:	230a      	movs	r3, #10
 8009ed8:	e011      	b.n	8009efe <_printf_i+0xfa>
 8009eda:	6821      	ldr	r1, [r4, #0]
 8009edc:	6833      	ldr	r3, [r6, #0]
 8009ede:	0608      	lsls	r0, r1, #24
 8009ee0:	f853 5b04 	ldr.w	r5, [r3], #4
 8009ee4:	d402      	bmi.n	8009eec <_printf_i+0xe8>
 8009ee6:	0649      	lsls	r1, r1, #25
 8009ee8:	bf48      	it	mi
 8009eea:	b2ad      	uxthmi	r5, r5
 8009eec:	2f6f      	cmp	r7, #111	@ 0x6f
 8009eee:	6033      	str	r3, [r6, #0]
 8009ef0:	4851      	ldr	r0, [pc, #324]	@ (800a038 <_printf_i+0x234>)
 8009ef2:	bf14      	ite	ne
 8009ef4:	230a      	movne	r3, #10
 8009ef6:	2308      	moveq	r3, #8
 8009ef8:	2100      	movs	r1, #0
 8009efa:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8009efe:	6866      	ldr	r6, [r4, #4]
 8009f00:	2e00      	cmp	r6, #0
 8009f02:	60a6      	str	r6, [r4, #8]
 8009f04:	db05      	blt.n	8009f12 <_printf_i+0x10e>
 8009f06:	6821      	ldr	r1, [r4, #0]
 8009f08:	432e      	orrs	r6, r5
 8009f0a:	f021 0104 	bic.w	r1, r1, #4
 8009f0e:	6021      	str	r1, [r4, #0]
 8009f10:	d04b      	beq.n	8009faa <_printf_i+0x1a6>
 8009f12:	4616      	mov	r6, r2
 8009f14:	fbb5 f1f3 	udiv	r1, r5, r3
 8009f18:	fb03 5711 	mls	r7, r3, r1, r5
 8009f1c:	5dc7      	ldrb	r7, [r0, r7]
 8009f1e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009f22:	462f      	mov	r7, r5
 8009f24:	460d      	mov	r5, r1
 8009f26:	42bb      	cmp	r3, r7
 8009f28:	d9f4      	bls.n	8009f14 <_printf_i+0x110>
 8009f2a:	2b08      	cmp	r3, #8
 8009f2c:	d10b      	bne.n	8009f46 <_printf_i+0x142>
 8009f2e:	6823      	ldr	r3, [r4, #0]
 8009f30:	07df      	lsls	r7, r3, #31
 8009f32:	d508      	bpl.n	8009f46 <_printf_i+0x142>
 8009f34:	6923      	ldr	r3, [r4, #16]
 8009f36:	6861      	ldr	r1, [r4, #4]
 8009f38:	4299      	cmp	r1, r3
 8009f3a:	bfde      	ittt	le
 8009f3c:	2330      	movle	r3, #48	@ 0x30
 8009f3e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009f42:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8009f46:	1b92      	subs	r2, r2, r6
 8009f48:	6122      	str	r2, [r4, #16]
 8009f4a:	464b      	mov	r3, r9
 8009f4c:	aa03      	add	r2, sp, #12
 8009f4e:	4621      	mov	r1, r4
 8009f50:	4640      	mov	r0, r8
 8009f52:	f8cd a000 	str.w	sl, [sp]
 8009f56:	f7ff fee3 	bl	8009d20 <_printf_common>
 8009f5a:	3001      	adds	r0, #1
 8009f5c:	d14a      	bne.n	8009ff4 <_printf_i+0x1f0>
 8009f5e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009f62:	b004      	add	sp, #16
 8009f64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009f68:	6823      	ldr	r3, [r4, #0]
 8009f6a:	f043 0320 	orr.w	r3, r3, #32
 8009f6e:	6023      	str	r3, [r4, #0]
 8009f70:	2778      	movs	r7, #120	@ 0x78
 8009f72:	4832      	ldr	r0, [pc, #200]	@ (800a03c <_printf_i+0x238>)
 8009f74:	6823      	ldr	r3, [r4, #0]
 8009f76:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8009f7a:	061f      	lsls	r7, r3, #24
 8009f7c:	6831      	ldr	r1, [r6, #0]
 8009f7e:	f851 5b04 	ldr.w	r5, [r1], #4
 8009f82:	d402      	bmi.n	8009f8a <_printf_i+0x186>
 8009f84:	065f      	lsls	r7, r3, #25
 8009f86:	bf48      	it	mi
 8009f88:	b2ad      	uxthmi	r5, r5
 8009f8a:	6031      	str	r1, [r6, #0]
 8009f8c:	07d9      	lsls	r1, r3, #31
 8009f8e:	bf44      	itt	mi
 8009f90:	f043 0320 	orrmi.w	r3, r3, #32
 8009f94:	6023      	strmi	r3, [r4, #0]
 8009f96:	b11d      	cbz	r5, 8009fa0 <_printf_i+0x19c>
 8009f98:	2310      	movs	r3, #16
 8009f9a:	e7ad      	b.n	8009ef8 <_printf_i+0xf4>
 8009f9c:	4826      	ldr	r0, [pc, #152]	@ (800a038 <_printf_i+0x234>)
 8009f9e:	e7e9      	b.n	8009f74 <_printf_i+0x170>
 8009fa0:	6823      	ldr	r3, [r4, #0]
 8009fa2:	f023 0320 	bic.w	r3, r3, #32
 8009fa6:	6023      	str	r3, [r4, #0]
 8009fa8:	e7f6      	b.n	8009f98 <_printf_i+0x194>
 8009faa:	4616      	mov	r6, r2
 8009fac:	e7bd      	b.n	8009f2a <_printf_i+0x126>
 8009fae:	6833      	ldr	r3, [r6, #0]
 8009fb0:	6825      	ldr	r5, [r4, #0]
 8009fb2:	1d18      	adds	r0, r3, #4
 8009fb4:	6961      	ldr	r1, [r4, #20]
 8009fb6:	6030      	str	r0, [r6, #0]
 8009fb8:	062e      	lsls	r6, r5, #24
 8009fba:	681b      	ldr	r3, [r3, #0]
 8009fbc:	d501      	bpl.n	8009fc2 <_printf_i+0x1be>
 8009fbe:	6019      	str	r1, [r3, #0]
 8009fc0:	e002      	b.n	8009fc8 <_printf_i+0x1c4>
 8009fc2:	0668      	lsls	r0, r5, #25
 8009fc4:	d5fb      	bpl.n	8009fbe <_printf_i+0x1ba>
 8009fc6:	8019      	strh	r1, [r3, #0]
 8009fc8:	2300      	movs	r3, #0
 8009fca:	4616      	mov	r6, r2
 8009fcc:	6123      	str	r3, [r4, #16]
 8009fce:	e7bc      	b.n	8009f4a <_printf_i+0x146>
 8009fd0:	6833      	ldr	r3, [r6, #0]
 8009fd2:	2100      	movs	r1, #0
 8009fd4:	1d1a      	adds	r2, r3, #4
 8009fd6:	6032      	str	r2, [r6, #0]
 8009fd8:	681e      	ldr	r6, [r3, #0]
 8009fda:	6862      	ldr	r2, [r4, #4]
 8009fdc:	4630      	mov	r0, r6
 8009fde:	f000 f893 	bl	800a108 <memchr>
 8009fe2:	b108      	cbz	r0, 8009fe8 <_printf_i+0x1e4>
 8009fe4:	1b80      	subs	r0, r0, r6
 8009fe6:	6060      	str	r0, [r4, #4]
 8009fe8:	6863      	ldr	r3, [r4, #4]
 8009fea:	6123      	str	r3, [r4, #16]
 8009fec:	2300      	movs	r3, #0
 8009fee:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009ff2:	e7aa      	b.n	8009f4a <_printf_i+0x146>
 8009ff4:	6923      	ldr	r3, [r4, #16]
 8009ff6:	4632      	mov	r2, r6
 8009ff8:	4649      	mov	r1, r9
 8009ffa:	4640      	mov	r0, r8
 8009ffc:	47d0      	blx	sl
 8009ffe:	3001      	adds	r0, #1
 800a000:	d0ad      	beq.n	8009f5e <_printf_i+0x15a>
 800a002:	6823      	ldr	r3, [r4, #0]
 800a004:	079b      	lsls	r3, r3, #30
 800a006:	d413      	bmi.n	800a030 <_printf_i+0x22c>
 800a008:	68e0      	ldr	r0, [r4, #12]
 800a00a:	9b03      	ldr	r3, [sp, #12]
 800a00c:	4298      	cmp	r0, r3
 800a00e:	bfb8      	it	lt
 800a010:	4618      	movlt	r0, r3
 800a012:	e7a6      	b.n	8009f62 <_printf_i+0x15e>
 800a014:	2301      	movs	r3, #1
 800a016:	4632      	mov	r2, r6
 800a018:	4649      	mov	r1, r9
 800a01a:	4640      	mov	r0, r8
 800a01c:	47d0      	blx	sl
 800a01e:	3001      	adds	r0, #1
 800a020:	d09d      	beq.n	8009f5e <_printf_i+0x15a>
 800a022:	3501      	adds	r5, #1
 800a024:	68e3      	ldr	r3, [r4, #12]
 800a026:	9903      	ldr	r1, [sp, #12]
 800a028:	1a5b      	subs	r3, r3, r1
 800a02a:	42ab      	cmp	r3, r5
 800a02c:	dcf2      	bgt.n	800a014 <_printf_i+0x210>
 800a02e:	e7eb      	b.n	800a008 <_printf_i+0x204>
 800a030:	2500      	movs	r5, #0
 800a032:	f104 0619 	add.w	r6, r4, #25
 800a036:	e7f5      	b.n	800a024 <_printf_i+0x220>
 800a038:	0800a871 	.word	0x0800a871
 800a03c:	0800a882 	.word	0x0800a882

0800a040 <__malloc_lock>:
 800a040:	4801      	ldr	r0, [pc, #4]	@ (800a048 <__malloc_lock+0x8>)
 800a042:	f7ff bc71 	b.w	8009928 <__retarget_lock_acquire_recursive>
 800a046:	bf00      	nop
 800a048:	200003e0 	.word	0x200003e0

0800a04c <__malloc_unlock>:
 800a04c:	4801      	ldr	r0, [pc, #4]	@ (800a054 <__malloc_unlock+0x8>)
 800a04e:	f7ff bc6c 	b.w	800992a <__retarget_lock_release_recursive>
 800a052:	bf00      	nop
 800a054:	200003e0 	.word	0x200003e0

0800a058 <_realloc_r>:
 800a058:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a05c:	4607      	mov	r7, r0
 800a05e:	4614      	mov	r4, r2
 800a060:	460d      	mov	r5, r1
 800a062:	b921      	cbnz	r1, 800a06e <_realloc_r+0x16>
 800a064:	4611      	mov	r1, r2
 800a066:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a06a:	f7ff bdd9 	b.w	8009c20 <_malloc_r>
 800a06e:	b92a      	cbnz	r2, 800a07c <_realloc_r+0x24>
 800a070:	4625      	mov	r5, r4
 800a072:	f000 f865 	bl	800a140 <_free_r>
 800a076:	4628      	mov	r0, r5
 800a078:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a07c:	f000 f8aa 	bl	800a1d4 <_malloc_usable_size_r>
 800a080:	4284      	cmp	r4, r0
 800a082:	4606      	mov	r6, r0
 800a084:	d802      	bhi.n	800a08c <_realloc_r+0x34>
 800a086:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a08a:	d8f4      	bhi.n	800a076 <_realloc_r+0x1e>
 800a08c:	4621      	mov	r1, r4
 800a08e:	4638      	mov	r0, r7
 800a090:	f7ff fdc6 	bl	8009c20 <_malloc_r>
 800a094:	4680      	mov	r8, r0
 800a096:	b908      	cbnz	r0, 800a09c <_realloc_r+0x44>
 800a098:	4645      	mov	r5, r8
 800a09a:	e7ec      	b.n	800a076 <_realloc_r+0x1e>
 800a09c:	42b4      	cmp	r4, r6
 800a09e:	4622      	mov	r2, r4
 800a0a0:	4629      	mov	r1, r5
 800a0a2:	bf28      	it	cs
 800a0a4:	4632      	movcs	r2, r6
 800a0a6:	f000 f83d 	bl	800a124 <memcpy>
 800a0aa:	4629      	mov	r1, r5
 800a0ac:	4638      	mov	r0, r7
 800a0ae:	f000 f847 	bl	800a140 <_free_r>
 800a0b2:	e7f1      	b.n	800a098 <_realloc_r+0x40>

0800a0b4 <memmove>:
 800a0b4:	4288      	cmp	r0, r1
 800a0b6:	b510      	push	{r4, lr}
 800a0b8:	eb01 0402 	add.w	r4, r1, r2
 800a0bc:	d902      	bls.n	800a0c4 <memmove+0x10>
 800a0be:	4284      	cmp	r4, r0
 800a0c0:	4623      	mov	r3, r4
 800a0c2:	d807      	bhi.n	800a0d4 <memmove+0x20>
 800a0c4:	1e43      	subs	r3, r0, #1
 800a0c6:	42a1      	cmp	r1, r4
 800a0c8:	d008      	beq.n	800a0dc <memmove+0x28>
 800a0ca:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a0ce:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a0d2:	e7f8      	b.n	800a0c6 <memmove+0x12>
 800a0d4:	4402      	add	r2, r0
 800a0d6:	4601      	mov	r1, r0
 800a0d8:	428a      	cmp	r2, r1
 800a0da:	d100      	bne.n	800a0de <memmove+0x2a>
 800a0dc:	bd10      	pop	{r4, pc}
 800a0de:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a0e2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a0e6:	e7f7      	b.n	800a0d8 <memmove+0x24>

0800a0e8 <_sbrk_r>:
 800a0e8:	b538      	push	{r3, r4, r5, lr}
 800a0ea:	2300      	movs	r3, #0
 800a0ec:	4d05      	ldr	r5, [pc, #20]	@ (800a104 <_sbrk_r+0x1c>)
 800a0ee:	4604      	mov	r4, r0
 800a0f0:	4608      	mov	r0, r1
 800a0f2:	602b      	str	r3, [r5, #0]
 800a0f4:	f7f7 fad6 	bl	80016a4 <_sbrk>
 800a0f8:	1c43      	adds	r3, r0, #1
 800a0fa:	d102      	bne.n	800a102 <_sbrk_r+0x1a>
 800a0fc:	682b      	ldr	r3, [r5, #0]
 800a0fe:	b103      	cbz	r3, 800a102 <_sbrk_r+0x1a>
 800a100:	6023      	str	r3, [r4, #0]
 800a102:	bd38      	pop	{r3, r4, r5, pc}
 800a104:	200003ec 	.word	0x200003ec

0800a108 <memchr>:
 800a108:	b2c9      	uxtb	r1, r1
 800a10a:	4603      	mov	r3, r0
 800a10c:	4402      	add	r2, r0
 800a10e:	b510      	push	{r4, lr}
 800a110:	4293      	cmp	r3, r2
 800a112:	4618      	mov	r0, r3
 800a114:	d101      	bne.n	800a11a <memchr+0x12>
 800a116:	2000      	movs	r0, #0
 800a118:	e003      	b.n	800a122 <memchr+0x1a>
 800a11a:	7804      	ldrb	r4, [r0, #0]
 800a11c:	3301      	adds	r3, #1
 800a11e:	428c      	cmp	r4, r1
 800a120:	d1f6      	bne.n	800a110 <memchr+0x8>
 800a122:	bd10      	pop	{r4, pc}

0800a124 <memcpy>:
 800a124:	440a      	add	r2, r1
 800a126:	1e43      	subs	r3, r0, #1
 800a128:	4291      	cmp	r1, r2
 800a12a:	d100      	bne.n	800a12e <memcpy+0xa>
 800a12c:	4770      	bx	lr
 800a12e:	b510      	push	{r4, lr}
 800a130:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a134:	4291      	cmp	r1, r2
 800a136:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a13a:	d1f9      	bne.n	800a130 <memcpy+0xc>
 800a13c:	bd10      	pop	{r4, pc}
	...

0800a140 <_free_r>:
 800a140:	b538      	push	{r3, r4, r5, lr}
 800a142:	4605      	mov	r5, r0
 800a144:	2900      	cmp	r1, #0
 800a146:	d041      	beq.n	800a1cc <_free_r+0x8c>
 800a148:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a14c:	1f0c      	subs	r4, r1, #4
 800a14e:	2b00      	cmp	r3, #0
 800a150:	bfb8      	it	lt
 800a152:	18e4      	addlt	r4, r4, r3
 800a154:	f7ff ff74 	bl	800a040 <__malloc_lock>
 800a158:	4a1d      	ldr	r2, [pc, #116]	@ (800a1d0 <_free_r+0x90>)
 800a15a:	6813      	ldr	r3, [r2, #0]
 800a15c:	b933      	cbnz	r3, 800a16c <_free_r+0x2c>
 800a15e:	6063      	str	r3, [r4, #4]
 800a160:	6014      	str	r4, [r2, #0]
 800a162:	4628      	mov	r0, r5
 800a164:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a168:	f7ff bf70 	b.w	800a04c <__malloc_unlock>
 800a16c:	42a3      	cmp	r3, r4
 800a16e:	d908      	bls.n	800a182 <_free_r+0x42>
 800a170:	6820      	ldr	r0, [r4, #0]
 800a172:	1821      	adds	r1, r4, r0
 800a174:	428b      	cmp	r3, r1
 800a176:	bf01      	itttt	eq
 800a178:	6819      	ldreq	r1, [r3, #0]
 800a17a:	685b      	ldreq	r3, [r3, #4]
 800a17c:	1809      	addeq	r1, r1, r0
 800a17e:	6021      	streq	r1, [r4, #0]
 800a180:	e7ed      	b.n	800a15e <_free_r+0x1e>
 800a182:	461a      	mov	r2, r3
 800a184:	685b      	ldr	r3, [r3, #4]
 800a186:	b10b      	cbz	r3, 800a18c <_free_r+0x4c>
 800a188:	42a3      	cmp	r3, r4
 800a18a:	d9fa      	bls.n	800a182 <_free_r+0x42>
 800a18c:	6811      	ldr	r1, [r2, #0]
 800a18e:	1850      	adds	r0, r2, r1
 800a190:	42a0      	cmp	r0, r4
 800a192:	d10b      	bne.n	800a1ac <_free_r+0x6c>
 800a194:	6820      	ldr	r0, [r4, #0]
 800a196:	4401      	add	r1, r0
 800a198:	1850      	adds	r0, r2, r1
 800a19a:	6011      	str	r1, [r2, #0]
 800a19c:	4283      	cmp	r3, r0
 800a19e:	d1e0      	bne.n	800a162 <_free_r+0x22>
 800a1a0:	6818      	ldr	r0, [r3, #0]
 800a1a2:	685b      	ldr	r3, [r3, #4]
 800a1a4:	4408      	add	r0, r1
 800a1a6:	6053      	str	r3, [r2, #4]
 800a1a8:	6010      	str	r0, [r2, #0]
 800a1aa:	e7da      	b.n	800a162 <_free_r+0x22>
 800a1ac:	d902      	bls.n	800a1b4 <_free_r+0x74>
 800a1ae:	230c      	movs	r3, #12
 800a1b0:	602b      	str	r3, [r5, #0]
 800a1b2:	e7d6      	b.n	800a162 <_free_r+0x22>
 800a1b4:	6820      	ldr	r0, [r4, #0]
 800a1b6:	1821      	adds	r1, r4, r0
 800a1b8:	428b      	cmp	r3, r1
 800a1ba:	bf02      	ittt	eq
 800a1bc:	6819      	ldreq	r1, [r3, #0]
 800a1be:	685b      	ldreq	r3, [r3, #4]
 800a1c0:	1809      	addeq	r1, r1, r0
 800a1c2:	6063      	str	r3, [r4, #4]
 800a1c4:	bf08      	it	eq
 800a1c6:	6021      	streq	r1, [r4, #0]
 800a1c8:	6054      	str	r4, [r2, #4]
 800a1ca:	e7ca      	b.n	800a162 <_free_r+0x22>
 800a1cc:	bd38      	pop	{r3, r4, r5, pc}
 800a1ce:	bf00      	nop
 800a1d0:	200003e8 	.word	0x200003e8

0800a1d4 <_malloc_usable_size_r>:
 800a1d4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a1d8:	1f18      	subs	r0, r3, #4
 800a1da:	2b00      	cmp	r3, #0
 800a1dc:	bfbc      	itt	lt
 800a1de:	580b      	ldrlt	r3, [r1, r0]
 800a1e0:	18c0      	addlt	r0, r0, r3
 800a1e2:	4770      	bx	lr

0800a1e4 <_init>:
 800a1e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a1e6:	bf00      	nop
 800a1e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a1ea:	bc08      	pop	{r3}
 800a1ec:	469e      	mov	lr, r3
 800a1ee:	4770      	bx	lr

0800a1f0 <_fini>:
 800a1f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a1f2:	bf00      	nop
 800a1f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a1f6:	bc08      	pop	{r3}
 800a1f8:	469e      	mov	lr, r3
 800a1fa:	4770      	bx	lr
