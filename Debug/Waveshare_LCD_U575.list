
Waveshare_LCD_U575.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000238  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c348  08000238  08000238  00001238  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001a51  0800c580  0800c580  0000d580  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800dfd4  0800dfd4  0000efd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800dfdc  0800dfdc  0000efdc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800dfe0  0800dfe0  0000efe0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         000001f0  20000000  0800dfe4  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000368  200001f0  0800e1d4  0000f1f0  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20000558  0800e1d4  0000f558  2**0
                  ALLOC
  9 .ARM.attributes 00000036  00000000  00000000  0000f1f0  2**0
                  CONTENTS, READONLY
 10 .debug_info   00021233  00000000  00000000  0000f226  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0000415c  00000000  00000000  00030459  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001ab8  00000000  00000000  000345b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 000014ad  00000000  00000000  00036070  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00036e50  00000000  00000000  0003751d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00024582  00000000  00000000  0006e36d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00150c7a  00000000  00000000  000928ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001e3569  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00008260  00000000  00000000  001e35ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000072  00000000  00000000  001eb80c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000238 <__do_global_dtors_aux>:
 8000238:	b510      	push	{r4, lr}
 800023a:	4c05      	ldr	r4, [pc, #20]	@ (8000250 <__do_global_dtors_aux+0x18>)
 800023c:	7823      	ldrb	r3, [r4, #0]
 800023e:	b933      	cbnz	r3, 800024e <__do_global_dtors_aux+0x16>
 8000240:	4b04      	ldr	r3, [pc, #16]	@ (8000254 <__do_global_dtors_aux+0x1c>)
 8000242:	b113      	cbz	r3, 800024a <__do_global_dtors_aux+0x12>
 8000244:	4804      	ldr	r0, [pc, #16]	@ (8000258 <__do_global_dtors_aux+0x20>)
 8000246:	f3af 8000 	nop.w
 800024a:	2301      	movs	r3, #1
 800024c:	7023      	strb	r3, [r4, #0]
 800024e:	bd10      	pop	{r4, pc}
 8000250:	200001f0 	.word	0x200001f0
 8000254:	00000000 	.word	0x00000000
 8000258:	0800c568 	.word	0x0800c568

0800025c <frame_dummy>:
 800025c:	b508      	push	{r3, lr}
 800025e:	4b03      	ldr	r3, [pc, #12]	@ (800026c <frame_dummy+0x10>)
 8000260:	b11b      	cbz	r3, 800026a <frame_dummy+0xe>
 8000262:	4903      	ldr	r1, [pc, #12]	@ (8000270 <frame_dummy+0x14>)
 8000264:	4803      	ldr	r0, [pc, #12]	@ (8000274 <frame_dummy+0x18>)
 8000266:	f3af 8000 	nop.w
 800026a:	bd08      	pop	{r3, pc}
 800026c:	00000000 	.word	0x00000000
 8000270:	200001f4 	.word	0x200001f4
 8000274:	0800c568 	.word	0x0800c568

08000278 <strlen>:
 8000278:	4603      	mov	r3, r0
 800027a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800027e:	2a00      	cmp	r2, #0
 8000280:	d1fb      	bne.n	800027a <strlen+0x2>
 8000282:	1a18      	subs	r0, r3, r0
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr

08000288 <__aeabi_drsub>:
 8000288:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800028c:	e002      	b.n	8000294 <__adddf3>
 800028e:	bf00      	nop

08000290 <__aeabi_dsub>:
 8000290:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000294 <__adddf3>:
 8000294:	b530      	push	{r4, r5, lr}
 8000296:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800029a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800029e:	ea94 0f05 	teq	r4, r5
 80002a2:	bf08      	it	eq
 80002a4:	ea90 0f02 	teqeq	r0, r2
 80002a8:	bf1f      	itttt	ne
 80002aa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002ae:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002b2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002b6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002ba:	f000 80e2 	beq.w	8000482 <__adddf3+0x1ee>
 80002be:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002c2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002c6:	bfb8      	it	lt
 80002c8:	426d      	neglt	r5, r5
 80002ca:	dd0c      	ble.n	80002e6 <__adddf3+0x52>
 80002cc:	442c      	add	r4, r5
 80002ce:	ea80 0202 	eor.w	r2, r0, r2
 80002d2:	ea81 0303 	eor.w	r3, r1, r3
 80002d6:	ea82 0000 	eor.w	r0, r2, r0
 80002da:	ea83 0101 	eor.w	r1, r3, r1
 80002de:	ea80 0202 	eor.w	r2, r0, r2
 80002e2:	ea81 0303 	eor.w	r3, r1, r3
 80002e6:	2d36      	cmp	r5, #54	@ 0x36
 80002e8:	bf88      	it	hi
 80002ea:	bd30      	pophi	{r4, r5, pc}
 80002ec:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002f4:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002fc:	d002      	beq.n	8000304 <__adddf3+0x70>
 80002fe:	4240      	negs	r0, r0
 8000300:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000304:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000308:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800030c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000310:	d002      	beq.n	8000318 <__adddf3+0x84>
 8000312:	4252      	negs	r2, r2
 8000314:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000318:	ea94 0f05 	teq	r4, r5
 800031c:	f000 80a7 	beq.w	800046e <__adddf3+0x1da>
 8000320:	f1a4 0401 	sub.w	r4, r4, #1
 8000324:	f1d5 0e20 	rsbs	lr, r5, #32
 8000328:	db0d      	blt.n	8000346 <__adddf3+0xb2>
 800032a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800032e:	fa22 f205 	lsr.w	r2, r2, r5
 8000332:	1880      	adds	r0, r0, r2
 8000334:	f141 0100 	adc.w	r1, r1, #0
 8000338:	fa03 f20e 	lsl.w	r2, r3, lr
 800033c:	1880      	adds	r0, r0, r2
 800033e:	fa43 f305 	asr.w	r3, r3, r5
 8000342:	4159      	adcs	r1, r3
 8000344:	e00e      	b.n	8000364 <__adddf3+0xd0>
 8000346:	f1a5 0520 	sub.w	r5, r5, #32
 800034a:	f10e 0e20 	add.w	lr, lr, #32
 800034e:	2a01      	cmp	r2, #1
 8000350:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000354:	bf28      	it	cs
 8000356:	f04c 0c02 	orrcs.w	ip, ip, #2
 800035a:	fa43 f305 	asr.w	r3, r3, r5
 800035e:	18c0      	adds	r0, r0, r3
 8000360:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000364:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000368:	d507      	bpl.n	800037a <__adddf3+0xe6>
 800036a:	f04f 0e00 	mov.w	lr, #0
 800036e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000372:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000376:	eb6e 0101 	sbc.w	r1, lr, r1
 800037a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800037e:	d31b      	bcc.n	80003b8 <__adddf3+0x124>
 8000380:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000384:	d30c      	bcc.n	80003a0 <__adddf3+0x10c>
 8000386:	0849      	lsrs	r1, r1, #1
 8000388:	ea5f 0030 	movs.w	r0, r0, rrx
 800038c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000390:	f104 0401 	add.w	r4, r4, #1
 8000394:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000398:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800039c:	f080 809a 	bcs.w	80004d4 <__adddf3+0x240>
 80003a0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003a4:	bf08      	it	eq
 80003a6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003aa:	f150 0000 	adcs.w	r0, r0, #0
 80003ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003b2:	ea41 0105 	orr.w	r1, r1, r5
 80003b6:	bd30      	pop	{r4, r5, pc}
 80003b8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003bc:	4140      	adcs	r0, r0
 80003be:	eb41 0101 	adc.w	r1, r1, r1
 80003c2:	3c01      	subs	r4, #1
 80003c4:	bf28      	it	cs
 80003c6:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003ca:	d2e9      	bcs.n	80003a0 <__adddf3+0x10c>
 80003cc:	f091 0f00 	teq	r1, #0
 80003d0:	bf04      	itt	eq
 80003d2:	4601      	moveq	r1, r0
 80003d4:	2000      	moveq	r0, #0
 80003d6:	fab1 f381 	clz	r3, r1
 80003da:	bf08      	it	eq
 80003dc:	3320      	addeq	r3, #32
 80003de:	f1a3 030b 	sub.w	r3, r3, #11
 80003e2:	f1b3 0220 	subs.w	r2, r3, #32
 80003e6:	da0c      	bge.n	8000402 <__adddf3+0x16e>
 80003e8:	320c      	adds	r2, #12
 80003ea:	dd08      	ble.n	80003fe <__adddf3+0x16a>
 80003ec:	f102 0c14 	add.w	ip, r2, #20
 80003f0:	f1c2 020c 	rsb	r2, r2, #12
 80003f4:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f8:	fa21 f102 	lsr.w	r1, r1, r2
 80003fc:	e00c      	b.n	8000418 <__adddf3+0x184>
 80003fe:	f102 0214 	add.w	r2, r2, #20
 8000402:	bfd8      	it	le
 8000404:	f1c2 0c20 	rsble	ip, r2, #32
 8000408:	fa01 f102 	lsl.w	r1, r1, r2
 800040c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000410:	bfdc      	itt	le
 8000412:	ea41 010c 	orrle.w	r1, r1, ip
 8000416:	4090      	lslle	r0, r2
 8000418:	1ae4      	subs	r4, r4, r3
 800041a:	bfa2      	ittt	ge
 800041c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000420:	4329      	orrge	r1, r5
 8000422:	bd30      	popge	{r4, r5, pc}
 8000424:	ea6f 0404 	mvn.w	r4, r4
 8000428:	3c1f      	subs	r4, #31
 800042a:	da1c      	bge.n	8000466 <__adddf3+0x1d2>
 800042c:	340c      	adds	r4, #12
 800042e:	dc0e      	bgt.n	800044e <__adddf3+0x1ba>
 8000430:	f104 0414 	add.w	r4, r4, #20
 8000434:	f1c4 0220 	rsb	r2, r4, #32
 8000438:	fa20 f004 	lsr.w	r0, r0, r4
 800043c:	fa01 f302 	lsl.w	r3, r1, r2
 8000440:	ea40 0003 	orr.w	r0, r0, r3
 8000444:	fa21 f304 	lsr.w	r3, r1, r4
 8000448:	ea45 0103 	orr.w	r1, r5, r3
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	f1c4 040c 	rsb	r4, r4, #12
 8000452:	f1c4 0220 	rsb	r2, r4, #32
 8000456:	fa20 f002 	lsr.w	r0, r0, r2
 800045a:	fa01 f304 	lsl.w	r3, r1, r4
 800045e:	ea40 0003 	orr.w	r0, r0, r3
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	fa21 f004 	lsr.w	r0, r1, r4
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	f094 0f00 	teq	r4, #0
 8000472:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000476:	bf06      	itte	eq
 8000478:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800047c:	3401      	addeq	r4, #1
 800047e:	3d01      	subne	r5, #1
 8000480:	e74e      	b.n	8000320 <__adddf3+0x8c>
 8000482:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000486:	bf18      	it	ne
 8000488:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800048c:	d029      	beq.n	80004e2 <__adddf3+0x24e>
 800048e:	ea94 0f05 	teq	r4, r5
 8000492:	bf08      	it	eq
 8000494:	ea90 0f02 	teqeq	r0, r2
 8000498:	d005      	beq.n	80004a6 <__adddf3+0x212>
 800049a:	ea54 0c00 	orrs.w	ip, r4, r0
 800049e:	bf04      	itt	eq
 80004a0:	4619      	moveq	r1, r3
 80004a2:	4610      	moveq	r0, r2
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	ea91 0f03 	teq	r1, r3
 80004aa:	bf1e      	ittt	ne
 80004ac:	2100      	movne	r1, #0
 80004ae:	2000      	movne	r0, #0
 80004b0:	bd30      	popne	{r4, r5, pc}
 80004b2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004b6:	d105      	bne.n	80004c4 <__adddf3+0x230>
 80004b8:	0040      	lsls	r0, r0, #1
 80004ba:	4149      	adcs	r1, r1
 80004bc:	bf28      	it	cs
 80004be:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004c2:	bd30      	pop	{r4, r5, pc}
 80004c4:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c8:	bf3c      	itt	cc
 80004ca:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004ce:	bd30      	popcc	{r4, r5, pc}
 80004d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004d4:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004dc:	f04f 0000 	mov.w	r0, #0
 80004e0:	bd30      	pop	{r4, r5, pc}
 80004e2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004e6:	bf1a      	itte	ne
 80004e8:	4619      	movne	r1, r3
 80004ea:	4610      	movne	r0, r2
 80004ec:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f0:	bf1c      	itt	ne
 80004f2:	460b      	movne	r3, r1
 80004f4:	4602      	movne	r2, r0
 80004f6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004fa:	bf06      	itte	eq
 80004fc:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000500:	ea91 0f03 	teqeq	r1, r3
 8000504:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	bf00      	nop

0800050c <__aeabi_ui2d>:
 800050c:	f090 0f00 	teq	r0, #0
 8000510:	bf04      	itt	eq
 8000512:	2100      	moveq	r1, #0
 8000514:	4770      	bxeq	lr
 8000516:	b530      	push	{r4, r5, lr}
 8000518:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800051c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000520:	f04f 0500 	mov.w	r5, #0
 8000524:	f04f 0100 	mov.w	r1, #0
 8000528:	e750      	b.n	80003cc <__adddf3+0x138>
 800052a:	bf00      	nop

0800052c <__aeabi_i2d>:
 800052c:	f090 0f00 	teq	r0, #0
 8000530:	bf04      	itt	eq
 8000532:	2100      	moveq	r1, #0
 8000534:	4770      	bxeq	lr
 8000536:	b530      	push	{r4, r5, lr}
 8000538:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800053c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000540:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000544:	bf48      	it	mi
 8000546:	4240      	negmi	r0, r0
 8000548:	f04f 0100 	mov.w	r1, #0
 800054c:	e73e      	b.n	80003cc <__adddf3+0x138>
 800054e:	bf00      	nop

08000550 <__aeabi_f2d>:
 8000550:	0042      	lsls	r2, r0, #1
 8000552:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000556:	ea4f 0131 	mov.w	r1, r1, rrx
 800055a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800055e:	bf1f      	itttt	ne
 8000560:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000564:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000568:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 800056c:	4770      	bxne	lr
 800056e:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000572:	bf08      	it	eq
 8000574:	4770      	bxeq	lr
 8000576:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800057a:	bf04      	itt	eq
 800057c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000580:	4770      	bxeq	lr
 8000582:	b530      	push	{r4, r5, lr}
 8000584:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000588:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800058c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000590:	e71c      	b.n	80003cc <__adddf3+0x138>
 8000592:	bf00      	nop

08000594 <__aeabi_ul2d>:
 8000594:	ea50 0201 	orrs.w	r2, r0, r1
 8000598:	bf08      	it	eq
 800059a:	4770      	bxeq	lr
 800059c:	b530      	push	{r4, r5, lr}
 800059e:	f04f 0500 	mov.w	r5, #0
 80005a2:	e00a      	b.n	80005ba <__aeabi_l2d+0x16>

080005a4 <__aeabi_l2d>:
 80005a4:	ea50 0201 	orrs.w	r2, r0, r1
 80005a8:	bf08      	it	eq
 80005aa:	4770      	bxeq	lr
 80005ac:	b530      	push	{r4, r5, lr}
 80005ae:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005b2:	d502      	bpl.n	80005ba <__aeabi_l2d+0x16>
 80005b4:	4240      	negs	r0, r0
 80005b6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005ba:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005be:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005c2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005c6:	f43f aed8 	beq.w	800037a <__adddf3+0xe6>
 80005ca:	f04f 0203 	mov.w	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005e2:	f1c2 0320 	rsb	r3, r2, #32
 80005e6:	fa00 fc03 	lsl.w	ip, r0, r3
 80005ea:	fa20 f002 	lsr.w	r0, r0, r2
 80005ee:	fa01 fe03 	lsl.w	lr, r1, r3
 80005f2:	ea40 000e 	orr.w	r0, r0, lr
 80005f6:	fa21 f102 	lsr.w	r1, r1, r2
 80005fa:	4414      	add	r4, r2
 80005fc:	e6bd      	b.n	800037a <__adddf3+0xe6>
 80005fe:	bf00      	nop

08000600 <__aeabi_dmul>:
 8000600:	b570      	push	{r4, r5, r6, lr}
 8000602:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000606:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800060a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800060e:	bf1d      	ittte	ne
 8000610:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000614:	ea94 0f0c 	teqne	r4, ip
 8000618:	ea95 0f0c 	teqne	r5, ip
 800061c:	f000 f8de 	bleq	80007dc <__aeabi_dmul+0x1dc>
 8000620:	442c      	add	r4, r5
 8000622:	ea81 0603 	eor.w	r6, r1, r3
 8000626:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800062a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800062e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000632:	bf18      	it	ne
 8000634:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000638:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800063c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000640:	d038      	beq.n	80006b4 <__aeabi_dmul+0xb4>
 8000642:	fba0 ce02 	umull	ip, lr, r0, r2
 8000646:	f04f 0500 	mov.w	r5, #0
 800064a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800064e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000652:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000656:	f04f 0600 	mov.w	r6, #0
 800065a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800065e:	f09c 0f00 	teq	ip, #0
 8000662:	bf18      	it	ne
 8000664:	f04e 0e01 	orrne.w	lr, lr, #1
 8000668:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 800066c:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000670:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000674:	d204      	bcs.n	8000680 <__aeabi_dmul+0x80>
 8000676:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800067a:	416d      	adcs	r5, r5
 800067c:	eb46 0606 	adc.w	r6, r6, r6
 8000680:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000684:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000688:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800068c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000690:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000694:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000698:	bf88      	it	hi
 800069a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800069e:	d81e      	bhi.n	80006de <__aeabi_dmul+0xde>
 80006a0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006a4:	bf08      	it	eq
 80006a6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006aa:	f150 0000 	adcs.w	r0, r0, #0
 80006ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b8:	ea46 0101 	orr.w	r1, r6, r1
 80006bc:	ea40 0002 	orr.w	r0, r0, r2
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c8:	bfc2      	ittt	gt
 80006ca:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006ce:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006d2:	bd70      	popgt	{r4, r5, r6, pc}
 80006d4:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d8:	f04f 0e00 	mov.w	lr, #0
 80006dc:	3c01      	subs	r4, #1
 80006de:	f300 80ab 	bgt.w	8000838 <__aeabi_dmul+0x238>
 80006e2:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006e6:	bfde      	ittt	le
 80006e8:	2000      	movle	r0, #0
 80006ea:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006ee:	bd70      	pople	{r4, r5, r6, pc}
 80006f0:	f1c4 0400 	rsb	r4, r4, #0
 80006f4:	3c20      	subs	r4, #32
 80006f6:	da35      	bge.n	8000764 <__aeabi_dmul+0x164>
 80006f8:	340c      	adds	r4, #12
 80006fa:	dc1b      	bgt.n	8000734 <__aeabi_dmul+0x134>
 80006fc:	f104 0414 	add.w	r4, r4, #20
 8000700:	f1c4 0520 	rsb	r5, r4, #32
 8000704:	fa00 f305 	lsl.w	r3, r0, r5
 8000708:	fa20 f004 	lsr.w	r0, r0, r4
 800070c:	fa01 f205 	lsl.w	r2, r1, r5
 8000710:	ea40 0002 	orr.w	r0, r0, r2
 8000714:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000718:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800071c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000720:	fa21 f604 	lsr.w	r6, r1, r4
 8000724:	eb42 0106 	adc.w	r1, r2, r6
 8000728:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800072c:	bf08      	it	eq
 800072e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000732:	bd70      	pop	{r4, r5, r6, pc}
 8000734:	f1c4 040c 	rsb	r4, r4, #12
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f304 	lsl.w	r3, r0, r4
 8000740:	fa20 f005 	lsr.w	r0, r0, r5
 8000744:	fa01 f204 	lsl.w	r2, r1, r4
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000750:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000754:	f141 0100 	adc.w	r1, r1, #0
 8000758:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800075c:	bf08      	it	eq
 800075e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000762:	bd70      	pop	{r4, r5, r6, pc}
 8000764:	f1c4 0520 	rsb	r5, r4, #32
 8000768:	fa00 f205 	lsl.w	r2, r0, r5
 800076c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000770:	fa20 f304 	lsr.w	r3, r0, r4
 8000774:	fa01 f205 	lsl.w	r2, r1, r5
 8000778:	ea43 0302 	orr.w	r3, r3, r2
 800077c:	fa21 f004 	lsr.w	r0, r1, r4
 8000780:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000784:	fa21 f204 	lsr.w	r2, r1, r4
 8000788:	ea20 0002 	bic.w	r0, r0, r2
 800078c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f094 0f00 	teq	r4, #0
 80007a0:	d10f      	bne.n	80007c2 <__aeabi_dmul+0x1c2>
 80007a2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007a6:	0040      	lsls	r0, r0, #1
 80007a8:	eb41 0101 	adc.w	r1, r1, r1
 80007ac:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b0:	bf08      	it	eq
 80007b2:	3c01      	subeq	r4, #1
 80007b4:	d0f7      	beq.n	80007a6 <__aeabi_dmul+0x1a6>
 80007b6:	ea41 0106 	orr.w	r1, r1, r6
 80007ba:	f095 0f00 	teq	r5, #0
 80007be:	bf18      	it	ne
 80007c0:	4770      	bxne	lr
 80007c2:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007c6:	0052      	lsls	r2, r2, #1
 80007c8:	eb43 0303 	adc.w	r3, r3, r3
 80007cc:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d0:	bf08      	it	eq
 80007d2:	3d01      	subeq	r5, #1
 80007d4:	d0f7      	beq.n	80007c6 <__aeabi_dmul+0x1c6>
 80007d6:	ea43 0306 	orr.w	r3, r3, r6
 80007da:	4770      	bx	lr
 80007dc:	ea94 0f0c 	teq	r4, ip
 80007e0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007e4:	bf18      	it	ne
 80007e6:	ea95 0f0c 	teqne	r5, ip
 80007ea:	d00c      	beq.n	8000806 <__aeabi_dmul+0x206>
 80007ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f0:	bf18      	it	ne
 80007f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007f6:	d1d1      	bne.n	800079c <__aeabi_dmul+0x19c>
 80007f8:	ea81 0103 	eor.w	r1, r1, r3
 80007fc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000800:	f04f 0000 	mov.w	r0, #0
 8000804:	bd70      	pop	{r4, r5, r6, pc}
 8000806:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800080a:	bf06      	itte	eq
 800080c:	4610      	moveq	r0, r2
 800080e:	4619      	moveq	r1, r3
 8000810:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000814:	d019      	beq.n	800084a <__aeabi_dmul+0x24a>
 8000816:	ea94 0f0c 	teq	r4, ip
 800081a:	d102      	bne.n	8000822 <__aeabi_dmul+0x222>
 800081c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000820:	d113      	bne.n	800084a <__aeabi_dmul+0x24a>
 8000822:	ea95 0f0c 	teq	r5, ip
 8000826:	d105      	bne.n	8000834 <__aeabi_dmul+0x234>
 8000828:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800082c:	bf1c      	itt	ne
 800082e:	4610      	movne	r0, r2
 8000830:	4619      	movne	r1, r3
 8000832:	d10a      	bne.n	800084a <__aeabi_dmul+0x24a>
 8000834:	ea81 0103 	eor.w	r1, r1, r3
 8000838:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800083c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000840:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000844:	f04f 0000 	mov.w	r0, #0
 8000848:	bd70      	pop	{r4, r5, r6, pc}
 800084a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800084e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000852:	bd70      	pop	{r4, r5, r6, pc}

08000854 <__aeabi_ddiv>:
 8000854:	b570      	push	{r4, r5, r6, lr}
 8000856:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800085a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800085e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000862:	bf1d      	ittte	ne
 8000864:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000868:	ea94 0f0c 	teqne	r4, ip
 800086c:	ea95 0f0c 	teqne	r5, ip
 8000870:	f000 f8a7 	bleq	80009c2 <__aeabi_ddiv+0x16e>
 8000874:	eba4 0405 	sub.w	r4, r4, r5
 8000878:	ea81 0e03 	eor.w	lr, r1, r3
 800087c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000880:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000884:	f000 8088 	beq.w	8000998 <__aeabi_ddiv+0x144>
 8000888:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800088c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000890:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000894:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000898:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800089c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008a4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008ac:	429d      	cmp	r5, r3
 80008ae:	bf08      	it	eq
 80008b0:	4296      	cmpeq	r6, r2
 80008b2:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008b6:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008ba:	d202      	bcs.n	80008c2 <__aeabi_ddiv+0x6e>
 80008bc:	085b      	lsrs	r3, r3, #1
 80008be:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c2:	1ab6      	subs	r6, r6, r2
 80008c4:	eb65 0503 	sbc.w	r5, r5, r3
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008d2:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000930:	ea55 0e06 	orrs.w	lr, r5, r6
 8000934:	d018      	beq.n	8000968 <__aeabi_ddiv+0x114>
 8000936:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800093a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800093e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000942:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000946:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800094a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800094e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000952:	d1c0      	bne.n	80008d6 <__aeabi_ddiv+0x82>
 8000954:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000958:	d10b      	bne.n	8000972 <__aeabi_ddiv+0x11e>
 800095a:	ea41 0100 	orr.w	r1, r1, r0
 800095e:	f04f 0000 	mov.w	r0, #0
 8000962:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8000966:	e7b6      	b.n	80008d6 <__aeabi_ddiv+0x82>
 8000968:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 800096c:	bf04      	itt	eq
 800096e:	4301      	orreq	r1, r0
 8000970:	2000      	moveq	r0, #0
 8000972:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000976:	bf88      	it	hi
 8000978:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800097c:	f63f aeaf 	bhi.w	80006de <__aeabi_dmul+0xde>
 8000980:	ebb5 0c03 	subs.w	ip, r5, r3
 8000984:	bf04      	itt	eq
 8000986:	ebb6 0c02 	subseq.w	ip, r6, r2
 800098a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800098e:	f150 0000 	adcs.w	r0, r0, #0
 8000992:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000996:	bd70      	pop	{r4, r5, r6, pc}
 8000998:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800099c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009a4:	bfc2      	ittt	gt
 80009a6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009aa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	popgt	{r4, r5, r6, pc}
 80009b0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009b4:	f04f 0e00 	mov.w	lr, #0
 80009b8:	3c01      	subs	r4, #1
 80009ba:	e690      	b.n	80006de <__aeabi_dmul+0xde>
 80009bc:	ea45 0e06 	orr.w	lr, r5, r6
 80009c0:	e68d      	b.n	80006de <__aeabi_dmul+0xde>
 80009c2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009c6:	ea94 0f0c 	teq	r4, ip
 80009ca:	bf08      	it	eq
 80009cc:	ea95 0f0c 	teqeq	r5, ip
 80009d0:	f43f af3b 	beq.w	800084a <__aeabi_dmul+0x24a>
 80009d4:	ea94 0f0c 	teq	r4, ip
 80009d8:	d10a      	bne.n	80009f0 <__aeabi_ddiv+0x19c>
 80009da:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009de:	f47f af34 	bne.w	800084a <__aeabi_dmul+0x24a>
 80009e2:	ea95 0f0c 	teq	r5, ip
 80009e6:	f47f af25 	bne.w	8000834 <__aeabi_dmul+0x234>
 80009ea:	4610      	mov	r0, r2
 80009ec:	4619      	mov	r1, r3
 80009ee:	e72c      	b.n	800084a <__aeabi_dmul+0x24a>
 80009f0:	ea95 0f0c 	teq	r5, ip
 80009f4:	d106      	bne.n	8000a04 <__aeabi_ddiv+0x1b0>
 80009f6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009fa:	f43f aefd 	beq.w	80007f8 <__aeabi_dmul+0x1f8>
 80009fe:	4610      	mov	r0, r2
 8000a00:	4619      	mov	r1, r3
 8000a02:	e722      	b.n	800084a <__aeabi_dmul+0x24a>
 8000a04:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a08:	bf18      	it	ne
 8000a0a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a0e:	f47f aec5 	bne.w	800079c <__aeabi_dmul+0x19c>
 8000a12:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a16:	f47f af0d 	bne.w	8000834 <__aeabi_dmul+0x234>
 8000a1a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a1e:	f47f aeeb 	bne.w	80007f8 <__aeabi_dmul+0x1f8>
 8000a22:	e712      	b.n	800084a <__aeabi_dmul+0x24a>

08000a24 <__gedf2>:
 8000a24:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a28:	e006      	b.n	8000a38 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__ledf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	e002      	b.n	8000a38 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__cmpdf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a44:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a48:	bf18      	it	ne
 8000a4a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a4e:	d01b      	beq.n	8000a88 <__cmpdf2+0x54>
 8000a50:	b001      	add	sp, #4
 8000a52:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a56:	bf0c      	ite	eq
 8000a58:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a5c:	ea91 0f03 	teqne	r1, r3
 8000a60:	bf02      	ittt	eq
 8000a62:	ea90 0f02 	teqeq	r0, r2
 8000a66:	2000      	moveq	r0, #0
 8000a68:	4770      	bxeq	lr
 8000a6a:	f110 0f00 	cmn.w	r0, #0
 8000a6e:	ea91 0f03 	teq	r1, r3
 8000a72:	bf58      	it	pl
 8000a74:	4299      	cmppl	r1, r3
 8000a76:	bf08      	it	eq
 8000a78:	4290      	cmpeq	r0, r2
 8000a7a:	bf2c      	ite	cs
 8000a7c:	17d8      	asrcs	r0, r3, #31
 8000a7e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a82:	f040 0001 	orr.w	r0, r0, #1
 8000a86:	4770      	bx	lr
 8000a88:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a8c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a90:	d102      	bne.n	8000a98 <__cmpdf2+0x64>
 8000a92:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a96:	d107      	bne.n	8000aa8 <__cmpdf2+0x74>
 8000a98:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a9c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa0:	d1d6      	bne.n	8000a50 <__cmpdf2+0x1c>
 8000aa2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aa6:	d0d3      	beq.n	8000a50 <__cmpdf2+0x1c>
 8000aa8:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aac:	4770      	bx	lr
 8000aae:	bf00      	nop

08000ab0 <__aeabi_cdrcmple>:
 8000ab0:	4684      	mov	ip, r0
 8000ab2:	4610      	mov	r0, r2
 8000ab4:	4662      	mov	r2, ip
 8000ab6:	468c      	mov	ip, r1
 8000ab8:	4619      	mov	r1, r3
 8000aba:	4663      	mov	r3, ip
 8000abc:	e000      	b.n	8000ac0 <__aeabi_cdcmpeq>
 8000abe:	bf00      	nop

08000ac0 <__aeabi_cdcmpeq>:
 8000ac0:	b501      	push	{r0, lr}
 8000ac2:	f7ff ffb7 	bl	8000a34 <__cmpdf2>
 8000ac6:	2800      	cmp	r0, #0
 8000ac8:	bf48      	it	mi
 8000aca:	f110 0f00 	cmnmi.w	r0, #0
 8000ace:	bd01      	pop	{r0, pc}

08000ad0 <__aeabi_dcmpeq>:
 8000ad0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad4:	f7ff fff4 	bl	8000ac0 <__aeabi_cdcmpeq>
 8000ad8:	bf0c      	ite	eq
 8000ada:	2001      	moveq	r0, #1
 8000adc:	2000      	movne	r0, #0
 8000ade:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae2:	bf00      	nop

08000ae4 <__aeabi_dcmplt>:
 8000ae4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae8:	f7ff ffea 	bl	8000ac0 <__aeabi_cdcmpeq>
 8000aec:	bf34      	ite	cc
 8000aee:	2001      	movcc	r0, #1
 8000af0:	2000      	movcs	r0, #0
 8000af2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af6:	bf00      	nop

08000af8 <__aeabi_dcmple>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff ffe0 	bl	8000ac0 <__aeabi_cdcmpeq>
 8000b00:	bf94      	ite	ls
 8000b02:	2001      	movls	r0, #1
 8000b04:	2000      	movhi	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmpge>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffce 	bl	8000ab0 <__aeabi_cdrcmple>
 8000b14:	bf94      	ite	ls
 8000b16:	2001      	movls	r0, #1
 8000b18:	2000      	movhi	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmpgt>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffc4 	bl	8000ab0 <__aeabi_cdrcmple>
 8000b28:	bf34      	ite	cc
 8000b2a:	2001      	movcc	r0, #1
 8000b2c:	2000      	movcs	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpun>:
 8000b34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b3c:	d102      	bne.n	8000b44 <__aeabi_dcmpun+0x10>
 8000b3e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b42:	d10a      	bne.n	8000b5a <__aeabi_dcmpun+0x26>
 8000b44:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b4c:	d102      	bne.n	8000b54 <__aeabi_dcmpun+0x20>
 8000b4e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b52:	d102      	bne.n	8000b5a <__aeabi_dcmpun+0x26>
 8000b54:	f04f 0000 	mov.w	r0, #0
 8000b58:	4770      	bx	lr
 8000b5a:	f04f 0001 	mov.w	r0, #1
 8000b5e:	4770      	bx	lr

08000b60 <__aeabi_d2iz>:
 8000b60:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b64:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b68:	d215      	bcs.n	8000b96 <__aeabi_d2iz+0x36>
 8000b6a:	d511      	bpl.n	8000b90 <__aeabi_d2iz+0x30>
 8000b6c:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b70:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b74:	d912      	bls.n	8000b9c <__aeabi_d2iz+0x3c>
 8000b76:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b7a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b7e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b82:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b86:	fa23 f002 	lsr.w	r0, r3, r2
 8000b8a:	bf18      	it	ne
 8000b8c:	4240      	negne	r0, r0
 8000b8e:	4770      	bx	lr
 8000b90:	f04f 0000 	mov.w	r0, #0
 8000b94:	4770      	bx	lr
 8000b96:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b9a:	d105      	bne.n	8000ba8 <__aeabi_d2iz+0x48>
 8000b9c:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba0:	bf08      	it	eq
 8000ba2:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	bf00      	nop

08000bb0 <__aeabi_uldivmod>:
 8000bb0:	b953      	cbnz	r3, 8000bc8 <__aeabi_uldivmod+0x18>
 8000bb2:	b94a      	cbnz	r2, 8000bc8 <__aeabi_uldivmod+0x18>
 8000bb4:	2900      	cmp	r1, #0
 8000bb6:	bf08      	it	eq
 8000bb8:	2800      	cmpeq	r0, #0
 8000bba:	bf1c      	itt	ne
 8000bbc:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000bc0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000bc4:	f000 b9b0 	b.w	8000f28 <__aeabi_idiv0>
 8000bc8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bcc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd0:	f000 f806 	bl	8000be0 <__udivmoddi4>
 8000bd4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bdc:	b004      	add	sp, #16
 8000bde:	4770      	bx	lr

08000be0 <__udivmoddi4>:
 8000be0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000be4:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8000be6:	4688      	mov	r8, r1
 8000be8:	4604      	mov	r4, r0
 8000bea:	468e      	mov	lr, r1
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d14a      	bne.n	8000c86 <__udivmoddi4+0xa6>
 8000bf0:	428a      	cmp	r2, r1
 8000bf2:	4617      	mov	r7, r2
 8000bf4:	d95f      	bls.n	8000cb6 <__udivmoddi4+0xd6>
 8000bf6:	fab2 f682 	clz	r6, r2
 8000bfa:	b14e      	cbz	r6, 8000c10 <__udivmoddi4+0x30>
 8000bfc:	f1c6 0320 	rsb	r3, r6, #32
 8000c00:	fa01 fe06 	lsl.w	lr, r1, r6
 8000c04:	40b7      	lsls	r7, r6
 8000c06:	40b4      	lsls	r4, r6
 8000c08:	fa20 f303 	lsr.w	r3, r0, r3
 8000c0c:	ea43 0e0e 	orr.w	lr, r3, lr
 8000c10:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c14:	fa1f fc87 	uxth.w	ip, r7
 8000c18:	0c23      	lsrs	r3, r4, #16
 8000c1a:	fbbe f1f8 	udiv	r1, lr, r8
 8000c1e:	fb08 ee11 	mls	lr, r8, r1, lr
 8000c22:	fb01 f20c 	mul.w	r2, r1, ip
 8000c26:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 8000c2a:	429a      	cmp	r2, r3
 8000c2c:	d907      	bls.n	8000c3e <__udivmoddi4+0x5e>
 8000c2e:	18fb      	adds	r3, r7, r3
 8000c30:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000c34:	d202      	bcs.n	8000c3c <__udivmoddi4+0x5c>
 8000c36:	429a      	cmp	r2, r3
 8000c38:	f200 8154 	bhi.w	8000ee4 <__udivmoddi4+0x304>
 8000c3c:	4601      	mov	r1, r0
 8000c3e:	1a9b      	subs	r3, r3, r2
 8000c40:	b2a2      	uxth	r2, r4
 8000c42:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c46:	fb08 3310 	mls	r3, r8, r0, r3
 8000c4a:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c4e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8000c52:	4594      	cmp	ip, r2
 8000c54:	d90b      	bls.n	8000c6e <__udivmoddi4+0x8e>
 8000c56:	18ba      	adds	r2, r7, r2
 8000c58:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8000c5c:	bf2c      	ite	cs
 8000c5e:	2401      	movcs	r4, #1
 8000c60:	2400      	movcc	r4, #0
 8000c62:	4594      	cmp	ip, r2
 8000c64:	d902      	bls.n	8000c6c <__udivmoddi4+0x8c>
 8000c66:	2c00      	cmp	r4, #0
 8000c68:	f000 813f 	beq.w	8000eea <__udivmoddi4+0x30a>
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c72:	eba2 020c 	sub.w	r2, r2, ip
 8000c76:	2100      	movs	r1, #0
 8000c78:	b11d      	cbz	r5, 8000c82 <__udivmoddi4+0xa2>
 8000c7a:	40f2      	lsrs	r2, r6
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	e9c5 2300 	strd	r2, r3, [r5]
 8000c82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000c86:	428b      	cmp	r3, r1
 8000c88:	d905      	bls.n	8000c96 <__udivmoddi4+0xb6>
 8000c8a:	b10d      	cbz	r5, 8000c90 <__udivmoddi4+0xb0>
 8000c8c:	e9c5 0100 	strd	r0, r1, [r5]
 8000c90:	2100      	movs	r1, #0
 8000c92:	4608      	mov	r0, r1
 8000c94:	e7f5      	b.n	8000c82 <__udivmoddi4+0xa2>
 8000c96:	fab3 f183 	clz	r1, r3
 8000c9a:	2900      	cmp	r1, #0
 8000c9c:	d14e      	bne.n	8000d3c <__udivmoddi4+0x15c>
 8000c9e:	4543      	cmp	r3, r8
 8000ca0:	f0c0 8112 	bcc.w	8000ec8 <__udivmoddi4+0x2e8>
 8000ca4:	4282      	cmp	r2, r0
 8000ca6:	f240 810f 	bls.w	8000ec8 <__udivmoddi4+0x2e8>
 8000caa:	4608      	mov	r0, r1
 8000cac:	2d00      	cmp	r5, #0
 8000cae:	d0e8      	beq.n	8000c82 <__udivmoddi4+0xa2>
 8000cb0:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cb4:	e7e5      	b.n	8000c82 <__udivmoddi4+0xa2>
 8000cb6:	2a00      	cmp	r2, #0
 8000cb8:	f000 80ac 	beq.w	8000e14 <__udivmoddi4+0x234>
 8000cbc:	fab2 f682 	clz	r6, r2
 8000cc0:	2e00      	cmp	r6, #0
 8000cc2:	f040 80bb 	bne.w	8000e3c <__udivmoddi4+0x25c>
 8000cc6:	1a8b      	subs	r3, r1, r2
 8000cc8:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8000ccc:	b2bc      	uxth	r4, r7
 8000cce:	2101      	movs	r1, #1
 8000cd0:	0c02      	lsrs	r2, r0, #16
 8000cd2:	b280      	uxth	r0, r0
 8000cd4:	fbb3 fcfe 	udiv	ip, r3, lr
 8000cd8:	fb0e 331c 	mls	r3, lr, ip, r3
 8000cdc:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
 8000ce0:	fb04 f20c 	mul.w	r2, r4, ip
 8000ce4:	429a      	cmp	r2, r3
 8000ce6:	d90e      	bls.n	8000d06 <__udivmoddi4+0x126>
 8000ce8:	18fb      	adds	r3, r7, r3
 8000cea:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 8000cee:	bf2c      	ite	cs
 8000cf0:	f04f 0901 	movcs.w	r9, #1
 8000cf4:	f04f 0900 	movcc.w	r9, #0
 8000cf8:	429a      	cmp	r2, r3
 8000cfa:	d903      	bls.n	8000d04 <__udivmoddi4+0x124>
 8000cfc:	f1b9 0f00 	cmp.w	r9, #0
 8000d00:	f000 80ec 	beq.w	8000edc <__udivmoddi4+0x2fc>
 8000d04:	46c4      	mov	ip, r8
 8000d06:	1a9b      	subs	r3, r3, r2
 8000d08:	fbb3 f8fe 	udiv	r8, r3, lr
 8000d0c:	fb0e 3318 	mls	r3, lr, r8, r3
 8000d10:	fb04 f408 	mul.w	r4, r4, r8
 8000d14:	ea40 4203 	orr.w	r2, r0, r3, lsl #16
 8000d18:	4294      	cmp	r4, r2
 8000d1a:	d90b      	bls.n	8000d34 <__udivmoddi4+0x154>
 8000d1c:	18ba      	adds	r2, r7, r2
 8000d1e:	f108 33ff 	add.w	r3, r8, #4294967295	@ 0xffffffff
 8000d22:	bf2c      	ite	cs
 8000d24:	2001      	movcs	r0, #1
 8000d26:	2000      	movcc	r0, #0
 8000d28:	4294      	cmp	r4, r2
 8000d2a:	d902      	bls.n	8000d32 <__udivmoddi4+0x152>
 8000d2c:	2800      	cmp	r0, #0
 8000d2e:	f000 80d1 	beq.w	8000ed4 <__udivmoddi4+0x2f4>
 8000d32:	4698      	mov	r8, r3
 8000d34:	1b12      	subs	r2, r2, r4
 8000d36:	ea48 400c 	orr.w	r0, r8, ip, lsl #16
 8000d3a:	e79d      	b.n	8000c78 <__udivmoddi4+0x98>
 8000d3c:	f1c1 0620 	rsb	r6, r1, #32
 8000d40:	408b      	lsls	r3, r1
 8000d42:	fa08 f401 	lsl.w	r4, r8, r1
 8000d46:	fa00 f901 	lsl.w	r9, r0, r1
 8000d4a:	fa22 f706 	lsr.w	r7, r2, r6
 8000d4e:	fa28 f806 	lsr.w	r8, r8, r6
 8000d52:	408a      	lsls	r2, r1
 8000d54:	431f      	orrs	r7, r3
 8000d56:	fa20 f306 	lsr.w	r3, r0, r6
 8000d5a:	0c38      	lsrs	r0, r7, #16
 8000d5c:	4323      	orrs	r3, r4
 8000d5e:	fa1f fc87 	uxth.w	ip, r7
 8000d62:	0c1c      	lsrs	r4, r3, #16
 8000d64:	fbb8 fef0 	udiv	lr, r8, r0
 8000d68:	fb00 881e 	mls	r8, r0, lr, r8
 8000d6c:	ea44 4408 	orr.w	r4, r4, r8, lsl #16
 8000d70:	fb0e f80c 	mul.w	r8, lr, ip
 8000d74:	45a0      	cmp	r8, r4
 8000d76:	d90e      	bls.n	8000d96 <__udivmoddi4+0x1b6>
 8000d78:	193c      	adds	r4, r7, r4
 8000d7a:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000d7e:	bf2c      	ite	cs
 8000d80:	f04f 0b01 	movcs.w	fp, #1
 8000d84:	f04f 0b00 	movcc.w	fp, #0
 8000d88:	45a0      	cmp	r8, r4
 8000d8a:	d903      	bls.n	8000d94 <__udivmoddi4+0x1b4>
 8000d8c:	f1bb 0f00 	cmp.w	fp, #0
 8000d90:	f000 80b8 	beq.w	8000f04 <__udivmoddi4+0x324>
 8000d94:	46d6      	mov	lr, sl
 8000d96:	eba4 0408 	sub.w	r4, r4, r8
 8000d9a:	fa1f f883 	uxth.w	r8, r3
 8000d9e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000da2:	fb00 4413 	mls	r4, r0, r3, r4
 8000da6:	fb03 fc0c 	mul.w	ip, r3, ip
 8000daa:	ea48 4404 	orr.w	r4, r8, r4, lsl #16
 8000dae:	45a4      	cmp	ip, r4
 8000db0:	d90e      	bls.n	8000dd0 <__udivmoddi4+0x1f0>
 8000db2:	193c      	adds	r4, r7, r4
 8000db4:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000db8:	bf2c      	ite	cs
 8000dba:	f04f 0801 	movcs.w	r8, #1
 8000dbe:	f04f 0800 	movcc.w	r8, #0
 8000dc2:	45a4      	cmp	ip, r4
 8000dc4:	d903      	bls.n	8000dce <__udivmoddi4+0x1ee>
 8000dc6:	f1b8 0f00 	cmp.w	r8, #0
 8000dca:	f000 809f 	beq.w	8000f0c <__udivmoddi4+0x32c>
 8000dce:	4603      	mov	r3, r0
 8000dd0:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dd4:	eba4 040c 	sub.w	r4, r4, ip
 8000dd8:	fba0 ec02 	umull	lr, ip, r0, r2
 8000ddc:	4564      	cmp	r4, ip
 8000dde:	4673      	mov	r3, lr
 8000de0:	46e0      	mov	r8, ip
 8000de2:	d302      	bcc.n	8000dea <__udivmoddi4+0x20a>
 8000de4:	d107      	bne.n	8000df6 <__udivmoddi4+0x216>
 8000de6:	45f1      	cmp	r9, lr
 8000de8:	d205      	bcs.n	8000df6 <__udivmoddi4+0x216>
 8000dea:	ebbe 0302 	subs.w	r3, lr, r2
 8000dee:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000df2:	3801      	subs	r0, #1
 8000df4:	46e0      	mov	r8, ip
 8000df6:	b15d      	cbz	r5, 8000e10 <__udivmoddi4+0x230>
 8000df8:	ebb9 0203 	subs.w	r2, r9, r3
 8000dfc:	eb64 0408 	sbc.w	r4, r4, r8
 8000e00:	fa04 f606 	lsl.w	r6, r4, r6
 8000e04:	fa22 f301 	lsr.w	r3, r2, r1
 8000e08:	40cc      	lsrs	r4, r1
 8000e0a:	431e      	orrs	r6, r3
 8000e0c:	e9c5 6400 	strd	r6, r4, [r5]
 8000e10:	2100      	movs	r1, #0
 8000e12:	e736      	b.n	8000c82 <__udivmoddi4+0xa2>
 8000e14:	fbb1 fcf2 	udiv	ip, r1, r2
 8000e18:	0c01      	lsrs	r1, r0, #16
 8000e1a:	4614      	mov	r4, r2
 8000e1c:	b280      	uxth	r0, r0
 8000e1e:	4696      	mov	lr, r2
 8000e20:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
 8000e24:	2620      	movs	r6, #32
 8000e26:	4690      	mov	r8, r2
 8000e28:	ea40 4301 	orr.w	r3, r0, r1, lsl #16
 8000e2c:	4610      	mov	r0, r2
 8000e2e:	fbb1 f1f2 	udiv	r1, r1, r2
 8000e32:	eba3 0308 	sub.w	r3, r3, r8
 8000e36:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000e3a:	e74b      	b.n	8000cd4 <__udivmoddi4+0xf4>
 8000e3c:	40b7      	lsls	r7, r6
 8000e3e:	f1c6 0320 	rsb	r3, r6, #32
 8000e42:	fa01 f206 	lsl.w	r2, r1, r6
 8000e46:	fa21 f803 	lsr.w	r8, r1, r3
 8000e4a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e4e:	fa20 f303 	lsr.w	r3, r0, r3
 8000e52:	b2bc      	uxth	r4, r7
 8000e54:	40b0      	lsls	r0, r6
 8000e56:	4313      	orrs	r3, r2
 8000e58:	0c02      	lsrs	r2, r0, #16
 8000e5a:	0c19      	lsrs	r1, r3, #16
 8000e5c:	b280      	uxth	r0, r0
 8000e5e:	fbb8 f9fe 	udiv	r9, r8, lr
 8000e62:	fb0e 8819 	mls	r8, lr, r9, r8
 8000e66:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
 8000e6a:	fb09 f804 	mul.w	r8, r9, r4
 8000e6e:	4588      	cmp	r8, r1
 8000e70:	d951      	bls.n	8000f16 <__udivmoddi4+0x336>
 8000e72:	1879      	adds	r1, r7, r1
 8000e74:	f109 3cff 	add.w	ip, r9, #4294967295	@ 0xffffffff
 8000e78:	bf2c      	ite	cs
 8000e7a:	f04f 0a01 	movcs.w	sl, #1
 8000e7e:	f04f 0a00 	movcc.w	sl, #0
 8000e82:	4588      	cmp	r8, r1
 8000e84:	d902      	bls.n	8000e8c <__udivmoddi4+0x2ac>
 8000e86:	f1ba 0f00 	cmp.w	sl, #0
 8000e8a:	d031      	beq.n	8000ef0 <__udivmoddi4+0x310>
 8000e8c:	eba1 0108 	sub.w	r1, r1, r8
 8000e90:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e94:	fb09 f804 	mul.w	r8, r9, r4
 8000e98:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e9c:	b29b      	uxth	r3, r3
 8000e9e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ea2:	4543      	cmp	r3, r8
 8000ea4:	d235      	bcs.n	8000f12 <__udivmoddi4+0x332>
 8000ea6:	18fb      	adds	r3, r7, r3
 8000ea8:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000eac:	bf2c      	ite	cs
 8000eae:	f04f 0a01 	movcs.w	sl, #1
 8000eb2:	f04f 0a00 	movcc.w	sl, #0
 8000eb6:	4543      	cmp	r3, r8
 8000eb8:	d2bb      	bcs.n	8000e32 <__udivmoddi4+0x252>
 8000eba:	f1ba 0f00 	cmp.w	sl, #0
 8000ebe:	d1b8      	bne.n	8000e32 <__udivmoddi4+0x252>
 8000ec0:	f1a9 0102 	sub.w	r1, r9, #2
 8000ec4:	443b      	add	r3, r7
 8000ec6:	e7b4      	b.n	8000e32 <__udivmoddi4+0x252>
 8000ec8:	1a84      	subs	r4, r0, r2
 8000eca:	eb68 0203 	sbc.w	r2, r8, r3
 8000ece:	2001      	movs	r0, #1
 8000ed0:	4696      	mov	lr, r2
 8000ed2:	e6eb      	b.n	8000cac <__udivmoddi4+0xcc>
 8000ed4:	443a      	add	r2, r7
 8000ed6:	f1a8 0802 	sub.w	r8, r8, #2
 8000eda:	e72b      	b.n	8000d34 <__udivmoddi4+0x154>
 8000edc:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ee0:	443b      	add	r3, r7
 8000ee2:	e710      	b.n	8000d06 <__udivmoddi4+0x126>
 8000ee4:	3902      	subs	r1, #2
 8000ee6:	443b      	add	r3, r7
 8000ee8:	e6a9      	b.n	8000c3e <__udivmoddi4+0x5e>
 8000eea:	443a      	add	r2, r7
 8000eec:	3802      	subs	r0, #2
 8000eee:	e6be      	b.n	8000c6e <__udivmoddi4+0x8e>
 8000ef0:	eba7 0808 	sub.w	r8, r7, r8
 8000ef4:	f1a9 0c02 	sub.w	ip, r9, #2
 8000ef8:	4441      	add	r1, r8
 8000efa:	fbb1 f9fe 	udiv	r9, r1, lr
 8000efe:	fb09 f804 	mul.w	r8, r9, r4
 8000f02:	e7c9      	b.n	8000e98 <__udivmoddi4+0x2b8>
 8000f04:	f1ae 0e02 	sub.w	lr, lr, #2
 8000f08:	443c      	add	r4, r7
 8000f0a:	e744      	b.n	8000d96 <__udivmoddi4+0x1b6>
 8000f0c:	3b02      	subs	r3, #2
 8000f0e:	443c      	add	r4, r7
 8000f10:	e75e      	b.n	8000dd0 <__udivmoddi4+0x1f0>
 8000f12:	4649      	mov	r1, r9
 8000f14:	e78d      	b.n	8000e32 <__udivmoddi4+0x252>
 8000f16:	eba1 0108 	sub.w	r1, r1, r8
 8000f1a:	46cc      	mov	ip, r9
 8000f1c:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f20:	fb09 f804 	mul.w	r8, r9, r4
 8000f24:	e7b8      	b.n	8000e98 <__udivmoddi4+0x2b8>
 8000f26:	bf00      	nop

08000f28 <__aeabi_idiv0>:
 8000f28:	4770      	bx	lr
 8000f2a:	bf00      	nop

08000f2c <CST816T_Init>:
#include <stdbool.h> // For true/false

I2C_HandleTypeDef *hi2c_cst816t;
volatile bool touch_event_pending = false; // Flag for touch interrupt

void CST816T_Init(I2C_HandleTypeDef *hi2c) {
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b084      	sub	sp, #16
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
    hi2c_cst816t = hi2c;
 8000f34:	4a0d      	ldr	r2, [pc, #52]	@ (8000f6c <CST816T_Init+0x40>)
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	6013      	str	r3, [r2, #0]

    // --- Hardware Reset for CST816T ---
	HAL_GPIO_WritePin(CST816T_RST_GPIO_Port, CST816T_RST_Pin, GPIO_PIN_RESET); // Pull low to reset
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	2104      	movs	r1, #4
 8000f3e:	480c      	ldr	r0, [pc, #48]	@ (8000f70 <CST816T_Init+0x44>)
 8000f40:	f001 fff0 	bl	8002f24 <HAL_GPIO_WritePin>
	HAL_Delay(10); // Hold low for a short period
 8000f44:	200a      	movs	r0, #10
 8000f46:	f001 fbff 	bl	8002748 <HAL_Delay>
	HAL_GPIO_WritePin(CST816T_RST_GPIO_Port, CST816T_RST_Pin, GPIO_PIN_SET);   // Pull high for normal operation
 8000f4a:	2201      	movs	r2, #1
 8000f4c:	2104      	movs	r1, #4
 8000f4e:	4808      	ldr	r0, [pc, #32]	@ (8000f70 <CST816T_Init+0x44>)
 8000f50:	f001 ffe8 	bl	8002f24 <HAL_GPIO_WritePin>
	HAL_Delay(100); // Wait for the touch controller to come out of reset
 8000f54:	2064      	movs	r0, #100	@ 0x64
 8000f56:	f001 fbf7 	bl	8002748 <HAL_Delay>
    // This is handled in the .ioc file, but ensure it's correct.

    // No specific initialization commands needed for CST816T typically,
    // as it wakes up and starts reporting automatically.
    // Just verify communication.
    uint8_t chip_id = CST816T_WhoAmI();
 8000f5a:	f000 f87f 	bl	800105c <CST816T_WhoAmI>
 8000f5e:	4603      	mov	r3, r0
 8000f60:	73fb      	strb	r3, [r7, #15]
        // printf("CST816T found, Chip ID: 0x%02X\r\n", chip_id);
    } else {
        // Error: Chip ID mismatch
        // printf("CST816T not found or incorrect Chip ID: 0x%02X\r\n", chip_id);
    }
}
 8000f62:	bf00      	nop
 8000f64:	3710      	adds	r7, #16
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bd80      	pop	{r7, pc}
 8000f6a:	bf00      	nop
 8000f6c:	2000020c 	.word	0x2000020c
 8000f70:	42020800 	.word	0x42020800

08000f74 <CST816T_ReadTouch>:

uint8_t CST816T_ReadTouch(TS_State_t *ts_state) {
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b08c      	sub	sp, #48	@ 0x30
 8000f78:	af04      	add	r7, sp, #16
 8000f7a:	6078      	str	r0, [r7, #4]
    uint8_t data[6]; // To read Gesture ID, Finger Num, X/Y coords
    HAL_StatusTypeDef status;

    // Read multiple registers starting from GESTURE_ID (0x01)
    status = HAL_I2C_Mem_Read(hi2c_cst816t, CST816T_I2C_ADDR_READ, CST816T_GESTURE_ID, I2C_MEMADD_SIZE_8BIT, data, 6, HAL_MAX_DELAY);
 8000f7c:	4b36      	ldr	r3, [pc, #216]	@ (8001058 <CST816T_ReadTouch+0xe4>)
 8000f7e:	6818      	ldr	r0, [r3, #0]
 8000f80:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000f84:	9302      	str	r3, [sp, #8]
 8000f86:	2306      	movs	r3, #6
 8000f88:	9301      	str	r3, [sp, #4]
 8000f8a:	f107 030c 	add.w	r3, r7, #12
 8000f8e:	9300      	str	r3, [sp, #0]
 8000f90:	2301      	movs	r3, #1
 8000f92:	2201      	movs	r2, #1
 8000f94:	21bb      	movs	r1, #187	@ 0xbb
 8000f96:	f002 f8b5 	bl	8003104 <HAL_I2C_Mem_Read>
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	77fb      	strb	r3, [r7, #31]

    if (status == HAL_OK) {
 8000f9e:	7ffb      	ldrb	r3, [r7, #31]
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d151      	bne.n	8001048 <CST816T_ReadTouch+0xd4>
        ts_state->gesture_id = data[0];
 8000fa4:	7b3a      	ldrb	r2, [r7, #12]
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	719a      	strb	r2, [r3, #6]
        ts_state->touch_detected = (data[1] & 0x0F) > 0; // Finger Num is lower 4 bits of data[1]
 8000faa:	7b7b      	ldrb	r3, [r7, #13]
 8000fac:	f003 030f 	and.w	r3, r3, #15
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	bfcc      	ite	gt
 8000fb4:	2301      	movgt	r3, #1
 8000fb6:	2300      	movle	r3, #0
 8000fb8:	b2db      	uxtb	r3, r3
 8000fba:	461a      	mov	r2, r3
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	701a      	strb	r2, [r3, #0]

        if (ts_state->touch_detected) {
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	781b      	ldrb	r3, [r3, #0]
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d03c      	beq.n	8001042 <CST816T_ReadTouch+0xce>
            ts_state->x = ((data[2] & 0x0F) << 8) | data[3]; // X coords from data[2] (4 bits) and data[3] (8 bits)
 8000fc8:	7bbb      	ldrb	r3, [r7, #14]
 8000fca:	b21b      	sxth	r3, r3
 8000fcc:	021b      	lsls	r3, r3, #8
 8000fce:	b21b      	sxth	r3, r3
 8000fd0:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8000fd4:	b21a      	sxth	r2, r3
 8000fd6:	7bfb      	ldrb	r3, [r7, #15]
 8000fd8:	b21b      	sxth	r3, r3
 8000fda:	4313      	orrs	r3, r2
 8000fdc:	b21b      	sxth	r3, r3
 8000fde:	b29a      	uxth	r2, r3
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	805a      	strh	r2, [r3, #2]
            ts_state->y = ((data[4] & 0x0F) << 8) | data[5]; // Y coords from data[4] (4 bits) and data[5] (8 bits)
 8000fe4:	7c3b      	ldrb	r3, [r7, #16]
 8000fe6:	b21b      	sxth	r3, r3
 8000fe8:	021b      	lsls	r3, r3, #8
 8000fea:	b21b      	sxth	r3, r3
 8000fec:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8000ff0:	b21a      	sxth	r2, r3
 8000ff2:	7c7b      	ldrb	r3, [r7, #17]
 8000ff4:	b21b      	sxth	r3, r3
 8000ff6:	4313      	orrs	r3, r2
 8000ff8:	b21b      	sxth	r3, r3
 8000ffa:	b29a      	uxth	r2, r3
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	809a      	strh	r2, [r3, #4]
            // For a 170x320 portrait display:
            // X-axis mapping: 0-239 (touch) -> 0-169 (display) with a 35 pixel offset on the display.
            // Y-axis mapping: 0-279 (touch) -> 0-319 (display). Often Y is inverted.
            //
            // Corrected mapping often looks like:
            int raw_x = ts_state->x;
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	885b      	ldrh	r3, [r3, #2]
 8001004:	61bb      	str	r3, [r7, #24]
            int raw_y = ts_state->y;
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	889b      	ldrh	r3, [r3, #4]
 800100a:	617b      	str	r3, [r7, #20]
            // Example mapping for 1.69" 170x320:
            // Assuming touch reports 240x280 (width x height)
            // And display is 170x320 (width x height)
            // Usually, the X-axis of the touch is shifted by 35 or 40 pixels.
            // And Y-axis is inverted.
            ts_state->x = (raw_x * ST7789_WIDTH) / 240; // Scale X
 800100c:	69bb      	ldr	r3, [r7, #24]
 800100e:	b29a      	uxth	r2, r3
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	805a      	strh	r2, [r3, #2]
            ts_state->y = ST7789_HEIGHT - (raw_y * ST7789_HEIGHT) / 280; // Scale Y and invert
 8001014:	697b      	ldr	r3, [r7, #20]
 8001016:	b29b      	uxth	r3, r3
 8001018:	f5c3 738c 	rsb	r3, r3, #280	@ 0x118
 800101c:	b29a      	uxth	r2, r3
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	809a      	strh	r2, [r3, #4]
            // For now, let's just use raw scaled coordinates.
            // You will almost certainly need to adjust these `ts_state->x` and `ts_state->y` lines
            // after initial testing to align touch with display.

            // Ensure coordinates are within display bounds
            if (ts_state->x >= ST7789_WIDTH) ts_state->x = ST7789_WIDTH - 1;
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	885b      	ldrh	r3, [r3, #2]
 8001026:	2bef      	cmp	r3, #239	@ 0xef
 8001028:	d902      	bls.n	8001030 <CST816T_ReadTouch+0xbc>
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	22ef      	movs	r2, #239	@ 0xef
 800102e:	805a      	strh	r2, [r3, #2]
            if (ts_state->y >= ST7789_HEIGHT) ts_state->y = ST7789_HEIGHT - 1;
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	889b      	ldrh	r3, [r3, #4]
 8001034:	f5b3 7f8c 	cmp.w	r3, #280	@ 0x118
 8001038:	d303      	bcc.n	8001042 <CST816T_ReadTouch+0xce>
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	f240 1217 	movw	r2, #279	@ 0x117
 8001040:	809a      	strh	r2, [r3, #4]
        }
        return ts_state->touch_detected;
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	781b      	ldrb	r3, [r3, #0]
 8001046:	e003      	b.n	8001050 <CST816T_ReadTouch+0xdc>
    } else {
        ts_state->touch_detected = 0;
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	2200      	movs	r2, #0
 800104c:	701a      	strb	r2, [r3, #0]
        return 0; // Error or no touch
 800104e:	2300      	movs	r3, #0
    }
}
 8001050:	4618      	mov	r0, r3
 8001052:	3720      	adds	r7, #32
 8001054:	46bd      	mov	sp, r7
 8001056:	bd80      	pop	{r7, pc}
 8001058:	2000020c 	.word	0x2000020c

0800105c <CST816T_WhoAmI>:

uint8_t CST816T_WhoAmI(void) {
 800105c:	b580      	push	{r7, lr}
 800105e:	b086      	sub	sp, #24
 8001060:	af04      	add	r7, sp, #16
    uint8_t chip_id = 0;
 8001062:	2300      	movs	r3, #0
 8001064:	71bb      	strb	r3, [r7, #6]
    HAL_StatusTypeDef status = HAL_I2C_Mem_Read(hi2c_cst816t, CST816T_I2C_ADDR_READ, CST816T_CHIP_ID, I2C_MEMADD_SIZE_8BIT, &chip_id, 1, HAL_MAX_DELAY);
 8001066:	4b0d      	ldr	r3, [pc, #52]	@ (800109c <CST816T_WhoAmI+0x40>)
 8001068:	6818      	ldr	r0, [r3, #0]
 800106a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800106e:	9302      	str	r3, [sp, #8]
 8001070:	2301      	movs	r3, #1
 8001072:	9301      	str	r3, [sp, #4]
 8001074:	1dbb      	adds	r3, r7, #6
 8001076:	9300      	str	r3, [sp, #0]
 8001078:	2301      	movs	r3, #1
 800107a:	22a7      	movs	r2, #167	@ 0xa7
 800107c:	21bb      	movs	r1, #187	@ 0xbb
 800107e:	f002 f841 	bl	8003104 <HAL_I2C_Mem_Read>
 8001082:	4603      	mov	r3, r0
 8001084:	71fb      	strb	r3, [r7, #7]
    if (status == HAL_OK) {
 8001086:	79fb      	ldrb	r3, [r7, #7]
 8001088:	2b00      	cmp	r3, #0
 800108a:	d101      	bne.n	8001090 <CST816T_WhoAmI+0x34>
        return chip_id;
 800108c:	79bb      	ldrb	r3, [r7, #6]
 800108e:	e000      	b.n	8001092 <CST816T_WhoAmI+0x36>
    }
    return 0x00; // Error
 8001090:	2300      	movs	r3, #0
}
 8001092:	4618      	mov	r0, r3
 8001094:	3708      	adds	r7, #8
 8001096:	46bd      	mov	sp, r7
 8001098:	bd80      	pop	{r7, pc}
 800109a:	bf00      	nop
 800109c:	2000020c 	.word	0x2000020c

080010a0 <MX_GPIO_Init>:
     PA13 (JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PA14 (JTCK/SWCLK)   ------> DEBUG_JTCK-SWCLK
     PB3 (JTDO/TRACESWO)   ------> DEBUG_JTDO-SWO
*/
void MX_GPIO_Init(void)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b088      	sub	sp, #32
 80010a4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010a6:	f107 030c 	add.w	r3, r7, #12
 80010aa:	2200      	movs	r2, #0
 80010ac:	601a      	str	r2, [r3, #0]
 80010ae:	605a      	str	r2, [r3, #4]
 80010b0:	609a      	str	r2, [r3, #8]
 80010b2:	60da      	str	r2, [r3, #12]
 80010b4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010b6:	4b44      	ldr	r3, [pc, #272]	@ (80011c8 <MX_GPIO_Init+0x128>)
 80010b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80010bc:	4a42      	ldr	r2, [pc, #264]	@ (80011c8 <MX_GPIO_Init+0x128>)
 80010be:	f043 0304 	orr.w	r3, r3, #4
 80010c2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80010c6:	4b40      	ldr	r3, [pc, #256]	@ (80011c8 <MX_GPIO_Init+0x128>)
 80010c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80010cc:	f003 0304 	and.w	r3, r3, #4
 80010d0:	60bb      	str	r3, [r7, #8]
 80010d2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010d4:	4b3c      	ldr	r3, [pc, #240]	@ (80011c8 <MX_GPIO_Init+0x128>)
 80010d6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80010da:	4a3b      	ldr	r2, [pc, #236]	@ (80011c8 <MX_GPIO_Init+0x128>)
 80010dc:	f043 0301 	orr.w	r3, r3, #1
 80010e0:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80010e4:	4b38      	ldr	r3, [pc, #224]	@ (80011c8 <MX_GPIO_Init+0x128>)
 80010e6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80010ea:	f003 0301 	and.w	r3, r3, #1
 80010ee:	607b      	str	r3, [r7, #4]
 80010f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010f2:	4b35      	ldr	r3, [pc, #212]	@ (80011c8 <MX_GPIO_Init+0x128>)
 80010f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80010f8:	4a33      	ldr	r2, [pc, #204]	@ (80011c8 <MX_GPIO_Init+0x128>)
 80010fa:	f043 0302 	orr.w	r3, r3, #2
 80010fe:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001102:	4b31      	ldr	r3, [pc, #196]	@ (80011c8 <MX_GPIO_Init+0x128>)
 8001104:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001108:	f003 0302 	and.w	r3, r3, #2
 800110c:	603b      	str	r3, [r7, #0]
 800110e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RST_GPIO_Port, RST_Pin, GPIO_PIN_RESET);
 8001110:	2200      	movs	r2, #0
 8001112:	2101      	movs	r1, #1
 8001114:	482d      	ldr	r0, [pc, #180]	@ (80011cc <MX_GPIO_Init+0x12c>)
 8001116:	f001 ff05 	bl	8002f24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TP_RST_GPIO_Port, TP_RST_Pin, GPIO_PIN_SET);
 800111a:	2201      	movs	r2, #1
 800111c:	2104      	movs	r1, #4
 800111e:	482b      	ldr	r0, [pc, #172]	@ (80011cc <MX_GPIO_Init+0x12c>)
 8001120:	f001 ff00 	bl	8002f24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8001124:	2201      	movs	r2, #1
 8001126:	2110      	movs	r1, #16
 8001128:	4829      	ldr	r0, [pc, #164]	@ (80011d0 <MX_GPIO_Init+0x130>)
 800112a:	f001 fefb 	bl	8002f24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DC_GPIO_Port, DC_Pin, GPIO_PIN_RESET);
 800112e:	2200      	movs	r2, #0
 8001130:	2101      	movs	r1, #1
 8001132:	4828      	ldr	r0, [pc, #160]	@ (80011d4 <MX_GPIO_Init+0x134>)
 8001134:	f001 fef6 	bl	8002f24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BL_GPIO_Port, BL_Pin, GPIO_PIN_SET);
 8001138:	2201      	movs	r2, #1
 800113a:	2102      	movs	r1, #2
 800113c:	4825      	ldr	r0, [pc, #148]	@ (80011d4 <MX_GPIO_Init+0x134>)
 800113e:	f001 fef1 	bl	8002f24 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : RST_Pin TP_RST_Pin */
  GPIO_InitStruct.Pin = RST_Pin|TP_RST_Pin;
 8001142:	2305      	movs	r3, #5
 8001144:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001146:	2301      	movs	r3, #1
 8001148:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800114a:	2300      	movs	r3, #0
 800114c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800114e:	2303      	movs	r3, #3
 8001150:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001152:	f107 030c 	add.w	r3, r7, #12
 8001156:	4619      	mov	r1, r3
 8001158:	481c      	ldr	r0, [pc, #112]	@ (80011cc <MX_GPIO_Init+0x12c>)
 800115a:	f001 fd03 	bl	8002b64 <HAL_GPIO_Init>

  /*Configure GPIO pin : INT_Pin */
  GPIO_InitStruct.Pin = INT_Pin;
 800115e:	2302      	movs	r3, #2
 8001160:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001162:	4b1d      	ldr	r3, [pc, #116]	@ (80011d8 <MX_GPIO_Init+0x138>)
 8001164:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001166:	2301      	movs	r3, #1
 8001168:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(INT_GPIO_Port, &GPIO_InitStruct);
 800116a:	f107 030c 	add.w	r3, r7, #12
 800116e:	4619      	mov	r1, r3
 8001170:	4816      	ldr	r0, [pc, #88]	@ (80011cc <MX_GPIO_Init+0x12c>)
 8001172:	f001 fcf7 	bl	8002b64 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001176:	2310      	movs	r3, #16
 8001178:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800117a:	2301      	movs	r3, #1
 800117c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800117e:	2300      	movs	r3, #0
 8001180:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001182:	2303      	movs	r3, #3
 8001184:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001186:	f107 030c 	add.w	r3, r7, #12
 800118a:	4619      	mov	r1, r3
 800118c:	4810      	ldr	r0, [pc, #64]	@ (80011d0 <MX_GPIO_Init+0x130>)
 800118e:	f001 fce9 	bl	8002b64 <HAL_GPIO_Init>

  /*Configure GPIO pins : DC_Pin BL_Pin */
  GPIO_InitStruct.Pin = DC_Pin|BL_Pin;
 8001192:	2303      	movs	r3, #3
 8001194:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001196:	2301      	movs	r3, #1
 8001198:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800119a:	2300      	movs	r3, #0
 800119c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800119e:	2303      	movs	r3, #3
 80011a0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011a2:	f107 030c 	add.w	r3, r7, #12
 80011a6:	4619      	mov	r1, r3
 80011a8:	480a      	ldr	r0, [pc, #40]	@ (80011d4 <MX_GPIO_Init+0x134>)
 80011aa:	f001 fcdb 	bl	8002b64 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 80011ae:	2200      	movs	r2, #0
 80011b0:	2100      	movs	r1, #0
 80011b2:	200c      	movs	r0, #12
 80011b4:	f001 fba4 	bl	8002900 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80011b8:	200c      	movs	r0, #12
 80011ba:	f001 fbbb 	bl	8002934 <HAL_NVIC_EnableIRQ>

}
 80011be:	bf00      	nop
 80011c0:	3720      	adds	r7, #32
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd80      	pop	{r7, pc}
 80011c6:	bf00      	nop
 80011c8:	46020c00 	.word	0x46020c00
 80011cc:	42020800 	.word	0x42020800
 80011d0:	42020000 	.word	0x42020000
 80011d4:	42020400 	.word	0x42020400
 80011d8:	10210000 	.word	0x10210000

080011dc <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80011e0:	4b1b      	ldr	r3, [pc, #108]	@ (8001250 <MX_I2C1_Init+0x74>)
 80011e2:	4a1c      	ldr	r2, [pc, #112]	@ (8001254 <MX_I2C1_Init+0x78>)
 80011e4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x30909DEC;
 80011e6:	4b1a      	ldr	r3, [pc, #104]	@ (8001250 <MX_I2C1_Init+0x74>)
 80011e8:	4a1b      	ldr	r2, [pc, #108]	@ (8001258 <MX_I2C1_Init+0x7c>)
 80011ea:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80011ec:	4b18      	ldr	r3, [pc, #96]	@ (8001250 <MX_I2C1_Init+0x74>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80011f2:	4b17      	ldr	r3, [pc, #92]	@ (8001250 <MX_I2C1_Init+0x74>)
 80011f4:	2201      	movs	r2, #1
 80011f6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80011f8:	4b15      	ldr	r3, [pc, #84]	@ (8001250 <MX_I2C1_Init+0x74>)
 80011fa:	2200      	movs	r2, #0
 80011fc:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80011fe:	4b14      	ldr	r3, [pc, #80]	@ (8001250 <MX_I2C1_Init+0x74>)
 8001200:	2200      	movs	r2, #0
 8001202:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001204:	4b12      	ldr	r3, [pc, #72]	@ (8001250 <MX_I2C1_Init+0x74>)
 8001206:	2200      	movs	r2, #0
 8001208:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800120a:	4b11      	ldr	r3, [pc, #68]	@ (8001250 <MX_I2C1_Init+0x74>)
 800120c:	2200      	movs	r2, #0
 800120e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001210:	4b0f      	ldr	r3, [pc, #60]	@ (8001250 <MX_I2C1_Init+0x74>)
 8001212:	2200      	movs	r2, #0
 8001214:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001216:	480e      	ldr	r0, [pc, #56]	@ (8001250 <MX_I2C1_Init+0x74>)
 8001218:	f001 fed8 	bl	8002fcc <HAL_I2C_Init>
 800121c:	4603      	mov	r3, r0
 800121e:	2b00      	cmp	r3, #0
 8001220:	d001      	beq.n	8001226 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001222:	f000 fa25 	bl	8001670 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001226:	2100      	movs	r1, #0
 8001228:	4809      	ldr	r0, [pc, #36]	@ (8001250 <MX_I2C1_Init+0x74>)
 800122a:	f002 faf3 	bl	8003814 <HAL_I2CEx_ConfigAnalogFilter>
 800122e:	4603      	mov	r3, r0
 8001230:	2b00      	cmp	r3, #0
 8001232:	d001      	beq.n	8001238 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001234:	f000 fa1c 	bl	8001670 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001238:	2100      	movs	r1, #0
 800123a:	4805      	ldr	r0, [pc, #20]	@ (8001250 <MX_I2C1_Init+0x74>)
 800123c:	f002 fb35 	bl	80038aa <HAL_I2CEx_ConfigDigitalFilter>
 8001240:	4603      	mov	r3, r0
 8001242:	2b00      	cmp	r3, #0
 8001244:	d001      	beq.n	800124a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001246:	f000 fa13 	bl	8001670 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800124a:	bf00      	nop
 800124c:	bd80      	pop	{r7, pc}
 800124e:	bf00      	nop
 8001250:	20000214 	.word	0x20000214
 8001254:	40005400 	.word	0x40005400
 8001258:	30909dec 	.word	0x30909dec

0800125c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b0ba      	sub	sp, #232	@ 0xe8
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001264:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001268:	2200      	movs	r2, #0
 800126a:	601a      	str	r2, [r3, #0]
 800126c:	605a      	str	r2, [r3, #4]
 800126e:	609a      	str	r2, [r3, #8]
 8001270:	60da      	str	r2, [r3, #12]
 8001272:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001274:	f107 0310 	add.w	r3, r7, #16
 8001278:	22c0      	movs	r2, #192	@ 0xc0
 800127a:	2100      	movs	r1, #0
 800127c:	4618      	mov	r0, r3
 800127e:	f009 f845 	bl	800a30c <memset>
  if(i2cHandle->Instance==I2C1)
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	4a26      	ldr	r2, [pc, #152]	@ (8001320 <HAL_I2C_MspInit+0xc4>)
 8001288:	4293      	cmp	r3, r2
 800128a:	d144      	bne.n	8001316 <HAL_I2C_MspInit+0xba>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800128c:	f04f 0240 	mov.w	r2, #64	@ 0x40
 8001290:	f04f 0300 	mov.w	r3, #0
 8001294:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001298:	2300      	movs	r3, #0
 800129a:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800129c:	f107 0310 	add.w	r3, r7, #16
 80012a0:	4618      	mov	r0, r3
 80012a2:	f003 ff5f 	bl	8005164 <HAL_RCCEx_PeriphCLKConfig>
 80012a6:	4603      	mov	r3, r0
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d001      	beq.n	80012b0 <HAL_I2C_MspInit+0x54>
    {
      Error_Handler();
 80012ac:	f000 f9e0 	bl	8001670 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012b0:	4b1c      	ldr	r3, [pc, #112]	@ (8001324 <HAL_I2C_MspInit+0xc8>)
 80012b2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80012b6:	4a1b      	ldr	r2, [pc, #108]	@ (8001324 <HAL_I2C_MspInit+0xc8>)
 80012b8:	f043 0302 	orr.w	r3, r3, #2
 80012bc:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80012c0:	4b18      	ldr	r3, [pc, #96]	@ (8001324 <HAL_I2C_MspInit+0xc8>)
 80012c2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80012c6:	f003 0302 	and.w	r3, r3, #2
 80012ca:	60fb      	str	r3, [r7, #12]
 80012cc:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80012ce:	23c0      	movs	r3, #192	@ 0xc0
 80012d0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80012d4:	2312      	movs	r3, #18
 80012d6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012da:	2300      	movs	r3, #0
 80012dc:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012e0:	2300      	movs	r3, #0
 80012e2:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80012e6:	2304      	movs	r3, #4
 80012e8:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012ec:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80012f0:	4619      	mov	r1, r3
 80012f2:	480d      	ldr	r0, [pc, #52]	@ (8001328 <HAL_I2C_MspInit+0xcc>)
 80012f4:	f001 fc36 	bl	8002b64 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80012f8:	4b0a      	ldr	r3, [pc, #40]	@ (8001324 <HAL_I2C_MspInit+0xc8>)
 80012fa:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80012fe:	4a09      	ldr	r2, [pc, #36]	@ (8001324 <HAL_I2C_MspInit+0xc8>)
 8001300:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001304:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8001308:	4b06      	ldr	r3, [pc, #24]	@ (8001324 <HAL_I2C_MspInit+0xc8>)
 800130a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800130e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001312:	60bb      	str	r3, [r7, #8]
 8001314:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001316:	bf00      	nop
 8001318:	37e8      	adds	r7, #232	@ 0xe8
 800131a:	46bd      	mov	sp, r7
 800131c:	bd80      	pop	{r7, pc}
 800131e:	bf00      	nop
 8001320:	40005400 	.word	0x40005400
 8001324:	46020c00 	.word	0x46020c00
 8001328:	42020400 	.word	0x42020400

0800132c <MX_ICACHE_Init>:

/* USER CODE END 0 */

/* ICACHE init function */
void MX_ICACHE_Init(void)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache in 1-way (direct mapped cache)
  */
  if (HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY) != HAL_OK)
 8001330:	2000      	movs	r0, #0
 8001332:	f002 fb07 	bl	8003944 <HAL_ICACHE_ConfigAssociativityMode>
 8001336:	4603      	mov	r3, r0
 8001338:	2b00      	cmp	r3, #0
 800133a:	d001      	beq.n	8001340 <MX_ICACHE_Init+0x14>
  {
    Error_Handler();
 800133c:	f000 f998 	bl	8001670 <Error_Handler>
  }
  if (HAL_ICACHE_Enable() != HAL_OK)
 8001340:	f002 fb20 	bl	8003984 <HAL_ICACHE_Enable>
 8001344:	4603      	mov	r3, r0
 8001346:	2b00      	cmp	r3, #0
 8001348:	d001      	beq.n	800134e <MX_ICACHE_Init+0x22>
  {
    Error_Handler();
 800134a:	f000 f991 	bl	8001670 <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 800134e:	bf00      	nop
 8001350:	bd80      	pop	{r7, pc}
	...

08001354 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b090      	sub	sp, #64	@ 0x40
 8001358:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800135a:	f001 f9a5 	bl	80026a8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the System Power */
  SystemPower_Config();
 800135e:	f000 f967 	bl	8001630 <SystemPower_Config>

  /* Configure the system clock */
  SystemClock_Config();
 8001362:	f000 f90b 	bl	800157c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001366:	f7ff fe9b 	bl	80010a0 <MX_GPIO_Init>
  MX_ICACHE_Init();
 800136a:	f7ff ffdf 	bl	800132c <MX_ICACHE_Init>
  MX_SPI1_Init();
 800136e:	f000 f985 	bl	800167c <MX_SPI1_Init>
  MX_I2C1_Init();
 8001372:	f7ff ff33 	bl	80011dc <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  ST7789_Init(&hspi1); // Initialize the display
 8001376:	4872      	ldr	r0, [pc, #456]	@ (8001540 <main+0x1ec>)
 8001378:	f000 fb0a 	bl	8001990 <ST7789_Init>
  ST7789_FillScreen(ST7789_BLACK); // Clear the screen
 800137c:	2000      	movs	r0, #0
 800137e:	f000 fb71 	bl	8001a64 <ST7789_FillScreen>
  HAL_Delay(500);
 8001382:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001386:	f001 f9df 	bl	8002748 <HAL_Delay>

  CST816T_Init(&hi2c1); // Initialize the touch controller
 800138a:	486e      	ldr	r0, [pc, #440]	@ (8001544 <main+0x1f0>)
 800138c:	f7ff fdce 	bl	8000f2c <CST816T_Init>

  // Initial screen setup
  ST7789_DrawString(10, 10, "Hello, Gemini!", &Font_8x14, ST7789_WHITE, ST7789_BLUE);
 8001390:	231f      	movs	r3, #31
 8001392:	9301      	str	r3, [sp, #4]
 8001394:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001398:	9300      	str	r3, [sp, #0]
 800139a:	4b6b      	ldr	r3, [pc, #428]	@ (8001548 <main+0x1f4>)
 800139c:	4a6b      	ldr	r2, [pc, #428]	@ (800154c <main+0x1f8>)
 800139e:	210a      	movs	r1, #10
 80013a0:	200a      	movs	r0, #10
 80013a2:	f000 fceb 	bl	8001d7c <ST7789_DrawString>
  ST7789_DrawString(10, 40, "STM32 NUCLEO-U575ZI-Q", &Font_7x11, ST7789_WHITE, ST7789_BLUE);
 80013a6:	231f      	movs	r3, #31
 80013a8:	9301      	str	r3, [sp, #4]
 80013aa:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80013ae:	9300      	str	r3, [sp, #0]
 80013b0:	4b67      	ldr	r3, [pc, #412]	@ (8001550 <main+0x1fc>)
 80013b2:	4a68      	ldr	r2, [pc, #416]	@ (8001554 <main+0x200>)
 80013b4:	2128      	movs	r1, #40	@ 0x28
 80013b6:	200a      	movs	r0, #10
 80013b8:	f000 fce0 	bl	8001d7c <ST7789_DrawString>
  ST7789_DrawString(10, 60, "Waveshare 1.69inch LCD", &Font_9x19, ST7789_GREENYELLOW, ST7789_BLUE);
 80013bc:	231f      	movs	r3, #31
 80013be:	9301      	str	r3, [sp, #4]
 80013c0:	f64a 73e5 	movw	r3, #45029	@ 0xafe5
 80013c4:	9300      	str	r3, [sp, #0]
 80013c6:	4b64      	ldr	r3, [pc, #400]	@ (8001558 <main+0x204>)
 80013c8:	4a64      	ldr	r2, [pc, #400]	@ (800155c <main+0x208>)
 80013ca:	213c      	movs	r1, #60	@ 0x3c
 80013cc:	200a      	movs	r0, #10
 80013ce:	f000 fcd5 	bl	8001d7c <ST7789_DrawString>
  ST7789_DrawString(10, 90, "Touch and Display Demo", &Font_7x11, ST7789_CYAN, ST7789_BLUE);
 80013d2:	231f      	movs	r3, #31
 80013d4:	9301      	str	r3, [sp, #4]
 80013d6:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 80013da:	9300      	str	r3, [sp, #0]
 80013dc:	4b5c      	ldr	r3, [pc, #368]	@ (8001550 <main+0x1fc>)
 80013de:	4a60      	ldr	r2, [pc, #384]	@ (8001560 <main+0x20c>)
 80013e0:	215a      	movs	r1, #90	@ 0x5a
 80013e2:	200a      	movs	r0, #10
 80013e4:	f000 fcca 	bl	8001d7c <ST7789_DrawString>

  char buffer[50];
  int touch_display_y = 150; // Y position to display touch coordinates
 80013e8:	2396      	movs	r3, #150	@ 0x96
 80013ea:	637b      	str	r3, [r7, #52]	@ 0x34

  /* USER CODE END 2 */

  /* Initialize leds */
  BSP_LED_Init(LED_GREEN);
 80013ec:	2000      	movs	r0, #0
 80013ee:	f000 ff51 	bl	8002294 <BSP_LED_Init>
  BSP_LED_Init(LED_BLUE);
 80013f2:	2001      	movs	r0, #1
 80013f4:	f000 ff4e 	bl	8002294 <BSP_LED_Init>
  BSP_LED_Init(LED_RED);
 80013f8:	2002      	movs	r0, #2
 80013fa:	f000 ff4b 	bl	8002294 <BSP_LED_Init>

  /* Initialize USER push-button, will be used to trigger an interrupt each time it's pressed.*/
  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 80013fe:	2101      	movs	r1, #1
 8001400:	2000      	movs	r0, #0
 8001402:	f000 ffd7 	bl	80023b4 <BSP_PB_Init>

  /* Initialize COM1 port (115200, 8 bits (7-bit data + 1 stop bit), no parity */
  BspCOMInit.BaudRate   = 115200;
 8001406:	4b57      	ldr	r3, [pc, #348]	@ (8001564 <main+0x210>)
 8001408:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800140c:	601a      	str	r2, [r3, #0]
  BspCOMInit.WordLength = COM_WORDLENGTH_8B;
 800140e:	4b55      	ldr	r3, [pc, #340]	@ (8001564 <main+0x210>)
 8001410:	2200      	movs	r2, #0
 8001412:	605a      	str	r2, [r3, #4]
  BspCOMInit.StopBits   = COM_STOPBITS_1;
 8001414:	4b53      	ldr	r3, [pc, #332]	@ (8001564 <main+0x210>)
 8001416:	2200      	movs	r2, #0
 8001418:	811a      	strh	r2, [r3, #8]
  BspCOMInit.Parity     = COM_PARITY_NONE;
 800141a:	4b52      	ldr	r3, [pc, #328]	@ (8001564 <main+0x210>)
 800141c:	2200      	movs	r2, #0
 800141e:	815a      	strh	r2, [r3, #10]
  BspCOMInit.HwFlowCtl  = COM_HWCONTROL_NONE;
 8001420:	4b50      	ldr	r3, [pc, #320]	@ (8001564 <main+0x210>)
 8001422:	2200      	movs	r2, #0
 8001424:	819a      	strh	r2, [r3, #12]
  if (BSP_COM_Init(COM1, &BspCOMInit) != BSP_ERROR_NONE)
 8001426:	494f      	ldr	r1, [pc, #316]	@ (8001564 <main+0x210>)
 8001428:	2000      	movs	r0, #0
 800142a:	f001 f85d 	bl	80024e8 <BSP_COM_Init>
 800142e:	4603      	mov	r3, r0
 8001430:	2b00      	cmp	r3, #0
 8001432:	d001      	beq.n	8001438 <main+0xe4>
  {
    Error_Handler();
 8001434:	f000 f91c 	bl	8001670 <Error_Handler>
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	// Check for touch event
	  if (touch_event_pending) {
 8001438:	4b4b      	ldr	r3, [pc, #300]	@ (8001568 <main+0x214>)
 800143a:	781b      	ldrb	r3, [r3, #0]
 800143c:	b2db      	uxtb	r3, r3
 800143e:	2b00      	cmp	r3, #0
 8001440:	d079      	beq.n	8001536 <main+0x1e2>
			  touch_event_pending = false; // Clear the flag
 8001442:	4b49      	ldr	r3, [pc, #292]	@ (8001568 <main+0x214>)
 8001444:	2200      	movs	r2, #0
 8001446:	701a      	strb	r2, [r3, #0]
			  if (CST816T_ReadTouch(&touch_state)) {
 8001448:	4848      	ldr	r0, [pc, #288]	@ (800156c <main+0x218>)
 800144a:	f7ff fd93 	bl	8000f74 <CST816T_ReadTouch>
 800144e:	4603      	mov	r3, r0
 8001450:	2b00      	cmp	r3, #0
 8001452:	d070      	beq.n	8001536 <main+0x1e2>
				  if (touch_state.touch_detected) {
 8001454:	4b45      	ldr	r3, [pc, #276]	@ (800156c <main+0x218>)
 8001456:	781b      	ldrb	r3, [r3, #0]
 8001458:	2b00      	cmp	r3, #0
 800145a:	d051      	beq.n	8001500 <main+0x1ac>
					  // Clear previous touch info
					  ST7789_FillRectangle(0, touch_display_y, ST7789_WIDTH, Font_7x11.height * 2 + 10, ST7789_BLUE);
 800145c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800145e:	b219      	sxth	r1, r3
 8001460:	4b3b      	ldr	r3, [pc, #236]	@ (8001550 <main+0x1fc>)
 8001462:	795b      	ldrb	r3, [r3, #5]
 8001464:	3305      	adds	r3, #5
 8001466:	b29b      	uxth	r3, r3
 8001468:	005b      	lsls	r3, r3, #1
 800146a:	b29b      	uxth	r3, r3
 800146c:	b21b      	sxth	r3, r3
 800146e:	221f      	movs	r2, #31
 8001470:	9200      	str	r2, [sp, #0]
 8001472:	22f0      	movs	r2, #240	@ 0xf0
 8001474:	2000      	movs	r0, #0
 8001476:	f000 fb3f 	bl	8001af8 <ST7789_FillRectangle>

					  // Display touch coordinates
					  sprintf(buffer, "X: %03d Y: %03d", touch_state.x, touch_state.y);
 800147a:	4b3c      	ldr	r3, [pc, #240]	@ (800156c <main+0x218>)
 800147c:	885b      	ldrh	r3, [r3, #2]
 800147e:	461a      	mov	r2, r3
 8001480:	4b3a      	ldr	r3, [pc, #232]	@ (800156c <main+0x218>)
 8001482:	889b      	ldrh	r3, [r3, #4]
 8001484:	4638      	mov	r0, r7
 8001486:	493a      	ldr	r1, [pc, #232]	@ (8001570 <main+0x21c>)
 8001488:	f008 fe4a 	bl	800a120 <siprintf>
					  ST7789_WriteString(10, touch_display_y, buffer, &Font_7x11, ST7789_WHITE, ST7789_BLUE);
 800148c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800148e:	b219      	sxth	r1, r3
 8001490:	463a      	mov	r2, r7
 8001492:	231f      	movs	r3, #31
 8001494:	9301      	str	r3, [sp, #4]
 8001496:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800149a:	9300      	str	r3, [sp, #0]
 800149c:	4b2c      	ldr	r3, [pc, #176]	@ (8001550 <main+0x1fc>)
 800149e:	200a      	movs	r0, #10
 80014a0:	f000 fc96 	bl	8001dd0 <ST7789_WriteString>

					  // Display gesture (if any)
					  // You can decode gesture_id (e.g., 0x01=Tap, 0x02=Swipe Up, etc. - check CST816T datasheet)
					  sprintf(buffer, "Gesture: 0x%02X", touch_state.gesture_id);
 80014a4:	4b31      	ldr	r3, [pc, #196]	@ (800156c <main+0x218>)
 80014a6:	799b      	ldrb	r3, [r3, #6]
 80014a8:	461a      	mov	r2, r3
 80014aa:	463b      	mov	r3, r7
 80014ac:	4931      	ldr	r1, [pc, #196]	@ (8001574 <main+0x220>)
 80014ae:	4618      	mov	r0, r3
 80014b0:	f008 fe36 	bl	800a120 <siprintf>
					  ST7789_WriteString(10, touch_display_y + Font_7x11.height + 5, buffer, &Font_7x11, ST7789_ORANGE, ST7789_BLUE);
 80014b4:	4b26      	ldr	r3, [pc, #152]	@ (8001550 <main+0x1fc>)
 80014b6:	795b      	ldrb	r3, [r3, #5]
 80014b8:	461a      	mov	r2, r3
 80014ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80014bc:	b29b      	uxth	r3, r3
 80014be:	4413      	add	r3, r2
 80014c0:	b29b      	uxth	r3, r3
 80014c2:	3305      	adds	r3, #5
 80014c4:	b29b      	uxth	r3, r3
 80014c6:	b219      	sxth	r1, r3
 80014c8:	463a      	mov	r2, r7
 80014ca:	231f      	movs	r3, #31
 80014cc:	9301      	str	r3, [sp, #4]
 80014ce:	f64f 5320 	movw	r3, #64800	@ 0xfd20
 80014d2:	9300      	str	r3, [sp, #0]
 80014d4:	4b1e      	ldr	r3, [pc, #120]	@ (8001550 <main+0x1fc>)
 80014d6:	200a      	movs	r0, #10
 80014d8:	f000 fc7a 	bl	8001dd0 <ST7789_WriteString>

					  // Optionally, draw a circle at the touch point
					  ST7789_FillRectangle(touch_state.x - 2, touch_state.y - 2, 5, 5, ST7789_RED);
 80014dc:	4b23      	ldr	r3, [pc, #140]	@ (800156c <main+0x218>)
 80014de:	885b      	ldrh	r3, [r3, #2]
 80014e0:	3b02      	subs	r3, #2
 80014e2:	b29b      	uxth	r3, r3
 80014e4:	b218      	sxth	r0, r3
 80014e6:	4b21      	ldr	r3, [pc, #132]	@ (800156c <main+0x218>)
 80014e8:	889b      	ldrh	r3, [r3, #4]
 80014ea:	3b02      	subs	r3, #2
 80014ec:	b29b      	uxth	r3, r3
 80014ee:	b219      	sxth	r1, r3
 80014f0:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 80014f4:	9300      	str	r3, [sp, #0]
 80014f6:	2305      	movs	r3, #5
 80014f8:	2205      	movs	r2, #5
 80014fa:	f000 fafd 	bl	8001af8 <ST7789_FillRectangle>
 80014fe:	e01a      	b.n	8001536 <main+0x1e2>
				  } else {
					  // No touch detected, clear touch info after release
					  ST7789_FillRectangle(0, touch_display_y, ST7789_WIDTH, Font_7x11.height * 2 + 10, ST7789_BLUE);
 8001500:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001502:	b219      	sxth	r1, r3
 8001504:	4b12      	ldr	r3, [pc, #72]	@ (8001550 <main+0x1fc>)
 8001506:	795b      	ldrb	r3, [r3, #5]
 8001508:	3305      	adds	r3, #5
 800150a:	b29b      	uxth	r3, r3
 800150c:	005b      	lsls	r3, r3, #1
 800150e:	b29b      	uxth	r3, r3
 8001510:	b21b      	sxth	r3, r3
 8001512:	221f      	movs	r2, #31
 8001514:	9200      	str	r2, [sp, #0]
 8001516:	22f0      	movs	r2, #240	@ 0xf0
 8001518:	2000      	movs	r0, #0
 800151a:	f000 faed 	bl	8001af8 <ST7789_FillRectangle>
					  ST7789_WriteString(10, touch_display_y, "No Touch", &Font_7x11, ST7789_WHITE, ST7789_BLUE);
 800151e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001520:	b219      	sxth	r1, r3
 8001522:	231f      	movs	r3, #31
 8001524:	9301      	str	r3, [sp, #4]
 8001526:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800152a:	9300      	str	r3, [sp, #0]
 800152c:	4b08      	ldr	r3, [pc, #32]	@ (8001550 <main+0x1fc>)
 800152e:	4a12      	ldr	r2, [pc, #72]	@ (8001578 <main+0x224>)
 8001530:	200a      	movs	r0, #10
 8001532:	f000 fc4d 	bl	8001dd0 <ST7789_WriteString>
			  }
		  }
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	HAL_Delay(10); // Small delay to prevent busy-waiting if no touch event
 8001536:	200a      	movs	r0, #10
 8001538:	f001 f906 	bl	8002748 <HAL_Delay>
	  if (touch_event_pending) {
 800153c:	e77c      	b.n	8001438 <main+0xe4>
 800153e:	bf00      	nop
 8001540:	20000280 	.word	0x20000280
 8001544:	20000214 	.word	0x20000214
 8001548:	0800d02c 	.word	0x0800d02c
 800154c:	0800c580 	.word	0x0800c580
 8001550:	0800cb50 	.word	0x0800cb50
 8001554:	0800c590 	.word	0x0800c590
 8001558:	0800db58 	.word	0x0800db58
 800155c:	0800c5a8 	.word	0x0800c5a8
 8001560:	0800c5c0 	.word	0x0800c5c0
 8001564:	20000268 	.word	0x20000268
 8001568:	20000210 	.word	0x20000210
 800156c:	20000278 	.word	0x20000278
 8001570:	0800c5d8 	.word	0x0800c5d8
 8001574:	0800c5e8 	.word	0x0800c5e8
 8001578:	0800c5f8 	.word	0x0800c5f8

0800157c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b09e      	sub	sp, #120	@ 0x78
 8001580:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001582:	f107 0318 	add.w	r3, r7, #24
 8001586:	2260      	movs	r2, #96	@ 0x60
 8001588:	2100      	movs	r1, #0
 800158a:	4618      	mov	r0, r3
 800158c:	f008 febe 	bl	800a30c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001590:	463b      	mov	r3, r7
 8001592:	2200      	movs	r2, #0
 8001594:	601a      	str	r2, [r3, #0]
 8001596:	605a      	str	r2, [r3, #4]
 8001598:	609a      	str	r2, [r3, #8]
 800159a:	60da      	str	r2, [r3, #12]
 800159c:	611a      	str	r2, [r3, #16]
 800159e:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80015a0:	f44f 3040 	mov.w	r0, #196608	@ 0x30000
 80015a4:	f002 f9fe 	bl	80039a4 <HAL_PWREx_ControlVoltageScaling>
 80015a8:	4603      	mov	r3, r0
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d001      	beq.n	80015b2 <SystemClock_Config+0x36>
  {
    Error_Handler();
 80015ae:	f000 f85f 	bl	8001670 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80015b2:	2302      	movs	r3, #2
 80015b4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80015b6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80015ba:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80015bc:	2310      	movs	r3, #16
 80015be:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80015c0:	2302      	movs	r3, #2
 80015c2:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80015c4:	2302      	movs	r3, #2
 80015c6:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLMBOOST = RCC_PLLMBOOST_DIV1;
 80015c8:	2300      	movs	r3, #0
 80015ca:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLM = 1;
 80015cc:	2301      	movs	r3, #1
 80015ce:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLN = 10;
 80015d0:	230a      	movs	r3, #10
 80015d2:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLP = 2;
 80015d4:	2302      	movs	r3, #2
 80015d6:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80015d8:	2302      	movs	r3, #2
 80015da:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLR = 1;
 80015dc:	2301      	movs	r3, #1
 80015de:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLLVCIRANGE_1;
 80015e0:	230c      	movs	r3, #12
 80015e2:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80015e4:	2300      	movs	r3, #0
 80015e6:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015e8:	f107 0318 	add.w	r3, r7, #24
 80015ec:	4618      	mov	r0, r3
 80015ee:	f002 fad5 	bl	8003b9c <HAL_RCC_OscConfig>
 80015f2:	4603      	mov	r3, r0
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d001      	beq.n	80015fc <SystemClock_Config+0x80>
  {
    Error_Handler();
 80015f8:	f000 f83a 	bl	8001670 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80015fc:	231f      	movs	r3, #31
 80015fe:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001600:	2303      	movs	r3, #3
 8001602:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001604:	2300      	movs	r3, #0
 8001606:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001608:	2300      	movs	r3, #0
 800160a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800160c:	2300      	movs	r3, #0
 800160e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 8001610:	2300      	movs	r3, #0
 8001612:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001614:	463b      	mov	r3, r7
 8001616:	2104      	movs	r1, #4
 8001618:	4618      	mov	r0, r3
 800161a:	f003 f99b 	bl	8004954 <HAL_RCC_ClockConfig>
 800161e:	4603      	mov	r3, r0
 8001620:	2b00      	cmp	r3, #0
 8001622:	d001      	beq.n	8001628 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8001624:	f000 f824 	bl	8001670 <Error_Handler>
  }
}
 8001628:	bf00      	nop
 800162a:	3778      	adds	r7, #120	@ 0x78
 800162c:	46bd      	mov	sp, r7
 800162e:	bd80      	pop	{r7, pc}

08001630 <SystemPower_Config>:
/**
  * @brief Power Configuration
  * @retval None
  */
static void SystemPower_Config(void)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	af00      	add	r7, sp, #0

  /*
   * Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
   */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001634:	f002 faa2 	bl	8003b7c <HAL_PWREx_DisableUCPDDeadBattery>

  /*
   * Switch to SMPS regulator instead of LDO
   */
  if (HAL_PWREx_ConfigSupply(PWR_SMPS_SUPPLY) != HAL_OK)
 8001638:	2002      	movs	r0, #2
 800163a:	f002 fa3f 	bl	8003abc <HAL_PWREx_ConfigSupply>
 800163e:	4603      	mov	r3, r0
 8001640:	2b00      	cmp	r3, #0
 8001642:	d001      	beq.n	8001648 <SystemPower_Config+0x18>
  {
    Error_Handler();
 8001644:	f000 f814 	bl	8001670 <Error_Handler>
  }
/* USER CODE BEGIN PWR */
/* USER CODE END PWR */
}
 8001648:	bf00      	nop
 800164a:	bd80      	pop	{r7, pc}

0800164c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b082      	sub	sp, #8
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM17)
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	4a04      	ldr	r2, [pc, #16]	@ (800166c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800165a:	4293      	cmp	r3, r2
 800165c:	d101      	bne.n	8001662 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 800165e:	f001 f853 	bl	8002708 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001662:	bf00      	nop
 8001664:	3708      	adds	r7, #8
 8001666:	46bd      	mov	sp, r7
 8001668:	bd80      	pop	{r7, pc}
 800166a:	bf00      	nop
 800166c:	40014800 	.word	0x40014800

08001670 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001670:	b480      	push	{r7}
 8001672:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001674:	b672      	cpsid	i
}
 8001676:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001678:	bf00      	nop
 800167a:	e7fd      	b.n	8001678 <Error_Handler+0x8>

0800167c <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b084      	sub	sp, #16
 8001680:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 0 */

  /* USER CODE END SPI1_Init 0 */

  SPI_AutonomousModeConfTypeDef HAL_SPI_AutonomousMode_Cfg_Struct = {0};
 8001682:	1d3b      	adds	r3, r7, #4
 8001684:	2200      	movs	r2, #0
 8001686:	601a      	str	r2, [r3, #0]
 8001688:	605a      	str	r2, [r3, #4]
 800168a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 800168c:	4b31      	ldr	r3, [pc, #196]	@ (8001754 <MX_SPI1_Init+0xd8>)
 800168e:	4a32      	ldr	r2, [pc, #200]	@ (8001758 <MX_SPI1_Init+0xdc>)
 8001690:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001692:	4b30      	ldr	r3, [pc, #192]	@ (8001754 <MX_SPI1_Init+0xd8>)
 8001694:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8001698:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800169a:	4b2e      	ldr	r3, [pc, #184]	@ (8001754 <MX_SPI1_Init+0xd8>)
 800169c:	2200      	movs	r2, #0
 800169e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80016a0:	4b2c      	ldr	r3, [pc, #176]	@ (8001754 <MX_SPI1_Init+0xd8>)
 80016a2:	2207      	movs	r2, #7
 80016a4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80016a6:	4b2b      	ldr	r3, [pc, #172]	@ (8001754 <MX_SPI1_Init+0xd8>)
 80016a8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80016ac:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 80016ae:	4b29      	ldr	r3, [pc, #164]	@ (8001754 <MX_SPI1_Init+0xd8>)
 80016b0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80016b4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80016b6:	4b27      	ldr	r3, [pc, #156]	@ (8001754 <MX_SPI1_Init+0xd8>)
 80016b8:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80016bc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80016be:	4b25      	ldr	r3, [pc, #148]	@ (8001754 <MX_SPI1_Init+0xd8>)
 80016c0:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 80016c4:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80016c6:	4b23      	ldr	r3, [pc, #140]	@ (8001754 <MX_SPI1_Init+0xd8>)
 80016c8:	2200      	movs	r2, #0
 80016ca:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80016cc:	4b21      	ldr	r3, [pc, #132]	@ (8001754 <MX_SPI1_Init+0xd8>)
 80016ce:	2200      	movs	r2, #0
 80016d0:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80016d2:	4b20      	ldr	r3, [pc, #128]	@ (8001754 <MX_SPI1_Init+0xd8>)
 80016d4:	2200      	movs	r2, #0
 80016d6:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x7;
 80016d8:	4b1e      	ldr	r3, [pc, #120]	@ (8001754 <MX_SPI1_Init+0xd8>)
 80016da:	2207      	movs	r2, #7
 80016dc:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80016de:	4b1d      	ldr	r3, [pc, #116]	@ (8001754 <MX_SPI1_Init+0xd8>)
 80016e0:	2200      	movs	r2, #0
 80016e2:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80016e4:	4b1b      	ldr	r3, [pc, #108]	@ (8001754 <MX_SPI1_Init+0xd8>)
 80016e6:	2200      	movs	r2, #0
 80016e8:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80016ea:	4b1a      	ldr	r3, [pc, #104]	@ (8001754 <MX_SPI1_Init+0xd8>)
 80016ec:	2200      	movs	r2, #0
 80016ee:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80016f0:	4b18      	ldr	r3, [pc, #96]	@ (8001754 <MX_SPI1_Init+0xd8>)
 80016f2:	2200      	movs	r2, #0
 80016f4:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80016f6:	4b17      	ldr	r3, [pc, #92]	@ (8001754 <MX_SPI1_Init+0xd8>)
 80016f8:	2200      	movs	r2, #0
 80016fa:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80016fc:	4b15      	ldr	r3, [pc, #84]	@ (8001754 <MX_SPI1_Init+0xd8>)
 80016fe:	2200      	movs	r2, #0
 8001700:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001702:	4b14      	ldr	r3, [pc, #80]	@ (8001754 <MX_SPI1_Init+0xd8>)
 8001704:	2200      	movs	r2, #0
 8001706:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001708:	4b12      	ldr	r3, [pc, #72]	@ (8001754 <MX_SPI1_Init+0xd8>)
 800170a:	2200      	movs	r2, #0
 800170c:	659a      	str	r2, [r3, #88]	@ 0x58
  hspi1.Init.ReadyMasterManagement = SPI_RDY_MASTER_MANAGEMENT_INTERNALLY;
 800170e:	4b11      	ldr	r3, [pc, #68]	@ (8001754 <MX_SPI1_Init+0xd8>)
 8001710:	2200      	movs	r2, #0
 8001712:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi1.Init.ReadyPolarity = SPI_RDY_POLARITY_HIGH;
 8001714:	4b0f      	ldr	r3, [pc, #60]	@ (8001754 <MX_SPI1_Init+0xd8>)
 8001716:	2200      	movs	r2, #0
 8001718:	661a      	str	r2, [r3, #96]	@ 0x60
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800171a:	480e      	ldr	r0, [pc, #56]	@ (8001754 <MX_SPI1_Init+0xd8>)
 800171c:	f006 f9ba 	bl	8007a94 <HAL_SPI_Init>
 8001720:	4603      	mov	r3, r0
 8001722:	2b00      	cmp	r3, #0
 8001724:	d001      	beq.n	800172a <MX_SPI1_Init+0xae>
  {
    Error_Handler();
 8001726:	f7ff ffa3 	bl	8001670 <Error_Handler>
  }
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerState = SPI_AUTO_MODE_DISABLE;
 800172a:	2300      	movs	r3, #0
 800172c:	607b      	str	r3, [r7, #4]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerSelection = SPI_GRP1_GPDMA_CH0_TCF_TRG;
 800172e:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8001732:	60bb      	str	r3, [r7, #8]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerPolarity = SPI_TRIG_POLARITY_RISING;
 8001734:	2300      	movs	r3, #0
 8001736:	60fb      	str	r3, [r7, #12]
  if (HAL_SPIEx_SetConfigAutonomousMode(&hspi1, &HAL_SPI_AutonomousMode_Cfg_Struct) != HAL_OK)
 8001738:	1d3b      	adds	r3, r7, #4
 800173a:	4619      	mov	r1, r3
 800173c:	4805      	ldr	r0, [pc, #20]	@ (8001754 <MX_SPI1_Init+0xd8>)
 800173e:	f006 ffdc 	bl	80086fa <HAL_SPIEx_SetConfigAutonomousMode>
 8001742:	4603      	mov	r3, r0
 8001744:	2b00      	cmp	r3, #0
 8001746:	d001      	beq.n	800174c <MX_SPI1_Init+0xd0>
  {
    Error_Handler();
 8001748:	f7ff ff92 	bl	8001670 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800174c:	bf00      	nop
 800174e:	3710      	adds	r7, #16
 8001750:	46bd      	mov	sp, r7
 8001752:	bd80      	pop	{r7, pc}
 8001754:	20000280 	.word	0x20000280
 8001758:	40013000 	.word	0x40013000

0800175c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b0ba      	sub	sp, #232	@ 0xe8
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001764:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001768:	2200      	movs	r2, #0
 800176a:	601a      	str	r2, [r3, #0]
 800176c:	605a      	str	r2, [r3, #4]
 800176e:	609a      	str	r2, [r3, #8]
 8001770:	60da      	str	r2, [r3, #12]
 8001772:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001774:	f107 0310 	add.w	r3, r7, #16
 8001778:	22c0      	movs	r2, #192	@ 0xc0
 800177a:	2100      	movs	r1, #0
 800177c:	4618      	mov	r0, r3
 800177e:	f008 fdc5 	bl	800a30c <memset>
  if(spiHandle->Instance==SPI1)
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	4a2b      	ldr	r2, [pc, #172]	@ (8001834 <HAL_SPI_MspInit+0xd8>)
 8001788:	4293      	cmp	r3, r2
 800178a:	d14e      	bne.n	800182a <HAL_SPI_MspInit+0xce>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 800178c:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001790:	f04f 0300 	mov.w	r3, #0
 8001794:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.Spi1ClockSelection = RCC_SPI1CLKSOURCE_SYSCLK;
 8001798:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800179c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80017a0:	f107 0310 	add.w	r3, r7, #16
 80017a4:	4618      	mov	r0, r3
 80017a6:	f003 fcdd 	bl	8005164 <HAL_RCCEx_PeriphCLKConfig>
 80017aa:	4603      	mov	r3, r0
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d001      	beq.n	80017b4 <HAL_SPI_MspInit+0x58>
    {
      Error_Handler();
 80017b0:	f7ff ff5e 	bl	8001670 <Error_Handler>
    }

    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80017b4:	4b20      	ldr	r3, [pc, #128]	@ (8001838 <HAL_SPI_MspInit+0xdc>)
 80017b6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80017ba:	4a1f      	ldr	r2, [pc, #124]	@ (8001838 <HAL_SPI_MspInit+0xdc>)
 80017bc:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80017c0:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 80017c4:	4b1c      	ldr	r3, [pc, #112]	@ (8001838 <HAL_SPI_MspInit+0xdc>)
 80017c6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80017ca:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80017ce:	60fb      	str	r3, [r7, #12]
 80017d0:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017d2:	4b19      	ldr	r3, [pc, #100]	@ (8001838 <HAL_SPI_MspInit+0xdc>)
 80017d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80017d8:	4a17      	ldr	r2, [pc, #92]	@ (8001838 <HAL_SPI_MspInit+0xdc>)
 80017da:	f043 0301 	orr.w	r3, r3, #1
 80017de:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80017e2:	4b15      	ldr	r3, [pc, #84]	@ (8001838 <HAL_SPI_MspInit+0xdc>)
 80017e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80017e8:	f003 0301 	and.w	r3, r3, #1
 80017ec:	60bb      	str	r3, [r7, #8]
 80017ee:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80017f0:	23e0      	movs	r3, #224	@ 0xe0
 80017f2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017f6:	2302      	movs	r3, #2
 80017f8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017fc:	2300      	movs	r3, #0
 80017fe:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001802:	2300      	movs	r3, #0
 8001804:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001808:	2305      	movs	r3, #5
 800180a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800180e:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001812:	4619      	mov	r1, r3
 8001814:	4809      	ldr	r0, [pc, #36]	@ (800183c <HAL_SPI_MspInit+0xe0>)
 8001816:	f001 f9a5 	bl	8002b64 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 800181a:	2200      	movs	r2, #0
 800181c:	2100      	movs	r1, #0
 800181e:	203b      	movs	r0, #59	@ 0x3b
 8001820:	f001 f86e 	bl	8002900 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8001824:	203b      	movs	r0, #59	@ 0x3b
 8001826:	f001 f885 	bl	8002934 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 800182a:	bf00      	nop
 800182c:	37e8      	adds	r7, #232	@ 0xe8
 800182e:	46bd      	mov	sp, r7
 8001830:	bd80      	pop	{r7, pc}
 8001832:	bf00      	nop
 8001834:	40013000 	.word	0x40013000
 8001838:	46020c00 	.word	0x46020c00
 800183c:	42020000 	.word	0x42020000

08001840 <ST7789_Select>:

// Global SPI handle pointer
SPI_HandleTypeDef *hspi_st7789;

// Internal functions
static void ST7789_Select() {
 8001840:	b580      	push	{r7, lr}
 8001842:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ST7789_CS_GPIO_Port, ST7789_CS_Pin, GPIO_PIN_RESET);
 8001844:	2200      	movs	r2, #0
 8001846:	2110      	movs	r1, #16
 8001848:	4802      	ldr	r0, [pc, #8]	@ (8001854 <ST7789_Select+0x14>)
 800184a:	f001 fb6b 	bl	8002f24 <HAL_GPIO_WritePin>
}
 800184e:	bf00      	nop
 8001850:	bd80      	pop	{r7, pc}
 8001852:	bf00      	nop
 8001854:	42020000 	.word	0x42020000

08001858 <ST7789_Unselect>:

static void ST7789_Unselect() {
 8001858:	b580      	push	{r7, lr}
 800185a:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ST7789_CS_GPIO_Port, ST7789_CS_Pin, GPIO_PIN_SET);
 800185c:	2201      	movs	r2, #1
 800185e:	2110      	movs	r1, #16
 8001860:	4802      	ldr	r0, [pc, #8]	@ (800186c <ST7789_Unselect+0x14>)
 8001862:	f001 fb5f 	bl	8002f24 <HAL_GPIO_WritePin>
}
 8001866:	bf00      	nop
 8001868:	bd80      	pop	{r7, pc}
 800186a:	bf00      	nop
 800186c:	42020000 	.word	0x42020000

08001870 <ST7789_WriteCommand>:

void ST7789_WriteCommand(uint8_t cmd) {
 8001870:	b580      	push	{r7, lr}
 8001872:	b082      	sub	sp, #8
 8001874:	af00      	add	r7, sp, #0
 8001876:	4603      	mov	r3, r0
 8001878:	71fb      	strb	r3, [r7, #7]
    ST7789_Select();
 800187a:	f7ff ffe1 	bl	8001840 <ST7789_Select>
    HAL_GPIO_WritePin(ST7789_DC_GPIO_Port, ST7789_DC_Pin, GPIO_PIN_RESET); // Command mode
 800187e:	2200      	movs	r2, #0
 8001880:	2101      	movs	r1, #1
 8001882:	4808      	ldr	r0, [pc, #32]	@ (80018a4 <ST7789_WriteCommand+0x34>)
 8001884:	f001 fb4e 	bl	8002f24 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(hspi_st7789, &cmd, 1, HAL_MAX_DELAY);
 8001888:	4b07      	ldr	r3, [pc, #28]	@ (80018a8 <ST7789_WriteCommand+0x38>)
 800188a:	6818      	ldr	r0, [r3, #0]
 800188c:	1df9      	adds	r1, r7, #7
 800188e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001892:	2201      	movs	r2, #1
 8001894:	f006 fa14 	bl	8007cc0 <HAL_SPI_Transmit>
    ST7789_Unselect();
 8001898:	f7ff ffde 	bl	8001858 <ST7789_Unselect>
}
 800189c:	bf00      	nop
 800189e:	3708      	adds	r7, #8
 80018a0:	46bd      	mov	sp, r7
 80018a2:	bd80      	pop	{r7, pc}
 80018a4:	42020400 	.word	0x42020400
 80018a8:	20000310 	.word	0x20000310

080018ac <ST7789_WriteData>:

void ST7789_WriteData(uint8_t *buff, size_t buff_size) {
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b082      	sub	sp, #8
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
 80018b4:	6039      	str	r1, [r7, #0]
    ST7789_Select();
 80018b6:	f7ff ffc3 	bl	8001840 <ST7789_Select>
    HAL_GPIO_WritePin(ST7789_DC_GPIO_Port, ST7789_DC_Pin, GPIO_PIN_SET); // Data mode
 80018ba:	2201      	movs	r2, #1
 80018bc:	2101      	movs	r1, #1
 80018be:	4809      	ldr	r0, [pc, #36]	@ (80018e4 <ST7789_WriteData+0x38>)
 80018c0:	f001 fb30 	bl	8002f24 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(hspi_st7789, buff, buff_size, HAL_MAX_DELAY);
 80018c4:	4b08      	ldr	r3, [pc, #32]	@ (80018e8 <ST7789_WriteData+0x3c>)
 80018c6:	6818      	ldr	r0, [r3, #0]
 80018c8:	683b      	ldr	r3, [r7, #0]
 80018ca:	b29a      	uxth	r2, r3
 80018cc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80018d0:	6879      	ldr	r1, [r7, #4]
 80018d2:	f006 f9f5 	bl	8007cc0 <HAL_SPI_Transmit>
    ST7789_Unselect();
 80018d6:	f7ff ffbf 	bl	8001858 <ST7789_Unselect>
}
 80018da:	bf00      	nop
 80018dc:	3708      	adds	r7, #8
 80018de:	46bd      	mov	sp, r7
 80018e0:	bd80      	pop	{r7, pc}
 80018e2:	bf00      	nop
 80018e4:	42020400 	.word	0x42020400
 80018e8:	20000310 	.word	0x20000310

080018ec <ST7789_SetAddressWindow>:

void ST7789_SetAddressWindow(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1) {
 80018ec:	b590      	push	{r4, r7, lr}
 80018ee:	b085      	sub	sp, #20
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	4604      	mov	r4, r0
 80018f4:	4608      	mov	r0, r1
 80018f6:	4611      	mov	r1, r2
 80018f8:	461a      	mov	r2, r3
 80018fa:	4623      	mov	r3, r4
 80018fc:	80fb      	strh	r3, [r7, #6]
 80018fe:	4603      	mov	r3, r0
 8001900:	80bb      	strh	r3, [r7, #4]
 8001902:	460b      	mov	r3, r1
 8001904:	807b      	strh	r3, [r7, #2]
 8001906:	4613      	mov	r3, r2
 8001908:	803b      	strh	r3, [r7, #0]
    // --- KEY MODIFICATION FOR 240x280 DISPLAY ---
    // For 240x280 ST7789V2, typically a Y-offset is needed.
    // The controller is 240x320, but the panel is 240x280.
    // This centers the 280 pixels vertically within the 320-pixel frame.
    uint16_t y_hardware_offset = 20; // 20 pixels for a 240x280 display
 800190a:	2314      	movs	r3, #20
 800190c:	81fb      	strh	r3, [r7, #14]
    // No X-offset for 240-width displays
    // uint16_t x_hardware_offset = 0; // Or remove this line if it was added for 170x320
    // x0 += x_hardware_offset;
    // x1 += x_hardware_offset;

    y0 += y_hardware_offset;
 800190e:	88ba      	ldrh	r2, [r7, #4]
 8001910:	89fb      	ldrh	r3, [r7, #14]
 8001912:	4413      	add	r3, r2
 8001914:	80bb      	strh	r3, [r7, #4]
    y1 += y_hardware_offset;
 8001916:	883a      	ldrh	r2, [r7, #0]
 8001918:	89fb      	ldrh	r3, [r7, #14]
 800191a:	4413      	add	r3, r2
 800191c:	803b      	strh	r3, [r7, #0]
    // --- END OF KEY MODIFICATION ---

    uint8_t data[4];

    // Column Address Set (CASET)
    ST7789_WriteCommand(ST7789_CASET);
 800191e:	202a      	movs	r0, #42	@ 0x2a
 8001920:	f7ff ffa6 	bl	8001870 <ST7789_WriteCommand>
    data[0] = (x0 >> 8) & 0xFF;
 8001924:	88fb      	ldrh	r3, [r7, #6]
 8001926:	0a1b      	lsrs	r3, r3, #8
 8001928:	b29b      	uxth	r3, r3
 800192a:	b2db      	uxtb	r3, r3
 800192c:	723b      	strb	r3, [r7, #8]
    data[1] = x0 & 0xFF;
 800192e:	88fb      	ldrh	r3, [r7, #6]
 8001930:	b2db      	uxtb	r3, r3
 8001932:	727b      	strb	r3, [r7, #9]
    data[2] = (x1 >> 8) & 0xFF;
 8001934:	887b      	ldrh	r3, [r7, #2]
 8001936:	0a1b      	lsrs	r3, r3, #8
 8001938:	b29b      	uxth	r3, r3
 800193a:	b2db      	uxtb	r3, r3
 800193c:	72bb      	strb	r3, [r7, #10]
    data[3] = x1 & 0xFF;
 800193e:	887b      	ldrh	r3, [r7, #2]
 8001940:	b2db      	uxtb	r3, r3
 8001942:	72fb      	strb	r3, [r7, #11]
    ST7789_WriteData(data, 4);
 8001944:	f107 0308 	add.w	r3, r7, #8
 8001948:	2104      	movs	r1, #4
 800194a:	4618      	mov	r0, r3
 800194c:	f7ff ffae 	bl	80018ac <ST7789_WriteData>

    // Row Address Set (RASET)
    ST7789_WriteCommand(ST7789_RASET);
 8001950:	202b      	movs	r0, #43	@ 0x2b
 8001952:	f7ff ff8d 	bl	8001870 <ST7789_WriteCommand>
    data[0] = (y0 >> 8) & 0xFF;
 8001956:	88bb      	ldrh	r3, [r7, #4]
 8001958:	0a1b      	lsrs	r3, r3, #8
 800195a:	b29b      	uxth	r3, r3
 800195c:	b2db      	uxtb	r3, r3
 800195e:	723b      	strb	r3, [r7, #8]
    data[1] = y0 & 0xFF;
 8001960:	88bb      	ldrh	r3, [r7, #4]
 8001962:	b2db      	uxtb	r3, r3
 8001964:	727b      	strb	r3, [r7, #9]
    data[2] = (y1 >> 8) & 0xFF;
 8001966:	883b      	ldrh	r3, [r7, #0]
 8001968:	0a1b      	lsrs	r3, r3, #8
 800196a:	b29b      	uxth	r3, r3
 800196c:	b2db      	uxtb	r3, r3
 800196e:	72bb      	strb	r3, [r7, #10]
    data[3] = y1 & 0xFF;
 8001970:	883b      	ldrh	r3, [r7, #0]
 8001972:	b2db      	uxtb	r3, r3
 8001974:	72fb      	strb	r3, [r7, #11]
    ST7789_WriteData(data, 4);
 8001976:	f107 0308 	add.w	r3, r7, #8
 800197a:	2104      	movs	r1, #4
 800197c:	4618      	mov	r0, r3
 800197e:	f7ff ff95 	bl	80018ac <ST7789_WriteData>

    ST7789_WriteCommand(ST7789_RAMWR); // Memory Write
 8001982:	202c      	movs	r0, #44	@ 0x2c
 8001984:	f7ff ff74 	bl	8001870 <ST7789_WriteCommand>
}
 8001988:	bf00      	nop
 800198a:	3714      	adds	r7, #20
 800198c:	46bd      	mov	sp, r7
 800198e:	bd90      	pop	{r4, r7, pc}

08001990 <ST7789_Init>:

void ST7789_Init(SPI_HandleTypeDef *hspi) {
 8001990:	b580      	push	{r7, lr}
 8001992:	b084      	sub	sp, #16
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
    hspi_st7789 = hspi;
 8001998:	4a30      	ldr	r2, [pc, #192]	@ (8001a5c <ST7789_Init+0xcc>)
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	6013      	str	r3, [r2, #0]

    // Hardware Reset
    HAL_GPIO_WritePin(ST7789_RST_GPIO_Port, ST7789_RST_Pin, GPIO_PIN_SET);
 800199e:	2201      	movs	r2, #1
 80019a0:	2101      	movs	r1, #1
 80019a2:	482f      	ldr	r0, [pc, #188]	@ (8001a60 <ST7789_Init+0xd0>)
 80019a4:	f001 fabe 	bl	8002f24 <HAL_GPIO_WritePin>
    HAL_Delay(10);
 80019a8:	200a      	movs	r0, #10
 80019aa:	f000 fecd 	bl	8002748 <HAL_Delay>
    HAL_GPIO_WritePin(ST7789_RST_GPIO_Port, ST7789_RST_Pin, GPIO_PIN_RESET);
 80019ae:	2200      	movs	r2, #0
 80019b0:	2101      	movs	r1, #1
 80019b2:	482b      	ldr	r0, [pc, #172]	@ (8001a60 <ST7789_Init+0xd0>)
 80019b4:	f001 fab6 	bl	8002f24 <HAL_GPIO_WritePin>
    HAL_Delay(10);
 80019b8:	200a      	movs	r0, #10
 80019ba:	f000 fec5 	bl	8002748 <HAL_Delay>
    HAL_GPIO_WritePin(ST7789_RST_GPIO_Port, ST7789_RST_Pin, GPIO_PIN_SET);
 80019be:	2201      	movs	r2, #1
 80019c0:	2101      	movs	r1, #1
 80019c2:	4827      	ldr	r0, [pc, #156]	@ (8001a60 <ST7789_Init+0xd0>)
 80019c4:	f001 faae 	bl	8002f24 <HAL_GPIO_WritePin>
    HAL_Delay(120); // Wait for reset to complete
 80019c8:	2078      	movs	r0, #120	@ 0x78
 80019ca:	f000 febd 	bl	8002748 <HAL_Delay>

    // Backlight ON
    ST7789_SetBacklight(1);
 80019ce:	2001      	movs	r0, #1
 80019d0:	f000 fa40 	bl	8001e54 <ST7789_SetBacklight>
    HAL_Delay(10);
 80019d4:	200a      	movs	r0, #10
 80019d6:	f000 feb7 	bl	8002748 <HAL_Delay>

    // Initial sequence for ST7789V2 (common for 1.69inch)
    ST7789_WriteCommand(ST7789_SWRESET); // Software reset
 80019da:	2001      	movs	r0, #1
 80019dc:	f7ff ff48 	bl	8001870 <ST7789_WriteCommand>
    HAL_Delay(150);
 80019e0:	2096      	movs	r0, #150	@ 0x96
 80019e2:	f000 feb1 	bl	8002748 <HAL_Delay>

    ST7789_WriteCommand(ST7789_SLPOUT);  // Exit sleep
 80019e6:	2011      	movs	r0, #17
 80019e8:	f7ff ff42 	bl	8001870 <ST7789_WriteCommand>
    HAL_Delay(10);
 80019ec:	200a      	movs	r0, #10
 80019ee:	f000 feab 	bl	8002748 <HAL_Delay>

    ST7789_WriteCommand(ST7789_COLMOD);  // Set color mode
 80019f2:	203a      	movs	r0, #58	@ 0x3a
 80019f4:	f7ff ff3c 	bl	8001870 <ST7789_WriteCommand>
    uint8_t data_colmod[] = {0x05};      // 16-bit color (RGB565)
 80019f8:	2305      	movs	r3, #5
 80019fa:	733b      	strb	r3, [r7, #12]
    ST7789_WriteData(data_colmod, 1);
 80019fc:	f107 030c 	add.w	r3, r7, #12
 8001a00:	2101      	movs	r1, #1
 8001a02:	4618      	mov	r0, r3
 8001a04:	f7ff ff52 	bl	80018ac <ST7789_WriteData>
    HAL_Delay(10);
 8001a08:	200a      	movs	r0, #10
 8001a0a:	f000 fe9d 	bl	8002748 <HAL_Delay>

    ST7789_WriteCommand(ST7789_MADCTL);  // Memory Data Access Control
 8001a0e:	2036      	movs	r0, #54	@ 0x36
 8001a10:	f7ff ff2e 	bl	8001870 <ST7789_WriteCommand>
    uint8_t data_madctl[] = {0x00};      // Default: MX=0, MY=0, MV=0, ML=0, RGB=0 (Portrait, top-to-bottom, left-to-right)
 8001a14:	2300      	movs	r3, #0
 8001a16:	723b      	strb	r3, [r7, #8]
    // 0x60: MV + MX (90deg landscape)
    // 0xA0: MY + MV (270deg landscape)
    // 0xC0: MY + MX + MV + ML (Portrait, 180deg)
    // For 1.69" often 0x00 or 0x60 (landscape)
    // Let's use 0x00 for initial portrait and add rotation function.
    ST7789_WriteData(data_madctl, 1);
 8001a18:	f107 0308 	add.w	r3, r7, #8
 8001a1c:	2101      	movs	r1, #1
 8001a1e:	4618      	mov	r0, r3
 8001a20:	f7ff ff44 	bl	80018ac <ST7789_WriteData>
    HAL_Delay(10);
 8001a24:	200a      	movs	r0, #10
 8001a26:	f000 fe8f 	bl	8002748 <HAL_Delay>
    //
    // ST7789_WriteCommand(0xB7); // Gate Control
    // uint8_t data_gate[] = {0x35};
    // ST7789_WriteData(data_gate, 1);

    ST7789_WriteCommand(ST7789_INVON);   // Inversion ON
 8001a2a:	2021      	movs	r0, #33	@ 0x21
 8001a2c:	f7ff ff20 	bl	8001870 <ST7789_WriteCommand>
    HAL_Delay(10);
 8001a30:	200a      	movs	r0, #10
 8001a32:	f000 fe89 	bl	8002748 <HAL_Delay>

    ST7789_WriteCommand(ST7789_NORON);   // Normal display mode
 8001a36:	2013      	movs	r0, #19
 8001a38:	f7ff ff1a 	bl	8001870 <ST7789_WriteCommand>
    HAL_Delay(10);
 8001a3c:	200a      	movs	r0, #10
 8001a3e:	f000 fe83 	bl	8002748 <HAL_Delay>

    ST7789_WriteCommand(ST7789_DISPON);  // Display ON
 8001a42:	2029      	movs	r0, #41	@ 0x29
 8001a44:	f7ff ff14 	bl	8001870 <ST7789_WriteCommand>
    HAL_Delay(120);
 8001a48:	2078      	movs	r0, #120	@ 0x78
 8001a4a:	f000 fe7d 	bl	8002748 <HAL_Delay>

    // Initial fill to black
    ST7789_FillScreen(ST7789_BLACK);
 8001a4e:	2000      	movs	r0, #0
 8001a50:	f000 f808 	bl	8001a64 <ST7789_FillScreen>
}
 8001a54:	bf00      	nop
 8001a56:	3710      	adds	r7, #16
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	bd80      	pop	{r7, pc}
 8001a5c:	20000310 	.word	0x20000310
 8001a60:	42020800 	.word	0x42020800

08001a64 <ST7789_FillScreen>:

void ST7789_FillScreen(uint16_t color) {
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b084      	sub	sp, #16
 8001a68:	af02      	add	r7, sp, #8
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	80fb      	strh	r3, [r7, #6]
    ST7789_FillRectangle(0, 0, ST7789_WIDTH, ST7789_HEIGHT, color);
 8001a6e:	88fb      	ldrh	r3, [r7, #6]
 8001a70:	9300      	str	r3, [sp, #0]
 8001a72:	f44f 738c 	mov.w	r3, #280	@ 0x118
 8001a76:	22f0      	movs	r2, #240	@ 0xf0
 8001a78:	2100      	movs	r1, #0
 8001a7a:	2000      	movs	r0, #0
 8001a7c:	f000 f83c 	bl	8001af8 <ST7789_FillRectangle>
}
 8001a80:	bf00      	nop
 8001a82:	3708      	adds	r7, #8
 8001a84:	46bd      	mov	sp, r7
 8001a86:	bd80      	pop	{r7, pc}

08001a88 <ST7789_DrawPixel>:

void ST7789_DrawPixel(int16_t x, int16_t y, uint16_t color) {
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b084      	sub	sp, #16
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	4603      	mov	r3, r0
 8001a90:	80fb      	strh	r3, [r7, #6]
 8001a92:	460b      	mov	r3, r1
 8001a94:	80bb      	strh	r3, [r7, #4]
 8001a96:	4613      	mov	r3, r2
 8001a98:	807b      	strh	r3, [r7, #2]
    if ((x < 0) || (x >= ST7789_WIDTH) || (y < 0) || (y >= ST7789_HEIGHT)) return;
 8001a9a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	db25      	blt.n	8001aee <ST7789_DrawPixel+0x66>
 8001aa2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001aa6:	2bef      	cmp	r3, #239	@ 0xef
 8001aa8:	dc21      	bgt.n	8001aee <ST7789_DrawPixel+0x66>
 8001aaa:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	db1d      	blt.n	8001aee <ST7789_DrawPixel+0x66>
 8001ab2:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001ab6:	f5b3 7f8c 	cmp.w	r3, #280	@ 0x118
 8001aba:	da18      	bge.n	8001aee <ST7789_DrawPixel+0x66>
    ST7789_SetAddressWindow(x, y, x + 1, y + 1);
 8001abc:	88f8      	ldrh	r0, [r7, #6]
 8001abe:	88b9      	ldrh	r1, [r7, #4]
 8001ac0:	88fb      	ldrh	r3, [r7, #6]
 8001ac2:	3301      	adds	r3, #1
 8001ac4:	b29a      	uxth	r2, r3
 8001ac6:	88bb      	ldrh	r3, [r7, #4]
 8001ac8:	3301      	adds	r3, #1
 8001aca:	b29b      	uxth	r3, r3
 8001acc:	f7ff ff0e 	bl	80018ec <ST7789_SetAddressWindow>
    uint8_t data[2];
    data[0] = (uint8_t)(color >> 8);
 8001ad0:	887b      	ldrh	r3, [r7, #2]
 8001ad2:	0a1b      	lsrs	r3, r3, #8
 8001ad4:	b29b      	uxth	r3, r3
 8001ad6:	b2db      	uxtb	r3, r3
 8001ad8:	733b      	strb	r3, [r7, #12]
    data[1] = (uint8_t)(color & 0xFF);
 8001ada:	887b      	ldrh	r3, [r7, #2]
 8001adc:	b2db      	uxtb	r3, r3
 8001ade:	737b      	strb	r3, [r7, #13]
    ST7789_WriteData(data, 2);
 8001ae0:	f107 030c 	add.w	r3, r7, #12
 8001ae4:	2102      	movs	r1, #2
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	f7ff fee0 	bl	80018ac <ST7789_WriteData>
 8001aec:	e000      	b.n	8001af0 <ST7789_DrawPixel+0x68>
    if ((x < 0) || (x >= ST7789_WIDTH) || (y < 0) || (y >= ST7789_HEIGHT)) return;
 8001aee:	bf00      	nop
}
 8001af0:	3710      	adds	r7, #16
 8001af2:	46bd      	mov	sp, r7
 8001af4:	bd80      	pop	{r7, pc}
	...

08001af8 <ST7789_FillRectangle>:

void ST7789_FillRectangle(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color) {
 8001af8:	b590      	push	{r4, r7, lr}
 8001afa:	b085      	sub	sp, #20
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	4604      	mov	r4, r0
 8001b00:	4608      	mov	r0, r1
 8001b02:	4611      	mov	r1, r2
 8001b04:	461a      	mov	r2, r3
 8001b06:	4623      	mov	r3, r4
 8001b08:	80fb      	strh	r3, [r7, #6]
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	80bb      	strh	r3, [r7, #4]
 8001b0e:	460b      	mov	r3, r1
 8001b10:	807b      	strh	r3, [r7, #2]
 8001b12:	4613      	mov	r3, r2
 8001b14:	803b      	strh	r3, [r7, #0]
    if ((x >= ST7789_WIDTH) || (y >= ST7789_HEIGHT)) return;
 8001b16:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001b1a:	2bef      	cmp	r3, #239	@ 0xef
 8001b1c:	dc5a      	bgt.n	8001bd4 <ST7789_FillRectangle+0xdc>
 8001b1e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001b22:	f5b3 7f8c 	cmp.w	r3, #280	@ 0x118
 8001b26:	da55      	bge.n	8001bd4 <ST7789_FillRectangle+0xdc>
    if ((x + w - 1) >= ST7789_WIDTH) w = ST7789_WIDTH - x;
 8001b28:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001b2c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001b30:	4413      	add	r3, r2
 8001b32:	2bf0      	cmp	r3, #240	@ 0xf0
 8001b34:	dd04      	ble.n	8001b40 <ST7789_FillRectangle+0x48>
 8001b36:	88fb      	ldrh	r3, [r7, #6]
 8001b38:	f1c3 03f0 	rsb	r3, r3, #240	@ 0xf0
 8001b3c:	b29b      	uxth	r3, r3
 8001b3e:	807b      	strh	r3, [r7, #2]
    if ((y + h - 1) >= ST7789_HEIGHT) h = ST7789_HEIGHT - y;
 8001b40:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8001b44:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001b48:	4413      	add	r3, r2
 8001b4a:	f5b3 7f8c 	cmp.w	r3, #280	@ 0x118
 8001b4e:	dd04      	ble.n	8001b5a <ST7789_FillRectangle+0x62>
 8001b50:	88bb      	ldrh	r3, [r7, #4]
 8001b52:	f5c3 738c 	rsb	r3, r3, #280	@ 0x118
 8001b56:	b29b      	uxth	r3, r3
 8001b58:	803b      	strh	r3, [r7, #0]

    ST7789_SetAddressWindow(x, y, x + w - 1, y + h - 1);
 8001b5a:	88f8      	ldrh	r0, [r7, #6]
 8001b5c:	88b9      	ldrh	r1, [r7, #4]
 8001b5e:	88fa      	ldrh	r2, [r7, #6]
 8001b60:	887b      	ldrh	r3, [r7, #2]
 8001b62:	4413      	add	r3, r2
 8001b64:	b29b      	uxth	r3, r3
 8001b66:	3b01      	subs	r3, #1
 8001b68:	b29c      	uxth	r4, r3
 8001b6a:	88ba      	ldrh	r2, [r7, #4]
 8001b6c:	883b      	ldrh	r3, [r7, #0]
 8001b6e:	4413      	add	r3, r2
 8001b70:	b29b      	uxth	r3, r3
 8001b72:	3b01      	subs	r3, #1
 8001b74:	b29b      	uxth	r3, r3
 8001b76:	4622      	mov	r2, r4
 8001b78:	f7ff feb8 	bl	80018ec <ST7789_SetAddressWindow>

    uint8_t data[2];
    data[0] = (uint8_t)(color >> 8);
 8001b7c:	8c3b      	ldrh	r3, [r7, #32]
 8001b7e:	0a1b      	lsrs	r3, r3, #8
 8001b80:	b29b      	uxth	r3, r3
 8001b82:	b2db      	uxtb	r3, r3
 8001b84:	723b      	strb	r3, [r7, #8]
    data[1] = (uint8_t)(color & 0xFF);
 8001b86:	8c3b      	ldrh	r3, [r7, #32]
 8001b88:	b2db      	uxtb	r3, r3
 8001b8a:	727b      	strb	r3, [r7, #9]

    uint32_t i = 0;
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	60fb      	str	r3, [r7, #12]
    ST7789_Select();
 8001b90:	f7ff fe56 	bl	8001840 <ST7789_Select>
    HAL_GPIO_WritePin(ST7789_DC_GPIO_Port, ST7789_DC_Pin, GPIO_PIN_SET); // Data mode
 8001b94:	2201      	movs	r2, #1
 8001b96:	2101      	movs	r1, #1
 8001b98:	4810      	ldr	r0, [pc, #64]	@ (8001bdc <ST7789_FillRectangle+0xe4>)
 8001b9a:	f001 f9c3 	bl	8002f24 <HAL_GPIO_WritePin>

    // Transmit in chunks if the buffer is large, or just directly
    for (i = 0; i < (uint32_t)w * h; i++) {
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	60fb      	str	r3, [r7, #12]
 8001ba2:	e00b      	b.n	8001bbc <ST7789_FillRectangle+0xc4>
        HAL_SPI_Transmit(hspi_st7789, data, 2, HAL_MAX_DELAY);
 8001ba4:	4b0e      	ldr	r3, [pc, #56]	@ (8001be0 <ST7789_FillRectangle+0xe8>)
 8001ba6:	6818      	ldr	r0, [r3, #0]
 8001ba8:	f107 0108 	add.w	r1, r7, #8
 8001bac:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001bb0:	2202      	movs	r2, #2
 8001bb2:	f006 f885 	bl	8007cc0 <HAL_SPI_Transmit>
    for (i = 0; i < (uint32_t)w * h; i++) {
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	3301      	adds	r3, #1
 8001bba:	60fb      	str	r3, [r7, #12]
 8001bbc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001bc0:	f9b7 2000 	ldrsh.w	r2, [r7]
 8001bc4:	fb02 f303 	mul.w	r3, r2, r3
 8001bc8:	68fa      	ldr	r2, [r7, #12]
 8001bca:	429a      	cmp	r2, r3
 8001bcc:	d3ea      	bcc.n	8001ba4 <ST7789_FillRectangle+0xac>
    }
    ST7789_Unselect();
 8001bce:	f7ff fe43 	bl	8001858 <ST7789_Unselect>
 8001bd2:	e000      	b.n	8001bd6 <ST7789_FillRectangle+0xde>
    if ((x >= ST7789_WIDTH) || (y >= ST7789_HEIGHT)) return;
 8001bd4:	bf00      	nop
}
 8001bd6:	3714      	adds	r7, #20
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	bd90      	pop	{r4, r7, pc}
 8001bdc:	42020400 	.word	0x42020400
 8001be0:	20000310 	.word	0x20000310

08001be4 <ST7789_DrawChar>:
        if (e2 < dy) { err += dx; y0 += sy; }
    }
}

// ** NEW ST7789_DrawChar for 7x11 Row-Major, MSB-Left Font **
void ST7789_DrawChar(int16_t x, int16_t y, char ch, const FontDef_t *font, uint16_t color, uint16_t background_color) {
 8001be4:	b590      	push	{r4, r7, lr}
 8001be6:	b08b      	sub	sp, #44	@ 0x2c
 8001be8:	af02      	add	r7, sp, #8
 8001bea:	607b      	str	r3, [r7, #4]
 8001bec:	4603      	mov	r3, r0
 8001bee:	81fb      	strh	r3, [r7, #14]
 8001bf0:	460b      	mov	r3, r1
 8001bf2:	81bb      	strh	r3, [r7, #12]
 8001bf4:	4613      	mov	r3, r2
 8001bf6:	72fb      	strb	r3, [r7, #11]
    if ((ch < font->firstChar) || (ch > font->lastChar)) {
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	799b      	ldrb	r3, [r3, #6]
 8001bfc:	7afa      	ldrb	r2, [r7, #11]
 8001bfe:	429a      	cmp	r2, r3
 8001c00:	d304      	bcc.n	8001c0c <ST7789_DrawChar+0x28>
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	79db      	ldrb	r3, [r3, #7]
 8001c06:	7afa      	ldrb	r2, [r7, #11]
 8001c08:	429a      	cmp	r2, r3
 8001c0a:	d90f      	bls.n	8001c2c <ST7789_DrawChar+0x48>
        ST7789_FillRectangle(x, y, font->width, font->height, background_color);
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	791b      	ldrb	r3, [r3, #4]
 8001c10:	b21a      	sxth	r2, r3
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	795b      	ldrb	r3, [r3, #5]
 8001c16:	b21c      	sxth	r4, r3
 8001c18:	f9b7 100c 	ldrsh.w	r1, [r7, #12]
 8001c1c:	f9b7 000e 	ldrsh.w	r0, [r7, #14]
 8001c20:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8001c22:	9300      	str	r3, [sp, #0]
 8001c24:	4623      	mov	r3, r4
 8001c26:	f7ff ff67 	bl	8001af8 <ST7789_FillRectangle>
        return;
 8001c2a:	e097      	b.n	8001d5c <ST7789_DrawChar+0x178>
    }

    uint8_t char_index = ch - font->firstChar;
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	799b      	ldrb	r3, [r3, #6]
 8001c30:	7afa      	ldrb	r2, [r7, #11]
 8001c32:	1ad3      	subs	r3, r2, r3
 8001c34:	777b      	strb	r3, [r7, #29]
    // For a Row-Major font, each character occupies `font->height` bytes in the data array.
    uint32_t char_block_size = font->height; // Each character is 11 bytes for 7x11 font
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	795b      	ldrb	r3, [r3, #5]
 8001c3a:	61bb      	str	r3, [r7, #24]
    uint32_t char_offset = char_index * char_block_size;
 8001c3c:	7f7a      	ldrb	r2, [r7, #29]
 8001c3e:	69bb      	ldr	r3, [r7, #24]
 8001c40:	fb02 f303 	mul.w	r3, r2, r3
 8001c44:	617b      	str	r3, [r7, #20]

    printf("\r\n--- Drawing Char '%c' (ASCII %d) at screen_xy=(%d, %d) ---\r\n", ch, ch, x, y);
 8001c46:	7af9      	ldrb	r1, [r7, #11]
 8001c48:	7afa      	ldrb	r2, [r7, #11]
 8001c4a:	f9b7 000e 	ldrsh.w	r0, [r7, #14]
 8001c4e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001c52:	9300      	str	r3, [sp, #0]
 8001c54:	4603      	mov	r3, r0
 8001c56:	4843      	ldr	r0, [pc, #268]	@ (8001d64 <ST7789_DrawChar+0x180>)
 8001c58:	f008 fb46 	bl	800a2e8 <iprintf>
    printf("Font Properties: width=%d, height=%d, firstChar=%d, lastChar=%d\r\n", font->width, font->height, font->firstChar, font->lastChar);
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	791b      	ldrb	r3, [r3, #4]
 8001c60:	4619      	mov	r1, r3
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	795b      	ldrb	r3, [r3, #5]
 8001c66:	461a      	mov	r2, r3
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	799b      	ldrb	r3, [r3, #6]
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	79db      	ldrb	r3, [r3, #7]
 8001c72:	9300      	str	r3, [sp, #0]
 8001c74:	4603      	mov	r3, r0
 8001c76:	483c      	ldr	r0, [pc, #240]	@ (8001d68 <ST7789_DrawChar+0x184>)
 8001c78:	f008 fb36 	bl	800a2e8 <iprintf>
    printf("Char Offset in data array: %lu\r\n", char_offset);
 8001c7c:	6979      	ldr	r1, [r7, #20]
 8001c7e:	483b      	ldr	r0, [pc, #236]	@ (8001d6c <ST7789_DrawChar+0x188>)
 8001c80:	f008 fb32 	bl	800a2e8 <iprintf>

    // Loop through the rows (Y-axis) of the character
    for (uint8_t row = 0; row < font->height; row++) { // row goes 0 to 10 for 11 pixels height
 8001c84:	2300      	movs	r3, #0
 8001c86:	77fb      	strb	r3, [r7, #31]
 8001c88:	e05e      	b.n	8001d48 <ST7789_DrawChar+0x164>
        uint8_t pixel_row_data = font->data[char_offset + row]; // Get the byte for the current row
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681a      	ldr	r2, [r3, #0]
 8001c8e:	7ff9      	ldrb	r1, [r7, #31]
 8001c90:	697b      	ldr	r3, [r7, #20]
 8001c92:	440b      	add	r3, r1
 8001c94:	4413      	add	r3, r2
 8001c96:	781b      	ldrb	r3, [r3, #0]
 8001c98:	74fb      	strb	r3, [r7, #19]
        printf("  Row %d (relative y=%d), Raw Byte: 0x%02X\r\n", row, y + row, pixel_row_data);
 8001c9a:	7ff9      	ldrb	r1, [r7, #31]
 8001c9c:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8001ca0:	7ffb      	ldrb	r3, [r7, #31]
 8001ca2:	441a      	add	r2, r3
 8001ca4:	7cfb      	ldrb	r3, [r7, #19]
 8001ca6:	4832      	ldr	r0, [pc, #200]	@ (8001d70 <ST7789_DrawChar+0x18c>)
 8001ca8:	f008 fb1e 	bl	800a2e8 <iprintf>

        // Loop through the active bits (X-axis pixels) within this row byte.
        // Assuming MSB (bit 7) is the leftmost pixel (X=0) and subsequent bits move right.
        // The font is 7 pixels wide, so bit 0 is likely unused.
        for (uint8_t bit = 0; bit < font->width; bit++) { // bit goes 0 to 6 for 7 pixels width
 8001cac:	2300      	movs	r3, #0
 8001cae:	77bb      	strb	r3, [r7, #30]
 8001cb0:	e042      	b.n	8001d38 <ST7789_DrawChar+0x154>
            // To get the bit corresponding to X=0 (leftmost) when `bit` is 0,
            // we need to access `bit 7` of the byte.
            // When `bit` is 1 (X=1), we need `bit 6` of the byte, and so on.
            // So, the bit index in the byte is `(7 - bit)`.
            if ((pixel_row_data >> (7 - bit)) & 0x01) { // Check if the bit is set
 8001cb2:	7cfa      	ldrb	r2, [r7, #19]
 8001cb4:	7fbb      	ldrb	r3, [r7, #30]
 8001cb6:	f1c3 0307 	rsb	r3, r3, #7
 8001cba:	fa42 f303 	asr.w	r3, r2, r3
 8001cbe:	f003 0301 	and.w	r3, r3, #1
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d021      	beq.n	8001d0a <ST7789_DrawChar+0x126>
                ST7789_DrawPixel(x + bit, y + row, color); // x+bit for horizontal, y+row for vertical
 8001cc6:	7fbb      	ldrb	r3, [r7, #30]
 8001cc8:	b29a      	uxth	r2, r3
 8001cca:	89fb      	ldrh	r3, [r7, #14]
 8001ccc:	4413      	add	r3, r2
 8001cce:	b29b      	uxth	r3, r3
 8001cd0:	b218      	sxth	r0, r3
 8001cd2:	7ffb      	ldrb	r3, [r7, #31]
 8001cd4:	b29a      	uxth	r2, r3
 8001cd6:	89bb      	ldrh	r3, [r7, #12]
 8001cd8:	4413      	add	r3, r2
 8001cda:	b29b      	uxth	r3, r3
 8001cdc:	b21b      	sxth	r3, r3
 8001cde:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 8001ce0:	4619      	mov	r1, r3
 8001ce2:	f7ff fed1 	bl	8001a88 <ST7789_DrawPixel>
                printf("    Pixel ON: screen_xy=(%d, %d), font_bit_idx=%d (maps to X+%d)\r\n",
 8001ce6:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001cea:	7fbb      	ldrb	r3, [r7, #30]
 8001cec:	18d1      	adds	r1, r2, r3
 8001cee:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8001cf2:	7ffb      	ldrb	r3, [r7, #31]
 8001cf4:	441a      	add	r2, r3
 8001cf6:	7fbb      	ldrb	r3, [r7, #30]
 8001cf8:	f1c3 0007 	rsb	r0, r3, #7
 8001cfc:	7fbb      	ldrb	r3, [r7, #30]
 8001cfe:	9300      	str	r3, [sp, #0]
 8001d00:	4603      	mov	r3, r0
 8001d02:	481c      	ldr	r0, [pc, #112]	@ (8001d74 <ST7789_DrawChar+0x190>)
 8001d04:	f008 faf0 	bl	800a2e8 <iprintf>
 8001d08:	e013      	b.n	8001d32 <ST7789_DrawChar+0x14e>
                       x + bit, y + row, (7 - bit), bit);
            } else {
                if (background_color != color) {
 8001d0a:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8001d0c:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8001d0e:	429a      	cmp	r2, r3
 8001d10:	d00f      	beq.n	8001d32 <ST7789_DrawChar+0x14e>
                    ST7789_DrawPixel(x + bit, y + row, background_color);
 8001d12:	7fbb      	ldrb	r3, [r7, #30]
 8001d14:	b29a      	uxth	r2, r3
 8001d16:	89fb      	ldrh	r3, [r7, #14]
 8001d18:	4413      	add	r3, r2
 8001d1a:	b29b      	uxth	r3, r3
 8001d1c:	b218      	sxth	r0, r3
 8001d1e:	7ffb      	ldrb	r3, [r7, #31]
 8001d20:	b29a      	uxth	r2, r3
 8001d22:	89bb      	ldrh	r3, [r7, #12]
 8001d24:	4413      	add	r3, r2
 8001d26:	b29b      	uxth	r3, r3
 8001d28:	b21b      	sxth	r3, r3
 8001d2a:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8001d2c:	4619      	mov	r1, r3
 8001d2e:	f7ff feab 	bl	8001a88 <ST7789_DrawPixel>
        for (uint8_t bit = 0; bit < font->width; bit++) { // bit goes 0 to 6 for 7 pixels width
 8001d32:	7fbb      	ldrb	r3, [r7, #30]
 8001d34:	3301      	adds	r3, #1
 8001d36:	77bb      	strb	r3, [r7, #30]
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	791b      	ldrb	r3, [r3, #4]
 8001d3c:	7fba      	ldrb	r2, [r7, #30]
 8001d3e:	429a      	cmp	r2, r3
 8001d40:	d3b7      	bcc.n	8001cb2 <ST7789_DrawChar+0xce>
    for (uint8_t row = 0; row < font->height; row++) { // row goes 0 to 10 for 11 pixels height
 8001d42:	7ffb      	ldrb	r3, [r7, #31]
 8001d44:	3301      	adds	r3, #1
 8001d46:	77fb      	strb	r3, [r7, #31]
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	795b      	ldrb	r3, [r3, #5]
 8001d4c:	7ffa      	ldrb	r2, [r7, #31]
 8001d4e:	429a      	cmp	r2, r3
 8001d50:	d39b      	bcc.n	8001c8a <ST7789_DrawChar+0xa6>
                    // printf("    Pixel OFF: screen_xy=(%d, %d), font_bit_idx=%d\r\n", x + bit, y + row, (7-bit)); // Uncomment for more verbose OFF pixel debugging
                }
            }
        }
    }
    printf("--- End Char '%c' ---\r\n", ch);
 8001d52:	7afb      	ldrb	r3, [r7, #11]
 8001d54:	4619      	mov	r1, r3
 8001d56:	4808      	ldr	r0, [pc, #32]	@ (8001d78 <ST7789_DrawChar+0x194>)
 8001d58:	f008 fac6 	bl	800a2e8 <iprintf>
}
 8001d5c:	3724      	adds	r7, #36	@ 0x24
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	bd90      	pop	{r4, r7, pc}
 8001d62:	bf00      	nop
 8001d64:	0800c604 	.word	0x0800c604
 8001d68:	0800c644 	.word	0x0800c644
 8001d6c:	0800c688 	.word	0x0800c688
 8001d70:	0800c6ac 	.word	0x0800c6ac
 8001d74:	0800c6dc 	.word	0x0800c6dc
 8001d78:	0800c720 	.word	0x0800c720

08001d7c <ST7789_DrawString>:

void ST7789_DrawString(int16_t x, int16_t y, const char* str, const FontDef_t *font, uint16_t color, uint16_t background_color) {
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b086      	sub	sp, #24
 8001d80:	af02      	add	r7, sp, #8
 8001d82:	60ba      	str	r2, [r7, #8]
 8001d84:	607b      	str	r3, [r7, #4]
 8001d86:	4603      	mov	r3, r0
 8001d88:	81fb      	strh	r3, [r7, #14]
 8001d8a:	460b      	mov	r3, r1
 8001d8c:	81bb      	strh	r3, [r7, #12]
    while (*str) { // Loop until the null-terminator character '\0' is reached
 8001d8e:	e016      	b.n	8001dbe <ST7789_DrawString+0x42>
        // Draw the current character
        ST7789_DrawChar(x, y, *str, font, color, background_color);
 8001d90:	68bb      	ldr	r3, [r7, #8]
 8001d92:	781a      	ldrb	r2, [r3, #0]
 8001d94:	f9b7 100c 	ldrsh.w	r1, [r7, #12]
 8001d98:	f9b7 000e 	ldrsh.w	r0, [r7, #14]
 8001d9c:	8bbb      	ldrh	r3, [r7, #28]
 8001d9e:	9301      	str	r3, [sp, #4]
 8001da0:	8b3b      	ldrh	r3, [r7, #24]
 8001da2:	9300      	str	r3, [sp, #0]
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	f7ff ff1d 	bl	8001be4 <ST7789_DrawChar>

        // Advance the X position for the next character
        x += font->width;
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	791b      	ldrb	r3, [r3, #4]
 8001dae:	461a      	mov	r2, r3
 8001db0:	89fb      	ldrh	r3, [r7, #14]
 8001db2:	4413      	add	r3, r2
 8001db4:	b29b      	uxth	r3, r3
 8001db6:	81fb      	strh	r3, [r7, #14]

        // Move to the next character in the string
        str++;
 8001db8:	68bb      	ldr	r3, [r7, #8]
 8001dba:	3301      	adds	r3, #1
 8001dbc:	60bb      	str	r3, [r7, #8]
    while (*str) { // Loop until the null-terminator character '\0' is reached
 8001dbe:	68bb      	ldr	r3, [r7, #8]
 8001dc0:	781b      	ldrb	r3, [r3, #0]
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d1e4      	bne.n	8001d90 <ST7789_DrawString+0x14>
    }
}
 8001dc6:	bf00      	nop
 8001dc8:	bf00      	nop
 8001dca:	3710      	adds	r7, #16
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	bd80      	pop	{r7, pc}

08001dd0 <ST7789_WriteString>:

void ST7789_WriteString(int16_t x, int16_t y, const char* str, const FontDef_t *font, uint16_t color, uint16_t bgcolor) {
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b086      	sub	sp, #24
 8001dd4:	af02      	add	r7, sp, #8
 8001dd6:	60ba      	str	r2, [r7, #8]
 8001dd8:	607b      	str	r3, [r7, #4]
 8001dda:	4603      	mov	r3, r0
 8001ddc:	81fb      	strh	r3, [r7, #14]
 8001dde:	460b      	mov	r3, r1
 8001de0:	81bb      	strh	r3, [r7, #12]
    while (*str) {
 8001de2:	e02d      	b.n	8001e40 <ST7789_WriteString+0x70>
        if (x + font->width >= ST7789_WIDTH) { // Wrap text if it exceeds screen width
 8001de4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001de8:	687a      	ldr	r2, [r7, #4]
 8001dea:	7912      	ldrb	r2, [r2, #4]
 8001dec:	4413      	add	r3, r2
 8001dee:	2bef      	cmp	r3, #239	@ 0xef
 8001df0:	dd10      	ble.n	8001e14 <ST7789_WriteString+0x44>
            x = 0;
 8001df2:	2300      	movs	r3, #0
 8001df4:	81fb      	strh	r3, [r7, #14]
            y += font->height;
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	795b      	ldrb	r3, [r3, #5]
 8001dfa:	461a      	mov	r2, r3
 8001dfc:	89bb      	ldrh	r3, [r7, #12]
 8001dfe:	4413      	add	r3, r2
 8001e00:	b29b      	uxth	r3, r3
 8001e02:	81bb      	strh	r3, [r7, #12]
            if (y + font->height >= ST7789_HEIGHT) break; // Don't draw if going off screen
 8001e04:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001e08:	687a      	ldr	r2, [r7, #4]
 8001e0a:	7952      	ldrb	r2, [r2, #5]
 8001e0c:	4413      	add	r3, r2
 8001e0e:	f5b3 7f8c 	cmp.w	r3, #280	@ 0x118
 8001e12:	da1a      	bge.n	8001e4a <ST7789_WriteString+0x7a>
        }
        ST7789_DrawChar(x, y, *str++, font, color, bgcolor);
 8001e14:	68bb      	ldr	r3, [r7, #8]
 8001e16:	1c5a      	adds	r2, r3, #1
 8001e18:	60ba      	str	r2, [r7, #8]
 8001e1a:	781a      	ldrb	r2, [r3, #0]
 8001e1c:	f9b7 100c 	ldrsh.w	r1, [r7, #12]
 8001e20:	f9b7 000e 	ldrsh.w	r0, [r7, #14]
 8001e24:	8bbb      	ldrh	r3, [r7, #28]
 8001e26:	9301      	str	r3, [sp, #4]
 8001e28:	8b3b      	ldrh	r3, [r7, #24]
 8001e2a:	9300      	str	r3, [sp, #0]
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	f7ff fed9 	bl	8001be4 <ST7789_DrawChar>
        x += font->width;
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	791b      	ldrb	r3, [r3, #4]
 8001e36:	461a      	mov	r2, r3
 8001e38:	89fb      	ldrh	r3, [r7, #14]
 8001e3a:	4413      	add	r3, r2
 8001e3c:	b29b      	uxth	r3, r3
 8001e3e:	81fb      	strh	r3, [r7, #14]
    while (*str) {
 8001e40:	68bb      	ldr	r3, [r7, #8]
 8001e42:	781b      	ldrb	r3, [r3, #0]
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d1cd      	bne.n	8001de4 <ST7789_WriteString+0x14>
    }
}
 8001e48:	e000      	b.n	8001e4c <ST7789_WriteString+0x7c>
            if (y + font->height >= ST7789_HEIGHT) break; // Don't draw if going off screen
 8001e4a:	bf00      	nop
}
 8001e4c:	bf00      	nop
 8001e4e:	3710      	adds	r7, #16
 8001e50:	46bd      	mov	sp, r7
 8001e52:	bd80      	pop	{r7, pc}

08001e54 <ST7789_SetBacklight>:

void ST7789_DisplayOff(void) {
    ST7789_WriteCommand(ST7789_DISPOFF);
}

void ST7789_SetBacklight(uint8_t state) {
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b082      	sub	sp, #8
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	71fb      	strb	r3, [r7, #7]
    if (state) {
 8001e5e:	79fb      	ldrb	r3, [r7, #7]
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d005      	beq.n	8001e70 <ST7789_SetBacklight+0x1c>
        HAL_GPIO_WritePin(ST7789_BL_GPIO_Port, ST7789_BL_Pin, GPIO_PIN_SET);
 8001e64:	2201      	movs	r2, #1
 8001e66:	2102      	movs	r1, #2
 8001e68:	4806      	ldr	r0, [pc, #24]	@ (8001e84 <ST7789_SetBacklight+0x30>)
 8001e6a:	f001 f85b 	bl	8002f24 <HAL_GPIO_WritePin>
    } else {
        HAL_GPIO_WritePin(ST7789_BL_GPIO_Port, ST7789_BL_Pin, GPIO_PIN_RESET);
    }
}
 8001e6e:	e004      	b.n	8001e7a <ST7789_SetBacklight+0x26>
        HAL_GPIO_WritePin(ST7789_BL_GPIO_Port, ST7789_BL_Pin, GPIO_PIN_RESET);
 8001e70:	2200      	movs	r2, #0
 8001e72:	2102      	movs	r1, #2
 8001e74:	4803      	ldr	r0, [pc, #12]	@ (8001e84 <ST7789_SetBacklight+0x30>)
 8001e76:	f001 f855 	bl	8002f24 <HAL_GPIO_WritePin>
}
 8001e7a:	bf00      	nop
 8001e7c:	3708      	adds	r7, #8
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	bd80      	pop	{r7, pc}
 8001e82:	bf00      	nop
 8001e84:	42020400 	.word	0x42020400

08001e88 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b082      	sub	sp, #8
 8001e8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001e8e:	4b0b      	ldr	r3, [pc, #44]	@ (8001ebc <HAL_MspInit+0x34>)
 8001e90:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001e94:	4a09      	ldr	r2, [pc, #36]	@ (8001ebc <HAL_MspInit+0x34>)
 8001e96:	f043 0304 	orr.w	r3, r3, #4
 8001e9a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8001e9e:	4b07      	ldr	r3, [pc, #28]	@ (8001ebc <HAL_MspInit+0x34>)
 8001ea0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001ea4:	f003 0304 	and.w	r3, r3, #4
 8001ea8:	607b      	str	r3, [r7, #4]
 8001eaa:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 8001eac:	2004      	movs	r0, #4
 8001eae:	f000 fd1c 	bl	80028ea <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001eb2:	bf00      	nop
 8001eb4:	3708      	adds	r7, #8
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	bd80      	pop	{r7, pc}
 8001eba:	bf00      	nop
 8001ebc:	46020c00 	.word	0x46020c00

08001ec0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b08e      	sub	sp, #56	@ 0x38
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001ec8:	2300      	movs	r3, #0
 8001eca:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t              uwPrescalerValue = 0;
 8001ecc:	2300      	movs	r3, #0
 8001ece:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM17 clock */
  __HAL_RCC_TIM17_CLK_ENABLE();
 8001ed0:	4b2e      	ldr	r3, [pc, #184]	@ (8001f8c <HAL_InitTick+0xcc>)
 8001ed2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8001ed6:	4a2d      	ldr	r2, [pc, #180]	@ (8001f8c <HAL_InitTick+0xcc>)
 8001ed8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001edc:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8001ee0:	4b2a      	ldr	r3, [pc, #168]	@ (8001f8c <HAL_InitTick+0xcc>)
 8001ee2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8001ee6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001eea:	60fb      	str	r3, [r7, #12]
 8001eec:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001eee:	f107 0210 	add.w	r2, r7, #16
 8001ef2:	f107 0314 	add.w	r3, r7, #20
 8001ef6:	4611      	mov	r1, r2
 8001ef8:	4618      	mov	r0, r3
 8001efa:	f003 f875 	bl	8004fe8 <HAL_RCC_GetClockConfig>

  /* Compute TIM17 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001efe:	f003 f84b 	bl	8004f98 <HAL_RCC_GetPCLK2Freq>
 8001f02:	6338      	str	r0, [r7, #48]	@ 0x30

  /* Compute the prescaler value to have TIM17 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001f04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001f06:	4a22      	ldr	r2, [pc, #136]	@ (8001f90 <HAL_InitTick+0xd0>)
 8001f08:	fba2 2303 	umull	r2, r3, r2, r3
 8001f0c:	0c9b      	lsrs	r3, r3, #18
 8001f0e:	3b01      	subs	r3, #1
 8001f10:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Initialize TIM17 */
  htim17.Instance = TIM17;
 8001f12:	4b20      	ldr	r3, [pc, #128]	@ (8001f94 <HAL_InitTick+0xd4>)
 8001f14:	4a20      	ldr	r2, [pc, #128]	@ (8001f98 <HAL_InitTick+0xd8>)
 8001f16:	601a      	str	r2, [r3, #0]
   * Period = [(TIM17CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim17.Init.Period = (1000000U / 1000U) - 1U;
 8001f18:	4b1e      	ldr	r3, [pc, #120]	@ (8001f94 <HAL_InitTick+0xd4>)
 8001f1a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001f1e:	60da      	str	r2, [r3, #12]
  htim17.Init.Prescaler = uwPrescalerValue;
 8001f20:	4a1c      	ldr	r2, [pc, #112]	@ (8001f94 <HAL_InitTick+0xd4>)
 8001f22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001f24:	6053      	str	r3, [r2, #4]
  htim17.Init.ClockDivision = 0;
 8001f26:	4b1b      	ldr	r3, [pc, #108]	@ (8001f94 <HAL_InitTick+0xd4>)
 8001f28:	2200      	movs	r2, #0
 8001f2a:	611a      	str	r2, [r3, #16]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f2c:	4b19      	ldr	r3, [pc, #100]	@ (8001f94 <HAL_InitTick+0xd4>)
 8001f2e:	2200      	movs	r2, #0
 8001f30:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim17);
 8001f32:	4818      	ldr	r0, [pc, #96]	@ (8001f94 <HAL_InitTick+0xd4>)
 8001f34:	f006 fc22 	bl	800877c <HAL_TIM_Base_Init>
 8001f38:	4603      	mov	r3, r0
 8001f3a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  if (status == HAL_OK)
 8001f3e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d118      	bne.n	8001f78 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim17);
 8001f46:	4813      	ldr	r0, [pc, #76]	@ (8001f94 <HAL_InitTick+0xd4>)
 8001f48:	f006 fc7a 	bl	8008840 <HAL_TIM_Base_Start_IT>
 8001f4c:	4603      	mov	r3, r0
 8001f4e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    if (status == HAL_OK)
 8001f52:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d10e      	bne.n	8001f78 <HAL_InitTick+0xb8>
    {
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	2b0f      	cmp	r3, #15
 8001f5e:	d808      	bhi.n	8001f72 <HAL_InitTick+0xb2>
      {
        /* Enable the TIM17 global Interrupt */
        HAL_NVIC_SetPriority(TIM17_IRQn, TickPriority, 0U);
 8001f60:	2200      	movs	r2, #0
 8001f62:	6879      	ldr	r1, [r7, #4]
 8001f64:	2047      	movs	r0, #71	@ 0x47
 8001f66:	f000 fccb 	bl	8002900 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001f6a:	4a0c      	ldr	r2, [pc, #48]	@ (8001f9c <HAL_InitTick+0xdc>)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	6013      	str	r3, [r2, #0]
 8001f70:	e002      	b.n	8001f78 <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 8001f72:	2301      	movs	r3, #1
 8001f74:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
      }
    }
  }

  /* Enable the TIM17 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM17_IRQn);
 8001f78:	2047      	movs	r0, #71	@ 0x47
 8001f7a:	f000 fcdb 	bl	8002934 <HAL_NVIC_EnableIRQ>

 /* Return function status */
  return status;
 8001f7e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
}
 8001f82:	4618      	mov	r0, r3
 8001f84:	3738      	adds	r7, #56	@ 0x38
 8001f86:	46bd      	mov	sp, r7
 8001f88:	bd80      	pop	{r7, pc}
 8001f8a:	bf00      	nop
 8001f8c:	46020c00 	.word	0x46020c00
 8001f90:	431bde83 	.word	0x431bde83
 8001f94:	20000314 	.word	0x20000314
 8001f98:	40014800 	.word	0x40014800
 8001f9c:	20000020 	.word	0x20000020

08001fa0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001fa4:	bf00      	nop
 8001fa6:	e7fd      	b.n	8001fa4 <NMI_Handler+0x4>

08001fa8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001fa8:	b480      	push	{r7}
 8001faa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001fac:	bf00      	nop
 8001fae:	e7fd      	b.n	8001fac <HardFault_Handler+0x4>

08001fb0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001fb4:	bf00      	nop
 8001fb6:	e7fd      	b.n	8001fb4 <MemManage_Handler+0x4>

08001fb8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001fbc:	bf00      	nop
 8001fbe:	e7fd      	b.n	8001fbc <BusFault_Handler+0x4>

08001fc0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001fc4:	bf00      	nop
 8001fc6:	e7fd      	b.n	8001fc4 <UsageFault_Handler+0x4>

08001fc8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001fc8:	b480      	push	{r7}
 8001fca:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001fcc:	bf00      	nop
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd4:	4770      	bx	lr

08001fd6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001fd6:	b480      	push	{r7}
 8001fd8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001fda:	bf00      	nop
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe2:	4770      	bx	lr

08001fe4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001fe8:	bf00      	nop
 8001fea:	46bd      	mov	sp, r7
 8001fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff0:	4770      	bx	lr

08001ff2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ff2:	b480      	push	{r7}
 8001ff4:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ff6:	bf00      	nop
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffe:	4770      	bx	lr

08002000 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI Line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INT_Pin);
 8002004:	2002      	movs	r0, #2
 8002006:	f000 ffa5 	bl	8002f54 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 800200a:	bf00      	nop
 800200c:	bd80      	pop	{r7, pc}

0800200e <EXTI13_IRQHandler>:

/**
  * @brief This function handles EXTI Line13 interrupt.
  */
void EXTI13_IRQHandler(void)
{
 800200e:	b580      	push	{r7, lr}
 8002010:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI13_IRQn 0 */

  /* USER CODE END EXTI13_IRQn 0 */
  BSP_PB_IRQHandler(BUTTON_USER);
 8002012:	2000      	movs	r0, #0
 8002014:	f000 fa46 	bl	80024a4 <BSP_PB_IRQHandler>
  /* USER CODE BEGIN EXTI13_IRQn 1 */

  /* USER CODE END EXTI13_IRQn 1 */
}
 8002018:	bf00      	nop
 800201a:	bd80      	pop	{r7, pc}

0800201c <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8002020:	4802      	ldr	r0, [pc, #8]	@ (800202c <SPI1_IRQHandler+0x10>)
 8002022:	f006 f861 	bl	80080e8 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8002026:	bf00      	nop
 8002028:	bd80      	pop	{r7, pc}
 800202a:	bf00      	nop
 800202c:	20000280 	.word	0x20000280

08002030 <TIM17_IRQHandler>:

/**
  * @brief This function handles TIM17 global interrupt.
  */
void TIM17_IRQHandler(void)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM17_IRQn 0 */

  /* USER CODE END TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8002034:	4802      	ldr	r0, [pc, #8]	@ (8002040 <TIM17_IRQHandler+0x10>)
 8002036:	f006 fca3 	bl	8008980 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM17_IRQn 1 */

  /* USER CODE END TIM17_IRQn 1 */
}
 800203a:	bf00      	nop
 800203c:	bd80      	pop	{r7, pc}
 800203e:	bf00      	nop
 8002040:	20000314 	.word	0x20000314

08002044 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002044:	b480      	push	{r7}
 8002046:	af00      	add	r7, sp, #0
  return 1;
 8002048:	2301      	movs	r3, #1
}
 800204a:	4618      	mov	r0, r3
 800204c:	46bd      	mov	sp, r7
 800204e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002052:	4770      	bx	lr

08002054 <_kill>:

int _kill(int pid, int sig)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	b082      	sub	sp, #8
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
 800205c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800205e:	f008 f95d 	bl	800a31c <__errno>
 8002062:	4603      	mov	r3, r0
 8002064:	2216      	movs	r2, #22
 8002066:	601a      	str	r2, [r3, #0]
  return -1;
 8002068:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800206c:	4618      	mov	r0, r3
 800206e:	3708      	adds	r7, #8
 8002070:	46bd      	mov	sp, r7
 8002072:	bd80      	pop	{r7, pc}

08002074 <_exit>:

void _exit (int status)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b082      	sub	sp, #8
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800207c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002080:	6878      	ldr	r0, [r7, #4]
 8002082:	f7ff ffe7 	bl	8002054 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002086:	bf00      	nop
 8002088:	e7fd      	b.n	8002086 <_exit+0x12>

0800208a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800208a:	b580      	push	{r7, lr}
 800208c:	b086      	sub	sp, #24
 800208e:	af00      	add	r7, sp, #0
 8002090:	60f8      	str	r0, [r7, #12]
 8002092:	60b9      	str	r1, [r7, #8]
 8002094:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002096:	2300      	movs	r3, #0
 8002098:	617b      	str	r3, [r7, #20]
 800209a:	e00a      	b.n	80020b2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800209c:	f3af 8000 	nop.w
 80020a0:	4601      	mov	r1, r0
 80020a2:	68bb      	ldr	r3, [r7, #8]
 80020a4:	1c5a      	adds	r2, r3, #1
 80020a6:	60ba      	str	r2, [r7, #8]
 80020a8:	b2ca      	uxtb	r2, r1
 80020aa:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020ac:	697b      	ldr	r3, [r7, #20]
 80020ae:	3301      	adds	r3, #1
 80020b0:	617b      	str	r3, [r7, #20]
 80020b2:	697a      	ldr	r2, [r7, #20]
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	429a      	cmp	r2, r3
 80020b8:	dbf0      	blt.n	800209c <_read+0x12>
  }

  return len;
 80020ba:	687b      	ldr	r3, [r7, #4]
}
 80020bc:	4618      	mov	r0, r3
 80020be:	3718      	adds	r7, #24
 80020c0:	46bd      	mov	sp, r7
 80020c2:	bd80      	pop	{r7, pc}

080020c4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b086      	sub	sp, #24
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	60f8      	str	r0, [r7, #12]
 80020cc:	60b9      	str	r1, [r7, #8]
 80020ce:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020d0:	2300      	movs	r3, #0
 80020d2:	617b      	str	r3, [r7, #20]
 80020d4:	e009      	b.n	80020ea <_write+0x26>
  {
    __io_putchar(*ptr++);
 80020d6:	68bb      	ldr	r3, [r7, #8]
 80020d8:	1c5a      	adds	r2, r3, #1
 80020da:	60ba      	str	r2, [r7, #8]
 80020dc:	781b      	ldrb	r3, [r3, #0]
 80020de:	4618      	mov	r0, r3
 80020e0:	f000 fa66 	bl	80025b0 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020e4:	697b      	ldr	r3, [r7, #20]
 80020e6:	3301      	adds	r3, #1
 80020e8:	617b      	str	r3, [r7, #20]
 80020ea:	697a      	ldr	r2, [r7, #20]
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	429a      	cmp	r2, r3
 80020f0:	dbf1      	blt.n	80020d6 <_write+0x12>
  }
  return len;
 80020f2:	687b      	ldr	r3, [r7, #4]
}
 80020f4:	4618      	mov	r0, r3
 80020f6:	3718      	adds	r7, #24
 80020f8:	46bd      	mov	sp, r7
 80020fa:	bd80      	pop	{r7, pc}

080020fc <_close>:

int _close(int file)
{
 80020fc:	b480      	push	{r7}
 80020fe:	b083      	sub	sp, #12
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002104:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8002108:	4618      	mov	r0, r3
 800210a:	370c      	adds	r7, #12
 800210c:	46bd      	mov	sp, r7
 800210e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002112:	4770      	bx	lr

08002114 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002114:	b480      	push	{r7}
 8002116:	b083      	sub	sp, #12
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
 800211c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800211e:	683b      	ldr	r3, [r7, #0]
 8002120:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002124:	605a      	str	r2, [r3, #4]
  return 0;
 8002126:	2300      	movs	r3, #0
}
 8002128:	4618      	mov	r0, r3
 800212a:	370c      	adds	r7, #12
 800212c:	46bd      	mov	sp, r7
 800212e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002132:	4770      	bx	lr

08002134 <_isatty>:

int _isatty(int file)
{
 8002134:	b480      	push	{r7}
 8002136:	b083      	sub	sp, #12
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800213c:	2301      	movs	r3, #1
}
 800213e:	4618      	mov	r0, r3
 8002140:	370c      	adds	r7, #12
 8002142:	46bd      	mov	sp, r7
 8002144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002148:	4770      	bx	lr

0800214a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800214a:	b480      	push	{r7}
 800214c:	b085      	sub	sp, #20
 800214e:	af00      	add	r7, sp, #0
 8002150:	60f8      	str	r0, [r7, #12]
 8002152:	60b9      	str	r1, [r7, #8]
 8002154:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002156:	2300      	movs	r3, #0
}
 8002158:	4618      	mov	r0, r3
 800215a:	3714      	adds	r7, #20
 800215c:	46bd      	mov	sp, r7
 800215e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002162:	4770      	bx	lr

08002164 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b086      	sub	sp, #24
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800216c:	4a14      	ldr	r2, [pc, #80]	@ (80021c0 <_sbrk+0x5c>)
 800216e:	4b15      	ldr	r3, [pc, #84]	@ (80021c4 <_sbrk+0x60>)
 8002170:	1ad3      	subs	r3, r2, r3
 8002172:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002174:	697b      	ldr	r3, [r7, #20]
 8002176:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002178:	4b13      	ldr	r3, [pc, #76]	@ (80021c8 <_sbrk+0x64>)
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	2b00      	cmp	r3, #0
 800217e:	d102      	bne.n	8002186 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002180:	4b11      	ldr	r3, [pc, #68]	@ (80021c8 <_sbrk+0x64>)
 8002182:	4a12      	ldr	r2, [pc, #72]	@ (80021cc <_sbrk+0x68>)
 8002184:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002186:	4b10      	ldr	r3, [pc, #64]	@ (80021c8 <_sbrk+0x64>)
 8002188:	681a      	ldr	r2, [r3, #0]
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	4413      	add	r3, r2
 800218e:	693a      	ldr	r2, [r7, #16]
 8002190:	429a      	cmp	r2, r3
 8002192:	d207      	bcs.n	80021a4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002194:	f008 f8c2 	bl	800a31c <__errno>
 8002198:	4603      	mov	r3, r0
 800219a:	220c      	movs	r2, #12
 800219c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800219e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80021a2:	e009      	b.n	80021b8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80021a4:	4b08      	ldr	r3, [pc, #32]	@ (80021c8 <_sbrk+0x64>)
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80021aa:	4b07      	ldr	r3, [pc, #28]	@ (80021c8 <_sbrk+0x64>)
 80021ac:	681a      	ldr	r2, [r3, #0]
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	4413      	add	r3, r2
 80021b2:	4a05      	ldr	r2, [pc, #20]	@ (80021c8 <_sbrk+0x64>)
 80021b4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80021b6:	68fb      	ldr	r3, [r7, #12]
}
 80021b8:	4618      	mov	r0, r3
 80021ba:	3718      	adds	r7, #24
 80021bc:	46bd      	mov	sp, r7
 80021be:	bd80      	pop	{r7, pc}
 80021c0:	200c0000 	.word	0x200c0000
 80021c4:	00000400 	.word	0x00000400
 80021c8:	20000360 	.word	0x20000360
 80021cc:	20000558 	.word	0x20000558

080021d0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80021d0:	b480      	push	{r7}
 80021d2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80021d4:	4b18      	ldr	r3, [pc, #96]	@ (8002238 <SystemInit+0x68>)
 80021d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021da:	4a17      	ldr	r2, [pc, #92]	@ (8002238 <SystemInit+0x68>)
 80021dc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80021e0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR = RCC_CR_MSISON;
 80021e4:	4b15      	ldr	r3, [pc, #84]	@ (800223c <SystemInit+0x6c>)
 80021e6:	2201      	movs	r2, #1
 80021e8:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 80021ea:	4b14      	ldr	r3, [pc, #80]	@ (800223c <SystemInit+0x6c>)
 80021ec:	2200      	movs	r2, #0
 80021ee:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 80021f0:	4b12      	ldr	r3, [pc, #72]	@ (800223c <SystemInit+0x6c>)
 80021f2:	2200      	movs	r2, #0
 80021f4:	621a      	str	r2, [r3, #32]
  RCC->CFGR3 = 0U;
 80021f6:	4b11      	ldr	r3, [pc, #68]	@ (800223c <SystemInit+0x6c>)
 80021f8:	2200      	movs	r2, #0
 80021fa:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Reset HSEON, CSSON , HSION, PLLxON bits */
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
 80021fc:	4b0f      	ldr	r3, [pc, #60]	@ (800223c <SystemInit+0x6c>)
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	4a0e      	ldr	r2, [pc, #56]	@ (800223c <SystemInit+0x6c>)
 8002202:	f023 53a8 	bic.w	r3, r3, #352321536	@ 0x15000000
 8002206:	f423 2310 	bic.w	r3, r3, #589824	@ 0x90000
 800220a:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLL1CFGR = 0U;
 800220c:	4b0b      	ldr	r3, [pc, #44]	@ (800223c <SystemInit+0x6c>)
 800220e:	2200      	movs	r2, #0
 8002210:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 8002212:	4b0a      	ldr	r3, [pc, #40]	@ (800223c <SystemInit+0x6c>)
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	4a09      	ldr	r2, [pc, #36]	@ (800223c <SystemInit+0x6c>)
 8002218:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800221c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 800221e:	4b07      	ldr	r3, [pc, #28]	@ (800223c <SystemInit+0x6c>)
 8002220:	2200      	movs	r2, #0
 8002222:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002224:	4b04      	ldr	r3, [pc, #16]	@ (8002238 <SystemInit+0x68>)
 8002226:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800222a:	609a      	str	r2, [r3, #8]
  #endif
}
 800222c:	bf00      	nop
 800222e:	46bd      	mov	sp, r7
 8002230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002234:	4770      	bx	lr
 8002236:	bf00      	nop
 8002238:	e000ed00 	.word	0xe000ed00
 800223c:	46020c00 	.word	0x46020c00

08002240 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8002240:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002278 <LoopForever+0x2>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8002244:	f7ff ffc4 	bl	80021d0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8002248:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800224a:	e003      	b.n	8002254 <LoopCopyDataInit>

0800224c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 800224c:	4b0b      	ldr	r3, [pc, #44]	@ (800227c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800224e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8002250:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8002252:	3104      	adds	r1, #4

08002254 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8002254:	480a      	ldr	r0, [pc, #40]	@ (8002280 <LoopForever+0xa>)
	ldr	r3, =_edata
 8002256:	4b0b      	ldr	r3, [pc, #44]	@ (8002284 <LoopForever+0xe>)
	adds	r2, r0, r1
 8002258:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800225a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 800225c:	d3f6      	bcc.n	800224c <CopyDataInit>
	ldr	r2, =_sbss
 800225e:	4a0a      	ldr	r2, [pc, #40]	@ (8002288 <LoopForever+0x12>)
	b	LoopFillZerobss
 8002260:	e002      	b.n	8002268 <LoopFillZerobss>

08002262 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8002262:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8002264:	f842 3b04 	str.w	r3, [r2], #4

08002268 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8002268:	4b08      	ldr	r3, [pc, #32]	@ (800228c <LoopForever+0x16>)
	cmp	r2, r3
 800226a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 800226c:	d3f9      	bcc.n	8002262 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800226e:	f008 f85b 	bl	800a328 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002272:	f7ff f86f 	bl	8001354 <main>

08002276 <LoopForever>:

LoopForever:
    b LoopForever
 8002276:	e7fe      	b.n	8002276 <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8002278:	200c0000 	.word	0x200c0000
	ldr	r3, =_sidata
 800227c:	0800dfe4 	.word	0x0800dfe4
	ldr	r0, =_sdata
 8002280:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8002284:	200001f0 	.word	0x200001f0
	ldr	r2, =_sbss
 8002288:	200001f0 	.word	0x200001f0
	ldr	r3, = _ebss
 800228c:	20000558 	.word	0x20000558

08002290 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002290:	e7fe      	b.n	8002290 <ADC1_IRQHandler>
	...

08002294 <BSP_LED_Init>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	b08e      	sub	sp, #56	@ 0x38
 8002298:	af00      	add	r7, sp, #0
 800229a:	4603      	mov	r3, r0
 800229c:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 800229e:	2300      	movs	r3, #0
 80022a0:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitTypeDef  gpio_init_structure;
#if defined (USE_NUCLEO_144)
  uint32_t pwrenabled = 0U;
 80022a2:	2300      	movs	r3, #0
 80022a4:	633b      	str	r3, [r7, #48]	@ 0x30
#endif /* USE_NUCLEO_144 */

  if ((Led != LED2)
 80022a6:	79fb      	ldrb	r3, [r7, #7]
 80022a8:	2b01      	cmp	r3, #1
 80022aa:	d009      	beq.n	80022c0 <BSP_LED_Init+0x2c>
#if defined (USE_NUCLEO_144)
      && (Led != LED1) && (Led != LED3)
 80022ac:	79fb      	ldrb	r3, [r7, #7]
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d006      	beq.n	80022c0 <BSP_LED_Init+0x2c>
 80022b2:	79fb      	ldrb	r3, [r7, #7]
 80022b4:	2b02      	cmp	r3, #2
 80022b6:	d003      	beq.n	80022c0 <BSP_LED_Init+0x2c>
#endif /* defined (USE_NUCLEO_144) */
     )
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80022b8:	f06f 0301 	mvn.w	r3, #1
 80022bc:	637b      	str	r3, [r7, #52]	@ 0x34
 80022be:	e06e      	b.n	800239e <BSP_LED_Init+0x10a>
  }
  else
  {
    /* Enable the GPIO LED Clock */
    if (Led == LED2)
 80022c0:	79fb      	ldrb	r3, [r7, #7]
 80022c2:	2b01      	cmp	r3, #1
 80022c4:	d10f      	bne.n	80022e6 <BSP_LED_Init+0x52>
    {
      LED2_GPIO_CLK_ENABLE();
 80022c6:	4b38      	ldr	r3, [pc, #224]	@ (80023a8 <BSP_LED_Init+0x114>)
 80022c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80022cc:	4a36      	ldr	r2, [pc, #216]	@ (80023a8 <BSP_LED_Init+0x114>)
 80022ce:	f043 0302 	orr.w	r3, r3, #2
 80022d2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80022d6:	4b34      	ldr	r3, [pc, #208]	@ (80023a8 <BSP_LED_Init+0x114>)
 80022d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80022dc:	f003 0302 	and.w	r3, r3, #2
 80022e0:	61bb      	str	r3, [r7, #24]
 80022e2:	69bb      	ldr	r3, [r7, #24]
 80022e4:	e046      	b.n	8002374 <BSP_LED_Init+0xe0>
    }
#if defined (USE_NUCLEO_144)
    else if (Led == LED1)
 80022e6:	79fb      	ldrb	r3, [r7, #7]
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d10f      	bne.n	800230c <BSP_LED_Init+0x78>
    {
      LED1_GPIO_CLK_ENABLE();
 80022ec:	4b2e      	ldr	r3, [pc, #184]	@ (80023a8 <BSP_LED_Init+0x114>)
 80022ee:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80022f2:	4a2d      	ldr	r2, [pc, #180]	@ (80023a8 <BSP_LED_Init+0x114>)
 80022f4:	f043 0304 	orr.w	r3, r3, #4
 80022f8:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80022fc:	4b2a      	ldr	r3, [pc, #168]	@ (80023a8 <BSP_LED_Init+0x114>)
 80022fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002302:	f003 0304 	and.w	r3, r3, #4
 8002306:	617b      	str	r3, [r7, #20]
 8002308:	697b      	ldr	r3, [r7, #20]
 800230a:	e033      	b.n	8002374 <BSP_LED_Init+0xe0>
    }
    else /* Led == Led3 */
    {
      /* Enable VddIO2 for Led3 */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800230c:	4b26      	ldr	r3, [pc, #152]	@ (80023a8 <BSP_LED_Init+0x114>)
 800230e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002312:	f003 0304 	and.w	r3, r3, #4
 8002316:	2b00      	cmp	r3, #0
 8002318:	d110      	bne.n	800233c <BSP_LED_Init+0xa8>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 800231a:	4b23      	ldr	r3, [pc, #140]	@ (80023a8 <BSP_LED_Init+0x114>)
 800231c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002320:	4a21      	ldr	r2, [pc, #132]	@ (80023a8 <BSP_LED_Init+0x114>)
 8002322:	f043 0304 	orr.w	r3, r3, #4
 8002326:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800232a:	4b1f      	ldr	r3, [pc, #124]	@ (80023a8 <BSP_LED_Init+0x114>)
 800232c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002330:	f003 0304 	and.w	r3, r3, #4
 8002334:	613b      	str	r3, [r7, #16]
 8002336:	693b      	ldr	r3, [r7, #16]
        pwrenabled = 1U;
 8002338:	2301      	movs	r3, #1
 800233a:	633b      	str	r3, [r7, #48]	@ 0x30
      }

      HAL_PWREx_EnableVddIO2();
 800233c:	f001 fc0e 	bl	8003b5c <HAL_PWREx_EnableVddIO2>

      if (pwrenabled == 1U)
 8002340:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002342:	2b01      	cmp	r3, #1
 8002344:	d107      	bne.n	8002356 <BSP_LED_Init+0xc2>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8002346:	4b18      	ldr	r3, [pc, #96]	@ (80023a8 <BSP_LED_Init+0x114>)
 8002348:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800234c:	4a16      	ldr	r2, [pc, #88]	@ (80023a8 <BSP_LED_Init+0x114>)
 800234e:	f023 0304 	bic.w	r3, r3, #4
 8002352:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
      }

      LED3_GPIO_CLK_ENABLE();
 8002356:	4b14      	ldr	r3, [pc, #80]	@ (80023a8 <BSP_LED_Init+0x114>)
 8002358:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800235c:	4a12      	ldr	r2, [pc, #72]	@ (80023a8 <BSP_LED_Init+0x114>)
 800235e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002362:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002366:	4b10      	ldr	r3, [pc, #64]	@ (80023a8 <BSP_LED_Init+0x114>)
 8002368:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800236c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002370:	60fb      	str	r3, [r7, #12]
 8002372:	68fb      	ldr	r3, [r7, #12]
    }
#endif /* defined (USE_NUCLEO_144) */
    /* Configure the GPIO_LED pin */
    gpio_init_structure.Pin   = LED_PIN[Led];
 8002374:	79fb      	ldrb	r3, [r7, #7]
 8002376:	4a0d      	ldr	r2, [pc, #52]	@ (80023ac <BSP_LED_Init+0x118>)
 8002378:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800237c:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 800237e:	2301      	movs	r3, #1
 8002380:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull  = GPIO_NOPULL;
 8002382:	2300      	movs	r3, #0
 8002384:	627b      	str	r3, [r7, #36]	@ 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002386:	2303      	movs	r3, #3
 8002388:	62bb      	str	r3, [r7, #40]	@ 0x28

    HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 800238a:	79fb      	ldrb	r3, [r7, #7]
 800238c:	4a08      	ldr	r2, [pc, #32]	@ (80023b0 <BSP_LED_Init+0x11c>)
 800238e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002392:	f107 021c 	add.w	r2, r7, #28
 8002396:	4611      	mov	r1, r2
 8002398:	4618      	mov	r0, r3
 800239a:	f000 fbe3 	bl	8002b64 <HAL_GPIO_Init>
  }

  return ret;
 800239e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 80023a0:	4618      	mov	r0, r3
 80023a2:	3738      	adds	r7, #56	@ 0x38
 80023a4:	46bd      	mov	sp, r7
 80023a6:	bd80      	pop	{r7, pc}
 80023a8:	46020c00 	.word	0x46020c00
 80023ac:	0800dbb8 	.word	0x0800dbb8
 80023b0:	20000008 	.word	0x20000008

080023b4 <BSP_PB_Init>:
  *            @arg  BUTTON_MODE_GPIO: Button will be used as simple IO
  *            @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                    with interrupt generation capability
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b088      	sub	sp, #32
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	4603      	mov	r3, r0
 80023bc:	460a      	mov	r2, r1
 80023be:	71fb      	strb	r3, [r7, #7]
 80023c0:	4613      	mov	r3, r2
 80023c2:	71bb      	strb	r3, [r7, #6]
  static BSP_EXTI_LineCallback ButtonCallback[BUTTONn] = {BUTTON_USER_EXTI_Callback};
  static uint32_t  BSP_BUTTON_PRIO [BUTTONn] = {BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] = {BUTTON_USER_EXTI_LINE};

  /* Enable the BUTTON clock */
  BUTTON_USER_GPIO_CLK_ENABLE();
 80023c4:	4b30      	ldr	r3, [pc, #192]	@ (8002488 <BSP_PB_Init+0xd4>)
 80023c6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80023ca:	4a2f      	ldr	r2, [pc, #188]	@ (8002488 <BSP_PB_Init+0xd4>)
 80023cc:	f043 0304 	orr.w	r3, r3, #4
 80023d0:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80023d4:	4b2c      	ldr	r3, [pc, #176]	@ (8002488 <BSP_PB_Init+0xd4>)
 80023d6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80023da:	f003 0304 	and.w	r3, r3, #4
 80023de:	60bb      	str	r3, [r7, #8]
 80023e0:	68bb      	ldr	r3, [r7, #8]

  gpio_init_structure.Pin = BUTTON_PIN [Button];
 80023e2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80023e6:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Pull = GPIO_PULLDOWN;
 80023e8:	2302      	movs	r3, #2
 80023ea:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 80023ec:	2302      	movs	r3, #2
 80023ee:	61bb      	str	r3, [r7, #24]

  if (ButtonMode == BUTTON_MODE_GPIO)
 80023f0:	79bb      	ldrb	r3, [r7, #6]
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d10c      	bne.n	8002410 <BSP_PB_Init+0x5c>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 80023f6:	2300      	movs	r3, #0
 80023f8:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT [Button], &gpio_init_structure);
 80023fa:	79fb      	ldrb	r3, [r7, #7]
 80023fc:	4a23      	ldr	r2, [pc, #140]	@ (800248c <BSP_PB_Init+0xd8>)
 80023fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002402:	f107 020c 	add.w	r2, r7, #12
 8002406:	4611      	mov	r1, r2
 8002408:	4618      	mov	r0, r3
 800240a:	f000 fbab 	bl	8002b64 <HAL_GPIO_Init>
 800240e:	e036      	b.n	800247e <BSP_PB_Init+0xca>
  }
  else /* (ButtonMode == BUTTON_MODE_EXTI) */
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 8002410:	4b1f      	ldr	r3, [pc, #124]	@ (8002490 <BSP_PB_Init+0xdc>)
 8002412:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8002414:	79fb      	ldrb	r3, [r7, #7]
 8002416:	4a1d      	ldr	r2, [pc, #116]	@ (800248c <BSP_PB_Init+0xd8>)
 8002418:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800241c:	f107 020c 	add.w	r2, r7, #12
 8002420:	4611      	mov	r1, r2
 8002422:	4618      	mov	r0, r3
 8002424:	f000 fb9e 	bl	8002b64 <HAL_GPIO_Init>

    (void)HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]);
 8002428:	79fa      	ldrb	r2, [r7, #7]
 800242a:	4613      	mov	r3, r2
 800242c:	005b      	lsls	r3, r3, #1
 800242e:	4413      	add	r3, r2
 8002430:	009b      	lsls	r3, r3, #2
 8002432:	4a18      	ldr	r2, [pc, #96]	@ (8002494 <BSP_PB_Init+0xe0>)
 8002434:	441a      	add	r2, r3
 8002436:	79fb      	ldrb	r3, [r7, #7]
 8002438:	4917      	ldr	r1, [pc, #92]	@ (8002498 <BSP_PB_Init+0xe4>)
 800243a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800243e:	4619      	mov	r1, r3
 8002440:	4610      	mov	r0, r2
 8002442:	f000 fb32 	bl	8002aaa <HAL_EXTI_GetHandle>
    (void)HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]);
 8002446:	79fa      	ldrb	r2, [r7, #7]
 8002448:	4613      	mov	r3, r2
 800244a:	005b      	lsls	r3, r3, #1
 800244c:	4413      	add	r3, r2
 800244e:	009b      	lsls	r3, r3, #2
 8002450:	4a10      	ldr	r2, [pc, #64]	@ (8002494 <BSP_PB_Init+0xe0>)
 8002452:	1898      	adds	r0, r3, r2
 8002454:	79fb      	ldrb	r3, [r7, #7]
 8002456:	4a11      	ldr	r2, [pc, #68]	@ (800249c <BSP_PB_Init+0xe8>)
 8002458:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800245c:	461a      	mov	r2, r3
 800245e:	2100      	movs	r1, #0
 8002460:	f000 faf7 	bl	8002a52 <HAL_EXTI_RegisterCallback>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 8002464:	2018      	movs	r0, #24
 8002466:	79fb      	ldrb	r3, [r7, #7]
 8002468:	4a0d      	ldr	r2, [pc, #52]	@ (80024a0 <BSP_PB_Init+0xec>)
 800246a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800246e:	2200      	movs	r2, #0
 8002470:	4619      	mov	r1, r3
 8002472:	f000 fa45 	bl	8002900 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 8002476:	2318      	movs	r3, #24
 8002478:	4618      	mov	r0, r3
 800247a:	f000 fa5b 	bl	8002934 <HAL_NVIC_EnableIRQ>
  }

  return BSP_ERROR_NONE;
 800247e:	2300      	movs	r3, #0
}
 8002480:	4618      	mov	r0, r3
 8002482:	3720      	adds	r7, #32
 8002484:	46bd      	mov	sp, r7
 8002486:	bd80      	pop	{r7, pc}
 8002488:	46020c00 	.word	0x46020c00
 800248c:	20000014 	.word	0x20000014
 8002490:	10110000 	.word	0x10110000
 8002494:	20000364 	.word	0x20000364
 8002498:	0800dbc0 	.word	0x0800dbc0
 800249c:	20000018 	.word	0x20000018
 80024a0:	2000001c 	.word	0x2000001c

080024a4 <BSP_PB_IRQHandler>:
  * @brief  BSP Button IRQ handler
  * @param  Button Can only be BUTTON_USER
  * @retval None
  */
void BSP_PB_IRQHandler(Button_TypeDef Button)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b082      	sub	sp, #8
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	4603      	mov	r3, r0
 80024ac:	71fb      	strb	r3, [r7, #7]
  HAL_EXTI_IRQHandler(&hpb_exti[Button]);
 80024ae:	79fa      	ldrb	r2, [r7, #7]
 80024b0:	4613      	mov	r3, r2
 80024b2:	005b      	lsls	r3, r3, #1
 80024b4:	4413      	add	r3, r2
 80024b6:	009b      	lsls	r3, r3, #2
 80024b8:	4a04      	ldr	r2, [pc, #16]	@ (80024cc <BSP_PB_IRQHandler+0x28>)
 80024ba:	4413      	add	r3, r2
 80024bc:	4618      	mov	r0, r3
 80024be:	f000 fb09 	bl	8002ad4 <HAL_EXTI_IRQHandler>
}
 80024c2:	bf00      	nop
 80024c4:	3708      	adds	r7, #8
 80024c6:	46bd      	mov	sp, r7
 80024c8:	bd80      	pop	{r7, pc}
 80024ca:	bf00      	nop
 80024cc:	20000364 	.word	0x20000364

080024d0 <BSP_PB_Callback>:
  * @brief  BSP Push Button callback
  * @param  Button Specifies the pin connected EXTI line
  * @retval None
  */
__weak void BSP_PB_Callback(Button_TypeDef Button)
{
 80024d0:	b480      	push	{r7}
 80024d2:	b083      	sub	sp, #12
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	4603      	mov	r3, r0
 80024d8:	71fb      	strb	r3, [r7, #7]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Button);

  /* This function should be implemented by the user application.
     It is called into this driver when an event on Button is triggered. */
}
 80024da:	bf00      	nop
 80024dc:	370c      	adds	r7, #12
 80024de:	46bd      	mov	sp, r7
 80024e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e4:	4770      	bx	lr
	...

080024e8 <BSP_COM_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval BSP error code
  */
int32_t BSP_COM_Init(COM_TypeDef COM, COM_InitTypeDef *COM_Init)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b084      	sub	sp, #16
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	4603      	mov	r3, r0
 80024f0:	6039      	str	r1, [r7, #0]
 80024f2:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 80024f4:	2300      	movs	r3, #0
 80024f6:	60fb      	str	r3, [r7, #12]

  if (COM >= COMn)
 80024f8:	79fb      	ldrb	r3, [r7, #7]
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d003      	beq.n	8002506 <BSP_COM_Init+0x1e>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80024fe:	f06f 0301 	mvn.w	r3, #1
 8002502:	60fb      	str	r3, [r7, #12]
 8002504:	e018      	b.n	8002538 <BSP_COM_Init+0x50>
  }
  else
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0)
    /* Init the UART Msp */
    COM1_MspInit(&hcom_uart[COM]);
 8002506:	79fb      	ldrb	r3, [r7, #7]
 8002508:	2294      	movs	r2, #148	@ 0x94
 800250a:	fb02 f303 	mul.w	r3, r2, r3
 800250e:	4a0d      	ldr	r2, [pc, #52]	@ (8002544 <BSP_COM_Init+0x5c>)
 8002510:	4413      	add	r3, r2
 8002512:	4618      	mov	r0, r3
 8002514:	f000 f870 	bl	80025f8 <COM1_MspInit>
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS == 0) */

    if (MX_USART1_Init(&hcom_uart[COM], COM_Init) != HAL_OK)
 8002518:	79fb      	ldrb	r3, [r7, #7]
 800251a:	2294      	movs	r2, #148	@ 0x94
 800251c:	fb02 f303 	mul.w	r3, r2, r3
 8002520:	4a08      	ldr	r2, [pc, #32]	@ (8002544 <BSP_COM_Init+0x5c>)
 8002522:	4413      	add	r3, r2
 8002524:	6839      	ldr	r1, [r7, #0]
 8002526:	4618      	mov	r0, r3
 8002528:	f000 f80e 	bl	8002548 <MX_USART1_Init>
 800252c:	4603      	mov	r3, r0
 800252e:	2b00      	cmp	r3, #0
 8002530:	d002      	beq.n	8002538 <BSP_COM_Init+0x50>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8002532:	f06f 0303 	mvn.w	r3, #3
 8002536:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8002538:	68fb      	ldr	r3, [r7, #12]
}
 800253a:	4618      	mov	r0, r3
 800253c:	3710      	adds	r7, #16
 800253e:	46bd      	mov	sp, r7
 8002540:	bd80      	pop	{r7, pc}
 8002542:	bf00      	nop
 8002544:	20000370 	.word	0x20000370

08002548 <MX_USART1_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval HAL error code
  */
__weak HAL_StatusTypeDef MX_USART1_Init(UART_HandleTypeDef *huart, MX_UART_InitTypeDef *COM_Init)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	b082      	sub	sp, #8
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
 8002550:	6039      	str	r1, [r7, #0]
  /* USART configuration */
  huart->Instance                = COM_USART[COM1];
 8002552:	4b16      	ldr	r3, [pc, #88]	@ (80025ac <MX_USART1_Init+0x64>)
 8002554:	681a      	ldr	r2, [r3, #0]
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	601a      	str	r2, [r3, #0]
  huart->Init.BaudRate           = COM_Init->BaudRate;
 800255a:	683b      	ldr	r3, [r7, #0]
 800255c:	681a      	ldr	r2, [r3, #0]
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	605a      	str	r2, [r3, #4]
  huart->Init.Mode               = UART_MODE_TX_RX;
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	220c      	movs	r2, #12
 8002566:	615a      	str	r2, [r3, #20]
  huart->Init.Parity             = (uint32_t)COM_Init->Parity;
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	895b      	ldrh	r3, [r3, #10]
 800256c:	461a      	mov	r2, r3
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	611a      	str	r2, [r3, #16]
  huart->Init.WordLength         = (uint32_t)COM_Init->WordLength;
 8002572:	683b      	ldr	r3, [r7, #0]
 8002574:	685a      	ldr	r2, [r3, #4]
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	609a      	str	r2, [r3, #8]
  huart->Init.StopBits           = (uint32_t)COM_Init->StopBits;
 800257a:	683b      	ldr	r3, [r7, #0]
 800257c:	891b      	ldrh	r3, [r3, #8]
 800257e:	461a      	mov	r2, r3
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	60da      	str	r2, [r3, #12]
  huart->Init.HwFlowCtl          = (uint32_t)COM_Init->HwFlowCtl;
 8002584:	683b      	ldr	r3, [r7, #0]
 8002586:	899b      	ldrh	r3, [r3, #12]
 8002588:	461a      	mov	r2, r3
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	619a      	str	r2, [r3, #24]
  huart->Init.OverSampling       = UART_OVERSAMPLING_8;
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8002594:	61da      	str	r2, [r3, #28]
  huart->Init.ClockPrescaler     = UART_PRESCALER_DIV1;
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	2200      	movs	r2, #0
 800259a:	625a      	str	r2, [r3, #36]	@ 0x24
  return HAL_UART_Init(huart);
 800259c:	6878      	ldr	r0, [r7, #4]
 800259e:	f006 fcad 	bl	8008efc <HAL_UART_Init>
 80025a2:	4603      	mov	r3, r0
}
 80025a4:	4618      	mov	r0, r3
 80025a6:	3708      	adds	r7, #8
 80025a8:	46bd      	mov	sp, r7
 80025aa:	bd80      	pop	{r7, pc}
 80025ac:	20000004 	.word	0x20000004

080025b0 <__io_putchar>:

/**
  * @brief  Redirect console output to COM
  */
PUTCHAR_PROTOTYPE
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b082      	sub	sp, #8
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&hcom_uart [COM_ActiveLogPort], (uint8_t *) &ch, 1, COM_POLL_TIMEOUT);
 80025b8:	4b09      	ldr	r3, [pc, #36]	@ (80025e0 <__io_putchar+0x30>)
 80025ba:	781b      	ldrb	r3, [r3, #0]
 80025bc:	461a      	mov	r2, r3
 80025be:	2394      	movs	r3, #148	@ 0x94
 80025c0:	fb02 f303 	mul.w	r3, r2, r3
 80025c4:	4a07      	ldr	r2, [pc, #28]	@ (80025e4 <__io_putchar+0x34>)
 80025c6:	1898      	adds	r0, r3, r2
 80025c8:	1d39      	adds	r1, r7, #4
 80025ca:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80025ce:	2201      	movs	r2, #1
 80025d0:	f006 fcee 	bl	8008fb0 <HAL_UART_Transmit>
  return ch;
 80025d4:	687b      	ldr	r3, [r7, #4]
}
 80025d6:	4618      	mov	r0, r3
 80025d8:	3708      	adds	r7, #8
 80025da:	46bd      	mov	sp, r7
 80025dc:	bd80      	pop	{r7, pc}
 80025de:	bf00      	nop
 80025e0:	20000404 	.word	0x20000404
 80025e4:	20000370 	.word	0x20000370

080025e8 <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  Key EXTI line detection callbacks.
  * @retval BSP status
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 80025ec:	2000      	movs	r0, #0
 80025ee:	f7ff ff6f 	bl	80024d0 <BSP_PB_Callback>
}
 80025f2:	bf00      	nop
 80025f4:	bd80      	pop	{r7, pc}
	...

080025f8 <COM1_MspInit>:
  * @brief  Initializes UART MSP.
  * @param  huart UART handle
  * @retval BSP status
  */
static void COM1_MspInit(UART_HandleTypeDef *huart)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b08a      	sub	sp, #40	@ 0x28
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);

  /* Enable GPIO clock */
  COM1_TX_GPIO_CLK_ENABLE();
 8002600:	4b27      	ldr	r3, [pc, #156]	@ (80026a0 <COM1_MspInit+0xa8>)
 8002602:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002606:	4a26      	ldr	r2, [pc, #152]	@ (80026a0 <COM1_MspInit+0xa8>)
 8002608:	f043 0301 	orr.w	r3, r3, #1
 800260c:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002610:	4b23      	ldr	r3, [pc, #140]	@ (80026a0 <COM1_MspInit+0xa8>)
 8002612:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002616:	f003 0301 	and.w	r3, r3, #1
 800261a:	613b      	str	r3, [r7, #16]
 800261c:	693b      	ldr	r3, [r7, #16]
  COM1_RX_GPIO_CLK_ENABLE();
 800261e:	4b20      	ldr	r3, [pc, #128]	@ (80026a0 <COM1_MspInit+0xa8>)
 8002620:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002624:	4a1e      	ldr	r2, [pc, #120]	@ (80026a0 <COM1_MspInit+0xa8>)
 8002626:	f043 0301 	orr.w	r3, r3, #1
 800262a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800262e:	4b1c      	ldr	r3, [pc, #112]	@ (80026a0 <COM1_MspInit+0xa8>)
 8002630:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002634:	f003 0301 	and.w	r3, r3, #1
 8002638:	60fb      	str	r3, [r7, #12]
 800263a:	68fb      	ldr	r3, [r7, #12]

  /* Enable USART clock */
  COM1_CLK_ENABLE();
 800263c:	4b18      	ldr	r3, [pc, #96]	@ (80026a0 <COM1_MspInit+0xa8>)
 800263e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8002642:	4a17      	ldr	r2, [pc, #92]	@ (80026a0 <COM1_MspInit+0xa8>)
 8002644:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002648:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 800264c:	4b14      	ldr	r3, [pc, #80]	@ (80026a0 <COM1_MspInit+0xa8>)
 800264e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8002652:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002656:	60bb      	str	r3, [r7, #8]
 8002658:	68bb      	ldr	r3, [r7, #8]

  /* Configure USART Tx as alternate function */
  gpio_init_structure.Pin       = COM1_TX_PIN;
 800265a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800265e:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8002660:	2302      	movs	r3, #2
 8002662:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 8002664:	2302      	movs	r3, #2
 8002666:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8002668:	2301      	movs	r3, #1
 800266a:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Alternate = COM1_TX_AF;
 800266c:	2307      	movs	r3, #7
 800266e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_TX_GPIO_PORT, &gpio_init_structure);
 8002670:	f107 0314 	add.w	r3, r7, #20
 8002674:	4619      	mov	r1, r3
 8002676:	480b      	ldr	r0, [pc, #44]	@ (80026a4 <COM1_MspInit+0xac>)
 8002678:	f000 fa74 	bl	8002b64 <HAL_GPIO_Init>

  /* Configure USART Rx as alternate function */
  gpio_init_structure.Pin       = COM1_RX_PIN;
 800267c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002680:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8002682:	2302      	movs	r3, #2
 8002684:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Alternate = COM1_RX_AF;
 8002686:	2307      	movs	r3, #7
 8002688:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_RX_GPIO_PORT, &gpio_init_structure);
 800268a:	f107 0314 	add.w	r3, r7, #20
 800268e:	4619      	mov	r1, r3
 8002690:	4804      	ldr	r0, [pc, #16]	@ (80026a4 <COM1_MspInit+0xac>)
 8002692:	f000 fa67 	bl	8002b64 <HAL_GPIO_Init>
}
 8002696:	bf00      	nop
 8002698:	3728      	adds	r7, #40	@ 0x28
 800269a:	46bd      	mov	sp, r7
 800269c:	bd80      	pop	{r7, pc}
 800269e:	bf00      	nop
 80026a0:	46020c00 	.word	0x46020c00
 80026a4:	42020000 	.word	0x42020000

080026a8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80026ac:	4b12      	ldr	r3, [pc, #72]	@ (80026f8 <HAL_Init+0x50>)
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	4a11      	ldr	r2, [pc, #68]	@ (80026f8 <HAL_Init+0x50>)
 80026b2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80026b6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80026b8:	2003      	movs	r0, #3
 80026ba:	f000 f916 	bl	80028ea <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 80026be:	f002 fb3b 	bl	8004d38 <HAL_RCC_GetSysClockFreq>
 80026c2:	4602      	mov	r2, r0
 80026c4:	4b0d      	ldr	r3, [pc, #52]	@ (80026fc <HAL_Init+0x54>)
 80026c6:	6a1b      	ldr	r3, [r3, #32]
 80026c8:	f003 030f 	and.w	r3, r3, #15
 80026cc:	490c      	ldr	r1, [pc, #48]	@ (8002700 <HAL_Init+0x58>)
 80026ce:	5ccb      	ldrb	r3, [r1, r3]
 80026d0:	fa22 f303 	lsr.w	r3, r2, r3
 80026d4:	4a0b      	ldr	r2, [pc, #44]	@ (8002704 <HAL_Init+0x5c>)
 80026d6:	6013      	str	r3, [r2, #0]

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 80026d8:	2004      	movs	r0, #4
 80026da:	f000 f939 	bl	8002950 <HAL_SYSTICK_CLKSourceConfig>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80026de:	2007      	movs	r0, #7
 80026e0:	f7ff fbee 	bl	8001ec0 <HAL_InitTick>
 80026e4:	4603      	mov	r3, r0
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d001      	beq.n	80026ee <HAL_Init+0x46>
  {
    return HAL_ERROR;
 80026ea:	2301      	movs	r3, #1
 80026ec:	e002      	b.n	80026f4 <HAL_Init+0x4c>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80026ee:	f7ff fbcb 	bl	8001e88 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80026f2:	2300      	movs	r3, #0
}
 80026f4:	4618      	mov	r0, r3
 80026f6:	bd80      	pop	{r7, pc}
 80026f8:	40022000 	.word	0x40022000
 80026fc:	46020c00 	.word	0x46020c00
 8002700:	0800db60 	.word	0x0800db60
 8002704:	20000000 	.word	0x20000000

08002708 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002708:	b480      	push	{r7}
 800270a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800270c:	4b06      	ldr	r3, [pc, #24]	@ (8002728 <HAL_IncTick+0x20>)
 800270e:	781b      	ldrb	r3, [r3, #0]
 8002710:	461a      	mov	r2, r3
 8002712:	4b06      	ldr	r3, [pc, #24]	@ (800272c <HAL_IncTick+0x24>)
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	4413      	add	r3, r2
 8002718:	4a04      	ldr	r2, [pc, #16]	@ (800272c <HAL_IncTick+0x24>)
 800271a:	6013      	str	r3, [r2, #0]
}
 800271c:	bf00      	nop
 800271e:	46bd      	mov	sp, r7
 8002720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002724:	4770      	bx	lr
 8002726:	bf00      	nop
 8002728:	20000024 	.word	0x20000024
 800272c:	20000408 	.word	0x20000408

08002730 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002730:	b480      	push	{r7}
 8002732:	af00      	add	r7, sp, #0
  return uwTick;
 8002734:	4b03      	ldr	r3, [pc, #12]	@ (8002744 <HAL_GetTick+0x14>)
 8002736:	681b      	ldr	r3, [r3, #0]
}
 8002738:	4618      	mov	r0, r3
 800273a:	46bd      	mov	sp, r7
 800273c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002740:	4770      	bx	lr
 8002742:	bf00      	nop
 8002744:	20000408 	.word	0x20000408

08002748 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	b084      	sub	sp, #16
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002750:	f7ff ffee 	bl	8002730 <HAL_GetTick>
 8002754:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002760:	d005      	beq.n	800276e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002762:	4b0a      	ldr	r3, [pc, #40]	@ (800278c <HAL_Delay+0x44>)
 8002764:	781b      	ldrb	r3, [r3, #0]
 8002766:	461a      	mov	r2, r3
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	4413      	add	r3, r2
 800276c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800276e:	bf00      	nop
 8002770:	f7ff ffde 	bl	8002730 <HAL_GetTick>
 8002774:	4602      	mov	r2, r0
 8002776:	68bb      	ldr	r3, [r7, #8]
 8002778:	1ad3      	subs	r3, r2, r3
 800277a:	68fa      	ldr	r2, [r7, #12]
 800277c:	429a      	cmp	r2, r3
 800277e:	d8f7      	bhi.n	8002770 <HAL_Delay+0x28>
  {
  }
}
 8002780:	bf00      	nop
 8002782:	bf00      	nop
 8002784:	3710      	adds	r7, #16
 8002786:	46bd      	mov	sp, r7
 8002788:	bd80      	pop	{r7, pc}
 800278a:	bf00      	nop
 800278c:	20000024 	.word	0x20000024

08002790 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002790:	b480      	push	{r7}
 8002792:	b085      	sub	sp, #20
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	f003 0307 	and.w	r3, r3, #7
 800279e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80027a0:	4b0c      	ldr	r3, [pc, #48]	@ (80027d4 <__NVIC_SetPriorityGrouping+0x44>)
 80027a2:	68db      	ldr	r3, [r3, #12]
 80027a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80027a6:	68ba      	ldr	r2, [r7, #8]
 80027a8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80027ac:	4013      	ands	r3, r2
 80027ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80027b4:	68bb      	ldr	r3, [r7, #8]
 80027b6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80027b8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80027bc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80027c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80027c2:	4a04      	ldr	r2, [pc, #16]	@ (80027d4 <__NVIC_SetPriorityGrouping+0x44>)
 80027c4:	68bb      	ldr	r3, [r7, #8]
 80027c6:	60d3      	str	r3, [r2, #12]
}
 80027c8:	bf00      	nop
 80027ca:	3714      	adds	r7, #20
 80027cc:	46bd      	mov	sp, r7
 80027ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d2:	4770      	bx	lr
 80027d4:	e000ed00 	.word	0xe000ed00

080027d8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80027d8:	b480      	push	{r7}
 80027da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80027dc:	4b04      	ldr	r3, [pc, #16]	@ (80027f0 <__NVIC_GetPriorityGrouping+0x18>)
 80027de:	68db      	ldr	r3, [r3, #12]
 80027e0:	0a1b      	lsrs	r3, r3, #8
 80027e2:	f003 0307 	and.w	r3, r3, #7
}
 80027e6:	4618      	mov	r0, r3
 80027e8:	46bd      	mov	sp, r7
 80027ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ee:	4770      	bx	lr
 80027f0:	e000ed00 	.word	0xe000ed00

080027f4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027f4:	b480      	push	{r7}
 80027f6:	b083      	sub	sp, #12
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	4603      	mov	r3, r0
 80027fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002802:	2b00      	cmp	r3, #0
 8002804:	db0b      	blt.n	800281e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002806:	79fb      	ldrb	r3, [r7, #7]
 8002808:	f003 021f 	and.w	r2, r3, #31
 800280c:	4907      	ldr	r1, [pc, #28]	@ (800282c <__NVIC_EnableIRQ+0x38>)
 800280e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002812:	095b      	lsrs	r3, r3, #5
 8002814:	2001      	movs	r0, #1
 8002816:	fa00 f202 	lsl.w	r2, r0, r2
 800281a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800281e:	bf00      	nop
 8002820:	370c      	adds	r7, #12
 8002822:	46bd      	mov	sp, r7
 8002824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002828:	4770      	bx	lr
 800282a:	bf00      	nop
 800282c:	e000e100 	.word	0xe000e100

08002830 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002830:	b480      	push	{r7}
 8002832:	b083      	sub	sp, #12
 8002834:	af00      	add	r7, sp, #0
 8002836:	4603      	mov	r3, r0
 8002838:	6039      	str	r1, [r7, #0]
 800283a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800283c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002840:	2b00      	cmp	r3, #0
 8002842:	db0a      	blt.n	800285a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002844:	683b      	ldr	r3, [r7, #0]
 8002846:	b2da      	uxtb	r2, r3
 8002848:	490c      	ldr	r1, [pc, #48]	@ (800287c <__NVIC_SetPriority+0x4c>)
 800284a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800284e:	0112      	lsls	r2, r2, #4
 8002850:	b2d2      	uxtb	r2, r2
 8002852:	440b      	add	r3, r1
 8002854:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002858:	e00a      	b.n	8002870 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800285a:	683b      	ldr	r3, [r7, #0]
 800285c:	b2da      	uxtb	r2, r3
 800285e:	4908      	ldr	r1, [pc, #32]	@ (8002880 <__NVIC_SetPriority+0x50>)
 8002860:	79fb      	ldrb	r3, [r7, #7]
 8002862:	f003 030f 	and.w	r3, r3, #15
 8002866:	3b04      	subs	r3, #4
 8002868:	0112      	lsls	r2, r2, #4
 800286a:	b2d2      	uxtb	r2, r2
 800286c:	440b      	add	r3, r1
 800286e:	761a      	strb	r2, [r3, #24]
}
 8002870:	bf00      	nop
 8002872:	370c      	adds	r7, #12
 8002874:	46bd      	mov	sp, r7
 8002876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287a:	4770      	bx	lr
 800287c:	e000e100 	.word	0xe000e100
 8002880:	e000ed00 	.word	0xe000ed00

08002884 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002884:	b480      	push	{r7}
 8002886:	b089      	sub	sp, #36	@ 0x24
 8002888:	af00      	add	r7, sp, #0
 800288a:	60f8      	str	r0, [r7, #12]
 800288c:	60b9      	str	r1, [r7, #8]
 800288e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	f003 0307 	and.w	r3, r3, #7
 8002896:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002898:	69fb      	ldr	r3, [r7, #28]
 800289a:	f1c3 0307 	rsb	r3, r3, #7
 800289e:	2b04      	cmp	r3, #4
 80028a0:	bf28      	it	cs
 80028a2:	2304      	movcs	r3, #4
 80028a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80028a6:	69fb      	ldr	r3, [r7, #28]
 80028a8:	3304      	adds	r3, #4
 80028aa:	2b06      	cmp	r3, #6
 80028ac:	d902      	bls.n	80028b4 <NVIC_EncodePriority+0x30>
 80028ae:	69fb      	ldr	r3, [r7, #28]
 80028b0:	3b03      	subs	r3, #3
 80028b2:	e000      	b.n	80028b6 <NVIC_EncodePriority+0x32>
 80028b4:	2300      	movs	r3, #0
 80028b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028b8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80028bc:	69bb      	ldr	r3, [r7, #24]
 80028be:	fa02 f303 	lsl.w	r3, r2, r3
 80028c2:	43da      	mvns	r2, r3
 80028c4:	68bb      	ldr	r3, [r7, #8]
 80028c6:	401a      	ands	r2, r3
 80028c8:	697b      	ldr	r3, [r7, #20]
 80028ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80028cc:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80028d0:	697b      	ldr	r3, [r7, #20]
 80028d2:	fa01 f303 	lsl.w	r3, r1, r3
 80028d6:	43d9      	mvns	r1, r3
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028dc:	4313      	orrs	r3, r2
         );
}
 80028de:	4618      	mov	r0, r3
 80028e0:	3724      	adds	r7, #36	@ 0x24
 80028e2:	46bd      	mov	sp, r7
 80028e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e8:	4770      	bx	lr

080028ea <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028ea:	b580      	push	{r7, lr}
 80028ec:	b082      	sub	sp, #8
 80028ee:	af00      	add	r7, sp, #0
 80028f0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80028f2:	6878      	ldr	r0, [r7, #4]
 80028f4:	f7ff ff4c 	bl	8002790 <__NVIC_SetPriorityGrouping>
}
 80028f8:	bf00      	nop
 80028fa:	3708      	adds	r7, #8
 80028fc:	46bd      	mov	sp, r7
 80028fe:	bd80      	pop	{r7, pc}

08002900 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002900:	b580      	push	{r7, lr}
 8002902:	b086      	sub	sp, #24
 8002904:	af00      	add	r7, sp, #0
 8002906:	4603      	mov	r3, r0
 8002908:	60b9      	str	r1, [r7, #8]
 800290a:	607a      	str	r2, [r7, #4]
 800290c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800290e:	f7ff ff63 	bl	80027d8 <__NVIC_GetPriorityGrouping>
 8002912:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002914:	687a      	ldr	r2, [r7, #4]
 8002916:	68b9      	ldr	r1, [r7, #8]
 8002918:	6978      	ldr	r0, [r7, #20]
 800291a:	f7ff ffb3 	bl	8002884 <NVIC_EncodePriority>
 800291e:	4602      	mov	r2, r0
 8002920:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002924:	4611      	mov	r1, r2
 8002926:	4618      	mov	r0, r3
 8002928:	f7ff ff82 	bl	8002830 <__NVIC_SetPriority>
}
 800292c:	bf00      	nop
 800292e:	3718      	adds	r7, #24
 8002930:	46bd      	mov	sp, r7
 8002932:	bd80      	pop	{r7, pc}

08002934 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32u5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002934:	b580      	push	{r7, lr}
 8002936:	b082      	sub	sp, #8
 8002938:	af00      	add	r7, sp, #0
 800293a:	4603      	mov	r3, r0
 800293c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800293e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002942:	4618      	mov	r0, r3
 8002944:	f7ff ff56 	bl	80027f4 <__NVIC_EnableIRQ>
}
 8002948:	bf00      	nop
 800294a:	3708      	adds	r7, #8
 800294c:	46bd      	mov	sp, r7
 800294e:	bd80      	pop	{r7, pc}

08002950 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8002950:	b480      	push	{r7}
 8002952:	b083      	sub	sp, #12
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	2b04      	cmp	r3, #4
 800295c:	d844      	bhi.n	80029e8 <HAL_SYSTICK_CLKSourceConfig+0x98>
 800295e:	a201      	add	r2, pc, #4	@ (adr r2, 8002964 <HAL_SYSTICK_CLKSourceConfig+0x14>)
 8002960:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002964:	08002987 	.word	0x08002987
 8002968:	080029a5 	.word	0x080029a5
 800296c:	080029c7 	.word	0x080029c7
 8002970:	080029e9 	.word	0x080029e9
 8002974:	08002979 	.word	0x08002979
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8002978:	4b1f      	ldr	r3, [pc, #124]	@ (80029f8 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	4a1e      	ldr	r2, [pc, #120]	@ (80029f8 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800297e:	f043 0304 	orr.w	r3, r3, #4
 8002982:	6013      	str	r3, [r2, #0]
      break;
 8002984:	e031      	b.n	80029ea <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8002986:	4b1c      	ldr	r3, [pc, #112]	@ (80029f8 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	4a1b      	ldr	r2, [pc, #108]	@ (80029f8 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800298c:	f023 0304 	bic.w	r3, r3, #4
 8002990:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, (0x00000000U));
 8002992:	4b1a      	ldr	r3, [pc, #104]	@ (80029fc <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8002994:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002998:	4a18      	ldr	r2, [pc, #96]	@ (80029fc <HAL_SYSTICK_CLKSourceConfig+0xac>)
 800299a:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 800299e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 80029a2:	e022      	b.n	80029ea <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 80029a4:	4b14      	ldr	r3, [pc, #80]	@ (80029f8 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	4a13      	ldr	r2, [pc, #76]	@ (80029f8 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80029aa:	f023 0304 	bic.w	r3, r3, #4
 80029ae:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_0);
 80029b0:	4b12      	ldr	r3, [pc, #72]	@ (80029fc <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80029b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80029b6:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 80029ba:	4a10      	ldr	r2, [pc, #64]	@ (80029fc <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80029bc:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80029c0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 80029c4:	e011      	b.n	80029ea <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 80029c6:	4b0c      	ldr	r3, [pc, #48]	@ (80029f8 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	4a0b      	ldr	r2, [pc, #44]	@ (80029f8 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80029cc:	f023 0304 	bic.w	r3, r3, #4
 80029d0:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_1);
 80029d2:	4b0a      	ldr	r3, [pc, #40]	@ (80029fc <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80029d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80029d8:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 80029dc:	4a07      	ldr	r2, [pc, #28]	@ (80029fc <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80029de:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80029e2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 80029e6:	e000      	b.n	80029ea <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 80029e8:	bf00      	nop
  }
}
 80029ea:	bf00      	nop
 80029ec:	370c      	adds	r7, #12
 80029ee:	46bd      	mov	sp, r7
 80029f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f4:	4770      	bx	lr
 80029f6:	bf00      	nop
 80029f8:	e000e010 	.word	0xe000e010
 80029fc:	46020c00 	.word	0x46020c00

08002a00 <HAL_DMA_Abort_IT>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *const hdma)
{
 8002a00:	b480      	push	{r7}
 8002a02:	b083      	sub	sp, #12
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d101      	bne.n	8002a12 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8002a0e:	2301      	movs	r3, #1
 8002a10:	e019      	b.n	8002a46 <HAL_DMA_Abort_IT+0x46>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8002a18:	b2db      	uxtb	r3, r3
 8002a1a:	2b02      	cmp	r3, #2
 8002a1c:	d004      	beq.n	8002a28 <HAL_DMA_Abort_IT+0x28>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	2220      	movs	r2, #32
 8002a22:	659a      	str	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8002a24:	2301      	movs	r3, #1
 8002a26:	e00e      	b.n	8002a46 <HAL_DMA_Abort_IT+0x46>
  }
  else
  {
    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	2204      	movs	r2, #4
 8002a2c:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Suspend the channel and activate suspend interrupt */
    hdma->Instance->CCR |= (DMA_CCR_SUSP | DMA_CCR_SUSPIE);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	695b      	ldr	r3, [r3, #20]
 8002a36:	687a      	ldr	r2, [r7, #4]
 8002a38:	6812      	ldr	r2, [r2, #0]
 8002a3a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002a3e:	f043 0304 	orr.w	r3, r3, #4
 8002a42:	6153      	str	r3, [r2, #20]
  }

  return HAL_OK;
 8002a44:	2300      	movs	r3, #0
}
 8002a46:	4618      	mov	r0, r3
 8002a48:	370c      	adds	r7, #12
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a50:	4770      	bx	lr

08002a52 <HAL_EXTI_RegisterCallback>:
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID,
                                            void (*pPendingCbfn)(void))
{
 8002a52:	b480      	push	{r7}
 8002a54:	b087      	sub	sp, #28
 8002a56:	af00      	add	r7, sp, #0
 8002a58:	60f8      	str	r0, [r7, #12]
 8002a5a:	460b      	mov	r3, r1
 8002a5c:	607a      	str	r2, [r7, #4]
 8002a5e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8002a60:	2300      	movs	r3, #0
 8002a62:	75fb      	strb	r3, [r7, #23]

  switch (CallbackID)
 8002a64:	7afb      	ldrb	r3, [r7, #11]
 8002a66:	2b02      	cmp	r3, #2
 8002a68:	d011      	beq.n	8002a8e <HAL_EXTI_RegisterCallback+0x3c>
 8002a6a:	2b02      	cmp	r3, #2
 8002a6c:	dc13      	bgt.n	8002a96 <HAL_EXTI_RegisterCallback+0x44>
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d002      	beq.n	8002a78 <HAL_EXTI_RegisterCallback+0x26>
 8002a72:	2b01      	cmp	r3, #1
 8002a74:	d007      	beq.n	8002a86 <HAL_EXTI_RegisterCallback+0x34>
 8002a76:	e00e      	b.n	8002a96 <HAL_EXTI_RegisterCallback+0x44>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->RisingCallback = pPendingCbfn;
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	687a      	ldr	r2, [r7, #4]
 8002a7c:	605a      	str	r2, [r3, #4]
      hexti->FallingCallback = pPendingCbfn;
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	687a      	ldr	r2, [r7, #4]
 8002a82:	609a      	str	r2, [r3, #8]
      break;
 8002a84:	e00a      	b.n	8002a9c <HAL_EXTI_RegisterCallback+0x4a>

    case  HAL_EXTI_RISING_CB_ID:
      hexti->RisingCallback = pPendingCbfn;
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	687a      	ldr	r2, [r7, #4]
 8002a8a:	605a      	str	r2, [r3, #4]
      break;
 8002a8c:	e006      	b.n	8002a9c <HAL_EXTI_RegisterCallback+0x4a>

    case  HAL_EXTI_FALLING_CB_ID:
      hexti->FallingCallback = pPendingCbfn;
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	687a      	ldr	r2, [r7, #4]
 8002a92:	609a      	str	r2, [r3, #8]
      break;
 8002a94:	e002      	b.n	8002a9c <HAL_EXTI_RegisterCallback+0x4a>

    default:
      status = HAL_ERROR;
 8002a96:	2301      	movs	r3, #1
 8002a98:	75fb      	strb	r3, [r7, #23]
      break;
 8002a9a:	bf00      	nop
  }

  return status;
 8002a9c:	7dfb      	ldrb	r3, [r7, #23]
}
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	371c      	adds	r7, #28
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa8:	4770      	bx	lr

08002aaa <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 8002aaa:	b480      	push	{r7}
 8002aac:	b083      	sub	sp, #12
 8002aae:	af00      	add	r7, sp, #0
 8002ab0:	6078      	str	r0, [r7, #4]
 8002ab2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d101      	bne.n	8002abe <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 8002aba:	2301      	movs	r3, #1
 8002abc:	e003      	b.n	8002ac6 <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	683a      	ldr	r2, [r7, #0]
 8002ac2:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8002ac4:	2300      	movs	r3, #0
  }
}
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	370c      	adds	r7, #12
 8002aca:	46bd      	mov	sp, r7
 8002acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad0:	4770      	bx	lr
	...

08002ad4 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(const EXTI_HandleTypeDef *hexti)
{
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	b086      	sub	sp, #24
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	0c1b      	lsrs	r3, r3, #16
 8002ae2:	f003 0301 	and.w	r3, r3, #1
 8002ae6:	617b      	str	r3, [r7, #20]
  maskline = (1UL << (hexti->Line & EXTI_PIN_MASK));
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f003 031f 	and.w	r3, r3, #31
 8002af0:	2201      	movs	r2, #1
 8002af2:	fa02 f303 	lsl.w	r3, r2, r3
 8002af6:	613b      	str	r3, [r7, #16]

  /* Get rising edge pending bit  */
  regaddr = (__IO uint32_t *)(&EXTI->RPR1 + (EXTI_CONFIG_OFFSET * offset));
 8002af8:	697b      	ldr	r3, [r7, #20]
 8002afa:	015a      	lsls	r2, r3, #5
 8002afc:	4b17      	ldr	r3, [pc, #92]	@ (8002b5c <HAL_EXTI_IRQHandler+0x88>)
 8002afe:	4413      	add	r3, r2
 8002b00:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	693a      	ldr	r2, [r7, #16]
 8002b08:	4013      	ands	r3, r2
 8002b0a:	60bb      	str	r3, [r7, #8]

  if (regval != 0U)
 8002b0c:	68bb      	ldr	r3, [r7, #8]
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d009      	beq.n	8002b26 <HAL_EXTI_IRQHandler+0x52>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	693a      	ldr	r2, [r7, #16]
 8002b16:	601a      	str	r2, [r3, #0]

    /* Call rising callback */
    if (hexti->RisingCallback != NULL)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	685b      	ldr	r3, [r3, #4]
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d002      	beq.n	8002b26 <HAL_EXTI_IRQHandler+0x52>
    {
      hexti->RisingCallback();
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	685b      	ldr	r3, [r3, #4]
 8002b24:	4798      	blx	r3
    }
  }

  /* Get falling edge pending bit  */
  regaddr = (__IO uint32_t *)(&EXTI->FPR1 + (EXTI_CONFIG_OFFSET * offset));
 8002b26:	697b      	ldr	r3, [r7, #20]
 8002b28:	015a      	lsls	r2, r3, #5
 8002b2a:	4b0d      	ldr	r3, [pc, #52]	@ (8002b60 <HAL_EXTI_IRQHandler+0x8c>)
 8002b2c:	4413      	add	r3, r2
 8002b2e:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	693a      	ldr	r2, [r7, #16]
 8002b36:	4013      	ands	r3, r2
 8002b38:	60bb      	str	r3, [r7, #8]

  if (regval != 0U)
 8002b3a:	68bb      	ldr	r3, [r7, #8]
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d009      	beq.n	8002b54 <HAL_EXTI_IRQHandler+0x80>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	693a      	ldr	r2, [r7, #16]
 8002b44:	601a      	str	r2, [r3, #0]

    /* Call rising callback */
    if (hexti->FallingCallback != NULL)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	689b      	ldr	r3, [r3, #8]
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d002      	beq.n	8002b54 <HAL_EXTI_IRQHandler+0x80>
    {
      hexti->FallingCallback();
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	689b      	ldr	r3, [r3, #8]
 8002b52:	4798      	blx	r3
    }
  }
}
 8002b54:	bf00      	nop
 8002b56:	3718      	adds	r7, #24
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	bd80      	pop	{r7, pc}
 8002b5c:	4602200c 	.word	0x4602200c
 8002b60:	46022010 	.word	0x46022010

08002b64 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8002b64:	b480      	push	{r7}
 8002b66:	b089      	sub	sp, #36	@ 0x24
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
 8002b6c:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 8002b6e:	2300      	movs	r3, #0
 8002b70:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	613b      	str	r3, [r7, #16]

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8002b76:	e1c2      	b.n	8002efe <HAL_GPIO_Init+0x39a>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8002b78:	683b      	ldr	r3, [r7, #0]
 8002b7a:	681a      	ldr	r2, [r3, #0]
 8002b7c:	2101      	movs	r1, #1
 8002b7e:	697b      	ldr	r3, [r7, #20]
 8002b80:	fa01 f303 	lsl.w	r3, r1, r3
 8002b84:	4013      	ands	r3, r2
 8002b86:	60fb      	str	r3, [r7, #12]

    /* Save Pin Position */
    pin_position = position;
 8002b88:	697b      	ldr	r3, [r7, #20]
 8002b8a:	61bb      	str	r3, [r7, #24]

    if (iocurrent != 0U)
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	f000 81b2 	beq.w	8002ef8 <HAL_GPIO_Init+0x394>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if (GPIOx == LPGPIO1)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	4a55      	ldr	r2, [pc, #340]	@ (8002cec <HAL_GPIO_Init+0x188>)
 8002b98:	4293      	cmp	r3, r2
 8002b9a:	d15d      	bne.n	8002c58 <HAL_GPIO_Init+0xf4>
      {
        /* MODER configuration */
        tmp = GPIOx->MODER;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	61fb      	str	r3, [r7, #28]
        tmp &= ~(LPGPIO_MODER_MOD0 << position);
 8002ba2:	2201      	movs	r2, #1
 8002ba4:	697b      	ldr	r3, [r7, #20]
 8002ba6:	fa02 f303 	lsl.w	r3, r2, r3
 8002baa:	43db      	mvns	r3, r3
 8002bac:	69fa      	ldr	r2, [r7, #28]
 8002bae:	4013      	ands	r3, r2
 8002bb0:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE_OUTPUT_PP) << position);
 8002bb2:	683b      	ldr	r3, [r7, #0]
 8002bb4:	685b      	ldr	r3, [r3, #4]
 8002bb6:	f003 0201 	and.w	r2, r3, #1
 8002bba:	697b      	ldr	r3, [r7, #20]
 8002bbc:	fa02 f303 	lsl.w	r3, r2, r3
 8002bc0:	69fa      	ldr	r2, [r7, #28]
 8002bc2:	4313      	orrs	r3, r2
 8002bc4:	61fb      	str	r3, [r7, #28]
        GPIOx->MODER = tmp;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	69fa      	ldr	r2, [r7, #28]
 8002bca:	601a      	str	r2, [r3, #0]

        /* Save GPIO Port and pin index */
        p_gpio = LPGPIO_Map[position].GPIO_PORT;
 8002bcc:	4a48      	ldr	r2, [pc, #288]	@ (8002cf0 <HAL_GPIO_Init+0x18c>)
 8002bce:	697b      	ldr	r3, [r7, #20]
 8002bd0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002bd4:	613b      	str	r3, [r7, #16]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 8002bd6:	4a46      	ldr	r2, [pc, #280]	@ (8002cf0 <HAL_GPIO_Init+0x18c>)
 8002bd8:	697b      	ldr	r3, [r7, #20]
 8002bda:	00db      	lsls	r3, r3, #3
 8002bdc:	4413      	add	r3, r2
 8002bde:	685b      	ldr	r3, [r3, #4]
 8002be0:	61bb      	str	r3, [r7, #24]

        /* Configure Alternate function mapped with the current IO */
        tmp = p_gpio->AFR[(pin_position) >> 3U];
 8002be2:	69bb      	ldr	r3, [r7, #24]
 8002be4:	08da      	lsrs	r2, r3, #3
 8002be6:	693b      	ldr	r3, [r7, #16]
 8002be8:	3208      	adds	r2, #8
 8002bea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002bee:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << (((pin_position) & 0x07U) * 4U));
 8002bf0:	69bb      	ldr	r3, [r7, #24]
 8002bf2:	f003 0307 	and.w	r3, r3, #7
 8002bf6:	009b      	lsls	r3, r3, #2
 8002bf8:	220f      	movs	r2, #15
 8002bfa:	fa02 f303 	lsl.w	r3, r2, r3
 8002bfe:	43db      	mvns	r3, r3
 8002c00:	69fa      	ldr	r2, [r7, #28]
 8002c02:	4013      	ands	r3, r2
 8002c04:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_AF11_LPGPIO1 & 0x0FUL) << (((pin_position) & 0x07U) * 4U));
 8002c06:	69bb      	ldr	r3, [r7, #24]
 8002c08:	f003 0307 	and.w	r3, r3, #7
 8002c0c:	009b      	lsls	r3, r3, #2
 8002c0e:	220b      	movs	r2, #11
 8002c10:	fa02 f303 	lsl.w	r3, r2, r3
 8002c14:	69fa      	ldr	r2, [r7, #28]
 8002c16:	4313      	orrs	r3, r2
 8002c18:	61fb      	str	r3, [r7, #28]
        p_gpio->AFR[(pin_position) >> 3U] = tmp;
 8002c1a:	69bb      	ldr	r3, [r7, #24]
 8002c1c:	08da      	lsrs	r2, r3, #3
 8002c1e:	693b      	ldr	r3, [r7, #16]
 8002c20:	3208      	adds	r2, #8
 8002c22:	69f9      	ldr	r1, [r7, #28]
 8002c24:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8002c28:	693b      	ldr	r3, [r7, #16]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 8002c2e:	69bb      	ldr	r3, [r7, #24]
 8002c30:	005b      	lsls	r3, r3, #1
 8002c32:	2203      	movs	r2, #3
 8002c34:	fa02 f303 	lsl.w	r3, r2, r3
 8002c38:	43db      	mvns	r3, r3
 8002c3a:	69fa      	ldr	r2, [r7, #28]
 8002c3c:	4013      	ands	r3, r2
 8002c3e:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_MODE_AF_PP & 0x0FUL) << (pin_position * GPIO_MODER_MODE1_Pos));
 8002c40:	69bb      	ldr	r3, [r7, #24]
 8002c42:	005b      	lsls	r3, r3, #1
 8002c44:	2202      	movs	r2, #2
 8002c46:	fa02 f303 	lsl.w	r3, r2, r3
 8002c4a:	69fa      	ldr	r2, [r7, #28]
 8002c4c:	4313      	orrs	r3, r2
 8002c4e:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8002c50:	693b      	ldr	r3, [r7, #16]
 8002c52:	69fa      	ldr	r2, [r7, #28]
 8002c54:	601a      	str	r2, [r3, #0]
 8002c56:	e067      	b.n	8002d28 <HAL_GPIO_Init+0x1c4>
      }
      else if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002c58:	683b      	ldr	r3, [r7, #0]
 8002c5a:	685b      	ldr	r3, [r3, #4]
 8002c5c:	2b02      	cmp	r3, #2
 8002c5e:	d003      	beq.n	8002c68 <HAL_GPIO_Init+0x104>
 8002c60:	683b      	ldr	r3, [r7, #0]
 8002c62:	685b      	ldr	r3, [r3, #4]
 8002c64:	2b12      	cmp	r3, #18
 8002c66:	d145      	bne.n	8002cf4 <HAL_GPIO_Init+0x190>
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8002c68:	697b      	ldr	r3, [r7, #20]
 8002c6a:	08da      	lsrs	r2, r3, #3
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	3208      	adds	r2, #8
 8002c70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c74:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8002c76:	697b      	ldr	r3, [r7, #20]
 8002c78:	f003 0307 	and.w	r3, r3, #7
 8002c7c:	009b      	lsls	r3, r3, #2
 8002c7e:	220f      	movs	r2, #15
 8002c80:	fa02 f303 	lsl.w	r3, r2, r3
 8002c84:	43db      	mvns	r3, r3
 8002c86:	69fa      	ldr	r2, [r7, #28]
 8002c88:	4013      	ands	r3, r2
 8002c8a:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8002c8c:	683b      	ldr	r3, [r7, #0]
 8002c8e:	691b      	ldr	r3, [r3, #16]
 8002c90:	f003 020f 	and.w	r2, r3, #15
 8002c94:	697b      	ldr	r3, [r7, #20]
 8002c96:	f003 0307 	and.w	r3, r3, #7
 8002c9a:	009b      	lsls	r3, r3, #2
 8002c9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002ca0:	69fa      	ldr	r2, [r7, #28]
 8002ca2:	4313      	orrs	r3, r2
 8002ca4:	61fb      	str	r3, [r7, #28]
        GPIOx->AFR[position >> 3U] = tmp;
 8002ca6:	697b      	ldr	r3, [r7, #20]
 8002ca8:	08da      	lsrs	r2, r3, #3
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	3208      	adds	r2, #8
 8002cae:	69f9      	ldr	r1, [r7, #28]
 8002cb0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8002cb4:	693b      	ldr	r3, [r7, #16]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 8002cba:	69bb      	ldr	r3, [r7, #24]
 8002cbc:	005b      	lsls	r3, r3, #1
 8002cbe:	2203      	movs	r2, #3
 8002cc0:	fa02 f303 	lsl.w	r3, r2, r3
 8002cc4:	43db      	mvns	r3, r3
 8002cc6:	69fa      	ldr	r2, [r7, #28]
 8002cc8:	4013      	ands	r3, r2
 8002cca:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 8002ccc:	683b      	ldr	r3, [r7, #0]
 8002cce:	685b      	ldr	r3, [r3, #4]
 8002cd0:	f003 0203 	and.w	r2, r3, #3
 8002cd4:	69bb      	ldr	r3, [r7, #24]
 8002cd6:	005b      	lsls	r3, r3, #1
 8002cd8:	fa02 f303 	lsl.w	r3, r2, r3
 8002cdc:	69fa      	ldr	r2, [r7, #28]
 8002cde:	4313      	orrs	r3, r2
 8002ce0:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8002ce2:	693b      	ldr	r3, [r7, #16]
 8002ce4:	69fa      	ldr	r2, [r7, #28]
 8002ce6:	601a      	str	r2, [r3, #0]
 8002ce8:	e01e      	b.n	8002d28 <HAL_GPIO_Init+0x1c4>
 8002cea:	bf00      	nop
 8002cec:	46020000 	.word	0x46020000
 8002cf0:	0800dbc4 	.word	0x0800dbc4
      {
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
        tmp = p_gpio->MODER;
 8002cf4:	693b      	ldr	r3, [r7, #16]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 8002cfa:	69bb      	ldr	r3, [r7, #24]
 8002cfc:	005b      	lsls	r3, r3, #1
 8002cfe:	2203      	movs	r2, #3
 8002d00:	fa02 f303 	lsl.w	r3, r2, r3
 8002d04:	43db      	mvns	r3, r3
 8002d06:	69fa      	ldr	r2, [r7, #28]
 8002d08:	4013      	ands	r3, r2
 8002d0a:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 8002d0c:	683b      	ldr	r3, [r7, #0]
 8002d0e:	685b      	ldr	r3, [r3, #4]
 8002d10:	f003 0203 	and.w	r2, r3, #3
 8002d14:	69bb      	ldr	r3, [r7, #24]
 8002d16:	005b      	lsls	r3, r3, #1
 8002d18:	fa02 f303 	lsl.w	r3, r2, r3
 8002d1c:	69fa      	ldr	r2, [r7, #28]
 8002d1e:	4313      	orrs	r3, r2
 8002d20:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8002d22:	693b      	ldr	r3, [r7, #16]
 8002d24:	69fa      	ldr	r2, [r7, #28]
 8002d26:	601a      	str	r2, [r3, #0]
      }

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002d28:	683b      	ldr	r3, [r7, #0]
 8002d2a:	685b      	ldr	r3, [r3, #4]
 8002d2c:	2b01      	cmp	r3, #1
 8002d2e:	d00b      	beq.n	8002d48 <HAL_GPIO_Init+0x1e4>
 8002d30:	683b      	ldr	r3, [r7, #0]
 8002d32:	685b      	ldr	r3, [r3, #4]
 8002d34:	2b02      	cmp	r3, #2
 8002d36:	d007      	beq.n	8002d48 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002d38:	683b      	ldr	r3, [r7, #0]
 8002d3a:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002d3c:	2b11      	cmp	r3, #17
 8002d3e:	d003      	beq.n	8002d48 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	685b      	ldr	r3, [r3, #4]
 8002d44:	2b12      	cmp	r3, #18
 8002d46:	d130      	bne.n	8002daa <HAL_GPIO_Init+0x246>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = p_gpio->OSPEEDR;
 8002d48:	693b      	ldr	r3, [r7, #16]
 8002d4a:	689b      	ldr	r3, [r3, #8]
 8002d4c:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 8002d4e:	69bb      	ldr	r3, [r7, #24]
 8002d50:	005b      	lsls	r3, r3, #1
 8002d52:	2203      	movs	r2, #3
 8002d54:	fa02 f303 	lsl.w	r3, r2, r3
 8002d58:	43db      	mvns	r3, r3
 8002d5a:	69fa      	ldr	r2, [r7, #28]
 8002d5c:	4013      	ands	r3, r2
 8002d5e:	61fb      	str	r3, [r7, #28]
        tmp |= (pGPIO_Init->Speed << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 8002d60:	683b      	ldr	r3, [r7, #0]
 8002d62:	68da      	ldr	r2, [r3, #12]
 8002d64:	69bb      	ldr	r3, [r7, #24]
 8002d66:	005b      	lsls	r3, r3, #1
 8002d68:	fa02 f303 	lsl.w	r3, r2, r3
 8002d6c:	69fa      	ldr	r2, [r7, #28]
 8002d6e:	4313      	orrs	r3, r2
 8002d70:	61fb      	str	r3, [r7, #28]
        p_gpio->OSPEEDR = tmp;
 8002d72:	693b      	ldr	r3, [r7, #16]
 8002d74:	69fa      	ldr	r2, [r7, #28]
 8002d76:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = p_gpio->OTYPER;
 8002d78:	693b      	ldr	r3, [r7, #16]
 8002d7a:	685b      	ldr	r3, [r3, #4]
 8002d7c:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OTYPER_OT0 << pin_position);
 8002d7e:	2201      	movs	r2, #1
 8002d80:	69bb      	ldr	r3, [r7, #24]
 8002d82:	fa02 f303 	lsl.w	r3, r2, r3
 8002d86:	43db      	mvns	r3, r3
 8002d88:	69fa      	ldr	r2, [r7, #28]
 8002d8a:	4013      	ands	r3, r2
 8002d8c:	61fb      	str	r3, [r7, #28]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 8002d8e:	683b      	ldr	r3, [r7, #0]
 8002d90:	685b      	ldr	r3, [r3, #4]
 8002d92:	091b      	lsrs	r3, r3, #4
 8002d94:	f003 0201 	and.w	r2, r3, #1
 8002d98:	69bb      	ldr	r3, [r7, #24]
 8002d9a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d9e:	69fa      	ldr	r2, [r7, #28]
 8002da0:	4313      	orrs	r3, r2
 8002da2:	61fb      	str	r3, [r7, #28]
        p_gpio->OTYPER = tmp;
 8002da4:	693b      	ldr	r3, [r7, #16]
 8002da6:	69fa      	ldr	r2, [r7, #28]
 8002da8:	605a      	str	r2, [r3, #4]
      }

      if ((pGPIO_Init->Mode != GPIO_MODE_ANALOG) || 
 8002daa:	683b      	ldr	r3, [r7, #0]
 8002dac:	685b      	ldr	r3, [r3, #4]
 8002dae:	2b03      	cmp	r3, #3
 8002db0:	d107      	bne.n	8002dc2 <HAL_GPIO_Init+0x25e>
          ((pGPIO_Init->Mode == GPIO_MODE_ANALOG) && (pGPIO_Init->Pull != GPIO_PULLUP)))
 8002db2:	683b      	ldr	r3, [r7, #0]
 8002db4:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode != GPIO_MODE_ANALOG) || 
 8002db6:	2b03      	cmp	r3, #3
 8002db8:	d11b      	bne.n	8002df2 <HAL_GPIO_Init+0x28e>
          ((pGPIO_Init->Mode == GPIO_MODE_ANALOG) && (pGPIO_Init->Pull != GPIO_PULLUP)))
 8002dba:	683b      	ldr	r3, [r7, #0]
 8002dbc:	689b      	ldr	r3, [r3, #8]
 8002dbe:	2b01      	cmp	r3, #1
 8002dc0:	d017      	beq.n	8002df2 <HAL_GPIO_Init+0x28e>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = p_gpio->PUPDR;
 8002dc2:	693b      	ldr	r3, [r7, #16]
 8002dc4:	68db      	ldr	r3, [r3, #12]
 8002dc6:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 8002dc8:	69bb      	ldr	r3, [r7, #24]
 8002dca:	005b      	lsls	r3, r3, #1
 8002dcc:	2203      	movs	r2, #3
 8002dce:	fa02 f303 	lsl.w	r3, r2, r3
 8002dd2:	43db      	mvns	r3, r3
 8002dd4:	69fa      	ldr	r2, [r7, #28]
 8002dd6:	4013      	ands	r3, r2
 8002dd8:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Pull) << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 8002dda:	683b      	ldr	r3, [r7, #0]
 8002ddc:	689a      	ldr	r2, [r3, #8]
 8002dde:	69bb      	ldr	r3, [r7, #24]
 8002de0:	005b      	lsls	r3, r3, #1
 8002de2:	fa02 f303 	lsl.w	r3, r2, r3
 8002de6:	69fa      	ldr	r2, [r7, #28]
 8002de8:	4313      	orrs	r3, r2
 8002dea:	61fb      	str	r3, [r7, #28]
        p_gpio->PUPDR = tmp;
 8002dec:	693b      	ldr	r3, [r7, #16]
 8002dee:	69fa      	ldr	r2, [r7, #28]
 8002df0:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002df2:	683b      	ldr	r3, [r7, #0]
 8002df4:	685b      	ldr	r3, [r3, #4]
 8002df6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d07c      	beq.n	8002ef8 <HAL_GPIO_Init+0x394>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8002dfe:	4a47      	ldr	r2, [pc, #284]	@ (8002f1c <HAL_GPIO_Init+0x3b8>)
 8002e00:	697b      	ldr	r3, [r7, #20]
 8002e02:	089b      	lsrs	r3, r3, #2
 8002e04:	3318      	adds	r3, #24
 8002e06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e0a:	61fb      	str	r3, [r7, #28]
        tmp &= ~((0x0FUL) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 8002e0c:	697b      	ldr	r3, [r7, #20]
 8002e0e:	f003 0303 	and.w	r3, r3, #3
 8002e12:	00db      	lsls	r3, r3, #3
 8002e14:	220f      	movs	r2, #15
 8002e16:	fa02 f303 	lsl.w	r3, r2, r3
 8002e1a:	43db      	mvns	r3, r3
 8002e1c:	69fa      	ldr	r2, [r7, #28]
 8002e1e:	4013      	ands	r3, r2
 8002e20:	61fb      	str	r3, [r7, #28]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	0a9a      	lsrs	r2, r3, #10
 8002e26:	4b3e      	ldr	r3, [pc, #248]	@ (8002f20 <HAL_GPIO_Init+0x3bc>)
 8002e28:	4013      	ands	r3, r2
 8002e2a:	697a      	ldr	r2, [r7, #20]
 8002e2c:	f002 0203 	and.w	r2, r2, #3
 8002e30:	00d2      	lsls	r2, r2, #3
 8002e32:	4093      	lsls	r3, r2
 8002e34:	69fa      	ldr	r2, [r7, #28]
 8002e36:	4313      	orrs	r3, r2
 8002e38:	61fb      	str	r3, [r7, #28]
        EXTI->EXTICR[position >> 2U] = tmp;
 8002e3a:	4938      	ldr	r1, [pc, #224]	@ (8002f1c <HAL_GPIO_Init+0x3b8>)
 8002e3c:	697b      	ldr	r3, [r7, #20]
 8002e3e:	089b      	lsrs	r3, r3, #2
 8002e40:	3318      	adds	r3, #24
 8002e42:	69fa      	ldr	r2, [r7, #28]
 8002e44:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8002e48:	4b34      	ldr	r3, [pc, #208]	@ (8002f1c <HAL_GPIO_Init+0x3b8>)
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	43db      	mvns	r3, r3
 8002e52:	69fa      	ldr	r2, [r7, #28]
 8002e54:	4013      	ands	r3, r2
 8002e56:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002e58:	683b      	ldr	r3, [r7, #0]
 8002e5a:	685b      	ldr	r3, [r3, #4]
 8002e5c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d003      	beq.n	8002e6c <HAL_GPIO_Init+0x308>
        {
          tmp |= iocurrent;
 8002e64:	69fa      	ldr	r2, [r7, #28]
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	4313      	orrs	r3, r2
 8002e6a:	61fb      	str	r3, [r7, #28]
        }
        EXTI->RTSR1 = tmp;
 8002e6c:	4a2b      	ldr	r2, [pc, #172]	@ (8002f1c <HAL_GPIO_Init+0x3b8>)
 8002e6e:	69fb      	ldr	r3, [r7, #28]
 8002e70:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 8002e72:	4b2a      	ldr	r3, [pc, #168]	@ (8002f1c <HAL_GPIO_Init+0x3b8>)
 8002e74:	685b      	ldr	r3, [r3, #4]
 8002e76:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	43db      	mvns	r3, r3
 8002e7c:	69fa      	ldr	r2, [r7, #28]
 8002e7e:	4013      	ands	r3, r2
 8002e80:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002e82:	683b      	ldr	r3, [r7, #0]
 8002e84:	685b      	ldr	r3, [r3, #4]
 8002e86:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d003      	beq.n	8002e96 <HAL_GPIO_Init+0x332>
        {
          tmp |= iocurrent;
 8002e8e:	69fa      	ldr	r2, [r7, #28]
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	4313      	orrs	r3, r2
 8002e94:	61fb      	str	r3, [r7, #28]
        }
        EXTI->FTSR1 = tmp;
 8002e96:	4a21      	ldr	r2, [pc, #132]	@ (8002f1c <HAL_GPIO_Init+0x3b8>)
 8002e98:	69fb      	ldr	r3, [r7, #28]
 8002e9a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 8002e9c:	4b1f      	ldr	r3, [pc, #124]	@ (8002f1c <HAL_GPIO_Init+0x3b8>)
 8002e9e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002ea2:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	43db      	mvns	r3, r3
 8002ea8:	69fa      	ldr	r2, [r7, #28]
 8002eaa:	4013      	ands	r3, r2
 8002eac:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002eae:	683b      	ldr	r3, [r7, #0]
 8002eb0:	685b      	ldr	r3, [r3, #4]
 8002eb2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d003      	beq.n	8002ec2 <HAL_GPIO_Init+0x35e>
        {
          tmp |= iocurrent;
 8002eba:	69fa      	ldr	r2, [r7, #28]
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	4313      	orrs	r3, r2
 8002ec0:	61fb      	str	r3, [r7, #28]
        }
        EXTI->EMR1 = tmp;
 8002ec2:	4a16      	ldr	r2, [pc, #88]	@ (8002f1c <HAL_GPIO_Init+0x3b8>)
 8002ec4:	69fb      	ldr	r3, [r7, #28]
 8002ec6:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        tmp = EXTI->IMR1;
 8002eca:	4b14      	ldr	r3, [pc, #80]	@ (8002f1c <HAL_GPIO_Init+0x3b8>)
 8002ecc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002ed0:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	43db      	mvns	r3, r3
 8002ed6:	69fa      	ldr	r2, [r7, #28]
 8002ed8:	4013      	ands	r3, r2
 8002eda:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002edc:	683b      	ldr	r3, [r7, #0]
 8002ede:	685b      	ldr	r3, [r3, #4]
 8002ee0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d003      	beq.n	8002ef0 <HAL_GPIO_Init+0x38c>
        {
          tmp |= iocurrent;
 8002ee8:	69fa      	ldr	r2, [r7, #28]
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	4313      	orrs	r3, r2
 8002eee:	61fb      	str	r3, [r7, #28]
        }
        EXTI->IMR1 = tmp;
 8002ef0:	4a0a      	ldr	r2, [pc, #40]	@ (8002f1c <HAL_GPIO_Init+0x3b8>)
 8002ef2:	69fb      	ldr	r3, [r7, #28]
 8002ef4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }
    position++;
 8002ef8:	697b      	ldr	r3, [r7, #20]
 8002efa:	3301      	adds	r3, #1
 8002efc:	617b      	str	r3, [r7, #20]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8002efe:	683b      	ldr	r3, [r7, #0]
 8002f00:	681a      	ldr	r2, [r3, #0]
 8002f02:	697b      	ldr	r3, [r7, #20]
 8002f04:	fa22 f303 	lsr.w	r3, r2, r3
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	f47f ae35 	bne.w	8002b78 <HAL_GPIO_Init+0x14>
  }
}
 8002f0e:	bf00      	nop
 8002f10:	bf00      	nop
 8002f12:	3724      	adds	r7, #36	@ 0x24
 8002f14:	46bd      	mov	sp, r7
 8002f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1a:	4770      	bx	lr
 8002f1c:	46022000 	.word	0x46022000
 8002f20:	002f7f7f 	.word	0x002f7f7f

08002f24 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002f24:	b480      	push	{r7}
 8002f26:	b083      	sub	sp, #12
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	6078      	str	r0, [r7, #4]
 8002f2c:	460b      	mov	r3, r1
 8002f2e:	807b      	strh	r3, [r7, #2]
 8002f30:	4613      	mov	r3, r2
 8002f32:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002f34:	787b      	ldrb	r3, [r7, #1]
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d003      	beq.n	8002f42 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002f3a:	887a      	ldrh	r2, [r7, #2]
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
  }
}
 8002f40:	e002      	b.n	8002f48 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
 8002f42:	887a      	ldrh	r2, [r7, #2]
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002f48:	bf00      	nop
 8002f4a:	370c      	adds	r7, #12
 8002f4c:	46bd      	mov	sp, r7
 8002f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f52:	4770      	bx	lr

08002f54 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002f54:	b580      	push	{r7, lr}
 8002f56:	b082      	sub	sp, #8
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	4603      	mov	r3, r0
 8002f5c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0U)
 8002f5e:	4b0f      	ldr	r3, [pc, #60]	@ (8002f9c <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8002f60:	68da      	ldr	r2, [r3, #12]
 8002f62:	88fb      	ldrh	r3, [r7, #6]
 8002f64:	4013      	ands	r3, r2
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d006      	beq.n	8002f78 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 8002f6a:	4a0c      	ldr	r2, [pc, #48]	@ (8002f9c <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8002f6c:	88fb      	ldrh	r3, [r7, #6]
 8002f6e:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 8002f70:	88fb      	ldrh	r3, [r7, #6]
 8002f72:	4618      	mov	r0, r3
 8002f74:	f000 f814 	bl	8002fa0 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0U)
 8002f78:	4b08      	ldr	r3, [pc, #32]	@ (8002f9c <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8002f7a:	691a      	ldr	r2, [r3, #16]
 8002f7c:	88fb      	ldrh	r3, [r7, #6]
 8002f7e:	4013      	ands	r3, r2
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d006      	beq.n	8002f92 <HAL_GPIO_EXTI_IRQHandler+0x3e>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 8002f84:	4a05      	ldr	r2, [pc, #20]	@ (8002f9c <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8002f86:	88fb      	ldrh	r3, [r7, #6]
 8002f88:	6113      	str	r3, [r2, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 8002f8a:	88fb      	ldrh	r3, [r7, #6]
 8002f8c:	4618      	mov	r0, r3
 8002f8e:	f000 f812 	bl	8002fb6 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 8002f92:	bf00      	nop
 8002f94:	3708      	adds	r7, #8
 8002f96:	46bd      	mov	sp, r7
 8002f98:	bd80      	pop	{r7, pc}
 8002f9a:	bf00      	nop
 8002f9c:	46022000 	.word	0x46022000

08002fa0 <HAL_GPIO_EXTI_Rising_Callback>:
  * @brief  EXTI line rising detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 8002fa0:	b480      	push	{r7}
 8002fa2:	b083      	sub	sp, #12
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	4603      	mov	r3, r0
 8002fa8:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Rising_Callback could be implemented in the user file
   */
}
 8002faa:	bf00      	nop
 8002fac:	370c      	adds	r7, #12
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb4:	4770      	bx	lr

08002fb6 <HAL_GPIO_EXTI_Falling_Callback>:
  * @brief  EXTI line falling detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 8002fb6:	b480      	push	{r7}
 8002fb8:	b083      	sub	sp, #12
 8002fba:	af00      	add	r7, sp, #0
 8002fbc:	4603      	mov	r3, r0
 8002fbe:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Falling_Callback could be implemented in the user file
   */
}
 8002fc0:	bf00      	nop
 8002fc2:	370c      	adds	r7, #12
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fca:	4770      	bx	lr

08002fcc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	b082      	sub	sp, #8
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d101      	bne.n	8002fde <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002fda:	2301      	movs	r3, #1
 8002fdc:	e08d      	b.n	80030fa <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002fe4:	b2db      	uxtb	r3, r3
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d106      	bne.n	8002ff8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	2200      	movs	r2, #0
 8002fee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002ff2:	6878      	ldr	r0, [r7, #4]
 8002ff4:	f7fe f932 	bl	800125c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	2224      	movs	r2, #36	@ 0x24
 8002ffc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	681a      	ldr	r2, [r3, #0]
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f022 0201 	bic.w	r2, r2, #1
 800300e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	685a      	ldr	r2, [r3, #4]
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800301c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	689a      	ldr	r2, [r3, #8]
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800302c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	68db      	ldr	r3, [r3, #12]
 8003032:	2b01      	cmp	r3, #1
 8003034:	d107      	bne.n	8003046 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	689a      	ldr	r2, [r3, #8]
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003042:	609a      	str	r2, [r3, #8]
 8003044:	e006      	b.n	8003054 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	689a      	ldr	r2, [r3, #8]
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8003052:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	68db      	ldr	r3, [r3, #12]
 8003058:	2b02      	cmp	r3, #2
 800305a:	d108      	bne.n	800306e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	685a      	ldr	r2, [r3, #4]
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800306a:	605a      	str	r2, [r3, #4]
 800306c:	e007      	b.n	800307e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	685a      	ldr	r2, [r3, #4]
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800307c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	685b      	ldr	r3, [r3, #4]
 8003084:	687a      	ldr	r2, [r7, #4]
 8003086:	6812      	ldr	r2, [r2, #0]
 8003088:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800308c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003090:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	68da      	ldr	r2, [r3, #12]
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80030a0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	691a      	ldr	r2, [r3, #16]
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	695b      	ldr	r3, [r3, #20]
 80030aa:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	699b      	ldr	r3, [r3, #24]
 80030b2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	430a      	orrs	r2, r1
 80030ba:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	69d9      	ldr	r1, [r3, #28]
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	6a1a      	ldr	r2, [r3, #32]
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	430a      	orrs	r2, r1
 80030ca:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	681a      	ldr	r2, [r3, #0]
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f042 0201 	orr.w	r2, r2, #1
 80030da:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	2200      	movs	r2, #0
 80030e0:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	2220      	movs	r2, #32
 80030e6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	2200      	movs	r2, #0
 80030ee:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	2200      	movs	r2, #0
 80030f4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80030f8:	2300      	movs	r3, #0
}
 80030fa:	4618      	mov	r0, r3
 80030fc:	3708      	adds	r7, #8
 80030fe:	46bd      	mov	sp, r7
 8003100:	bd80      	pop	{r7, pc}
	...

08003104 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003104:	b580      	push	{r7, lr}
 8003106:	b088      	sub	sp, #32
 8003108:	af02      	add	r7, sp, #8
 800310a:	60f8      	str	r0, [r7, #12]
 800310c:	4608      	mov	r0, r1
 800310e:	4611      	mov	r1, r2
 8003110:	461a      	mov	r2, r3
 8003112:	4603      	mov	r3, r0
 8003114:	817b      	strh	r3, [r7, #10]
 8003116:	460b      	mov	r3, r1
 8003118:	813b      	strh	r3, [r7, #8]
 800311a:	4613      	mov	r3, r2
 800311c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003124:	b2db      	uxtb	r3, r3
 8003126:	2b20      	cmp	r3, #32
 8003128:	f040 80fd 	bne.w	8003326 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800312c:	6a3b      	ldr	r3, [r7, #32]
 800312e:	2b00      	cmp	r3, #0
 8003130:	d002      	beq.n	8003138 <HAL_I2C_Mem_Read+0x34>
 8003132:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8003134:	2b00      	cmp	r3, #0
 8003136:	d105      	bne.n	8003144 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800313e:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8003140:	2301      	movs	r3, #1
 8003142:	e0f1      	b.n	8003328 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800314a:	2b01      	cmp	r3, #1
 800314c:	d101      	bne.n	8003152 <HAL_I2C_Mem_Read+0x4e>
 800314e:	2302      	movs	r3, #2
 8003150:	e0ea      	b.n	8003328 <HAL_I2C_Mem_Read+0x224>
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	2201      	movs	r2, #1
 8003156:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800315a:	f7ff fae9 	bl	8002730 <HAL_GetTick>
 800315e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003160:	697b      	ldr	r3, [r7, #20]
 8003162:	9300      	str	r3, [sp, #0]
 8003164:	2319      	movs	r3, #25
 8003166:	2201      	movs	r2, #1
 8003168:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800316c:	68f8      	ldr	r0, [r7, #12]
 800316e:	f000 f95b 	bl	8003428 <I2C_WaitOnFlagUntilTimeout>
 8003172:	4603      	mov	r3, r0
 8003174:	2b00      	cmp	r3, #0
 8003176:	d001      	beq.n	800317c <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8003178:	2301      	movs	r3, #1
 800317a:	e0d5      	b.n	8003328 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	2222      	movs	r2, #34	@ 0x22
 8003180:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	2240      	movs	r2, #64	@ 0x40
 8003188:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	2200      	movs	r2, #0
 8003190:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	6a3a      	ldr	r2, [r7, #32]
 8003196:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800319c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	2200      	movs	r2, #0
 80031a2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80031a4:	88f8      	ldrh	r0, [r7, #6]
 80031a6:	893a      	ldrh	r2, [r7, #8]
 80031a8:	8979      	ldrh	r1, [r7, #10]
 80031aa:	697b      	ldr	r3, [r7, #20]
 80031ac:	9301      	str	r3, [sp, #4]
 80031ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80031b0:	9300      	str	r3, [sp, #0]
 80031b2:	4603      	mov	r3, r0
 80031b4:	68f8      	ldr	r0, [r7, #12]
 80031b6:	f000 f8bf 	bl	8003338 <I2C_RequestMemoryRead>
 80031ba:	4603      	mov	r3, r0
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d005      	beq.n	80031cc <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	2200      	movs	r2, #0
 80031c4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 80031c8:	2301      	movs	r3, #1
 80031ca:	e0ad      	b.n	8003328 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80031d0:	b29b      	uxth	r3, r3
 80031d2:	2bff      	cmp	r3, #255	@ 0xff
 80031d4:	d90e      	bls.n	80031f4 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	22ff      	movs	r2, #255	@ 0xff
 80031da:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80031e0:	b2da      	uxtb	r2, r3
 80031e2:	8979      	ldrh	r1, [r7, #10]
 80031e4:	4b52      	ldr	r3, [pc, #328]	@ (8003330 <HAL_I2C_Mem_Read+0x22c>)
 80031e6:	9300      	str	r3, [sp, #0]
 80031e8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80031ec:	68f8      	ldr	r0, [r7, #12]
 80031ee:	f000 fadf 	bl	80037b0 <I2C_TransferConfig>
 80031f2:	e00f      	b.n	8003214 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80031f8:	b29a      	uxth	r2, r3
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003202:	b2da      	uxtb	r2, r3
 8003204:	8979      	ldrh	r1, [r7, #10]
 8003206:	4b4a      	ldr	r3, [pc, #296]	@ (8003330 <HAL_I2C_Mem_Read+0x22c>)
 8003208:	9300      	str	r3, [sp, #0]
 800320a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800320e:	68f8      	ldr	r0, [r7, #12]
 8003210:	f000 face 	bl	80037b0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8003214:	697b      	ldr	r3, [r7, #20]
 8003216:	9300      	str	r3, [sp, #0]
 8003218:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800321a:	2200      	movs	r2, #0
 800321c:	2104      	movs	r1, #4
 800321e:	68f8      	ldr	r0, [r7, #12]
 8003220:	f000 f902 	bl	8003428 <I2C_WaitOnFlagUntilTimeout>
 8003224:	4603      	mov	r3, r0
 8003226:	2b00      	cmp	r3, #0
 8003228:	d001      	beq.n	800322e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800322a:	2301      	movs	r3, #1
 800322c:	e07c      	b.n	8003328 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003238:	b2d2      	uxtb	r2, r2
 800323a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003240:	1c5a      	adds	r2, r3, #1
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800324a:	3b01      	subs	r3, #1
 800324c:	b29a      	uxth	r2, r3
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003256:	b29b      	uxth	r3, r3
 8003258:	3b01      	subs	r3, #1
 800325a:	b29a      	uxth	r2, r3
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003264:	b29b      	uxth	r3, r3
 8003266:	2b00      	cmp	r3, #0
 8003268:	d034      	beq.n	80032d4 <HAL_I2C_Mem_Read+0x1d0>
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800326e:	2b00      	cmp	r3, #0
 8003270:	d130      	bne.n	80032d4 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003272:	697b      	ldr	r3, [r7, #20]
 8003274:	9300      	str	r3, [sp, #0]
 8003276:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003278:	2200      	movs	r2, #0
 800327a:	2180      	movs	r1, #128	@ 0x80
 800327c:	68f8      	ldr	r0, [r7, #12]
 800327e:	f000 f8d3 	bl	8003428 <I2C_WaitOnFlagUntilTimeout>
 8003282:	4603      	mov	r3, r0
 8003284:	2b00      	cmp	r3, #0
 8003286:	d001      	beq.n	800328c <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8003288:	2301      	movs	r3, #1
 800328a:	e04d      	b.n	8003328 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003290:	b29b      	uxth	r3, r3
 8003292:	2bff      	cmp	r3, #255	@ 0xff
 8003294:	d90e      	bls.n	80032b4 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	22ff      	movs	r2, #255	@ 0xff
 800329a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80032a0:	b2da      	uxtb	r2, r3
 80032a2:	8979      	ldrh	r1, [r7, #10]
 80032a4:	2300      	movs	r3, #0
 80032a6:	9300      	str	r3, [sp, #0]
 80032a8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80032ac:	68f8      	ldr	r0, [r7, #12]
 80032ae:	f000 fa7f 	bl	80037b0 <I2C_TransferConfig>
 80032b2:	e00f      	b.n	80032d4 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80032b8:	b29a      	uxth	r2, r3
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80032c2:	b2da      	uxtb	r2, r3
 80032c4:	8979      	ldrh	r1, [r7, #10]
 80032c6:	2300      	movs	r3, #0
 80032c8:	9300      	str	r3, [sp, #0]
 80032ca:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80032ce:	68f8      	ldr	r0, [r7, #12]
 80032d0:	f000 fa6e 	bl	80037b0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80032d8:	b29b      	uxth	r3, r3
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d19a      	bne.n	8003214 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80032de:	697a      	ldr	r2, [r7, #20]
 80032e0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80032e2:	68f8      	ldr	r0, [r7, #12]
 80032e4:	f000 f940 	bl	8003568 <I2C_WaitOnSTOPFlagUntilTimeout>
 80032e8:	4603      	mov	r3, r0
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d001      	beq.n	80032f2 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80032ee:	2301      	movs	r3, #1
 80032f0:	e01a      	b.n	8003328 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	2220      	movs	r2, #32
 80032f8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	6859      	ldr	r1, [r3, #4]
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	681a      	ldr	r2, [r3, #0]
 8003304:	4b0b      	ldr	r3, [pc, #44]	@ (8003334 <HAL_I2C_Mem_Read+0x230>)
 8003306:	400b      	ands	r3, r1
 8003308:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	2220      	movs	r2, #32
 800330e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	2200      	movs	r2, #0
 8003316:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	2200      	movs	r2, #0
 800331e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003322:	2300      	movs	r3, #0
 8003324:	e000      	b.n	8003328 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8003326:	2302      	movs	r3, #2
  }
}
 8003328:	4618      	mov	r0, r3
 800332a:	3718      	adds	r7, #24
 800332c:	46bd      	mov	sp, r7
 800332e:	bd80      	pop	{r7, pc}
 8003330:	80002400 	.word	0x80002400
 8003334:	fe00e800 	.word	0xfe00e800

08003338 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8003338:	b580      	push	{r7, lr}
 800333a:	b086      	sub	sp, #24
 800333c:	af02      	add	r7, sp, #8
 800333e:	60f8      	str	r0, [r7, #12]
 8003340:	4608      	mov	r0, r1
 8003342:	4611      	mov	r1, r2
 8003344:	461a      	mov	r2, r3
 8003346:	4603      	mov	r3, r0
 8003348:	817b      	strh	r3, [r7, #10]
 800334a:	460b      	mov	r3, r1
 800334c:	813b      	strh	r3, [r7, #8]
 800334e:	4613      	mov	r3, r2
 8003350:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8003352:	88fb      	ldrh	r3, [r7, #6]
 8003354:	b2da      	uxtb	r2, r3
 8003356:	8979      	ldrh	r1, [r7, #10]
 8003358:	4b20      	ldr	r3, [pc, #128]	@ (80033dc <I2C_RequestMemoryRead+0xa4>)
 800335a:	9300      	str	r3, [sp, #0]
 800335c:	2300      	movs	r3, #0
 800335e:	68f8      	ldr	r0, [r7, #12]
 8003360:	f000 fa26 	bl	80037b0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003364:	69fa      	ldr	r2, [r7, #28]
 8003366:	69b9      	ldr	r1, [r7, #24]
 8003368:	68f8      	ldr	r0, [r7, #12]
 800336a:	f000 f8b6 	bl	80034da <I2C_WaitOnTXISFlagUntilTimeout>
 800336e:	4603      	mov	r3, r0
 8003370:	2b00      	cmp	r3, #0
 8003372:	d001      	beq.n	8003378 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8003374:	2301      	movs	r3, #1
 8003376:	e02c      	b.n	80033d2 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003378:	88fb      	ldrh	r3, [r7, #6]
 800337a:	2b01      	cmp	r3, #1
 800337c:	d105      	bne.n	800338a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800337e:	893b      	ldrh	r3, [r7, #8]
 8003380:	b2da      	uxtb	r2, r3
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	629a      	str	r2, [r3, #40]	@ 0x28
 8003388:	e015      	b.n	80033b6 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800338a:	893b      	ldrh	r3, [r7, #8]
 800338c:	0a1b      	lsrs	r3, r3, #8
 800338e:	b29b      	uxth	r3, r3
 8003390:	b2da      	uxtb	r2, r3
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003398:	69fa      	ldr	r2, [r7, #28]
 800339a:	69b9      	ldr	r1, [r7, #24]
 800339c:	68f8      	ldr	r0, [r7, #12]
 800339e:	f000 f89c 	bl	80034da <I2C_WaitOnTXISFlagUntilTimeout>
 80033a2:	4603      	mov	r3, r0
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d001      	beq.n	80033ac <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80033a8:	2301      	movs	r3, #1
 80033aa:	e012      	b.n	80033d2 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80033ac:	893b      	ldrh	r3, [r7, #8]
 80033ae:	b2da      	uxtb	r2, r3
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80033b6:	69fb      	ldr	r3, [r7, #28]
 80033b8:	9300      	str	r3, [sp, #0]
 80033ba:	69bb      	ldr	r3, [r7, #24]
 80033bc:	2200      	movs	r2, #0
 80033be:	2140      	movs	r1, #64	@ 0x40
 80033c0:	68f8      	ldr	r0, [r7, #12]
 80033c2:	f000 f831 	bl	8003428 <I2C_WaitOnFlagUntilTimeout>
 80033c6:	4603      	mov	r3, r0
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d001      	beq.n	80033d0 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80033cc:	2301      	movs	r3, #1
 80033ce:	e000      	b.n	80033d2 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80033d0:	2300      	movs	r3, #0
}
 80033d2:	4618      	mov	r0, r3
 80033d4:	3710      	adds	r7, #16
 80033d6:	46bd      	mov	sp, r7
 80033d8:	bd80      	pop	{r7, pc}
 80033da:	bf00      	nop
 80033dc:	80002000 	.word	0x80002000

080033e0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80033e0:	b480      	push	{r7}
 80033e2:	b083      	sub	sp, #12
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	699b      	ldr	r3, [r3, #24]
 80033ee:	f003 0302 	and.w	r3, r3, #2
 80033f2:	2b02      	cmp	r3, #2
 80033f4:	d103      	bne.n	80033fe <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	2200      	movs	r2, #0
 80033fc:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	699b      	ldr	r3, [r3, #24]
 8003404:	f003 0301 	and.w	r3, r3, #1
 8003408:	2b01      	cmp	r3, #1
 800340a:	d007      	beq.n	800341c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	699a      	ldr	r2, [r3, #24]
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f042 0201 	orr.w	r2, r2, #1
 800341a:	619a      	str	r2, [r3, #24]
  }
}
 800341c:	bf00      	nop
 800341e:	370c      	adds	r7, #12
 8003420:	46bd      	mov	sp, r7
 8003422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003426:	4770      	bx	lr

08003428 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003428:	b580      	push	{r7, lr}
 800342a:	b084      	sub	sp, #16
 800342c:	af00      	add	r7, sp, #0
 800342e:	60f8      	str	r0, [r7, #12]
 8003430:	60b9      	str	r1, [r7, #8]
 8003432:	603b      	str	r3, [r7, #0]
 8003434:	4613      	mov	r3, r2
 8003436:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003438:	e03b      	b.n	80034b2 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800343a:	69ba      	ldr	r2, [r7, #24]
 800343c:	6839      	ldr	r1, [r7, #0]
 800343e:	68f8      	ldr	r0, [r7, #12]
 8003440:	f000 f8d6 	bl	80035f0 <I2C_IsErrorOccurred>
 8003444:	4603      	mov	r3, r0
 8003446:	2b00      	cmp	r3, #0
 8003448:	d001      	beq.n	800344e <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800344a:	2301      	movs	r3, #1
 800344c:	e041      	b.n	80034d2 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800344e:	683b      	ldr	r3, [r7, #0]
 8003450:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003454:	d02d      	beq.n	80034b2 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003456:	f7ff f96b 	bl	8002730 <HAL_GetTick>
 800345a:	4602      	mov	r2, r0
 800345c:	69bb      	ldr	r3, [r7, #24]
 800345e:	1ad3      	subs	r3, r2, r3
 8003460:	683a      	ldr	r2, [r7, #0]
 8003462:	429a      	cmp	r2, r3
 8003464:	d302      	bcc.n	800346c <I2C_WaitOnFlagUntilTimeout+0x44>
 8003466:	683b      	ldr	r3, [r7, #0]
 8003468:	2b00      	cmp	r3, #0
 800346a:	d122      	bne.n	80034b2 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	699a      	ldr	r2, [r3, #24]
 8003472:	68bb      	ldr	r3, [r7, #8]
 8003474:	4013      	ands	r3, r2
 8003476:	68ba      	ldr	r2, [r7, #8]
 8003478:	429a      	cmp	r2, r3
 800347a:	bf0c      	ite	eq
 800347c:	2301      	moveq	r3, #1
 800347e:	2300      	movne	r3, #0
 8003480:	b2db      	uxtb	r3, r3
 8003482:	461a      	mov	r2, r3
 8003484:	79fb      	ldrb	r3, [r7, #7]
 8003486:	429a      	cmp	r2, r3
 8003488:	d113      	bne.n	80034b2 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800348e:	f043 0220 	orr.w	r2, r3, #32
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	2220      	movs	r2, #32
 800349a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	2200      	movs	r2, #0
 80034a2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	2200      	movs	r2, #0
 80034aa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 80034ae:	2301      	movs	r3, #1
 80034b0:	e00f      	b.n	80034d2 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	699a      	ldr	r2, [r3, #24]
 80034b8:	68bb      	ldr	r3, [r7, #8]
 80034ba:	4013      	ands	r3, r2
 80034bc:	68ba      	ldr	r2, [r7, #8]
 80034be:	429a      	cmp	r2, r3
 80034c0:	bf0c      	ite	eq
 80034c2:	2301      	moveq	r3, #1
 80034c4:	2300      	movne	r3, #0
 80034c6:	b2db      	uxtb	r3, r3
 80034c8:	461a      	mov	r2, r3
 80034ca:	79fb      	ldrb	r3, [r7, #7]
 80034cc:	429a      	cmp	r2, r3
 80034ce:	d0b4      	beq.n	800343a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80034d0:	2300      	movs	r3, #0
}
 80034d2:	4618      	mov	r0, r3
 80034d4:	3710      	adds	r7, #16
 80034d6:	46bd      	mov	sp, r7
 80034d8:	bd80      	pop	{r7, pc}

080034da <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80034da:	b580      	push	{r7, lr}
 80034dc:	b084      	sub	sp, #16
 80034de:	af00      	add	r7, sp, #0
 80034e0:	60f8      	str	r0, [r7, #12]
 80034e2:	60b9      	str	r1, [r7, #8]
 80034e4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80034e6:	e033      	b.n	8003550 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80034e8:	687a      	ldr	r2, [r7, #4]
 80034ea:	68b9      	ldr	r1, [r7, #8]
 80034ec:	68f8      	ldr	r0, [r7, #12]
 80034ee:	f000 f87f 	bl	80035f0 <I2C_IsErrorOccurred>
 80034f2:	4603      	mov	r3, r0
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d001      	beq.n	80034fc <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80034f8:	2301      	movs	r3, #1
 80034fa:	e031      	b.n	8003560 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80034fc:	68bb      	ldr	r3, [r7, #8]
 80034fe:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003502:	d025      	beq.n	8003550 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003504:	f7ff f914 	bl	8002730 <HAL_GetTick>
 8003508:	4602      	mov	r2, r0
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	1ad3      	subs	r3, r2, r3
 800350e:	68ba      	ldr	r2, [r7, #8]
 8003510:	429a      	cmp	r2, r3
 8003512:	d302      	bcc.n	800351a <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003514:	68bb      	ldr	r3, [r7, #8]
 8003516:	2b00      	cmp	r3, #0
 8003518:	d11a      	bne.n	8003550 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	699b      	ldr	r3, [r3, #24]
 8003520:	f003 0302 	and.w	r3, r3, #2
 8003524:	2b02      	cmp	r3, #2
 8003526:	d013      	beq.n	8003550 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800352c:	f043 0220 	orr.w	r2, r3, #32
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	2220      	movs	r2, #32
 8003538:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	2200      	movs	r2, #0
 8003540:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	2200      	movs	r2, #0
 8003548:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800354c:	2301      	movs	r3, #1
 800354e:	e007      	b.n	8003560 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	699b      	ldr	r3, [r3, #24]
 8003556:	f003 0302 	and.w	r3, r3, #2
 800355a:	2b02      	cmp	r3, #2
 800355c:	d1c4      	bne.n	80034e8 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800355e:	2300      	movs	r3, #0
}
 8003560:	4618      	mov	r0, r3
 8003562:	3710      	adds	r7, #16
 8003564:	46bd      	mov	sp, r7
 8003566:	bd80      	pop	{r7, pc}

08003568 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003568:	b580      	push	{r7, lr}
 800356a:	b084      	sub	sp, #16
 800356c:	af00      	add	r7, sp, #0
 800356e:	60f8      	str	r0, [r7, #12]
 8003570:	60b9      	str	r1, [r7, #8]
 8003572:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003574:	e02f      	b.n	80035d6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003576:	687a      	ldr	r2, [r7, #4]
 8003578:	68b9      	ldr	r1, [r7, #8]
 800357a:	68f8      	ldr	r0, [r7, #12]
 800357c:	f000 f838 	bl	80035f0 <I2C_IsErrorOccurred>
 8003580:	4603      	mov	r3, r0
 8003582:	2b00      	cmp	r3, #0
 8003584:	d001      	beq.n	800358a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003586:	2301      	movs	r3, #1
 8003588:	e02d      	b.n	80035e6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800358a:	f7ff f8d1 	bl	8002730 <HAL_GetTick>
 800358e:	4602      	mov	r2, r0
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	1ad3      	subs	r3, r2, r3
 8003594:	68ba      	ldr	r2, [r7, #8]
 8003596:	429a      	cmp	r2, r3
 8003598:	d302      	bcc.n	80035a0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800359a:	68bb      	ldr	r3, [r7, #8]
 800359c:	2b00      	cmp	r3, #0
 800359e:	d11a      	bne.n	80035d6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	699b      	ldr	r3, [r3, #24]
 80035a6:	f003 0320 	and.w	r3, r3, #32
 80035aa:	2b20      	cmp	r3, #32
 80035ac:	d013      	beq.n	80035d6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035b2:	f043 0220 	orr.w	r2, r3, #32
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	2220      	movs	r2, #32
 80035be:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	2200      	movs	r2, #0
 80035c6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	2200      	movs	r2, #0
 80035ce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80035d2:	2301      	movs	r3, #1
 80035d4:	e007      	b.n	80035e6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	699b      	ldr	r3, [r3, #24]
 80035dc:	f003 0320 	and.w	r3, r3, #32
 80035e0:	2b20      	cmp	r3, #32
 80035e2:	d1c8      	bne.n	8003576 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80035e4:	2300      	movs	r3, #0
}
 80035e6:	4618      	mov	r0, r3
 80035e8:	3710      	adds	r7, #16
 80035ea:	46bd      	mov	sp, r7
 80035ec:	bd80      	pop	{r7, pc}
	...

080035f0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80035f0:	b580      	push	{r7, lr}
 80035f2:	b08a      	sub	sp, #40	@ 0x28
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	60f8      	str	r0, [r7, #12]
 80035f8:	60b9      	str	r1, [r7, #8]
 80035fa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80035fc:	2300      	movs	r3, #0
 80035fe:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	699b      	ldr	r3, [r3, #24]
 8003608:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800360a:	2300      	movs	r3, #0
 800360c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003612:	69bb      	ldr	r3, [r7, #24]
 8003614:	f003 0310 	and.w	r3, r3, #16
 8003618:	2b00      	cmp	r3, #0
 800361a:	d068      	beq.n	80036ee <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	2210      	movs	r2, #16
 8003622:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003624:	e049      	b.n	80036ba <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003626:	68bb      	ldr	r3, [r7, #8]
 8003628:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800362c:	d045      	beq.n	80036ba <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800362e:	f7ff f87f 	bl	8002730 <HAL_GetTick>
 8003632:	4602      	mov	r2, r0
 8003634:	69fb      	ldr	r3, [r7, #28]
 8003636:	1ad3      	subs	r3, r2, r3
 8003638:	68ba      	ldr	r2, [r7, #8]
 800363a:	429a      	cmp	r2, r3
 800363c:	d302      	bcc.n	8003644 <I2C_IsErrorOccurred+0x54>
 800363e:	68bb      	ldr	r3, [r7, #8]
 8003640:	2b00      	cmp	r3, #0
 8003642:	d13a      	bne.n	80036ba <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	685b      	ldr	r3, [r3, #4]
 800364a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800364e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003656:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	699b      	ldr	r3, [r3, #24]
 800365e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003662:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003666:	d121      	bne.n	80036ac <I2C_IsErrorOccurred+0xbc>
 8003668:	697b      	ldr	r3, [r7, #20]
 800366a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800366e:	d01d      	beq.n	80036ac <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8003670:	7cfb      	ldrb	r3, [r7, #19]
 8003672:	2b20      	cmp	r3, #32
 8003674:	d01a      	beq.n	80036ac <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	685a      	ldr	r2, [r3, #4]
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003684:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003686:	f7ff f853 	bl	8002730 <HAL_GetTick>
 800368a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800368c:	e00e      	b.n	80036ac <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800368e:	f7ff f84f 	bl	8002730 <HAL_GetTick>
 8003692:	4602      	mov	r2, r0
 8003694:	69fb      	ldr	r3, [r7, #28]
 8003696:	1ad3      	subs	r3, r2, r3
 8003698:	2b19      	cmp	r3, #25
 800369a:	d907      	bls.n	80036ac <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800369c:	6a3b      	ldr	r3, [r7, #32]
 800369e:	f043 0320 	orr.w	r3, r3, #32
 80036a2:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80036a4:	2301      	movs	r3, #1
 80036a6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 80036aa:	e006      	b.n	80036ba <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	699b      	ldr	r3, [r3, #24]
 80036b2:	f003 0320 	and.w	r3, r3, #32
 80036b6:	2b20      	cmp	r3, #32
 80036b8:	d1e9      	bne.n	800368e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	699b      	ldr	r3, [r3, #24]
 80036c0:	f003 0320 	and.w	r3, r3, #32
 80036c4:	2b20      	cmp	r3, #32
 80036c6:	d003      	beq.n	80036d0 <I2C_IsErrorOccurred+0xe0>
 80036c8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d0aa      	beq.n	8003626 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80036d0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d103      	bne.n	80036e0 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	2220      	movs	r2, #32
 80036de:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80036e0:	6a3b      	ldr	r3, [r7, #32]
 80036e2:	f043 0304 	orr.w	r3, r3, #4
 80036e6:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80036e8:	2301      	movs	r3, #1
 80036ea:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	699b      	ldr	r3, [r3, #24]
 80036f4:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80036f6:	69bb      	ldr	r3, [r7, #24]
 80036f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d00b      	beq.n	8003718 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003700:	6a3b      	ldr	r3, [r7, #32]
 8003702:	f043 0301 	orr.w	r3, r3, #1
 8003706:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003710:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003712:	2301      	movs	r3, #1
 8003714:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003718:	69bb      	ldr	r3, [r7, #24]
 800371a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800371e:	2b00      	cmp	r3, #0
 8003720:	d00b      	beq.n	800373a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003722:	6a3b      	ldr	r3, [r7, #32]
 8003724:	f043 0308 	orr.w	r3, r3, #8
 8003728:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003732:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003734:	2301      	movs	r3, #1
 8003736:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800373a:	69bb      	ldr	r3, [r7, #24]
 800373c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003740:	2b00      	cmp	r3, #0
 8003742:	d00b      	beq.n	800375c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003744:	6a3b      	ldr	r3, [r7, #32]
 8003746:	f043 0302 	orr.w	r3, r3, #2
 800374a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003754:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003756:	2301      	movs	r3, #1
 8003758:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 800375c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003760:	2b00      	cmp	r3, #0
 8003762:	d01c      	beq.n	800379e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003764:	68f8      	ldr	r0, [r7, #12]
 8003766:	f7ff fe3b 	bl	80033e0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	6859      	ldr	r1, [r3, #4]
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	681a      	ldr	r2, [r3, #0]
 8003774:	4b0d      	ldr	r3, [pc, #52]	@ (80037ac <I2C_IsErrorOccurred+0x1bc>)
 8003776:	400b      	ands	r3, r1
 8003778:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800377e:	6a3b      	ldr	r3, [r7, #32]
 8003780:	431a      	orrs	r2, r3
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	2220      	movs	r2, #32
 800378a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	2200      	movs	r2, #0
 8003792:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	2200      	movs	r2, #0
 800379a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 800379e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80037a2:	4618      	mov	r0, r3
 80037a4:	3728      	adds	r7, #40	@ 0x28
 80037a6:	46bd      	mov	sp, r7
 80037a8:	bd80      	pop	{r7, pc}
 80037aa:	bf00      	nop
 80037ac:	fe00e800 	.word	0xfe00e800

080037b0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80037b0:	b480      	push	{r7}
 80037b2:	b087      	sub	sp, #28
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	60f8      	str	r0, [r7, #12]
 80037b8:	607b      	str	r3, [r7, #4]
 80037ba:	460b      	mov	r3, r1
 80037bc:	817b      	strh	r3, [r7, #10]
 80037be:	4613      	mov	r3, r2
 80037c0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80037c2:	897b      	ldrh	r3, [r7, #10]
 80037c4:	f3c3 0209 	ubfx	r2, r3, #0, #10
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80037c8:	7a7b      	ldrb	r3, [r7, #9]
 80037ca:	041b      	lsls	r3, r3, #16
 80037cc:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80037d0:	431a      	orrs	r2, r3
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	431a      	orrs	r2, r3
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80037d6:	6a3b      	ldr	r3, [r7, #32]
 80037d8:	4313      	orrs	r3, r2
 80037da:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80037de:	617b      	str	r3, [r7, #20]
                    (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	685a      	ldr	r2, [r3, #4]
 80037e6:	6a3b      	ldr	r3, [r7, #32]
 80037e8:	0d5b      	lsrs	r3, r3, #21
 80037ea:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 80037ee:	4b08      	ldr	r3, [pc, #32]	@ (8003810 <I2C_TransferConfig+0x60>)
 80037f0:	430b      	orrs	r3, r1
 80037f2:	43db      	mvns	r3, r3
 80037f4:	ea02 0103 	and.w	r1, r2, r3
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	697a      	ldr	r2, [r7, #20]
 80037fe:	430a      	orrs	r2, r1
 8003800:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003802:	bf00      	nop
 8003804:	371c      	adds	r7, #28
 8003806:	46bd      	mov	sp, r7
 8003808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380c:	4770      	bx	lr
 800380e:	bf00      	nop
 8003810:	03ff63ff 	.word	0x03ff63ff

08003814 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003814:	b480      	push	{r7}
 8003816:	b083      	sub	sp, #12
 8003818:	af00      	add	r7, sp, #0
 800381a:	6078      	str	r0, [r7, #4]
 800381c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003824:	b2db      	uxtb	r3, r3
 8003826:	2b20      	cmp	r3, #32
 8003828:	d138      	bne.n	800389c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003830:	2b01      	cmp	r3, #1
 8003832:	d101      	bne.n	8003838 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003834:	2302      	movs	r3, #2
 8003836:	e032      	b.n	800389e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	2201      	movs	r2, #1
 800383c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	2224      	movs	r2, #36	@ 0x24
 8003844:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	681a      	ldr	r2, [r3, #0]
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f022 0201 	bic.w	r2, r2, #1
 8003856:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	681a      	ldr	r2, [r3, #0]
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003866:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	6819      	ldr	r1, [r3, #0]
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	683a      	ldr	r2, [r7, #0]
 8003874:	430a      	orrs	r2, r1
 8003876:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	681a      	ldr	r2, [r3, #0]
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f042 0201 	orr.w	r2, r2, #1
 8003886:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	2220      	movs	r2, #32
 800388c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	2200      	movs	r2, #0
 8003894:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003898:	2300      	movs	r3, #0
 800389a:	e000      	b.n	800389e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800389c:	2302      	movs	r3, #2
  }
}
 800389e:	4618      	mov	r0, r3
 80038a0:	370c      	adds	r7, #12
 80038a2:	46bd      	mov	sp, r7
 80038a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a8:	4770      	bx	lr

080038aa <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80038aa:	b480      	push	{r7}
 80038ac:	b085      	sub	sp, #20
 80038ae:	af00      	add	r7, sp, #0
 80038b0:	6078      	str	r0, [r7, #4]
 80038b2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80038ba:	b2db      	uxtb	r3, r3
 80038bc:	2b20      	cmp	r3, #32
 80038be:	d139      	bne.n	8003934 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80038c6:	2b01      	cmp	r3, #1
 80038c8:	d101      	bne.n	80038ce <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80038ca:	2302      	movs	r3, #2
 80038cc:	e033      	b.n	8003936 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	2201      	movs	r2, #1
 80038d2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	2224      	movs	r2, #36	@ 0x24
 80038da:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	681a      	ldr	r2, [r3, #0]
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f022 0201 	bic.w	r2, r2, #1
 80038ec:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80038fc:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80038fe:	683b      	ldr	r3, [r7, #0]
 8003900:	021b      	lsls	r3, r3, #8
 8003902:	68fa      	ldr	r2, [r7, #12]
 8003904:	4313      	orrs	r3, r2
 8003906:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	68fa      	ldr	r2, [r7, #12]
 800390e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	681a      	ldr	r2, [r3, #0]
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f042 0201 	orr.w	r2, r2, #1
 800391e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	2220      	movs	r2, #32
 8003924:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	2200      	movs	r2, #0
 800392c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003930:	2300      	movs	r3, #0
 8003932:	e000      	b.n	8003936 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003934:	2302      	movs	r3, #2
  }
}
 8003936:	4618      	mov	r0, r3
 8003938:	3714      	adds	r7, #20
 800393a:	46bd      	mov	sp, r7
 800393c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003940:	4770      	bx	lr
	...

08003944 <HAL_ICACHE_ConfigAssociativityMode>:
  *            @arg ICACHE_1WAY   1-way cache (direct mapped cache)
  *            @arg ICACHE_2WAYS  2-ways set associative cache (default)
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef HAL_ICACHE_ConfigAssociativityMode(uint32_t AssociativityMode)
{
 8003944:	b480      	push	{r7}
 8003946:	b085      	sub	sp, #20
 8003948:	af00      	add	r7, sp, #0
 800394a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800394c:	2300      	movs	r3, #0
 800394e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 8003950:	4b0b      	ldr	r3, [pc, #44]	@ (8003980 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f003 0301 	and.w	r3, r3, #1
 8003958:	2b00      	cmp	r3, #0
 800395a:	d002      	beq.n	8003962 <HAL_ICACHE_ConfigAssociativityMode+0x1e>
  {
    status = HAL_ERROR;
 800395c:	2301      	movs	r3, #1
 800395e:	73fb      	strb	r3, [r7, #15]
 8003960:	e007      	b.n	8003972 <HAL_ICACHE_ConfigAssociativityMode+0x2e>
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 8003962:	4b07      	ldr	r3, [pc, #28]	@ (8003980 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f023 0204 	bic.w	r2, r3, #4
 800396a:	4905      	ldr	r1, [pc, #20]	@ (8003980 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	4313      	orrs	r3, r2
 8003970:	600b      	str	r3, [r1, #0]
  }

  return status;
 8003972:	7bfb      	ldrb	r3, [r7, #15]
}
 8003974:	4618      	mov	r0, r3
 8003976:	3714      	adds	r7, #20
 8003978:	46bd      	mov	sp, r7
 800397a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397e:	4770      	bx	lr
 8003980:	40030400 	.word	0x40030400

08003984 <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 8003984:	b480      	push	{r7}
 8003986:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 8003988:	4b05      	ldr	r3, [pc, #20]	@ (80039a0 <HAL_ICACHE_Enable+0x1c>)
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	4a04      	ldr	r2, [pc, #16]	@ (80039a0 <HAL_ICACHE_Enable+0x1c>)
 800398e:	f043 0301 	orr.w	r3, r3, #1
 8003992:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8003994:	2300      	movs	r3, #0
}
 8003996:	4618      	mov	r0, r3
 8003998:	46bd      	mov	sp, r7
 800399a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399e:	4770      	bx	lr
 80039a0:	40030400 	.word	0x40030400

080039a4 <HAL_PWREx_ControlVoltageScaling>:
  * @note  Before moving to voltage scaling 4, it is mandatory to ensure that
  *        the system frequency is below 24 MHz.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80039a4:	b480      	push	{r7}
 80039a6:	b085      	sub	sp, #20
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Get the current voltage scale applied */
  vos_old = READ_BIT(PWR->SVMSR, PWR_SVMSR_ACTVOS);
 80039ac:	4b39      	ldr	r3, [pc, #228]	@ (8003a94 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80039ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80039b0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80039b4:	60bb      	str	r3, [r7, #8]

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 80039b6:	68ba      	ldr	r2, [r7, #8]
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	429a      	cmp	r2, r3
 80039bc:	d10b      	bne.n	80039d6 <HAL_PWREx_ControlVoltageScaling+0x32>
  {
    /* Enable USB BOOST after wake up from Stop mode */
    if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80039c4:	d905      	bls.n	80039d2 <HAL_PWREx_ControlVoltageScaling+0x2e>
    {
      /* Enable USB BOOST */
      SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 80039c6:	4b33      	ldr	r3, [pc, #204]	@ (8003a94 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80039c8:	68db      	ldr	r3, [r3, #12]
 80039ca:	4a32      	ldr	r2, [pc, #200]	@ (8003a94 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80039cc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80039d0:	60d3      	str	r3, [r2, #12]
    }

    return HAL_OK;
 80039d2:	2300      	movs	r3, #0
 80039d4:	e057      	b.n	8003a86 <HAL_PWREx_ControlVoltageScaling+0xe2>
  /* Check voltage scaling level */
  /*
   *  The Embedded power distribution (EPOD) must be enabled before switching to
   *  voltage scale 1 / 2 from voltage scale lower.
   */
  if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80039dc:	d90a      	bls.n	80039f4 <HAL_PWREx_ControlVoltageScaling+0x50>
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), (VoltageScaling | PWR_VOSR_BOOSTEN));
 80039de:	4b2d      	ldr	r3, [pc, #180]	@ (8003a94 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80039e0:	68db      	ldr	r3, [r3, #12]
 80039e2:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	4313      	orrs	r3, r2
 80039ea:	4a2a      	ldr	r2, [pc, #168]	@ (8003a94 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80039ec:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80039f0:	60d3      	str	r3, [r2, #12]
 80039f2:	e007      	b.n	8003a04 <HAL_PWREx_ControlVoltageScaling+0x60>
  }
  else
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), VoltageScaling);
 80039f4:	4b27      	ldr	r3, [pc, #156]	@ (8003a94 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80039f6:	68db      	ldr	r3, [r3, #12]
 80039f8:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 80039fc:	4925      	ldr	r1, [pc, #148]	@ (8003a94 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	4313      	orrs	r3, r2
 8003a02:	60cb      	str	r3, [r1, #12]
  }

  /* Wait until VOSRDY is raised */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8003a04:	4b24      	ldr	r3, [pc, #144]	@ (8003a98 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	4a24      	ldr	r2, [pc, #144]	@ (8003a9c <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8003a0a:	fba2 2303 	umull	r2, r3, r2, r3
 8003a0e:	099b      	lsrs	r3, r3, #6
 8003a10:	2232      	movs	r2, #50	@ 0x32
 8003a12:	fb02 f303 	mul.w	r3, r2, r3
 8003a16:	4a21      	ldr	r2, [pc, #132]	@ (8003a9c <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8003a18:	fba2 2303 	umull	r2, r3, r2, r3
 8003a1c:	099b      	lsrs	r3, r3, #6
 8003a1e:	3301      	adds	r3, #1
 8003a20:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8003a22:	e002      	b.n	8003a2a <HAL_PWREx_ControlVoltageScaling+0x86>
  {
    timeout--;
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	3b01      	subs	r3, #1
 8003a28:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8003a2a:	4b1a      	ldr	r3, [pc, #104]	@ (8003a94 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8003a2c:	68db      	ldr	r3, [r3, #12]
 8003a2e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d102      	bne.n	8003a3c <HAL_PWREx_ControlVoltageScaling+0x98>
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d1f3      	bne.n	8003a24 <HAL_PWREx_ControlVoltageScaling+0x80>
  }

  /* Check time out */
  if (timeout != 0U)
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d01b      	beq.n	8003a7a <HAL_PWREx_ControlVoltageScaling+0xd6>
  {
    /* Wait until ACTVOSRDY is raised */
    timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8003a42:	4b15      	ldr	r3, [pc, #84]	@ (8003a98 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	4a15      	ldr	r2, [pc, #84]	@ (8003a9c <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8003a48:	fba2 2303 	umull	r2, r3, r2, r3
 8003a4c:	099b      	lsrs	r3, r3, #6
 8003a4e:	2232      	movs	r2, #50	@ 0x32
 8003a50:	fb02 f303 	mul.w	r3, r2, r3
 8003a54:	4a11      	ldr	r2, [pc, #68]	@ (8003a9c <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8003a56:	fba2 2303 	umull	r2, r3, r2, r3
 8003a5a:	099b      	lsrs	r3, r3, #6
 8003a5c:	3301      	adds	r3, #1
 8003a5e:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8003a60:	e002      	b.n	8003a68 <HAL_PWREx_ControlVoltageScaling+0xc4>
    {
      timeout--;
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	3b01      	subs	r3, #1
 8003a66:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8003a68:	4b0a      	ldr	r3, [pc, #40]	@ (8003a94 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8003a6a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a6c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d102      	bne.n	8003a7a <HAL_PWREx_ControlVoltageScaling+0xd6>
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d1f3      	bne.n	8003a62 <HAL_PWREx_ControlVoltageScaling+0xbe>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d101      	bne.n	8003a84 <HAL_PWREx_ControlVoltageScaling+0xe0>
  {
    return HAL_TIMEOUT;
 8003a80:	2303      	movs	r3, #3
 8003a82:	e000      	b.n	8003a86 <HAL_PWREx_ControlVoltageScaling+0xe2>
  }

  return HAL_OK;
 8003a84:	2300      	movs	r3, #0
}
 8003a86:	4618      	mov	r0, r3
 8003a88:	3714      	adds	r7, #20
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a90:	4770      	bx	lr
 8003a92:	bf00      	nop
 8003a94:	46020800 	.word	0x46020800
 8003a98:	20000000 	.word	0x20000000
 8003a9c:	10624dd3 	.word	0x10624dd3

08003aa0 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief  Return Voltage Scaling Range.
  * @retval Applied voltage scaling value.
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003aa0:	b480      	push	{r7}
 8003aa2:	af00      	add	r7, sp, #0
  return (PWR->SVMSR & PWR_SVMSR_ACTVOS);
 8003aa4:	4b04      	ldr	r3, [pc, #16]	@ (8003ab8 <HAL_PWREx_GetVoltageRange+0x18>)
 8003aa6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003aa8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
}
 8003aac:	4618      	mov	r0, r3
 8003aae:	46bd      	mov	sp, r7
 8003ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab4:	4770      	bx	lr
 8003ab6:	bf00      	nop
 8003ab8:	46020800 	.word	0x46020800

08003abc <HAL_PWREx_ConfigSupply>:
  *                        @arg PWR_LDO_SUPPLY  : The LDO regulator supplies the Vcore Power Domains.
  *                        @arg PWR_SMPS_SUPPLY : The SMPS regulator supplies the Vcore Power Domains.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply(uint32_t SupplySource)
{
 8003abc:	b480      	push	{r7}
 8003abe:	b085      	sub	sp, #20
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_SUPPLY(SupplySource));

  /* Set maximum time out */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8003ac4:	4b22      	ldr	r3, [pc, #136]	@ (8003b50 <HAL_PWREx_ConfigSupply+0x94>)
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	4a22      	ldr	r2, [pc, #136]	@ (8003b54 <HAL_PWREx_ConfigSupply+0x98>)
 8003aca:	fba2 2303 	umull	r2, r3, r2, r3
 8003ace:	099b      	lsrs	r3, r3, #6
 8003ad0:	2232      	movs	r2, #50	@ 0x32
 8003ad2:	fb02 f303 	mul.w	r3, r2, r3
 8003ad6:	4a1f      	ldr	r2, [pc, #124]	@ (8003b54 <HAL_PWREx_ConfigSupply+0x98>)
 8003ad8:	fba2 2303 	umull	r2, r3, r2, r3
 8003adc:	099b      	lsrs	r3, r3, #6
 8003ade:	3301      	adds	r3, #1
 8003ae0:	60fb      	str	r3, [r7, #12]

  /* Configure the LDO as system regulator supply */
  if (SupplySource == PWR_LDO_SUPPLY)
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d113      	bne.n	8003b10 <HAL_PWREx_ConfigSupply+0x54>
  {
    /* Set the power supply configuration */
    CLEAR_BIT(PWR->CR3, PWR_CR3_REGSEL);
 8003ae8:	4b1b      	ldr	r3, [pc, #108]	@ (8003b58 <HAL_PWREx_ConfigSupply+0x9c>)
 8003aea:	689b      	ldr	r3, [r3, #8]
 8003aec:	4a1a      	ldr	r2, [pc, #104]	@ (8003b58 <HAL_PWREx_ConfigSupply+0x9c>)
 8003aee:	f023 0302 	bic.w	r3, r3, #2
 8003af2:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8003af4:	e002      	b.n	8003afc <HAL_PWREx_ConfigSupply+0x40>
    {
      timeout--;
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	3b01      	subs	r3, #1
 8003afa:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8003afc:	4b16      	ldr	r3, [pc, #88]	@ (8003b58 <HAL_PWREx_ConfigSupply+0x9c>)
 8003afe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b00:	f003 0302 	and.w	r3, r3, #2
 8003b04:	2b02      	cmp	r3, #2
 8003b06:	d116      	bne.n	8003b36 <HAL_PWREx_ConfigSupply+0x7a>
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d1f3      	bne.n	8003af6 <HAL_PWREx_ConfigSupply+0x3a>
 8003b0e:	e012      	b.n	8003b36 <HAL_PWREx_ConfigSupply+0x7a>
  }
  /* Configure the SMPS as system regulator supply */
  else
  {
    /* Set the power supply configuration */
    SET_BIT(PWR->CR3, PWR_CR3_REGSEL);
 8003b10:	4b11      	ldr	r3, [pc, #68]	@ (8003b58 <HAL_PWREx_ConfigSupply+0x9c>)
 8003b12:	689b      	ldr	r3, [r3, #8]
 8003b14:	4a10      	ldr	r2, [pc, #64]	@ (8003b58 <HAL_PWREx_ConfigSupply+0x9c>)
 8003b16:	f043 0302 	orr.w	r3, r3, #2
 8003b1a:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8003b1c:	e002      	b.n	8003b24 <HAL_PWREx_ConfigSupply+0x68>
    {
      timeout--;
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	3b01      	subs	r3, #1
 8003b22:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8003b24:	4b0c      	ldr	r3, [pc, #48]	@ (8003b58 <HAL_PWREx_ConfigSupply+0x9c>)
 8003b26:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b28:	f003 0302 	and.w	r3, r3, #2
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d102      	bne.n	8003b36 <HAL_PWREx_ConfigSupply+0x7a>
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d1f3      	bne.n	8003b1e <HAL_PWREx_ConfigSupply+0x62>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d101      	bne.n	8003b40 <HAL_PWREx_ConfigSupply+0x84>
  {
    return HAL_TIMEOUT;
 8003b3c:	2303      	movs	r3, #3
 8003b3e:	e000      	b.n	8003b42 <HAL_PWREx_ConfigSupply+0x86>
  }

  return HAL_OK;
 8003b40:	2300      	movs	r3, #0
}
 8003b42:	4618      	mov	r0, r3
 8003b44:	3714      	adds	r7, #20
 8003b46:	46bd      	mov	sp, r7
 8003b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4c:	4770      	bx	lr
 8003b4e:	bf00      	nop
 8003b50:	20000000 	.word	0x20000000
 8003b54:	10624dd3 	.word	0x10624dd3
 8003b58:	46020800 	.word	0x46020800

08003b5c <HAL_PWREx_EnableVddIO2>:
  * @note   Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8003b5c:	b480      	push	{r7}
 8003b5e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_IO2SV);
 8003b60:	4b05      	ldr	r3, [pc, #20]	@ (8003b78 <HAL_PWREx_EnableVddIO2+0x1c>)
 8003b62:	691b      	ldr	r3, [r3, #16]
 8003b64:	4a04      	ldr	r2, [pc, #16]	@ (8003b78 <HAL_PWREx_EnableVddIO2+0x1c>)
 8003b66:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8003b6a:	6113      	str	r3, [r2, #16]
}
 8003b6c:	bf00      	nop
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b74:	4770      	bx	lr
 8003b76:	bf00      	nop
 8003b78:	46020800 	.word	0x46020800

08003b7c <HAL_PWREx_DisableUCPDDeadBattery>:
  *         pull-down or to handover control to the UCPD (the UCPD must be
  *         initialized before doing the disable).
  * @retval None.
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8003b7c:	b480      	push	{r7}
 8003b7e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->UCPDR, PWR_UCPDR_UCPD_DBDIS);
 8003b80:	4b05      	ldr	r3, [pc, #20]	@ (8003b98 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003b82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b84:	4a04      	ldr	r2, [pc, #16]	@ (8003b98 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003b86:	f043 0301 	orr.w	r3, r3, #1
 8003b8a:	62d3      	str	r3, [r2, #44]	@ 0x2c
}
 8003b8c:	bf00      	nop
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b94:	4770      	bx	lr
 8003b96:	bf00      	nop
 8003b98:	46020800 	.word	0x46020800

08003b9c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pRCC_OscInitStruct)
{
 8003b9c:	b580      	push	{r7, lr}
 8003b9e:	b08e      	sub	sp, #56	@ 0x38
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source;
  uint32_t pll_config;
  FlagStatus pwrboosten = RESET;
 8003ba4:	2300      	movs	r3, #0
 8003ba6:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pRCC_OscInitStruct == NULL)
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d102      	bne.n	8003bb6 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8003bb0:	2301      	movs	r3, #1
 8003bb2:	f000 bec8 	b.w	8004946 <HAL_RCC_OscConfig+0xdaa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pRCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003bb6:	4b99      	ldr	r3, [pc, #612]	@ (8003e1c <HAL_RCC_OscConfig+0x280>)
 8003bb8:	69db      	ldr	r3, [r3, #28]
 8003bba:	f003 030c 	and.w	r3, r3, #12
 8003bbe:	633b      	str	r3, [r7, #48]	@ 0x30
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003bc0:	4b96      	ldr	r3, [pc, #600]	@ (8003e1c <HAL_RCC_OscConfig+0x280>)
 8003bc2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003bc4:	f003 0303 	and.w	r3, r3, #3
 8003bc8:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /*----------------------------- MSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f003 0310 	and.w	r3, r3, #16
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	f000 816c 	beq.w	8003eb0 <HAL_RCC_OscConfig+0x314>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(pRCC_OscInitStruct->MSIClockRange));

    /*Check if MSI is used as system clock or as PLL source when PLL is selected as system clock*/

    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8003bd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d007      	beq.n	8003bee <HAL_RCC_OscConfig+0x52>
 8003bde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003be0:	2b0c      	cmp	r3, #12
 8003be2:	f040 80de 	bne.w	8003da2 <HAL_RCC_OscConfig+0x206>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003be6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003be8:	2b01      	cmp	r3, #1
 8003bea:	f040 80da 	bne.w	8003da2 <HAL_RCC_OscConfig+0x206>
    {
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	69db      	ldr	r3, [r3, #28]
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d102      	bne.n	8003bfc <HAL_RCC_OscConfig+0x60>
      {
        return HAL_ERROR;
 8003bf6:	2301      	movs	r3, #1
 8003bf8:	f000 bea5 	b.w	8004946 <HAL_RCC_OscConfig+0xdaa>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device */
        if (pRCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003c00:	4b86      	ldr	r3, [pc, #536]	@ (8003e1c <HAL_RCC_OscConfig+0x280>)
 8003c02:	689b      	ldr	r3, [r3, #8]
 8003c04:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d004      	beq.n	8003c16 <HAL_RCC_OscConfig+0x7a>
 8003c0c:	4b83      	ldr	r3, [pc, #524]	@ (8003e1c <HAL_RCC_OscConfig+0x280>)
 8003c0e:	689b      	ldr	r3, [r3, #8]
 8003c10:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8003c14:	e005      	b.n	8003c22 <HAL_RCC_OscConfig+0x86>
 8003c16:	4b81      	ldr	r3, [pc, #516]	@ (8003e1c <HAL_RCC_OscConfig+0x280>)
 8003c18:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8003c1c:	041b      	lsls	r3, r3, #16
 8003c1e:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8003c22:	4293      	cmp	r3, r2
 8003c24:	d255      	bcs.n	8003cd2 <HAL_RCC_OscConfig+0x136>
        {
          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8003c26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d10a      	bne.n	8003c42 <HAL_RCC_OscConfig+0xa6>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c30:	4618      	mov	r0, r3
 8003c32:	f001 fa11 	bl	8005058 <RCC_SetFlashLatencyFromMSIRange>
 8003c36:	4603      	mov	r3, r0
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d002      	beq.n	8003c42 <HAL_RCC_OscConfig+0xa6>
            {
              return HAL_ERROR;
 8003c3c:	2301      	movs	r3, #1
 8003c3e:	f000 be82 	b.w	8004946 <HAL_RCC_OscConfig+0xdaa>
            }
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8003c42:	4b76      	ldr	r3, [pc, #472]	@ (8003e1c <HAL_RCC_OscConfig+0x280>)
 8003c44:	689b      	ldr	r3, [r3, #8]
 8003c46:	4a75      	ldr	r2, [pc, #468]	@ (8003e1c <HAL_RCC_OscConfig+0x280>)
 8003c48:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003c4c:	6093      	str	r3, [r2, #8]
 8003c4e:	4b73      	ldr	r3, [pc, #460]	@ (8003e1c <HAL_RCC_OscConfig+0x280>)
 8003c50:	689b      	ldr	r3, [r3, #8]
 8003c52:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c5a:	4970      	ldr	r1, [pc, #448]	@ (8003e1c <HAL_RCC_OscConfig+0x280>)
 8003c5c:	4313      	orrs	r3, r2
 8003c5e:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c64:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8003c68:	d309      	bcc.n	8003c7e <HAL_RCC_OscConfig+0xe2>
 8003c6a:	4b6c      	ldr	r3, [pc, #432]	@ (8003e1c <HAL_RCC_OscConfig+0x280>)
 8003c6c:	68db      	ldr	r3, [r3, #12]
 8003c6e:	f023 021f 	bic.w	r2, r3, #31
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	6a1b      	ldr	r3, [r3, #32]
 8003c76:	4969      	ldr	r1, [pc, #420]	@ (8003e1c <HAL_RCC_OscConfig+0x280>)
 8003c78:	4313      	orrs	r3, r2
 8003c7a:	60cb      	str	r3, [r1, #12]
 8003c7c:	e07e      	b.n	8003d7c <HAL_RCC_OscConfig+0x1e0>
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	da0a      	bge.n	8003c9c <HAL_RCC_OscConfig+0x100>
 8003c86:	4b65      	ldr	r3, [pc, #404]	@ (8003e1c <HAL_RCC_OscConfig+0x280>)
 8003c88:	68db      	ldr	r3, [r3, #12]
 8003c8a:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	6a1b      	ldr	r3, [r3, #32]
 8003c92:	015b      	lsls	r3, r3, #5
 8003c94:	4961      	ldr	r1, [pc, #388]	@ (8003e1c <HAL_RCC_OscConfig+0x280>)
 8003c96:	4313      	orrs	r3, r2
 8003c98:	60cb      	str	r3, [r1, #12]
 8003c9a:	e06f      	b.n	8003d7c <HAL_RCC_OscConfig+0x1e0>
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ca0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003ca4:	d30a      	bcc.n	8003cbc <HAL_RCC_OscConfig+0x120>
 8003ca6:	4b5d      	ldr	r3, [pc, #372]	@ (8003e1c <HAL_RCC_OscConfig+0x280>)
 8003ca8:	68db      	ldr	r3, [r3, #12]
 8003caa:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	6a1b      	ldr	r3, [r3, #32]
 8003cb2:	029b      	lsls	r3, r3, #10
 8003cb4:	4959      	ldr	r1, [pc, #356]	@ (8003e1c <HAL_RCC_OscConfig+0x280>)
 8003cb6:	4313      	orrs	r3, r2
 8003cb8:	60cb      	str	r3, [r1, #12]
 8003cba:	e05f      	b.n	8003d7c <HAL_RCC_OscConfig+0x1e0>
 8003cbc:	4b57      	ldr	r3, [pc, #348]	@ (8003e1c <HAL_RCC_OscConfig+0x280>)
 8003cbe:	68db      	ldr	r3, [r3, #12]
 8003cc0:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	6a1b      	ldr	r3, [r3, #32]
 8003cc8:	03db      	lsls	r3, r3, #15
 8003cca:	4954      	ldr	r1, [pc, #336]	@ (8003e1c <HAL_RCC_OscConfig+0x280>)
 8003ccc:	4313      	orrs	r3, r2
 8003cce:	60cb      	str	r3, [r1, #12]
 8003cd0:	e054      	b.n	8003d7c <HAL_RCC_OscConfig+0x1e0>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8003cd2:	4b52      	ldr	r3, [pc, #328]	@ (8003e1c <HAL_RCC_OscConfig+0x280>)
 8003cd4:	689b      	ldr	r3, [r3, #8]
 8003cd6:	4a51      	ldr	r2, [pc, #324]	@ (8003e1c <HAL_RCC_OscConfig+0x280>)
 8003cd8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003cdc:	6093      	str	r3, [r2, #8]
 8003cde:	4b4f      	ldr	r3, [pc, #316]	@ (8003e1c <HAL_RCC_OscConfig+0x280>)
 8003ce0:	689b      	ldr	r3, [r3, #8]
 8003ce2:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cea:	494c      	ldr	r1, [pc, #304]	@ (8003e1c <HAL_RCC_OscConfig+0x280>)
 8003cec:	4313      	orrs	r3, r2
 8003cee:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cf4:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8003cf8:	d309      	bcc.n	8003d0e <HAL_RCC_OscConfig+0x172>
 8003cfa:	4b48      	ldr	r3, [pc, #288]	@ (8003e1c <HAL_RCC_OscConfig+0x280>)
 8003cfc:	68db      	ldr	r3, [r3, #12]
 8003cfe:	f023 021f 	bic.w	r2, r3, #31
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	6a1b      	ldr	r3, [r3, #32]
 8003d06:	4945      	ldr	r1, [pc, #276]	@ (8003e1c <HAL_RCC_OscConfig+0x280>)
 8003d08:	4313      	orrs	r3, r2
 8003d0a:	60cb      	str	r3, [r1, #12]
 8003d0c:	e028      	b.n	8003d60 <HAL_RCC_OscConfig+0x1c4>
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	da0a      	bge.n	8003d2c <HAL_RCC_OscConfig+0x190>
 8003d16:	4b41      	ldr	r3, [pc, #260]	@ (8003e1c <HAL_RCC_OscConfig+0x280>)
 8003d18:	68db      	ldr	r3, [r3, #12]
 8003d1a:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	6a1b      	ldr	r3, [r3, #32]
 8003d22:	015b      	lsls	r3, r3, #5
 8003d24:	493d      	ldr	r1, [pc, #244]	@ (8003e1c <HAL_RCC_OscConfig+0x280>)
 8003d26:	4313      	orrs	r3, r2
 8003d28:	60cb      	str	r3, [r1, #12]
 8003d2a:	e019      	b.n	8003d60 <HAL_RCC_OscConfig+0x1c4>
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d30:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003d34:	d30a      	bcc.n	8003d4c <HAL_RCC_OscConfig+0x1b0>
 8003d36:	4b39      	ldr	r3, [pc, #228]	@ (8003e1c <HAL_RCC_OscConfig+0x280>)
 8003d38:	68db      	ldr	r3, [r3, #12]
 8003d3a:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	6a1b      	ldr	r3, [r3, #32]
 8003d42:	029b      	lsls	r3, r3, #10
 8003d44:	4935      	ldr	r1, [pc, #212]	@ (8003e1c <HAL_RCC_OscConfig+0x280>)
 8003d46:	4313      	orrs	r3, r2
 8003d48:	60cb      	str	r3, [r1, #12]
 8003d4a:	e009      	b.n	8003d60 <HAL_RCC_OscConfig+0x1c4>
 8003d4c:	4b33      	ldr	r3, [pc, #204]	@ (8003e1c <HAL_RCC_OscConfig+0x280>)
 8003d4e:	68db      	ldr	r3, [r3, #12]
 8003d50:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	6a1b      	ldr	r3, [r3, #32]
 8003d58:	03db      	lsls	r3, r3, #15
 8003d5a:	4930      	ldr	r1, [pc, #192]	@ (8003e1c <HAL_RCC_OscConfig+0x280>)
 8003d5c:	4313      	orrs	r3, r2
 8003d5e:	60cb      	str	r3, [r1, #12]
                                                (pRCC_OscInitStruct->MSIClockRange));

          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8003d60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d10a      	bne.n	8003d7c <HAL_RCC_OscConfig+0x1e0>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	f001 f974 	bl	8005058 <RCC_SetFlashLatencyFromMSIRange>
 8003d70:	4603      	mov	r3, r0
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d002      	beq.n	8003d7c <HAL_RCC_OscConfig+0x1e0>
            {
              return HAL_ERROR;
 8003d76:	2301      	movs	r3, #1
 8003d78:	f000 bde5 	b.w	8004946 <HAL_RCC_OscConfig+0xdaa>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        (void) HAL_RCC_GetHCLKFreq();
 8003d7c:	f001 f8de 	bl	8004f3c <HAL_RCC_GetHCLKFreq>
        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003d80:	4b27      	ldr	r3, [pc, #156]	@ (8003e20 <HAL_RCC_OscConfig+0x284>)
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	4618      	mov	r0, r3
 8003d86:	f7fe f89b 	bl	8001ec0 <HAL_InitTick>
 8003d8a:	4603      	mov	r3, r0
 8003d8c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if (status != HAL_OK)
 8003d90:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	f000 808a 	beq.w	8003eae <HAL_RCC_OscConfig+0x312>
        {
          return status;
 8003d9a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003d9e:	f000 bdd2 	b.w	8004946 <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Check the MSI State */
      if (pRCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	69db      	ldr	r3, [r3, #28]
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d066      	beq.n	8003e78 <HAL_RCC_OscConfig+0x2dc>
      {
        /* Enable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_ENABLE();
 8003daa:	4b1c      	ldr	r3, [pc, #112]	@ (8003e1c <HAL_RCC_OscConfig+0x280>)
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	4a1b      	ldr	r2, [pc, #108]	@ (8003e1c <HAL_RCC_OscConfig+0x280>)
 8003db0:	f043 0301 	orr.w	r3, r3, #1
 8003db4:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8003db6:	f7fe fcbb 	bl	8002730 <HAL_GetTick>
 8003dba:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8003dbc:	e009      	b.n	8003dd2 <HAL_RCC_OscConfig+0x236>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003dbe:	f7fe fcb7 	bl	8002730 <HAL_GetTick>
 8003dc2:	4602      	mov	r2, r0
 8003dc4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003dc6:	1ad3      	subs	r3, r2, r3
 8003dc8:	2b02      	cmp	r3, #2
 8003dca:	d902      	bls.n	8003dd2 <HAL_RCC_OscConfig+0x236>
          {
            return HAL_TIMEOUT;
 8003dcc:	2303      	movs	r3, #3
 8003dce:	f000 bdba 	b.w	8004946 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8003dd2:	4b12      	ldr	r3, [pc, #72]	@ (8003e1c <HAL_RCC_OscConfig+0x280>)
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f003 0304 	and.w	r3, r3, #4
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d0ef      	beq.n	8003dbe <HAL_RCC_OscConfig+0x222>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range */
        __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8003dde:	4b0f      	ldr	r3, [pc, #60]	@ (8003e1c <HAL_RCC_OscConfig+0x280>)
 8003de0:	689b      	ldr	r3, [r3, #8]
 8003de2:	4a0e      	ldr	r2, [pc, #56]	@ (8003e1c <HAL_RCC_OscConfig+0x280>)
 8003de4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003de8:	6093      	str	r3, [r2, #8]
 8003dea:	4b0c      	ldr	r3, [pc, #48]	@ (8003e1c <HAL_RCC_OscConfig+0x280>)
 8003dec:	689b      	ldr	r3, [r3, #8]
 8003dee:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003df6:	4909      	ldr	r1, [pc, #36]	@ (8003e1c <HAL_RCC_OscConfig+0x280>)
 8003df8:	4313      	orrs	r3, r2
 8003dfa:	608b      	str	r3, [r1, #8]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e00:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8003e04:	d30e      	bcc.n	8003e24 <HAL_RCC_OscConfig+0x288>
 8003e06:	4b05      	ldr	r3, [pc, #20]	@ (8003e1c <HAL_RCC_OscConfig+0x280>)
 8003e08:	68db      	ldr	r3, [r3, #12]
 8003e0a:	f023 021f 	bic.w	r2, r3, #31
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	6a1b      	ldr	r3, [r3, #32]
 8003e12:	4902      	ldr	r1, [pc, #8]	@ (8003e1c <HAL_RCC_OscConfig+0x280>)
 8003e14:	4313      	orrs	r3, r2
 8003e16:	60cb      	str	r3, [r1, #12]
 8003e18:	e04a      	b.n	8003eb0 <HAL_RCC_OscConfig+0x314>
 8003e1a:	bf00      	nop
 8003e1c:	46020c00 	.word	0x46020c00
 8003e20:	20000020 	.word	0x20000020
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	da0a      	bge.n	8003e42 <HAL_RCC_OscConfig+0x2a6>
 8003e2c:	4b98      	ldr	r3, [pc, #608]	@ (8004090 <HAL_RCC_OscConfig+0x4f4>)
 8003e2e:	68db      	ldr	r3, [r3, #12]
 8003e30:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	6a1b      	ldr	r3, [r3, #32]
 8003e38:	015b      	lsls	r3, r3, #5
 8003e3a:	4995      	ldr	r1, [pc, #596]	@ (8004090 <HAL_RCC_OscConfig+0x4f4>)
 8003e3c:	4313      	orrs	r3, r2
 8003e3e:	60cb      	str	r3, [r1, #12]
 8003e40:	e036      	b.n	8003eb0 <HAL_RCC_OscConfig+0x314>
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e46:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003e4a:	d30a      	bcc.n	8003e62 <HAL_RCC_OscConfig+0x2c6>
 8003e4c:	4b90      	ldr	r3, [pc, #576]	@ (8004090 <HAL_RCC_OscConfig+0x4f4>)
 8003e4e:	68db      	ldr	r3, [r3, #12]
 8003e50:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	6a1b      	ldr	r3, [r3, #32]
 8003e58:	029b      	lsls	r3, r3, #10
 8003e5a:	498d      	ldr	r1, [pc, #564]	@ (8004090 <HAL_RCC_OscConfig+0x4f4>)
 8003e5c:	4313      	orrs	r3, r2
 8003e5e:	60cb      	str	r3, [r1, #12]
 8003e60:	e026      	b.n	8003eb0 <HAL_RCC_OscConfig+0x314>
 8003e62:	4b8b      	ldr	r3, [pc, #556]	@ (8004090 <HAL_RCC_OscConfig+0x4f4>)
 8003e64:	68db      	ldr	r3, [r3, #12]
 8003e66:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	6a1b      	ldr	r3, [r3, #32]
 8003e6e:	03db      	lsls	r3, r3, #15
 8003e70:	4987      	ldr	r1, [pc, #540]	@ (8004090 <HAL_RCC_OscConfig+0x4f4>)
 8003e72:	4313      	orrs	r3, r2
 8003e74:	60cb      	str	r3, [r1, #12]
 8003e76:	e01b      	b.n	8003eb0 <HAL_RCC_OscConfig+0x314>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_DISABLE();
 8003e78:	4b85      	ldr	r3, [pc, #532]	@ (8004090 <HAL_RCC_OscConfig+0x4f4>)
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	4a84      	ldr	r2, [pc, #528]	@ (8004090 <HAL_RCC_OscConfig+0x4f4>)
 8003e7e:	f023 0301 	bic.w	r3, r3, #1
 8003e82:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8003e84:	f7fe fc54 	bl	8002730 <HAL_GetTick>
 8003e88:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8003e8a:	e009      	b.n	8003ea0 <HAL_RCC_OscConfig+0x304>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003e8c:	f7fe fc50 	bl	8002730 <HAL_GetTick>
 8003e90:	4602      	mov	r2, r0
 8003e92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e94:	1ad3      	subs	r3, r2, r3
 8003e96:	2b02      	cmp	r3, #2
 8003e98:	d902      	bls.n	8003ea0 <HAL_RCC_OscConfig+0x304>
          {
            return HAL_TIMEOUT;
 8003e9a:	2303      	movs	r3, #3
 8003e9c:	f000 bd53 	b.w	8004946 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8003ea0:	4b7b      	ldr	r3, [pc, #492]	@ (8004090 <HAL_RCC_OscConfig+0x4f4>)
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f003 0304 	and.w	r3, r3, #4
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d1ef      	bne.n	8003e8c <HAL_RCC_OscConfig+0x2f0>
 8003eac:	e000      	b.n	8003eb0 <HAL_RCC_OscConfig+0x314>
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8003eae:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f003 0301 	and.w	r3, r3, #1
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	f000 808b 	beq.w	8003fd4 <HAL_RCC_OscConfig+0x438>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pRCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8003ebe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ec0:	2b08      	cmp	r3, #8
 8003ec2:	d005      	beq.n	8003ed0 <HAL_RCC_OscConfig+0x334>
 8003ec4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ec6:	2b0c      	cmp	r3, #12
 8003ec8:	d109      	bne.n	8003ede <HAL_RCC_OscConfig+0x342>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003eca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ecc:	2b03      	cmp	r3, #3
 8003ece:	d106      	bne.n	8003ede <HAL_RCC_OscConfig+0x342>
    {
      if (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	685b      	ldr	r3, [r3, #4]
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d17d      	bne.n	8003fd4 <HAL_RCC_OscConfig+0x438>
      {
        return HAL_ERROR;
 8003ed8:	2301      	movs	r3, #1
 8003eda:	f000 bd34 	b.w	8004946 <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	685b      	ldr	r3, [r3, #4]
 8003ee2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003ee6:	d106      	bne.n	8003ef6 <HAL_RCC_OscConfig+0x35a>
 8003ee8:	4b69      	ldr	r3, [pc, #420]	@ (8004090 <HAL_RCC_OscConfig+0x4f4>)
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	4a68      	ldr	r2, [pc, #416]	@ (8004090 <HAL_RCC_OscConfig+0x4f4>)
 8003eee:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003ef2:	6013      	str	r3, [r2, #0]
 8003ef4:	e041      	b.n	8003f7a <HAL_RCC_OscConfig+0x3de>
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	685b      	ldr	r3, [r3, #4]
 8003efa:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003efe:	d112      	bne.n	8003f26 <HAL_RCC_OscConfig+0x38a>
 8003f00:	4b63      	ldr	r3, [pc, #396]	@ (8004090 <HAL_RCC_OscConfig+0x4f4>)
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	4a62      	ldr	r2, [pc, #392]	@ (8004090 <HAL_RCC_OscConfig+0x4f4>)
 8003f06:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003f0a:	6013      	str	r3, [r2, #0]
 8003f0c:	4b60      	ldr	r3, [pc, #384]	@ (8004090 <HAL_RCC_OscConfig+0x4f4>)
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	4a5f      	ldr	r2, [pc, #380]	@ (8004090 <HAL_RCC_OscConfig+0x4f4>)
 8003f12:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8003f16:	6013      	str	r3, [r2, #0]
 8003f18:	4b5d      	ldr	r3, [pc, #372]	@ (8004090 <HAL_RCC_OscConfig+0x4f4>)
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	4a5c      	ldr	r2, [pc, #368]	@ (8004090 <HAL_RCC_OscConfig+0x4f4>)
 8003f1e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003f22:	6013      	str	r3, [r2, #0]
 8003f24:	e029      	b.n	8003f7a <HAL_RCC_OscConfig+0x3de>
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	685b      	ldr	r3, [r3, #4]
 8003f2a:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 8003f2e:	d112      	bne.n	8003f56 <HAL_RCC_OscConfig+0x3ba>
 8003f30:	4b57      	ldr	r3, [pc, #348]	@ (8004090 <HAL_RCC_OscConfig+0x4f4>)
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	4a56      	ldr	r2, [pc, #344]	@ (8004090 <HAL_RCC_OscConfig+0x4f4>)
 8003f36:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003f3a:	6013      	str	r3, [r2, #0]
 8003f3c:	4b54      	ldr	r3, [pc, #336]	@ (8004090 <HAL_RCC_OscConfig+0x4f4>)
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	4a53      	ldr	r2, [pc, #332]	@ (8004090 <HAL_RCC_OscConfig+0x4f4>)
 8003f42:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003f46:	6013      	str	r3, [r2, #0]
 8003f48:	4b51      	ldr	r3, [pc, #324]	@ (8004090 <HAL_RCC_OscConfig+0x4f4>)
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	4a50      	ldr	r2, [pc, #320]	@ (8004090 <HAL_RCC_OscConfig+0x4f4>)
 8003f4e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003f52:	6013      	str	r3, [r2, #0]
 8003f54:	e011      	b.n	8003f7a <HAL_RCC_OscConfig+0x3de>
 8003f56:	4b4e      	ldr	r3, [pc, #312]	@ (8004090 <HAL_RCC_OscConfig+0x4f4>)
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	4a4d      	ldr	r2, [pc, #308]	@ (8004090 <HAL_RCC_OscConfig+0x4f4>)
 8003f5c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003f60:	6013      	str	r3, [r2, #0]
 8003f62:	4b4b      	ldr	r3, [pc, #300]	@ (8004090 <HAL_RCC_OscConfig+0x4f4>)
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	4a4a      	ldr	r2, [pc, #296]	@ (8004090 <HAL_RCC_OscConfig+0x4f4>)
 8003f68:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003f6c:	6013      	str	r3, [r2, #0]
 8003f6e:	4b48      	ldr	r3, [pc, #288]	@ (8004090 <HAL_RCC_OscConfig+0x4f4>)
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	4a47      	ldr	r2, [pc, #284]	@ (8004090 <HAL_RCC_OscConfig+0x4f4>)
 8003f74:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8003f78:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	685b      	ldr	r3, [r3, #4]
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d014      	beq.n	8003fac <HAL_RCC_OscConfig+0x410>
      {
        tickstart = HAL_GetTick();
 8003f82:	f7fe fbd5 	bl	8002730 <HAL_GetTick>
 8003f86:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003f88:	e009      	b.n	8003f9e <HAL_RCC_OscConfig+0x402>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003f8a:	f7fe fbd1 	bl	8002730 <HAL_GetTick>
 8003f8e:	4602      	mov	r2, r0
 8003f90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f92:	1ad3      	subs	r3, r2, r3
 8003f94:	2b64      	cmp	r3, #100	@ 0x64
 8003f96:	d902      	bls.n	8003f9e <HAL_RCC_OscConfig+0x402>
          {
            return HAL_TIMEOUT;
 8003f98:	2303      	movs	r3, #3
 8003f9a:	f000 bcd4 	b.w	8004946 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003f9e:	4b3c      	ldr	r3, [pc, #240]	@ (8004090 <HAL_RCC_OscConfig+0x4f4>)
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d0ef      	beq.n	8003f8a <HAL_RCC_OscConfig+0x3ee>
 8003faa:	e013      	b.n	8003fd4 <HAL_RCC_OscConfig+0x438>
          }
        }
      }
      else
      {
        tickstart = HAL_GetTick();
 8003fac:	f7fe fbc0 	bl	8002730 <HAL_GetTick>
 8003fb0:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003fb2:	e009      	b.n	8003fc8 <HAL_RCC_OscConfig+0x42c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003fb4:	f7fe fbbc 	bl	8002730 <HAL_GetTick>
 8003fb8:	4602      	mov	r2, r0
 8003fba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003fbc:	1ad3      	subs	r3, r2, r3
 8003fbe:	2b64      	cmp	r3, #100	@ 0x64
 8003fc0:	d902      	bls.n	8003fc8 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8003fc2:	2303      	movs	r3, #3
 8003fc4:	f000 bcbf 	b.w	8004946 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003fc8:	4b31      	ldr	r3, [pc, #196]	@ (8004090 <HAL_RCC_OscConfig+0x4f4>)
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d1ef      	bne.n	8003fb4 <HAL_RCC_OscConfig+0x418>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f003 0302 	and.w	r3, r3, #2
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d05f      	beq.n	80040a0 <HAL_RCC_OscConfig+0x504>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(pRCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8003fe0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003fe2:	2b04      	cmp	r3, #4
 8003fe4:	d005      	beq.n	8003ff2 <HAL_RCC_OscConfig+0x456>
 8003fe6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003fe8:	2b0c      	cmp	r3, #12
 8003fea:	d114      	bne.n	8004016 <HAL_RCC_OscConfig+0x47a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003fec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003fee:	2b02      	cmp	r3, #2
 8003ff0:	d111      	bne.n	8004016 <HAL_RCC_OscConfig+0x47a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	68db      	ldr	r3, [r3, #12]
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d102      	bne.n	8004000 <HAL_RCC_OscConfig+0x464>
      {
        return HAL_ERROR;
 8003ffa:	2301      	movs	r3, #1
 8003ffc:	f000 bca3 	b.w	8004946 <HAL_RCC_OscConfig+0xdaa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8004000:	4b23      	ldr	r3, [pc, #140]	@ (8004090 <HAL_RCC_OscConfig+0x4f4>)
 8004002:	691b      	ldr	r3, [r3, #16]
 8004004:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	691b      	ldr	r3, [r3, #16]
 800400c:	041b      	lsls	r3, r3, #16
 800400e:	4920      	ldr	r1, [pc, #128]	@ (8004090 <HAL_RCC_OscConfig+0x4f4>)
 8004010:	4313      	orrs	r3, r2
 8004012:	610b      	str	r3, [r1, #16]
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8004014:	e044      	b.n	80040a0 <HAL_RCC_OscConfig+0x504>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	68db      	ldr	r3, [r3, #12]
 800401a:	2b00      	cmp	r3, #0
 800401c:	d024      	beq.n	8004068 <HAL_RCC_OscConfig+0x4cc>
      {
        /* Enable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_ENABLE();
 800401e:	4b1c      	ldr	r3, [pc, #112]	@ (8004090 <HAL_RCC_OscConfig+0x4f4>)
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	4a1b      	ldr	r2, [pc, #108]	@ (8004090 <HAL_RCC_OscConfig+0x4f4>)
 8004024:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004028:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800402a:	f7fe fb81 	bl	8002730 <HAL_GetTick>
 800402e:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004030:	e009      	b.n	8004046 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004032:	f7fe fb7d 	bl	8002730 <HAL_GetTick>
 8004036:	4602      	mov	r2, r0
 8004038:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800403a:	1ad3      	subs	r3, r2, r3
 800403c:	2b02      	cmp	r3, #2
 800403e:	d902      	bls.n	8004046 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004040:	2303      	movs	r3, #3
 8004042:	f000 bc80 	b.w	8004946 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004046:	4b12      	ldr	r3, [pc, #72]	@ (8004090 <HAL_RCC_OscConfig+0x4f4>)
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800404e:	2b00      	cmp	r3, #0
 8004050:	d0ef      	beq.n	8004032 <HAL_RCC_OscConfig+0x496>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8004052:	4b0f      	ldr	r3, [pc, #60]	@ (8004090 <HAL_RCC_OscConfig+0x4f4>)
 8004054:	691b      	ldr	r3, [r3, #16]
 8004056:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	691b      	ldr	r3, [r3, #16]
 800405e:	041b      	lsls	r3, r3, #16
 8004060:	490b      	ldr	r1, [pc, #44]	@ (8004090 <HAL_RCC_OscConfig+0x4f4>)
 8004062:	4313      	orrs	r3, r2
 8004064:	610b      	str	r3, [r1, #16]
 8004066:	e01b      	b.n	80040a0 <HAL_RCC_OscConfig+0x504>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_DISABLE();
 8004068:	4b09      	ldr	r3, [pc, #36]	@ (8004090 <HAL_RCC_OscConfig+0x4f4>)
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	4a08      	ldr	r2, [pc, #32]	@ (8004090 <HAL_RCC_OscConfig+0x4f4>)
 800406e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004072:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8004074:	f7fe fb5c 	bl	8002730 <HAL_GetTick>
 8004078:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800407a:	e00b      	b.n	8004094 <HAL_RCC_OscConfig+0x4f8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800407c:	f7fe fb58 	bl	8002730 <HAL_GetTick>
 8004080:	4602      	mov	r2, r0
 8004082:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004084:	1ad3      	subs	r3, r2, r3
 8004086:	2b02      	cmp	r3, #2
 8004088:	d904      	bls.n	8004094 <HAL_RCC_OscConfig+0x4f8>
          {
            return HAL_TIMEOUT;
 800408a:	2303      	movs	r3, #3
 800408c:	f000 bc5b 	b.w	8004946 <HAL_RCC_OscConfig+0xdaa>
 8004090:	46020c00 	.word	0x46020c00
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004094:	4baf      	ldr	r3, [pc, #700]	@ (8004354 <HAL_RCC_OscConfig+0x7b8>)
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800409c:	2b00      	cmp	r3, #0
 800409e:	d1ed      	bne.n	800407c <HAL_RCC_OscConfig+0x4e0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f003 0308 	and.w	r3, r3, #8
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	f000 80c8 	beq.w	800423e <HAL_RCC_OscConfig+0x6a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(pRCC_OscInitStruct->LSIState));

    FlagStatus  pwrclkchanged = RESET;
 80040ae:	2300      	movs	r3, #0
 80040b0:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

    /* Update LSI configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80040b4:	4ba7      	ldr	r3, [pc, #668]	@ (8004354 <HAL_RCC_OscConfig+0x7b8>)
 80040b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80040ba:	f003 0304 	and.w	r3, r3, #4
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d111      	bne.n	80040e6 <HAL_RCC_OscConfig+0x54a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80040c2:	4ba4      	ldr	r3, [pc, #656]	@ (8004354 <HAL_RCC_OscConfig+0x7b8>)
 80040c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80040c8:	4aa2      	ldr	r2, [pc, #648]	@ (8004354 <HAL_RCC_OscConfig+0x7b8>)
 80040ca:	f043 0304 	orr.w	r3, r3, #4
 80040ce:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80040d2:	4ba0      	ldr	r3, [pc, #640]	@ (8004354 <HAL_RCC_OscConfig+0x7b8>)
 80040d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80040d8:	f003 0304 	and.w	r3, r3, #4
 80040dc:	617b      	str	r3, [r7, #20]
 80040de:	697b      	ldr	r3, [r7, #20]
      pwrclkchanged = SET;
 80040e0:	2301      	movs	r3, #1
 80040e2:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80040e6:	4b9c      	ldr	r3, [pc, #624]	@ (8004358 <HAL_RCC_OscConfig+0x7bc>)
 80040e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040ea:	f003 0301 	and.w	r3, r3, #1
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d119      	bne.n	8004126 <HAL_RCC_OscConfig+0x58a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 80040f2:	4b99      	ldr	r3, [pc, #612]	@ (8004358 <HAL_RCC_OscConfig+0x7bc>)
 80040f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040f6:	4a98      	ldr	r2, [pc, #608]	@ (8004358 <HAL_RCC_OscConfig+0x7bc>)
 80040f8:	f043 0301 	orr.w	r3, r3, #1
 80040fc:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80040fe:	f7fe fb17 	bl	8002730 <HAL_GetTick>
 8004102:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8004104:	e009      	b.n	800411a <HAL_RCC_OscConfig+0x57e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004106:	f7fe fb13 	bl	8002730 <HAL_GetTick>
 800410a:	4602      	mov	r2, r0
 800410c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800410e:	1ad3      	subs	r3, r2, r3
 8004110:	2b02      	cmp	r3, #2
 8004112:	d902      	bls.n	800411a <HAL_RCC_OscConfig+0x57e>
        {
          return HAL_TIMEOUT;
 8004114:	2303      	movs	r3, #3
 8004116:	f000 bc16 	b.w	8004946 <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800411a:	4b8f      	ldr	r3, [pc, #572]	@ (8004358 <HAL_RCC_OscConfig+0x7bc>)
 800411c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800411e:	f003 0301 	and.w	r3, r3, #1
 8004122:	2b00      	cmp	r3, #0
 8004124:	d0ef      	beq.n	8004106 <HAL_RCC_OscConfig+0x56a>
        }
      }
    }
    /* Check the LSI State */
    if (pRCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	695b      	ldr	r3, [r3, #20]
 800412a:	2b00      	cmp	r3, #0
 800412c:	d05f      	beq.n	80041ee <HAL_RCC_OscConfig+0x652>
    {
      uint32_t bdcr_temp = RCC->BDCR;
 800412e:	4b89      	ldr	r3, [pc, #548]	@ (8004354 <HAL_RCC_OscConfig+0x7b8>)
 8004130:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004134:	623b      	str	r3, [r7, #32]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(pRCC_OscInitStruct->LSIDiv));

      if (pRCC_OscInitStruct->LSIDiv != (bdcr_temp & RCC_BDCR_LSIPREDIV))
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	699a      	ldr	r2, [r3, #24]
 800413a:	6a3b      	ldr	r3, [r7, #32]
 800413c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004140:	429a      	cmp	r2, r3
 8004142:	d037      	beq.n	80041b4 <HAL_RCC_OscConfig+0x618>
      {
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8004144:	6a3b      	ldr	r3, [r7, #32]
 8004146:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800414a:	2b00      	cmp	r3, #0
 800414c:	d006      	beq.n	800415c <HAL_RCC_OscConfig+0x5c0>
            ((bdcr_temp & RCC_BDCR_LSION) != RCC_BDCR_LSION))
 800414e:	6a3b      	ldr	r3, [r7, #32]
 8004150:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8004154:	2b00      	cmp	r3, #0
 8004156:	d101      	bne.n	800415c <HAL_RCC_OscConfig+0x5c0>
        {
          /* If LSIRDY is set while LSION is not enabled, LSIPREDIV can't be updated */
          /* The LSIPREDIV cannot be changed if the LSI is used by the IWDG or by the RTC */
          return HAL_ERROR;
 8004158:	2301      	movs	r3, #1
 800415a:	e3f4      	b.n	8004946 <HAL_RCC_OscConfig+0xdaa>
        }

        /* Turn off LSI before changing RCC_BDCR_LSIPREDIV */
        if ((bdcr_temp & RCC_BDCR_LSION) == RCC_BDCR_LSION)
 800415c:	6a3b      	ldr	r3, [r7, #32]
 800415e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004162:	2b00      	cmp	r3, #0
 8004164:	d01b      	beq.n	800419e <HAL_RCC_OscConfig+0x602>
        {
          __HAL_RCC_LSI_DISABLE();
 8004166:	4b7b      	ldr	r3, [pc, #492]	@ (8004354 <HAL_RCC_OscConfig+0x7b8>)
 8004168:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800416c:	4a79      	ldr	r2, [pc, #484]	@ (8004354 <HAL_RCC_OscConfig+0x7b8>)
 800416e:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 8004172:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

          tickstart = HAL_GetTick();
 8004176:	f7fe fadb 	bl	8002730 <HAL_GetTick>
 800417a:	62b8      	str	r0, [r7, #40]	@ 0x28

          /* Wait till LSI is disabled */
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 800417c:	e008      	b.n	8004190 <HAL_RCC_OscConfig+0x5f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800417e:	f7fe fad7 	bl	8002730 <HAL_GetTick>
 8004182:	4602      	mov	r2, r0
 8004184:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004186:	1ad3      	subs	r3, r2, r3
 8004188:	2b05      	cmp	r3, #5
 800418a:	d901      	bls.n	8004190 <HAL_RCC_OscConfig+0x5f4>
            {
              return HAL_TIMEOUT;
 800418c:	2303      	movs	r3, #3
 800418e:	e3da      	b.n	8004946 <HAL_RCC_OscConfig+0xdaa>
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8004190:	4b70      	ldr	r3, [pc, #448]	@ (8004354 <HAL_RCC_OscConfig+0x7b8>)
 8004192:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004196:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800419a:	2b00      	cmp	r3, #0
 800419c:	d1ef      	bne.n	800417e <HAL_RCC_OscConfig+0x5e2>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->BDCR, RCC_BDCR_LSIPREDIV, pRCC_OscInitStruct->LSIDiv);
 800419e:	4b6d      	ldr	r3, [pc, #436]	@ (8004354 <HAL_RCC_OscConfig+0x7b8>)
 80041a0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80041a4:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	699b      	ldr	r3, [r3, #24]
 80041ac:	4969      	ldr	r1, [pc, #420]	@ (8004354 <HAL_RCC_OscConfig+0x7b8>)
 80041ae:	4313      	orrs	r3, r2
 80041b0:	f8c1 30f0 	str.w	r3, [r1, #240]	@ 0xf0
      }

      /* Enable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_ENABLE();
 80041b4:	4b67      	ldr	r3, [pc, #412]	@ (8004354 <HAL_RCC_OscConfig+0x7b8>)
 80041b6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80041ba:	4a66      	ldr	r2, [pc, #408]	@ (8004354 <HAL_RCC_OscConfig+0x7b8>)
 80041bc:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80041c0:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 80041c4:	f7fe fab4 	bl	8002730 <HAL_GetTick>
 80041c8:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 80041ca:	e008      	b.n	80041de <HAL_RCC_OscConfig+0x642>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80041cc:	f7fe fab0 	bl	8002730 <HAL_GetTick>
 80041d0:	4602      	mov	r2, r0
 80041d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041d4:	1ad3      	subs	r3, r2, r3
 80041d6:	2b05      	cmp	r3, #5
 80041d8:	d901      	bls.n	80041de <HAL_RCC_OscConfig+0x642>
        {
          return HAL_TIMEOUT;
 80041da:	2303      	movs	r3, #3
 80041dc:	e3b3      	b.n	8004946 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 80041de:	4b5d      	ldr	r3, [pc, #372]	@ (8004354 <HAL_RCC_OscConfig+0x7b8>)
 80041e0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80041e4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d0ef      	beq.n	80041cc <HAL_RCC_OscConfig+0x630>
 80041ec:	e01b      	b.n	8004226 <HAL_RCC_OscConfig+0x68a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_DISABLE();
 80041ee:	4b59      	ldr	r3, [pc, #356]	@ (8004354 <HAL_RCC_OscConfig+0x7b8>)
 80041f0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80041f4:	4a57      	ldr	r2, [pc, #348]	@ (8004354 <HAL_RCC_OscConfig+0x7b8>)
 80041f6:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 80041fa:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 80041fe:	f7fe fa97 	bl	8002730 <HAL_GetTick>
 8004202:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8004204:	e008      	b.n	8004218 <HAL_RCC_OscConfig+0x67c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004206:	f7fe fa93 	bl	8002730 <HAL_GetTick>
 800420a:	4602      	mov	r2, r0
 800420c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800420e:	1ad3      	subs	r3, r2, r3
 8004210:	2b05      	cmp	r3, #5
 8004212:	d901      	bls.n	8004218 <HAL_RCC_OscConfig+0x67c>
        {
          return HAL_TIMEOUT;
 8004214:	2303      	movs	r3, #3
 8004216:	e396      	b.n	8004946 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8004218:	4b4e      	ldr	r3, [pc, #312]	@ (8004354 <HAL_RCC_OscConfig+0x7b8>)
 800421a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800421e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004222:	2b00      	cmp	r3, #0
 8004224:	d1ef      	bne.n	8004206 <HAL_RCC_OscConfig+0x66a>
        }
      }
    }
    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004226:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800422a:	2b01      	cmp	r3, #1
 800422c:	d107      	bne.n	800423e <HAL_RCC_OscConfig+0x6a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800422e:	4b49      	ldr	r3, [pc, #292]	@ (8004354 <HAL_RCC_OscConfig+0x7b8>)
 8004230:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004234:	4a47      	ldr	r2, [pc, #284]	@ (8004354 <HAL_RCC_OscConfig+0x7b8>)
 8004236:	f023 0304 	bic.w	r3, r3, #4
 800423a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f003 0304 	and.w	r3, r3, #4
 8004246:	2b00      	cmp	r3, #0
 8004248:	f000 8111 	beq.w	800446e <HAL_RCC_OscConfig+0x8d2>
  {
    FlagStatus pwrclkchanged = RESET;
 800424c:	2300      	movs	r3, #0
 800424e:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pRCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004252:	4b40      	ldr	r3, [pc, #256]	@ (8004354 <HAL_RCC_OscConfig+0x7b8>)
 8004254:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004258:	f003 0304 	and.w	r3, r3, #4
 800425c:	2b00      	cmp	r3, #0
 800425e:	d111      	bne.n	8004284 <HAL_RCC_OscConfig+0x6e8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004260:	4b3c      	ldr	r3, [pc, #240]	@ (8004354 <HAL_RCC_OscConfig+0x7b8>)
 8004262:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004266:	4a3b      	ldr	r2, [pc, #236]	@ (8004354 <HAL_RCC_OscConfig+0x7b8>)
 8004268:	f043 0304 	orr.w	r3, r3, #4
 800426c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8004270:	4b38      	ldr	r3, [pc, #224]	@ (8004354 <HAL_RCC_OscConfig+0x7b8>)
 8004272:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004276:	f003 0304 	and.w	r3, r3, #4
 800427a:	613b      	str	r3, [r7, #16]
 800427c:	693b      	ldr	r3, [r7, #16]
      pwrclkchanged = SET;
 800427e:	2301      	movs	r3, #1
 8004280:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8004284:	4b34      	ldr	r3, [pc, #208]	@ (8004358 <HAL_RCC_OscConfig+0x7bc>)
 8004286:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004288:	f003 0301 	and.w	r3, r3, #1
 800428c:	2b00      	cmp	r3, #0
 800428e:	d118      	bne.n	80042c2 <HAL_RCC_OscConfig+0x726>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8004290:	4b31      	ldr	r3, [pc, #196]	@ (8004358 <HAL_RCC_OscConfig+0x7bc>)
 8004292:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004294:	4a30      	ldr	r2, [pc, #192]	@ (8004358 <HAL_RCC_OscConfig+0x7bc>)
 8004296:	f043 0301 	orr.w	r3, r3, #1
 800429a:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800429c:	f7fe fa48 	bl	8002730 <HAL_GetTick>
 80042a0:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80042a2:	e008      	b.n	80042b6 <HAL_RCC_OscConfig+0x71a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80042a4:	f7fe fa44 	bl	8002730 <HAL_GetTick>
 80042a8:	4602      	mov	r2, r0
 80042aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042ac:	1ad3      	subs	r3, r2, r3
 80042ae:	2b02      	cmp	r3, #2
 80042b0:	d901      	bls.n	80042b6 <HAL_RCC_OscConfig+0x71a>
        {
          return HAL_TIMEOUT;
 80042b2:	2303      	movs	r3, #3
 80042b4:	e347      	b.n	8004946 <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80042b6:	4b28      	ldr	r3, [pc, #160]	@ (8004358 <HAL_RCC_OscConfig+0x7bc>)
 80042b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042ba:	f003 0301 	and.w	r3, r3, #1
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d0f0      	beq.n	80042a4 <HAL_RCC_OscConfig+0x708>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	689b      	ldr	r3, [r3, #8]
 80042c6:	f003 0301 	and.w	r3, r3, #1
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d01f      	beq.n	800430e <HAL_RCC_OscConfig+0x772>
    {
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	689b      	ldr	r3, [r3, #8]
 80042d2:	f003 0304 	and.w	r3, r3, #4
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d010      	beq.n	80042fc <HAL_RCC_OscConfig+0x760>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80042da:	4b1e      	ldr	r3, [pc, #120]	@ (8004354 <HAL_RCC_OscConfig+0x7b8>)
 80042dc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80042e0:	4a1c      	ldr	r2, [pc, #112]	@ (8004354 <HAL_RCC_OscConfig+0x7b8>)
 80042e2:	f043 0304 	orr.w	r3, r3, #4
 80042e6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80042ea:	4b1a      	ldr	r3, [pc, #104]	@ (8004354 <HAL_RCC_OscConfig+0x7b8>)
 80042ec:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80042f0:	4a18      	ldr	r2, [pc, #96]	@ (8004354 <HAL_RCC_OscConfig+0x7b8>)
 80042f2:	f043 0301 	orr.w	r3, r3, #1
 80042f6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80042fa:	e018      	b.n	800432e <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80042fc:	4b15      	ldr	r3, [pc, #84]	@ (8004354 <HAL_RCC_OscConfig+0x7b8>)
 80042fe:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004302:	4a14      	ldr	r2, [pc, #80]	@ (8004354 <HAL_RCC_OscConfig+0x7b8>)
 8004304:	f043 0301 	orr.w	r3, r3, #1
 8004308:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800430c:	e00f      	b.n	800432e <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800430e:	4b11      	ldr	r3, [pc, #68]	@ (8004354 <HAL_RCC_OscConfig+0x7b8>)
 8004310:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004314:	4a0f      	ldr	r2, [pc, #60]	@ (8004354 <HAL_RCC_OscConfig+0x7b8>)
 8004316:	f023 0301 	bic.w	r3, r3, #1
 800431a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800431e:	4b0d      	ldr	r3, [pc, #52]	@ (8004354 <HAL_RCC_OscConfig+0x7b8>)
 8004320:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004324:	4a0b      	ldr	r2, [pc, #44]	@ (8004354 <HAL_RCC_OscConfig+0x7b8>)
 8004326:	f023 0304 	bic.w	r3, r3, #4
 800432a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
    }

    /* Check the LSE State */
    if (pRCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	689b      	ldr	r3, [r3, #8]
 8004332:	2b00      	cmp	r3, #0
 8004334:	d057      	beq.n	80043e6 <HAL_RCC_OscConfig+0x84a>
    {
      tickstart = HAL_GetTick();
 8004336:	f7fe f9fb 	bl	8002730 <HAL_GetTick>
 800433a:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800433c:	e00e      	b.n	800435c <HAL_RCC_OscConfig+0x7c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800433e:	f7fe f9f7 	bl	8002730 <HAL_GetTick>
 8004342:	4602      	mov	r2, r0
 8004344:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004346:	1ad3      	subs	r3, r2, r3
 8004348:	f241 3288 	movw	r2, #5000	@ 0x1388
 800434c:	4293      	cmp	r3, r2
 800434e:	d905      	bls.n	800435c <HAL_RCC_OscConfig+0x7c0>
        {
          return HAL_TIMEOUT;
 8004350:	2303      	movs	r3, #3
 8004352:	e2f8      	b.n	8004946 <HAL_RCC_OscConfig+0xdaa>
 8004354:	46020c00 	.word	0x46020c00
 8004358:	46020800 	.word	0x46020800
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800435c:	4b9c      	ldr	r3, [pc, #624]	@ (80045d0 <HAL_RCC_OscConfig+0xa34>)
 800435e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004362:	f003 0302 	and.w	r3, r3, #2
 8004366:	2b00      	cmp	r3, #0
 8004368:	d0e9      	beq.n	800433e <HAL_RCC_OscConfig+0x7a2>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	689b      	ldr	r3, [r3, #8]
 800436e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004372:	2b00      	cmp	r3, #0
 8004374:	d01b      	beq.n	80043ae <HAL_RCC_OscConfig+0x812>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8004376:	4b96      	ldr	r3, [pc, #600]	@ (80045d0 <HAL_RCC_OscConfig+0xa34>)
 8004378:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800437c:	4a94      	ldr	r2, [pc, #592]	@ (80045d0 <HAL_RCC_OscConfig+0xa34>)
 800437e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004382:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8004386:	e00a      	b.n	800439e <HAL_RCC_OscConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004388:	f7fe f9d2 	bl	8002730 <HAL_GetTick>
 800438c:	4602      	mov	r2, r0
 800438e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004390:	1ad3      	subs	r3, r2, r3
 8004392:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004396:	4293      	cmp	r3, r2
 8004398:	d901      	bls.n	800439e <HAL_RCC_OscConfig+0x802>
          {
            return HAL_TIMEOUT;
 800439a:	2303      	movs	r3, #3
 800439c:	e2d3      	b.n	8004946 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 800439e:	4b8c      	ldr	r3, [pc, #560]	@ (80045d0 <HAL_RCC_OscConfig+0xa34>)
 80043a0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80043a4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d0ed      	beq.n	8004388 <HAL_RCC_OscConfig+0x7ec>
 80043ac:	e053      	b.n	8004456 <HAL_RCC_OscConfig+0x8ba>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80043ae:	4b88      	ldr	r3, [pc, #544]	@ (80045d0 <HAL_RCC_OscConfig+0xa34>)
 80043b0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80043b4:	4a86      	ldr	r2, [pc, #536]	@ (80045d0 <HAL_RCC_OscConfig+0xa34>)
 80043b6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80043ba:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80043be:	e00a      	b.n	80043d6 <HAL_RCC_OscConfig+0x83a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80043c0:	f7fe f9b6 	bl	8002730 <HAL_GetTick>
 80043c4:	4602      	mov	r2, r0
 80043c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043c8:	1ad3      	subs	r3, r2, r3
 80043ca:	f241 3288 	movw	r2, #5000	@ 0x1388
 80043ce:	4293      	cmp	r3, r2
 80043d0:	d901      	bls.n	80043d6 <HAL_RCC_OscConfig+0x83a>
          {
            return HAL_TIMEOUT;
 80043d2:	2303      	movs	r3, #3
 80043d4:	e2b7      	b.n	8004946 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80043d6:	4b7e      	ldr	r3, [pc, #504]	@ (80045d0 <HAL_RCC_OscConfig+0xa34>)
 80043d8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80043dc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d1ed      	bne.n	80043c0 <HAL_RCC_OscConfig+0x824>
 80043e4:	e037      	b.n	8004456 <HAL_RCC_OscConfig+0x8ba>
        }
      }
    }
    else
    {
      tickstart = HAL_GetTick();
 80043e6:	f7fe f9a3 	bl	8002730 <HAL_GetTick>
 80043ea:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80043ec:	e00a      	b.n	8004404 <HAL_RCC_OscConfig+0x868>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80043ee:	f7fe f99f 	bl	8002730 <HAL_GetTick>
 80043f2:	4602      	mov	r2, r0
 80043f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043f6:	1ad3      	subs	r3, r2, r3
 80043f8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80043fc:	4293      	cmp	r3, r2
 80043fe:	d901      	bls.n	8004404 <HAL_RCC_OscConfig+0x868>
        {
          return HAL_TIMEOUT;
 8004400:	2303      	movs	r3, #3
 8004402:	e2a0      	b.n	8004946 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004404:	4b72      	ldr	r3, [pc, #456]	@ (80045d0 <HAL_RCC_OscConfig+0xa34>)
 8004406:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800440a:	f003 0302 	and.w	r3, r3, #2
 800440e:	2b00      	cmp	r3, #0
 8004410:	d1ed      	bne.n	80043ee <HAL_RCC_OscConfig+0x852>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 8004412:	4b6f      	ldr	r3, [pc, #444]	@ (80045d0 <HAL_RCC_OscConfig+0xa34>)
 8004414:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004418:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800441c:	2b00      	cmp	r3, #0
 800441e:	d01a      	beq.n	8004456 <HAL_RCC_OscConfig+0x8ba>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8004420:	4b6b      	ldr	r3, [pc, #428]	@ (80045d0 <HAL_RCC_OscConfig+0xa34>)
 8004422:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004426:	4a6a      	ldr	r2, [pc, #424]	@ (80045d0 <HAL_RCC_OscConfig+0xa34>)
 8004428:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800442c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8004430:	e00a      	b.n	8004448 <HAL_RCC_OscConfig+0x8ac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004432:	f7fe f97d 	bl	8002730 <HAL_GetTick>
 8004436:	4602      	mov	r2, r0
 8004438:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800443a:	1ad3      	subs	r3, r2, r3
 800443c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004440:	4293      	cmp	r3, r2
 8004442:	d901      	bls.n	8004448 <HAL_RCC_OscConfig+0x8ac>
          {
            return HAL_TIMEOUT;
 8004444:	2303      	movs	r3, #3
 8004446:	e27e      	b.n	8004946 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8004448:	4b61      	ldr	r3, [pc, #388]	@ (80045d0 <HAL_RCC_OscConfig+0xa34>)
 800444a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800444e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004452:	2b00      	cmp	r3, #0
 8004454:	d1ed      	bne.n	8004432 <HAL_RCC_OscConfig+0x896>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004456:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 800445a:	2b01      	cmp	r3, #1
 800445c:	d107      	bne.n	800446e <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800445e:	4b5c      	ldr	r3, [pc, #368]	@ (80045d0 <HAL_RCC_OscConfig+0xa34>)
 8004460:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004464:	4a5a      	ldr	r2, [pc, #360]	@ (80045d0 <HAL_RCC_OscConfig+0xa34>)
 8004466:	f023 0304 	bic.w	r3, r3, #4
 800446a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f003 0320 	and.w	r3, r3, #32
 8004476:	2b00      	cmp	r3, #0
 8004478:	d036      	beq.n	80044e8 <HAL_RCC_OscConfig+0x94c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pRCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pRCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800447e:	2b00      	cmp	r3, #0
 8004480:	d019      	beq.n	80044b6 <HAL_RCC_OscConfig+0x91a>
    {
      /* Enable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_ENABLE();
 8004482:	4b53      	ldr	r3, [pc, #332]	@ (80045d0 <HAL_RCC_OscConfig+0xa34>)
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	4a52      	ldr	r2, [pc, #328]	@ (80045d0 <HAL_RCC_OscConfig+0xa34>)
 8004488:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800448c:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800448e:	f7fe f94f 	bl	8002730 <HAL_GetTick>
 8004492:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8004494:	e008      	b.n	80044a8 <HAL_RCC_OscConfig+0x90c>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004496:	f7fe f94b 	bl	8002730 <HAL_GetTick>
 800449a:	4602      	mov	r2, r0
 800449c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800449e:	1ad3      	subs	r3, r2, r3
 80044a0:	2b02      	cmp	r3, #2
 80044a2:	d901      	bls.n	80044a8 <HAL_RCC_OscConfig+0x90c>
        {
          return HAL_TIMEOUT;
 80044a4:	2303      	movs	r3, #3
 80044a6:	e24e      	b.n	8004946 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80044a8:	4b49      	ldr	r3, [pc, #292]	@ (80045d0 <HAL_RCC_OscConfig+0xa34>)
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d0f0      	beq.n	8004496 <HAL_RCC_OscConfig+0x8fa>
 80044b4:	e018      	b.n	80044e8 <HAL_RCC_OscConfig+0x94c>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_DISABLE();
 80044b6:	4b46      	ldr	r3, [pc, #280]	@ (80045d0 <HAL_RCC_OscConfig+0xa34>)
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	4a45      	ldr	r2, [pc, #276]	@ (80045d0 <HAL_RCC_OscConfig+0xa34>)
 80044bc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80044c0:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80044c2:	f7fe f935 	bl	8002730 <HAL_GetTick>
 80044c6:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80044c8:	e008      	b.n	80044dc <HAL_RCC_OscConfig+0x940>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80044ca:	f7fe f931 	bl	8002730 <HAL_GetTick>
 80044ce:	4602      	mov	r2, r0
 80044d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80044d2:	1ad3      	subs	r3, r2, r3
 80044d4:	2b02      	cmp	r3, #2
 80044d6:	d901      	bls.n	80044dc <HAL_RCC_OscConfig+0x940>
        {
          return HAL_TIMEOUT;
 80044d8:	2303      	movs	r3, #3
 80044da:	e234      	b.n	8004946 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80044dc:	4b3c      	ldr	r3, [pc, #240]	@ (80045d0 <HAL_RCC_OscConfig+0xa34>)
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d1f0      	bne.n	80044ca <HAL_RCC_OscConfig+0x92e>
      }
    }
  }

  /*------------------------------ SHSI Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_SHSI) == RCC_OSCILLATORTYPE_SHSI)
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d036      	beq.n	8004562 <HAL_RCC_OscConfig+0x9c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SHSI(pRCC_OscInitStruct->SHSIState));

    /* Check the SHSI State */
    if (pRCC_OscInitStruct->SHSIState != RCC_SHSI_OFF)
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d019      	beq.n	8004530 <HAL_RCC_OscConfig+0x994>
    {
      /* Enable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_ENABLE();
 80044fc:	4b34      	ldr	r3, [pc, #208]	@ (80045d0 <HAL_RCC_OscConfig+0xa34>)
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	4a33      	ldr	r2, [pc, #204]	@ (80045d0 <HAL_RCC_OscConfig+0xa34>)
 8004502:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004506:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8004508:	f7fe f912 	bl	8002730 <HAL_GetTick>
 800450c:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is ready */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 800450e:	e008      	b.n	8004522 <HAL_RCC_OscConfig+0x986>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8004510:	f7fe f90e 	bl	8002730 <HAL_GetTick>
 8004514:	4602      	mov	r2, r0
 8004516:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004518:	1ad3      	subs	r3, r2, r3
 800451a:	2b02      	cmp	r3, #2
 800451c:	d901      	bls.n	8004522 <HAL_RCC_OscConfig+0x986>
        {
          return HAL_TIMEOUT;
 800451e:	2303      	movs	r3, #3
 8004520:	e211      	b.n	8004946 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 8004522:	4b2b      	ldr	r3, [pc, #172]	@ (80045d0 <HAL_RCC_OscConfig+0xa34>)
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800452a:	2b00      	cmp	r3, #0
 800452c:	d0f0      	beq.n	8004510 <HAL_RCC_OscConfig+0x974>
 800452e:	e018      	b.n	8004562 <HAL_RCC_OscConfig+0x9c6>
      }
    }
    else
    {
      /* Disable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_DISABLE();
 8004530:	4b27      	ldr	r3, [pc, #156]	@ (80045d0 <HAL_RCC_OscConfig+0xa34>)
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	4a26      	ldr	r2, [pc, #152]	@ (80045d0 <HAL_RCC_OscConfig+0xa34>)
 8004536:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800453a:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800453c:	f7fe f8f8 	bl	8002730 <HAL_GetTick>
 8004540:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8004542:	e008      	b.n	8004556 <HAL_RCC_OscConfig+0x9ba>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8004544:	f7fe f8f4 	bl	8002730 <HAL_GetTick>
 8004548:	4602      	mov	r2, r0
 800454a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800454c:	1ad3      	subs	r3, r2, r3
 800454e:	2b02      	cmp	r3, #2
 8004550:	d901      	bls.n	8004556 <HAL_RCC_OscConfig+0x9ba>
        {
          return HAL_TIMEOUT;
 8004552:	2303      	movs	r3, #3
 8004554:	e1f7      	b.n	8004946 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8004556:	4b1e      	ldr	r3, [pc, #120]	@ (80045d0 <HAL_RCC_OscConfig+0xa34>)
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800455e:	2b00      	cmp	r3, #0
 8004560:	d1f0      	bne.n	8004544 <HAL_RCC_OscConfig+0x9a8>
        }
      }
    }
  }
  /*------------------------------ MSIK Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIK) == RCC_OSCILLATORTYPE_MSIK)
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800456a:	2b00      	cmp	r3, #0
 800456c:	d07f      	beq.n	800466e <HAL_RCC_OscConfig+0xad2>
    assert_param(IS_RCC_MSIK(pRCC_OscInitStruct->MSIKState));
    assert_param(IS_RCC_MSIK_CLOCK_RANGE(pRCC_OscInitStruct->MSIKClockRange));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));

    /* Check the MSIK State */
    if (pRCC_OscInitStruct->MSIKState != RCC_MSIK_OFF)
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004572:	2b00      	cmp	r3, #0
 8004574:	d062      	beq.n	800463c <HAL_RCC_OscConfig+0xaa0>
    {

      /* Selects the Multiple Speed of kernel high speed oscillator (MSIK) clock range .*/
      __HAL_RCC_MSIK_RANGE_CONFIG(pRCC_OscInitStruct->MSIKClockRange);
 8004576:	4b16      	ldr	r3, [pc, #88]	@ (80045d0 <HAL_RCC_OscConfig+0xa34>)
 8004578:	689b      	ldr	r3, [r3, #8]
 800457a:	4a15      	ldr	r2, [pc, #84]	@ (80045d0 <HAL_RCC_OscConfig+0xa34>)
 800457c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004580:	6093      	str	r3, [r2, #8]
 8004582:	4b13      	ldr	r3, [pc, #76]	@ (80045d0 <HAL_RCC_OscConfig+0xa34>)
 8004584:	689b      	ldr	r3, [r3, #8]
 8004586:	f023 6270 	bic.w	r2, r3, #251658240	@ 0xf000000
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800458e:	4910      	ldr	r1, [pc, #64]	@ (80045d0 <HAL_RCC_OscConfig+0xa34>)
 8004590:	4313      	orrs	r3, r2
 8004592:	608b      	str	r3, [r1, #8]
      /* Adjusts the Multiple Speed of kernel high speed oscillator (MSIK) calibration value.*/
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004598:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 800459c:	d309      	bcc.n	80045b2 <HAL_RCC_OscConfig+0xa16>
 800459e:	4b0c      	ldr	r3, [pc, #48]	@ (80045d0 <HAL_RCC_OscConfig+0xa34>)
 80045a0:	68db      	ldr	r3, [r3, #12]
 80045a2:	f023 021f 	bic.w	r2, r3, #31
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	6a1b      	ldr	r3, [r3, #32]
 80045aa:	4909      	ldr	r1, [pc, #36]	@ (80045d0 <HAL_RCC_OscConfig+0xa34>)
 80045ac:	4313      	orrs	r3, r2
 80045ae:	60cb      	str	r3, [r1, #12]
 80045b0:	e02a      	b.n	8004608 <HAL_RCC_OscConfig+0xa6c>
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	da0c      	bge.n	80045d4 <HAL_RCC_OscConfig+0xa38>
 80045ba:	4b05      	ldr	r3, [pc, #20]	@ (80045d0 <HAL_RCC_OscConfig+0xa34>)
 80045bc:	68db      	ldr	r3, [r3, #12]
 80045be:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	6a1b      	ldr	r3, [r3, #32]
 80045c6:	015b      	lsls	r3, r3, #5
 80045c8:	4901      	ldr	r1, [pc, #4]	@ (80045d0 <HAL_RCC_OscConfig+0xa34>)
 80045ca:	4313      	orrs	r3, r2
 80045cc:	60cb      	str	r3, [r1, #12]
 80045ce:	e01b      	b.n	8004608 <HAL_RCC_OscConfig+0xa6c>
 80045d0:	46020c00 	.word	0x46020c00
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045d8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80045dc:	d30a      	bcc.n	80045f4 <HAL_RCC_OscConfig+0xa58>
 80045de:	4ba1      	ldr	r3, [pc, #644]	@ (8004864 <HAL_RCC_OscConfig+0xcc8>)
 80045e0:	68db      	ldr	r3, [r3, #12]
 80045e2:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	6a1b      	ldr	r3, [r3, #32]
 80045ea:	029b      	lsls	r3, r3, #10
 80045ec:	499d      	ldr	r1, [pc, #628]	@ (8004864 <HAL_RCC_OscConfig+0xcc8>)
 80045ee:	4313      	orrs	r3, r2
 80045f0:	60cb      	str	r3, [r1, #12]
 80045f2:	e009      	b.n	8004608 <HAL_RCC_OscConfig+0xa6c>
 80045f4:	4b9b      	ldr	r3, [pc, #620]	@ (8004864 <HAL_RCC_OscConfig+0xcc8>)
 80045f6:	68db      	ldr	r3, [r3, #12]
 80045f8:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	6a1b      	ldr	r3, [r3, #32]
 8004600:	03db      	lsls	r3, r3, #15
 8004602:	4998      	ldr	r1, [pc, #608]	@ (8004864 <HAL_RCC_OscConfig+0xcc8>)
 8004604:	4313      	orrs	r3, r2
 8004606:	60cb      	str	r3, [r1, #12]
                                            (pRCC_OscInitStruct->MSIClockRange));

      /* Enable the Internal kernel High Speed oscillator (MSIK) */
      __HAL_RCC_MSIK_ENABLE();
 8004608:	4b96      	ldr	r3, [pc, #600]	@ (8004864 <HAL_RCC_OscConfig+0xcc8>)
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	4a95      	ldr	r2, [pc, #596]	@ (8004864 <HAL_RCC_OscConfig+0xcc8>)
 800460e:	f043 0310 	orr.w	r3, r3, #16
 8004612:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8004614:	f7fe f88c 	bl	8002730 <HAL_GetTick>
 8004618:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is ready */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 800461a:	e008      	b.n	800462e <HAL_RCC_OscConfig+0xa92>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 800461c:	f7fe f888 	bl	8002730 <HAL_GetTick>
 8004620:	4602      	mov	r2, r0
 8004622:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004624:	1ad3      	subs	r3, r2, r3
 8004626:	2b02      	cmp	r3, #2
 8004628:	d901      	bls.n	800462e <HAL_RCC_OscConfig+0xa92>
        {
          return HAL_TIMEOUT;
 800462a:	2303      	movs	r3, #3
 800462c:	e18b      	b.n	8004946 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 800462e:	4b8d      	ldr	r3, [pc, #564]	@ (8004864 <HAL_RCC_OscConfig+0xcc8>)
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f003 0320 	and.w	r3, r3, #32
 8004636:	2b00      	cmp	r3, #0
 8004638:	d0f0      	beq.n	800461c <HAL_RCC_OscConfig+0xa80>
 800463a:	e018      	b.n	800466e <HAL_RCC_OscConfig+0xad2>
      }
    }
    else
    {
      /* Disable the Internal High Speed Kernel oscillator (MSIK) */
      __HAL_RCC_MSIK_DISABLE();
 800463c:	4b89      	ldr	r3, [pc, #548]	@ (8004864 <HAL_RCC_OscConfig+0xcc8>)
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	4a88      	ldr	r2, [pc, #544]	@ (8004864 <HAL_RCC_OscConfig+0xcc8>)
 8004642:	f023 0310 	bic.w	r3, r3, #16
 8004646:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8004648:	f7fe f872 	bl	8002730 <HAL_GetTick>
 800464c:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 800464e:	e008      	b.n	8004662 <HAL_RCC_OscConfig+0xac6>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8004650:	f7fe f86e 	bl	8002730 <HAL_GetTick>
 8004654:	4602      	mov	r2, r0
 8004656:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004658:	1ad3      	subs	r3, r2, r3
 800465a:	2b02      	cmp	r3, #2
 800465c:	d901      	bls.n	8004662 <HAL_RCC_OscConfig+0xac6>
        {
          return HAL_TIMEOUT;
 800465e:	2303      	movs	r3, #3
 8004660:	e171      	b.n	8004946 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 8004662:	4b80      	ldr	r3, [pc, #512]	@ (8004864 <HAL_RCC_OscConfig+0xcc8>)
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	f003 0320 	and.w	r3, r3, #32
 800466a:	2b00      	cmp	r3, #0
 800466c:	d1f0      	bne.n	8004650 <HAL_RCC_OscConfig+0xab4>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL.PLLState));

  if ((pRCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004672:	2b00      	cmp	r3, #0
 8004674:	f000 8166 	beq.w	8004944 <HAL_RCC_OscConfig+0xda8>
  {
    FlagStatus  pwrclkchanged = RESET;
 8004678:	2300      	movs	r3, #0
 800467a:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34

    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800467e:	4b79      	ldr	r3, [pc, #484]	@ (8004864 <HAL_RCC_OscConfig+0xcc8>)
 8004680:	69db      	ldr	r3, [r3, #28]
 8004682:	f003 030c 	and.w	r3, r3, #12
 8004686:	2b0c      	cmp	r3, #12
 8004688:	f000 80f2 	beq.w	8004870 <HAL_RCC_OscConfig+0xcd4>
    {
      if ((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004690:	2b02      	cmp	r3, #2
 8004692:	f040 80c5 	bne.w	8004820 <HAL_RCC_OscConfig+0xc84>
        assert_param(IS_RCC_PLLP_VALUE(pRCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(pRCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(pRCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8004696:	4b73      	ldr	r3, [pc, #460]	@ (8004864 <HAL_RCC_OscConfig+0xcc8>)
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	4a72      	ldr	r2, [pc, #456]	@ (8004864 <HAL_RCC_OscConfig+0xcc8>)
 800469c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80046a0:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80046a2:	f7fe f845 	bl	8002730 <HAL_GetTick>
 80046a6:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80046a8:	e008      	b.n	80046bc <HAL_RCC_OscConfig+0xb20>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80046aa:	f7fe f841 	bl	8002730 <HAL_GetTick>
 80046ae:	4602      	mov	r2, r0
 80046b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046b2:	1ad3      	subs	r3, r2, r3
 80046b4:	2b02      	cmp	r3, #2
 80046b6:	d901      	bls.n	80046bc <HAL_RCC_OscConfig+0xb20>
          {
            return HAL_TIMEOUT;
 80046b8:	2303      	movs	r3, #3
 80046ba:	e144      	b.n	8004946 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80046bc:	4b69      	ldr	r3, [pc, #420]	@ (8004864 <HAL_RCC_OscConfig+0xcc8>)
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d1f0      	bne.n	80046aa <HAL_RCC_OscConfig+0xb0e>
          }
        }

        /* Requires to enable write access to Backup Domain of necessary */
        if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80046c8:	4b66      	ldr	r3, [pc, #408]	@ (8004864 <HAL_RCC_OscConfig+0xcc8>)
 80046ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80046ce:	f003 0304 	and.w	r3, r3, #4
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d111      	bne.n	80046fa <HAL_RCC_OscConfig+0xb5e>
        {
          __HAL_RCC_PWR_CLK_ENABLE();
 80046d6:	4b63      	ldr	r3, [pc, #396]	@ (8004864 <HAL_RCC_OscConfig+0xcc8>)
 80046d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80046dc:	4a61      	ldr	r2, [pc, #388]	@ (8004864 <HAL_RCC_OscConfig+0xcc8>)
 80046de:	f043 0304 	orr.w	r3, r3, #4
 80046e2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80046e6:	4b5f      	ldr	r3, [pc, #380]	@ (8004864 <HAL_RCC_OscConfig+0xcc8>)
 80046e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80046ec:	f003 0304 	and.w	r3, r3, #4
 80046f0:	60fb      	str	r3, [r7, #12]
 80046f2:	68fb      	ldr	r3, [r7, #12]
          pwrclkchanged = SET;
 80046f4:	2301      	movs	r3, #1
 80046f6:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
        }

        /*Disable EPOD to configure PLL1MBOOST*/
        if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) == PWR_VOSR_BOOSTEN)
 80046fa:	4b5b      	ldr	r3, [pc, #364]	@ (8004868 <HAL_RCC_OscConfig+0xccc>)
 80046fc:	68db      	ldr	r3, [r3, #12]
 80046fe:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004702:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004706:	d102      	bne.n	800470e <HAL_RCC_OscConfig+0xb72>
        {
          pwrboosten = SET;
 8004708:	2301      	movs	r3, #1
 800470a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
        }
        CLEAR_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 800470e:	4b56      	ldr	r3, [pc, #344]	@ (8004868 <HAL_RCC_OscConfig+0xccc>)
 8004710:	68db      	ldr	r3, [r3, #12]
 8004712:	4a55      	ldr	r2, [pc, #340]	@ (8004868 <HAL_RCC_OscConfig+0xccc>)
 8004714:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004718:	60d3      	str	r3, [r2, #12]

        /* Configure the main PLL clock source, multiplication and division factors */
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 800471a:	4b52      	ldr	r3, [pc, #328]	@ (8004864 <HAL_RCC_OscConfig+0xcc8>)
 800471c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800471e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004722:	f023 0303 	bic.w	r3, r3, #3
 8004726:	687a      	ldr	r2, [r7, #4]
 8004728:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 800472a:	687a      	ldr	r2, [r7, #4]
 800472c:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800472e:	3a01      	subs	r2, #1
 8004730:	0212      	lsls	r2, r2, #8
 8004732:	4311      	orrs	r1, r2
 8004734:	687a      	ldr	r2, [r7, #4]
 8004736:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8004738:	430a      	orrs	r2, r1
 800473a:	494a      	ldr	r1, [pc, #296]	@ (8004864 <HAL_RCC_OscConfig+0xcc8>)
 800473c:	4313      	orrs	r3, r2
 800473e:	628b      	str	r3, [r1, #40]	@ 0x28
 8004740:	4b48      	ldr	r3, [pc, #288]	@ (8004864 <HAL_RCC_OscConfig+0xcc8>)
 8004742:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004744:	4b49      	ldr	r3, [pc, #292]	@ (800486c <HAL_RCC_OscConfig+0xcd0>)
 8004746:	4013      	ands	r3, r2
 8004748:	687a      	ldr	r2, [r7, #4]
 800474a:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800474c:	3a01      	subs	r2, #1
 800474e:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8004752:	687a      	ldr	r2, [r7, #4]
 8004754:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8004756:	3a01      	subs	r2, #1
 8004758:	0252      	lsls	r2, r2, #9
 800475a:	b292      	uxth	r2, r2
 800475c:	4311      	orrs	r1, r2
 800475e:	687a      	ldr	r2, [r7, #4]
 8004760:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004762:	3a01      	subs	r2, #1
 8004764:	0412      	lsls	r2, r2, #16
 8004766:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 800476a:	4311      	orrs	r1, r2
 800476c:	687a      	ldr	r2, [r7, #4]
 800476e:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8004770:	3a01      	subs	r2, #1
 8004772:	0612      	lsls	r2, r2, #24
 8004774:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8004778:	430a      	orrs	r2, r1
 800477a:	493a      	ldr	r1, [pc, #232]	@ (8004864 <HAL_RCC_OscConfig+0xcc8>)
 800477c:	4313      	orrs	r3, r2
 800477e:	634b      	str	r3, [r1, #52]	@ 0x34
                             pRCC_OscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_DISABLE();
 8004780:	4b38      	ldr	r3, [pc, #224]	@ (8004864 <HAL_RCC_OscConfig+0xcc8>)
 8004782:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004784:	4a37      	ldr	r2, [pc, #220]	@ (8004864 <HAL_RCC_OscConfig+0xcc8>)
 8004786:	f023 0310 	bic.w	r3, r3, #16
 800478a:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004790:	4a34      	ldr	r2, [pc, #208]	@ (8004864 <HAL_RCC_OscConfig+0xcc8>)
 8004792:	00db      	lsls	r3, r3, #3
 8004794:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_ENABLE();
 8004796:	4b33      	ldr	r3, [pc, #204]	@ (8004864 <HAL_RCC_OscConfig+0xcc8>)
 8004798:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800479a:	4a32      	ldr	r2, [pc, #200]	@ (8004864 <HAL_RCC_OscConfig+0xcc8>)
 800479c:	f043 0310 	orr.w	r3, r3, #16
 80047a0:	6293      	str	r3, [r2, #40]	@ 0x28

        assert_param(IS_RCC_PLLRGE_VALUE(pRCC_OscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(pRCC_OscInitStruct->PLL.PLLRGE);
 80047a2:	4b30      	ldr	r3, [pc, #192]	@ (8004864 <HAL_RCC_OscConfig+0xcc8>)
 80047a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047a6:	f023 020c 	bic.w	r2, r3, #12
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80047ae:	492d      	ldr	r1, [pc, #180]	@ (8004864 <HAL_RCC_OscConfig+0xcc8>)
 80047b0:	4313      	orrs	r3, r2
 80047b2:	628b      	str	r3, [r1, #40]	@ 0x28

        if (pwrboosten == SET)
 80047b4:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80047b8:	2b01      	cmp	r3, #1
 80047ba:	d105      	bne.n	80047c8 <HAL_RCC_OscConfig+0xc2c>
        {
          /* Enable the EPOD to reach max frequency */
          SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 80047bc:	4b2a      	ldr	r3, [pc, #168]	@ (8004868 <HAL_RCC_OscConfig+0xccc>)
 80047be:	68db      	ldr	r3, [r3, #12]
 80047c0:	4a29      	ldr	r2, [pc, #164]	@ (8004868 <HAL_RCC_OscConfig+0xccc>)
 80047c2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80047c6:	60d3      	str	r3, [r2, #12]
        }

        /* Restore clock configuration if changed */
        if (pwrclkchanged == SET)
 80047c8:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 80047cc:	2b01      	cmp	r3, #1
 80047ce:	d107      	bne.n	80047e0 <HAL_RCC_OscConfig+0xc44>
        {
          __HAL_RCC_PWR_CLK_DISABLE();
 80047d0:	4b24      	ldr	r3, [pc, #144]	@ (8004864 <HAL_RCC_OscConfig+0xcc8>)
 80047d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80047d6:	4a23      	ldr	r2, [pc, #140]	@ (8004864 <HAL_RCC_OscConfig+0xcc8>)
 80047d8:	f023 0304 	bic.w	r3, r3, #4
 80047dc:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
        }

        /* Enable the main PLL */
        __HAL_RCC_PLL_ENABLE();
 80047e0:	4b20      	ldr	r3, [pc, #128]	@ (8004864 <HAL_RCC_OscConfig+0xcc8>)
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	4a1f      	ldr	r2, [pc, #124]	@ (8004864 <HAL_RCC_OscConfig+0xcc8>)
 80047e6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80047ea:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80047ec:	f7fd ffa0 	bl	8002730 <HAL_GetTick>
 80047f0:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80047f2:	e008      	b.n	8004806 <HAL_RCC_OscConfig+0xc6a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80047f4:	f7fd ff9c 	bl	8002730 <HAL_GetTick>
 80047f8:	4602      	mov	r2, r0
 80047fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047fc:	1ad3      	subs	r3, r2, r3
 80047fe:	2b02      	cmp	r3, #2
 8004800:	d901      	bls.n	8004806 <HAL_RCC_OscConfig+0xc6a>
          {
            return HAL_TIMEOUT;
 8004802:	2303      	movs	r3, #3
 8004804:	e09f      	b.n	8004946 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8004806:	4b17      	ldr	r3, [pc, #92]	@ (8004864 <HAL_RCC_OscConfig+0xcc8>)
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800480e:	2b00      	cmp	r3, #0
 8004810:	d0f0      	beq.n	80047f4 <HAL_RCC_OscConfig+0xc58>
          }
        }

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8004812:	4b14      	ldr	r3, [pc, #80]	@ (8004864 <HAL_RCC_OscConfig+0xcc8>)
 8004814:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004816:	4a13      	ldr	r2, [pc, #76]	@ (8004864 <HAL_RCC_OscConfig+0xcc8>)
 8004818:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800481c:	6293      	str	r3, [r2, #40]	@ 0x28
 800481e:	e091      	b.n	8004944 <HAL_RCC_OscConfig+0xda8>

      }
      else
      {
        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8004820:	4b10      	ldr	r3, [pc, #64]	@ (8004864 <HAL_RCC_OscConfig+0xcc8>)
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	4a0f      	ldr	r2, [pc, #60]	@ (8004864 <HAL_RCC_OscConfig+0xcc8>)
 8004826:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800482a:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800482c:	f7fd ff80 	bl	8002730 <HAL_GetTick>
 8004830:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8004832:	e008      	b.n	8004846 <HAL_RCC_OscConfig+0xcaa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004834:	f7fd ff7c 	bl	8002730 <HAL_GetTick>
 8004838:	4602      	mov	r2, r0
 800483a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800483c:	1ad3      	subs	r3, r2, r3
 800483e:	2b02      	cmp	r3, #2
 8004840:	d901      	bls.n	8004846 <HAL_RCC_OscConfig+0xcaa>
          {
            return HAL_TIMEOUT;
 8004842:	2303      	movs	r3, #3
 8004844:	e07f      	b.n	8004946 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8004846:	4b07      	ldr	r3, [pc, #28]	@ (8004864 <HAL_RCC_OscConfig+0xcc8>)
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800484e:	2b00      	cmp	r3, #0
 8004850:	d1f0      	bne.n	8004834 <HAL_RCC_OscConfig+0xc98>
          }
        }

        /* Unselect main PLL clock source and disable main PLL outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 8004852:	4b04      	ldr	r3, [pc, #16]	@ (8004864 <HAL_RCC_OscConfig+0xcc8>)
 8004854:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004856:	4a03      	ldr	r2, [pc, #12]	@ (8004864 <HAL_RCC_OscConfig+0xcc8>)
 8004858:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 800485c:	f023 0303 	bic.w	r3, r3, #3
 8004860:	6293      	str	r3, [r2, #40]	@ 0x28
 8004862:	e06f      	b.n	8004944 <HAL_RCC_OscConfig+0xda8>
 8004864:	46020c00 	.word	0x46020c00
 8004868:	46020800 	.word	0x46020800
 800486c:	80800000 	.word	0x80800000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 8004870:	4b37      	ldr	r3, [pc, #220]	@ (8004950 <HAL_RCC_OscConfig+0xdb4>)
 8004872:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004874:	61fb      	str	r3, [r7, #28]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8004876:	4b36      	ldr	r3, [pc, #216]	@ (8004950 <HAL_RCC_OscConfig+0xdb4>)
 8004878:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800487a:	61bb      	str	r3, [r7, #24]
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004880:	2b01      	cmp	r3, #1
 8004882:	d039      	beq.n	80048f8 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8004884:	69fb      	ldr	r3, [r7, #28]
 8004886:	f003 0203 	and.w	r2, r3, #3
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800488e:	429a      	cmp	r2, r3
 8004890:	d132      	bne.n	80048f8 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 8004892:	69fb      	ldr	r3, [r7, #28]
 8004894:	0a1b      	lsrs	r3, r3, #8
 8004896:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800489e:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 80048a0:	429a      	cmp	r2, r3
 80048a2:	d129      	bne.n	80048f8 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 80048a4:	69fb      	ldr	r3, [r7, #28]
 80048a6:	f403 4270 	and.w	r2, r3, #61440	@ 0xf000
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 80048ae:	429a      	cmp	r2, r3
 80048b0:	d122      	bne.n	80048f8 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80048b2:	69bb      	ldr	r3, [r7, #24]
 80048b4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80048bc:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 80048be:	429a      	cmp	r2, r3
 80048c0:	d11a      	bne.n	80048f8 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 80048c2:	69bb      	ldr	r3, [r7, #24]
 80048c4:	0a5b      	lsrs	r3, r3, #9
 80048c6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80048ce:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80048d0:	429a      	cmp	r2, r3
 80048d2:	d111      	bne.n	80048f8 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 80048d4:	69bb      	ldr	r3, [r7, #24]
 80048d6:	0c1b      	lsrs	r3, r3, #16
 80048d8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80048e0:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80048e2:	429a      	cmp	r2, r3
 80048e4:	d108      	bne.n	80048f8 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 80048e6:	69bb      	ldr	r3, [r7, #24]
 80048e8:	0e1b      	lsrs	r3, r3, #24
 80048ea:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pRCC_OscInitStruct->PLL.PLLR - 1U)))
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80048f2:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80048f4:	429a      	cmp	r2, r3
 80048f6:	d001      	beq.n	80048fc <HAL_RCC_OscConfig+0xd60>
      {
        return HAL_ERROR;
 80048f8:	2301      	movs	r3, #1
 80048fa:	e024      	b.n	8004946 <HAL_RCC_OscConfig+0xdaa>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 80048fc:	4b14      	ldr	r3, [pc, #80]	@ (8004950 <HAL_RCC_OscConfig+0xdb4>)
 80048fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004900:	08db      	lsrs	r3, r3, #3
 8004902:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pRCC_OscInitStruct->PLL.PLLFRACN))
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 800490a:	429a      	cmp	r2, r3
 800490c:	d01a      	beq.n	8004944 <HAL_RCC_OscConfig+0xda8>
      {
        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN. */
        __HAL_RCC_PLL_FRACN_DISABLE();
 800490e:	4b10      	ldr	r3, [pc, #64]	@ (8004950 <HAL_RCC_OscConfig+0xdb4>)
 8004910:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004912:	4a0f      	ldr	r2, [pc, #60]	@ (8004950 <HAL_RCC_OscConfig+0xdb4>)
 8004914:	f023 0310 	bic.w	r3, r3, #16
 8004918:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800491a:	f7fd ff09 	bl	8002730 <HAL_GetTick>
 800491e:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait at least 2 CK_REF (PLL1 input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < PLL_FRAC_WAIT_VALUE)
 8004920:	bf00      	nop
 8004922:	f7fd ff05 	bl	8002730 <HAL_GetTick>
 8004926:	4602      	mov	r2, r0
 8004928:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800492a:	4293      	cmp	r3, r2
 800492c:	d0f9      	beq.n	8004922 <HAL_RCC_OscConfig+0xd86>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004932:	4a07      	ldr	r2, [pc, #28]	@ (8004950 <HAL_RCC_OscConfig+0xdb4>)
 8004934:	00db      	lsls	r3, r3, #3
 8004936:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL_FRACN_ENABLE();
 8004938:	4b05      	ldr	r3, [pc, #20]	@ (8004950 <HAL_RCC_OscConfig+0xdb4>)
 800493a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800493c:	4a04      	ldr	r2, [pc, #16]	@ (8004950 <HAL_RCC_OscConfig+0xdb4>)
 800493e:	f043 0310 	orr.w	r3, r3, #16
 8004942:	6293      	str	r3, [r2, #40]	@ 0x28
      }
    }
  }
  return HAL_OK;
 8004944:	2300      	movs	r3, #0
}
 8004946:	4618      	mov	r0, r3
 8004948:	3738      	adds	r7, #56	@ 0x38
 800494a:	46bd      	mov	sp, r7
 800494c:	bd80      	pop	{r7, pc}
 800494e:	bf00      	nop
 8004950:	46020c00 	.word	0x46020c00

08004954 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef   *const pRCC_ClkInitStruct, uint32_t FLatency)
{
 8004954:	b580      	push	{r7, lr}
 8004956:	b086      	sub	sp, #24
 8004958:	af00      	add	r7, sp, #0
 800495a:	6078      	str	r0, [r7, #4]
 800495c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pRCC_ClkInitStruct == NULL)
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	2b00      	cmp	r3, #0
 8004962:	d101      	bne.n	8004968 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004964:	2301      	movs	r3, #1
 8004966:	e1d9      	b.n	8004d1c <HAL_RCC_ClockConfig+0x3c8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
   must be correctly programmed according to the frequency of the CPU clock
   (HCLK) and the supply voltage of the device */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004968:	4b9b      	ldr	r3, [pc, #620]	@ (8004bd8 <HAL_RCC_ClockConfig+0x284>)
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	f003 030f 	and.w	r3, r3, #15
 8004970:	683a      	ldr	r2, [r7, #0]
 8004972:	429a      	cmp	r2, r3
 8004974:	d910      	bls.n	8004998 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004976:	4b98      	ldr	r3, [pc, #608]	@ (8004bd8 <HAL_RCC_ClockConfig+0x284>)
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f023 020f 	bic.w	r2, r3, #15
 800497e:	4996      	ldr	r1, [pc, #600]	@ (8004bd8 <HAL_RCC_ClockConfig+0x284>)
 8004980:	683b      	ldr	r3, [r7, #0]
 8004982:	4313      	orrs	r3, r2
 8004984:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004986:	4b94      	ldr	r3, [pc, #592]	@ (8004bd8 <HAL_RCC_ClockConfig+0x284>)
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	f003 030f 	and.w	r3, r3, #15
 800498e:	683a      	ldr	r2, [r7, #0]
 8004990:	429a      	cmp	r2, r3
 8004992:	d001      	beq.n	8004998 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004994:	2301      	movs	r3, #1
 8004996:	e1c1      	b.n	8004d1c <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f003 0310 	and.w	r3, r3, #16
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d010      	beq.n	80049c6 <HAL_RCC_ClockConfig+0x72>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) > (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	695a      	ldr	r2, [r3, #20]
 80049a8:	4b8c      	ldr	r3, [pc, #560]	@ (8004bdc <HAL_RCC_ClockConfig+0x288>)
 80049aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049ac:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80049b0:	429a      	cmp	r2, r3
 80049b2:	d908      	bls.n	80049c6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, pRCC_ClkInitStruct->APB3CLKDivider);
 80049b4:	4b89      	ldr	r3, [pc, #548]	@ (8004bdc <HAL_RCC_ClockConfig+0x288>)
 80049b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049b8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	695b      	ldr	r3, [r3, #20]
 80049c0:	4986      	ldr	r1, [pc, #536]	@ (8004bdc <HAL_RCC_ClockConfig+0x288>)
 80049c2:	4313      	orrs	r3, r2
 80049c4:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	f003 0308 	and.w	r3, r3, #8
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d012      	beq.n	80049f8 <HAL_RCC_ClockConfig+0xa4>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	691a      	ldr	r2, [r3, #16]
 80049d6:	4b81      	ldr	r3, [pc, #516]	@ (8004bdc <HAL_RCC_ClockConfig+0x288>)
 80049d8:	6a1b      	ldr	r3, [r3, #32]
 80049da:	091b      	lsrs	r3, r3, #4
 80049dc:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80049e0:	429a      	cmp	r2, r3
 80049e2:	d909      	bls.n	80049f8 <HAL_RCC_ClockConfig+0xa4>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 80049e4:	4b7d      	ldr	r3, [pc, #500]	@ (8004bdc <HAL_RCC_ClockConfig+0x288>)
 80049e6:	6a1b      	ldr	r3, [r3, #32]
 80049e8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	691b      	ldr	r3, [r3, #16]
 80049f0:	011b      	lsls	r3, r3, #4
 80049f2:	497a      	ldr	r1, [pc, #488]	@ (8004bdc <HAL_RCC_ClockConfig+0x288>)
 80049f4:	4313      	orrs	r3, r2
 80049f6:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	f003 0304 	and.w	r3, r3, #4
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d010      	beq.n	8004a26 <HAL_RCC_ClockConfig+0xd2>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	68da      	ldr	r2, [r3, #12]
 8004a08:	4b74      	ldr	r3, [pc, #464]	@ (8004bdc <HAL_RCC_ClockConfig+0x288>)
 8004a0a:	6a1b      	ldr	r3, [r3, #32]
 8004a0c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004a10:	429a      	cmp	r2, r3
 8004a12:	d908      	bls.n	8004a26 <HAL_RCC_ClockConfig+0xd2>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8004a14:	4b71      	ldr	r3, [pc, #452]	@ (8004bdc <HAL_RCC_ClockConfig+0x288>)
 8004a16:	6a1b      	ldr	r3, [r3, #32]
 8004a18:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	68db      	ldr	r3, [r3, #12]
 8004a20:	496e      	ldr	r1, [pc, #440]	@ (8004bdc <HAL_RCC_ClockConfig+0x288>)
 8004a22:	4313      	orrs	r3, r2
 8004a24:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	f003 0302 	and.w	r3, r3, #2
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d010      	beq.n	8004a54 <HAL_RCC_ClockConfig+0x100>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	689a      	ldr	r2, [r3, #8]
 8004a36:	4b69      	ldr	r3, [pc, #420]	@ (8004bdc <HAL_RCC_ClockConfig+0x288>)
 8004a38:	6a1b      	ldr	r3, [r3, #32]
 8004a3a:	f003 030f 	and.w	r3, r3, #15
 8004a3e:	429a      	cmp	r2, r3
 8004a40:	d908      	bls.n	8004a54 <HAL_RCC_ClockConfig+0x100>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 8004a42:	4b66      	ldr	r3, [pc, #408]	@ (8004bdc <HAL_RCC_ClockConfig+0x288>)
 8004a44:	6a1b      	ldr	r3, [r3, #32]
 8004a46:	f023 020f 	bic.w	r2, r3, #15
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	689b      	ldr	r3, [r3, #8]
 8004a4e:	4963      	ldr	r1, [pc, #396]	@ (8004bdc <HAL_RCC_ClockConfig+0x288>)
 8004a50:	4313      	orrs	r3, r2
 8004a52:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f003 0301 	and.w	r3, r3, #1
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	f000 80d2 	beq.w	8004c06 <HAL_RCC_ClockConfig+0x2b2>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pRCC_ClkInitStruct->SYSCLKSource));
    FlagStatus  pwrclkchanged = RESET;
 8004a62:	2300      	movs	r3, #0
 8004a64:	75fb      	strb	r3, [r7, #23]

    /* PLL is selected as System Clock Source */
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	685b      	ldr	r3, [r3, #4]
 8004a6a:	2b03      	cmp	r3, #3
 8004a6c:	d143      	bne.n	8004af6 <HAL_RCC_ClockConfig+0x1a2>
    {
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004a6e:	4b5b      	ldr	r3, [pc, #364]	@ (8004bdc <HAL_RCC_ClockConfig+0x288>)
 8004a70:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004a74:	f003 0304 	and.w	r3, r3, #4
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d110      	bne.n	8004a9e <HAL_RCC_ClockConfig+0x14a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8004a7c:	4b57      	ldr	r3, [pc, #348]	@ (8004bdc <HAL_RCC_ClockConfig+0x288>)
 8004a7e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004a82:	4a56      	ldr	r2, [pc, #344]	@ (8004bdc <HAL_RCC_ClockConfig+0x288>)
 8004a84:	f043 0304 	orr.w	r3, r3, #4
 8004a88:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8004a8c:	4b53      	ldr	r3, [pc, #332]	@ (8004bdc <HAL_RCC_ClockConfig+0x288>)
 8004a8e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004a92:	f003 0304 	and.w	r3, r3, #4
 8004a96:	60bb      	str	r3, [r7, #8]
 8004a98:	68bb      	ldr	r3, [r7, #8]
        pwrclkchanged = SET;
 8004a9a:	2301      	movs	r3, #1
 8004a9c:	75fb      	strb	r3, [r7, #23]
      }
      tickstart = HAL_GetTick();
 8004a9e:	f7fd fe47 	bl	8002730 <HAL_GetTick>
 8004aa2:	6138      	str	r0, [r7, #16]
      /* Check if EPOD is enabled */
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 8004aa4:	4b4e      	ldr	r3, [pc, #312]	@ (8004be0 <HAL_RCC_ClockConfig+0x28c>)
 8004aa6:	68db      	ldr	r3, [r3, #12]
 8004aa8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d00f      	beq.n	8004ad0 <HAL_RCC_ClockConfig+0x17c>
      {
        /* Wait till BOOST is ready */
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8004ab0:	e008      	b.n	8004ac4 <HAL_RCC_ClockConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > EPOD_TIMEOUT_VALUE)
 8004ab2:	f7fd fe3d 	bl	8002730 <HAL_GetTick>
 8004ab6:	4602      	mov	r2, r0
 8004ab8:	693b      	ldr	r3, [r7, #16]
 8004aba:	1ad3      	subs	r3, r2, r3
 8004abc:	2b02      	cmp	r3, #2
 8004abe:	d901      	bls.n	8004ac4 <HAL_RCC_ClockConfig+0x170>
          {
            return HAL_TIMEOUT;
 8004ac0:	2303      	movs	r3, #3
 8004ac2:	e12b      	b.n	8004d1c <HAL_RCC_ClockConfig+0x3c8>
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8004ac4:	4b46      	ldr	r3, [pc, #280]	@ (8004be0 <HAL_RCC_ClockConfig+0x28c>)
 8004ac6:	68db      	ldr	r3, [r3, #12]
 8004ac8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d0f0      	beq.n	8004ab2 <HAL_RCC_ClockConfig+0x15e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8004ad0:	7dfb      	ldrb	r3, [r7, #23]
 8004ad2:	2b01      	cmp	r3, #1
 8004ad4:	d107      	bne.n	8004ae6 <HAL_RCC_ClockConfig+0x192>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8004ad6:	4b41      	ldr	r3, [pc, #260]	@ (8004bdc <HAL_RCC_ClockConfig+0x288>)
 8004ad8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004adc:	4a3f      	ldr	r2, [pc, #252]	@ (8004bdc <HAL_RCC_ClockConfig+0x288>)
 8004ade:	f023 0304 	bic.w	r3, r3, #4
 8004ae2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
      }

      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8004ae6:	4b3d      	ldr	r3, [pc, #244]	@ (8004bdc <HAL_RCC_ClockConfig+0x288>)
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d121      	bne.n	8004b36 <HAL_RCC_ClockConfig+0x1e2>
      {
        return HAL_ERROR;
 8004af2:	2301      	movs	r3, #1
 8004af4:	e112      	b.n	8004d1c <HAL_RCC_ClockConfig+0x3c8>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	685b      	ldr	r3, [r3, #4]
 8004afa:	2b02      	cmp	r3, #2
 8004afc:	d107      	bne.n	8004b0e <HAL_RCC_ClockConfig+0x1ba>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004afe:	4b37      	ldr	r3, [pc, #220]	@ (8004bdc <HAL_RCC_ClockConfig+0x288>)
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d115      	bne.n	8004b36 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8004b0a:	2301      	movs	r3, #1
 8004b0c:	e106      	b.n	8004d1c <HAL_RCC_ClockConfig+0x3c8>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	685b      	ldr	r3, [r3, #4]
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d107      	bne.n	8004b26 <HAL_RCC_ClockConfig+0x1d2>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8004b16:	4b31      	ldr	r3, [pc, #196]	@ (8004bdc <HAL_RCC_ClockConfig+0x288>)
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	f003 0304 	and.w	r3, r3, #4
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d109      	bne.n	8004b36 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8004b22:	2301      	movs	r3, #1
 8004b24:	e0fa      	b.n	8004d1c <HAL_RCC_ClockConfig+0x3c8>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004b26:	4b2d      	ldr	r3, [pc, #180]	@ (8004bdc <HAL_RCC_ClockConfig+0x288>)
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d101      	bne.n	8004b36 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8004b32:	2301      	movs	r3, #1
 8004b34:	e0f2      	b.n	8004d1c <HAL_RCC_ClockConfig+0x3c8>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 8004b36:	4b29      	ldr	r3, [pc, #164]	@ (8004bdc <HAL_RCC_ClockConfig+0x288>)
 8004b38:	69db      	ldr	r3, [r3, #28]
 8004b3a:	f023 0203 	bic.w	r2, r3, #3
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	685b      	ldr	r3, [r3, #4]
 8004b42:	4926      	ldr	r1, [pc, #152]	@ (8004bdc <HAL_RCC_ClockConfig+0x288>)
 8004b44:	4313      	orrs	r3, r2
 8004b46:	61cb      	str	r3, [r1, #28]

    tickstart = HAL_GetTick();
 8004b48:	f7fd fdf2 	bl	8002730 <HAL_GetTick>
 8004b4c:	6138      	str	r0, [r7, #16]

    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	685b      	ldr	r3, [r3, #4]
 8004b52:	2b03      	cmp	r3, #3
 8004b54:	d112      	bne.n	8004b7c <HAL_RCC_ClockConfig+0x228>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004b56:	e00a      	b.n	8004b6e <HAL_RCC_ClockConfig+0x21a>
      {
        if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004b58:	f7fd fdea 	bl	8002730 <HAL_GetTick>
 8004b5c:	4602      	mov	r2, r0
 8004b5e:	693b      	ldr	r3, [r7, #16]
 8004b60:	1ad3      	subs	r3, r2, r3
 8004b62:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004b66:	4293      	cmp	r3, r2
 8004b68:	d901      	bls.n	8004b6e <HAL_RCC_ClockConfig+0x21a>
        {
          return HAL_TIMEOUT;
 8004b6a:	2303      	movs	r3, #3
 8004b6c:	e0d6      	b.n	8004d1c <HAL_RCC_ClockConfig+0x3c8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004b6e:	4b1b      	ldr	r3, [pc, #108]	@ (8004bdc <HAL_RCC_ClockConfig+0x288>)
 8004b70:	69db      	ldr	r3, [r3, #28]
 8004b72:	f003 030c 	and.w	r3, r3, #12
 8004b76:	2b0c      	cmp	r3, #12
 8004b78:	d1ee      	bne.n	8004b58 <HAL_RCC_ClockConfig+0x204>
 8004b7a:	e044      	b.n	8004c06 <HAL_RCC_ClockConfig+0x2b2>
        }
      }
    }
    else
    {
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	685b      	ldr	r3, [r3, #4]
 8004b80:	2b02      	cmp	r3, #2
 8004b82:	d112      	bne.n	8004baa <HAL_RCC_ClockConfig+0x256>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8004b84:	e00a      	b.n	8004b9c <HAL_RCC_ClockConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004b86:	f7fd fdd3 	bl	8002730 <HAL_GetTick>
 8004b8a:	4602      	mov	r2, r0
 8004b8c:	693b      	ldr	r3, [r7, #16]
 8004b8e:	1ad3      	subs	r3, r2, r3
 8004b90:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004b94:	4293      	cmp	r3, r2
 8004b96:	d901      	bls.n	8004b9c <HAL_RCC_ClockConfig+0x248>
          {
            return HAL_TIMEOUT;
 8004b98:	2303      	movs	r3, #3
 8004b9a:	e0bf      	b.n	8004d1c <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8004b9c:	4b0f      	ldr	r3, [pc, #60]	@ (8004bdc <HAL_RCC_ClockConfig+0x288>)
 8004b9e:	69db      	ldr	r3, [r3, #28]
 8004ba0:	f003 030c 	and.w	r3, r3, #12
 8004ba4:	2b08      	cmp	r3, #8
 8004ba6:	d1ee      	bne.n	8004b86 <HAL_RCC_ClockConfig+0x232>
 8004ba8:	e02d      	b.n	8004c06 <HAL_RCC_ClockConfig+0x2b2>
          }
        }
      }
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	685b      	ldr	r3, [r3, #4]
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d123      	bne.n	8004bfa <HAL_RCC_ClockConfig+0x2a6>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8004bb2:	e00a      	b.n	8004bca <HAL_RCC_ClockConfig+0x276>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004bb4:	f7fd fdbc 	bl	8002730 <HAL_GetTick>
 8004bb8:	4602      	mov	r2, r0
 8004bba:	693b      	ldr	r3, [r7, #16]
 8004bbc:	1ad3      	subs	r3, r2, r3
 8004bbe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004bc2:	4293      	cmp	r3, r2
 8004bc4:	d901      	bls.n	8004bca <HAL_RCC_ClockConfig+0x276>
          {
            return HAL_TIMEOUT;
 8004bc6:	2303      	movs	r3, #3
 8004bc8:	e0a8      	b.n	8004d1c <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8004bca:	4b04      	ldr	r3, [pc, #16]	@ (8004bdc <HAL_RCC_ClockConfig+0x288>)
 8004bcc:	69db      	ldr	r3, [r3, #28]
 8004bce:	f003 030c 	and.w	r3, r3, #12
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d1ee      	bne.n	8004bb4 <HAL_RCC_ClockConfig+0x260>
 8004bd6:	e016      	b.n	8004c06 <HAL_RCC_ClockConfig+0x2b2>
 8004bd8:	40022000 	.word	0x40022000
 8004bdc:	46020c00 	.word	0x46020c00
 8004be0:	46020800 	.word	0x46020800
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004be4:	f7fd fda4 	bl	8002730 <HAL_GetTick>
 8004be8:	4602      	mov	r2, r0
 8004bea:	693b      	ldr	r3, [r7, #16]
 8004bec:	1ad3      	subs	r3, r2, r3
 8004bee:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004bf2:	4293      	cmp	r3, r2
 8004bf4:	d901      	bls.n	8004bfa <HAL_RCC_ClockConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 8004bf6:	2303      	movs	r3, #3
 8004bf8:	e090      	b.n	8004d1c <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8004bfa:	4b4a      	ldr	r3, [pc, #296]	@ (8004d24 <HAL_RCC_ClockConfig+0x3d0>)
 8004bfc:	69db      	ldr	r3, [r3, #28]
 8004bfe:	f003 030c 	and.w	r3, r3, #12
 8004c02:	2b04      	cmp	r3, #4
 8004c04:	d1ee      	bne.n	8004be4 <HAL_RCC_ClockConfig+0x290>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f003 0302 	and.w	r3, r3, #2
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d010      	beq.n	8004c34 <HAL_RCC_ClockConfig+0x2e0>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	689a      	ldr	r2, [r3, #8]
 8004c16:	4b43      	ldr	r3, [pc, #268]	@ (8004d24 <HAL_RCC_ClockConfig+0x3d0>)
 8004c18:	6a1b      	ldr	r3, [r3, #32]
 8004c1a:	f003 030f 	and.w	r3, r3, #15
 8004c1e:	429a      	cmp	r2, r3
 8004c20:	d208      	bcs.n	8004c34 <HAL_RCC_ClockConfig+0x2e0>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 8004c22:	4b40      	ldr	r3, [pc, #256]	@ (8004d24 <HAL_RCC_ClockConfig+0x3d0>)
 8004c24:	6a1b      	ldr	r3, [r3, #32]
 8004c26:	f023 020f 	bic.w	r2, r3, #15
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	689b      	ldr	r3, [r3, #8]
 8004c2e:	493d      	ldr	r1, [pc, #244]	@ (8004d24 <HAL_RCC_ClockConfig+0x3d0>)
 8004c30:	4313      	orrs	r3, r2
 8004c32:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004c34:	4b3c      	ldr	r3, [pc, #240]	@ (8004d28 <HAL_RCC_ClockConfig+0x3d4>)
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	f003 030f 	and.w	r3, r3, #15
 8004c3c:	683a      	ldr	r2, [r7, #0]
 8004c3e:	429a      	cmp	r2, r3
 8004c40:	d210      	bcs.n	8004c64 <HAL_RCC_ClockConfig+0x310>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c42:	4b39      	ldr	r3, [pc, #228]	@ (8004d28 <HAL_RCC_ClockConfig+0x3d4>)
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	f023 020f 	bic.w	r2, r3, #15
 8004c4a:	4937      	ldr	r1, [pc, #220]	@ (8004d28 <HAL_RCC_ClockConfig+0x3d4>)
 8004c4c:	683b      	ldr	r3, [r7, #0]
 8004c4e:	4313      	orrs	r3, r2
 8004c50:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c52:	4b35      	ldr	r3, [pc, #212]	@ (8004d28 <HAL_RCC_ClockConfig+0x3d4>)
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	f003 030f 	and.w	r3, r3, #15
 8004c5a:	683a      	ldr	r2, [r7, #0]
 8004c5c:	429a      	cmp	r2, r3
 8004c5e:	d001      	beq.n	8004c64 <HAL_RCC_ClockConfig+0x310>
    {
      return HAL_ERROR;
 8004c60:	2301      	movs	r3, #1
 8004c62:	e05b      	b.n	8004d1c <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	f003 0304 	and.w	r3, r3, #4
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d010      	beq.n	8004c92 <HAL_RCC_ClockConfig+0x33e>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	68da      	ldr	r2, [r3, #12]
 8004c74:	4b2b      	ldr	r3, [pc, #172]	@ (8004d24 <HAL_RCC_ClockConfig+0x3d0>)
 8004c76:	6a1b      	ldr	r3, [r3, #32]
 8004c78:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004c7c:	429a      	cmp	r2, r3
 8004c7e:	d208      	bcs.n	8004c92 <HAL_RCC_ClockConfig+0x33e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8004c80:	4b28      	ldr	r3, [pc, #160]	@ (8004d24 <HAL_RCC_ClockConfig+0x3d0>)
 8004c82:	6a1b      	ldr	r3, [r3, #32]
 8004c84:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	68db      	ldr	r3, [r3, #12]
 8004c8c:	4925      	ldr	r1, [pc, #148]	@ (8004d24 <HAL_RCC_ClockConfig+0x3d0>)
 8004c8e:	4313      	orrs	r3, r2
 8004c90:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	f003 0308 	and.w	r3, r3, #8
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d012      	beq.n	8004cc4 <HAL_RCC_ClockConfig+0x370>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	691a      	ldr	r2, [r3, #16]
 8004ca2:	4b20      	ldr	r3, [pc, #128]	@ (8004d24 <HAL_RCC_ClockConfig+0x3d0>)
 8004ca4:	6a1b      	ldr	r3, [r3, #32]
 8004ca6:	091b      	lsrs	r3, r3, #4
 8004ca8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004cac:	429a      	cmp	r2, r3
 8004cae:	d209      	bcs.n	8004cc4 <HAL_RCC_ClockConfig+0x370>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8004cb0:	4b1c      	ldr	r3, [pc, #112]	@ (8004d24 <HAL_RCC_ClockConfig+0x3d0>)
 8004cb2:	6a1b      	ldr	r3, [r3, #32]
 8004cb4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	691b      	ldr	r3, [r3, #16]
 8004cbc:	011b      	lsls	r3, r3, #4
 8004cbe:	4919      	ldr	r1, [pc, #100]	@ (8004d24 <HAL_RCC_ClockConfig+0x3d0>)
 8004cc0:	4313      	orrs	r3, r2
 8004cc2:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	f003 0310 	and.w	r3, r3, #16
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d010      	beq.n	8004cf2 <HAL_RCC_ClockConfig+0x39e>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) < (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	695a      	ldr	r2, [r3, #20]
 8004cd4:	4b13      	ldr	r3, [pc, #76]	@ (8004d24 <HAL_RCC_ClockConfig+0x3d0>)
 8004cd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cd8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004cdc:	429a      	cmp	r2, r3
 8004cde:	d208      	bcs.n	8004cf2 <HAL_RCC_ClockConfig+0x39e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, (pRCC_ClkInitStruct->APB3CLKDivider));
 8004ce0:	4b10      	ldr	r3, [pc, #64]	@ (8004d24 <HAL_RCC_ClockConfig+0x3d0>)
 8004ce2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ce4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	695b      	ldr	r3, [r3, #20]
 8004cec:	490d      	ldr	r1, [pc, #52]	@ (8004d24 <HAL_RCC_ClockConfig+0x3d0>)
 8004cee:	4313      	orrs	r3, r2
 8004cf0:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8004cf2:	f000 f821 	bl	8004d38 <HAL_RCC_GetSysClockFreq>
 8004cf6:	4602      	mov	r2, r0
 8004cf8:	4b0a      	ldr	r3, [pc, #40]	@ (8004d24 <HAL_RCC_ClockConfig+0x3d0>)
 8004cfa:	6a1b      	ldr	r3, [r3, #32]
 8004cfc:	f003 030f 	and.w	r3, r3, #15
 8004d00:	490a      	ldr	r1, [pc, #40]	@ (8004d2c <HAL_RCC_ClockConfig+0x3d8>)
 8004d02:	5ccb      	ldrb	r3, [r1, r3]
 8004d04:	fa22 f303 	lsr.w	r3, r2, r3
 8004d08:	4a09      	ldr	r2, [pc, #36]	@ (8004d30 <HAL_RCC_ClockConfig+0x3dc>)
 8004d0a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004d0c:	4b09      	ldr	r3, [pc, #36]	@ (8004d34 <HAL_RCC_ClockConfig+0x3e0>)
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	4618      	mov	r0, r3
 8004d12:	f7fd f8d5 	bl	8001ec0 <HAL_InitTick>
 8004d16:	4603      	mov	r3, r0
 8004d18:	73fb      	strb	r3, [r7, #15]

  return status;
 8004d1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d1c:	4618      	mov	r0, r3
 8004d1e:	3718      	adds	r7, #24
 8004d20:	46bd      	mov	sp, r7
 8004d22:	bd80      	pop	{r7, pc}
 8004d24:	46020c00 	.word	0x46020c00
 8004d28:	40022000 	.word	0x40022000
 8004d2c:	0800db60 	.word	0x0800db60
 8004d30:	20000000 	.word	0x20000000
 8004d34:	20000020 	.word	0x20000020

08004d38 <HAL_RCC_GetSysClockFreq>:
  * @note   Each time SYSCLK changes, this function must be called to update the
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004d38:	b480      	push	{r7}
 8004d3a:	b08b      	sub	sp, #44	@ 0x2c
 8004d3c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 8004d3e:	2300      	movs	r3, #0
 8004d40:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pllsource;
  uint32_t pllr;
  uint32_t pllm;
  uint32_t pllfracen;
  uint32_t sysclockfreq = 0U;
 8004d42:	2300      	movs	r3, #0
 8004d44:	623b      	str	r3, [r7, #32]
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  float_t fracn1;
  float_t pllvco;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004d46:	4b78      	ldr	r3, [pc, #480]	@ (8004f28 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004d48:	69db      	ldr	r3, [r3, #28]
 8004d4a:	f003 030c 	and.w	r3, r3, #12
 8004d4e:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004d50:	4b75      	ldr	r3, [pc, #468]	@ (8004f28 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004d52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d54:	f003 0303 	and.w	r3, r3, #3
 8004d58:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8004d5a:	69bb      	ldr	r3, [r7, #24]
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d005      	beq.n	8004d6c <HAL_RCC_GetSysClockFreq+0x34>
 8004d60:	69bb      	ldr	r3, [r7, #24]
 8004d62:	2b0c      	cmp	r3, #12
 8004d64:	d121      	bne.n	8004daa <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004d66:	697b      	ldr	r3, [r7, #20]
 8004d68:	2b01      	cmp	r3, #1
 8004d6a:	d11e      	bne.n	8004daa <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 8004d6c:	4b6e      	ldr	r3, [pc, #440]	@ (8004f28 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004d6e:	689b      	ldr	r3, [r3, #8]
 8004d70:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d107      	bne.n	8004d88 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 8004d78:	4b6b      	ldr	r3, [pc, #428]	@ (8004f28 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004d7a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004d7e:	0b1b      	lsrs	r3, r3, #12
 8004d80:	f003 030f 	and.w	r3, r3, #15
 8004d84:	627b      	str	r3, [r7, #36]	@ 0x24
 8004d86:	e005      	b.n	8004d94 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 8004d88:	4b67      	ldr	r3, [pc, #412]	@ (8004f28 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004d8a:	689b      	ldr	r3, [r3, #8]
 8004d8c:	0f1b      	lsrs	r3, r3, #28
 8004d8e:	f003 030f 	and.w	r3, r3, #15
 8004d92:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004d94:	4a65      	ldr	r2, [pc, #404]	@ (8004f2c <HAL_RCC_GetSysClockFreq+0x1f4>)
 8004d96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004d9c:	627b      	str	r3, [r7, #36]	@ 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8004d9e:	69bb      	ldr	r3, [r7, #24]
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d110      	bne.n	8004dc6 <HAL_RCC_GetSysClockFreq+0x8e>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004da4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004da6:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8004da8:	e00d      	b.n	8004dc6 <HAL_RCC_GetSysClockFreq+0x8e>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004daa:	4b5f      	ldr	r3, [pc, #380]	@ (8004f28 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004dac:	69db      	ldr	r3, [r3, #28]
 8004dae:	f003 030c 	and.w	r3, r3, #12
 8004db2:	2b04      	cmp	r3, #4
 8004db4:	d102      	bne.n	8004dbc <HAL_RCC_GetSysClockFreq+0x84>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004db6:	4b5e      	ldr	r3, [pc, #376]	@ (8004f30 <HAL_RCC_GetSysClockFreq+0x1f8>)
 8004db8:	623b      	str	r3, [r7, #32]
 8004dba:	e004      	b.n	8004dc6 <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004dbc:	69bb      	ldr	r3, [r7, #24]
 8004dbe:	2b08      	cmp	r3, #8
 8004dc0:	d101      	bne.n	8004dc6 <HAL_RCC_GetSysClockFreq+0x8e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004dc2:	4b5b      	ldr	r3, [pc, #364]	@ (8004f30 <HAL_RCC_GetSysClockFreq+0x1f8>)
 8004dc4:	623b      	str	r3, [r7, #32]
  else
  {
    /* Nothing to do */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004dc6:	69bb      	ldr	r3, [r7, #24]
 8004dc8:	2b0c      	cmp	r3, #12
 8004dca:	f040 80a5 	bne.w	8004f18 <HAL_RCC_GetSysClockFreq+0x1e0>
  {
    /* PLL used as system clock  source
       PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
       SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8004dce:	4b56      	ldr	r3, [pc, #344]	@ (8004f28 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004dd0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004dd2:	f003 0303 	and.w	r3, r3, #3
 8004dd6:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8004dd8:	4b53      	ldr	r3, [pc, #332]	@ (8004f28 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004dda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ddc:	0a1b      	lsrs	r3, r3, #8
 8004dde:	f003 030f 	and.w	r3, r3, #15
 8004de2:	3301      	adds	r3, #1
 8004de4:	60fb      	str	r3, [r7, #12]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8004de6:	4b50      	ldr	r3, [pc, #320]	@ (8004f28 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004de8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004dea:	091b      	lsrs	r3, r3, #4
 8004dec:	f003 0301 	and.w	r3, r3, #1
 8004df0:	60bb      	str	r3, [r7, #8]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8004df2:	4b4d      	ldr	r3, [pc, #308]	@ (8004f28 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004df4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004df6:	08db      	lsrs	r3, r3, #3
 8004df8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004dfc:	68ba      	ldr	r2, [r7, #8]
 8004dfe:	fb02 f303 	mul.w	r3, r2, r3
 8004e02:	ee07 3a90 	vmov	s15, r3
 8004e06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e0a:	edc7 7a01 	vstr	s15, [r7, #4]
                                              RCC_PLL1FRACR_PLL1FRACN_Pos));

    switch (pllsource)
 8004e0e:	693b      	ldr	r3, [r7, #16]
 8004e10:	2b02      	cmp	r3, #2
 8004e12:	d003      	beq.n	8004e1c <HAL_RCC_GetSysClockFreq+0xe4>
 8004e14:	693b      	ldr	r3, [r7, #16]
 8004e16:	2b03      	cmp	r3, #3
 8004e18:	d022      	beq.n	8004e60 <HAL_RCC_GetSysClockFreq+0x128>
 8004e1a:	e043      	b.n	8004ea4 <HAL_RCC_GetSysClockFreq+0x16c>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	ee07 3a90 	vmov	s15, r3
 8004e22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e26:	eddf 6a43 	vldr	s13, [pc, #268]	@ 8004f34 <HAL_RCC_GetSysClockFreq+0x1fc>
 8004e2a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004e2e:	4b3e      	ldr	r3, [pc, #248]	@ (8004f28 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004e30:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004e32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e36:	ee07 3a90 	vmov	s15, r3
 8004e3a:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8004e3e:	ed97 6a01 	vldr	s12, [r7, #4]
 8004e42:	eddf 5a3d 	vldr	s11, [pc, #244]	@ 8004f38 <HAL_RCC_GetSysClockFreq+0x200>
 8004e46:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004e4a:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8004e4e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004e52:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004e56:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e5a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004e5e:	e046      	b.n	8004eee <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	ee07 3a90 	vmov	s15, r3
 8004e66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e6a:	eddf 6a32 	vldr	s13, [pc, #200]	@ 8004f34 <HAL_RCC_GetSysClockFreq+0x1fc>
 8004e6e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004e72:	4b2d      	ldr	r3, [pc, #180]	@ (8004f28 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004e74:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004e76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e7a:	ee07 3a90 	vmov	s15, r3
 8004e7e:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8004e82:	ed97 6a01 	vldr	s12, [r7, #4]
 8004e86:	eddf 5a2c 	vldr	s11, [pc, #176]	@ 8004f38 <HAL_RCC_GetSysClockFreq+0x200>
 8004e8a:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004e8e:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8004e92:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004e96:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004e9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e9e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004ea2:	e024      	b.n	8004eee <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004ea4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ea6:	ee07 3a90 	vmov	s15, r3
 8004eaa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	ee07 3a90 	vmov	s15, r3
 8004eb4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004eb8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004ebc:	4b1a      	ldr	r3, [pc, #104]	@ (8004f28 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004ebe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004ec0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ec4:	ee07 3a90 	vmov	s15, r3
 8004ec8:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8004ecc:	ed97 6a01 	vldr	s12, [r7, #4]
 8004ed0:	eddf 5a19 	vldr	s11, [pc, #100]	@ 8004f38 <HAL_RCC_GetSysClockFreq+0x200>
 8004ed4:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004ed8:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8004edc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004ee0:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004ee4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ee8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004eec:	bf00      	nop
    }

    pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 8004eee:	4b0e      	ldr	r3, [pc, #56]	@ (8004f28 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004ef0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004ef2:	0e1b      	lsrs	r3, r3, #24
 8004ef4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004ef8:	3301      	adds	r3, #1
 8004efa:	603b      	str	r3, [r7, #0]
    sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 8004efc:	683b      	ldr	r3, [r7, #0]
 8004efe:	ee07 3a90 	vmov	s15, r3
 8004f02:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004f06:	edd7 6a07 	vldr	s13, [r7, #28]
 8004f0a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004f0e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004f12:	ee17 3a90 	vmov	r3, s15
 8004f16:	623b      	str	r3, [r7, #32]
  }

  return sysclockfreq;
 8004f18:	6a3b      	ldr	r3, [r7, #32]
}
 8004f1a:	4618      	mov	r0, r3
 8004f1c:	372c      	adds	r7, #44	@ 0x2c
 8004f1e:	46bd      	mov	sp, r7
 8004f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f24:	4770      	bx	lr
 8004f26:	bf00      	nop
 8004f28:	46020c00 	.word	0x46020c00
 8004f2c:	0800db78 	.word	0x0800db78
 8004f30:	00f42400 	.word	0x00f42400
 8004f34:	4b742400 	.word	0x4b742400
 8004f38:	46000000 	.word	0x46000000

08004f3c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004f3c:	b580      	push	{r7, lr}
 8004f3e:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8004f40:	f7ff fefa 	bl	8004d38 <HAL_RCC_GetSysClockFreq>
 8004f44:	4602      	mov	r2, r0
 8004f46:	4b07      	ldr	r3, [pc, #28]	@ (8004f64 <HAL_RCC_GetHCLKFreq+0x28>)
 8004f48:	6a1b      	ldr	r3, [r3, #32]
 8004f4a:	f003 030f 	and.w	r3, r3, #15
 8004f4e:	4906      	ldr	r1, [pc, #24]	@ (8004f68 <HAL_RCC_GetHCLKFreq+0x2c>)
 8004f50:	5ccb      	ldrb	r3, [r1, r3]
 8004f52:	fa22 f303 	lsr.w	r3, r2, r3
 8004f56:	4a05      	ldr	r2, [pc, #20]	@ (8004f6c <HAL_RCC_GetHCLKFreq+0x30>)
 8004f58:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 8004f5a:	4b04      	ldr	r3, [pc, #16]	@ (8004f6c <HAL_RCC_GetHCLKFreq+0x30>)
 8004f5c:	681b      	ldr	r3, [r3, #0]
}
 8004f5e:	4618      	mov	r0, r3
 8004f60:	bd80      	pop	{r7, pc}
 8004f62:	bf00      	nop
 8004f64:	46020c00 	.word	0x46020c00
 8004f68:	0800db60 	.word	0x0800db60
 8004f6c:	20000000 	.word	0x20000000

08004f70 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004f70:	b580      	push	{r7, lr}
 8004f72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]);
 8004f74:	f7ff ffe2 	bl	8004f3c <HAL_RCC_GetHCLKFreq>
 8004f78:	4602      	mov	r2, r0
 8004f7a:	4b05      	ldr	r3, [pc, #20]	@ (8004f90 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004f7c:	6a1b      	ldr	r3, [r3, #32]
 8004f7e:	091b      	lsrs	r3, r3, #4
 8004f80:	f003 0307 	and.w	r3, r3, #7
 8004f84:	4903      	ldr	r1, [pc, #12]	@ (8004f94 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004f86:	5ccb      	ldrb	r3, [r1, r3]
 8004f88:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004f8c:	4618      	mov	r0, r3
 8004f8e:	bd80      	pop	{r7, pc}
 8004f90:	46020c00 	.word	0x46020c00
 8004f94:	0800db70 	.word	0x0800db70

08004f98 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004f98:	b580      	push	{r7, lr}
 8004f9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]);
 8004f9c:	f7ff ffce 	bl	8004f3c <HAL_RCC_GetHCLKFreq>
 8004fa0:	4602      	mov	r2, r0
 8004fa2:	4b05      	ldr	r3, [pc, #20]	@ (8004fb8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004fa4:	6a1b      	ldr	r3, [r3, #32]
 8004fa6:	0a1b      	lsrs	r3, r3, #8
 8004fa8:	f003 0307 	and.w	r3, r3, #7
 8004fac:	4903      	ldr	r1, [pc, #12]	@ (8004fbc <HAL_RCC_GetPCLK2Freq+0x24>)
 8004fae:	5ccb      	ldrb	r3, [r1, r3]
 8004fb0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004fb4:	4618      	mov	r0, r3
 8004fb6:	bd80      	pop	{r7, pc}
 8004fb8:	46020c00 	.word	0x46020c00
 8004fbc:	0800db70 	.word	0x0800db70

08004fc0 <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 8004fc0:	b580      	push	{r7, lr}
 8004fc2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR3 & RCC_CFGR3_PPRE3) >> RCC_CFGR3_PPRE3_Pos]);
 8004fc4:	f7ff ffba 	bl	8004f3c <HAL_RCC_GetHCLKFreq>
 8004fc8:	4602      	mov	r2, r0
 8004fca:	4b05      	ldr	r3, [pc, #20]	@ (8004fe0 <HAL_RCC_GetPCLK3Freq+0x20>)
 8004fcc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fce:	091b      	lsrs	r3, r3, #4
 8004fd0:	f003 0307 	and.w	r3, r3, #7
 8004fd4:	4903      	ldr	r1, [pc, #12]	@ (8004fe4 <HAL_RCC_GetPCLK3Freq+0x24>)
 8004fd6:	5ccb      	ldrb	r3, [r1, r3]
 8004fd8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004fdc:	4618      	mov	r0, r3
 8004fde:	bd80      	pop	{r7, pc}
 8004fe0:	46020c00 	.word	0x46020c00
 8004fe4:	0800db70 	.word	0x0800db70

08004fe8 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *pRCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004fe8:	b480      	push	{r7}
 8004fea:	b083      	sub	sp, #12
 8004fec:	af00      	add	r7, sp, #0
 8004fee:	6078      	str	r0, [r7, #4]
 8004ff0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(pRCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  pRCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | \
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	221f      	movs	r2, #31
 8004ff6:	601a      	str	r2, [r3, #0]
                                  RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_PCLK3;

  /* Get the SYSCLK configuration --------------------------------------------*/
  pRCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR1 & RCC_CFGR1_SW);
 8004ff8:	4b15      	ldr	r3, [pc, #84]	@ (8005050 <HAL_RCC_GetClockConfig+0x68>)
 8004ffa:	69db      	ldr	r3, [r3, #28]
 8004ffc:	f003 0203 	and.w	r2, r3, #3
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR2 & RCC_CFGR2_HPRE);
 8005004:	4b12      	ldr	r3, [pc, #72]	@ (8005050 <HAL_RCC_GetClockConfig+0x68>)
 8005006:	6a1b      	ldr	r3, [r3, #32]
 8005008:	f003 020f 	and.w	r2, r3, #15
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR2 & RCC_CFGR2_PPRE1);
 8005010:	4b0f      	ldr	r3, [pc, #60]	@ (8005050 <HAL_RCC_GetClockConfig+0x68>)
 8005012:	6a1b      	ldr	r3, [r3, #32]
 8005014:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4);
 800501c:	4b0c      	ldr	r3, [pc, #48]	@ (8005050 <HAL_RCC_GetClockConfig+0x68>)
 800501e:	6a1b      	ldr	r3, [r3, #32]
 8005020:	091b      	lsrs	r3, r3, #4
 8005022:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	611a      	str	r2, [r3, #16]

  /* Get the APB3 configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->CFGR3 & RCC_CFGR3_PPRE3);
 800502a:	4b09      	ldr	r3, [pc, #36]	@ (8005050 <HAL_RCC_GetClockConfig+0x68>)
 800502c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800502e:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	615a      	str	r2, [r3, #20]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8005036:	4b07      	ldr	r3, [pc, #28]	@ (8005054 <HAL_RCC_GetClockConfig+0x6c>)
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	f003 020f 	and.w	r2, r3, #15
 800503e:	683b      	ldr	r3, [r7, #0]
 8005040:	601a      	str	r2, [r3, #0]
}
 8005042:	bf00      	nop
 8005044:	370c      	adds	r7, #12
 8005046:	46bd      	mov	sp, r7
 8005048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800504c:	4770      	bx	lr
 800504e:	bf00      	nop
 8005050:	46020c00 	.word	0x46020c00
 8005054:	40022000 	.word	0x40022000

08005058 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8005058:	b580      	push	{r7, lr}
 800505a:	b086      	sub	sp, #24
 800505c:	af00      	add	r7, sp, #0
 800505e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency;  /* default value 0WS */

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005060:	4b3e      	ldr	r3, [pc, #248]	@ (800515c <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8005062:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005066:	f003 0304 	and.w	r3, r3, #4
 800506a:	2b00      	cmp	r3, #0
 800506c:	d003      	beq.n	8005076 <RCC_SetFlashLatencyFromMSIRange+0x1e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800506e:	f7fe fd17 	bl	8003aa0 <HAL_PWREx_GetVoltageRange>
 8005072:	6178      	str	r0, [r7, #20]
 8005074:	e019      	b.n	80050aa <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005076:	4b39      	ldr	r3, [pc, #228]	@ (800515c <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8005078:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800507c:	4a37      	ldr	r2, [pc, #220]	@ (800515c <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800507e:	f043 0304 	orr.w	r3, r3, #4
 8005082:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8005086:	4b35      	ldr	r3, [pc, #212]	@ (800515c <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8005088:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800508c:	f003 0304 	and.w	r3, r3, #4
 8005090:	60fb      	str	r3, [r7, #12]
 8005092:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8005094:	f7fe fd04 	bl	8003aa0 <HAL_PWREx_GetVoltageRange>
 8005098:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800509a:	4b30      	ldr	r3, [pc, #192]	@ (800515c <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800509c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80050a0:	4a2e      	ldr	r2, [pc, #184]	@ (800515c <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80050a2:	f023 0304 	bic.w	r3, r3, #4
 80050a6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 80050aa:	697b      	ldr	r3, [r7, #20]
 80050ac:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80050b0:	d003      	beq.n	80050ba <RCC_SetFlashLatencyFromMSIRange+0x62>
 80050b2:	697b      	ldr	r3, [r7, #20]
 80050b4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80050b8:	d109      	bne.n	80050ce <RCC_SetFlashLatencyFromMSIRange+0x76>
  {

    if (msirange < RCC_MSIRANGE_1)
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80050c0:	d202      	bcs.n	80050c8 <RCC_SetFlashLatencyFromMSIRange+0x70>
    {
      /* MSI = 48Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 80050c2:	2301      	movs	r3, #1
 80050c4:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 80050c6:	e033      	b.n	8005130 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
    else
    {
      /*  MSI < 48Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 80050c8:	2300      	movs	r3, #0
 80050ca:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 80050cc:	e030      	b.n	8005130 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
  }
  else
  {
    if (msirange < RCC_MSIRANGE_1)
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80050d4:	d208      	bcs.n	80050e8 <RCC_SetFlashLatencyFromMSIRange+0x90>
    {
      /* MSI = 48Mhz */
      if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 80050d6:	697b      	ldr	r3, [r7, #20]
 80050d8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80050dc:	d102      	bne.n	80050e4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        latency = FLASH_LATENCY_3; /* 3WS */
 80050de:	2303      	movs	r3, #3
 80050e0:	613b      	str	r3, [r7, #16]
 80050e2:	e025      	b.n	8005130 <RCC_SetFlashLatencyFromMSIRange+0xd8>
      }
      else
      {
        return HAL_ERROR;
 80050e4:	2301      	movs	r3, #1
 80050e6:	e035      	b.n	8005154 <RCC_SetFlashLatencyFromMSIRange+0xfc>
      }
    }
    else
    {
      if (msirange > RCC_MSIRANGE_2)
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80050ee:	d90f      	bls.n	8005110 <RCC_SetFlashLatencyFromMSIRange+0xb8>
      {
        if (vos == PWR_REGULATOR_VOLTAGE_SCALE4)
 80050f0:	697b      	ldr	r3, [r7, #20]
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d109      	bne.n	800510a <RCC_SetFlashLatencyFromMSIRange+0xb2>
        {
          if (msirange > RCC_MSIRANGE_3)
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80050fc:	d902      	bls.n	8005104 <RCC_SetFlashLatencyFromMSIRange+0xac>
          {
            latency = FLASH_LATENCY_0; /* 1WS */
 80050fe:	2300      	movs	r3, #0
 8005100:	613b      	str	r3, [r7, #16]
 8005102:	e015      	b.n	8005130 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_1; /* 0WS */
 8005104:	2301      	movs	r3, #1
 8005106:	613b      	str	r3, [r7, #16]
 8005108:	e012      	b.n	8005130 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_0; /* 0WS */
 800510a:	2300      	movs	r3, #0
 800510c:	613b      	str	r3, [r7, #16]
 800510e:	e00f      	b.n	8005130 <RCC_SetFlashLatencyFromMSIRange+0xd8>
        }
      }
      else
      {
        if (msirange == RCC_MSIRANGE_1)
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005116:	d109      	bne.n	800512c <RCC_SetFlashLatencyFromMSIRange+0xd4>
        {
          if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8005118:	697b      	ldr	r3, [r7, #20]
 800511a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800511e:	d102      	bne.n	8005126 <RCC_SetFlashLatencyFromMSIRange+0xce>
          {
            latency = FLASH_LATENCY_1; /* 1WS */
 8005120:	2301      	movs	r3, #1
 8005122:	613b      	str	r3, [r7, #16]
 8005124:	e004      	b.n	8005130 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_2; /* 2WS */
 8005126:	2302      	movs	r3, #2
 8005128:	613b      	str	r3, [r7, #16]
 800512a:	e001      	b.n	8005130 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_1; /* 1WS */
 800512c:	2301      	movs	r3, #1
 800512e:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005130:	4b0b      	ldr	r3, [pc, #44]	@ (8005160 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	f023 020f 	bic.w	r2, r3, #15
 8005138:	4909      	ldr	r1, [pc, #36]	@ (8005160 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 800513a:	693b      	ldr	r3, [r7, #16]
 800513c:	4313      	orrs	r3, r2
 800513e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
  memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 8005140:	4b07      	ldr	r3, [pc, #28]	@ (8005160 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	f003 030f 	and.w	r3, r3, #15
 8005148:	693a      	ldr	r2, [r7, #16]
 800514a:	429a      	cmp	r2, r3
 800514c:	d001      	beq.n	8005152 <RCC_SetFlashLatencyFromMSIRange+0xfa>
  {
    return HAL_ERROR;
 800514e:	2301      	movs	r3, #1
 8005150:	e000      	b.n	8005154 <RCC_SetFlashLatencyFromMSIRange+0xfc>
  }

  return HAL_OK;
 8005152:	2300      	movs	r3, #0
}
 8005154:	4618      	mov	r0, r3
 8005156:	3718      	adds	r7, #24
 8005158:	46bd      	mov	sp, r7
 800515a:	bd80      	pop	{r7, pc}
 800515c:	46020c00 	.word	0x46020c00
 8005160:	40022000 	.word	0x40022000

08005164 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  *
  *         (*) value not defined in all devices.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 8005164:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005168:	b0b8      	sub	sp, #224	@ 0xe0
 800516a:	af00      	add	r7, sp, #0
 800516c:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005170:	2300      	movs	r3, #0
 8005172:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005176:	2300      	movs	r3, #0
 8005178:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800517c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005180:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005184:	f002 0401 	and.w	r4, r2, #1
 8005188:	2500      	movs	r5, #0
 800518a:	ea54 0305 	orrs.w	r3, r4, r5
 800518e:	d00b      	beq.n	80051a8 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 8005190:	4bca      	ldr	r3, [pc, #808]	@ (80054bc <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8005192:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005196:	f023 0103 	bic.w	r1, r3, #3
 800519a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800519e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80051a0:	4ac6      	ldr	r2, [pc, #792]	@ (80054bc <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80051a2:	430b      	orrs	r3, r1
 80051a4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

#if defined(USART2)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80051a8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80051ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051b0:	f002 0802 	and.w	r8, r2, #2
 80051b4:	f04f 0900 	mov.w	r9, #0
 80051b8:	ea58 0309 	orrs.w	r3, r8, r9
 80051bc:	d00b      	beq.n	80051d6 <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 80051be:	4bbf      	ldr	r3, [pc, #764]	@ (80054bc <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80051c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80051c4:	f023 010c 	bic.w	r1, r3, #12
 80051c8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80051cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80051ce:	4abb      	ldr	r2, [pc, #748]	@ (80054bc <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80051d0:	430b      	orrs	r3, r1
 80051d2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }
#endif /* USART2 */

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80051d6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80051da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051de:	f002 0a04 	and.w	sl, r2, #4
 80051e2:	f04f 0b00 	mov.w	fp, #0
 80051e6:	ea5a 030b 	orrs.w	r3, sl, fp
 80051ea:	d00b      	beq.n	8005204 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 80051ec:	4bb3      	ldr	r3, [pc, #716]	@ (80054bc <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80051ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80051f2:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 80051f6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80051fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80051fc:	4aaf      	ldr	r2, [pc, #700]	@ (80054bc <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80051fe:	430b      	orrs	r3, r1
 8005200:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005204:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005208:	e9d3 2300 	ldrd	r2, r3, [r3]
 800520c:	f002 0308 	and.w	r3, r2, #8
 8005210:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005214:	2300      	movs	r3, #0
 8005216:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800521a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800521e:	460b      	mov	r3, r1
 8005220:	4313      	orrs	r3, r2
 8005222:	d00b      	beq.n	800523c <HAL_RCCEx_PeriphCLKConfig+0xd8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 8005224:	4ba5      	ldr	r3, [pc, #660]	@ (80054bc <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8005226:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800522a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800522e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005232:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005234:	4aa1      	ldr	r2, [pc, #644]	@ (80054bc <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8005236:	430b      	orrs	r3, r1
 8005238:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800523c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005240:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005244:	f002 0310 	and.w	r3, r2, #16
 8005248:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800524c:	2300      	movs	r3, #0
 800524e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8005252:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8005256:	460b      	mov	r3, r1
 8005258:	4313      	orrs	r3, r2
 800525a:	d00b      	beq.n	8005274 <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 800525c:	4b97      	ldr	r3, [pc, #604]	@ (80054bc <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800525e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005262:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005266:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800526a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800526c:	4a93      	ldr	r2, [pc, #588]	@ (80054bc <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800526e:	430b      	orrs	r3, r1
 8005270:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
    __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
  }
#endif /* USART6 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005274:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005278:	e9d3 2300 	ldrd	r2, r3, [r3]
 800527c:	f002 0320 	and.w	r3, r2, #32
 8005280:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005284:	2300      	movs	r3, #0
 8005286:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800528a:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800528e:	460b      	mov	r3, r1
 8005290:	4313      	orrs	r3, r2
 8005292:	d00b      	beq.n	80052ac <HAL_RCCEx_PeriphCLKConfig+0x148>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 8005294:	4b89      	ldr	r3, [pc, #548]	@ (80054bc <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8005296:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800529a:	f023 0107 	bic.w	r1, r3, #7
 800529e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80052a2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80052a4:	4a85      	ldr	r2, [pc, #532]	@ (80054bc <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80052a6:	430b      	orrs	r3, r1
 80052a8:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80052ac:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80052b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052b4:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 80052b8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80052bc:	2300      	movs	r3, #0
 80052be:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80052c2:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80052c6:	460b      	mov	r3, r1
 80052c8:	4313      	orrs	r3, r2
 80052ca:	d00b      	beq.n	80052e4 <HAL_RCCEx_PeriphCLKConfig+0x180>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 80052cc:	4b7b      	ldr	r3, [pc, #492]	@ (80054bc <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80052ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80052d2:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 80052d6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80052da:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80052dc:	4a77      	ldr	r2, [pc, #476]	@ (80054bc <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80052de:	430b      	orrs	r3, r1
 80052e0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80052e4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80052e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052ec:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 80052f0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80052f4:	2300      	movs	r3, #0
 80052f6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80052fa:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 80052fe:	460b      	mov	r3, r1
 8005300:	4313      	orrs	r3, r2
 8005302:	d00b      	beq.n	800531c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 8005304:	4b6d      	ldr	r3, [pc, #436]	@ (80054bc <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8005306:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800530a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800530e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005312:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005314:	4a69      	ldr	r2, [pc, #420]	@ (80054bc <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8005316:	430b      	orrs	r3, r1
 8005318:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800531c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005320:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005324:	f402 7380 	and.w	r3, r2, #256	@ 0x100
 8005328:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800532c:	2300      	movs	r3, #0
 800532e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005332:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8005336:	460b      	mov	r3, r1
 8005338:	4313      	orrs	r3, r2
 800533a:	d00b      	beq.n	8005354 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 800533c:	4b5f      	ldr	r3, [pc, #380]	@ (80054bc <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800533e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005342:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8005346:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800534a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800534c:	4a5b      	ldr	r2, [pc, #364]	@ (80054bc <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800534e:	430b      	orrs	r3, r1
 8005350:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005354:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005358:	e9d3 2300 	ldrd	r2, r3, [r3]
 800535c:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8005360:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005364:	2300      	movs	r3, #0
 8005366:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800536a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800536e:	460b      	mov	r3, r1
 8005370:	4313      	orrs	r3, r2
 8005372:	d00b      	beq.n	800538c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 8005374:	4b51      	ldr	r3, [pc, #324]	@ (80054bc <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8005376:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800537a:	f423 4140 	bic.w	r1, r3, #49152	@ 0xc000
 800537e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005382:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005384:	4a4d      	ldr	r2, [pc, #308]	@ (80054bc <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8005386:	430b      	orrs	r3, r1
 8005388:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
    __HAL_RCC_I2C6_CONFIG(pPeriphClkInit->I2c6ClockSelection);
  }
#endif /* I2C6 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800538c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005390:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005394:	f402 7300 	and.w	r3, r2, #512	@ 0x200
 8005398:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800539c:	2300      	movs	r3, #0
 800539e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80053a2:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 80053a6:	460b      	mov	r3, r1
 80053a8:	4313      	orrs	r3, r2
 80053aa:	d00b      	beq.n	80053c4 <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 80053ac:	4b43      	ldr	r3, [pc, #268]	@ (80054bc <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80053ae:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80053b2:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 80053b6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80053ba:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80053bc:	4a3f      	ldr	r2, [pc, #252]	@ (80054bc <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80053be:	430b      	orrs	r3, r1
 80053c0:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80053c4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80053c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053cc:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 80053d0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80053d4:	2300      	movs	r3, #0
 80053d6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80053da:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 80053de:	460b      	mov	r3, r1
 80053e0:	4313      	orrs	r3, r2
 80053e2:	d00b      	beq.n	80053fc <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 80053e4:	4b35      	ldr	r3, [pc, #212]	@ (80054bc <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80053e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80053ea:	f423 2140 	bic.w	r1, r3, #786432	@ 0xc0000
 80053ee:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80053f2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80053f4:	4a31      	ldr	r2, [pc, #196]	@ (80054bc <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80053f6:	430b      	orrs	r3, r1
 80053f8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- LPTIM34 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM34) == (RCC_PERIPHCLK_LPTIM34))
 80053fc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005400:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005404:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8005408:	67bb      	str	r3, [r7, #120]	@ 0x78
 800540a:	2300      	movs	r3, #0
 800540c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800540e:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8005412:	460b      	mov	r3, r1
 8005414:	4313      	orrs	r3, r2
 8005416:	d00c      	beq.n	8005432 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    assert_param(IS_RCC_LPTIM34CLK(pPeriphClkInit->Lptim34ClockSelection));
    __HAL_RCC_LPTIM34_CONFIG(pPeriphClkInit->Lptim34ClockSelection);
 8005418:	4b28      	ldr	r3, [pc, #160]	@ (80054bc <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800541a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800541e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005422:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005426:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800542a:	4a24      	ldr	r2, [pc, #144]	@ (80054bc <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800542c:	430b      	orrs	r3, r1
 800542e:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005432:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005436:	e9d3 2300 	ldrd	r2, r3, [r3]
 800543a:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800543e:	673b      	str	r3, [r7, #112]	@ 0x70
 8005440:	2300      	movs	r3, #0
 8005442:	677b      	str	r3, [r7, #116]	@ 0x74
 8005444:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8005448:	460b      	mov	r3, r1
 800544a:	4313      	orrs	r3, r2
 800544c:	d04f      	beq.n	80054ee <HAL_RCCEx_PeriphCLKConfig+0x38a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 800544e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005452:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005456:	2b80      	cmp	r3, #128	@ 0x80
 8005458:	d02d      	beq.n	80054b6 <HAL_RCCEx_PeriphCLKConfig+0x352>
 800545a:	2b80      	cmp	r3, #128	@ 0x80
 800545c:	d827      	bhi.n	80054ae <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800545e:	2b60      	cmp	r3, #96	@ 0x60
 8005460:	d02e      	beq.n	80054c0 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8005462:	2b60      	cmp	r3, #96	@ 0x60
 8005464:	d823      	bhi.n	80054ae <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8005466:	2b40      	cmp	r3, #64	@ 0x40
 8005468:	d006      	beq.n	8005478 <HAL_RCCEx_PeriphCLKConfig+0x314>
 800546a:	2b40      	cmp	r3, #64	@ 0x40
 800546c:	d81f      	bhi.n	80054ae <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800546e:	2b00      	cmp	r3, #0
 8005470:	d009      	beq.n	8005486 <HAL_RCCEx_PeriphCLKConfig+0x322>
 8005472:	2b20      	cmp	r3, #32
 8005474:	d011      	beq.n	800549a <HAL_RCCEx_PeriphCLKConfig+0x336>
 8005476:	e01a      	b.n	80054ae <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      case RCC_SAI1CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005478:	4b10      	ldr	r3, [pc, #64]	@ (80054bc <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800547a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800547c:	4a0f      	ldr	r2, [pc, #60]	@ (80054bc <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800547e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005482:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 8005484:	e01d      	b.n	80054c2 <HAL_RCCEx_PeriphCLKConfig+0x35e>

      case RCC_SAI1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005486:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800548a:	3308      	adds	r3, #8
 800548c:	4618      	mov	r0, r3
 800548e:	f002 f9d1 	bl	8007834 <RCCEx_PLL2_Config>
 8005492:	4603      	mov	r3, r0
 8005494:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        /* SAI1 clock source config set later after clock selection check */
        break;
 8005498:	e013      	b.n	80054c2 <HAL_RCCEx_PeriphCLKConfig+0x35e>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800549a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800549e:	332c      	adds	r3, #44	@ 0x2c
 80054a0:	4618      	mov	r0, r3
 80054a2:	f002 fa5f 	bl	8007964 <RCCEx_PLL3_Config>
 80054a6:	4603      	mov	r3, r0
 80054a8:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        /* SAI1 clock source config set later after clock selection check */
        break;
 80054ac:	e009      	b.n	80054c2 <HAL_RCCEx_PeriphCLKConfig+0x35e>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80054ae:	2301      	movs	r3, #1
 80054b0:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 80054b4:	e005      	b.n	80054c2 <HAL_RCCEx_PeriphCLKConfig+0x35e>
        break;
 80054b6:	bf00      	nop
 80054b8:	e003      	b.n	80054c2 <HAL_RCCEx_PeriphCLKConfig+0x35e>
 80054ba:	bf00      	nop
 80054bc:	46020c00 	.word	0x46020c00
        break;
 80054c0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80054c2:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d10d      	bne.n	80054e6 <HAL_RCCEx_PeriphCLKConfig+0x382>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 80054ca:	4bb6      	ldr	r3, [pc, #728]	@ (80057a4 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 80054cc:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80054d0:	f023 01e0 	bic.w	r1, r3, #224	@ 0xe0
 80054d4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80054d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80054dc:	4ab1      	ldr	r2, [pc, #708]	@ (80057a4 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 80054de:	430b      	orrs	r3, r1
 80054e0:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 80054e4:	e003      	b.n	80054ee <HAL_RCCEx_PeriphCLKConfig+0x38a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80054e6:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 80054ea:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }

#if defined(SAI2)
  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80054ee:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80054f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054f6:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 80054fa:	66bb      	str	r3, [r7, #104]	@ 0x68
 80054fc:	2300      	movs	r3, #0
 80054fe:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005500:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8005504:	460b      	mov	r3, r1
 8005506:	4313      	orrs	r3, r2
 8005508:	d053      	beq.n	80055b2 <HAL_RCCEx_PeriphCLKConfig+0x44e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 800550a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800550e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005512:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005516:	d033      	beq.n	8005580 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8005518:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800551c:	d82c      	bhi.n	8005578 <HAL_RCCEx_PeriphCLKConfig+0x414>
 800551e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005522:	d02f      	beq.n	8005584 <HAL_RCCEx_PeriphCLKConfig+0x420>
 8005524:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005528:	d826      	bhi.n	8005578 <HAL_RCCEx_PeriphCLKConfig+0x414>
 800552a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800552e:	d008      	beq.n	8005542 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8005530:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005534:	d820      	bhi.n	8005578 <HAL_RCCEx_PeriphCLKConfig+0x414>
 8005536:	2b00      	cmp	r3, #0
 8005538:	d00a      	beq.n	8005550 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 800553a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800553e:	d011      	beq.n	8005564 <HAL_RCCEx_PeriphCLKConfig+0x400>
 8005540:	e01a      	b.n	8005578 <HAL_RCCEx_PeriphCLKConfig+0x414>
    {
      case RCC_SAI2CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005542:	4b98      	ldr	r3, [pc, #608]	@ (80057a4 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8005544:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005546:	4a97      	ldr	r2, [pc, #604]	@ (80057a4 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8005548:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800554c:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 800554e:	e01a      	b.n	8005586 <HAL_RCCEx_PeriphCLKConfig+0x422>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005550:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005554:	3308      	adds	r3, #8
 8005556:	4618      	mov	r0, r3
 8005558:	f002 f96c 	bl	8007834 <RCCEx_PLL2_Config>
 800555c:	4603      	mov	r3, r0
 800555e:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        /* SAI2 clock source config set later after clock selection check */
        break;
 8005562:	e010      	b.n	8005586 <HAL_RCCEx_PeriphCLKConfig+0x422>

      case RCC_SAI2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005564:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005568:	332c      	adds	r3, #44	@ 0x2c
 800556a:	4618      	mov	r0, r3
 800556c:	f002 f9fa 	bl	8007964 <RCCEx_PLL3_Config>
 8005570:	4603      	mov	r3, r0
 8005572:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        /* SAI2 clock source config set later after clock selection check */
        break;
 8005576:	e006      	b.n	8005586 <HAL_RCCEx_PeriphCLKConfig+0x422>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005578:	2301      	movs	r3, #1
 800557a:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 800557e:	e002      	b.n	8005586 <HAL_RCCEx_PeriphCLKConfig+0x422>
        break;
 8005580:	bf00      	nop
 8005582:	e000      	b.n	8005586 <HAL_RCCEx_PeriphCLKConfig+0x422>
        break;
 8005584:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005586:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 800558a:	2b00      	cmp	r3, #0
 800558c:	d10d      	bne.n	80055aa <HAL_RCCEx_PeriphCLKConfig+0x446>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 800558e:	4b85      	ldr	r3, [pc, #532]	@ (80057a4 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8005590:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005594:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 8005598:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800559c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80055a0:	4a80      	ldr	r2, [pc, #512]	@ (80057a4 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 80055a2:	430b      	orrs	r3, r1
 80055a4:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 80055a8:	e003      	b.n	80055b2 <HAL_RCCEx_PeriphCLKConfig+0x44e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80055aa:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 80055ae:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }
#endif /* SAI2 */

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 80055b2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80055b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055ba:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 80055be:	663b      	str	r3, [r7, #96]	@ 0x60
 80055c0:	2300      	movs	r3, #0
 80055c2:	667b      	str	r3, [r7, #100]	@ 0x64
 80055c4:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 80055c8:	460b      	mov	r3, r1
 80055ca:	4313      	orrs	r3, r2
 80055cc:	d046      	beq.n	800565c <HAL_RCCEx_PeriphCLKConfig+0x4f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 80055ce:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80055d2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80055d6:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 80055da:	d028      	beq.n	800562e <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 80055dc:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 80055e0:	d821      	bhi.n	8005626 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 80055e2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80055e6:	d022      	beq.n	800562e <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 80055e8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80055ec:	d81b      	bhi.n	8005626 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 80055ee:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80055f2:	d01c      	beq.n	800562e <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 80055f4:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80055f8:	d815      	bhi.n	8005626 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 80055fa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80055fe:	d008      	beq.n	8005612 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 8005600:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005604:	d80f      	bhi.n	8005626 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 8005606:	2b00      	cmp	r3, #0
 8005608:	d011      	beq.n	800562e <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 800560a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800560e:	d00e      	beq.n	800562e <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8005610:	e009      	b.n	8005626 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
    {
      case RCC_ADCDACCLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P, & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005612:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005616:	3308      	adds	r3, #8
 8005618:	4618      	mov	r0, r3
 800561a:	f002 f90b 	bl	8007834 <RCCEx_PLL2_Config>
 800561e:	4603      	mov	r3, r0
 8005620:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8005624:	e004      	b.n	8005630 <HAL_RCCEx_PeriphCLKConfig+0x4cc>
      case RCC_ADCDACCLKSOURCE_HSE:
      case RCC_ADCDACCLKSOURCE_HSI:
      case RCC_ADCDACCLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8005626:	2301      	movs	r3, #1
 8005628:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 800562c:	e000      	b.n	8005630 <HAL_RCCEx_PeriphCLKConfig+0x4cc>
        break;
 800562e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005630:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8005634:	2b00      	cmp	r3, #0
 8005636:	d10d      	bne.n	8005654 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Configure the ADC1 interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 8005638:	4b5a      	ldr	r3, [pc, #360]	@ (80057a4 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 800563a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800563e:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8005642:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005646:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800564a:	4a56      	ldr	r2, [pc, #344]	@ (80057a4 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 800564c:	430b      	orrs	r3, r1
 800564e:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8005652:	e003      	b.n	800565c <HAL_RCCEx_PeriphCLKConfig+0x4f8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005654:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8005658:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }

  /*-------------------------- MDF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_MDF1) == RCC_PERIPHCLK_MDF1)
 800565c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005660:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005664:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8005668:	65bb      	str	r3, [r7, #88]	@ 0x58
 800566a:	2300      	movs	r3, #0
 800566c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800566e:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8005672:	460b      	mov	r3, r1
 8005674:	4313      	orrs	r3, r2
 8005676:	d03f      	beq.n	80056f8 <HAL_RCCEx_PeriphCLKConfig+0x594>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MDF1CLKSOURCE(pPeriphClkInit->Mdf1ClockSelection));

    switch (pPeriphClkInit->Mdf1ClockSelection)
 8005678:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800567c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005680:	2b04      	cmp	r3, #4
 8005682:	d81e      	bhi.n	80056c2 <HAL_RCCEx_PeriphCLKConfig+0x55e>
 8005684:	a201      	add	r2, pc, #4	@ (adr r2, 800568c <HAL_RCCEx_PeriphCLKConfig+0x528>)
 8005686:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800568a:	bf00      	nop
 800568c:	080056cb 	.word	0x080056cb
 8005690:	080056a1 	.word	0x080056a1
 8005694:	080056af 	.word	0x080056af
 8005698:	080056cb 	.word	0x080056cb
 800569c:	080056cb 	.word	0x080056cb
    {
      case RCC_MDF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80056a0:	4b40      	ldr	r3, [pc, #256]	@ (80057a4 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 80056a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056a4:	4a3f      	ldr	r2, [pc, #252]	@ (80057a4 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 80056a6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80056aa:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 80056ac:	e00e      	b.n	80056cc <HAL_RCCEx_PeriphCLKConfig+0x568>
      case RCC_MDF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80056ae:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80056b2:	332c      	adds	r3, #44	@ 0x2c
 80056b4:	4618      	mov	r0, r3
 80056b6:	f002 f955 	bl	8007964 <RCCEx_PLL3_Config>
 80056ba:	4603      	mov	r3, r0
 80056bc:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 80056c0:	e004      	b.n	80056cc <HAL_RCCEx_PeriphCLKConfig+0x568>
      case RCC_MDF1CLKSOURCE_PIN:
        break;
      case RCC_MDF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 80056c2:	2301      	movs	r3, #1
 80056c4:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 80056c8:	e000      	b.n	80056cc <HAL_RCCEx_PeriphCLKConfig+0x568>
        break;
 80056ca:	bf00      	nop
    }
    if (ret == HAL_OK)
 80056cc:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d10d      	bne.n	80056f0 <HAL_RCCEx_PeriphCLKConfig+0x58c>
    {
      /* Configure the MDF1 interface clock source */
      __HAL_RCC_MDF1_CONFIG(pPeriphClkInit->Mdf1ClockSelection);
 80056d4:	4b33      	ldr	r3, [pc, #204]	@ (80057a4 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 80056d6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80056da:	f023 0107 	bic.w	r1, r3, #7
 80056de:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80056e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80056e6:	4a2f      	ldr	r2, [pc, #188]	@ (80057a4 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 80056e8:	430b      	orrs	r3, r1
 80056ea:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 80056ee:	e003      	b.n	80056f8 <HAL_RCCEx_PeriphCLKConfig+0x594>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80056f0:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 80056f4:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }

  /*-------------------------- ADF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
 80056f8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80056fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005700:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8005704:	653b      	str	r3, [r7, #80]	@ 0x50
 8005706:	2300      	movs	r3, #0
 8005708:	657b      	str	r3, [r7, #84]	@ 0x54
 800570a:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800570e:	460b      	mov	r3, r1
 8005710:	4313      	orrs	r3, r2
 8005712:	d04d      	beq.n	80057b0 <HAL_RCCEx_PeriphCLKConfig+0x64c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADF1CLKSOURCE(pPeriphClkInit->Adf1ClockSelection));
    switch (pPeriphClkInit->Adf1ClockSelection)
 8005714:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005718:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800571c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005720:	d028      	beq.n	8005774 <HAL_RCCEx_PeriphCLKConfig+0x610>
 8005722:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005726:	d821      	bhi.n	800576c <HAL_RCCEx_PeriphCLKConfig+0x608>
 8005728:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800572c:	d024      	beq.n	8005778 <HAL_RCCEx_PeriphCLKConfig+0x614>
 800572e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005732:	d81b      	bhi.n	800576c <HAL_RCCEx_PeriphCLKConfig+0x608>
 8005734:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005738:	d00e      	beq.n	8005758 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
 800573a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800573e:	d815      	bhi.n	800576c <HAL_RCCEx_PeriphCLKConfig+0x608>
 8005740:	2b00      	cmp	r3, #0
 8005742:	d01b      	beq.n	800577c <HAL_RCCEx_PeriphCLKConfig+0x618>
 8005744:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005748:	d110      	bne.n	800576c <HAL_RCCEx_PeriphCLKConfig+0x608>
    {
      case RCC_ADF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800574a:	4b16      	ldr	r3, [pc, #88]	@ (80057a4 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 800574c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800574e:	4a15      	ldr	r2, [pc, #84]	@ (80057a4 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8005750:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005754:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 8005756:	e012      	b.n	800577e <HAL_RCCEx_PeriphCLKConfig+0x61a>
      case RCC_ADF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005758:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800575c:	332c      	adds	r3, #44	@ 0x2c
 800575e:	4618      	mov	r0, r3
 8005760:	f002 f900 	bl	8007964 <RCCEx_PLL3_Config>
 8005764:	4603      	mov	r3, r0
 8005766:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 800576a:	e008      	b.n	800577e <HAL_RCCEx_PeriphCLKConfig+0x61a>
      case RCC_ADF1CLKSOURCE_PIN:
        break;
      case RCC_ADF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 800576c:	2301      	movs	r3, #1
 800576e:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8005772:	e004      	b.n	800577e <HAL_RCCEx_PeriphCLKConfig+0x61a>
        break;
 8005774:	bf00      	nop
 8005776:	e002      	b.n	800577e <HAL_RCCEx_PeriphCLKConfig+0x61a>
        break;
 8005778:	bf00      	nop
 800577a:	e000      	b.n	800577e <HAL_RCCEx_PeriphCLKConfig+0x61a>
        break;
 800577c:	bf00      	nop
    }
    if (ret == HAL_OK)
 800577e:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8005782:	2b00      	cmp	r3, #0
 8005784:	d110      	bne.n	80057a8 <HAL_RCCEx_PeriphCLKConfig+0x644>
    {
      /* Configure the ADF1 interface clock source */
      __HAL_RCC_ADF1_CONFIG(pPeriphClkInit->Adf1ClockSelection);
 8005786:	4b07      	ldr	r3, [pc, #28]	@ (80057a4 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8005788:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800578c:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8005790:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005794:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005798:	4a02      	ldr	r2, [pc, #8]	@ (80057a4 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 800579a:	430b      	orrs	r3, r1
 800579c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80057a0:	e006      	b.n	80057b0 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 80057a2:	bf00      	nop
 80057a4:	46020c00 	.word	0x46020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 80057a8:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 80057ac:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((pPeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80057b0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80057b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057b8:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 80057bc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80057be:	2300      	movs	r3, #0
 80057c0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80057c2:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 80057c6:	460b      	mov	r3, r1
 80057c8:	4313      	orrs	r3, r2
 80057ca:	f000 80b5 	beq.w	8005938 <HAL_RCCEx_PeriphCLKConfig+0x7d4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80057ce:	2300      	movs	r3, #0
 80057d0:	f887 30d9 	strb.w	r3, [r7, #217]	@ 0xd9
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));
    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80057d4:	4b9d      	ldr	r3, [pc, #628]	@ (8005a4c <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80057d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80057da:	f003 0304 	and.w	r3, r3, #4
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d113      	bne.n	800580a <HAL_RCCEx_PeriphCLKConfig+0x6a6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80057e2:	4b9a      	ldr	r3, [pc, #616]	@ (8005a4c <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80057e4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80057e8:	4a98      	ldr	r2, [pc, #608]	@ (8005a4c <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80057ea:	f043 0304 	orr.w	r3, r3, #4
 80057ee:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80057f2:	4b96      	ldr	r3, [pc, #600]	@ (8005a4c <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80057f4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80057f8:	f003 0304 	and.w	r3, r3, #4
 80057fc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005800:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
      pwrclkchanged = SET;
 8005804:	2301      	movs	r3, #1
 8005806:	f887 30d9 	strb.w	r3, [r7, #217]	@ 0xd9
    }
    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 800580a:	4b91      	ldr	r3, [pc, #580]	@ (8005a50 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800580c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800580e:	4a90      	ldr	r2, [pc, #576]	@ (8005a50 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005810:	f043 0301 	orr.w	r3, r3, #1
 8005814:	6293      	str	r3, [r2, #40]	@ 0x28

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005816:	f7fc ff8b 	bl	8002730 <HAL_GetTick>
 800581a:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4

    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800581e:	e00b      	b.n	8005838 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005820:	f7fc ff86 	bl	8002730 <HAL_GetTick>
 8005824:	4602      	mov	r2, r0
 8005826:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800582a:	1ad3      	subs	r3, r2, r3
 800582c:	2b02      	cmp	r3, #2
 800582e:	d903      	bls.n	8005838 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
      {
        ret = HAL_TIMEOUT;
 8005830:	2303      	movs	r3, #3
 8005832:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8005836:	e005      	b.n	8005844 <HAL_RCCEx_PeriphCLKConfig+0x6e0>
    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8005838:	4b85      	ldr	r3, [pc, #532]	@ (8005a50 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800583a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800583c:	f003 0301 	and.w	r3, r3, #1
 8005840:	2b00      	cmp	r3, #0
 8005842:	d0ed      	beq.n	8005820 <HAL_RCCEx_PeriphCLKConfig+0x6bc>
      }
    }

    if (ret == HAL_OK)
 8005844:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8005848:	2b00      	cmp	r3, #0
 800584a:	d165      	bne.n	8005918 <HAL_RCCEx_PeriphCLKConfig+0x7b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800584c:	4b7f      	ldr	r3, [pc, #508]	@ (8005a4c <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 800584e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005852:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005856:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 800585a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800585e:	2b00      	cmp	r3, #0
 8005860:	d023      	beq.n	80058aa <HAL_RCCEx_PeriphCLKConfig+0x746>
 8005862:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005866:	f8d3 20bc 	ldr.w	r2, [r3, #188]	@ 0xbc
 800586a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800586e:	4293      	cmp	r3, r2
 8005870:	d01b      	beq.n	80058aa <HAL_RCCEx_PeriphCLKConfig+0x746>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005872:	4b76      	ldr	r3, [pc, #472]	@ (8005a4c <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8005874:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005878:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800587c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005880:	4b72      	ldr	r3, [pc, #456]	@ (8005a4c <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8005882:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005886:	4a71      	ldr	r2, [pc, #452]	@ (8005a4c <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8005888:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800588c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005890:	4b6e      	ldr	r3, [pc, #440]	@ (8005a4c <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8005892:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005896:	4a6d      	ldr	r2, [pc, #436]	@ (8005a4c <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8005898:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800589c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80058a0:	4a6a      	ldr	r2, [pc, #424]	@ (8005a4c <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80058a2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80058a6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80058aa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80058ae:	f003 0301 	and.w	r3, r3, #1
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d019      	beq.n	80058ea <HAL_RCCEx_PeriphCLKConfig+0x786>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058b6:	f7fc ff3b 	bl	8002730 <HAL_GetTick>
 80058ba:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80058be:	e00d      	b.n	80058dc <HAL_RCCEx_PeriphCLKConfig+0x778>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80058c0:	f7fc ff36 	bl	8002730 <HAL_GetTick>
 80058c4:	4602      	mov	r2, r0
 80058c6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80058ca:	1ad2      	subs	r2, r2, r3
 80058cc:	f241 3388 	movw	r3, #5000	@ 0x1388
 80058d0:	429a      	cmp	r2, r3
 80058d2:	d903      	bls.n	80058dc <HAL_RCCEx_PeriphCLKConfig+0x778>
          {
            ret = HAL_TIMEOUT;
 80058d4:	2303      	movs	r3, #3
 80058d6:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
            break;
 80058da:	e006      	b.n	80058ea <HAL_RCCEx_PeriphCLKConfig+0x786>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80058dc:	4b5b      	ldr	r3, [pc, #364]	@ (8005a4c <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80058de:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80058e2:	f003 0302 	and.w	r3, r3, #2
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d0ea      	beq.n	80058c0 <HAL_RCCEx_PeriphCLKConfig+0x75c>
          }
        }
      }

      if (ret == HAL_OK)
 80058ea:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d10d      	bne.n	800590e <HAL_RCCEx_PeriphCLKConfig+0x7aa>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 80058f2:	4b56      	ldr	r3, [pc, #344]	@ (8005a4c <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80058f4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80058f8:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80058fc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005900:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8005904:	4a51      	ldr	r2, [pc, #324]	@ (8005a4c <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8005906:	430b      	orrs	r3, r1
 8005908:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800590c:	e008      	b.n	8005920 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800590e:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8005912:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
 8005916:	e003      	b.n	8005920 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005918:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 800591c:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005920:	f897 30d9 	ldrb.w	r3, [r7, #217]	@ 0xd9
 8005924:	2b01      	cmp	r3, #1
 8005926:	d107      	bne.n	8005938 <HAL_RCCEx_PeriphCLKConfig+0x7d4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005928:	4b48      	ldr	r3, [pc, #288]	@ (8005a4c <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 800592a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800592e:	4a47      	ldr	r2, [pc, #284]	@ (8005a4c <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8005930:	f023 0304 	bic.w	r3, r3, #4
 8005934:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }

  /*-------------------------------------- ICLK Configuration -----------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ICLK) == RCC_PERIPHCLK_ICLK)
 8005938:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800593c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005940:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8005944:	643b      	str	r3, [r7, #64]	@ 0x40
 8005946:	2300      	movs	r3, #0
 8005948:	647b      	str	r3, [r7, #68]	@ 0x44
 800594a:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800594e:	460b      	mov	r3, r1
 8005950:	4313      	orrs	r3, r2
 8005952:	d042      	beq.n	80059da <HAL_RCCEx_PeriphCLKConfig+0x876>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ICLKCLKSOURCE(pPeriphClkInit->IclkClockSelection));

    switch (pPeriphClkInit->IclkClockSelection)
 8005954:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005958:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800595c:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8005960:	d022      	beq.n	80059a8 <HAL_RCCEx_PeriphCLKConfig+0x844>
 8005962:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8005966:	d81b      	bhi.n	80059a0 <HAL_RCCEx_PeriphCLKConfig+0x83c>
 8005968:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800596c:	d011      	beq.n	8005992 <HAL_RCCEx_PeriphCLKConfig+0x82e>
 800596e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005972:	d815      	bhi.n	80059a0 <HAL_RCCEx_PeriphCLKConfig+0x83c>
 8005974:	2b00      	cmp	r3, #0
 8005976:	d019      	beq.n	80059ac <HAL_RCCEx_PeriphCLKConfig+0x848>
 8005978:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800597c:	d110      	bne.n	80059a0 <HAL_RCCEx_PeriphCLKConfig+0x83c>
    {
      case RCC_ICLK_CLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P,Q & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800597e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005982:	3308      	adds	r3, #8
 8005984:	4618      	mov	r0, r3
 8005986:	f001 ff55 	bl	8007834 <RCCEx_PLL2_Config>
 800598a:	4603      	mov	r3, r0
 800598c:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8005990:	e00d      	b.n	80059ae <HAL_RCCEx_PeriphCLKConfig+0x84a>
      case RCC_ICLK_CLKSOURCE_PLL1:
        /* Enable ICLK Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005992:	4b2e      	ldr	r3, [pc, #184]	@ (8005a4c <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8005994:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005996:	4a2d      	ldr	r2, [pc, #180]	@ (8005a4c <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8005998:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800599c:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 800599e:	e006      	b.n	80059ae <HAL_RCCEx_PeriphCLKConfig+0x84a>
      case RCC_ICLK_CLKSOURCE_HSI48:
        break;
      case RCC_ICLK_CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 80059a0:	2301      	movs	r3, #1
 80059a2:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 80059a6:	e002      	b.n	80059ae <HAL_RCCEx_PeriphCLKConfig+0x84a>
        break;
 80059a8:	bf00      	nop
 80059aa:	e000      	b.n	80059ae <HAL_RCCEx_PeriphCLKConfig+0x84a>
        break;
 80059ac:	bf00      	nop
    }
    if (ret == HAL_OK)
 80059ae:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d10d      	bne.n	80059d2 <HAL_RCCEx_PeriphCLKConfig+0x86e>
    {
      /* Configure the CLK48 source */
      __HAL_RCC_CLK48_CONFIG(pPeriphClkInit->IclkClockSelection);
 80059b6:	4b25      	ldr	r3, [pc, #148]	@ (8005a4c <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80059b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80059bc:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 80059c0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80059c4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80059c8:	4a20      	ldr	r2, [pc, #128]	@ (8005a4c <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80059ca:	430b      	orrs	r3, r1
 80059cc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80059d0:	e003      	b.n	80059da <HAL_RCCEx_PeriphCLKConfig+0x876>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80059d2:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 80059d6:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80059da:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80059de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059e2:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 80059e6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80059e8:	2300      	movs	r3, #0
 80059ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80059ec:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 80059f0:	460b      	mov	r3, r1
 80059f2:	4313      	orrs	r3, r2
 80059f4:	d032      	beq.n	8005a5c <HAL_RCCEx_PeriphCLKConfig+0x8f8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 80059f6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80059fa:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80059fe:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005a02:	d00b      	beq.n	8005a1c <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 8005a04:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005a08:	d804      	bhi.n	8005a14 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d008      	beq.n	8005a20 <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 8005a0e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005a12:	d007      	beq.n	8005a24 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      case RCC_RNGCLKSOURCE_HSI48:
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;
      default:
        ret = HAL_ERROR;
 8005a14:	2301      	movs	r3, #1
 8005a16:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8005a1a:	e004      	b.n	8005a26 <HAL_RCCEx_PeriphCLKConfig+0x8c2>
        break;
 8005a1c:	bf00      	nop
 8005a1e:	e002      	b.n	8005a26 <HAL_RCCEx_PeriphCLKConfig+0x8c2>
        break;
 8005a20:	bf00      	nop
 8005a22:	e000      	b.n	8005a26 <HAL_RCCEx_PeriphCLKConfig+0x8c2>
        break;
 8005a24:	bf00      	nop
    }
    if (ret == HAL_OK)
 8005a26:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d112      	bne.n	8005a54 <HAL_RCCEx_PeriphCLKConfig+0x8f0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 8005a2e:	4b07      	ldr	r3, [pc, #28]	@ (8005a4c <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8005a30:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005a34:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005a38:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005a3c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005a40:	4a02      	ldr	r2, [pc, #8]	@ (8005a4c <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8005a42:	430b      	orrs	r3, r1
 8005a44:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8005a48:	e008      	b.n	8005a5c <HAL_RCCEx_PeriphCLKConfig+0x8f8>
 8005a4a:	bf00      	nop
 8005a4c:	46020c00 	.word	0x46020c00
 8005a50:	46020800 	.word	0x46020800
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a54:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8005a58:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    __HAL_RCC_SAES_CONFIG(pPeriphClkInit->SaesClockSelection);
  }
#endif /* SAES */

  /*-------------------------- SDMMC1/2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == (RCC_PERIPHCLK_SDMMC))
 8005a5c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005a60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a64:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8005a68:	633b      	str	r3, [r7, #48]	@ 0x30
 8005a6a:	2300      	movs	r3, #0
 8005a6c:	637b      	str	r3, [r7, #52]	@ 0x34
 8005a6e:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8005a72:	460b      	mov	r3, r1
 8005a74:	4313      	orrs	r3, r2
 8005a76:	d019      	beq.n	8005aac <HAL_RCCEx_PeriphCLKConfig+0x948>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMCCLKSOURCE(pPeriphClkInit->SdmmcClockSelection));

    if (pPeriphClkInit->SdmmcClockSelection == RCC_SDMMCCLKSOURCE_PLL1)
 8005a78:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005a7c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8005a80:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005a84:	d105      	bne.n	8005a92 <HAL_RCCEx_PeriphCLKConfig+0x92e>
    {
      /* Enable PLL1 P CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005a86:	4b88      	ldr	r3, [pc, #544]	@ (8005ca8 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8005a88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a8a:	4a87      	ldr	r2, [pc, #540]	@ (8005ca8 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8005a8c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005a90:	6293      	str	r3, [r2, #40]	@ 0x28
    }

    /* Configure the SDMMC1/2 clock source */
    __HAL_RCC_SDMMC_CONFIG(pPeriphClkInit->SdmmcClockSelection);
 8005a92:	4b85      	ldr	r3, [pc, #532]	@ (8005ca8 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8005a94:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005a98:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8005a9c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005aa0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8005aa4:	4a80      	ldr	r2, [pc, #512]	@ (8005ca8 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8005aa6:	430b      	orrs	r3, r1
 8005aa8:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 8005aac:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005ab0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ab4:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8005ab8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005aba:	2300      	movs	r3, #0
 8005abc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005abe:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8005ac2:	460b      	mov	r3, r1
 8005ac4:	4313      	orrs	r3, r2
 8005ac6:	d00c      	beq.n	8005ae2 <HAL_RCCEx_PeriphCLKConfig+0x97e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    /* Configure the SPI1 clock source */
    __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 8005ac8:	4b77      	ldr	r3, [pc, #476]	@ (8005ca8 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8005aca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005ace:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005ad2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005ad6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005ada:	4973      	ldr	r1, [pc, #460]	@ (8005ca8 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8005adc:	4313      	orrs	r3, r2
 8005ade:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 8005ae2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005ae6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005aea:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8005aee:	623b      	str	r3, [r7, #32]
 8005af0:	2300      	movs	r3, #0
 8005af2:	627b      	str	r3, [r7, #36]	@ 0x24
 8005af4:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8005af8:	460b      	mov	r3, r1
 8005afa:	4313      	orrs	r3, r2
 8005afc:	d00c      	beq.n	8005b18 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    /* Configure the SPI2 clock source */
    __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 8005afe:	4b6a      	ldr	r3, [pc, #424]	@ (8005ca8 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8005b00:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005b04:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005b08:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005b0c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005b10:	4965      	ldr	r1, [pc, #404]	@ (8005ca8 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8005b12:	4313      	orrs	r3, r2
 8005b14:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 8005b18:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005b1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b20:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8005b24:	61bb      	str	r3, [r7, #24]
 8005b26:	2300      	movs	r3, #0
 8005b28:	61fb      	str	r3, [r7, #28]
 8005b2a:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8005b2e:	460b      	mov	r3, r1
 8005b30:	4313      	orrs	r3, r2
 8005b32:	d00c      	beq.n	8005b4e <HAL_RCCEx_PeriphCLKConfig+0x9ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    /* Configure the SPI3 clock source */
    __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 8005b34:	4b5c      	ldr	r3, [pc, #368]	@ (8005ca8 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8005b36:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005b3a:	f023 0218 	bic.w	r2, r3, #24
 8005b3e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005b42:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8005b46:	4958      	ldr	r1, [pc, #352]	@ (8005ca8 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8005b48:	4313      	orrs	r3, r2
 8005b4a:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8005b4e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005b52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b56:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 8005b5a:	613b      	str	r3, [r7, #16]
 8005b5c:	2300      	movs	r3, #0
 8005b5e:	617b      	str	r3, [r7, #20]
 8005b60:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8005b64:	460b      	mov	r3, r1
 8005b66:	4313      	orrs	r3, r2
 8005b68:	d032      	beq.n	8005bd0 <HAL_RCCEx_PeriphCLKConfig+0xa6c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL1)
 8005b6a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005b6e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8005b72:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005b76:	d105      	bne.n	8005b84 <HAL_RCCEx_PeriphCLKConfig+0xa20>
    {
      /* Enable PLL1 Q CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005b78:	4b4b      	ldr	r3, [pc, #300]	@ (8005ca8 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8005b7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b7c:	4a4a      	ldr	r2, [pc, #296]	@ (8005ca8 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8005b7e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005b82:	6293      	str	r3, [r2, #40]	@ 0x28
    }
    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL2)
 8005b84:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005b88:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8005b8c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005b90:	d108      	bne.n	8005ba4 <HAL_RCCEx_PeriphCLKConfig+0xa40>
    {
      /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
      ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005b92:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005b96:	3308      	adds	r3, #8
 8005b98:	4618      	mov	r0, r3
 8005b9a:	f001 fe4b 	bl	8007834 <RCCEx_PLL2_Config>
 8005b9e:	4603      	mov	r3, r0
 8005ba0:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
    }
    if (ret == HAL_OK)
 8005ba4:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d10d      	bne.n	8005bc8 <HAL_RCCEx_PeriphCLKConfig+0xa64>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 8005bac:	4b3e      	ldr	r3, [pc, #248]	@ (8005ca8 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8005bae:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005bb2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005bb6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005bba:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8005bbe:	493a      	ldr	r1, [pc, #232]	@ (8005ca8 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8005bc0:	4313      	orrs	r3, r2
 8005bc2:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 8005bc6:	e003      	b.n	8005bd0 <HAL_RCCEx_PeriphCLKConfig+0xa6c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005bc8:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8005bcc:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }
#endif /* defined(HSPI1) */

  /*-------------------------- FDCAN1 kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN1) == (RCC_PERIPHCLK_FDCAN1))
 8005bd0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005bd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bd8:	f002 6300 	and.w	r3, r2, #134217728	@ 0x8000000
 8005bdc:	60bb      	str	r3, [r7, #8]
 8005bde:	2300      	movs	r3, #0
 8005be0:	60fb      	str	r3, [r7, #12]
 8005be2:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8005be6:	460b      	mov	r3, r1
 8005be8:	4313      	orrs	r3, r2
 8005bea:	d03a      	beq.n	8005c62 <HAL_RCCEx_PeriphCLKConfig+0xafe>
  {
    assert_param(IS_RCC_FDCAN1CLK(pPeriphClkInit->Fdcan1ClockSelection));

    switch (pPeriphClkInit->Fdcan1ClockSelection)
 8005bec:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005bf0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005bf4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005bf8:	d00e      	beq.n	8005c18 <HAL_RCCEx_PeriphCLKConfig+0xab4>
 8005bfa:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005bfe:	d815      	bhi.n	8005c2c <HAL_RCCEx_PeriphCLKConfig+0xac8>
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d017      	beq.n	8005c34 <HAL_RCCEx_PeriphCLKConfig+0xad0>
 8005c04:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005c08:	d110      	bne.n	8005c2c <HAL_RCCEx_PeriphCLKConfig+0xac8>
      case RCC_FDCAN1CLKSOURCE_HSE:      /* HSE is used as source of FDCAN1 kernel clock*/
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
      case RCC_FDCAN1CLKSOURCE_PLL1:      /* PLL1 is used as clock source for FDCAN1 kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005c0a:	4b27      	ldr	r3, [pc, #156]	@ (8005ca8 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8005c0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c0e:	4a26      	ldr	r2, [pc, #152]	@ (8005ca8 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8005c10:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005c14:	6293      	str	r3, [r2, #40]	@ 0x28
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 8005c16:	e00e      	b.n	8005c36 <HAL_RCCEx_PeriphCLKConfig+0xad2>
      case RCC_FDCAN1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for FDCAN1 kernel clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005c18:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005c1c:	3308      	adds	r3, #8
 8005c1e:	4618      	mov	r0, r3
 8005c20:	f001 fe08 	bl	8007834 <RCCEx_PLL2_Config>
 8005c24:	4603      	mov	r3, r0
 8005c26:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 8005c2a:	e004      	b.n	8005c36 <HAL_RCCEx_PeriphCLKConfig+0xad2>
      default:
        ret = HAL_ERROR;
 8005c2c:	2301      	movs	r3, #1
 8005c2e:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8005c32:	e000      	b.n	8005c36 <HAL_RCCEx_PeriphCLKConfig+0xad2>
        break;
 8005c34:	bf00      	nop
    }
    if (ret == HAL_OK)
 8005c36:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d10d      	bne.n	8005c5a <HAL_RCCEx_PeriphCLKConfig+0xaf6>
    {
      /* Set the source of FDCAN1 kernel clock*/
      __HAL_RCC_FDCAN1_CONFIG(pPeriphClkInit->Fdcan1ClockSelection);
 8005c3e:	4b1a      	ldr	r3, [pc, #104]	@ (8005ca8 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8005c40:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005c44:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8005c48:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005c4c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005c50:	4915      	ldr	r1, [pc, #84]	@ (8005ca8 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8005c52:	4313      	orrs	r3, r2
 8005c54:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 8005c58:	e003      	b.n	8005c62 <HAL_RCCEx_PeriphCLKConfig+0xafe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c5a:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8005c5e:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }

  /*-------------------------- DAC1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC1) == RCC_PERIPHCLK_DAC1)
 8005c62:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005c66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c6a:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8005c6e:	603b      	str	r3, [r7, #0]
 8005c70:	2300      	movs	r3, #0
 8005c72:	607b      	str	r3, [r7, #4]
 8005c74:	e9d7 1200 	ldrd	r1, r2, [r7]
 8005c78:	460b      	mov	r3, r1
 8005c7a:	4313      	orrs	r3, r2
 8005c7c:	d00c      	beq.n	8005c98 <HAL_RCCEx_PeriphCLKConfig+0xb34>

    /* Check the parameters */
    assert_param(IS_RCC_DAC1CLKSOURCE(pPeriphClkInit->Dac1ClockSelection));

    /* Configure the DAC1 clock source */
    __HAL_RCC_DAC1_CONFIG(pPeriphClkInit->Dac1ClockSelection);
 8005c7e:	4b0a      	ldr	r3, [pc, #40]	@ (8005ca8 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8005c80:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005c84:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8005c88:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005c8c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8005c90:	4905      	ldr	r1, [pc, #20]	@ (8005ca8 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8005c92:	4313      	orrs	r3, r2
 8005c94:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
    }
  }

#endif /* defined(USB_OTG_HS) */

  return status;
 8005c98:	f897 30da 	ldrb.w	r3, [r7, #218]	@ 0xda
}
 8005c9c:	4618      	mov	r0, r3
 8005c9e:	37e0      	adds	r7, #224	@ 0xe0
 8005ca0:	46bd      	mov	sp, r7
 8005ca2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005ca6:	bf00      	nop
 8005ca8:	46020c00 	.word	0x46020c00

08005cac <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8005cac:	b480      	push	{r7}
 8005cae:	b089      	sub	sp, #36	@ 0x24
 8005cb0:	af00      	add	r7, sp, #0
 8005cb2:	6078      	str	r0, [r7, #4]
  uint32_t pll1n;
  uint32_t pll1fracen;
  float_t fracn1;
  float_t pll1vco;

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 8005cb4:	4ba6      	ldr	r3, [pc, #664]	@ (8005f50 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005cb6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005cb8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005cbc:	61bb      	str	r3, [r7, #24]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8005cbe:	4ba4      	ldr	r3, [pc, #656]	@ (8005f50 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005cc0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005cc2:	f003 0303 	and.w	r3, r3, #3
 8005cc6:	617b      	str	r3, [r7, #20]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8005cc8:	4ba1      	ldr	r3, [pc, #644]	@ (8005f50 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005cca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ccc:	0a1b      	lsrs	r3, r3, #8
 8005cce:	f003 030f 	and.w	r3, r3, #15
 8005cd2:	3301      	adds	r3, #1
 8005cd4:	613b      	str	r3, [r7, #16]
  pll1fracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8005cd6:	4b9e      	ldr	r3, [pc, #632]	@ (8005f50 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005cd8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005cda:	091b      	lsrs	r3, r3, #4
 8005cdc:	f003 0301 	and.w	r3, r3, #1
 8005ce0:	60fb      	str	r3, [r7, #12]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8005ce2:	4b9b      	ldr	r3, [pc, #620]	@ (8005f50 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005ce4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ce6:	08db      	lsrs	r3, r3, #3
 8005ce8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005cec:	68fa      	ldr	r2, [r7, #12]
 8005cee:	fb02 f303 	mul.w	r3, r2, r3
 8005cf2:	ee07 3a90 	vmov	s15, r3
 8005cf6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005cfa:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  switch (pll1source)
 8005cfe:	697b      	ldr	r3, [r7, #20]
 8005d00:	2b03      	cmp	r3, #3
 8005d02:	d062      	beq.n	8005dca <HAL_RCCEx_GetPLL1ClockFreq+0x11e>
 8005d04:	697b      	ldr	r3, [r7, #20]
 8005d06:	2b03      	cmp	r3, #3
 8005d08:	f200 8081 	bhi.w	8005e0e <HAL_RCCEx_GetPLL1ClockFreq+0x162>
 8005d0c:	697b      	ldr	r3, [r7, #20]
 8005d0e:	2b01      	cmp	r3, #1
 8005d10:	d024      	beq.n	8005d5c <HAL_RCCEx_GetPLL1ClockFreq+0xb0>
 8005d12:	697b      	ldr	r3, [r7, #20]
 8005d14:	2b02      	cmp	r3, #2
 8005d16:	d17a      	bne.n	8005e0e <HAL_RCCEx_GetPLL1ClockFreq+0x162>
  {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005d18:	693b      	ldr	r3, [r7, #16]
 8005d1a:	ee07 3a90 	vmov	s15, r3
 8005d1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d22:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 8005f54 <HAL_RCCEx_GetPLL1ClockFreq+0x2a8>
 8005d26:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005d2a:	4b89      	ldr	r3, [pc, #548]	@ (8005f50 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005d2c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005d2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d32:	ee07 3a90 	vmov	s15, r3
 8005d36:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 8005d3a:	ed97 6a02 	vldr	s12, [r7, #8]
 8005d3e:	eddf 5a86 	vldr	s11, [pc, #536]	@ 8005f58 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 8005d42:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005d46:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 8005d4a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005d4e:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005d52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d56:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005d5a:	e08f      	b.n	8005e7c <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8005d5c:	4b7c      	ldr	r3, [pc, #496]	@ (8005f50 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005d5e:	689b      	ldr	r3, [r3, #8]
 8005d60:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d005      	beq.n	8005d74 <HAL_RCCEx_GetPLL1ClockFreq+0xc8>
 8005d68:	4b79      	ldr	r3, [pc, #484]	@ (8005f50 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005d6a:	689b      	ldr	r3, [r3, #8]
 8005d6c:	0f1b      	lsrs	r3, r3, #28
 8005d6e:	f003 030f 	and.w	r3, r3, #15
 8005d72:	e006      	b.n	8005d82 <HAL_RCCEx_GetPLL1ClockFreq+0xd6>
 8005d74:	4b76      	ldr	r3, [pc, #472]	@ (8005f50 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005d76:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005d7a:	041b      	lsls	r3, r3, #16
 8005d7c:	0f1b      	lsrs	r3, r3, #28
 8005d7e:	f003 030f 	and.w	r3, r3, #15
 8005d82:	4a76      	ldr	r2, [pc, #472]	@ (8005f5c <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>)
 8005d84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005d88:	ee07 3a90 	vmov	s15, r3
 8005d8c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005d90:	693b      	ldr	r3, [r7, #16]
 8005d92:	ee07 3a90 	vmov	s15, r3
 8005d96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d9a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005d9e:	69bb      	ldr	r3, [r7, #24]
 8005da0:	ee07 3a90 	vmov	s15, r3
 8005da4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005da8:	ed97 6a02 	vldr	s12, [r7, #8]
 8005dac:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 8005f58 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 8005db0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005db4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005db8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005dbc:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8005dc0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005dc4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005dc8:	e058      	b.n	8005e7c <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005dca:	693b      	ldr	r3, [r7, #16]
 8005dcc:	ee07 3a90 	vmov	s15, r3
 8005dd0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005dd4:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8005f54 <HAL_RCCEx_GetPLL1ClockFreq+0x2a8>
 8005dd8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005ddc:	4b5c      	ldr	r3, [pc, #368]	@ (8005f50 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005dde:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005de0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005de4:	ee07 3a90 	vmov	s15, r3
 8005de8:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 8005dec:	ed97 6a02 	vldr	s12, [r7, #8]
 8005df0:	eddf 5a59 	vldr	s11, [pc, #356]	@ 8005f58 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 8005df4:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005df8:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 8005dfc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005e00:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005e04:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e08:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005e0c:	e036      	b.n	8005e7c <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    default:
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8005e0e:	4b50      	ldr	r3, [pc, #320]	@ (8005f50 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005e10:	689b      	ldr	r3, [r3, #8]
 8005e12:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d005      	beq.n	8005e26 <HAL_RCCEx_GetPLL1ClockFreq+0x17a>
 8005e1a:	4b4d      	ldr	r3, [pc, #308]	@ (8005f50 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005e1c:	689b      	ldr	r3, [r3, #8]
 8005e1e:	0f1b      	lsrs	r3, r3, #28
 8005e20:	f003 030f 	and.w	r3, r3, #15
 8005e24:	e006      	b.n	8005e34 <HAL_RCCEx_GetPLL1ClockFreq+0x188>
 8005e26:	4b4a      	ldr	r3, [pc, #296]	@ (8005f50 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005e28:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005e2c:	041b      	lsls	r3, r3, #16
 8005e2e:	0f1b      	lsrs	r3, r3, #28
 8005e30:	f003 030f 	and.w	r3, r3, #15
 8005e34:	4a49      	ldr	r2, [pc, #292]	@ (8005f5c <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>)
 8005e36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005e3a:	ee07 3a90 	vmov	s15, r3
 8005e3e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005e42:	693b      	ldr	r3, [r7, #16]
 8005e44:	ee07 3a90 	vmov	s15, r3
 8005e48:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e4c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005e50:	69bb      	ldr	r3, [r7, #24]
 8005e52:	ee07 3a90 	vmov	s15, r3
 8005e56:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005e5a:	ed97 6a02 	vldr	s12, [r7, #8]
 8005e5e:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 8005f58 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 8005e62:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005e66:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005e6a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005e6e:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8005e72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e76:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005e7a:	bf00      	nop
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 8005e7c:	4b34      	ldr	r3, [pc, #208]	@ (8005f50 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005e7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e80:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d017      	beq.n	8005eb8 <HAL_RCCEx_GetPLL1ClockFreq+0x20c>
  {
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8005e88:	4b31      	ldr	r3, [pc, #196]	@ (8005f50 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005e8a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005e8c:	0a5b      	lsrs	r3, r3, #9
 8005e8e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005e92:	ee07 3a90 	vmov	s15, r3
 8005e96:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + \
 8005e9a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005e9e:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8005ea2:	edd7 6a07 	vldr	s13, [r7, #28]
 8005ea6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005eaa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005eae:	ee17 2a90 	vmov	r2, s15
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	601a      	str	r2, [r3, #0]
 8005eb6:	e002      	b.n	8005ebe <HAL_RCCEx_GetPLL1ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	2200      	movs	r2, #0
 8005ebc:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 8005ebe:	4b24      	ldr	r3, [pc, #144]	@ (8005f50 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005ec0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ec2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d017      	beq.n	8005efa <HAL_RCCEx_GetPLL1ClockFreq+0x24e>
  {
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8005eca:	4b21      	ldr	r3, [pc, #132]	@ (8005f50 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005ecc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005ece:	0c1b      	lsrs	r3, r3, #16
 8005ed0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005ed4:	ee07 3a90 	vmov	s15, r3
 8005ed8:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1Q) >> RCC_PLL1DIVR_PLL1Q_Pos) + \
 8005edc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005ee0:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8005ee4:	edd7 6a07 	vldr	s13, [r7, #28]
 8005ee8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005eec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005ef0:	ee17 2a90 	vmov	r2, s15
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	605a      	str	r2, [r3, #4]
 8005ef8:	e002      	b.n	8005f00 <HAL_RCCEx_GetPLL1ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	2200      	movs	r2, #0
 8005efe:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 8005f00:	4b13      	ldr	r3, [pc, #76]	@ (8005f50 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005f02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f04:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d017      	beq.n	8005f3c <HAL_RCCEx_GetPLL1ClockFreq+0x290>
  {
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8005f0c:	4b10      	ldr	r3, [pc, #64]	@ (8005f50 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005f0e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005f10:	0e1b      	lsrs	r3, r3, #24
 8005f12:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005f16:	ee07 3a90 	vmov	s15, r3
 8005f1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + \
 8005f1e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005f22:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8005f26:	edd7 6a07 	vldr	s13, [r7, #28]
 8005f2a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005f2e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005f32:	ee17 2a90 	vmov	r2, s15
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	609a      	str	r2, [r3, #8]
  else
  {
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8005f3a:	e002      	b.n	8005f42 <HAL_RCCEx_GetPLL1ClockFreq+0x296>
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	2200      	movs	r2, #0
 8005f40:	609a      	str	r2, [r3, #8]
}
 8005f42:	bf00      	nop
 8005f44:	3724      	adds	r7, #36	@ 0x24
 8005f46:	46bd      	mov	sp, r7
 8005f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f4c:	4770      	bx	lr
 8005f4e:	bf00      	nop
 8005f50:	46020c00 	.word	0x46020c00
 8005f54:	4b742400 	.word	0x4b742400
 8005f58:	46000000 	.word	0x46000000
 8005f5c:	0800db78 	.word	0x0800db78

08005f60 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8005f60:	b480      	push	{r7}
 8005f62:	b089      	sub	sp, #36	@ 0x24
 8005f64:	af00      	add	r7, sp, #0
 8005f66:	6078      	str	r0, [r7, #4]
  float_t fracn2;
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 8005f68:	4ba6      	ldr	r3, [pc, #664]	@ (8006204 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005f6a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005f6c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f70:	61bb      	str	r3, [r7, #24]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 8005f72:	4ba4      	ldr	r3, [pc, #656]	@ (8006204 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005f74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f76:	f003 0303 	and.w	r3, r3, #3
 8005f7a:	617b      	str	r3, [r7, #20]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos) + 1U;
 8005f7c:	4ba1      	ldr	r3, [pc, #644]	@ (8006204 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005f7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f80:	0a1b      	lsrs	r3, r3, #8
 8005f82:	f003 030f 	and.w	r3, r3, #15
 8005f86:	3301      	adds	r3, #1
 8005f88:	613b      	str	r3, [r7, #16]
  pll2fracen = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN) >> RCC_PLL2CFGR_PLL2FRACEN_Pos);
 8005f8a:	4b9e      	ldr	r3, [pc, #632]	@ (8006204 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005f8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f8e:	091b      	lsrs	r3, r3, #4
 8005f90:	f003 0301 	and.w	r3, r3, #1
 8005f94:	60fb      	str	r3, [r7, #12]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 8005f96:	4b9b      	ldr	r3, [pc, #620]	@ (8006204 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005f98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f9a:	08db      	lsrs	r3, r3, #3
 8005f9c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005fa0:	68fa      	ldr	r2, [r7, #12]
 8005fa2:	fb02 f303 	mul.w	r3, r2, r3
 8005fa6:	ee07 3a90 	vmov	s15, r3
 8005faa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005fae:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  switch (pll2source)
 8005fb2:	697b      	ldr	r3, [r7, #20]
 8005fb4:	2b03      	cmp	r3, #3
 8005fb6:	d062      	beq.n	800607e <HAL_RCCEx_GetPLL2ClockFreq+0x11e>
 8005fb8:	697b      	ldr	r3, [r7, #20]
 8005fba:	2b03      	cmp	r3, #3
 8005fbc:	f200 8081 	bhi.w	80060c2 <HAL_RCCEx_GetPLL2ClockFreq+0x162>
 8005fc0:	697b      	ldr	r3, [r7, #20]
 8005fc2:	2b01      	cmp	r3, #1
 8005fc4:	d024      	beq.n	8006010 <HAL_RCCEx_GetPLL2ClockFreq+0xb0>
 8005fc6:	697b      	ldr	r3, [r7, #20]
 8005fc8:	2b02      	cmp	r3, #2
 8005fca:	d17a      	bne.n	80060c2 <HAL_RCCEx_GetPLL2ClockFreq+0x162>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8005fcc:	693b      	ldr	r3, [r7, #16]
 8005fce:	ee07 3a90 	vmov	s15, r3
 8005fd2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005fd6:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 8006208 <HAL_RCCEx_GetPLL2ClockFreq+0x2a8>
 8005fda:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005fde:	4b89      	ldr	r3, [pc, #548]	@ (8006204 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005fe0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005fe2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005fe6:	ee07 3a90 	vmov	s15, r3
 8005fea:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 8005fee:	ed97 6a02 	vldr	s12, [r7, #8]
 8005ff2:	eddf 5a86 	vldr	s11, [pc, #536]	@ 800620c <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 8005ff6:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8005ffa:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 8005ffe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006002:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8006006:	ee67 7a27 	vmul.f32	s15, s14, s15
 800600a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800600e:	e08f      	b.n	8006130 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 8006010:	4b7c      	ldr	r3, [pc, #496]	@ (8006204 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8006012:	689b      	ldr	r3, [r3, #8]
 8006014:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006018:	2b00      	cmp	r3, #0
 800601a:	d005      	beq.n	8006028 <HAL_RCCEx_GetPLL2ClockFreq+0xc8>
 800601c:	4b79      	ldr	r3, [pc, #484]	@ (8006204 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800601e:	689b      	ldr	r3, [r3, #8]
 8006020:	0f1b      	lsrs	r3, r3, #28
 8006022:	f003 030f 	and.w	r3, r3, #15
 8006026:	e006      	b.n	8006036 <HAL_RCCEx_GetPLL2ClockFreq+0xd6>
 8006028:	4b76      	ldr	r3, [pc, #472]	@ (8006204 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800602a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800602e:	041b      	lsls	r3, r3, #16
 8006030:	0f1b      	lsrs	r3, r3, #28
 8006032:	f003 030f 	and.w	r3, r3, #15
 8006036:	4a76      	ldr	r2, [pc, #472]	@ (8006210 <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>)
 8006038:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800603c:	ee07 3a90 	vmov	s15, r3
 8006040:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006044:	693b      	ldr	r3, [r7, #16]
 8006046:	ee07 3a90 	vmov	s15, r3
 800604a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800604e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006052:	69bb      	ldr	r3, [r7, #24]
 8006054:	ee07 3a90 	vmov	s15, r3
 8006058:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800605c:	ed97 6a02 	vldr	s12, [r7, #8]
 8006060:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 800620c <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 8006064:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006068:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800606c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006070:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 8006074:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006078:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800607c:	e058      	b.n	8006130 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800607e:	693b      	ldr	r3, [r7, #16]
 8006080:	ee07 3a90 	vmov	s15, r3
 8006084:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006088:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8006208 <HAL_RCCEx_GetPLL2ClockFreq+0x2a8>
 800608c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006090:	4b5c      	ldr	r3, [pc, #368]	@ (8006204 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8006092:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006094:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006098:	ee07 3a90 	vmov	s15, r3
 800609c:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 80060a0:	ed97 6a02 	vldr	s12, [r7, #8]
 80060a4:	eddf 5a59 	vldr	s11, [pc, #356]	@ 800620c <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 80060a8:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 80060ac:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 80060b0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80060b4:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 80060b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80060bc:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80060c0:	e036      	b.n	8006130 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    default:
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 80060c2:	4b50      	ldr	r3, [pc, #320]	@ (8006204 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80060c4:	689b      	ldr	r3, [r3, #8]
 80060c6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d005      	beq.n	80060da <HAL_RCCEx_GetPLL2ClockFreq+0x17a>
 80060ce:	4b4d      	ldr	r3, [pc, #308]	@ (8006204 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80060d0:	689b      	ldr	r3, [r3, #8]
 80060d2:	0f1b      	lsrs	r3, r3, #28
 80060d4:	f003 030f 	and.w	r3, r3, #15
 80060d8:	e006      	b.n	80060e8 <HAL_RCCEx_GetPLL2ClockFreq+0x188>
 80060da:	4b4a      	ldr	r3, [pc, #296]	@ (8006204 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80060dc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80060e0:	041b      	lsls	r3, r3, #16
 80060e2:	0f1b      	lsrs	r3, r3, #28
 80060e4:	f003 030f 	and.w	r3, r3, #15
 80060e8:	4a49      	ldr	r2, [pc, #292]	@ (8006210 <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>)
 80060ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80060ee:	ee07 3a90 	vmov	s15, r3
 80060f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80060f6:	693b      	ldr	r3, [r7, #16]
 80060f8:	ee07 3a90 	vmov	s15, r3
 80060fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006100:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                * ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006104:	69bb      	ldr	r3, [r7, #24]
 8006106:	ee07 3a90 	vmov	s15, r3
 800610a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800610e:	ed97 6a02 	vldr	s12, [r7, #8]
 8006112:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 800620c <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 8006116:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800611a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800611e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006122:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 8006126:	ee67 7a27 	vmul.f32	s15, s14, s15
 800612a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800612e:	bf00      	nop
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 8006130:	4b34      	ldr	r3, [pc, #208]	@ (8006204 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8006132:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006134:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006138:	2b00      	cmp	r3, #0
 800613a:	d017      	beq.n	800616c <HAL_RCCEx_GetPLL2ClockFreq+0x20c>
  {
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800613c:	4b31      	ldr	r3, [pc, #196]	@ (8006204 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800613e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006140:	0a5b      	lsrs	r3, r3, #9
 8006142:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006146:	ee07 3a90 	vmov	s15, r3
 800614a:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2P) >> RCC_PLL2DIVR_PLL2P_Pos) + \
 800614e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006152:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8006156:	edd7 6a07 	vldr	s13, [r7, #28]
 800615a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800615e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006162:	ee17 2a90 	vmov	r2, s15
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	601a      	str	r2, [r3, #0]
 800616a:	e002      	b.n	8006172 <HAL_RCCEx_GetPLL2ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	2200      	movs	r2, #0
 8006170:	601a      	str	r2, [r3, #0]
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 8006172:	4b24      	ldr	r3, [pc, #144]	@ (8006204 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8006174:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006176:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800617a:	2b00      	cmp	r3, #0
 800617c:	d017      	beq.n	80061ae <HAL_RCCEx_GetPLL2ClockFreq+0x24e>
  {
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800617e:	4b21      	ldr	r3, [pc, #132]	@ (8006204 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8006180:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006182:	0c1b      	lsrs	r3, r3, #16
 8006184:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006188:	ee07 3a90 	vmov	s15, r3
 800618c:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2Q) >> RCC_PLL2DIVR_PLL2Q_Pos) + \
 8006190:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006194:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8006198:	edd7 6a07 	vldr	s13, [r7, #28]
 800619c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80061a0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80061a4:	ee17 2a90 	vmov	r2, s15
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	605a      	str	r2, [r3, #4]
 80061ac:	e002      	b.n	80061b4 <HAL_RCCEx_GetPLL2ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	2200      	movs	r2, #0
 80061b2:	605a      	str	r2, [r3, #4]
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 80061b4:	4b13      	ldr	r3, [pc, #76]	@ (8006204 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80061b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061b8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d017      	beq.n	80061f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
  {
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80061c0:	4b10      	ldr	r3, [pc, #64]	@ (8006204 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80061c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80061c4:	0e1b      	lsrs	r3, r3, #24
 80061c6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80061ca:	ee07 3a90 	vmov	s15, r3
 80061ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2R) >> RCC_PLL2DIVR_PLL2R_Pos) + \
 80061d2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80061d6:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80061da:	edd7 6a07 	vldr	s13, [r7, #28]
 80061de:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80061e2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80061e6:	ee17 2a90 	vmov	r2, s15
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	609a      	str	r2, [r3, #8]
  }
  else
  {
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80061ee:	e002      	b.n	80061f6 <HAL_RCCEx_GetPLL2ClockFreq+0x296>
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	2200      	movs	r2, #0
 80061f4:	609a      	str	r2, [r3, #8]
}
 80061f6:	bf00      	nop
 80061f8:	3724      	adds	r7, #36	@ 0x24
 80061fa:	46bd      	mov	sp, r7
 80061fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006200:	4770      	bx	lr
 8006202:	bf00      	nop
 8006204:	46020c00 	.word	0x46020c00
 8006208:	4b742400 	.word	0x4b742400
 800620c:	46000000 	.word	0x46000000
 8006210:	0800db78 	.word	0x0800db78

08006214 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8006214:	b480      	push	{r7}
 8006216:	b089      	sub	sp, #36	@ 0x24
 8006218:	af00      	add	r7, sp, #0
 800621a:	6078      	str	r0, [r7, #4]

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLLxR
  */

  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 800621c:	4ba6      	ldr	r3, [pc, #664]	@ (80064b8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800621e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006220:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006224:	61bb      	str	r3, [r7, #24]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 8006226:	4ba4      	ldr	r3, [pc, #656]	@ (80064b8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8006228:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800622a:	f003 0303 	and.w	r3, r3, #3
 800622e:	617b      	str	r3, [r7, #20]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos) + 1U;
 8006230:	4ba1      	ldr	r3, [pc, #644]	@ (80064b8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8006232:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006234:	0a1b      	lsrs	r3, r3, #8
 8006236:	f003 030f 	and.w	r3, r3, #15
 800623a:	3301      	adds	r3, #1
 800623c:	613b      	str	r3, [r7, #16]
  pll3fracen = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN) >> RCC_PLL3CFGR_PLL3FRACEN_Pos);
 800623e:	4b9e      	ldr	r3, [pc, #632]	@ (80064b8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8006240:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006242:	091b      	lsrs	r3, r3, #4
 8006244:	f003 0301 	and.w	r3, r3, #1
 8006248:	60fb      	str	r3, [r7, #12]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 800624a:	4b9b      	ldr	r3, [pc, #620]	@ (80064b8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800624c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800624e:	08db      	lsrs	r3, r3, #3
 8006250:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006254:	68fa      	ldr	r2, [r7, #12]
 8006256:	fb02 f303 	mul.w	r3, r2, r3
 800625a:	ee07 3a90 	vmov	s15, r3
 800625e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006262:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  switch (pll3source)
 8006266:	697b      	ldr	r3, [r7, #20]
 8006268:	2b03      	cmp	r3, #3
 800626a:	d062      	beq.n	8006332 <HAL_RCCEx_GetPLL3ClockFreq+0x11e>
 800626c:	697b      	ldr	r3, [r7, #20]
 800626e:	2b03      	cmp	r3, #3
 8006270:	f200 8081 	bhi.w	8006376 <HAL_RCCEx_GetPLL3ClockFreq+0x162>
 8006274:	697b      	ldr	r3, [r7, #20]
 8006276:	2b01      	cmp	r3, #1
 8006278:	d024      	beq.n	80062c4 <HAL_RCCEx_GetPLL3ClockFreq+0xb0>
 800627a:	697b      	ldr	r3, [r7, #20]
 800627c:	2b02      	cmp	r3, #2
 800627e:	d17a      	bne.n	8006376 <HAL_RCCEx_GetPLL3ClockFreq+0x162>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8006280:	693b      	ldr	r3, [r7, #16]
 8006282:	ee07 3a90 	vmov	s15, r3
 8006286:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800628a:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 80064bc <HAL_RCCEx_GetPLL3ClockFreq+0x2a8>
 800628e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006292:	4b89      	ldr	r3, [pc, #548]	@ (80064b8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8006294:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006296:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800629a:	ee07 3a90 	vmov	s15, r3
 800629e:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 80062a2:	ed97 6a02 	vldr	s12, [r7, #8]
 80062a6:	eddf 5a86 	vldr	s11, [pc, #536]	@ 80064c0 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 80062aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 80062ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 80062b2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80062b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 80062ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80062be:	edc7 7a07 	vstr	s15, [r7, #28]

      break;
 80062c2:	e08f      	b.n	80063e4 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 80062c4:	4b7c      	ldr	r3, [pc, #496]	@ (80064b8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80062c6:	689b      	ldr	r3, [r3, #8]
 80062c8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d005      	beq.n	80062dc <HAL_RCCEx_GetPLL3ClockFreq+0xc8>
 80062d0:	4b79      	ldr	r3, [pc, #484]	@ (80064b8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80062d2:	689b      	ldr	r3, [r3, #8]
 80062d4:	0f1b      	lsrs	r3, r3, #28
 80062d6:	f003 030f 	and.w	r3, r3, #15
 80062da:	e006      	b.n	80062ea <HAL_RCCEx_GetPLL3ClockFreq+0xd6>
 80062dc:	4b76      	ldr	r3, [pc, #472]	@ (80064b8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80062de:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80062e2:	041b      	lsls	r3, r3, #16
 80062e4:	0f1b      	lsrs	r3, r3, #28
 80062e6:	f003 030f 	and.w	r3, r3, #15
 80062ea:	4a76      	ldr	r2, [pc, #472]	@ (80064c4 <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>)
 80062ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80062f0:	ee07 3a90 	vmov	s15, r3
 80062f4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80062f8:	693b      	ldr	r3, [r7, #16]
 80062fa:	ee07 3a90 	vmov	s15, r3
 80062fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006302:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006306:	69bb      	ldr	r3, [r7, #24]
 8006308:	ee07 3a90 	vmov	s15, r3
 800630c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006310:	ed97 6a02 	vldr	s12, [r7, #8]
 8006314:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 80064c0 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 8006318:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800631c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006320:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006324:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8006328:	ee67 7a27 	vmul.f32	s15, s14, s15
 800632c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006330:	e058      	b.n	80063e4 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8006332:	693b      	ldr	r3, [r7, #16]
 8006334:	ee07 3a90 	vmov	s15, r3
 8006338:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800633c:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80064bc <HAL_RCCEx_GetPLL3ClockFreq+0x2a8>
 8006340:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006344:	4b5c      	ldr	r3, [pc, #368]	@ (80064b8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8006346:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006348:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800634c:	ee07 3a90 	vmov	s15, r3
 8006350:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 8006354:	ed97 6a02 	vldr	s12, [r7, #8]
 8006358:	eddf 5a59 	vldr	s11, [pc, #356]	@ 80064c0 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 800635c:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8006360:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 8006364:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006368:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800636c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006370:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006374:	e036      	b.n	80063e4 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>

    default:
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8006376:	4b50      	ldr	r3, [pc, #320]	@ (80064b8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8006378:	689b      	ldr	r3, [r3, #8]
 800637a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800637e:	2b00      	cmp	r3, #0
 8006380:	d005      	beq.n	800638e <HAL_RCCEx_GetPLL3ClockFreq+0x17a>
 8006382:	4b4d      	ldr	r3, [pc, #308]	@ (80064b8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8006384:	689b      	ldr	r3, [r3, #8]
 8006386:	0f1b      	lsrs	r3, r3, #28
 8006388:	f003 030f 	and.w	r3, r3, #15
 800638c:	e006      	b.n	800639c <HAL_RCCEx_GetPLL3ClockFreq+0x188>
 800638e:	4b4a      	ldr	r3, [pc, #296]	@ (80064b8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8006390:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006394:	041b      	lsls	r3, r3, #16
 8006396:	0f1b      	lsrs	r3, r3, #28
 8006398:	f003 030f 	and.w	r3, r3, #15
 800639c:	4a49      	ldr	r2, [pc, #292]	@ (80064c4 <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>)
 800639e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80063a2:	ee07 3a90 	vmov	s15, r3
 80063a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80063aa:	693b      	ldr	r3, [r7, #16]
 80063ac:	ee07 3a90 	vmov	s15, r3
 80063b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80063b4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 80063b8:	69bb      	ldr	r3, [r7, #24]
 80063ba:	ee07 3a90 	vmov	s15, r3
 80063be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80063c2:	ed97 6a02 	vldr	s12, [r7, #8]
 80063c6:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 80064c0 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 80063ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80063ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80063d2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80063d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 80063da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80063de:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80063e2:	bf00      	nop
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 80063e4:	4b34      	ldr	r3, [pc, #208]	@ (80064b8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80063e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80063e8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d017      	beq.n	8006420 <HAL_RCCEx_GetPLL3ClockFreq+0x20c>
  {
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80063f0:	4b31      	ldr	r3, [pc, #196]	@ (80064b8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 80063f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80063f4:	0a5b      	lsrs	r3, r3, #9
 80063f6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80063fa:	ee07 3a90 	vmov	s15, r3
 80063fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3P) >> RCC_PLL3DIVR_PLL3P_Pos) + \
 8006402:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006406:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800640a:	edd7 6a07 	vldr	s13, [r7, #28]
 800640e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006412:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006416:	ee17 2a90 	vmov	r2, s15
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	601a      	str	r2, [r3, #0]
 800641e:	e002      	b.n	8006426 <HAL_RCCEx_GetPLL3ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	2200      	movs	r2, #0
 8006424:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 8006426:	4b24      	ldr	r3, [pc, #144]	@ (80064b8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8006428:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800642a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800642e:	2b00      	cmp	r3, #0
 8006430:	d017      	beq.n	8006462 <HAL_RCCEx_GetPLL3ClockFreq+0x24e>
  {
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8006432:	4b21      	ldr	r3, [pc, #132]	@ (80064b8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8006434:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006436:	0c1b      	lsrs	r3, r3, #16
 8006438:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800643c:	ee07 3a90 	vmov	s15, r3
 8006440:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3Q) >> RCC_PLL3DIVR_PLL3Q_Pos) + \
 8006444:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006448:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800644c:	edd7 6a07 	vldr	s13, [r7, #28]
 8006450:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006454:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006458:	ee17 2a90 	vmov	r2, s15
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	605a      	str	r2, [r3, #4]
 8006460:	e002      	b.n	8006468 <HAL_RCCEx_GetPLL3ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	2200      	movs	r2, #0
 8006466:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 8006468:	4b13      	ldr	r3, [pc, #76]	@ (80064b8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 800646a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800646c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006470:	2b00      	cmp	r3, #0
 8006472:	d017      	beq.n	80064a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
  {
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8006474:	4b10      	ldr	r3, [pc, #64]	@ (80064b8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8006476:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006478:	0e1b      	lsrs	r3, r3, #24
 800647a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800647e:	ee07 3a90 	vmov	s15, r3
 8006482:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3R) >> RCC_PLL3DIVR_PLL3R_Pos) + \
 8006486:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800648a:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800648e:	edd7 6a07 	vldr	s13, [r7, #28]
 8006492:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006496:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800649a:	ee17 2a90 	vmov	r2, s15
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	609a      	str	r2, [r3, #8]
  else
  {
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80064a2:	e002      	b.n	80064aa <HAL_RCCEx_GetPLL3ClockFreq+0x296>
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	2200      	movs	r2, #0
 80064a8:	609a      	str	r2, [r3, #8]
}
 80064aa:	bf00      	nop
 80064ac:	3724      	adds	r7, #36	@ 0x24
 80064ae:	46bd      	mov	sp, r7
 80064b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b4:	4770      	bx	lr
 80064b6:	bf00      	nop
 80064b8:	46020c00 	.word	0x46020c00
 80064bc:	4b742400 	.word	0x4b742400
 80064c0:	46000000 	.word	0x46000000
 80064c4:	0800db78 	.word	0x0800db78

080064c8 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in Hz
  *
  *        (*) value not defined in all devices.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 80064c8:	b580      	push	{r7, lr}
 80064ca:	b08e      	sub	sp, #56	@ 0x38
 80064cc:	af00      	add	r7, sp, #0
 80064ce:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 80064d2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80064d6:	f5a2 2180 	sub.w	r1, r2, #262144	@ 0x40000
 80064da:	430b      	orrs	r3, r1
 80064dc:	d145      	bne.n	800656a <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 80064de:	4baa      	ldr	r3, [pc, #680]	@ (8006788 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 80064e0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80064e4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80064e8:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 80064ea:	4ba7      	ldr	r3, [pc, #668]	@ (8006788 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 80064ec:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80064f0:	f003 0302 	and.w	r3, r3, #2
 80064f4:	2b02      	cmp	r3, #2
 80064f6:	d108      	bne.n	800650a <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 80064f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064fa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80064fe:	d104      	bne.n	800650a <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 8006500:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006504:	637b      	str	r3, [r7, #52]	@ 0x34
 8006506:	f001 b987 	b.w	8007818 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 800650a:	4b9f      	ldr	r3, [pc, #636]	@ (8006788 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 800650c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006510:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006514:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006518:	d114      	bne.n	8006544 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
 800651a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800651c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006520:	d110      	bne.n	8006544 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006522:	4b99      	ldr	r3, [pc, #612]	@ (8006788 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8006524:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006528:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800652c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006530:	d103      	bne.n	800653a <HAL_RCCEx_GetPeriphCLKFreq+0x72>
      {
        frequency = LSI_VALUE / 128U;
 8006532:	23fa      	movs	r3, #250	@ 0xfa
 8006534:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006536:	f001 b96f 	b.w	8007818 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = LSI_VALUE;
 800653a:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800653e:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006540:	f001 b96a 	b.w	8007818 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    /* Check if HSE is ready  and if RTC clock selection is HSI_DIV32*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIV32))
 8006544:	4b90      	ldr	r3, [pc, #576]	@ (8006788 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800654c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006550:	d107      	bne.n	8006562 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
 8006552:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006554:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006558:	d103      	bne.n	8006562 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
    {
      frequency = HSE_VALUE / 32U;
 800655a:	4b8c      	ldr	r3, [pc, #560]	@ (800678c <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 800655c:	637b      	str	r3, [r7, #52]	@ 0x34
 800655e:	f001 b95b 	b.w	8007818 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 8006562:	2300      	movs	r3, #0
 8006564:	637b      	str	r3, [r7, #52]	@ 0x34
 8006566:	f001 b957 	b.w	8007818 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800656a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800656e:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 8006572:	430b      	orrs	r3, r1
 8006574:	d151      	bne.n	800661a <HAL_RCCEx_GetPeriphCLKFreq+0x152>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 8006576:	4b84      	ldr	r3, [pc, #528]	@ (8006788 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8006578:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800657c:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 8006580:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8006582:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006584:	2b80      	cmp	r3, #128	@ 0x80
 8006586:	d035      	beq.n	80065f4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
 8006588:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800658a:	2b80      	cmp	r3, #128	@ 0x80
 800658c:	d841      	bhi.n	8006612 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 800658e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006590:	2b60      	cmp	r3, #96	@ 0x60
 8006592:	d02a      	beq.n	80065ea <HAL_RCCEx_GetPeriphCLKFreq+0x122>
 8006594:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006596:	2b60      	cmp	r3, #96	@ 0x60
 8006598:	d83b      	bhi.n	8006612 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 800659a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800659c:	2b40      	cmp	r3, #64	@ 0x40
 800659e:	d009      	beq.n	80065b4 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 80065a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065a2:	2b40      	cmp	r3, #64	@ 0x40
 80065a4:	d835      	bhi.n	8006612 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 80065a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d00c      	beq.n	80065c6 <HAL_RCCEx_GetPeriphCLKFreq+0xfe>
 80065ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065ae:	2b20      	cmp	r3, #32
 80065b0:	d012      	beq.n	80065d8 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 80065b2:	e02e      	b.n	8006612 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
    {
      case RCC_SAI1CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80065b4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80065b8:	4618      	mov	r0, r3
 80065ba:	f7ff fb77 	bl	8005cac <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 80065be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065c0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80065c2:	f001 b929 	b.w	8007818 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80065c6:	f107 0318 	add.w	r3, r7, #24
 80065ca:	4618      	mov	r0, r3
 80065cc:	f7ff fcc8 	bl	8005f60 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 80065d0:	69bb      	ldr	r3, [r7, #24]
 80065d2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80065d4:	f001 b920 	b.w	8007818 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI1CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80065d8:	f107 030c 	add.w	r3, r7, #12
 80065dc:	4618      	mov	r0, r3
 80065de:	f7ff fe19 	bl	8006214 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80065e6:	f001 b917 	b.w	8007818 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 80065ea:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 80065ee:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80065f0:	f001 b912 	b.w	8007818 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI1CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80065f4:	4b64      	ldr	r3, [pc, #400]	@ (8006788 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80065fc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006600:	d103      	bne.n	800660a <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        {
          frequency = HSI_VALUE;
 8006602:	4b63      	ldr	r3, [pc, #396]	@ (8006790 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 8006604:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006606:	f001 b907 	b.w	8007818 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 800660a:	2300      	movs	r3, #0
 800660c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800660e:	f001 b903 	b.w	8007818 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default :
      {
        frequency = 0U;
 8006612:	2300      	movs	r3, #0
 8006614:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006616:	f001 b8ff 	b.w	8007818 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
  }
#if defined(SAI2)
  else if (PeriphClk == RCC_PERIPHCLK_SAI2)
 800661a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800661e:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 8006622:	430b      	orrs	r3, r1
 8006624:	d158      	bne.n	80066d8 <HAL_RCCEx_GetPeriphCLKFreq+0x210>
  {
    srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 8006626:	4b58      	ldr	r3, [pc, #352]	@ (8006788 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8006628:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800662c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006630:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8006632:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006634:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006638:	d03b      	beq.n	80066b2 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 800663a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800663c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006640:	d846      	bhi.n	80066d0 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 8006642:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006644:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006648:	d02e      	beq.n	80066a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
 800664a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800664c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006650:	d83e      	bhi.n	80066d0 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 8006652:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006654:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006658:	d00b      	beq.n	8006672 <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
 800665a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800665c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006660:	d836      	bhi.n	80066d0 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 8006662:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006664:	2b00      	cmp	r3, #0
 8006666:	d00d      	beq.n	8006684 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 8006668:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800666a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800666e:	d012      	beq.n	8006696 <HAL_RCCEx_GetPeriphCLKFreq+0x1ce>
 8006670:	e02e      	b.n	80066d0 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
    {
      case RCC_SAI2CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006672:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006676:	4618      	mov	r0, r3
 8006678:	f7ff fb18 	bl	8005cac <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800667c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800667e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006680:	f001 b8ca 	b.w	8007818 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006684:	f107 0318 	add.w	r3, r7, #24
 8006688:	4618      	mov	r0, r3
 800668a:	f7ff fc69 	bl	8005f60 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 800668e:	69bb      	ldr	r3, [r7, #24]
 8006690:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006692:	f001 b8c1 	b.w	8007818 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI2CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006696:	f107 030c 	add.w	r3, r7, #12
 800669a:	4618      	mov	r0, r3
 800669c:	f7ff fdba 	bl	8006214 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80066a4:	f001 b8b8 	b.w	8007818 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI2CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 80066a8:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 80066ac:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80066ae:	f001 b8b3 	b.w	8007818 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI2CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80066b2:	4b35      	ldr	r3, [pc, #212]	@ (8006788 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80066ba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80066be:	d103      	bne.n	80066c8 <HAL_RCCEx_GetPeriphCLKFreq+0x200>
        {
          frequency = HSI_VALUE;
 80066c0:	4b33      	ldr	r3, [pc, #204]	@ (8006790 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>)
 80066c2:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80066c4:	f001 b8a8 	b.w	8007818 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 80066c8:	2300      	movs	r3, #0
 80066ca:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80066cc:	f001 b8a4 	b.w	8007818 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default :

        frequency = 0U;
 80066d0:	2300      	movs	r3, #0
 80066d2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80066d4:	f001 b8a0 	b.w	8007818 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    {
      frequency = 0U;
    }
  }
#endif /* SAES */
  else if (PeriphClk == RCC_PERIPHCLK_ICLK)
 80066d8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80066dc:	f5a2 1180 	sub.w	r1, r2, #1048576	@ 0x100000
 80066e0:	430b      	orrs	r3, r1
 80066e2:	d16e      	bne.n	80067c2 <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
  {
    srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 80066e4:	4b28      	ldr	r3, [pc, #160]	@ (8006788 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 80066e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80066ea:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 80066ee:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 80066f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066f2:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 80066f6:	d034      	beq.n	8006762 <HAL_RCCEx_GetPeriphCLKFreq+0x29a>
 80066f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066fa:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 80066fe:	d85c      	bhi.n	80067ba <HAL_RCCEx_GetPeriphCLKFreq+0x2f2>
 8006700:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006702:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006706:	d00b      	beq.n	8006720 <HAL_RCCEx_GetPeriphCLKFreq+0x258>
 8006708:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800670a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800670e:	d854      	bhi.n	80067ba <HAL_RCCEx_GetPeriphCLKFreq+0x2f2>
 8006710:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006712:	2b00      	cmp	r3, #0
 8006714:	d016      	beq.n	8006744 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>
 8006716:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006718:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800671c:	d009      	beq.n	8006732 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 800671e:	e04c      	b.n	80067ba <HAL_RCCEx_GetPeriphCLKFreq+0x2f2>
    {
      case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006720:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006724:	4618      	mov	r0, r3
 8006726:	f7ff fac1 	bl	8005cac <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 800672a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800672c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800672e:	f001 b873 	b.w	8007818 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006732:	f107 0318 	add.w	r3, r7, #24
 8006736:	4618      	mov	r0, r3
 8006738:	f7ff fc12 	bl	8005f60 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 800673c:	69fb      	ldr	r3, [r7, #28]
 800673e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006740:	f001 b86a 	b.w	8007818 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 8006744:	4b10      	ldr	r3, [pc, #64]	@ (8006788 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800674c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006750:	d103      	bne.n	800675a <HAL_RCCEx_GetPeriphCLKFreq+0x292>
        {
          frequency = HSI48_VALUE;
 8006752:	4b10      	ldr	r3, [pc, #64]	@ (8006794 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8006754:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006756:	f001 b85f 	b.w	8007818 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 800675a:	2300      	movs	r3, #0
 800675c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800675e:	f001 b85b 	b.w	8007818 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8006762:	4b09      	ldr	r3, [pc, #36]	@ (8006788 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	f003 0320 	and.w	r3, r3, #32
 800676a:	2b20      	cmp	r3, #32
 800676c:	d121      	bne.n	80067b2 <HAL_RCCEx_GetPeriphCLKFreq+0x2ea>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800676e:	4b06      	ldr	r3, [pc, #24]	@ (8006788 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8006770:	689b      	ldr	r3, [r3, #8]
 8006772:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006776:	2b00      	cmp	r3, #0
 8006778:	d00e      	beq.n	8006798 <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>
 800677a:	4b03      	ldr	r3, [pc, #12]	@ (8006788 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 800677c:	689b      	ldr	r3, [r3, #8]
 800677e:	0e1b      	lsrs	r3, r3, #24
 8006780:	f003 030f 	and.w	r3, r3, #15
 8006784:	e00f      	b.n	80067a6 <HAL_RCCEx_GetPeriphCLKFreq+0x2de>
 8006786:	bf00      	nop
 8006788:	46020c00 	.word	0x46020c00
 800678c:	0007a120 	.word	0x0007a120
 8006790:	00f42400 	.word	0x00f42400
 8006794:	02dc6c00 	.word	0x02dc6c00
 8006798:	4ba7      	ldr	r3, [pc, #668]	@ (8006a38 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 800679a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800679e:	041b      	lsls	r3, r3, #16
 80067a0:	0e1b      	lsrs	r3, r3, #24
 80067a2:	f003 030f 	and.w	r3, r3, #15
 80067a6:	4aa5      	ldr	r2, [pc, #660]	@ (8006a3c <HAL_RCCEx_GetPeriphCLKFreq+0x574>)
 80067a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80067ac:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80067ae:	f001 b833 	b.w	8007818 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 80067b2:	2300      	movs	r3, #0
 80067b4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80067b6:	f001 b82f 	b.w	8007818 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default :

        frequency = 0U;
 80067ba:	2300      	movs	r3, #0
 80067bc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80067be:	f001 b82b 	b.w	8007818 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 80067c2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80067c6:	f5a2 1100 	sub.w	r1, r2, #2097152	@ 0x200000
 80067ca:	430b      	orrs	r3, r1
 80067cc:	d17f      	bne.n	80068ce <HAL_RCCEx_GetPeriphCLKFreq+0x406>
  {
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 80067ce:	4b9a      	ldr	r3, [pc, #616]	@ (8006a38 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 80067d0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80067d4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80067d8:	633b      	str	r3, [r7, #48]	@ 0x30
    if (srcclk == RCC_SDMMCCLKSOURCE_CLK48)
 80067da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d165      	bne.n	80068ac <HAL_RCCEx_GetPeriphCLKFreq+0x3e4>
    {
      srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 80067e0:	4b95      	ldr	r3, [pc, #596]	@ (8006a38 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 80067e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80067e6:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 80067ea:	633b      	str	r3, [r7, #48]	@ 0x30

      switch (srcclk)
 80067ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067ee:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 80067f2:	d034      	beq.n	800685e <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 80067f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067f6:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 80067fa:	d853      	bhi.n	80068a4 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 80067fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067fe:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006802:	d00b      	beq.n	800681c <HAL_RCCEx_GetPeriphCLKFreq+0x354>
 8006804:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006806:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800680a:	d84b      	bhi.n	80068a4 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800680c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800680e:	2b00      	cmp	r3, #0
 8006810:	d016      	beq.n	8006840 <HAL_RCCEx_GetPeriphCLKFreq+0x378>
 8006812:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006814:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006818:	d009      	beq.n	800682e <HAL_RCCEx_GetPeriphCLKFreq+0x366>
 800681a:	e043      	b.n	80068a4 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
      {
        case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800681c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006820:	4618      	mov	r0, r3
 8006822:	f7ff fa43 	bl	8005cac <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006826:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006828:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 800682a:	f000 bff5 	b.w	8007818 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
        }
        case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800682e:	f107 0318 	add.w	r3, r7, #24
 8006832:	4618      	mov	r0, r3
 8006834:	f7ff fb94 	bl	8005f60 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006838:	69fb      	ldr	r3, [r7, #28]
 800683a:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 800683c:	f000 bfec 	b.w	8007818 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
        }
        case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 8006840:	4b7d      	ldr	r3, [pc, #500]	@ (8006a38 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006848:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800684c:	d103      	bne.n	8006856 <HAL_RCCEx_GetPeriphCLKFreq+0x38e>
          {
            frequency = HSI48_VALUE;
 800684e:	4b7c      	ldr	r3, [pc, #496]	@ (8006a40 <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 8006850:	637b      	str	r3, [r7, #52]	@ 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 8006852:	f000 bfe1 	b.w	8007818 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
            frequency = 0U;
 8006856:	2300      	movs	r3, #0
 8006858:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 800685a:	f000 bfdd 	b.w	8007818 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
        }
        case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800685e:	4b76      	ldr	r3, [pc, #472]	@ (8006a38 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	f003 0320 	and.w	r3, r3, #32
 8006866:	2b20      	cmp	r3, #32
 8006868:	d118      	bne.n	800689c <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
          {
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800686a:	4b73      	ldr	r3, [pc, #460]	@ (8006a38 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 800686c:	689b      	ldr	r3, [r3, #8]
 800686e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006872:	2b00      	cmp	r3, #0
 8006874:	d005      	beq.n	8006882 <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
 8006876:	4b70      	ldr	r3, [pc, #448]	@ (8006a38 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8006878:	689b      	ldr	r3, [r3, #8]
 800687a:	0e1b      	lsrs	r3, r3, #24
 800687c:	f003 030f 	and.w	r3, r3, #15
 8006880:	e006      	b.n	8006890 <HAL_RCCEx_GetPeriphCLKFreq+0x3c8>
 8006882:	4b6d      	ldr	r3, [pc, #436]	@ (8006a38 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8006884:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006888:	041b      	lsls	r3, r3, #16
 800688a:	0e1b      	lsrs	r3, r3, #24
 800688c:	f003 030f 	and.w	r3, r3, #15
 8006890:	4a6a      	ldr	r2, [pc, #424]	@ (8006a3c <HAL_RCCEx_GetPeriphCLKFreq+0x574>)
 8006892:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006896:	637b      	str	r3, [r7, #52]	@ 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 8006898:	f000 bfbe 	b.w	8007818 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
            frequency = 0U;
 800689c:	2300      	movs	r3, #0
 800689e:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 80068a0:	f000 bfba 	b.w	8007818 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
        }
        default :
        {
          frequency = 0U;
 80068a4:	2300      	movs	r3, #0
 80068a6:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 80068a8:	f000 bfb6 	b.w	8007818 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
        }
      }
    }
    else if (srcclk == RCC_SDMMCCLKSOURCE_PLL1)
 80068ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068ae:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80068b2:	d108      	bne.n	80068c6 <HAL_RCCEx_GetPeriphCLKFreq+0x3fe>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80068b4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80068b8:	4618      	mov	r0, r3
 80068ba:	f7ff f9f7 	bl	8005cac <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_P_Frequency;
 80068be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068c0:	637b      	str	r3, [r7, #52]	@ 0x34
 80068c2:	f000 bfa9 	b.w	8007818 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else
    {
      frequency = 0U;
 80068c6:	2300      	movs	r3, #0
 80068c8:	637b      	str	r3, [r7, #52]	@ 0x34
 80068ca:	f000 bfa5 	b.w	8007818 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_USART1)
 80068ce:	e9d7 2300 	ldrd	r2, r3, [r7]
 80068d2:	1e51      	subs	r1, r2, #1
 80068d4:	430b      	orrs	r3, r1
 80068d6:	d136      	bne.n	8006946 <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
  {
    /* Get the current USART1 source */
    srcclk = __HAL_RCC_GET_USART1_SOURCE();
 80068d8:	4b57      	ldr	r3, [pc, #348]	@ (8006a38 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 80068da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80068de:	f003 0303 	and.w	r3, r3, #3
 80068e2:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 80068e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d104      	bne.n	80068f4 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
    {
      frequency = HAL_RCC_GetPCLK2Freq();
 80068ea:	f7fe fb55 	bl	8004f98 <HAL_RCC_GetPCLK2Freq>
 80068ee:	6378      	str	r0, [r7, #52]	@ 0x34
 80068f0:	f000 bf92 	b.w	8007818 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_USART1CLKSOURCE_SYSCLK)
 80068f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068f6:	2b01      	cmp	r3, #1
 80068f8:	d104      	bne.n	8006904 <HAL_RCCEx_GetPeriphCLKFreq+0x43c>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80068fa:	f7fe fa1d 	bl	8004d38 <HAL_RCC_GetSysClockFreq>
 80068fe:	6378      	str	r0, [r7, #52]	@ 0x34
 8006900:	f000 bf8a 	b.w	8007818 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 8006904:	4b4c      	ldr	r3, [pc, #304]	@ (8006a38 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800690c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006910:	d106      	bne.n	8006920 <HAL_RCCEx_GetPeriphCLKFreq+0x458>
 8006912:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006914:	2b02      	cmp	r3, #2
 8006916:	d103      	bne.n	8006920 <HAL_RCCEx_GetPeriphCLKFreq+0x458>
    {
      frequency = HSI_VALUE;
 8006918:	4b4a      	ldr	r3, [pc, #296]	@ (8006a44 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 800691a:	637b      	str	r3, [r7, #52]	@ 0x34
 800691c:	f000 bf7c 	b.w	8007818 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 8006920:	4b45      	ldr	r3, [pc, #276]	@ (8006a38 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8006922:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006926:	f003 0302 	and.w	r3, r3, #2
 800692a:	2b02      	cmp	r3, #2
 800692c:	d107      	bne.n	800693e <HAL_RCCEx_GetPeriphCLKFreq+0x476>
 800692e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006930:	2b03      	cmp	r3, #3
 8006932:	d104      	bne.n	800693e <HAL_RCCEx_GetPeriphCLKFreq+0x476>
    {
      frequency = LSE_VALUE;
 8006934:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006938:	637b      	str	r3, [r7, #52]	@ 0x34
 800693a:	f000 bf6d 	b.w	8007818 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for USART1 */
    else
    {
      frequency = 0U;
 800693e:	2300      	movs	r3, #0
 8006940:	637b      	str	r3, [r7, #52]	@ 0x34
 8006942:	f000 bf69 	b.w	8007818 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
#if defined(USART2)
  else if (PeriphClk == RCC_PERIPHCLK_USART2)
 8006946:	e9d7 2300 	ldrd	r2, r3, [r7]
 800694a:	1e91      	subs	r1, r2, #2
 800694c:	430b      	orrs	r3, r1
 800694e:	d136      	bne.n	80069be <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
  {
    /* Get the current USART2 source */
    srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8006950:	4b39      	ldr	r3, [pc, #228]	@ (8006a38 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8006952:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006956:	f003 030c 	and.w	r3, r3, #12
 800695a:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 800695c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800695e:	2b00      	cmp	r3, #0
 8006960:	d104      	bne.n	800696c <HAL_RCCEx_GetPeriphCLKFreq+0x4a4>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8006962:	f7fe fb05 	bl	8004f70 <HAL_RCC_GetPCLK1Freq>
 8006966:	6378      	str	r0, [r7, #52]	@ 0x34
 8006968:	f000 bf56 	b.w	8007818 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_USART2CLKSOURCE_SYSCLK)
 800696c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800696e:	2b04      	cmp	r3, #4
 8006970:	d104      	bne.n	800697c <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8006972:	f7fe f9e1 	bl	8004d38 <HAL_RCC_GetSysClockFreq>
 8006976:	6378      	str	r0, [r7, #52]	@ 0x34
 8006978:	f000 bf4e 	b.w	8007818 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 800697c:	4b2e      	ldr	r3, [pc, #184]	@ (8006a38 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006984:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006988:	d106      	bne.n	8006998 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 800698a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800698c:	2b08      	cmp	r3, #8
 800698e:	d103      	bne.n	8006998 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
    {
      frequency = HSI_VALUE;
 8006990:	4b2c      	ldr	r3, [pc, #176]	@ (8006a44 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 8006992:	637b      	str	r3, [r7, #52]	@ 0x34
 8006994:	f000 bf40 	b.w	8007818 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 8006998:	4b27      	ldr	r3, [pc, #156]	@ (8006a38 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 800699a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800699e:	f003 0302 	and.w	r3, r3, #2
 80069a2:	2b02      	cmp	r3, #2
 80069a4:	d107      	bne.n	80069b6 <HAL_RCCEx_GetPeriphCLKFreq+0x4ee>
 80069a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069a8:	2b0c      	cmp	r3, #12
 80069aa:	d104      	bne.n	80069b6 <HAL_RCCEx_GetPeriphCLKFreq+0x4ee>
    {
      frequency = LSE_VALUE;
 80069ac:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80069b0:	637b      	str	r3, [r7, #52]	@ 0x34
 80069b2:	f000 bf31 	b.w	8007818 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for USART2 */
    else
    {
      frequency = 0U;
 80069b6:	2300      	movs	r3, #0
 80069b8:	637b      	str	r3, [r7, #52]	@ 0x34
 80069ba:	f000 bf2d 	b.w	8007818 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
#endif /* USART2 */
  else if (PeriphClk == RCC_PERIPHCLK_USART3)
 80069be:	e9d7 2300 	ldrd	r2, r3, [r7]
 80069c2:	1f11      	subs	r1, r2, #4
 80069c4:	430b      	orrs	r3, r1
 80069c6:	d13f      	bne.n	8006a48 <HAL_RCCEx_GetPeriphCLKFreq+0x580>
  {
    /* Get the current USART3 source */
    srcclk = __HAL_RCC_GET_USART3_SOURCE();
 80069c8:	4b1b      	ldr	r3, [pc, #108]	@ (8006a38 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 80069ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80069ce:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80069d2:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 80069d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d104      	bne.n	80069e4 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80069da:	f7fe fac9 	bl	8004f70 <HAL_RCC_GetPCLK1Freq>
 80069de:	6378      	str	r0, [r7, #52]	@ 0x34
 80069e0:	f000 bf1a 	b.w	8007818 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_USART3CLKSOURCE_SYSCLK)
 80069e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069e6:	2b10      	cmp	r3, #16
 80069e8:	d104      	bne.n	80069f4 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80069ea:	f7fe f9a5 	bl	8004d38 <HAL_RCC_GetSysClockFreq>
 80069ee:	6378      	str	r0, [r7, #52]	@ 0x34
 80069f0:	f000 bf12 	b.w	8007818 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 80069f4:	4b10      	ldr	r3, [pc, #64]	@ (8006a38 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80069fc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006a00:	d106      	bne.n	8006a10 <HAL_RCCEx_GetPeriphCLKFreq+0x548>
 8006a02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a04:	2b20      	cmp	r3, #32
 8006a06:	d103      	bne.n	8006a10 <HAL_RCCEx_GetPeriphCLKFreq+0x548>
    {
      frequency = HSI_VALUE;
 8006a08:	4b0e      	ldr	r3, [pc, #56]	@ (8006a44 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 8006a0a:	637b      	str	r3, [r7, #52]	@ 0x34
 8006a0c:	f000 bf04 	b.w	8007818 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 8006a10:	4b09      	ldr	r3, [pc, #36]	@ (8006a38 <HAL_RCCEx_GetPeriphCLKFreq+0x570>)
 8006a12:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006a16:	f003 0302 	and.w	r3, r3, #2
 8006a1a:	2b02      	cmp	r3, #2
 8006a1c:	d107      	bne.n	8006a2e <HAL_RCCEx_GetPeriphCLKFreq+0x566>
 8006a1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a20:	2b30      	cmp	r3, #48	@ 0x30
 8006a22:	d104      	bne.n	8006a2e <HAL_RCCEx_GetPeriphCLKFreq+0x566>
    {
      frequency = LSE_VALUE;
 8006a24:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006a28:	637b      	str	r3, [r7, #52]	@ 0x34
 8006a2a:	f000 bef5 	b.w	8007818 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for USART3 */
    else
    {
      frequency = 0U;
 8006a2e:	2300      	movs	r3, #0
 8006a30:	637b      	str	r3, [r7, #52]	@ 0x34
 8006a32:	f000 bef1 	b.w	8007818 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
 8006a36:	bf00      	nop
 8006a38:	46020c00 	.word	0x46020c00
 8006a3c:	0800db78 	.word	0x0800db78
 8006a40:	02dc6c00 	.word	0x02dc6c00
 8006a44:	00f42400 	.word	0x00f42400
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART4)
 8006a48:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006a4c:	f1a2 0108 	sub.w	r1, r2, #8
 8006a50:	430b      	orrs	r3, r1
 8006a52:	d136      	bne.n	8006ac2 <HAL_RCCEx_GetPeriphCLKFreq+0x5fa>
  {
    /* Get the current UART4 source */
    srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8006a54:	4ba4      	ldr	r3, [pc, #656]	@ (8006ce8 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8006a56:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006a5a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8006a5e:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 8006a60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d104      	bne.n	8006a70 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8006a66:	f7fe fa83 	bl	8004f70 <HAL_RCC_GetPCLK1Freq>
 8006a6a:	6378      	str	r0, [r7, #52]	@ 0x34
 8006a6c:	f000 bed4 	b.w	8007818 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_UART4CLKSOURCE_SYSCLK)
 8006a70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a72:	2b40      	cmp	r3, #64	@ 0x40
 8006a74:	d104      	bne.n	8006a80 <HAL_RCCEx_GetPeriphCLKFreq+0x5b8>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8006a76:	f7fe f95f 	bl	8004d38 <HAL_RCC_GetSysClockFreq>
 8006a7a:	6378      	str	r0, [r7, #52]	@ 0x34
 8006a7c:	f000 becc 	b.w	8007818 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 8006a80:	4b99      	ldr	r3, [pc, #612]	@ (8006ce8 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006a88:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006a8c:	d106      	bne.n	8006a9c <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>
 8006a8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a90:	2b80      	cmp	r3, #128	@ 0x80
 8006a92:	d103      	bne.n	8006a9c <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>
    {
      frequency = HSI_VALUE;
 8006a94:	4b95      	ldr	r3, [pc, #596]	@ (8006cec <HAL_RCCEx_GetPeriphCLKFreq+0x824>)
 8006a96:	637b      	str	r3, [r7, #52]	@ 0x34
 8006a98:	f000 bebe 	b.w	8007818 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 8006a9c:	4b92      	ldr	r3, [pc, #584]	@ (8006ce8 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8006a9e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006aa2:	f003 0302 	and.w	r3, r3, #2
 8006aa6:	2b02      	cmp	r3, #2
 8006aa8:	d107      	bne.n	8006aba <HAL_RCCEx_GetPeriphCLKFreq+0x5f2>
 8006aaa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006aac:	2bc0      	cmp	r3, #192	@ 0xc0
 8006aae:	d104      	bne.n	8006aba <HAL_RCCEx_GetPeriphCLKFreq+0x5f2>
    {
      frequency = LSE_VALUE;
 8006ab0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006ab4:	637b      	str	r3, [r7, #52]	@ 0x34
 8006ab6:	f000 beaf 	b.w	8007818 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for UART4 */
    else
    {
      frequency = 0U;
 8006aba:	2300      	movs	r3, #0
 8006abc:	637b      	str	r3, [r7, #52]	@ 0x34
 8006abe:	f000 beab 	b.w	8007818 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART5)
 8006ac2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006ac6:	f1a2 0110 	sub.w	r1, r2, #16
 8006aca:	430b      	orrs	r3, r1
 8006acc:	d139      	bne.n	8006b42 <HAL_RCCEx_GetPeriphCLKFreq+0x67a>
  {
    /* Get the current UART5 source */
    srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8006ace:	4b86      	ldr	r3, [pc, #536]	@ (8006ce8 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8006ad0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006ad4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006ad8:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 8006ada:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d104      	bne.n	8006aea <HAL_RCCEx_GetPeriphCLKFreq+0x622>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8006ae0:	f7fe fa46 	bl	8004f70 <HAL_RCC_GetPCLK1Freq>
 8006ae4:	6378      	str	r0, [r7, #52]	@ 0x34
 8006ae6:	f000 be97 	b.w	8007818 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_UART5CLKSOURCE_SYSCLK)
 8006aea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006aec:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006af0:	d104      	bne.n	8006afc <HAL_RCCEx_GetPeriphCLKFreq+0x634>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8006af2:	f7fe f921 	bl	8004d38 <HAL_RCC_GetSysClockFreq>
 8006af6:	6378      	str	r0, [r7, #52]	@ 0x34
 8006af8:	f000 be8e 	b.w	8007818 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 8006afc:	4b7a      	ldr	r3, [pc, #488]	@ (8006ce8 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006b04:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006b08:	d107      	bne.n	8006b1a <HAL_RCCEx_GetPeriphCLKFreq+0x652>
 8006b0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b0c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006b10:	d103      	bne.n	8006b1a <HAL_RCCEx_GetPeriphCLKFreq+0x652>
    {
      frequency = HSI_VALUE;
 8006b12:	4b76      	ldr	r3, [pc, #472]	@ (8006cec <HAL_RCCEx_GetPeriphCLKFreq+0x824>)
 8006b14:	637b      	str	r3, [r7, #52]	@ 0x34
 8006b16:	f000 be7f 	b.w	8007818 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 8006b1a:	4b73      	ldr	r3, [pc, #460]	@ (8006ce8 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8006b1c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006b20:	f003 0302 	and.w	r3, r3, #2
 8006b24:	2b02      	cmp	r3, #2
 8006b26:	d108      	bne.n	8006b3a <HAL_RCCEx_GetPeriphCLKFreq+0x672>
 8006b28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b2a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006b2e:	d104      	bne.n	8006b3a <HAL_RCCEx_GetPeriphCLKFreq+0x672>
    {
      frequency = LSE_VALUE;
 8006b30:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006b34:	637b      	str	r3, [r7, #52]	@ 0x34
 8006b36:	f000 be6f 	b.w	8007818 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for UART5 */
    else
    {
      frequency = 0U;
 8006b3a:	2300      	movs	r3, #0
 8006b3c:	637b      	str	r3, [r7, #52]	@ 0x34
 8006b3e:	f000 be6b 	b.w	8007818 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    {
      frequency = 0U;
    }
  }
#endif /* USART6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPUART1)
 8006b42:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006b46:	f1a2 0120 	sub.w	r1, r2, #32
 8006b4a:	430b      	orrs	r3, r1
 8006b4c:	d158      	bne.n	8006c00 <HAL_RCCEx_GetPeriphCLKFreq+0x738>
  {
    /* Get the current LPUART1 source */
    srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8006b4e:	4b66      	ldr	r3, [pc, #408]	@ (8006ce8 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8006b50:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006b54:	f003 0307 	and.w	r3, r3, #7
 8006b58:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 8006b5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d104      	bne.n	8006b6a <HAL_RCCEx_GetPeriphCLKFreq+0x6a2>
    {
      frequency = HAL_RCC_GetPCLK3Freq();
 8006b60:	f7fe fa2e 	bl	8004fc0 <HAL_RCC_GetPCLK3Freq>
 8006b64:	6378      	str	r0, [r7, #52]	@ 0x34
 8006b66:	f000 be57 	b.w	8007818 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 8006b6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b6c:	2b01      	cmp	r3, #1
 8006b6e:	d104      	bne.n	8006b7a <HAL_RCCEx_GetPeriphCLKFreq+0x6b2>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8006b70:	f7fe f8e2 	bl	8004d38 <HAL_RCC_GetSysClockFreq>
 8006b74:	6378      	str	r0, [r7, #52]	@ 0x34
 8006b76:	f000 be4f 	b.w	8007818 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 8006b7a:	4b5b      	ldr	r3, [pc, #364]	@ (8006ce8 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006b82:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006b86:	d106      	bne.n	8006b96 <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
 8006b88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b8a:	2b02      	cmp	r3, #2
 8006b8c:	d103      	bne.n	8006b96 <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
    {
      frequency = HSI_VALUE;
 8006b8e:	4b57      	ldr	r3, [pc, #348]	@ (8006cec <HAL_RCCEx_GetPeriphCLKFreq+0x824>)
 8006b90:	637b      	str	r3, [r7, #52]	@ 0x34
 8006b92:	f000 be41 	b.w	8007818 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 8006b96:	4b54      	ldr	r3, [pc, #336]	@ (8006ce8 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8006b98:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006b9c:	f003 0302 	and.w	r3, r3, #2
 8006ba0:	2b02      	cmp	r3, #2
 8006ba2:	d107      	bne.n	8006bb4 <HAL_RCCEx_GetPeriphCLKFreq+0x6ec>
 8006ba4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ba6:	2b03      	cmp	r3, #3
 8006ba8:	d104      	bne.n	8006bb4 <HAL_RCCEx_GetPeriphCLKFreq+0x6ec>
    {
      frequency = LSE_VALUE;
 8006baa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006bae:	637b      	str	r3, [r7, #52]	@ 0x34
 8006bb0:	f000 be32 	b.w	8007818 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_MSIK))
 8006bb4:	4b4c      	ldr	r3, [pc, #304]	@ (8006ce8 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	f003 0320 	and.w	r3, r3, #32
 8006bbc:	2b20      	cmp	r3, #32
 8006bbe:	d11b      	bne.n	8006bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x730>
 8006bc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bc2:	2b04      	cmp	r3, #4
 8006bc4:	d118      	bne.n	8006bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x730>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006bc6:	4b48      	ldr	r3, [pc, #288]	@ (8006ce8 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8006bc8:	689b      	ldr	r3, [r3, #8]
 8006bca:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d005      	beq.n	8006bde <HAL_RCCEx_GetPeriphCLKFreq+0x716>
 8006bd2:	4b45      	ldr	r3, [pc, #276]	@ (8006ce8 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8006bd4:	689b      	ldr	r3, [r3, #8]
 8006bd6:	0e1b      	lsrs	r3, r3, #24
 8006bd8:	f003 030f 	and.w	r3, r3, #15
 8006bdc:	e006      	b.n	8006bec <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8006bde:	4b42      	ldr	r3, [pc, #264]	@ (8006ce8 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8006be0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006be4:	041b      	lsls	r3, r3, #16
 8006be6:	0e1b      	lsrs	r3, r3, #24
 8006be8:	f003 030f 	and.w	r3, r3, #15
 8006bec:	4a40      	ldr	r2, [pc, #256]	@ (8006cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x828>)
 8006bee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006bf2:	637b      	str	r3, [r7, #52]	@ 0x34
 8006bf4:	f000 be10 	b.w	8007818 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for LPUART1 */
    else
    {
      frequency = 0U;
 8006bf8:	2300      	movs	r3, #0
 8006bfa:	637b      	str	r3, [r7, #52]	@ 0x34
 8006bfc:	f000 be0c 	b.w	8007818 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADCDAC)
 8006c00:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006c04:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 8006c08:	430b      	orrs	r3, r1
 8006c0a:	d173      	bne.n	8006cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x82c>
  {
    srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 8006c0c:	4b36      	ldr	r3, [pc, #216]	@ (8006ce8 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8006c0e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006c12:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8006c16:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 8006c18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c1a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006c1e:	d104      	bne.n	8006c2a <HAL_RCCEx_GetPeriphCLKFreq+0x762>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8006c20:	f7fe f88a 	bl	8004d38 <HAL_RCC_GetSysClockFreq>
 8006c24:	6378      	str	r0, [r7, #52]	@ 0x34
 8006c26:	f000 bdf7 	b.w	8007818 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2)
 8006c2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c2c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006c30:	d108      	bne.n	8006c44 <HAL_RCCEx_GetPeriphCLKFreq+0x77c>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006c32:	f107 0318 	add.w	r3, r7, #24
 8006c36:	4618      	mov	r0, r3
 8006c38:	f7ff f992 	bl	8005f60 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_R_Frequency;
 8006c3c:	6a3b      	ldr	r3, [r7, #32]
 8006c3e:	637b      	str	r3, [r7, #52]	@ 0x34
 8006c40:	f000 bdea 	b.w	8007818 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 8006c44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d104      	bne.n	8006c54 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>
    {
      frequency = HAL_RCC_GetHCLKFreq();
 8006c4a:	f7fe f977 	bl	8004f3c <HAL_RCC_GetHCLKFreq>
 8006c4e:	6378      	str	r0, [r7, #52]	@ 0x34
 8006c50:	f000 bde2 	b.w	8007818 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_MSIK)
 8006c54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c56:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8006c5a:	d122      	bne.n	8006ca2 <HAL_RCCEx_GetPeriphCLKFreq+0x7da>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8006c5c:	4b22      	ldr	r3, [pc, #136]	@ (8006ce8 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	f003 0320 	and.w	r3, r3, #32
 8006c64:	2b20      	cmp	r3, #32
 8006c66:	d118      	bne.n	8006c9a <HAL_RCCEx_GetPeriphCLKFreq+0x7d2>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006c68:	4b1f      	ldr	r3, [pc, #124]	@ (8006ce8 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8006c6a:	689b      	ldr	r3, [r3, #8]
 8006c6c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d005      	beq.n	8006c80 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
 8006c74:	4b1c      	ldr	r3, [pc, #112]	@ (8006ce8 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8006c76:	689b      	ldr	r3, [r3, #8]
 8006c78:	0e1b      	lsrs	r3, r3, #24
 8006c7a:	f003 030f 	and.w	r3, r3, #15
 8006c7e:	e006      	b.n	8006c8e <HAL_RCCEx_GetPeriphCLKFreq+0x7c6>
 8006c80:	4b19      	ldr	r3, [pc, #100]	@ (8006ce8 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8006c82:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006c86:	041b      	lsls	r3, r3, #16
 8006c88:	0e1b      	lsrs	r3, r3, #24
 8006c8a:	f003 030f 	and.w	r3, r3, #15
 8006c8e:	4a18      	ldr	r2, [pc, #96]	@ (8006cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x828>)
 8006c90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006c94:	637b      	str	r3, [r7, #52]	@ 0x34
 8006c96:	f000 bdbf 	b.w	8007818 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = 0U;
 8006c9a:	2300      	movs	r3, #0
 8006c9c:	637b      	str	r3, [r7, #52]	@ 0x34
 8006c9e:	f000 bdbb 	b.w	8007818 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 8006ca2:	4b11      	ldr	r3, [pc, #68]	@ (8006ce8 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006caa:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006cae:	d107      	bne.n	8006cc0 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>
 8006cb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cb2:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006cb6:	d103      	bne.n	8006cc0 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>
    {
      frequency = HSE_VALUE;
 8006cb8:	4b0c      	ldr	r3, [pc, #48]	@ (8006cec <HAL_RCCEx_GetPeriphCLKFreq+0x824>)
 8006cba:	637b      	str	r3, [r7, #52]	@ 0x34
 8006cbc:	f000 bdac 	b.w	8007818 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 8006cc0:	4b09      	ldr	r3, [pc, #36]	@ (8006ce8 <HAL_RCCEx_GetPeriphCLKFreq+0x820>)
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006cc8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006ccc:	d107      	bne.n	8006cde <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 8006cce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cd0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006cd4:	d103      	bne.n	8006cde <HAL_RCCEx_GetPeriphCLKFreq+0x816>
    {
      frequency = HSI_VALUE;
 8006cd6:	4b05      	ldr	r3, [pc, #20]	@ (8006cec <HAL_RCCEx_GetPeriphCLKFreq+0x824>)
 8006cd8:	637b      	str	r3, [r7, #52]	@ 0x34
 8006cda:	f000 bd9d 	b.w	8007818 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for ADC */
    else
    {
      frequency = 0U;
 8006cde:	2300      	movs	r3, #0
 8006ce0:	637b      	str	r3, [r7, #52]	@ 0x34
 8006ce2:	f000 bd99 	b.w	8007818 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
 8006ce6:	bf00      	nop
 8006ce8:	46020c00 	.word	0x46020c00
 8006cec:	00f42400 	.word	0x00f42400
 8006cf0:	0800db78 	.word	0x0800db78
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_MDF1)
 8006cf4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006cf8:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 8006cfc:	430b      	orrs	r3, r1
 8006cfe:	d158      	bne.n	8006db2 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
  {
    /* Get the current MDF1 source */
    srcclk = __HAL_RCC_GET_MDF1_SOURCE();
 8006d00:	4bad      	ldr	r3, [pc, #692]	@ (8006fb8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8006d02:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006d06:	f003 0307 	and.w	r3, r3, #7
 8006d0a:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8006d0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d0e:	2b04      	cmp	r3, #4
 8006d10:	d84b      	bhi.n	8006daa <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 8006d12:	a201      	add	r2, pc, #4	@ (adr r2, 8006d18 <HAL_RCCEx_GetPeriphCLKFreq+0x850>)
 8006d14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d18:	08006d51 	.word	0x08006d51
 8006d1c:	08006d2d 	.word	0x08006d2d
 8006d20:	08006d3f 	.word	0x08006d3f
 8006d24:	08006d5b 	.word	0x08006d5b
 8006d28:	08006d65 	.word	0x08006d65
    {
      case RCC_MDF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006d2c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006d30:	4618      	mov	r0, r3
 8006d32:	f7fe ffbb 	bl	8005cac <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8006d36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d38:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006d3a:	f000 bd6d 	b.w	8007818 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_MDF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006d3e:	f107 030c 	add.w	r3, r7, #12
 8006d42:	4618      	mov	r0, r3
 8006d44:	f7ff fa66 	bl	8006214 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 8006d48:	693b      	ldr	r3, [r7, #16]
 8006d4a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006d4c:	f000 bd64 	b.w	8007818 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_MDF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 8006d50:	f7fe f8f4 	bl	8004f3c <HAL_RCC_GetHCLKFreq>
 8006d54:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8006d56:	f000 bd5f 	b.w	8007818 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_MDF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8006d5a:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8006d5e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006d60:	f000 bd5a 	b.w	8007818 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_MDF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8006d64:	4b94      	ldr	r3, [pc, #592]	@ (8006fb8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	f003 0320 	and.w	r3, r3, #32
 8006d6c:	2b20      	cmp	r3, #32
 8006d6e:	d118      	bne.n	8006da2 <HAL_RCCEx_GetPeriphCLKFreq+0x8da>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006d70:	4b91      	ldr	r3, [pc, #580]	@ (8006fb8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8006d72:	689b      	ldr	r3, [r3, #8]
 8006d74:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d005      	beq.n	8006d88 <HAL_RCCEx_GetPeriphCLKFreq+0x8c0>
 8006d7c:	4b8e      	ldr	r3, [pc, #568]	@ (8006fb8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8006d7e:	689b      	ldr	r3, [r3, #8]
 8006d80:	0e1b      	lsrs	r3, r3, #24
 8006d82:	f003 030f 	and.w	r3, r3, #15
 8006d86:	e006      	b.n	8006d96 <HAL_RCCEx_GetPeriphCLKFreq+0x8ce>
 8006d88:	4b8b      	ldr	r3, [pc, #556]	@ (8006fb8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8006d8a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006d8e:	041b      	lsls	r3, r3, #16
 8006d90:	0e1b      	lsrs	r3, r3, #24
 8006d92:	f003 030f 	and.w	r3, r3, #15
 8006d96:	4a89      	ldr	r2, [pc, #548]	@ (8006fbc <HAL_RCCEx_GetPeriphCLKFreq+0xaf4>)
 8006d98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006d9c:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006d9e:	f000 bd3b 	b.w	8007818 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8006da2:	2300      	movs	r3, #0
 8006da4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006da6:	f000 bd37 	b.w	8007818 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default:

        frequency = 0U;
 8006daa:	2300      	movs	r3, #0
 8006dac:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006dae:	f000 bd33 	b.w	8007818 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADF1)
 8006db2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006db6:	f5a2 3100 	sub.w	r1, r2, #131072	@ 0x20000
 8006dba:	430b      	orrs	r3, r1
 8006dbc:	d167      	bne.n	8006e8e <HAL_RCCEx_GetPeriphCLKFreq+0x9c6>
  {
    /* Get the current ADF1 source */
    srcclk = __HAL_RCC_GET_ADF1_SOURCE();
 8006dbe:	4b7e      	ldr	r3, [pc, #504]	@ (8006fb8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8006dc0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006dc4:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8006dc8:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8006dca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006dcc:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006dd0:	d036      	beq.n	8006e40 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
 8006dd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006dd4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006dd8:	d855      	bhi.n	8006e86 <HAL_RCCEx_GetPeriphCLKFreq+0x9be>
 8006dda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ddc:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006de0:	d029      	beq.n	8006e36 <HAL_RCCEx_GetPeriphCLKFreq+0x96e>
 8006de2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006de4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006de8:	d84d      	bhi.n	8006e86 <HAL_RCCEx_GetPeriphCLKFreq+0x9be>
 8006dea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006dec:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006df0:	d013      	beq.n	8006e1a <HAL_RCCEx_GetPeriphCLKFreq+0x952>
 8006df2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006df4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006df8:	d845      	bhi.n	8006e86 <HAL_RCCEx_GetPeriphCLKFreq+0x9be>
 8006dfa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d015      	beq.n	8006e2c <HAL_RCCEx_GetPeriphCLKFreq+0x964>
 8006e00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e02:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006e06:	d13e      	bne.n	8006e86 <HAL_RCCEx_GetPeriphCLKFreq+0x9be>
    {
      case RCC_ADF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006e08:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006e0c:	4618      	mov	r0, r3
 8006e0e:	f7fe ff4d 	bl	8005cac <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8006e12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e14:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006e16:	f000 bcff 	b.w	8007818 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_ADF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006e1a:	f107 030c 	add.w	r3, r7, #12
 8006e1e:	4618      	mov	r0, r3
 8006e20:	f7ff f9f8 	bl	8006214 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 8006e24:	693b      	ldr	r3, [r7, #16]
 8006e26:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006e28:	f000 bcf6 	b.w	8007818 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_ADF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 8006e2c:	f7fe f886 	bl	8004f3c <HAL_RCC_GetHCLKFreq>
 8006e30:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8006e32:	f000 bcf1 	b.w	8007818 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_ADF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8006e36:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8006e3a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006e3c:	f000 bcec 	b.w	8007818 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_ADF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8006e40:	4b5d      	ldr	r3, [pc, #372]	@ (8006fb8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	f003 0320 	and.w	r3, r3, #32
 8006e48:	2b20      	cmp	r3, #32
 8006e4a:	d118      	bne.n	8006e7e <HAL_RCCEx_GetPeriphCLKFreq+0x9b6>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006e4c:	4b5a      	ldr	r3, [pc, #360]	@ (8006fb8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8006e4e:	689b      	ldr	r3, [r3, #8]
 8006e50:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d005      	beq.n	8006e64 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>
 8006e58:	4b57      	ldr	r3, [pc, #348]	@ (8006fb8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8006e5a:	689b      	ldr	r3, [r3, #8]
 8006e5c:	0e1b      	lsrs	r3, r3, #24
 8006e5e:	f003 030f 	and.w	r3, r3, #15
 8006e62:	e006      	b.n	8006e72 <HAL_RCCEx_GetPeriphCLKFreq+0x9aa>
 8006e64:	4b54      	ldr	r3, [pc, #336]	@ (8006fb8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8006e66:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006e6a:	041b      	lsls	r3, r3, #16
 8006e6c:	0e1b      	lsrs	r3, r3, #24
 8006e6e:	f003 030f 	and.w	r3, r3, #15
 8006e72:	4a52      	ldr	r2, [pc, #328]	@ (8006fbc <HAL_RCCEx_GetPeriphCLKFreq+0xaf4>)
 8006e74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006e78:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006e7a:	f000 bccd 	b.w	8007818 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8006e7e:	2300      	movs	r3, #0
 8006e80:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006e82:	f000 bcc9 	b.w	8007818 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default:

        frequency = 0U;
 8006e86:	2300      	movs	r3, #0
 8006e88:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006e8a:	f000 bcc5 	b.w	8007818 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C1)
 8006e8e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006e92:	f1a2 0140 	sub.w	r1, r2, #64	@ 0x40
 8006e96:	430b      	orrs	r3, r1
 8006e98:	d14c      	bne.n	8006f34 <HAL_RCCEx_GetPeriphCLKFreq+0xa6c>
  {
    /* Get the current I2C1 source */
    srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8006e9a:	4b47      	ldr	r3, [pc, #284]	@ (8006fb8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8006e9c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006ea0:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8006ea4:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 8006ea6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d104      	bne.n	8006eb6 <HAL_RCCEx_GetPeriphCLKFreq+0x9ee>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8006eac:	f7fe f860 	bl	8004f70 <HAL_RCC_GetPCLK1Freq>
 8006eb0:	6378      	str	r0, [r7, #52]	@ 0x34
 8006eb2:	f000 bcb1 	b.w	8007818 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 8006eb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006eb8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006ebc:	d104      	bne.n	8006ec8 <HAL_RCCEx_GetPeriphCLKFreq+0xa00>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8006ebe:	f7fd ff3b 	bl	8004d38 <HAL_RCC_GetSysClockFreq>
 8006ec2:	6378      	str	r0, [r7, #52]	@ 0x34
 8006ec4:	f000 bca8 	b.w	8007818 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 8006ec8:	4b3b      	ldr	r3, [pc, #236]	@ (8006fb8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006ed0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006ed4:	d107      	bne.n	8006ee6 <HAL_RCCEx_GetPeriphCLKFreq+0xa1e>
 8006ed6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ed8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006edc:	d103      	bne.n	8006ee6 <HAL_RCCEx_GetPeriphCLKFreq+0xa1e>
    {
      frequency = HSI_VALUE;
 8006ede:	4b38      	ldr	r3, [pc, #224]	@ (8006fc0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8006ee0:	637b      	str	r3, [r7, #52]	@ 0x34
 8006ee2:	f000 bc99 	b.w	8007818 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C1CLKSOURCE_MSIK))
 8006ee6:	4b34      	ldr	r3, [pc, #208]	@ (8006fb8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	f003 0320 	and.w	r3, r3, #32
 8006eee:	2b20      	cmp	r3, #32
 8006ef0:	d11c      	bne.n	8006f2c <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
 8006ef2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ef4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006ef8:	d118      	bne.n	8006f2c <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006efa:	4b2f      	ldr	r3, [pc, #188]	@ (8006fb8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8006efc:	689b      	ldr	r3, [r3, #8]
 8006efe:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d005      	beq.n	8006f12 <HAL_RCCEx_GetPeriphCLKFreq+0xa4a>
 8006f06:	4b2c      	ldr	r3, [pc, #176]	@ (8006fb8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8006f08:	689b      	ldr	r3, [r3, #8]
 8006f0a:	0e1b      	lsrs	r3, r3, #24
 8006f0c:	f003 030f 	and.w	r3, r3, #15
 8006f10:	e006      	b.n	8006f20 <HAL_RCCEx_GetPeriphCLKFreq+0xa58>
 8006f12:	4b29      	ldr	r3, [pc, #164]	@ (8006fb8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8006f14:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006f18:	041b      	lsls	r3, r3, #16
 8006f1a:	0e1b      	lsrs	r3, r3, #24
 8006f1c:	f003 030f 	and.w	r3, r3, #15
 8006f20:	4a26      	ldr	r2, [pc, #152]	@ (8006fbc <HAL_RCCEx_GetPeriphCLKFreq+0xaf4>)
 8006f22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006f26:	637b      	str	r3, [r7, #52]	@ 0x34
 8006f28:	f000 bc76 	b.w	8007818 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for I2C1 */
    else
    {
      frequency = 0U;
 8006f2c:	2300      	movs	r3, #0
 8006f2e:	637b      	str	r3, [r7, #52]	@ 0x34
 8006f30:	f000 bc72 	b.w	8007818 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C2)
 8006f34:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006f38:	f1a2 0180 	sub.w	r1, r2, #128	@ 0x80
 8006f3c:	430b      	orrs	r3, r1
 8006f3e:	d152      	bne.n	8006fe6 <HAL_RCCEx_GetPeriphCLKFreq+0xb1e>
  {
    /* Get the current I2C2 source */
    srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8006f40:	4b1d      	ldr	r3, [pc, #116]	@ (8006fb8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8006f42:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006f46:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8006f4a:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 8006f4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d104      	bne.n	8006f5c <HAL_RCCEx_GetPeriphCLKFreq+0xa94>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8006f52:	f7fe f80d 	bl	8004f70 <HAL_RCC_GetPCLK1Freq>
 8006f56:	6378      	str	r0, [r7, #52]	@ 0x34
 8006f58:	f000 bc5e 	b.w	8007818 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_I2C2CLKSOURCE_SYSCLK)
 8006f5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f5e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006f62:	d104      	bne.n	8006f6e <HAL_RCCEx_GetPeriphCLKFreq+0xaa6>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8006f64:	f7fd fee8 	bl	8004d38 <HAL_RCC_GetSysClockFreq>
 8006f68:	6378      	str	r0, [r7, #52]	@ 0x34
 8006f6a:	f000 bc55 	b.w	8007818 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 8006f6e:	4b12      	ldr	r3, [pc, #72]	@ (8006fb8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006f76:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006f7a:	d107      	bne.n	8006f8c <HAL_RCCEx_GetPeriphCLKFreq+0xac4>
 8006f7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f7e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006f82:	d103      	bne.n	8006f8c <HAL_RCCEx_GetPeriphCLKFreq+0xac4>
    {
      frequency = HSI_VALUE;
 8006f84:	4b0e      	ldr	r3, [pc, #56]	@ (8006fc0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8006f86:	637b      	str	r3, [r7, #52]	@ 0x34
 8006f88:	f000 bc46 	b.w	8007818 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C2CLKSOURCE_MSIK))
 8006f8c:	4b0a      	ldr	r3, [pc, #40]	@ (8006fb8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	f003 0320 	and.w	r3, r3, #32
 8006f94:	2b20      	cmp	r3, #32
 8006f96:	d122      	bne.n	8006fde <HAL_RCCEx_GetPeriphCLKFreq+0xb16>
 8006f98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f9a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006f9e:	d11e      	bne.n	8006fde <HAL_RCCEx_GetPeriphCLKFreq+0xb16>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006fa0:	4b05      	ldr	r3, [pc, #20]	@ (8006fb8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8006fa2:	689b      	ldr	r3, [r3, #8]
 8006fa4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d00b      	beq.n	8006fc4 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>
 8006fac:	4b02      	ldr	r3, [pc, #8]	@ (8006fb8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf0>)
 8006fae:	689b      	ldr	r3, [r3, #8]
 8006fb0:	0e1b      	lsrs	r3, r3, #24
 8006fb2:	f003 030f 	and.w	r3, r3, #15
 8006fb6:	e00c      	b.n	8006fd2 <HAL_RCCEx_GetPeriphCLKFreq+0xb0a>
 8006fb8:	46020c00 	.word	0x46020c00
 8006fbc:	0800db78 	.word	0x0800db78
 8006fc0:	00f42400 	.word	0x00f42400
 8006fc4:	4ba1      	ldr	r3, [pc, #644]	@ (800724c <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8006fc6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006fca:	041b      	lsls	r3, r3, #16
 8006fcc:	0e1b      	lsrs	r3, r3, #24
 8006fce:	f003 030f 	and.w	r3, r3, #15
 8006fd2:	4a9f      	ldr	r2, [pc, #636]	@ (8007250 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8006fd4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006fd8:	637b      	str	r3, [r7, #52]	@ 0x34
 8006fda:	f000 bc1d 	b.w	8007818 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for I2C2 */
    else
    {
      frequency = 0U;
 8006fde:	2300      	movs	r3, #0
 8006fe0:	637b      	str	r3, [r7, #52]	@ 0x34
 8006fe2:	f000 bc19 	b.w	8007818 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C3)
 8006fe6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006fea:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 8006fee:	430b      	orrs	r3, r1
 8006ff0:	d151      	bne.n	8007096 <HAL_RCCEx_GetPeriphCLKFreq+0xbce>
  {
    /* Get the current I2C3 source */
    srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8006ff2:	4b96      	ldr	r3, [pc, #600]	@ (800724c <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8006ff4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006ff8:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8006ffc:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8006ffe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007000:	2bc0      	cmp	r3, #192	@ 0xc0
 8007002:	d024      	beq.n	800704e <HAL_RCCEx_GetPeriphCLKFreq+0xb86>
 8007004:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007006:	2bc0      	cmp	r3, #192	@ 0xc0
 8007008:	d842      	bhi.n	8007090 <HAL_RCCEx_GetPeriphCLKFreq+0xbc8>
 800700a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800700c:	2b80      	cmp	r3, #128	@ 0x80
 800700e:	d00d      	beq.n	800702c <HAL_RCCEx_GetPeriphCLKFreq+0xb64>
 8007010:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007012:	2b80      	cmp	r3, #128	@ 0x80
 8007014:	d83c      	bhi.n	8007090 <HAL_RCCEx_GetPeriphCLKFreq+0xbc8>
 8007016:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007018:	2b00      	cmp	r3, #0
 800701a:	d003      	beq.n	8007024 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
 800701c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800701e:	2b40      	cmp	r3, #64	@ 0x40
 8007020:	d011      	beq.n	8007046 <HAL_RCCEx_GetPeriphCLKFreq+0xb7e>
 8007022:	e035      	b.n	8007090 <HAL_RCCEx_GetPeriphCLKFreq+0xbc8>
    {
      case RCC_I2C3CLKSOURCE_PCLK3:
      {
        frequency = HAL_RCC_GetPCLK3Freq();
 8007024:	f7fd ffcc 	bl	8004fc0 <HAL_RCC_GetPCLK3Freq>
 8007028:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800702a:	e3f5      	b.n	8007818 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      case RCC_I2C3CLKSOURCE_HSI:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800702c:	4b87      	ldr	r3, [pc, #540]	@ (800724c <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007034:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007038:	d102      	bne.n	8007040 <HAL_RCCEx_GetPeriphCLKFreq+0xb78>
        {
          frequency = HSI_VALUE;
 800703a:	4b86      	ldr	r3, [pc, #536]	@ (8007254 <HAL_RCCEx_GetPeriphCLKFreq+0xd8c>)
 800703c:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800703e:	e3eb      	b.n	8007818 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8007040:	2300      	movs	r3, #0
 8007042:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007044:	e3e8      	b.n	8007818 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      case RCC_I2C3CLKSOURCE_SYSCLK:
      {
        frequency = HAL_RCC_GetSysClockFreq();
 8007046:	f7fd fe77 	bl	8004d38 <HAL_RCC_GetSysClockFreq>
 800704a:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800704c:	e3e4      	b.n	8007818 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      case RCC_I2C3CLKSOURCE_MSIK:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800704e:	4b7f      	ldr	r3, [pc, #508]	@ (800724c <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	f003 0320 	and.w	r3, r3, #32
 8007056:	2b20      	cmp	r3, #32
 8007058:	d117      	bne.n	800708a <HAL_RCCEx_GetPeriphCLKFreq+0xbc2>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800705a:	4b7c      	ldr	r3, [pc, #496]	@ (800724c <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 800705c:	689b      	ldr	r3, [r3, #8]
 800705e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007062:	2b00      	cmp	r3, #0
 8007064:	d005      	beq.n	8007072 <HAL_RCCEx_GetPeriphCLKFreq+0xbaa>
 8007066:	4b79      	ldr	r3, [pc, #484]	@ (800724c <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8007068:	689b      	ldr	r3, [r3, #8]
 800706a:	0e1b      	lsrs	r3, r3, #24
 800706c:	f003 030f 	and.w	r3, r3, #15
 8007070:	e006      	b.n	8007080 <HAL_RCCEx_GetPeriphCLKFreq+0xbb8>
 8007072:	4b76      	ldr	r3, [pc, #472]	@ (800724c <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8007074:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007078:	041b      	lsls	r3, r3, #16
 800707a:	0e1b      	lsrs	r3, r3, #24
 800707c:	f003 030f 	and.w	r3, r3, #15
 8007080:	4a73      	ldr	r2, [pc, #460]	@ (8007250 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8007082:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007086:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8007088:	e3c6      	b.n	8007818 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 800708a:	2300      	movs	r3, #0
 800708c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800708e:	e3c3      	b.n	8007818 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      default:
      {
        frequency = 0U;
 8007090:	2300      	movs	r3, #0
 8007092:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007094:	e3c0      	b.n	8007818 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C4)
 8007096:	e9d7 2300 	ldrd	r2, r3, [r7]
 800709a:	f5a2 0180 	sub.w	r1, r2, #4194304	@ 0x400000
 800709e:	430b      	orrs	r3, r1
 80070a0:	d147      	bne.n	8007132 <HAL_RCCEx_GetPeriphCLKFreq+0xc6a>
  {
    /* Get the current I2C4 source */
    srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 80070a2:	4b6a      	ldr	r3, [pc, #424]	@ (800724c <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 80070a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80070a8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80070ac:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C4CLKSOURCE_PCLK1)
 80070ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d103      	bne.n	80070bc <HAL_RCCEx_GetPeriphCLKFreq+0xbf4>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80070b4:	f7fd ff5c 	bl	8004f70 <HAL_RCC_GetPCLK1Freq>
 80070b8:	6378      	str	r0, [r7, #52]	@ 0x34
 80070ba:	e3ad      	b.n	8007818 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_I2C4CLKSOURCE_SYSCLK)
 80070bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070be:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80070c2:	d103      	bne.n	80070cc <HAL_RCCEx_GetPeriphCLKFreq+0xc04>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80070c4:	f7fd fe38 	bl	8004d38 <HAL_RCC_GetSysClockFreq>
 80070c8:	6378      	str	r0, [r7, #52]	@ 0x34
 80070ca:	e3a5      	b.n	8007818 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 80070cc:	4b5f      	ldr	r3, [pc, #380]	@ (800724c <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80070d4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80070d8:	d106      	bne.n	80070e8 <HAL_RCCEx_GetPeriphCLKFreq+0xc20>
 80070da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070dc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80070e0:	d102      	bne.n	80070e8 <HAL_RCCEx_GetPeriphCLKFreq+0xc20>
    {
      frequency = HSI_VALUE;
 80070e2:	4b5c      	ldr	r3, [pc, #368]	@ (8007254 <HAL_RCCEx_GetPeriphCLKFreq+0xd8c>)
 80070e4:	637b      	str	r3, [r7, #52]	@ 0x34
 80070e6:	e397      	b.n	8007818 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C4CLKSOURCE_MSIK))
 80070e8:	4b58      	ldr	r3, [pc, #352]	@ (800724c <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	f003 0320 	and.w	r3, r3, #32
 80070f0:	2b20      	cmp	r3, #32
 80070f2:	d11b      	bne.n	800712c <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
 80070f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070f6:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80070fa:	d117      	bne.n	800712c <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80070fc:	4b53      	ldr	r3, [pc, #332]	@ (800724c <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 80070fe:	689b      	ldr	r3, [r3, #8]
 8007100:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007104:	2b00      	cmp	r3, #0
 8007106:	d005      	beq.n	8007114 <HAL_RCCEx_GetPeriphCLKFreq+0xc4c>
 8007108:	4b50      	ldr	r3, [pc, #320]	@ (800724c <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 800710a:	689b      	ldr	r3, [r3, #8]
 800710c:	0e1b      	lsrs	r3, r3, #24
 800710e:	f003 030f 	and.w	r3, r3, #15
 8007112:	e006      	b.n	8007122 <HAL_RCCEx_GetPeriphCLKFreq+0xc5a>
 8007114:	4b4d      	ldr	r3, [pc, #308]	@ (800724c <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8007116:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800711a:	041b      	lsls	r3, r3, #16
 800711c:	0e1b      	lsrs	r3, r3, #24
 800711e:	f003 030f 	and.w	r3, r3, #15
 8007122:	4a4b      	ldr	r2, [pc, #300]	@ (8007250 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8007124:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007128:	637b      	str	r3, [r7, #52]	@ 0x34
 800712a:	e375      	b.n	8007818 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for I2C4 */
    else
    {
      frequency = 0U;
 800712c:	2300      	movs	r3, #0
 800712e:	637b      	str	r3, [r7, #52]	@ 0x34
 8007130:	e372      	b.n	8007818 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    {
      frequency = 0U;
    }
  }
#endif /* I2C6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM34)
 8007132:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007136:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 800713a:	430b      	orrs	r3, r1
 800713c:	d164      	bne.n	8007208 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>
  {
    /* Get the current LPTIM34 source */
    srcclk = __HAL_RCC_GET_LPTIM34_SOURCE();
 800713e:	4b43      	ldr	r3, [pc, #268]	@ (800724c <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8007140:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007144:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007148:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM34CLKSOURCE_MSIK)
 800714a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800714c:	2b00      	cmp	r3, #0
 800714e:	d120      	bne.n	8007192 <HAL_RCCEx_GetPeriphCLKFreq+0xcca>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8007150:	4b3e      	ldr	r3, [pc, #248]	@ (800724c <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	f003 0320 	and.w	r3, r3, #32
 8007158:	2b20      	cmp	r3, #32
 800715a:	d117      	bne.n	800718c <HAL_RCCEx_GetPeriphCLKFreq+0xcc4>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800715c:	4b3b      	ldr	r3, [pc, #236]	@ (800724c <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 800715e:	689b      	ldr	r3, [r3, #8]
 8007160:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007164:	2b00      	cmp	r3, #0
 8007166:	d005      	beq.n	8007174 <HAL_RCCEx_GetPeriphCLKFreq+0xcac>
 8007168:	4b38      	ldr	r3, [pc, #224]	@ (800724c <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 800716a:	689b      	ldr	r3, [r3, #8]
 800716c:	0e1b      	lsrs	r3, r3, #24
 800716e:	f003 030f 	and.w	r3, r3, #15
 8007172:	e006      	b.n	8007182 <HAL_RCCEx_GetPeriphCLKFreq+0xcba>
 8007174:	4b35      	ldr	r3, [pc, #212]	@ (800724c <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8007176:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800717a:	041b      	lsls	r3, r3, #16
 800717c:	0e1b      	lsrs	r3, r3, #24
 800717e:	f003 030f 	and.w	r3, r3, #15
 8007182:	4a33      	ldr	r2, [pc, #204]	@ (8007250 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8007184:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007188:	637b      	str	r3, [r7, #52]	@ 0x34
 800718a:	e345      	b.n	8007818 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = 0U;
 800718c:	2300      	movs	r3, #0
 800718e:	637b      	str	r3, [r7, #52]	@ 0x34
 8007190:	e342      	b.n	8007818 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSI))
 8007192:	4b2e      	ldr	r3, [pc, #184]	@ (800724c <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8007194:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007198:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800719c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80071a0:	d112      	bne.n	80071c8 <HAL_RCCEx_GetPeriphCLKFreq+0xd00>
 80071a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071a4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80071a8:	d10e      	bne.n	80071c8 <HAL_RCCEx_GetPeriphCLKFreq+0xd00>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80071aa:	4b28      	ldr	r3, [pc, #160]	@ (800724c <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 80071ac:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80071b0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80071b4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80071b8:	d102      	bne.n	80071c0 <HAL_RCCEx_GetPeriphCLKFreq+0xcf8>
      {
        frequency = LSI_VALUE / 128U;
 80071ba:	23fa      	movs	r3, #250	@ 0xfa
 80071bc:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80071be:	e32b      	b.n	8007818 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = LSI_VALUE;
 80071c0:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80071c4:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80071c6:	e327      	b.n	8007818 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_HSI))
 80071c8:	4b20      	ldr	r3, [pc, #128]	@ (800724c <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80071d0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80071d4:	d106      	bne.n	80071e4 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>
 80071d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071d8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80071dc:	d102      	bne.n	80071e4 <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>
    {
      frequency = HSI_VALUE;
 80071de:	4b1d      	ldr	r3, [pc, #116]	@ (8007254 <HAL_RCCEx_GetPeriphCLKFreq+0xd8c>)
 80071e0:	637b      	str	r3, [r7, #52]	@ 0x34
 80071e2:	e319      	b.n	8007818 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSE))
 80071e4:	4b19      	ldr	r3, [pc, #100]	@ (800724c <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 80071e6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80071ea:	f003 0302 	and.w	r3, r3, #2
 80071ee:	2b02      	cmp	r3, #2
 80071f0:	d107      	bne.n	8007202 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
 80071f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071f4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80071f8:	d103      	bne.n	8007202 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
    {
      frequency = LSE_VALUE;
 80071fa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80071fe:	637b      	str	r3, [r7, #52]	@ 0x34
 8007200:	e30a      	b.n	8007818 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for LPTIM34 */
    else
    {
      frequency = 0U;
 8007202:	2300      	movs	r3, #0
 8007204:	637b      	str	r3, [r7, #52]	@ 0x34
 8007206:	e307      	b.n	8007818 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM1)
 8007208:	e9d7 2300 	ldrd	r2, r3, [r7]
 800720c:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 8007210:	430b      	orrs	r3, r1
 8007212:	d16b      	bne.n	80072ec <HAL_RCCEx_GetPeriphCLKFreq+0xe24>
  {
    /* Get the current LPTIM1 source */
    srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8007214:	4b0d      	ldr	r3, [pc, #52]	@ (800724c <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8007216:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800721a:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800721e:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM1CLKSOURCE_MSIK)
 8007220:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007222:	2b00      	cmp	r3, #0
 8007224:	d127      	bne.n	8007276 <HAL_RCCEx_GetPeriphCLKFreq+0xdae>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8007226:	4b09      	ldr	r3, [pc, #36]	@ (800724c <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	f003 0320 	and.w	r3, r3, #32
 800722e:	2b20      	cmp	r3, #32
 8007230:	d11e      	bne.n	8007270 <HAL_RCCEx_GetPeriphCLKFreq+0xda8>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007232:	4b06      	ldr	r3, [pc, #24]	@ (800724c <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8007234:	689b      	ldr	r3, [r3, #8]
 8007236:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800723a:	2b00      	cmp	r3, #0
 800723c:	d00c      	beq.n	8007258 <HAL_RCCEx_GetPeriphCLKFreq+0xd90>
 800723e:	4b03      	ldr	r3, [pc, #12]	@ (800724c <HAL_RCCEx_GetPeriphCLKFreq+0xd84>)
 8007240:	689b      	ldr	r3, [r3, #8]
 8007242:	0e1b      	lsrs	r3, r3, #24
 8007244:	f003 030f 	and.w	r3, r3, #15
 8007248:	e00d      	b.n	8007266 <HAL_RCCEx_GetPeriphCLKFreq+0xd9e>
 800724a:	bf00      	nop
 800724c:	46020c00 	.word	0x46020c00
 8007250:	0800db78 	.word	0x0800db78
 8007254:	00f42400 	.word	0x00f42400
 8007258:	4b94      	ldr	r3, [pc, #592]	@ (80074ac <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 800725a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800725e:	041b      	lsls	r3, r3, #16
 8007260:	0e1b      	lsrs	r3, r3, #24
 8007262:	f003 030f 	and.w	r3, r3, #15
 8007266:	4a92      	ldr	r2, [pc, #584]	@ (80074b0 <HAL_RCCEx_GetPeriphCLKFreq+0xfe8>)
 8007268:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800726c:	637b      	str	r3, [r7, #52]	@ 0x34
 800726e:	e2d3      	b.n	8007818 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = 0U;
 8007270:	2300      	movs	r3, #0
 8007272:	637b      	str	r3, [r7, #52]	@ 0x34
 8007274:	e2d0      	b.n	8007818 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSI))
 8007276:	4b8d      	ldr	r3, [pc, #564]	@ (80074ac <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8007278:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800727c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007280:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007284:	d112      	bne.n	80072ac <HAL_RCCEx_GetPeriphCLKFreq+0xde4>
 8007286:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007288:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800728c:	d10e      	bne.n	80072ac <HAL_RCCEx_GetPeriphCLKFreq+0xde4>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800728e:	4b87      	ldr	r3, [pc, #540]	@ (80074ac <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8007290:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007294:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007298:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800729c:	d102      	bne.n	80072a4 <HAL_RCCEx_GetPeriphCLKFreq+0xddc>
      {
        frequency = LSI_VALUE / 128U;
 800729e:	23fa      	movs	r3, #250	@ 0xfa
 80072a0:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80072a2:	e2b9      	b.n	8007818 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = LSI_VALUE;
 80072a4:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80072a8:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80072aa:	e2b5      	b.n	8007818 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_HSI))
 80072ac:	4b7f      	ldr	r3, [pc, #508]	@ (80074ac <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80072b4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80072b8:	d106      	bne.n	80072c8 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>
 80072ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072bc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80072c0:	d102      	bne.n	80072c8 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>
    {
      frequency = HSI_VALUE;
 80072c2:	4b7c      	ldr	r3, [pc, #496]	@ (80074b4 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80072c4:	637b      	str	r3, [r7, #52]	@ 0x34
 80072c6:	e2a7      	b.n	8007818 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSE))
 80072c8:	4b78      	ldr	r3, [pc, #480]	@ (80074ac <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 80072ca:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80072ce:	f003 0302 	and.w	r3, r3, #2
 80072d2:	2b02      	cmp	r3, #2
 80072d4:	d107      	bne.n	80072e6 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
 80072d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072d8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80072dc:	d103      	bne.n	80072e6 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
    {
      frequency = LSE_VALUE;
 80072de:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80072e2:	637b      	str	r3, [r7, #52]	@ 0x34
 80072e4:	e298      	b.n	8007818 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for LPTIM1 */
    else
    {
      frequency = 0U;
 80072e6:	2300      	movs	r3, #0
 80072e8:	637b      	str	r3, [r7, #52]	@ 0x34
 80072ea:	e295      	b.n	8007818 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM2)
 80072ec:	e9d7 2300 	ldrd	r2, r3, [r7]
 80072f0:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 80072f4:	430b      	orrs	r3, r1
 80072f6:	d147      	bne.n	8007388 <HAL_RCCEx_GetPeriphCLKFreq+0xec0>
  {
    /* Get the current LPTIM2 source */
    srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 80072f8:	4b6c      	ldr	r3, [pc, #432]	@ (80074ac <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 80072fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80072fe:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8007302:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM2CLKSOURCE_PCLK1)
 8007304:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007306:	2b00      	cmp	r3, #0
 8007308:	d103      	bne.n	8007312 <HAL_RCCEx_GetPeriphCLKFreq+0xe4a>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800730a:	f7fd fe31 	bl	8004f70 <HAL_RCC_GetPCLK1Freq>
 800730e:	6378      	str	r0, [r7, #52]	@ 0x34
 8007310:	e282      	b.n	8007818 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSI))
 8007312:	4b66      	ldr	r3, [pc, #408]	@ (80074ac <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8007314:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007318:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800731c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007320:	d112      	bne.n	8007348 <HAL_RCCEx_GetPeriphCLKFreq+0xe80>
 8007322:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007324:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007328:	d10e      	bne.n	8007348 <HAL_RCCEx_GetPeriphCLKFreq+0xe80>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800732a:	4b60      	ldr	r3, [pc, #384]	@ (80074ac <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 800732c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007330:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007334:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007338:	d102      	bne.n	8007340 <HAL_RCCEx_GetPeriphCLKFreq+0xe78>
      {
        frequency = LSI_VALUE / 128U;
 800733a:	23fa      	movs	r3, #250	@ 0xfa
 800733c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800733e:	e26b      	b.n	8007818 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = LSI_VALUE;
 8007340:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8007344:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007346:	e267      	b.n	8007818 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_HSI))
 8007348:	4b58      	ldr	r3, [pc, #352]	@ (80074ac <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007350:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007354:	d106      	bne.n	8007364 <HAL_RCCEx_GetPeriphCLKFreq+0xe9c>
 8007356:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007358:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800735c:	d102      	bne.n	8007364 <HAL_RCCEx_GetPeriphCLKFreq+0xe9c>
    {
      frequency = HSI_VALUE;
 800735e:	4b55      	ldr	r3, [pc, #340]	@ (80074b4 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8007360:	637b      	str	r3, [r7, #52]	@ 0x34
 8007362:	e259      	b.n	8007818 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSE))
 8007364:	4b51      	ldr	r3, [pc, #324]	@ (80074ac <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8007366:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800736a:	f003 0302 	and.w	r3, r3, #2
 800736e:	2b02      	cmp	r3, #2
 8007370:	d107      	bne.n	8007382 <HAL_RCCEx_GetPeriphCLKFreq+0xeba>
 8007372:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007374:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8007378:	d103      	bne.n	8007382 <HAL_RCCEx_GetPeriphCLKFreq+0xeba>
    {
      frequency = LSE_VALUE;
 800737a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800737e:	637b      	str	r3, [r7, #52]	@ 0x34
 8007380:	e24a      	b.n	8007818 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for LPTIM2 */
    else
    {
      frequency = 0U;
 8007382:	2300      	movs	r3, #0
 8007384:	637b      	str	r3, [r7, #52]	@ 0x34
 8007386:	e247      	b.n	8007818 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN1)
 8007388:	e9d7 2300 	ldrd	r2, r3, [r7]
 800738c:	f102 4178 	add.w	r1, r2, #4160749568	@ 0xf8000000
 8007390:	430b      	orrs	r3, r1
 8007392:	d12d      	bne.n	80073f0 <HAL_RCCEx_GetPeriphCLKFreq+0xf28>
  {
    /* Get the current FDCAN1 kernel source */
    srcclk = __HAL_RCC_GET_FDCAN1_SOURCE();
 8007394:	4b45      	ldr	r3, [pc, #276]	@ (80074ac <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8007396:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800739a:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 800739e:	633b      	str	r3, [r7, #48]	@ 0x30

    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCAN1CLKSOURCE_HSE))
 80073a0:	4b42      	ldr	r3, [pc, #264]	@ (80074ac <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80073a8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80073ac:	d105      	bne.n	80073ba <HAL_RCCEx_GetPeriphCLKFreq+0xef2>
 80073ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d102      	bne.n	80073ba <HAL_RCCEx_GetPeriphCLKFreq+0xef2>
    {
      frequency = HSE_VALUE;
 80073b4:	4b3f      	ldr	r3, [pc, #252]	@ (80074b4 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80073b6:	637b      	str	r3, [r7, #52]	@ 0x34
 80073b8:	e22e      	b.n	8007818 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL1) /* PLL1 ? */
 80073ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073bc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80073c0:	d107      	bne.n	80073d2 <HAL_RCCEx_GetPeriphCLKFreq+0xf0a>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80073c2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80073c6:	4618      	mov	r0, r3
 80073c8:	f7fe fc70 	bl	8005cac <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_Q_Frequency;
 80073cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80073ce:	637b      	str	r3, [r7, #52]	@ 0x34
 80073d0:	e222      	b.n	8007818 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL2) /* PLL2 ? */
 80073d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073d4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80073d8:	d107      	bne.n	80073ea <HAL_RCCEx_GetPeriphCLKFreq+0xf22>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80073da:	f107 0318 	add.w	r3, r7, #24
 80073de:	4618      	mov	r0, r3
 80073e0:	f7fe fdbe 	bl	8005f60 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_P_Frequency;
 80073e4:	69bb      	ldr	r3, [r7, #24]
 80073e6:	637b      	str	r3, [r7, #52]	@ 0x34
 80073e8:	e216      	b.n	8007818 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for FDCAN1 */
    else
    {
      frequency = 0U;
 80073ea:	2300      	movs	r3, #0
 80073ec:	637b      	str	r3, [r7, #52]	@ 0x34
 80073ee:	e213      	b.n	8007818 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI1)
 80073f0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80073f4:	f5a2 0100 	sub.w	r1, r2, #8388608	@ 0x800000
 80073f8:	430b      	orrs	r3, r1
 80073fa:	d15d      	bne.n	80074b8 <HAL_RCCEx_GetPeriphCLKFreq+0xff0>
  {
    /* Get the current SPI1 kernel source */
    srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 80073fc:	4b2b      	ldr	r3, [pc, #172]	@ (80074ac <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 80073fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007402:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8007406:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 8007408:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800740a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800740e:	d028      	beq.n	8007462 <HAL_RCCEx_GetPeriphCLKFreq+0xf9a>
 8007410:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007412:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007416:	d845      	bhi.n	80074a4 <HAL_RCCEx_GetPeriphCLKFreq+0xfdc>
 8007418:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800741a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800741e:	d013      	beq.n	8007448 <HAL_RCCEx_GetPeriphCLKFreq+0xf80>
 8007420:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007422:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007426:	d83d      	bhi.n	80074a4 <HAL_RCCEx_GetPeriphCLKFreq+0xfdc>
 8007428:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800742a:	2b00      	cmp	r3, #0
 800742c:	d004      	beq.n	8007438 <HAL_RCCEx_GetPeriphCLKFreq+0xf70>
 800742e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007430:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007434:	d004      	beq.n	8007440 <HAL_RCCEx_GetPeriphCLKFreq+0xf78>
 8007436:	e035      	b.n	80074a4 <HAL_RCCEx_GetPeriphCLKFreq+0xfdc>
    {
      case RCC_SPI1CLKSOURCE_PCLK2:

        frequency = HAL_RCC_GetPCLK2Freq();
 8007438:	f7fd fdae 	bl	8004f98 <HAL_RCC_GetPCLK2Freq>
 800743c:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800743e:	e1eb      	b.n	8007818 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI1CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8007440:	f7fd fc7a 	bl	8004d38 <HAL_RCC_GetSysClockFreq>
 8007444:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8007446:	e1e7      	b.n	8007818 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI1CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007448:	4b18      	ldr	r3, [pc, #96]	@ (80074ac <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007450:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007454:	d102      	bne.n	800745c <HAL_RCCEx_GetPeriphCLKFreq+0xf94>
        {
          frequency = HSI_VALUE;
 8007456:	4b17      	ldr	r3, [pc, #92]	@ (80074b4 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8007458:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800745a:	e1dd      	b.n	8007818 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 800745c:	2300      	movs	r3, #0
 800745e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007460:	e1da      	b.n	8007818 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8007462:	4b12      	ldr	r3, [pc, #72]	@ (80074ac <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	f003 0320 	and.w	r3, r3, #32
 800746a:	2b20      	cmp	r3, #32
 800746c:	d117      	bne.n	800749e <HAL_RCCEx_GetPeriphCLKFreq+0xfd6>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800746e:	4b0f      	ldr	r3, [pc, #60]	@ (80074ac <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8007470:	689b      	ldr	r3, [r3, #8]
 8007472:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007476:	2b00      	cmp	r3, #0
 8007478:	d005      	beq.n	8007486 <HAL_RCCEx_GetPeriphCLKFreq+0xfbe>
 800747a:	4b0c      	ldr	r3, [pc, #48]	@ (80074ac <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 800747c:	689b      	ldr	r3, [r3, #8]
 800747e:	0e1b      	lsrs	r3, r3, #24
 8007480:	f003 030f 	and.w	r3, r3, #15
 8007484:	e006      	b.n	8007494 <HAL_RCCEx_GetPeriphCLKFreq+0xfcc>
 8007486:	4b09      	ldr	r3, [pc, #36]	@ (80074ac <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>)
 8007488:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800748c:	041b      	lsls	r3, r3, #16
 800748e:	0e1b      	lsrs	r3, r3, #24
 8007490:	f003 030f 	and.w	r3, r3, #15
 8007494:	4a06      	ldr	r2, [pc, #24]	@ (80074b0 <HAL_RCCEx_GetPeriphCLKFreq+0xfe8>)
 8007496:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800749a:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800749c:	e1bc      	b.n	8007818 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 800749e:	2300      	movs	r3, #0
 80074a0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80074a2:	e1b9      	b.n	8007818 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default:

        frequency = 0U;
 80074a4:	2300      	movs	r3, #0
 80074a6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80074a8:	e1b6      	b.n	8007818 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
 80074aa:	bf00      	nop
 80074ac:	46020c00 	.word	0x46020c00
 80074b0:	0800db78 	.word	0x0800db78
 80074b4:	00f42400 	.word	0x00f42400
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI2)
 80074b8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80074bc:	f102 417f 	add.w	r1, r2, #4278190080	@ 0xff000000
 80074c0:	430b      	orrs	r3, r1
 80074c2:	d156      	bne.n	8007572 <HAL_RCCEx_GetPeriphCLKFreq+0x10aa>
  {
    /* Get the current SPI2 kernel source */
    srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 80074c4:	4ba5      	ldr	r3, [pc, #660]	@ (800775c <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 80074c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80074ca:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80074ce:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 80074d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074d2:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80074d6:	d028      	beq.n	800752a <HAL_RCCEx_GetPeriphCLKFreq+0x1062>
 80074d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074da:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80074de:	d845      	bhi.n	800756c <HAL_RCCEx_GetPeriphCLKFreq+0x10a4>
 80074e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074e2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80074e6:	d013      	beq.n	8007510 <HAL_RCCEx_GetPeriphCLKFreq+0x1048>
 80074e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074ea:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80074ee:	d83d      	bhi.n	800756c <HAL_RCCEx_GetPeriphCLKFreq+0x10a4>
 80074f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d004      	beq.n	8007500 <HAL_RCCEx_GetPeriphCLKFreq+0x1038>
 80074f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074f8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80074fc:	d004      	beq.n	8007508 <HAL_RCCEx_GetPeriphCLKFreq+0x1040>
 80074fe:	e035      	b.n	800756c <HAL_RCCEx_GetPeriphCLKFreq+0x10a4>
    {
      case RCC_SPI2CLKSOURCE_PCLK1:

        frequency = HAL_RCC_GetPCLK1Freq();
 8007500:	f7fd fd36 	bl	8004f70 <HAL_RCC_GetPCLK1Freq>
 8007504:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8007506:	e187      	b.n	8007818 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI2CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8007508:	f7fd fc16 	bl	8004d38 <HAL_RCC_GetSysClockFreq>
 800750c:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800750e:	e183      	b.n	8007818 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI2CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007510:	4b92      	ldr	r3, [pc, #584]	@ (800775c <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007518:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800751c:	d102      	bne.n	8007524 <HAL_RCCEx_GetPeriphCLKFreq+0x105c>
        {
          frequency = HSI_VALUE;
 800751e:	4b90      	ldr	r3, [pc, #576]	@ (8007760 <HAL_RCCEx_GetPeriphCLKFreq+0x1298>)
 8007520:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8007522:	e179      	b.n	8007818 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8007524:	2300      	movs	r3, #0
 8007526:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007528:	e176      	b.n	8007818 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI2CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800752a:	4b8c      	ldr	r3, [pc, #560]	@ (800775c <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	f003 0320 	and.w	r3, r3, #32
 8007532:	2b20      	cmp	r3, #32
 8007534:	d117      	bne.n	8007566 <HAL_RCCEx_GetPeriphCLKFreq+0x109e>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007536:	4b89      	ldr	r3, [pc, #548]	@ (800775c <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8007538:	689b      	ldr	r3, [r3, #8]
 800753a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800753e:	2b00      	cmp	r3, #0
 8007540:	d005      	beq.n	800754e <HAL_RCCEx_GetPeriphCLKFreq+0x1086>
 8007542:	4b86      	ldr	r3, [pc, #536]	@ (800775c <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8007544:	689b      	ldr	r3, [r3, #8]
 8007546:	0e1b      	lsrs	r3, r3, #24
 8007548:	f003 030f 	and.w	r3, r3, #15
 800754c:	e006      	b.n	800755c <HAL_RCCEx_GetPeriphCLKFreq+0x1094>
 800754e:	4b83      	ldr	r3, [pc, #524]	@ (800775c <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8007550:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007554:	041b      	lsls	r3, r3, #16
 8007556:	0e1b      	lsrs	r3, r3, #24
 8007558:	f003 030f 	and.w	r3, r3, #15
 800755c:	4a81      	ldr	r2, [pc, #516]	@ (8007764 <HAL_RCCEx_GetPeriphCLKFreq+0x129c>)
 800755e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007562:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8007564:	e158      	b.n	8007818 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8007566:	2300      	movs	r3, #0
 8007568:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800756a:	e155      	b.n	8007818 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default:

        frequency = 0U;
 800756c:	2300      	movs	r3, #0
 800756e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007570:	e152      	b.n	8007818 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI3)
 8007572:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007576:	f102 417e 	add.w	r1, r2, #4261412864	@ 0xfe000000
 800757a:	430b      	orrs	r3, r1
 800757c:	d177      	bne.n	800766e <HAL_RCCEx_GetPeriphCLKFreq+0x11a6>
  {
    /* Get the current SPI3 kernel source */
    srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 800757e:	4b77      	ldr	r3, [pc, #476]	@ (800775c <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8007580:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007584:	f003 0318 	and.w	r3, r3, #24
 8007588:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 800758a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800758c:	2b18      	cmp	r3, #24
 800758e:	d86b      	bhi.n	8007668 <HAL_RCCEx_GetPeriphCLKFreq+0x11a0>
 8007590:	a201      	add	r2, pc, #4	@ (adr r2, 8007598 <HAL_RCCEx_GetPeriphCLKFreq+0x10d0>)
 8007592:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007596:	bf00      	nop
 8007598:	080075fd 	.word	0x080075fd
 800759c:	08007669 	.word	0x08007669
 80075a0:	08007669 	.word	0x08007669
 80075a4:	08007669 	.word	0x08007669
 80075a8:	08007669 	.word	0x08007669
 80075ac:	08007669 	.word	0x08007669
 80075b0:	08007669 	.word	0x08007669
 80075b4:	08007669 	.word	0x08007669
 80075b8:	08007605 	.word	0x08007605
 80075bc:	08007669 	.word	0x08007669
 80075c0:	08007669 	.word	0x08007669
 80075c4:	08007669 	.word	0x08007669
 80075c8:	08007669 	.word	0x08007669
 80075cc:	08007669 	.word	0x08007669
 80075d0:	08007669 	.word	0x08007669
 80075d4:	08007669 	.word	0x08007669
 80075d8:	0800760d 	.word	0x0800760d
 80075dc:	08007669 	.word	0x08007669
 80075e0:	08007669 	.word	0x08007669
 80075e4:	08007669 	.word	0x08007669
 80075e8:	08007669 	.word	0x08007669
 80075ec:	08007669 	.word	0x08007669
 80075f0:	08007669 	.word	0x08007669
 80075f4:	08007669 	.word	0x08007669
 80075f8:	08007627 	.word	0x08007627
    {
      case RCC_SPI3CLKSOURCE_PCLK3:

        frequency = HAL_RCC_GetPCLK3Freq();
 80075fc:	f7fd fce0 	bl	8004fc0 <HAL_RCC_GetPCLK3Freq>
 8007600:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8007602:	e109      	b.n	8007818 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI3CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8007604:	f7fd fb98 	bl	8004d38 <HAL_RCC_GetSysClockFreq>
 8007608:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800760a:	e105      	b.n	8007818 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI3CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800760c:	4b53      	ldr	r3, [pc, #332]	@ (800775c <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007614:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007618:	d102      	bne.n	8007620 <HAL_RCCEx_GetPeriphCLKFreq+0x1158>
        {
          frequency = HSI_VALUE;
 800761a:	4b51      	ldr	r3, [pc, #324]	@ (8007760 <HAL_RCCEx_GetPeriphCLKFreq+0x1298>)
 800761c:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800761e:	e0fb      	b.n	8007818 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8007620:	2300      	movs	r3, #0
 8007622:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007624:	e0f8      	b.n	8007818 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI3CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8007626:	4b4d      	ldr	r3, [pc, #308]	@ (800775c <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	f003 0320 	and.w	r3, r3, #32
 800762e:	2b20      	cmp	r3, #32
 8007630:	d117      	bne.n	8007662 <HAL_RCCEx_GetPeriphCLKFreq+0x119a>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007632:	4b4a      	ldr	r3, [pc, #296]	@ (800775c <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8007634:	689b      	ldr	r3, [r3, #8]
 8007636:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800763a:	2b00      	cmp	r3, #0
 800763c:	d005      	beq.n	800764a <HAL_RCCEx_GetPeriphCLKFreq+0x1182>
 800763e:	4b47      	ldr	r3, [pc, #284]	@ (800775c <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8007640:	689b      	ldr	r3, [r3, #8]
 8007642:	0e1b      	lsrs	r3, r3, #24
 8007644:	f003 030f 	and.w	r3, r3, #15
 8007648:	e006      	b.n	8007658 <HAL_RCCEx_GetPeriphCLKFreq+0x1190>
 800764a:	4b44      	ldr	r3, [pc, #272]	@ (800775c <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 800764c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007650:	041b      	lsls	r3, r3, #16
 8007652:	0e1b      	lsrs	r3, r3, #24
 8007654:	f003 030f 	and.w	r3, r3, #15
 8007658:	4a42      	ldr	r2, [pc, #264]	@ (8007764 <HAL_RCCEx_GetPeriphCLKFreq+0x129c>)
 800765a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800765e:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8007660:	e0da      	b.n	8007818 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 8007662:	2300      	movs	r3, #0
 8007664:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007666:	e0d7      	b.n	8007818 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default:

        frequency = 0U;
 8007668:	2300      	movs	r3, #0
 800766a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800766c:	e0d4      	b.n	8007818 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_OSPI)
 800766e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007672:	f102 417c 	add.w	r1, r2, #4227858432	@ 0xfc000000
 8007676:	430b      	orrs	r3, r1
 8007678:	d155      	bne.n	8007726 <HAL_RCCEx_GetPeriphCLKFreq+0x125e>
  {
    /* Get the current OSPI kernel source */
    srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 800767a:	4b38      	ldr	r3, [pc, #224]	@ (800775c <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 800767c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007680:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8007684:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8007686:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007688:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800768c:	d013      	beq.n	80076b6 <HAL_RCCEx_GetPeriphCLKFreq+0x11ee>
 800768e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007690:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007694:	d844      	bhi.n	8007720 <HAL_RCCEx_GetPeriphCLKFreq+0x1258>
 8007696:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007698:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800769c:	d013      	beq.n	80076c6 <HAL_RCCEx_GetPeriphCLKFreq+0x11fe>
 800769e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076a0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80076a4:	d83c      	bhi.n	8007720 <HAL_RCCEx_GetPeriphCLKFreq+0x1258>
 80076a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d014      	beq.n	80076d6 <HAL_RCCEx_GetPeriphCLKFreq+0x120e>
 80076ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076ae:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80076b2:	d014      	beq.n	80076de <HAL_RCCEx_GetPeriphCLKFreq+0x1216>
 80076b4:	e034      	b.n	8007720 <HAL_RCCEx_GetPeriphCLKFreq+0x1258>
    {
      case RCC_OSPICLKSOURCE_PLL2:

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80076b6:	f107 0318 	add.w	r3, r7, #24
 80076ba:	4618      	mov	r0, r3
 80076bc:	f7fe fc50 	bl	8005f60 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 80076c0:	69fb      	ldr	r3, [r7, #28]
 80076c2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80076c4:	e0a8      	b.n	8007818 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_OSPICLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80076c6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80076ca:	4618      	mov	r0, r3
 80076cc:	f7fe faee 	bl	8005cac <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 80076d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80076d2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80076d4:	e0a0      	b.n	8007818 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_OSPICLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 80076d6:	f7fd fb2f 	bl	8004d38 <HAL_RCC_GetSysClockFreq>
 80076da:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 80076dc:	e09c      	b.n	8007818 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_OSPICLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80076de:	4b1f      	ldr	r3, [pc, #124]	@ (800775c <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	f003 0320 	and.w	r3, r3, #32
 80076e6:	2b20      	cmp	r3, #32
 80076e8:	d117      	bne.n	800771a <HAL_RCCEx_GetPeriphCLKFreq+0x1252>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80076ea:	4b1c      	ldr	r3, [pc, #112]	@ (800775c <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 80076ec:	689b      	ldr	r3, [r3, #8]
 80076ee:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d005      	beq.n	8007702 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
 80076f6:	4b19      	ldr	r3, [pc, #100]	@ (800775c <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 80076f8:	689b      	ldr	r3, [r3, #8]
 80076fa:	0e1b      	lsrs	r3, r3, #24
 80076fc:	f003 030f 	and.w	r3, r3, #15
 8007700:	e006      	b.n	8007710 <HAL_RCCEx_GetPeriphCLKFreq+0x1248>
 8007702:	4b16      	ldr	r3, [pc, #88]	@ (800775c <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8007704:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007708:	041b      	lsls	r3, r3, #16
 800770a:	0e1b      	lsrs	r3, r3, #24
 800770c:	f003 030f 	and.w	r3, r3, #15
 8007710:	4a14      	ldr	r2, [pc, #80]	@ (8007764 <HAL_RCCEx_GetPeriphCLKFreq+0x129c>)
 8007712:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007716:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8007718:	e07e      	b.n	8007818 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 800771a:	2300      	movs	r3, #0
 800771c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800771e:	e07b      	b.n	8007818 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default:

        frequency = 0U;
 8007720:	2300      	movs	r3, #0
 8007722:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007724:	e078      	b.n	8007818 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
        frequency = 0U;
        break;
    }
  }
#endif /* defined(HSPI1) */
  else if (PeriphClk == RCC_PERIPHCLK_DAC1)
 8007726:	e9d7 2300 	ldrd	r2, r3, [r7]
 800772a:	f102 4170 	add.w	r1, r2, #4026531840	@ 0xf0000000
 800772e:	430b      	orrs	r3, r1
 8007730:	d138      	bne.n	80077a4 <HAL_RCCEx_GetPeriphCLKFreq+0x12dc>
  {
    /* Get the current DAC1 kernel source */
    srcclk = __HAL_RCC_GET_DAC1_SOURCE();
 8007732:	4b0a      	ldr	r3, [pc, #40]	@ (800775c <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8007734:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007738:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800773c:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if DAC1 clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSE))
 800773e:	4b07      	ldr	r3, [pc, #28]	@ (800775c <HAL_RCCEx_GetPeriphCLKFreq+0x1294>)
 8007740:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007744:	f003 0302 	and.w	r3, r3, #2
 8007748:	2b02      	cmp	r3, #2
 800774a:	d10d      	bne.n	8007768 <HAL_RCCEx_GetPeriphCLKFreq+0x12a0>
 800774c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800774e:	2b00      	cmp	r3, #0
 8007750:	d10a      	bne.n	8007768 <HAL_RCCEx_GetPeriphCLKFreq+0x12a0>
    {
      frequency = LSE_VALUE;
 8007752:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007756:	637b      	str	r3, [r7, #52]	@ 0x34
 8007758:	e05e      	b.n	8007818 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
 800775a:	bf00      	nop
 800775c:	46020c00 	.word	0x46020c00
 8007760:	00f42400 	.word	0x00f42400
 8007764:	0800db78 	.word	0x0800db78
    }
    /* Check if LSI is ready and if DAC1 clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSI))
 8007768:	4b2e      	ldr	r3, [pc, #184]	@ (8007824 <HAL_RCCEx_GetPeriphCLKFreq+0x135c>)
 800776a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800776e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007772:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007776:	d112      	bne.n	800779e <HAL_RCCEx_GetPeriphCLKFreq+0x12d6>
 8007778:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800777a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800777e:	d10e      	bne.n	800779e <HAL_RCCEx_GetPeriphCLKFreq+0x12d6>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007780:	4b28      	ldr	r3, [pc, #160]	@ (8007824 <HAL_RCCEx_GetPeriphCLKFreq+0x135c>)
 8007782:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007786:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800778a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800778e:	d102      	bne.n	8007796 <HAL_RCCEx_GetPeriphCLKFreq+0x12ce>
      {
        frequency = LSI_VALUE / 128U;
 8007790:	23fa      	movs	r3, #250	@ 0xfa
 8007792:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007794:	e040      	b.n	8007818 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = LSI_VALUE;
 8007796:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800779a:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800779c:	e03c      	b.n	8007818 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    /* Clock not enabled for DAC1*/
    else
    {
      frequency = 0U;
 800779e:	2300      	movs	r3, #0
 80077a0:	637b      	str	r3, [r7, #52]	@ 0x34
 80077a2:	e039      	b.n	8007818 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }

  }
  else if (PeriphClk == RCC_PERIPHCLK_RNG)
 80077a4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80077a8:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 80077ac:	430b      	orrs	r3, r1
 80077ae:	d131      	bne.n	8007814 <HAL_RCCEx_GetPeriphCLKFreq+0x134c>
  {
    /* Get the current RNG kernel source */
    srcclk = __HAL_RCC_GET_RNG_SOURCE();
 80077b0:	4b1c      	ldr	r3, [pc, #112]	@ (8007824 <HAL_RCCEx_GetPeriphCLKFreq+0x135c>)
 80077b2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80077b6:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 80077ba:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if HSI48 is ready and if RNG clock selection is HSI48 */
    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 80077bc:	4b19      	ldr	r3, [pc, #100]	@ (8007824 <HAL_RCCEx_GetPeriphCLKFreq+0x135c>)
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80077c4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80077c8:	d105      	bne.n	80077d6 <HAL_RCCEx_GetPeriphCLKFreq+0x130e>
 80077ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d102      	bne.n	80077d6 <HAL_RCCEx_GetPeriphCLKFreq+0x130e>
    {
      frequency = HSI48_VALUE;
 80077d0:	4b15      	ldr	r3, [pc, #84]	@ (8007828 <HAL_RCCEx_GetPeriphCLKFreq+0x1360>)
 80077d2:	637b      	str	r3, [r7, #52]	@ 0x34
 80077d4:	e020      	b.n	8007818 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }

    /* Check if HSI48 is ready and if RNG clock selection is HSI48_DIV2 */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48_DIV2))
 80077d6:	4b13      	ldr	r3, [pc, #76]	@ (8007824 <HAL_RCCEx_GetPeriphCLKFreq+0x135c>)
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80077de:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80077e2:	d106      	bne.n	80077f2 <HAL_RCCEx_GetPeriphCLKFreq+0x132a>
 80077e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077e6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80077ea:	d102      	bne.n	80077f2 <HAL_RCCEx_GetPeriphCLKFreq+0x132a>
    {
      frequency = HSI48_VALUE >> 1U ;
 80077ec:	4b0f      	ldr	r3, [pc, #60]	@ (800782c <HAL_RCCEx_GetPeriphCLKFreq+0x1364>)
 80077ee:	637b      	str	r3, [r7, #52]	@ 0x34
 80077f0:	e012      	b.n	8007818 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }

    /* Check if HSI is ready and if RNG clock selection is HSI */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI))
 80077f2:	4b0c      	ldr	r3, [pc, #48]	@ (8007824 <HAL_RCCEx_GetPeriphCLKFreq+0x135c>)
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80077fa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80077fe:	d106      	bne.n	800780e <HAL_RCCEx_GetPeriphCLKFreq+0x1346>
 8007800:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007802:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007806:	d102      	bne.n	800780e <HAL_RCCEx_GetPeriphCLKFreq+0x1346>
    {
      frequency = HSI_VALUE;
 8007808:	4b09      	ldr	r3, [pc, #36]	@ (8007830 <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 800780a:	637b      	str	r3, [r7, #52]	@ 0x34
 800780c:	e004      	b.n	8007818 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for RNG */
    else
    {
      frequency = 0U;
 800780e:	2300      	movs	r3, #0
 8007810:	637b      	str	r3, [r7, #52]	@ 0x34
 8007812:	e001      	b.n	8007818 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
  }
#endif /* defined(USB_OTG_HS) */

  else
  {
    frequency = 0;
 8007814:	2300      	movs	r3, #0
 8007816:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  return (frequency);
 8007818:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800781a:	4618      	mov	r0, r3
 800781c:	3738      	adds	r7, #56	@ 0x38
 800781e:	46bd      	mov	sp, r7
 8007820:	bd80      	pop	{r7, pc}
 8007822:	bf00      	nop
 8007824:	46020c00 	.word	0x46020c00
 8007828:	02dc6c00 	.word	0x02dc6c00
 800782c:	016e3600 	.word	0x016e3600
 8007830:	00f42400 	.word	0x00f42400

08007834 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 8007834:	b580      	push	{r7, lr}
 8007836:	b084      	sub	sp, #16
 8007838:	af00      	add	r7, sp, #0
 800783a:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll2->PLL2P));
  assert_param(IS_RCC_PLLQ_VALUE(pll2->PLL2Q));
  assert_param(IS_RCC_PLLR_VALUE(pll2->PLL2R));

  /* Disable  PLL2 */
  __HAL_RCC_PLL2_DISABLE();
 800783c:	4b47      	ldr	r3, [pc, #284]	@ (800795c <RCCEx_PLL2_Config+0x128>)
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	4a46      	ldr	r2, [pc, #280]	@ (800795c <RCCEx_PLL2_Config+0x128>)
 8007842:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007846:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8007848:	f7fa ff72 	bl	8002730 <HAL_GetTick>
 800784c:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800784e:	e008      	b.n	8007862 <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007850:	f7fa ff6e 	bl	8002730 <HAL_GetTick>
 8007854:	4602      	mov	r2, r0
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	1ad3      	subs	r3, r2, r3
 800785a:	2b02      	cmp	r3, #2
 800785c:	d901      	bls.n	8007862 <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 800785e:	2303      	movs	r3, #3
 8007860:	e077      	b.n	8007952 <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007862:	4b3e      	ldr	r3, [pc, #248]	@ (800795c <RCCEx_PLL2_Config+0x128>)
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800786a:	2b00      	cmp	r3, #0
 800786c:	d1f0      	bne.n	8007850 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 800786e:	4b3b      	ldr	r3, [pc, #236]	@ (800795c <RCCEx_PLL2_Config+0x128>)
 8007870:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007872:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8007876:	f023 0303 	bic.w	r3, r3, #3
 800787a:	687a      	ldr	r2, [r7, #4]
 800787c:	6811      	ldr	r1, [r2, #0]
 800787e:	687a      	ldr	r2, [r7, #4]
 8007880:	6852      	ldr	r2, [r2, #4]
 8007882:	3a01      	subs	r2, #1
 8007884:	0212      	lsls	r2, r2, #8
 8007886:	430a      	orrs	r2, r1
 8007888:	4934      	ldr	r1, [pc, #208]	@ (800795c <RCCEx_PLL2_Config+0x128>)
 800788a:	4313      	orrs	r3, r2
 800788c:	62cb      	str	r3, [r1, #44]	@ 0x2c
 800788e:	4b33      	ldr	r3, [pc, #204]	@ (800795c <RCCEx_PLL2_Config+0x128>)
 8007890:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007892:	4b33      	ldr	r3, [pc, #204]	@ (8007960 <RCCEx_PLL2_Config+0x12c>)
 8007894:	4013      	ands	r3, r2
 8007896:	687a      	ldr	r2, [r7, #4]
 8007898:	6892      	ldr	r2, [r2, #8]
 800789a:	3a01      	subs	r2, #1
 800789c:	f3c2 0108 	ubfx	r1, r2, #0, #9
 80078a0:	687a      	ldr	r2, [r7, #4]
 80078a2:	68d2      	ldr	r2, [r2, #12]
 80078a4:	3a01      	subs	r2, #1
 80078a6:	0252      	lsls	r2, r2, #9
 80078a8:	b292      	uxth	r2, r2
 80078aa:	4311      	orrs	r1, r2
 80078ac:	687a      	ldr	r2, [r7, #4]
 80078ae:	6912      	ldr	r2, [r2, #16]
 80078b0:	3a01      	subs	r2, #1
 80078b2:	0412      	lsls	r2, r2, #16
 80078b4:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 80078b8:	4311      	orrs	r1, r2
 80078ba:	687a      	ldr	r2, [r7, #4]
 80078bc:	6952      	ldr	r2, [r2, #20]
 80078be:	3a01      	subs	r2, #1
 80078c0:	0612      	lsls	r2, r2, #24
 80078c2:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 80078c6:	430a      	orrs	r2, r1
 80078c8:	4924      	ldr	r1, [pc, #144]	@ (800795c <RCCEx_PLL2_Config+0x128>)
 80078ca:	4313      	orrs	r3, r2
 80078cc:	63cb      	str	r3, [r1, #60]	@ 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 80078ce:	4b23      	ldr	r3, [pc, #140]	@ (800795c <RCCEx_PLL2_Config+0x128>)
 80078d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80078d2:	f023 020c 	bic.w	r2, r3, #12
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	699b      	ldr	r3, [r3, #24]
 80078da:	4920      	ldr	r1, [pc, #128]	@ (800795c <RCCEx_PLL2_Config+0x128>)
 80078dc:	4313      	orrs	r3, r2
 80078de:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2CLKOUT_ENABLE(pll2->PLL2ClockOut);
 80078e0:	4b1e      	ldr	r3, [pc, #120]	@ (800795c <RCCEx_PLL2_Config+0x128>)
 80078e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	6a1b      	ldr	r3, [r3, #32]
 80078e8:	491c      	ldr	r1, [pc, #112]	@ (800795c <RCCEx_PLL2_Config+0x128>)
 80078ea:	4313      	orrs	r3, r2
 80078ec:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Disable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_DISABLE();
 80078ee:	4b1b      	ldr	r3, [pc, #108]	@ (800795c <RCCEx_PLL2_Config+0x128>)
 80078f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80078f2:	4a1a      	ldr	r2, [pc, #104]	@ (800795c <RCCEx_PLL2_Config+0x128>)
 80078f4:	f023 0310 	bic.w	r3, r3, #16
 80078f8:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80078fa:	4b18      	ldr	r3, [pc, #96]	@ (800795c <RCCEx_PLL2_Config+0x128>)
 80078fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80078fe:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007902:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8007906:	687a      	ldr	r2, [r7, #4]
 8007908:	69d2      	ldr	r2, [r2, #28]
 800790a:	00d2      	lsls	r2, r2, #3
 800790c:	4913      	ldr	r1, [pc, #76]	@ (800795c <RCCEx_PLL2_Config+0x128>)
 800790e:	4313      	orrs	r3, r2
 8007910:	640b      	str	r3, [r1, #64]	@ 0x40

  /* Enable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_ENABLE();
 8007912:	4b12      	ldr	r3, [pc, #72]	@ (800795c <RCCEx_PLL2_Config+0x128>)
 8007914:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007916:	4a11      	ldr	r2, [pc, #68]	@ (800795c <RCCEx_PLL2_Config+0x128>)
 8007918:	f043 0310 	orr.w	r3, r3, #16
 800791c:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Enable  PLL2 */
  __HAL_RCC_PLL2_ENABLE();
 800791e:	4b0f      	ldr	r3, [pc, #60]	@ (800795c <RCCEx_PLL2_Config+0x128>)
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	4a0e      	ldr	r2, [pc, #56]	@ (800795c <RCCEx_PLL2_Config+0x128>)
 8007924:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8007928:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800792a:	f7fa ff01 	bl	8002730 <HAL_GetTick>
 800792e:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007930:	e008      	b.n	8007944 <RCCEx_PLL2_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007932:	f7fa fefd 	bl	8002730 <HAL_GetTick>
 8007936:	4602      	mov	r2, r0
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	1ad3      	subs	r3, r2, r3
 800793c:	2b02      	cmp	r3, #2
 800793e:	d901      	bls.n	8007944 <RCCEx_PLL2_Config+0x110>
    {
      return HAL_TIMEOUT;
 8007940:	2303      	movs	r3, #3
 8007942:	e006      	b.n	8007952 <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007944:	4b05      	ldr	r3, [pc, #20]	@ (800795c <RCCEx_PLL2_Config+0x128>)
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800794c:	2b00      	cmp	r3, #0
 800794e:	d0f0      	beq.n	8007932 <RCCEx_PLL2_Config+0xfe>
    }
  }
  return HAL_OK;
 8007950:	2300      	movs	r3, #0

}
 8007952:	4618      	mov	r0, r3
 8007954:	3710      	adds	r7, #16
 8007956:	46bd      	mov	sp, r7
 8007958:	bd80      	pop	{r7, pc}
 800795a:	bf00      	nop
 800795c:	46020c00 	.word	0x46020c00
 8007960:	80800000 	.word	0x80800000

08007964 <RCCEx_PLL3_Config>:
  *         contains the configuration parameters as well as VCI clock ranges.
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 8007964:	b580      	push	{r7, lr}
 8007966:	b084      	sub	sp, #16
 8007968:	af00      	add	r7, sp, #0
 800796a:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll3->PLL3P));
  assert_param(IS_RCC_PLLQ_VALUE(pll3->PLL3Q));
  assert_param(IS_RCC_PLLR_VALUE(pll3->PLL3R));

  /* Disable  PLL3 */
  __HAL_RCC_PLL3_DISABLE();
 800796c:	4b47      	ldr	r3, [pc, #284]	@ (8007a8c <RCCEx_PLL3_Config+0x128>)
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	4a46      	ldr	r2, [pc, #280]	@ (8007a8c <RCCEx_PLL3_Config+0x128>)
 8007972:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007976:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8007978:	f7fa feda 	bl	8002730 <HAL_GetTick>
 800797c:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800797e:	e008      	b.n	8007992 <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007980:	f7fa fed6 	bl	8002730 <HAL_GetTick>
 8007984:	4602      	mov	r2, r0
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	1ad3      	subs	r3, r2, r3
 800798a:	2b02      	cmp	r3, #2
 800798c:	d901      	bls.n	8007992 <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 800798e:	2303      	movs	r3, #3
 8007990:	e077      	b.n	8007a82 <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007992:	4b3e      	ldr	r3, [pc, #248]	@ (8007a8c <RCCEx_PLL3_Config+0x128>)
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800799a:	2b00      	cmp	r3, #0
 800799c:	d1f0      	bne.n	8007980 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 800799e:	4b3b      	ldr	r3, [pc, #236]	@ (8007a8c <RCCEx_PLL3_Config+0x128>)
 80079a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80079a2:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80079a6:	f023 0303 	bic.w	r3, r3, #3
 80079aa:	687a      	ldr	r2, [r7, #4]
 80079ac:	6811      	ldr	r1, [r2, #0]
 80079ae:	687a      	ldr	r2, [r7, #4]
 80079b0:	6852      	ldr	r2, [r2, #4]
 80079b2:	3a01      	subs	r2, #1
 80079b4:	0212      	lsls	r2, r2, #8
 80079b6:	430a      	orrs	r2, r1
 80079b8:	4934      	ldr	r1, [pc, #208]	@ (8007a8c <RCCEx_PLL3_Config+0x128>)
 80079ba:	4313      	orrs	r3, r2
 80079bc:	630b      	str	r3, [r1, #48]	@ 0x30
 80079be:	4b33      	ldr	r3, [pc, #204]	@ (8007a8c <RCCEx_PLL3_Config+0x128>)
 80079c0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80079c2:	4b33      	ldr	r3, [pc, #204]	@ (8007a90 <RCCEx_PLL3_Config+0x12c>)
 80079c4:	4013      	ands	r3, r2
 80079c6:	687a      	ldr	r2, [r7, #4]
 80079c8:	6892      	ldr	r2, [r2, #8]
 80079ca:	3a01      	subs	r2, #1
 80079cc:	f3c2 0108 	ubfx	r1, r2, #0, #9
 80079d0:	687a      	ldr	r2, [r7, #4]
 80079d2:	68d2      	ldr	r2, [r2, #12]
 80079d4:	3a01      	subs	r2, #1
 80079d6:	0252      	lsls	r2, r2, #9
 80079d8:	b292      	uxth	r2, r2
 80079da:	4311      	orrs	r1, r2
 80079dc:	687a      	ldr	r2, [r7, #4]
 80079de:	6912      	ldr	r2, [r2, #16]
 80079e0:	3a01      	subs	r2, #1
 80079e2:	0412      	lsls	r2, r2, #16
 80079e4:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 80079e8:	4311      	orrs	r1, r2
 80079ea:	687a      	ldr	r2, [r7, #4]
 80079ec:	6952      	ldr	r2, [r2, #20]
 80079ee:	3a01      	subs	r2, #1
 80079f0:	0612      	lsls	r2, r2, #24
 80079f2:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 80079f6:	430a      	orrs	r2, r1
 80079f8:	4924      	ldr	r1, [pc, #144]	@ (8007a8c <RCCEx_PLL3_Config+0x128>)
 80079fa:	4313      	orrs	r3, r2
 80079fc:	644b      	str	r3, [r1, #68]	@ 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE);
 80079fe:	4b23      	ldr	r3, [pc, #140]	@ (8007a8c <RCCEx_PLL3_Config+0x128>)
 8007a00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007a02:	f023 020c 	bic.w	r2, r3, #12
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	699b      	ldr	r3, [r3, #24]
 8007a0a:	4920      	ldr	r1, [pc, #128]	@ (8007a8c <RCCEx_PLL3_Config+0x128>)
 8007a0c:	4313      	orrs	r3, r2
 8007a0e:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3CLKOUT_ENABLE(pll3->PLL3ClockOut);
 8007a10:	4b1e      	ldr	r3, [pc, #120]	@ (8007a8c <RCCEx_PLL3_Config+0x128>)
 8007a12:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	6a1b      	ldr	r3, [r3, #32]
 8007a18:	491c      	ldr	r1, [pc, #112]	@ (8007a8c <RCCEx_PLL3_Config+0x128>)
 8007a1a:	4313      	orrs	r3, r2
 8007a1c:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Disable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_DISABLE();
 8007a1e:	4b1b      	ldr	r3, [pc, #108]	@ (8007a8c <RCCEx_PLL3_Config+0x128>)
 8007a20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007a22:	4a1a      	ldr	r2, [pc, #104]	@ (8007a8c <RCCEx_PLL3_Config+0x128>)
 8007a24:	f023 0310 	bic.w	r3, r3, #16
 8007a28:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8007a2a:	4b18      	ldr	r3, [pc, #96]	@ (8007a8c <RCCEx_PLL3_Config+0x128>)
 8007a2c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007a2e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007a32:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8007a36:	687a      	ldr	r2, [r7, #4]
 8007a38:	69d2      	ldr	r2, [r2, #28]
 8007a3a:	00d2      	lsls	r2, r2, #3
 8007a3c:	4913      	ldr	r1, [pc, #76]	@ (8007a8c <RCCEx_PLL3_Config+0x128>)
 8007a3e:	4313      	orrs	r3, r2
 8007a40:	648b      	str	r3, [r1, #72]	@ 0x48

  /* Enable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_ENABLE();
 8007a42:	4b12      	ldr	r3, [pc, #72]	@ (8007a8c <RCCEx_PLL3_Config+0x128>)
 8007a44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007a46:	4a11      	ldr	r2, [pc, #68]	@ (8007a8c <RCCEx_PLL3_Config+0x128>)
 8007a48:	f043 0310 	orr.w	r3, r3, #16
 8007a4c:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable  PLL3 */
  __HAL_RCC_PLL3_ENABLE();
 8007a4e:	4b0f      	ldr	r3, [pc, #60]	@ (8007a8c <RCCEx_PLL3_Config+0x128>)
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	4a0e      	ldr	r2, [pc, #56]	@ (8007a8c <RCCEx_PLL3_Config+0x128>)
 8007a54:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007a58:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8007a5a:	f7fa fe69 	bl	8002730 <HAL_GetTick>
 8007a5e:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007a60:	e008      	b.n	8007a74 <RCCEx_PLL3_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007a62:	f7fa fe65 	bl	8002730 <HAL_GetTick>
 8007a66:	4602      	mov	r2, r0
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	1ad3      	subs	r3, r2, r3
 8007a6c:	2b02      	cmp	r3, #2
 8007a6e:	d901      	bls.n	8007a74 <RCCEx_PLL3_Config+0x110>
    {
      return HAL_TIMEOUT;
 8007a70:	2303      	movs	r3, #3
 8007a72:	e006      	b.n	8007a82 <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007a74:	4b05      	ldr	r3, [pc, #20]	@ (8007a8c <RCCEx_PLL3_Config+0x128>)
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d0f0      	beq.n	8007a62 <RCCEx_PLL3_Config+0xfe>
    }
  }
  return HAL_OK;
 8007a80:	2300      	movs	r3, #0
}
 8007a82:	4618      	mov	r0, r3
 8007a84:	3710      	adds	r7, #16
 8007a86:	46bd      	mov	sp, r7
 8007a88:	bd80      	pop	{r7, pc}
 8007a8a:	bf00      	nop
 8007a8c:	46020c00 	.word	0x46020c00
 8007a90:	80800000 	.word	0x80800000

08007a94 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007a94:	b580      	push	{r7, lr}
 8007a96:	b084      	sub	sp, #16
 8007a98:	af00      	add	r7, sp, #0
 8007a9a:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d101      	bne.n	8007aa6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007aa2:	2301      	movs	r3, #1
 8007aa4:	e0fb      	b.n	8007c9e <HAL_SPI_Init+0x20a>

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
  if (IS_SPI_LIMITED_INSTANCE(hspi->Instance))
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	4a7f      	ldr	r2, [pc, #508]	@ (8007ca8 <HAL_SPI_Init+0x214>)
 8007aac:	4293      	cmp	r3, r2
 8007aae:	d004      	beq.n	8007aba <HAL_SPI_Init+0x26>
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	4a7d      	ldr	r2, [pc, #500]	@ (8007cac <HAL_SPI_Init+0x218>)
 8007ab6:	4293      	cmp	r3, r2
 8007ab8:	e000      	b.n	8007abc <HAL_SPI_Init+0x28>
  {
    assert_param(IS_SPI_LIMITED_DATASIZE(hspi->Init.DataSize));
    assert_param(IS_SPI_LIMITED_FIFOTHRESHOLD(hspi->Init.FifoThreshold));
 8007aba:	bf00      	nop
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	2200      	movs	r2, #0
 8007ac0:	629a      	str	r2, [r3, #40]	@ 0x28
  assert_param(IS_SPI_RDY_MASTER_MANAGEMENT(hspi->Init.ReadyMasterManagement));
  assert_param(IS_SPI_RDY_POLARITY(hspi->Init.ReadyPolarity));
  assert_param(IS_SPI_MASTER_RX_AUTOSUSP(hspi->Init.MasterReceiverAutoSusp));

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	4a78      	ldr	r2, [pc, #480]	@ (8007ca8 <HAL_SPI_Init+0x214>)
 8007ac8:	4293      	cmp	r3, r2
 8007aca:	d004      	beq.n	8007ad6 <HAL_SPI_Init+0x42>
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	4a76      	ldr	r2, [pc, #472]	@ (8007cac <HAL_SPI_Init+0x218>)
 8007ad2:	4293      	cmp	r3, r2
 8007ad4:	d105      	bne.n	8007ae2 <HAL_SPI_Init+0x4e>
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	68db      	ldr	r3, [r3, #12]
 8007ada:	2b0f      	cmp	r3, #15
 8007adc:	d901      	bls.n	8007ae2 <HAL_SPI_Init+0x4e>
  {
    return HAL_ERROR;
 8007ade:	2301      	movs	r3, #1
 8007ae0:	e0dd      	b.n	8007c9e <HAL_SPI_Init+0x20a>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8007ae2:	6878      	ldr	r0, [r7, #4]
 8007ae4:	f000 fdee 	bl	80086c4 <SPI_GetPacketSize>
 8007ae8:	60f8      	str	r0, [r7, #12]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	4a6e      	ldr	r2, [pc, #440]	@ (8007ca8 <HAL_SPI_Init+0x214>)
 8007af0:	4293      	cmp	r3, r2
 8007af2:	d004      	beq.n	8007afe <HAL_SPI_Init+0x6a>
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	4a6c      	ldr	r2, [pc, #432]	@ (8007cac <HAL_SPI_Init+0x218>)
 8007afa:	4293      	cmp	r3, r2
 8007afc:	d102      	bne.n	8007b04 <HAL_SPI_Init+0x70>
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	2b08      	cmp	r3, #8
 8007b02:	d816      	bhi.n	8007b32 <HAL_SPI_Init+0x9e>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	681b      	ldr	r3, [r3, #0]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8007b08:	4a69      	ldr	r2, [pc, #420]	@ (8007cb0 <HAL_SPI_Init+0x21c>)
 8007b0a:	4293      	cmp	r3, r2
 8007b0c:	d00e      	beq.n	8007b2c <HAL_SPI_Init+0x98>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	4a68      	ldr	r2, [pc, #416]	@ (8007cb4 <HAL_SPI_Init+0x220>)
 8007b14:	4293      	cmp	r3, r2
 8007b16:	d009      	beq.n	8007b2c <HAL_SPI_Init+0x98>
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	4a66      	ldr	r2, [pc, #408]	@ (8007cb8 <HAL_SPI_Init+0x224>)
 8007b1e:	4293      	cmp	r3, r2
 8007b20:	d004      	beq.n	8007b2c <HAL_SPI_Init+0x98>
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	4a65      	ldr	r2, [pc, #404]	@ (8007cbc <HAL_SPI_Init+0x228>)
 8007b28:	4293      	cmp	r3, r2
 8007b2a:	d104      	bne.n	8007b36 <HAL_SPI_Init+0xa2>
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	2b10      	cmp	r3, #16
 8007b30:	d901      	bls.n	8007b36 <HAL_SPI_Init+0xa2>
  {
    return HAL_ERROR;
 8007b32:	2301      	movs	r3, #1
 8007b34:	e0b3      	b.n	8007c9e <HAL_SPI_Init+0x20a>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 8007b3c:	b2db      	uxtb	r3, r3
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d106      	bne.n	8007b50 <HAL_SPI_Init+0xbc>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	2200      	movs	r2, #0
 8007b46:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007b4a:	6878      	ldr	r0, [r7, #4]
 8007b4c:	f7f9 fe06 	bl	800175c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	2202      	movs	r2, #2
 8007b54:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	681a      	ldr	r2, [r3, #0]
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	f022 0201 	bic.w	r2, r2, #1
 8007b66:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	689b      	ldr	r3, [r3, #8]
 8007b6e:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 8007b72:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	699b      	ldr	r3, [r3, #24]
 8007b78:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007b7c:	d119      	bne.n	8007bb2 <HAL_SPI_Init+0x11e>
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	685b      	ldr	r3, [r3, #4]
 8007b82:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007b86:	d103      	bne.n	8007b90 <HAL_SPI_Init+0xfc>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d008      	beq.n	8007ba2 <HAL_SPI_Init+0x10e>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d10c      	bne.n	8007bb2 <HAL_SPI_Init+0x11e>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8007b9c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007ba0:	d107      	bne.n	8007bb2 <HAL_SPI_Init+0x11e>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	681a      	ldr	r2, [r3, #0]
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8007bb0:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	685b      	ldr	r3, [r3, #4]
 8007bb6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d00f      	beq.n	8007bde <HAL_SPI_Init+0x14a>
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	68db      	ldr	r3, [r3, #12]
 8007bc2:	2b06      	cmp	r3, #6
 8007bc4:	d90b      	bls.n	8007bde <HAL_SPI_Init+0x14a>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	430a      	orrs	r2, r1
 8007bda:	601a      	str	r2, [r3, #0]
 8007bdc:	e007      	b.n	8007bee <HAL_SPI_Init+0x15a>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	681a      	ldr	r2, [r3, #0]
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007bec:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	69da      	ldr	r2, [r3, #28]
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007bf6:	431a      	orrs	r2, r3
 8007bf8:	68bb      	ldr	r3, [r7, #8]
 8007bfa:	431a      	orrs	r2, r3
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007c00:	ea42 0103 	orr.w	r1, r2, r3
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	68da      	ldr	r2, [r3, #12]
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	430a      	orrs	r2, r1
 8007c0e:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c18:	431a      	orrs	r2, r3
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c1e:	431a      	orrs	r2, r3
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	699b      	ldr	r3, [r3, #24]
 8007c24:	431a      	orrs	r2, r3
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	691b      	ldr	r3, [r3, #16]
 8007c2a:	431a      	orrs	r2, r3
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	695b      	ldr	r3, [r3, #20]
 8007c30:	431a      	orrs	r2, r3
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	6a1b      	ldr	r3, [r3, #32]
 8007c36:	431a      	orrs	r2, r3
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	685b      	ldr	r3, [r3, #4]
 8007c3c:	431a      	orrs	r2, r3
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007c42:	431a      	orrs	r2, r3
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	689b      	ldr	r3, [r3, #8]
 8007c48:	431a      	orrs	r2, r3
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007c4e:	431a      	orrs	r2, r3
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007c54:	431a      	orrs	r2, r3
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007c5a:	ea42 0103 	orr.w	r1, r2, r3
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	430a      	orrs	r2, r1
 8007c68:	60da      	str	r2, [r3, #12]
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	685b      	ldr	r3, [r3, #4]
 8007c6e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d00a      	beq.n	8007c8c <HAL_SPI_Init+0x1f8>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	68db      	ldr	r3, [r3, #12]
 8007c7c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	430a      	orrs	r2, r1
 8007c8a:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	2200      	movs	r2, #0
 8007c90:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  hspi->State     = HAL_SPI_STATE_READY;
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	2201      	movs	r2, #1
 8007c98:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  return HAL_OK;
 8007c9c:	2300      	movs	r3, #0
}
 8007c9e:	4618      	mov	r0, r3
 8007ca0:	3710      	adds	r7, #16
 8007ca2:	46bd      	mov	sp, r7
 8007ca4:	bd80      	pop	{r7, pc}
 8007ca6:	bf00      	nop
 8007ca8:	46002000 	.word	0x46002000
 8007cac:	56002000 	.word	0x56002000
 8007cb0:	40013000 	.word	0x40013000
 8007cb4:	50013000 	.word	0x50013000
 8007cb8:	40003800 	.word	0x40003800
 8007cbc:	50003800 	.word	0x50003800

08007cc0 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007cc0:	b580      	push	{r7, lr}
 8007cc2:	b088      	sub	sp, #32
 8007cc4:	af02      	add	r7, sp, #8
 8007cc6:	60f8      	str	r0, [r7, #12]
 8007cc8:	60b9      	str	r1, [r7, #8]
 8007cca:	603b      	str	r3, [r7, #0]
 8007ccc:	4613      	mov	r3, r2
 8007cce:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	3320      	adds	r3, #32
 8007cd6:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Check transfer size parameter */
  if (IS_SPI_LIMITED_INSTANCE(hspi->Instance))
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	4a90      	ldr	r2, [pc, #576]	@ (8007f20 <HAL_SPI_Transmit+0x260>)
 8007cde:	4293      	cmp	r3, r2
  {
    assert_param(IS_SPI_TRANSFER_SIZE(Size));
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007ce0:	f7fa fd26 	bl	8002730 <HAL_GetTick>
 8007ce4:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 8007cec:	b2db      	uxtb	r3, r3
 8007cee:	2b01      	cmp	r3, #1
 8007cf0:	d001      	beq.n	8007cf6 <HAL_SPI_Transmit+0x36>
  {
    return HAL_BUSY;
 8007cf2:	2302      	movs	r3, #2
 8007cf4:	e1f4      	b.n	80080e0 <HAL_SPI_Transmit+0x420>
  }

  if ((pData == NULL) || (Size == 0UL))
 8007cf6:	68bb      	ldr	r3, [r7, #8]
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d002      	beq.n	8007d02 <HAL_SPI_Transmit+0x42>
 8007cfc:	88fb      	ldrh	r3, [r7, #6]
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d101      	bne.n	8007d06 <HAL_SPI_Transmit+0x46>
  {
    return HAL_ERROR;
 8007d02:	2301      	movs	r3, #1
 8007d04:	e1ec      	b.n	80080e0 <HAL_SPI_Transmit+0x420>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 8007d0c:	2b01      	cmp	r3, #1
 8007d0e:	d101      	bne.n	8007d14 <HAL_SPI_Transmit+0x54>
 8007d10:	2302      	movs	r3, #2
 8007d12:	e1e5      	b.n	80080e0 <HAL_SPI_Transmit+0x420>
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	2201      	movs	r2, #1
 8007d18:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	2203      	movs	r2, #3
 8007d20:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	2200      	movs	r2, #0
 8007d28:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	68ba      	ldr	r2, [r7, #8]
 8007d30:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->TxXferSize  = Size;
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	88fa      	ldrh	r2, [r7, #6]
 8007d36:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->TxXferCount = Size;
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	88fa      	ldrh	r2, [r7, #6]
 8007d3e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	2200      	movs	r2, #0
 8007d46:	66da      	str	r2, [r3, #108]	@ 0x6c
  hspi->RxXferSize  = (uint16_t) 0UL;
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	2200      	movs	r2, #0
 8007d4c:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70
  hspi->RxXferCount = (uint16_t) 0UL;
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	2200      	movs	r2, #0
 8007d54:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
  hspi->TxISR       = NULL;
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	2200      	movs	r2, #0
 8007d5c:	67da      	str	r2, [r3, #124]	@ 0x7c
  hspi->RxISR       = NULL;
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	2200      	movs	r2, #0
 8007d62:	679a      	str	r2, [r3, #120]	@ 0x78

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	689b      	ldr	r3, [r3, #8]
 8007d68:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 8007d6c:	d108      	bne.n	8007d80 <HAL_SPI_Transmit+0xc0>
  {
    SPI_1LINE_TX(hspi);
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	681a      	ldr	r2, [r3, #0]
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007d7c:	601a      	str	r2, [r3, #0]
 8007d7e:	e009      	b.n	8007d94 <HAL_SPI_Transmit+0xd4>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	68db      	ldr	r3, [r3, #12]
 8007d86:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8007d92:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	685b      	ldr	r3, [r3, #4]
 8007d9a:	0c1b      	lsrs	r3, r3, #16
 8007d9c:	041b      	lsls	r3, r3, #16
 8007d9e:	88f9      	ldrh	r1, [r7, #6]
 8007da0:	68fa      	ldr	r2, [r7, #12]
 8007da2:	6812      	ldr	r2, [r2, #0]
 8007da4:	430b      	orrs	r3, r1
 8007da6:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	681a      	ldr	r2, [r3, #0]
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	f042 0201 	orr.w	r2, r2, #1
 8007db6:	601a      	str	r2, [r3, #0]

  if (((hspi->Instance->AUTOCR & SPI_AUTOCR_TRIGEN) == 0U) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	69db      	ldr	r3, [r3, #28]
 8007dbe:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d10c      	bne.n	8007de0 <HAL_SPI_Transmit+0x120>
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	685b      	ldr	r3, [r3, #4]
 8007dca:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007dce:	d107      	bne.n	8007de0 <HAL_SPI_Transmit+0x120>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	681a      	ldr	r2, [r3, #0]
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007dde:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	68db      	ldr	r3, [r3, #12]
 8007de4:	2b0f      	cmp	r3, #15
 8007de6:	d95b      	bls.n	8007ea0 <HAL_SPI_Transmit+0x1e0>
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	4a4d      	ldr	r2, [pc, #308]	@ (8007f24 <HAL_SPI_Transmit+0x264>)
 8007dee:	4293      	cmp	r3, r2
 8007df0:	d04f      	beq.n	8007e92 <HAL_SPI_Transmit+0x1d2>
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	4a4c      	ldr	r2, [pc, #304]	@ (8007f28 <HAL_SPI_Transmit+0x268>)
 8007df8:	4293      	cmp	r3, r2
 8007dfa:	d04a      	beq.n	8007e92 <HAL_SPI_Transmit+0x1d2>
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	4a4a      	ldr	r2, [pc, #296]	@ (8007f2c <HAL_SPI_Transmit+0x26c>)
 8007e02:	4293      	cmp	r3, r2
 8007e04:	d045      	beq.n	8007e92 <HAL_SPI_Transmit+0x1d2>
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	4a49      	ldr	r2, [pc, #292]	@ (8007f30 <HAL_SPI_Transmit+0x270>)
 8007e0c:	4293      	cmp	r3, r2
 8007e0e:	d147      	bne.n	8007ea0 <HAL_SPI_Transmit+0x1e0>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8007e10:	e03f      	b.n	8007e92 <HAL_SPI_Transmit+0x1d2>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	695b      	ldr	r3, [r3, #20]
 8007e18:	f003 0302 	and.w	r3, r3, #2
 8007e1c:	2b02      	cmp	r3, #2
 8007e1e:	d114      	bne.n	8007e4a <HAL_SPI_Transmit+0x18a>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	6812      	ldr	r2, [r2, #0]
 8007e2a:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007e30:	1d1a      	adds	r2, r3, #4
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->TxXferCount--;
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007e3c:	b29b      	uxth	r3, r3
 8007e3e:	3b01      	subs	r3, #1
 8007e40:	b29a      	uxth	r2, r3
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8007e48:	e023      	b.n	8007e92 <HAL_SPI_Transmit+0x1d2>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007e4a:	f7fa fc71 	bl	8002730 <HAL_GetTick>
 8007e4e:	4602      	mov	r2, r0
 8007e50:	693b      	ldr	r3, [r7, #16]
 8007e52:	1ad3      	subs	r3, r2, r3
 8007e54:	683a      	ldr	r2, [r7, #0]
 8007e56:	429a      	cmp	r2, r3
 8007e58:	d803      	bhi.n	8007e62 <HAL_SPI_Transmit+0x1a2>
 8007e5a:	683b      	ldr	r3, [r7, #0]
 8007e5c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007e60:	d102      	bne.n	8007e68 <HAL_SPI_Transmit+0x1a8>
 8007e62:	683b      	ldr	r3, [r7, #0]
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	d114      	bne.n	8007e92 <HAL_SPI_Transmit+0x1d2>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8007e68:	68f8      	ldr	r0, [r7, #12]
 8007e6a:	f000 fb5d 	bl	8008528 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007e74:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	2201      	movs	r2, #1
 8007e82:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	2200      	movs	r2, #0
 8007e8a:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

          return HAL_TIMEOUT;
 8007e8e:	2303      	movs	r3, #3
 8007e90:	e126      	b.n	80080e0 <HAL_SPI_Transmit+0x420>
    while (hspi->TxXferCount > 0UL)
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007e98:	b29b      	uxth	r3, r3
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d1b9      	bne.n	8007e12 <HAL_SPI_Transmit+0x152>
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 8007e9e:	e0f9      	b.n	8008094 <HAL_SPI_Transmit+0x3d4>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	68db      	ldr	r3, [r3, #12]
 8007ea4:	2b07      	cmp	r3, #7
 8007ea6:	f240 80ee 	bls.w	8008086 <HAL_SPI_Transmit+0x3c6>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8007eaa:	e067      	b.n	8007f7c <HAL_SPI_Transmit+0x2bc>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	695b      	ldr	r3, [r3, #20]
 8007eb2:	f003 0302 	and.w	r3, r3, #2
 8007eb6:	2b02      	cmp	r3, #2
 8007eb8:	d13c      	bne.n	8007f34 <HAL_SPI_Transmit+0x274>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007ec0:	b29b      	uxth	r3, r3
 8007ec2:	2b01      	cmp	r3, #1
 8007ec4:	d918      	bls.n	8007ef8 <HAL_SPI_Transmit+0x238>
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d014      	beq.n	8007ef8 <HAL_SPI_Transmit+0x238>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	6812      	ldr	r2, [r2, #0]
 8007ed8:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007ede:	1d1a      	adds	r2, r3, #4
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount -= (uint16_t)2UL;
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007eea:	b29b      	uxth	r3, r3
 8007eec:	3b02      	subs	r3, #2
 8007eee:	b29a      	uxth	r2, r3
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8007ef6:	e041      	b.n	8007f7c <HAL_SPI_Transmit+0x2bc>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007efc:	881a      	ldrh	r2, [r3, #0]
 8007efe:	697b      	ldr	r3, [r7, #20]
 8007f00:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007f06:	1c9a      	adds	r2, r3, #2
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount--;
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007f12:	b29b      	uxth	r3, r3
 8007f14:	3b01      	subs	r3, #1
 8007f16:	b29a      	uxth	r2, r3
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8007f1e:	e02d      	b.n	8007f7c <HAL_SPI_Transmit+0x2bc>
 8007f20:	46002000 	.word	0x46002000
 8007f24:	40013000 	.word	0x40013000
 8007f28:	50013000 	.word	0x50013000
 8007f2c:	40003800 	.word	0x40003800
 8007f30:	50003800 	.word	0x50003800
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007f34:	f7fa fbfc 	bl	8002730 <HAL_GetTick>
 8007f38:	4602      	mov	r2, r0
 8007f3a:	693b      	ldr	r3, [r7, #16]
 8007f3c:	1ad3      	subs	r3, r2, r3
 8007f3e:	683a      	ldr	r2, [r7, #0]
 8007f40:	429a      	cmp	r2, r3
 8007f42:	d803      	bhi.n	8007f4c <HAL_SPI_Transmit+0x28c>
 8007f44:	683b      	ldr	r3, [r7, #0]
 8007f46:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007f4a:	d102      	bne.n	8007f52 <HAL_SPI_Transmit+0x292>
 8007f4c:	683b      	ldr	r3, [r7, #0]
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d114      	bne.n	8007f7c <HAL_SPI_Transmit+0x2bc>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8007f52:	68f8      	ldr	r0, [r7, #12]
 8007f54:	f000 fae8 	bl	8008528 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007f5e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	2201      	movs	r2, #1
 8007f6c:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	2200      	movs	r2, #0
 8007f74:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

          return HAL_TIMEOUT;
 8007f78:	2303      	movs	r3, #3
 8007f7a:	e0b1      	b.n	80080e0 <HAL_SPI_Transmit+0x420>
    while (hspi->TxXferCount > 0UL)
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007f82:	b29b      	uxth	r3, r3
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d191      	bne.n	8007eac <HAL_SPI_Transmit+0x1ec>
 8007f88:	e084      	b.n	8008094 <HAL_SPI_Transmit+0x3d4>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	695b      	ldr	r3, [r3, #20]
 8007f90:	f003 0302 	and.w	r3, r3, #2
 8007f94:	2b02      	cmp	r3, #2
 8007f96:	d152      	bne.n	800803e <HAL_SPI_Transmit+0x37e>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007f9e:	b29b      	uxth	r3, r3
 8007fa0:	2b03      	cmp	r3, #3
 8007fa2:	d918      	bls.n	8007fd6 <HAL_SPI_Transmit+0x316>
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007fa8:	2b40      	cmp	r3, #64	@ 0x40
 8007faa:	d914      	bls.n	8007fd6 <HAL_SPI_Transmit+0x316>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	6812      	ldr	r2, [r2, #0]
 8007fb6:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007fbc:	1d1a      	adds	r2, r3, #4
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount -= (uint16_t)4UL;
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007fc8:	b29b      	uxth	r3, r3
 8007fca:	3b04      	subs	r3, #4
 8007fcc:	b29a      	uxth	r2, r3
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8007fd4:	e057      	b.n	8008086 <HAL_SPI_Transmit+0x3c6>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007fdc:	b29b      	uxth	r3, r3
 8007fde:	2b01      	cmp	r3, #1
 8007fe0:	d917      	bls.n	8008012 <HAL_SPI_Transmit+0x352>
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d013      	beq.n	8008012 <HAL_SPI_Transmit+0x352>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007fee:	881a      	ldrh	r2, [r3, #0]
 8007ff0:	697b      	ldr	r3, [r7, #20]
 8007ff2:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007ff8:	1c9a      	adds	r2, r3, #2
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount -= (uint16_t)2UL;
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008004:	b29b      	uxth	r3, r3
 8008006:	3b02      	subs	r3, #2
 8008008:	b29a      	uxth	r2, r3
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8008010:	e039      	b.n	8008086 <HAL_SPI_Transmit+0x3c6>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	3320      	adds	r3, #32
 800801c:	7812      	ldrb	r2, [r2, #0]
 800801e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008024:	1c5a      	adds	r2, r3, #1
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount--;
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008030:	b29b      	uxth	r3, r3
 8008032:	3b01      	subs	r3, #1
 8008034:	b29a      	uxth	r2, r3
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800803c:	e023      	b.n	8008086 <HAL_SPI_Transmit+0x3c6>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800803e:	f7fa fb77 	bl	8002730 <HAL_GetTick>
 8008042:	4602      	mov	r2, r0
 8008044:	693b      	ldr	r3, [r7, #16]
 8008046:	1ad3      	subs	r3, r2, r3
 8008048:	683a      	ldr	r2, [r7, #0]
 800804a:	429a      	cmp	r2, r3
 800804c:	d803      	bhi.n	8008056 <HAL_SPI_Transmit+0x396>
 800804e:	683b      	ldr	r3, [r7, #0]
 8008050:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008054:	d102      	bne.n	800805c <HAL_SPI_Transmit+0x39c>
 8008056:	683b      	ldr	r3, [r7, #0]
 8008058:	2b00      	cmp	r3, #0
 800805a:	d114      	bne.n	8008086 <HAL_SPI_Transmit+0x3c6>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800805c:	68f8      	ldr	r0, [r7, #12]
 800805e:	f000 fa63 	bl	8008528 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008068:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	2201      	movs	r2, #1
 8008076:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	2200      	movs	r2, #0
 800807e:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

          return HAL_TIMEOUT;
 8008082:	2303      	movs	r3, #3
 8008084:	e02c      	b.n	80080e0 <HAL_SPI_Transmit+0x420>
    while (hspi->TxXferCount > 0UL)
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800808c:	b29b      	uxth	r3, r3
 800808e:	2b00      	cmp	r3, #0
 8008090:	f47f af7b 	bne.w	8007f8a <HAL_SPI_Transmit+0x2ca>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 8008094:	693b      	ldr	r3, [r7, #16]
 8008096:	9300      	str	r3, [sp, #0]
 8008098:	683b      	ldr	r3, [r7, #0]
 800809a:	2200      	movs	r2, #0
 800809c:	2108      	movs	r1, #8
 800809e:	68f8      	ldr	r0, [r7, #12]
 80080a0:	f000 fae2 	bl	8008668 <SPI_WaitOnFlagUntilTimeout>
 80080a4:	4603      	mov	r3, r0
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d007      	beq.n	80080ba <HAL_SPI_Transmit+0x3fa>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80080b0:	f043 0220 	orr.w	r2, r3, #32
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 80080ba:	68f8      	ldr	r0, [r7, #12]
 80080bc:	f000 fa34 	bl	8008528 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	2201      	movs	r2, #1
 80080c4:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	2200      	movs	r2, #0
 80080cc:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d001      	beq.n	80080de <HAL_SPI_Transmit+0x41e>
  {
    return HAL_ERROR;
 80080da:	2301      	movs	r3, #1
 80080dc:	e000      	b.n	80080e0 <HAL_SPI_Transmit+0x420>
  }
  else
  {
    return HAL_OK;
 80080de:	2300      	movs	r3, #0
  }
}
 80080e0:	4618      	mov	r0, r3
 80080e2:	3718      	adds	r7, #24
 80080e4:	46bd      	mov	sp, r7
 80080e6:	bd80      	pop	{r7, pc}

080080e8 <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80080e8:	b580      	push	{r7, lr}
 80080ea:	b08a      	sub	sp, #40	@ 0x28
 80080ec:	af00      	add	r7, sp, #0
 80080ee:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	691b      	ldr	r3, [r3, #16]
 80080f6:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	695b      	ldr	r3, [r3, #20]
 80080fe:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 8008100:	6a3a      	ldr	r2, [r7, #32]
 8008102:	69fb      	ldr	r3, [r7, #28]
 8008104:	4013      	ands	r3, r2
 8008106:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	689b      	ldr	r3, [r3, #8]
 800810e:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 8008110:	2300      	movs	r3, #0
 8008112:	627b      	str	r3, [r7, #36]	@ 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 800811a:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	3330      	adds	r3, #48	@ 0x30
 8008122:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */

  /* SPI in SUSPEND mode  ----------------------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 8008124:	69fb      	ldr	r3, [r7, #28]
 8008126:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800812a:	2b00      	cmp	r3, #0
 800812c:	d010      	beq.n	8008150 <HAL_SPI_IRQHandler+0x68>
 800812e:	6a3b      	ldr	r3, [r7, #32]
 8008130:	f003 0308 	and.w	r3, r3, #8
 8008134:	2b00      	cmp	r3, #0
 8008136:	d00b      	beq.n	8008150 <HAL_SPI_IRQHandler+0x68>
  {
    /* Clear the Suspend flag */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	699a      	ldr	r2, [r3, #24]
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008146:	619a      	str	r2, [r3, #24]

    /* Suspend on going, Call the Suspend callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->SuspendCallback(hspi);
#else
    HAL_SPI_SuspendCallback(hspi);
 8008148:	6878      	ldr	r0, [r7, #4]
 800814a:	f000 f9c9 	bl	80084e0 <HAL_SPI_SuspendCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    return;
 800814e:	e19a      	b.n	8008486 <HAL_SPI_IRQHandler+0x39e>
  }

  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 8008150:	69bb      	ldr	r3, [r7, #24]
 8008152:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008156:	2b00      	cmp	r3, #0
 8008158:	d113      	bne.n	8008182 <HAL_SPI_IRQHandler+0x9a>
 800815a:	69bb      	ldr	r3, [r7, #24]
 800815c:	f003 0320 	and.w	r3, r3, #32
 8008160:	2b00      	cmp	r3, #0
 8008162:	d10e      	bne.n	8008182 <HAL_SPI_IRQHandler+0x9a>
      HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 8008164:	69bb      	ldr	r3, [r7, #24]
 8008166:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 800816a:	2b00      	cmp	r3, #0
 800816c:	d009      	beq.n	8008182 <HAL_SPI_IRQHandler+0x9a>
  {
    hspi->TxISR(hspi);
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008172:	6878      	ldr	r0, [r7, #4]
 8008174:	4798      	blx	r3
    hspi->RxISR(hspi);
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800817a:	6878      	ldr	r0, [r7, #4]
 800817c:	4798      	blx	r3
    handled = 1UL;
 800817e:	2301      	movs	r3, #1
 8008180:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 8008182:	69bb      	ldr	r3, [r7, #24]
 8008184:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008188:	2b00      	cmp	r3, #0
 800818a:	d10f      	bne.n	80081ac <HAL_SPI_IRQHandler+0xc4>
 800818c:	69bb      	ldr	r3, [r7, #24]
 800818e:	f003 0301 	and.w	r3, r3, #1
 8008192:	2b00      	cmp	r3, #0
 8008194:	d00a      	beq.n	80081ac <HAL_SPI_IRQHandler+0xc4>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8008196:	69bb      	ldr	r3, [r7, #24]
 8008198:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 800819c:	2b00      	cmp	r3, #0
 800819e:	d105      	bne.n	80081ac <HAL_SPI_IRQHandler+0xc4>
  {
    hspi->RxISR(hspi);
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80081a4:	6878      	ldr	r0, [r7, #4]
 80081a6:	4798      	blx	r3
    handled = 1UL;
 80081a8:	2301      	movs	r3, #1
 80081aa:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 80081ac:	69bb      	ldr	r3, [r7, #24]
 80081ae:	f003 0320 	and.w	r3, r3, #32
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d10f      	bne.n	80081d6 <HAL_SPI_IRQHandler+0xee>
 80081b6:	69bb      	ldr	r3, [r7, #24]
 80081b8:	f003 0302 	and.w	r3, r3, #2
 80081bc:	2b00      	cmp	r3, #0
 80081be:	d00a      	beq.n	80081d6 <HAL_SPI_IRQHandler+0xee>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 80081c0:	69bb      	ldr	r3, [r7, #24]
 80081c2:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d105      	bne.n	80081d6 <HAL_SPI_IRQHandler+0xee>
  {
    hspi->TxISR(hspi);
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80081ce:	6878      	ldr	r0, [r7, #4]
 80081d0:	4798      	blx	r3
    handled = 1UL;
 80081d2:	2301      	movs	r3, #1
 80081d4:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  if (handled != 0UL)
 80081d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081d8:	2b00      	cmp	r3, #0
 80081da:	f040 814f 	bne.w	800847c <HAL_SPI_IRQHandler+0x394>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 80081de:	69bb      	ldr	r3, [r7, #24]
 80081e0:	f003 0308 	and.w	r3, r3, #8
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	f000 808b 	beq.w	8008300 <HAL_SPI_IRQHandler+0x218>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	699a      	ldr	r2, [r3, #24]
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	f042 0208 	orr.w	r2, r2, #8
 80081f8:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	699a      	ldr	r2, [r3, #24]
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	f042 0210 	orr.w	r2, r2, #16
 8008208:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	699a      	ldr	r2, [r3, #24]
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008218:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	691a      	ldr	r2, [r3, #16]
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	f022 0208 	bic.w	r2, r2, #8
 8008228:	611a      	str	r2, [r3, #16]

    /* For the IT based receive extra polling maybe required for last packet */
    if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	689b      	ldr	r3, [r3, #8]
 8008230:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8008234:	2b00      	cmp	r3, #0
 8008236:	d13d      	bne.n	80082b4 <HAL_SPI_IRQHandler+0x1cc>
    {
      /* Pooling remaining data */
      while (hspi->RxXferCount != 0UL)
 8008238:	e036      	b.n	80082a8 <HAL_SPI_IRQHandler+0x1c0>
      {
        /* Receive data in 32 Bit mode */
        if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	68db      	ldr	r3, [r3, #12]
 800823e:	2b0f      	cmp	r3, #15
 8008240:	d90b      	bls.n	800825a <HAL_SPI_IRQHandler+0x172>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	681a      	ldr	r2, [r3, #0]
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800824a:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800824c:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008252:	1d1a      	adds	r2, r3, #4
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	66da      	str	r2, [r3, #108]	@ 0x6c
 8008258:	e01d      	b.n	8008296 <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 16 Bit mode */
        else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	68db      	ldr	r3, [r3, #12]
 800825e:	2b07      	cmp	r3, #7
 8008260:	d90b      	bls.n	800827a <HAL_SPI_IRQHandler+0x192>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008266:	68fa      	ldr	r2, [r7, #12]
 8008268:	8812      	ldrh	r2, [r2, #0]
 800826a:	b292      	uxth	r2, r2
 800826c:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008272:	1c9a      	adds	r2, r3, #2
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	66da      	str	r2, [r3, #108]	@ 0x6c
 8008278:	e00d      	b.n	8008296 <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 8 Bit mode */
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008286:	7812      	ldrb	r2, [r2, #0]
 8008288:	b2d2      	uxtb	r2, r2
 800828a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008290:	1c5a      	adds	r2, r3, #1
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	66da      	str	r2, [r3, #108]	@ 0x6c
        }

        hspi->RxXferCount--;
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 800829c:	b29b      	uxth	r3, r3
 800829e:	3b01      	subs	r3, #1
 80082a0:	b29a      	uxth	r2, r3
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
      while (hspi->RxXferCount != 0UL)
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 80082ae:	b29b      	uxth	r3, r3
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d1c2      	bne.n	800823a <HAL_SPI_IRQHandler+0x152>
      }
    }

    /* Call SPI Standard close procedure */
    SPI_CloseTransfer(hspi);
 80082b4:	6878      	ldr	r0, [r7, #4]
 80082b6:	f000 f937 	bl	8008528 <SPI_CloseTransfer>

    hspi->State = HAL_SPI_STATE_READY;
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	2201      	movs	r2, #1
 80082be:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d003      	beq.n	80082d4 <HAL_SPI_IRQHandler+0x1ec>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 80082cc:	6878      	ldr	r0, [r7, #4]
 80082ce:	f000 f8fd 	bl	80084cc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 80082d2:	e0d8      	b.n	8008486 <HAL_SPI_IRQHandler+0x39e>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 80082d4:	7cfb      	ldrb	r3, [r7, #19]
 80082d6:	2b05      	cmp	r3, #5
 80082d8:	d103      	bne.n	80082e2 <HAL_SPI_IRQHandler+0x1fa>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 80082da:	6878      	ldr	r0, [r7, #4]
 80082dc:	f000 f8ec 	bl	80084b8 <HAL_SPI_TxRxCpltCallback>
    else
    {
      /* End of the appropriate call */
    }

    return;
 80082e0:	e0ce      	b.n	8008480 <HAL_SPI_IRQHandler+0x398>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 80082e2:	7cfb      	ldrb	r3, [r7, #19]
 80082e4:	2b04      	cmp	r3, #4
 80082e6:	d103      	bne.n	80082f0 <HAL_SPI_IRQHandler+0x208>
      HAL_SPI_RxCpltCallback(hspi);
 80082e8:	6878      	ldr	r0, [r7, #4]
 80082ea:	f000 f8db 	bl	80084a4 <HAL_SPI_RxCpltCallback>
    return;
 80082ee:	e0c7      	b.n	8008480 <HAL_SPI_IRQHandler+0x398>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 80082f0:	7cfb      	ldrb	r3, [r7, #19]
 80082f2:	2b03      	cmp	r3, #3
 80082f4:	f040 80c4 	bne.w	8008480 <HAL_SPI_IRQHandler+0x398>
      HAL_SPI_TxCpltCallback(hspi);
 80082f8:	6878      	ldr	r0, [r7, #4]
 80082fa:	f000 f8c9 	bl	8008490 <HAL_SPI_TxCpltCallback>
    return;
 80082fe:	e0bf      	b.n	8008480 <HAL_SPI_IRQHandler+0x398>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 8008300:	69bb      	ldr	r3, [r7, #24]
 8008302:	f403 7358 	and.w	r3, r3, #864	@ 0x360
 8008306:	2b00      	cmp	r3, #0
 8008308:	f000 80bd 	beq.w	8008486 <HAL_SPI_IRQHandler+0x39e>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 800830c:	69bb      	ldr	r3, [r7, #24]
 800830e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008312:	2b00      	cmp	r3, #0
 8008314:	d00f      	beq.n	8008336 <HAL_SPI_IRQHandler+0x24e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800831c:	f043 0204 	orr.w	r2, r3, #4
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	699a      	ldr	r2, [r3, #24]
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008334:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 8008336:	69bb      	ldr	r3, [r7, #24]
 8008338:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800833c:	2b00      	cmp	r3, #0
 800833e:	d00f      	beq.n	8008360 <HAL_SPI_IRQHandler+0x278>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008346:	f043 0201 	orr.w	r2, r3, #1
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	699a      	ldr	r2, [r3, #24]
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800835e:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 8008360:	69bb      	ldr	r3, [r7, #24]
 8008362:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008366:	2b00      	cmp	r3, #0
 8008368:	d00f      	beq.n	800838a <HAL_SPI_IRQHandler+0x2a2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008370:	f043 0208 	orr.w	r2, r3, #8
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	699a      	ldr	r2, [r3, #24]
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008388:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 800838a:	69bb      	ldr	r3, [r7, #24]
 800838c:	f003 0320 	and.w	r3, r3, #32
 8008390:	2b00      	cmp	r3, #0
 8008392:	d00f      	beq.n	80083b4 <HAL_SPI_IRQHandler+0x2cc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800839a:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	699a      	ldr	r2, [r3, #24]
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	f042 0220 	orr.w	r2, r2, #32
 80083b2:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d062      	beq.n	8008484 <HAL_SPI_IRQHandler+0x39c>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	681a      	ldr	r2, [r3, #0]
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	f022 0201 	bic.w	r2, r2, #1
 80083cc:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	691b      	ldr	r3, [r3, #16]
 80083d4:	687a      	ldr	r2, [r7, #4]
 80083d6:	6812      	ldr	r2, [r2, #0]
 80083d8:	f423 735a 	bic.w	r3, r3, #872	@ 0x368
 80083dc:	f023 0303 	bic.w	r3, r3, #3
 80083e0:	6113      	str	r3, [r2, #16]
                                  SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR));

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 80083e2:	697b      	ldr	r3, [r7, #20]
 80083e4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80083e8:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80083ec:	d13e      	bne.n	800846c <HAL_SPI_IRQHandler+0x384>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	689a      	ldr	r2, [r3, #8]
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 80083fc:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008404:	2b00      	cmp	r3, #0
 8008406:	d015      	beq.n	8008434 <HAL_SPI_IRQHandler+0x34c>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800840e:	4a1f      	ldr	r2, [pc, #124]	@ (800848c <HAL_SPI_IRQHandler+0x3a4>)
 8008410:	66da      	str	r2, [r3, #108]	@ 0x6c
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008418:	4618      	mov	r0, r3
 800841a:	f7fa faf1 	bl	8002a00 <HAL_DMA_Abort_IT>
 800841e:	4603      	mov	r3, r0
 8008420:	2b00      	cmp	r3, #0
 8008422:	d007      	beq.n	8008434 <HAL_SPI_IRQHandler+0x34c>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800842a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800843a:	2b00      	cmp	r3, #0
 800843c:	d022      	beq.n	8008484 <HAL_SPI_IRQHandler+0x39c>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008444:	4a11      	ldr	r2, [pc, #68]	@ (800848c <HAL_SPI_IRQHandler+0x3a4>)
 8008446:	66da      	str	r2, [r3, #108]	@ 0x6c
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800844e:	4618      	mov	r0, r3
 8008450:	f7fa fad6 	bl	8002a00 <HAL_DMA_Abort_IT>
 8008454:	4603      	mov	r3, r0
 8008456:	2b00      	cmp	r3, #0
 8008458:	d014      	beq.n	8008484 <HAL_SPI_IRQHandler+0x39c>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008460:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800846a:	e00b      	b.n	8008484 <HAL_SPI_IRQHandler+0x39c>
        hspi->State = HAL_SPI_STATE_READY;
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	2201      	movs	r2, #1
 8008470:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
        HAL_SPI_ErrorCallback(hspi);
 8008474:	6878      	ldr	r0, [r7, #4]
 8008476:	f000 f829 	bl	80084cc <HAL_SPI_ErrorCallback>
    return;
 800847a:	e003      	b.n	8008484 <HAL_SPI_IRQHandler+0x39c>
    return;
 800847c:	bf00      	nop
 800847e:	e002      	b.n	8008486 <HAL_SPI_IRQHandler+0x39e>
    return;
 8008480:	bf00      	nop
 8008482:	e000      	b.n	8008486 <HAL_SPI_IRQHandler+0x39e>
    return;
 8008484:	bf00      	nop
  }
}
 8008486:	3728      	adds	r7, #40	@ 0x28
 8008488:	46bd      	mov	sp, r7
 800848a:	bd80      	pop	{r7, pc}
 800848c:	080084f5 	.word	0x080084f5

08008490 <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8008490:	b480      	push	{r7}
 8008492:	b083      	sub	sp, #12
 8008494:	af00      	add	r7, sp, #0
 8008496:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 8008498:	bf00      	nop
 800849a:	370c      	adds	r7, #12
 800849c:	46bd      	mov	sp, r7
 800849e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084a2:	4770      	bx	lr

080084a4 <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 80084a4:	b480      	push	{r7}
 80084a6:	b083      	sub	sp, #12
 80084a8:	af00      	add	r7, sp, #0
 80084aa:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 80084ac:	bf00      	nop
 80084ae:	370c      	adds	r7, #12
 80084b0:	46bd      	mov	sp, r7
 80084b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084b6:	4770      	bx	lr

080084b8 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 80084b8:	b480      	push	{r7}
 80084ba:	b083      	sub	sp, #12
 80084bc:	af00      	add	r7, sp, #0
 80084be:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 80084c0:	bf00      	nop
 80084c2:	370c      	adds	r7, #12
 80084c4:	46bd      	mov	sp, r7
 80084c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ca:	4770      	bx	lr

080084cc <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 80084cc:	b480      	push	{r7}
 80084ce:	b083      	sub	sp, #12
 80084d0:	af00      	add	r7, sp, #0
 80084d2:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80084d4:	bf00      	nop
 80084d6:	370c      	adds	r7, #12
 80084d8:	46bd      	mov	sp, r7
 80084da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084de:	4770      	bx	lr

080084e0 <HAL_SPI_SuspendCallback>:
  * @brief  SPI Suspend callback.
  * @param  hspi SPI handle.
  * @retval None
  */
__weak void HAL_SPI_SuspendCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 80084e0:	b480      	push	{r7}
 80084e2:	b083      	sub	sp, #12
 80084e4:	af00      	add	r7, sp, #0
 80084e6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_SuspendCallback can be implemented in the user file.
   */
}
 80084e8:	bf00      	nop
 80084ea:	370c      	adds	r7, #12
 80084ec:	46bd      	mov	sp, r7
 80084ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084f2:	4770      	bx	lr

080084f4 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80084f4:	b580      	push	{r7, lr}
 80084f6:	b084      	sub	sp, #16
 80084f8:	af00      	add	r7, sp, #0
 80084fa:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008500:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	2200      	movs	r2, #0
 8008506:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
  hspi->TxXferCount = (uint16_t) 0UL;
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	2200      	movs	r2, #0
 800850e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	2201      	movs	r2, #1
 8008516:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800851a:	68f8      	ldr	r0, [r7, #12]
 800851c:	f7ff ffd6 	bl	80084cc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8008520:	bf00      	nop
 8008522:	3710      	adds	r7, #16
 8008524:	46bd      	mov	sp, r7
 8008526:	bd80      	pop	{r7, pc}

08008528 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8008528:	b480      	push	{r7}
 800852a:	b085      	sub	sp, #20
 800852c:	af00      	add	r7, sp, #0
 800852e:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	695b      	ldr	r3, [r3, #20]
 8008536:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	699a      	ldr	r2, [r3, #24]
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	f042 0208 	orr.w	r2, r2, #8
 8008546:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	699a      	ldr	r2, [r3, #24]
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	f042 0210 	orr.w	r2, r2, #16
 8008556:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	681a      	ldr	r2, [r3, #0]
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	f022 0201 	bic.w	r2, r2, #1
 8008566:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	691b      	ldr	r3, [r3, #16]
 800856e:	687a      	ldr	r2, [r7, #4]
 8008570:	6812      	ldr	r2, [r2, #0]
 8008572:	f423 735b 	bic.w	r3, r3, #876	@ 0x36c
 8008576:	f023 0303 	bic.w	r3, r3, #3
 800857a:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	689a      	ldr	r2, [r3, #8]
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 800858a:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 8008592:	b2db      	uxtb	r3, r3
 8008594:	2b04      	cmp	r3, #4
 8008596:	d014      	beq.n	80085c2 <SPI_CloseTransfer+0x9a>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	f003 0320 	and.w	r3, r3, #32
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d00f      	beq.n	80085c2 <SPI_CloseTransfer+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80085a8:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	699a      	ldr	r2, [r3, #24]
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	f042 0220 	orr.w	r2, r2, #32
 80085c0:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 80085c8:	b2db      	uxtb	r3, r3
 80085ca:	2b03      	cmp	r3, #3
 80085cc:	d014      	beq.n	80085f8 <SPI_CloseTransfer+0xd0>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	d00f      	beq.n	80085f8 <SPI_CloseTransfer+0xd0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80085de:	f043 0204 	orr.w	r2, r3, #4
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	699a      	ldr	r2, [r3, #24]
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80085f6:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80085fe:	2b00      	cmp	r3, #0
 8008600:	d00f      	beq.n	8008622 <SPI_CloseTransfer+0xfa>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008608:	f043 0201 	orr.w	r2, r3, #1
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	699a      	ldr	r2, [r3, #24]
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008620:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008628:	2b00      	cmp	r3, #0
 800862a:	d00f      	beq.n	800864c <SPI_CloseTransfer+0x124>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008632:	f043 0208 	orr.w	r2, r3, #8
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	699a      	ldr	r2, [r3, #24]
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800864a:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	2200      	movs	r2, #0
 8008650:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->RxXferCount = (uint16_t)0UL;
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	2200      	movs	r2, #0
 8008658:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
}
 800865c:	bf00      	nop
 800865e:	3714      	adds	r7, #20
 8008660:	46bd      	mov	sp, r7
 8008662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008666:	4770      	bx	lr

08008668 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8008668:	b580      	push	{r7, lr}
 800866a:	b084      	sub	sp, #16
 800866c:	af00      	add	r7, sp, #0
 800866e:	60f8      	str	r0, [r7, #12]
 8008670:	60b9      	str	r1, [r7, #8]
 8008672:	603b      	str	r3, [r7, #0]
 8008674:	4613      	mov	r3, r2
 8008676:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8008678:	e010      	b.n	800869c <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800867a:	f7fa f859 	bl	8002730 <HAL_GetTick>
 800867e:	4602      	mov	r2, r0
 8008680:	69bb      	ldr	r3, [r7, #24]
 8008682:	1ad3      	subs	r3, r2, r3
 8008684:	683a      	ldr	r2, [r7, #0]
 8008686:	429a      	cmp	r2, r3
 8008688:	d803      	bhi.n	8008692 <SPI_WaitOnFlagUntilTimeout+0x2a>
 800868a:	683b      	ldr	r3, [r7, #0]
 800868c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008690:	d102      	bne.n	8008698 <SPI_WaitOnFlagUntilTimeout+0x30>
 8008692:	683b      	ldr	r3, [r7, #0]
 8008694:	2b00      	cmp	r3, #0
 8008696:	d101      	bne.n	800869c <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8008698:	2303      	movs	r3, #3
 800869a:	e00f      	b.n	80086bc <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	695a      	ldr	r2, [r3, #20]
 80086a2:	68bb      	ldr	r3, [r7, #8]
 80086a4:	4013      	ands	r3, r2
 80086a6:	68ba      	ldr	r2, [r7, #8]
 80086a8:	429a      	cmp	r2, r3
 80086aa:	bf0c      	ite	eq
 80086ac:	2301      	moveq	r3, #1
 80086ae:	2300      	movne	r3, #0
 80086b0:	b2db      	uxtb	r3, r3
 80086b2:	461a      	mov	r2, r3
 80086b4:	79fb      	ldrb	r3, [r7, #7]
 80086b6:	429a      	cmp	r2, r3
 80086b8:	d0df      	beq.n	800867a <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 80086ba:	2300      	movs	r3, #0
}
 80086bc:	4618      	mov	r0, r3
 80086be:	3710      	adds	r7, #16
 80086c0:	46bd      	mov	sp, r7
 80086c2:	bd80      	pop	{r7, pc}

080086c4 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 80086c4:	b480      	push	{r7}
 80086c6:	b085      	sub	sp, #20
 80086c8:	af00      	add	r7, sp, #0
 80086ca:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80086d0:	095b      	lsrs	r3, r3, #5
 80086d2:	3301      	adds	r3, #1
 80086d4:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	68db      	ldr	r3, [r3, #12]
 80086da:	3301      	adds	r3, #1
 80086dc:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 80086de:	68bb      	ldr	r3, [r7, #8]
 80086e0:	3307      	adds	r3, #7
 80086e2:	08db      	lsrs	r3, r3, #3
 80086e4:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 80086e6:	68bb      	ldr	r3, [r7, #8]
 80086e8:	68fa      	ldr	r2, [r7, #12]
 80086ea:	fb02 f303 	mul.w	r3, r2, r3
}
 80086ee:	4618      	mov	r0, r3
 80086f0:	3714      	adds	r7, #20
 80086f2:	46bd      	mov	sp, r7
 80086f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086f8:	4770      	bx	lr

080086fa <HAL_SPIEx_SetConfigAutonomousMode>:
  *                the configuration information of the autonomous mode for the specified SPIx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPIEx_SetConfigAutonomousMode(SPI_HandleTypeDef *hspi,
                                                    const SPI_AutonomousModeConfTypeDef *sConfig)
{
 80086fa:	b480      	push	{r7}
 80086fc:	b083      	sub	sp, #12
 80086fe:	af00      	add	r7, sp, #0
 8008700:	6078      	str	r0, [r7, #4]
 8008702:	6039      	str	r1, [r7, #0]
  if (hspi->State == HAL_SPI_STATE_READY)
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 800870a:	b2db      	uxtb	r3, r3
 800870c:	2b01      	cmp	r3, #1
 800870e:	d12e      	bne.n	800876e <HAL_SPIEx_SetConfigAutonomousMode+0x74>
  {
    /* Process Locked */
    __HAL_LOCK(hspi);
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 8008716:	2b01      	cmp	r3, #1
 8008718:	d101      	bne.n	800871e <HAL_SPIEx_SetConfigAutonomousMode+0x24>
 800871a:	2302      	movs	r3, #2
 800871c:	e028      	b.n	8008770 <HAL_SPIEx_SetConfigAutonomousMode+0x76>
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	2201      	movs	r2, #1
 8008722:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

    hspi->State = HAL_SPI_STATE_BUSY;
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	2202      	movs	r2, #2
 800872a:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
    assert_param(IS_SPI_AUTONOMOUS_INSTANCE(hspi->Instance));
    assert_param(IS_SPI_TRIG_SOURCE(hspi->Instance, sConfig->TriggerSelection));
    assert_param(IS_SPI_AUTO_MODE_TRG_POL(sConfig->TriggerPolarity));

    /* Disable the selected SPI peripheral to be able to configure AUTOCR */
    __HAL_SPI_DISABLE(hspi);
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	681a      	ldr	r2, [r3, #0]
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	f022 0201 	bic.w	r2, r2, #1
 800873c:	601a      	str	r2, [r3, #0]

    /* SPIx AUTOCR Configuration */
    WRITE_REG(hspi->Instance->AUTOCR, (sConfig->TriggerState | ((sConfig->TriggerSelection) & SPI_AUTOCR_TRIGSEL_Msk) |
 800873e:	683b      	ldr	r3, [r7, #0]
 8008740:	681a      	ldr	r2, [r3, #0]
 8008742:	683b      	ldr	r3, [r7, #0]
 8008744:	685b      	ldr	r3, [r3, #4]
 8008746:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 800874a:	ea42 0103 	orr.w	r1, r2, r3
 800874e:	683b      	ldr	r3, [r7, #0]
 8008750:	689a      	ldr	r2, [r3, #8]
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	430a      	orrs	r2, r1
 8008758:	61da      	str	r2, [r3, #28]
                                       sConfig->TriggerPolarity));

    hspi->State = HAL_SPI_STATE_READY;
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	2201      	movs	r2, #1
 800875e:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	2200      	movs	r2, #0
 8008766:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800876a:	2300      	movs	r3, #0
 800876c:	e000      	b.n	8008770 <HAL_SPIEx_SetConfigAutonomousMode+0x76>
  }
  else
  {
    return HAL_ERROR;
 800876e:	2301      	movs	r3, #1
  }
}
 8008770:	4618      	mov	r0, r3
 8008772:	370c      	adds	r7, #12
 8008774:	46bd      	mov	sp, r7
 8008776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800877a:	4770      	bx	lr

0800877c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800877c:	b580      	push	{r7, lr}
 800877e:	b082      	sub	sp, #8
 8008780:	af00      	add	r7, sp, #0
 8008782:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	2b00      	cmp	r3, #0
 8008788:	d101      	bne.n	800878e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800878a:	2301      	movs	r3, #1
 800878c:	e049      	b.n	8008822 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008794:	b2db      	uxtb	r3, r3
 8008796:	2b00      	cmp	r3, #0
 8008798:	d106      	bne.n	80087a8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	2200      	movs	r2, #0
 800879e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80087a2:	6878      	ldr	r0, [r7, #4]
 80087a4:	f000 f841 	bl	800882a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	2202      	movs	r2, #2
 80087ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	681a      	ldr	r2, [r3, #0]
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	3304      	adds	r3, #4
 80087b8:	4619      	mov	r1, r3
 80087ba:	4610      	mov	r0, r2
 80087bc:	f000 fa58 	bl	8008c70 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	2201      	movs	r2, #1
 80087c4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	2201      	movs	r2, #1
 80087cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	2201      	movs	r2, #1
 80087d4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	2201      	movs	r2, #1
 80087dc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	2201      	movs	r2, #1
 80087e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	2201      	movs	r2, #1
 80087ec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	2201      	movs	r2, #1
 80087f4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	2201      	movs	r2, #1
 80087fc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	2201      	movs	r2, #1
 8008804:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	2201      	movs	r2, #1
 800880c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	2201      	movs	r2, #1
 8008814:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	2201      	movs	r2, #1
 800881c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008820:	2300      	movs	r3, #0
}
 8008822:	4618      	mov	r0, r3
 8008824:	3708      	adds	r7, #8
 8008826:	46bd      	mov	sp, r7
 8008828:	bd80      	pop	{r7, pc}

0800882a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800882a:	b480      	push	{r7}
 800882c:	b083      	sub	sp, #12
 800882e:	af00      	add	r7, sp, #0
 8008830:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8008832:	bf00      	nop
 8008834:	370c      	adds	r7, #12
 8008836:	46bd      	mov	sp, r7
 8008838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800883c:	4770      	bx	lr
	...

08008840 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008840:	b480      	push	{r7}
 8008842:	b085      	sub	sp, #20
 8008844:	af00      	add	r7, sp, #0
 8008846:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800884e:	b2db      	uxtb	r3, r3
 8008850:	2b01      	cmp	r3, #1
 8008852:	d001      	beq.n	8008858 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008854:	2301      	movs	r3, #1
 8008856:	e072      	b.n	800893e <HAL_TIM_Base_Start_IT+0xfe>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	2202      	movs	r2, #2
 800885c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	68da      	ldr	r2, [r3, #12]
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	f042 0201 	orr.w	r2, r2, #1
 800886e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	4a35      	ldr	r2, [pc, #212]	@ (800894c <HAL_TIM_Base_Start_IT+0x10c>)
 8008876:	4293      	cmp	r3, r2
 8008878:	d040      	beq.n	80088fc <HAL_TIM_Base_Start_IT+0xbc>
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	4a34      	ldr	r2, [pc, #208]	@ (8008950 <HAL_TIM_Base_Start_IT+0x110>)
 8008880:	4293      	cmp	r3, r2
 8008882:	d03b      	beq.n	80088fc <HAL_TIM_Base_Start_IT+0xbc>
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800888c:	d036      	beq.n	80088fc <HAL_TIM_Base_Start_IT+0xbc>
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008896:	d031      	beq.n	80088fc <HAL_TIM_Base_Start_IT+0xbc>
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	4a2d      	ldr	r2, [pc, #180]	@ (8008954 <HAL_TIM_Base_Start_IT+0x114>)
 800889e:	4293      	cmp	r3, r2
 80088a0:	d02c      	beq.n	80088fc <HAL_TIM_Base_Start_IT+0xbc>
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	4a2c      	ldr	r2, [pc, #176]	@ (8008958 <HAL_TIM_Base_Start_IT+0x118>)
 80088a8:	4293      	cmp	r3, r2
 80088aa:	d027      	beq.n	80088fc <HAL_TIM_Base_Start_IT+0xbc>
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	4a2a      	ldr	r2, [pc, #168]	@ (800895c <HAL_TIM_Base_Start_IT+0x11c>)
 80088b2:	4293      	cmp	r3, r2
 80088b4:	d022      	beq.n	80088fc <HAL_TIM_Base_Start_IT+0xbc>
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	4a29      	ldr	r2, [pc, #164]	@ (8008960 <HAL_TIM_Base_Start_IT+0x120>)
 80088bc:	4293      	cmp	r3, r2
 80088be:	d01d      	beq.n	80088fc <HAL_TIM_Base_Start_IT+0xbc>
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	4a27      	ldr	r2, [pc, #156]	@ (8008964 <HAL_TIM_Base_Start_IT+0x124>)
 80088c6:	4293      	cmp	r3, r2
 80088c8:	d018      	beq.n	80088fc <HAL_TIM_Base_Start_IT+0xbc>
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	4a26      	ldr	r2, [pc, #152]	@ (8008968 <HAL_TIM_Base_Start_IT+0x128>)
 80088d0:	4293      	cmp	r3, r2
 80088d2:	d013      	beq.n	80088fc <HAL_TIM_Base_Start_IT+0xbc>
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	4a24      	ldr	r2, [pc, #144]	@ (800896c <HAL_TIM_Base_Start_IT+0x12c>)
 80088da:	4293      	cmp	r3, r2
 80088dc:	d00e      	beq.n	80088fc <HAL_TIM_Base_Start_IT+0xbc>
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	4a23      	ldr	r2, [pc, #140]	@ (8008970 <HAL_TIM_Base_Start_IT+0x130>)
 80088e4:	4293      	cmp	r3, r2
 80088e6:	d009      	beq.n	80088fc <HAL_TIM_Base_Start_IT+0xbc>
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	4a21      	ldr	r2, [pc, #132]	@ (8008974 <HAL_TIM_Base_Start_IT+0x134>)
 80088ee:	4293      	cmp	r3, r2
 80088f0:	d004      	beq.n	80088fc <HAL_TIM_Base_Start_IT+0xbc>
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	4a20      	ldr	r2, [pc, #128]	@ (8008978 <HAL_TIM_Base_Start_IT+0x138>)
 80088f8:	4293      	cmp	r3, r2
 80088fa:	d115      	bne.n	8008928 <HAL_TIM_Base_Start_IT+0xe8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	689a      	ldr	r2, [r3, #8]
 8008902:	4b1e      	ldr	r3, [pc, #120]	@ (800897c <HAL_TIM_Base_Start_IT+0x13c>)
 8008904:	4013      	ands	r3, r2
 8008906:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	2b06      	cmp	r3, #6
 800890c:	d015      	beq.n	800893a <HAL_TIM_Base_Start_IT+0xfa>
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008914:	d011      	beq.n	800893a <HAL_TIM_Base_Start_IT+0xfa>
    {
      __HAL_TIM_ENABLE(htim);
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	681a      	ldr	r2, [r3, #0]
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	f042 0201 	orr.w	r2, r2, #1
 8008924:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008926:	e008      	b.n	800893a <HAL_TIM_Base_Start_IT+0xfa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	681a      	ldr	r2, [r3, #0]
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	f042 0201 	orr.w	r2, r2, #1
 8008936:	601a      	str	r2, [r3, #0]
 8008938:	e000      	b.n	800893c <HAL_TIM_Base_Start_IT+0xfc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800893a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800893c:	2300      	movs	r3, #0
}
 800893e:	4618      	mov	r0, r3
 8008940:	3714      	adds	r7, #20
 8008942:	46bd      	mov	sp, r7
 8008944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008948:	4770      	bx	lr
 800894a:	bf00      	nop
 800894c:	40012c00 	.word	0x40012c00
 8008950:	50012c00 	.word	0x50012c00
 8008954:	40000400 	.word	0x40000400
 8008958:	50000400 	.word	0x50000400
 800895c:	40000800 	.word	0x40000800
 8008960:	50000800 	.word	0x50000800
 8008964:	40000c00 	.word	0x40000c00
 8008968:	50000c00 	.word	0x50000c00
 800896c:	40013400 	.word	0x40013400
 8008970:	50013400 	.word	0x50013400
 8008974:	40014000 	.word	0x40014000
 8008978:	50014000 	.word	0x50014000
 800897c:	00010007 	.word	0x00010007

08008980 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008980:	b580      	push	{r7, lr}
 8008982:	b084      	sub	sp, #16
 8008984:	af00      	add	r7, sp, #0
 8008986:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	68db      	ldr	r3, [r3, #12]
 800898e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	691b      	ldr	r3, [r3, #16]
 8008996:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8008998:	68bb      	ldr	r3, [r7, #8]
 800899a:	f003 0302 	and.w	r3, r3, #2
 800899e:	2b00      	cmp	r3, #0
 80089a0:	d020      	beq.n	80089e4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80089a2:	68fb      	ldr	r3, [r7, #12]
 80089a4:	f003 0302 	and.w	r3, r3, #2
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	d01b      	beq.n	80089e4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	f06f 0202 	mvn.w	r2, #2
 80089b4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	2201      	movs	r2, #1
 80089ba:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	699b      	ldr	r3, [r3, #24]
 80089c2:	f003 0303 	and.w	r3, r3, #3
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	d003      	beq.n	80089d2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80089ca:	6878      	ldr	r0, [r7, #4]
 80089cc:	f000 f931 	bl	8008c32 <HAL_TIM_IC_CaptureCallback>
 80089d0:	e005      	b.n	80089de <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80089d2:	6878      	ldr	r0, [r7, #4]
 80089d4:	f000 f923 	bl	8008c1e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80089d8:	6878      	ldr	r0, [r7, #4]
 80089da:	f000 f934 	bl	8008c46 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	2200      	movs	r2, #0
 80089e2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80089e4:	68bb      	ldr	r3, [r7, #8]
 80089e6:	f003 0304 	and.w	r3, r3, #4
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	d020      	beq.n	8008a30 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	f003 0304 	and.w	r3, r3, #4
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	d01b      	beq.n	8008a30 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	f06f 0204 	mvn.w	r2, #4
 8008a00:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	2202      	movs	r2, #2
 8008a06:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	699b      	ldr	r3, [r3, #24]
 8008a0e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	d003      	beq.n	8008a1e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008a16:	6878      	ldr	r0, [r7, #4]
 8008a18:	f000 f90b 	bl	8008c32 <HAL_TIM_IC_CaptureCallback>
 8008a1c:	e005      	b.n	8008a2a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008a1e:	6878      	ldr	r0, [r7, #4]
 8008a20:	f000 f8fd 	bl	8008c1e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008a24:	6878      	ldr	r0, [r7, #4]
 8008a26:	f000 f90e 	bl	8008c46 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	2200      	movs	r2, #0
 8008a2e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8008a30:	68bb      	ldr	r3, [r7, #8]
 8008a32:	f003 0308 	and.w	r3, r3, #8
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	d020      	beq.n	8008a7c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	f003 0308 	and.w	r3, r3, #8
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	d01b      	beq.n	8008a7c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	f06f 0208 	mvn.w	r2, #8
 8008a4c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	2204      	movs	r2, #4
 8008a52:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	69db      	ldr	r3, [r3, #28]
 8008a5a:	f003 0303 	and.w	r3, r3, #3
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	d003      	beq.n	8008a6a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008a62:	6878      	ldr	r0, [r7, #4]
 8008a64:	f000 f8e5 	bl	8008c32 <HAL_TIM_IC_CaptureCallback>
 8008a68:	e005      	b.n	8008a76 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008a6a:	6878      	ldr	r0, [r7, #4]
 8008a6c:	f000 f8d7 	bl	8008c1e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008a70:	6878      	ldr	r0, [r7, #4]
 8008a72:	f000 f8e8 	bl	8008c46 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	2200      	movs	r2, #0
 8008a7a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8008a7c:	68bb      	ldr	r3, [r7, #8]
 8008a7e:	f003 0310 	and.w	r3, r3, #16
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	d020      	beq.n	8008ac8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	f003 0310 	and.w	r3, r3, #16
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	d01b      	beq.n	8008ac8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	f06f 0210 	mvn.w	r2, #16
 8008a98:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	2208      	movs	r2, #8
 8008a9e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	69db      	ldr	r3, [r3, #28]
 8008aa6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	d003      	beq.n	8008ab6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008aae:	6878      	ldr	r0, [r7, #4]
 8008ab0:	f000 f8bf 	bl	8008c32 <HAL_TIM_IC_CaptureCallback>
 8008ab4:	e005      	b.n	8008ac2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008ab6:	6878      	ldr	r0, [r7, #4]
 8008ab8:	f000 f8b1 	bl	8008c1e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008abc:	6878      	ldr	r0, [r7, #4]
 8008abe:	f000 f8c2 	bl	8008c46 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	2200      	movs	r2, #0
 8008ac6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8008ac8:	68bb      	ldr	r3, [r7, #8]
 8008aca:	f003 0301 	and.w	r3, r3, #1
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d00c      	beq.n	8008aec <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8008ad2:	68fb      	ldr	r3, [r7, #12]
 8008ad4:	f003 0301 	and.w	r3, r3, #1
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	d007      	beq.n	8008aec <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	f06f 0201 	mvn.w	r2, #1
 8008ae4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008ae6:	6878      	ldr	r0, [r7, #4]
 8008ae8:	f7f8 fdb0 	bl	800164c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8008aec:	68bb      	ldr	r3, [r7, #8]
 8008aee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d104      	bne.n	8008b00 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8008af6:	68bb      	ldr	r3, [r7, #8]
 8008af8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	d00c      	beq.n	8008b1a <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008b00:	68fb      	ldr	r3, [r7, #12]
 8008b02:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	d007      	beq.n	8008b1a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8008b12:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008b14:	6878      	ldr	r0, [r7, #4]
 8008b16:	f000 f9b5 	bl	8008e84 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8008b1a:	68bb      	ldr	r3, [r7, #8]
 8008b1c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	d00c      	beq.n	8008b3e <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008b24:	68fb      	ldr	r3, [r7, #12]
 8008b26:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	d007      	beq.n	8008b3e <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8008b36:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008b38:	6878      	ldr	r0, [r7, #4]
 8008b3a:	f000 f9ad 	bl	8008e98 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8008b3e:	68bb      	ldr	r3, [r7, #8]
 8008b40:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	d00c      	beq.n	8008b62 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d007      	beq.n	8008b62 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8008b5a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008b5c:	6878      	ldr	r0, [r7, #4]
 8008b5e:	f000 f87c 	bl	8008c5a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8008b62:	68bb      	ldr	r3, [r7, #8]
 8008b64:	f003 0320 	and.w	r3, r3, #32
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	d00c      	beq.n	8008b86 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	f003 0320 	and.w	r3, r3, #32
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	d007      	beq.n	8008b86 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	f06f 0220 	mvn.w	r2, #32
 8008b7e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008b80:	6878      	ldr	r0, [r7, #4]
 8008b82:	f000 f975 	bl	8008e70 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8008b86:	68bb      	ldr	r3, [r7, #8]
 8008b88:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	d00c      	beq.n	8008baa <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	d007      	beq.n	8008baa <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8008ba2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8008ba4:	6878      	ldr	r0, [r7, #4]
 8008ba6:	f000 f981 	bl	8008eac <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8008baa:	68bb      	ldr	r3, [r7, #8]
 8008bac:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	d00c      	beq.n	8008bce <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	d007      	beq.n	8008bce <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8008bc6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8008bc8:	6878      	ldr	r0, [r7, #4]
 8008bca:	f000 f979 	bl	8008ec0 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8008bce:	68bb      	ldr	r3, [r7, #8]
 8008bd0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	d00c      	beq.n	8008bf2 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	d007      	beq.n	8008bf2 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8008bea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8008bec:	6878      	ldr	r0, [r7, #4]
 8008bee:	f000 f971 	bl	8008ed4 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8008bf2:	68bb      	ldr	r3, [r7, #8]
 8008bf4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	d00c      	beq.n	8008c16 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8008bfc:	68fb      	ldr	r3, [r7, #12]
 8008bfe:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	d007      	beq.n	8008c16 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8008c0e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8008c10:	6878      	ldr	r0, [r7, #4]
 8008c12:	f000 f969 	bl	8008ee8 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008c16:	bf00      	nop
 8008c18:	3710      	adds	r7, #16
 8008c1a:	46bd      	mov	sp, r7
 8008c1c:	bd80      	pop	{r7, pc}

08008c1e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008c1e:	b480      	push	{r7}
 8008c20:	b083      	sub	sp, #12
 8008c22:	af00      	add	r7, sp, #0
 8008c24:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008c26:	bf00      	nop
 8008c28:	370c      	adds	r7, #12
 8008c2a:	46bd      	mov	sp, r7
 8008c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c30:	4770      	bx	lr

08008c32 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008c32:	b480      	push	{r7}
 8008c34:	b083      	sub	sp, #12
 8008c36:	af00      	add	r7, sp, #0
 8008c38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008c3a:	bf00      	nop
 8008c3c:	370c      	adds	r7, #12
 8008c3e:	46bd      	mov	sp, r7
 8008c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c44:	4770      	bx	lr

08008c46 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008c46:	b480      	push	{r7}
 8008c48:	b083      	sub	sp, #12
 8008c4a:	af00      	add	r7, sp, #0
 8008c4c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008c4e:	bf00      	nop
 8008c50:	370c      	adds	r7, #12
 8008c52:	46bd      	mov	sp, r7
 8008c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c58:	4770      	bx	lr

08008c5a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008c5a:	b480      	push	{r7}
 8008c5c:	b083      	sub	sp, #12
 8008c5e:	af00      	add	r7, sp, #0
 8008c60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008c62:	bf00      	nop
 8008c64:	370c      	adds	r7, #12
 8008c66:	46bd      	mov	sp, r7
 8008c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c6c:	4770      	bx	lr
	...

08008c70 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008c70:	b480      	push	{r7}
 8008c72:	b085      	sub	sp, #20
 8008c74:	af00      	add	r7, sp, #0
 8008c76:	6078      	str	r0, [r7, #4]
 8008c78:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	4a6b      	ldr	r2, [pc, #428]	@ (8008e30 <TIM_Base_SetConfig+0x1c0>)
 8008c84:	4293      	cmp	r3, r2
 8008c86:	d02b      	beq.n	8008ce0 <TIM_Base_SetConfig+0x70>
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	4a6a      	ldr	r2, [pc, #424]	@ (8008e34 <TIM_Base_SetConfig+0x1c4>)
 8008c8c:	4293      	cmp	r3, r2
 8008c8e:	d027      	beq.n	8008ce0 <TIM_Base_SetConfig+0x70>
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008c96:	d023      	beq.n	8008ce0 <TIM_Base_SetConfig+0x70>
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008c9e:	d01f      	beq.n	8008ce0 <TIM_Base_SetConfig+0x70>
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	4a65      	ldr	r2, [pc, #404]	@ (8008e38 <TIM_Base_SetConfig+0x1c8>)
 8008ca4:	4293      	cmp	r3, r2
 8008ca6:	d01b      	beq.n	8008ce0 <TIM_Base_SetConfig+0x70>
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	4a64      	ldr	r2, [pc, #400]	@ (8008e3c <TIM_Base_SetConfig+0x1cc>)
 8008cac:	4293      	cmp	r3, r2
 8008cae:	d017      	beq.n	8008ce0 <TIM_Base_SetConfig+0x70>
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	4a63      	ldr	r2, [pc, #396]	@ (8008e40 <TIM_Base_SetConfig+0x1d0>)
 8008cb4:	4293      	cmp	r3, r2
 8008cb6:	d013      	beq.n	8008ce0 <TIM_Base_SetConfig+0x70>
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	4a62      	ldr	r2, [pc, #392]	@ (8008e44 <TIM_Base_SetConfig+0x1d4>)
 8008cbc:	4293      	cmp	r3, r2
 8008cbe:	d00f      	beq.n	8008ce0 <TIM_Base_SetConfig+0x70>
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	4a61      	ldr	r2, [pc, #388]	@ (8008e48 <TIM_Base_SetConfig+0x1d8>)
 8008cc4:	4293      	cmp	r3, r2
 8008cc6:	d00b      	beq.n	8008ce0 <TIM_Base_SetConfig+0x70>
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	4a60      	ldr	r2, [pc, #384]	@ (8008e4c <TIM_Base_SetConfig+0x1dc>)
 8008ccc:	4293      	cmp	r3, r2
 8008cce:	d007      	beq.n	8008ce0 <TIM_Base_SetConfig+0x70>
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	4a5f      	ldr	r2, [pc, #380]	@ (8008e50 <TIM_Base_SetConfig+0x1e0>)
 8008cd4:	4293      	cmp	r3, r2
 8008cd6:	d003      	beq.n	8008ce0 <TIM_Base_SetConfig+0x70>
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	4a5e      	ldr	r2, [pc, #376]	@ (8008e54 <TIM_Base_SetConfig+0x1e4>)
 8008cdc:	4293      	cmp	r3, r2
 8008cde:	d108      	bne.n	8008cf2 <TIM_Base_SetConfig+0x82>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008ce0:	68fb      	ldr	r3, [r7, #12]
 8008ce2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008ce6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008ce8:	683b      	ldr	r3, [r7, #0]
 8008cea:	685b      	ldr	r3, [r3, #4]
 8008cec:	68fa      	ldr	r2, [r7, #12]
 8008cee:	4313      	orrs	r3, r2
 8008cf0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	4a4e      	ldr	r2, [pc, #312]	@ (8008e30 <TIM_Base_SetConfig+0x1c0>)
 8008cf6:	4293      	cmp	r3, r2
 8008cf8:	d043      	beq.n	8008d82 <TIM_Base_SetConfig+0x112>
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	4a4d      	ldr	r2, [pc, #308]	@ (8008e34 <TIM_Base_SetConfig+0x1c4>)
 8008cfe:	4293      	cmp	r3, r2
 8008d00:	d03f      	beq.n	8008d82 <TIM_Base_SetConfig+0x112>
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008d08:	d03b      	beq.n	8008d82 <TIM_Base_SetConfig+0x112>
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008d10:	d037      	beq.n	8008d82 <TIM_Base_SetConfig+0x112>
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	4a48      	ldr	r2, [pc, #288]	@ (8008e38 <TIM_Base_SetConfig+0x1c8>)
 8008d16:	4293      	cmp	r3, r2
 8008d18:	d033      	beq.n	8008d82 <TIM_Base_SetConfig+0x112>
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	4a47      	ldr	r2, [pc, #284]	@ (8008e3c <TIM_Base_SetConfig+0x1cc>)
 8008d1e:	4293      	cmp	r3, r2
 8008d20:	d02f      	beq.n	8008d82 <TIM_Base_SetConfig+0x112>
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	4a46      	ldr	r2, [pc, #280]	@ (8008e40 <TIM_Base_SetConfig+0x1d0>)
 8008d26:	4293      	cmp	r3, r2
 8008d28:	d02b      	beq.n	8008d82 <TIM_Base_SetConfig+0x112>
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	4a45      	ldr	r2, [pc, #276]	@ (8008e44 <TIM_Base_SetConfig+0x1d4>)
 8008d2e:	4293      	cmp	r3, r2
 8008d30:	d027      	beq.n	8008d82 <TIM_Base_SetConfig+0x112>
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	4a44      	ldr	r2, [pc, #272]	@ (8008e48 <TIM_Base_SetConfig+0x1d8>)
 8008d36:	4293      	cmp	r3, r2
 8008d38:	d023      	beq.n	8008d82 <TIM_Base_SetConfig+0x112>
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	4a43      	ldr	r2, [pc, #268]	@ (8008e4c <TIM_Base_SetConfig+0x1dc>)
 8008d3e:	4293      	cmp	r3, r2
 8008d40:	d01f      	beq.n	8008d82 <TIM_Base_SetConfig+0x112>
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	4a42      	ldr	r2, [pc, #264]	@ (8008e50 <TIM_Base_SetConfig+0x1e0>)
 8008d46:	4293      	cmp	r3, r2
 8008d48:	d01b      	beq.n	8008d82 <TIM_Base_SetConfig+0x112>
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	4a41      	ldr	r2, [pc, #260]	@ (8008e54 <TIM_Base_SetConfig+0x1e4>)
 8008d4e:	4293      	cmp	r3, r2
 8008d50:	d017      	beq.n	8008d82 <TIM_Base_SetConfig+0x112>
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	4a40      	ldr	r2, [pc, #256]	@ (8008e58 <TIM_Base_SetConfig+0x1e8>)
 8008d56:	4293      	cmp	r3, r2
 8008d58:	d013      	beq.n	8008d82 <TIM_Base_SetConfig+0x112>
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	4a3f      	ldr	r2, [pc, #252]	@ (8008e5c <TIM_Base_SetConfig+0x1ec>)
 8008d5e:	4293      	cmp	r3, r2
 8008d60:	d00f      	beq.n	8008d82 <TIM_Base_SetConfig+0x112>
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	4a3e      	ldr	r2, [pc, #248]	@ (8008e60 <TIM_Base_SetConfig+0x1f0>)
 8008d66:	4293      	cmp	r3, r2
 8008d68:	d00b      	beq.n	8008d82 <TIM_Base_SetConfig+0x112>
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	4a3d      	ldr	r2, [pc, #244]	@ (8008e64 <TIM_Base_SetConfig+0x1f4>)
 8008d6e:	4293      	cmp	r3, r2
 8008d70:	d007      	beq.n	8008d82 <TIM_Base_SetConfig+0x112>
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	4a3c      	ldr	r2, [pc, #240]	@ (8008e68 <TIM_Base_SetConfig+0x1f8>)
 8008d76:	4293      	cmp	r3, r2
 8008d78:	d003      	beq.n	8008d82 <TIM_Base_SetConfig+0x112>
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	4a3b      	ldr	r2, [pc, #236]	@ (8008e6c <TIM_Base_SetConfig+0x1fc>)
 8008d7e:	4293      	cmp	r3, r2
 8008d80:	d108      	bne.n	8008d94 <TIM_Base_SetConfig+0x124>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008d82:	68fb      	ldr	r3, [r7, #12]
 8008d84:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008d88:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008d8a:	683b      	ldr	r3, [r7, #0]
 8008d8c:	68db      	ldr	r3, [r3, #12]
 8008d8e:	68fa      	ldr	r2, [r7, #12]
 8008d90:	4313      	orrs	r3, r2
 8008d92:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008d94:	68fb      	ldr	r3, [r7, #12]
 8008d96:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8008d9a:	683b      	ldr	r3, [r7, #0]
 8008d9c:	695b      	ldr	r3, [r3, #20]
 8008d9e:	4313      	orrs	r3, r2
 8008da0:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008da2:	683b      	ldr	r3, [r7, #0]
 8008da4:	689a      	ldr	r2, [r3, #8]
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008daa:	683b      	ldr	r3, [r7, #0]
 8008dac:	681a      	ldr	r2, [r3, #0]
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	4a1e      	ldr	r2, [pc, #120]	@ (8008e30 <TIM_Base_SetConfig+0x1c0>)
 8008db6:	4293      	cmp	r3, r2
 8008db8:	d023      	beq.n	8008e02 <TIM_Base_SetConfig+0x192>
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	4a1d      	ldr	r2, [pc, #116]	@ (8008e34 <TIM_Base_SetConfig+0x1c4>)
 8008dbe:	4293      	cmp	r3, r2
 8008dc0:	d01f      	beq.n	8008e02 <TIM_Base_SetConfig+0x192>
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	4a22      	ldr	r2, [pc, #136]	@ (8008e50 <TIM_Base_SetConfig+0x1e0>)
 8008dc6:	4293      	cmp	r3, r2
 8008dc8:	d01b      	beq.n	8008e02 <TIM_Base_SetConfig+0x192>
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	4a21      	ldr	r2, [pc, #132]	@ (8008e54 <TIM_Base_SetConfig+0x1e4>)
 8008dce:	4293      	cmp	r3, r2
 8008dd0:	d017      	beq.n	8008e02 <TIM_Base_SetConfig+0x192>
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	4a20      	ldr	r2, [pc, #128]	@ (8008e58 <TIM_Base_SetConfig+0x1e8>)
 8008dd6:	4293      	cmp	r3, r2
 8008dd8:	d013      	beq.n	8008e02 <TIM_Base_SetConfig+0x192>
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	4a1f      	ldr	r2, [pc, #124]	@ (8008e5c <TIM_Base_SetConfig+0x1ec>)
 8008dde:	4293      	cmp	r3, r2
 8008de0:	d00f      	beq.n	8008e02 <TIM_Base_SetConfig+0x192>
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	4a1e      	ldr	r2, [pc, #120]	@ (8008e60 <TIM_Base_SetConfig+0x1f0>)
 8008de6:	4293      	cmp	r3, r2
 8008de8:	d00b      	beq.n	8008e02 <TIM_Base_SetConfig+0x192>
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	4a1d      	ldr	r2, [pc, #116]	@ (8008e64 <TIM_Base_SetConfig+0x1f4>)
 8008dee:	4293      	cmp	r3, r2
 8008df0:	d007      	beq.n	8008e02 <TIM_Base_SetConfig+0x192>
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	4a1c      	ldr	r2, [pc, #112]	@ (8008e68 <TIM_Base_SetConfig+0x1f8>)
 8008df6:	4293      	cmp	r3, r2
 8008df8:	d003      	beq.n	8008e02 <TIM_Base_SetConfig+0x192>
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	4a1b      	ldr	r2, [pc, #108]	@ (8008e6c <TIM_Base_SetConfig+0x1fc>)
 8008dfe:	4293      	cmp	r3, r2
 8008e00:	d103      	bne.n	8008e0a <TIM_Base_SetConfig+0x19a>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008e02:	683b      	ldr	r3, [r7, #0]
 8008e04:	691a      	ldr	r2, [r3, #16]
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	f043 0204 	orr.w	r2, r3, #4
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	2201      	movs	r2, #1
 8008e1a:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	68fa      	ldr	r2, [r7, #12]
 8008e20:	601a      	str	r2, [r3, #0]
}
 8008e22:	bf00      	nop
 8008e24:	3714      	adds	r7, #20
 8008e26:	46bd      	mov	sp, r7
 8008e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e2c:	4770      	bx	lr
 8008e2e:	bf00      	nop
 8008e30:	40012c00 	.word	0x40012c00
 8008e34:	50012c00 	.word	0x50012c00
 8008e38:	40000400 	.word	0x40000400
 8008e3c:	50000400 	.word	0x50000400
 8008e40:	40000800 	.word	0x40000800
 8008e44:	50000800 	.word	0x50000800
 8008e48:	40000c00 	.word	0x40000c00
 8008e4c:	50000c00 	.word	0x50000c00
 8008e50:	40013400 	.word	0x40013400
 8008e54:	50013400 	.word	0x50013400
 8008e58:	40014000 	.word	0x40014000
 8008e5c:	50014000 	.word	0x50014000
 8008e60:	40014400 	.word	0x40014400
 8008e64:	50014400 	.word	0x50014400
 8008e68:	40014800 	.word	0x40014800
 8008e6c:	50014800 	.word	0x50014800

08008e70 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008e70:	b480      	push	{r7}
 8008e72:	b083      	sub	sp, #12
 8008e74:	af00      	add	r7, sp, #0
 8008e76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008e78:	bf00      	nop
 8008e7a:	370c      	adds	r7, #12
 8008e7c:	46bd      	mov	sp, r7
 8008e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e82:	4770      	bx	lr

08008e84 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008e84:	b480      	push	{r7}
 8008e86:	b083      	sub	sp, #12
 8008e88:	af00      	add	r7, sp, #0
 8008e8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008e8c:	bf00      	nop
 8008e8e:	370c      	adds	r7, #12
 8008e90:	46bd      	mov	sp, r7
 8008e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e96:	4770      	bx	lr

08008e98 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008e98:	b480      	push	{r7}
 8008e9a:	b083      	sub	sp, #12
 8008e9c:	af00      	add	r7, sp, #0
 8008e9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008ea0:	bf00      	nop
 8008ea2:	370c      	adds	r7, #12
 8008ea4:	46bd      	mov	sp, r7
 8008ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eaa:	4770      	bx	lr

08008eac <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8008eac:	b480      	push	{r7}
 8008eae:	b083      	sub	sp, #12
 8008eb0:	af00      	add	r7, sp, #0
 8008eb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8008eb4:	bf00      	nop
 8008eb6:	370c      	adds	r7, #12
 8008eb8:	46bd      	mov	sp, r7
 8008eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ebe:	4770      	bx	lr

08008ec0 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8008ec0:	b480      	push	{r7}
 8008ec2:	b083      	sub	sp, #12
 8008ec4:	af00      	add	r7, sp, #0
 8008ec6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8008ec8:	bf00      	nop
 8008eca:	370c      	adds	r7, #12
 8008ecc:	46bd      	mov	sp, r7
 8008ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ed2:	4770      	bx	lr

08008ed4 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8008ed4:	b480      	push	{r7}
 8008ed6:	b083      	sub	sp, #12
 8008ed8:	af00      	add	r7, sp, #0
 8008eda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8008edc:	bf00      	nop
 8008ede:	370c      	adds	r7, #12
 8008ee0:	46bd      	mov	sp, r7
 8008ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ee6:	4770      	bx	lr

08008ee8 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8008ee8:	b480      	push	{r7}
 8008eea:	b083      	sub	sp, #12
 8008eec:	af00      	add	r7, sp, #0
 8008eee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8008ef0:	bf00      	nop
 8008ef2:	370c      	adds	r7, #12
 8008ef4:	46bd      	mov	sp, r7
 8008ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008efa:	4770      	bx	lr

08008efc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008efc:	b580      	push	{r7, lr}
 8008efe:	b082      	sub	sp, #8
 8008f00:	af00      	add	r7, sp, #0
 8008f02:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	d101      	bne.n	8008f0e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008f0a:	2301      	movs	r3, #1
 8008f0c:	e042      	b.n	8008f94 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	d106      	bne.n	8008f26 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	2200      	movs	r2, #0
 8008f1c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008f20:	6878      	ldr	r0, [r7, #4]
 8008f22:	f000 f83b 	bl	8008f9c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	2224      	movs	r2, #36	@ 0x24
 8008f2a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	681b      	ldr	r3, [r3, #0]
 8008f32:	681a      	ldr	r2, [r3, #0]
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	f022 0201 	bic.w	r2, r2, #1
 8008f3c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	d002      	beq.n	8008f4c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8008f46:	6878      	ldr	r0, [r7, #4]
 8008f48:	f000 fa72 	bl	8009430 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008f4c:	6878      	ldr	r0, [r7, #4]
 8008f4e:	f000 f8cd 	bl	80090ec <UART_SetConfig>
 8008f52:	4603      	mov	r3, r0
 8008f54:	2b01      	cmp	r3, #1
 8008f56:	d101      	bne.n	8008f5c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8008f58:	2301      	movs	r3, #1
 8008f5a:	e01b      	b.n	8008f94 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	685a      	ldr	r2, [r3, #4]
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8008f6a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	689a      	ldr	r2, [r3, #8]
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8008f7a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	681a      	ldr	r2, [r3, #0]
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	f042 0201 	orr.w	r2, r2, #1
 8008f8a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008f8c:	6878      	ldr	r0, [r7, #4]
 8008f8e:	f000 faf1 	bl	8009574 <UART_CheckIdleState>
 8008f92:	4603      	mov	r3, r0
}
 8008f94:	4618      	mov	r0, r3
 8008f96:	3708      	adds	r7, #8
 8008f98:	46bd      	mov	sp, r7
 8008f9a:	bd80      	pop	{r7, pc}

08008f9c <HAL_UART_MspInit>:
  * @brief Initialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8008f9c:	b480      	push	{r7}
 8008f9e:	b083      	sub	sp, #12
 8008fa0:	af00      	add	r7, sp, #0
 8008fa2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 8008fa4:	bf00      	nop
 8008fa6:	370c      	adds	r7, #12
 8008fa8:	46bd      	mov	sp, r7
 8008faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fae:	4770      	bx	lr

08008fb0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008fb0:	b580      	push	{r7, lr}
 8008fb2:	b08a      	sub	sp, #40	@ 0x28
 8008fb4:	af02      	add	r7, sp, #8
 8008fb6:	60f8      	str	r0, [r7, #12]
 8008fb8:	60b9      	str	r1, [r7, #8]
 8008fba:	603b      	str	r3, [r7, #0]
 8008fbc:	4613      	mov	r3, r2
 8008fbe:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008fc0:	68fb      	ldr	r3, [r7, #12]
 8008fc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008fc6:	2b20      	cmp	r3, #32
 8008fc8:	f040 808b 	bne.w	80090e2 <HAL_UART_Transmit+0x132>
  {
    if ((pData == NULL) || (Size == 0U))
 8008fcc:	68bb      	ldr	r3, [r7, #8]
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	d002      	beq.n	8008fd8 <HAL_UART_Transmit+0x28>
 8008fd2:	88fb      	ldrh	r3, [r7, #6]
 8008fd4:	2b00      	cmp	r3, #0
 8008fd6:	d101      	bne.n	8008fdc <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8008fd8:	2301      	movs	r3, #1
 8008fda:	e083      	b.n	80090e4 <HAL_UART_Transmit+0x134>
    }

#if defined(USART_DMAREQUESTS_SW_WA)
    /* Disable the UART DMA Tx request if enabled */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	689b      	ldr	r3, [r3, #8]
 8008fe2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008fe6:	2b80      	cmp	r3, #128	@ 0x80
 8008fe8:	d107      	bne.n	8008ffa <HAL_UART_Transmit+0x4a>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008fea:	68fb      	ldr	r3, [r7, #12]
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	689a      	ldr	r2, [r3, #8]
 8008ff0:	68fb      	ldr	r3, [r7, #12]
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8008ff8:	609a      	str	r2, [r3, #8]
    }

#endif /* USART_DMAREQUESTS_SW_WA */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008ffa:	68fb      	ldr	r3, [r7, #12]
 8008ffc:	2200      	movs	r2, #0
 8008ffe:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009002:	68fb      	ldr	r3, [r7, #12]
 8009004:	2221      	movs	r2, #33	@ 0x21
 8009006:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800900a:	f7f9 fb91 	bl	8002730 <HAL_GetTick>
 800900e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8009010:	68fb      	ldr	r3, [r7, #12]
 8009012:	88fa      	ldrh	r2, [r7, #6]
 8009014:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8009018:	68fb      	ldr	r3, [r7, #12]
 800901a:	88fa      	ldrh	r2, [r7, #6]
 800901c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	689b      	ldr	r3, [r3, #8]
 8009024:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009028:	d108      	bne.n	800903c <HAL_UART_Transmit+0x8c>
 800902a:	68fb      	ldr	r3, [r7, #12]
 800902c:	691b      	ldr	r3, [r3, #16]
 800902e:	2b00      	cmp	r3, #0
 8009030:	d104      	bne.n	800903c <HAL_UART_Transmit+0x8c>
    {
      pdata8bits  = NULL;
 8009032:	2300      	movs	r3, #0
 8009034:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8009036:	68bb      	ldr	r3, [r7, #8]
 8009038:	61bb      	str	r3, [r7, #24]
 800903a:	e003      	b.n	8009044 <HAL_UART_Transmit+0x94>
    }
    else
    {
      pdata8bits  = pData;
 800903c:	68bb      	ldr	r3, [r7, #8]
 800903e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009040:	2300      	movs	r3, #0
 8009042:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8009044:	e030      	b.n	80090a8 <HAL_UART_Transmit+0xf8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009046:	683b      	ldr	r3, [r7, #0]
 8009048:	9300      	str	r3, [sp, #0]
 800904a:	697b      	ldr	r3, [r7, #20]
 800904c:	2200      	movs	r2, #0
 800904e:	2180      	movs	r1, #128	@ 0x80
 8009050:	68f8      	ldr	r0, [r7, #12]
 8009052:	f000 fb39 	bl	80096c8 <UART_WaitOnFlagUntilTimeout>
 8009056:	4603      	mov	r3, r0
 8009058:	2b00      	cmp	r3, #0
 800905a:	d005      	beq.n	8009068 <HAL_UART_Transmit+0xb8>
      {

        huart->gState = HAL_UART_STATE_READY;
 800905c:	68fb      	ldr	r3, [r7, #12]
 800905e:	2220      	movs	r2, #32
 8009060:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8009064:	2303      	movs	r3, #3
 8009066:	e03d      	b.n	80090e4 <HAL_UART_Transmit+0x134>
      }
      if (pdata8bits == NULL)
 8009068:	69fb      	ldr	r3, [r7, #28]
 800906a:	2b00      	cmp	r3, #0
 800906c:	d10b      	bne.n	8009086 <HAL_UART_Transmit+0xd6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800906e:	69bb      	ldr	r3, [r7, #24]
 8009070:	881b      	ldrh	r3, [r3, #0]
 8009072:	461a      	mov	r2, r3
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800907c:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800907e:	69bb      	ldr	r3, [r7, #24]
 8009080:	3302      	adds	r3, #2
 8009082:	61bb      	str	r3, [r7, #24]
 8009084:	e007      	b.n	8009096 <HAL_UART_Transmit+0xe6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8009086:	69fb      	ldr	r3, [r7, #28]
 8009088:	781a      	ldrb	r2, [r3, #0]
 800908a:	68fb      	ldr	r3, [r7, #12]
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8009090:	69fb      	ldr	r3, [r7, #28]
 8009092:	3301      	adds	r3, #1
 8009094:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009096:	68fb      	ldr	r3, [r7, #12]
 8009098:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800909c:	b29b      	uxth	r3, r3
 800909e:	3b01      	subs	r3, #1
 80090a0:	b29a      	uxth	r2, r3
 80090a2:	68fb      	ldr	r3, [r7, #12]
 80090a4:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 80090a8:	68fb      	ldr	r3, [r7, #12]
 80090aa:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80090ae:	b29b      	uxth	r3, r3
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	d1c8      	bne.n	8009046 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80090b4:	683b      	ldr	r3, [r7, #0]
 80090b6:	9300      	str	r3, [sp, #0]
 80090b8:	697b      	ldr	r3, [r7, #20]
 80090ba:	2200      	movs	r2, #0
 80090bc:	2140      	movs	r1, #64	@ 0x40
 80090be:	68f8      	ldr	r0, [r7, #12]
 80090c0:	f000 fb02 	bl	80096c8 <UART_WaitOnFlagUntilTimeout>
 80090c4:	4603      	mov	r3, r0
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	d005      	beq.n	80090d6 <HAL_UART_Transmit+0x126>
    {
      huart->gState = HAL_UART_STATE_READY;
 80090ca:	68fb      	ldr	r3, [r7, #12]
 80090cc:	2220      	movs	r2, #32
 80090ce:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 80090d2:	2303      	movs	r3, #3
 80090d4:	e006      	b.n	80090e4 <HAL_UART_Transmit+0x134>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80090d6:	68fb      	ldr	r3, [r7, #12]
 80090d8:	2220      	movs	r2, #32
 80090da:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 80090de:	2300      	movs	r3, #0
 80090e0:	e000      	b.n	80090e4 <HAL_UART_Transmit+0x134>
  }
  else
  {
    return HAL_BUSY;
 80090e2:	2302      	movs	r3, #2
  }
}
 80090e4:	4618      	mov	r0, r3
 80090e6:	3720      	adds	r7, #32
 80090e8:	46bd      	mov	sp, r7
 80090ea:	bd80      	pop	{r7, pc}

080090ec <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80090ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80090f0:	b094      	sub	sp, #80	@ 0x50
 80090f2:	af00      	add	r7, sp, #0
 80090f4:	62f8      	str	r0, [r7, #44]	@ 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80090f6:	2300      	movs	r3, #0
 80090f8:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 80090fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80090fe:	681a      	ldr	r2, [r3, #0]
 8009100:	4b7e      	ldr	r3, [pc, #504]	@ (80092fc <UART_SetConfig+0x210>)
 8009102:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009104:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009106:	689a      	ldr	r2, [r3, #8]
 8009108:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800910a:	691b      	ldr	r3, [r3, #16]
 800910c:	431a      	orrs	r2, r3
 800910e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009110:	695b      	ldr	r3, [r3, #20]
 8009112:	431a      	orrs	r2, r3
 8009114:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009116:	69db      	ldr	r3, [r3, #28]
 8009118:	4313      	orrs	r3, r2
 800911a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800911c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	4977      	ldr	r1, [pc, #476]	@ (8009300 <UART_SetConfig+0x214>)
 8009124:	4019      	ands	r1, r3
 8009126:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009128:	681a      	ldr	r2, [r3, #0]
 800912a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800912c:	430b      	orrs	r3, r1
 800912e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009130:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009132:	681b      	ldr	r3, [r3, #0]
 8009134:	685b      	ldr	r3, [r3, #4]
 8009136:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800913a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800913c:	68d9      	ldr	r1, [r3, #12]
 800913e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009140:	681a      	ldr	r2, [r3, #0]
 8009142:	ea40 0301 	orr.w	r3, r0, r1
 8009146:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009148:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800914a:	699b      	ldr	r3, [r3, #24]
 800914c:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800914e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009150:	681a      	ldr	r2, [r3, #0]
 8009152:	4b6a      	ldr	r3, [pc, #424]	@ (80092fc <UART_SetConfig+0x210>)
 8009154:	429a      	cmp	r2, r3
 8009156:	d009      	beq.n	800916c <UART_SetConfig+0x80>
 8009158:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800915a:	681a      	ldr	r2, [r3, #0]
 800915c:	4b69      	ldr	r3, [pc, #420]	@ (8009304 <UART_SetConfig+0x218>)
 800915e:	429a      	cmp	r2, r3
 8009160:	d004      	beq.n	800916c <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009162:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009164:	6a1a      	ldr	r2, [r3, #32]
 8009166:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009168:	4313      	orrs	r3, r2
 800916a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800916c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	689b      	ldr	r3, [r3, #8]
 8009172:	f023 416e 	bic.w	r1, r3, #3992977408	@ 0xee000000
 8009176:	f421 6130 	bic.w	r1, r1, #2816	@ 0xb00
 800917a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800917c:	681a      	ldr	r2, [r3, #0]
 800917e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009180:	430b      	orrs	r3, r1
 8009182:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009184:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800918a:	f023 000f 	bic.w	r0, r3, #15
 800918e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009190:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8009192:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009194:	681a      	ldr	r2, [r3, #0]
 8009196:	ea40 0301 	orr.w	r3, r0, r1
 800919a:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800919c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800919e:	681a      	ldr	r2, [r3, #0]
 80091a0:	4b59      	ldr	r3, [pc, #356]	@ (8009308 <UART_SetConfig+0x21c>)
 80091a2:	429a      	cmp	r2, r3
 80091a4:	d102      	bne.n	80091ac <UART_SetConfig+0xc0>
 80091a6:	2301      	movs	r3, #1
 80091a8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80091aa:	e029      	b.n	8009200 <UART_SetConfig+0x114>
 80091ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80091ae:	681a      	ldr	r2, [r3, #0]
 80091b0:	4b56      	ldr	r3, [pc, #344]	@ (800930c <UART_SetConfig+0x220>)
 80091b2:	429a      	cmp	r2, r3
 80091b4:	d102      	bne.n	80091bc <UART_SetConfig+0xd0>
 80091b6:	2302      	movs	r3, #2
 80091b8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80091ba:	e021      	b.n	8009200 <UART_SetConfig+0x114>
 80091bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80091be:	681a      	ldr	r2, [r3, #0]
 80091c0:	4b53      	ldr	r3, [pc, #332]	@ (8009310 <UART_SetConfig+0x224>)
 80091c2:	429a      	cmp	r2, r3
 80091c4:	d102      	bne.n	80091cc <UART_SetConfig+0xe0>
 80091c6:	2304      	movs	r3, #4
 80091c8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80091ca:	e019      	b.n	8009200 <UART_SetConfig+0x114>
 80091cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80091ce:	681a      	ldr	r2, [r3, #0]
 80091d0:	4b50      	ldr	r3, [pc, #320]	@ (8009314 <UART_SetConfig+0x228>)
 80091d2:	429a      	cmp	r2, r3
 80091d4:	d102      	bne.n	80091dc <UART_SetConfig+0xf0>
 80091d6:	2308      	movs	r3, #8
 80091d8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80091da:	e011      	b.n	8009200 <UART_SetConfig+0x114>
 80091dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80091de:	681a      	ldr	r2, [r3, #0]
 80091e0:	4b4d      	ldr	r3, [pc, #308]	@ (8009318 <UART_SetConfig+0x22c>)
 80091e2:	429a      	cmp	r2, r3
 80091e4:	d102      	bne.n	80091ec <UART_SetConfig+0x100>
 80091e6:	2310      	movs	r3, #16
 80091e8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80091ea:	e009      	b.n	8009200 <UART_SetConfig+0x114>
 80091ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80091ee:	681a      	ldr	r2, [r3, #0]
 80091f0:	4b42      	ldr	r3, [pc, #264]	@ (80092fc <UART_SetConfig+0x210>)
 80091f2:	429a      	cmp	r2, r3
 80091f4:	d102      	bne.n	80091fc <UART_SetConfig+0x110>
 80091f6:	2320      	movs	r3, #32
 80091f8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80091fa:	e001      	b.n	8009200 <UART_SetConfig+0x114>
 80091fc:	2300      	movs	r3, #0
 80091fe:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009200:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009202:	681a      	ldr	r2, [r3, #0]
 8009204:	4b3d      	ldr	r3, [pc, #244]	@ (80092fc <UART_SetConfig+0x210>)
 8009206:	429a      	cmp	r2, r3
 8009208:	d005      	beq.n	8009216 <UART_SetConfig+0x12a>
 800920a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800920c:	681a      	ldr	r2, [r3, #0]
 800920e:	4b3d      	ldr	r3, [pc, #244]	@ (8009304 <UART_SetConfig+0x218>)
 8009210:	429a      	cmp	r2, r3
 8009212:	f040 8085 	bne.w	8009320 <UART_SetConfig+0x234>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8009216:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009218:	2200      	movs	r2, #0
 800921a:	623b      	str	r3, [r7, #32]
 800921c:	627a      	str	r2, [r7, #36]	@ 0x24
 800921e:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8009222:	f7fd f951 	bl	80064c8 <HAL_RCCEx_GetPeriphCLKFreq>
 8009226:	6438      	str	r0, [r7, #64]	@ 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 8009228:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800922a:	2b00      	cmp	r3, #0
 800922c:	f000 80e8 	beq.w	8009400 <UART_SetConfig+0x314>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8009230:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009232:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009234:	4a39      	ldr	r2, [pc, #228]	@ (800931c <UART_SetConfig+0x230>)
 8009236:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800923a:	461a      	mov	r2, r3
 800923c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800923e:	fbb3 f3f2 	udiv	r3, r3, r2
 8009242:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009244:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009246:	685a      	ldr	r2, [r3, #4]
 8009248:	4613      	mov	r3, r2
 800924a:	005b      	lsls	r3, r3, #1
 800924c:	4413      	add	r3, r2
 800924e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009250:	429a      	cmp	r2, r3
 8009252:	d305      	bcc.n	8009260 <UART_SetConfig+0x174>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8009254:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009256:	685b      	ldr	r3, [r3, #4]
 8009258:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800925a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800925c:	429a      	cmp	r2, r3
 800925e:	d903      	bls.n	8009268 <UART_SetConfig+0x17c>
      {
        ret = HAL_ERROR;
 8009260:	2301      	movs	r3, #1
 8009262:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8009266:	e048      	b.n	80092fa <UART_SetConfig+0x20e>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009268:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800926a:	2200      	movs	r2, #0
 800926c:	61bb      	str	r3, [r7, #24]
 800926e:	61fa      	str	r2, [r7, #28]
 8009270:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009272:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009274:	4a29      	ldr	r2, [pc, #164]	@ (800931c <UART_SetConfig+0x230>)
 8009276:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800927a:	b29b      	uxth	r3, r3
 800927c:	2200      	movs	r2, #0
 800927e:	613b      	str	r3, [r7, #16]
 8009280:	617a      	str	r2, [r7, #20]
 8009282:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8009286:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800928a:	f7f7 fc91 	bl	8000bb0 <__aeabi_uldivmod>
 800928e:	4602      	mov	r2, r0
 8009290:	460b      	mov	r3, r1
 8009292:	4610      	mov	r0, r2
 8009294:	4619      	mov	r1, r3
 8009296:	f04f 0200 	mov.w	r2, #0
 800929a:	f04f 0300 	mov.w	r3, #0
 800929e:	020b      	lsls	r3, r1, #8
 80092a0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80092a4:	0202      	lsls	r2, r0, #8
 80092a6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80092a8:	6849      	ldr	r1, [r1, #4]
 80092aa:	0849      	lsrs	r1, r1, #1
 80092ac:	2000      	movs	r0, #0
 80092ae:	460c      	mov	r4, r1
 80092b0:	4605      	mov	r5, r0
 80092b2:	eb12 0804 	adds.w	r8, r2, r4
 80092b6:	eb43 0905 	adc.w	r9, r3, r5
 80092ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80092bc:	685b      	ldr	r3, [r3, #4]
 80092be:	2200      	movs	r2, #0
 80092c0:	60bb      	str	r3, [r7, #8]
 80092c2:	60fa      	str	r2, [r7, #12]
 80092c4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80092c8:	4640      	mov	r0, r8
 80092ca:	4649      	mov	r1, r9
 80092cc:	f7f7 fc70 	bl	8000bb0 <__aeabi_uldivmod>
 80092d0:	4602      	mov	r2, r0
 80092d2:	460b      	mov	r3, r1
 80092d4:	4613      	mov	r3, r2
 80092d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80092d8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80092da:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80092de:	d308      	bcc.n	80092f2 <UART_SetConfig+0x206>
 80092e0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80092e2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80092e6:	d204      	bcs.n	80092f2 <UART_SetConfig+0x206>
        {
          huart->Instance->BRR = usartdiv;
 80092e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80092ee:	60da      	str	r2, [r3, #12]
 80092f0:	e003      	b.n	80092fa <UART_SetConfig+0x20e>
        }
        else
        {
          ret = HAL_ERROR;
 80092f2:	2301      	movs	r3, #1
 80092f4:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    if (pclk != 0U)
 80092f8:	e082      	b.n	8009400 <UART_SetConfig+0x314>
 80092fa:	e081      	b.n	8009400 <UART_SetConfig+0x314>
 80092fc:	46002400 	.word	0x46002400
 8009300:	cfff69f3 	.word	0xcfff69f3
 8009304:	56002400 	.word	0x56002400
 8009308:	40013800 	.word	0x40013800
 800930c:	40004400 	.word	0x40004400
 8009310:	40004800 	.word	0x40004800
 8009314:	40004c00 	.word	0x40004c00
 8009318:	40005000 	.word	0x40005000
 800931c:	0800dc44 	.word	0x0800dc44
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009320:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009322:	69db      	ldr	r3, [r3, #28]
 8009324:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009328:	d13c      	bne.n	80093a4 <UART_SetConfig+0x2b8>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800932a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800932c:	2200      	movs	r2, #0
 800932e:	603b      	str	r3, [r7, #0]
 8009330:	607a      	str	r2, [r7, #4]
 8009332:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009336:	f7fd f8c7 	bl	80064c8 <HAL_RCCEx_GetPeriphCLKFreq>
 800933a:	6438      	str	r0, [r7, #64]	@ 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800933c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800933e:	2b00      	cmp	r3, #0
 8009340:	d05e      	beq.n	8009400 <UART_SetConfig+0x314>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009342:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009344:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009346:	4a39      	ldr	r2, [pc, #228]	@ (800942c <UART_SetConfig+0x340>)
 8009348:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800934c:	461a      	mov	r2, r3
 800934e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009350:	fbb3 f3f2 	udiv	r3, r3, r2
 8009354:	005a      	lsls	r2, r3, #1
 8009356:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009358:	685b      	ldr	r3, [r3, #4]
 800935a:	085b      	lsrs	r3, r3, #1
 800935c:	441a      	add	r2, r3
 800935e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009360:	685b      	ldr	r3, [r3, #4]
 8009362:	fbb2 f3f3 	udiv	r3, r2, r3
 8009366:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009368:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800936a:	2b0f      	cmp	r3, #15
 800936c:	d916      	bls.n	800939c <UART_SetConfig+0x2b0>
 800936e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009370:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009374:	d212      	bcs.n	800939c <UART_SetConfig+0x2b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009376:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009378:	b29b      	uxth	r3, r3
 800937a:	f023 030f 	bic.w	r3, r3, #15
 800937e:	877b      	strh	r3, [r7, #58]	@ 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009380:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009382:	085b      	lsrs	r3, r3, #1
 8009384:	b29b      	uxth	r3, r3
 8009386:	f003 0307 	and.w	r3, r3, #7
 800938a:	b29a      	uxth	r2, r3
 800938c:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800938e:	4313      	orrs	r3, r2
 8009390:	877b      	strh	r3, [r7, #58]	@ 0x3a
        huart->Instance->BRR = brrtemp;
 8009392:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8009398:	60da      	str	r2, [r3, #12]
 800939a:	e031      	b.n	8009400 <UART_SetConfig+0x314>
      }
      else
      {
        ret = HAL_ERROR;
 800939c:	2301      	movs	r3, #1
 800939e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 80093a2:	e02d      	b.n	8009400 <UART_SetConfig+0x314>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 80093a4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80093a6:	2200      	movs	r2, #0
 80093a8:	469a      	mov	sl, r3
 80093aa:	4693      	mov	fp, r2
 80093ac:	4650      	mov	r0, sl
 80093ae:	4659      	mov	r1, fp
 80093b0:	f7fd f88a 	bl	80064c8 <HAL_RCCEx_GetPeriphCLKFreq>
 80093b4:	6438      	str	r0, [r7, #64]	@ 0x40

    if (pclk != 0U)
 80093b6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80093b8:	2b00      	cmp	r3, #0
 80093ba:	d021      	beq.n	8009400 <UART_SetConfig+0x314>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80093bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80093be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80093c0:	4a1a      	ldr	r2, [pc, #104]	@ (800942c <UART_SetConfig+0x340>)
 80093c2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80093c6:	461a      	mov	r2, r3
 80093c8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80093ca:	fbb3 f2f2 	udiv	r2, r3, r2
 80093ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80093d0:	685b      	ldr	r3, [r3, #4]
 80093d2:	085b      	lsrs	r3, r3, #1
 80093d4:	441a      	add	r2, r3
 80093d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80093d8:	685b      	ldr	r3, [r3, #4]
 80093da:	fbb2 f3f3 	udiv	r3, r2, r3
 80093de:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80093e0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80093e2:	2b0f      	cmp	r3, #15
 80093e4:	d909      	bls.n	80093fa <UART_SetConfig+0x30e>
 80093e6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80093e8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80093ec:	d205      	bcs.n	80093fa <UART_SetConfig+0x30e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80093ee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80093f0:	b29a      	uxth	r2, r3
 80093f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	60da      	str	r2, [r3, #12]
 80093f8:	e002      	b.n	8009400 <UART_SetConfig+0x314>
      }
      else
      {
        ret = HAL_ERROR;
 80093fa:	2301      	movs	r3, #1
 80093fc:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8009400:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009402:	2201      	movs	r2, #1
 8009404:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8009408:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800940a:	2201      	movs	r2, #1
 800940c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009410:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009412:	2200      	movs	r2, #0
 8009414:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8009416:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009418:	2200      	movs	r2, #0
 800941a:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800941c:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 8009420:	4618      	mov	r0, r3
 8009422:	3750      	adds	r7, #80	@ 0x50
 8009424:	46bd      	mov	sp, r7
 8009426:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800942a:	bf00      	nop
 800942c:	0800dc44 	.word	0x0800dc44

08009430 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009430:	b480      	push	{r7}
 8009432:	b083      	sub	sp, #12
 8009434:	af00      	add	r7, sp, #0
 8009436:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800943c:	f003 0308 	and.w	r3, r3, #8
 8009440:	2b00      	cmp	r3, #0
 8009442:	d00a      	beq.n	800945a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	685b      	ldr	r3, [r3, #4]
 800944a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	430a      	orrs	r2, r1
 8009458:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800945e:	f003 0301 	and.w	r3, r3, #1
 8009462:	2b00      	cmp	r3, #0
 8009464:	d00a      	beq.n	800947c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	685b      	ldr	r3, [r3, #4]
 800946c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	430a      	orrs	r2, r1
 800947a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009480:	f003 0302 	and.w	r3, r3, #2
 8009484:	2b00      	cmp	r3, #0
 8009486:	d00a      	beq.n	800949e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	685b      	ldr	r3, [r3, #4]
 800948e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	430a      	orrs	r2, r1
 800949c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80094a2:	f003 0304 	and.w	r3, r3, #4
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	d00a      	beq.n	80094c0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	685b      	ldr	r3, [r3, #4]
 80094b0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	430a      	orrs	r2, r1
 80094be:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80094c4:	f003 0310 	and.w	r3, r3, #16
 80094c8:	2b00      	cmp	r3, #0
 80094ca:	d00a      	beq.n	80094e2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	689b      	ldr	r3, [r3, #8]
 80094d2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	430a      	orrs	r2, r1
 80094e0:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80094e6:	f003 0320 	and.w	r3, r3, #32
 80094ea:	2b00      	cmp	r3, #0
 80094ec:	d00a      	beq.n	8009504 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	689b      	ldr	r3, [r3, #8]
 80094f4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	430a      	orrs	r2, r1
 8009502:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009508:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800950c:	2b00      	cmp	r3, #0
 800950e:	d01a      	beq.n	8009546 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	685b      	ldr	r3, [r3, #4]
 8009516:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	430a      	orrs	r2, r1
 8009524:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800952a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800952e:	d10a      	bne.n	8009546 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	685b      	ldr	r3, [r3, #4]
 8009536:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	681b      	ldr	r3, [r3, #0]
 8009542:	430a      	orrs	r2, r1
 8009544:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800954a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800954e:	2b00      	cmp	r3, #0
 8009550:	d00a      	beq.n	8009568 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	681b      	ldr	r3, [r3, #0]
 8009556:	685b      	ldr	r3, [r3, #4]
 8009558:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	430a      	orrs	r2, r1
 8009566:	605a      	str	r2, [r3, #4]
  }
}
 8009568:	bf00      	nop
 800956a:	370c      	adds	r7, #12
 800956c:	46bd      	mov	sp, r7
 800956e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009572:	4770      	bx	lr

08009574 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009574:	b580      	push	{r7, lr}
 8009576:	b098      	sub	sp, #96	@ 0x60
 8009578:	af02      	add	r7, sp, #8
 800957a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	2200      	movs	r2, #0
 8009580:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009584:	f7f9 f8d4 	bl	8002730 <HAL_GetTick>
 8009588:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	681b      	ldr	r3, [r3, #0]
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	f003 0308 	and.w	r3, r3, #8
 8009594:	2b08      	cmp	r3, #8
 8009596:	d12f      	bne.n	80095f8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009598:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800959c:	9300      	str	r3, [sp, #0]
 800959e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80095a0:	2200      	movs	r2, #0
 80095a2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80095a6:	6878      	ldr	r0, [r7, #4]
 80095a8:	f000 f88e 	bl	80096c8 <UART_WaitOnFlagUntilTimeout>
 80095ac:	4603      	mov	r3, r0
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	d022      	beq.n	80095f8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80095ba:	e853 3f00 	ldrex	r3, [r3]
 80095be:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80095c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80095c2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80095c6:	653b      	str	r3, [r7, #80]	@ 0x50
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	461a      	mov	r2, r3
 80095ce:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80095d0:	647b      	str	r3, [r7, #68]	@ 0x44
 80095d2:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095d4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80095d6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80095d8:	e841 2300 	strex	r3, r2, [r1]
 80095dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80095de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80095e0:	2b00      	cmp	r3, #0
 80095e2:	d1e6      	bne.n	80095b2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	2220      	movs	r2, #32
 80095e8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	2200      	movs	r2, #0
 80095f0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80095f4:	2303      	movs	r3, #3
 80095f6:	e063      	b.n	80096c0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	681b      	ldr	r3, [r3, #0]
 80095fe:	f003 0304 	and.w	r3, r3, #4
 8009602:	2b04      	cmp	r3, #4
 8009604:	d149      	bne.n	800969a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009606:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800960a:	9300      	str	r3, [sp, #0]
 800960c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800960e:	2200      	movs	r2, #0
 8009610:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8009614:	6878      	ldr	r0, [r7, #4]
 8009616:	f000 f857 	bl	80096c8 <UART_WaitOnFlagUntilTimeout>
 800961a:	4603      	mov	r3, r0
 800961c:	2b00      	cmp	r3, #0
 800961e:	d03c      	beq.n	800969a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009626:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009628:	e853 3f00 	ldrex	r3, [r3]
 800962c:	623b      	str	r3, [r7, #32]
   return(result);
 800962e:	6a3b      	ldr	r3, [r7, #32]
 8009630:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009634:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	461a      	mov	r2, r3
 800963c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800963e:	633b      	str	r3, [r7, #48]	@ 0x30
 8009640:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009642:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009644:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009646:	e841 2300 	strex	r3, r2, [r1]
 800964a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800964c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800964e:	2b00      	cmp	r3, #0
 8009650:	d1e6      	bne.n	8009620 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	3308      	adds	r3, #8
 8009658:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800965a:	693b      	ldr	r3, [r7, #16]
 800965c:	e853 3f00 	ldrex	r3, [r3]
 8009660:	60fb      	str	r3, [r7, #12]
   return(result);
 8009662:	68fb      	ldr	r3, [r7, #12]
 8009664:	f023 0301 	bic.w	r3, r3, #1
 8009668:	64bb      	str	r3, [r7, #72]	@ 0x48
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	3308      	adds	r3, #8
 8009670:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009672:	61fa      	str	r2, [r7, #28]
 8009674:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009676:	69b9      	ldr	r1, [r7, #24]
 8009678:	69fa      	ldr	r2, [r7, #28]
 800967a:	e841 2300 	strex	r3, r2, [r1]
 800967e:	617b      	str	r3, [r7, #20]
   return(result);
 8009680:	697b      	ldr	r3, [r7, #20]
 8009682:	2b00      	cmp	r3, #0
 8009684:	d1e5      	bne.n	8009652 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	2220      	movs	r2, #32
 800968a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	2200      	movs	r2, #0
 8009692:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009696:	2303      	movs	r3, #3
 8009698:	e012      	b.n	80096c0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	2220      	movs	r2, #32
 800969e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	2220      	movs	r2, #32
 80096a6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	2200      	movs	r2, #0
 80096ae:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	2200      	movs	r2, #0
 80096b4:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	2200      	movs	r2, #0
 80096ba:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80096be:	2300      	movs	r3, #0
}
 80096c0:	4618      	mov	r0, r3
 80096c2:	3758      	adds	r7, #88	@ 0x58
 80096c4:	46bd      	mov	sp, r7
 80096c6:	bd80      	pop	{r7, pc}

080096c8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80096c8:	b580      	push	{r7, lr}
 80096ca:	b084      	sub	sp, #16
 80096cc:	af00      	add	r7, sp, #0
 80096ce:	60f8      	str	r0, [r7, #12]
 80096d0:	60b9      	str	r1, [r7, #8]
 80096d2:	603b      	str	r3, [r7, #0]
 80096d4:	4613      	mov	r3, r2
 80096d6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80096d8:	e04f      	b.n	800977a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80096da:	69bb      	ldr	r3, [r7, #24]
 80096dc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80096e0:	d04b      	beq.n	800977a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80096e2:	f7f9 f825 	bl	8002730 <HAL_GetTick>
 80096e6:	4602      	mov	r2, r0
 80096e8:	683b      	ldr	r3, [r7, #0]
 80096ea:	1ad3      	subs	r3, r2, r3
 80096ec:	69ba      	ldr	r2, [r7, #24]
 80096ee:	429a      	cmp	r2, r3
 80096f0:	d302      	bcc.n	80096f8 <UART_WaitOnFlagUntilTimeout+0x30>
 80096f2:	69bb      	ldr	r3, [r7, #24]
 80096f4:	2b00      	cmp	r3, #0
 80096f6:	d101      	bne.n	80096fc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80096f8:	2303      	movs	r3, #3
 80096fa:	e04e      	b.n	800979a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80096fc:	68fb      	ldr	r3, [r7, #12]
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	f003 0304 	and.w	r3, r3, #4
 8009706:	2b00      	cmp	r3, #0
 8009708:	d037      	beq.n	800977a <UART_WaitOnFlagUntilTimeout+0xb2>
 800970a:	68bb      	ldr	r3, [r7, #8]
 800970c:	2b80      	cmp	r3, #128	@ 0x80
 800970e:	d034      	beq.n	800977a <UART_WaitOnFlagUntilTimeout+0xb2>
 8009710:	68bb      	ldr	r3, [r7, #8]
 8009712:	2b40      	cmp	r3, #64	@ 0x40
 8009714:	d031      	beq.n	800977a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8009716:	68fb      	ldr	r3, [r7, #12]
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	69db      	ldr	r3, [r3, #28]
 800971c:	f003 0308 	and.w	r3, r3, #8
 8009720:	2b08      	cmp	r3, #8
 8009722:	d110      	bne.n	8009746 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009724:	68fb      	ldr	r3, [r7, #12]
 8009726:	681b      	ldr	r3, [r3, #0]
 8009728:	2208      	movs	r2, #8
 800972a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800972c:	68f8      	ldr	r0, [r7, #12]
 800972e:	f000 f838 	bl	80097a2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8009732:	68fb      	ldr	r3, [r7, #12]
 8009734:	2208      	movs	r2, #8
 8009736:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800973a:	68fb      	ldr	r3, [r7, #12]
 800973c:	2200      	movs	r2, #0
 800973e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8009742:	2301      	movs	r3, #1
 8009744:	e029      	b.n	800979a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009746:	68fb      	ldr	r3, [r7, #12]
 8009748:	681b      	ldr	r3, [r3, #0]
 800974a:	69db      	ldr	r3, [r3, #28]
 800974c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009750:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009754:	d111      	bne.n	800977a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009756:	68fb      	ldr	r3, [r7, #12]
 8009758:	681b      	ldr	r3, [r3, #0]
 800975a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800975e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009760:	68f8      	ldr	r0, [r7, #12]
 8009762:	f000 f81e 	bl	80097a2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009766:	68fb      	ldr	r3, [r7, #12]
 8009768:	2220      	movs	r2, #32
 800976a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800976e:	68fb      	ldr	r3, [r7, #12]
 8009770:	2200      	movs	r2, #0
 8009772:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8009776:	2303      	movs	r3, #3
 8009778:	e00f      	b.n	800979a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800977a:	68fb      	ldr	r3, [r7, #12]
 800977c:	681b      	ldr	r3, [r3, #0]
 800977e:	69da      	ldr	r2, [r3, #28]
 8009780:	68bb      	ldr	r3, [r7, #8]
 8009782:	4013      	ands	r3, r2
 8009784:	68ba      	ldr	r2, [r7, #8]
 8009786:	429a      	cmp	r2, r3
 8009788:	bf0c      	ite	eq
 800978a:	2301      	moveq	r3, #1
 800978c:	2300      	movne	r3, #0
 800978e:	b2db      	uxtb	r3, r3
 8009790:	461a      	mov	r2, r3
 8009792:	79fb      	ldrb	r3, [r7, #7]
 8009794:	429a      	cmp	r2, r3
 8009796:	d0a0      	beq.n	80096da <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009798:	2300      	movs	r3, #0
}
 800979a:	4618      	mov	r0, r3
 800979c:	3710      	adds	r7, #16
 800979e:	46bd      	mov	sp, r7
 80097a0:	bd80      	pop	{r7, pc}

080097a2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80097a2:	b480      	push	{r7}
 80097a4:	b095      	sub	sp, #84	@ 0x54
 80097a6:	af00      	add	r7, sp, #0
 80097a8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80097b2:	e853 3f00 	ldrex	r3, [r3]
 80097b6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80097b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80097ba:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80097be:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	461a      	mov	r2, r3
 80097c6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80097c8:	643b      	str	r3, [r7, #64]	@ 0x40
 80097ca:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097cc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80097ce:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80097d0:	e841 2300 	strex	r3, r2, [r1]
 80097d4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80097d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80097d8:	2b00      	cmp	r3, #0
 80097da:	d1e6      	bne.n	80097aa <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	3308      	adds	r3, #8
 80097e2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097e4:	6a3b      	ldr	r3, [r7, #32]
 80097e6:	e853 3f00 	ldrex	r3, [r3]
 80097ea:	61fb      	str	r3, [r7, #28]
   return(result);
 80097ec:	69fb      	ldr	r3, [r7, #28]
 80097ee:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80097f2:	f023 0301 	bic.w	r3, r3, #1
 80097f6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	3308      	adds	r3, #8
 80097fe:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009800:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009802:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009804:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009806:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009808:	e841 2300 	strex	r3, r2, [r1]
 800980c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800980e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009810:	2b00      	cmp	r3, #0
 8009812:	d1e3      	bne.n	80097dc <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009818:	2b01      	cmp	r3, #1
 800981a:	d118      	bne.n	800984e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009822:	68fb      	ldr	r3, [r7, #12]
 8009824:	e853 3f00 	ldrex	r3, [r3]
 8009828:	60bb      	str	r3, [r7, #8]
   return(result);
 800982a:	68bb      	ldr	r3, [r7, #8]
 800982c:	f023 0310 	bic.w	r3, r3, #16
 8009830:	647b      	str	r3, [r7, #68]	@ 0x44
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	681b      	ldr	r3, [r3, #0]
 8009836:	461a      	mov	r2, r3
 8009838:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800983a:	61bb      	str	r3, [r7, #24]
 800983c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800983e:	6979      	ldr	r1, [r7, #20]
 8009840:	69ba      	ldr	r2, [r7, #24]
 8009842:	e841 2300 	strex	r3, r2, [r1]
 8009846:	613b      	str	r3, [r7, #16]
   return(result);
 8009848:	693b      	ldr	r3, [r7, #16]
 800984a:	2b00      	cmp	r3, #0
 800984c:	d1e6      	bne.n	800981c <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	2220      	movs	r2, #32
 8009852:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	2200      	movs	r2, #0
 800985a:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	2200      	movs	r2, #0
 8009860:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8009862:	bf00      	nop
 8009864:	3754      	adds	r7, #84	@ 0x54
 8009866:	46bd      	mov	sp, r7
 8009868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800986c:	4770      	bx	lr

0800986e <__cvt>:
 800986e:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009872:	ec57 6b10 	vmov	r6, r7, d0
 8009876:	2f00      	cmp	r7, #0
 8009878:	460c      	mov	r4, r1
 800987a:	4619      	mov	r1, r3
 800987c:	463b      	mov	r3, r7
 800987e:	bfb4      	ite	lt
 8009880:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8009884:	2300      	movge	r3, #0
 8009886:	4691      	mov	r9, r2
 8009888:	bfbf      	itttt	lt
 800988a:	4632      	movlt	r2, r6
 800988c:	461f      	movlt	r7, r3
 800988e:	232d      	movlt	r3, #45	@ 0x2d
 8009890:	4616      	movlt	r6, r2
 8009892:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8009896:	700b      	strb	r3, [r1, #0]
 8009898:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800989a:	f023 0820 	bic.w	r8, r3, #32
 800989e:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80098a2:	d005      	beq.n	80098b0 <__cvt+0x42>
 80098a4:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80098a8:	d100      	bne.n	80098ac <__cvt+0x3e>
 80098aa:	3401      	adds	r4, #1
 80098ac:	2102      	movs	r1, #2
 80098ae:	e000      	b.n	80098b2 <__cvt+0x44>
 80098b0:	2103      	movs	r1, #3
 80098b2:	ab03      	add	r3, sp, #12
 80098b4:	4622      	mov	r2, r4
 80098b6:	9301      	str	r3, [sp, #4]
 80098b8:	ab02      	add	r3, sp, #8
 80098ba:	ec47 6b10 	vmov	d0, r6, r7
 80098be:	9300      	str	r3, [sp, #0]
 80098c0:	4653      	mov	r3, sl
 80098c2:	f000 fdf9 	bl	800a4b8 <_dtoa_r>
 80098c6:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80098ca:	4605      	mov	r5, r0
 80098cc:	d119      	bne.n	8009902 <__cvt+0x94>
 80098ce:	f019 0f01 	tst.w	r9, #1
 80098d2:	d00e      	beq.n	80098f2 <__cvt+0x84>
 80098d4:	eb00 0904 	add.w	r9, r0, r4
 80098d8:	2200      	movs	r2, #0
 80098da:	2300      	movs	r3, #0
 80098dc:	4630      	mov	r0, r6
 80098de:	4639      	mov	r1, r7
 80098e0:	f7f7 f8f6 	bl	8000ad0 <__aeabi_dcmpeq>
 80098e4:	b108      	cbz	r0, 80098ea <__cvt+0x7c>
 80098e6:	f8cd 900c 	str.w	r9, [sp, #12]
 80098ea:	2230      	movs	r2, #48	@ 0x30
 80098ec:	9b03      	ldr	r3, [sp, #12]
 80098ee:	454b      	cmp	r3, r9
 80098f0:	d31e      	bcc.n	8009930 <__cvt+0xc2>
 80098f2:	9b03      	ldr	r3, [sp, #12]
 80098f4:	4628      	mov	r0, r5
 80098f6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80098f8:	1b5b      	subs	r3, r3, r5
 80098fa:	6013      	str	r3, [r2, #0]
 80098fc:	b004      	add	sp, #16
 80098fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009902:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8009906:	eb00 0904 	add.w	r9, r0, r4
 800990a:	d1e5      	bne.n	80098d8 <__cvt+0x6a>
 800990c:	7803      	ldrb	r3, [r0, #0]
 800990e:	2b30      	cmp	r3, #48	@ 0x30
 8009910:	d10a      	bne.n	8009928 <__cvt+0xba>
 8009912:	2200      	movs	r2, #0
 8009914:	2300      	movs	r3, #0
 8009916:	4630      	mov	r0, r6
 8009918:	4639      	mov	r1, r7
 800991a:	f7f7 f8d9 	bl	8000ad0 <__aeabi_dcmpeq>
 800991e:	b918      	cbnz	r0, 8009928 <__cvt+0xba>
 8009920:	f1c4 0401 	rsb	r4, r4, #1
 8009924:	f8ca 4000 	str.w	r4, [sl]
 8009928:	f8da 3000 	ldr.w	r3, [sl]
 800992c:	4499      	add	r9, r3
 800992e:	e7d3      	b.n	80098d8 <__cvt+0x6a>
 8009930:	1c59      	adds	r1, r3, #1
 8009932:	9103      	str	r1, [sp, #12]
 8009934:	701a      	strb	r2, [r3, #0]
 8009936:	e7d9      	b.n	80098ec <__cvt+0x7e>

08009938 <__exponent>:
 8009938:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800993a:	2900      	cmp	r1, #0
 800993c:	7002      	strb	r2, [r0, #0]
 800993e:	bfba      	itte	lt
 8009940:	4249      	neglt	r1, r1
 8009942:	232d      	movlt	r3, #45	@ 0x2d
 8009944:	232b      	movge	r3, #43	@ 0x2b
 8009946:	2909      	cmp	r1, #9
 8009948:	7043      	strb	r3, [r0, #1]
 800994a:	dd28      	ble.n	800999e <__exponent+0x66>
 800994c:	f10d 0307 	add.w	r3, sp, #7
 8009950:	270a      	movs	r7, #10
 8009952:	461d      	mov	r5, r3
 8009954:	461a      	mov	r2, r3
 8009956:	3b01      	subs	r3, #1
 8009958:	fbb1 f6f7 	udiv	r6, r1, r7
 800995c:	fb07 1416 	mls	r4, r7, r6, r1
 8009960:	3430      	adds	r4, #48	@ 0x30
 8009962:	f802 4c01 	strb.w	r4, [r2, #-1]
 8009966:	460c      	mov	r4, r1
 8009968:	4631      	mov	r1, r6
 800996a:	2c63      	cmp	r4, #99	@ 0x63
 800996c:	dcf2      	bgt.n	8009954 <__exponent+0x1c>
 800996e:	3130      	adds	r1, #48	@ 0x30
 8009970:	1e94      	subs	r4, r2, #2
 8009972:	f803 1c01 	strb.w	r1, [r3, #-1]
 8009976:	1c41      	adds	r1, r0, #1
 8009978:	4623      	mov	r3, r4
 800997a:	42ab      	cmp	r3, r5
 800997c:	d30a      	bcc.n	8009994 <__exponent+0x5c>
 800997e:	f10d 0309 	add.w	r3, sp, #9
 8009982:	1a9b      	subs	r3, r3, r2
 8009984:	42ac      	cmp	r4, r5
 8009986:	bf88      	it	hi
 8009988:	2300      	movhi	r3, #0
 800998a:	3302      	adds	r3, #2
 800998c:	4403      	add	r3, r0
 800998e:	1a18      	subs	r0, r3, r0
 8009990:	b003      	add	sp, #12
 8009992:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009994:	f813 6b01 	ldrb.w	r6, [r3], #1
 8009998:	f801 6f01 	strb.w	r6, [r1, #1]!
 800999c:	e7ed      	b.n	800997a <__exponent+0x42>
 800999e:	2330      	movs	r3, #48	@ 0x30
 80099a0:	3130      	adds	r1, #48	@ 0x30
 80099a2:	7083      	strb	r3, [r0, #2]
 80099a4:	1d03      	adds	r3, r0, #4
 80099a6:	70c1      	strb	r1, [r0, #3]
 80099a8:	e7f1      	b.n	800998e <__exponent+0x56>
	...

080099ac <_printf_float>:
 80099ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80099b0:	b08d      	sub	sp, #52	@ 0x34
 80099b2:	460c      	mov	r4, r1
 80099b4:	4616      	mov	r6, r2
 80099b6:	461f      	mov	r7, r3
 80099b8:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80099bc:	4605      	mov	r5, r0
 80099be:	f000 fcdb 	bl	800a378 <_localeconv_r>
 80099c2:	6803      	ldr	r3, [r0, #0]
 80099c4:	4618      	mov	r0, r3
 80099c6:	9304      	str	r3, [sp, #16]
 80099c8:	f7f6 fc56 	bl	8000278 <strlen>
 80099cc:	2300      	movs	r3, #0
 80099ce:	9005      	str	r0, [sp, #20]
 80099d0:	930a      	str	r3, [sp, #40]	@ 0x28
 80099d2:	f8d8 3000 	ldr.w	r3, [r8]
 80099d6:	f894 a018 	ldrb.w	sl, [r4, #24]
 80099da:	3307      	adds	r3, #7
 80099dc:	f8d4 b000 	ldr.w	fp, [r4]
 80099e0:	f023 0307 	bic.w	r3, r3, #7
 80099e4:	f103 0208 	add.w	r2, r3, #8
 80099e8:	f8c8 2000 	str.w	r2, [r8]
 80099ec:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80099f0:	e9d3 8900 	ldrd	r8, r9, [r3]
 80099f4:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80099f8:	f8cd 8018 	str.w	r8, [sp, #24]
 80099fc:	9307      	str	r3, [sp, #28]
 80099fe:	4b9d      	ldr	r3, [pc, #628]	@ (8009c74 <_printf_float+0x2c8>)
 8009a00:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009a04:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8009a08:	f7f7 f894 	bl	8000b34 <__aeabi_dcmpun>
 8009a0c:	bb70      	cbnz	r0, 8009a6c <_printf_float+0xc0>
 8009a0e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009a12:	4b98      	ldr	r3, [pc, #608]	@ (8009c74 <_printf_float+0x2c8>)
 8009a14:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009a18:	f7f7 f86e 	bl	8000af8 <__aeabi_dcmple>
 8009a1c:	bb30      	cbnz	r0, 8009a6c <_printf_float+0xc0>
 8009a1e:	2200      	movs	r2, #0
 8009a20:	2300      	movs	r3, #0
 8009a22:	4640      	mov	r0, r8
 8009a24:	4649      	mov	r1, r9
 8009a26:	f7f7 f85d 	bl	8000ae4 <__aeabi_dcmplt>
 8009a2a:	b110      	cbz	r0, 8009a32 <_printf_float+0x86>
 8009a2c:	232d      	movs	r3, #45	@ 0x2d
 8009a2e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009a32:	4a91      	ldr	r2, [pc, #580]	@ (8009c78 <_printf_float+0x2cc>)
 8009a34:	4b91      	ldr	r3, [pc, #580]	@ (8009c7c <_printf_float+0x2d0>)
 8009a36:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8009a3a:	bf8c      	ite	hi
 8009a3c:	4690      	movhi	r8, r2
 8009a3e:	4698      	movls	r8, r3
 8009a40:	2303      	movs	r3, #3
 8009a42:	f04f 0900 	mov.w	r9, #0
 8009a46:	6123      	str	r3, [r4, #16]
 8009a48:	f02b 0304 	bic.w	r3, fp, #4
 8009a4c:	6023      	str	r3, [r4, #0]
 8009a4e:	4633      	mov	r3, r6
 8009a50:	aa0b      	add	r2, sp, #44	@ 0x2c
 8009a52:	4621      	mov	r1, r4
 8009a54:	4628      	mov	r0, r5
 8009a56:	9700      	str	r7, [sp, #0]
 8009a58:	f000 f9d2 	bl	8009e00 <_printf_common>
 8009a5c:	3001      	adds	r0, #1
 8009a5e:	f040 808d 	bne.w	8009b7c <_printf_float+0x1d0>
 8009a62:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009a66:	b00d      	add	sp, #52	@ 0x34
 8009a68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a6c:	4642      	mov	r2, r8
 8009a6e:	464b      	mov	r3, r9
 8009a70:	4640      	mov	r0, r8
 8009a72:	4649      	mov	r1, r9
 8009a74:	f7f7 f85e 	bl	8000b34 <__aeabi_dcmpun>
 8009a78:	b140      	cbz	r0, 8009a8c <_printf_float+0xe0>
 8009a7a:	464b      	mov	r3, r9
 8009a7c:	4a80      	ldr	r2, [pc, #512]	@ (8009c80 <_printf_float+0x2d4>)
 8009a7e:	2b00      	cmp	r3, #0
 8009a80:	bfbc      	itt	lt
 8009a82:	232d      	movlt	r3, #45	@ 0x2d
 8009a84:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8009a88:	4b7e      	ldr	r3, [pc, #504]	@ (8009c84 <_printf_float+0x2d8>)
 8009a8a:	e7d4      	b.n	8009a36 <_printf_float+0x8a>
 8009a8c:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8009a90:	6863      	ldr	r3, [r4, #4]
 8009a92:	9206      	str	r2, [sp, #24]
 8009a94:	1c5a      	adds	r2, r3, #1
 8009a96:	d13b      	bne.n	8009b10 <_printf_float+0x164>
 8009a98:	2306      	movs	r3, #6
 8009a9a:	6063      	str	r3, [r4, #4]
 8009a9c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8009aa0:	2300      	movs	r3, #0
 8009aa2:	4628      	mov	r0, r5
 8009aa4:	6022      	str	r2, [r4, #0]
 8009aa6:	9303      	str	r3, [sp, #12]
 8009aa8:	ab0a      	add	r3, sp, #40	@ 0x28
 8009aaa:	e9cd a301 	strd	sl, r3, [sp, #4]
 8009aae:	ab09      	add	r3, sp, #36	@ 0x24
 8009ab0:	ec49 8b10 	vmov	d0, r8, r9
 8009ab4:	9300      	str	r3, [sp, #0]
 8009ab6:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8009aba:	6861      	ldr	r1, [r4, #4]
 8009abc:	f7ff fed7 	bl	800986e <__cvt>
 8009ac0:	9b06      	ldr	r3, [sp, #24]
 8009ac2:	4680      	mov	r8, r0
 8009ac4:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009ac6:	2b47      	cmp	r3, #71	@ 0x47
 8009ac8:	d129      	bne.n	8009b1e <_printf_float+0x172>
 8009aca:	1cc8      	adds	r0, r1, #3
 8009acc:	db02      	blt.n	8009ad4 <_printf_float+0x128>
 8009ace:	6863      	ldr	r3, [r4, #4]
 8009ad0:	4299      	cmp	r1, r3
 8009ad2:	dd41      	ble.n	8009b58 <_printf_float+0x1ac>
 8009ad4:	f1aa 0a02 	sub.w	sl, sl, #2
 8009ad8:	fa5f fa8a 	uxtb.w	sl, sl
 8009adc:	3901      	subs	r1, #1
 8009ade:	4652      	mov	r2, sl
 8009ae0:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8009ae4:	9109      	str	r1, [sp, #36]	@ 0x24
 8009ae6:	f7ff ff27 	bl	8009938 <__exponent>
 8009aea:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009aec:	4681      	mov	r9, r0
 8009aee:	1813      	adds	r3, r2, r0
 8009af0:	2a01      	cmp	r2, #1
 8009af2:	6123      	str	r3, [r4, #16]
 8009af4:	dc02      	bgt.n	8009afc <_printf_float+0x150>
 8009af6:	6822      	ldr	r2, [r4, #0]
 8009af8:	07d2      	lsls	r2, r2, #31
 8009afa:	d501      	bpl.n	8009b00 <_printf_float+0x154>
 8009afc:	3301      	adds	r3, #1
 8009afe:	6123      	str	r3, [r4, #16]
 8009b00:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8009b04:	2b00      	cmp	r3, #0
 8009b06:	d0a2      	beq.n	8009a4e <_printf_float+0xa2>
 8009b08:	232d      	movs	r3, #45	@ 0x2d
 8009b0a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009b0e:	e79e      	b.n	8009a4e <_printf_float+0xa2>
 8009b10:	9a06      	ldr	r2, [sp, #24]
 8009b12:	2a47      	cmp	r2, #71	@ 0x47
 8009b14:	d1c2      	bne.n	8009a9c <_printf_float+0xf0>
 8009b16:	2b00      	cmp	r3, #0
 8009b18:	d1c0      	bne.n	8009a9c <_printf_float+0xf0>
 8009b1a:	2301      	movs	r3, #1
 8009b1c:	e7bd      	b.n	8009a9a <_printf_float+0xee>
 8009b1e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8009b22:	d9db      	bls.n	8009adc <_printf_float+0x130>
 8009b24:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8009b28:	d118      	bne.n	8009b5c <_printf_float+0x1b0>
 8009b2a:	2900      	cmp	r1, #0
 8009b2c:	6863      	ldr	r3, [r4, #4]
 8009b2e:	dd0b      	ble.n	8009b48 <_printf_float+0x19c>
 8009b30:	6121      	str	r1, [r4, #16]
 8009b32:	b913      	cbnz	r3, 8009b3a <_printf_float+0x18e>
 8009b34:	6822      	ldr	r2, [r4, #0]
 8009b36:	07d0      	lsls	r0, r2, #31
 8009b38:	d502      	bpl.n	8009b40 <_printf_float+0x194>
 8009b3a:	3301      	adds	r3, #1
 8009b3c:	440b      	add	r3, r1
 8009b3e:	6123      	str	r3, [r4, #16]
 8009b40:	f04f 0900 	mov.w	r9, #0
 8009b44:	65a1      	str	r1, [r4, #88]	@ 0x58
 8009b46:	e7db      	b.n	8009b00 <_printf_float+0x154>
 8009b48:	b913      	cbnz	r3, 8009b50 <_printf_float+0x1a4>
 8009b4a:	6822      	ldr	r2, [r4, #0]
 8009b4c:	07d2      	lsls	r2, r2, #31
 8009b4e:	d501      	bpl.n	8009b54 <_printf_float+0x1a8>
 8009b50:	3302      	adds	r3, #2
 8009b52:	e7f4      	b.n	8009b3e <_printf_float+0x192>
 8009b54:	2301      	movs	r3, #1
 8009b56:	e7f2      	b.n	8009b3e <_printf_float+0x192>
 8009b58:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8009b5c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009b5e:	4299      	cmp	r1, r3
 8009b60:	db05      	blt.n	8009b6e <_printf_float+0x1c2>
 8009b62:	6823      	ldr	r3, [r4, #0]
 8009b64:	6121      	str	r1, [r4, #16]
 8009b66:	07d8      	lsls	r0, r3, #31
 8009b68:	d5ea      	bpl.n	8009b40 <_printf_float+0x194>
 8009b6a:	1c4b      	adds	r3, r1, #1
 8009b6c:	e7e7      	b.n	8009b3e <_printf_float+0x192>
 8009b6e:	2900      	cmp	r1, #0
 8009b70:	bfd4      	ite	le
 8009b72:	f1c1 0202 	rsble	r2, r1, #2
 8009b76:	2201      	movgt	r2, #1
 8009b78:	4413      	add	r3, r2
 8009b7a:	e7e0      	b.n	8009b3e <_printf_float+0x192>
 8009b7c:	6823      	ldr	r3, [r4, #0]
 8009b7e:	055a      	lsls	r2, r3, #21
 8009b80:	d407      	bmi.n	8009b92 <_printf_float+0x1e6>
 8009b82:	6923      	ldr	r3, [r4, #16]
 8009b84:	4642      	mov	r2, r8
 8009b86:	4631      	mov	r1, r6
 8009b88:	4628      	mov	r0, r5
 8009b8a:	47b8      	blx	r7
 8009b8c:	3001      	adds	r0, #1
 8009b8e:	d12b      	bne.n	8009be8 <_printf_float+0x23c>
 8009b90:	e767      	b.n	8009a62 <_printf_float+0xb6>
 8009b92:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8009b96:	f240 80dd 	bls.w	8009d54 <_printf_float+0x3a8>
 8009b9a:	2200      	movs	r2, #0
 8009b9c:	2300      	movs	r3, #0
 8009b9e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8009ba2:	f7f6 ff95 	bl	8000ad0 <__aeabi_dcmpeq>
 8009ba6:	2800      	cmp	r0, #0
 8009ba8:	d033      	beq.n	8009c12 <_printf_float+0x266>
 8009baa:	2301      	movs	r3, #1
 8009bac:	4a36      	ldr	r2, [pc, #216]	@ (8009c88 <_printf_float+0x2dc>)
 8009bae:	4631      	mov	r1, r6
 8009bb0:	4628      	mov	r0, r5
 8009bb2:	47b8      	blx	r7
 8009bb4:	3001      	adds	r0, #1
 8009bb6:	f43f af54 	beq.w	8009a62 <_printf_float+0xb6>
 8009bba:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8009bbe:	4543      	cmp	r3, r8
 8009bc0:	db02      	blt.n	8009bc8 <_printf_float+0x21c>
 8009bc2:	6823      	ldr	r3, [r4, #0]
 8009bc4:	07d8      	lsls	r0, r3, #31
 8009bc6:	d50f      	bpl.n	8009be8 <_printf_float+0x23c>
 8009bc8:	4631      	mov	r1, r6
 8009bca:	4628      	mov	r0, r5
 8009bcc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009bd0:	47b8      	blx	r7
 8009bd2:	3001      	adds	r0, #1
 8009bd4:	f43f af45 	beq.w	8009a62 <_printf_float+0xb6>
 8009bd8:	f04f 0900 	mov.w	r9, #0
 8009bdc:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8009be0:	f104 0a1a 	add.w	sl, r4, #26
 8009be4:	45c8      	cmp	r8, r9
 8009be6:	dc09      	bgt.n	8009bfc <_printf_float+0x250>
 8009be8:	6823      	ldr	r3, [r4, #0]
 8009bea:	079b      	lsls	r3, r3, #30
 8009bec:	f100 8103 	bmi.w	8009df6 <_printf_float+0x44a>
 8009bf0:	68e0      	ldr	r0, [r4, #12]
 8009bf2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009bf4:	4298      	cmp	r0, r3
 8009bf6:	bfb8      	it	lt
 8009bf8:	4618      	movlt	r0, r3
 8009bfa:	e734      	b.n	8009a66 <_printf_float+0xba>
 8009bfc:	2301      	movs	r3, #1
 8009bfe:	4652      	mov	r2, sl
 8009c00:	4631      	mov	r1, r6
 8009c02:	4628      	mov	r0, r5
 8009c04:	47b8      	blx	r7
 8009c06:	3001      	adds	r0, #1
 8009c08:	f43f af2b 	beq.w	8009a62 <_printf_float+0xb6>
 8009c0c:	f109 0901 	add.w	r9, r9, #1
 8009c10:	e7e8      	b.n	8009be4 <_printf_float+0x238>
 8009c12:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009c14:	2b00      	cmp	r3, #0
 8009c16:	dc39      	bgt.n	8009c8c <_printf_float+0x2e0>
 8009c18:	2301      	movs	r3, #1
 8009c1a:	4a1b      	ldr	r2, [pc, #108]	@ (8009c88 <_printf_float+0x2dc>)
 8009c1c:	4631      	mov	r1, r6
 8009c1e:	4628      	mov	r0, r5
 8009c20:	47b8      	blx	r7
 8009c22:	3001      	adds	r0, #1
 8009c24:	f43f af1d 	beq.w	8009a62 <_printf_float+0xb6>
 8009c28:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8009c2c:	ea59 0303 	orrs.w	r3, r9, r3
 8009c30:	d102      	bne.n	8009c38 <_printf_float+0x28c>
 8009c32:	6823      	ldr	r3, [r4, #0]
 8009c34:	07d9      	lsls	r1, r3, #31
 8009c36:	d5d7      	bpl.n	8009be8 <_printf_float+0x23c>
 8009c38:	4631      	mov	r1, r6
 8009c3a:	4628      	mov	r0, r5
 8009c3c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009c40:	47b8      	blx	r7
 8009c42:	3001      	adds	r0, #1
 8009c44:	f43f af0d 	beq.w	8009a62 <_printf_float+0xb6>
 8009c48:	f04f 0a00 	mov.w	sl, #0
 8009c4c:	f104 0b1a 	add.w	fp, r4, #26
 8009c50:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009c52:	425b      	negs	r3, r3
 8009c54:	4553      	cmp	r3, sl
 8009c56:	dc01      	bgt.n	8009c5c <_printf_float+0x2b0>
 8009c58:	464b      	mov	r3, r9
 8009c5a:	e793      	b.n	8009b84 <_printf_float+0x1d8>
 8009c5c:	2301      	movs	r3, #1
 8009c5e:	465a      	mov	r2, fp
 8009c60:	4631      	mov	r1, r6
 8009c62:	4628      	mov	r0, r5
 8009c64:	47b8      	blx	r7
 8009c66:	3001      	adds	r0, #1
 8009c68:	f43f aefb 	beq.w	8009a62 <_printf_float+0xb6>
 8009c6c:	f10a 0a01 	add.w	sl, sl, #1
 8009c70:	e7ee      	b.n	8009c50 <_printf_float+0x2a4>
 8009c72:	bf00      	nop
 8009c74:	7fefffff 	.word	0x7fefffff
 8009c78:	0800dc60 	.word	0x0800dc60
 8009c7c:	0800dc5c 	.word	0x0800dc5c
 8009c80:	0800dc68 	.word	0x0800dc68
 8009c84:	0800dc64 	.word	0x0800dc64
 8009c88:	0800dc6c 	.word	0x0800dc6c
 8009c8c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8009c8e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8009c92:	4553      	cmp	r3, sl
 8009c94:	bfa8      	it	ge
 8009c96:	4653      	movge	r3, sl
 8009c98:	2b00      	cmp	r3, #0
 8009c9a:	4699      	mov	r9, r3
 8009c9c:	dc36      	bgt.n	8009d0c <_printf_float+0x360>
 8009c9e:	f04f 0b00 	mov.w	fp, #0
 8009ca2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009ca6:	f104 021a 	add.w	r2, r4, #26
 8009caa:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8009cac:	9306      	str	r3, [sp, #24]
 8009cae:	eba3 0309 	sub.w	r3, r3, r9
 8009cb2:	455b      	cmp	r3, fp
 8009cb4:	dc31      	bgt.n	8009d1a <_printf_float+0x36e>
 8009cb6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009cb8:	459a      	cmp	sl, r3
 8009cba:	dc3a      	bgt.n	8009d32 <_printf_float+0x386>
 8009cbc:	6823      	ldr	r3, [r4, #0]
 8009cbe:	07da      	lsls	r2, r3, #31
 8009cc0:	d437      	bmi.n	8009d32 <_printf_float+0x386>
 8009cc2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009cc4:	ebaa 0903 	sub.w	r9, sl, r3
 8009cc8:	9b06      	ldr	r3, [sp, #24]
 8009cca:	ebaa 0303 	sub.w	r3, sl, r3
 8009cce:	4599      	cmp	r9, r3
 8009cd0:	bfa8      	it	ge
 8009cd2:	4699      	movge	r9, r3
 8009cd4:	f1b9 0f00 	cmp.w	r9, #0
 8009cd8:	dc33      	bgt.n	8009d42 <_printf_float+0x396>
 8009cda:	f04f 0800 	mov.w	r8, #0
 8009cde:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009ce2:	f104 0b1a 	add.w	fp, r4, #26
 8009ce6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009ce8:	ebaa 0303 	sub.w	r3, sl, r3
 8009cec:	eba3 0309 	sub.w	r3, r3, r9
 8009cf0:	4543      	cmp	r3, r8
 8009cf2:	f77f af79 	ble.w	8009be8 <_printf_float+0x23c>
 8009cf6:	2301      	movs	r3, #1
 8009cf8:	465a      	mov	r2, fp
 8009cfa:	4631      	mov	r1, r6
 8009cfc:	4628      	mov	r0, r5
 8009cfe:	47b8      	blx	r7
 8009d00:	3001      	adds	r0, #1
 8009d02:	f43f aeae 	beq.w	8009a62 <_printf_float+0xb6>
 8009d06:	f108 0801 	add.w	r8, r8, #1
 8009d0a:	e7ec      	b.n	8009ce6 <_printf_float+0x33a>
 8009d0c:	4642      	mov	r2, r8
 8009d0e:	4631      	mov	r1, r6
 8009d10:	4628      	mov	r0, r5
 8009d12:	47b8      	blx	r7
 8009d14:	3001      	adds	r0, #1
 8009d16:	d1c2      	bne.n	8009c9e <_printf_float+0x2f2>
 8009d18:	e6a3      	b.n	8009a62 <_printf_float+0xb6>
 8009d1a:	2301      	movs	r3, #1
 8009d1c:	4631      	mov	r1, r6
 8009d1e:	4628      	mov	r0, r5
 8009d20:	9206      	str	r2, [sp, #24]
 8009d22:	47b8      	blx	r7
 8009d24:	3001      	adds	r0, #1
 8009d26:	f43f ae9c 	beq.w	8009a62 <_printf_float+0xb6>
 8009d2a:	f10b 0b01 	add.w	fp, fp, #1
 8009d2e:	9a06      	ldr	r2, [sp, #24]
 8009d30:	e7bb      	b.n	8009caa <_printf_float+0x2fe>
 8009d32:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009d36:	4631      	mov	r1, r6
 8009d38:	4628      	mov	r0, r5
 8009d3a:	47b8      	blx	r7
 8009d3c:	3001      	adds	r0, #1
 8009d3e:	d1c0      	bne.n	8009cc2 <_printf_float+0x316>
 8009d40:	e68f      	b.n	8009a62 <_printf_float+0xb6>
 8009d42:	9a06      	ldr	r2, [sp, #24]
 8009d44:	464b      	mov	r3, r9
 8009d46:	4631      	mov	r1, r6
 8009d48:	4628      	mov	r0, r5
 8009d4a:	4442      	add	r2, r8
 8009d4c:	47b8      	blx	r7
 8009d4e:	3001      	adds	r0, #1
 8009d50:	d1c3      	bne.n	8009cda <_printf_float+0x32e>
 8009d52:	e686      	b.n	8009a62 <_printf_float+0xb6>
 8009d54:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8009d58:	f1ba 0f01 	cmp.w	sl, #1
 8009d5c:	dc01      	bgt.n	8009d62 <_printf_float+0x3b6>
 8009d5e:	07db      	lsls	r3, r3, #31
 8009d60:	d536      	bpl.n	8009dd0 <_printf_float+0x424>
 8009d62:	2301      	movs	r3, #1
 8009d64:	4642      	mov	r2, r8
 8009d66:	4631      	mov	r1, r6
 8009d68:	4628      	mov	r0, r5
 8009d6a:	47b8      	blx	r7
 8009d6c:	3001      	adds	r0, #1
 8009d6e:	f43f ae78 	beq.w	8009a62 <_printf_float+0xb6>
 8009d72:	4631      	mov	r1, r6
 8009d74:	4628      	mov	r0, r5
 8009d76:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009d7a:	47b8      	blx	r7
 8009d7c:	3001      	adds	r0, #1
 8009d7e:	f43f ae70 	beq.w	8009a62 <_printf_float+0xb6>
 8009d82:	2200      	movs	r2, #0
 8009d84:	2300      	movs	r3, #0
 8009d86:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8009d8a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8009d8e:	f7f6 fe9f 	bl	8000ad0 <__aeabi_dcmpeq>
 8009d92:	b9c0      	cbnz	r0, 8009dc6 <_printf_float+0x41a>
 8009d94:	4653      	mov	r3, sl
 8009d96:	f108 0201 	add.w	r2, r8, #1
 8009d9a:	4631      	mov	r1, r6
 8009d9c:	4628      	mov	r0, r5
 8009d9e:	47b8      	blx	r7
 8009da0:	3001      	adds	r0, #1
 8009da2:	d10c      	bne.n	8009dbe <_printf_float+0x412>
 8009da4:	e65d      	b.n	8009a62 <_printf_float+0xb6>
 8009da6:	2301      	movs	r3, #1
 8009da8:	465a      	mov	r2, fp
 8009daa:	4631      	mov	r1, r6
 8009dac:	4628      	mov	r0, r5
 8009dae:	47b8      	blx	r7
 8009db0:	3001      	adds	r0, #1
 8009db2:	f43f ae56 	beq.w	8009a62 <_printf_float+0xb6>
 8009db6:	f108 0801 	add.w	r8, r8, #1
 8009dba:	45d0      	cmp	r8, sl
 8009dbc:	dbf3      	blt.n	8009da6 <_printf_float+0x3fa>
 8009dbe:	464b      	mov	r3, r9
 8009dc0:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8009dc4:	e6df      	b.n	8009b86 <_printf_float+0x1da>
 8009dc6:	f04f 0800 	mov.w	r8, #0
 8009dca:	f104 0b1a 	add.w	fp, r4, #26
 8009dce:	e7f4      	b.n	8009dba <_printf_float+0x40e>
 8009dd0:	2301      	movs	r3, #1
 8009dd2:	4642      	mov	r2, r8
 8009dd4:	e7e1      	b.n	8009d9a <_printf_float+0x3ee>
 8009dd6:	2301      	movs	r3, #1
 8009dd8:	464a      	mov	r2, r9
 8009dda:	4631      	mov	r1, r6
 8009ddc:	4628      	mov	r0, r5
 8009dde:	47b8      	blx	r7
 8009de0:	3001      	adds	r0, #1
 8009de2:	f43f ae3e 	beq.w	8009a62 <_printf_float+0xb6>
 8009de6:	f108 0801 	add.w	r8, r8, #1
 8009dea:	68e3      	ldr	r3, [r4, #12]
 8009dec:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8009dee:	1a5b      	subs	r3, r3, r1
 8009df0:	4543      	cmp	r3, r8
 8009df2:	dcf0      	bgt.n	8009dd6 <_printf_float+0x42a>
 8009df4:	e6fc      	b.n	8009bf0 <_printf_float+0x244>
 8009df6:	f04f 0800 	mov.w	r8, #0
 8009dfa:	f104 0919 	add.w	r9, r4, #25
 8009dfe:	e7f4      	b.n	8009dea <_printf_float+0x43e>

08009e00 <_printf_common>:
 8009e00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009e04:	4616      	mov	r6, r2
 8009e06:	4698      	mov	r8, r3
 8009e08:	688a      	ldr	r2, [r1, #8]
 8009e0a:	4607      	mov	r7, r0
 8009e0c:	690b      	ldr	r3, [r1, #16]
 8009e0e:	460c      	mov	r4, r1
 8009e10:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009e14:	4293      	cmp	r3, r2
 8009e16:	bfb8      	it	lt
 8009e18:	4613      	movlt	r3, r2
 8009e1a:	6033      	str	r3, [r6, #0]
 8009e1c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8009e20:	b10a      	cbz	r2, 8009e26 <_printf_common+0x26>
 8009e22:	3301      	adds	r3, #1
 8009e24:	6033      	str	r3, [r6, #0]
 8009e26:	6823      	ldr	r3, [r4, #0]
 8009e28:	0699      	lsls	r1, r3, #26
 8009e2a:	bf42      	ittt	mi
 8009e2c:	6833      	ldrmi	r3, [r6, #0]
 8009e2e:	3302      	addmi	r3, #2
 8009e30:	6033      	strmi	r3, [r6, #0]
 8009e32:	6825      	ldr	r5, [r4, #0]
 8009e34:	f015 0506 	ands.w	r5, r5, #6
 8009e38:	d106      	bne.n	8009e48 <_printf_common+0x48>
 8009e3a:	f104 0a19 	add.w	sl, r4, #25
 8009e3e:	68e3      	ldr	r3, [r4, #12]
 8009e40:	6832      	ldr	r2, [r6, #0]
 8009e42:	1a9b      	subs	r3, r3, r2
 8009e44:	42ab      	cmp	r3, r5
 8009e46:	dc2b      	bgt.n	8009ea0 <_printf_common+0xa0>
 8009e48:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8009e4c:	6822      	ldr	r2, [r4, #0]
 8009e4e:	3b00      	subs	r3, #0
 8009e50:	bf18      	it	ne
 8009e52:	2301      	movne	r3, #1
 8009e54:	0692      	lsls	r2, r2, #26
 8009e56:	d430      	bmi.n	8009eba <_printf_common+0xba>
 8009e58:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8009e5c:	4641      	mov	r1, r8
 8009e5e:	4638      	mov	r0, r7
 8009e60:	47c8      	blx	r9
 8009e62:	3001      	adds	r0, #1
 8009e64:	d023      	beq.n	8009eae <_printf_common+0xae>
 8009e66:	6823      	ldr	r3, [r4, #0]
 8009e68:	341a      	adds	r4, #26
 8009e6a:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 8009e6e:	f003 0306 	and.w	r3, r3, #6
 8009e72:	2b04      	cmp	r3, #4
 8009e74:	bf0a      	itet	eq
 8009e76:	f854 5c0e 	ldreq.w	r5, [r4, #-14]
 8009e7a:	2500      	movne	r5, #0
 8009e7c:	6833      	ldreq	r3, [r6, #0]
 8009e7e:	f04f 0600 	mov.w	r6, #0
 8009e82:	bf08      	it	eq
 8009e84:	1aed      	subeq	r5, r5, r3
 8009e86:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8009e8a:	bf08      	it	eq
 8009e8c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009e90:	4293      	cmp	r3, r2
 8009e92:	bfc4      	itt	gt
 8009e94:	1a9b      	subgt	r3, r3, r2
 8009e96:	18ed      	addgt	r5, r5, r3
 8009e98:	42b5      	cmp	r5, r6
 8009e9a:	d11a      	bne.n	8009ed2 <_printf_common+0xd2>
 8009e9c:	2000      	movs	r0, #0
 8009e9e:	e008      	b.n	8009eb2 <_printf_common+0xb2>
 8009ea0:	2301      	movs	r3, #1
 8009ea2:	4652      	mov	r2, sl
 8009ea4:	4641      	mov	r1, r8
 8009ea6:	4638      	mov	r0, r7
 8009ea8:	47c8      	blx	r9
 8009eaa:	3001      	adds	r0, #1
 8009eac:	d103      	bne.n	8009eb6 <_printf_common+0xb6>
 8009eae:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009eb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009eb6:	3501      	adds	r5, #1
 8009eb8:	e7c1      	b.n	8009e3e <_printf_common+0x3e>
 8009eba:	18e1      	adds	r1, r4, r3
 8009ebc:	1c5a      	adds	r2, r3, #1
 8009ebe:	2030      	movs	r0, #48	@ 0x30
 8009ec0:	3302      	adds	r3, #2
 8009ec2:	4422      	add	r2, r4
 8009ec4:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8009ec8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8009ecc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8009ed0:	e7c2      	b.n	8009e58 <_printf_common+0x58>
 8009ed2:	2301      	movs	r3, #1
 8009ed4:	4622      	mov	r2, r4
 8009ed6:	4641      	mov	r1, r8
 8009ed8:	4638      	mov	r0, r7
 8009eda:	47c8      	blx	r9
 8009edc:	3001      	adds	r0, #1
 8009ede:	d0e6      	beq.n	8009eae <_printf_common+0xae>
 8009ee0:	3601      	adds	r6, #1
 8009ee2:	e7d9      	b.n	8009e98 <_printf_common+0x98>

08009ee4 <_printf_i>:
 8009ee4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009ee8:	7e0f      	ldrb	r7, [r1, #24]
 8009eea:	4691      	mov	r9, r2
 8009eec:	4680      	mov	r8, r0
 8009eee:	460c      	mov	r4, r1
 8009ef0:	2f78      	cmp	r7, #120	@ 0x78
 8009ef2:	469a      	mov	sl, r3
 8009ef4:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8009ef6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8009efa:	d807      	bhi.n	8009f0c <_printf_i+0x28>
 8009efc:	2f62      	cmp	r7, #98	@ 0x62
 8009efe:	d80a      	bhi.n	8009f16 <_printf_i+0x32>
 8009f00:	2f00      	cmp	r7, #0
 8009f02:	f000 80d1 	beq.w	800a0a8 <_printf_i+0x1c4>
 8009f06:	2f58      	cmp	r7, #88	@ 0x58
 8009f08:	f000 80b8 	beq.w	800a07c <_printf_i+0x198>
 8009f0c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009f10:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8009f14:	e03a      	b.n	8009f8c <_printf_i+0xa8>
 8009f16:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8009f1a:	2b15      	cmp	r3, #21
 8009f1c:	d8f6      	bhi.n	8009f0c <_printf_i+0x28>
 8009f1e:	a101      	add	r1, pc, #4	@ (adr r1, 8009f24 <_printf_i+0x40>)
 8009f20:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009f24:	08009f7d 	.word	0x08009f7d
 8009f28:	08009f91 	.word	0x08009f91
 8009f2c:	08009f0d 	.word	0x08009f0d
 8009f30:	08009f0d 	.word	0x08009f0d
 8009f34:	08009f0d 	.word	0x08009f0d
 8009f38:	08009f0d 	.word	0x08009f0d
 8009f3c:	08009f91 	.word	0x08009f91
 8009f40:	08009f0d 	.word	0x08009f0d
 8009f44:	08009f0d 	.word	0x08009f0d
 8009f48:	08009f0d 	.word	0x08009f0d
 8009f4c:	08009f0d 	.word	0x08009f0d
 8009f50:	0800a08f 	.word	0x0800a08f
 8009f54:	08009fbb 	.word	0x08009fbb
 8009f58:	0800a049 	.word	0x0800a049
 8009f5c:	08009f0d 	.word	0x08009f0d
 8009f60:	08009f0d 	.word	0x08009f0d
 8009f64:	0800a0b1 	.word	0x0800a0b1
 8009f68:	08009f0d 	.word	0x08009f0d
 8009f6c:	08009fbb 	.word	0x08009fbb
 8009f70:	08009f0d 	.word	0x08009f0d
 8009f74:	08009f0d 	.word	0x08009f0d
 8009f78:	0800a051 	.word	0x0800a051
 8009f7c:	6833      	ldr	r3, [r6, #0]
 8009f7e:	1d1a      	adds	r2, r3, #4
 8009f80:	681b      	ldr	r3, [r3, #0]
 8009f82:	6032      	str	r2, [r6, #0]
 8009f84:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009f88:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8009f8c:	2301      	movs	r3, #1
 8009f8e:	e09c      	b.n	800a0ca <_printf_i+0x1e6>
 8009f90:	6833      	ldr	r3, [r6, #0]
 8009f92:	6820      	ldr	r0, [r4, #0]
 8009f94:	1d19      	adds	r1, r3, #4
 8009f96:	6031      	str	r1, [r6, #0]
 8009f98:	0606      	lsls	r6, r0, #24
 8009f9a:	d501      	bpl.n	8009fa0 <_printf_i+0xbc>
 8009f9c:	681d      	ldr	r5, [r3, #0]
 8009f9e:	e003      	b.n	8009fa8 <_printf_i+0xc4>
 8009fa0:	0645      	lsls	r5, r0, #25
 8009fa2:	d5fb      	bpl.n	8009f9c <_printf_i+0xb8>
 8009fa4:	f9b3 5000 	ldrsh.w	r5, [r3]
 8009fa8:	2d00      	cmp	r5, #0
 8009faa:	da03      	bge.n	8009fb4 <_printf_i+0xd0>
 8009fac:	232d      	movs	r3, #45	@ 0x2d
 8009fae:	426d      	negs	r5, r5
 8009fb0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009fb4:	4858      	ldr	r0, [pc, #352]	@ (800a118 <_printf_i+0x234>)
 8009fb6:	230a      	movs	r3, #10
 8009fb8:	e011      	b.n	8009fde <_printf_i+0xfa>
 8009fba:	6821      	ldr	r1, [r4, #0]
 8009fbc:	6833      	ldr	r3, [r6, #0]
 8009fbe:	0608      	lsls	r0, r1, #24
 8009fc0:	f853 5b04 	ldr.w	r5, [r3], #4
 8009fc4:	d402      	bmi.n	8009fcc <_printf_i+0xe8>
 8009fc6:	0649      	lsls	r1, r1, #25
 8009fc8:	bf48      	it	mi
 8009fca:	b2ad      	uxthmi	r5, r5
 8009fcc:	2f6f      	cmp	r7, #111	@ 0x6f
 8009fce:	6033      	str	r3, [r6, #0]
 8009fd0:	4851      	ldr	r0, [pc, #324]	@ (800a118 <_printf_i+0x234>)
 8009fd2:	bf14      	ite	ne
 8009fd4:	230a      	movne	r3, #10
 8009fd6:	2308      	moveq	r3, #8
 8009fd8:	2100      	movs	r1, #0
 8009fda:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8009fde:	6866      	ldr	r6, [r4, #4]
 8009fe0:	2e00      	cmp	r6, #0
 8009fe2:	60a6      	str	r6, [r4, #8]
 8009fe4:	db05      	blt.n	8009ff2 <_printf_i+0x10e>
 8009fe6:	6821      	ldr	r1, [r4, #0]
 8009fe8:	432e      	orrs	r6, r5
 8009fea:	f021 0104 	bic.w	r1, r1, #4
 8009fee:	6021      	str	r1, [r4, #0]
 8009ff0:	d04b      	beq.n	800a08a <_printf_i+0x1a6>
 8009ff2:	4616      	mov	r6, r2
 8009ff4:	fbb5 f1f3 	udiv	r1, r5, r3
 8009ff8:	fb03 5711 	mls	r7, r3, r1, r5
 8009ffc:	5dc7      	ldrb	r7, [r0, r7]
 8009ffe:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a002:	462f      	mov	r7, r5
 800a004:	460d      	mov	r5, r1
 800a006:	42bb      	cmp	r3, r7
 800a008:	d9f4      	bls.n	8009ff4 <_printf_i+0x110>
 800a00a:	2b08      	cmp	r3, #8
 800a00c:	d10b      	bne.n	800a026 <_printf_i+0x142>
 800a00e:	6823      	ldr	r3, [r4, #0]
 800a010:	07df      	lsls	r7, r3, #31
 800a012:	d508      	bpl.n	800a026 <_printf_i+0x142>
 800a014:	6923      	ldr	r3, [r4, #16]
 800a016:	6861      	ldr	r1, [r4, #4]
 800a018:	4299      	cmp	r1, r3
 800a01a:	bfde      	ittt	le
 800a01c:	2330      	movle	r3, #48	@ 0x30
 800a01e:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a022:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800a026:	1b92      	subs	r2, r2, r6
 800a028:	6122      	str	r2, [r4, #16]
 800a02a:	464b      	mov	r3, r9
 800a02c:	aa03      	add	r2, sp, #12
 800a02e:	4621      	mov	r1, r4
 800a030:	4640      	mov	r0, r8
 800a032:	f8cd a000 	str.w	sl, [sp]
 800a036:	f7ff fee3 	bl	8009e00 <_printf_common>
 800a03a:	3001      	adds	r0, #1
 800a03c:	d14a      	bne.n	800a0d4 <_printf_i+0x1f0>
 800a03e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a042:	b004      	add	sp, #16
 800a044:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a048:	6823      	ldr	r3, [r4, #0]
 800a04a:	f043 0320 	orr.w	r3, r3, #32
 800a04e:	6023      	str	r3, [r4, #0]
 800a050:	2778      	movs	r7, #120	@ 0x78
 800a052:	4832      	ldr	r0, [pc, #200]	@ (800a11c <_printf_i+0x238>)
 800a054:	6823      	ldr	r3, [r4, #0]
 800a056:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800a05a:	061f      	lsls	r7, r3, #24
 800a05c:	6831      	ldr	r1, [r6, #0]
 800a05e:	f851 5b04 	ldr.w	r5, [r1], #4
 800a062:	d402      	bmi.n	800a06a <_printf_i+0x186>
 800a064:	065f      	lsls	r7, r3, #25
 800a066:	bf48      	it	mi
 800a068:	b2ad      	uxthmi	r5, r5
 800a06a:	6031      	str	r1, [r6, #0]
 800a06c:	07d9      	lsls	r1, r3, #31
 800a06e:	bf44      	itt	mi
 800a070:	f043 0320 	orrmi.w	r3, r3, #32
 800a074:	6023      	strmi	r3, [r4, #0]
 800a076:	b11d      	cbz	r5, 800a080 <_printf_i+0x19c>
 800a078:	2310      	movs	r3, #16
 800a07a:	e7ad      	b.n	8009fd8 <_printf_i+0xf4>
 800a07c:	4826      	ldr	r0, [pc, #152]	@ (800a118 <_printf_i+0x234>)
 800a07e:	e7e9      	b.n	800a054 <_printf_i+0x170>
 800a080:	6823      	ldr	r3, [r4, #0]
 800a082:	f023 0320 	bic.w	r3, r3, #32
 800a086:	6023      	str	r3, [r4, #0]
 800a088:	e7f6      	b.n	800a078 <_printf_i+0x194>
 800a08a:	4616      	mov	r6, r2
 800a08c:	e7bd      	b.n	800a00a <_printf_i+0x126>
 800a08e:	6833      	ldr	r3, [r6, #0]
 800a090:	6825      	ldr	r5, [r4, #0]
 800a092:	1d18      	adds	r0, r3, #4
 800a094:	6961      	ldr	r1, [r4, #20]
 800a096:	6030      	str	r0, [r6, #0]
 800a098:	062e      	lsls	r6, r5, #24
 800a09a:	681b      	ldr	r3, [r3, #0]
 800a09c:	d501      	bpl.n	800a0a2 <_printf_i+0x1be>
 800a09e:	6019      	str	r1, [r3, #0]
 800a0a0:	e002      	b.n	800a0a8 <_printf_i+0x1c4>
 800a0a2:	0668      	lsls	r0, r5, #25
 800a0a4:	d5fb      	bpl.n	800a09e <_printf_i+0x1ba>
 800a0a6:	8019      	strh	r1, [r3, #0]
 800a0a8:	2300      	movs	r3, #0
 800a0aa:	4616      	mov	r6, r2
 800a0ac:	6123      	str	r3, [r4, #16]
 800a0ae:	e7bc      	b.n	800a02a <_printf_i+0x146>
 800a0b0:	6833      	ldr	r3, [r6, #0]
 800a0b2:	2100      	movs	r1, #0
 800a0b4:	1d1a      	adds	r2, r3, #4
 800a0b6:	6032      	str	r2, [r6, #0]
 800a0b8:	681e      	ldr	r6, [r3, #0]
 800a0ba:	6862      	ldr	r2, [r4, #4]
 800a0bc:	4630      	mov	r0, r6
 800a0be:	f000 f95f 	bl	800a380 <memchr>
 800a0c2:	b108      	cbz	r0, 800a0c8 <_printf_i+0x1e4>
 800a0c4:	1b80      	subs	r0, r0, r6
 800a0c6:	6060      	str	r0, [r4, #4]
 800a0c8:	6863      	ldr	r3, [r4, #4]
 800a0ca:	6123      	str	r3, [r4, #16]
 800a0cc:	2300      	movs	r3, #0
 800a0ce:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a0d2:	e7aa      	b.n	800a02a <_printf_i+0x146>
 800a0d4:	6923      	ldr	r3, [r4, #16]
 800a0d6:	4632      	mov	r2, r6
 800a0d8:	4649      	mov	r1, r9
 800a0da:	4640      	mov	r0, r8
 800a0dc:	47d0      	blx	sl
 800a0de:	3001      	adds	r0, #1
 800a0e0:	d0ad      	beq.n	800a03e <_printf_i+0x15a>
 800a0e2:	6823      	ldr	r3, [r4, #0]
 800a0e4:	079b      	lsls	r3, r3, #30
 800a0e6:	d413      	bmi.n	800a110 <_printf_i+0x22c>
 800a0e8:	68e0      	ldr	r0, [r4, #12]
 800a0ea:	9b03      	ldr	r3, [sp, #12]
 800a0ec:	4298      	cmp	r0, r3
 800a0ee:	bfb8      	it	lt
 800a0f0:	4618      	movlt	r0, r3
 800a0f2:	e7a6      	b.n	800a042 <_printf_i+0x15e>
 800a0f4:	2301      	movs	r3, #1
 800a0f6:	4632      	mov	r2, r6
 800a0f8:	4649      	mov	r1, r9
 800a0fa:	4640      	mov	r0, r8
 800a0fc:	47d0      	blx	sl
 800a0fe:	3001      	adds	r0, #1
 800a100:	d09d      	beq.n	800a03e <_printf_i+0x15a>
 800a102:	3501      	adds	r5, #1
 800a104:	68e3      	ldr	r3, [r4, #12]
 800a106:	9903      	ldr	r1, [sp, #12]
 800a108:	1a5b      	subs	r3, r3, r1
 800a10a:	42ab      	cmp	r3, r5
 800a10c:	dcf2      	bgt.n	800a0f4 <_printf_i+0x210>
 800a10e:	e7eb      	b.n	800a0e8 <_printf_i+0x204>
 800a110:	2500      	movs	r5, #0
 800a112:	f104 0619 	add.w	r6, r4, #25
 800a116:	e7f5      	b.n	800a104 <_printf_i+0x220>
 800a118:	0800dc6e 	.word	0x0800dc6e
 800a11c:	0800dc7f 	.word	0x0800dc7f

0800a120 <siprintf>:
 800a120:	b40e      	push	{r1, r2, r3}
 800a122:	b510      	push	{r4, lr}
 800a124:	b09d      	sub	sp, #116	@ 0x74
 800a126:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800a12a:	2400      	movs	r4, #0
 800a12c:	ab1f      	add	r3, sp, #124	@ 0x7c
 800a12e:	9002      	str	r0, [sp, #8]
 800a130:	9006      	str	r0, [sp, #24]
 800a132:	9107      	str	r1, [sp, #28]
 800a134:	9104      	str	r1, [sp, #16]
 800a136:	4809      	ldr	r0, [pc, #36]	@ (800a15c <siprintf+0x3c>)
 800a138:	4909      	ldr	r1, [pc, #36]	@ (800a160 <siprintf+0x40>)
 800a13a:	f853 2b04 	ldr.w	r2, [r3], #4
 800a13e:	9105      	str	r1, [sp, #20]
 800a140:	a902      	add	r1, sp, #8
 800a142:	6800      	ldr	r0, [r0, #0]
 800a144:	9301      	str	r3, [sp, #4]
 800a146:	941b      	str	r4, [sp, #108]	@ 0x6c
 800a148:	f000 ffe4 	bl	800b114 <_svfiprintf_r>
 800a14c:	9b02      	ldr	r3, [sp, #8]
 800a14e:	701c      	strb	r4, [r3, #0]
 800a150:	b01d      	add	sp, #116	@ 0x74
 800a152:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a156:	b003      	add	sp, #12
 800a158:	4770      	bx	lr
 800a15a:	bf00      	nop
 800a15c:	20000034 	.word	0x20000034
 800a160:	ffff0208 	.word	0xffff0208

0800a164 <std>:
 800a164:	2300      	movs	r3, #0
 800a166:	b510      	push	{r4, lr}
 800a168:	4604      	mov	r4, r0
 800a16a:	6083      	str	r3, [r0, #8]
 800a16c:	8181      	strh	r1, [r0, #12]
 800a16e:	4619      	mov	r1, r3
 800a170:	6643      	str	r3, [r0, #100]	@ 0x64
 800a172:	81c2      	strh	r2, [r0, #14]
 800a174:	2208      	movs	r2, #8
 800a176:	6183      	str	r3, [r0, #24]
 800a178:	e9c0 3300 	strd	r3, r3, [r0]
 800a17c:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a180:	305c      	adds	r0, #92	@ 0x5c
 800a182:	f000 f8c3 	bl	800a30c <memset>
 800a186:	4b0d      	ldr	r3, [pc, #52]	@ (800a1bc <std+0x58>)
 800a188:	6224      	str	r4, [r4, #32]
 800a18a:	6263      	str	r3, [r4, #36]	@ 0x24
 800a18c:	4b0c      	ldr	r3, [pc, #48]	@ (800a1c0 <std+0x5c>)
 800a18e:	62a3      	str	r3, [r4, #40]	@ 0x28
 800a190:	4b0c      	ldr	r3, [pc, #48]	@ (800a1c4 <std+0x60>)
 800a192:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800a194:	4b0c      	ldr	r3, [pc, #48]	@ (800a1c8 <std+0x64>)
 800a196:	6323      	str	r3, [r4, #48]	@ 0x30
 800a198:	4b0c      	ldr	r3, [pc, #48]	@ (800a1cc <std+0x68>)
 800a19a:	429c      	cmp	r4, r3
 800a19c:	d006      	beq.n	800a1ac <std+0x48>
 800a19e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800a1a2:	4294      	cmp	r4, r2
 800a1a4:	d002      	beq.n	800a1ac <std+0x48>
 800a1a6:	33d0      	adds	r3, #208	@ 0xd0
 800a1a8:	429c      	cmp	r4, r3
 800a1aa:	d105      	bne.n	800a1b8 <std+0x54>
 800a1ac:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800a1b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a1b4:	f000 b8dc 	b.w	800a370 <__retarget_lock_init_recursive>
 800a1b8:	bd10      	pop	{r4, pc}
 800a1ba:	bf00      	nop
 800a1bc:	0800bf59 	.word	0x0800bf59
 800a1c0:	0800bf7b 	.word	0x0800bf7b
 800a1c4:	0800bfb3 	.word	0x0800bfb3
 800a1c8:	0800bfd7 	.word	0x0800bfd7
 800a1cc:	2000040c 	.word	0x2000040c

0800a1d0 <stdio_exit_handler>:
 800a1d0:	4a02      	ldr	r2, [pc, #8]	@ (800a1dc <stdio_exit_handler+0xc>)
 800a1d2:	4903      	ldr	r1, [pc, #12]	@ (800a1e0 <stdio_exit_handler+0x10>)
 800a1d4:	4803      	ldr	r0, [pc, #12]	@ (800a1e4 <stdio_exit_handler+0x14>)
 800a1d6:	f000 b869 	b.w	800a2ac <_fwalk_sglue>
 800a1da:	bf00      	nop
 800a1dc:	20000028 	.word	0x20000028
 800a1e0:	0800b7ed 	.word	0x0800b7ed
 800a1e4:	20000038 	.word	0x20000038

0800a1e8 <cleanup_stdio>:
 800a1e8:	6841      	ldr	r1, [r0, #4]
 800a1ea:	4b0c      	ldr	r3, [pc, #48]	@ (800a21c <cleanup_stdio+0x34>)
 800a1ec:	4299      	cmp	r1, r3
 800a1ee:	b510      	push	{r4, lr}
 800a1f0:	4604      	mov	r4, r0
 800a1f2:	d001      	beq.n	800a1f8 <cleanup_stdio+0x10>
 800a1f4:	f001 fafa 	bl	800b7ec <_fflush_r>
 800a1f8:	68a1      	ldr	r1, [r4, #8]
 800a1fa:	4b09      	ldr	r3, [pc, #36]	@ (800a220 <cleanup_stdio+0x38>)
 800a1fc:	4299      	cmp	r1, r3
 800a1fe:	d002      	beq.n	800a206 <cleanup_stdio+0x1e>
 800a200:	4620      	mov	r0, r4
 800a202:	f001 faf3 	bl	800b7ec <_fflush_r>
 800a206:	68e1      	ldr	r1, [r4, #12]
 800a208:	4b06      	ldr	r3, [pc, #24]	@ (800a224 <cleanup_stdio+0x3c>)
 800a20a:	4299      	cmp	r1, r3
 800a20c:	d004      	beq.n	800a218 <cleanup_stdio+0x30>
 800a20e:	4620      	mov	r0, r4
 800a210:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a214:	f001 baea 	b.w	800b7ec <_fflush_r>
 800a218:	bd10      	pop	{r4, pc}
 800a21a:	bf00      	nop
 800a21c:	2000040c 	.word	0x2000040c
 800a220:	20000474 	.word	0x20000474
 800a224:	200004dc 	.word	0x200004dc

0800a228 <global_stdio_init.part.0>:
 800a228:	b510      	push	{r4, lr}
 800a22a:	4b0b      	ldr	r3, [pc, #44]	@ (800a258 <global_stdio_init.part.0+0x30>)
 800a22c:	2104      	movs	r1, #4
 800a22e:	4c0b      	ldr	r4, [pc, #44]	@ (800a25c <global_stdio_init.part.0+0x34>)
 800a230:	4a0b      	ldr	r2, [pc, #44]	@ (800a260 <global_stdio_init.part.0+0x38>)
 800a232:	4620      	mov	r0, r4
 800a234:	601a      	str	r2, [r3, #0]
 800a236:	2200      	movs	r2, #0
 800a238:	f7ff ff94 	bl	800a164 <std>
 800a23c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800a240:	2201      	movs	r2, #1
 800a242:	2109      	movs	r1, #9
 800a244:	f7ff ff8e 	bl	800a164 <std>
 800a248:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800a24c:	2202      	movs	r2, #2
 800a24e:	2112      	movs	r1, #18
 800a250:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a254:	f7ff bf86 	b.w	800a164 <std>
 800a258:	20000544 	.word	0x20000544
 800a25c:	2000040c 	.word	0x2000040c
 800a260:	0800a1d1 	.word	0x0800a1d1

0800a264 <__sfp_lock_acquire>:
 800a264:	4801      	ldr	r0, [pc, #4]	@ (800a26c <__sfp_lock_acquire+0x8>)
 800a266:	f000 b884 	b.w	800a372 <__retarget_lock_acquire_recursive>
 800a26a:	bf00      	nop
 800a26c:	20000549 	.word	0x20000549

0800a270 <__sfp_lock_release>:
 800a270:	4801      	ldr	r0, [pc, #4]	@ (800a278 <__sfp_lock_release+0x8>)
 800a272:	f000 b87f 	b.w	800a374 <__retarget_lock_release_recursive>
 800a276:	bf00      	nop
 800a278:	20000549 	.word	0x20000549

0800a27c <__sinit>:
 800a27c:	b510      	push	{r4, lr}
 800a27e:	4604      	mov	r4, r0
 800a280:	f7ff fff0 	bl	800a264 <__sfp_lock_acquire>
 800a284:	6a23      	ldr	r3, [r4, #32]
 800a286:	b11b      	cbz	r3, 800a290 <__sinit+0x14>
 800a288:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a28c:	f7ff bff0 	b.w	800a270 <__sfp_lock_release>
 800a290:	4b04      	ldr	r3, [pc, #16]	@ (800a2a4 <__sinit+0x28>)
 800a292:	6223      	str	r3, [r4, #32]
 800a294:	4b04      	ldr	r3, [pc, #16]	@ (800a2a8 <__sinit+0x2c>)
 800a296:	681b      	ldr	r3, [r3, #0]
 800a298:	2b00      	cmp	r3, #0
 800a29a:	d1f5      	bne.n	800a288 <__sinit+0xc>
 800a29c:	f7ff ffc4 	bl	800a228 <global_stdio_init.part.0>
 800a2a0:	e7f2      	b.n	800a288 <__sinit+0xc>
 800a2a2:	bf00      	nop
 800a2a4:	0800a1e9 	.word	0x0800a1e9
 800a2a8:	20000544 	.word	0x20000544

0800a2ac <_fwalk_sglue>:
 800a2ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a2b0:	4607      	mov	r7, r0
 800a2b2:	4688      	mov	r8, r1
 800a2b4:	4614      	mov	r4, r2
 800a2b6:	2600      	movs	r6, #0
 800a2b8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a2bc:	f1b9 0901 	subs.w	r9, r9, #1
 800a2c0:	d505      	bpl.n	800a2ce <_fwalk_sglue+0x22>
 800a2c2:	6824      	ldr	r4, [r4, #0]
 800a2c4:	2c00      	cmp	r4, #0
 800a2c6:	d1f7      	bne.n	800a2b8 <_fwalk_sglue+0xc>
 800a2c8:	4630      	mov	r0, r6
 800a2ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a2ce:	89ab      	ldrh	r3, [r5, #12]
 800a2d0:	2b01      	cmp	r3, #1
 800a2d2:	d907      	bls.n	800a2e4 <_fwalk_sglue+0x38>
 800a2d4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a2d8:	3301      	adds	r3, #1
 800a2da:	d003      	beq.n	800a2e4 <_fwalk_sglue+0x38>
 800a2dc:	4629      	mov	r1, r5
 800a2de:	4638      	mov	r0, r7
 800a2e0:	47c0      	blx	r8
 800a2e2:	4306      	orrs	r6, r0
 800a2e4:	3568      	adds	r5, #104	@ 0x68
 800a2e6:	e7e9      	b.n	800a2bc <_fwalk_sglue+0x10>

0800a2e8 <iprintf>:
 800a2e8:	b40f      	push	{r0, r1, r2, r3}
 800a2ea:	b507      	push	{r0, r1, r2, lr}
 800a2ec:	4906      	ldr	r1, [pc, #24]	@ (800a308 <iprintf+0x20>)
 800a2ee:	ab04      	add	r3, sp, #16
 800a2f0:	6808      	ldr	r0, [r1, #0]
 800a2f2:	f853 2b04 	ldr.w	r2, [r3], #4
 800a2f6:	6881      	ldr	r1, [r0, #8]
 800a2f8:	9301      	str	r3, [sp, #4]
 800a2fa:	f001 f831 	bl	800b360 <_vfiprintf_r>
 800a2fe:	b003      	add	sp, #12
 800a300:	f85d eb04 	ldr.w	lr, [sp], #4
 800a304:	b004      	add	sp, #16
 800a306:	4770      	bx	lr
 800a308:	20000034 	.word	0x20000034

0800a30c <memset>:
 800a30c:	4402      	add	r2, r0
 800a30e:	4603      	mov	r3, r0
 800a310:	4293      	cmp	r3, r2
 800a312:	d100      	bne.n	800a316 <memset+0xa>
 800a314:	4770      	bx	lr
 800a316:	f803 1b01 	strb.w	r1, [r3], #1
 800a31a:	e7f9      	b.n	800a310 <memset+0x4>

0800a31c <__errno>:
 800a31c:	4b01      	ldr	r3, [pc, #4]	@ (800a324 <__errno+0x8>)
 800a31e:	6818      	ldr	r0, [r3, #0]
 800a320:	4770      	bx	lr
 800a322:	bf00      	nop
 800a324:	20000034 	.word	0x20000034

0800a328 <__libc_init_array>:
 800a328:	b570      	push	{r4, r5, r6, lr}
 800a32a:	4d0d      	ldr	r5, [pc, #52]	@ (800a360 <__libc_init_array+0x38>)
 800a32c:	2600      	movs	r6, #0
 800a32e:	4c0d      	ldr	r4, [pc, #52]	@ (800a364 <__libc_init_array+0x3c>)
 800a330:	1b64      	subs	r4, r4, r5
 800a332:	10a4      	asrs	r4, r4, #2
 800a334:	42a6      	cmp	r6, r4
 800a336:	d109      	bne.n	800a34c <__libc_init_array+0x24>
 800a338:	4d0b      	ldr	r5, [pc, #44]	@ (800a368 <__libc_init_array+0x40>)
 800a33a:	2600      	movs	r6, #0
 800a33c:	4c0b      	ldr	r4, [pc, #44]	@ (800a36c <__libc_init_array+0x44>)
 800a33e:	f002 f913 	bl	800c568 <_init>
 800a342:	1b64      	subs	r4, r4, r5
 800a344:	10a4      	asrs	r4, r4, #2
 800a346:	42a6      	cmp	r6, r4
 800a348:	d105      	bne.n	800a356 <__libc_init_array+0x2e>
 800a34a:	bd70      	pop	{r4, r5, r6, pc}
 800a34c:	f855 3b04 	ldr.w	r3, [r5], #4
 800a350:	3601      	adds	r6, #1
 800a352:	4798      	blx	r3
 800a354:	e7ee      	b.n	800a334 <__libc_init_array+0xc>
 800a356:	f855 3b04 	ldr.w	r3, [r5], #4
 800a35a:	3601      	adds	r6, #1
 800a35c:	4798      	blx	r3
 800a35e:	e7f2      	b.n	800a346 <__libc_init_array+0x1e>
 800a360:	0800dfdc 	.word	0x0800dfdc
 800a364:	0800dfdc 	.word	0x0800dfdc
 800a368:	0800dfdc 	.word	0x0800dfdc
 800a36c:	0800dfe0 	.word	0x0800dfe0

0800a370 <__retarget_lock_init_recursive>:
 800a370:	4770      	bx	lr

0800a372 <__retarget_lock_acquire_recursive>:
 800a372:	4770      	bx	lr

0800a374 <__retarget_lock_release_recursive>:
 800a374:	4770      	bx	lr
	...

0800a378 <_localeconv_r>:
 800a378:	4800      	ldr	r0, [pc, #0]	@ (800a37c <_localeconv_r+0x4>)
 800a37a:	4770      	bx	lr
 800a37c:	20000174 	.word	0x20000174

0800a380 <memchr>:
 800a380:	b2c9      	uxtb	r1, r1
 800a382:	4603      	mov	r3, r0
 800a384:	4402      	add	r2, r0
 800a386:	b510      	push	{r4, lr}
 800a388:	4293      	cmp	r3, r2
 800a38a:	4618      	mov	r0, r3
 800a38c:	d101      	bne.n	800a392 <memchr+0x12>
 800a38e:	2000      	movs	r0, #0
 800a390:	e003      	b.n	800a39a <memchr+0x1a>
 800a392:	7804      	ldrb	r4, [r0, #0]
 800a394:	3301      	adds	r3, #1
 800a396:	428c      	cmp	r4, r1
 800a398:	d1f6      	bne.n	800a388 <memchr+0x8>
 800a39a:	bd10      	pop	{r4, pc}

0800a39c <quorem>:
 800a39c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a3a0:	6903      	ldr	r3, [r0, #16]
 800a3a2:	4607      	mov	r7, r0
 800a3a4:	690c      	ldr	r4, [r1, #16]
 800a3a6:	42a3      	cmp	r3, r4
 800a3a8:	f2c0 8083 	blt.w	800a4b2 <quorem+0x116>
 800a3ac:	3c01      	subs	r4, #1
 800a3ae:	f100 0514 	add.w	r5, r0, #20
 800a3b2:	f101 0814 	add.w	r8, r1, #20
 800a3b6:	00a3      	lsls	r3, r4, #2
 800a3b8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a3bc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a3c0:	9300      	str	r3, [sp, #0]
 800a3c2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a3c6:	9301      	str	r3, [sp, #4]
 800a3c8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a3cc:	3301      	adds	r3, #1
 800a3ce:	429a      	cmp	r2, r3
 800a3d0:	fbb2 f6f3 	udiv	r6, r2, r3
 800a3d4:	d331      	bcc.n	800a43a <quorem+0x9e>
 800a3d6:	f04f 0a00 	mov.w	sl, #0
 800a3da:	46c4      	mov	ip, r8
 800a3dc:	46ae      	mov	lr, r5
 800a3de:	46d3      	mov	fp, sl
 800a3e0:	f85c 3b04 	ldr.w	r3, [ip], #4
 800a3e4:	b298      	uxth	r0, r3
 800a3e6:	45e1      	cmp	r9, ip
 800a3e8:	ea4f 4313 	mov.w	r3, r3, lsr #16
 800a3ec:	fb06 a000 	mla	r0, r6, r0, sl
 800a3f0:	ea4f 4210 	mov.w	r2, r0, lsr #16
 800a3f4:	b280      	uxth	r0, r0
 800a3f6:	fb06 2303 	mla	r3, r6, r3, r2
 800a3fa:	f8de 2000 	ldr.w	r2, [lr]
 800a3fe:	b292      	uxth	r2, r2
 800a400:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a404:	eba2 0200 	sub.w	r2, r2, r0
 800a408:	b29b      	uxth	r3, r3
 800a40a:	f8de 0000 	ldr.w	r0, [lr]
 800a40e:	445a      	add	r2, fp
 800a410:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800a414:	b292      	uxth	r2, r2
 800a416:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800a41a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800a41e:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800a422:	f84e 2b04 	str.w	r2, [lr], #4
 800a426:	d2db      	bcs.n	800a3e0 <quorem+0x44>
 800a428:	9b00      	ldr	r3, [sp, #0]
 800a42a:	58eb      	ldr	r3, [r5, r3]
 800a42c:	b92b      	cbnz	r3, 800a43a <quorem+0x9e>
 800a42e:	9b01      	ldr	r3, [sp, #4]
 800a430:	3b04      	subs	r3, #4
 800a432:	429d      	cmp	r5, r3
 800a434:	461a      	mov	r2, r3
 800a436:	d330      	bcc.n	800a49a <quorem+0xfe>
 800a438:	613c      	str	r4, [r7, #16]
 800a43a:	4638      	mov	r0, r7
 800a43c:	f001 fc80 	bl	800bd40 <__mcmp>
 800a440:	2800      	cmp	r0, #0
 800a442:	db26      	blt.n	800a492 <quorem+0xf6>
 800a444:	4629      	mov	r1, r5
 800a446:	2000      	movs	r0, #0
 800a448:	f858 2b04 	ldr.w	r2, [r8], #4
 800a44c:	f8d1 c000 	ldr.w	ip, [r1]
 800a450:	fa1f fe82 	uxth.w	lr, r2
 800a454:	45c1      	cmp	r9, r8
 800a456:	fa1f f38c 	uxth.w	r3, ip
 800a45a:	ea4f 4212 	mov.w	r2, r2, lsr #16
 800a45e:	eba3 030e 	sub.w	r3, r3, lr
 800a462:	4403      	add	r3, r0
 800a464:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800a468:	b29b      	uxth	r3, r3
 800a46a:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800a46e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a472:	ea4f 4022 	mov.w	r0, r2, asr #16
 800a476:	f841 3b04 	str.w	r3, [r1], #4
 800a47a:	d2e5      	bcs.n	800a448 <quorem+0xac>
 800a47c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a480:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a484:	b922      	cbnz	r2, 800a490 <quorem+0xf4>
 800a486:	3b04      	subs	r3, #4
 800a488:	429d      	cmp	r5, r3
 800a48a:	461a      	mov	r2, r3
 800a48c:	d30b      	bcc.n	800a4a6 <quorem+0x10a>
 800a48e:	613c      	str	r4, [r7, #16]
 800a490:	3601      	adds	r6, #1
 800a492:	4630      	mov	r0, r6
 800a494:	b003      	add	sp, #12
 800a496:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a49a:	6812      	ldr	r2, [r2, #0]
 800a49c:	3b04      	subs	r3, #4
 800a49e:	2a00      	cmp	r2, #0
 800a4a0:	d1ca      	bne.n	800a438 <quorem+0x9c>
 800a4a2:	3c01      	subs	r4, #1
 800a4a4:	e7c5      	b.n	800a432 <quorem+0x96>
 800a4a6:	6812      	ldr	r2, [r2, #0]
 800a4a8:	3b04      	subs	r3, #4
 800a4aa:	2a00      	cmp	r2, #0
 800a4ac:	d1ef      	bne.n	800a48e <quorem+0xf2>
 800a4ae:	3c01      	subs	r4, #1
 800a4b0:	e7ea      	b.n	800a488 <quorem+0xec>
 800a4b2:	2000      	movs	r0, #0
 800a4b4:	e7ee      	b.n	800a494 <quorem+0xf8>
	...

0800a4b8 <_dtoa_r>:
 800a4b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a4bc:	69c7      	ldr	r7, [r0, #28]
 800a4be:	b097      	sub	sp, #92	@ 0x5c
 800a4c0:	4681      	mov	r9, r0
 800a4c2:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800a4c4:	9107      	str	r1, [sp, #28]
 800a4c6:	920c      	str	r2, [sp, #48]	@ 0x30
 800a4c8:	9311      	str	r3, [sp, #68]	@ 0x44
 800a4ca:	ec55 4b10 	vmov	r4, r5, d0
 800a4ce:	ed8d 0b04 	vstr	d0, [sp, #16]
 800a4d2:	b97f      	cbnz	r7, 800a4f4 <_dtoa_r+0x3c>
 800a4d4:	2010      	movs	r0, #16
 800a4d6:	f001 f85b 	bl	800b590 <malloc>
 800a4da:	4602      	mov	r2, r0
 800a4dc:	f8c9 001c 	str.w	r0, [r9, #28]
 800a4e0:	b920      	cbnz	r0, 800a4ec <_dtoa_r+0x34>
 800a4e2:	4ba9      	ldr	r3, [pc, #676]	@ (800a788 <_dtoa_r+0x2d0>)
 800a4e4:	21ef      	movs	r1, #239	@ 0xef
 800a4e6:	48a9      	ldr	r0, [pc, #676]	@ (800a78c <_dtoa_r+0x2d4>)
 800a4e8:	f001 ff3e 	bl	800c368 <__assert_func>
 800a4ec:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800a4f0:	6007      	str	r7, [r0, #0]
 800a4f2:	60c7      	str	r7, [r0, #12]
 800a4f4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800a4f8:	6819      	ldr	r1, [r3, #0]
 800a4fa:	b159      	cbz	r1, 800a514 <_dtoa_r+0x5c>
 800a4fc:	685a      	ldr	r2, [r3, #4]
 800a4fe:	2301      	movs	r3, #1
 800a500:	4648      	mov	r0, r9
 800a502:	4093      	lsls	r3, r2
 800a504:	604a      	str	r2, [r1, #4]
 800a506:	608b      	str	r3, [r1, #8]
 800a508:	f001 f9e4 	bl	800b8d4 <_Bfree>
 800a50c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800a510:	2200      	movs	r2, #0
 800a512:	601a      	str	r2, [r3, #0]
 800a514:	1e2b      	subs	r3, r5, #0
 800a516:	bfb7      	itett	lt
 800a518:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800a51c:	2300      	movge	r3, #0
 800a51e:	2201      	movlt	r2, #1
 800a520:	9305      	strlt	r3, [sp, #20]
 800a522:	bfa8      	it	ge
 800a524:	6033      	strge	r3, [r6, #0]
 800a526:	9f05      	ldr	r7, [sp, #20]
 800a528:	4b99      	ldr	r3, [pc, #612]	@ (800a790 <_dtoa_r+0x2d8>)
 800a52a:	bfb8      	it	lt
 800a52c:	6032      	strlt	r2, [r6, #0]
 800a52e:	43bb      	bics	r3, r7
 800a530:	d112      	bne.n	800a558 <_dtoa_r+0xa0>
 800a532:	f242 730f 	movw	r3, #9999	@ 0x270f
 800a536:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800a538:	6013      	str	r3, [r2, #0]
 800a53a:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800a53e:	4323      	orrs	r3, r4
 800a540:	f000 855a 	beq.w	800aff8 <_dtoa_r+0xb40>
 800a544:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800a546:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 800a7a4 <_dtoa_r+0x2ec>
 800a54a:	2b00      	cmp	r3, #0
 800a54c:	f000 855c 	beq.w	800b008 <_dtoa_r+0xb50>
 800a550:	f10a 0303 	add.w	r3, sl, #3
 800a554:	f000 bd56 	b.w	800b004 <_dtoa_r+0xb4c>
 800a558:	ed9d 7b04 	vldr	d7, [sp, #16]
 800a55c:	2200      	movs	r2, #0
 800a55e:	2300      	movs	r3, #0
 800a560:	ec51 0b17 	vmov	r0, r1, d7
 800a564:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800a568:	f7f6 fab2 	bl	8000ad0 <__aeabi_dcmpeq>
 800a56c:	4680      	mov	r8, r0
 800a56e:	b158      	cbz	r0, 800a588 <_dtoa_r+0xd0>
 800a570:	2301      	movs	r3, #1
 800a572:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800a574:	6013      	str	r3, [r2, #0]
 800a576:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800a578:	b113      	cbz	r3, 800a580 <_dtoa_r+0xc8>
 800a57a:	4b86      	ldr	r3, [pc, #536]	@ (800a794 <_dtoa_r+0x2dc>)
 800a57c:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800a57e:	6013      	str	r3, [r2, #0]
 800a580:	f8df a224 	ldr.w	sl, [pc, #548]	@ 800a7a8 <_dtoa_r+0x2f0>
 800a584:	f000 bd40 	b.w	800b008 <_dtoa_r+0xb50>
 800a588:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800a58c:	aa14      	add	r2, sp, #80	@ 0x50
 800a58e:	a915      	add	r1, sp, #84	@ 0x54
 800a590:	4648      	mov	r0, r9
 800a592:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 800a596:	f001 fc87 	bl	800bea8 <__d2b>
 800a59a:	9002      	str	r0, [sp, #8]
 800a59c:	2e00      	cmp	r6, #0
 800a59e:	d076      	beq.n	800a68e <_dtoa_r+0x1d6>
 800a5a0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a5a2:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800a5a6:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 800a5aa:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a5ae:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800a5b2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800a5b6:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800a5ba:	4619      	mov	r1, r3
 800a5bc:	2200      	movs	r2, #0
 800a5be:	4b76      	ldr	r3, [pc, #472]	@ (800a798 <_dtoa_r+0x2e0>)
 800a5c0:	f7f5 fe66 	bl	8000290 <__aeabi_dsub>
 800a5c4:	a36a      	add	r3, pc, #424	@ (adr r3, 800a770 <_dtoa_r+0x2b8>)
 800a5c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5ca:	f7f6 f819 	bl	8000600 <__aeabi_dmul>
 800a5ce:	a36a      	add	r3, pc, #424	@ (adr r3, 800a778 <_dtoa_r+0x2c0>)
 800a5d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5d4:	f7f5 fe5e 	bl	8000294 <__adddf3>
 800a5d8:	4604      	mov	r4, r0
 800a5da:	460d      	mov	r5, r1
 800a5dc:	4630      	mov	r0, r6
 800a5de:	f7f5 ffa5 	bl	800052c <__aeabi_i2d>
 800a5e2:	a367      	add	r3, pc, #412	@ (adr r3, 800a780 <_dtoa_r+0x2c8>)
 800a5e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5e8:	f7f6 f80a 	bl	8000600 <__aeabi_dmul>
 800a5ec:	4602      	mov	r2, r0
 800a5ee:	460b      	mov	r3, r1
 800a5f0:	4620      	mov	r0, r4
 800a5f2:	4629      	mov	r1, r5
 800a5f4:	f7f5 fe4e 	bl	8000294 <__adddf3>
 800a5f8:	4604      	mov	r4, r0
 800a5fa:	460d      	mov	r5, r1
 800a5fc:	f7f6 fab0 	bl	8000b60 <__aeabi_d2iz>
 800a600:	2200      	movs	r2, #0
 800a602:	4607      	mov	r7, r0
 800a604:	2300      	movs	r3, #0
 800a606:	4620      	mov	r0, r4
 800a608:	4629      	mov	r1, r5
 800a60a:	f7f6 fa6b 	bl	8000ae4 <__aeabi_dcmplt>
 800a60e:	b140      	cbz	r0, 800a622 <_dtoa_r+0x16a>
 800a610:	4638      	mov	r0, r7
 800a612:	f7f5 ff8b 	bl	800052c <__aeabi_i2d>
 800a616:	4622      	mov	r2, r4
 800a618:	462b      	mov	r3, r5
 800a61a:	f7f6 fa59 	bl	8000ad0 <__aeabi_dcmpeq>
 800a61e:	b900      	cbnz	r0, 800a622 <_dtoa_r+0x16a>
 800a620:	3f01      	subs	r7, #1
 800a622:	2f16      	cmp	r7, #22
 800a624:	d852      	bhi.n	800a6cc <_dtoa_r+0x214>
 800a626:	4b5d      	ldr	r3, [pc, #372]	@ (800a79c <_dtoa_r+0x2e4>)
 800a628:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800a62c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800a630:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a634:	f7f6 fa56 	bl	8000ae4 <__aeabi_dcmplt>
 800a638:	2800      	cmp	r0, #0
 800a63a:	d049      	beq.n	800a6d0 <_dtoa_r+0x218>
 800a63c:	3f01      	subs	r7, #1
 800a63e:	2300      	movs	r3, #0
 800a640:	9310      	str	r3, [sp, #64]	@ 0x40
 800a642:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800a644:	1b9b      	subs	r3, r3, r6
 800a646:	1e5a      	subs	r2, r3, #1
 800a648:	bf4c      	ite	mi
 800a64a:	f1c3 0301 	rsbmi	r3, r3, #1
 800a64e:	2300      	movpl	r3, #0
 800a650:	9206      	str	r2, [sp, #24]
 800a652:	bf45      	ittet	mi
 800a654:	9300      	strmi	r3, [sp, #0]
 800a656:	2300      	movmi	r3, #0
 800a658:	9300      	strpl	r3, [sp, #0]
 800a65a:	9306      	strmi	r3, [sp, #24]
 800a65c:	2f00      	cmp	r7, #0
 800a65e:	db39      	blt.n	800a6d4 <_dtoa_r+0x21c>
 800a660:	9b06      	ldr	r3, [sp, #24]
 800a662:	970d      	str	r7, [sp, #52]	@ 0x34
 800a664:	443b      	add	r3, r7
 800a666:	9306      	str	r3, [sp, #24]
 800a668:	2300      	movs	r3, #0
 800a66a:	9308      	str	r3, [sp, #32]
 800a66c:	9b07      	ldr	r3, [sp, #28]
 800a66e:	2b09      	cmp	r3, #9
 800a670:	d863      	bhi.n	800a73a <_dtoa_r+0x282>
 800a672:	2b05      	cmp	r3, #5
 800a674:	bfc5      	ittet	gt
 800a676:	3b04      	subgt	r3, #4
 800a678:	2400      	movgt	r4, #0
 800a67a:	2401      	movle	r4, #1
 800a67c:	9307      	strgt	r3, [sp, #28]
 800a67e:	9b07      	ldr	r3, [sp, #28]
 800a680:	3b02      	subs	r3, #2
 800a682:	2b03      	cmp	r3, #3
 800a684:	d865      	bhi.n	800a752 <_dtoa_r+0x29a>
 800a686:	e8df f003 	tbb	[pc, r3]
 800a68a:	5654      	.short	0x5654
 800a68c:	2d39      	.short	0x2d39
 800a68e:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800a692:	441e      	add	r6, r3
 800a694:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800a698:	2b20      	cmp	r3, #32
 800a69a:	bfc9      	itett	gt
 800a69c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800a6a0:	f1c3 0320 	rsble	r3, r3, #32
 800a6a4:	409f      	lslgt	r7, r3
 800a6a6:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800a6aa:	bfd8      	it	le
 800a6ac:	fa04 f003 	lslle.w	r0, r4, r3
 800a6b0:	f106 36ff 	add.w	r6, r6, #4294967295	@ 0xffffffff
 800a6b4:	bfc4      	itt	gt
 800a6b6:	fa24 f303 	lsrgt.w	r3, r4, r3
 800a6ba:	ea47 0003 	orrgt.w	r0, r7, r3
 800a6be:	f7f5 ff25 	bl	800050c <__aeabi_ui2d>
 800a6c2:	2201      	movs	r2, #1
 800a6c4:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800a6c8:	9212      	str	r2, [sp, #72]	@ 0x48
 800a6ca:	e776      	b.n	800a5ba <_dtoa_r+0x102>
 800a6cc:	2301      	movs	r3, #1
 800a6ce:	e7b7      	b.n	800a640 <_dtoa_r+0x188>
 800a6d0:	9010      	str	r0, [sp, #64]	@ 0x40
 800a6d2:	e7b6      	b.n	800a642 <_dtoa_r+0x18a>
 800a6d4:	9b00      	ldr	r3, [sp, #0]
 800a6d6:	1bdb      	subs	r3, r3, r7
 800a6d8:	9300      	str	r3, [sp, #0]
 800a6da:	427b      	negs	r3, r7
 800a6dc:	9308      	str	r3, [sp, #32]
 800a6de:	2300      	movs	r3, #0
 800a6e0:	930d      	str	r3, [sp, #52]	@ 0x34
 800a6e2:	e7c3      	b.n	800a66c <_dtoa_r+0x1b4>
 800a6e4:	2301      	movs	r3, #1
 800a6e6:	9309      	str	r3, [sp, #36]	@ 0x24
 800a6e8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a6ea:	eb07 0b03 	add.w	fp, r7, r3
 800a6ee:	f10b 0301 	add.w	r3, fp, #1
 800a6f2:	2b01      	cmp	r3, #1
 800a6f4:	9303      	str	r3, [sp, #12]
 800a6f6:	bfb8      	it	lt
 800a6f8:	2301      	movlt	r3, #1
 800a6fa:	e006      	b.n	800a70a <_dtoa_r+0x252>
 800a6fc:	2301      	movs	r3, #1
 800a6fe:	9309      	str	r3, [sp, #36]	@ 0x24
 800a700:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a702:	2b00      	cmp	r3, #0
 800a704:	dd28      	ble.n	800a758 <_dtoa_r+0x2a0>
 800a706:	469b      	mov	fp, r3
 800a708:	9303      	str	r3, [sp, #12]
 800a70a:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800a70e:	2100      	movs	r1, #0
 800a710:	2204      	movs	r2, #4
 800a712:	f102 0514 	add.w	r5, r2, #20
 800a716:	429d      	cmp	r5, r3
 800a718:	d926      	bls.n	800a768 <_dtoa_r+0x2b0>
 800a71a:	6041      	str	r1, [r0, #4]
 800a71c:	4648      	mov	r0, r9
 800a71e:	f001 f899 	bl	800b854 <_Balloc>
 800a722:	4682      	mov	sl, r0
 800a724:	2800      	cmp	r0, #0
 800a726:	d141      	bne.n	800a7ac <_dtoa_r+0x2f4>
 800a728:	4b1d      	ldr	r3, [pc, #116]	@ (800a7a0 <_dtoa_r+0x2e8>)
 800a72a:	4602      	mov	r2, r0
 800a72c:	f240 11af 	movw	r1, #431	@ 0x1af
 800a730:	e6d9      	b.n	800a4e6 <_dtoa_r+0x2e>
 800a732:	2300      	movs	r3, #0
 800a734:	e7e3      	b.n	800a6fe <_dtoa_r+0x246>
 800a736:	2300      	movs	r3, #0
 800a738:	e7d5      	b.n	800a6e6 <_dtoa_r+0x22e>
 800a73a:	2401      	movs	r4, #1
 800a73c:	2300      	movs	r3, #0
 800a73e:	9409      	str	r4, [sp, #36]	@ 0x24
 800a740:	9307      	str	r3, [sp, #28]
 800a742:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
 800a746:	2200      	movs	r2, #0
 800a748:	2312      	movs	r3, #18
 800a74a:	f8cd b00c 	str.w	fp, [sp, #12]
 800a74e:	920c      	str	r2, [sp, #48]	@ 0x30
 800a750:	e7db      	b.n	800a70a <_dtoa_r+0x252>
 800a752:	2301      	movs	r3, #1
 800a754:	9309      	str	r3, [sp, #36]	@ 0x24
 800a756:	e7f4      	b.n	800a742 <_dtoa_r+0x28a>
 800a758:	f04f 0b01 	mov.w	fp, #1
 800a75c:	465b      	mov	r3, fp
 800a75e:	f8cd b00c 	str.w	fp, [sp, #12]
 800a762:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 800a766:	e7d0      	b.n	800a70a <_dtoa_r+0x252>
 800a768:	3101      	adds	r1, #1
 800a76a:	0052      	lsls	r2, r2, #1
 800a76c:	e7d1      	b.n	800a712 <_dtoa_r+0x25a>
 800a76e:	bf00      	nop
 800a770:	636f4361 	.word	0x636f4361
 800a774:	3fd287a7 	.word	0x3fd287a7
 800a778:	8b60c8b3 	.word	0x8b60c8b3
 800a77c:	3fc68a28 	.word	0x3fc68a28
 800a780:	509f79fb 	.word	0x509f79fb
 800a784:	3fd34413 	.word	0x3fd34413
 800a788:	0800dc9d 	.word	0x0800dc9d
 800a78c:	0800dcb4 	.word	0x0800dcb4
 800a790:	7ff00000 	.word	0x7ff00000
 800a794:	0800dc6d 	.word	0x0800dc6d
 800a798:	3ff80000 	.word	0x3ff80000
 800a79c:	0800de08 	.word	0x0800de08
 800a7a0:	0800dd0c 	.word	0x0800dd0c
 800a7a4:	0800dc99 	.word	0x0800dc99
 800a7a8:	0800dc6c 	.word	0x0800dc6c
 800a7ac:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800a7b0:	6018      	str	r0, [r3, #0]
 800a7b2:	9b03      	ldr	r3, [sp, #12]
 800a7b4:	2b0e      	cmp	r3, #14
 800a7b6:	f200 80a1 	bhi.w	800a8fc <_dtoa_r+0x444>
 800a7ba:	2c00      	cmp	r4, #0
 800a7bc:	f000 809e 	beq.w	800a8fc <_dtoa_r+0x444>
 800a7c0:	2f00      	cmp	r7, #0
 800a7c2:	dd33      	ble.n	800a82c <_dtoa_r+0x374>
 800a7c4:	f007 020f 	and.w	r2, r7, #15
 800a7c8:	4b9b      	ldr	r3, [pc, #620]	@ (800aa38 <_dtoa_r+0x580>)
 800a7ca:	05f8      	lsls	r0, r7, #23
 800a7cc:	ea4f 1427 	mov.w	r4, r7, asr #4
 800a7d0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a7d4:	ed93 7b00 	vldr	d7, [r3]
 800a7d8:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 800a7dc:	d516      	bpl.n	800a80c <_dtoa_r+0x354>
 800a7de:	4b97      	ldr	r3, [pc, #604]	@ (800aa3c <_dtoa_r+0x584>)
 800a7e0:	f004 040f 	and.w	r4, r4, #15
 800a7e4:	2603      	movs	r6, #3
 800a7e6:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a7ea:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800a7ee:	f7f6 f831 	bl	8000854 <__aeabi_ddiv>
 800a7f2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a7f6:	4d91      	ldr	r5, [pc, #580]	@ (800aa3c <_dtoa_r+0x584>)
 800a7f8:	b954      	cbnz	r4, 800a810 <_dtoa_r+0x358>
 800a7fa:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800a7fe:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a802:	f7f6 f827 	bl	8000854 <__aeabi_ddiv>
 800a806:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a80a:	e028      	b.n	800a85e <_dtoa_r+0x3a6>
 800a80c:	2602      	movs	r6, #2
 800a80e:	e7f2      	b.n	800a7f6 <_dtoa_r+0x33e>
 800a810:	07e1      	lsls	r1, r4, #31
 800a812:	d508      	bpl.n	800a826 <_dtoa_r+0x36e>
 800a814:	3601      	adds	r6, #1
 800a816:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800a81a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a81e:	f7f5 feef 	bl	8000600 <__aeabi_dmul>
 800a822:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800a826:	1064      	asrs	r4, r4, #1
 800a828:	3508      	adds	r5, #8
 800a82a:	e7e5      	b.n	800a7f8 <_dtoa_r+0x340>
 800a82c:	f000 80af 	beq.w	800a98e <_dtoa_r+0x4d6>
 800a830:	427c      	negs	r4, r7
 800a832:	4b81      	ldr	r3, [pc, #516]	@ (800aa38 <_dtoa_r+0x580>)
 800a834:	4d81      	ldr	r5, [pc, #516]	@ (800aa3c <_dtoa_r+0x584>)
 800a836:	2602      	movs	r6, #2
 800a838:	f004 020f 	and.w	r2, r4, #15
 800a83c:	1124      	asrs	r4, r4, #4
 800a83e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a842:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800a846:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a84a:	f7f5 fed9 	bl	8000600 <__aeabi_dmul>
 800a84e:	2300      	movs	r3, #0
 800a850:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a854:	2c00      	cmp	r4, #0
 800a856:	f040 808f 	bne.w	800a978 <_dtoa_r+0x4c0>
 800a85a:	2b00      	cmp	r3, #0
 800a85c:	d1d3      	bne.n	800a806 <_dtoa_r+0x34e>
 800a85e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800a860:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800a864:	2b00      	cmp	r3, #0
 800a866:	f000 8094 	beq.w	800a992 <_dtoa_r+0x4da>
 800a86a:	2200      	movs	r2, #0
 800a86c:	4b74      	ldr	r3, [pc, #464]	@ (800aa40 <_dtoa_r+0x588>)
 800a86e:	4620      	mov	r0, r4
 800a870:	4629      	mov	r1, r5
 800a872:	f7f6 f937 	bl	8000ae4 <__aeabi_dcmplt>
 800a876:	2800      	cmp	r0, #0
 800a878:	f000 808b 	beq.w	800a992 <_dtoa_r+0x4da>
 800a87c:	9b03      	ldr	r3, [sp, #12]
 800a87e:	2b00      	cmp	r3, #0
 800a880:	f000 8087 	beq.w	800a992 <_dtoa_r+0x4da>
 800a884:	f1bb 0f00 	cmp.w	fp, #0
 800a888:	dd34      	ble.n	800a8f4 <_dtoa_r+0x43c>
 800a88a:	4620      	mov	r0, r4
 800a88c:	f107 38ff 	add.w	r8, r7, #4294967295	@ 0xffffffff
 800a890:	3601      	adds	r6, #1
 800a892:	465c      	mov	r4, fp
 800a894:	2200      	movs	r2, #0
 800a896:	4b6b      	ldr	r3, [pc, #428]	@ (800aa44 <_dtoa_r+0x58c>)
 800a898:	4629      	mov	r1, r5
 800a89a:	f7f5 feb1 	bl	8000600 <__aeabi_dmul>
 800a89e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a8a2:	4630      	mov	r0, r6
 800a8a4:	f7f5 fe42 	bl	800052c <__aeabi_i2d>
 800a8a8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a8ac:	f7f5 fea8 	bl	8000600 <__aeabi_dmul>
 800a8b0:	2200      	movs	r2, #0
 800a8b2:	4b65      	ldr	r3, [pc, #404]	@ (800aa48 <_dtoa_r+0x590>)
 800a8b4:	f7f5 fcee 	bl	8000294 <__adddf3>
 800a8b8:	4605      	mov	r5, r0
 800a8ba:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800a8be:	2c00      	cmp	r4, #0
 800a8c0:	d16a      	bne.n	800a998 <_dtoa_r+0x4e0>
 800a8c2:	2200      	movs	r2, #0
 800a8c4:	4b61      	ldr	r3, [pc, #388]	@ (800aa4c <_dtoa_r+0x594>)
 800a8c6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a8ca:	f7f5 fce1 	bl	8000290 <__aeabi_dsub>
 800a8ce:	4602      	mov	r2, r0
 800a8d0:	460b      	mov	r3, r1
 800a8d2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800a8d6:	462a      	mov	r2, r5
 800a8d8:	4633      	mov	r3, r6
 800a8da:	f7f6 f921 	bl	8000b20 <__aeabi_dcmpgt>
 800a8de:	2800      	cmp	r0, #0
 800a8e0:	f040 8298 	bne.w	800ae14 <_dtoa_r+0x95c>
 800a8e4:	462a      	mov	r2, r5
 800a8e6:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800a8ea:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a8ee:	f7f6 f8f9 	bl	8000ae4 <__aeabi_dcmplt>
 800a8f2:	bb38      	cbnz	r0, 800a944 <_dtoa_r+0x48c>
 800a8f4:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 800a8f8:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800a8fc:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800a8fe:	2b00      	cmp	r3, #0
 800a900:	f2c0 8157 	blt.w	800abb2 <_dtoa_r+0x6fa>
 800a904:	2f0e      	cmp	r7, #14
 800a906:	f300 8154 	bgt.w	800abb2 <_dtoa_r+0x6fa>
 800a90a:	4b4b      	ldr	r3, [pc, #300]	@ (800aa38 <_dtoa_r+0x580>)
 800a90c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800a910:	ed93 7b00 	vldr	d7, [r3]
 800a914:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a916:	2b00      	cmp	r3, #0
 800a918:	ed8d 7b00 	vstr	d7, [sp]
 800a91c:	f280 80e5 	bge.w	800aaea <_dtoa_r+0x632>
 800a920:	9b03      	ldr	r3, [sp, #12]
 800a922:	2b00      	cmp	r3, #0
 800a924:	f300 80e1 	bgt.w	800aaea <_dtoa_r+0x632>
 800a928:	d10c      	bne.n	800a944 <_dtoa_r+0x48c>
 800a92a:	2200      	movs	r2, #0
 800a92c:	4b47      	ldr	r3, [pc, #284]	@ (800aa4c <_dtoa_r+0x594>)
 800a92e:	ec51 0b17 	vmov	r0, r1, d7
 800a932:	f7f5 fe65 	bl	8000600 <__aeabi_dmul>
 800a936:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a93a:	f7f6 f8e7 	bl	8000b0c <__aeabi_dcmpge>
 800a93e:	2800      	cmp	r0, #0
 800a940:	f000 8266 	beq.w	800ae10 <_dtoa_r+0x958>
 800a944:	2400      	movs	r4, #0
 800a946:	4625      	mov	r5, r4
 800a948:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a94a:	4656      	mov	r6, sl
 800a94c:	ea6f 0803 	mvn.w	r8, r3
 800a950:	2700      	movs	r7, #0
 800a952:	4621      	mov	r1, r4
 800a954:	4648      	mov	r0, r9
 800a956:	f000 ffbd 	bl	800b8d4 <_Bfree>
 800a95a:	2d00      	cmp	r5, #0
 800a95c:	f000 80bd 	beq.w	800aada <_dtoa_r+0x622>
 800a960:	b12f      	cbz	r7, 800a96e <_dtoa_r+0x4b6>
 800a962:	42af      	cmp	r7, r5
 800a964:	d003      	beq.n	800a96e <_dtoa_r+0x4b6>
 800a966:	4639      	mov	r1, r7
 800a968:	4648      	mov	r0, r9
 800a96a:	f000 ffb3 	bl	800b8d4 <_Bfree>
 800a96e:	4629      	mov	r1, r5
 800a970:	4648      	mov	r0, r9
 800a972:	f000 ffaf 	bl	800b8d4 <_Bfree>
 800a976:	e0b0      	b.n	800aada <_dtoa_r+0x622>
 800a978:	07e2      	lsls	r2, r4, #31
 800a97a:	d505      	bpl.n	800a988 <_dtoa_r+0x4d0>
 800a97c:	3601      	adds	r6, #1
 800a97e:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a982:	f7f5 fe3d 	bl	8000600 <__aeabi_dmul>
 800a986:	2301      	movs	r3, #1
 800a988:	1064      	asrs	r4, r4, #1
 800a98a:	3508      	adds	r5, #8
 800a98c:	e762      	b.n	800a854 <_dtoa_r+0x39c>
 800a98e:	2602      	movs	r6, #2
 800a990:	e765      	b.n	800a85e <_dtoa_r+0x3a6>
 800a992:	46b8      	mov	r8, r7
 800a994:	9c03      	ldr	r4, [sp, #12]
 800a996:	e784      	b.n	800a8a2 <_dtoa_r+0x3ea>
 800a998:	4b27      	ldr	r3, [pc, #156]	@ (800aa38 <_dtoa_r+0x580>)
 800a99a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a99c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a9a0:	4454      	add	r4, sl
 800a9a2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a9a6:	2900      	cmp	r1, #0
 800a9a8:	d054      	beq.n	800aa54 <_dtoa_r+0x59c>
 800a9aa:	2000      	movs	r0, #0
 800a9ac:	4928      	ldr	r1, [pc, #160]	@ (800aa50 <_dtoa_r+0x598>)
 800a9ae:	f7f5 ff51 	bl	8000854 <__aeabi_ddiv>
 800a9b2:	4633      	mov	r3, r6
 800a9b4:	4656      	mov	r6, sl
 800a9b6:	462a      	mov	r2, r5
 800a9b8:	f7f5 fc6a 	bl	8000290 <__aeabi_dsub>
 800a9bc:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800a9c0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a9c4:	f7f6 f8cc 	bl	8000b60 <__aeabi_d2iz>
 800a9c8:	4605      	mov	r5, r0
 800a9ca:	f7f5 fdaf 	bl	800052c <__aeabi_i2d>
 800a9ce:	4602      	mov	r2, r0
 800a9d0:	460b      	mov	r3, r1
 800a9d2:	3530      	adds	r5, #48	@ 0x30
 800a9d4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a9d8:	f7f5 fc5a 	bl	8000290 <__aeabi_dsub>
 800a9dc:	4602      	mov	r2, r0
 800a9de:	460b      	mov	r3, r1
 800a9e0:	f806 5b01 	strb.w	r5, [r6], #1
 800a9e4:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800a9e8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800a9ec:	f7f6 f87a 	bl	8000ae4 <__aeabi_dcmplt>
 800a9f0:	2800      	cmp	r0, #0
 800a9f2:	d172      	bne.n	800aada <_dtoa_r+0x622>
 800a9f4:	2000      	movs	r0, #0
 800a9f6:	4912      	ldr	r1, [pc, #72]	@ (800aa40 <_dtoa_r+0x588>)
 800a9f8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a9fc:	f7f5 fc48 	bl	8000290 <__aeabi_dsub>
 800aa00:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800aa04:	f7f6 f86e 	bl	8000ae4 <__aeabi_dcmplt>
 800aa08:	2800      	cmp	r0, #0
 800aa0a:	f040 80b4 	bne.w	800ab76 <_dtoa_r+0x6be>
 800aa0e:	42a6      	cmp	r6, r4
 800aa10:	f43f af70 	beq.w	800a8f4 <_dtoa_r+0x43c>
 800aa14:	2200      	movs	r2, #0
 800aa16:	4b0b      	ldr	r3, [pc, #44]	@ (800aa44 <_dtoa_r+0x58c>)
 800aa18:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800aa1c:	f7f5 fdf0 	bl	8000600 <__aeabi_dmul>
 800aa20:	2200      	movs	r2, #0
 800aa22:	4b08      	ldr	r3, [pc, #32]	@ (800aa44 <_dtoa_r+0x58c>)
 800aa24:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800aa28:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800aa2c:	f7f5 fde8 	bl	8000600 <__aeabi_dmul>
 800aa30:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800aa34:	e7c4      	b.n	800a9c0 <_dtoa_r+0x508>
 800aa36:	bf00      	nop
 800aa38:	0800de08 	.word	0x0800de08
 800aa3c:	0800dde0 	.word	0x0800dde0
 800aa40:	3ff00000 	.word	0x3ff00000
 800aa44:	40240000 	.word	0x40240000
 800aa48:	401c0000 	.word	0x401c0000
 800aa4c:	40140000 	.word	0x40140000
 800aa50:	3fe00000 	.word	0x3fe00000
 800aa54:	4631      	mov	r1, r6
 800aa56:	4656      	mov	r6, sl
 800aa58:	4628      	mov	r0, r5
 800aa5a:	f7f5 fdd1 	bl	8000600 <__aeabi_dmul>
 800aa5e:	9413      	str	r4, [sp, #76]	@ 0x4c
 800aa60:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800aa64:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800aa68:	f7f6 f87a 	bl	8000b60 <__aeabi_d2iz>
 800aa6c:	4605      	mov	r5, r0
 800aa6e:	f7f5 fd5d 	bl	800052c <__aeabi_i2d>
 800aa72:	4602      	mov	r2, r0
 800aa74:	3530      	adds	r5, #48	@ 0x30
 800aa76:	460b      	mov	r3, r1
 800aa78:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800aa7c:	f7f5 fc08 	bl	8000290 <__aeabi_dsub>
 800aa80:	f806 5b01 	strb.w	r5, [r6], #1
 800aa84:	4602      	mov	r2, r0
 800aa86:	460b      	mov	r3, r1
 800aa88:	42a6      	cmp	r6, r4
 800aa8a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800aa8e:	f04f 0200 	mov.w	r2, #0
 800aa92:	d124      	bne.n	800aade <_dtoa_r+0x626>
 800aa94:	4baf      	ldr	r3, [pc, #700]	@ (800ad54 <_dtoa_r+0x89c>)
 800aa96:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800aa9a:	f7f5 fbfb 	bl	8000294 <__adddf3>
 800aa9e:	4602      	mov	r2, r0
 800aaa0:	460b      	mov	r3, r1
 800aaa2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800aaa6:	f7f6 f83b 	bl	8000b20 <__aeabi_dcmpgt>
 800aaaa:	2800      	cmp	r0, #0
 800aaac:	d163      	bne.n	800ab76 <_dtoa_r+0x6be>
 800aaae:	2000      	movs	r0, #0
 800aab0:	49a8      	ldr	r1, [pc, #672]	@ (800ad54 <_dtoa_r+0x89c>)
 800aab2:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800aab6:	f7f5 fbeb 	bl	8000290 <__aeabi_dsub>
 800aaba:	4602      	mov	r2, r0
 800aabc:	460b      	mov	r3, r1
 800aabe:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800aac2:	f7f6 f80f 	bl	8000ae4 <__aeabi_dcmplt>
 800aac6:	2800      	cmp	r0, #0
 800aac8:	f43f af14 	beq.w	800a8f4 <_dtoa_r+0x43c>
 800aacc:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800aace:	1e73      	subs	r3, r6, #1
 800aad0:	9313      	str	r3, [sp, #76]	@ 0x4c
 800aad2:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800aad6:	2b30      	cmp	r3, #48	@ 0x30
 800aad8:	d0f8      	beq.n	800aacc <_dtoa_r+0x614>
 800aada:	4647      	mov	r7, r8
 800aadc:	e03b      	b.n	800ab56 <_dtoa_r+0x69e>
 800aade:	4b9e      	ldr	r3, [pc, #632]	@ (800ad58 <_dtoa_r+0x8a0>)
 800aae0:	f7f5 fd8e 	bl	8000600 <__aeabi_dmul>
 800aae4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800aae8:	e7bc      	b.n	800aa64 <_dtoa_r+0x5ac>
 800aaea:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800aaee:	4656      	mov	r6, sl
 800aaf0:	4620      	mov	r0, r4
 800aaf2:	4629      	mov	r1, r5
 800aaf4:	e9dd 2300 	ldrd	r2, r3, [sp]
 800aaf8:	f7f5 feac 	bl	8000854 <__aeabi_ddiv>
 800aafc:	f7f6 f830 	bl	8000b60 <__aeabi_d2iz>
 800ab00:	4680      	mov	r8, r0
 800ab02:	f7f5 fd13 	bl	800052c <__aeabi_i2d>
 800ab06:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ab0a:	f7f5 fd79 	bl	8000600 <__aeabi_dmul>
 800ab0e:	4602      	mov	r2, r0
 800ab10:	4620      	mov	r0, r4
 800ab12:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800ab16:	460b      	mov	r3, r1
 800ab18:	4629      	mov	r1, r5
 800ab1a:	f7f5 fbb9 	bl	8000290 <__aeabi_dsub>
 800ab1e:	9d03      	ldr	r5, [sp, #12]
 800ab20:	f806 4b01 	strb.w	r4, [r6], #1
 800ab24:	eba6 040a 	sub.w	r4, r6, sl
 800ab28:	4602      	mov	r2, r0
 800ab2a:	460b      	mov	r3, r1
 800ab2c:	42a5      	cmp	r5, r4
 800ab2e:	d133      	bne.n	800ab98 <_dtoa_r+0x6e0>
 800ab30:	f7f5 fbb0 	bl	8000294 <__adddf3>
 800ab34:	4604      	mov	r4, r0
 800ab36:	460d      	mov	r5, r1
 800ab38:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ab3c:	f7f5 fff0 	bl	8000b20 <__aeabi_dcmpgt>
 800ab40:	b9c0      	cbnz	r0, 800ab74 <_dtoa_r+0x6bc>
 800ab42:	4620      	mov	r0, r4
 800ab44:	4629      	mov	r1, r5
 800ab46:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ab4a:	f7f5 ffc1 	bl	8000ad0 <__aeabi_dcmpeq>
 800ab4e:	b110      	cbz	r0, 800ab56 <_dtoa_r+0x69e>
 800ab50:	f018 0f01 	tst.w	r8, #1
 800ab54:	d10e      	bne.n	800ab74 <_dtoa_r+0x6bc>
 800ab56:	9902      	ldr	r1, [sp, #8]
 800ab58:	4648      	mov	r0, r9
 800ab5a:	f000 febb 	bl	800b8d4 <_Bfree>
 800ab5e:	2300      	movs	r3, #0
 800ab60:	3701      	adds	r7, #1
 800ab62:	7033      	strb	r3, [r6, #0]
 800ab64:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800ab66:	601f      	str	r7, [r3, #0]
 800ab68:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800ab6a:	2b00      	cmp	r3, #0
 800ab6c:	f000 824c 	beq.w	800b008 <_dtoa_r+0xb50>
 800ab70:	601e      	str	r6, [r3, #0]
 800ab72:	e249      	b.n	800b008 <_dtoa_r+0xb50>
 800ab74:	46b8      	mov	r8, r7
 800ab76:	4633      	mov	r3, r6
 800ab78:	461e      	mov	r6, r3
 800ab7a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ab7e:	2a39      	cmp	r2, #57	@ 0x39
 800ab80:	d106      	bne.n	800ab90 <_dtoa_r+0x6d8>
 800ab82:	459a      	cmp	sl, r3
 800ab84:	d1f8      	bne.n	800ab78 <_dtoa_r+0x6c0>
 800ab86:	2230      	movs	r2, #48	@ 0x30
 800ab88:	f108 0801 	add.w	r8, r8, #1
 800ab8c:	f88a 2000 	strb.w	r2, [sl]
 800ab90:	781a      	ldrb	r2, [r3, #0]
 800ab92:	3201      	adds	r2, #1
 800ab94:	701a      	strb	r2, [r3, #0]
 800ab96:	e7a0      	b.n	800aada <_dtoa_r+0x622>
 800ab98:	2200      	movs	r2, #0
 800ab9a:	4b6f      	ldr	r3, [pc, #444]	@ (800ad58 <_dtoa_r+0x8a0>)
 800ab9c:	f7f5 fd30 	bl	8000600 <__aeabi_dmul>
 800aba0:	2200      	movs	r2, #0
 800aba2:	2300      	movs	r3, #0
 800aba4:	4604      	mov	r4, r0
 800aba6:	460d      	mov	r5, r1
 800aba8:	f7f5 ff92 	bl	8000ad0 <__aeabi_dcmpeq>
 800abac:	2800      	cmp	r0, #0
 800abae:	d09f      	beq.n	800aaf0 <_dtoa_r+0x638>
 800abb0:	e7d1      	b.n	800ab56 <_dtoa_r+0x69e>
 800abb2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800abb4:	2a00      	cmp	r2, #0
 800abb6:	f000 80ea 	beq.w	800ad8e <_dtoa_r+0x8d6>
 800abba:	9a07      	ldr	r2, [sp, #28]
 800abbc:	2a01      	cmp	r2, #1
 800abbe:	f300 80cd 	bgt.w	800ad5c <_dtoa_r+0x8a4>
 800abc2:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800abc4:	2a00      	cmp	r2, #0
 800abc6:	f000 80c1 	beq.w	800ad4c <_dtoa_r+0x894>
 800abca:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800abce:	9c08      	ldr	r4, [sp, #32]
 800abd0:	9e00      	ldr	r6, [sp, #0]
 800abd2:	9a00      	ldr	r2, [sp, #0]
 800abd4:	2101      	movs	r1, #1
 800abd6:	4648      	mov	r0, r9
 800abd8:	441a      	add	r2, r3
 800abda:	9200      	str	r2, [sp, #0]
 800abdc:	9a06      	ldr	r2, [sp, #24]
 800abde:	441a      	add	r2, r3
 800abe0:	9206      	str	r2, [sp, #24]
 800abe2:	f000 ff2d 	bl	800ba40 <__i2b>
 800abe6:	4605      	mov	r5, r0
 800abe8:	b166      	cbz	r6, 800ac04 <_dtoa_r+0x74c>
 800abea:	9b06      	ldr	r3, [sp, #24]
 800abec:	2b00      	cmp	r3, #0
 800abee:	dd09      	ble.n	800ac04 <_dtoa_r+0x74c>
 800abf0:	42b3      	cmp	r3, r6
 800abf2:	9a00      	ldr	r2, [sp, #0]
 800abf4:	bfa8      	it	ge
 800abf6:	4633      	movge	r3, r6
 800abf8:	1ad2      	subs	r2, r2, r3
 800abfa:	1af6      	subs	r6, r6, r3
 800abfc:	9200      	str	r2, [sp, #0]
 800abfe:	9a06      	ldr	r2, [sp, #24]
 800ac00:	1ad3      	subs	r3, r2, r3
 800ac02:	9306      	str	r3, [sp, #24]
 800ac04:	9b08      	ldr	r3, [sp, #32]
 800ac06:	b30b      	cbz	r3, 800ac4c <_dtoa_r+0x794>
 800ac08:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ac0a:	2b00      	cmp	r3, #0
 800ac0c:	f000 80c6 	beq.w	800ad9c <_dtoa_r+0x8e4>
 800ac10:	2c00      	cmp	r4, #0
 800ac12:	f000 80c0 	beq.w	800ad96 <_dtoa_r+0x8de>
 800ac16:	4629      	mov	r1, r5
 800ac18:	4622      	mov	r2, r4
 800ac1a:	4648      	mov	r0, r9
 800ac1c:	f000 ffca 	bl	800bbb4 <__pow5mult>
 800ac20:	9a02      	ldr	r2, [sp, #8]
 800ac22:	4601      	mov	r1, r0
 800ac24:	4605      	mov	r5, r0
 800ac26:	4648      	mov	r0, r9
 800ac28:	f000 ff20 	bl	800ba6c <__multiply>
 800ac2c:	9902      	ldr	r1, [sp, #8]
 800ac2e:	4680      	mov	r8, r0
 800ac30:	4648      	mov	r0, r9
 800ac32:	f000 fe4f 	bl	800b8d4 <_Bfree>
 800ac36:	9b08      	ldr	r3, [sp, #32]
 800ac38:	1b1b      	subs	r3, r3, r4
 800ac3a:	9308      	str	r3, [sp, #32]
 800ac3c:	f000 80b1 	beq.w	800ada2 <_dtoa_r+0x8ea>
 800ac40:	9a08      	ldr	r2, [sp, #32]
 800ac42:	4641      	mov	r1, r8
 800ac44:	4648      	mov	r0, r9
 800ac46:	f000 ffb5 	bl	800bbb4 <__pow5mult>
 800ac4a:	9002      	str	r0, [sp, #8]
 800ac4c:	2101      	movs	r1, #1
 800ac4e:	4648      	mov	r0, r9
 800ac50:	f000 fef6 	bl	800ba40 <__i2b>
 800ac54:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800ac56:	4604      	mov	r4, r0
 800ac58:	2b00      	cmp	r3, #0
 800ac5a:	f000 81d9 	beq.w	800b010 <_dtoa_r+0xb58>
 800ac5e:	461a      	mov	r2, r3
 800ac60:	4601      	mov	r1, r0
 800ac62:	4648      	mov	r0, r9
 800ac64:	f000 ffa6 	bl	800bbb4 <__pow5mult>
 800ac68:	9b07      	ldr	r3, [sp, #28]
 800ac6a:	4604      	mov	r4, r0
 800ac6c:	2b01      	cmp	r3, #1
 800ac6e:	f300 809f 	bgt.w	800adb0 <_dtoa_r+0x8f8>
 800ac72:	9b04      	ldr	r3, [sp, #16]
 800ac74:	2b00      	cmp	r3, #0
 800ac76:	f040 8097 	bne.w	800ada8 <_dtoa_r+0x8f0>
 800ac7a:	9b05      	ldr	r3, [sp, #20]
 800ac7c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ac80:	2b00      	cmp	r3, #0
 800ac82:	f040 8093 	bne.w	800adac <_dtoa_r+0x8f4>
 800ac86:	9b05      	ldr	r3, [sp, #20]
 800ac88:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800ac8c:	0d1b      	lsrs	r3, r3, #20
 800ac8e:	051b      	lsls	r3, r3, #20
 800ac90:	b133      	cbz	r3, 800aca0 <_dtoa_r+0x7e8>
 800ac92:	9b00      	ldr	r3, [sp, #0]
 800ac94:	3301      	adds	r3, #1
 800ac96:	9300      	str	r3, [sp, #0]
 800ac98:	9b06      	ldr	r3, [sp, #24]
 800ac9a:	3301      	adds	r3, #1
 800ac9c:	9306      	str	r3, [sp, #24]
 800ac9e:	2301      	movs	r3, #1
 800aca0:	9308      	str	r3, [sp, #32]
 800aca2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800aca4:	2b00      	cmp	r3, #0
 800aca6:	f000 81b9 	beq.w	800b01c <_dtoa_r+0xb64>
 800acaa:	6923      	ldr	r3, [r4, #16]
 800acac:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800acb0:	6918      	ldr	r0, [r3, #16]
 800acb2:	f000 fe79 	bl	800b9a8 <__hi0bits>
 800acb6:	f1c0 0020 	rsb	r0, r0, #32
 800acba:	9b06      	ldr	r3, [sp, #24]
 800acbc:	4418      	add	r0, r3
 800acbe:	f010 001f 	ands.w	r0, r0, #31
 800acc2:	f000 8082 	beq.w	800adca <_dtoa_r+0x912>
 800acc6:	f1c0 0320 	rsb	r3, r0, #32
 800acca:	2b04      	cmp	r3, #4
 800accc:	dd73      	ble.n	800adb6 <_dtoa_r+0x8fe>
 800acce:	f1c0 001c 	rsb	r0, r0, #28
 800acd2:	9b00      	ldr	r3, [sp, #0]
 800acd4:	4403      	add	r3, r0
 800acd6:	4406      	add	r6, r0
 800acd8:	9300      	str	r3, [sp, #0]
 800acda:	9b06      	ldr	r3, [sp, #24]
 800acdc:	4403      	add	r3, r0
 800acde:	9306      	str	r3, [sp, #24]
 800ace0:	9b00      	ldr	r3, [sp, #0]
 800ace2:	2b00      	cmp	r3, #0
 800ace4:	dd05      	ble.n	800acf2 <_dtoa_r+0x83a>
 800ace6:	461a      	mov	r2, r3
 800ace8:	9902      	ldr	r1, [sp, #8]
 800acea:	4648      	mov	r0, r9
 800acec:	f000 ffbc 	bl	800bc68 <__lshift>
 800acf0:	9002      	str	r0, [sp, #8]
 800acf2:	9b06      	ldr	r3, [sp, #24]
 800acf4:	2b00      	cmp	r3, #0
 800acf6:	dd05      	ble.n	800ad04 <_dtoa_r+0x84c>
 800acf8:	4621      	mov	r1, r4
 800acfa:	461a      	mov	r2, r3
 800acfc:	4648      	mov	r0, r9
 800acfe:	f000 ffb3 	bl	800bc68 <__lshift>
 800ad02:	4604      	mov	r4, r0
 800ad04:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800ad06:	2b00      	cmp	r3, #0
 800ad08:	d061      	beq.n	800adce <_dtoa_r+0x916>
 800ad0a:	4621      	mov	r1, r4
 800ad0c:	9802      	ldr	r0, [sp, #8]
 800ad0e:	f001 f817 	bl	800bd40 <__mcmp>
 800ad12:	2800      	cmp	r0, #0
 800ad14:	da5b      	bge.n	800adce <_dtoa_r+0x916>
 800ad16:	2300      	movs	r3, #0
 800ad18:	220a      	movs	r2, #10
 800ad1a:	9902      	ldr	r1, [sp, #8]
 800ad1c:	4648      	mov	r0, r9
 800ad1e:	f000 fdfb 	bl	800b918 <__multadd>
 800ad22:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ad24:	f107 38ff 	add.w	r8, r7, #4294967295	@ 0xffffffff
 800ad28:	9002      	str	r0, [sp, #8]
 800ad2a:	2b00      	cmp	r3, #0
 800ad2c:	f000 8178 	beq.w	800b020 <_dtoa_r+0xb68>
 800ad30:	4629      	mov	r1, r5
 800ad32:	2300      	movs	r3, #0
 800ad34:	220a      	movs	r2, #10
 800ad36:	4648      	mov	r0, r9
 800ad38:	f000 fdee 	bl	800b918 <__multadd>
 800ad3c:	f1bb 0f00 	cmp.w	fp, #0
 800ad40:	4605      	mov	r5, r0
 800ad42:	dc6f      	bgt.n	800ae24 <_dtoa_r+0x96c>
 800ad44:	9b07      	ldr	r3, [sp, #28]
 800ad46:	2b02      	cmp	r3, #2
 800ad48:	dc49      	bgt.n	800adde <_dtoa_r+0x926>
 800ad4a:	e06b      	b.n	800ae24 <_dtoa_r+0x96c>
 800ad4c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800ad4e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800ad52:	e73c      	b.n	800abce <_dtoa_r+0x716>
 800ad54:	3fe00000 	.word	0x3fe00000
 800ad58:	40240000 	.word	0x40240000
 800ad5c:	9b03      	ldr	r3, [sp, #12]
 800ad5e:	1e5c      	subs	r4, r3, #1
 800ad60:	9b08      	ldr	r3, [sp, #32]
 800ad62:	42a3      	cmp	r3, r4
 800ad64:	db09      	blt.n	800ad7a <_dtoa_r+0x8c2>
 800ad66:	1b1c      	subs	r4, r3, r4
 800ad68:	9b03      	ldr	r3, [sp, #12]
 800ad6a:	2b00      	cmp	r3, #0
 800ad6c:	f6bf af30 	bge.w	800abd0 <_dtoa_r+0x718>
 800ad70:	9b00      	ldr	r3, [sp, #0]
 800ad72:	9a03      	ldr	r2, [sp, #12]
 800ad74:	1a9e      	subs	r6, r3, r2
 800ad76:	2300      	movs	r3, #0
 800ad78:	e72b      	b.n	800abd2 <_dtoa_r+0x71a>
 800ad7a:	9b08      	ldr	r3, [sp, #32]
 800ad7c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800ad7e:	1ae3      	subs	r3, r4, r3
 800ad80:	9408      	str	r4, [sp, #32]
 800ad82:	9e00      	ldr	r6, [sp, #0]
 800ad84:	2400      	movs	r4, #0
 800ad86:	441a      	add	r2, r3
 800ad88:	9b03      	ldr	r3, [sp, #12]
 800ad8a:	920d      	str	r2, [sp, #52]	@ 0x34
 800ad8c:	e721      	b.n	800abd2 <_dtoa_r+0x71a>
 800ad8e:	9c08      	ldr	r4, [sp, #32]
 800ad90:	9e00      	ldr	r6, [sp, #0]
 800ad92:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800ad94:	e728      	b.n	800abe8 <_dtoa_r+0x730>
 800ad96:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800ad9a:	e751      	b.n	800ac40 <_dtoa_r+0x788>
 800ad9c:	9a08      	ldr	r2, [sp, #32]
 800ad9e:	9902      	ldr	r1, [sp, #8]
 800ada0:	e750      	b.n	800ac44 <_dtoa_r+0x78c>
 800ada2:	f8cd 8008 	str.w	r8, [sp, #8]
 800ada6:	e751      	b.n	800ac4c <_dtoa_r+0x794>
 800ada8:	2300      	movs	r3, #0
 800adaa:	e779      	b.n	800aca0 <_dtoa_r+0x7e8>
 800adac:	9b04      	ldr	r3, [sp, #16]
 800adae:	e777      	b.n	800aca0 <_dtoa_r+0x7e8>
 800adb0:	2300      	movs	r3, #0
 800adb2:	9308      	str	r3, [sp, #32]
 800adb4:	e779      	b.n	800acaa <_dtoa_r+0x7f2>
 800adb6:	d093      	beq.n	800ace0 <_dtoa_r+0x828>
 800adb8:	331c      	adds	r3, #28
 800adba:	9a00      	ldr	r2, [sp, #0]
 800adbc:	441a      	add	r2, r3
 800adbe:	441e      	add	r6, r3
 800adc0:	9200      	str	r2, [sp, #0]
 800adc2:	9a06      	ldr	r2, [sp, #24]
 800adc4:	441a      	add	r2, r3
 800adc6:	9206      	str	r2, [sp, #24]
 800adc8:	e78a      	b.n	800ace0 <_dtoa_r+0x828>
 800adca:	4603      	mov	r3, r0
 800adcc:	e7f4      	b.n	800adb8 <_dtoa_r+0x900>
 800adce:	9b03      	ldr	r3, [sp, #12]
 800add0:	46b8      	mov	r8, r7
 800add2:	2b00      	cmp	r3, #0
 800add4:	dc20      	bgt.n	800ae18 <_dtoa_r+0x960>
 800add6:	469b      	mov	fp, r3
 800add8:	9b07      	ldr	r3, [sp, #28]
 800adda:	2b02      	cmp	r3, #2
 800addc:	dd1e      	ble.n	800ae1c <_dtoa_r+0x964>
 800adde:	f1bb 0f00 	cmp.w	fp, #0
 800ade2:	f47f adb1 	bne.w	800a948 <_dtoa_r+0x490>
 800ade6:	4621      	mov	r1, r4
 800ade8:	465b      	mov	r3, fp
 800adea:	2205      	movs	r2, #5
 800adec:	4648      	mov	r0, r9
 800adee:	f000 fd93 	bl	800b918 <__multadd>
 800adf2:	4601      	mov	r1, r0
 800adf4:	4604      	mov	r4, r0
 800adf6:	9802      	ldr	r0, [sp, #8]
 800adf8:	f000 ffa2 	bl	800bd40 <__mcmp>
 800adfc:	2800      	cmp	r0, #0
 800adfe:	f77f ada3 	ble.w	800a948 <_dtoa_r+0x490>
 800ae02:	4656      	mov	r6, sl
 800ae04:	2331      	movs	r3, #49	@ 0x31
 800ae06:	f108 0801 	add.w	r8, r8, #1
 800ae0a:	f806 3b01 	strb.w	r3, [r6], #1
 800ae0e:	e59f      	b.n	800a950 <_dtoa_r+0x498>
 800ae10:	46b8      	mov	r8, r7
 800ae12:	9c03      	ldr	r4, [sp, #12]
 800ae14:	4625      	mov	r5, r4
 800ae16:	e7f4      	b.n	800ae02 <_dtoa_r+0x94a>
 800ae18:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800ae1c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ae1e:	2b00      	cmp	r3, #0
 800ae20:	f000 8102 	beq.w	800b028 <_dtoa_r+0xb70>
 800ae24:	2e00      	cmp	r6, #0
 800ae26:	dd05      	ble.n	800ae34 <_dtoa_r+0x97c>
 800ae28:	4629      	mov	r1, r5
 800ae2a:	4632      	mov	r2, r6
 800ae2c:	4648      	mov	r0, r9
 800ae2e:	f000 ff1b 	bl	800bc68 <__lshift>
 800ae32:	4605      	mov	r5, r0
 800ae34:	9b08      	ldr	r3, [sp, #32]
 800ae36:	2b00      	cmp	r3, #0
 800ae38:	d05c      	beq.n	800aef4 <_dtoa_r+0xa3c>
 800ae3a:	6869      	ldr	r1, [r5, #4]
 800ae3c:	4648      	mov	r0, r9
 800ae3e:	f000 fd09 	bl	800b854 <_Balloc>
 800ae42:	4606      	mov	r6, r0
 800ae44:	b928      	cbnz	r0, 800ae52 <_dtoa_r+0x99a>
 800ae46:	4b83      	ldr	r3, [pc, #524]	@ (800b054 <_dtoa_r+0xb9c>)
 800ae48:	4602      	mov	r2, r0
 800ae4a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800ae4e:	f7ff bb4a 	b.w	800a4e6 <_dtoa_r+0x2e>
 800ae52:	692a      	ldr	r2, [r5, #16]
 800ae54:	f105 010c 	add.w	r1, r5, #12
 800ae58:	300c      	adds	r0, #12
 800ae5a:	3202      	adds	r2, #2
 800ae5c:	0092      	lsls	r2, r2, #2
 800ae5e:	f001 fa75 	bl	800c34c <memcpy>
 800ae62:	2201      	movs	r2, #1
 800ae64:	4631      	mov	r1, r6
 800ae66:	4648      	mov	r0, r9
 800ae68:	f000 fefe 	bl	800bc68 <__lshift>
 800ae6c:	f10a 0301 	add.w	r3, sl, #1
 800ae70:	462f      	mov	r7, r5
 800ae72:	4605      	mov	r5, r0
 800ae74:	9300      	str	r3, [sp, #0]
 800ae76:	eb0a 030b 	add.w	r3, sl, fp
 800ae7a:	9308      	str	r3, [sp, #32]
 800ae7c:	9b04      	ldr	r3, [sp, #16]
 800ae7e:	f003 0301 	and.w	r3, r3, #1
 800ae82:	9306      	str	r3, [sp, #24]
 800ae84:	9b00      	ldr	r3, [sp, #0]
 800ae86:	4621      	mov	r1, r4
 800ae88:	9802      	ldr	r0, [sp, #8]
 800ae8a:	f103 3bff 	add.w	fp, r3, #4294967295	@ 0xffffffff
 800ae8e:	f7ff fa85 	bl	800a39c <quorem>
 800ae92:	4603      	mov	r3, r0
 800ae94:	4639      	mov	r1, r7
 800ae96:	9003      	str	r0, [sp, #12]
 800ae98:	3330      	adds	r3, #48	@ 0x30
 800ae9a:	9802      	ldr	r0, [sp, #8]
 800ae9c:	9309      	str	r3, [sp, #36]	@ 0x24
 800ae9e:	f000 ff4f 	bl	800bd40 <__mcmp>
 800aea2:	462a      	mov	r2, r5
 800aea4:	9004      	str	r0, [sp, #16]
 800aea6:	4621      	mov	r1, r4
 800aea8:	4648      	mov	r0, r9
 800aeaa:	f000 ff65 	bl	800bd78 <__mdiff>
 800aeae:	68c2      	ldr	r2, [r0, #12]
 800aeb0:	4606      	mov	r6, r0
 800aeb2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aeb4:	bb02      	cbnz	r2, 800aef8 <_dtoa_r+0xa40>
 800aeb6:	4601      	mov	r1, r0
 800aeb8:	9802      	ldr	r0, [sp, #8]
 800aeba:	f000 ff41 	bl	800bd40 <__mcmp>
 800aebe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aec0:	4602      	mov	r2, r0
 800aec2:	4631      	mov	r1, r6
 800aec4:	4648      	mov	r0, r9
 800aec6:	920c      	str	r2, [sp, #48]	@ 0x30
 800aec8:	9309      	str	r3, [sp, #36]	@ 0x24
 800aeca:	f000 fd03 	bl	800b8d4 <_Bfree>
 800aece:	9b07      	ldr	r3, [sp, #28]
 800aed0:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800aed2:	9e00      	ldr	r6, [sp, #0]
 800aed4:	ea42 0103 	orr.w	r1, r2, r3
 800aed8:	9b06      	ldr	r3, [sp, #24]
 800aeda:	4319      	orrs	r1, r3
 800aedc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aede:	d10d      	bne.n	800aefc <_dtoa_r+0xa44>
 800aee0:	2b39      	cmp	r3, #57	@ 0x39
 800aee2:	d027      	beq.n	800af34 <_dtoa_r+0xa7c>
 800aee4:	9a04      	ldr	r2, [sp, #16]
 800aee6:	2a00      	cmp	r2, #0
 800aee8:	dd01      	ble.n	800aeee <_dtoa_r+0xa36>
 800aeea:	9b03      	ldr	r3, [sp, #12]
 800aeec:	3331      	adds	r3, #49	@ 0x31
 800aeee:	f88b 3000 	strb.w	r3, [fp]
 800aef2:	e52e      	b.n	800a952 <_dtoa_r+0x49a>
 800aef4:	4628      	mov	r0, r5
 800aef6:	e7b9      	b.n	800ae6c <_dtoa_r+0x9b4>
 800aef8:	2201      	movs	r2, #1
 800aefa:	e7e2      	b.n	800aec2 <_dtoa_r+0xa0a>
 800aefc:	9904      	ldr	r1, [sp, #16]
 800aefe:	2900      	cmp	r1, #0
 800af00:	db04      	blt.n	800af0c <_dtoa_r+0xa54>
 800af02:	9807      	ldr	r0, [sp, #28]
 800af04:	4301      	orrs	r1, r0
 800af06:	9806      	ldr	r0, [sp, #24]
 800af08:	4301      	orrs	r1, r0
 800af0a:	d120      	bne.n	800af4e <_dtoa_r+0xa96>
 800af0c:	2a00      	cmp	r2, #0
 800af0e:	ddee      	ble.n	800aeee <_dtoa_r+0xa36>
 800af10:	2201      	movs	r2, #1
 800af12:	9902      	ldr	r1, [sp, #8]
 800af14:	4648      	mov	r0, r9
 800af16:	9300      	str	r3, [sp, #0]
 800af18:	f000 fea6 	bl	800bc68 <__lshift>
 800af1c:	4621      	mov	r1, r4
 800af1e:	9002      	str	r0, [sp, #8]
 800af20:	f000 ff0e 	bl	800bd40 <__mcmp>
 800af24:	2800      	cmp	r0, #0
 800af26:	9b00      	ldr	r3, [sp, #0]
 800af28:	dc02      	bgt.n	800af30 <_dtoa_r+0xa78>
 800af2a:	d1e0      	bne.n	800aeee <_dtoa_r+0xa36>
 800af2c:	07da      	lsls	r2, r3, #31
 800af2e:	d5de      	bpl.n	800aeee <_dtoa_r+0xa36>
 800af30:	2b39      	cmp	r3, #57	@ 0x39
 800af32:	d1da      	bne.n	800aeea <_dtoa_r+0xa32>
 800af34:	2339      	movs	r3, #57	@ 0x39
 800af36:	f88b 3000 	strb.w	r3, [fp]
 800af3a:	4633      	mov	r3, r6
 800af3c:	461e      	mov	r6, r3
 800af3e:	3b01      	subs	r3, #1
 800af40:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800af44:	2a39      	cmp	r2, #57	@ 0x39
 800af46:	d04f      	beq.n	800afe8 <_dtoa_r+0xb30>
 800af48:	3201      	adds	r2, #1
 800af4a:	701a      	strb	r2, [r3, #0]
 800af4c:	e501      	b.n	800a952 <_dtoa_r+0x49a>
 800af4e:	2a00      	cmp	r2, #0
 800af50:	dd03      	ble.n	800af5a <_dtoa_r+0xaa2>
 800af52:	2b39      	cmp	r3, #57	@ 0x39
 800af54:	d0ee      	beq.n	800af34 <_dtoa_r+0xa7c>
 800af56:	3301      	adds	r3, #1
 800af58:	e7c9      	b.n	800aeee <_dtoa_r+0xa36>
 800af5a:	9a00      	ldr	r2, [sp, #0]
 800af5c:	9908      	ldr	r1, [sp, #32]
 800af5e:	f802 3c01 	strb.w	r3, [r2, #-1]
 800af62:	428a      	cmp	r2, r1
 800af64:	d029      	beq.n	800afba <_dtoa_r+0xb02>
 800af66:	2300      	movs	r3, #0
 800af68:	220a      	movs	r2, #10
 800af6a:	9902      	ldr	r1, [sp, #8]
 800af6c:	4648      	mov	r0, r9
 800af6e:	f000 fcd3 	bl	800b918 <__multadd>
 800af72:	42af      	cmp	r7, r5
 800af74:	9002      	str	r0, [sp, #8]
 800af76:	f04f 0300 	mov.w	r3, #0
 800af7a:	f04f 020a 	mov.w	r2, #10
 800af7e:	4639      	mov	r1, r7
 800af80:	4648      	mov	r0, r9
 800af82:	d107      	bne.n	800af94 <_dtoa_r+0xadc>
 800af84:	f000 fcc8 	bl	800b918 <__multadd>
 800af88:	4607      	mov	r7, r0
 800af8a:	4605      	mov	r5, r0
 800af8c:	9b00      	ldr	r3, [sp, #0]
 800af8e:	3301      	adds	r3, #1
 800af90:	9300      	str	r3, [sp, #0]
 800af92:	e777      	b.n	800ae84 <_dtoa_r+0x9cc>
 800af94:	f000 fcc0 	bl	800b918 <__multadd>
 800af98:	4629      	mov	r1, r5
 800af9a:	4607      	mov	r7, r0
 800af9c:	2300      	movs	r3, #0
 800af9e:	220a      	movs	r2, #10
 800afa0:	4648      	mov	r0, r9
 800afa2:	f000 fcb9 	bl	800b918 <__multadd>
 800afa6:	4605      	mov	r5, r0
 800afa8:	e7f0      	b.n	800af8c <_dtoa_r+0xad4>
 800afaa:	f1bb 0f00 	cmp.w	fp, #0
 800afae:	f04f 0700 	mov.w	r7, #0
 800afb2:	bfcc      	ite	gt
 800afb4:	465e      	movgt	r6, fp
 800afb6:	2601      	movle	r6, #1
 800afb8:	4456      	add	r6, sl
 800afba:	2201      	movs	r2, #1
 800afbc:	9902      	ldr	r1, [sp, #8]
 800afbe:	4648      	mov	r0, r9
 800afc0:	9300      	str	r3, [sp, #0]
 800afc2:	f000 fe51 	bl	800bc68 <__lshift>
 800afc6:	4621      	mov	r1, r4
 800afc8:	9002      	str	r0, [sp, #8]
 800afca:	f000 feb9 	bl	800bd40 <__mcmp>
 800afce:	2800      	cmp	r0, #0
 800afd0:	dcb3      	bgt.n	800af3a <_dtoa_r+0xa82>
 800afd2:	d102      	bne.n	800afda <_dtoa_r+0xb22>
 800afd4:	9b00      	ldr	r3, [sp, #0]
 800afd6:	07db      	lsls	r3, r3, #31
 800afd8:	d4af      	bmi.n	800af3a <_dtoa_r+0xa82>
 800afda:	4633      	mov	r3, r6
 800afdc:	461e      	mov	r6, r3
 800afde:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800afe2:	2a30      	cmp	r2, #48	@ 0x30
 800afe4:	d0fa      	beq.n	800afdc <_dtoa_r+0xb24>
 800afe6:	e4b4      	b.n	800a952 <_dtoa_r+0x49a>
 800afe8:	459a      	cmp	sl, r3
 800afea:	d1a7      	bne.n	800af3c <_dtoa_r+0xa84>
 800afec:	2331      	movs	r3, #49	@ 0x31
 800afee:	f108 0801 	add.w	r8, r8, #1
 800aff2:	f88a 3000 	strb.w	r3, [sl]
 800aff6:	e4ac      	b.n	800a952 <_dtoa_r+0x49a>
 800aff8:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800affa:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800b058 <_dtoa_r+0xba0>
 800affe:	b11b      	cbz	r3, 800b008 <_dtoa_r+0xb50>
 800b000:	f10a 0308 	add.w	r3, sl, #8
 800b004:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800b006:	6013      	str	r3, [r2, #0]
 800b008:	4650      	mov	r0, sl
 800b00a:	b017      	add	sp, #92	@ 0x5c
 800b00c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b010:	9b07      	ldr	r3, [sp, #28]
 800b012:	2b01      	cmp	r3, #1
 800b014:	f77f ae2d 	ble.w	800ac72 <_dtoa_r+0x7ba>
 800b018:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b01a:	9308      	str	r3, [sp, #32]
 800b01c:	2001      	movs	r0, #1
 800b01e:	e64c      	b.n	800acba <_dtoa_r+0x802>
 800b020:	f1bb 0f00 	cmp.w	fp, #0
 800b024:	f77f aed8 	ble.w	800add8 <_dtoa_r+0x920>
 800b028:	4656      	mov	r6, sl
 800b02a:	4621      	mov	r1, r4
 800b02c:	9802      	ldr	r0, [sp, #8]
 800b02e:	f7ff f9b5 	bl	800a39c <quorem>
 800b032:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800b036:	f806 3b01 	strb.w	r3, [r6], #1
 800b03a:	eba6 020a 	sub.w	r2, r6, sl
 800b03e:	4593      	cmp	fp, r2
 800b040:	ddb3      	ble.n	800afaa <_dtoa_r+0xaf2>
 800b042:	2300      	movs	r3, #0
 800b044:	220a      	movs	r2, #10
 800b046:	9902      	ldr	r1, [sp, #8]
 800b048:	4648      	mov	r0, r9
 800b04a:	f000 fc65 	bl	800b918 <__multadd>
 800b04e:	9002      	str	r0, [sp, #8]
 800b050:	e7eb      	b.n	800b02a <_dtoa_r+0xb72>
 800b052:	bf00      	nop
 800b054:	0800dd0c 	.word	0x0800dd0c
 800b058:	0800dc90 	.word	0x0800dc90

0800b05c <__ssputs_r>:
 800b05c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b060:	461f      	mov	r7, r3
 800b062:	688e      	ldr	r6, [r1, #8]
 800b064:	4682      	mov	sl, r0
 800b066:	460c      	mov	r4, r1
 800b068:	42be      	cmp	r6, r7
 800b06a:	4690      	mov	r8, r2
 800b06c:	680b      	ldr	r3, [r1, #0]
 800b06e:	d82d      	bhi.n	800b0cc <__ssputs_r+0x70>
 800b070:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b074:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800b078:	d026      	beq.n	800b0c8 <__ssputs_r+0x6c>
 800b07a:	6965      	ldr	r5, [r4, #20]
 800b07c:	6909      	ldr	r1, [r1, #16]
 800b07e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b082:	eba3 0901 	sub.w	r9, r3, r1
 800b086:	1c7b      	adds	r3, r7, #1
 800b088:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b08c:	444b      	add	r3, r9
 800b08e:	106d      	asrs	r5, r5, #1
 800b090:	429d      	cmp	r5, r3
 800b092:	bf38      	it	cc
 800b094:	461d      	movcc	r5, r3
 800b096:	0553      	lsls	r3, r2, #21
 800b098:	d527      	bpl.n	800b0ea <__ssputs_r+0x8e>
 800b09a:	4629      	mov	r1, r5
 800b09c:	f000 faa2 	bl	800b5e4 <_malloc_r>
 800b0a0:	4606      	mov	r6, r0
 800b0a2:	b360      	cbz	r0, 800b0fe <__ssputs_r+0xa2>
 800b0a4:	464a      	mov	r2, r9
 800b0a6:	6921      	ldr	r1, [r4, #16]
 800b0a8:	f001 f950 	bl	800c34c <memcpy>
 800b0ac:	89a3      	ldrh	r3, [r4, #12]
 800b0ae:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800b0b2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b0b6:	81a3      	strh	r3, [r4, #12]
 800b0b8:	6126      	str	r6, [r4, #16]
 800b0ba:	444e      	add	r6, r9
 800b0bc:	6165      	str	r5, [r4, #20]
 800b0be:	eba5 0509 	sub.w	r5, r5, r9
 800b0c2:	6026      	str	r6, [r4, #0]
 800b0c4:	463e      	mov	r6, r7
 800b0c6:	60a5      	str	r5, [r4, #8]
 800b0c8:	42be      	cmp	r6, r7
 800b0ca:	d900      	bls.n	800b0ce <__ssputs_r+0x72>
 800b0cc:	463e      	mov	r6, r7
 800b0ce:	4632      	mov	r2, r6
 800b0d0:	4641      	mov	r1, r8
 800b0d2:	6820      	ldr	r0, [r4, #0]
 800b0d4:	f001 f8a7 	bl	800c226 <memmove>
 800b0d8:	68a3      	ldr	r3, [r4, #8]
 800b0da:	2000      	movs	r0, #0
 800b0dc:	1b9b      	subs	r3, r3, r6
 800b0de:	60a3      	str	r3, [r4, #8]
 800b0e0:	6823      	ldr	r3, [r4, #0]
 800b0e2:	4433      	add	r3, r6
 800b0e4:	6023      	str	r3, [r4, #0]
 800b0e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b0ea:	462a      	mov	r2, r5
 800b0ec:	f000 ff77 	bl	800bfde <_realloc_r>
 800b0f0:	4606      	mov	r6, r0
 800b0f2:	2800      	cmp	r0, #0
 800b0f4:	d1e0      	bne.n	800b0b8 <__ssputs_r+0x5c>
 800b0f6:	6921      	ldr	r1, [r4, #16]
 800b0f8:	4650      	mov	r0, sl
 800b0fa:	f001 f967 	bl	800c3cc <_free_r>
 800b0fe:	230c      	movs	r3, #12
 800b100:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b104:	f8ca 3000 	str.w	r3, [sl]
 800b108:	89a3      	ldrh	r3, [r4, #12]
 800b10a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b10e:	81a3      	strh	r3, [r4, #12]
 800b110:	e7e9      	b.n	800b0e6 <__ssputs_r+0x8a>
	...

0800b114 <_svfiprintf_r>:
 800b114:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b118:	4698      	mov	r8, r3
 800b11a:	898b      	ldrh	r3, [r1, #12]
 800b11c:	b09d      	sub	sp, #116	@ 0x74
 800b11e:	4607      	mov	r7, r0
 800b120:	061b      	lsls	r3, r3, #24
 800b122:	460d      	mov	r5, r1
 800b124:	4614      	mov	r4, r2
 800b126:	d510      	bpl.n	800b14a <_svfiprintf_r+0x36>
 800b128:	690b      	ldr	r3, [r1, #16]
 800b12a:	b973      	cbnz	r3, 800b14a <_svfiprintf_r+0x36>
 800b12c:	2140      	movs	r1, #64	@ 0x40
 800b12e:	f000 fa59 	bl	800b5e4 <_malloc_r>
 800b132:	6028      	str	r0, [r5, #0]
 800b134:	6128      	str	r0, [r5, #16]
 800b136:	b930      	cbnz	r0, 800b146 <_svfiprintf_r+0x32>
 800b138:	230c      	movs	r3, #12
 800b13a:	603b      	str	r3, [r7, #0]
 800b13c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b140:	b01d      	add	sp, #116	@ 0x74
 800b142:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b146:	2340      	movs	r3, #64	@ 0x40
 800b148:	616b      	str	r3, [r5, #20]
 800b14a:	2300      	movs	r3, #0
 800b14c:	f8cd 800c 	str.w	r8, [sp, #12]
 800b150:	f04f 0901 	mov.w	r9, #1
 800b154:	f8df 81a0 	ldr.w	r8, [pc, #416]	@ 800b2f8 <_svfiprintf_r+0x1e4>
 800b158:	9309      	str	r3, [sp, #36]	@ 0x24
 800b15a:	2320      	movs	r3, #32
 800b15c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b160:	2330      	movs	r3, #48	@ 0x30
 800b162:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b166:	4623      	mov	r3, r4
 800b168:	469a      	mov	sl, r3
 800b16a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b16e:	b10a      	cbz	r2, 800b174 <_svfiprintf_r+0x60>
 800b170:	2a25      	cmp	r2, #37	@ 0x25
 800b172:	d1f9      	bne.n	800b168 <_svfiprintf_r+0x54>
 800b174:	ebba 0b04 	subs.w	fp, sl, r4
 800b178:	d00b      	beq.n	800b192 <_svfiprintf_r+0x7e>
 800b17a:	465b      	mov	r3, fp
 800b17c:	4622      	mov	r2, r4
 800b17e:	4629      	mov	r1, r5
 800b180:	4638      	mov	r0, r7
 800b182:	f7ff ff6b 	bl	800b05c <__ssputs_r>
 800b186:	3001      	adds	r0, #1
 800b188:	f000 80a7 	beq.w	800b2da <_svfiprintf_r+0x1c6>
 800b18c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b18e:	445a      	add	r2, fp
 800b190:	9209      	str	r2, [sp, #36]	@ 0x24
 800b192:	f89a 3000 	ldrb.w	r3, [sl]
 800b196:	2b00      	cmp	r3, #0
 800b198:	f000 809f 	beq.w	800b2da <_svfiprintf_r+0x1c6>
 800b19c:	2300      	movs	r3, #0
 800b19e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800b1a2:	f10a 0a01 	add.w	sl, sl, #1
 800b1a6:	9304      	str	r3, [sp, #16]
 800b1a8:	9307      	str	r3, [sp, #28]
 800b1aa:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b1ae:	931a      	str	r3, [sp, #104]	@ 0x68
 800b1b0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b1b4:	4654      	mov	r4, sl
 800b1b6:	2205      	movs	r2, #5
 800b1b8:	484f      	ldr	r0, [pc, #316]	@ (800b2f8 <_svfiprintf_r+0x1e4>)
 800b1ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b1be:	f7ff f8df 	bl	800a380 <memchr>
 800b1c2:	9a04      	ldr	r2, [sp, #16]
 800b1c4:	b9d8      	cbnz	r0, 800b1fe <_svfiprintf_r+0xea>
 800b1c6:	06d0      	lsls	r0, r2, #27
 800b1c8:	bf44      	itt	mi
 800b1ca:	2320      	movmi	r3, #32
 800b1cc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b1d0:	0711      	lsls	r1, r2, #28
 800b1d2:	bf44      	itt	mi
 800b1d4:	232b      	movmi	r3, #43	@ 0x2b
 800b1d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b1da:	f89a 3000 	ldrb.w	r3, [sl]
 800b1de:	2b2a      	cmp	r3, #42	@ 0x2a
 800b1e0:	d015      	beq.n	800b20e <_svfiprintf_r+0xfa>
 800b1e2:	9a07      	ldr	r2, [sp, #28]
 800b1e4:	4654      	mov	r4, sl
 800b1e6:	2000      	movs	r0, #0
 800b1e8:	f04f 0c0a 	mov.w	ip, #10
 800b1ec:	4621      	mov	r1, r4
 800b1ee:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b1f2:	3b30      	subs	r3, #48	@ 0x30
 800b1f4:	2b09      	cmp	r3, #9
 800b1f6:	d94b      	bls.n	800b290 <_svfiprintf_r+0x17c>
 800b1f8:	b1b0      	cbz	r0, 800b228 <_svfiprintf_r+0x114>
 800b1fa:	9207      	str	r2, [sp, #28]
 800b1fc:	e014      	b.n	800b228 <_svfiprintf_r+0x114>
 800b1fe:	eba0 0308 	sub.w	r3, r0, r8
 800b202:	46a2      	mov	sl, r4
 800b204:	fa09 f303 	lsl.w	r3, r9, r3
 800b208:	4313      	orrs	r3, r2
 800b20a:	9304      	str	r3, [sp, #16]
 800b20c:	e7d2      	b.n	800b1b4 <_svfiprintf_r+0xa0>
 800b20e:	9b03      	ldr	r3, [sp, #12]
 800b210:	1d19      	adds	r1, r3, #4
 800b212:	681b      	ldr	r3, [r3, #0]
 800b214:	2b00      	cmp	r3, #0
 800b216:	9103      	str	r1, [sp, #12]
 800b218:	bfbb      	ittet	lt
 800b21a:	425b      	neglt	r3, r3
 800b21c:	f042 0202 	orrlt.w	r2, r2, #2
 800b220:	9307      	strge	r3, [sp, #28]
 800b222:	9307      	strlt	r3, [sp, #28]
 800b224:	bfb8      	it	lt
 800b226:	9204      	strlt	r2, [sp, #16]
 800b228:	7823      	ldrb	r3, [r4, #0]
 800b22a:	2b2e      	cmp	r3, #46	@ 0x2e
 800b22c:	d10a      	bne.n	800b244 <_svfiprintf_r+0x130>
 800b22e:	7863      	ldrb	r3, [r4, #1]
 800b230:	2b2a      	cmp	r3, #42	@ 0x2a
 800b232:	d132      	bne.n	800b29a <_svfiprintf_r+0x186>
 800b234:	9b03      	ldr	r3, [sp, #12]
 800b236:	3402      	adds	r4, #2
 800b238:	1d1a      	adds	r2, r3, #4
 800b23a:	681b      	ldr	r3, [r3, #0]
 800b23c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b240:	9203      	str	r2, [sp, #12]
 800b242:	9305      	str	r3, [sp, #20]
 800b244:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800b308 <_svfiprintf_r+0x1f4>
 800b248:	2203      	movs	r2, #3
 800b24a:	7821      	ldrb	r1, [r4, #0]
 800b24c:	4650      	mov	r0, sl
 800b24e:	f7ff f897 	bl	800a380 <memchr>
 800b252:	b138      	cbz	r0, 800b264 <_svfiprintf_r+0x150>
 800b254:	eba0 000a 	sub.w	r0, r0, sl
 800b258:	2240      	movs	r2, #64	@ 0x40
 800b25a:	9b04      	ldr	r3, [sp, #16]
 800b25c:	3401      	adds	r4, #1
 800b25e:	4082      	lsls	r2, r0
 800b260:	4313      	orrs	r3, r2
 800b262:	9304      	str	r3, [sp, #16]
 800b264:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b268:	2206      	movs	r2, #6
 800b26a:	4824      	ldr	r0, [pc, #144]	@ (800b2fc <_svfiprintf_r+0x1e8>)
 800b26c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b270:	f7ff f886 	bl	800a380 <memchr>
 800b274:	2800      	cmp	r0, #0
 800b276:	d036      	beq.n	800b2e6 <_svfiprintf_r+0x1d2>
 800b278:	4b21      	ldr	r3, [pc, #132]	@ (800b300 <_svfiprintf_r+0x1ec>)
 800b27a:	bb1b      	cbnz	r3, 800b2c4 <_svfiprintf_r+0x1b0>
 800b27c:	9b03      	ldr	r3, [sp, #12]
 800b27e:	3307      	adds	r3, #7
 800b280:	f023 0307 	bic.w	r3, r3, #7
 800b284:	3308      	adds	r3, #8
 800b286:	9303      	str	r3, [sp, #12]
 800b288:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b28a:	4433      	add	r3, r6
 800b28c:	9309      	str	r3, [sp, #36]	@ 0x24
 800b28e:	e76a      	b.n	800b166 <_svfiprintf_r+0x52>
 800b290:	fb0c 3202 	mla	r2, ip, r2, r3
 800b294:	460c      	mov	r4, r1
 800b296:	2001      	movs	r0, #1
 800b298:	e7a8      	b.n	800b1ec <_svfiprintf_r+0xd8>
 800b29a:	2300      	movs	r3, #0
 800b29c:	3401      	adds	r4, #1
 800b29e:	f04f 0c0a 	mov.w	ip, #10
 800b2a2:	4619      	mov	r1, r3
 800b2a4:	9305      	str	r3, [sp, #20]
 800b2a6:	4620      	mov	r0, r4
 800b2a8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b2ac:	3a30      	subs	r2, #48	@ 0x30
 800b2ae:	2a09      	cmp	r2, #9
 800b2b0:	d903      	bls.n	800b2ba <_svfiprintf_r+0x1a6>
 800b2b2:	2b00      	cmp	r3, #0
 800b2b4:	d0c6      	beq.n	800b244 <_svfiprintf_r+0x130>
 800b2b6:	9105      	str	r1, [sp, #20]
 800b2b8:	e7c4      	b.n	800b244 <_svfiprintf_r+0x130>
 800b2ba:	fb0c 2101 	mla	r1, ip, r1, r2
 800b2be:	4604      	mov	r4, r0
 800b2c0:	2301      	movs	r3, #1
 800b2c2:	e7f0      	b.n	800b2a6 <_svfiprintf_r+0x192>
 800b2c4:	ab03      	add	r3, sp, #12
 800b2c6:	462a      	mov	r2, r5
 800b2c8:	a904      	add	r1, sp, #16
 800b2ca:	4638      	mov	r0, r7
 800b2cc:	9300      	str	r3, [sp, #0]
 800b2ce:	4b0d      	ldr	r3, [pc, #52]	@ (800b304 <_svfiprintf_r+0x1f0>)
 800b2d0:	f7fe fb6c 	bl	80099ac <_printf_float>
 800b2d4:	1c42      	adds	r2, r0, #1
 800b2d6:	4606      	mov	r6, r0
 800b2d8:	d1d6      	bne.n	800b288 <_svfiprintf_r+0x174>
 800b2da:	89ab      	ldrh	r3, [r5, #12]
 800b2dc:	065b      	lsls	r3, r3, #25
 800b2de:	f53f af2d 	bmi.w	800b13c <_svfiprintf_r+0x28>
 800b2e2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b2e4:	e72c      	b.n	800b140 <_svfiprintf_r+0x2c>
 800b2e6:	ab03      	add	r3, sp, #12
 800b2e8:	462a      	mov	r2, r5
 800b2ea:	a904      	add	r1, sp, #16
 800b2ec:	4638      	mov	r0, r7
 800b2ee:	9300      	str	r3, [sp, #0]
 800b2f0:	4b04      	ldr	r3, [pc, #16]	@ (800b304 <_svfiprintf_r+0x1f0>)
 800b2f2:	f7fe fdf7 	bl	8009ee4 <_printf_i>
 800b2f6:	e7ed      	b.n	800b2d4 <_svfiprintf_r+0x1c0>
 800b2f8:	0800dd1d 	.word	0x0800dd1d
 800b2fc:	0800dd27 	.word	0x0800dd27
 800b300:	080099ad 	.word	0x080099ad
 800b304:	0800b05d 	.word	0x0800b05d
 800b308:	0800dd23 	.word	0x0800dd23

0800b30c <__sfputc_r>:
 800b30c:	6893      	ldr	r3, [r2, #8]
 800b30e:	3b01      	subs	r3, #1
 800b310:	2b00      	cmp	r3, #0
 800b312:	b410      	push	{r4}
 800b314:	6093      	str	r3, [r2, #8]
 800b316:	da08      	bge.n	800b32a <__sfputc_r+0x1e>
 800b318:	6994      	ldr	r4, [r2, #24]
 800b31a:	42a3      	cmp	r3, r4
 800b31c:	db01      	blt.n	800b322 <__sfputc_r+0x16>
 800b31e:	290a      	cmp	r1, #10
 800b320:	d103      	bne.n	800b32a <__sfputc_r+0x1e>
 800b322:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b326:	f000 be88 	b.w	800c03a <__swbuf_r>
 800b32a:	6813      	ldr	r3, [r2, #0]
 800b32c:	1c58      	adds	r0, r3, #1
 800b32e:	6010      	str	r0, [r2, #0]
 800b330:	4608      	mov	r0, r1
 800b332:	7019      	strb	r1, [r3, #0]
 800b334:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b338:	4770      	bx	lr

0800b33a <__sfputs_r>:
 800b33a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b33c:	4606      	mov	r6, r0
 800b33e:	460f      	mov	r7, r1
 800b340:	4614      	mov	r4, r2
 800b342:	18d5      	adds	r5, r2, r3
 800b344:	42ac      	cmp	r4, r5
 800b346:	d101      	bne.n	800b34c <__sfputs_r+0x12>
 800b348:	2000      	movs	r0, #0
 800b34a:	e007      	b.n	800b35c <__sfputs_r+0x22>
 800b34c:	463a      	mov	r2, r7
 800b34e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b352:	4630      	mov	r0, r6
 800b354:	f7ff ffda 	bl	800b30c <__sfputc_r>
 800b358:	1c43      	adds	r3, r0, #1
 800b35a:	d1f3      	bne.n	800b344 <__sfputs_r+0xa>
 800b35c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b360 <_vfiprintf_r>:
 800b360:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b364:	460d      	mov	r5, r1
 800b366:	b09d      	sub	sp, #116	@ 0x74
 800b368:	4614      	mov	r4, r2
 800b36a:	4698      	mov	r8, r3
 800b36c:	4606      	mov	r6, r0
 800b36e:	b118      	cbz	r0, 800b378 <_vfiprintf_r+0x18>
 800b370:	6a03      	ldr	r3, [r0, #32]
 800b372:	b90b      	cbnz	r3, 800b378 <_vfiprintf_r+0x18>
 800b374:	f7fe ff82 	bl	800a27c <__sinit>
 800b378:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b37a:	07d9      	lsls	r1, r3, #31
 800b37c:	d405      	bmi.n	800b38a <_vfiprintf_r+0x2a>
 800b37e:	89ab      	ldrh	r3, [r5, #12]
 800b380:	059a      	lsls	r2, r3, #22
 800b382:	d402      	bmi.n	800b38a <_vfiprintf_r+0x2a>
 800b384:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b386:	f7fe fff4 	bl	800a372 <__retarget_lock_acquire_recursive>
 800b38a:	89ab      	ldrh	r3, [r5, #12]
 800b38c:	071b      	lsls	r3, r3, #28
 800b38e:	d501      	bpl.n	800b394 <_vfiprintf_r+0x34>
 800b390:	692b      	ldr	r3, [r5, #16]
 800b392:	b99b      	cbnz	r3, 800b3bc <_vfiprintf_r+0x5c>
 800b394:	4629      	mov	r1, r5
 800b396:	4630      	mov	r0, r6
 800b398:	f000 fe8e 	bl	800c0b8 <__swsetup_r>
 800b39c:	b170      	cbz	r0, 800b3bc <_vfiprintf_r+0x5c>
 800b39e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b3a0:	07dc      	lsls	r4, r3, #31
 800b3a2:	d504      	bpl.n	800b3ae <_vfiprintf_r+0x4e>
 800b3a4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b3a8:	b01d      	add	sp, #116	@ 0x74
 800b3aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b3ae:	89ab      	ldrh	r3, [r5, #12]
 800b3b0:	0598      	lsls	r0, r3, #22
 800b3b2:	d4f7      	bmi.n	800b3a4 <_vfiprintf_r+0x44>
 800b3b4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b3b6:	f7fe ffdd 	bl	800a374 <__retarget_lock_release_recursive>
 800b3ba:	e7f3      	b.n	800b3a4 <_vfiprintf_r+0x44>
 800b3bc:	2300      	movs	r3, #0
 800b3be:	f8cd 800c 	str.w	r8, [sp, #12]
 800b3c2:	f04f 0901 	mov.w	r9, #1
 800b3c6:	f8df 81b4 	ldr.w	r8, [pc, #436]	@ 800b57c <_vfiprintf_r+0x21c>
 800b3ca:	9309      	str	r3, [sp, #36]	@ 0x24
 800b3cc:	2320      	movs	r3, #32
 800b3ce:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b3d2:	2330      	movs	r3, #48	@ 0x30
 800b3d4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b3d8:	4623      	mov	r3, r4
 800b3da:	469a      	mov	sl, r3
 800b3dc:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b3e0:	b10a      	cbz	r2, 800b3e6 <_vfiprintf_r+0x86>
 800b3e2:	2a25      	cmp	r2, #37	@ 0x25
 800b3e4:	d1f9      	bne.n	800b3da <_vfiprintf_r+0x7a>
 800b3e6:	ebba 0b04 	subs.w	fp, sl, r4
 800b3ea:	d00b      	beq.n	800b404 <_vfiprintf_r+0xa4>
 800b3ec:	465b      	mov	r3, fp
 800b3ee:	4622      	mov	r2, r4
 800b3f0:	4629      	mov	r1, r5
 800b3f2:	4630      	mov	r0, r6
 800b3f4:	f7ff ffa1 	bl	800b33a <__sfputs_r>
 800b3f8:	3001      	adds	r0, #1
 800b3fa:	f000 80a7 	beq.w	800b54c <_vfiprintf_r+0x1ec>
 800b3fe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b400:	445a      	add	r2, fp
 800b402:	9209      	str	r2, [sp, #36]	@ 0x24
 800b404:	f89a 3000 	ldrb.w	r3, [sl]
 800b408:	2b00      	cmp	r3, #0
 800b40a:	f000 809f 	beq.w	800b54c <_vfiprintf_r+0x1ec>
 800b40e:	2300      	movs	r3, #0
 800b410:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800b414:	f10a 0a01 	add.w	sl, sl, #1
 800b418:	9304      	str	r3, [sp, #16]
 800b41a:	9307      	str	r3, [sp, #28]
 800b41c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b420:	931a      	str	r3, [sp, #104]	@ 0x68
 800b422:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b426:	4654      	mov	r4, sl
 800b428:	2205      	movs	r2, #5
 800b42a:	4854      	ldr	r0, [pc, #336]	@ (800b57c <_vfiprintf_r+0x21c>)
 800b42c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b430:	f7fe ffa6 	bl	800a380 <memchr>
 800b434:	9a04      	ldr	r2, [sp, #16]
 800b436:	b9d8      	cbnz	r0, 800b470 <_vfiprintf_r+0x110>
 800b438:	06d1      	lsls	r1, r2, #27
 800b43a:	bf44      	itt	mi
 800b43c:	2320      	movmi	r3, #32
 800b43e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b442:	0713      	lsls	r3, r2, #28
 800b444:	bf44      	itt	mi
 800b446:	232b      	movmi	r3, #43	@ 0x2b
 800b448:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b44c:	f89a 3000 	ldrb.w	r3, [sl]
 800b450:	2b2a      	cmp	r3, #42	@ 0x2a
 800b452:	d015      	beq.n	800b480 <_vfiprintf_r+0x120>
 800b454:	9a07      	ldr	r2, [sp, #28]
 800b456:	4654      	mov	r4, sl
 800b458:	2000      	movs	r0, #0
 800b45a:	f04f 0c0a 	mov.w	ip, #10
 800b45e:	4621      	mov	r1, r4
 800b460:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b464:	3b30      	subs	r3, #48	@ 0x30
 800b466:	2b09      	cmp	r3, #9
 800b468:	d94b      	bls.n	800b502 <_vfiprintf_r+0x1a2>
 800b46a:	b1b0      	cbz	r0, 800b49a <_vfiprintf_r+0x13a>
 800b46c:	9207      	str	r2, [sp, #28]
 800b46e:	e014      	b.n	800b49a <_vfiprintf_r+0x13a>
 800b470:	eba0 0308 	sub.w	r3, r0, r8
 800b474:	46a2      	mov	sl, r4
 800b476:	fa09 f303 	lsl.w	r3, r9, r3
 800b47a:	4313      	orrs	r3, r2
 800b47c:	9304      	str	r3, [sp, #16]
 800b47e:	e7d2      	b.n	800b426 <_vfiprintf_r+0xc6>
 800b480:	9b03      	ldr	r3, [sp, #12]
 800b482:	1d19      	adds	r1, r3, #4
 800b484:	681b      	ldr	r3, [r3, #0]
 800b486:	2b00      	cmp	r3, #0
 800b488:	9103      	str	r1, [sp, #12]
 800b48a:	bfbb      	ittet	lt
 800b48c:	425b      	neglt	r3, r3
 800b48e:	f042 0202 	orrlt.w	r2, r2, #2
 800b492:	9307      	strge	r3, [sp, #28]
 800b494:	9307      	strlt	r3, [sp, #28]
 800b496:	bfb8      	it	lt
 800b498:	9204      	strlt	r2, [sp, #16]
 800b49a:	7823      	ldrb	r3, [r4, #0]
 800b49c:	2b2e      	cmp	r3, #46	@ 0x2e
 800b49e:	d10a      	bne.n	800b4b6 <_vfiprintf_r+0x156>
 800b4a0:	7863      	ldrb	r3, [r4, #1]
 800b4a2:	2b2a      	cmp	r3, #42	@ 0x2a
 800b4a4:	d132      	bne.n	800b50c <_vfiprintf_r+0x1ac>
 800b4a6:	9b03      	ldr	r3, [sp, #12]
 800b4a8:	3402      	adds	r4, #2
 800b4aa:	1d1a      	adds	r2, r3, #4
 800b4ac:	681b      	ldr	r3, [r3, #0]
 800b4ae:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b4b2:	9203      	str	r2, [sp, #12]
 800b4b4:	9305      	str	r3, [sp, #20]
 800b4b6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800b58c <_vfiprintf_r+0x22c>
 800b4ba:	2203      	movs	r2, #3
 800b4bc:	7821      	ldrb	r1, [r4, #0]
 800b4be:	4650      	mov	r0, sl
 800b4c0:	f7fe ff5e 	bl	800a380 <memchr>
 800b4c4:	b138      	cbz	r0, 800b4d6 <_vfiprintf_r+0x176>
 800b4c6:	eba0 000a 	sub.w	r0, r0, sl
 800b4ca:	2240      	movs	r2, #64	@ 0x40
 800b4cc:	9b04      	ldr	r3, [sp, #16]
 800b4ce:	3401      	adds	r4, #1
 800b4d0:	4082      	lsls	r2, r0
 800b4d2:	4313      	orrs	r3, r2
 800b4d4:	9304      	str	r3, [sp, #16]
 800b4d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b4da:	2206      	movs	r2, #6
 800b4dc:	4828      	ldr	r0, [pc, #160]	@ (800b580 <_vfiprintf_r+0x220>)
 800b4de:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b4e2:	f7fe ff4d 	bl	800a380 <memchr>
 800b4e6:	2800      	cmp	r0, #0
 800b4e8:	d03f      	beq.n	800b56a <_vfiprintf_r+0x20a>
 800b4ea:	4b26      	ldr	r3, [pc, #152]	@ (800b584 <_vfiprintf_r+0x224>)
 800b4ec:	bb1b      	cbnz	r3, 800b536 <_vfiprintf_r+0x1d6>
 800b4ee:	9b03      	ldr	r3, [sp, #12]
 800b4f0:	3307      	adds	r3, #7
 800b4f2:	f023 0307 	bic.w	r3, r3, #7
 800b4f6:	3308      	adds	r3, #8
 800b4f8:	9303      	str	r3, [sp, #12]
 800b4fa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b4fc:	443b      	add	r3, r7
 800b4fe:	9309      	str	r3, [sp, #36]	@ 0x24
 800b500:	e76a      	b.n	800b3d8 <_vfiprintf_r+0x78>
 800b502:	fb0c 3202 	mla	r2, ip, r2, r3
 800b506:	460c      	mov	r4, r1
 800b508:	2001      	movs	r0, #1
 800b50a:	e7a8      	b.n	800b45e <_vfiprintf_r+0xfe>
 800b50c:	2300      	movs	r3, #0
 800b50e:	3401      	adds	r4, #1
 800b510:	f04f 0c0a 	mov.w	ip, #10
 800b514:	4619      	mov	r1, r3
 800b516:	9305      	str	r3, [sp, #20]
 800b518:	4620      	mov	r0, r4
 800b51a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b51e:	3a30      	subs	r2, #48	@ 0x30
 800b520:	2a09      	cmp	r2, #9
 800b522:	d903      	bls.n	800b52c <_vfiprintf_r+0x1cc>
 800b524:	2b00      	cmp	r3, #0
 800b526:	d0c6      	beq.n	800b4b6 <_vfiprintf_r+0x156>
 800b528:	9105      	str	r1, [sp, #20]
 800b52a:	e7c4      	b.n	800b4b6 <_vfiprintf_r+0x156>
 800b52c:	fb0c 2101 	mla	r1, ip, r1, r2
 800b530:	4604      	mov	r4, r0
 800b532:	2301      	movs	r3, #1
 800b534:	e7f0      	b.n	800b518 <_vfiprintf_r+0x1b8>
 800b536:	ab03      	add	r3, sp, #12
 800b538:	462a      	mov	r2, r5
 800b53a:	a904      	add	r1, sp, #16
 800b53c:	4630      	mov	r0, r6
 800b53e:	9300      	str	r3, [sp, #0]
 800b540:	4b11      	ldr	r3, [pc, #68]	@ (800b588 <_vfiprintf_r+0x228>)
 800b542:	f7fe fa33 	bl	80099ac <_printf_float>
 800b546:	4607      	mov	r7, r0
 800b548:	1c78      	adds	r0, r7, #1
 800b54a:	d1d6      	bne.n	800b4fa <_vfiprintf_r+0x19a>
 800b54c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b54e:	07d9      	lsls	r1, r3, #31
 800b550:	d405      	bmi.n	800b55e <_vfiprintf_r+0x1fe>
 800b552:	89ab      	ldrh	r3, [r5, #12]
 800b554:	059a      	lsls	r2, r3, #22
 800b556:	d402      	bmi.n	800b55e <_vfiprintf_r+0x1fe>
 800b558:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b55a:	f7fe ff0b 	bl	800a374 <__retarget_lock_release_recursive>
 800b55e:	89ab      	ldrh	r3, [r5, #12]
 800b560:	065b      	lsls	r3, r3, #25
 800b562:	f53f af1f 	bmi.w	800b3a4 <_vfiprintf_r+0x44>
 800b566:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b568:	e71e      	b.n	800b3a8 <_vfiprintf_r+0x48>
 800b56a:	ab03      	add	r3, sp, #12
 800b56c:	462a      	mov	r2, r5
 800b56e:	a904      	add	r1, sp, #16
 800b570:	4630      	mov	r0, r6
 800b572:	9300      	str	r3, [sp, #0]
 800b574:	4b04      	ldr	r3, [pc, #16]	@ (800b588 <_vfiprintf_r+0x228>)
 800b576:	f7fe fcb5 	bl	8009ee4 <_printf_i>
 800b57a:	e7e4      	b.n	800b546 <_vfiprintf_r+0x1e6>
 800b57c:	0800dd1d 	.word	0x0800dd1d
 800b580:	0800dd27 	.word	0x0800dd27
 800b584:	080099ad 	.word	0x080099ad
 800b588:	0800b33b 	.word	0x0800b33b
 800b58c:	0800dd23 	.word	0x0800dd23

0800b590 <malloc>:
 800b590:	4b02      	ldr	r3, [pc, #8]	@ (800b59c <malloc+0xc>)
 800b592:	4601      	mov	r1, r0
 800b594:	6818      	ldr	r0, [r3, #0]
 800b596:	f000 b825 	b.w	800b5e4 <_malloc_r>
 800b59a:	bf00      	nop
 800b59c:	20000034 	.word	0x20000034

0800b5a0 <sbrk_aligned>:
 800b5a0:	b570      	push	{r4, r5, r6, lr}
 800b5a2:	4e0f      	ldr	r6, [pc, #60]	@ (800b5e0 <sbrk_aligned+0x40>)
 800b5a4:	460c      	mov	r4, r1
 800b5a6:	4605      	mov	r5, r0
 800b5a8:	6831      	ldr	r1, [r6, #0]
 800b5aa:	b911      	cbnz	r1, 800b5b2 <sbrk_aligned+0x12>
 800b5ac:	f000 fe8a 	bl	800c2c4 <_sbrk_r>
 800b5b0:	6030      	str	r0, [r6, #0]
 800b5b2:	4621      	mov	r1, r4
 800b5b4:	4628      	mov	r0, r5
 800b5b6:	f000 fe85 	bl	800c2c4 <_sbrk_r>
 800b5ba:	1c43      	adds	r3, r0, #1
 800b5bc:	d103      	bne.n	800b5c6 <sbrk_aligned+0x26>
 800b5be:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800b5c2:	4620      	mov	r0, r4
 800b5c4:	bd70      	pop	{r4, r5, r6, pc}
 800b5c6:	1cc4      	adds	r4, r0, #3
 800b5c8:	f024 0403 	bic.w	r4, r4, #3
 800b5cc:	42a0      	cmp	r0, r4
 800b5ce:	d0f8      	beq.n	800b5c2 <sbrk_aligned+0x22>
 800b5d0:	1a21      	subs	r1, r4, r0
 800b5d2:	4628      	mov	r0, r5
 800b5d4:	f000 fe76 	bl	800c2c4 <_sbrk_r>
 800b5d8:	3001      	adds	r0, #1
 800b5da:	d1f2      	bne.n	800b5c2 <sbrk_aligned+0x22>
 800b5dc:	e7ef      	b.n	800b5be <sbrk_aligned+0x1e>
 800b5de:	bf00      	nop
 800b5e0:	2000054c 	.word	0x2000054c

0800b5e4 <_malloc_r>:
 800b5e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b5e8:	1ccd      	adds	r5, r1, #3
 800b5ea:	4606      	mov	r6, r0
 800b5ec:	f025 0503 	bic.w	r5, r5, #3
 800b5f0:	3508      	adds	r5, #8
 800b5f2:	2d0c      	cmp	r5, #12
 800b5f4:	bf38      	it	cc
 800b5f6:	250c      	movcc	r5, #12
 800b5f8:	2d00      	cmp	r5, #0
 800b5fa:	db01      	blt.n	800b600 <_malloc_r+0x1c>
 800b5fc:	42a9      	cmp	r1, r5
 800b5fe:	d904      	bls.n	800b60a <_malloc_r+0x26>
 800b600:	230c      	movs	r3, #12
 800b602:	6033      	str	r3, [r6, #0]
 800b604:	2000      	movs	r0, #0
 800b606:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b60a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800b6e0 <_malloc_r+0xfc>
 800b60e:	f000 f915 	bl	800b83c <__malloc_lock>
 800b612:	f8d8 3000 	ldr.w	r3, [r8]
 800b616:	461c      	mov	r4, r3
 800b618:	bb44      	cbnz	r4, 800b66c <_malloc_r+0x88>
 800b61a:	4629      	mov	r1, r5
 800b61c:	4630      	mov	r0, r6
 800b61e:	f7ff ffbf 	bl	800b5a0 <sbrk_aligned>
 800b622:	1c43      	adds	r3, r0, #1
 800b624:	4604      	mov	r4, r0
 800b626:	d158      	bne.n	800b6da <_malloc_r+0xf6>
 800b628:	f8d8 4000 	ldr.w	r4, [r8]
 800b62c:	4627      	mov	r7, r4
 800b62e:	2f00      	cmp	r7, #0
 800b630:	d143      	bne.n	800b6ba <_malloc_r+0xd6>
 800b632:	2c00      	cmp	r4, #0
 800b634:	d04b      	beq.n	800b6ce <_malloc_r+0xea>
 800b636:	6823      	ldr	r3, [r4, #0]
 800b638:	4639      	mov	r1, r7
 800b63a:	4630      	mov	r0, r6
 800b63c:	eb04 0903 	add.w	r9, r4, r3
 800b640:	f000 fe40 	bl	800c2c4 <_sbrk_r>
 800b644:	4581      	cmp	r9, r0
 800b646:	d142      	bne.n	800b6ce <_malloc_r+0xea>
 800b648:	6821      	ldr	r1, [r4, #0]
 800b64a:	4630      	mov	r0, r6
 800b64c:	1a6d      	subs	r5, r5, r1
 800b64e:	4629      	mov	r1, r5
 800b650:	f7ff ffa6 	bl	800b5a0 <sbrk_aligned>
 800b654:	3001      	adds	r0, #1
 800b656:	d03a      	beq.n	800b6ce <_malloc_r+0xea>
 800b658:	6823      	ldr	r3, [r4, #0]
 800b65a:	442b      	add	r3, r5
 800b65c:	6023      	str	r3, [r4, #0]
 800b65e:	f8d8 3000 	ldr.w	r3, [r8]
 800b662:	685a      	ldr	r2, [r3, #4]
 800b664:	bb62      	cbnz	r2, 800b6c0 <_malloc_r+0xdc>
 800b666:	f8c8 7000 	str.w	r7, [r8]
 800b66a:	e00f      	b.n	800b68c <_malloc_r+0xa8>
 800b66c:	6822      	ldr	r2, [r4, #0]
 800b66e:	1b52      	subs	r2, r2, r5
 800b670:	d420      	bmi.n	800b6b4 <_malloc_r+0xd0>
 800b672:	2a0b      	cmp	r2, #11
 800b674:	d917      	bls.n	800b6a6 <_malloc_r+0xc2>
 800b676:	1961      	adds	r1, r4, r5
 800b678:	42a3      	cmp	r3, r4
 800b67a:	6025      	str	r5, [r4, #0]
 800b67c:	bf18      	it	ne
 800b67e:	6059      	strne	r1, [r3, #4]
 800b680:	6863      	ldr	r3, [r4, #4]
 800b682:	bf08      	it	eq
 800b684:	f8c8 1000 	streq.w	r1, [r8]
 800b688:	5162      	str	r2, [r4, r5]
 800b68a:	604b      	str	r3, [r1, #4]
 800b68c:	4630      	mov	r0, r6
 800b68e:	f000 f8db 	bl	800b848 <__malloc_unlock>
 800b692:	f104 000b 	add.w	r0, r4, #11
 800b696:	1d23      	adds	r3, r4, #4
 800b698:	f020 0007 	bic.w	r0, r0, #7
 800b69c:	1ac2      	subs	r2, r0, r3
 800b69e:	bf1c      	itt	ne
 800b6a0:	1a1b      	subne	r3, r3, r0
 800b6a2:	50a3      	strne	r3, [r4, r2]
 800b6a4:	e7af      	b.n	800b606 <_malloc_r+0x22>
 800b6a6:	6862      	ldr	r2, [r4, #4]
 800b6a8:	42a3      	cmp	r3, r4
 800b6aa:	bf0c      	ite	eq
 800b6ac:	f8c8 2000 	streq.w	r2, [r8]
 800b6b0:	605a      	strne	r2, [r3, #4]
 800b6b2:	e7eb      	b.n	800b68c <_malloc_r+0xa8>
 800b6b4:	4623      	mov	r3, r4
 800b6b6:	6864      	ldr	r4, [r4, #4]
 800b6b8:	e7ae      	b.n	800b618 <_malloc_r+0x34>
 800b6ba:	463c      	mov	r4, r7
 800b6bc:	687f      	ldr	r7, [r7, #4]
 800b6be:	e7b6      	b.n	800b62e <_malloc_r+0x4a>
 800b6c0:	461a      	mov	r2, r3
 800b6c2:	685b      	ldr	r3, [r3, #4]
 800b6c4:	42a3      	cmp	r3, r4
 800b6c6:	d1fb      	bne.n	800b6c0 <_malloc_r+0xdc>
 800b6c8:	2300      	movs	r3, #0
 800b6ca:	6053      	str	r3, [r2, #4]
 800b6cc:	e7de      	b.n	800b68c <_malloc_r+0xa8>
 800b6ce:	230c      	movs	r3, #12
 800b6d0:	4630      	mov	r0, r6
 800b6d2:	6033      	str	r3, [r6, #0]
 800b6d4:	f000 f8b8 	bl	800b848 <__malloc_unlock>
 800b6d8:	e794      	b.n	800b604 <_malloc_r+0x20>
 800b6da:	6005      	str	r5, [r0, #0]
 800b6dc:	e7d6      	b.n	800b68c <_malloc_r+0xa8>
 800b6de:	bf00      	nop
 800b6e0:	20000550 	.word	0x20000550

0800b6e4 <__sflush_r>:
 800b6e4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b6e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b6ec:	0716      	lsls	r6, r2, #28
 800b6ee:	4605      	mov	r5, r0
 800b6f0:	460c      	mov	r4, r1
 800b6f2:	d454      	bmi.n	800b79e <__sflush_r+0xba>
 800b6f4:	684b      	ldr	r3, [r1, #4]
 800b6f6:	2b00      	cmp	r3, #0
 800b6f8:	dc02      	bgt.n	800b700 <__sflush_r+0x1c>
 800b6fa:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800b6fc:	2b00      	cmp	r3, #0
 800b6fe:	dd48      	ble.n	800b792 <__sflush_r+0xae>
 800b700:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b702:	2e00      	cmp	r6, #0
 800b704:	d045      	beq.n	800b792 <__sflush_r+0xae>
 800b706:	2300      	movs	r3, #0
 800b708:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800b70c:	682f      	ldr	r7, [r5, #0]
 800b70e:	6a21      	ldr	r1, [r4, #32]
 800b710:	602b      	str	r3, [r5, #0]
 800b712:	d030      	beq.n	800b776 <__sflush_r+0x92>
 800b714:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800b716:	89a3      	ldrh	r3, [r4, #12]
 800b718:	0759      	lsls	r1, r3, #29
 800b71a:	d505      	bpl.n	800b728 <__sflush_r+0x44>
 800b71c:	6863      	ldr	r3, [r4, #4]
 800b71e:	1ad2      	subs	r2, r2, r3
 800b720:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800b722:	b10b      	cbz	r3, 800b728 <__sflush_r+0x44>
 800b724:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800b726:	1ad2      	subs	r2, r2, r3
 800b728:	2300      	movs	r3, #0
 800b72a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b72c:	6a21      	ldr	r1, [r4, #32]
 800b72e:	4628      	mov	r0, r5
 800b730:	47b0      	blx	r6
 800b732:	1c43      	adds	r3, r0, #1
 800b734:	89a3      	ldrh	r3, [r4, #12]
 800b736:	d106      	bne.n	800b746 <__sflush_r+0x62>
 800b738:	6829      	ldr	r1, [r5, #0]
 800b73a:	291d      	cmp	r1, #29
 800b73c:	d82b      	bhi.n	800b796 <__sflush_r+0xb2>
 800b73e:	4a2a      	ldr	r2, [pc, #168]	@ (800b7e8 <__sflush_r+0x104>)
 800b740:	40ca      	lsrs	r2, r1
 800b742:	07d6      	lsls	r6, r2, #31
 800b744:	d527      	bpl.n	800b796 <__sflush_r+0xb2>
 800b746:	2200      	movs	r2, #0
 800b748:	04d9      	lsls	r1, r3, #19
 800b74a:	6062      	str	r2, [r4, #4]
 800b74c:	6922      	ldr	r2, [r4, #16]
 800b74e:	6022      	str	r2, [r4, #0]
 800b750:	d504      	bpl.n	800b75c <__sflush_r+0x78>
 800b752:	1c42      	adds	r2, r0, #1
 800b754:	d101      	bne.n	800b75a <__sflush_r+0x76>
 800b756:	682b      	ldr	r3, [r5, #0]
 800b758:	b903      	cbnz	r3, 800b75c <__sflush_r+0x78>
 800b75a:	6560      	str	r0, [r4, #84]	@ 0x54
 800b75c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b75e:	602f      	str	r7, [r5, #0]
 800b760:	b1b9      	cbz	r1, 800b792 <__sflush_r+0xae>
 800b762:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b766:	4299      	cmp	r1, r3
 800b768:	d002      	beq.n	800b770 <__sflush_r+0x8c>
 800b76a:	4628      	mov	r0, r5
 800b76c:	f000 fe2e 	bl	800c3cc <_free_r>
 800b770:	2300      	movs	r3, #0
 800b772:	6363      	str	r3, [r4, #52]	@ 0x34
 800b774:	e00d      	b.n	800b792 <__sflush_r+0xae>
 800b776:	2301      	movs	r3, #1
 800b778:	4628      	mov	r0, r5
 800b77a:	47b0      	blx	r6
 800b77c:	4602      	mov	r2, r0
 800b77e:	1c50      	adds	r0, r2, #1
 800b780:	d1c9      	bne.n	800b716 <__sflush_r+0x32>
 800b782:	682b      	ldr	r3, [r5, #0]
 800b784:	2b00      	cmp	r3, #0
 800b786:	d0c6      	beq.n	800b716 <__sflush_r+0x32>
 800b788:	2b1d      	cmp	r3, #29
 800b78a:	d001      	beq.n	800b790 <__sflush_r+0xac>
 800b78c:	2b16      	cmp	r3, #22
 800b78e:	d11d      	bne.n	800b7cc <__sflush_r+0xe8>
 800b790:	602f      	str	r7, [r5, #0]
 800b792:	2000      	movs	r0, #0
 800b794:	e021      	b.n	800b7da <__sflush_r+0xf6>
 800b796:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b79a:	b21b      	sxth	r3, r3
 800b79c:	e01a      	b.n	800b7d4 <__sflush_r+0xf0>
 800b79e:	690f      	ldr	r7, [r1, #16]
 800b7a0:	2f00      	cmp	r7, #0
 800b7a2:	d0f6      	beq.n	800b792 <__sflush_r+0xae>
 800b7a4:	0793      	lsls	r3, r2, #30
 800b7a6:	680e      	ldr	r6, [r1, #0]
 800b7a8:	600f      	str	r7, [r1, #0]
 800b7aa:	bf0c      	ite	eq
 800b7ac:	694b      	ldreq	r3, [r1, #20]
 800b7ae:	2300      	movne	r3, #0
 800b7b0:	eba6 0807 	sub.w	r8, r6, r7
 800b7b4:	608b      	str	r3, [r1, #8]
 800b7b6:	f1b8 0f00 	cmp.w	r8, #0
 800b7ba:	ddea      	ble.n	800b792 <__sflush_r+0xae>
 800b7bc:	4643      	mov	r3, r8
 800b7be:	463a      	mov	r2, r7
 800b7c0:	6a21      	ldr	r1, [r4, #32]
 800b7c2:	4628      	mov	r0, r5
 800b7c4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800b7c6:	47b0      	blx	r6
 800b7c8:	2800      	cmp	r0, #0
 800b7ca:	dc08      	bgt.n	800b7de <__sflush_r+0xfa>
 800b7cc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b7d0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b7d4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b7d8:	81a3      	strh	r3, [r4, #12]
 800b7da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b7de:	4407      	add	r7, r0
 800b7e0:	eba8 0800 	sub.w	r8, r8, r0
 800b7e4:	e7e7      	b.n	800b7b6 <__sflush_r+0xd2>
 800b7e6:	bf00      	nop
 800b7e8:	20400001 	.word	0x20400001

0800b7ec <_fflush_r>:
 800b7ec:	b538      	push	{r3, r4, r5, lr}
 800b7ee:	690b      	ldr	r3, [r1, #16]
 800b7f0:	4605      	mov	r5, r0
 800b7f2:	460c      	mov	r4, r1
 800b7f4:	b913      	cbnz	r3, 800b7fc <_fflush_r+0x10>
 800b7f6:	2500      	movs	r5, #0
 800b7f8:	4628      	mov	r0, r5
 800b7fa:	bd38      	pop	{r3, r4, r5, pc}
 800b7fc:	b118      	cbz	r0, 800b806 <_fflush_r+0x1a>
 800b7fe:	6a03      	ldr	r3, [r0, #32]
 800b800:	b90b      	cbnz	r3, 800b806 <_fflush_r+0x1a>
 800b802:	f7fe fd3b 	bl	800a27c <__sinit>
 800b806:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b80a:	2b00      	cmp	r3, #0
 800b80c:	d0f3      	beq.n	800b7f6 <_fflush_r+0xa>
 800b80e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800b810:	07d0      	lsls	r0, r2, #31
 800b812:	d404      	bmi.n	800b81e <_fflush_r+0x32>
 800b814:	0599      	lsls	r1, r3, #22
 800b816:	d402      	bmi.n	800b81e <_fflush_r+0x32>
 800b818:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b81a:	f7fe fdaa 	bl	800a372 <__retarget_lock_acquire_recursive>
 800b81e:	4628      	mov	r0, r5
 800b820:	4621      	mov	r1, r4
 800b822:	f7ff ff5f 	bl	800b6e4 <__sflush_r>
 800b826:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b828:	4605      	mov	r5, r0
 800b82a:	07da      	lsls	r2, r3, #31
 800b82c:	d4e4      	bmi.n	800b7f8 <_fflush_r+0xc>
 800b82e:	89a3      	ldrh	r3, [r4, #12]
 800b830:	059b      	lsls	r3, r3, #22
 800b832:	d4e1      	bmi.n	800b7f8 <_fflush_r+0xc>
 800b834:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b836:	f7fe fd9d 	bl	800a374 <__retarget_lock_release_recursive>
 800b83a:	e7dd      	b.n	800b7f8 <_fflush_r+0xc>

0800b83c <__malloc_lock>:
 800b83c:	4801      	ldr	r0, [pc, #4]	@ (800b844 <__malloc_lock+0x8>)
 800b83e:	f7fe bd98 	b.w	800a372 <__retarget_lock_acquire_recursive>
 800b842:	bf00      	nop
 800b844:	20000548 	.word	0x20000548

0800b848 <__malloc_unlock>:
 800b848:	4801      	ldr	r0, [pc, #4]	@ (800b850 <__malloc_unlock+0x8>)
 800b84a:	f7fe bd93 	b.w	800a374 <__retarget_lock_release_recursive>
 800b84e:	bf00      	nop
 800b850:	20000548 	.word	0x20000548

0800b854 <_Balloc>:
 800b854:	b570      	push	{r4, r5, r6, lr}
 800b856:	69c6      	ldr	r6, [r0, #28]
 800b858:	4604      	mov	r4, r0
 800b85a:	460d      	mov	r5, r1
 800b85c:	b976      	cbnz	r6, 800b87c <_Balloc+0x28>
 800b85e:	2010      	movs	r0, #16
 800b860:	f7ff fe96 	bl	800b590 <malloc>
 800b864:	4602      	mov	r2, r0
 800b866:	61e0      	str	r0, [r4, #28]
 800b868:	b920      	cbnz	r0, 800b874 <_Balloc+0x20>
 800b86a:	4b18      	ldr	r3, [pc, #96]	@ (800b8cc <_Balloc+0x78>)
 800b86c:	216b      	movs	r1, #107	@ 0x6b
 800b86e:	4818      	ldr	r0, [pc, #96]	@ (800b8d0 <_Balloc+0x7c>)
 800b870:	f000 fd7a 	bl	800c368 <__assert_func>
 800b874:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b878:	6006      	str	r6, [r0, #0]
 800b87a:	60c6      	str	r6, [r0, #12]
 800b87c:	69e6      	ldr	r6, [r4, #28]
 800b87e:	68f3      	ldr	r3, [r6, #12]
 800b880:	b183      	cbz	r3, 800b8a4 <_Balloc+0x50>
 800b882:	69e3      	ldr	r3, [r4, #28]
 800b884:	68db      	ldr	r3, [r3, #12]
 800b886:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b88a:	b9b8      	cbnz	r0, 800b8bc <_Balloc+0x68>
 800b88c:	2101      	movs	r1, #1
 800b88e:	4620      	mov	r0, r4
 800b890:	fa01 f605 	lsl.w	r6, r1, r5
 800b894:	1d72      	adds	r2, r6, #5
 800b896:	0092      	lsls	r2, r2, #2
 800b898:	f000 fd84 	bl	800c3a4 <_calloc_r>
 800b89c:	b160      	cbz	r0, 800b8b8 <_Balloc+0x64>
 800b89e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b8a2:	e00e      	b.n	800b8c2 <_Balloc+0x6e>
 800b8a4:	2221      	movs	r2, #33	@ 0x21
 800b8a6:	2104      	movs	r1, #4
 800b8a8:	4620      	mov	r0, r4
 800b8aa:	f000 fd7b 	bl	800c3a4 <_calloc_r>
 800b8ae:	69e3      	ldr	r3, [r4, #28]
 800b8b0:	60f0      	str	r0, [r6, #12]
 800b8b2:	68db      	ldr	r3, [r3, #12]
 800b8b4:	2b00      	cmp	r3, #0
 800b8b6:	d1e4      	bne.n	800b882 <_Balloc+0x2e>
 800b8b8:	2000      	movs	r0, #0
 800b8ba:	bd70      	pop	{r4, r5, r6, pc}
 800b8bc:	6802      	ldr	r2, [r0, #0]
 800b8be:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b8c2:	2300      	movs	r3, #0
 800b8c4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b8c8:	e7f7      	b.n	800b8ba <_Balloc+0x66>
 800b8ca:	bf00      	nop
 800b8cc:	0800dc9d 	.word	0x0800dc9d
 800b8d0:	0800dd2e 	.word	0x0800dd2e

0800b8d4 <_Bfree>:
 800b8d4:	b570      	push	{r4, r5, r6, lr}
 800b8d6:	69c6      	ldr	r6, [r0, #28]
 800b8d8:	4605      	mov	r5, r0
 800b8da:	460c      	mov	r4, r1
 800b8dc:	b976      	cbnz	r6, 800b8fc <_Bfree+0x28>
 800b8de:	2010      	movs	r0, #16
 800b8e0:	f7ff fe56 	bl	800b590 <malloc>
 800b8e4:	4602      	mov	r2, r0
 800b8e6:	61e8      	str	r0, [r5, #28]
 800b8e8:	b920      	cbnz	r0, 800b8f4 <_Bfree+0x20>
 800b8ea:	4b09      	ldr	r3, [pc, #36]	@ (800b910 <_Bfree+0x3c>)
 800b8ec:	218f      	movs	r1, #143	@ 0x8f
 800b8ee:	4809      	ldr	r0, [pc, #36]	@ (800b914 <_Bfree+0x40>)
 800b8f0:	f000 fd3a 	bl	800c368 <__assert_func>
 800b8f4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b8f8:	6006      	str	r6, [r0, #0]
 800b8fa:	60c6      	str	r6, [r0, #12]
 800b8fc:	b13c      	cbz	r4, 800b90e <_Bfree+0x3a>
 800b8fe:	69eb      	ldr	r3, [r5, #28]
 800b900:	6862      	ldr	r2, [r4, #4]
 800b902:	68db      	ldr	r3, [r3, #12]
 800b904:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b908:	6021      	str	r1, [r4, #0]
 800b90a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b90e:	bd70      	pop	{r4, r5, r6, pc}
 800b910:	0800dc9d 	.word	0x0800dc9d
 800b914:	0800dd2e 	.word	0x0800dd2e

0800b918 <__multadd>:
 800b918:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b91c:	f101 0c14 	add.w	ip, r1, #20
 800b920:	4607      	mov	r7, r0
 800b922:	460c      	mov	r4, r1
 800b924:	461e      	mov	r6, r3
 800b926:	690d      	ldr	r5, [r1, #16]
 800b928:	2000      	movs	r0, #0
 800b92a:	f8dc 3000 	ldr.w	r3, [ip]
 800b92e:	3001      	adds	r0, #1
 800b930:	b299      	uxth	r1, r3
 800b932:	4285      	cmp	r5, r0
 800b934:	fb02 6101 	mla	r1, r2, r1, r6
 800b938:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b93c:	ea4f 4311 	mov.w	r3, r1, lsr #16
 800b940:	b289      	uxth	r1, r1
 800b942:	fb02 3306 	mla	r3, r2, r6, r3
 800b946:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b94a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b94e:	f84c 1b04 	str.w	r1, [ip], #4
 800b952:	dcea      	bgt.n	800b92a <__multadd+0x12>
 800b954:	b30e      	cbz	r6, 800b99a <__multadd+0x82>
 800b956:	68a3      	ldr	r3, [r4, #8]
 800b958:	42ab      	cmp	r3, r5
 800b95a:	dc19      	bgt.n	800b990 <__multadd+0x78>
 800b95c:	6861      	ldr	r1, [r4, #4]
 800b95e:	4638      	mov	r0, r7
 800b960:	3101      	adds	r1, #1
 800b962:	f7ff ff77 	bl	800b854 <_Balloc>
 800b966:	4680      	mov	r8, r0
 800b968:	b928      	cbnz	r0, 800b976 <__multadd+0x5e>
 800b96a:	4602      	mov	r2, r0
 800b96c:	4b0c      	ldr	r3, [pc, #48]	@ (800b9a0 <__multadd+0x88>)
 800b96e:	21ba      	movs	r1, #186	@ 0xba
 800b970:	480c      	ldr	r0, [pc, #48]	@ (800b9a4 <__multadd+0x8c>)
 800b972:	f000 fcf9 	bl	800c368 <__assert_func>
 800b976:	6922      	ldr	r2, [r4, #16]
 800b978:	f104 010c 	add.w	r1, r4, #12
 800b97c:	300c      	adds	r0, #12
 800b97e:	3202      	adds	r2, #2
 800b980:	0092      	lsls	r2, r2, #2
 800b982:	f000 fce3 	bl	800c34c <memcpy>
 800b986:	4621      	mov	r1, r4
 800b988:	4644      	mov	r4, r8
 800b98a:	4638      	mov	r0, r7
 800b98c:	f7ff ffa2 	bl	800b8d4 <_Bfree>
 800b990:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b994:	3501      	adds	r5, #1
 800b996:	615e      	str	r6, [r3, #20]
 800b998:	6125      	str	r5, [r4, #16]
 800b99a:	4620      	mov	r0, r4
 800b99c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b9a0:	0800dd0c 	.word	0x0800dd0c
 800b9a4:	0800dd2e 	.word	0x0800dd2e

0800b9a8 <__hi0bits>:
 800b9a8:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800b9ac:	4603      	mov	r3, r0
 800b9ae:	bf36      	itet	cc
 800b9b0:	0403      	lslcc	r3, r0, #16
 800b9b2:	2000      	movcs	r0, #0
 800b9b4:	2010      	movcc	r0, #16
 800b9b6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800b9ba:	bf3c      	itt	cc
 800b9bc:	021b      	lslcc	r3, r3, #8
 800b9be:	3008      	addcc	r0, #8
 800b9c0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b9c4:	bf3c      	itt	cc
 800b9c6:	011b      	lslcc	r3, r3, #4
 800b9c8:	3004      	addcc	r0, #4
 800b9ca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b9ce:	bf3c      	itt	cc
 800b9d0:	009b      	lslcc	r3, r3, #2
 800b9d2:	3002      	addcc	r0, #2
 800b9d4:	2b00      	cmp	r3, #0
 800b9d6:	db05      	blt.n	800b9e4 <__hi0bits+0x3c>
 800b9d8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800b9dc:	f100 0001 	add.w	r0, r0, #1
 800b9e0:	bf08      	it	eq
 800b9e2:	2020      	moveq	r0, #32
 800b9e4:	4770      	bx	lr

0800b9e6 <__lo0bits>:
 800b9e6:	6803      	ldr	r3, [r0, #0]
 800b9e8:	4602      	mov	r2, r0
 800b9ea:	f013 0007 	ands.w	r0, r3, #7
 800b9ee:	d00b      	beq.n	800ba08 <__lo0bits+0x22>
 800b9f0:	07d9      	lsls	r1, r3, #31
 800b9f2:	d421      	bmi.n	800ba38 <__lo0bits+0x52>
 800b9f4:	0798      	lsls	r0, r3, #30
 800b9f6:	bf47      	ittee	mi
 800b9f8:	085b      	lsrmi	r3, r3, #1
 800b9fa:	2001      	movmi	r0, #1
 800b9fc:	089b      	lsrpl	r3, r3, #2
 800b9fe:	2002      	movpl	r0, #2
 800ba00:	bf4c      	ite	mi
 800ba02:	6013      	strmi	r3, [r2, #0]
 800ba04:	6013      	strpl	r3, [r2, #0]
 800ba06:	4770      	bx	lr
 800ba08:	b299      	uxth	r1, r3
 800ba0a:	b909      	cbnz	r1, 800ba10 <__lo0bits+0x2a>
 800ba0c:	0c1b      	lsrs	r3, r3, #16
 800ba0e:	2010      	movs	r0, #16
 800ba10:	b2d9      	uxtb	r1, r3
 800ba12:	b909      	cbnz	r1, 800ba18 <__lo0bits+0x32>
 800ba14:	3008      	adds	r0, #8
 800ba16:	0a1b      	lsrs	r3, r3, #8
 800ba18:	0719      	lsls	r1, r3, #28
 800ba1a:	bf04      	itt	eq
 800ba1c:	091b      	lsreq	r3, r3, #4
 800ba1e:	3004      	addeq	r0, #4
 800ba20:	0799      	lsls	r1, r3, #30
 800ba22:	bf04      	itt	eq
 800ba24:	089b      	lsreq	r3, r3, #2
 800ba26:	3002      	addeq	r0, #2
 800ba28:	07d9      	lsls	r1, r3, #31
 800ba2a:	d403      	bmi.n	800ba34 <__lo0bits+0x4e>
 800ba2c:	085b      	lsrs	r3, r3, #1
 800ba2e:	f100 0001 	add.w	r0, r0, #1
 800ba32:	d003      	beq.n	800ba3c <__lo0bits+0x56>
 800ba34:	6013      	str	r3, [r2, #0]
 800ba36:	4770      	bx	lr
 800ba38:	2000      	movs	r0, #0
 800ba3a:	4770      	bx	lr
 800ba3c:	2020      	movs	r0, #32
 800ba3e:	4770      	bx	lr

0800ba40 <__i2b>:
 800ba40:	b510      	push	{r4, lr}
 800ba42:	460c      	mov	r4, r1
 800ba44:	2101      	movs	r1, #1
 800ba46:	f7ff ff05 	bl	800b854 <_Balloc>
 800ba4a:	4602      	mov	r2, r0
 800ba4c:	b928      	cbnz	r0, 800ba5a <__i2b+0x1a>
 800ba4e:	4b05      	ldr	r3, [pc, #20]	@ (800ba64 <__i2b+0x24>)
 800ba50:	f240 1145 	movw	r1, #325	@ 0x145
 800ba54:	4804      	ldr	r0, [pc, #16]	@ (800ba68 <__i2b+0x28>)
 800ba56:	f000 fc87 	bl	800c368 <__assert_func>
 800ba5a:	2301      	movs	r3, #1
 800ba5c:	6144      	str	r4, [r0, #20]
 800ba5e:	6103      	str	r3, [r0, #16]
 800ba60:	bd10      	pop	{r4, pc}
 800ba62:	bf00      	nop
 800ba64:	0800dd0c 	.word	0x0800dd0c
 800ba68:	0800dd2e 	.word	0x0800dd2e

0800ba6c <__multiply>:
 800ba6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba70:	4617      	mov	r7, r2
 800ba72:	690a      	ldr	r2, [r1, #16]
 800ba74:	4689      	mov	r9, r1
 800ba76:	b085      	sub	sp, #20
 800ba78:	693b      	ldr	r3, [r7, #16]
 800ba7a:	429a      	cmp	r2, r3
 800ba7c:	bfa2      	ittt	ge
 800ba7e:	463b      	movge	r3, r7
 800ba80:	460f      	movge	r7, r1
 800ba82:	4699      	movge	r9, r3
 800ba84:	693d      	ldr	r5, [r7, #16]
 800ba86:	68bb      	ldr	r3, [r7, #8]
 800ba88:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800ba8c:	6879      	ldr	r1, [r7, #4]
 800ba8e:	eb05 060a 	add.w	r6, r5, sl
 800ba92:	42b3      	cmp	r3, r6
 800ba94:	bfb8      	it	lt
 800ba96:	3101      	addlt	r1, #1
 800ba98:	f7ff fedc 	bl	800b854 <_Balloc>
 800ba9c:	b930      	cbnz	r0, 800baac <__multiply+0x40>
 800ba9e:	4602      	mov	r2, r0
 800baa0:	4b42      	ldr	r3, [pc, #264]	@ (800bbac <__multiply+0x140>)
 800baa2:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800baa6:	4842      	ldr	r0, [pc, #264]	@ (800bbb0 <__multiply+0x144>)
 800baa8:	f000 fc5e 	bl	800c368 <__assert_func>
 800baac:	f100 0414 	add.w	r4, r0, #20
 800bab0:	2200      	movs	r2, #0
 800bab2:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800bab6:	4623      	mov	r3, r4
 800bab8:	4573      	cmp	r3, lr
 800baba:	d320      	bcc.n	800bafe <__multiply+0x92>
 800babc:	f107 0814 	add.w	r8, r7, #20
 800bac0:	f109 0114 	add.w	r1, r9, #20
 800bac4:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800bac8:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800bacc:	9302      	str	r3, [sp, #8]
 800bace:	1beb      	subs	r3, r5, r7
 800bad0:	3715      	adds	r7, #21
 800bad2:	3b15      	subs	r3, #21
 800bad4:	f023 0303 	bic.w	r3, r3, #3
 800bad8:	3304      	adds	r3, #4
 800bada:	42bd      	cmp	r5, r7
 800badc:	bf38      	it	cc
 800bade:	2304      	movcc	r3, #4
 800bae0:	9301      	str	r3, [sp, #4]
 800bae2:	9b02      	ldr	r3, [sp, #8]
 800bae4:	9103      	str	r1, [sp, #12]
 800bae6:	428b      	cmp	r3, r1
 800bae8:	d80c      	bhi.n	800bb04 <__multiply+0x98>
 800baea:	2e00      	cmp	r6, #0
 800baec:	dd03      	ble.n	800baf6 <__multiply+0x8a>
 800baee:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800baf2:	2b00      	cmp	r3, #0
 800baf4:	d057      	beq.n	800bba6 <__multiply+0x13a>
 800baf6:	6106      	str	r6, [r0, #16]
 800baf8:	b005      	add	sp, #20
 800bafa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bafe:	f843 2b04 	str.w	r2, [r3], #4
 800bb02:	e7d9      	b.n	800bab8 <__multiply+0x4c>
 800bb04:	f8b1 a000 	ldrh.w	sl, [r1]
 800bb08:	f1ba 0f00 	cmp.w	sl, #0
 800bb0c:	d021      	beq.n	800bb52 <__multiply+0xe6>
 800bb0e:	46c4      	mov	ip, r8
 800bb10:	46a1      	mov	r9, r4
 800bb12:	2700      	movs	r7, #0
 800bb14:	f85c 2b04 	ldr.w	r2, [ip], #4
 800bb18:	f8d9 3000 	ldr.w	r3, [r9]
 800bb1c:	fa1f fb82 	uxth.w	fp, r2
 800bb20:	4565      	cmp	r5, ip
 800bb22:	b29b      	uxth	r3, r3
 800bb24:	ea4f 4212 	mov.w	r2, r2, lsr #16
 800bb28:	fb0a 330b 	mla	r3, sl, fp, r3
 800bb2c:	443b      	add	r3, r7
 800bb2e:	f8d9 7000 	ldr.w	r7, [r9]
 800bb32:	ea4f 4717 	mov.w	r7, r7, lsr #16
 800bb36:	fb0a 7202 	mla	r2, sl, r2, r7
 800bb3a:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800bb3e:	b29b      	uxth	r3, r3
 800bb40:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800bb44:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800bb48:	f849 3b04 	str.w	r3, [r9], #4
 800bb4c:	d8e2      	bhi.n	800bb14 <__multiply+0xa8>
 800bb4e:	9b01      	ldr	r3, [sp, #4]
 800bb50:	50e7      	str	r7, [r4, r3]
 800bb52:	9b03      	ldr	r3, [sp, #12]
 800bb54:	3104      	adds	r1, #4
 800bb56:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800bb5a:	f1b9 0f00 	cmp.w	r9, #0
 800bb5e:	d020      	beq.n	800bba2 <__multiply+0x136>
 800bb60:	6823      	ldr	r3, [r4, #0]
 800bb62:	4647      	mov	r7, r8
 800bb64:	46a4      	mov	ip, r4
 800bb66:	f04f 0a00 	mov.w	sl, #0
 800bb6a:	f8b7 b000 	ldrh.w	fp, [r7]
 800bb6e:	b29b      	uxth	r3, r3
 800bb70:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800bb74:	fb09 220b 	mla	r2, r9, fp, r2
 800bb78:	4452      	add	r2, sl
 800bb7a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800bb7e:	f84c 3b04 	str.w	r3, [ip], #4
 800bb82:	f857 3b04 	ldr.w	r3, [r7], #4
 800bb86:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800bb8a:	f8bc 3000 	ldrh.w	r3, [ip]
 800bb8e:	42bd      	cmp	r5, r7
 800bb90:	fb09 330a 	mla	r3, r9, sl, r3
 800bb94:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800bb98:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800bb9c:	d8e5      	bhi.n	800bb6a <__multiply+0xfe>
 800bb9e:	9a01      	ldr	r2, [sp, #4]
 800bba0:	50a3      	str	r3, [r4, r2]
 800bba2:	3404      	adds	r4, #4
 800bba4:	e79d      	b.n	800bae2 <__multiply+0x76>
 800bba6:	3e01      	subs	r6, #1
 800bba8:	e79f      	b.n	800baea <__multiply+0x7e>
 800bbaa:	bf00      	nop
 800bbac:	0800dd0c 	.word	0x0800dd0c
 800bbb0:	0800dd2e 	.word	0x0800dd2e

0800bbb4 <__pow5mult>:
 800bbb4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bbb8:	4615      	mov	r5, r2
 800bbba:	f012 0203 	ands.w	r2, r2, #3
 800bbbe:	4607      	mov	r7, r0
 800bbc0:	460e      	mov	r6, r1
 800bbc2:	d007      	beq.n	800bbd4 <__pow5mult+0x20>
 800bbc4:	3a01      	subs	r2, #1
 800bbc6:	4c25      	ldr	r4, [pc, #148]	@ (800bc5c <__pow5mult+0xa8>)
 800bbc8:	2300      	movs	r3, #0
 800bbca:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800bbce:	f7ff fea3 	bl	800b918 <__multadd>
 800bbd2:	4606      	mov	r6, r0
 800bbd4:	10ad      	asrs	r5, r5, #2
 800bbd6:	d03d      	beq.n	800bc54 <__pow5mult+0xa0>
 800bbd8:	69fc      	ldr	r4, [r7, #28]
 800bbda:	b97c      	cbnz	r4, 800bbfc <__pow5mult+0x48>
 800bbdc:	2010      	movs	r0, #16
 800bbde:	f7ff fcd7 	bl	800b590 <malloc>
 800bbe2:	4602      	mov	r2, r0
 800bbe4:	61f8      	str	r0, [r7, #28]
 800bbe6:	b928      	cbnz	r0, 800bbf4 <__pow5mult+0x40>
 800bbe8:	4b1d      	ldr	r3, [pc, #116]	@ (800bc60 <__pow5mult+0xac>)
 800bbea:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800bbee:	481d      	ldr	r0, [pc, #116]	@ (800bc64 <__pow5mult+0xb0>)
 800bbf0:	f000 fbba 	bl	800c368 <__assert_func>
 800bbf4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800bbf8:	6004      	str	r4, [r0, #0]
 800bbfa:	60c4      	str	r4, [r0, #12]
 800bbfc:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800bc00:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800bc04:	b94c      	cbnz	r4, 800bc1a <__pow5mult+0x66>
 800bc06:	f240 2171 	movw	r1, #625	@ 0x271
 800bc0a:	4638      	mov	r0, r7
 800bc0c:	f7ff ff18 	bl	800ba40 <__i2b>
 800bc10:	2300      	movs	r3, #0
 800bc12:	4604      	mov	r4, r0
 800bc14:	f8c8 0008 	str.w	r0, [r8, #8]
 800bc18:	6003      	str	r3, [r0, #0]
 800bc1a:	f04f 0900 	mov.w	r9, #0
 800bc1e:	07eb      	lsls	r3, r5, #31
 800bc20:	d50a      	bpl.n	800bc38 <__pow5mult+0x84>
 800bc22:	4631      	mov	r1, r6
 800bc24:	4622      	mov	r2, r4
 800bc26:	4638      	mov	r0, r7
 800bc28:	f7ff ff20 	bl	800ba6c <__multiply>
 800bc2c:	4680      	mov	r8, r0
 800bc2e:	4631      	mov	r1, r6
 800bc30:	4638      	mov	r0, r7
 800bc32:	4646      	mov	r6, r8
 800bc34:	f7ff fe4e 	bl	800b8d4 <_Bfree>
 800bc38:	106d      	asrs	r5, r5, #1
 800bc3a:	d00b      	beq.n	800bc54 <__pow5mult+0xa0>
 800bc3c:	6820      	ldr	r0, [r4, #0]
 800bc3e:	b938      	cbnz	r0, 800bc50 <__pow5mult+0x9c>
 800bc40:	4622      	mov	r2, r4
 800bc42:	4621      	mov	r1, r4
 800bc44:	4638      	mov	r0, r7
 800bc46:	f7ff ff11 	bl	800ba6c <__multiply>
 800bc4a:	6020      	str	r0, [r4, #0]
 800bc4c:	f8c0 9000 	str.w	r9, [r0]
 800bc50:	4604      	mov	r4, r0
 800bc52:	e7e4      	b.n	800bc1e <__pow5mult+0x6a>
 800bc54:	4630      	mov	r0, r6
 800bc56:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bc5a:	bf00      	nop
 800bc5c:	0800ddd0 	.word	0x0800ddd0
 800bc60:	0800dc9d 	.word	0x0800dc9d
 800bc64:	0800dd2e 	.word	0x0800dd2e

0800bc68 <__lshift>:
 800bc68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bc6c:	460c      	mov	r4, r1
 800bc6e:	4607      	mov	r7, r0
 800bc70:	4691      	mov	r9, r2
 800bc72:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800bc76:	6923      	ldr	r3, [r4, #16]
 800bc78:	6849      	ldr	r1, [r1, #4]
 800bc7a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800bc7e:	68a3      	ldr	r3, [r4, #8]
 800bc80:	f108 0601 	add.w	r6, r8, #1
 800bc84:	42b3      	cmp	r3, r6
 800bc86:	db0b      	blt.n	800bca0 <__lshift+0x38>
 800bc88:	4638      	mov	r0, r7
 800bc8a:	f7ff fde3 	bl	800b854 <_Balloc>
 800bc8e:	4605      	mov	r5, r0
 800bc90:	b948      	cbnz	r0, 800bca6 <__lshift+0x3e>
 800bc92:	4602      	mov	r2, r0
 800bc94:	4b28      	ldr	r3, [pc, #160]	@ (800bd38 <__lshift+0xd0>)
 800bc96:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800bc9a:	4828      	ldr	r0, [pc, #160]	@ (800bd3c <__lshift+0xd4>)
 800bc9c:	f000 fb64 	bl	800c368 <__assert_func>
 800bca0:	3101      	adds	r1, #1
 800bca2:	005b      	lsls	r3, r3, #1
 800bca4:	e7ee      	b.n	800bc84 <__lshift+0x1c>
 800bca6:	2300      	movs	r3, #0
 800bca8:	f100 0114 	add.w	r1, r0, #20
 800bcac:	f100 0210 	add.w	r2, r0, #16
 800bcb0:	4618      	mov	r0, r3
 800bcb2:	4553      	cmp	r3, sl
 800bcb4:	db33      	blt.n	800bd1e <__lshift+0xb6>
 800bcb6:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800bcba:	f104 0314 	add.w	r3, r4, #20
 800bcbe:	6920      	ldr	r0, [r4, #16]
 800bcc0:	f019 091f 	ands.w	r9, r9, #31
 800bcc4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800bcc8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800bccc:	d02b      	beq.n	800bd26 <__lshift+0xbe>
 800bcce:	f1c9 0e20 	rsb	lr, r9, #32
 800bcd2:	468a      	mov	sl, r1
 800bcd4:	2200      	movs	r2, #0
 800bcd6:	6818      	ldr	r0, [r3, #0]
 800bcd8:	fa00 f009 	lsl.w	r0, r0, r9
 800bcdc:	4310      	orrs	r0, r2
 800bcde:	f84a 0b04 	str.w	r0, [sl], #4
 800bce2:	f853 2b04 	ldr.w	r2, [r3], #4
 800bce6:	459c      	cmp	ip, r3
 800bce8:	fa22 f20e 	lsr.w	r2, r2, lr
 800bcec:	d8f3      	bhi.n	800bcd6 <__lshift+0x6e>
 800bcee:	ebac 0304 	sub.w	r3, ip, r4
 800bcf2:	f104 0015 	add.w	r0, r4, #21
 800bcf6:	3b15      	subs	r3, #21
 800bcf8:	f023 0303 	bic.w	r3, r3, #3
 800bcfc:	3304      	adds	r3, #4
 800bcfe:	4560      	cmp	r0, ip
 800bd00:	bf88      	it	hi
 800bd02:	2304      	movhi	r3, #4
 800bd04:	50ca      	str	r2, [r1, r3]
 800bd06:	b10a      	cbz	r2, 800bd0c <__lshift+0xa4>
 800bd08:	f108 0602 	add.w	r6, r8, #2
 800bd0c:	3e01      	subs	r6, #1
 800bd0e:	4638      	mov	r0, r7
 800bd10:	4621      	mov	r1, r4
 800bd12:	612e      	str	r6, [r5, #16]
 800bd14:	f7ff fdde 	bl	800b8d4 <_Bfree>
 800bd18:	4628      	mov	r0, r5
 800bd1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bd1e:	3301      	adds	r3, #1
 800bd20:	f842 0f04 	str.w	r0, [r2, #4]!
 800bd24:	e7c5      	b.n	800bcb2 <__lshift+0x4a>
 800bd26:	3904      	subs	r1, #4
 800bd28:	f853 2b04 	ldr.w	r2, [r3], #4
 800bd2c:	459c      	cmp	ip, r3
 800bd2e:	f841 2f04 	str.w	r2, [r1, #4]!
 800bd32:	d8f9      	bhi.n	800bd28 <__lshift+0xc0>
 800bd34:	e7ea      	b.n	800bd0c <__lshift+0xa4>
 800bd36:	bf00      	nop
 800bd38:	0800dd0c 	.word	0x0800dd0c
 800bd3c:	0800dd2e 	.word	0x0800dd2e

0800bd40 <__mcmp>:
 800bd40:	4603      	mov	r3, r0
 800bd42:	690a      	ldr	r2, [r1, #16]
 800bd44:	6900      	ldr	r0, [r0, #16]
 800bd46:	1a80      	subs	r0, r0, r2
 800bd48:	b530      	push	{r4, r5, lr}
 800bd4a:	d10e      	bne.n	800bd6a <__mcmp+0x2a>
 800bd4c:	3314      	adds	r3, #20
 800bd4e:	3114      	adds	r1, #20
 800bd50:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800bd54:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800bd58:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800bd5c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800bd60:	4295      	cmp	r5, r2
 800bd62:	d003      	beq.n	800bd6c <__mcmp+0x2c>
 800bd64:	d205      	bcs.n	800bd72 <__mcmp+0x32>
 800bd66:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800bd6a:	bd30      	pop	{r4, r5, pc}
 800bd6c:	42a3      	cmp	r3, r4
 800bd6e:	d3f3      	bcc.n	800bd58 <__mcmp+0x18>
 800bd70:	e7fb      	b.n	800bd6a <__mcmp+0x2a>
 800bd72:	2001      	movs	r0, #1
 800bd74:	e7f9      	b.n	800bd6a <__mcmp+0x2a>
	...

0800bd78 <__mdiff>:
 800bd78:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd7c:	4689      	mov	r9, r1
 800bd7e:	4606      	mov	r6, r0
 800bd80:	4611      	mov	r1, r2
 800bd82:	4614      	mov	r4, r2
 800bd84:	4648      	mov	r0, r9
 800bd86:	f7ff ffdb 	bl	800bd40 <__mcmp>
 800bd8a:	1e05      	subs	r5, r0, #0
 800bd8c:	d112      	bne.n	800bdb4 <__mdiff+0x3c>
 800bd8e:	4629      	mov	r1, r5
 800bd90:	4630      	mov	r0, r6
 800bd92:	f7ff fd5f 	bl	800b854 <_Balloc>
 800bd96:	4602      	mov	r2, r0
 800bd98:	b928      	cbnz	r0, 800bda6 <__mdiff+0x2e>
 800bd9a:	4b41      	ldr	r3, [pc, #260]	@ (800bea0 <__mdiff+0x128>)
 800bd9c:	f240 2137 	movw	r1, #567	@ 0x237
 800bda0:	4840      	ldr	r0, [pc, #256]	@ (800bea4 <__mdiff+0x12c>)
 800bda2:	f000 fae1 	bl	800c368 <__assert_func>
 800bda6:	2301      	movs	r3, #1
 800bda8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800bdac:	4610      	mov	r0, r2
 800bdae:	b003      	add	sp, #12
 800bdb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bdb4:	bfbc      	itt	lt
 800bdb6:	464b      	movlt	r3, r9
 800bdb8:	46a1      	movlt	r9, r4
 800bdba:	4630      	mov	r0, r6
 800bdbc:	bfb8      	it	lt
 800bdbe:	2501      	movlt	r5, #1
 800bdc0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800bdc4:	bfb4      	ite	lt
 800bdc6:	461c      	movlt	r4, r3
 800bdc8:	2500      	movge	r5, #0
 800bdca:	f7ff fd43 	bl	800b854 <_Balloc>
 800bdce:	4602      	mov	r2, r0
 800bdd0:	b918      	cbnz	r0, 800bdda <__mdiff+0x62>
 800bdd2:	4b33      	ldr	r3, [pc, #204]	@ (800bea0 <__mdiff+0x128>)
 800bdd4:	f240 2145 	movw	r1, #581	@ 0x245
 800bdd8:	e7e2      	b.n	800bda0 <__mdiff+0x28>
 800bdda:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800bdde:	f104 0e14 	add.w	lr, r4, #20
 800bde2:	6926      	ldr	r6, [r4, #16]
 800bde4:	f100 0b14 	add.w	fp, r0, #20
 800bde8:	60c5      	str	r5, [r0, #12]
 800bdea:	f109 0514 	add.w	r5, r9, #20
 800bdee:	f109 0310 	add.w	r3, r9, #16
 800bdf2:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800bdf6:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800bdfa:	46d9      	mov	r9, fp
 800bdfc:	f04f 0c00 	mov.w	ip, #0
 800be00:	9301      	str	r3, [sp, #4]
 800be02:	9b01      	ldr	r3, [sp, #4]
 800be04:	f85e 0b04 	ldr.w	r0, [lr], #4
 800be08:	f853 af04 	ldr.w	sl, [r3, #4]!
 800be0c:	4576      	cmp	r6, lr
 800be0e:	9301      	str	r3, [sp, #4]
 800be10:	fa1f f38a 	uxth.w	r3, sl
 800be14:	4619      	mov	r1, r3
 800be16:	b283      	uxth	r3, r0
 800be18:	ea4f 4010 	mov.w	r0, r0, lsr #16
 800be1c:	eba1 0303 	sub.w	r3, r1, r3
 800be20:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800be24:	4463      	add	r3, ip
 800be26:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800be2a:	b29b      	uxth	r3, r3
 800be2c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800be30:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800be34:	f849 3b04 	str.w	r3, [r9], #4
 800be38:	d8e3      	bhi.n	800be02 <__mdiff+0x8a>
 800be3a:	1b33      	subs	r3, r6, r4
 800be3c:	3415      	adds	r4, #21
 800be3e:	3b15      	subs	r3, #21
 800be40:	f023 0303 	bic.w	r3, r3, #3
 800be44:	3304      	adds	r3, #4
 800be46:	42a6      	cmp	r6, r4
 800be48:	bf38      	it	cc
 800be4a:	2304      	movcc	r3, #4
 800be4c:	441d      	add	r5, r3
 800be4e:	445b      	add	r3, fp
 800be50:	462c      	mov	r4, r5
 800be52:	461e      	mov	r6, r3
 800be54:	4544      	cmp	r4, r8
 800be56:	d30e      	bcc.n	800be76 <__mdiff+0xfe>
 800be58:	f108 0103 	add.w	r1, r8, #3
 800be5c:	1b49      	subs	r1, r1, r5
 800be5e:	3d03      	subs	r5, #3
 800be60:	f021 0103 	bic.w	r1, r1, #3
 800be64:	45a8      	cmp	r8, r5
 800be66:	bf38      	it	cc
 800be68:	2100      	movcc	r1, #0
 800be6a:	440b      	add	r3, r1
 800be6c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800be70:	b199      	cbz	r1, 800be9a <__mdiff+0x122>
 800be72:	6117      	str	r7, [r2, #16]
 800be74:	e79a      	b.n	800bdac <__mdiff+0x34>
 800be76:	f854 1b04 	ldr.w	r1, [r4], #4
 800be7a:	46e6      	mov	lr, ip
 800be7c:	fa1f fc81 	uxth.w	ip, r1
 800be80:	0c08      	lsrs	r0, r1, #16
 800be82:	4471      	add	r1, lr
 800be84:	44f4      	add	ip, lr
 800be86:	b289      	uxth	r1, r1
 800be88:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800be8c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800be90:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800be94:	f846 1b04 	str.w	r1, [r6], #4
 800be98:	e7dc      	b.n	800be54 <__mdiff+0xdc>
 800be9a:	3f01      	subs	r7, #1
 800be9c:	e7e6      	b.n	800be6c <__mdiff+0xf4>
 800be9e:	bf00      	nop
 800bea0:	0800dd0c 	.word	0x0800dd0c
 800bea4:	0800dd2e 	.word	0x0800dd2e

0800bea8 <__d2b>:
 800bea8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800beac:	460f      	mov	r7, r1
 800beae:	2101      	movs	r1, #1
 800beb0:	4616      	mov	r6, r2
 800beb2:	ec59 8b10 	vmov	r8, r9, d0
 800beb6:	f7ff fccd 	bl	800b854 <_Balloc>
 800beba:	4604      	mov	r4, r0
 800bebc:	b930      	cbnz	r0, 800becc <__d2b+0x24>
 800bebe:	4602      	mov	r2, r0
 800bec0:	4b23      	ldr	r3, [pc, #140]	@ (800bf50 <__d2b+0xa8>)
 800bec2:	f240 310f 	movw	r1, #783	@ 0x30f
 800bec6:	4823      	ldr	r0, [pc, #140]	@ (800bf54 <__d2b+0xac>)
 800bec8:	f000 fa4e 	bl	800c368 <__assert_func>
 800becc:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800bed0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800bed4:	b10d      	cbz	r5, 800beda <__d2b+0x32>
 800bed6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800beda:	9301      	str	r3, [sp, #4]
 800bedc:	f1b8 0300 	subs.w	r3, r8, #0
 800bee0:	d023      	beq.n	800bf2a <__d2b+0x82>
 800bee2:	4668      	mov	r0, sp
 800bee4:	9300      	str	r3, [sp, #0]
 800bee6:	f7ff fd7e 	bl	800b9e6 <__lo0bits>
 800beea:	e9dd 1200 	ldrd	r1, r2, [sp]
 800beee:	b1d0      	cbz	r0, 800bf26 <__d2b+0x7e>
 800bef0:	f1c0 0320 	rsb	r3, r0, #32
 800bef4:	fa02 f303 	lsl.w	r3, r2, r3
 800bef8:	40c2      	lsrs	r2, r0
 800befa:	430b      	orrs	r3, r1
 800befc:	9201      	str	r2, [sp, #4]
 800befe:	6163      	str	r3, [r4, #20]
 800bf00:	9b01      	ldr	r3, [sp, #4]
 800bf02:	2b00      	cmp	r3, #0
 800bf04:	61a3      	str	r3, [r4, #24]
 800bf06:	bf0c      	ite	eq
 800bf08:	2201      	moveq	r2, #1
 800bf0a:	2202      	movne	r2, #2
 800bf0c:	6122      	str	r2, [r4, #16]
 800bf0e:	b1a5      	cbz	r5, 800bf3a <__d2b+0x92>
 800bf10:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800bf14:	4405      	add	r5, r0
 800bf16:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800bf1a:	603d      	str	r5, [r7, #0]
 800bf1c:	6030      	str	r0, [r6, #0]
 800bf1e:	4620      	mov	r0, r4
 800bf20:	b003      	add	sp, #12
 800bf22:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bf26:	6161      	str	r1, [r4, #20]
 800bf28:	e7ea      	b.n	800bf00 <__d2b+0x58>
 800bf2a:	a801      	add	r0, sp, #4
 800bf2c:	f7ff fd5b 	bl	800b9e6 <__lo0bits>
 800bf30:	9b01      	ldr	r3, [sp, #4]
 800bf32:	3020      	adds	r0, #32
 800bf34:	2201      	movs	r2, #1
 800bf36:	6163      	str	r3, [r4, #20]
 800bf38:	e7e8      	b.n	800bf0c <__d2b+0x64>
 800bf3a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800bf3e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800bf42:	6038      	str	r0, [r7, #0]
 800bf44:	6918      	ldr	r0, [r3, #16]
 800bf46:	f7ff fd2f 	bl	800b9a8 <__hi0bits>
 800bf4a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800bf4e:	e7e5      	b.n	800bf1c <__d2b+0x74>
 800bf50:	0800dd0c 	.word	0x0800dd0c
 800bf54:	0800dd2e 	.word	0x0800dd2e

0800bf58 <__sread>:
 800bf58:	b510      	push	{r4, lr}
 800bf5a:	460c      	mov	r4, r1
 800bf5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bf60:	f000 f99e 	bl	800c2a0 <_read_r>
 800bf64:	2800      	cmp	r0, #0
 800bf66:	bfab      	itete	ge
 800bf68:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800bf6a:	89a3      	ldrhlt	r3, [r4, #12]
 800bf6c:	181b      	addge	r3, r3, r0
 800bf6e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800bf72:	bfac      	ite	ge
 800bf74:	6563      	strge	r3, [r4, #84]	@ 0x54
 800bf76:	81a3      	strhlt	r3, [r4, #12]
 800bf78:	bd10      	pop	{r4, pc}

0800bf7a <__swrite>:
 800bf7a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bf7e:	461f      	mov	r7, r3
 800bf80:	898b      	ldrh	r3, [r1, #12]
 800bf82:	4605      	mov	r5, r0
 800bf84:	460c      	mov	r4, r1
 800bf86:	05db      	lsls	r3, r3, #23
 800bf88:	4616      	mov	r6, r2
 800bf8a:	d505      	bpl.n	800bf98 <__swrite+0x1e>
 800bf8c:	2302      	movs	r3, #2
 800bf8e:	2200      	movs	r2, #0
 800bf90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bf94:	f000 f972 	bl	800c27c <_lseek_r>
 800bf98:	89a3      	ldrh	r3, [r4, #12]
 800bf9a:	4632      	mov	r2, r6
 800bf9c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bfa0:	4628      	mov	r0, r5
 800bfa2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800bfa6:	81a3      	strh	r3, [r4, #12]
 800bfa8:	463b      	mov	r3, r7
 800bfaa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bfae:	f000 b999 	b.w	800c2e4 <_write_r>

0800bfb2 <__sseek>:
 800bfb2:	b510      	push	{r4, lr}
 800bfb4:	460c      	mov	r4, r1
 800bfb6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bfba:	f000 f95f 	bl	800c27c <_lseek_r>
 800bfbe:	1c43      	adds	r3, r0, #1
 800bfc0:	89a3      	ldrh	r3, [r4, #12]
 800bfc2:	bf15      	itete	ne
 800bfc4:	6560      	strne	r0, [r4, #84]	@ 0x54
 800bfc6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800bfca:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800bfce:	81a3      	strheq	r3, [r4, #12]
 800bfd0:	bf18      	it	ne
 800bfd2:	81a3      	strhne	r3, [r4, #12]
 800bfd4:	bd10      	pop	{r4, pc}

0800bfd6 <__sclose>:
 800bfd6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bfda:	f000 b995 	b.w	800c308 <_close_r>

0800bfde <_realloc_r>:
 800bfde:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bfe2:	4607      	mov	r7, r0
 800bfe4:	4614      	mov	r4, r2
 800bfe6:	460d      	mov	r5, r1
 800bfe8:	b921      	cbnz	r1, 800bff4 <_realloc_r+0x16>
 800bfea:	4611      	mov	r1, r2
 800bfec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bff0:	f7ff baf8 	b.w	800b5e4 <_malloc_r>
 800bff4:	b92a      	cbnz	r2, 800c002 <_realloc_r+0x24>
 800bff6:	4625      	mov	r5, r4
 800bff8:	f000 f9e8 	bl	800c3cc <_free_r>
 800bffc:	4628      	mov	r0, r5
 800bffe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c002:	f000 fa3f 	bl	800c484 <_malloc_usable_size_r>
 800c006:	4284      	cmp	r4, r0
 800c008:	4606      	mov	r6, r0
 800c00a:	d802      	bhi.n	800c012 <_realloc_r+0x34>
 800c00c:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800c010:	d8f4      	bhi.n	800bffc <_realloc_r+0x1e>
 800c012:	4621      	mov	r1, r4
 800c014:	4638      	mov	r0, r7
 800c016:	f7ff fae5 	bl	800b5e4 <_malloc_r>
 800c01a:	4680      	mov	r8, r0
 800c01c:	b908      	cbnz	r0, 800c022 <_realloc_r+0x44>
 800c01e:	4645      	mov	r5, r8
 800c020:	e7ec      	b.n	800bffc <_realloc_r+0x1e>
 800c022:	42b4      	cmp	r4, r6
 800c024:	4622      	mov	r2, r4
 800c026:	4629      	mov	r1, r5
 800c028:	bf28      	it	cs
 800c02a:	4632      	movcs	r2, r6
 800c02c:	f000 f98e 	bl	800c34c <memcpy>
 800c030:	4629      	mov	r1, r5
 800c032:	4638      	mov	r0, r7
 800c034:	f000 f9ca 	bl	800c3cc <_free_r>
 800c038:	e7f1      	b.n	800c01e <_realloc_r+0x40>

0800c03a <__swbuf_r>:
 800c03a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c03c:	460e      	mov	r6, r1
 800c03e:	4614      	mov	r4, r2
 800c040:	4605      	mov	r5, r0
 800c042:	b118      	cbz	r0, 800c04c <__swbuf_r+0x12>
 800c044:	6a03      	ldr	r3, [r0, #32]
 800c046:	b90b      	cbnz	r3, 800c04c <__swbuf_r+0x12>
 800c048:	f7fe f918 	bl	800a27c <__sinit>
 800c04c:	69a3      	ldr	r3, [r4, #24]
 800c04e:	60a3      	str	r3, [r4, #8]
 800c050:	89a3      	ldrh	r3, [r4, #12]
 800c052:	071a      	lsls	r2, r3, #28
 800c054:	d501      	bpl.n	800c05a <__swbuf_r+0x20>
 800c056:	6923      	ldr	r3, [r4, #16]
 800c058:	b943      	cbnz	r3, 800c06c <__swbuf_r+0x32>
 800c05a:	4621      	mov	r1, r4
 800c05c:	4628      	mov	r0, r5
 800c05e:	f000 f82b 	bl	800c0b8 <__swsetup_r>
 800c062:	b118      	cbz	r0, 800c06c <__swbuf_r+0x32>
 800c064:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800c068:	4638      	mov	r0, r7
 800c06a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c06c:	6823      	ldr	r3, [r4, #0]
 800c06e:	b2f6      	uxtb	r6, r6
 800c070:	6922      	ldr	r2, [r4, #16]
 800c072:	4637      	mov	r7, r6
 800c074:	1a98      	subs	r0, r3, r2
 800c076:	6963      	ldr	r3, [r4, #20]
 800c078:	4283      	cmp	r3, r0
 800c07a:	dc05      	bgt.n	800c088 <__swbuf_r+0x4e>
 800c07c:	4621      	mov	r1, r4
 800c07e:	4628      	mov	r0, r5
 800c080:	f7ff fbb4 	bl	800b7ec <_fflush_r>
 800c084:	2800      	cmp	r0, #0
 800c086:	d1ed      	bne.n	800c064 <__swbuf_r+0x2a>
 800c088:	68a3      	ldr	r3, [r4, #8]
 800c08a:	3b01      	subs	r3, #1
 800c08c:	60a3      	str	r3, [r4, #8]
 800c08e:	6823      	ldr	r3, [r4, #0]
 800c090:	1c5a      	adds	r2, r3, #1
 800c092:	6022      	str	r2, [r4, #0]
 800c094:	701e      	strb	r6, [r3, #0]
 800c096:	1c43      	adds	r3, r0, #1
 800c098:	6962      	ldr	r2, [r4, #20]
 800c09a:	429a      	cmp	r2, r3
 800c09c:	d004      	beq.n	800c0a8 <__swbuf_r+0x6e>
 800c09e:	89a3      	ldrh	r3, [r4, #12]
 800c0a0:	07db      	lsls	r3, r3, #31
 800c0a2:	d5e1      	bpl.n	800c068 <__swbuf_r+0x2e>
 800c0a4:	2e0a      	cmp	r6, #10
 800c0a6:	d1df      	bne.n	800c068 <__swbuf_r+0x2e>
 800c0a8:	4621      	mov	r1, r4
 800c0aa:	4628      	mov	r0, r5
 800c0ac:	f7ff fb9e 	bl	800b7ec <_fflush_r>
 800c0b0:	2800      	cmp	r0, #0
 800c0b2:	d0d9      	beq.n	800c068 <__swbuf_r+0x2e>
 800c0b4:	e7d6      	b.n	800c064 <__swbuf_r+0x2a>
	...

0800c0b8 <__swsetup_r>:
 800c0b8:	b538      	push	{r3, r4, r5, lr}
 800c0ba:	4b29      	ldr	r3, [pc, #164]	@ (800c160 <__swsetup_r+0xa8>)
 800c0bc:	4605      	mov	r5, r0
 800c0be:	460c      	mov	r4, r1
 800c0c0:	6818      	ldr	r0, [r3, #0]
 800c0c2:	b118      	cbz	r0, 800c0cc <__swsetup_r+0x14>
 800c0c4:	6a03      	ldr	r3, [r0, #32]
 800c0c6:	b90b      	cbnz	r3, 800c0cc <__swsetup_r+0x14>
 800c0c8:	f7fe f8d8 	bl	800a27c <__sinit>
 800c0cc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c0d0:	0719      	lsls	r1, r3, #28
 800c0d2:	d422      	bmi.n	800c11a <__swsetup_r+0x62>
 800c0d4:	06da      	lsls	r2, r3, #27
 800c0d6:	d407      	bmi.n	800c0e8 <__swsetup_r+0x30>
 800c0d8:	2209      	movs	r2, #9
 800c0da:	602a      	str	r2, [r5, #0]
 800c0dc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c0e0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c0e4:	81a3      	strh	r3, [r4, #12]
 800c0e6:	e033      	b.n	800c150 <__swsetup_r+0x98>
 800c0e8:	0758      	lsls	r0, r3, #29
 800c0ea:	d512      	bpl.n	800c112 <__swsetup_r+0x5a>
 800c0ec:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c0ee:	b141      	cbz	r1, 800c102 <__swsetup_r+0x4a>
 800c0f0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c0f4:	4299      	cmp	r1, r3
 800c0f6:	d002      	beq.n	800c0fe <__swsetup_r+0x46>
 800c0f8:	4628      	mov	r0, r5
 800c0fa:	f000 f967 	bl	800c3cc <_free_r>
 800c0fe:	2300      	movs	r3, #0
 800c100:	6363      	str	r3, [r4, #52]	@ 0x34
 800c102:	89a3      	ldrh	r3, [r4, #12]
 800c104:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800c108:	81a3      	strh	r3, [r4, #12]
 800c10a:	2300      	movs	r3, #0
 800c10c:	6063      	str	r3, [r4, #4]
 800c10e:	6923      	ldr	r3, [r4, #16]
 800c110:	6023      	str	r3, [r4, #0]
 800c112:	89a3      	ldrh	r3, [r4, #12]
 800c114:	f043 0308 	orr.w	r3, r3, #8
 800c118:	81a3      	strh	r3, [r4, #12]
 800c11a:	6923      	ldr	r3, [r4, #16]
 800c11c:	b94b      	cbnz	r3, 800c132 <__swsetup_r+0x7a>
 800c11e:	89a3      	ldrh	r3, [r4, #12]
 800c120:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800c124:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c128:	d003      	beq.n	800c132 <__swsetup_r+0x7a>
 800c12a:	4621      	mov	r1, r4
 800c12c:	4628      	mov	r0, r5
 800c12e:	f000 f83e 	bl	800c1ae <__smakebuf_r>
 800c132:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c136:	f013 0201 	ands.w	r2, r3, #1
 800c13a:	d00a      	beq.n	800c152 <__swsetup_r+0x9a>
 800c13c:	2200      	movs	r2, #0
 800c13e:	60a2      	str	r2, [r4, #8]
 800c140:	6962      	ldr	r2, [r4, #20]
 800c142:	4252      	negs	r2, r2
 800c144:	61a2      	str	r2, [r4, #24]
 800c146:	6922      	ldr	r2, [r4, #16]
 800c148:	b942      	cbnz	r2, 800c15c <__swsetup_r+0xa4>
 800c14a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800c14e:	d1c5      	bne.n	800c0dc <__swsetup_r+0x24>
 800c150:	bd38      	pop	{r3, r4, r5, pc}
 800c152:	0799      	lsls	r1, r3, #30
 800c154:	bf58      	it	pl
 800c156:	6962      	ldrpl	r2, [r4, #20]
 800c158:	60a2      	str	r2, [r4, #8]
 800c15a:	e7f4      	b.n	800c146 <__swsetup_r+0x8e>
 800c15c:	2000      	movs	r0, #0
 800c15e:	e7f7      	b.n	800c150 <__swsetup_r+0x98>
 800c160:	20000034 	.word	0x20000034

0800c164 <__swhatbuf_r>:
 800c164:	b570      	push	{r4, r5, r6, lr}
 800c166:	460c      	mov	r4, r1
 800c168:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c16c:	b096      	sub	sp, #88	@ 0x58
 800c16e:	4615      	mov	r5, r2
 800c170:	2900      	cmp	r1, #0
 800c172:	461e      	mov	r6, r3
 800c174:	da0c      	bge.n	800c190 <__swhatbuf_r+0x2c>
 800c176:	89a3      	ldrh	r3, [r4, #12]
 800c178:	2100      	movs	r1, #0
 800c17a:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800c17e:	bf14      	ite	ne
 800c180:	2340      	movne	r3, #64	@ 0x40
 800c182:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800c186:	2000      	movs	r0, #0
 800c188:	6031      	str	r1, [r6, #0]
 800c18a:	602b      	str	r3, [r5, #0]
 800c18c:	b016      	add	sp, #88	@ 0x58
 800c18e:	bd70      	pop	{r4, r5, r6, pc}
 800c190:	466a      	mov	r2, sp
 800c192:	f000 f8c9 	bl	800c328 <_fstat_r>
 800c196:	2800      	cmp	r0, #0
 800c198:	dbed      	blt.n	800c176 <__swhatbuf_r+0x12>
 800c19a:	9901      	ldr	r1, [sp, #4]
 800c19c:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800c1a0:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800c1a4:	4259      	negs	r1, r3
 800c1a6:	4159      	adcs	r1, r3
 800c1a8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c1ac:	e7eb      	b.n	800c186 <__swhatbuf_r+0x22>

0800c1ae <__smakebuf_r>:
 800c1ae:	898b      	ldrh	r3, [r1, #12]
 800c1b0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c1b2:	079d      	lsls	r5, r3, #30
 800c1b4:	4606      	mov	r6, r0
 800c1b6:	460c      	mov	r4, r1
 800c1b8:	d507      	bpl.n	800c1ca <__smakebuf_r+0x1c>
 800c1ba:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800c1be:	6023      	str	r3, [r4, #0]
 800c1c0:	6123      	str	r3, [r4, #16]
 800c1c2:	2301      	movs	r3, #1
 800c1c4:	6163      	str	r3, [r4, #20]
 800c1c6:	b003      	add	sp, #12
 800c1c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c1ca:	ab01      	add	r3, sp, #4
 800c1cc:	466a      	mov	r2, sp
 800c1ce:	f7ff ffc9 	bl	800c164 <__swhatbuf_r>
 800c1d2:	9f00      	ldr	r7, [sp, #0]
 800c1d4:	4605      	mov	r5, r0
 800c1d6:	4630      	mov	r0, r6
 800c1d8:	4639      	mov	r1, r7
 800c1da:	f7ff fa03 	bl	800b5e4 <_malloc_r>
 800c1de:	b948      	cbnz	r0, 800c1f4 <__smakebuf_r+0x46>
 800c1e0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c1e4:	059a      	lsls	r2, r3, #22
 800c1e6:	d4ee      	bmi.n	800c1c6 <__smakebuf_r+0x18>
 800c1e8:	f023 0303 	bic.w	r3, r3, #3
 800c1ec:	f043 0302 	orr.w	r3, r3, #2
 800c1f0:	81a3      	strh	r3, [r4, #12]
 800c1f2:	e7e2      	b.n	800c1ba <__smakebuf_r+0xc>
 800c1f4:	89a3      	ldrh	r3, [r4, #12]
 800c1f6:	6020      	str	r0, [r4, #0]
 800c1f8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c1fc:	81a3      	strh	r3, [r4, #12]
 800c1fe:	9b01      	ldr	r3, [sp, #4]
 800c200:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800c204:	b15b      	cbz	r3, 800c21e <__smakebuf_r+0x70>
 800c206:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c20a:	4630      	mov	r0, r6
 800c20c:	f000 f826 	bl	800c25c <_isatty_r>
 800c210:	b128      	cbz	r0, 800c21e <__smakebuf_r+0x70>
 800c212:	89a3      	ldrh	r3, [r4, #12]
 800c214:	f023 0303 	bic.w	r3, r3, #3
 800c218:	f043 0301 	orr.w	r3, r3, #1
 800c21c:	81a3      	strh	r3, [r4, #12]
 800c21e:	89a3      	ldrh	r3, [r4, #12]
 800c220:	431d      	orrs	r5, r3
 800c222:	81a5      	strh	r5, [r4, #12]
 800c224:	e7cf      	b.n	800c1c6 <__smakebuf_r+0x18>

0800c226 <memmove>:
 800c226:	4288      	cmp	r0, r1
 800c228:	b510      	push	{r4, lr}
 800c22a:	eb01 0402 	add.w	r4, r1, r2
 800c22e:	d902      	bls.n	800c236 <memmove+0x10>
 800c230:	4284      	cmp	r4, r0
 800c232:	4623      	mov	r3, r4
 800c234:	d807      	bhi.n	800c246 <memmove+0x20>
 800c236:	1e43      	subs	r3, r0, #1
 800c238:	42a1      	cmp	r1, r4
 800c23a:	d008      	beq.n	800c24e <memmove+0x28>
 800c23c:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c240:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c244:	e7f8      	b.n	800c238 <memmove+0x12>
 800c246:	4402      	add	r2, r0
 800c248:	4601      	mov	r1, r0
 800c24a:	428a      	cmp	r2, r1
 800c24c:	d100      	bne.n	800c250 <memmove+0x2a>
 800c24e:	bd10      	pop	{r4, pc}
 800c250:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c254:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c258:	e7f7      	b.n	800c24a <memmove+0x24>
	...

0800c25c <_isatty_r>:
 800c25c:	b538      	push	{r3, r4, r5, lr}
 800c25e:	2300      	movs	r3, #0
 800c260:	4d05      	ldr	r5, [pc, #20]	@ (800c278 <_isatty_r+0x1c>)
 800c262:	4604      	mov	r4, r0
 800c264:	4608      	mov	r0, r1
 800c266:	602b      	str	r3, [r5, #0]
 800c268:	f7f5 ff64 	bl	8002134 <_isatty>
 800c26c:	1c43      	adds	r3, r0, #1
 800c26e:	d102      	bne.n	800c276 <_isatty_r+0x1a>
 800c270:	682b      	ldr	r3, [r5, #0]
 800c272:	b103      	cbz	r3, 800c276 <_isatty_r+0x1a>
 800c274:	6023      	str	r3, [r4, #0]
 800c276:	bd38      	pop	{r3, r4, r5, pc}
 800c278:	20000554 	.word	0x20000554

0800c27c <_lseek_r>:
 800c27c:	b538      	push	{r3, r4, r5, lr}
 800c27e:	4604      	mov	r4, r0
 800c280:	4d06      	ldr	r5, [pc, #24]	@ (800c29c <_lseek_r+0x20>)
 800c282:	4608      	mov	r0, r1
 800c284:	4611      	mov	r1, r2
 800c286:	2200      	movs	r2, #0
 800c288:	602a      	str	r2, [r5, #0]
 800c28a:	461a      	mov	r2, r3
 800c28c:	f7f5 ff5d 	bl	800214a <_lseek>
 800c290:	1c43      	adds	r3, r0, #1
 800c292:	d102      	bne.n	800c29a <_lseek_r+0x1e>
 800c294:	682b      	ldr	r3, [r5, #0]
 800c296:	b103      	cbz	r3, 800c29a <_lseek_r+0x1e>
 800c298:	6023      	str	r3, [r4, #0]
 800c29a:	bd38      	pop	{r3, r4, r5, pc}
 800c29c:	20000554 	.word	0x20000554

0800c2a0 <_read_r>:
 800c2a0:	b538      	push	{r3, r4, r5, lr}
 800c2a2:	4604      	mov	r4, r0
 800c2a4:	4d06      	ldr	r5, [pc, #24]	@ (800c2c0 <_read_r+0x20>)
 800c2a6:	4608      	mov	r0, r1
 800c2a8:	4611      	mov	r1, r2
 800c2aa:	2200      	movs	r2, #0
 800c2ac:	602a      	str	r2, [r5, #0]
 800c2ae:	461a      	mov	r2, r3
 800c2b0:	f7f5 feeb 	bl	800208a <_read>
 800c2b4:	1c43      	adds	r3, r0, #1
 800c2b6:	d102      	bne.n	800c2be <_read_r+0x1e>
 800c2b8:	682b      	ldr	r3, [r5, #0]
 800c2ba:	b103      	cbz	r3, 800c2be <_read_r+0x1e>
 800c2bc:	6023      	str	r3, [r4, #0]
 800c2be:	bd38      	pop	{r3, r4, r5, pc}
 800c2c0:	20000554 	.word	0x20000554

0800c2c4 <_sbrk_r>:
 800c2c4:	b538      	push	{r3, r4, r5, lr}
 800c2c6:	2300      	movs	r3, #0
 800c2c8:	4d05      	ldr	r5, [pc, #20]	@ (800c2e0 <_sbrk_r+0x1c>)
 800c2ca:	4604      	mov	r4, r0
 800c2cc:	4608      	mov	r0, r1
 800c2ce:	602b      	str	r3, [r5, #0]
 800c2d0:	f7f5 ff48 	bl	8002164 <_sbrk>
 800c2d4:	1c43      	adds	r3, r0, #1
 800c2d6:	d102      	bne.n	800c2de <_sbrk_r+0x1a>
 800c2d8:	682b      	ldr	r3, [r5, #0]
 800c2da:	b103      	cbz	r3, 800c2de <_sbrk_r+0x1a>
 800c2dc:	6023      	str	r3, [r4, #0]
 800c2de:	bd38      	pop	{r3, r4, r5, pc}
 800c2e0:	20000554 	.word	0x20000554

0800c2e4 <_write_r>:
 800c2e4:	b538      	push	{r3, r4, r5, lr}
 800c2e6:	4604      	mov	r4, r0
 800c2e8:	4d06      	ldr	r5, [pc, #24]	@ (800c304 <_write_r+0x20>)
 800c2ea:	4608      	mov	r0, r1
 800c2ec:	4611      	mov	r1, r2
 800c2ee:	2200      	movs	r2, #0
 800c2f0:	602a      	str	r2, [r5, #0]
 800c2f2:	461a      	mov	r2, r3
 800c2f4:	f7f5 fee6 	bl	80020c4 <_write>
 800c2f8:	1c43      	adds	r3, r0, #1
 800c2fa:	d102      	bne.n	800c302 <_write_r+0x1e>
 800c2fc:	682b      	ldr	r3, [r5, #0]
 800c2fe:	b103      	cbz	r3, 800c302 <_write_r+0x1e>
 800c300:	6023      	str	r3, [r4, #0]
 800c302:	bd38      	pop	{r3, r4, r5, pc}
 800c304:	20000554 	.word	0x20000554

0800c308 <_close_r>:
 800c308:	b538      	push	{r3, r4, r5, lr}
 800c30a:	2300      	movs	r3, #0
 800c30c:	4d05      	ldr	r5, [pc, #20]	@ (800c324 <_close_r+0x1c>)
 800c30e:	4604      	mov	r4, r0
 800c310:	4608      	mov	r0, r1
 800c312:	602b      	str	r3, [r5, #0]
 800c314:	f7f5 fef2 	bl	80020fc <_close>
 800c318:	1c43      	adds	r3, r0, #1
 800c31a:	d102      	bne.n	800c322 <_close_r+0x1a>
 800c31c:	682b      	ldr	r3, [r5, #0]
 800c31e:	b103      	cbz	r3, 800c322 <_close_r+0x1a>
 800c320:	6023      	str	r3, [r4, #0]
 800c322:	bd38      	pop	{r3, r4, r5, pc}
 800c324:	20000554 	.word	0x20000554

0800c328 <_fstat_r>:
 800c328:	b538      	push	{r3, r4, r5, lr}
 800c32a:	2300      	movs	r3, #0
 800c32c:	4d06      	ldr	r5, [pc, #24]	@ (800c348 <_fstat_r+0x20>)
 800c32e:	4604      	mov	r4, r0
 800c330:	4608      	mov	r0, r1
 800c332:	4611      	mov	r1, r2
 800c334:	602b      	str	r3, [r5, #0]
 800c336:	f7f5 feed 	bl	8002114 <_fstat>
 800c33a:	1c43      	adds	r3, r0, #1
 800c33c:	d102      	bne.n	800c344 <_fstat_r+0x1c>
 800c33e:	682b      	ldr	r3, [r5, #0]
 800c340:	b103      	cbz	r3, 800c344 <_fstat_r+0x1c>
 800c342:	6023      	str	r3, [r4, #0]
 800c344:	bd38      	pop	{r3, r4, r5, pc}
 800c346:	bf00      	nop
 800c348:	20000554 	.word	0x20000554

0800c34c <memcpy>:
 800c34c:	440a      	add	r2, r1
 800c34e:	1e43      	subs	r3, r0, #1
 800c350:	4291      	cmp	r1, r2
 800c352:	d100      	bne.n	800c356 <memcpy+0xa>
 800c354:	4770      	bx	lr
 800c356:	b510      	push	{r4, lr}
 800c358:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c35c:	4291      	cmp	r1, r2
 800c35e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c362:	d1f9      	bne.n	800c358 <memcpy+0xc>
 800c364:	bd10      	pop	{r4, pc}
	...

0800c368 <__assert_func>:
 800c368:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c36a:	4614      	mov	r4, r2
 800c36c:	461a      	mov	r2, r3
 800c36e:	4b09      	ldr	r3, [pc, #36]	@ (800c394 <__assert_func+0x2c>)
 800c370:	4605      	mov	r5, r0
 800c372:	681b      	ldr	r3, [r3, #0]
 800c374:	68d8      	ldr	r0, [r3, #12]
 800c376:	b14c      	cbz	r4, 800c38c <__assert_func+0x24>
 800c378:	4b07      	ldr	r3, [pc, #28]	@ (800c398 <__assert_func+0x30>)
 800c37a:	9100      	str	r1, [sp, #0]
 800c37c:	4907      	ldr	r1, [pc, #28]	@ (800c39c <__assert_func+0x34>)
 800c37e:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c382:	462b      	mov	r3, r5
 800c384:	f000 f886 	bl	800c494 <fiprintf>
 800c388:	f000 f8a3 	bl	800c4d2 <abort>
 800c38c:	4b04      	ldr	r3, [pc, #16]	@ (800c3a0 <__assert_func+0x38>)
 800c38e:	461c      	mov	r4, r3
 800c390:	e7f3      	b.n	800c37a <__assert_func+0x12>
 800c392:	bf00      	nop
 800c394:	20000034 	.word	0x20000034
 800c398:	0800dd91 	.word	0x0800dd91
 800c39c:	0800dd9e 	.word	0x0800dd9e
 800c3a0:	0800ddcc 	.word	0x0800ddcc

0800c3a4 <_calloc_r>:
 800c3a4:	b570      	push	{r4, r5, r6, lr}
 800c3a6:	fba1 5402 	umull	r5, r4, r1, r2
 800c3aa:	b934      	cbnz	r4, 800c3ba <_calloc_r+0x16>
 800c3ac:	4629      	mov	r1, r5
 800c3ae:	f7ff f919 	bl	800b5e4 <_malloc_r>
 800c3b2:	4606      	mov	r6, r0
 800c3b4:	b928      	cbnz	r0, 800c3c2 <_calloc_r+0x1e>
 800c3b6:	4630      	mov	r0, r6
 800c3b8:	bd70      	pop	{r4, r5, r6, pc}
 800c3ba:	220c      	movs	r2, #12
 800c3bc:	2600      	movs	r6, #0
 800c3be:	6002      	str	r2, [r0, #0]
 800c3c0:	e7f9      	b.n	800c3b6 <_calloc_r+0x12>
 800c3c2:	462a      	mov	r2, r5
 800c3c4:	4621      	mov	r1, r4
 800c3c6:	f7fd ffa1 	bl	800a30c <memset>
 800c3ca:	e7f4      	b.n	800c3b6 <_calloc_r+0x12>

0800c3cc <_free_r>:
 800c3cc:	b538      	push	{r3, r4, r5, lr}
 800c3ce:	4605      	mov	r5, r0
 800c3d0:	2900      	cmp	r1, #0
 800c3d2:	d041      	beq.n	800c458 <_free_r+0x8c>
 800c3d4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c3d8:	1f0c      	subs	r4, r1, #4
 800c3da:	2b00      	cmp	r3, #0
 800c3dc:	bfb8      	it	lt
 800c3de:	18e4      	addlt	r4, r4, r3
 800c3e0:	f7ff fa2c 	bl	800b83c <__malloc_lock>
 800c3e4:	4a1d      	ldr	r2, [pc, #116]	@ (800c45c <_free_r+0x90>)
 800c3e6:	6813      	ldr	r3, [r2, #0]
 800c3e8:	b933      	cbnz	r3, 800c3f8 <_free_r+0x2c>
 800c3ea:	6063      	str	r3, [r4, #4]
 800c3ec:	6014      	str	r4, [r2, #0]
 800c3ee:	4628      	mov	r0, r5
 800c3f0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c3f4:	f7ff ba28 	b.w	800b848 <__malloc_unlock>
 800c3f8:	42a3      	cmp	r3, r4
 800c3fa:	d908      	bls.n	800c40e <_free_r+0x42>
 800c3fc:	6820      	ldr	r0, [r4, #0]
 800c3fe:	1821      	adds	r1, r4, r0
 800c400:	428b      	cmp	r3, r1
 800c402:	bf01      	itttt	eq
 800c404:	6819      	ldreq	r1, [r3, #0]
 800c406:	685b      	ldreq	r3, [r3, #4]
 800c408:	1809      	addeq	r1, r1, r0
 800c40a:	6021      	streq	r1, [r4, #0]
 800c40c:	e7ed      	b.n	800c3ea <_free_r+0x1e>
 800c40e:	461a      	mov	r2, r3
 800c410:	685b      	ldr	r3, [r3, #4]
 800c412:	b10b      	cbz	r3, 800c418 <_free_r+0x4c>
 800c414:	42a3      	cmp	r3, r4
 800c416:	d9fa      	bls.n	800c40e <_free_r+0x42>
 800c418:	6811      	ldr	r1, [r2, #0]
 800c41a:	1850      	adds	r0, r2, r1
 800c41c:	42a0      	cmp	r0, r4
 800c41e:	d10b      	bne.n	800c438 <_free_r+0x6c>
 800c420:	6820      	ldr	r0, [r4, #0]
 800c422:	4401      	add	r1, r0
 800c424:	1850      	adds	r0, r2, r1
 800c426:	6011      	str	r1, [r2, #0]
 800c428:	4283      	cmp	r3, r0
 800c42a:	d1e0      	bne.n	800c3ee <_free_r+0x22>
 800c42c:	6818      	ldr	r0, [r3, #0]
 800c42e:	685b      	ldr	r3, [r3, #4]
 800c430:	4408      	add	r0, r1
 800c432:	6053      	str	r3, [r2, #4]
 800c434:	6010      	str	r0, [r2, #0]
 800c436:	e7da      	b.n	800c3ee <_free_r+0x22>
 800c438:	d902      	bls.n	800c440 <_free_r+0x74>
 800c43a:	230c      	movs	r3, #12
 800c43c:	602b      	str	r3, [r5, #0]
 800c43e:	e7d6      	b.n	800c3ee <_free_r+0x22>
 800c440:	6820      	ldr	r0, [r4, #0]
 800c442:	1821      	adds	r1, r4, r0
 800c444:	428b      	cmp	r3, r1
 800c446:	bf02      	ittt	eq
 800c448:	6819      	ldreq	r1, [r3, #0]
 800c44a:	685b      	ldreq	r3, [r3, #4]
 800c44c:	1809      	addeq	r1, r1, r0
 800c44e:	6063      	str	r3, [r4, #4]
 800c450:	bf08      	it	eq
 800c452:	6021      	streq	r1, [r4, #0]
 800c454:	6054      	str	r4, [r2, #4]
 800c456:	e7ca      	b.n	800c3ee <_free_r+0x22>
 800c458:	bd38      	pop	{r3, r4, r5, pc}
 800c45a:	bf00      	nop
 800c45c:	20000550 	.word	0x20000550

0800c460 <__ascii_mbtowc>:
 800c460:	b082      	sub	sp, #8
 800c462:	b901      	cbnz	r1, 800c466 <__ascii_mbtowc+0x6>
 800c464:	a901      	add	r1, sp, #4
 800c466:	b142      	cbz	r2, 800c47a <__ascii_mbtowc+0x1a>
 800c468:	b14b      	cbz	r3, 800c47e <__ascii_mbtowc+0x1e>
 800c46a:	7813      	ldrb	r3, [r2, #0]
 800c46c:	600b      	str	r3, [r1, #0]
 800c46e:	7812      	ldrb	r2, [r2, #0]
 800c470:	1e10      	subs	r0, r2, #0
 800c472:	bf18      	it	ne
 800c474:	2001      	movne	r0, #1
 800c476:	b002      	add	sp, #8
 800c478:	4770      	bx	lr
 800c47a:	4610      	mov	r0, r2
 800c47c:	e7fb      	b.n	800c476 <__ascii_mbtowc+0x16>
 800c47e:	f06f 0001 	mvn.w	r0, #1
 800c482:	e7f8      	b.n	800c476 <__ascii_mbtowc+0x16>

0800c484 <_malloc_usable_size_r>:
 800c484:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c488:	1f18      	subs	r0, r3, #4
 800c48a:	2b00      	cmp	r3, #0
 800c48c:	bfbc      	itt	lt
 800c48e:	580b      	ldrlt	r3, [r1, r0]
 800c490:	18c0      	addlt	r0, r0, r3
 800c492:	4770      	bx	lr

0800c494 <fiprintf>:
 800c494:	b40e      	push	{r1, r2, r3}
 800c496:	b503      	push	{r0, r1, lr}
 800c498:	ab03      	add	r3, sp, #12
 800c49a:	4601      	mov	r1, r0
 800c49c:	4805      	ldr	r0, [pc, #20]	@ (800c4b4 <fiprintf+0x20>)
 800c49e:	f853 2b04 	ldr.w	r2, [r3], #4
 800c4a2:	6800      	ldr	r0, [r0, #0]
 800c4a4:	9301      	str	r3, [sp, #4]
 800c4a6:	f7fe ff5b 	bl	800b360 <_vfiprintf_r>
 800c4aa:	b002      	add	sp, #8
 800c4ac:	f85d eb04 	ldr.w	lr, [sp], #4
 800c4b0:	b003      	add	sp, #12
 800c4b2:	4770      	bx	lr
 800c4b4:	20000034 	.word	0x20000034

0800c4b8 <__ascii_wctomb>:
 800c4b8:	4603      	mov	r3, r0
 800c4ba:	4608      	mov	r0, r1
 800c4bc:	b141      	cbz	r1, 800c4d0 <__ascii_wctomb+0x18>
 800c4be:	2aff      	cmp	r2, #255	@ 0xff
 800c4c0:	d904      	bls.n	800c4cc <__ascii_wctomb+0x14>
 800c4c2:	228a      	movs	r2, #138	@ 0x8a
 800c4c4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c4c8:	601a      	str	r2, [r3, #0]
 800c4ca:	4770      	bx	lr
 800c4cc:	2001      	movs	r0, #1
 800c4ce:	700a      	strb	r2, [r1, #0]
 800c4d0:	4770      	bx	lr

0800c4d2 <abort>:
 800c4d2:	2006      	movs	r0, #6
 800c4d4:	b508      	push	{r3, lr}
 800c4d6:	f000 f82b 	bl	800c530 <raise>
 800c4da:	2001      	movs	r0, #1
 800c4dc:	f7f5 fdca 	bl	8002074 <_exit>

0800c4e0 <_raise_r>:
 800c4e0:	291f      	cmp	r1, #31
 800c4e2:	b538      	push	{r3, r4, r5, lr}
 800c4e4:	4605      	mov	r5, r0
 800c4e6:	460c      	mov	r4, r1
 800c4e8:	d904      	bls.n	800c4f4 <_raise_r+0x14>
 800c4ea:	2316      	movs	r3, #22
 800c4ec:	6003      	str	r3, [r0, #0]
 800c4ee:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c4f2:	bd38      	pop	{r3, r4, r5, pc}
 800c4f4:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800c4f6:	b112      	cbz	r2, 800c4fe <_raise_r+0x1e>
 800c4f8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c4fc:	b94b      	cbnz	r3, 800c512 <_raise_r+0x32>
 800c4fe:	4628      	mov	r0, r5
 800c500:	f000 f830 	bl	800c564 <_getpid_r>
 800c504:	4622      	mov	r2, r4
 800c506:	4601      	mov	r1, r0
 800c508:	4628      	mov	r0, r5
 800c50a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c50e:	f000 b817 	b.w	800c540 <_kill_r>
 800c512:	2b01      	cmp	r3, #1
 800c514:	d00a      	beq.n	800c52c <_raise_r+0x4c>
 800c516:	1c59      	adds	r1, r3, #1
 800c518:	d103      	bne.n	800c522 <_raise_r+0x42>
 800c51a:	2316      	movs	r3, #22
 800c51c:	6003      	str	r3, [r0, #0]
 800c51e:	2001      	movs	r0, #1
 800c520:	e7e7      	b.n	800c4f2 <_raise_r+0x12>
 800c522:	2100      	movs	r1, #0
 800c524:	4620      	mov	r0, r4
 800c526:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800c52a:	4798      	blx	r3
 800c52c:	2000      	movs	r0, #0
 800c52e:	e7e0      	b.n	800c4f2 <_raise_r+0x12>

0800c530 <raise>:
 800c530:	4b02      	ldr	r3, [pc, #8]	@ (800c53c <raise+0xc>)
 800c532:	4601      	mov	r1, r0
 800c534:	6818      	ldr	r0, [r3, #0]
 800c536:	f7ff bfd3 	b.w	800c4e0 <_raise_r>
 800c53a:	bf00      	nop
 800c53c:	20000034 	.word	0x20000034

0800c540 <_kill_r>:
 800c540:	b538      	push	{r3, r4, r5, lr}
 800c542:	2300      	movs	r3, #0
 800c544:	4d06      	ldr	r5, [pc, #24]	@ (800c560 <_kill_r+0x20>)
 800c546:	4604      	mov	r4, r0
 800c548:	4608      	mov	r0, r1
 800c54a:	4611      	mov	r1, r2
 800c54c:	602b      	str	r3, [r5, #0]
 800c54e:	f7f5 fd81 	bl	8002054 <_kill>
 800c552:	1c43      	adds	r3, r0, #1
 800c554:	d102      	bne.n	800c55c <_kill_r+0x1c>
 800c556:	682b      	ldr	r3, [r5, #0]
 800c558:	b103      	cbz	r3, 800c55c <_kill_r+0x1c>
 800c55a:	6023      	str	r3, [r4, #0]
 800c55c:	bd38      	pop	{r3, r4, r5, pc}
 800c55e:	bf00      	nop
 800c560:	20000554 	.word	0x20000554

0800c564 <_getpid_r>:
 800c564:	f7f5 bd6e 	b.w	8002044 <_getpid>

0800c568 <_init>:
 800c568:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c56a:	bf00      	nop
 800c56c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c56e:	bc08      	pop	{r3}
 800c570:	469e      	mov	lr, r3
 800c572:	4770      	bx	lr

0800c574 <_fini>:
 800c574:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c576:	bf00      	nop
 800c578:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c57a:	bc08      	pop	{r3}
 800c57c:	469e      	mov	lr, r3
 800c57e:	4770      	bx	lr
