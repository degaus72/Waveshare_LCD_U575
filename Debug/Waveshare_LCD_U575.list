
Waveshare_LCD_U575.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000238  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010780  08000238  08000238  00001238  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001581  080109b8  080109b8  000119b8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08011f3c  08011f3c  00012f3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08011f44  08011f44  00012f44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08011f48  08011f48  00012f48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         000001fc  20000000  08011f4c  00013000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000540  200001fc  08012148  000131fc  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  2000073c  08012148  0001373c  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  000131fc  2**0
                  CONTENTS, READONLY
 10 .debug_info   00028044  00000000  00000000  0001322c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00004d14  00000000  00000000  0003b270  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001eb8  00000000  00000000  0003ff88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 000017d7  00000000  00000000  00041e40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00037ff7  00000000  00000000  00043617  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0002a777  00000000  00000000  0007b60e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    001536b3  00000000  00000000  000a5d85  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001f9438  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00009498  00000000  00000000  001f947c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000006d  00000000  00000000  00202914  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000238 <__do_global_dtors_aux>:
 8000238:	b510      	push	{r4, lr}
 800023a:	4c05      	ldr	r4, [pc, #20]	@ (8000250 <__do_global_dtors_aux+0x18>)
 800023c:	7823      	ldrb	r3, [r4, #0]
 800023e:	b933      	cbnz	r3, 800024e <__do_global_dtors_aux+0x16>
 8000240:	4b04      	ldr	r3, [pc, #16]	@ (8000254 <__do_global_dtors_aux+0x1c>)
 8000242:	b113      	cbz	r3, 800024a <__do_global_dtors_aux+0x12>
 8000244:	4804      	ldr	r0, [pc, #16]	@ (8000258 <__do_global_dtors_aux+0x20>)
 8000246:	f3af 8000 	nop.w
 800024a:	2301      	movs	r3, #1
 800024c:	7023      	strb	r3, [r4, #0]
 800024e:	bd10      	pop	{r4, pc}
 8000250:	200001fc 	.word	0x200001fc
 8000254:	00000000 	.word	0x00000000
 8000258:	080109a0 	.word	0x080109a0

0800025c <frame_dummy>:
 800025c:	b508      	push	{r3, lr}
 800025e:	4b03      	ldr	r3, [pc, #12]	@ (800026c <frame_dummy+0x10>)
 8000260:	b11b      	cbz	r3, 800026a <frame_dummy+0xe>
 8000262:	4903      	ldr	r1, [pc, #12]	@ (8000270 <frame_dummy+0x14>)
 8000264:	4803      	ldr	r0, [pc, #12]	@ (8000274 <frame_dummy+0x18>)
 8000266:	f3af 8000 	nop.w
 800026a:	bd08      	pop	{r3, pc}
 800026c:	00000000 	.word	0x00000000
 8000270:	20000200 	.word	0x20000200
 8000274:	080109a0 	.word	0x080109a0

08000278 <strlen>:
 8000278:	4603      	mov	r3, r0
 800027a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800027e:	2a00      	cmp	r2, #0
 8000280:	d1fb      	bne.n	800027a <strlen+0x2>
 8000282:	1a18      	subs	r0, r3, r0
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr

08000288 <__aeabi_drsub>:
 8000288:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800028c:	e002      	b.n	8000294 <__adddf3>
 800028e:	bf00      	nop

08000290 <__aeabi_dsub>:
 8000290:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000294 <__adddf3>:
 8000294:	b530      	push	{r4, r5, lr}
 8000296:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800029a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800029e:	ea94 0f05 	teq	r4, r5
 80002a2:	bf08      	it	eq
 80002a4:	ea90 0f02 	teqeq	r0, r2
 80002a8:	bf1f      	itttt	ne
 80002aa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002ae:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002b2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002b6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002ba:	f000 80e2 	beq.w	8000482 <__adddf3+0x1ee>
 80002be:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002c2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002c6:	bfb8      	it	lt
 80002c8:	426d      	neglt	r5, r5
 80002ca:	dd0c      	ble.n	80002e6 <__adddf3+0x52>
 80002cc:	442c      	add	r4, r5
 80002ce:	ea80 0202 	eor.w	r2, r0, r2
 80002d2:	ea81 0303 	eor.w	r3, r1, r3
 80002d6:	ea82 0000 	eor.w	r0, r2, r0
 80002da:	ea83 0101 	eor.w	r1, r3, r1
 80002de:	ea80 0202 	eor.w	r2, r0, r2
 80002e2:	ea81 0303 	eor.w	r3, r1, r3
 80002e6:	2d36      	cmp	r5, #54	@ 0x36
 80002e8:	bf88      	it	hi
 80002ea:	bd30      	pophi	{r4, r5, pc}
 80002ec:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002f4:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002fc:	d002      	beq.n	8000304 <__adddf3+0x70>
 80002fe:	4240      	negs	r0, r0
 8000300:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000304:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000308:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800030c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000310:	d002      	beq.n	8000318 <__adddf3+0x84>
 8000312:	4252      	negs	r2, r2
 8000314:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000318:	ea94 0f05 	teq	r4, r5
 800031c:	f000 80a7 	beq.w	800046e <__adddf3+0x1da>
 8000320:	f1a4 0401 	sub.w	r4, r4, #1
 8000324:	f1d5 0e20 	rsbs	lr, r5, #32
 8000328:	db0d      	blt.n	8000346 <__adddf3+0xb2>
 800032a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800032e:	fa22 f205 	lsr.w	r2, r2, r5
 8000332:	1880      	adds	r0, r0, r2
 8000334:	f141 0100 	adc.w	r1, r1, #0
 8000338:	fa03 f20e 	lsl.w	r2, r3, lr
 800033c:	1880      	adds	r0, r0, r2
 800033e:	fa43 f305 	asr.w	r3, r3, r5
 8000342:	4159      	adcs	r1, r3
 8000344:	e00e      	b.n	8000364 <__adddf3+0xd0>
 8000346:	f1a5 0520 	sub.w	r5, r5, #32
 800034a:	f10e 0e20 	add.w	lr, lr, #32
 800034e:	2a01      	cmp	r2, #1
 8000350:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000354:	bf28      	it	cs
 8000356:	f04c 0c02 	orrcs.w	ip, ip, #2
 800035a:	fa43 f305 	asr.w	r3, r3, r5
 800035e:	18c0      	adds	r0, r0, r3
 8000360:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000364:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000368:	d507      	bpl.n	800037a <__adddf3+0xe6>
 800036a:	f04f 0e00 	mov.w	lr, #0
 800036e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000372:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000376:	eb6e 0101 	sbc.w	r1, lr, r1
 800037a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800037e:	d31b      	bcc.n	80003b8 <__adddf3+0x124>
 8000380:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000384:	d30c      	bcc.n	80003a0 <__adddf3+0x10c>
 8000386:	0849      	lsrs	r1, r1, #1
 8000388:	ea5f 0030 	movs.w	r0, r0, rrx
 800038c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000390:	f104 0401 	add.w	r4, r4, #1
 8000394:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000398:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800039c:	f080 809a 	bcs.w	80004d4 <__adddf3+0x240>
 80003a0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003a4:	bf08      	it	eq
 80003a6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003aa:	f150 0000 	adcs.w	r0, r0, #0
 80003ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003b2:	ea41 0105 	orr.w	r1, r1, r5
 80003b6:	bd30      	pop	{r4, r5, pc}
 80003b8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003bc:	4140      	adcs	r0, r0
 80003be:	eb41 0101 	adc.w	r1, r1, r1
 80003c2:	3c01      	subs	r4, #1
 80003c4:	bf28      	it	cs
 80003c6:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003ca:	d2e9      	bcs.n	80003a0 <__adddf3+0x10c>
 80003cc:	f091 0f00 	teq	r1, #0
 80003d0:	bf04      	itt	eq
 80003d2:	4601      	moveq	r1, r0
 80003d4:	2000      	moveq	r0, #0
 80003d6:	fab1 f381 	clz	r3, r1
 80003da:	bf08      	it	eq
 80003dc:	3320      	addeq	r3, #32
 80003de:	f1a3 030b 	sub.w	r3, r3, #11
 80003e2:	f1b3 0220 	subs.w	r2, r3, #32
 80003e6:	da0c      	bge.n	8000402 <__adddf3+0x16e>
 80003e8:	320c      	adds	r2, #12
 80003ea:	dd08      	ble.n	80003fe <__adddf3+0x16a>
 80003ec:	f102 0c14 	add.w	ip, r2, #20
 80003f0:	f1c2 020c 	rsb	r2, r2, #12
 80003f4:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f8:	fa21 f102 	lsr.w	r1, r1, r2
 80003fc:	e00c      	b.n	8000418 <__adddf3+0x184>
 80003fe:	f102 0214 	add.w	r2, r2, #20
 8000402:	bfd8      	it	le
 8000404:	f1c2 0c20 	rsble	ip, r2, #32
 8000408:	fa01 f102 	lsl.w	r1, r1, r2
 800040c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000410:	bfdc      	itt	le
 8000412:	ea41 010c 	orrle.w	r1, r1, ip
 8000416:	4090      	lslle	r0, r2
 8000418:	1ae4      	subs	r4, r4, r3
 800041a:	bfa2      	ittt	ge
 800041c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000420:	4329      	orrge	r1, r5
 8000422:	bd30      	popge	{r4, r5, pc}
 8000424:	ea6f 0404 	mvn.w	r4, r4
 8000428:	3c1f      	subs	r4, #31
 800042a:	da1c      	bge.n	8000466 <__adddf3+0x1d2>
 800042c:	340c      	adds	r4, #12
 800042e:	dc0e      	bgt.n	800044e <__adddf3+0x1ba>
 8000430:	f104 0414 	add.w	r4, r4, #20
 8000434:	f1c4 0220 	rsb	r2, r4, #32
 8000438:	fa20 f004 	lsr.w	r0, r0, r4
 800043c:	fa01 f302 	lsl.w	r3, r1, r2
 8000440:	ea40 0003 	orr.w	r0, r0, r3
 8000444:	fa21 f304 	lsr.w	r3, r1, r4
 8000448:	ea45 0103 	orr.w	r1, r5, r3
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	f1c4 040c 	rsb	r4, r4, #12
 8000452:	f1c4 0220 	rsb	r2, r4, #32
 8000456:	fa20 f002 	lsr.w	r0, r0, r2
 800045a:	fa01 f304 	lsl.w	r3, r1, r4
 800045e:	ea40 0003 	orr.w	r0, r0, r3
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	fa21 f004 	lsr.w	r0, r1, r4
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	f094 0f00 	teq	r4, #0
 8000472:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000476:	bf06      	itte	eq
 8000478:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800047c:	3401      	addeq	r4, #1
 800047e:	3d01      	subne	r5, #1
 8000480:	e74e      	b.n	8000320 <__adddf3+0x8c>
 8000482:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000486:	bf18      	it	ne
 8000488:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800048c:	d029      	beq.n	80004e2 <__adddf3+0x24e>
 800048e:	ea94 0f05 	teq	r4, r5
 8000492:	bf08      	it	eq
 8000494:	ea90 0f02 	teqeq	r0, r2
 8000498:	d005      	beq.n	80004a6 <__adddf3+0x212>
 800049a:	ea54 0c00 	orrs.w	ip, r4, r0
 800049e:	bf04      	itt	eq
 80004a0:	4619      	moveq	r1, r3
 80004a2:	4610      	moveq	r0, r2
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	ea91 0f03 	teq	r1, r3
 80004aa:	bf1e      	ittt	ne
 80004ac:	2100      	movne	r1, #0
 80004ae:	2000      	movne	r0, #0
 80004b0:	bd30      	popne	{r4, r5, pc}
 80004b2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004b6:	d105      	bne.n	80004c4 <__adddf3+0x230>
 80004b8:	0040      	lsls	r0, r0, #1
 80004ba:	4149      	adcs	r1, r1
 80004bc:	bf28      	it	cs
 80004be:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004c2:	bd30      	pop	{r4, r5, pc}
 80004c4:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c8:	bf3c      	itt	cc
 80004ca:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004ce:	bd30      	popcc	{r4, r5, pc}
 80004d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004d4:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004dc:	f04f 0000 	mov.w	r0, #0
 80004e0:	bd30      	pop	{r4, r5, pc}
 80004e2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004e6:	bf1a      	itte	ne
 80004e8:	4619      	movne	r1, r3
 80004ea:	4610      	movne	r0, r2
 80004ec:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f0:	bf1c      	itt	ne
 80004f2:	460b      	movne	r3, r1
 80004f4:	4602      	movne	r2, r0
 80004f6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004fa:	bf06      	itte	eq
 80004fc:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000500:	ea91 0f03 	teqeq	r1, r3
 8000504:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	bf00      	nop

0800050c <__aeabi_ui2d>:
 800050c:	f090 0f00 	teq	r0, #0
 8000510:	bf04      	itt	eq
 8000512:	2100      	moveq	r1, #0
 8000514:	4770      	bxeq	lr
 8000516:	b530      	push	{r4, r5, lr}
 8000518:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800051c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000520:	f04f 0500 	mov.w	r5, #0
 8000524:	f04f 0100 	mov.w	r1, #0
 8000528:	e750      	b.n	80003cc <__adddf3+0x138>
 800052a:	bf00      	nop

0800052c <__aeabi_i2d>:
 800052c:	f090 0f00 	teq	r0, #0
 8000530:	bf04      	itt	eq
 8000532:	2100      	moveq	r1, #0
 8000534:	4770      	bxeq	lr
 8000536:	b530      	push	{r4, r5, lr}
 8000538:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800053c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000540:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000544:	bf48      	it	mi
 8000546:	4240      	negmi	r0, r0
 8000548:	f04f 0100 	mov.w	r1, #0
 800054c:	e73e      	b.n	80003cc <__adddf3+0x138>
 800054e:	bf00      	nop

08000550 <__aeabi_f2d>:
 8000550:	0042      	lsls	r2, r0, #1
 8000552:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000556:	ea4f 0131 	mov.w	r1, r1, rrx
 800055a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800055e:	bf1f      	itttt	ne
 8000560:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000564:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000568:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 800056c:	4770      	bxne	lr
 800056e:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000572:	bf08      	it	eq
 8000574:	4770      	bxeq	lr
 8000576:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800057a:	bf04      	itt	eq
 800057c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000580:	4770      	bxeq	lr
 8000582:	b530      	push	{r4, r5, lr}
 8000584:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000588:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800058c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000590:	e71c      	b.n	80003cc <__adddf3+0x138>
 8000592:	bf00      	nop

08000594 <__aeabi_ul2d>:
 8000594:	ea50 0201 	orrs.w	r2, r0, r1
 8000598:	bf08      	it	eq
 800059a:	4770      	bxeq	lr
 800059c:	b530      	push	{r4, r5, lr}
 800059e:	f04f 0500 	mov.w	r5, #0
 80005a2:	e00a      	b.n	80005ba <__aeabi_l2d+0x16>

080005a4 <__aeabi_l2d>:
 80005a4:	ea50 0201 	orrs.w	r2, r0, r1
 80005a8:	bf08      	it	eq
 80005aa:	4770      	bxeq	lr
 80005ac:	b530      	push	{r4, r5, lr}
 80005ae:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005b2:	d502      	bpl.n	80005ba <__aeabi_l2d+0x16>
 80005b4:	4240      	negs	r0, r0
 80005b6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005ba:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005be:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005c2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005c6:	f43f aed8 	beq.w	800037a <__adddf3+0xe6>
 80005ca:	f04f 0203 	mov.w	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005e2:	f1c2 0320 	rsb	r3, r2, #32
 80005e6:	fa00 fc03 	lsl.w	ip, r0, r3
 80005ea:	fa20 f002 	lsr.w	r0, r0, r2
 80005ee:	fa01 fe03 	lsl.w	lr, r1, r3
 80005f2:	ea40 000e 	orr.w	r0, r0, lr
 80005f6:	fa21 f102 	lsr.w	r1, r1, r2
 80005fa:	4414      	add	r4, r2
 80005fc:	e6bd      	b.n	800037a <__adddf3+0xe6>
 80005fe:	bf00      	nop

08000600 <__aeabi_dmul>:
 8000600:	b570      	push	{r4, r5, r6, lr}
 8000602:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000606:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800060a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800060e:	bf1d      	ittte	ne
 8000610:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000614:	ea94 0f0c 	teqne	r4, ip
 8000618:	ea95 0f0c 	teqne	r5, ip
 800061c:	f000 f8de 	bleq	80007dc <__aeabi_dmul+0x1dc>
 8000620:	442c      	add	r4, r5
 8000622:	ea81 0603 	eor.w	r6, r1, r3
 8000626:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800062a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800062e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000632:	bf18      	it	ne
 8000634:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000638:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800063c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000640:	d038      	beq.n	80006b4 <__aeabi_dmul+0xb4>
 8000642:	fba0 ce02 	umull	ip, lr, r0, r2
 8000646:	f04f 0500 	mov.w	r5, #0
 800064a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800064e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000652:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000656:	f04f 0600 	mov.w	r6, #0
 800065a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800065e:	f09c 0f00 	teq	ip, #0
 8000662:	bf18      	it	ne
 8000664:	f04e 0e01 	orrne.w	lr, lr, #1
 8000668:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 800066c:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000670:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000674:	d204      	bcs.n	8000680 <__aeabi_dmul+0x80>
 8000676:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800067a:	416d      	adcs	r5, r5
 800067c:	eb46 0606 	adc.w	r6, r6, r6
 8000680:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000684:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000688:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800068c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000690:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000694:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000698:	bf88      	it	hi
 800069a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800069e:	d81e      	bhi.n	80006de <__aeabi_dmul+0xde>
 80006a0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006a4:	bf08      	it	eq
 80006a6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006aa:	f150 0000 	adcs.w	r0, r0, #0
 80006ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b8:	ea46 0101 	orr.w	r1, r6, r1
 80006bc:	ea40 0002 	orr.w	r0, r0, r2
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c8:	bfc2      	ittt	gt
 80006ca:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006ce:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006d2:	bd70      	popgt	{r4, r5, r6, pc}
 80006d4:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d8:	f04f 0e00 	mov.w	lr, #0
 80006dc:	3c01      	subs	r4, #1
 80006de:	f300 80ab 	bgt.w	8000838 <__aeabi_dmul+0x238>
 80006e2:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006e6:	bfde      	ittt	le
 80006e8:	2000      	movle	r0, #0
 80006ea:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006ee:	bd70      	pople	{r4, r5, r6, pc}
 80006f0:	f1c4 0400 	rsb	r4, r4, #0
 80006f4:	3c20      	subs	r4, #32
 80006f6:	da35      	bge.n	8000764 <__aeabi_dmul+0x164>
 80006f8:	340c      	adds	r4, #12
 80006fa:	dc1b      	bgt.n	8000734 <__aeabi_dmul+0x134>
 80006fc:	f104 0414 	add.w	r4, r4, #20
 8000700:	f1c4 0520 	rsb	r5, r4, #32
 8000704:	fa00 f305 	lsl.w	r3, r0, r5
 8000708:	fa20 f004 	lsr.w	r0, r0, r4
 800070c:	fa01 f205 	lsl.w	r2, r1, r5
 8000710:	ea40 0002 	orr.w	r0, r0, r2
 8000714:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000718:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800071c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000720:	fa21 f604 	lsr.w	r6, r1, r4
 8000724:	eb42 0106 	adc.w	r1, r2, r6
 8000728:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800072c:	bf08      	it	eq
 800072e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000732:	bd70      	pop	{r4, r5, r6, pc}
 8000734:	f1c4 040c 	rsb	r4, r4, #12
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f304 	lsl.w	r3, r0, r4
 8000740:	fa20 f005 	lsr.w	r0, r0, r5
 8000744:	fa01 f204 	lsl.w	r2, r1, r4
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000750:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000754:	f141 0100 	adc.w	r1, r1, #0
 8000758:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800075c:	bf08      	it	eq
 800075e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000762:	bd70      	pop	{r4, r5, r6, pc}
 8000764:	f1c4 0520 	rsb	r5, r4, #32
 8000768:	fa00 f205 	lsl.w	r2, r0, r5
 800076c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000770:	fa20 f304 	lsr.w	r3, r0, r4
 8000774:	fa01 f205 	lsl.w	r2, r1, r5
 8000778:	ea43 0302 	orr.w	r3, r3, r2
 800077c:	fa21 f004 	lsr.w	r0, r1, r4
 8000780:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000784:	fa21 f204 	lsr.w	r2, r1, r4
 8000788:	ea20 0002 	bic.w	r0, r0, r2
 800078c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f094 0f00 	teq	r4, #0
 80007a0:	d10f      	bne.n	80007c2 <__aeabi_dmul+0x1c2>
 80007a2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007a6:	0040      	lsls	r0, r0, #1
 80007a8:	eb41 0101 	adc.w	r1, r1, r1
 80007ac:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b0:	bf08      	it	eq
 80007b2:	3c01      	subeq	r4, #1
 80007b4:	d0f7      	beq.n	80007a6 <__aeabi_dmul+0x1a6>
 80007b6:	ea41 0106 	orr.w	r1, r1, r6
 80007ba:	f095 0f00 	teq	r5, #0
 80007be:	bf18      	it	ne
 80007c0:	4770      	bxne	lr
 80007c2:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007c6:	0052      	lsls	r2, r2, #1
 80007c8:	eb43 0303 	adc.w	r3, r3, r3
 80007cc:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d0:	bf08      	it	eq
 80007d2:	3d01      	subeq	r5, #1
 80007d4:	d0f7      	beq.n	80007c6 <__aeabi_dmul+0x1c6>
 80007d6:	ea43 0306 	orr.w	r3, r3, r6
 80007da:	4770      	bx	lr
 80007dc:	ea94 0f0c 	teq	r4, ip
 80007e0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007e4:	bf18      	it	ne
 80007e6:	ea95 0f0c 	teqne	r5, ip
 80007ea:	d00c      	beq.n	8000806 <__aeabi_dmul+0x206>
 80007ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f0:	bf18      	it	ne
 80007f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007f6:	d1d1      	bne.n	800079c <__aeabi_dmul+0x19c>
 80007f8:	ea81 0103 	eor.w	r1, r1, r3
 80007fc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000800:	f04f 0000 	mov.w	r0, #0
 8000804:	bd70      	pop	{r4, r5, r6, pc}
 8000806:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800080a:	bf06      	itte	eq
 800080c:	4610      	moveq	r0, r2
 800080e:	4619      	moveq	r1, r3
 8000810:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000814:	d019      	beq.n	800084a <__aeabi_dmul+0x24a>
 8000816:	ea94 0f0c 	teq	r4, ip
 800081a:	d102      	bne.n	8000822 <__aeabi_dmul+0x222>
 800081c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000820:	d113      	bne.n	800084a <__aeabi_dmul+0x24a>
 8000822:	ea95 0f0c 	teq	r5, ip
 8000826:	d105      	bne.n	8000834 <__aeabi_dmul+0x234>
 8000828:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800082c:	bf1c      	itt	ne
 800082e:	4610      	movne	r0, r2
 8000830:	4619      	movne	r1, r3
 8000832:	d10a      	bne.n	800084a <__aeabi_dmul+0x24a>
 8000834:	ea81 0103 	eor.w	r1, r1, r3
 8000838:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800083c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000840:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000844:	f04f 0000 	mov.w	r0, #0
 8000848:	bd70      	pop	{r4, r5, r6, pc}
 800084a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800084e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000852:	bd70      	pop	{r4, r5, r6, pc}

08000854 <__aeabi_ddiv>:
 8000854:	b570      	push	{r4, r5, r6, lr}
 8000856:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800085a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800085e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000862:	bf1d      	ittte	ne
 8000864:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000868:	ea94 0f0c 	teqne	r4, ip
 800086c:	ea95 0f0c 	teqne	r5, ip
 8000870:	f000 f8a7 	bleq	80009c2 <__aeabi_ddiv+0x16e>
 8000874:	eba4 0405 	sub.w	r4, r4, r5
 8000878:	ea81 0e03 	eor.w	lr, r1, r3
 800087c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000880:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000884:	f000 8088 	beq.w	8000998 <__aeabi_ddiv+0x144>
 8000888:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800088c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000890:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000894:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000898:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800089c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008a4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008ac:	429d      	cmp	r5, r3
 80008ae:	bf08      	it	eq
 80008b0:	4296      	cmpeq	r6, r2
 80008b2:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008b6:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008ba:	d202      	bcs.n	80008c2 <__aeabi_ddiv+0x6e>
 80008bc:	085b      	lsrs	r3, r3, #1
 80008be:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c2:	1ab6      	subs	r6, r6, r2
 80008c4:	eb65 0503 	sbc.w	r5, r5, r3
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008d2:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000930:	ea55 0e06 	orrs.w	lr, r5, r6
 8000934:	d018      	beq.n	8000968 <__aeabi_ddiv+0x114>
 8000936:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800093a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800093e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000942:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000946:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800094a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800094e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000952:	d1c0      	bne.n	80008d6 <__aeabi_ddiv+0x82>
 8000954:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000958:	d10b      	bne.n	8000972 <__aeabi_ddiv+0x11e>
 800095a:	ea41 0100 	orr.w	r1, r1, r0
 800095e:	f04f 0000 	mov.w	r0, #0
 8000962:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8000966:	e7b6      	b.n	80008d6 <__aeabi_ddiv+0x82>
 8000968:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 800096c:	bf04      	itt	eq
 800096e:	4301      	orreq	r1, r0
 8000970:	2000      	moveq	r0, #0
 8000972:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000976:	bf88      	it	hi
 8000978:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800097c:	f63f aeaf 	bhi.w	80006de <__aeabi_dmul+0xde>
 8000980:	ebb5 0c03 	subs.w	ip, r5, r3
 8000984:	bf04      	itt	eq
 8000986:	ebb6 0c02 	subseq.w	ip, r6, r2
 800098a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800098e:	f150 0000 	adcs.w	r0, r0, #0
 8000992:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000996:	bd70      	pop	{r4, r5, r6, pc}
 8000998:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800099c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009a4:	bfc2      	ittt	gt
 80009a6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009aa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	popgt	{r4, r5, r6, pc}
 80009b0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009b4:	f04f 0e00 	mov.w	lr, #0
 80009b8:	3c01      	subs	r4, #1
 80009ba:	e690      	b.n	80006de <__aeabi_dmul+0xde>
 80009bc:	ea45 0e06 	orr.w	lr, r5, r6
 80009c0:	e68d      	b.n	80006de <__aeabi_dmul+0xde>
 80009c2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009c6:	ea94 0f0c 	teq	r4, ip
 80009ca:	bf08      	it	eq
 80009cc:	ea95 0f0c 	teqeq	r5, ip
 80009d0:	f43f af3b 	beq.w	800084a <__aeabi_dmul+0x24a>
 80009d4:	ea94 0f0c 	teq	r4, ip
 80009d8:	d10a      	bne.n	80009f0 <__aeabi_ddiv+0x19c>
 80009da:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009de:	f47f af34 	bne.w	800084a <__aeabi_dmul+0x24a>
 80009e2:	ea95 0f0c 	teq	r5, ip
 80009e6:	f47f af25 	bne.w	8000834 <__aeabi_dmul+0x234>
 80009ea:	4610      	mov	r0, r2
 80009ec:	4619      	mov	r1, r3
 80009ee:	e72c      	b.n	800084a <__aeabi_dmul+0x24a>
 80009f0:	ea95 0f0c 	teq	r5, ip
 80009f4:	d106      	bne.n	8000a04 <__aeabi_ddiv+0x1b0>
 80009f6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009fa:	f43f aefd 	beq.w	80007f8 <__aeabi_dmul+0x1f8>
 80009fe:	4610      	mov	r0, r2
 8000a00:	4619      	mov	r1, r3
 8000a02:	e722      	b.n	800084a <__aeabi_dmul+0x24a>
 8000a04:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a08:	bf18      	it	ne
 8000a0a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a0e:	f47f aec5 	bne.w	800079c <__aeabi_dmul+0x19c>
 8000a12:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a16:	f47f af0d 	bne.w	8000834 <__aeabi_dmul+0x234>
 8000a1a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a1e:	f47f aeeb 	bne.w	80007f8 <__aeabi_dmul+0x1f8>
 8000a22:	e712      	b.n	800084a <__aeabi_dmul+0x24a>

08000a24 <__gedf2>:
 8000a24:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a28:	e006      	b.n	8000a38 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__ledf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	e002      	b.n	8000a38 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__cmpdf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a44:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a48:	bf18      	it	ne
 8000a4a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a4e:	d01b      	beq.n	8000a88 <__cmpdf2+0x54>
 8000a50:	b001      	add	sp, #4
 8000a52:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a56:	bf0c      	ite	eq
 8000a58:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a5c:	ea91 0f03 	teqne	r1, r3
 8000a60:	bf02      	ittt	eq
 8000a62:	ea90 0f02 	teqeq	r0, r2
 8000a66:	2000      	moveq	r0, #0
 8000a68:	4770      	bxeq	lr
 8000a6a:	f110 0f00 	cmn.w	r0, #0
 8000a6e:	ea91 0f03 	teq	r1, r3
 8000a72:	bf58      	it	pl
 8000a74:	4299      	cmppl	r1, r3
 8000a76:	bf08      	it	eq
 8000a78:	4290      	cmpeq	r0, r2
 8000a7a:	bf2c      	ite	cs
 8000a7c:	17d8      	asrcs	r0, r3, #31
 8000a7e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a82:	f040 0001 	orr.w	r0, r0, #1
 8000a86:	4770      	bx	lr
 8000a88:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a8c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a90:	d102      	bne.n	8000a98 <__cmpdf2+0x64>
 8000a92:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a96:	d107      	bne.n	8000aa8 <__cmpdf2+0x74>
 8000a98:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a9c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa0:	d1d6      	bne.n	8000a50 <__cmpdf2+0x1c>
 8000aa2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aa6:	d0d3      	beq.n	8000a50 <__cmpdf2+0x1c>
 8000aa8:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aac:	4770      	bx	lr
 8000aae:	bf00      	nop

08000ab0 <__aeabi_cdrcmple>:
 8000ab0:	4684      	mov	ip, r0
 8000ab2:	4610      	mov	r0, r2
 8000ab4:	4662      	mov	r2, ip
 8000ab6:	468c      	mov	ip, r1
 8000ab8:	4619      	mov	r1, r3
 8000aba:	4663      	mov	r3, ip
 8000abc:	e000      	b.n	8000ac0 <__aeabi_cdcmpeq>
 8000abe:	bf00      	nop

08000ac0 <__aeabi_cdcmpeq>:
 8000ac0:	b501      	push	{r0, lr}
 8000ac2:	f7ff ffb7 	bl	8000a34 <__cmpdf2>
 8000ac6:	2800      	cmp	r0, #0
 8000ac8:	bf48      	it	mi
 8000aca:	f110 0f00 	cmnmi.w	r0, #0
 8000ace:	bd01      	pop	{r0, pc}

08000ad0 <__aeabi_dcmpeq>:
 8000ad0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad4:	f7ff fff4 	bl	8000ac0 <__aeabi_cdcmpeq>
 8000ad8:	bf0c      	ite	eq
 8000ada:	2001      	moveq	r0, #1
 8000adc:	2000      	movne	r0, #0
 8000ade:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae2:	bf00      	nop

08000ae4 <__aeabi_dcmplt>:
 8000ae4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae8:	f7ff ffea 	bl	8000ac0 <__aeabi_cdcmpeq>
 8000aec:	bf34      	ite	cc
 8000aee:	2001      	movcc	r0, #1
 8000af0:	2000      	movcs	r0, #0
 8000af2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af6:	bf00      	nop

08000af8 <__aeabi_dcmple>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff ffe0 	bl	8000ac0 <__aeabi_cdcmpeq>
 8000b00:	bf94      	ite	ls
 8000b02:	2001      	movls	r0, #1
 8000b04:	2000      	movhi	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmpge>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffce 	bl	8000ab0 <__aeabi_cdrcmple>
 8000b14:	bf94      	ite	ls
 8000b16:	2001      	movls	r0, #1
 8000b18:	2000      	movhi	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmpgt>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffc4 	bl	8000ab0 <__aeabi_cdrcmple>
 8000b28:	bf34      	ite	cc
 8000b2a:	2001      	movcc	r0, #1
 8000b2c:	2000      	movcs	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpun>:
 8000b34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b3c:	d102      	bne.n	8000b44 <__aeabi_dcmpun+0x10>
 8000b3e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b42:	d10a      	bne.n	8000b5a <__aeabi_dcmpun+0x26>
 8000b44:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b4c:	d102      	bne.n	8000b54 <__aeabi_dcmpun+0x20>
 8000b4e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b52:	d102      	bne.n	8000b5a <__aeabi_dcmpun+0x26>
 8000b54:	f04f 0000 	mov.w	r0, #0
 8000b58:	4770      	bx	lr
 8000b5a:	f04f 0001 	mov.w	r0, #1
 8000b5e:	4770      	bx	lr

08000b60 <__aeabi_d2iz>:
 8000b60:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b64:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b68:	d215      	bcs.n	8000b96 <__aeabi_d2iz+0x36>
 8000b6a:	d511      	bpl.n	8000b90 <__aeabi_d2iz+0x30>
 8000b6c:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b70:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b74:	d912      	bls.n	8000b9c <__aeabi_d2iz+0x3c>
 8000b76:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b7a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b7e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b82:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b86:	fa23 f002 	lsr.w	r0, r3, r2
 8000b8a:	bf18      	it	ne
 8000b8c:	4240      	negne	r0, r0
 8000b8e:	4770      	bx	lr
 8000b90:	f04f 0000 	mov.w	r0, #0
 8000b94:	4770      	bx	lr
 8000b96:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b9a:	d105      	bne.n	8000ba8 <__aeabi_d2iz+0x48>
 8000b9c:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba0:	bf08      	it	eq
 8000ba2:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	bf00      	nop

08000bb0 <__aeabi_d2f>:
 8000bb0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bb4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bb8:	bf24      	itt	cs
 8000bba:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bbe:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bc2:	d90d      	bls.n	8000be0 <__aeabi_d2f+0x30>
 8000bc4:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bc8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bcc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd0:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bd4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd8:	bf08      	it	eq
 8000bda:	f020 0001 	biceq.w	r0, r0, #1
 8000bde:	4770      	bx	lr
 8000be0:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000be4:	d121      	bne.n	8000c2a <__aeabi_d2f+0x7a>
 8000be6:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000bea:	bfbc      	itt	lt
 8000bec:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000bf0:	4770      	bxlt	lr
 8000bf2:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bf6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bfa:	f1c2 0218 	rsb	r2, r2, #24
 8000bfe:	f1c2 0c20 	rsb	ip, r2, #32
 8000c02:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c06:	fa20 f002 	lsr.w	r0, r0, r2
 8000c0a:	bf18      	it	ne
 8000c0c:	f040 0001 	orrne.w	r0, r0, #1
 8000c10:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c14:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c18:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c1c:	ea40 000c 	orr.w	r0, r0, ip
 8000c20:	fa23 f302 	lsr.w	r3, r3, r2
 8000c24:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c28:	e7cc      	b.n	8000bc4 <__aeabi_d2f+0x14>
 8000c2a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c2e:	d107      	bne.n	8000c40 <__aeabi_d2f+0x90>
 8000c30:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c34:	bf1e      	ittt	ne
 8000c36:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c3a:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c3e:	4770      	bxne	lr
 8000c40:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c44:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c48:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c4c:	4770      	bx	lr
 8000c4e:	bf00      	nop

08000c50 <__aeabi_frsub>:
 8000c50:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000c54:	e002      	b.n	8000c5c <__addsf3>
 8000c56:	bf00      	nop

08000c58 <__aeabi_fsub>:
 8000c58:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000c5c <__addsf3>:
 8000c5c:	0042      	lsls	r2, r0, #1
 8000c5e:	bf1f      	itttt	ne
 8000c60:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000c64:	ea92 0f03 	teqne	r2, r3
 8000c68:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000c6c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c70:	d06a      	beq.n	8000d48 <__addsf3+0xec>
 8000c72:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000c76:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000c7a:	bfc1      	itttt	gt
 8000c7c:	18d2      	addgt	r2, r2, r3
 8000c7e:	4041      	eorgt	r1, r0
 8000c80:	4048      	eorgt	r0, r1
 8000c82:	4041      	eorgt	r1, r0
 8000c84:	bfb8      	it	lt
 8000c86:	425b      	neglt	r3, r3
 8000c88:	2b19      	cmp	r3, #25
 8000c8a:	bf88      	it	hi
 8000c8c:	4770      	bxhi	lr
 8000c8e:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000c92:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c96:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000c9a:	bf18      	it	ne
 8000c9c:	4240      	negne	r0, r0
 8000c9e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000ca2:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000ca6:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000caa:	bf18      	it	ne
 8000cac:	4249      	negne	r1, r1
 8000cae:	ea92 0f03 	teq	r2, r3
 8000cb2:	d03f      	beq.n	8000d34 <__addsf3+0xd8>
 8000cb4:	f1a2 0201 	sub.w	r2, r2, #1
 8000cb8:	fa41 fc03 	asr.w	ip, r1, r3
 8000cbc:	eb10 000c 	adds.w	r0, r0, ip
 8000cc0:	f1c3 0320 	rsb	r3, r3, #32
 8000cc4:	fa01 f103 	lsl.w	r1, r1, r3
 8000cc8:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000ccc:	d502      	bpl.n	8000cd4 <__addsf3+0x78>
 8000cce:	4249      	negs	r1, r1
 8000cd0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000cd4:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000cd8:	d313      	bcc.n	8000d02 <__addsf3+0xa6>
 8000cda:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000cde:	d306      	bcc.n	8000cee <__addsf3+0x92>
 8000ce0:	0840      	lsrs	r0, r0, #1
 8000ce2:	ea4f 0131 	mov.w	r1, r1, rrx
 8000ce6:	f102 0201 	add.w	r2, r2, #1
 8000cea:	2afe      	cmp	r2, #254	@ 0xfe
 8000cec:	d251      	bcs.n	8000d92 <__addsf3+0x136>
 8000cee:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000cf2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000cf6:	bf08      	it	eq
 8000cf8:	f020 0001 	biceq.w	r0, r0, #1
 8000cfc:	ea40 0003 	orr.w	r0, r0, r3
 8000d00:	4770      	bx	lr
 8000d02:	0049      	lsls	r1, r1, #1
 8000d04:	eb40 0000 	adc.w	r0, r0, r0
 8000d08:	3a01      	subs	r2, #1
 8000d0a:	bf28      	it	cs
 8000d0c:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000d10:	d2ed      	bcs.n	8000cee <__addsf3+0x92>
 8000d12:	fab0 fc80 	clz	ip, r0
 8000d16:	f1ac 0c08 	sub.w	ip, ip, #8
 8000d1a:	ebb2 020c 	subs.w	r2, r2, ip
 8000d1e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000d22:	bfaa      	itet	ge
 8000d24:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000d28:	4252      	neglt	r2, r2
 8000d2a:	4318      	orrge	r0, r3
 8000d2c:	bfbc      	itt	lt
 8000d2e:	40d0      	lsrlt	r0, r2
 8000d30:	4318      	orrlt	r0, r3
 8000d32:	4770      	bx	lr
 8000d34:	f092 0f00 	teq	r2, #0
 8000d38:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000d3c:	bf06      	itte	eq
 8000d3e:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000d42:	3201      	addeq	r2, #1
 8000d44:	3b01      	subne	r3, #1
 8000d46:	e7b5      	b.n	8000cb4 <__addsf3+0x58>
 8000d48:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000d4c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000d50:	bf18      	it	ne
 8000d52:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000d56:	d021      	beq.n	8000d9c <__addsf3+0x140>
 8000d58:	ea92 0f03 	teq	r2, r3
 8000d5c:	d004      	beq.n	8000d68 <__addsf3+0x10c>
 8000d5e:	f092 0f00 	teq	r2, #0
 8000d62:	bf08      	it	eq
 8000d64:	4608      	moveq	r0, r1
 8000d66:	4770      	bx	lr
 8000d68:	ea90 0f01 	teq	r0, r1
 8000d6c:	bf1c      	itt	ne
 8000d6e:	2000      	movne	r0, #0
 8000d70:	4770      	bxne	lr
 8000d72:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000d76:	d104      	bne.n	8000d82 <__addsf3+0x126>
 8000d78:	0040      	lsls	r0, r0, #1
 8000d7a:	bf28      	it	cs
 8000d7c:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000d80:	4770      	bx	lr
 8000d82:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000d86:	bf3c      	itt	cc
 8000d88:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000d8c:	4770      	bxcc	lr
 8000d8e:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000d92:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000d96:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000d9a:	4770      	bx	lr
 8000d9c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000da0:	bf16      	itet	ne
 8000da2:	4608      	movne	r0, r1
 8000da4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000da8:	4601      	movne	r1, r0
 8000daa:	0242      	lsls	r2, r0, #9
 8000dac:	bf06      	itte	eq
 8000dae:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000db2:	ea90 0f01 	teqeq	r0, r1
 8000db6:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000dba:	4770      	bx	lr

08000dbc <__aeabi_ui2f>:
 8000dbc:	f04f 0300 	mov.w	r3, #0
 8000dc0:	e004      	b.n	8000dcc <__aeabi_i2f+0x8>
 8000dc2:	bf00      	nop

08000dc4 <__aeabi_i2f>:
 8000dc4:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000dc8:	bf48      	it	mi
 8000dca:	4240      	negmi	r0, r0
 8000dcc:	ea5f 0c00 	movs.w	ip, r0
 8000dd0:	bf08      	it	eq
 8000dd2:	4770      	bxeq	lr
 8000dd4:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000dd8:	4601      	mov	r1, r0
 8000dda:	f04f 0000 	mov.w	r0, #0
 8000dde:	e01c      	b.n	8000e1a <__aeabi_l2f+0x2a>

08000de0 <__aeabi_ul2f>:
 8000de0:	ea50 0201 	orrs.w	r2, r0, r1
 8000de4:	bf08      	it	eq
 8000de6:	4770      	bxeq	lr
 8000de8:	f04f 0300 	mov.w	r3, #0
 8000dec:	e00a      	b.n	8000e04 <__aeabi_l2f+0x14>
 8000dee:	bf00      	nop

08000df0 <__aeabi_l2f>:
 8000df0:	ea50 0201 	orrs.w	r2, r0, r1
 8000df4:	bf08      	it	eq
 8000df6:	4770      	bxeq	lr
 8000df8:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000dfc:	d502      	bpl.n	8000e04 <__aeabi_l2f+0x14>
 8000dfe:	4240      	negs	r0, r0
 8000e00:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000e04:	ea5f 0c01 	movs.w	ip, r1
 8000e08:	bf02      	ittt	eq
 8000e0a:	4684      	moveq	ip, r0
 8000e0c:	4601      	moveq	r1, r0
 8000e0e:	2000      	moveq	r0, #0
 8000e10:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000e14:	bf08      	it	eq
 8000e16:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000e1a:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000e1e:	fabc f28c 	clz	r2, ip
 8000e22:	3a08      	subs	r2, #8
 8000e24:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000e28:	db10      	blt.n	8000e4c <__aeabi_l2f+0x5c>
 8000e2a:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e2e:	4463      	add	r3, ip
 8000e30:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e34:	f1c2 0220 	rsb	r2, r2, #32
 8000e38:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000e3c:	fa20 f202 	lsr.w	r2, r0, r2
 8000e40:	eb43 0002 	adc.w	r0, r3, r2
 8000e44:	bf08      	it	eq
 8000e46:	f020 0001 	biceq.w	r0, r0, #1
 8000e4a:	4770      	bx	lr
 8000e4c:	f102 0220 	add.w	r2, r2, #32
 8000e50:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e54:	f1c2 0220 	rsb	r2, r2, #32
 8000e58:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000e5c:	fa21 f202 	lsr.w	r2, r1, r2
 8000e60:	eb43 0002 	adc.w	r0, r3, r2
 8000e64:	bf08      	it	eq
 8000e66:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e6a:	4770      	bx	lr

08000e6c <__aeabi_fmul>:
 8000e6c:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000e70:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e74:	bf1e      	ittt	ne
 8000e76:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e7a:	ea92 0f0c 	teqne	r2, ip
 8000e7e:	ea93 0f0c 	teqne	r3, ip
 8000e82:	d06f      	beq.n	8000f64 <__aeabi_fmul+0xf8>
 8000e84:	441a      	add	r2, r3
 8000e86:	ea80 0c01 	eor.w	ip, r0, r1
 8000e8a:	0240      	lsls	r0, r0, #9
 8000e8c:	bf18      	it	ne
 8000e8e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000e92:	d01e      	beq.n	8000ed2 <__aeabi_fmul+0x66>
 8000e94:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000e98:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000e9c:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000ea0:	fba0 3101 	umull	r3, r1, r0, r1
 8000ea4:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000ea8:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000eac:	bf3e      	ittt	cc
 8000eae:	0049      	lslcc	r1, r1, #1
 8000eb0:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000eb4:	005b      	lslcc	r3, r3, #1
 8000eb6:	ea40 0001 	orr.w	r0, r0, r1
 8000eba:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000ebe:	2afd      	cmp	r2, #253	@ 0xfd
 8000ec0:	d81d      	bhi.n	8000efe <__aeabi_fmul+0x92>
 8000ec2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000ec6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000eca:	bf08      	it	eq
 8000ecc:	f020 0001 	biceq.w	r0, r0, #1
 8000ed0:	4770      	bx	lr
 8000ed2:	f090 0f00 	teq	r0, #0
 8000ed6:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000eda:	bf08      	it	eq
 8000edc:	0249      	lsleq	r1, r1, #9
 8000ede:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000ee2:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000ee6:	3a7f      	subs	r2, #127	@ 0x7f
 8000ee8:	bfc2      	ittt	gt
 8000eea:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000eee:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000ef2:	4770      	bxgt	lr
 8000ef4:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ef8:	f04f 0300 	mov.w	r3, #0
 8000efc:	3a01      	subs	r2, #1
 8000efe:	dc5d      	bgt.n	8000fbc <__aeabi_fmul+0x150>
 8000f00:	f112 0f19 	cmn.w	r2, #25
 8000f04:	bfdc      	itt	le
 8000f06:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000f0a:	4770      	bxle	lr
 8000f0c:	f1c2 0200 	rsb	r2, r2, #0
 8000f10:	0041      	lsls	r1, r0, #1
 8000f12:	fa21 f102 	lsr.w	r1, r1, r2
 8000f16:	f1c2 0220 	rsb	r2, r2, #32
 8000f1a:	fa00 fc02 	lsl.w	ip, r0, r2
 8000f1e:	ea5f 0031 	movs.w	r0, r1, rrx
 8000f22:	f140 0000 	adc.w	r0, r0, #0
 8000f26:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000f2a:	bf08      	it	eq
 8000f2c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000f30:	4770      	bx	lr
 8000f32:	f092 0f00 	teq	r2, #0
 8000f36:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000f3a:	bf02      	ittt	eq
 8000f3c:	0040      	lsleq	r0, r0, #1
 8000f3e:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000f42:	3a01      	subeq	r2, #1
 8000f44:	d0f9      	beq.n	8000f3a <__aeabi_fmul+0xce>
 8000f46:	ea40 000c 	orr.w	r0, r0, ip
 8000f4a:	f093 0f00 	teq	r3, #0
 8000f4e:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000f52:	bf02      	ittt	eq
 8000f54:	0049      	lsleq	r1, r1, #1
 8000f56:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000f5a:	3b01      	subeq	r3, #1
 8000f5c:	d0f9      	beq.n	8000f52 <__aeabi_fmul+0xe6>
 8000f5e:	ea41 010c 	orr.w	r1, r1, ip
 8000f62:	e78f      	b.n	8000e84 <__aeabi_fmul+0x18>
 8000f64:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f68:	ea92 0f0c 	teq	r2, ip
 8000f6c:	bf18      	it	ne
 8000f6e:	ea93 0f0c 	teqne	r3, ip
 8000f72:	d00a      	beq.n	8000f8a <__aeabi_fmul+0x11e>
 8000f74:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000f78:	bf18      	it	ne
 8000f7a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000f7e:	d1d8      	bne.n	8000f32 <__aeabi_fmul+0xc6>
 8000f80:	ea80 0001 	eor.w	r0, r0, r1
 8000f84:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000f88:	4770      	bx	lr
 8000f8a:	f090 0f00 	teq	r0, #0
 8000f8e:	bf17      	itett	ne
 8000f90:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000f94:	4608      	moveq	r0, r1
 8000f96:	f091 0f00 	teqne	r1, #0
 8000f9a:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000f9e:	d014      	beq.n	8000fca <__aeabi_fmul+0x15e>
 8000fa0:	ea92 0f0c 	teq	r2, ip
 8000fa4:	d101      	bne.n	8000faa <__aeabi_fmul+0x13e>
 8000fa6:	0242      	lsls	r2, r0, #9
 8000fa8:	d10f      	bne.n	8000fca <__aeabi_fmul+0x15e>
 8000faa:	ea93 0f0c 	teq	r3, ip
 8000fae:	d103      	bne.n	8000fb8 <__aeabi_fmul+0x14c>
 8000fb0:	024b      	lsls	r3, r1, #9
 8000fb2:	bf18      	it	ne
 8000fb4:	4608      	movne	r0, r1
 8000fb6:	d108      	bne.n	8000fca <__aeabi_fmul+0x15e>
 8000fb8:	ea80 0001 	eor.w	r0, r0, r1
 8000fbc:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000fc0:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000fc4:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000fc8:	4770      	bx	lr
 8000fca:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000fce:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000fd2:	4770      	bx	lr

08000fd4 <__aeabi_fdiv>:
 8000fd4:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000fd8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000fdc:	bf1e      	ittt	ne
 8000fde:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000fe2:	ea92 0f0c 	teqne	r2, ip
 8000fe6:	ea93 0f0c 	teqne	r3, ip
 8000fea:	d069      	beq.n	80010c0 <__aeabi_fdiv+0xec>
 8000fec:	eba2 0203 	sub.w	r2, r2, r3
 8000ff0:	ea80 0c01 	eor.w	ip, r0, r1
 8000ff4:	0249      	lsls	r1, r1, #9
 8000ff6:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ffa:	d037      	beq.n	800106c <__aeabi_fdiv+0x98>
 8000ffc:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8001000:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8001004:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8001008:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 800100c:	428b      	cmp	r3, r1
 800100e:	bf38      	it	cc
 8001010:	005b      	lslcc	r3, r3, #1
 8001012:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8001016:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 800101a:	428b      	cmp	r3, r1
 800101c:	bf24      	itt	cs
 800101e:	1a5b      	subcs	r3, r3, r1
 8001020:	ea40 000c 	orrcs.w	r0, r0, ip
 8001024:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8001028:	bf24      	itt	cs
 800102a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800102e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8001032:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8001036:	bf24      	itt	cs
 8001038:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 800103c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8001040:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8001044:	bf24      	itt	cs
 8001046:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 800104a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800104e:	011b      	lsls	r3, r3, #4
 8001050:	bf18      	it	ne
 8001052:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8001056:	d1e0      	bne.n	800101a <__aeabi_fdiv+0x46>
 8001058:	2afd      	cmp	r2, #253	@ 0xfd
 800105a:	f63f af50 	bhi.w	8000efe <__aeabi_fmul+0x92>
 800105e:	428b      	cmp	r3, r1
 8001060:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8001064:	bf08      	it	eq
 8001066:	f020 0001 	biceq.w	r0, r0, #1
 800106a:	4770      	bx	lr
 800106c:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8001070:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8001074:	327f      	adds	r2, #127	@ 0x7f
 8001076:	bfc2      	ittt	gt
 8001078:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 800107c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8001080:	4770      	bxgt	lr
 8001082:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8001086:	f04f 0300 	mov.w	r3, #0
 800108a:	3a01      	subs	r2, #1
 800108c:	e737      	b.n	8000efe <__aeabi_fmul+0x92>
 800108e:	f092 0f00 	teq	r2, #0
 8001092:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8001096:	bf02      	ittt	eq
 8001098:	0040      	lsleq	r0, r0, #1
 800109a:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 800109e:	3a01      	subeq	r2, #1
 80010a0:	d0f9      	beq.n	8001096 <__aeabi_fdiv+0xc2>
 80010a2:	ea40 000c 	orr.w	r0, r0, ip
 80010a6:	f093 0f00 	teq	r3, #0
 80010aa:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 80010ae:	bf02      	ittt	eq
 80010b0:	0049      	lsleq	r1, r1, #1
 80010b2:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 80010b6:	3b01      	subeq	r3, #1
 80010b8:	d0f9      	beq.n	80010ae <__aeabi_fdiv+0xda>
 80010ba:	ea41 010c 	orr.w	r1, r1, ip
 80010be:	e795      	b.n	8000fec <__aeabi_fdiv+0x18>
 80010c0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80010c4:	ea92 0f0c 	teq	r2, ip
 80010c8:	d108      	bne.n	80010dc <__aeabi_fdiv+0x108>
 80010ca:	0242      	lsls	r2, r0, #9
 80010cc:	f47f af7d 	bne.w	8000fca <__aeabi_fmul+0x15e>
 80010d0:	ea93 0f0c 	teq	r3, ip
 80010d4:	f47f af70 	bne.w	8000fb8 <__aeabi_fmul+0x14c>
 80010d8:	4608      	mov	r0, r1
 80010da:	e776      	b.n	8000fca <__aeabi_fmul+0x15e>
 80010dc:	ea93 0f0c 	teq	r3, ip
 80010e0:	d104      	bne.n	80010ec <__aeabi_fdiv+0x118>
 80010e2:	024b      	lsls	r3, r1, #9
 80010e4:	f43f af4c 	beq.w	8000f80 <__aeabi_fmul+0x114>
 80010e8:	4608      	mov	r0, r1
 80010ea:	e76e      	b.n	8000fca <__aeabi_fmul+0x15e>
 80010ec:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 80010f0:	bf18      	it	ne
 80010f2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 80010f6:	d1ca      	bne.n	800108e <__aeabi_fdiv+0xba>
 80010f8:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 80010fc:	f47f af5c 	bne.w	8000fb8 <__aeabi_fmul+0x14c>
 8001100:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8001104:	f47f af3c 	bne.w	8000f80 <__aeabi_fmul+0x114>
 8001108:	e75f      	b.n	8000fca <__aeabi_fmul+0x15e>
 800110a:	bf00      	nop

0800110c <__aeabi_f2uiz>:
 800110c:	0042      	lsls	r2, r0, #1
 800110e:	d20e      	bcs.n	800112e <__aeabi_f2uiz+0x22>
 8001110:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8001114:	d30b      	bcc.n	800112e <__aeabi_f2uiz+0x22>
 8001116:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 800111a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800111e:	d409      	bmi.n	8001134 <__aeabi_f2uiz+0x28>
 8001120:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001124:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001128:	fa23 f002 	lsr.w	r0, r3, r2
 800112c:	4770      	bx	lr
 800112e:	f04f 0000 	mov.w	r0, #0
 8001132:	4770      	bx	lr
 8001134:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8001138:	d101      	bne.n	800113e <__aeabi_f2uiz+0x32>
 800113a:	0242      	lsls	r2, r0, #9
 800113c:	d102      	bne.n	8001144 <__aeabi_f2uiz+0x38>
 800113e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001142:	4770      	bx	lr
 8001144:	f04f 0000 	mov.w	r0, #0
 8001148:	4770      	bx	lr
 800114a:	bf00      	nop

0800114c <__aeabi_uldivmod>:
 800114c:	b953      	cbnz	r3, 8001164 <__aeabi_uldivmod+0x18>
 800114e:	b94a      	cbnz	r2, 8001164 <__aeabi_uldivmod+0x18>
 8001150:	2900      	cmp	r1, #0
 8001152:	bf08      	it	eq
 8001154:	2800      	cmpeq	r0, #0
 8001156:	bf1c      	itt	ne
 8001158:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 800115c:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8001160:	f000 b9b0 	b.w	80014c4 <__aeabi_idiv0>
 8001164:	f1ad 0c08 	sub.w	ip, sp, #8
 8001168:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800116c:	f000 f806 	bl	800117c <__udivmoddi4>
 8001170:	f8dd e004 	ldr.w	lr, [sp, #4]
 8001174:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8001178:	b004      	add	sp, #16
 800117a:	4770      	bx	lr

0800117c <__udivmoddi4>:
 800117c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001180:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8001182:	4688      	mov	r8, r1
 8001184:	4604      	mov	r4, r0
 8001186:	468e      	mov	lr, r1
 8001188:	2b00      	cmp	r3, #0
 800118a:	d14a      	bne.n	8001222 <__udivmoddi4+0xa6>
 800118c:	428a      	cmp	r2, r1
 800118e:	4617      	mov	r7, r2
 8001190:	d95f      	bls.n	8001252 <__udivmoddi4+0xd6>
 8001192:	fab2 f682 	clz	r6, r2
 8001196:	b14e      	cbz	r6, 80011ac <__udivmoddi4+0x30>
 8001198:	f1c6 0320 	rsb	r3, r6, #32
 800119c:	fa01 fe06 	lsl.w	lr, r1, r6
 80011a0:	40b7      	lsls	r7, r6
 80011a2:	40b4      	lsls	r4, r6
 80011a4:	fa20 f303 	lsr.w	r3, r0, r3
 80011a8:	ea43 0e0e 	orr.w	lr, r3, lr
 80011ac:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80011b0:	fa1f fc87 	uxth.w	ip, r7
 80011b4:	0c23      	lsrs	r3, r4, #16
 80011b6:	fbbe f1f8 	udiv	r1, lr, r8
 80011ba:	fb08 ee11 	mls	lr, r8, r1, lr
 80011be:	fb01 f20c 	mul.w	r2, r1, ip
 80011c2:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 80011c6:	429a      	cmp	r2, r3
 80011c8:	d907      	bls.n	80011da <__udivmoddi4+0x5e>
 80011ca:	18fb      	adds	r3, r7, r3
 80011cc:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 80011d0:	d202      	bcs.n	80011d8 <__udivmoddi4+0x5c>
 80011d2:	429a      	cmp	r2, r3
 80011d4:	f200 8154 	bhi.w	8001480 <__udivmoddi4+0x304>
 80011d8:	4601      	mov	r1, r0
 80011da:	1a9b      	subs	r3, r3, r2
 80011dc:	b2a2      	uxth	r2, r4
 80011de:	fbb3 f0f8 	udiv	r0, r3, r8
 80011e2:	fb08 3310 	mls	r3, r8, r0, r3
 80011e6:	fb00 fc0c 	mul.w	ip, r0, ip
 80011ea:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80011ee:	4594      	cmp	ip, r2
 80011f0:	d90b      	bls.n	800120a <__udivmoddi4+0x8e>
 80011f2:	18ba      	adds	r2, r7, r2
 80011f4:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 80011f8:	bf2c      	ite	cs
 80011fa:	2401      	movcs	r4, #1
 80011fc:	2400      	movcc	r4, #0
 80011fe:	4594      	cmp	ip, r2
 8001200:	d902      	bls.n	8001208 <__udivmoddi4+0x8c>
 8001202:	2c00      	cmp	r4, #0
 8001204:	f000 813f 	beq.w	8001486 <__udivmoddi4+0x30a>
 8001208:	4618      	mov	r0, r3
 800120a:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800120e:	eba2 020c 	sub.w	r2, r2, ip
 8001212:	2100      	movs	r1, #0
 8001214:	b11d      	cbz	r5, 800121e <__udivmoddi4+0xa2>
 8001216:	40f2      	lsrs	r2, r6
 8001218:	2300      	movs	r3, #0
 800121a:	e9c5 2300 	strd	r2, r3, [r5]
 800121e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001222:	428b      	cmp	r3, r1
 8001224:	d905      	bls.n	8001232 <__udivmoddi4+0xb6>
 8001226:	b10d      	cbz	r5, 800122c <__udivmoddi4+0xb0>
 8001228:	e9c5 0100 	strd	r0, r1, [r5]
 800122c:	2100      	movs	r1, #0
 800122e:	4608      	mov	r0, r1
 8001230:	e7f5      	b.n	800121e <__udivmoddi4+0xa2>
 8001232:	fab3 f183 	clz	r1, r3
 8001236:	2900      	cmp	r1, #0
 8001238:	d14e      	bne.n	80012d8 <__udivmoddi4+0x15c>
 800123a:	4543      	cmp	r3, r8
 800123c:	f0c0 8112 	bcc.w	8001464 <__udivmoddi4+0x2e8>
 8001240:	4282      	cmp	r2, r0
 8001242:	f240 810f 	bls.w	8001464 <__udivmoddi4+0x2e8>
 8001246:	4608      	mov	r0, r1
 8001248:	2d00      	cmp	r5, #0
 800124a:	d0e8      	beq.n	800121e <__udivmoddi4+0xa2>
 800124c:	e9c5 4e00 	strd	r4, lr, [r5]
 8001250:	e7e5      	b.n	800121e <__udivmoddi4+0xa2>
 8001252:	2a00      	cmp	r2, #0
 8001254:	f000 80ac 	beq.w	80013b0 <__udivmoddi4+0x234>
 8001258:	fab2 f682 	clz	r6, r2
 800125c:	2e00      	cmp	r6, #0
 800125e:	f040 80bb 	bne.w	80013d8 <__udivmoddi4+0x25c>
 8001262:	1a8b      	subs	r3, r1, r2
 8001264:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8001268:	b2bc      	uxth	r4, r7
 800126a:	2101      	movs	r1, #1
 800126c:	0c02      	lsrs	r2, r0, #16
 800126e:	b280      	uxth	r0, r0
 8001270:	fbb3 fcfe 	udiv	ip, r3, lr
 8001274:	fb0e 331c 	mls	r3, lr, ip, r3
 8001278:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
 800127c:	fb04 f20c 	mul.w	r2, r4, ip
 8001280:	429a      	cmp	r2, r3
 8001282:	d90e      	bls.n	80012a2 <__udivmoddi4+0x126>
 8001284:	18fb      	adds	r3, r7, r3
 8001286:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 800128a:	bf2c      	ite	cs
 800128c:	f04f 0901 	movcs.w	r9, #1
 8001290:	f04f 0900 	movcc.w	r9, #0
 8001294:	429a      	cmp	r2, r3
 8001296:	d903      	bls.n	80012a0 <__udivmoddi4+0x124>
 8001298:	f1b9 0f00 	cmp.w	r9, #0
 800129c:	f000 80ec 	beq.w	8001478 <__udivmoddi4+0x2fc>
 80012a0:	46c4      	mov	ip, r8
 80012a2:	1a9b      	subs	r3, r3, r2
 80012a4:	fbb3 f8fe 	udiv	r8, r3, lr
 80012a8:	fb0e 3318 	mls	r3, lr, r8, r3
 80012ac:	fb04 f408 	mul.w	r4, r4, r8
 80012b0:	ea40 4203 	orr.w	r2, r0, r3, lsl #16
 80012b4:	4294      	cmp	r4, r2
 80012b6:	d90b      	bls.n	80012d0 <__udivmoddi4+0x154>
 80012b8:	18ba      	adds	r2, r7, r2
 80012ba:	f108 33ff 	add.w	r3, r8, #4294967295	@ 0xffffffff
 80012be:	bf2c      	ite	cs
 80012c0:	2001      	movcs	r0, #1
 80012c2:	2000      	movcc	r0, #0
 80012c4:	4294      	cmp	r4, r2
 80012c6:	d902      	bls.n	80012ce <__udivmoddi4+0x152>
 80012c8:	2800      	cmp	r0, #0
 80012ca:	f000 80d1 	beq.w	8001470 <__udivmoddi4+0x2f4>
 80012ce:	4698      	mov	r8, r3
 80012d0:	1b12      	subs	r2, r2, r4
 80012d2:	ea48 400c 	orr.w	r0, r8, ip, lsl #16
 80012d6:	e79d      	b.n	8001214 <__udivmoddi4+0x98>
 80012d8:	f1c1 0620 	rsb	r6, r1, #32
 80012dc:	408b      	lsls	r3, r1
 80012de:	fa08 f401 	lsl.w	r4, r8, r1
 80012e2:	fa00 f901 	lsl.w	r9, r0, r1
 80012e6:	fa22 f706 	lsr.w	r7, r2, r6
 80012ea:	fa28 f806 	lsr.w	r8, r8, r6
 80012ee:	408a      	lsls	r2, r1
 80012f0:	431f      	orrs	r7, r3
 80012f2:	fa20 f306 	lsr.w	r3, r0, r6
 80012f6:	0c38      	lsrs	r0, r7, #16
 80012f8:	4323      	orrs	r3, r4
 80012fa:	fa1f fc87 	uxth.w	ip, r7
 80012fe:	0c1c      	lsrs	r4, r3, #16
 8001300:	fbb8 fef0 	udiv	lr, r8, r0
 8001304:	fb00 881e 	mls	r8, r0, lr, r8
 8001308:	ea44 4408 	orr.w	r4, r4, r8, lsl #16
 800130c:	fb0e f80c 	mul.w	r8, lr, ip
 8001310:	45a0      	cmp	r8, r4
 8001312:	d90e      	bls.n	8001332 <__udivmoddi4+0x1b6>
 8001314:	193c      	adds	r4, r7, r4
 8001316:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 800131a:	bf2c      	ite	cs
 800131c:	f04f 0b01 	movcs.w	fp, #1
 8001320:	f04f 0b00 	movcc.w	fp, #0
 8001324:	45a0      	cmp	r8, r4
 8001326:	d903      	bls.n	8001330 <__udivmoddi4+0x1b4>
 8001328:	f1bb 0f00 	cmp.w	fp, #0
 800132c:	f000 80b8 	beq.w	80014a0 <__udivmoddi4+0x324>
 8001330:	46d6      	mov	lr, sl
 8001332:	eba4 0408 	sub.w	r4, r4, r8
 8001336:	fa1f f883 	uxth.w	r8, r3
 800133a:	fbb4 f3f0 	udiv	r3, r4, r0
 800133e:	fb00 4413 	mls	r4, r0, r3, r4
 8001342:	fb03 fc0c 	mul.w	ip, r3, ip
 8001346:	ea48 4404 	orr.w	r4, r8, r4, lsl #16
 800134a:	45a4      	cmp	ip, r4
 800134c:	d90e      	bls.n	800136c <__udivmoddi4+0x1f0>
 800134e:	193c      	adds	r4, r7, r4
 8001350:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8001354:	bf2c      	ite	cs
 8001356:	f04f 0801 	movcs.w	r8, #1
 800135a:	f04f 0800 	movcc.w	r8, #0
 800135e:	45a4      	cmp	ip, r4
 8001360:	d903      	bls.n	800136a <__udivmoddi4+0x1ee>
 8001362:	f1b8 0f00 	cmp.w	r8, #0
 8001366:	f000 809f 	beq.w	80014a8 <__udivmoddi4+0x32c>
 800136a:	4603      	mov	r3, r0
 800136c:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8001370:	eba4 040c 	sub.w	r4, r4, ip
 8001374:	fba0 ec02 	umull	lr, ip, r0, r2
 8001378:	4564      	cmp	r4, ip
 800137a:	4673      	mov	r3, lr
 800137c:	46e0      	mov	r8, ip
 800137e:	d302      	bcc.n	8001386 <__udivmoddi4+0x20a>
 8001380:	d107      	bne.n	8001392 <__udivmoddi4+0x216>
 8001382:	45f1      	cmp	r9, lr
 8001384:	d205      	bcs.n	8001392 <__udivmoddi4+0x216>
 8001386:	ebbe 0302 	subs.w	r3, lr, r2
 800138a:	eb6c 0c07 	sbc.w	ip, ip, r7
 800138e:	3801      	subs	r0, #1
 8001390:	46e0      	mov	r8, ip
 8001392:	b15d      	cbz	r5, 80013ac <__udivmoddi4+0x230>
 8001394:	ebb9 0203 	subs.w	r2, r9, r3
 8001398:	eb64 0408 	sbc.w	r4, r4, r8
 800139c:	fa04 f606 	lsl.w	r6, r4, r6
 80013a0:	fa22 f301 	lsr.w	r3, r2, r1
 80013a4:	40cc      	lsrs	r4, r1
 80013a6:	431e      	orrs	r6, r3
 80013a8:	e9c5 6400 	strd	r6, r4, [r5]
 80013ac:	2100      	movs	r1, #0
 80013ae:	e736      	b.n	800121e <__udivmoddi4+0xa2>
 80013b0:	fbb1 fcf2 	udiv	ip, r1, r2
 80013b4:	0c01      	lsrs	r1, r0, #16
 80013b6:	4614      	mov	r4, r2
 80013b8:	b280      	uxth	r0, r0
 80013ba:	4696      	mov	lr, r2
 80013bc:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
 80013c0:	2620      	movs	r6, #32
 80013c2:	4690      	mov	r8, r2
 80013c4:	ea40 4301 	orr.w	r3, r0, r1, lsl #16
 80013c8:	4610      	mov	r0, r2
 80013ca:	fbb1 f1f2 	udiv	r1, r1, r2
 80013ce:	eba3 0308 	sub.w	r3, r3, r8
 80013d2:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80013d6:	e74b      	b.n	8001270 <__udivmoddi4+0xf4>
 80013d8:	40b7      	lsls	r7, r6
 80013da:	f1c6 0320 	rsb	r3, r6, #32
 80013de:	fa01 f206 	lsl.w	r2, r1, r6
 80013e2:	fa21 f803 	lsr.w	r8, r1, r3
 80013e6:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80013ea:	fa20 f303 	lsr.w	r3, r0, r3
 80013ee:	b2bc      	uxth	r4, r7
 80013f0:	40b0      	lsls	r0, r6
 80013f2:	4313      	orrs	r3, r2
 80013f4:	0c02      	lsrs	r2, r0, #16
 80013f6:	0c19      	lsrs	r1, r3, #16
 80013f8:	b280      	uxth	r0, r0
 80013fa:	fbb8 f9fe 	udiv	r9, r8, lr
 80013fe:	fb0e 8819 	mls	r8, lr, r9, r8
 8001402:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
 8001406:	fb09 f804 	mul.w	r8, r9, r4
 800140a:	4588      	cmp	r8, r1
 800140c:	d951      	bls.n	80014b2 <__udivmoddi4+0x336>
 800140e:	1879      	adds	r1, r7, r1
 8001410:	f109 3cff 	add.w	ip, r9, #4294967295	@ 0xffffffff
 8001414:	bf2c      	ite	cs
 8001416:	f04f 0a01 	movcs.w	sl, #1
 800141a:	f04f 0a00 	movcc.w	sl, #0
 800141e:	4588      	cmp	r8, r1
 8001420:	d902      	bls.n	8001428 <__udivmoddi4+0x2ac>
 8001422:	f1ba 0f00 	cmp.w	sl, #0
 8001426:	d031      	beq.n	800148c <__udivmoddi4+0x310>
 8001428:	eba1 0108 	sub.w	r1, r1, r8
 800142c:	fbb1 f9fe 	udiv	r9, r1, lr
 8001430:	fb09 f804 	mul.w	r8, r9, r4
 8001434:	fb0e 1119 	mls	r1, lr, r9, r1
 8001438:	b29b      	uxth	r3, r3
 800143a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800143e:	4543      	cmp	r3, r8
 8001440:	d235      	bcs.n	80014ae <__udivmoddi4+0x332>
 8001442:	18fb      	adds	r3, r7, r3
 8001444:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8001448:	bf2c      	ite	cs
 800144a:	f04f 0a01 	movcs.w	sl, #1
 800144e:	f04f 0a00 	movcc.w	sl, #0
 8001452:	4543      	cmp	r3, r8
 8001454:	d2bb      	bcs.n	80013ce <__udivmoddi4+0x252>
 8001456:	f1ba 0f00 	cmp.w	sl, #0
 800145a:	d1b8      	bne.n	80013ce <__udivmoddi4+0x252>
 800145c:	f1a9 0102 	sub.w	r1, r9, #2
 8001460:	443b      	add	r3, r7
 8001462:	e7b4      	b.n	80013ce <__udivmoddi4+0x252>
 8001464:	1a84      	subs	r4, r0, r2
 8001466:	eb68 0203 	sbc.w	r2, r8, r3
 800146a:	2001      	movs	r0, #1
 800146c:	4696      	mov	lr, r2
 800146e:	e6eb      	b.n	8001248 <__udivmoddi4+0xcc>
 8001470:	443a      	add	r2, r7
 8001472:	f1a8 0802 	sub.w	r8, r8, #2
 8001476:	e72b      	b.n	80012d0 <__udivmoddi4+0x154>
 8001478:	f1ac 0c02 	sub.w	ip, ip, #2
 800147c:	443b      	add	r3, r7
 800147e:	e710      	b.n	80012a2 <__udivmoddi4+0x126>
 8001480:	3902      	subs	r1, #2
 8001482:	443b      	add	r3, r7
 8001484:	e6a9      	b.n	80011da <__udivmoddi4+0x5e>
 8001486:	443a      	add	r2, r7
 8001488:	3802      	subs	r0, #2
 800148a:	e6be      	b.n	800120a <__udivmoddi4+0x8e>
 800148c:	eba7 0808 	sub.w	r8, r7, r8
 8001490:	f1a9 0c02 	sub.w	ip, r9, #2
 8001494:	4441      	add	r1, r8
 8001496:	fbb1 f9fe 	udiv	r9, r1, lr
 800149a:	fb09 f804 	mul.w	r8, r9, r4
 800149e:	e7c9      	b.n	8001434 <__udivmoddi4+0x2b8>
 80014a0:	f1ae 0e02 	sub.w	lr, lr, #2
 80014a4:	443c      	add	r4, r7
 80014a6:	e744      	b.n	8001332 <__udivmoddi4+0x1b6>
 80014a8:	3b02      	subs	r3, #2
 80014aa:	443c      	add	r4, r7
 80014ac:	e75e      	b.n	800136c <__udivmoddi4+0x1f0>
 80014ae:	4649      	mov	r1, r9
 80014b0:	e78d      	b.n	80013ce <__udivmoddi4+0x252>
 80014b2:	eba1 0108 	sub.w	r1, r1, r8
 80014b6:	46cc      	mov	ip, r9
 80014b8:	fbb1 f9fe 	udiv	r9, r1, lr
 80014bc:	fb09 f804 	mul.w	r8, r9, r4
 80014c0:	e7b8      	b.n	8001434 <__udivmoddi4+0x2b8>
 80014c2:	bf00      	nop

080014c4 <__aeabi_idiv0>:
 80014c4:	4770      	bx	lr
 80014c6:	bf00      	nop

080014c8 <bme69x_init>:
/* @brief This API reads the chip-id of the sensor which is the first step to
* verify the sensor and also calibrates the sensor
* As this API is the entry point, call this API before using other APIs.
*/
int8_t bme69x_init(struct bme69x_dev *dev)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b084      	sub	sp, #16
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    (void) bme69x_soft_reset(dev);
 80014d0:	6878      	ldr	r0, [r7, #4]
 80014d2:	f000 f8fa 	bl	80016ca <bme69x_soft_reset>

    rslt = bme69x_get_regs(BME69X_REG_CHIP_ID, &dev->chip_id, 1, dev);
 80014d6:	6879      	ldr	r1, [r7, #4]
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	2201      	movs	r2, #1
 80014dc:	20d0      	movs	r0, #208	@ 0xd0
 80014de:	f000 f8b0 	bl	8001642 <bme69x_get_regs>
 80014e2:	4603      	mov	r3, r0
 80014e4:	73fb      	strb	r3, [r7, #15]

    if (rslt == BME69X_OK)
 80014e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d114      	bne.n	8001518 <bme69x_init+0x50>
    {
        if (dev->chip_id == BME69X_CHIP_ID)
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	781b      	ldrb	r3, [r3, #0]
 80014f2:	2b61      	cmp	r3, #97	@ 0x61
 80014f4:	d10e      	bne.n	8001514 <bme69x_init+0x4c>
        {
            /* Read Variant ID */
            rslt = read_variant_id(dev);
 80014f6:	6878      	ldr	r0, [r7, #4]
 80014f8:	f001 ffde 	bl	80034b8 <read_variant_id>
 80014fc:	4603      	mov	r3, r0
 80014fe:	73fb      	strb	r3, [r7, #15]

            if (rslt == BME69X_OK)
 8001500:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001504:	2b00      	cmp	r3, #0
 8001506:	d107      	bne.n	8001518 <bme69x_init+0x50>
            {
                /* Get the Calibration data */
                rslt = get_calib_data(dev);
 8001508:	6878      	ldr	r0, [r7, #4]
 800150a:	f001 fece 	bl	80032aa <get_calib_data>
 800150e:	4603      	mov	r3, r0
 8001510:	73fb      	strb	r3, [r7, #15]
 8001512:	e001      	b.n	8001518 <bme69x_init+0x50>
            }
        }
        else
        {
            rslt = BME69X_E_DEV_NOT_FOUND;
 8001514:	23fd      	movs	r3, #253	@ 0xfd
 8001516:	73fb      	strb	r3, [r7, #15]
        }
    }

    return rslt;
 8001518:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800151c:	4618      	mov	r0, r3
 800151e:	3710      	adds	r7, #16
 8001520:	46bd      	mov	sp, r7
 8001522:	bd80      	pop	{r7, pc}

08001524 <bme69x_set_regs>:

/*
 * @brief This API writes the given data to the register address of the sensor
 */
int8_t bme69x_set_regs(const uint8_t *reg_addr, const uint8_t *reg_data, uint32_t len, struct bme69x_dev *dev)
{
 8001524:	b5b0      	push	{r4, r5, r7, lr}
 8001526:	b08a      	sub	sp, #40	@ 0x28
 8001528:	af00      	add	r7, sp, #0
 800152a:	60f8      	str	r0, [r7, #12]
 800152c:	60b9      	str	r1, [r7, #8]
 800152e:	607a      	str	r2, [r7, #4]
 8001530:	603b      	str	r3, [r7, #0]
    int8_t rslt;

    /* Length of the temporary buffer is 2*(length of register)*/
    uint8_t tmp_buff[BME69X_LEN_INTERLEAVE_BUFF] = { 0 };
 8001532:	f107 0310 	add.w	r3, r7, #16
 8001536:	2200      	movs	r2, #0
 8001538:	601a      	str	r2, [r3, #0]
 800153a:	605a      	str	r2, [r3, #4]
 800153c:	609a      	str	r2, [r3, #8]
 800153e:	60da      	str	r2, [r3, #12]
 8001540:	611a      	str	r2, [r3, #16]
    uint16_t index;

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 8001542:	6838      	ldr	r0, [r7, #0]
 8001544:	f001 fc90 	bl	8002e68 <null_ptr_check>
 8001548:	4603      	mov	r3, r0
 800154a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if ((rslt == BME69X_OK) && reg_addr && reg_data)
 800154e:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8001552:	2b00      	cmp	r3, #0
 8001554:	d16c      	bne.n	8001630 <bme69x_set_regs+0x10c>
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	2b00      	cmp	r3, #0
 800155a:	d069      	beq.n	8001630 <bme69x_set_regs+0x10c>
 800155c:	68bb      	ldr	r3, [r7, #8]
 800155e:	2b00      	cmp	r3, #0
 8001560:	d066      	beq.n	8001630 <bme69x_set_regs+0x10c>
    {
        if ((len > 0) && (len <= (BME69X_LEN_INTERLEAVE_BUFF / 2)))
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	2b00      	cmp	r3, #0
 8001566:	d05d      	beq.n	8001624 <bme69x_set_regs+0x100>
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	2b0a      	cmp	r3, #10
 800156c:	d85a      	bhi.n	8001624 <bme69x_set_regs+0x100>
        {
            /* Interleave the 2 arrays */
            for (index = 0; index < len; index++)
 800156e:	2300      	movs	r3, #0
 8001570:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8001572:	e034      	b.n	80015de <bme69x_set_regs+0xba>
            {
                if (dev->intf == BME69X_SPI_INTF)
 8001574:	683b      	ldr	r3, [r7, #0]
 8001576:	7b1b      	ldrb	r3, [r3, #12]
 8001578:	2b00      	cmp	r3, #0
 800157a:	d118      	bne.n	80015ae <bme69x_set_regs+0x8a>
                {
                    /* Set the memory page */
                    rslt = set_mem_page(reg_addr[index], dev);
 800157c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800157e:	68fa      	ldr	r2, [r7, #12]
 8001580:	4413      	add	r3, r2
 8001582:	781b      	ldrb	r3, [r3, #0]
 8001584:	6839      	ldr	r1, [r7, #0]
 8001586:	4618      	mov	r0, r3
 8001588:	f001 fbad 	bl	8002ce6 <set_mem_page>
 800158c:	4603      	mov	r3, r0
 800158e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
                    tmp_buff[(2 * index)] = reg_addr[index] & BME69X_SPI_WR_MSK;
 8001592:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001594:	68fa      	ldr	r2, [r7, #12]
 8001596:	4413      	add	r3, r2
 8001598:	781a      	ldrb	r2, [r3, #0]
 800159a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800159c:	005b      	lsls	r3, r3, #1
 800159e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80015a2:	b2d2      	uxtb	r2, r2
 80015a4:	3328      	adds	r3, #40	@ 0x28
 80015a6:	443b      	add	r3, r7
 80015a8:	f803 2c18 	strb.w	r2, [r3, #-24]
 80015ac:	e009      	b.n	80015c2 <bme69x_set_regs+0x9e>
                }
                else
                {
                    tmp_buff[(2 * index)] = reg_addr[index];
 80015ae:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80015b0:	68fa      	ldr	r2, [r7, #12]
 80015b2:	441a      	add	r2, r3
 80015b4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80015b6:	005b      	lsls	r3, r3, #1
 80015b8:	7812      	ldrb	r2, [r2, #0]
 80015ba:	3328      	adds	r3, #40	@ 0x28
 80015bc:	443b      	add	r3, r7
 80015be:	f803 2c18 	strb.w	r2, [r3, #-24]
                }

                tmp_buff[(2 * index) + 1] = reg_data[index];
 80015c2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80015c4:	68ba      	ldr	r2, [r7, #8]
 80015c6:	441a      	add	r2, r3
 80015c8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80015ca:	005b      	lsls	r3, r3, #1
 80015cc:	3301      	adds	r3, #1
 80015ce:	7812      	ldrb	r2, [r2, #0]
 80015d0:	3328      	adds	r3, #40	@ 0x28
 80015d2:	443b      	add	r3, r7
 80015d4:	f803 2c18 	strb.w	r2, [r3, #-24]
            for (index = 0; index < len; index++)
 80015d8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80015da:	3301      	adds	r3, #1
 80015dc:	84bb      	strh	r3, [r7, #36]	@ 0x24
 80015de:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80015e0:	687a      	ldr	r2, [r7, #4]
 80015e2:	429a      	cmp	r2, r3
 80015e4:	d8c6      	bhi.n	8001574 <bme69x_set_regs+0x50>
            }

            /* Write the interleaved array */
            if (rslt == BME69X_OK)
 80015e6:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d11e      	bne.n	800162c <bme69x_set_regs+0x108>
            {
                dev->intf_rslt = dev->write(tmp_buff[0], &tmp_buff[1], (2 * len) - 1, dev->intf_ptr);
 80015ee:	683b      	ldr	r3, [r7, #0]
 80015f0:	6c1c      	ldr	r4, [r3, #64]	@ 0x40
 80015f2:	7c38      	ldrb	r0, [r7, #16]
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	005b      	lsls	r3, r3, #1
 80015f8:	1e5a      	subs	r2, r3, #1
 80015fa:	683b      	ldr	r3, [r7, #0]
 80015fc:	685d      	ldr	r5, [r3, #4]
 80015fe:	f107 0310 	add.w	r3, r7, #16
 8001602:	1c59      	adds	r1, r3, #1
 8001604:	462b      	mov	r3, r5
 8001606:	47a0      	blx	r4
 8001608:	4603      	mov	r3, r0
 800160a:	461a      	mov	r2, r3
 800160c:	683b      	ldr	r3, [r7, #0]
 800160e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
                if (dev->intf_rslt != 0)
 8001612:	683b      	ldr	r3, [r7, #0]
 8001614:	f993 3048 	ldrsb.w	r3, [r3, #72]	@ 0x48
 8001618:	2b00      	cmp	r3, #0
 800161a:	d007      	beq.n	800162c <bme69x_set_regs+0x108>
                {
                    rslt = BME69X_E_COM_FAIL;
 800161c:	23fe      	movs	r3, #254	@ 0xfe
 800161e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            if (rslt == BME69X_OK)
 8001622:	e003      	b.n	800162c <bme69x_set_regs+0x108>
                }
            }
        }
        else
        {
            rslt = BME69X_E_INVALID_LENGTH;
 8001624:	23fc      	movs	r3, #252	@ 0xfc
 8001626:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if ((len > 0) && (len <= (BME69X_LEN_INTERLEAVE_BUFF / 2)))
 800162a:	e004      	b.n	8001636 <bme69x_set_regs+0x112>
            if (rslt == BME69X_OK)
 800162c:	bf00      	nop
        if ((len > 0) && (len <= (BME69X_LEN_INTERLEAVE_BUFF / 2)))
 800162e:	e002      	b.n	8001636 <bme69x_set_regs+0x112>
        }
    }
    else
    {
        rslt = BME69X_E_NULL_PTR;
 8001630:	23ff      	movs	r3, #255	@ 0xff
 8001632:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    return rslt;
 8001636:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 800163a:	4618      	mov	r0, r3
 800163c:	3728      	adds	r7, #40	@ 0x28
 800163e:	46bd      	mov	sp, r7
 8001640:	bdb0      	pop	{r4, r5, r7, pc}

08001642 <bme69x_get_regs>:

/*
 * @brief This API reads the data from the given register address of sensor.
 */
int8_t bme69x_get_regs(uint8_t reg_addr, uint8_t *reg_data, uint32_t len, struct bme69x_dev *dev)
{
 8001642:	b590      	push	{r4, r7, lr}
 8001644:	b087      	sub	sp, #28
 8001646:	af00      	add	r7, sp, #0
 8001648:	60b9      	str	r1, [r7, #8]
 800164a:	607a      	str	r2, [r7, #4]
 800164c:	603b      	str	r3, [r7, #0]
 800164e:	4603      	mov	r3, r0
 8001650:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 8001652:	6838      	ldr	r0, [r7, #0]
 8001654:	f001 fc08 	bl	8002e68 <null_ptr_check>
 8001658:	4603      	mov	r3, r0
 800165a:	75fb      	strb	r3, [r7, #23]
    if ((rslt == BME69X_OK) && reg_data)
 800165c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001660:	2b00      	cmp	r3, #0
 8001662:	d12a      	bne.n	80016ba <bme69x_get_regs+0x78>
 8001664:	68bb      	ldr	r3, [r7, #8]
 8001666:	2b00      	cmp	r3, #0
 8001668:	d027      	beq.n	80016ba <bme69x_get_regs+0x78>
    {
        if (dev->intf == BME69X_SPI_INTF)
 800166a:	683b      	ldr	r3, [r7, #0]
 800166c:	7b1b      	ldrb	r3, [r3, #12]
 800166e:	2b00      	cmp	r3, #0
 8001670:	d10e      	bne.n	8001690 <bme69x_get_regs+0x4e>
        {
            /* Set the memory page */
            rslt = set_mem_page(reg_addr, dev);
 8001672:	7bfb      	ldrb	r3, [r7, #15]
 8001674:	6839      	ldr	r1, [r7, #0]
 8001676:	4618      	mov	r0, r3
 8001678:	f001 fb35 	bl	8002ce6 <set_mem_page>
 800167c:	4603      	mov	r3, r0
 800167e:	75fb      	strb	r3, [r7, #23]
            if (rslt == BME69X_OK)
 8001680:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001684:	2b00      	cmp	r3, #0
 8001686:	d103      	bne.n	8001690 <bme69x_get_regs+0x4e>
            {
                reg_addr = reg_addr | BME69X_SPI_RD_MSK;
 8001688:	7bfb      	ldrb	r3, [r7, #15]
 800168a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800168e:	73fb      	strb	r3, [r7, #15]
            }
        }

        dev->intf_rslt = dev->read(reg_addr, reg_data, len, dev->intf_ptr);
 8001690:	683b      	ldr	r3, [r7, #0]
 8001692:	6bdc      	ldr	r4, [r3, #60]	@ 0x3c
 8001694:	683b      	ldr	r3, [r7, #0]
 8001696:	685b      	ldr	r3, [r3, #4]
 8001698:	7bf8      	ldrb	r0, [r7, #15]
 800169a:	687a      	ldr	r2, [r7, #4]
 800169c:	68b9      	ldr	r1, [r7, #8]
 800169e:	47a0      	blx	r4
 80016a0:	4603      	mov	r3, r0
 80016a2:	461a      	mov	r2, r3
 80016a4:	683b      	ldr	r3, [r7, #0]
 80016a6:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
        if (dev->intf_rslt != 0)
 80016aa:	683b      	ldr	r3, [r7, #0]
 80016ac:	f993 3048 	ldrsb.w	r3, [r3, #72]	@ 0x48
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d004      	beq.n	80016be <bme69x_get_regs+0x7c>
        {
            rslt = BME69X_E_COM_FAIL;
 80016b4:	23fe      	movs	r3, #254	@ 0xfe
 80016b6:	75fb      	strb	r3, [r7, #23]
        if (dev->intf_rslt != 0)
 80016b8:	e001      	b.n	80016be <bme69x_get_regs+0x7c>
        }
    }
    else
    {
        rslt = BME69X_E_NULL_PTR;
 80016ba:	23ff      	movs	r3, #255	@ 0xff
 80016bc:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 80016be:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80016c2:	4618      	mov	r0, r3
 80016c4:	371c      	adds	r7, #28
 80016c6:	46bd      	mov	sp, r7
 80016c8:	bd90      	pop	{r4, r7, pc}

080016ca <bme69x_soft_reset>:

/*
 * @brief This API soft-resets the sensor.
 */
int8_t bme69x_soft_reset(struct bme69x_dev *dev)
{
 80016ca:	b580      	push	{r7, lr}
 80016cc:	b084      	sub	sp, #16
 80016ce:	af00      	add	r7, sp, #0
 80016d0:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t reg_addr = BME69X_REG_SOFT_RESET;
 80016d2:	23e0      	movs	r3, #224	@ 0xe0
 80016d4:	73bb      	strb	r3, [r7, #14]

    /* 0xb6 is the soft reset command */
    uint8_t soft_rst_cmd = BME69X_SOFT_RESET_CMD;
 80016d6:	23b6      	movs	r3, #182	@ 0xb6
 80016d8:	737b      	strb	r3, [r7, #13]

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 80016da:	6878      	ldr	r0, [r7, #4]
 80016dc:	f001 fbc4 	bl	8002e68 <null_ptr_check>
 80016e0:	4603      	mov	r3, r0
 80016e2:	73fb      	strb	r3, [r7, #15]
    if (rslt == BME69X_OK)
 80016e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d12b      	bne.n	8001744 <bme69x_soft_reset+0x7a>
    {
        if (dev->intf == BME69X_SPI_INTF)
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	7b1b      	ldrb	r3, [r3, #12]
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d104      	bne.n	80016fe <bme69x_soft_reset+0x34>
        {
            rslt = get_mem_page(dev);
 80016f4:	6878      	ldr	r0, [r7, #4]
 80016f6:	f001 fb5b 	bl	8002db0 <get_mem_page>
 80016fa:	4603      	mov	r3, r0
 80016fc:	73fb      	strb	r3, [r7, #15]
        }

        /* Reset the device */
        if (rslt == BME69X_OK)
 80016fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001702:	2b00      	cmp	r3, #0
 8001704:	d11e      	bne.n	8001744 <bme69x_soft_reset+0x7a>
        {
            rslt = bme69x_set_regs(&reg_addr, &soft_rst_cmd, 1, dev);
 8001706:	f107 010d 	add.w	r1, r7, #13
 800170a:	f107 000e 	add.w	r0, r7, #14
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	2201      	movs	r2, #1
 8001712:	f7ff ff07 	bl	8001524 <bme69x_set_regs>
 8001716:	4603      	mov	r3, r0
 8001718:	73fb      	strb	r3, [r7, #15]

            if (rslt == BME69X_OK)
 800171a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800171e:	2b00      	cmp	r3, #0
 8001720:	d110      	bne.n	8001744 <bme69x_soft_reset+0x7a>
            {
                /* Wait for 5ms */
                dev->delay_us(BME69X_PERIOD_RESET, dev->intf_ptr);
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001726:	687a      	ldr	r2, [r7, #4]
 8001728:	6852      	ldr	r2, [r2, #4]
 800172a:	4611      	mov	r1, r2
 800172c:	f242 7010 	movw	r0, #10000	@ 0x2710
 8001730:	4798      	blx	r3

                /* After reset get the memory page */
                if (dev->intf == BME69X_SPI_INTF)
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	7b1b      	ldrb	r3, [r3, #12]
 8001736:	2b00      	cmp	r3, #0
 8001738:	d104      	bne.n	8001744 <bme69x_soft_reset+0x7a>
                {
                    rslt = get_mem_page(dev);
 800173a:	6878      	ldr	r0, [r7, #4]
 800173c:	f001 fb38 	bl	8002db0 <get_mem_page>
 8001740:	4603      	mov	r3, r0
 8001742:	73fb      	strb	r3, [r7, #15]
                }
            }
        }
    }

    return rslt;
 8001744:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001748:	4618      	mov	r0, r3
 800174a:	3710      	adds	r7, #16
 800174c:	46bd      	mov	sp, r7
 800174e:	bd80      	pop	{r7, pc}

08001750 <bme69x_set_conf>:

/*
 * @brief This API is used to set the oversampling, filter and odr configuration
 */
int8_t bme69x_set_conf(struct bme69x_conf *conf, struct bme69x_dev *dev)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b088      	sub	sp, #32
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
 8001758:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t odr20 = 0, odr3 = 1;
 800175a:	2300      	movs	r3, #0
 800175c:	77bb      	strb	r3, [r7, #30]
 800175e:	2301      	movs	r3, #1
 8001760:	777b      	strb	r3, [r7, #29]
    uint8_t current_op_mode;

    /* Register data starting from BME69X_REG_CTRL_GAS_1(0x71) up to BME69X_REG_CONFIG(0x75) */
    uint8_t reg_array[BME69X_LEN_CONFIG] = { 0x71, 0x72, 0x73, 0x74, 0x75 };
 8001762:	4a7f      	ldr	r2, [pc, #508]	@ (8001960 <bme69x_set_conf+0x210>)
 8001764:	f107 0314 	add.w	r3, r7, #20
 8001768:	e892 0003 	ldmia.w	r2, {r0, r1}
 800176c:	6018      	str	r0, [r3, #0]
 800176e:	3304      	adds	r3, #4
 8001770:	7019      	strb	r1, [r3, #0]
    uint8_t data_array[BME69X_LEN_CONFIG] = { 0 };
 8001772:	f107 030c 	add.w	r3, r7, #12
 8001776:	2200      	movs	r2, #0
 8001778:	601a      	str	r2, [r3, #0]
 800177a:	711a      	strb	r2, [r3, #4]

    rslt = bme69x_get_op_mode(&current_op_mode, dev);
 800177c:	f107 031c 	add.w	r3, r7, #28
 8001780:	6839      	ldr	r1, [r7, #0]
 8001782:	4618      	mov	r0, r3
 8001784:	f000 f94f 	bl	8001a26 <bme69x_get_op_mode>
 8001788:	4603      	mov	r3, r0
 800178a:	77fb      	strb	r3, [r7, #31]
    if (rslt == BME69X_OK)
 800178c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001790:	2b00      	cmp	r3, #0
 8001792:	d105      	bne.n	80017a0 <bme69x_set_conf+0x50>
    {
        /* Configure only in the sleep mode */
        rslt = bme69x_set_op_mode(BME69X_SLEEP_MODE, dev);
 8001794:	6839      	ldr	r1, [r7, #0]
 8001796:	2000      	movs	r0, #0
 8001798:	f000 f8e4 	bl	8001964 <bme69x_set_op_mode>
 800179c:	4603      	mov	r3, r0
 800179e:	77fb      	strb	r3, [r7, #31]
    }

    if (conf == NULL)
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d102      	bne.n	80017ac <bme69x_set_conf+0x5c>
    {
        rslt = BME69X_E_NULL_PTR;
 80017a6:	23ff      	movs	r3, #255	@ 0xff
 80017a8:	77fb      	strb	r3, [r7, #31]
 80017aa:	e0b7      	b.n	800191c <bme69x_set_conf+0x1cc>
    }
    else if (rslt == BME69X_OK)
 80017ac:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	f040 80b3 	bne.w	800191c <bme69x_set_conf+0x1cc>
    {
        /* Read the whole configuration and write it back once later */
        rslt = bme69x_get_regs(reg_array[0], data_array, BME69X_LEN_CONFIG, dev);
 80017b6:	7d38      	ldrb	r0, [r7, #20]
 80017b8:	f107 010c 	add.w	r1, r7, #12
 80017bc:	683b      	ldr	r3, [r7, #0]
 80017be:	2205      	movs	r2, #5
 80017c0:	f7ff ff3f 	bl	8001642 <bme69x_get_regs>
 80017c4:	4603      	mov	r3, r0
 80017c6:	77fb      	strb	r3, [r7, #31]
        dev->info_msg = BME69X_OK;
 80017c8:	683b      	ldr	r3, [r7, #0]
 80017ca:	2200      	movs	r2, #0
 80017cc:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49
        if (rslt == BME69X_OK)
 80017d0:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d108      	bne.n	80017ea <bme69x_set_conf+0x9a>
        {
            rslt = boundary_check(&conf->filter, BME69X_FILTER_SIZE_127, dev);
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	3303      	adds	r3, #3
 80017dc:	683a      	ldr	r2, [r7, #0]
 80017de:	2107      	movs	r1, #7
 80017e0:	4618      	mov	r0, r3
 80017e2:	f001 fb14 	bl	8002e0e <boundary_check>
 80017e6:	4603      	mov	r3, r0
 80017e8:	77fb      	strb	r3, [r7, #31]
        }

        if (rslt == BME69X_OK)
 80017ea:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d108      	bne.n	8001804 <bme69x_set_conf+0xb4>
        {
            rslt = boundary_check(&conf->os_temp, BME69X_OS_16X, dev);
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	3301      	adds	r3, #1
 80017f6:	683a      	ldr	r2, [r7, #0]
 80017f8:	2105      	movs	r1, #5
 80017fa:	4618      	mov	r0, r3
 80017fc:	f001 fb07 	bl	8002e0e <boundary_check>
 8001800:	4603      	mov	r3, r0
 8001802:	77fb      	strb	r3, [r7, #31]
        }

        if (rslt == BME69X_OK)
 8001804:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001808:	2b00      	cmp	r3, #0
 800180a:	d108      	bne.n	800181e <bme69x_set_conf+0xce>
        {
            rslt = boundary_check(&conf->os_pres, BME69X_OS_16X, dev);
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	3302      	adds	r3, #2
 8001810:	683a      	ldr	r2, [r7, #0]
 8001812:	2105      	movs	r1, #5
 8001814:	4618      	mov	r0, r3
 8001816:	f001 fafa 	bl	8002e0e <boundary_check>
 800181a:	4603      	mov	r3, r0
 800181c:	77fb      	strb	r3, [r7, #31]
        }

        if (rslt == BME69X_OK)
 800181e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001822:	2b00      	cmp	r3, #0
 8001824:	d107      	bne.n	8001836 <bme69x_set_conf+0xe6>
        {
            rslt = boundary_check(&conf->os_hum, BME69X_OS_16X, dev);
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	683a      	ldr	r2, [r7, #0]
 800182a:	2105      	movs	r1, #5
 800182c:	4618      	mov	r0, r3
 800182e:	f001 faee 	bl	8002e0e <boundary_check>
 8001832:	4603      	mov	r3, r0
 8001834:	77fb      	strb	r3, [r7, #31]
        }

        if (rslt == BME69X_OK)
 8001836:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800183a:	2b00      	cmp	r3, #0
 800183c:	d108      	bne.n	8001850 <bme69x_set_conf+0x100>
        {
            rslt = boundary_check(&conf->odr, BME69X_ODR_NONE, dev);
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	3304      	adds	r3, #4
 8001842:	683a      	ldr	r2, [r7, #0]
 8001844:	2108      	movs	r1, #8
 8001846:	4618      	mov	r0, r3
 8001848:	f001 fae1 	bl	8002e0e <boundary_check>
 800184c:	4603      	mov	r3, r0
 800184e:	77fb      	strb	r3, [r7, #31]
        }

        if (rslt == BME69X_OK)
 8001850:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001854:	2b00      	cmp	r3, #0
 8001856:	d161      	bne.n	800191c <bme69x_set_conf+0x1cc>
        {
            data_array[4] = BME69X_SET_BITS(data_array[4], BME69X_FILTER, conf->filter);
 8001858:	7c3b      	ldrb	r3, [r7, #16]
 800185a:	b25b      	sxtb	r3, r3
 800185c:	f023 031c 	bic.w	r3, r3, #28
 8001860:	b25a      	sxtb	r2, r3
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	78db      	ldrb	r3, [r3, #3]
 8001866:	b25b      	sxtb	r3, r3
 8001868:	009b      	lsls	r3, r3, #2
 800186a:	b25b      	sxtb	r3, r3
 800186c:	f003 031c 	and.w	r3, r3, #28
 8001870:	b25b      	sxtb	r3, r3
 8001872:	4313      	orrs	r3, r2
 8001874:	b25b      	sxtb	r3, r3
 8001876:	b2db      	uxtb	r3, r3
 8001878:	743b      	strb	r3, [r7, #16]
            data_array[3] = BME69X_SET_BITS(data_array[3], BME69X_OST, conf->os_temp);
 800187a:	7bfb      	ldrb	r3, [r7, #15]
 800187c:	b25b      	sxtb	r3, r3
 800187e:	f003 031f 	and.w	r3, r3, #31
 8001882:	b25a      	sxtb	r2, r3
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	785b      	ldrb	r3, [r3, #1]
 8001888:	b25b      	sxtb	r3, r3
 800188a:	015b      	lsls	r3, r3, #5
 800188c:	b25b      	sxtb	r3, r3
 800188e:	4313      	orrs	r3, r2
 8001890:	b25b      	sxtb	r3, r3
 8001892:	b2db      	uxtb	r3, r3
 8001894:	73fb      	strb	r3, [r7, #15]
            data_array[3] = BME69X_SET_BITS(data_array[3], BME69X_OSP, conf->os_pres);
 8001896:	7bfb      	ldrb	r3, [r7, #15]
 8001898:	b25b      	sxtb	r3, r3
 800189a:	f023 031c 	bic.w	r3, r3, #28
 800189e:	b25a      	sxtb	r2, r3
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	789b      	ldrb	r3, [r3, #2]
 80018a4:	b25b      	sxtb	r3, r3
 80018a6:	009b      	lsls	r3, r3, #2
 80018a8:	b25b      	sxtb	r3, r3
 80018aa:	f003 031c 	and.w	r3, r3, #28
 80018ae:	b25b      	sxtb	r3, r3
 80018b0:	4313      	orrs	r3, r2
 80018b2:	b25b      	sxtb	r3, r3
 80018b4:	b2db      	uxtb	r3, r3
 80018b6:	73fb      	strb	r3, [r7, #15]
            data_array[1] = BME69X_SET_BITS_POS_0(data_array[1], BME69X_OSH, conf->os_hum);
 80018b8:	7b7b      	ldrb	r3, [r7, #13]
 80018ba:	b25b      	sxtb	r3, r3
 80018bc:	f023 0307 	bic.w	r3, r3, #7
 80018c0:	b25a      	sxtb	r2, r3
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	781b      	ldrb	r3, [r3, #0]
 80018c6:	b25b      	sxtb	r3, r3
 80018c8:	f003 0307 	and.w	r3, r3, #7
 80018cc:	b25b      	sxtb	r3, r3
 80018ce:	4313      	orrs	r3, r2
 80018d0:	b25b      	sxtb	r3, r3
 80018d2:	b2db      	uxtb	r3, r3
 80018d4:	737b      	strb	r3, [r7, #13]
            if (conf->odr != BME69X_ODR_NONE)
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	791b      	ldrb	r3, [r3, #4]
 80018da:	2b08      	cmp	r3, #8
 80018dc:	d004      	beq.n	80018e8 <bme69x_set_conf+0x198>
            {
                odr20 = conf->odr;
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	791b      	ldrb	r3, [r3, #4]
 80018e2:	77bb      	strb	r3, [r7, #30]
                odr3 = 0;
 80018e4:	2300      	movs	r3, #0
 80018e6:	777b      	strb	r3, [r7, #29]
            }

            data_array[4] = BME69X_SET_BITS(data_array[4], BME69X_ODR20, odr20);
 80018e8:	7c3b      	ldrb	r3, [r7, #16]
 80018ea:	b25b      	sxtb	r3, r3
 80018ec:	f003 031f 	and.w	r3, r3, #31
 80018f0:	b25a      	sxtb	r2, r3
 80018f2:	f997 301e 	ldrsb.w	r3, [r7, #30]
 80018f6:	015b      	lsls	r3, r3, #5
 80018f8:	b25b      	sxtb	r3, r3
 80018fa:	4313      	orrs	r3, r2
 80018fc:	b25b      	sxtb	r3, r3
 80018fe:	b2db      	uxtb	r3, r3
 8001900:	743b      	strb	r3, [r7, #16]
            data_array[0] = BME69X_SET_BITS(data_array[0], BME69X_ODR3, odr3);
 8001902:	7b3b      	ldrb	r3, [r7, #12]
 8001904:	b25b      	sxtb	r3, r3
 8001906:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800190a:	b25a      	sxtb	r2, r3
 800190c:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8001910:	01db      	lsls	r3, r3, #7
 8001912:	b25b      	sxtb	r3, r3
 8001914:	4313      	orrs	r3, r2
 8001916:	b25b      	sxtb	r3, r3
 8001918:	b2db      	uxtb	r3, r3
 800191a:	733b      	strb	r3, [r7, #12]
        }
    }

    if (rslt == BME69X_OK)
 800191c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001920:	2b00      	cmp	r3, #0
 8001922:	d109      	bne.n	8001938 <bme69x_set_conf+0x1e8>
    {
        rslt = bme69x_set_regs(reg_array, data_array, BME69X_LEN_CONFIG, dev);
 8001924:	f107 010c 	add.w	r1, r7, #12
 8001928:	f107 0014 	add.w	r0, r7, #20
 800192c:	683b      	ldr	r3, [r7, #0]
 800192e:	2205      	movs	r2, #5
 8001930:	f7ff fdf8 	bl	8001524 <bme69x_set_regs>
 8001934:	4603      	mov	r3, r0
 8001936:	77fb      	strb	r3, [r7, #31]
    }

    if ((current_op_mode != BME69X_SLEEP_MODE) && (rslt == BME69X_OK))
 8001938:	7f3b      	ldrb	r3, [r7, #28]
 800193a:	2b00      	cmp	r3, #0
 800193c:	d00a      	beq.n	8001954 <bme69x_set_conf+0x204>
 800193e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001942:	2b00      	cmp	r3, #0
 8001944:	d106      	bne.n	8001954 <bme69x_set_conf+0x204>
    {
        rslt = bme69x_set_op_mode(current_op_mode, dev);
 8001946:	7f3b      	ldrb	r3, [r7, #28]
 8001948:	6839      	ldr	r1, [r7, #0]
 800194a:	4618      	mov	r0, r3
 800194c:	f000 f80a 	bl	8001964 <bme69x_set_op_mode>
 8001950:	4603      	mov	r3, r0
 8001952:	77fb      	strb	r3, [r7, #31]
    }

    return rslt;
 8001954:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8001958:	4618      	mov	r0, r3
 800195a:	3720      	adds	r7, #32
 800195c:	46bd      	mov	sp, r7
 800195e:	bd80      	pop	{r7, pc}
 8001960:	080109b8 	.word	0x080109b8

08001964 <bme69x_set_op_mode>:

/*
 * @brief This API is used to set the operation mode of the sensor
 */
int8_t bme69x_set_op_mode(const uint8_t op_mode, struct bme69x_dev *dev)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b084      	sub	sp, #16
 8001968:	af00      	add	r7, sp, #0
 800196a:	4603      	mov	r3, r0
 800196c:	6039      	str	r1, [r7, #0]
 800196e:	71fb      	strb	r3, [r7, #7]
    int8_t rslt;
    uint8_t tmp_pow_mode;
    uint8_t pow_mode = 0;
 8001970:	2300      	movs	r3, #0
 8001972:	73bb      	strb	r3, [r7, #14]
    uint8_t reg_addr = BME69X_REG_CTRL_MEAS;
 8001974:	2374      	movs	r3, #116	@ 0x74
 8001976:	733b      	strb	r3, [r7, #12]

    /* Call until in sleep */
    do
    {
        rslt = bme69x_get_regs(BME69X_REG_CTRL_MEAS, &tmp_pow_mode, 1, dev);
 8001978:	f107 010d 	add.w	r1, r7, #13
 800197c:	683b      	ldr	r3, [r7, #0]
 800197e:	2201      	movs	r2, #1
 8001980:	2074      	movs	r0, #116	@ 0x74
 8001982:	f7ff fe5e 	bl	8001642 <bme69x_get_regs>
 8001986:	4603      	mov	r3, r0
 8001988:	73fb      	strb	r3, [r7, #15]
        if (rslt == BME69X_OK)
 800198a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800198e:	2b00      	cmp	r3, #0
 8001990:	d11d      	bne.n	80019ce <bme69x_set_op_mode+0x6a>
        {
            /* Put to sleep before changing mode */
            pow_mode = (tmp_pow_mode & BME69X_MODE_MSK);
 8001992:	7b7b      	ldrb	r3, [r7, #13]
 8001994:	f003 0303 	and.w	r3, r3, #3
 8001998:	73bb      	strb	r3, [r7, #14]
            if (pow_mode != BME69X_SLEEP_MODE)
 800199a:	7bbb      	ldrb	r3, [r7, #14]
 800199c:	2b00      	cmp	r3, #0
 800199e:	d016      	beq.n	80019ce <bme69x_set_op_mode+0x6a>
            {
                tmp_pow_mode &= ~BME69X_MODE_MSK; /* Set to sleep */
 80019a0:	7b7b      	ldrb	r3, [r7, #13]
 80019a2:	f023 0303 	bic.w	r3, r3, #3
 80019a6:	b2db      	uxtb	r3, r3
 80019a8:	737b      	strb	r3, [r7, #13]
                rslt = bme69x_set_regs(&reg_addr, &tmp_pow_mode, 1, dev);
 80019aa:	f107 010d 	add.w	r1, r7, #13
 80019ae:	f107 000c 	add.w	r0, r7, #12
 80019b2:	683b      	ldr	r3, [r7, #0]
 80019b4:	2201      	movs	r2, #1
 80019b6:	f7ff fdb5 	bl	8001524 <bme69x_set_regs>
 80019ba:	4603      	mov	r3, r0
 80019bc:	73fb      	strb	r3, [r7, #15]
                dev->delay_us(BME69X_PERIOD_POLL, dev->intf_ptr);
 80019be:	683b      	ldr	r3, [r7, #0]
 80019c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019c2:	683a      	ldr	r2, [r7, #0]
 80019c4:	6852      	ldr	r2, [r2, #4]
 80019c6:	4611      	mov	r1, r2
 80019c8:	f242 7010 	movw	r0, #10000	@ 0x2710
 80019cc:	4798      	blx	r3
            }
        }
    } while ((pow_mode != BME69X_SLEEP_MODE) && (rslt == BME69X_OK));
 80019ce:	7bbb      	ldrb	r3, [r7, #14]
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d003      	beq.n	80019dc <bme69x_set_op_mode+0x78>
 80019d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d0cd      	beq.n	8001978 <bme69x_set_op_mode+0x14>

    /* Already in sleep */
    if ((op_mode != BME69X_SLEEP_MODE) && (rslt == BME69X_OK))
 80019dc:	79fb      	ldrb	r3, [r7, #7]
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d01b      	beq.n	8001a1a <bme69x_set_op_mode+0xb6>
 80019e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d117      	bne.n	8001a1a <bme69x_set_op_mode+0xb6>
    {
        tmp_pow_mode = (tmp_pow_mode & ~BME69X_MODE_MSK) | (op_mode & BME69X_MODE_MSK);
 80019ea:	7b7b      	ldrb	r3, [r7, #13]
 80019ec:	b25b      	sxtb	r3, r3
 80019ee:	f023 0303 	bic.w	r3, r3, #3
 80019f2:	b25a      	sxtb	r2, r3
 80019f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019f8:	f003 0303 	and.w	r3, r3, #3
 80019fc:	b25b      	sxtb	r3, r3
 80019fe:	4313      	orrs	r3, r2
 8001a00:	b25b      	sxtb	r3, r3
 8001a02:	b2db      	uxtb	r3, r3
 8001a04:	737b      	strb	r3, [r7, #13]
        rslt = bme69x_set_regs(&reg_addr, &tmp_pow_mode, 1, dev);
 8001a06:	f107 010d 	add.w	r1, r7, #13
 8001a0a:	f107 000c 	add.w	r0, r7, #12
 8001a0e:	683b      	ldr	r3, [r7, #0]
 8001a10:	2201      	movs	r2, #1
 8001a12:	f7ff fd87 	bl	8001524 <bme69x_set_regs>
 8001a16:	4603      	mov	r3, r0
 8001a18:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8001a1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001a1e:	4618      	mov	r0, r3
 8001a20:	3710      	adds	r7, #16
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bd80      	pop	{r7, pc}

08001a26 <bme69x_get_op_mode>:

/*
 * @brief This API is used to get the operation mode of the sensor.
 */
int8_t bme69x_get_op_mode(uint8_t *op_mode, struct bme69x_dev *dev)
{
 8001a26:	b580      	push	{r7, lr}
 8001a28:	b084      	sub	sp, #16
 8001a2a:	af00      	add	r7, sp, #0
 8001a2c:	6078      	str	r0, [r7, #4]
 8001a2e:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t mode;

    if (op_mode)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d00f      	beq.n	8001a56 <bme69x_get_op_mode+0x30>
    {
        rslt = bme69x_get_regs(BME69X_REG_CTRL_MEAS, &mode, 1, dev);
 8001a36:	f107 010e 	add.w	r1, r7, #14
 8001a3a:	683b      	ldr	r3, [r7, #0]
 8001a3c:	2201      	movs	r2, #1
 8001a3e:	2074      	movs	r0, #116	@ 0x74
 8001a40:	f7ff fdff 	bl	8001642 <bme69x_get_regs>
 8001a44:	4603      	mov	r3, r0
 8001a46:	73fb      	strb	r3, [r7, #15]

        /* Masking the other register bit info*/
        *op_mode = mode & BME69X_MODE_MSK;
 8001a48:	7bbb      	ldrb	r3, [r7, #14]
 8001a4a:	f003 0303 	and.w	r3, r3, #3
 8001a4e:	b2da      	uxtb	r2, r3
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	701a      	strb	r2, [r3, #0]
 8001a54:	e001      	b.n	8001a5a <bme69x_get_op_mode+0x34>
    }
    else
    {
        rslt = BME69X_E_NULL_PTR;
 8001a56:	23ff      	movs	r3, #255	@ 0xff
 8001a58:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8001a5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001a5e:	4618      	mov	r0, r3
 8001a60:	3710      	adds	r7, #16
 8001a62:	46bd      	mov	sp, r7
 8001a64:	bd80      	pop	{r7, pc}
	...

08001a68 <bme69x_get_meas_dur>:

/*
 * @brief This API is used to get the remaining duration that can be used for heating.
 */
uint32_t bme69x_get_meas_dur(const uint8_t op_mode, struct bme69x_conf *conf, struct bme69x_dev *dev)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b08a      	sub	sp, #40	@ 0x28
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	4603      	mov	r3, r0
 8001a70:	60b9      	str	r1, [r7, #8]
 8001a72:	607a      	str	r2, [r7, #4]
 8001a74:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;
    uint32_t meas_dur = 0; /* Calculate in us */
 8001a76:	2300      	movs	r3, #0
 8001a78:	623b      	str	r3, [r7, #32]
    uint32_t meas_cycles;
    uint8_t os_to_meas_cycles[6] = { 0, 1, 2, 4, 8, 16 };
 8001a7a:	4a34      	ldr	r2, [pc, #208]	@ (8001b4c <bme69x_get_meas_dur+0xe4>)
 8001a7c:	f107 0314 	add.w	r3, r7, #20
 8001a80:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001a84:	6018      	str	r0, [r3, #0]
 8001a86:	3304      	adds	r3, #4
 8001a88:	8019      	strh	r1, [r3, #0]

    if (conf != NULL)
 8001a8a:	68bb      	ldr	r3, [r7, #8]
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d058      	beq.n	8001b42 <bme69x_get_meas_dur+0xda>
    {
        /* Boundary check for temperature oversampling */
        rslt = boundary_check(&conf->os_temp, BME69X_OS_16X, dev);
 8001a90:	68bb      	ldr	r3, [r7, #8]
 8001a92:	3301      	adds	r3, #1
 8001a94:	687a      	ldr	r2, [r7, #4]
 8001a96:	2105      	movs	r1, #5
 8001a98:	4618      	mov	r0, r3
 8001a9a:	f001 f9b8 	bl	8002e0e <boundary_check>
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

        if (rslt == BME69X_OK)
 8001aa4:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d109      	bne.n	8001ac0 <bme69x_get_meas_dur+0x58>
        {
            /* Boundary check for pressure oversampling */
            rslt = boundary_check(&conf->os_pres, BME69X_OS_16X, dev);
 8001aac:	68bb      	ldr	r3, [r7, #8]
 8001aae:	3302      	adds	r3, #2
 8001ab0:	687a      	ldr	r2, [r7, #4]
 8001ab2:	2105      	movs	r1, #5
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	f001 f9aa 	bl	8002e0e <boundary_check>
 8001aba:	4603      	mov	r3, r0
 8001abc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        }

        if (rslt == BME69X_OK)
 8001ac0:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d108      	bne.n	8001ada <bme69x_get_meas_dur+0x72>
        {
            /* Boundary check for humidity oversampling */
            rslt = boundary_check(&conf->os_hum, BME69X_OS_16X, dev);
 8001ac8:	68bb      	ldr	r3, [r7, #8]
 8001aca:	687a      	ldr	r2, [r7, #4]
 8001acc:	2105      	movs	r1, #5
 8001ace:	4618      	mov	r0, r3
 8001ad0:	f001 f99d 	bl	8002e0e <boundary_check>
 8001ad4:	4603      	mov	r3, r0
 8001ad6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        }

        if (rslt == BME69X_OK)
 8001ada:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d12f      	bne.n	8001b42 <bme69x_get_meas_dur+0xda>
        {
            meas_cycles = os_to_meas_cycles[conf->os_temp];
 8001ae2:	68bb      	ldr	r3, [r7, #8]
 8001ae4:	785b      	ldrb	r3, [r3, #1]
 8001ae6:	3328      	adds	r3, #40	@ 0x28
 8001ae8:	443b      	add	r3, r7
 8001aea:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 8001aee:	61fb      	str	r3, [r7, #28]
            meas_cycles += os_to_meas_cycles[conf->os_pres];
 8001af0:	68bb      	ldr	r3, [r7, #8]
 8001af2:	789b      	ldrb	r3, [r3, #2]
 8001af4:	3328      	adds	r3, #40	@ 0x28
 8001af6:	443b      	add	r3, r7
 8001af8:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 8001afc:	461a      	mov	r2, r3
 8001afe:	69fb      	ldr	r3, [r7, #28]
 8001b00:	4413      	add	r3, r2
 8001b02:	61fb      	str	r3, [r7, #28]
            meas_cycles += os_to_meas_cycles[conf->os_hum];
 8001b04:	68bb      	ldr	r3, [r7, #8]
 8001b06:	781b      	ldrb	r3, [r3, #0]
 8001b08:	3328      	adds	r3, #40	@ 0x28
 8001b0a:	443b      	add	r3, r7
 8001b0c:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 8001b10:	461a      	mov	r2, r3
 8001b12:	69fb      	ldr	r3, [r7, #28]
 8001b14:	4413      	add	r3, r2
 8001b16:	61fb      	str	r3, [r7, #28]

            /* TPH measurement duration */
            meas_dur = meas_cycles * UINT32_C(1963);
 8001b18:	69fb      	ldr	r3, [r7, #28]
 8001b1a:	f240 72ab 	movw	r2, #1963	@ 0x7ab
 8001b1e:	fb02 f303 	mul.w	r3, r2, r3
 8001b22:	623b      	str	r3, [r7, #32]
            meas_dur += UINT32_C(477 * 4); /* TPH switching duration */
 8001b24:	6a3b      	ldr	r3, [r7, #32]
 8001b26:	f203 7374 	addw	r3, r3, #1908	@ 0x774
 8001b2a:	623b      	str	r3, [r7, #32]
            meas_dur += UINT32_C(477 * 5); /* Gas measurement duration */
 8001b2c:	6a3b      	ldr	r3, [r7, #32]
 8001b2e:	f603 1351 	addw	r3, r3, #2385	@ 0x951
 8001b32:	623b      	str	r3, [r7, #32]

            if (op_mode != BME69X_PARALLEL_MODE)
 8001b34:	7bfb      	ldrb	r3, [r7, #15]
 8001b36:	2b02      	cmp	r3, #2
 8001b38:	d003      	beq.n	8001b42 <bme69x_get_meas_dur+0xda>
            {
                meas_dur += UINT32_C(1000); /* Wake up duration of 1ms */
 8001b3a:	6a3b      	ldr	r3, [r7, #32]
 8001b3c:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8001b40:	623b      	str	r3, [r7, #32]
            }
        }
    }

    return meas_dur;
 8001b42:	6a3b      	ldr	r3, [r7, #32]
}
 8001b44:	4618      	mov	r0, r3
 8001b46:	3728      	adds	r7, #40	@ 0x28
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	bd80      	pop	{r7, pc}
 8001b4c:	080109c0 	.word	0x080109c0

08001b50 <bme69x_get_data>:
 * @brief This API reads the pressure, temperature and humidity and gas data
 * from the sensor, compensates the data and store it in the bme69x_data
 * structure instance passed by the user.
 */
int8_t bme69x_get_data(uint8_t op_mode, struct bme69x_data *data, uint8_t *n_data, struct bme69x_dev *dev)
{
 8001b50:	b5b0      	push	{r4, r5, r7, lr}
 8001b52:	b09a      	sub	sp, #104	@ 0x68
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	60b9      	str	r1, [r7, #8]
 8001b58:	607a      	str	r2, [r7, #4]
 8001b5a:	603b      	str	r3, [r7, #0]
 8001b5c:	4603      	mov	r3, r0
 8001b5e:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;
    uint8_t i = 0, j = 0, new_fields = 0;
 8001b60:	2300      	movs	r3, #0
 8001b62:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66
 8001b66:	2300      	movs	r3, #0
 8001b68:	f887 3065 	strb.w	r3, [r7, #101]	@ 0x65
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
    struct bme69x_data *field_ptr[3] = { 0 };
 8001b72:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8001b76:	2200      	movs	r2, #0
 8001b78:	601a      	str	r2, [r3, #0]
 8001b7a:	605a      	str	r2, [r3, #4]
 8001b7c:	609a      	str	r2, [r3, #8]
    struct bme69x_data field_data[3] = { { 0 } };
 8001b7e:	f107 0310 	add.w	r3, r7, #16
 8001b82:	2248      	movs	r2, #72	@ 0x48
 8001b84:	2100      	movs	r1, #0
 8001b86:	4618      	mov	r0, r3
 8001b88:	f00c fde4 	bl	800e754 <memset>

    field_ptr[0] = &field_data[0];
 8001b8c:	f107 0310 	add.w	r3, r7, #16
 8001b90:	65bb      	str	r3, [r7, #88]	@ 0x58
    field_ptr[1] = &field_data[1];
 8001b92:	f107 0310 	add.w	r3, r7, #16
 8001b96:	3318      	adds	r3, #24
 8001b98:	65fb      	str	r3, [r7, #92]	@ 0x5c
    field_ptr[2] = &field_data[2];
 8001b9a:	f107 0310 	add.w	r3, r7, #16
 8001b9e:	3330      	adds	r3, #48	@ 0x30
 8001ba0:	663b      	str	r3, [r7, #96]	@ 0x60

    rslt = null_ptr_check(dev);
 8001ba2:	6838      	ldr	r0, [r7, #0]
 8001ba4:	f001 f960 	bl	8002e68 <null_ptr_check>
 8001ba8:	4603      	mov	r3, r0
 8001baa:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
    if ((rslt == BME69X_OK) && (data != NULL))
 8001bae:	f997 3067 	ldrsb.w	r3, [r7, #103]	@ 0x67
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	f040 80c1 	bne.w	8001d3a <bme69x_get_data+0x1ea>
 8001bb8:	68bb      	ldr	r3, [r7, #8]
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	f000 80bd 	beq.w	8001d3a <bme69x_get_data+0x1ea>
    {
        /* Reading the sensor data in forced mode only */
        if (op_mode == BME69X_FORCED_MODE)
 8001bc0:	7bfb      	ldrb	r3, [r7, #15]
 8001bc2:	2b01      	cmp	r3, #1
 8001bc4:	d11c      	bne.n	8001c00 <bme69x_get_data+0xb0>
        {
            rslt = read_field_data(0, data, dev);
 8001bc6:	683a      	ldr	r2, [r7, #0]
 8001bc8:	68b9      	ldr	r1, [r7, #8]
 8001bca:	2000      	movs	r0, #0
 8001bcc:	f000 fdd0 	bl	8002770 <read_field_data>
 8001bd0:	4603      	mov	r3, r0
 8001bd2:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
            if (rslt == BME69X_OK)
 8001bd6:	f997 3067 	ldrsb.w	r3, [r7, #103]	@ 0x67
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	f040 80a1 	bne.w	8001d22 <bme69x_get_data+0x1d2>
            {
                if (data->status & BME69X_NEW_DATA_MSK)
 8001be0:	68bb      	ldr	r3, [r7, #8]
 8001be2:	781b      	ldrb	r3, [r3, #0]
 8001be4:	b25b      	sxtb	r3, r3
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	da03      	bge.n	8001bf2 <bme69x_get_data+0xa2>
                {
                    new_fields = 1;
 8001bea:	2301      	movs	r3, #1
 8001bec:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
 8001bf0:	e097      	b.n	8001d22 <bme69x_get_data+0x1d2>
                }
                else
                {
                    new_fields = 0;
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
                    rslt = BME69X_W_NO_NEW_DATA;
 8001bf8:	2302      	movs	r3, #2
 8001bfa:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8001bfe:	e090      	b.n	8001d22 <bme69x_get_data+0x1d2>
                }
            }
        }
        else if ((op_mode == BME69X_PARALLEL_MODE) || (op_mode == BME69X_SEQUENTIAL_MODE))
 8001c00:	7bfb      	ldrb	r3, [r7, #15]
 8001c02:	2b02      	cmp	r3, #2
 8001c04:	d003      	beq.n	8001c0e <bme69x_get_data+0xbe>
 8001c06:	7bfb      	ldrb	r3, [r7, #15]
 8001c08:	2b03      	cmp	r3, #3
 8001c0a:	f040 8087 	bne.w	8001d1c <bme69x_get_data+0x1cc>
        {
            /* Read the 3 fields and count the number of new data fields */
            rslt = read_all_field_data(field_ptr, dev);
 8001c0e:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8001c12:	6839      	ldr	r1, [r7, #0]
 8001c14:	4618      	mov	r0, r3
 8001c16:	f000 feb2 	bl	800297e <read_all_field_data>
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67

            new_fields = 0;
 8001c20:	2300      	movs	r3, #0
 8001c22:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
            for (i = 0; (i < 3) && (rslt == BME69X_OK); i++)
 8001c26:	2300      	movs	r3, #0
 8001c28:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66
 8001c2c:	e014      	b.n	8001c58 <bme69x_get_data+0x108>
            {
                if (field_ptr[i]->status & BME69X_NEW_DATA_MSK)
 8001c2e:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
 8001c32:	009b      	lsls	r3, r3, #2
 8001c34:	3368      	adds	r3, #104	@ 0x68
 8001c36:	443b      	add	r3, r7
 8001c38:	f853 3c10 	ldr.w	r3, [r3, #-16]
 8001c3c:	781b      	ldrb	r3, [r3, #0]
 8001c3e:	b25b      	sxtb	r3, r3
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	da04      	bge.n	8001c4e <bme69x_get_data+0xfe>
                {
                    new_fields++;
 8001c44:	f897 3064 	ldrb.w	r3, [r7, #100]	@ 0x64
 8001c48:	3301      	adds	r3, #1
 8001c4a:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
            for (i = 0; (i < 3) && (rslt == BME69X_OK); i++)
 8001c4e:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
 8001c52:	3301      	adds	r3, #1
 8001c54:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66
 8001c58:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
 8001c5c:	2b02      	cmp	r3, #2
 8001c5e:	d803      	bhi.n	8001c68 <bme69x_get_data+0x118>
 8001c60:	f997 3067 	ldrsb.w	r3, [r7, #103]	@ 0x67
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d0e2      	beq.n	8001c2e <bme69x_get_data+0xde>
                }
            }

            /* Sort the sensor data in parallel & sequential modes*/
            for (i = 0; (i < 2) && (rslt == BME69X_OK); i++)
 8001c68:	2300      	movs	r3, #0
 8001c6a:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66
 8001c6e:	e01c      	b.n	8001caa <bme69x_get_data+0x15a>
            {
                for (j = i + 1; j < 3; j++)
 8001c70:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
 8001c74:	3301      	adds	r3, #1
 8001c76:	f887 3065 	strb.w	r3, [r7, #101]	@ 0x65
 8001c7a:	e00d      	b.n	8001c98 <bme69x_get_data+0x148>
                {
                    sort_sensor_data(i, j, field_ptr);
 8001c7c:	f107 0258 	add.w	r2, r7, #88	@ 0x58
 8001c80:	f897 1065 	ldrb.w	r1, [r7, #101]	@ 0x65
 8001c84:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
 8001c88:	4618      	mov	r0, r3
 8001c8a:	f001 fa95 	bl	80031b8 <sort_sensor_data>
                for (j = i + 1; j < 3; j++)
 8001c8e:	f897 3065 	ldrb.w	r3, [r7, #101]	@ 0x65
 8001c92:	3301      	adds	r3, #1
 8001c94:	f887 3065 	strb.w	r3, [r7, #101]	@ 0x65
 8001c98:	f897 3065 	ldrb.w	r3, [r7, #101]	@ 0x65
 8001c9c:	2b02      	cmp	r3, #2
 8001c9e:	d9ed      	bls.n	8001c7c <bme69x_get_data+0x12c>
            for (i = 0; (i < 2) && (rslt == BME69X_OK); i++)
 8001ca0:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
 8001ca4:	3301      	adds	r3, #1
 8001ca6:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66
 8001caa:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
 8001cae:	2b01      	cmp	r3, #1
 8001cb0:	d803      	bhi.n	8001cba <bme69x_get_data+0x16a>
 8001cb2:	f997 3067 	ldrsb.w	r3, [r7, #103]	@ 0x67
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d0da      	beq.n	8001c70 <bme69x_get_data+0x120>
                }
            }

            /* Copy the sorted data */
            for (i = 0; ((i < 3) && (rslt == BME69X_OK)); i++)
 8001cba:	2300      	movs	r3, #0
 8001cbc:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66
 8001cc0:	e01c      	b.n	8001cfc <bme69x_get_data+0x1ac>
            {
                data[i] = *field_ptr[i];
 8001cc2:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
 8001cc6:	009b      	lsls	r3, r3, #2
 8001cc8:	3368      	adds	r3, #104	@ 0x68
 8001cca:	443b      	add	r3, r7
 8001ccc:	f853 1c10 	ldr.w	r1, [r3, #-16]
 8001cd0:	f897 2066 	ldrb.w	r2, [r7, #102]	@ 0x66
 8001cd4:	4613      	mov	r3, r2
 8001cd6:	005b      	lsls	r3, r3, #1
 8001cd8:	4413      	add	r3, r2
 8001cda:	00db      	lsls	r3, r3, #3
 8001cdc:	461a      	mov	r2, r3
 8001cde:	68bb      	ldr	r3, [r7, #8]
 8001ce0:	4413      	add	r3, r2
 8001ce2:	461c      	mov	r4, r3
 8001ce4:	460d      	mov	r5, r1
 8001ce6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001ce8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001cea:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001cee:	e884 0003 	stmia.w	r4, {r0, r1}
            for (i = 0; ((i < 3) && (rslt == BME69X_OK)); i++)
 8001cf2:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
 8001cf6:	3301      	adds	r3, #1
 8001cf8:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66
 8001cfc:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
 8001d00:	2b02      	cmp	r3, #2
 8001d02:	d803      	bhi.n	8001d0c <bme69x_get_data+0x1bc>
 8001d04:	f997 3067 	ldrsb.w	r3, [r7, #103]	@ 0x67
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d0da      	beq.n	8001cc2 <bme69x_get_data+0x172>
            }

            if (new_fields == 0)
 8001d0c:	f897 3064 	ldrb.w	r3, [r7, #100]	@ 0x64
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d106      	bne.n	8001d22 <bme69x_get_data+0x1d2>
            {
                rslt = BME69X_W_NO_NEW_DATA;
 8001d14:	2302      	movs	r3, #2
 8001d16:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
            if (new_fields == 0)
 8001d1a:	e002      	b.n	8001d22 <bme69x_get_data+0x1d2>
            }
        }
        else
        {
            rslt = BME69X_W_DEFINE_OP_MODE;
 8001d1c:	2301      	movs	r3, #1
 8001d1e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
        }

        if (n_data == NULL)
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d103      	bne.n	8001d30 <bme69x_get_data+0x1e0>
        {
            rslt = BME69X_E_NULL_PTR;
 8001d28:	23ff      	movs	r3, #255	@ 0xff
 8001d2a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
        if (n_data == NULL)
 8001d2e:	e007      	b.n	8001d40 <bme69x_get_data+0x1f0>
        }
        else
        {
            *n_data = new_fields;
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	f897 2064 	ldrb.w	r2, [r7, #100]	@ 0x64
 8001d36:	701a      	strb	r2, [r3, #0]
        if (n_data == NULL)
 8001d38:	e002      	b.n	8001d40 <bme69x_get_data+0x1f0>
        }
    }
    else
    {
        rslt = BME69X_E_NULL_PTR;
 8001d3a:	23ff      	movs	r3, #255	@ 0xff
 8001d3c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
    }

    return rslt;
 8001d40:	f997 3067 	ldrsb.w	r3, [r7, #103]	@ 0x67
}
 8001d44:	4618      	mov	r0, r3
 8001d46:	3768      	adds	r7, #104	@ 0x68
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	bdb0      	pop	{r4, r5, r7, pc}

08001d4c <bme69x_set_heatr_conf>:

/*
 * @brief This API is used to set the gas configuration of the sensor.
 */
int8_t bme69x_set_heatr_conf(uint8_t op_mode, const struct bme69x_heatr_conf *conf, struct bme69x_dev *dev)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b088      	sub	sp, #32
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	4603      	mov	r3, r0
 8001d54:	60b9      	str	r1, [r7, #8]
 8001d56:	607a      	str	r2, [r7, #4]
 8001d58:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;
    uint8_t nb_conv = 0;
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	773b      	strb	r3, [r7, #28]
    uint8_t hctrl, run_gas = 0;
 8001d5e:	2300      	movs	r3, #0
 8001d60:	777b      	strb	r3, [r7, #29]
    uint8_t ctrl_gas_data[2];
    uint8_t ctrl_gas_addr[2] = { BME69X_REG_CTRL_GAS_0, BME69X_REG_CTRL_GAS_1 };
 8001d62:	f247 1370 	movw	r3, #29040	@ 0x7170
 8001d66:	82bb      	strh	r3, [r7, #20]

    if (conf != NULL)
 8001d68:	68bb      	ldr	r3, [r7, #8]
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d069      	beq.n	8001e42 <bme69x_set_heatr_conf+0xf6>
    {
        rslt = bme69x_set_op_mode(BME69X_SLEEP_MODE, dev);
 8001d6e:	6879      	ldr	r1, [r7, #4]
 8001d70:	2000      	movs	r0, #0
 8001d72:	f7ff fdf7 	bl	8001964 <bme69x_set_op_mode>
 8001d76:	4603      	mov	r3, r0
 8001d78:	77fb      	strb	r3, [r7, #31]
        if (rslt == BME69X_OK)
 8001d7a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d108      	bne.n	8001d94 <bme69x_set_heatr_conf+0x48>
        {
            rslt = set_conf(conf, op_mode, &nb_conv, dev);
 8001d82:	f107 021c 	add.w	r2, r7, #28
 8001d86:	7bf9      	ldrb	r1, [r7, #15]
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	68b8      	ldr	r0, [r7, #8]
 8001d8c:	f001 f88a 	bl	8002ea4 <set_conf>
 8001d90:	4603      	mov	r3, r0
 8001d92:	77fb      	strb	r3, [r7, #31]
        }

        if (rslt == BME69X_OK)
 8001d94:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d154      	bne.n	8001e46 <bme69x_set_heatr_conf+0xfa>
        {
            rslt = bme69x_get_regs(BME69X_REG_CTRL_GAS_0, ctrl_gas_data, 2, dev);
 8001d9c:	f107 0118 	add.w	r1, r7, #24
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	2202      	movs	r2, #2
 8001da4:	2070      	movs	r0, #112	@ 0x70
 8001da6:	f7ff fc4c 	bl	8001642 <bme69x_get_regs>
 8001daa:	4603      	mov	r3, r0
 8001dac:	77fb      	strb	r3, [r7, #31]
            if (rslt == BME69X_OK)
 8001dae:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d147      	bne.n	8001e46 <bme69x_set_heatr_conf+0xfa>
            {
                if (conf->enable == BME69X_ENABLE)
 8001db6:	68bb      	ldr	r3, [r7, #8]
 8001db8:	781b      	ldrb	r3, [r3, #0]
 8001dba:	2b01      	cmp	r3, #1
 8001dbc:	d104      	bne.n	8001dc8 <bme69x_set_heatr_conf+0x7c>
                {
                    hctrl = BME69X_ENABLE_HEATER;
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	77bb      	strb	r3, [r7, #30]
                    run_gas = BME69X_ENABLE_GAS_MEAS;
 8001dc2:	2301      	movs	r3, #1
 8001dc4:	777b      	strb	r3, [r7, #29]
 8001dc6:	e003      	b.n	8001dd0 <bme69x_set_heatr_conf+0x84>

                }
                else
                {
                    hctrl = BME69X_DISABLE_HEATER;
 8001dc8:	2301      	movs	r3, #1
 8001dca:	77bb      	strb	r3, [r7, #30]
                    run_gas = BME69X_DISABLE_GAS_MEAS;
 8001dcc:	2300      	movs	r3, #0
 8001dce:	777b      	strb	r3, [r7, #29]
                }

                ctrl_gas_data[0] = BME69X_SET_BITS(ctrl_gas_data[0], BME69X_HCTRL, hctrl);
 8001dd0:	7e3b      	ldrb	r3, [r7, #24]
 8001dd2:	b25b      	sxtb	r3, r3
 8001dd4:	f023 0308 	bic.w	r3, r3, #8
 8001dd8:	b25a      	sxtb	r2, r3
 8001dda:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8001dde:	00db      	lsls	r3, r3, #3
 8001de0:	b25b      	sxtb	r3, r3
 8001de2:	f003 0308 	and.w	r3, r3, #8
 8001de6:	b25b      	sxtb	r3, r3
 8001de8:	4313      	orrs	r3, r2
 8001dea:	b25b      	sxtb	r3, r3
 8001dec:	b2db      	uxtb	r3, r3
 8001dee:	763b      	strb	r3, [r7, #24]
                ctrl_gas_data[1] = BME69X_SET_BITS_POS_0(ctrl_gas_data[1], BME69X_NBCONV, nb_conv);
 8001df0:	7e7b      	ldrb	r3, [r7, #25]
 8001df2:	b25b      	sxtb	r3, r3
 8001df4:	f023 030f 	bic.w	r3, r3, #15
 8001df8:	b25a      	sxtb	r2, r3
 8001dfa:	7f3b      	ldrb	r3, [r7, #28]
 8001dfc:	b25b      	sxtb	r3, r3
 8001dfe:	f003 030f 	and.w	r3, r3, #15
 8001e02:	b25b      	sxtb	r3, r3
 8001e04:	4313      	orrs	r3, r2
 8001e06:	b25b      	sxtb	r3, r3
 8001e08:	b2db      	uxtb	r3, r3
 8001e0a:	767b      	strb	r3, [r7, #25]
                ctrl_gas_data[1] = BME69X_SET_BITS(ctrl_gas_data[1], BME69X_RUN_GAS, run_gas);
 8001e0c:	7e7b      	ldrb	r3, [r7, #25]
 8001e0e:	b25b      	sxtb	r3, r3
 8001e10:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8001e14:	b25a      	sxtb	r2, r3
 8001e16:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8001e1a:	015b      	lsls	r3, r3, #5
 8001e1c:	b25b      	sxtb	r3, r3
 8001e1e:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8001e22:	b25b      	sxtb	r3, r3
 8001e24:	4313      	orrs	r3, r2
 8001e26:	b25b      	sxtb	r3, r3
 8001e28:	b2db      	uxtb	r3, r3
 8001e2a:	767b      	strb	r3, [r7, #25]

                rslt = bme69x_set_regs(ctrl_gas_addr, ctrl_gas_data, 2, dev);
 8001e2c:	f107 0118 	add.w	r1, r7, #24
 8001e30:	f107 0014 	add.w	r0, r7, #20
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	2202      	movs	r2, #2
 8001e38:	f7ff fb74 	bl	8001524 <bme69x_set_regs>
 8001e3c:	4603      	mov	r3, r0
 8001e3e:	77fb      	strb	r3, [r7, #31]
 8001e40:	e001      	b.n	8001e46 <bme69x_set_heatr_conf+0xfa>
            }
        }
    }
    else
    {
        rslt = BME69X_E_NULL_PTR;
 8001e42:	23ff      	movs	r3, #255	@ 0xff
 8001e44:	77fb      	strb	r3, [r7, #31]
    }

    return rslt;
 8001e46:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	3720      	adds	r7, #32
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	bd80      	pop	{r7, pc}
	...

08001e54 <calc_temperature>:

#else

/* @brief This internal API is used to calculate the temperature value. */
static float calc_temperature(uint32_t temp_adc, const struct bme69x_dev *dev)
{
 8001e54:	b5b0      	push	{r4, r5, r7, lr}
 8001e56:	b090      	sub	sp, #64	@ 0x40
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
 8001e5c:	6039      	str	r1, [r7, #0]
    int32_t do1, cf;
    double dtk1, dtk2, temp1, temp2;
    double calc_temp;

    do1 = (int32_t)dev->calib.par_t1 << 8;
 8001e5e:	683b      	ldr	r3, [r7, #0]
 8001e60:	8bdb      	ldrh	r3, [r3, #30]
 8001e62:	021b      	lsls	r3, r3, #8
 8001e64:	63fb      	str	r3, [r7, #60]	@ 0x3c
    dtk1 = (double)dev->calib.par_t2 / (double)(1ULL << 30);
 8001e66:	683b      	ldr	r3, [r7, #0]
 8001e68:	8c1b      	ldrh	r3, [r3, #32]
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	f7fe fb4e 	bl	800050c <__aeabi_ui2d>
 8001e70:	f04f 0200 	mov.w	r2, #0
 8001e74:	4b28      	ldr	r3, [pc, #160]	@ (8001f18 <calc_temperature+0xc4>)
 8001e76:	f7fe fced 	bl	8000854 <__aeabi_ddiv>
 8001e7a:	4602      	mov	r2, r0
 8001e7c:	460b      	mov	r3, r1
 8001e7e:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    dtk2 = (double)dev->calib.par_t3 / (double)(1ULL << 48);
 8001e82:	683b      	ldr	r3, [r7, #0]
 8001e84:	f993 3022 	ldrsb.w	r3, [r3, #34]	@ 0x22
 8001e88:	4618      	mov	r0, r3
 8001e8a:	f7fe fb4f 	bl	800052c <__aeabi_i2d>
 8001e8e:	f04f 0200 	mov.w	r2, #0
 8001e92:	4b22      	ldr	r3, [pc, #136]	@ (8001f1c <calc_temperature+0xc8>)
 8001e94:	f7fe fcde 	bl	8000854 <__aeabi_ddiv>
 8001e98:	4602      	mov	r2, r0
 8001e9a:	460b      	mov	r3, r1
 8001e9c:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28

    cf = temp_adc - do1;
 8001ea0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001ea2:	687a      	ldr	r2, [r7, #4]
 8001ea4:	1ad3      	subs	r3, r2, r3
 8001ea6:	627b      	str	r3, [r7, #36]	@ 0x24
    temp1 = (double)(cf * dtk1);
 8001ea8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001eaa:	f7fe fb3f 	bl	800052c <__aeabi_i2d>
 8001eae:	4602      	mov	r2, r0
 8001eb0:	460b      	mov	r3, r1
 8001eb2:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8001eb6:	f7fe fba3 	bl	8000600 <__aeabi_dmul>
 8001eba:	4602      	mov	r2, r0
 8001ebc:	460b      	mov	r3, r1
 8001ebe:	e9c7 2306 	strd	r2, r3, [r7, #24]
    temp2 = (double)cf * (double)cf * dtk2;
 8001ec2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001ec4:	f7fe fb32 	bl	800052c <__aeabi_i2d>
 8001ec8:	4604      	mov	r4, r0
 8001eca:	460d      	mov	r5, r1
 8001ecc:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001ece:	f7fe fb2d 	bl	800052c <__aeabi_i2d>
 8001ed2:	4602      	mov	r2, r0
 8001ed4:	460b      	mov	r3, r1
 8001ed6:	4620      	mov	r0, r4
 8001ed8:	4629      	mov	r1, r5
 8001eda:	f7fe fb91 	bl	8000600 <__aeabi_dmul>
 8001ede:	4602      	mov	r2, r0
 8001ee0:	460b      	mov	r3, r1
 8001ee2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8001ee6:	f7fe fb8b 	bl	8000600 <__aeabi_dmul>
 8001eea:	4602      	mov	r2, r0
 8001eec:	460b      	mov	r3, r1
 8001eee:	e9c7 2304 	strd	r2, r3, [r7, #16]

    calc_temp = temp1 + temp2;
 8001ef2:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001ef6:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001efa:	f7fe f9cb 	bl	8000294 <__adddf3>
 8001efe:	4602      	mov	r2, r0
 8001f00:	460b      	mov	r3, r1
 8001f02:	e9c7 2302 	strd	r2, r3, [r7, #8]

    return (float)calc_temp;
 8001f06:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001f0a:	f7fe fe51 	bl	8000bb0 <__aeabi_d2f>
 8001f0e:	4603      	mov	r3, r0
}
 8001f10:	4618      	mov	r0, r3
 8001f12:	3740      	adds	r7, #64	@ 0x40
 8001f14:	46bd      	mov	sp, r7
 8001f16:	bdb0      	pop	{r4, r5, r7, pc}
 8001f18:	41d00000 	.word	0x41d00000
 8001f1c:	42f00000 	.word	0x42f00000

08001f20 <calc_pressure>:

/* @brief This internal API is used to calculate the pressure value. */
static float calc_pressure(uint32_t pres_adc, float comp_temperature, const struct bme69x_dev *dev)
{
 8001f20:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001f24:	b0a4      	sub	sp, #144	@ 0x90
 8001f26:	af00      	add	r7, sp, #0
 8001f28:	60f8      	str	r0, [r7, #12]
 8001f2a:	60b9      	str	r1, [r7, #8]
 8001f2c:	607a      	str	r2, [r7, #4]
    double s;
    double tk1s, tk2s, tk3s;
    double nls, tknls, nls3;
    double calc_pres, tmp1, tmp2, tmp3, tmp4;

    o = (uint32_t)dev->calib.par_p1 * (uint32_t)(1ULL << 3);
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001f32:	00db      	lsls	r3, r3, #3
 8001f34:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    tk10 = (double)dev->calib.par_p2 / (double)(1ULL << 6);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	f7fe fae5 	bl	800050c <__aeabi_ui2d>
 8001f42:	f04f 0200 	mov.w	r2, #0
 8001f46:	4bd5      	ldr	r3, [pc, #852]	@ (800229c <calc_pressure+0x37c>)
 8001f48:	f7fe fc84 	bl	8000854 <__aeabi_ddiv>
 8001f4c:	4602      	mov	r2, r0
 8001f4e:	460b      	mov	r3, r1
 8001f50:	e9c7 2320 	strd	r2, r3, [r7, #128]	@ 0x80
    tk20 = (double)dev->calib.par_p3 / (double)(1ULL << 8);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	f993 302e 	ldrsb.w	r3, [r3, #46]	@ 0x2e
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	f7fe fae6 	bl	800052c <__aeabi_i2d>
 8001f60:	f04f 0200 	mov.w	r2, #0
 8001f64:	4bce      	ldr	r3, [pc, #824]	@ (80022a0 <calc_pressure+0x380>)
 8001f66:	f7fe fc75 	bl	8000854 <__aeabi_ddiv>
 8001f6a:	4602      	mov	r2, r0
 8001f6c:	460b      	mov	r3, r1
 8001f6e:	e9c7 231e 	strd	r2, r3, [r7, #120]	@ 0x78
    tk30 = (double)dev->calib.par_p4 / (double)(1ULL << 15);
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	f993 302f 	ldrsb.w	r3, [r3, #47]	@ 0x2f
 8001f78:	4618      	mov	r0, r3
 8001f7a:	f7fe fad7 	bl	800052c <__aeabi_i2d>
 8001f7e:	f04f 0200 	mov.w	r2, #0
 8001f82:	4bc8      	ldr	r3, [pc, #800]	@ (80022a4 <calc_pressure+0x384>)
 8001f84:	f7fe fc66 	bl	8000854 <__aeabi_ddiv>
 8001f88:	4602      	mov	r2, r0
 8001f8a:	460b      	mov	r3, r1
 8001f8c:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70

    s = ((double)dev->calib.par_p5 - (double)(1ULL << 14)) / (double)(1ULL << 20);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	@ 0x24
 8001f96:	4618      	mov	r0, r3
 8001f98:	f7fe fac8 	bl	800052c <__aeabi_i2d>
 8001f9c:	f04f 0200 	mov.w	r2, #0
 8001fa0:	4bc1      	ldr	r3, [pc, #772]	@ (80022a8 <calc_pressure+0x388>)
 8001fa2:	f7fe f975 	bl	8000290 <__aeabi_dsub>
 8001fa6:	4602      	mov	r2, r0
 8001fa8:	460b      	mov	r3, r1
 8001faa:	4610      	mov	r0, r2
 8001fac:	4619      	mov	r1, r3
 8001fae:	f04f 0200 	mov.w	r2, #0
 8001fb2:	4bbe      	ldr	r3, [pc, #760]	@ (80022ac <calc_pressure+0x38c>)
 8001fb4:	f7fe fc4e 	bl	8000854 <__aeabi_ddiv>
 8001fb8:	4602      	mov	r2, r0
 8001fba:	460b      	mov	r3, r1
 8001fbc:	e9c7 231a 	strd	r2, r3, [r7, #104]	@ 0x68
    tk1s = ((double)dev->calib.par_p6 - (double)(1ULL << 14)) / (double)(1ULL << 29);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	@ 0x26
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	f7fe fab0 	bl	800052c <__aeabi_i2d>
 8001fcc:	f04f 0200 	mov.w	r2, #0
 8001fd0:	4bb5      	ldr	r3, [pc, #724]	@ (80022a8 <calc_pressure+0x388>)
 8001fd2:	f7fe f95d 	bl	8000290 <__aeabi_dsub>
 8001fd6:	4602      	mov	r2, r0
 8001fd8:	460b      	mov	r3, r1
 8001fda:	4610      	mov	r0, r2
 8001fdc:	4619      	mov	r1, r3
 8001fde:	f04f 0200 	mov.w	r2, #0
 8001fe2:	4bb3      	ldr	r3, [pc, #716]	@ (80022b0 <calc_pressure+0x390>)
 8001fe4:	f7fe fc36 	bl	8000854 <__aeabi_ddiv>
 8001fe8:	4602      	mov	r2, r0
 8001fea:	460b      	mov	r3, r1
 8001fec:	e9c7 2318 	strd	r2, r3, [r7, #96]	@ 0x60
    tk2s = (double)dev->calib.par_p7 / (double)(1ULL << 32);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	f993 3028 	ldrsb.w	r3, [r3, #40]	@ 0x28
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	f7fe fa98 	bl	800052c <__aeabi_i2d>
 8001ffc:	f04f 0200 	mov.w	r2, #0
 8002000:	4bac      	ldr	r3, [pc, #688]	@ (80022b4 <calc_pressure+0x394>)
 8002002:	f7fe fc27 	bl	8000854 <__aeabi_ddiv>
 8002006:	4602      	mov	r2, r0
 8002008:	460b      	mov	r3, r1
 800200a:	e9c7 2316 	strd	r2, r3, [r7, #88]	@ 0x58
    tk3s = (double)dev->calib.par_p8 / (double)(1ULL << 37);
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	f993 3029 	ldrsb.w	r3, [r3, #41]	@ 0x29
 8002014:	4618      	mov	r0, r3
 8002016:	f7fe fa89 	bl	800052c <__aeabi_i2d>
 800201a:	f04f 0200 	mov.w	r2, #0
 800201e:	4ba6      	ldr	r3, [pc, #664]	@ (80022b8 <calc_pressure+0x398>)
 8002020:	f7fe fc18 	bl	8000854 <__aeabi_ddiv>
 8002024:	4602      	mov	r2, r0
 8002026:	460b      	mov	r3, r1
 8002028:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50

    nls = (double)dev->calib.par_p9 / (double)(1ULL << 48);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8002032:	4618      	mov	r0, r3
 8002034:	f7fe fa7a 	bl	800052c <__aeabi_i2d>
 8002038:	f04f 0200 	mov.w	r2, #0
 800203c:	4b9f      	ldr	r3, [pc, #636]	@ (80022bc <calc_pressure+0x39c>)
 800203e:	f7fe fc09 	bl	8000854 <__aeabi_ddiv>
 8002042:	4602      	mov	r2, r0
 8002044:	460b      	mov	r3, r1
 8002046:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
    tknls = (double)dev->calib.par_p10 / (double)(1ULL << 48);
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	f993 3032 	ldrsb.w	r3, [r3, #50]	@ 0x32
 8002050:	4618      	mov	r0, r3
 8002052:	f7fe fa6b 	bl	800052c <__aeabi_i2d>
 8002056:	f04f 0200 	mov.w	r2, #0
 800205a:	4b98      	ldr	r3, [pc, #608]	@ (80022bc <calc_pressure+0x39c>)
 800205c:	f7fe fbfa 	bl	8000854 <__aeabi_ddiv>
 8002060:	4602      	mov	r2, r0
 8002062:	460b      	mov	r3, r1
 8002064:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40

    /*
     * NLS3 = par_p11 / 2^65
     * 2^65 is exceeding the width of 'double' datatype and hence we splitted into two factors since A^(x+y) = A^x * A^y
     */
    nls3 = (double)dev->calib.par_p11 / ((double)(1ULL << 35) * (double)(1ULL << 30));
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	f993 3033 	ldrsb.w	r3, [r3, #51]	@ 0x33
 800206e:	4618      	mov	r0, r3
 8002070:	f7fe fa5c 	bl	800052c <__aeabi_i2d>
 8002074:	f04f 0200 	mov.w	r2, #0
 8002078:	f04f 4388 	mov.w	r3, #1140850688	@ 0x44000000
 800207c:	f7fe fbea 	bl	8000854 <__aeabi_ddiv>
 8002080:	4602      	mov	r2, r0
 8002082:	460b      	mov	r3, r1
 8002084:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38

    tmp1 = (double)o + (tk10 * comp_temperature) + (tk20 * comp_temperature * comp_temperature) +
 8002088:	f8d7 008c 	ldr.w	r0, [r7, #140]	@ 0x8c
 800208c:	f7fe fa3e 	bl	800050c <__aeabi_ui2d>
 8002090:	4604      	mov	r4, r0
 8002092:	460d      	mov	r5, r1
 8002094:	68b8      	ldr	r0, [r7, #8]
 8002096:	f7fe fa5b 	bl	8000550 <__aeabi_f2d>
 800209a:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
 800209e:	f7fe faaf 	bl	8000600 <__aeabi_dmul>
 80020a2:	4602      	mov	r2, r0
 80020a4:	460b      	mov	r3, r1
 80020a6:	4620      	mov	r0, r4
 80020a8:	4629      	mov	r1, r5
 80020aa:	f7fe f8f3 	bl	8000294 <__adddf3>
 80020ae:	4602      	mov	r2, r0
 80020b0:	460b      	mov	r3, r1
 80020b2:	4614      	mov	r4, r2
 80020b4:	461d      	mov	r5, r3
 80020b6:	68b8      	ldr	r0, [r7, #8]
 80020b8:	f7fe fa4a 	bl	8000550 <__aeabi_f2d>
 80020bc:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	@ 0x78
 80020c0:	f7fe fa9e 	bl	8000600 <__aeabi_dmul>
 80020c4:	4602      	mov	r2, r0
 80020c6:	460b      	mov	r3, r1
 80020c8:	4690      	mov	r8, r2
 80020ca:	4699      	mov	r9, r3
 80020cc:	68b8      	ldr	r0, [r7, #8]
 80020ce:	f7fe fa3f 	bl	8000550 <__aeabi_f2d>
 80020d2:	4602      	mov	r2, r0
 80020d4:	460b      	mov	r3, r1
 80020d6:	4640      	mov	r0, r8
 80020d8:	4649      	mov	r1, r9
 80020da:	f7fe fa91 	bl	8000600 <__aeabi_dmul>
 80020de:	4602      	mov	r2, r0
 80020e0:	460b      	mov	r3, r1
 80020e2:	4620      	mov	r0, r4
 80020e4:	4629      	mov	r1, r5
 80020e6:	f7fe f8d5 	bl	8000294 <__adddf3>
 80020ea:	4602      	mov	r2, r0
 80020ec:	460b      	mov	r3, r1
 80020ee:	4614      	mov	r4, r2
 80020f0:	461d      	mov	r5, r3
           (tk30 * comp_temperature * comp_temperature * comp_temperature);
 80020f2:	68b8      	ldr	r0, [r7, #8]
 80020f4:	f7fe fa2c 	bl	8000550 <__aeabi_f2d>
 80020f8:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 80020fc:	f7fe fa80 	bl	8000600 <__aeabi_dmul>
 8002100:	4602      	mov	r2, r0
 8002102:	460b      	mov	r3, r1
 8002104:	4690      	mov	r8, r2
 8002106:	4699      	mov	r9, r3
 8002108:	68b8      	ldr	r0, [r7, #8]
 800210a:	f7fe fa21 	bl	8000550 <__aeabi_f2d>
 800210e:	4602      	mov	r2, r0
 8002110:	460b      	mov	r3, r1
 8002112:	4640      	mov	r0, r8
 8002114:	4649      	mov	r1, r9
 8002116:	f7fe fa73 	bl	8000600 <__aeabi_dmul>
 800211a:	4602      	mov	r2, r0
 800211c:	460b      	mov	r3, r1
 800211e:	4690      	mov	r8, r2
 8002120:	4699      	mov	r9, r3
 8002122:	68b8      	ldr	r0, [r7, #8]
 8002124:	f7fe fa14 	bl	8000550 <__aeabi_f2d>
 8002128:	4602      	mov	r2, r0
 800212a:	460b      	mov	r3, r1
 800212c:	4640      	mov	r0, r8
 800212e:	4649      	mov	r1, r9
 8002130:	f7fe fa66 	bl	8000600 <__aeabi_dmul>
 8002134:	4602      	mov	r2, r0
 8002136:	460b      	mov	r3, r1
    tmp1 = (double)o + (tk10 * comp_temperature) + (tk20 * comp_temperature * comp_temperature) +
 8002138:	4620      	mov	r0, r4
 800213a:	4629      	mov	r1, r5
 800213c:	f7fe f8aa 	bl	8000294 <__adddf3>
 8002140:	4602      	mov	r2, r0
 8002142:	460b      	mov	r3, r1
 8002144:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30

    tmp2 = (double)pres_adc *
 8002148:	68f8      	ldr	r0, [r7, #12]
 800214a:	f7fe f9df 	bl	800050c <__aeabi_ui2d>
 800214e:	4604      	mov	r4, r0
 8002150:	460d      	mov	r5, r1
           ((double)s + (tk1s * comp_temperature) + (tk2s * comp_temperature * comp_temperature) +
 8002152:	68b8      	ldr	r0, [r7, #8]
 8002154:	f7fe f9fc 	bl	8000550 <__aeabi_f2d>
 8002158:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 800215c:	f7fe fa50 	bl	8000600 <__aeabi_dmul>
 8002160:	4602      	mov	r2, r0
 8002162:	460b      	mov	r3, r1
 8002164:	4610      	mov	r0, r2
 8002166:	4619      	mov	r1, r3
 8002168:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 800216c:	f7fe f892 	bl	8000294 <__adddf3>
 8002170:	4602      	mov	r2, r0
 8002172:	460b      	mov	r3, r1
 8002174:	4690      	mov	r8, r2
 8002176:	4699      	mov	r9, r3
 8002178:	68b8      	ldr	r0, [r7, #8]
 800217a:	f7fe f9e9 	bl	8000550 <__aeabi_f2d>
 800217e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002182:	f7fe fa3d 	bl	8000600 <__aeabi_dmul>
 8002186:	4602      	mov	r2, r0
 8002188:	460b      	mov	r3, r1
 800218a:	4692      	mov	sl, r2
 800218c:	469b      	mov	fp, r3
 800218e:	68b8      	ldr	r0, [r7, #8]
 8002190:	f7fe f9de 	bl	8000550 <__aeabi_f2d>
 8002194:	4602      	mov	r2, r0
 8002196:	460b      	mov	r3, r1
 8002198:	4650      	mov	r0, sl
 800219a:	4659      	mov	r1, fp
 800219c:	f7fe fa30 	bl	8000600 <__aeabi_dmul>
 80021a0:	4602      	mov	r2, r0
 80021a2:	460b      	mov	r3, r1
 80021a4:	4640      	mov	r0, r8
 80021a6:	4649      	mov	r1, r9
 80021a8:	f7fe f874 	bl	8000294 <__adddf3>
 80021ac:	4602      	mov	r2, r0
 80021ae:	460b      	mov	r3, r1
 80021b0:	4690      	mov	r8, r2
 80021b2:	4699      	mov	r9, r3
            (tk3s * comp_temperature * comp_temperature * comp_temperature));
 80021b4:	68b8      	ldr	r0, [r7, #8]
 80021b6:	f7fe f9cb 	bl	8000550 <__aeabi_f2d>
 80021ba:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80021be:	f7fe fa1f 	bl	8000600 <__aeabi_dmul>
 80021c2:	4602      	mov	r2, r0
 80021c4:	460b      	mov	r3, r1
 80021c6:	4692      	mov	sl, r2
 80021c8:	469b      	mov	fp, r3
 80021ca:	68b8      	ldr	r0, [r7, #8]
 80021cc:	f7fe f9c0 	bl	8000550 <__aeabi_f2d>
 80021d0:	4602      	mov	r2, r0
 80021d2:	460b      	mov	r3, r1
 80021d4:	4650      	mov	r0, sl
 80021d6:	4659      	mov	r1, fp
 80021d8:	f7fe fa12 	bl	8000600 <__aeabi_dmul>
 80021dc:	4602      	mov	r2, r0
 80021de:	460b      	mov	r3, r1
 80021e0:	4692      	mov	sl, r2
 80021e2:	469b      	mov	fp, r3
 80021e4:	68b8      	ldr	r0, [r7, #8]
 80021e6:	f7fe f9b3 	bl	8000550 <__aeabi_f2d>
 80021ea:	4602      	mov	r2, r0
 80021ec:	460b      	mov	r3, r1
 80021ee:	4650      	mov	r0, sl
 80021f0:	4659      	mov	r1, fp
 80021f2:	f7fe fa05 	bl	8000600 <__aeabi_dmul>
 80021f6:	4602      	mov	r2, r0
 80021f8:	460b      	mov	r3, r1
           ((double)s + (tk1s * comp_temperature) + (tk2s * comp_temperature * comp_temperature) +
 80021fa:	4640      	mov	r0, r8
 80021fc:	4649      	mov	r1, r9
 80021fe:	f7fe f849 	bl	8000294 <__adddf3>
 8002202:	4602      	mov	r2, r0
 8002204:	460b      	mov	r3, r1
    tmp2 = (double)pres_adc *
 8002206:	4620      	mov	r0, r4
 8002208:	4629      	mov	r1, r5
 800220a:	f7fe f9f9 	bl	8000600 <__aeabi_dmul>
 800220e:	4602      	mov	r2, r0
 8002210:	460b      	mov	r3, r1
 8002212:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28

    tmp3 = (double)pres_adc * (double)pres_adc * (nls + (tknls * comp_temperature));
 8002216:	68f8      	ldr	r0, [r7, #12]
 8002218:	f7fe f978 	bl	800050c <__aeabi_ui2d>
 800221c:	4604      	mov	r4, r0
 800221e:	460d      	mov	r5, r1
 8002220:	68f8      	ldr	r0, [r7, #12]
 8002222:	f7fe f973 	bl	800050c <__aeabi_ui2d>
 8002226:	4602      	mov	r2, r0
 8002228:	460b      	mov	r3, r1
 800222a:	4620      	mov	r0, r4
 800222c:	4629      	mov	r1, r5
 800222e:	f7fe f9e7 	bl	8000600 <__aeabi_dmul>
 8002232:	4602      	mov	r2, r0
 8002234:	460b      	mov	r3, r1
 8002236:	4614      	mov	r4, r2
 8002238:	461d      	mov	r5, r3
 800223a:	68b8      	ldr	r0, [r7, #8]
 800223c:	f7fe f988 	bl	8000550 <__aeabi_f2d>
 8002240:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8002244:	f7fe f9dc 	bl	8000600 <__aeabi_dmul>
 8002248:	4602      	mov	r2, r0
 800224a:	460b      	mov	r3, r1
 800224c:	4610      	mov	r0, r2
 800224e:	4619      	mov	r1, r3
 8002250:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002254:	f7fe f81e 	bl	8000294 <__adddf3>
 8002258:	4602      	mov	r2, r0
 800225a:	460b      	mov	r3, r1
 800225c:	4620      	mov	r0, r4
 800225e:	4629      	mov	r1, r5
 8002260:	f7fe f9ce 	bl	8000600 <__aeabi_dmul>
 8002264:	4602      	mov	r2, r0
 8002266:	460b      	mov	r3, r1
 8002268:	e9c7 2308 	strd	r2, r3, [r7, #32]
    tmp4 = (double)pres_adc * (double)pres_adc * (double)pres_adc * nls3;
 800226c:	68f8      	ldr	r0, [r7, #12]
 800226e:	f7fe f94d 	bl	800050c <__aeabi_ui2d>
 8002272:	4604      	mov	r4, r0
 8002274:	460d      	mov	r5, r1
 8002276:	68f8      	ldr	r0, [r7, #12]
 8002278:	f7fe f948 	bl	800050c <__aeabi_ui2d>
 800227c:	4602      	mov	r2, r0
 800227e:	460b      	mov	r3, r1
 8002280:	4620      	mov	r0, r4
 8002282:	4629      	mov	r1, r5
 8002284:	f7fe f9bc 	bl	8000600 <__aeabi_dmul>
 8002288:	4602      	mov	r2, r0
 800228a:	460b      	mov	r3, r1
 800228c:	4614      	mov	r4, r2
 800228e:	461d      	mov	r5, r3
 8002290:	68f8      	ldr	r0, [r7, #12]
 8002292:	f7fe f93b 	bl	800050c <__aeabi_ui2d>
 8002296:	4602      	mov	r2, r0
 8002298:	e012      	b.n	80022c0 <calc_pressure+0x3a0>
 800229a:	bf00      	nop
 800229c:	40500000 	.word	0x40500000
 80022a0:	40700000 	.word	0x40700000
 80022a4:	40e00000 	.word	0x40e00000
 80022a8:	40d00000 	.word	0x40d00000
 80022ac:	41300000 	.word	0x41300000
 80022b0:	41c00000 	.word	0x41c00000
 80022b4:	41f00000 	.word	0x41f00000
 80022b8:	42400000 	.word	0x42400000
 80022bc:	42f00000 	.word	0x42f00000
 80022c0:	460b      	mov	r3, r1
 80022c2:	4620      	mov	r0, r4
 80022c4:	4629      	mov	r1, r5
 80022c6:	f7fe f99b 	bl	8000600 <__aeabi_dmul>
 80022ca:	4602      	mov	r2, r0
 80022cc:	460b      	mov	r3, r1
 80022ce:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 80022d2:	f7fe f995 	bl	8000600 <__aeabi_dmul>
 80022d6:	4602      	mov	r2, r0
 80022d8:	460b      	mov	r3, r1
 80022da:	e9c7 2306 	strd	r2, r3, [r7, #24]

    calc_pres = tmp1 + tmp2 + tmp3 + tmp4;
 80022de:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80022e2:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 80022e6:	f7fd ffd5 	bl	8000294 <__adddf3>
 80022ea:	4602      	mov	r2, r0
 80022ec:	460b      	mov	r3, r1
 80022ee:	4610      	mov	r0, r2
 80022f0:	4619      	mov	r1, r3
 80022f2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80022f6:	f7fd ffcd 	bl	8000294 <__adddf3>
 80022fa:	4602      	mov	r2, r0
 80022fc:	460b      	mov	r3, r1
 80022fe:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002302:	f7fd ffc7 	bl	8000294 <__adddf3>
 8002306:	4602      	mov	r2, r0
 8002308:	460b      	mov	r3, r1
 800230a:	e9c7 2304 	strd	r2, r3, [r7, #16]

    return (float)calc_pres;
 800230e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002312:	f7fe fc4d 	bl	8000bb0 <__aeabi_d2f>
 8002316:	4603      	mov	r3, r0
}
 8002318:	4618      	mov	r0, r3
 800231a:	3790      	adds	r7, #144	@ 0x90
 800231c:	46bd      	mov	sp, r7
 800231e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002322:	bf00      	nop

08002324 <calc_humidity>:

/* This internal API is used to calculate the humidity in integer */
static float calc_humidity(uint16_t hum_adc, float comp_temperature, const struct bme69x_dev *dev)
{
 8002324:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002328:	b09a      	sub	sp, #104	@ 0x68
 800232a:	af00      	add	r7, sp, #0
 800232c:	4603      	mov	r3, r0
 800232e:	60b9      	str	r1, [r7, #8]
 8002330:	607a      	str	r2, [r7, #4]
 8002332:	81fb      	strh	r3, [r7, #14]
    double oh, tk10h, sh;
    double tk1sh, tk2sh, hlin2;
    double hoff, hsens;
    double temp_comp, calc_hum, temp_var_1;

    temp_comp = (comp_temperature * 5120) - 76800;
 8002334:	4977      	ldr	r1, [pc, #476]	@ (8002514 <calc_humidity+0x1f0>)
 8002336:	68b8      	ldr	r0, [r7, #8]
 8002338:	f7fe fd98 	bl	8000e6c <__aeabi_fmul>
 800233c:	4603      	mov	r3, r0
 800233e:	4976      	ldr	r1, [pc, #472]	@ (8002518 <calc_humidity+0x1f4>)
 8002340:	4618      	mov	r0, r3
 8002342:	f7fe fc89 	bl	8000c58 <__aeabi_fsub>
 8002346:	4603      	mov	r3, r0
 8002348:	4618      	mov	r0, r3
 800234a:	f7fe f901 	bl	8000550 <__aeabi_f2d>
 800234e:	4602      	mov	r2, r0
 8002350:	460b      	mov	r3, r1
 8002352:	e9c7 2318 	strd	r2, r3, [r7, #96]	@ 0x60

    oh = (double)dev->calib.par_h1 * (double)(1ULL << 6);
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 800235c:	4618      	mov	r0, r3
 800235e:	f7fe f8e5 	bl	800052c <__aeabi_i2d>
 8002362:	f04f 0200 	mov.w	r2, #0
 8002366:	4b6d      	ldr	r3, [pc, #436]	@ (800251c <calc_humidity+0x1f8>)
 8002368:	f7fe f94a 	bl	8000600 <__aeabi_dmul>
 800236c:	4602      	mov	r2, r0
 800236e:	460b      	mov	r3, r1
 8002370:	e9c7 2316 	strd	r2, r3, [r7, #88]	@ 0x58
    sh = (double)dev->calib.par_h5 / (double)(1ULL << 16);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 800237a:	4618      	mov	r0, r3
 800237c:	f7fe f8d6 	bl	800052c <__aeabi_i2d>
 8002380:	f04f 0200 	mov.w	r2, #0
 8002384:	4b66      	ldr	r3, [pc, #408]	@ (8002520 <calc_humidity+0x1fc>)
 8002386:	f7fe fa65 	bl	8000854 <__aeabi_ddiv>
 800238a:	4602      	mov	r2, r0
 800238c:	460b      	mov	r3, r1
 800238e:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
    tk10h = (double)dev->calib.par_h2 / (double)(1ULL << 14);
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	f993 3012 	ldrsb.w	r3, [r3, #18]
 8002398:	4618      	mov	r0, r3
 800239a:	f7fe f8c7 	bl	800052c <__aeabi_i2d>
 800239e:	f04f 0200 	mov.w	r2, #0
 80023a2:	4b60      	ldr	r3, [pc, #384]	@ (8002524 <calc_humidity+0x200>)
 80023a4:	f7fe fa56 	bl	8000854 <__aeabi_ddiv>
 80023a8:	4602      	mov	r2, r0
 80023aa:	460b      	mov	r3, r1
 80023ac:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
    tk1sh = (double)dev->calib.par_h4 / (double)(1ULL << 26);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	f993 3014 	ldrsb.w	r3, [r3, #20]
 80023b6:	4618      	mov	r0, r3
 80023b8:	f7fe f8b8 	bl	800052c <__aeabi_i2d>
 80023bc:	f04f 0200 	mov.w	r2, #0
 80023c0:	4b59      	ldr	r3, [pc, #356]	@ (8002528 <calc_humidity+0x204>)
 80023c2:	f7fe fa47 	bl	8000854 <__aeabi_ddiv>
 80023c6:	4602      	mov	r2, r0
 80023c8:	460b      	mov	r3, r1
 80023ca:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
    tk2sh = (double)dev->calib.par_h3 / (double)(1ULL << 26);
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	7cdb      	ldrb	r3, [r3, #19]
 80023d2:	4618      	mov	r0, r3
 80023d4:	f7fe f89a 	bl	800050c <__aeabi_ui2d>
 80023d8:	f04f 0200 	mov.w	r2, #0
 80023dc:	4b52      	ldr	r3, [pc, #328]	@ (8002528 <calc_humidity+0x204>)
 80023de:	f7fe fa39 	bl	8000854 <__aeabi_ddiv>
 80023e2:	4602      	mov	r2, r0
 80023e4:	460b      	mov	r3, r1
 80023e6:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
    hlin2 = (double)dev->calib.par_h6 / (double)(1ULL << 19);
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	7e1b      	ldrb	r3, [r3, #24]
 80023ee:	4618      	mov	r0, r3
 80023f0:	f7fe f88c 	bl	800050c <__aeabi_ui2d>
 80023f4:	f04f 0200 	mov.w	r2, #0
 80023f8:	4b4c      	ldr	r3, [pc, #304]	@ (800252c <calc_humidity+0x208>)
 80023fa:	f7fe fa2b 	bl	8000854 <__aeabi_ddiv>
 80023fe:	4602      	mov	r2, r0
 8002400:	460b      	mov	r3, r1
 8002402:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30

    hoff = (double)hum_adc - (oh + tk10h * temp_comp);
 8002406:	89fb      	ldrh	r3, [r7, #14]
 8002408:	4618      	mov	r0, r3
 800240a:	f7fe f87f 	bl	800050c <__aeabi_ui2d>
 800240e:	4604      	mov	r4, r0
 8002410:	460d      	mov	r5, r1
 8002412:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 8002416:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 800241a:	f7fe f8f1 	bl	8000600 <__aeabi_dmul>
 800241e:	4602      	mov	r2, r0
 8002420:	460b      	mov	r3, r1
 8002422:	4610      	mov	r0, r2
 8002424:	4619      	mov	r1, r3
 8002426:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800242a:	f7fd ff33 	bl	8000294 <__adddf3>
 800242e:	4602      	mov	r2, r0
 8002430:	460b      	mov	r3, r1
 8002432:	4620      	mov	r0, r4
 8002434:	4629      	mov	r1, r5
 8002436:	f7fd ff2b 	bl	8000290 <__aeabi_dsub>
 800243a:	4602      	mov	r2, r0
 800243c:	460b      	mov	r3, r1
 800243e:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    hsens = hoff * sh * (1 + (tk1sh * temp_comp) + (tk1sh * tk2sh * temp_comp * temp_comp));
 8002442:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8002446:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800244a:	f7fe f8d9 	bl	8000600 <__aeabi_dmul>
 800244e:	4602      	mov	r2, r0
 8002450:	460b      	mov	r3, r1
 8002452:	4614      	mov	r4, r2
 8002454:	461d      	mov	r5, r3
 8002456:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 800245a:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 800245e:	f7fe f8cf 	bl	8000600 <__aeabi_dmul>
 8002462:	4602      	mov	r2, r0
 8002464:	460b      	mov	r3, r1
 8002466:	4610      	mov	r0, r2
 8002468:	4619      	mov	r1, r3
 800246a:	f04f 0200 	mov.w	r2, #0
 800246e:	4b30      	ldr	r3, [pc, #192]	@ (8002530 <calc_humidity+0x20c>)
 8002470:	f7fd ff10 	bl	8000294 <__adddf3>
 8002474:	4602      	mov	r2, r0
 8002476:	460b      	mov	r3, r1
 8002478:	4690      	mov	r8, r2
 800247a:	4699      	mov	r9, r3
 800247c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8002480:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 8002484:	f7fe f8bc 	bl	8000600 <__aeabi_dmul>
 8002488:	4602      	mov	r2, r0
 800248a:	460b      	mov	r3, r1
 800248c:	4610      	mov	r0, r2
 800248e:	4619      	mov	r1, r3
 8002490:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 8002494:	f7fe f8b4 	bl	8000600 <__aeabi_dmul>
 8002498:	4602      	mov	r2, r0
 800249a:	460b      	mov	r3, r1
 800249c:	4610      	mov	r0, r2
 800249e:	4619      	mov	r1, r3
 80024a0:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 80024a4:	f7fe f8ac 	bl	8000600 <__aeabi_dmul>
 80024a8:	4602      	mov	r2, r0
 80024aa:	460b      	mov	r3, r1
 80024ac:	4640      	mov	r0, r8
 80024ae:	4649      	mov	r1, r9
 80024b0:	f7fd fef0 	bl	8000294 <__adddf3>
 80024b4:	4602      	mov	r2, r0
 80024b6:	460b      	mov	r3, r1
 80024b8:	4620      	mov	r0, r4
 80024ba:	4629      	mov	r1, r5
 80024bc:	f7fe f8a0 	bl	8000600 <__aeabi_dmul>
 80024c0:	4602      	mov	r2, r0
 80024c2:	460b      	mov	r3, r1
 80024c4:	e9c7 2308 	strd	r2, r3, [r7, #32]
    temp_var_1 = hsens * (1 - hlin2 * hsens);
 80024c8:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80024cc:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 80024d0:	f7fe f896 	bl	8000600 <__aeabi_dmul>
 80024d4:	4602      	mov	r2, r0
 80024d6:	460b      	mov	r3, r1
 80024d8:	f04f 0000 	mov.w	r0, #0
 80024dc:	4914      	ldr	r1, [pc, #80]	@ (8002530 <calc_humidity+0x20c>)
 80024de:	f7fd fed7 	bl	8000290 <__aeabi_dsub>
 80024e2:	4602      	mov	r2, r0
 80024e4:	460b      	mov	r3, r1
 80024e6:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80024ea:	f7fe f889 	bl	8000600 <__aeabi_dmul>
 80024ee:	4602      	mov	r2, r0
 80024f0:	460b      	mov	r3, r1
 80024f2:	e9c7 2306 	strd	r2, r3, [r7, #24]
    calc_hum = temp_var_1;
 80024f6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80024fa:	e9c7 2304 	strd	r2, r3, [r7, #16]

    return (float)calc_hum;
 80024fe:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002502:	f7fe fb55 	bl	8000bb0 <__aeabi_d2f>
 8002506:	4603      	mov	r3, r0
}
 8002508:	4618      	mov	r0, r3
 800250a:	3768      	adds	r7, #104	@ 0x68
 800250c:	46bd      	mov	sp, r7
 800250e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002512:	bf00      	nop
 8002514:	45a00000 	.word	0x45a00000
 8002518:	47960000 	.word	0x47960000
 800251c:	40500000 	.word	0x40500000
 8002520:	40f00000 	.word	0x40f00000
 8002524:	40d00000 	.word	0x40d00000
 8002528:	41900000 	.word	0x41900000
 800252c:	41200000 	.word	0x41200000
 8002530:	3ff00000 	.word	0x3ff00000

08002534 <calc_gas_resistance>:

/* This internal API is used to calculate the gas resistance value for BME69x variant in float */
static float calc_gas_resistance(uint16_t gas_res_adc, uint8_t gas_range)
{
 8002534:	b590      	push	{r4, r7, lr}
 8002536:	b087      	sub	sp, #28
 8002538:	af00      	add	r7, sp, #0
 800253a:	4603      	mov	r3, r0
 800253c:	460a      	mov	r2, r1
 800253e:	80fb      	strh	r3, [r7, #6]
 8002540:	4613      	mov	r3, r2
 8002542:	717b      	strb	r3, [r7, #5]
    float calc_gas_res;

    uint32_t var1 = UINT32_C(262144) >> gas_range;
 8002544:	797b      	ldrb	r3, [r7, #5]
 8002546:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800254a:	fa22 f303 	lsr.w	r3, r2, r3
 800254e:	617b      	str	r3, [r7, #20]
    int32_t var2 = (int32_t)gas_res_adc - INT32_C(512);
 8002550:	88fb      	ldrh	r3, [r7, #6]
 8002552:	f5a3 7300 	sub.w	r3, r3, #512	@ 0x200
 8002556:	613b      	str	r3, [r7, #16]

    var2 *= INT32_C(3);
 8002558:	693a      	ldr	r2, [r7, #16]
 800255a:	4613      	mov	r3, r2
 800255c:	005b      	lsls	r3, r3, #1
 800255e:	4413      	add	r3, r2
 8002560:	613b      	str	r3, [r7, #16]
    var2 = INT32_C(4096) + var2;
 8002562:	693b      	ldr	r3, [r7, #16]
 8002564:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002568:	613b      	str	r3, [r7, #16]

    calc_gas_res = 1000000.0f * (float)var1 / (float)var2;
 800256a:	6978      	ldr	r0, [r7, #20]
 800256c:	f7fe fc26 	bl	8000dbc <__aeabi_ui2f>
 8002570:	4603      	mov	r3, r0
 8002572:	490a      	ldr	r1, [pc, #40]	@ (800259c <calc_gas_resistance+0x68>)
 8002574:	4618      	mov	r0, r3
 8002576:	f7fe fc79 	bl	8000e6c <__aeabi_fmul>
 800257a:	4603      	mov	r3, r0
 800257c:	461c      	mov	r4, r3
 800257e:	6938      	ldr	r0, [r7, #16]
 8002580:	f7fe fc20 	bl	8000dc4 <__aeabi_i2f>
 8002584:	4603      	mov	r3, r0
 8002586:	4619      	mov	r1, r3
 8002588:	4620      	mov	r0, r4
 800258a:	f7fe fd23 	bl	8000fd4 <__aeabi_fdiv>
 800258e:	4603      	mov	r3, r0
 8002590:	60fb      	str	r3, [r7, #12]

    return calc_gas_res;
 8002592:	68fb      	ldr	r3, [r7, #12]
}
 8002594:	4618      	mov	r0, r3
 8002596:	371c      	adds	r7, #28
 8002598:	46bd      	mov	sp, r7
 800259a:	bd90      	pop	{r4, r7, pc}
 800259c:	49742400 	.word	0x49742400

080025a0 <calc_res_heat>:

/* This internal API is used to calculate the heater resistance value using float */
static uint8_t calc_res_heat(uint16_t temp, const struct bme69x_dev *dev)
{
 80025a0:	b590      	push	{r4, r7, lr}
 80025a2:	b089      	sub	sp, #36	@ 0x24
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	4603      	mov	r3, r0
 80025a8:	6039      	str	r1, [r7, #0]
 80025aa:	80fb      	strh	r3, [r7, #6]
    float var3;
    float var4;
    float var5;
    uint8_t res_heat;

    if (temp > 400) /* Cap temperature */
 80025ac:	88fb      	ldrh	r3, [r7, #6]
 80025ae:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 80025b2:	d902      	bls.n	80025ba <calc_res_heat+0x1a>
    {
        temp = 400;
 80025b4:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 80025b8:	80fb      	strh	r3, [r7, #6]
    }

    var1 = (((float)dev->calib.par_g1 / (16.0f)) + 49.0f);
 80025ba:	683b      	ldr	r3, [r7, #0]
 80025bc:	f993 3019 	ldrsb.w	r3, [r3, #25]
 80025c0:	4618      	mov	r0, r3
 80025c2:	f7fe fbff 	bl	8000dc4 <__aeabi_i2f>
 80025c6:	4603      	mov	r3, r0
 80025c8:	f04f 4183 	mov.w	r1, #1098907648	@ 0x41800000
 80025cc:	4618      	mov	r0, r3
 80025ce:	f7fe fd01 	bl	8000fd4 <__aeabi_fdiv>
 80025d2:	4603      	mov	r3, r0
 80025d4:	494e      	ldr	r1, [pc, #312]	@ (8002710 <calc_res_heat+0x170>)
 80025d6:	4618      	mov	r0, r3
 80025d8:	f7fe fb40 	bl	8000c5c <__addsf3>
 80025dc:	4603      	mov	r3, r0
 80025de:	61fb      	str	r3, [r7, #28]
    var2 = ((((float)dev->calib.par_g2 / (32768.0f)) * (0.0005f)) + 0.00235f);
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 80025e6:	4618      	mov	r0, r3
 80025e8:	f7fe fbec 	bl	8000dc4 <__aeabi_i2f>
 80025ec:	4603      	mov	r3, r0
 80025ee:	f04f 418e 	mov.w	r1, #1191182336	@ 0x47000000
 80025f2:	4618      	mov	r0, r3
 80025f4:	f7fe fcee 	bl	8000fd4 <__aeabi_fdiv>
 80025f8:	4603      	mov	r3, r0
 80025fa:	4946      	ldr	r1, [pc, #280]	@ (8002714 <calc_res_heat+0x174>)
 80025fc:	4618      	mov	r0, r3
 80025fe:	f7fe fc35 	bl	8000e6c <__aeabi_fmul>
 8002602:	4603      	mov	r3, r0
 8002604:	4944      	ldr	r1, [pc, #272]	@ (8002718 <calc_res_heat+0x178>)
 8002606:	4618      	mov	r0, r3
 8002608:	f7fe fb28 	bl	8000c5c <__addsf3>
 800260c:	4603      	mov	r3, r0
 800260e:	61bb      	str	r3, [r7, #24]
    var3 = ((float)dev->calib.par_g3 / (1024.0f));
 8002610:	683b      	ldr	r3, [r7, #0]
 8002612:	f993 301c 	ldrsb.w	r3, [r3, #28]
 8002616:	4618      	mov	r0, r3
 8002618:	f7fe fbd4 	bl	8000dc4 <__aeabi_i2f>
 800261c:	4603      	mov	r3, r0
 800261e:	f04f 4189 	mov.w	r1, #1149239296	@ 0x44800000
 8002622:	4618      	mov	r0, r3
 8002624:	f7fe fcd6 	bl	8000fd4 <__aeabi_fdiv>
 8002628:	4603      	mov	r3, r0
 800262a:	617b      	str	r3, [r7, #20]
    var4 = (var1 * (1.0f + (var2 * (float)temp)));
 800262c:	88fb      	ldrh	r3, [r7, #6]
 800262e:	4618      	mov	r0, r3
 8002630:	f7fe fbc4 	bl	8000dbc <__aeabi_ui2f>
 8002634:	4603      	mov	r3, r0
 8002636:	69b9      	ldr	r1, [r7, #24]
 8002638:	4618      	mov	r0, r3
 800263a:	f7fe fc17 	bl	8000e6c <__aeabi_fmul>
 800263e:	4603      	mov	r3, r0
 8002640:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8002644:	4618      	mov	r0, r3
 8002646:	f7fe fb09 	bl	8000c5c <__addsf3>
 800264a:	4603      	mov	r3, r0
 800264c:	4619      	mov	r1, r3
 800264e:	69f8      	ldr	r0, [r7, #28]
 8002650:	f7fe fc0c 	bl	8000e6c <__aeabi_fmul>
 8002654:	4603      	mov	r3, r0
 8002656:	613b      	str	r3, [r7, #16]
    var5 = (var4 + (var3 * (float)dev->amb_temp));
 8002658:	683b      	ldr	r3, [r7, #0]
 800265a:	f993 300e 	ldrsb.w	r3, [r3, #14]
 800265e:	4618      	mov	r0, r3
 8002660:	f7fe fbb0 	bl	8000dc4 <__aeabi_i2f>
 8002664:	4603      	mov	r3, r0
 8002666:	6979      	ldr	r1, [r7, #20]
 8002668:	4618      	mov	r0, r3
 800266a:	f7fe fbff 	bl	8000e6c <__aeabi_fmul>
 800266e:	4603      	mov	r3, r0
 8002670:	4619      	mov	r1, r3
 8002672:	6938      	ldr	r0, [r7, #16]
 8002674:	f7fe faf2 	bl	8000c5c <__addsf3>
 8002678:	4603      	mov	r3, r0
 800267a:	60fb      	str	r3, [r7, #12]
    res_heat =
        (uint8_t)(3.4f *
                  ((var5 * (4 / (4 + (float)dev->calib.res_heat_range)) *
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002682:	4618      	mov	r0, r3
 8002684:	f7fe fb9a 	bl	8000dbc <__aeabi_ui2f>
 8002688:	4603      	mov	r3, r0
 800268a:	f04f 4181 	mov.w	r1, #1082130432	@ 0x40800000
 800268e:	4618      	mov	r0, r3
 8002690:	f7fe fae4 	bl	8000c5c <__addsf3>
 8002694:	4603      	mov	r3, r0
 8002696:	4619      	mov	r1, r3
 8002698:	f04f 4081 	mov.w	r0, #1082130432	@ 0x40800000
 800269c:	f7fe fc9a 	bl	8000fd4 <__aeabi_fdiv>
 80026a0:	4603      	mov	r3, r0
 80026a2:	68f9      	ldr	r1, [r7, #12]
 80026a4:	4618      	mov	r0, r3
 80026a6:	f7fe fbe1 	bl	8000e6c <__aeabi_fmul>
 80026aa:	4603      	mov	r3, r0
 80026ac:	461c      	mov	r4, r3
                    (1 / (1 + ((float)dev->calib.res_heat_val * 0.002f)))) -
 80026ae:	683b      	ldr	r3, [r7, #0]
 80026b0:	f993 3039 	ldrsb.w	r3, [r3, #57]	@ 0x39
 80026b4:	4618      	mov	r0, r3
 80026b6:	f7fe fb85 	bl	8000dc4 <__aeabi_i2f>
 80026ba:	4603      	mov	r3, r0
 80026bc:	4917      	ldr	r1, [pc, #92]	@ (800271c <calc_res_heat+0x17c>)
 80026be:	4618      	mov	r0, r3
 80026c0:	f7fe fbd4 	bl	8000e6c <__aeabi_fmul>
 80026c4:	4603      	mov	r3, r0
 80026c6:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 80026ca:	4618      	mov	r0, r3
 80026cc:	f7fe fac6 	bl	8000c5c <__addsf3>
 80026d0:	4603      	mov	r3, r0
 80026d2:	4619      	mov	r1, r3
 80026d4:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 80026d8:	f7fe fc7c 	bl	8000fd4 <__aeabi_fdiv>
 80026dc:	4603      	mov	r3, r0
                  ((var5 * (4 / (4 + (float)dev->calib.res_heat_range)) *
 80026de:	4619      	mov	r1, r3
 80026e0:	4620      	mov	r0, r4
 80026e2:	f7fe fbc3 	bl	8000e6c <__aeabi_fmul>
 80026e6:	4603      	mov	r3, r0
                    (1 / (1 + ((float)dev->calib.res_heat_val * 0.002f)))) -
 80026e8:	490d      	ldr	r1, [pc, #52]	@ (8002720 <calc_res_heat+0x180>)
 80026ea:	4618      	mov	r0, r3
 80026ec:	f7fe fab4 	bl	8000c58 <__aeabi_fsub>
 80026f0:	4603      	mov	r3, r0
        (uint8_t)(3.4f *
 80026f2:	490c      	ldr	r1, [pc, #48]	@ (8002724 <calc_res_heat+0x184>)
 80026f4:	4618      	mov	r0, r3
 80026f6:	f7fe fbb9 	bl	8000e6c <__aeabi_fmul>
 80026fa:	4603      	mov	r3, r0
    res_heat =
 80026fc:	4618      	mov	r0, r3
 80026fe:	f7fe fd05 	bl	800110c <__aeabi_f2uiz>
 8002702:	4603      	mov	r3, r0
 8002704:	72fb      	strb	r3, [r7, #11]
                   25));

    return res_heat;
 8002706:	7afb      	ldrb	r3, [r7, #11]
}
 8002708:	4618      	mov	r0, r3
 800270a:	3724      	adds	r7, #36	@ 0x24
 800270c:	46bd      	mov	sp, r7
 800270e:	bd90      	pop	{r4, r7, pc}
 8002710:	42440000 	.word	0x42440000
 8002714:	3a03126f 	.word	0x3a03126f
 8002718:	3b1a0275 	.word	0x3b1a0275
 800271c:	3b03126f 	.word	0x3b03126f
 8002720:	41c80000 	.word	0x41c80000
 8002724:	4059999a 	.word	0x4059999a

08002728 <calc_gas_wait>:

#endif

/* This internal API is used to calculate the gas wait */
static uint8_t calc_gas_wait(uint16_t dur)
{
 8002728:	b480      	push	{r7}
 800272a:	b085      	sub	sp, #20
 800272c:	af00      	add	r7, sp, #0
 800272e:	4603      	mov	r3, r0
 8002730:	80fb      	strh	r3, [r7, #6]
    uint8_t factor = 0;
 8002732:	2300      	movs	r3, #0
 8002734:	73fb      	strb	r3, [r7, #15]
    uint8_t durval;

    if (dur >= 0xfc0)
 8002736:	88fb      	ldrh	r3, [r7, #6]
 8002738:	f5b3 6f7c 	cmp.w	r3, #4032	@ 0xfc0
 800273c:	d308      	bcc.n	8002750 <calc_gas_wait+0x28>
    {
        durval = 0xff; /* Max duration*/
 800273e:	23ff      	movs	r3, #255	@ 0xff
 8002740:	73bb      	strb	r3, [r7, #14]
 8002742:	e00f      	b.n	8002764 <calc_gas_wait+0x3c>
    }
    else
    {
        while (dur > 0x3F)
        {
            dur = dur / 4;
 8002744:	88fb      	ldrh	r3, [r7, #6]
 8002746:	089b      	lsrs	r3, r3, #2
 8002748:	80fb      	strh	r3, [r7, #6]
            factor += 1;
 800274a:	7bfb      	ldrb	r3, [r7, #15]
 800274c:	3301      	adds	r3, #1
 800274e:	73fb      	strb	r3, [r7, #15]
        while (dur > 0x3F)
 8002750:	88fb      	ldrh	r3, [r7, #6]
 8002752:	2b3f      	cmp	r3, #63	@ 0x3f
 8002754:	d8f6      	bhi.n	8002744 <calc_gas_wait+0x1c>
        }

        durval = (uint8_t)(dur + (factor * 64));
 8002756:	88fb      	ldrh	r3, [r7, #6]
 8002758:	b2da      	uxtb	r2, r3
 800275a:	7bfb      	ldrb	r3, [r7, #15]
 800275c:	019b      	lsls	r3, r3, #6
 800275e:	b2db      	uxtb	r3, r3
 8002760:	4413      	add	r3, r2
 8002762:	73bb      	strb	r3, [r7, #14]
    }

    return durval;
 8002764:	7bbb      	ldrb	r3, [r7, #14]
}
 8002766:	4618      	mov	r0, r3
 8002768:	3714      	adds	r7, #20
 800276a:	46bd      	mov	sp, r7
 800276c:	bc80      	pop	{r7}
 800276e:	4770      	bx	lr

08002770 <read_field_data>:

/* This internal API is used to read a single data of the sensor */
static int8_t read_field_data(uint8_t index, struct bme69x_data *data, struct bme69x_dev *dev)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	b08e      	sub	sp, #56	@ 0x38
 8002774:	af00      	add	r7, sp, #0
 8002776:	4603      	mov	r3, r0
 8002778:	60b9      	str	r1, [r7, #8]
 800277a:	607a      	str	r2, [r7, #4]
 800277c:	73fb      	strb	r3, [r7, #15]
    int8_t rslt = BME69X_OK;
 800277e:	2300      	movs	r3, #0
 8002780:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    uint8_t buff[BME69X_LEN_FIELD] = { 0 };
 8002784:	f107 0318 	add.w	r3, r7, #24
 8002788:	2200      	movs	r2, #0
 800278a:	601a      	str	r2, [r3, #0]
 800278c:	605a      	str	r2, [r3, #4]
 800278e:	609a      	str	r2, [r3, #8]
 8002790:	60da      	str	r2, [r3, #12]
 8002792:	741a      	strb	r2, [r3, #16]
    uint8_t gas_range;
    uint32_t adc_temp;
    uint32_t adc_pres;
    volatile uint16_t adc_hum;
    uint16_t adc_gas_res;
    uint8_t tries = 5;
 8002794:	2305      	movs	r3, #5
 8002796:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

    while ((tries) && (rslt == BME69X_OK))
 800279a:	e0e1      	b.n	8002960 <read_field_data+0x1f0>
    {
        rslt = bme69x_get_regs(((uint8_t)(BME69X_REG_FIELD0 + (index * BME69X_LEN_FIELD_OFFSET))),
 800279c:	7bfb      	ldrb	r3, [r7, #15]
 800279e:	461a      	mov	r2, r3
 80027a0:	0112      	lsls	r2, r2, #4
 80027a2:	4413      	add	r3, r2
 80027a4:	b2db      	uxtb	r3, r3
 80027a6:	331d      	adds	r3, #29
 80027a8:	b2d8      	uxtb	r0, r3
 80027aa:	f107 0118 	add.w	r1, r7, #24
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	2211      	movs	r2, #17
 80027b2:	f7fe ff46 	bl	8001642 <bme69x_get_regs>
 80027b6:	4603      	mov	r3, r0
 80027b8:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
                               buff,
                               (uint16_t)BME69X_LEN_FIELD,
                               dev);
        if (!data)
 80027bc:	68bb      	ldr	r3, [r7, #8]
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d103      	bne.n	80027ca <read_field_data+0x5a>
        {
            rslt = BME69X_E_NULL_PTR;
 80027c2:	23ff      	movs	r3, #255	@ 0xff
 80027c4:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
            break;
 80027c8:	e0d3      	b.n	8002972 <read_field_data+0x202>
        }

        data->status = buff[0] & BME69X_NEW_DATA_MSK;
 80027ca:	7e3b      	ldrb	r3, [r7, #24]
 80027cc:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80027d0:	b2da      	uxtb	r2, r3
 80027d2:	68bb      	ldr	r3, [r7, #8]
 80027d4:	701a      	strb	r2, [r3, #0]
        data->gas_index = buff[0] & BME69X_GAS_INDEX_MSK;
 80027d6:	7e3b      	ldrb	r3, [r7, #24]
 80027d8:	f003 030f 	and.w	r3, r3, #15
 80027dc:	b2da      	uxtb	r2, r3
 80027de:	68bb      	ldr	r3, [r7, #8]
 80027e0:	705a      	strb	r2, [r3, #1]
        data->meas_index = buff[1];
 80027e2:	7e7a      	ldrb	r2, [r7, #25]
 80027e4:	68bb      	ldr	r3, [r7, #8]
 80027e6:	709a      	strb	r2, [r3, #2]

        /* read the raw data from the sensor */
        adc_pres = (uint32_t)(((uint32_t)buff[2] << 16) | ((uint32_t)buff[3] << 8) | ((uint32_t)buff[4]));
 80027e8:	7ebb      	ldrb	r3, [r7, #26]
 80027ea:	041a      	lsls	r2, r3, #16
 80027ec:	7efb      	ldrb	r3, [r7, #27]
 80027ee:	021b      	lsls	r3, r3, #8
 80027f0:	4313      	orrs	r3, r2
 80027f2:	7f3a      	ldrb	r2, [r7, #28]
 80027f4:	4313      	orrs	r3, r2
 80027f6:	633b      	str	r3, [r7, #48]	@ 0x30
        adc_temp = (uint32_t)(((uint32_t)buff[5] << 16) | ((uint32_t)buff[6] << 8) | ((uint32_t)buff[7]));
 80027f8:	7f7b      	ldrb	r3, [r7, #29]
 80027fa:	041a      	lsls	r2, r3, #16
 80027fc:	7fbb      	ldrb	r3, [r7, #30]
 80027fe:	021b      	lsls	r3, r3, #8
 8002800:	4313      	orrs	r3, r2
 8002802:	7ffa      	ldrb	r2, [r7, #31]
 8002804:	4313      	orrs	r3, r2
 8002806:	62fb      	str	r3, [r7, #44]	@ 0x2c
        adc_hum = (uint16_t)(((uint32_t)buff[8] << 8) | (uint32_t)buff[9]);
 8002808:	f897 3020 	ldrb.w	r3, [r7, #32]
 800280c:	021b      	lsls	r3, r3, #8
 800280e:	b29b      	uxth	r3, r3
 8002810:	f897 2021 	ldrb.w	r2, [r7, #33]	@ 0x21
 8002814:	4313      	orrs	r3, r2
 8002816:	b29b      	uxth	r3, r3
 8002818:	82fb      	strh	r3, [r7, #22]
        adc_gas_res = ((uint16_t)buff[15] << 2) | ((uint16_t)buff[16] >> 6);
 800281a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800281e:	b21b      	sxth	r3, r3
 8002820:	009b      	lsls	r3, r3, #2
 8002822:	b21a      	sxth	r2, r3
 8002824:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8002828:	099b      	lsrs	r3, r3, #6
 800282a:	b2db      	uxtb	r3, r3
 800282c:	b21b      	sxth	r3, r3
 800282e:	4313      	orrs	r3, r2
 8002830:	b21b      	sxth	r3, r3
 8002832:	857b      	strh	r3, [r7, #42]	@ 0x2a

        gas_range = buff[16] & BME69X_GAS_RANGE_MSK;
 8002834:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8002838:	f003 030f 	and.w	r3, r3, #15
 800283c:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29

        data->status |= buff[16] & BME69X_GASM_VALID_MSK;
 8002840:	68bb      	ldr	r3, [r7, #8]
 8002842:	781b      	ldrb	r3, [r3, #0]
 8002844:	b25a      	sxtb	r2, r3
 8002846:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800284a:	b25b      	sxtb	r3, r3
 800284c:	f003 0320 	and.w	r3, r3, #32
 8002850:	b25b      	sxtb	r3, r3
 8002852:	4313      	orrs	r3, r2
 8002854:	b25b      	sxtb	r3, r3
 8002856:	b2da      	uxtb	r2, r3
 8002858:	68bb      	ldr	r3, [r7, #8]
 800285a:	701a      	strb	r2, [r3, #0]
        data->status |= buff[16] & BME69X_HEAT_STAB_MSK;
 800285c:	68bb      	ldr	r3, [r7, #8]
 800285e:	781b      	ldrb	r3, [r3, #0]
 8002860:	b25a      	sxtb	r2, r3
 8002862:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8002866:	b25b      	sxtb	r3, r3
 8002868:	f003 0310 	and.w	r3, r3, #16
 800286c:	b25b      	sxtb	r3, r3
 800286e:	4313      	orrs	r3, r2
 8002870:	b25b      	sxtb	r3, r3
 8002872:	b2da      	uxtb	r2, r3
 8002874:	68bb      	ldr	r3, [r7, #8]
 8002876:	701a      	strb	r2, [r3, #0]

        if ((data->status & BME69X_NEW_DATA_MSK) && (rslt == BME69X_OK))
 8002878:	68bb      	ldr	r3, [r7, #8]
 800287a:	781b      	ldrb	r3, [r3, #0]
 800287c:	b25b      	sxtb	r3, r3
 800287e:	2b00      	cmp	r3, #0
 8002880:	da5d      	bge.n	800293e <read_field_data+0x1ce>
 8002882:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 8002886:	2b00      	cmp	r3, #0
 8002888:	d159      	bne.n	800293e <read_field_data+0x1ce>
        {
            rslt = bme69x_get_regs(BME69X_REG_RES_HEAT0 + data->gas_index, &data->res_heat, 1, dev);
 800288a:	68bb      	ldr	r3, [r7, #8]
 800288c:	785b      	ldrb	r3, [r3, #1]
 800288e:	335a      	adds	r3, #90	@ 0x5a
 8002890:	b2d8      	uxtb	r0, r3
 8002892:	68bb      	ldr	r3, [r7, #8]
 8002894:	1cd9      	adds	r1, r3, #3
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	2201      	movs	r2, #1
 800289a:	f7fe fed2 	bl	8001642 <bme69x_get_regs>
 800289e:	4603      	mov	r3, r0
 80028a0:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
            if (rslt == BME69X_OK)
 80028a4:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d10c      	bne.n	80028c6 <read_field_data+0x156>
            {
                rslt = bme69x_get_regs(BME69X_REG_IDAC_HEAT0 + data->gas_index, &data->idac, 1, dev);
 80028ac:	68bb      	ldr	r3, [r7, #8]
 80028ae:	785b      	ldrb	r3, [r3, #1]
 80028b0:	3350      	adds	r3, #80	@ 0x50
 80028b2:	b2d8      	uxtb	r0, r3
 80028b4:	68bb      	ldr	r3, [r7, #8]
 80028b6:	1d19      	adds	r1, r3, #4
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	2201      	movs	r2, #1
 80028bc:	f7fe fec1 	bl	8001642 <bme69x_get_regs>
 80028c0:	4603      	mov	r3, r0
 80028c2:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
            }

            if (rslt == BME69X_OK)
 80028c6:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d10c      	bne.n	80028e8 <read_field_data+0x178>
            {
                rslt = bme69x_get_regs(BME69X_REG_GAS_WAIT0 + data->gas_index, &data->gas_wait, 1, dev);
 80028ce:	68bb      	ldr	r3, [r7, #8]
 80028d0:	785b      	ldrb	r3, [r3, #1]
 80028d2:	3364      	adds	r3, #100	@ 0x64
 80028d4:	b2d8      	uxtb	r0, r3
 80028d6:	68bb      	ldr	r3, [r7, #8]
 80028d8:	1d59      	adds	r1, r3, #5
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	2201      	movs	r2, #1
 80028de:	f7fe feb0 	bl	8001642 <bme69x_get_regs>
 80028e2:	4603      	mov	r3, r0
 80028e4:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
            }

            if (rslt == BME69X_OK)
 80028e8:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d126      	bne.n	800293e <read_field_data+0x1ce>
            {
#ifndef BME69X_USE_FPU
                data->temperature = calc_temperature(adc_temp, dev, &data->t_lin);
                data->pressure = calc_pressure(adc_pres, data->t_lin, dev);
#else
                data->temperature = calc_temperature(adc_temp, dev);
 80028f0:	6879      	ldr	r1, [r7, #4]
 80028f2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80028f4:	f7ff faae 	bl	8001e54 <calc_temperature>
 80028f8:	4602      	mov	r2, r0
 80028fa:	68bb      	ldr	r3, [r7, #8]
 80028fc:	609a      	str	r2, [r3, #8]
                data->pressure = calc_pressure(adc_pres, data->temperature, dev);
 80028fe:	68bb      	ldr	r3, [r7, #8]
 8002900:	689b      	ldr	r3, [r3, #8]
 8002902:	687a      	ldr	r2, [r7, #4]
 8002904:	4619      	mov	r1, r3
 8002906:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002908:	f7ff fb0a 	bl	8001f20 <calc_pressure>
 800290c:	4602      	mov	r2, r0
 800290e:	68bb      	ldr	r3, [r7, #8]
 8002910:	60da      	str	r2, [r3, #12]
#endif
                data->humidity = calc_humidity(adc_hum, data->temperature, dev);
 8002912:	8afb      	ldrh	r3, [r7, #22]
 8002914:	b298      	uxth	r0, r3
 8002916:	68bb      	ldr	r3, [r7, #8]
 8002918:	689b      	ldr	r3, [r3, #8]
 800291a:	687a      	ldr	r2, [r7, #4]
 800291c:	4619      	mov	r1, r3
 800291e:	f7ff fd01 	bl	8002324 <calc_humidity>
 8002922:	4602      	mov	r2, r0
 8002924:	68bb      	ldr	r3, [r7, #8]
 8002926:	611a      	str	r2, [r3, #16]
                data->gas_resistance = calc_gas_resistance(adc_gas_res, gas_range);
 8002928:	f897 2029 	ldrb.w	r2, [r7, #41]	@ 0x29
 800292c:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800292e:	4611      	mov	r1, r2
 8002930:	4618      	mov	r0, r3
 8002932:	f7ff fdff 	bl	8002534 <calc_gas_resistance>
 8002936:	4602      	mov	r2, r0
 8002938:	68bb      	ldr	r3, [r7, #8]
 800293a:	615a      	str	r2, [r3, #20]

                break;
 800293c:	e019      	b.n	8002972 <read_field_data+0x202>
            }
        }

        if (rslt == BME69X_OK)
 800293e:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 8002942:	2b00      	cmp	r3, #0
 8002944:	d107      	bne.n	8002956 <read_field_data+0x1e6>
        {
            dev->delay_us(BME69X_PERIOD_POLL, dev->intf_ptr);
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800294a:	687a      	ldr	r2, [r7, #4]
 800294c:	6852      	ldr	r2, [r2, #4]
 800294e:	4611      	mov	r1, r2
 8002950:	f242 7010 	movw	r0, #10000	@ 0x2710
 8002954:	4798      	blx	r3
        }

        tries--;
 8002956:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800295a:	3b01      	subs	r3, #1
 800295c:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
    while ((tries) && (rslt == BME69X_OK))
 8002960:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8002964:	2b00      	cmp	r3, #0
 8002966:	d004      	beq.n	8002972 <read_field_data+0x202>
 8002968:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 800296c:	2b00      	cmp	r3, #0
 800296e:	f43f af15 	beq.w	800279c <read_field_data+0x2c>
    }

    return rslt;
 8002972:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
}
 8002976:	4618      	mov	r0, r3
 8002978:	3738      	adds	r7, #56	@ 0x38
 800297a:	46bd      	mov	sp, r7
 800297c:	bd80      	pop	{r7, pc}

0800297e <read_all_field_data>:

/* This internal API is used to read all data fields of the sensor */
static int8_t read_all_field_data(struct bme69x_data * const data[], struct bme69x_dev *dev)
{
 800297e:	b590      	push	{r4, r7, lr}
 8002980:	b09d      	sub	sp, #116	@ 0x74
 8002982:	af00      	add	r7, sp, #0
 8002984:	6078      	str	r0, [r7, #4]
 8002986:	6039      	str	r1, [r7, #0]
    int8_t rslt = BME69X_OK;
 8002988:	2300      	movs	r3, #0
 800298a:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
    uint8_t buff[BME69X_LEN_FIELD * 3] = { 0 };
 800298e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002992:	2233      	movs	r2, #51	@ 0x33
 8002994:	2100      	movs	r1, #0
 8002996:	4618      	mov	r0, r3
 8002998:	f00b fedc 	bl	800e754 <memset>
    uint32_t adc_temp;
    uint32_t adc_pres;
    uint16_t adc_hum;
    uint16_t adc_gas_res;
    uint8_t off;
    uint8_t set_val[30] = { 0 }; /* idac, res_heat, gas_wait */
 800299c:	f107 030c 	add.w	r3, r7, #12
 80029a0:	221e      	movs	r2, #30
 80029a2:	2100      	movs	r1, #0
 80029a4:	4618      	mov	r0, r3
 80029a6:	f00b fed5 	bl	800e754 <memset>
    uint8_t i;

    if (!data[0] && !data[1] && !data[2])
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d10c      	bne.n	80029cc <read_all_field_data+0x4e>
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	3304      	adds	r3, #4
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d107      	bne.n	80029cc <read_all_field_data+0x4e>
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	3308      	adds	r3, #8
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d102      	bne.n	80029cc <read_all_field_data+0x4e>
    {
        rslt = BME69X_E_NULL_PTR;
 80029c6:	23ff      	movs	r3, #255	@ 0xff
 80029c8:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
    }

    if (rslt == BME69X_OK)
 80029cc:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d109      	bne.n	80029e8 <read_all_field_data+0x6a>
    {
        rslt = bme69x_get_regs(BME69X_REG_FIELD0, buff, (uint32_t) BME69X_LEN_FIELD * 3, dev);
 80029d4:	f107 012c 	add.w	r1, r7, #44	@ 0x2c
 80029d8:	683b      	ldr	r3, [r7, #0]
 80029da:	2233      	movs	r2, #51	@ 0x33
 80029dc:	201d      	movs	r0, #29
 80029de:	f7fe fe30 	bl	8001642 <bme69x_get_regs>
 80029e2:	4603      	mov	r3, r0
 80029e4:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
    }

    if (rslt == BME69X_OK)
 80029e8:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d109      	bne.n	8002a04 <read_all_field_data+0x86>
    {
        rslt = bme69x_get_regs(BME69X_REG_IDAC_HEAT0, set_val, 30, dev);
 80029f0:	f107 010c 	add.w	r1, r7, #12
 80029f4:	683b      	ldr	r3, [r7, #0]
 80029f6:	221e      	movs	r2, #30
 80029f8:	2050      	movs	r0, #80	@ 0x50
 80029fa:	f7fe fe22 	bl	8001642 <bme69x_get_regs>
 80029fe:	4603      	mov	r3, r0
 8002a00:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
    }

    for (i = 0; ((i < 3) && (rslt == BME69X_OK)); i++)
 8002a04:	2300      	movs	r3, #0
 8002a06:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e
 8002a0a:	e15d      	b.n	8002cc8 <read_all_field_data+0x34a>
    {
        off = (uint8_t)(i * BME69X_LEN_FIELD);
 8002a0c:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8002a10:	461a      	mov	r2, r3
 8002a12:	0112      	lsls	r2, r2, #4
 8002a14:	4413      	add	r3, r2
 8002a16:	f887 306d 	strb.w	r3, [r7, #109]	@ 0x6d
        data[i]->status = buff[off] & BME69X_NEW_DATA_MSK;
 8002a1a:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8002a1e:	3370      	adds	r3, #112	@ 0x70
 8002a20:	443b      	add	r3, r7
 8002a22:	f813 2c44 	ldrb.w	r2, [r3, #-68]
 8002a26:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8002a2a:	009b      	lsls	r3, r3, #2
 8002a2c:	6879      	ldr	r1, [r7, #4]
 8002a2e:	440b      	add	r3, r1
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f022 027f 	bic.w	r2, r2, #127	@ 0x7f
 8002a36:	b2d2      	uxtb	r2, r2
 8002a38:	701a      	strb	r2, [r3, #0]
        data[i]->gas_index = buff[off] & BME69X_GAS_INDEX_MSK;
 8002a3a:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8002a3e:	3370      	adds	r3, #112	@ 0x70
 8002a40:	443b      	add	r3, r7
 8002a42:	f813 2c44 	ldrb.w	r2, [r3, #-68]
 8002a46:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8002a4a:	009b      	lsls	r3, r3, #2
 8002a4c:	6879      	ldr	r1, [r7, #4]
 8002a4e:	440b      	add	r3, r1
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f002 020f 	and.w	r2, r2, #15
 8002a56:	b2d2      	uxtb	r2, r2
 8002a58:	705a      	strb	r2, [r3, #1]
        data[i]->meas_index = buff[off + 1];
 8002a5a:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8002a5e:	1c5a      	adds	r2, r3, #1
 8002a60:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8002a64:	009b      	lsls	r3, r3, #2
 8002a66:	6879      	ldr	r1, [r7, #4]
 8002a68:	440b      	add	r3, r1
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	3270      	adds	r2, #112	@ 0x70
 8002a6e:	443a      	add	r2, r7
 8002a70:	f812 2c44 	ldrb.w	r2, [r2, #-68]
 8002a74:	709a      	strb	r2, [r3, #2]

        /* read the raw data from the sensor */
        adc_pres =
            (uint32_t)(((uint32_t) buff[off + 2] << 16) | ((uint32_t) buff[off + 3] << 8) | ((uint32_t) buff[off + 4]));
 8002a76:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8002a7a:	3302      	adds	r3, #2
 8002a7c:	3370      	adds	r3, #112	@ 0x70
 8002a7e:	443b      	add	r3, r7
 8002a80:	f813 3c44 	ldrb.w	r3, [r3, #-68]
 8002a84:	041a      	lsls	r2, r3, #16
 8002a86:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8002a8a:	3303      	adds	r3, #3
 8002a8c:	3370      	adds	r3, #112	@ 0x70
 8002a8e:	443b      	add	r3, r7
 8002a90:	f813 3c44 	ldrb.w	r3, [r3, #-68]
 8002a94:	021b      	lsls	r3, r3, #8
 8002a96:	4313      	orrs	r3, r2
 8002a98:	f897 206d 	ldrb.w	r2, [r7, #109]	@ 0x6d
 8002a9c:	3204      	adds	r2, #4
 8002a9e:	3270      	adds	r2, #112	@ 0x70
 8002aa0:	443a      	add	r2, r7
 8002aa2:	f812 2c44 	ldrb.w	r2, [r2, #-68]
        adc_pres =
 8002aa6:	4313      	orrs	r3, r2
 8002aa8:	66bb      	str	r3, [r7, #104]	@ 0x68
        adc_temp =
            (uint32_t)(((uint32_t) buff[off + 5] << 16) | ((uint32_t) buff[off + 6] << 8) | ((uint32_t) buff[off + 7]));
 8002aaa:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8002aae:	3305      	adds	r3, #5
 8002ab0:	3370      	adds	r3, #112	@ 0x70
 8002ab2:	443b      	add	r3, r7
 8002ab4:	f813 3c44 	ldrb.w	r3, [r3, #-68]
 8002ab8:	041a      	lsls	r2, r3, #16
 8002aba:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8002abe:	3306      	adds	r3, #6
 8002ac0:	3370      	adds	r3, #112	@ 0x70
 8002ac2:	443b      	add	r3, r7
 8002ac4:	f813 3c44 	ldrb.w	r3, [r3, #-68]
 8002ac8:	021b      	lsls	r3, r3, #8
 8002aca:	4313      	orrs	r3, r2
 8002acc:	f897 206d 	ldrb.w	r2, [r7, #109]	@ 0x6d
 8002ad0:	3207      	adds	r2, #7
 8002ad2:	3270      	adds	r2, #112	@ 0x70
 8002ad4:	443a      	add	r2, r7
 8002ad6:	f812 2c44 	ldrb.w	r2, [r2, #-68]
        adc_temp =
 8002ada:	4313      	orrs	r3, r2
 8002adc:	667b      	str	r3, [r7, #100]	@ 0x64
        adc_hum = (uint16_t) (((uint32_t) buff[off + 8] * 256) | (uint32_t) buff[off + 9]);
 8002ade:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8002ae2:	3308      	adds	r3, #8
 8002ae4:	3370      	adds	r3, #112	@ 0x70
 8002ae6:	443b      	add	r3, r7
 8002ae8:	f813 3c44 	ldrb.w	r3, [r3, #-68]
 8002aec:	021b      	lsls	r3, r3, #8
 8002aee:	b29b      	uxth	r3, r3
 8002af0:	f897 206d 	ldrb.w	r2, [r7, #109]	@ 0x6d
 8002af4:	3209      	adds	r2, #9
 8002af6:	3270      	adds	r2, #112	@ 0x70
 8002af8:	443a      	add	r2, r7
 8002afa:	f812 2c44 	ldrb.w	r2, [r2, #-68]
 8002afe:	4313      	orrs	r3, r2
 8002b00:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
        adc_gas_res = ((uint16_t)buff[off + 15] << 2) | ((uint16_t)buff[off + 16] >> 6);
 8002b04:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8002b08:	330f      	adds	r3, #15
 8002b0a:	3370      	adds	r3, #112	@ 0x70
 8002b0c:	443b      	add	r3, r7
 8002b0e:	f813 3c44 	ldrb.w	r3, [r3, #-68]
 8002b12:	b21b      	sxth	r3, r3
 8002b14:	009b      	lsls	r3, r3, #2
 8002b16:	b21a      	sxth	r2, r3
 8002b18:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8002b1c:	3310      	adds	r3, #16
 8002b1e:	3370      	adds	r3, #112	@ 0x70
 8002b20:	443b      	add	r3, r7
 8002b22:	f813 3c44 	ldrb.w	r3, [r3, #-68]
 8002b26:	099b      	lsrs	r3, r3, #6
 8002b28:	b2db      	uxtb	r3, r3
 8002b2a:	b21b      	sxth	r3, r3
 8002b2c:	4313      	orrs	r3, r2
 8002b2e:	b21b      	sxth	r3, r3
 8002b30:	f8a7 3060 	strh.w	r3, [r7, #96]	@ 0x60
        gas_range = buff[off + 16] & BME69X_GAS_RANGE_MSK;
 8002b34:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8002b38:	3310      	adds	r3, #16
 8002b3a:	3370      	adds	r3, #112	@ 0x70
 8002b3c:	443b      	add	r3, r7
 8002b3e:	f813 3c44 	ldrb.w	r3, [r3, #-68]
 8002b42:	f003 030f 	and.w	r3, r3, #15
 8002b46:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

        data[i]->status |= buff[off + 16] & BME69X_GASM_VALID_MSK;
 8002b4a:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8002b4e:	009b      	lsls	r3, r3, #2
 8002b50:	687a      	ldr	r2, [r7, #4]
 8002b52:	4413      	add	r3, r2
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	781b      	ldrb	r3, [r3, #0]
 8002b58:	b25a      	sxtb	r2, r3
 8002b5a:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8002b5e:	3310      	adds	r3, #16
 8002b60:	3370      	adds	r3, #112	@ 0x70
 8002b62:	443b      	add	r3, r7
 8002b64:	f813 3c44 	ldrb.w	r3, [r3, #-68]
 8002b68:	b25b      	sxtb	r3, r3
 8002b6a:	f003 0320 	and.w	r3, r3, #32
 8002b6e:	b25b      	sxtb	r3, r3
 8002b70:	4313      	orrs	r3, r2
 8002b72:	b259      	sxtb	r1, r3
 8002b74:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8002b78:	009b      	lsls	r3, r3, #2
 8002b7a:	687a      	ldr	r2, [r7, #4]
 8002b7c:	4413      	add	r3, r2
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	b2ca      	uxtb	r2, r1
 8002b82:	701a      	strb	r2, [r3, #0]
        data[i]->status |= buff[off + 16] & BME69X_HEAT_STAB_MSK;
 8002b84:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8002b88:	009b      	lsls	r3, r3, #2
 8002b8a:	687a      	ldr	r2, [r7, #4]
 8002b8c:	4413      	add	r3, r2
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	781b      	ldrb	r3, [r3, #0]
 8002b92:	b25a      	sxtb	r2, r3
 8002b94:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8002b98:	3310      	adds	r3, #16
 8002b9a:	3370      	adds	r3, #112	@ 0x70
 8002b9c:	443b      	add	r3, r7
 8002b9e:	f813 3c44 	ldrb.w	r3, [r3, #-68]
 8002ba2:	b25b      	sxtb	r3, r3
 8002ba4:	f003 0310 	and.w	r3, r3, #16
 8002ba8:	b25b      	sxtb	r3, r3
 8002baa:	4313      	orrs	r3, r2
 8002bac:	b259      	sxtb	r1, r3
 8002bae:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8002bb2:	009b      	lsls	r3, r3, #2
 8002bb4:	687a      	ldr	r2, [r7, #4]
 8002bb6:	4413      	add	r3, r2
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	b2ca      	uxtb	r2, r1
 8002bbc:	701a      	strb	r2, [r3, #0]

        data[i]->idac = set_val[data[i]->gas_index];
 8002bbe:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8002bc2:	009b      	lsls	r3, r3, #2
 8002bc4:	687a      	ldr	r2, [r7, #4]
 8002bc6:	4413      	add	r3, r2
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	785b      	ldrb	r3, [r3, #1]
 8002bcc:	4619      	mov	r1, r3
 8002bce:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8002bd2:	009b      	lsls	r3, r3, #2
 8002bd4:	687a      	ldr	r2, [r7, #4]
 8002bd6:	4413      	add	r3, r2
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f101 0270 	add.w	r2, r1, #112	@ 0x70
 8002bde:	443a      	add	r2, r7
 8002be0:	f812 2c64 	ldrb.w	r2, [r2, #-100]
 8002be4:	711a      	strb	r2, [r3, #4]
        data[i]->res_heat = set_val[10 + data[i]->gas_index];
 8002be6:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8002bea:	009b      	lsls	r3, r3, #2
 8002bec:	687a      	ldr	r2, [r7, #4]
 8002bee:	4413      	add	r3, r2
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	785b      	ldrb	r3, [r3, #1]
 8002bf4:	f103 020a 	add.w	r2, r3, #10
 8002bf8:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8002bfc:	009b      	lsls	r3, r3, #2
 8002bfe:	6879      	ldr	r1, [r7, #4]
 8002c00:	440b      	add	r3, r1
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	3270      	adds	r2, #112	@ 0x70
 8002c06:	443a      	add	r2, r7
 8002c08:	f812 2c64 	ldrb.w	r2, [r2, #-100]
 8002c0c:	70da      	strb	r2, [r3, #3]
        data[i]->gas_wait = set_val[20 + data[i]->gas_index];
 8002c0e:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8002c12:	009b      	lsls	r3, r3, #2
 8002c14:	687a      	ldr	r2, [r7, #4]
 8002c16:	4413      	add	r3, r2
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	785b      	ldrb	r3, [r3, #1]
 8002c1c:	f103 0214 	add.w	r2, r3, #20
 8002c20:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8002c24:	009b      	lsls	r3, r3, #2
 8002c26:	6879      	ldr	r1, [r7, #4]
 8002c28:	440b      	add	r3, r1
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	3270      	adds	r2, #112	@ 0x70
 8002c2e:	443a      	add	r2, r7
 8002c30:	f812 2c64 	ldrb.w	r2, [r2, #-100]
 8002c34:	715a      	strb	r2, [r3, #5]
         * t_lin is calculated during temperature calculation
         */
        data[i]->temperature = calc_temperature(adc_temp, dev, &data[i]->t_lin);
        data[i]->pressure = calc_pressure(adc_pres, data[i]->t_lin, dev);
#else
        data[i]->temperature = calc_temperature(adc_temp, dev);
 8002c36:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8002c3a:	009b      	lsls	r3, r3, #2
 8002c3c:	687a      	ldr	r2, [r7, #4]
 8002c3e:	4413      	add	r3, r2
 8002c40:	681c      	ldr	r4, [r3, #0]
 8002c42:	6839      	ldr	r1, [r7, #0]
 8002c44:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 8002c46:	f7ff f905 	bl	8001e54 <calc_temperature>
 8002c4a:	4603      	mov	r3, r0
 8002c4c:	60a3      	str	r3, [r4, #8]
        data[i]->pressure = calc_pressure(adc_pres, data[i]->temperature, dev);
 8002c4e:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8002c52:	009b      	lsls	r3, r3, #2
 8002c54:	687a      	ldr	r2, [r7, #4]
 8002c56:	4413      	add	r3, r2
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	6899      	ldr	r1, [r3, #8]
 8002c5c:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8002c60:	009b      	lsls	r3, r3, #2
 8002c62:	687a      	ldr	r2, [r7, #4]
 8002c64:	4413      	add	r3, r2
 8002c66:	681c      	ldr	r4, [r3, #0]
 8002c68:	683a      	ldr	r2, [r7, #0]
 8002c6a:	6eb8      	ldr	r0, [r7, #104]	@ 0x68
 8002c6c:	f7ff f958 	bl	8001f20 <calc_pressure>
 8002c70:	4603      	mov	r3, r0
 8002c72:	60e3      	str	r3, [r4, #12]
#endif
        data[i]->humidity = calc_humidity(adc_hum, data[i]->temperature, dev);
 8002c74:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8002c78:	009b      	lsls	r3, r3, #2
 8002c7a:	687a      	ldr	r2, [r7, #4]
 8002c7c:	4413      	add	r3, r2
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	6899      	ldr	r1, [r3, #8]
 8002c82:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8002c86:	009b      	lsls	r3, r3, #2
 8002c88:	687a      	ldr	r2, [r7, #4]
 8002c8a:	4413      	add	r3, r2
 8002c8c:	681c      	ldr	r4, [r3, #0]
 8002c8e:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8002c92:	683a      	ldr	r2, [r7, #0]
 8002c94:	4618      	mov	r0, r3
 8002c96:	f7ff fb45 	bl	8002324 <calc_humidity>
 8002c9a:	4603      	mov	r3, r0
 8002c9c:	6123      	str	r3, [r4, #16]
        data[i]->gas_resistance = calc_gas_resistance(adc_gas_res, gas_range);
 8002c9e:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8002ca2:	009b      	lsls	r3, r3, #2
 8002ca4:	687a      	ldr	r2, [r7, #4]
 8002ca6:	4413      	add	r3, r2
 8002ca8:	681c      	ldr	r4, [r3, #0]
 8002caa:	f897 205f 	ldrb.w	r2, [r7, #95]	@ 0x5f
 8002cae:	f8b7 3060 	ldrh.w	r3, [r7, #96]	@ 0x60
 8002cb2:	4611      	mov	r1, r2
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	f7ff fc3d 	bl	8002534 <calc_gas_resistance>
 8002cba:	4603      	mov	r3, r0
 8002cbc:	6163      	str	r3, [r4, #20]
    for (i = 0; ((i < 3) && (rslt == BME69X_OK)); i++)
 8002cbe:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8002cc2:	3301      	adds	r3, #1
 8002cc4:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e
 8002cc8:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8002ccc:	2b02      	cmp	r3, #2
 8002cce:	d804      	bhi.n	8002cda <read_all_field_data+0x35c>
 8002cd0:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	f43f ae99 	beq.w	8002a0c <read_all_field_data+0x8e>
    }

    return rslt;
 8002cda:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
}
 8002cde:	4618      	mov	r0, r3
 8002ce0:	3774      	adds	r7, #116	@ 0x74
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	bd90      	pop	{r4, r7, pc}

08002ce6 <set_mem_page>:

/* This internal API is used to switch between SPI memory pages */
static int8_t set_mem_page(uint8_t reg_addr, struct bme69x_dev *dev)
{
 8002ce6:	b590      	push	{r4, r7, lr}
 8002ce8:	b085      	sub	sp, #20
 8002cea:	af00      	add	r7, sp, #0
 8002cec:	4603      	mov	r3, r0
 8002cee:	6039      	str	r1, [r7, #0]
 8002cf0:	71fb      	strb	r3, [r7, #7]
    int8_t rslt;
    uint8_t reg;
    uint8_t mem_page;

    /* Check for null pointers in the device structure*/
    rslt = null_ptr_check(dev);
 8002cf2:	6838      	ldr	r0, [r7, #0]
 8002cf4:	f000 f8b8 	bl	8002e68 <null_ptr_check>
 8002cf8:	4603      	mov	r3, r0
 8002cfa:	73fb      	strb	r3, [r7, #15]
    if (rslt == BME69X_OK)
 8002cfc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d14f      	bne.n	8002da4 <set_mem_page+0xbe>
    {
        if (reg_addr > 0x7f)
 8002d04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	da02      	bge.n	8002d12 <set_mem_page+0x2c>
        {
            mem_page = BME69X_MEM_PAGE1;
 8002d0c:	2300      	movs	r3, #0
 8002d0e:	73bb      	strb	r3, [r7, #14]
 8002d10:	e001      	b.n	8002d16 <set_mem_page+0x30>
        }
        else
        {
            mem_page = BME69X_MEM_PAGE0;
 8002d12:	2310      	movs	r3, #16
 8002d14:	73bb      	strb	r3, [r7, #14]
        }

        if (mem_page != dev->mem_page)
 8002d16:	683b      	ldr	r3, [r7, #0]
 8002d18:	7b5b      	ldrb	r3, [r3, #13]
 8002d1a:	7bba      	ldrb	r2, [r7, #14]
 8002d1c:	429a      	cmp	r2, r3
 8002d1e:	d041      	beq.n	8002da4 <set_mem_page+0xbe>
        {
            dev->mem_page = mem_page;
 8002d20:	683b      	ldr	r3, [r7, #0]
 8002d22:	7bba      	ldrb	r2, [r7, #14]
 8002d24:	735a      	strb	r2, [r3, #13]
            dev->intf_rslt = dev->read(BME69X_REG_MEM_PAGE | BME69X_SPI_RD_MSK, &reg, 1, dev->intf_ptr);
 8002d26:	683b      	ldr	r3, [r7, #0]
 8002d28:	6bdc      	ldr	r4, [r3, #60]	@ 0x3c
 8002d2a:	683b      	ldr	r3, [r7, #0]
 8002d2c:	685b      	ldr	r3, [r3, #4]
 8002d2e:	f107 010d 	add.w	r1, r7, #13
 8002d32:	2201      	movs	r2, #1
 8002d34:	20f3      	movs	r0, #243	@ 0xf3
 8002d36:	47a0      	blx	r4
 8002d38:	4603      	mov	r3, r0
 8002d3a:	461a      	mov	r2, r3
 8002d3c:	683b      	ldr	r3, [r7, #0]
 8002d3e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
            if (dev->intf_rslt != 0)
 8002d42:	683b      	ldr	r3, [r7, #0]
 8002d44:	f993 3048 	ldrsb.w	r3, [r3, #72]	@ 0x48
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d001      	beq.n	8002d50 <set_mem_page+0x6a>
            {
                rslt = BME69X_E_COM_FAIL;
 8002d4c:	23fe      	movs	r3, #254	@ 0xfe
 8002d4e:	73fb      	strb	r3, [r7, #15]
            }

            if (rslt == BME69X_OK)
 8002d50:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d125      	bne.n	8002da4 <set_mem_page+0xbe>
            {
                reg = reg & (~BME69X_MEM_PAGE_MSK);
 8002d58:	7b7b      	ldrb	r3, [r7, #13]
 8002d5a:	f023 0310 	bic.w	r3, r3, #16
 8002d5e:	b2db      	uxtb	r3, r3
 8002d60:	737b      	strb	r3, [r7, #13]
                reg = reg | (dev->mem_page & BME69X_MEM_PAGE_MSK);
 8002d62:	683b      	ldr	r3, [r7, #0]
 8002d64:	7b5b      	ldrb	r3, [r3, #13]
 8002d66:	b25b      	sxtb	r3, r3
 8002d68:	f003 0310 	and.w	r3, r3, #16
 8002d6c:	b25a      	sxtb	r2, r3
 8002d6e:	7b7b      	ldrb	r3, [r7, #13]
 8002d70:	b25b      	sxtb	r3, r3
 8002d72:	4313      	orrs	r3, r2
 8002d74:	b25b      	sxtb	r3, r3
 8002d76:	b2db      	uxtb	r3, r3
 8002d78:	737b      	strb	r3, [r7, #13]
                dev->intf_rslt = dev->write(BME69X_REG_MEM_PAGE & BME69X_SPI_WR_MSK, &reg, 1, dev->intf_ptr);
 8002d7a:	683b      	ldr	r3, [r7, #0]
 8002d7c:	6c1c      	ldr	r4, [r3, #64]	@ 0x40
 8002d7e:	683b      	ldr	r3, [r7, #0]
 8002d80:	685b      	ldr	r3, [r3, #4]
 8002d82:	f107 010d 	add.w	r1, r7, #13
 8002d86:	2201      	movs	r2, #1
 8002d88:	2073      	movs	r0, #115	@ 0x73
 8002d8a:	47a0      	blx	r4
 8002d8c:	4603      	mov	r3, r0
 8002d8e:	461a      	mov	r2, r3
 8002d90:	683b      	ldr	r3, [r7, #0]
 8002d92:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
                if (dev->intf_rslt != 0)
 8002d96:	683b      	ldr	r3, [r7, #0]
 8002d98:	f993 3048 	ldrsb.w	r3, [r3, #72]	@ 0x48
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d001      	beq.n	8002da4 <set_mem_page+0xbe>
                {
                    rslt = BME69X_E_COM_FAIL;
 8002da0:	23fe      	movs	r3, #254	@ 0xfe
 8002da2:	73fb      	strb	r3, [r7, #15]
                }
            }
        }
    }

    return rslt;
 8002da4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002da8:	4618      	mov	r0, r3
 8002daa:	3714      	adds	r7, #20
 8002dac:	46bd      	mov	sp, r7
 8002dae:	bd90      	pop	{r4, r7, pc}

08002db0 <get_mem_page>:

/* This internal API is used to get the current SPI memory page */
static int8_t get_mem_page(struct bme69x_dev *dev)
{
 8002db0:	b590      	push	{r4, r7, lr}
 8002db2:	b085      	sub	sp, #20
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t reg;

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 8002db8:	6878      	ldr	r0, [r7, #4]
 8002dba:	f000 f855 	bl	8002e68 <null_ptr_check>
 8002dbe:	4603      	mov	r3, r0
 8002dc0:	73fb      	strb	r3, [r7, #15]
    if (rslt == BME69X_OK)
 8002dc2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d11b      	bne.n	8002e02 <get_mem_page+0x52>
    {
        dev->intf_rslt = dev->read(BME69X_REG_MEM_PAGE | BME69X_SPI_RD_MSK, &reg, 1, dev->intf_ptr);
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	6bdc      	ldr	r4, [r3, #60]	@ 0x3c
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	685b      	ldr	r3, [r3, #4]
 8002dd2:	f107 010e 	add.w	r1, r7, #14
 8002dd6:	2201      	movs	r2, #1
 8002dd8:	20f3      	movs	r0, #243	@ 0xf3
 8002dda:	47a0      	blx	r4
 8002ddc:	4603      	mov	r3, r0
 8002dde:	461a      	mov	r2, r3
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
        if (dev->intf_rslt != 0)
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	f993 3048 	ldrsb.w	r3, [r3, #72]	@ 0x48
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d002      	beq.n	8002df6 <get_mem_page+0x46>
        {
            rslt = BME69X_E_COM_FAIL;
 8002df0:	23fe      	movs	r3, #254	@ 0xfe
 8002df2:	73fb      	strb	r3, [r7, #15]
 8002df4:	e005      	b.n	8002e02 <get_mem_page+0x52>
        }
        else
        {
            dev->mem_page = reg & BME69X_MEM_PAGE_MSK;
 8002df6:	7bbb      	ldrb	r3, [r7, #14]
 8002df8:	f003 0310 	and.w	r3, r3, #16
 8002dfc:	b2da      	uxtb	r2, r3
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	735a      	strb	r2, [r3, #13]
        }
    }

    return rslt;
 8002e02:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002e06:	4618      	mov	r0, r3
 8002e08:	3714      	adds	r7, #20
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	bd90      	pop	{r4, r7, pc}

08002e0e <boundary_check>:

/* This internal API is used to limit the max value of a parameter */
static int8_t boundary_check(uint8_t *value, uint8_t max, struct bme69x_dev *dev)
{
 8002e0e:	b580      	push	{r7, lr}
 8002e10:	b086      	sub	sp, #24
 8002e12:	af00      	add	r7, sp, #0
 8002e14:	60f8      	str	r0, [r7, #12]
 8002e16:	460b      	mov	r3, r1
 8002e18:	607a      	str	r2, [r7, #4]
 8002e1a:	72fb      	strb	r3, [r7, #11]
    int8_t rslt;

    rslt = null_ptr_check(dev);
 8002e1c:	6878      	ldr	r0, [r7, #4]
 8002e1e:	f000 f823 	bl	8002e68 <null_ptr_check>
 8002e22:	4603      	mov	r3, r0
 8002e24:	75fb      	strb	r3, [r7, #23]
    if ((value != NULL) && (rslt == BME69X_OK))
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d015      	beq.n	8002e58 <boundary_check+0x4a>
 8002e2c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d111      	bne.n	8002e58 <boundary_check+0x4a>
    {
        /* Check if value is above maximum value */
        if (*value > max)
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	781b      	ldrb	r3, [r3, #0]
 8002e38:	7afa      	ldrb	r2, [r7, #11]
 8002e3a:	429a      	cmp	r2, r3
 8002e3c:	d20e      	bcs.n	8002e5c <boundary_check+0x4e>
        {
            /* Auto correct the invalid value to maximum value */
            *value = max;
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	7afa      	ldrb	r2, [r7, #11]
 8002e42:	701a      	strb	r2, [r3, #0]
            dev->info_msg |= BME69X_I_PARAM_CORR;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	f893 3049 	ldrb.w	r3, [r3, #73]	@ 0x49
 8002e4a:	f043 0301 	orr.w	r3, r3, #1
 8002e4e:	b2da      	uxtb	r2, r3
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49
        if (*value > max)
 8002e56:	e001      	b.n	8002e5c <boundary_check+0x4e>
        }
    }
    else
    {
        rslt = BME69X_E_NULL_PTR;
 8002e58:	23ff      	movs	r3, #255	@ 0xff
 8002e5a:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8002e5c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8002e60:	4618      	mov	r0, r3
 8002e62:	3718      	adds	r7, #24
 8002e64:	46bd      	mov	sp, r7
 8002e66:	bd80      	pop	{r7, pc}

08002e68 <null_ptr_check>:

/* This internal API is used to check the bme69x_dev for null pointers */
static int8_t null_ptr_check(const struct bme69x_dev *dev)
{
 8002e68:	b480      	push	{r7}
 8002e6a:	b085      	sub	sp, #20
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]
    int8_t rslt = BME69X_OK;
 8002e70:	2300      	movs	r3, #0
 8002e72:	73fb      	strb	r3, [r7, #15]

    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_us == NULL))
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d00b      	beq.n	8002e92 <null_ptr_check+0x2a>
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d007      	beq.n	8002e92 <null_ptr_check+0x2a>
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d003      	beq.n	8002e92 <null_ptr_check+0x2a>
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d101      	bne.n	8002e96 <null_ptr_check+0x2e>
    {
        /* Device structure pointer is not valid */
        rslt = BME69X_E_NULL_PTR;
 8002e92:	23ff      	movs	r3, #255	@ 0xff
 8002e94:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8002e96:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	3714      	adds	r7, #20
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	bc80      	pop	{r7}
 8002ea2:	4770      	bx	lr

08002ea4 <set_conf>:

/* This internal API is used to set heater configurations */
static int8_t set_conf(const struct bme69x_heatr_conf *conf, uint8_t op_mode, uint8_t *nb_conv, struct bme69x_dev *dev)
{
 8002ea4:	b590      	push	{r4, r7, lr}
 8002ea6:	b093      	sub	sp, #76	@ 0x4c
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	60f8      	str	r0, [r7, #12]
 8002eac:	607a      	str	r2, [r7, #4]
 8002eae:	603b      	str	r3, [r7, #0]
 8002eb0:	460b      	mov	r3, r1
 8002eb2:	72fb      	strb	r3, [r7, #11]
    int8_t rslt = BME69X_OK;
 8002eb4:	2300      	movs	r3, #0
 8002eb6:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    uint8_t i;
    uint8_t shared_dur;
    uint8_t write_len = 0;
 8002eba:	2300      	movs	r3, #0
 8002ebc:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
    uint8_t heater_dur_shared_addr = BME69X_REG_SHD_HEATR_DUR;
 8002ec0:	236e      	movs	r3, #110	@ 0x6e
 8002ec2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
    uint8_t rh_reg_addr[10] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
 8002ec6:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002eca:	2200      	movs	r2, #0
 8002ecc:	601a      	str	r2, [r3, #0]
 8002ece:	605a      	str	r2, [r3, #4]
 8002ed0:	811a      	strh	r2, [r3, #8]
    uint8_t rh_reg_data[10] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
 8002ed2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	601a      	str	r2, [r3, #0]
 8002eda:	605a      	str	r2, [r3, #4]
 8002edc:	811a      	strh	r2, [r3, #8]
    uint8_t gw_reg_addr[10] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
 8002ede:	f107 0320 	add.w	r3, r7, #32
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	601a      	str	r2, [r3, #0]
 8002ee6:	605a      	str	r2, [r3, #4]
 8002ee8:	811a      	strh	r2, [r3, #8]
    uint8_t gw_reg_data[10] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
 8002eea:	f107 0314 	add.w	r3, r7, #20
 8002eee:	2200      	movs	r2, #0
 8002ef0:	601a      	str	r2, [r3, #0]
 8002ef2:	605a      	str	r2, [r3, #4]
 8002ef4:	811a      	strh	r2, [r3, #8]

    switch (op_mode)
 8002ef6:	7afb      	ldrb	r3, [r7, #11]
 8002ef8:	2b03      	cmp	r3, #3
 8002efa:	d024      	beq.n	8002f46 <set_conf+0xa2>
 8002efc:	2b03      	cmp	r3, #3
 8002efe:	f300 80f9 	bgt.w	80030f4 <set_conf+0x250>
 8002f02:	2b01      	cmp	r3, #1
 8002f04:	d002      	beq.n	8002f0c <set_conf+0x68>
 8002f06:	2b02      	cmp	r3, #2
 8002f08:	d07c      	beq.n	8003004 <set_conf+0x160>
 8002f0a:	e0f3      	b.n	80030f4 <set_conf+0x250>
    {
        case BME69X_FORCED_MODE:
            rh_reg_addr[0] = BME69X_REG_RES_HEAT0;
 8002f0c:	235a      	movs	r3, #90	@ 0x5a
 8002f0e:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
            rh_reg_data[0] = calc_res_heat(conf->heatr_temp, dev);
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	885b      	ldrh	r3, [r3, #2]
 8002f16:	6839      	ldr	r1, [r7, #0]
 8002f18:	4618      	mov	r0, r3
 8002f1a:	f7ff fb41 	bl	80025a0 <calc_res_heat>
 8002f1e:	4603      	mov	r3, r0
 8002f20:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
            gw_reg_addr[0] = BME69X_REG_GAS_WAIT0;
 8002f24:	2364      	movs	r3, #100	@ 0x64
 8002f26:	f887 3020 	strb.w	r3, [r7, #32]
            gw_reg_data[0] = calc_gas_wait(conf->heatr_dur);
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	889b      	ldrh	r3, [r3, #4]
 8002f2e:	4618      	mov	r0, r3
 8002f30:	f7ff fbfa 	bl	8002728 <calc_gas_wait>
 8002f34:	4603      	mov	r3, r0
 8002f36:	753b      	strb	r3, [r7, #20]
            (*nb_conv) = 0;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	701a      	strb	r2, [r3, #0]
            write_len = 1;
 8002f3e:	2301      	movs	r3, #1
 8002f40:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
            break;
 8002f44:	e0db      	b.n	80030fe <set_conf+0x25a>
        case BME69X_SEQUENTIAL_MODE:
            if ((!conf->heatr_dur_prof) || (!conf->heatr_temp_prof))
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	68db      	ldr	r3, [r3, #12]
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d003      	beq.n	8002f56 <set_conf+0xb2>
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	689b      	ldr	r3, [r3, #8]
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d103      	bne.n	8002f5e <set_conf+0xba>
            {
                rslt = BME69X_E_NULL_PTR;
 8002f56:	23ff      	movs	r3, #255	@ 0xff
 8002f58:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
                break;
 8002f5c:	e0cf      	b.n	80030fe <set_conf+0x25a>
            }

            for (i = 0; i < conf->profile_len; i++)
 8002f5e:	2300      	movs	r3, #0
 8002f60:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
 8002f64:	e03f      	b.n	8002fe6 <set_conf+0x142>
            {
                rh_reg_addr[i] = BME69X_REG_RES_HEAT0 + i;
 8002f66:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8002f6a:	f897 2046 	ldrb.w	r2, [r7, #70]	@ 0x46
 8002f6e:	325a      	adds	r2, #90	@ 0x5a
 8002f70:	b2d2      	uxtb	r2, r2
 8002f72:	3348      	adds	r3, #72	@ 0x48
 8002f74:	443b      	add	r3, r7
 8002f76:	f803 2c10 	strb.w	r2, [r3, #-16]
                rh_reg_data[i] = calc_res_heat(conf->heatr_temp_prof[i], dev);
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	689a      	ldr	r2, [r3, #8]
 8002f7e:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8002f82:	005b      	lsls	r3, r3, #1
 8002f84:	4413      	add	r3, r2
 8002f86:	881b      	ldrh	r3, [r3, #0]
 8002f88:	f897 4046 	ldrb.w	r4, [r7, #70]	@ 0x46
 8002f8c:	6839      	ldr	r1, [r7, #0]
 8002f8e:	4618      	mov	r0, r3
 8002f90:	f7ff fb06 	bl	80025a0 <calc_res_heat>
 8002f94:	4603      	mov	r3, r0
 8002f96:	461a      	mov	r2, r3
 8002f98:	f104 0348 	add.w	r3, r4, #72	@ 0x48
 8002f9c:	443b      	add	r3, r7
 8002f9e:	f803 2c1c 	strb.w	r2, [r3, #-28]
                gw_reg_addr[i] = BME69X_REG_GAS_WAIT0 + i;
 8002fa2:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8002fa6:	f897 2046 	ldrb.w	r2, [r7, #70]	@ 0x46
 8002faa:	3264      	adds	r2, #100	@ 0x64
 8002fac:	b2d2      	uxtb	r2, r2
 8002fae:	3348      	adds	r3, #72	@ 0x48
 8002fb0:	443b      	add	r3, r7
 8002fb2:	f803 2c28 	strb.w	r2, [r3, #-40]
                gw_reg_data[i] = calc_gas_wait(conf->heatr_dur_prof[i]);
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	68da      	ldr	r2, [r3, #12]
 8002fba:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8002fbe:	005b      	lsls	r3, r3, #1
 8002fc0:	4413      	add	r3, r2
 8002fc2:	881b      	ldrh	r3, [r3, #0]
 8002fc4:	f897 4046 	ldrb.w	r4, [r7, #70]	@ 0x46
 8002fc8:	4618      	mov	r0, r3
 8002fca:	f7ff fbad 	bl	8002728 <calc_gas_wait>
 8002fce:	4603      	mov	r3, r0
 8002fd0:	461a      	mov	r2, r3
 8002fd2:	f104 0348 	add.w	r3, r4, #72	@ 0x48
 8002fd6:	443b      	add	r3, r7
 8002fd8:	f803 2c34 	strb.w	r2, [r3, #-52]
            for (i = 0; i < conf->profile_len; i++)
 8002fdc:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8002fe0:	3301      	adds	r3, #1
 8002fe2:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	7c1b      	ldrb	r3, [r3, #16]
 8002fea:	f897 2046 	ldrb.w	r2, [r7, #70]	@ 0x46
 8002fee:	429a      	cmp	r2, r3
 8002ff0:	d3b9      	bcc.n	8002f66 <set_conf+0xc2>
            }

            (*nb_conv) = conf->profile_len;
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	7c1a      	ldrb	r2, [r3, #16]
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	701a      	strb	r2, [r3, #0]
            write_len = conf->profile_len;
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	7c1b      	ldrb	r3, [r3, #16]
 8002ffe:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
            break;
 8003002:	e07c      	b.n	80030fe <set_conf+0x25a>
        case BME69X_PARALLEL_MODE:
            if ((!conf->heatr_dur_prof) || (!conf->heatr_temp_prof))
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	68db      	ldr	r3, [r3, #12]
 8003008:	2b00      	cmp	r3, #0
 800300a:	d003      	beq.n	8003014 <set_conf+0x170>
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	689b      	ldr	r3, [r3, #8]
 8003010:	2b00      	cmp	r3, #0
 8003012:	d103      	bne.n	800301c <set_conf+0x178>
            {
                rslt = BME69X_E_NULL_PTR;
 8003014:	23ff      	movs	r3, #255	@ 0xff
 8003016:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
                break;
 800301a:	e070      	b.n	80030fe <set_conf+0x25a>
            }

            if (conf->shared_heatr_dur == 0)
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	8a5b      	ldrh	r3, [r3, #18]
 8003020:	2b00      	cmp	r3, #0
 8003022:	d102      	bne.n	800302a <set_conf+0x186>
            {
                rslt = BME69X_W_DEFINE_SHD_HEATR_DUR;
 8003024:	2303      	movs	r3, #3
 8003026:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
            }

            for (i = 0; i < conf->profile_len; i++)
 800302a:	2300      	movs	r3, #0
 800302c:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
 8003030:	e03a      	b.n	80030a8 <set_conf+0x204>
            {
                rh_reg_addr[i] = BME69X_REG_RES_HEAT0 + i;
 8003032:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8003036:	f897 2046 	ldrb.w	r2, [r7, #70]	@ 0x46
 800303a:	325a      	adds	r2, #90	@ 0x5a
 800303c:	b2d2      	uxtb	r2, r2
 800303e:	3348      	adds	r3, #72	@ 0x48
 8003040:	443b      	add	r3, r7
 8003042:	f803 2c10 	strb.w	r2, [r3, #-16]
                rh_reg_data[i] = calc_res_heat(conf->heatr_temp_prof[i], dev);
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	689a      	ldr	r2, [r3, #8]
 800304a:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 800304e:	005b      	lsls	r3, r3, #1
 8003050:	4413      	add	r3, r2
 8003052:	881b      	ldrh	r3, [r3, #0]
 8003054:	f897 4046 	ldrb.w	r4, [r7, #70]	@ 0x46
 8003058:	6839      	ldr	r1, [r7, #0]
 800305a:	4618      	mov	r0, r3
 800305c:	f7ff faa0 	bl	80025a0 <calc_res_heat>
 8003060:	4603      	mov	r3, r0
 8003062:	461a      	mov	r2, r3
 8003064:	f104 0348 	add.w	r3, r4, #72	@ 0x48
 8003068:	443b      	add	r3, r7
 800306a:	f803 2c1c 	strb.w	r2, [r3, #-28]
                gw_reg_addr[i] = BME69X_REG_GAS_WAIT0 + i;
 800306e:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8003072:	f897 2046 	ldrb.w	r2, [r7, #70]	@ 0x46
 8003076:	3264      	adds	r2, #100	@ 0x64
 8003078:	b2d2      	uxtb	r2, r2
 800307a:	3348      	adds	r3, #72	@ 0x48
 800307c:	443b      	add	r3, r7
 800307e:	f803 2c28 	strb.w	r2, [r3, #-40]
                gw_reg_data[i] = (uint8_t) conf->heatr_dur_prof[i];
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	68da      	ldr	r2, [r3, #12]
 8003086:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 800308a:	005b      	lsls	r3, r3, #1
 800308c:	4413      	add	r3, r2
 800308e:	881a      	ldrh	r2, [r3, #0]
 8003090:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8003094:	b2d2      	uxtb	r2, r2
 8003096:	3348      	adds	r3, #72	@ 0x48
 8003098:	443b      	add	r3, r7
 800309a:	f803 2c34 	strb.w	r2, [r3, #-52]
            for (i = 0; i < conf->profile_len; i++)
 800309e:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 80030a2:	3301      	adds	r3, #1
 80030a4:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	7c1b      	ldrb	r3, [r3, #16]
 80030ac:	f897 2046 	ldrb.w	r2, [r7, #70]	@ 0x46
 80030b0:	429a      	cmp	r2, r3
 80030b2:	d3be      	bcc.n	8003032 <set_conf+0x18e>
            }

            (*nb_conv) = conf->profile_len;
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	7c1a      	ldrb	r2, [r3, #16]
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	701a      	strb	r2, [r3, #0]
            write_len = conf->profile_len;
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	7c1b      	ldrb	r3, [r3, #16]
 80030c0:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
            shared_dur = calc_heatr_dur_shared(conf->shared_heatr_dur);
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	8a5b      	ldrh	r3, [r3, #18]
 80030c8:	4618      	mov	r0, r3
 80030ca:	f000 f83f 	bl	800314c <calc_heatr_dur_shared>
 80030ce:	4603      	mov	r3, r0
 80030d0:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
            if (rslt == BME69X_OK)
 80030d4:	f997 3047 	ldrsb.w	r3, [r7, #71]	@ 0x47
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d10f      	bne.n	80030fc <set_conf+0x258>
            {
                rslt = bme69x_set_regs(&heater_dur_shared_addr, &shared_dur, 1, dev);
 80030dc:	f107 0144 	add.w	r1, r7, #68	@ 0x44
 80030e0:	f107 0043 	add.w	r0, r7, #67	@ 0x43
 80030e4:	683b      	ldr	r3, [r7, #0]
 80030e6:	2201      	movs	r2, #1
 80030e8:	f7fe fa1c 	bl	8001524 <bme69x_set_regs>
 80030ec:	4603      	mov	r3, r0
 80030ee:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
            }

            break;
 80030f2:	e003      	b.n	80030fc <set_conf+0x258>
        default:
            rslt = BME69X_W_DEFINE_OP_MODE;
 80030f4:	2301      	movs	r3, #1
 80030f6:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 80030fa:	e000      	b.n	80030fe <set_conf+0x25a>
            break;
 80030fc:	bf00      	nop
    }

    if (rslt == BME69X_OK)
 80030fe:	f997 3047 	ldrsb.w	r3, [r7, #71]	@ 0x47
 8003102:	2b00      	cmp	r3, #0
 8003104:	d10b      	bne.n	800311e <set_conf+0x27a>
    {
        rslt = bme69x_set_regs(rh_reg_addr, rh_reg_data, write_len, dev);
 8003106:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800310a:	f107 012c 	add.w	r1, r7, #44	@ 0x2c
 800310e:	f107 0038 	add.w	r0, r7, #56	@ 0x38
 8003112:	683b      	ldr	r3, [r7, #0]
 8003114:	f7fe fa06 	bl	8001524 <bme69x_set_regs>
 8003118:	4603      	mov	r3, r0
 800311a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }

    if (rslt == BME69X_OK)
 800311e:	f997 3047 	ldrsb.w	r3, [r7, #71]	@ 0x47
 8003122:	2b00      	cmp	r3, #0
 8003124:	d10b      	bne.n	800313e <set_conf+0x29a>
    {
        rslt = bme69x_set_regs(gw_reg_addr, gw_reg_data, write_len, dev);
 8003126:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800312a:	f107 0114 	add.w	r1, r7, #20
 800312e:	f107 0020 	add.w	r0, r7, #32
 8003132:	683b      	ldr	r3, [r7, #0]
 8003134:	f7fe f9f6 	bl	8001524 <bme69x_set_regs>
 8003138:	4603      	mov	r3, r0
 800313a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }

    return rslt;
 800313e:	f997 3047 	ldrsb.w	r3, [r7, #71]	@ 0x47
}
 8003142:	4618      	mov	r0, r3
 8003144:	374c      	adds	r7, #76	@ 0x4c
 8003146:	46bd      	mov	sp, r7
 8003148:	bd90      	pop	{r4, r7, pc}
	...

0800314c <calc_heatr_dur_shared>:

/* This internal API is used to calculate the register value for
 * shared heater duration */
static uint8_t calc_heatr_dur_shared(uint16_t dur)
{
 800314c:	b480      	push	{r7}
 800314e:	b085      	sub	sp, #20
 8003150:	af00      	add	r7, sp, #0
 8003152:	4603      	mov	r3, r0
 8003154:	80fb      	strh	r3, [r7, #6]
    uint8_t factor = 0;
 8003156:	2300      	movs	r3, #0
 8003158:	73fb      	strb	r3, [r7, #15]
    uint8_t heatdurval;

    if (dur >= 0x783)
 800315a:	88fb      	ldrh	r3, [r7, #6]
 800315c:	f240 7282 	movw	r2, #1922	@ 0x782
 8003160:	4293      	cmp	r3, r2
 8003162:	d902      	bls.n	800316a <calc_heatr_dur_shared+0x1e>
    {
        heatdurval = 0xff; /* Max duration */
 8003164:	23ff      	movs	r3, #255	@ 0xff
 8003166:	73bb      	strb	r3, [r7, #14]
 8003168:	e01d      	b.n	80031a6 <calc_heatr_dur_shared+0x5a>
    }
    else
    {
        /* Step size of 0.477ms */
        dur = (uint16_t)(((uint32_t)dur * 1000) / 477);
 800316a:	88fb      	ldrh	r3, [r7, #6]
 800316c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8003170:	fb03 f202 	mul.w	r2, r3, r2
 8003174:	4b0f      	ldr	r3, [pc, #60]	@ (80031b4 <calc_heatr_dur_shared+0x68>)
 8003176:	fba3 1302 	umull	r1, r3, r3, r2
 800317a:	1ad2      	subs	r2, r2, r3
 800317c:	0852      	lsrs	r2, r2, #1
 800317e:	4413      	add	r3, r2
 8003180:	0a1b      	lsrs	r3, r3, #8
 8003182:	80fb      	strh	r3, [r7, #6]
        while (dur > 0x3F)
 8003184:	e005      	b.n	8003192 <calc_heatr_dur_shared+0x46>
        {
            dur = dur >> 2;
 8003186:	88fb      	ldrh	r3, [r7, #6]
 8003188:	089b      	lsrs	r3, r3, #2
 800318a:	80fb      	strh	r3, [r7, #6]
            factor += 1;
 800318c:	7bfb      	ldrb	r3, [r7, #15]
 800318e:	3301      	adds	r3, #1
 8003190:	73fb      	strb	r3, [r7, #15]
        while (dur > 0x3F)
 8003192:	88fb      	ldrh	r3, [r7, #6]
 8003194:	2b3f      	cmp	r3, #63	@ 0x3f
 8003196:	d8f6      	bhi.n	8003186 <calc_heatr_dur_shared+0x3a>
        }

        heatdurval = (uint8_t)(dur + (factor * 64));
 8003198:	88fb      	ldrh	r3, [r7, #6]
 800319a:	b2da      	uxtb	r2, r3
 800319c:	7bfb      	ldrb	r3, [r7, #15]
 800319e:	019b      	lsls	r3, r3, #6
 80031a0:	b2db      	uxtb	r3, r3
 80031a2:	4413      	add	r3, r2
 80031a4:	73bb      	strb	r3, [r7, #14]
    }

    return heatdurval;
 80031a6:	7bbb      	ldrb	r3, [r7, #14]
}
 80031a8:	4618      	mov	r0, r3
 80031aa:	3714      	adds	r7, #20
 80031ac:	46bd      	mov	sp, r7
 80031ae:	bc80      	pop	{r7}
 80031b0:	4770      	bx	lr
 80031b2:	bf00      	nop
 80031b4:	12c8b89f 	.word	0x12c8b89f

080031b8 <sort_sensor_data>:

/* This internal API is used sort the sensor data */
static void sort_sensor_data(uint8_t low_index, uint8_t high_index, struct bme69x_data *field[])
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	b084      	sub	sp, #16
 80031bc:	af00      	add	r7, sp, #0
 80031be:	4603      	mov	r3, r0
 80031c0:	603a      	str	r2, [r7, #0]
 80031c2:	71fb      	strb	r3, [r7, #7]
 80031c4:	460b      	mov	r3, r1
 80031c6:	71bb      	strb	r3, [r7, #6]
    int16_t meas_index1;
    int16_t meas_index2;

    meas_index1 = (int16_t)field[low_index]->meas_index;
 80031c8:	79fb      	ldrb	r3, [r7, #7]
 80031ca:	009b      	lsls	r3, r3, #2
 80031cc:	683a      	ldr	r2, [r7, #0]
 80031ce:	4413      	add	r3, r2
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	789b      	ldrb	r3, [r3, #2]
 80031d4:	81fb      	strh	r3, [r7, #14]
    meas_index2 = (int16_t)field[high_index]->meas_index;
 80031d6:	79bb      	ldrb	r3, [r7, #6]
 80031d8:	009b      	lsls	r3, r3, #2
 80031da:	683a      	ldr	r2, [r7, #0]
 80031dc:	4413      	add	r3, r2
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	789b      	ldrb	r3, [r3, #2]
 80031e2:	81bb      	strh	r3, [r7, #12]
    if ((field[low_index]->status & BME69X_NEW_DATA_MSK) && (field[high_index]->status & BME69X_NEW_DATA_MSK))
 80031e4:	79fb      	ldrb	r3, [r7, #7]
 80031e6:	009b      	lsls	r3, r3, #2
 80031e8:	683a      	ldr	r2, [r7, #0]
 80031ea:	4413      	add	r3, r2
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	781b      	ldrb	r3, [r3, #0]
 80031f0:	b25b      	sxtb	r3, r3
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	da21      	bge.n	800323a <sort_sensor_data+0x82>
 80031f6:	79bb      	ldrb	r3, [r7, #6]
 80031f8:	009b      	lsls	r3, r3, #2
 80031fa:	683a      	ldr	r2, [r7, #0]
 80031fc:	4413      	add	r3, r2
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	781b      	ldrb	r3, [r3, #0]
 8003202:	b25b      	sxtb	r3, r3
 8003204:	2b00      	cmp	r3, #0
 8003206:	da18      	bge.n	800323a <sort_sensor_data+0x82>
    {
        int16_t diff = meas_index2 - meas_index1;
 8003208:	89ba      	ldrh	r2, [r7, #12]
 800320a:	89fb      	ldrh	r3, [r7, #14]
 800320c:	1ad3      	subs	r3, r2, r3
 800320e:	b29b      	uxth	r3, r3
 8003210:	817b      	strh	r3, [r7, #10]
        if (((diff > -3) && (diff < 0)) || (diff > 2))
 8003212:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8003216:	f113 0f02 	cmn.w	r3, #2
 800321a:	db03      	blt.n	8003224 <sort_sensor_data+0x6c>
 800321c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8003220:	2b00      	cmp	r3, #0
 8003222:	db03      	blt.n	800322c <sort_sensor_data+0x74>
 8003224:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8003228:	2b02      	cmp	r3, #2
 800322a:	dd16      	ble.n	800325a <sort_sensor_data+0xa2>
        {
            swap_fields(low_index, high_index, field);
 800322c:	79b9      	ldrb	r1, [r7, #6]
 800322e:	79fb      	ldrb	r3, [r7, #7]
 8003230:	683a      	ldr	r2, [r7, #0]
 8003232:	4618      	mov	r0, r3
 8003234:	f000 f816 	bl	8003264 <swap_fields>
    {
 8003238:	e00f      	b.n	800325a <sort_sensor_data+0xa2>
        }
    }
    else if (field[high_index]->status & BME69X_NEW_DATA_MSK)
 800323a:	79bb      	ldrb	r3, [r7, #6]
 800323c:	009b      	lsls	r3, r3, #2
 800323e:	683a      	ldr	r2, [r7, #0]
 8003240:	4413      	add	r3, r2
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	781b      	ldrb	r3, [r3, #0]
 8003246:	b25b      	sxtb	r3, r3
 8003248:	2b00      	cmp	r3, #0
 800324a:	da07      	bge.n	800325c <sort_sensor_data+0xa4>
    {
        swap_fields(low_index, high_index, field);
 800324c:	79b9      	ldrb	r1, [r7, #6]
 800324e:	79fb      	ldrb	r3, [r7, #7]
 8003250:	683a      	ldr	r2, [r7, #0]
 8003252:	4618      	mov	r0, r3
 8003254:	f000 f806 	bl	8003264 <swap_fields>
     *         - diff > 2, case 4.
     *
     *     Here the limits of -3 and 2 derive from the fact that there are 3 fields.
     *     These values decrease or increase respectively if the number of fields increases.
     */
}
 8003258:	e000      	b.n	800325c <sort_sensor_data+0xa4>
    {
 800325a:	bf00      	nop
}
 800325c:	bf00      	nop
 800325e:	3710      	adds	r7, #16
 8003260:	46bd      	mov	sp, r7
 8003262:	bd80      	pop	{r7, pc}

08003264 <swap_fields>:

/* This internal API is used sort the sensor data */
static void swap_fields(uint8_t index1, uint8_t index2, struct bme69x_data *field[])
{
 8003264:	b480      	push	{r7}
 8003266:	b085      	sub	sp, #20
 8003268:	af00      	add	r7, sp, #0
 800326a:	4603      	mov	r3, r0
 800326c:	603a      	str	r2, [r7, #0]
 800326e:	71fb      	strb	r3, [r7, #7]
 8003270:	460b      	mov	r3, r1
 8003272:	71bb      	strb	r3, [r7, #6]
    struct bme69x_data *temp;

    temp = field[index1];
 8003274:	79fb      	ldrb	r3, [r7, #7]
 8003276:	009b      	lsls	r3, r3, #2
 8003278:	683a      	ldr	r2, [r7, #0]
 800327a:	4413      	add	r3, r2
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	60fb      	str	r3, [r7, #12]
    field[index1] = field[index2];
 8003280:	79bb      	ldrb	r3, [r7, #6]
 8003282:	009b      	lsls	r3, r3, #2
 8003284:	683a      	ldr	r2, [r7, #0]
 8003286:	441a      	add	r2, r3
 8003288:	79fb      	ldrb	r3, [r7, #7]
 800328a:	009b      	lsls	r3, r3, #2
 800328c:	6839      	ldr	r1, [r7, #0]
 800328e:	440b      	add	r3, r1
 8003290:	6812      	ldr	r2, [r2, #0]
 8003292:	601a      	str	r2, [r3, #0]
    field[index2] = temp;
 8003294:	79bb      	ldrb	r3, [r7, #6]
 8003296:	009b      	lsls	r3, r3, #2
 8003298:	683a      	ldr	r2, [r7, #0]
 800329a:	4413      	add	r3, r2
 800329c:	68fa      	ldr	r2, [r7, #12]
 800329e:	601a      	str	r2, [r3, #0]
}
 80032a0:	bf00      	nop
 80032a2:	3714      	adds	r7, #20
 80032a4:	46bd      	mov	sp, r7
 80032a6:	bc80      	pop	{r7}
 80032a8:	4770      	bx	lr

080032aa <get_calib_data>:
    return rslt;
}

/* This internal API is used to read the calibration coefficients */
static int8_t get_calib_data(struct bme69x_dev *dev)
{
 80032aa:	b580      	push	{r7, lr}
 80032ac:	b08e      	sub	sp, #56	@ 0x38
 80032ae:	af00      	add	r7, sp, #0
 80032b0:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t coeff_array[BME69X_LEN_COEFF_ALL];

    rslt = bme69x_get_regs(BME69X_REG_COEFF1, coeff_array, BME69X_LEN_COEFF1, dev);
 80032b2:	f107 010c 	add.w	r1, r7, #12
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	2217      	movs	r2, #23
 80032ba:	208a      	movs	r0, #138	@ 0x8a
 80032bc:	f7fe f9c1 	bl	8001642 <bme69x_get_regs>
 80032c0:	4603      	mov	r3, r0
 80032c2:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    if (rslt == BME69X_OK)
 80032c6:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d10b      	bne.n	80032e6 <get_calib_data+0x3c>
    {
        rslt = bme69x_get_regs(BME69X_REG_COEFF2, &coeff_array[BME69X_LEN_COEFF1], BME69X_LEN_COEFF2, dev);
 80032ce:	f107 030c 	add.w	r3, r7, #12
 80032d2:	f103 0117 	add.w	r1, r3, #23
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	220e      	movs	r2, #14
 80032da:	20e1      	movs	r0, #225	@ 0xe1
 80032dc:	f7fe f9b1 	bl	8001642 <bme69x_get_regs>
 80032e0:	4603      	mov	r3, r0
 80032e2:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    }

    if (rslt == BME69X_OK)
 80032e6:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d10b      	bne.n	8003306 <get_calib_data+0x5c>
    {
        rslt = bme69x_get_regs(BME69X_REG_COEFF3,
 80032ee:	f107 030c 	add.w	r3, r7, #12
 80032f2:	f103 0125 	add.w	r1, r3, #37	@ 0x25
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	2205      	movs	r2, #5
 80032fa:	2000      	movs	r0, #0
 80032fc:	f7fe f9a1 	bl	8001642 <bme69x_get_regs>
 8003300:	4603      	mov	r3, r0
 8003302:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
                               &coeff_array[BME69X_LEN_COEFF1 + BME69X_LEN_COEFF2],
                               BME69X_LEN_COEFF3,
                               dev);
    }

    if (rslt == BME69X_OK)
 8003306:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 800330a:	2b00      	cmp	r3, #0
 800330c:	f040 80ce 	bne.w	80034ac <get_calib_data+0x202>
    {
        /* Temperature related coefficients */
        dev->calib.par_t1 =
            (uint16_t)(BME69X_CONCAT_BYTES(coeff_array[BME69X_IDX_DO_C_MSB], coeff_array[BME69X_IDX_DO_C_LSB]));
 8003310:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8003314:	b21b      	sxth	r3, r3
 8003316:	021b      	lsls	r3, r3, #8
 8003318:	b21a      	sxth	r2, r3
 800331a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800331e:	b21b      	sxth	r3, r3
 8003320:	4313      	orrs	r3, r2
 8003322:	b21b      	sxth	r3, r3
 8003324:	b29a      	uxth	r2, r3
        dev->calib.par_t1 =
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	83da      	strh	r2, [r3, #30]
        dev->calib.par_t2 =
            (uint16_t)(BME69X_CONCAT_BYTES(coeff_array[BME69X_IDX_DTK1_C_MSB], coeff_array[BME69X_IDX_DTK1_C_LSB]));
 800332a:	7b7b      	ldrb	r3, [r7, #13]
 800332c:	b21b      	sxth	r3, r3
 800332e:	021b      	lsls	r3, r3, #8
 8003330:	b21a      	sxth	r2, r3
 8003332:	7b3b      	ldrb	r3, [r7, #12]
 8003334:	b21b      	sxth	r3, r3
 8003336:	4313      	orrs	r3, r2
 8003338:	b21b      	sxth	r3, r3
 800333a:	b29a      	uxth	r2, r3
        dev->calib.par_t2 =
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	841a      	strh	r2, [r3, #32]
        dev->calib.par_t3 = (int8_t)(coeff_array[BME69X_IDX_DTK2_C]);
 8003340:	7bbb      	ldrb	r3, [r7, #14]
 8003342:	b25a      	sxtb	r2, r3
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

        /* Pressure related coefficients */
        dev->calib.par_p5 =
            (int16_t)(BME69X_CONCAT_BYTES(coeff_array[BME69X_IDX_S_C_MSB], coeff_array[BME69X_IDX_S_C_LSB]));
 800334a:	7c7b      	ldrb	r3, [r7, #17]
 800334c:	b21b      	sxth	r3, r3
 800334e:	021b      	lsls	r3, r3, #8
 8003350:	b21a      	sxth	r2, r3
 8003352:	7c3b      	ldrb	r3, [r7, #16]
 8003354:	b21b      	sxth	r3, r3
 8003356:	4313      	orrs	r3, r2
 8003358:	b21a      	sxth	r2, r3
        dev->calib.par_p5 =
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	849a      	strh	r2, [r3, #36]	@ 0x24
        dev->calib.par_p6 =
            (int16_t)(BME69X_CONCAT_BYTES(coeff_array[BME69X_IDX_TK1S_C_MSB], coeff_array[BME69X_IDX_TK1S_C_LSB]));
 800335e:	7cfb      	ldrb	r3, [r7, #19]
 8003360:	b21b      	sxth	r3, r3
 8003362:	021b      	lsls	r3, r3, #8
 8003364:	b21a      	sxth	r2, r3
 8003366:	7cbb      	ldrb	r3, [r7, #18]
 8003368:	b21b      	sxth	r3, r3
 800336a:	4313      	orrs	r3, r2
 800336c:	b21a      	sxth	r2, r3
        dev->calib.par_p6 =
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	84da      	strh	r2, [r3, #38]	@ 0x26
        dev->calib.par_p7 = (int8_t)coeff_array[BME69X_IDX_TK2S_C];
 8003372:	7d3b      	ldrb	r3, [r7, #20]
 8003374:	b25a      	sxtb	r2, r3
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
        dev->calib.par_p8 = (int8_t)coeff_array[BME69X_IDX_TK3S_C];
 800337c:	7d7b      	ldrb	r3, [r7, #21]
 800337e:	b25a      	sxtb	r2, r3
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

        dev->calib.par_p1 =
            (int16_t)(BME69X_CONCAT_BYTES(coeff_array[BME69X_IDX_O_C_MSB], coeff_array[BME69X_IDX_O_C_LSB]));
 8003386:	7dfb      	ldrb	r3, [r7, #23]
 8003388:	b21b      	sxth	r3, r3
 800338a:	021b      	lsls	r3, r3, #8
 800338c:	b21a      	sxth	r2, r3
 800338e:	7dbb      	ldrb	r3, [r7, #22]
 8003390:	b21b      	sxth	r3, r3
 8003392:	4313      	orrs	r3, r2
 8003394:	b21b      	sxth	r3, r3
 8003396:	b29a      	uxth	r2, r3
        dev->calib.par_p1 =
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	855a      	strh	r2, [r3, #42]	@ 0x2a
        dev->calib.par_p2 =
            (uint16_t)(BME69X_CONCAT_BYTES(coeff_array[BME69X_IDX_TK10_C_MSB], coeff_array[BME69X_IDX_TK10_C_LSB]));
 800339c:	7e7b      	ldrb	r3, [r7, #25]
 800339e:	b21b      	sxth	r3, r3
 80033a0:	021b      	lsls	r3, r3, #8
 80033a2:	b21a      	sxth	r2, r3
 80033a4:	7e3b      	ldrb	r3, [r7, #24]
 80033a6:	b21b      	sxth	r3, r3
 80033a8:	4313      	orrs	r3, r2
 80033aa:	b21b      	sxth	r3, r3
 80033ac:	b29a      	uxth	r2, r3
        dev->calib.par_p2 =
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	859a      	strh	r2, [r3, #44]	@ 0x2c
        dev->calib.par_p3 = (int8_t)(coeff_array[BME69X_IDX_TK20_C]);
 80033b2:	7ebb      	ldrb	r3, [r7, #26]
 80033b4:	b25a      	sxtb	r2, r3
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
        dev->calib.par_p4 = (int8_t)(coeff_array[BME69X_IDX_TK30_C]);
 80033bc:	7efb      	ldrb	r3, [r7, #27]
 80033be:	b25a      	sxtb	r2, r3
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f

        dev->calib.par_p9 =
            (int16_t)(BME69X_CONCAT_BYTES(coeff_array[BME69X_IDX_NLS_C_MSB], coeff_array[BME69X_IDX_NLS_C_LSB]));
 80033c6:	7ffb      	ldrb	r3, [r7, #31]
 80033c8:	b21b      	sxth	r3, r3
 80033ca:	021b      	lsls	r3, r3, #8
 80033cc:	b21a      	sxth	r2, r3
 80033ce:	7fbb      	ldrb	r3, [r7, #30]
 80033d0:	b21b      	sxth	r3, r3
 80033d2:	4313      	orrs	r3, r2
 80033d4:	b21a      	sxth	r2, r3
        dev->calib.par_p9 =
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	861a      	strh	r2, [r3, #48]	@ 0x30
        dev->calib.par_p10 = (int8_t)(coeff_array[BME69X_IDX_TKNLS_C]);
 80033da:	f897 3020 	ldrb.w	r3, [r7, #32]
 80033de:	b25a      	sxtb	r2, r3
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
        dev->calib.par_p11 = (int8_t)(coeff_array[BME69X_IDX_NLS3_C]);
 80033e6:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80033ea:	b25a      	sxtb	r2, r3
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33

        /* Humidity related coefficients */
        dev->calib.par_h5 =
            (int16_t)(((int16_t)coeff_array[BME69X_IDX_S_H_MSB] << 4) | (coeff_array[BME69X_IDX_S_H_LSB] >> 4));
 80033f2:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80033f6:	b21b      	sxth	r3, r3
 80033f8:	011b      	lsls	r3, r3, #4
 80033fa:	b21a      	sxth	r2, r3
 80033fc:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8003400:	091b      	lsrs	r3, r3, #4
 8003402:	b2db      	uxtb	r3, r3
 8003404:	b21b      	sxth	r3, r3
 8003406:	4313      	orrs	r3, r2
 8003408:	b21a      	sxth	r2, r3
        dev->calib.par_h5 =
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	82da      	strh	r2, [r3, #22]
        dev->calib.par_h1 =
            (int16_t)(((int16_t)coeff_array[BME69X_IDX_O_H_MSB] << 4) | (coeff_array[BME69X_IDX_O_H_LSB] & 0x0F));
 800340e:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8003412:	b21b      	sxth	r3, r3
 8003414:	011b      	lsls	r3, r3, #4
 8003416:	b21a      	sxth	r2, r3
 8003418:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800341c:	b21b      	sxth	r3, r3
 800341e:	f003 030f 	and.w	r3, r3, #15
 8003422:	b21b      	sxth	r3, r3
 8003424:	4313      	orrs	r3, r2
 8003426:	b21a      	sxth	r2, r3
        dev->calib.par_h1 =
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	821a      	strh	r2, [r3, #16]
        dev->calib.par_h2 = (int8_t)coeff_array[BME69X_IDX_TK10H_C];
 800342c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8003430:	b25a      	sxtb	r2, r3
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	749a      	strb	r2, [r3, #18]
        dev->calib.par_h4 = (int8_t)coeff_array[BME69X_IDX_par_h4];
 8003436:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800343a:	b25a      	sxtb	r2, r3
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	751a      	strb	r2, [r3, #20]
        dev->calib.par_h3 = (uint8_t)coeff_array[BME69X_IDX_par_h3];
 8003440:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	74da      	strb	r2, [r3, #19]
        dev->calib.par_h6 = (uint8_t)coeff_array[BME69X_IDX_HLIN2_C];
 8003448:	f897 2029 	ldrb.w	r2, [r7, #41]	@ 0x29
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	761a      	strb	r2, [r3, #24]

        /* Gas heater related coefficients */
        dev->calib.par_g1 = (int8_t)coeff_array[BME69X_IDX_RO_C];
 8003450:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8003454:	b25a      	sxtb	r2, r3
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	765a      	strb	r2, [r3, #25]
        dev->calib.par_g2 =
            (int16_t)(BME69X_CONCAT_BYTES(coeff_array[BME69X_IDX_TKR_C_MSB], coeff_array[BME69X_IDX_TKR_C_LSB]));
 800345a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800345e:	b21b      	sxth	r3, r3
 8003460:	021b      	lsls	r3, r3, #8
 8003462:	b21a      	sxth	r2, r3
 8003464:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8003468:	b21b      	sxth	r3, r3
 800346a:	4313      	orrs	r3, r2
 800346c:	b21a      	sxth	r2, r3
        dev->calib.par_g2 =
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	835a      	strh	r2, [r3, #26]
        dev->calib.par_g3 = (int8_t)coeff_array[BME69X_IDX_T_AMB_COMP];
 8003472:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8003476:	b25a      	sxtb	r2, r3
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	771a      	strb	r2, [r3, #28]

        /* Other coefficients */
        dev->calib.res_heat_range = ((coeff_array[BME69X_IDX_RES_HEAT_RANGE] & BME69X_RHRANGE_MSK) >> 4);
 800347c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8003480:	111b      	asrs	r3, r3, #4
 8003482:	b2db      	uxtb	r3, r3
 8003484:	f003 0303 	and.w	r3, r3, #3
 8003488:	b2da      	uxtb	r2, r3
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
        dev->calib.res_heat_val = (int8_t)coeff_array[BME69X_IDX_RES_HEAT_VAL];
 8003490:	f897 3031 	ldrb.w	r3, [r7, #49]	@ 0x31
 8003494:	b25a      	sxtb	r2, r3
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
        dev->calib.range_sw_err = ((int8_t)(coeff_array[BME69X_IDX_RANGE_SW_ERR] & BME69X_RSERROR_MSK)) / 16;
 800349c:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 80034a0:	b25b      	sxtb	r3, r3
 80034a2:	111b      	asrs	r3, r3, #4
 80034a4:	b25a      	sxtb	r2, r3
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
    }

    return rslt;
 80034ac:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
}
 80034b0:	4618      	mov	r0, r3
 80034b2:	3738      	adds	r7, #56	@ 0x38
 80034b4:	46bd      	mov	sp, r7
 80034b6:	bd80      	pop	{r7, pc}

080034b8 <read_variant_id>:

/* This internal API is used to read variant ID information from the register */
static int8_t read_variant_id(struct bme69x_dev *dev)
{
 80034b8:	b580      	push	{r7, lr}
 80034ba:	b084      	sub	sp, #16
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t reg_data = 0;
 80034c0:	2300      	movs	r3, #0
 80034c2:	73bb      	strb	r3, [r7, #14]

    /* Read variant ID information register */
    rslt = bme69x_get_regs(BME69X_REG_VARIANT_ID, &reg_data, 1, dev);
 80034c4:	f107 010e 	add.w	r1, r7, #14
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	2201      	movs	r2, #1
 80034cc:	20f0      	movs	r0, #240	@ 0xf0
 80034ce:	f7fe f8b8 	bl	8001642 <bme69x_get_regs>
 80034d2:	4603      	mov	r3, r0
 80034d4:	73fb      	strb	r3, [r7, #15]

    if (rslt == BME69X_OK)
 80034d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d103      	bne.n	80034e6 <read_variant_id+0x2e>
    {
        dev->variant_id = reg_data;
 80034de:	7bbb      	ldrb	r3, [r7, #14]
 80034e0:	461a      	mov	r2, r3
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	609a      	str	r2, [r3, #8]
    }

    return rslt;
 80034e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80034ea:	4618      	mov	r0, r3
 80034ec:	3710      	adds	r7, #16
 80034ee:	46bd      	mov	sp, r7
 80034f0:	bd80      	pop	{r7, pc}

080034f2 <bme69x_i2c_read>:
 * @param[in] intf_ptr     Pointer to the interface (user-defined handle).
 *
 * @return 0 for success (BME69X_OK), non-zero for failure (BME69X_E_COM_FAIL).
 */
int8_t bme69x_i2c_read(uint8_t reg_addr, uint8_t *reg_data, uint32_t len, void *intf_ptr)
{
 80034f2:	b590      	push	{r4, r7, lr}
 80034f4:	b08b      	sub	sp, #44	@ 0x2c
 80034f6:	af04      	add	r7, sp, #16
 80034f8:	60b9      	str	r1, [r7, #8]
 80034fa:	607a      	str	r2, [r7, #4]
 80034fc:	603b      	str	r3, [r7, #0]
 80034fe:	4603      	mov	r3, r0
 8003500:	73fb      	strb	r3, [r7, #15]
    bme69x_i2c_user_handle_t *user_handle = (bme69x_i2c_user_handle_t *)intf_ptr;
 8003502:	683b      	ldr	r3, [r7, #0]
 8003504:	617b      	str	r3, [r7, #20]
    HAL_StatusTypeDef status;

    // The BME69x expects the register address to be sent first, then data is read.
    // HAL_I2C_Mem_Read handles this sequence.
    // The device address needs to be shifted left by 1 for HAL functions.
    status = HAL_I2C_Mem_Read(user_handle->hi2c, (user_handle->i2c_addr << 1), reg_addr, I2C_MEMADD_SIZE_8BIT, reg_data, (uint16_t)len, HAL_MAX_DELAY);
 8003506:	697b      	ldr	r3, [r7, #20]
 8003508:	6818      	ldr	r0, [r3, #0]
 800350a:	697b      	ldr	r3, [r7, #20]
 800350c:	791b      	ldrb	r3, [r3, #4]
 800350e:	005b      	lsls	r3, r3, #1
 8003510:	b299      	uxth	r1, r3
 8003512:	7bfb      	ldrb	r3, [r7, #15]
 8003514:	b29a      	uxth	r2, r3
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	b29b      	uxth	r3, r3
 800351a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800351e:	9402      	str	r4, [sp, #8]
 8003520:	9301      	str	r3, [sp, #4]
 8003522:	68bb      	ldr	r3, [r7, #8]
 8003524:	9300      	str	r3, [sp, #0]
 8003526:	2301      	movs	r3, #1
 8003528:	f002 fd3a 	bl	8005fa0 <HAL_I2C_Mem_Read>
 800352c:	4603      	mov	r3, r0
 800352e:	74fb      	strb	r3, [r7, #19]

    return (status == HAL_OK) ? (int8_t)BME69X_OK : (int8_t)BME69X_E_COM_FAIL; // Corrected error macro
 8003530:	7cfb      	ldrb	r3, [r7, #19]
 8003532:	2b00      	cmp	r3, #0
 8003534:	d101      	bne.n	800353a <bme69x_i2c_read+0x48>
 8003536:	2300      	movs	r3, #0
 8003538:	e001      	b.n	800353e <bme69x_i2c_read+0x4c>
 800353a:	f06f 0301 	mvn.w	r3, #1
}
 800353e:	4618      	mov	r0, r3
 8003540:	371c      	adds	r7, #28
 8003542:	46bd      	mov	sp, r7
 8003544:	bd90      	pop	{r4, r7, pc}

08003546 <bme69x_i2c_write>:
 * @param[in] intf_ptr     Pointer to the interface (user-defined handle).
 *
 * @return 0 for success (BME69X_OK), non-zero for failure (BME69X_E_COM_FAIL).
 */
int8_t bme69x_i2c_write(uint8_t reg_addr, const uint8_t *reg_data, uint32_t len, void *intf_ptr)
{
 8003546:	b590      	push	{r4, r7, lr}
 8003548:	b08b      	sub	sp, #44	@ 0x2c
 800354a:	af04      	add	r7, sp, #16
 800354c:	60b9      	str	r1, [r7, #8]
 800354e:	607a      	str	r2, [r7, #4]
 8003550:	603b      	str	r3, [r7, #0]
 8003552:	4603      	mov	r3, r0
 8003554:	73fb      	strb	r3, [r7, #15]
    bme69x_i2c_user_handle_t *user_handle = (bme69x_i2c_user_handle_t *)intf_ptr;
 8003556:	683b      	ldr	r3, [r7, #0]
 8003558:	617b      	str	r3, [r7, #20]
    HAL_StatusTypeDef status;

    // HAL_I2C_Mem_Write handles sending register address, then data.
    // The device address needs to be shifted left by 1 for HAL functions.
    status = HAL_I2C_Mem_Write(user_handle->hi2c, (user_handle->i2c_addr << 1), reg_addr, I2C_MEMADD_SIZE_8BIT, (uint8_t *)reg_data, (uint16_t)len, HAL_MAX_DELAY);
 800355a:	697b      	ldr	r3, [r7, #20]
 800355c:	6818      	ldr	r0, [r3, #0]
 800355e:	697b      	ldr	r3, [r7, #20]
 8003560:	791b      	ldrb	r3, [r3, #4]
 8003562:	005b      	lsls	r3, r3, #1
 8003564:	b299      	uxth	r1, r3
 8003566:	7bfb      	ldrb	r3, [r7, #15]
 8003568:	b29a      	uxth	r2, r3
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	b29b      	uxth	r3, r3
 800356e:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8003572:	9402      	str	r4, [sp, #8]
 8003574:	9301      	str	r3, [sp, #4]
 8003576:	68bb      	ldr	r3, [r7, #8]
 8003578:	9300      	str	r3, [sp, #0]
 800357a:	2301      	movs	r3, #1
 800357c:	f002 fbfc 	bl	8005d78 <HAL_I2C_Mem_Write>
 8003580:	4603      	mov	r3, r0
 8003582:	74fb      	strb	r3, [r7, #19]

    return (status == HAL_OK) ? (int8_t)BME69X_OK : (int8_t)BME69X_E_COM_FAIL; // Corrected error macro
 8003584:	7cfb      	ldrb	r3, [r7, #19]
 8003586:	2b00      	cmp	r3, #0
 8003588:	d101      	bne.n	800358e <bme69x_i2c_write+0x48>
 800358a:	2300      	movs	r3, #0
 800358c:	e001      	b.n	8003592 <bme69x_i2c_write+0x4c>
 800358e:	f06f 0301 	mvn.w	r3, #1
}
 8003592:	4618      	mov	r0, r3
 8003594:	371c      	adds	r7, #28
 8003596:	46bd      	mov	sp, r7
 8003598:	bd90      	pop	{r4, r7, pc}
	...

0800359c <bme69x_delay_us>:
 *
 * @param[in] period       Delay period in microseconds.
 * @param[in] intf_ptr     Pointer to the interface (user-defined handle).
 */
void bme69x_delay_us(uint32_t period, void *intf_ptr)
{
 800359c:	b480      	push	{r7}
 800359e:	b085      	sub	sp, #20
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	6078      	str	r0, [r7, #4]
 80035a4:	6039      	str	r1, [r7, #0]
    // This provides an *approximate* microsecond delay using a busy-wait loop.
    // The magic number '4' is an estimation for cycles per loop iteration on Cortex-M.
    // For a 160MHz CPU, (160,000,000 / 1,000,000) = 160 cycles per microsecond.
    // So, '4' means each loop iteration takes about 4 CPU cycles.
    // This value might need slight calibration for perfect accuracy on your specific board/compiler settings.
    volatile uint32_t num_cycles = period * (SystemCoreClock / 1000000U / 4U);
 80035a6:	4b0b      	ldr	r3, [pc, #44]	@ (80035d4 <bme69x_delay_us+0x38>)
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	4a0b      	ldr	r2, [pc, #44]	@ (80035d8 <bme69x_delay_us+0x3c>)
 80035ac:	fba2 2303 	umull	r2, r3, r2, r3
 80035b0:	0d1b      	lsrs	r3, r3, #20
 80035b2:	687a      	ldr	r2, [r7, #4]
 80035b4:	fb02 f303 	mul.w	r3, r2, r3
 80035b8:	60fb      	str	r3, [r7, #12]
    while (num_cycles--);
 80035ba:	bf00      	nop
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	1e5a      	subs	r2, r3, #1
 80035c0:	60fa      	str	r2, [r7, #12]
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d1fa      	bne.n	80035bc <bme69x_delay_us+0x20>
}
 80035c6:	bf00      	nop
 80035c8:	bf00      	nop
 80035ca:	3714      	adds	r7, #20
 80035cc:	46bd      	mov	sp, r7
 80035ce:	bc80      	pop	{r7}
 80035d0:	4770      	bx	lr
 80035d2:	bf00      	nop
 80035d4:	2000000c 	.word	0x2000000c
 80035d8:	431bde83 	.word	0x431bde83

080035dc <MX_GPIO_Init>:
     PA13 (JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PA14 (JTCK/SWCLK)   ------> DEBUG_JTCK-SWCLK
     PB3 (JTDO/TRACESWO)   ------> DEBUG_JTDO-SWO
*/
void MX_GPIO_Init(void)
{
 80035dc:	b580      	push	{r7, lr}
 80035de:	b08c      	sub	sp, #48	@ 0x30
 80035e0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80035e2:	f107 031c 	add.w	r3, r7, #28
 80035e6:	2200      	movs	r2, #0
 80035e8:	601a      	str	r2, [r3, #0]
 80035ea:	605a      	str	r2, [r3, #4]
 80035ec:	609a      	str	r2, [r3, #8]
 80035ee:	60da      	str	r2, [r3, #12]
 80035f0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80035f2:	4b6d      	ldr	r3, [pc, #436]	@ (80037a8 <MX_GPIO_Init+0x1cc>)
 80035f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80035f8:	4a6b      	ldr	r2, [pc, #428]	@ (80037a8 <MX_GPIO_Init+0x1cc>)
 80035fa:	f043 0304 	orr.w	r3, r3, #4
 80035fe:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8003602:	4b69      	ldr	r3, [pc, #420]	@ (80037a8 <MX_GPIO_Init+0x1cc>)
 8003604:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003608:	f003 0304 	and.w	r3, r3, #4
 800360c:	61bb      	str	r3, [r7, #24]
 800360e:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003610:	4b65      	ldr	r3, [pc, #404]	@ (80037a8 <MX_GPIO_Init+0x1cc>)
 8003612:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003616:	4a64      	ldr	r2, [pc, #400]	@ (80037a8 <MX_GPIO_Init+0x1cc>)
 8003618:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800361c:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8003620:	4b61      	ldr	r3, [pc, #388]	@ (80037a8 <MX_GPIO_Init+0x1cc>)
 8003622:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003626:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800362a:	617b      	str	r3, [r7, #20]
 800362c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800362e:	4b5e      	ldr	r3, [pc, #376]	@ (80037a8 <MX_GPIO_Init+0x1cc>)
 8003630:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003634:	4a5c      	ldr	r2, [pc, #368]	@ (80037a8 <MX_GPIO_Init+0x1cc>)
 8003636:	f043 0301 	orr.w	r3, r3, #1
 800363a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800363e:	4b5a      	ldr	r3, [pc, #360]	@ (80037a8 <MX_GPIO_Init+0x1cc>)
 8003640:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003644:	f003 0301 	and.w	r3, r3, #1
 8003648:	613b      	str	r3, [r7, #16]
 800364a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800364c:	4b56      	ldr	r3, [pc, #344]	@ (80037a8 <MX_GPIO_Init+0x1cc>)
 800364e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003652:	4a55      	ldr	r2, [pc, #340]	@ (80037a8 <MX_GPIO_Init+0x1cc>)
 8003654:	f043 0302 	orr.w	r3, r3, #2
 8003658:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800365c:	4b52      	ldr	r3, [pc, #328]	@ (80037a8 <MX_GPIO_Init+0x1cc>)
 800365e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003662:	f003 0302 	and.w	r3, r3, #2
 8003666:	60fb      	str	r3, [r7, #12]
 8003668:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800366a:	4b4f      	ldr	r3, [pc, #316]	@ (80037a8 <MX_GPIO_Init+0x1cc>)
 800366c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003670:	4a4d      	ldr	r2, [pc, #308]	@ (80037a8 <MX_GPIO_Init+0x1cc>)
 8003672:	f043 0310 	orr.w	r3, r3, #16
 8003676:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800367a:	4b4b      	ldr	r3, [pc, #300]	@ (80037a8 <MX_GPIO_Init+0x1cc>)
 800367c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003680:	f003 0310 	and.w	r3, r3, #16
 8003684:	60bb      	str	r3, [r7, #8]
 8003686:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8003688:	4b47      	ldr	r3, [pc, #284]	@ (80037a8 <MX_GPIO_Init+0x1cc>)
 800368a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800368e:	4a46      	ldr	r2, [pc, #280]	@ (80037a8 <MX_GPIO_Init+0x1cc>)
 8003690:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003694:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8003698:	4b43      	ldr	r3, [pc, #268]	@ (80037a8 <MX_GPIO_Init+0x1cc>)
 800369a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800369e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80036a2:	607b      	str	r3, [r7, #4]
 80036a4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ST7789_RST_GPIO_Port, ST7789_RST_Pin, GPIO_PIN_RESET);
 80036a6:	2200      	movs	r2, #0
 80036a8:	2101      	movs	r1, #1
 80036aa:	4840      	ldr	r0, [pc, #256]	@ (80037ac <MX_GPIO_Init+0x1d0>)
 80036ac:	f002 fa76 	bl	8005b9c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TP_RST_GPIO_Port, TP_RST_Pin, GPIO_PIN_SET);
 80036b0:	2201      	movs	r2, #1
 80036b2:	2104      	movs	r1, #4
 80036b4:	483d      	ldr	r0, [pc, #244]	@ (80037ac <MX_GPIO_Init+0x1d0>)
 80036b6:	f002 fa71 	bl	8005b9c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ST7789_CS_GPIO_Port, ST7789_CS_Pin, GPIO_PIN_SET);
 80036ba:	2201      	movs	r2, #1
 80036bc:	2110      	movs	r1, #16
 80036be:	483c      	ldr	r0, [pc, #240]	@ (80037b0 <MX_GPIO_Init+0x1d4>)
 80036c0:	f002 fa6c 	bl	8005b9c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ST7789_DC_GPIO_Port, ST7789_DC_Pin, GPIO_PIN_RESET);
 80036c4:	2200      	movs	r2, #0
 80036c6:	2101      	movs	r1, #1
 80036c8:	483a      	ldr	r0, [pc, #232]	@ (80037b4 <MX_GPIO_Init+0x1d8>)
 80036ca:	f002 fa67 	bl	8005b9c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ST7789_BL_Pin|DHT11_DATA_Pin, GPIO_PIN_SET);
 80036ce:	2201      	movs	r2, #1
 80036d0:	f44f 7181 	mov.w	r1, #258	@ 0x102
 80036d4:	4837      	ldr	r0, [pc, #220]	@ (80037b4 <MX_GPIO_Init+0x1d8>)
 80036d6:	f002 fa61 	bl	8005b9c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, ST67W611M1_BOOT_Pin|ST67W611M1_CHIP_EN_Pin, GPIO_PIN_RESET);
 80036da:	2200      	movs	r2, #0
 80036dc:	f44f 6120 	mov.w	r1, #2560	@ 0xa00
 80036e0:	4835      	ldr	r0, [pc, #212]	@ (80037b8 <MX_GPIO_Init+0x1dc>)
 80036e2:	f002 fa5b 	bl	8005b9c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : ST7789_RST_Pin TP_RST_Pin */
  GPIO_InitStruct.Pin = ST7789_RST_Pin|TP_RST_Pin;
 80036e6:	2305      	movs	r3, #5
 80036e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80036ea:	2301      	movs	r3, #1
 80036ec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036ee:	2300      	movs	r3, #0
 80036f0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80036f2:	2303      	movs	r3, #3
 80036f4:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80036f6:	f107 031c 	add.w	r3, r7, #28
 80036fa:	4619      	mov	r1, r3
 80036fc:	482b      	ldr	r0, [pc, #172]	@ (80037ac <MX_GPIO_Init+0x1d0>)
 80036fe:	f002 f86d 	bl	80057dc <HAL_GPIO_Init>

  /*Configure GPIO pin : INT_Pin */
  GPIO_InitStruct.Pin = INT_Pin;
 8003702:	2302      	movs	r3, #2
 8003704:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8003706:	4b2d      	ldr	r3, [pc, #180]	@ (80037bc <MX_GPIO_Init+0x1e0>)
 8003708:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800370a:	2301      	movs	r3, #1
 800370c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(INT_GPIO_Port, &GPIO_InitStruct);
 800370e:	f107 031c 	add.w	r3, r7, #28
 8003712:	4619      	mov	r1, r3
 8003714:	4825      	ldr	r0, [pc, #148]	@ (80037ac <MX_GPIO_Init+0x1d0>)
 8003716:	f002 f861 	bl	80057dc <HAL_GPIO_Init>

  /*Configure GPIO pin : ST7789_CS_Pin */
  GPIO_InitStruct.Pin = ST7789_CS_Pin;
 800371a:	2310      	movs	r3, #16
 800371c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800371e:	2301      	movs	r3, #1
 8003720:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003722:	2300      	movs	r3, #0
 8003724:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003726:	2303      	movs	r3, #3
 8003728:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(ST7789_CS_GPIO_Port, &GPIO_InitStruct);
 800372a:	f107 031c 	add.w	r3, r7, #28
 800372e:	4619      	mov	r1, r3
 8003730:	481f      	ldr	r0, [pc, #124]	@ (80037b0 <MX_GPIO_Init+0x1d4>)
 8003732:	f002 f853 	bl	80057dc <HAL_GPIO_Init>

  /*Configure GPIO pins : ST7789_DC_Pin ST7789_BL_Pin */
  GPIO_InitStruct.Pin = ST7789_DC_Pin|ST7789_BL_Pin;
 8003736:	2303      	movs	r3, #3
 8003738:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800373a:	2301      	movs	r3, #1
 800373c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800373e:	2300      	movs	r3, #0
 8003740:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003742:	2303      	movs	r3, #3
 8003744:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003746:	f107 031c 	add.w	r3, r7, #28
 800374a:	4619      	mov	r1, r3
 800374c:	4819      	ldr	r0, [pc, #100]	@ (80037b4 <MX_GPIO_Init+0x1d8>)
 800374e:	f002 f845 	bl	80057dc <HAL_GPIO_Init>

  /*Configure GPIO pins : ST67W611M1_BOOT_Pin ST67W611M1_CHIP_EN_Pin */
  GPIO_InitStruct.Pin = ST67W611M1_BOOT_Pin|ST67W611M1_CHIP_EN_Pin;
 8003752:	f44f 6320 	mov.w	r3, #2560	@ 0xa00
 8003756:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003758:	2301      	movs	r3, #1
 800375a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800375c:	2300      	movs	r3, #0
 800375e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003760:	2300      	movs	r3, #0
 8003762:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003764:	f107 031c 	add.w	r3, r7, #28
 8003768:	4619      	mov	r1, r3
 800376a:	4813      	ldr	r0, [pc, #76]	@ (80037b8 <MX_GPIO_Init+0x1dc>)
 800376c:	f002 f836 	bl	80057dc <HAL_GPIO_Init>

  /*Configure GPIO pin : DHT11_DATA_Pin */
  GPIO_InitStruct.Pin = DHT11_DATA_Pin;
 8003770:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003774:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003776:	2301      	movs	r3, #1
 8003778:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800377a:	2300      	movs	r3, #0
 800377c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800377e:	2300      	movs	r3, #0
 8003780:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(DHT11_DATA_GPIO_Port, &GPIO_InitStruct);
 8003782:	f107 031c 	add.w	r3, r7, #28
 8003786:	4619      	mov	r1, r3
 8003788:	480a      	ldr	r0, [pc, #40]	@ (80037b4 <MX_GPIO_Init+0x1d8>)
 800378a:	f002 f827 	bl	80057dc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 800378e:	2200      	movs	r2, #0
 8003790:	2100      	movs	r1, #0
 8003792:	200c      	movs	r0, #12
 8003794:	f001 fed9 	bl	800554a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8003798:	200c      	movs	r0, #12
 800379a:	f001 fef0 	bl	800557e <HAL_NVIC_EnableIRQ>

}
 800379e:	bf00      	nop
 80037a0:	3730      	adds	r7, #48	@ 0x30
 80037a2:	46bd      	mov	sp, r7
 80037a4:	bd80      	pop	{r7, pc}
 80037a6:	bf00      	nop
 80037a8:	46020c00 	.word	0x46020c00
 80037ac:	42020800 	.word	0x42020800
 80037b0:	42020000 	.word	0x42020000
 80037b4:	42020400 	.word	0x42020400
 80037b8:	42021000 	.word	0x42021000
 80037bc:	10210000 	.word	0x10210000

080037c0 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c3;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80037c4:	4b1b      	ldr	r3, [pc, #108]	@ (8003834 <MX_I2C1_Init+0x74>)
 80037c6:	4a1c      	ldr	r2, [pc, #112]	@ (8003838 <MX_I2C1_Init+0x78>)
 80037c8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00F07BFF;
 80037ca:	4b1a      	ldr	r3, [pc, #104]	@ (8003834 <MX_I2C1_Init+0x74>)
 80037cc:	4a1b      	ldr	r2, [pc, #108]	@ (800383c <MX_I2C1_Init+0x7c>)
 80037ce:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80037d0:	4b18      	ldr	r3, [pc, #96]	@ (8003834 <MX_I2C1_Init+0x74>)
 80037d2:	2200      	movs	r2, #0
 80037d4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80037d6:	4b17      	ldr	r3, [pc, #92]	@ (8003834 <MX_I2C1_Init+0x74>)
 80037d8:	2201      	movs	r2, #1
 80037da:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80037dc:	4b15      	ldr	r3, [pc, #84]	@ (8003834 <MX_I2C1_Init+0x74>)
 80037de:	2200      	movs	r2, #0
 80037e0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80037e2:	4b14      	ldr	r3, [pc, #80]	@ (8003834 <MX_I2C1_Init+0x74>)
 80037e4:	2200      	movs	r2, #0
 80037e6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80037e8:	4b12      	ldr	r3, [pc, #72]	@ (8003834 <MX_I2C1_Init+0x74>)
 80037ea:	2200      	movs	r2, #0
 80037ec:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80037ee:	4b11      	ldr	r3, [pc, #68]	@ (8003834 <MX_I2C1_Init+0x74>)
 80037f0:	2200      	movs	r2, #0
 80037f2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80037f4:	4b0f      	ldr	r3, [pc, #60]	@ (8003834 <MX_I2C1_Init+0x74>)
 80037f6:	2200      	movs	r2, #0
 80037f8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80037fa:	480e      	ldr	r0, [pc, #56]	@ (8003834 <MX_I2C1_Init+0x74>)
 80037fc:	f002 fa20 	bl	8005c40 <HAL_I2C_Init>
 8003800:	4603      	mov	r3, r0
 8003802:	2b00      	cmp	r3, #0
 8003804:	d001      	beq.n	800380a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8003806:	f000 fc55 	bl	80040b4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800380a:	2100      	movs	r1, #0
 800380c:	4809      	ldr	r0, [pc, #36]	@ (8003834 <MX_I2C1_Init+0x74>)
 800380e:	f003 fda0 	bl	8007352 <HAL_I2CEx_ConfigAnalogFilter>
 8003812:	4603      	mov	r3, r0
 8003814:	2b00      	cmp	r3, #0
 8003816:	d001      	beq.n	800381c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8003818:	f000 fc4c 	bl	80040b4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800381c:	2100      	movs	r1, #0
 800381e:	4805      	ldr	r0, [pc, #20]	@ (8003834 <MX_I2C1_Init+0x74>)
 8003820:	f003 fde1 	bl	80073e6 <HAL_I2CEx_ConfigDigitalFilter>
 8003824:	4603      	mov	r3, r0
 8003826:	2b00      	cmp	r3, #0
 8003828:	d001      	beq.n	800382e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800382a:	f000 fc43 	bl	80040b4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800382e:	bf00      	nop
 8003830:	bd80      	pop	{r7, pc}
 8003832:	bf00      	nop
 8003834:	20000218 	.word	0x20000218
 8003838:	40005400 	.word	0x40005400
 800383c:	00f07bff 	.word	0x00f07bff

08003840 <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8003840:	b580      	push	{r7, lr}
 8003842:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8003844:	4b1b      	ldr	r3, [pc, #108]	@ (80038b4 <MX_I2C3_Init+0x74>)
 8003846:	4a1c      	ldr	r2, [pc, #112]	@ (80038b8 <MX_I2C3_Init+0x78>)
 8003848:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x30909DEC;
 800384a:	4b1a      	ldr	r3, [pc, #104]	@ (80038b4 <MX_I2C3_Init+0x74>)
 800384c:	4a1b      	ldr	r2, [pc, #108]	@ (80038bc <MX_I2C3_Init+0x7c>)
 800384e:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8003850:	4b18      	ldr	r3, [pc, #96]	@ (80038b4 <MX_I2C3_Init+0x74>)
 8003852:	2200      	movs	r2, #0
 8003854:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003856:	4b17      	ldr	r3, [pc, #92]	@ (80038b4 <MX_I2C3_Init+0x74>)
 8003858:	2201      	movs	r2, #1
 800385a:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800385c:	4b15      	ldr	r3, [pc, #84]	@ (80038b4 <MX_I2C3_Init+0x74>)
 800385e:	2200      	movs	r2, #0
 8003860:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8003862:	4b14      	ldr	r3, [pc, #80]	@ (80038b4 <MX_I2C3_Init+0x74>)
 8003864:	2200      	movs	r2, #0
 8003866:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8003868:	4b12      	ldr	r3, [pc, #72]	@ (80038b4 <MX_I2C3_Init+0x74>)
 800386a:	2200      	movs	r2, #0
 800386c:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800386e:	4b11      	ldr	r3, [pc, #68]	@ (80038b4 <MX_I2C3_Init+0x74>)
 8003870:	2200      	movs	r2, #0
 8003872:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003874:	4b0f      	ldr	r3, [pc, #60]	@ (80038b4 <MX_I2C3_Init+0x74>)
 8003876:	2200      	movs	r2, #0
 8003878:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800387a:	480e      	ldr	r0, [pc, #56]	@ (80038b4 <MX_I2C3_Init+0x74>)
 800387c:	f002 f9e0 	bl	8005c40 <HAL_I2C_Init>
 8003880:	4603      	mov	r3, r0
 8003882:	2b00      	cmp	r3, #0
 8003884:	d001      	beq.n	800388a <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8003886:	f000 fc15 	bl	80040b4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800388a:	2100      	movs	r1, #0
 800388c:	4809      	ldr	r0, [pc, #36]	@ (80038b4 <MX_I2C3_Init+0x74>)
 800388e:	f003 fd60 	bl	8007352 <HAL_I2CEx_ConfigAnalogFilter>
 8003892:	4603      	mov	r3, r0
 8003894:	2b00      	cmp	r3, #0
 8003896:	d001      	beq.n	800389c <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8003898:	f000 fc0c 	bl	80040b4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 800389c:	2100      	movs	r1, #0
 800389e:	4805      	ldr	r0, [pc, #20]	@ (80038b4 <MX_I2C3_Init+0x74>)
 80038a0:	f003 fda1 	bl	80073e6 <HAL_I2CEx_ConfigDigitalFilter>
 80038a4:	4603      	mov	r3, r0
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d001      	beq.n	80038ae <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 80038aa:	f000 fc03 	bl	80040b4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80038ae:	bf00      	nop
 80038b0:	bd80      	pop	{r7, pc}
 80038b2:	bf00      	nop
 80038b4:	2000026c 	.word	0x2000026c
 80038b8:	46002800 	.word	0x46002800
 80038bc:	30909dec 	.word	0x30909dec

080038c0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80038c0:	b580      	push	{r7, lr}
 80038c2:	b0bc      	sub	sp, #240	@ 0xf0
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80038c8:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80038cc:	2200      	movs	r2, #0
 80038ce:	601a      	str	r2, [r3, #0]
 80038d0:	605a      	str	r2, [r3, #4]
 80038d2:	609a      	str	r2, [r3, #8]
 80038d4:	60da      	str	r2, [r3, #12]
 80038d6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80038d8:	f107 0318 	add.w	r3, r7, #24
 80038dc:	22c0      	movs	r2, #192	@ 0xc0
 80038de:	2100      	movs	r1, #0
 80038e0:	4618      	mov	r0, r3
 80038e2:	f00a ff37 	bl	800e754 <memset>
  if(i2cHandle->Instance==I2C1)
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	4a55      	ldr	r2, [pc, #340]	@ (8003a40 <HAL_I2C_MspInit+0x180>)
 80038ec:	4293      	cmp	r3, r2
 80038ee:	d157      	bne.n	80039a0 <HAL_I2C_MspInit+0xe0>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80038f0:	f04f 0240 	mov.w	r2, #64	@ 0x40
 80038f4:	f04f 0300 	mov.w	r3, #0
 80038f8:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80038fc:	2300      	movs	r3, #0
 80038fe:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003902:	f107 0318 	add.w	r3, r7, #24
 8003906:	4618      	mov	r0, r3
 8003908:	f005 f9d0 	bl	8008cac <HAL_RCCEx_PeriphCLKConfig>
 800390c:	4603      	mov	r3, r0
 800390e:	2b00      	cmp	r3, #0
 8003910:	d001      	beq.n	8003916 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8003912:	f000 fbcf 	bl	80040b4 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003916:	4b4b      	ldr	r3, [pc, #300]	@ (8003a44 <HAL_I2C_MspInit+0x184>)
 8003918:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800391c:	4a49      	ldr	r2, [pc, #292]	@ (8003a44 <HAL_I2C_MspInit+0x184>)
 800391e:	f043 0302 	orr.w	r3, r3, #2
 8003922:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8003926:	4b47      	ldr	r3, [pc, #284]	@ (8003a44 <HAL_I2C_MspInit+0x184>)
 8003928:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800392c:	f003 0302 	and.w	r3, r3, #2
 8003930:	617b      	str	r3, [r7, #20]
 8003932:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 8003934:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8003938:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800393c:	2312      	movs	r3, #18
 800393e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003942:	2300      	movs	r3, #0
 8003944:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003948:	2300      	movs	r3, #0
 800394a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800394e:	2304      	movs	r3, #4
 8003950:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003954:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8003958:	4619      	mov	r1, r3
 800395a:	483b      	ldr	r0, [pc, #236]	@ (8003a48 <HAL_I2C_MspInit+0x188>)
 800395c:	f001 ff3e 	bl	80057dc <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003960:	4b38      	ldr	r3, [pc, #224]	@ (8003a44 <HAL_I2C_MspInit+0x184>)
 8003962:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003966:	4a37      	ldr	r2, [pc, #220]	@ (8003a44 <HAL_I2C_MspInit+0x184>)
 8003968:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800396c:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8003970:	4b34      	ldr	r3, [pc, #208]	@ (8003a44 <HAL_I2C_MspInit+0x184>)
 8003972:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003976:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800397a:	613b      	str	r3, [r7, #16]
 800397c:	693b      	ldr	r3, [r7, #16]

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 800397e:	2200      	movs	r2, #0
 8003980:	2100      	movs	r1, #0
 8003982:	2037      	movs	r0, #55	@ 0x37
 8003984:	f001 fde1 	bl	800554a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8003988:	2037      	movs	r0, #55	@ 0x37
 800398a:	f001 fdf8 	bl	800557e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 800398e:	2200      	movs	r2, #0
 8003990:	2100      	movs	r1, #0
 8003992:	2038      	movs	r0, #56	@ 0x38
 8003994:	f001 fdd9 	bl	800554a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8003998:	2038      	movs	r0, #56	@ 0x38
 800399a:	f001 fdf0 	bl	800557e <HAL_NVIC_EnableIRQ>
    __HAL_RCC_I2C3_CLK_ENABLE();
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 800399e:	e04b      	b.n	8003a38 <HAL_I2C_MspInit+0x178>
  else if(i2cHandle->Instance==I2C3)
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	4a29      	ldr	r2, [pc, #164]	@ (8003a4c <HAL_I2C_MspInit+0x18c>)
 80039a6:	4293      	cmp	r3, r2
 80039a8:	d146      	bne.n	8003a38 <HAL_I2C_MspInit+0x178>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 80039aa:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80039ae:	f04f 0300 	mov.w	r3, #0
 80039b2:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK3;
 80039b6:	2300      	movs	r3, #0
 80039b8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80039bc:	f107 0318 	add.w	r3, r7, #24
 80039c0:	4618      	mov	r0, r3
 80039c2:	f005 f973 	bl	8008cac <HAL_RCCEx_PeriphCLKConfig>
 80039c6:	4603      	mov	r3, r0
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d001      	beq.n	80039d0 <HAL_I2C_MspInit+0x110>
      Error_Handler();
 80039cc:	f000 fb72 	bl	80040b4 <Error_Handler>
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80039d0:	4b1c      	ldr	r3, [pc, #112]	@ (8003a44 <HAL_I2C_MspInit+0x184>)
 80039d2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80039d6:	4a1b      	ldr	r2, [pc, #108]	@ (8003a44 <HAL_I2C_MspInit+0x184>)
 80039d8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80039dc:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80039e0:	4b18      	ldr	r3, [pc, #96]	@ (8003a44 <HAL_I2C_MspInit+0x184>)
 80039e2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80039e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80039ea:	60fb      	str	r3, [r7, #12]
 80039ec:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 80039ee:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 80039f2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80039f6:	2312      	movs	r3, #18
 80039f8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80039fc:	2301      	movs	r3, #1
 80039fe:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a02:	2300      	movs	r3, #0
 8003a04:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8003a08:	2304      	movs	r3, #4
 8003a0a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003a0e:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8003a12:	4619      	mov	r1, r3
 8003a14:	480e      	ldr	r0, [pc, #56]	@ (8003a50 <HAL_I2C_MspInit+0x190>)
 8003a16:	f001 fee1 	bl	80057dc <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8003a1a:	4b0a      	ldr	r3, [pc, #40]	@ (8003a44 <HAL_I2C_MspInit+0x184>)
 8003a1c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8003a20:	4a08      	ldr	r2, [pc, #32]	@ (8003a44 <HAL_I2C_MspInit+0x184>)
 8003a22:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003a26:	f8c2 30a8 	str.w	r3, [r2, #168]	@ 0xa8
 8003a2a:	4b06      	ldr	r3, [pc, #24]	@ (8003a44 <HAL_I2C_MspInit+0x184>)
 8003a2c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8003a30:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003a34:	60bb      	str	r3, [r7, #8]
 8003a36:	68bb      	ldr	r3, [r7, #8]
}
 8003a38:	bf00      	nop
 8003a3a:	37f0      	adds	r7, #240	@ 0xf0
 8003a3c:	46bd      	mov	sp, r7
 8003a3e:	bd80      	pop	{r7, pc}
 8003a40:	40005400 	.word	0x40005400
 8003a44:	46020c00 	.word	0x46020c00
 8003a48:	42020400 	.word	0x42020400
 8003a4c:	46002800 	.word	0x46002800
 8003a50:	42021800 	.word	0x42021800

08003a54 <MX_ICACHE_Init>:

/* USER CODE END 0 */

/* ICACHE init function */
void MX_ICACHE_Init(void)
{
 8003a54:	b580      	push	{r7, lr}
 8003a56:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache in 1-way (direct mapped cache)
  */
  if (HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY) != HAL_OK)
 8003a58:	2000      	movs	r0, #0
 8003a5a:	f003 fd0f 	bl	800747c <HAL_ICACHE_ConfigAssociativityMode>
 8003a5e:	4603      	mov	r3, r0
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d001      	beq.n	8003a68 <MX_ICACHE_Init+0x14>
  {
    Error_Handler();
 8003a64:	f000 fb26 	bl	80040b4 <Error_Handler>
  }
  if (HAL_ICACHE_Enable() != HAL_OK)
 8003a68:	f003 fd28 	bl	80074bc <HAL_ICACHE_Enable>
 8003a6c:	4603      	mov	r3, r0
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d001      	beq.n	8003a76 <MX_ICACHE_Init+0x22>
  {
    Error_Handler();
 8003a72:	f000 fb1f 	bl	80040b4 <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 8003a76:	bf00      	nop
 8003a78:	bd80      	pop	{r7, pc}
	...

08003a7c <LCD_Init>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void LCD_Init(void)
{
 8003a7c:	b580      	push	{r7, lr}
 8003a7e:	af00      	add	r7, sp, #0
    ST7789_Init(&hspi1);							// Initialize your ST7789 LCD using its dedicated function
 8003a80:	4807      	ldr	r0, [pc, #28]	@ (8003aa0 <LCD_Init+0x24>)
 8003a82:	f000 fca7 	bl	80043d4 <ST7789_Init>

    ST7789_SetRotation(0);							// ST7789_SetRotation takes uint8_t 0,1,2,3 for 0,90,180,270 degrees.
 8003a86:	2000      	movs	r0, #0
 8003a88:	f000 febc 	bl	8004804 <ST7789_SetRotation>

    LCD_Clear();									// Call to LCD_Clear
 8003a8c:	f000 f80e 	bl	8003aac <LCD_Clear>
    printf("ST7789 LCD Initialized!\r\n");
 8003a90:	4804      	ldr	r0, [pc, #16]	@ (8003aa4 <LCD_Init+0x28>)
 8003a92:	f00a fe57 	bl	800e744 <puts>
    current_lcd_row = 0;							// Reset line counter on init
 8003a96:	4b04      	ldr	r3, [pc, #16]	@ (8003aa8 <LCD_Init+0x2c>)
 8003a98:	2200      	movs	r2, #0
 8003a9a:	701a      	strb	r2, [r3, #0]
}
 8003a9c:	bf00      	nop
 8003a9e:	bd80      	pop	{r7, pc}
 8003aa0:	20000384 	.word	0x20000384
 8003aa4:	080109c8 	.word	0x080109c8
 8003aa8:	20000381 	.word	0x20000381

08003aac <LCD_Clear>:

void LCD_Clear(void)
{
 8003aac:	b580      	push	{r7, lr}
 8003aae:	af00      	add	r7, sp, #0
    ST7789_FillScreen(ST7789_BLUE);					// Clear the screen and fill it with black
 8003ab0:	201f      	movs	r0, #31
 8003ab2:	f000 fcf9 	bl	80044a8 <ST7789_FillScreen>
    current_lcd_row = 0;							// Reset row counter when screen is cleared
 8003ab6:	4b02      	ldr	r3, [pc, #8]	@ (8003ac0 <LCD_Clear+0x14>)
 8003ab8:	2200      	movs	r2, #0
 8003aba:	701a      	strb	r2, [r3, #0]
}
 8003abc:	bf00      	nop
 8003abe:	bd80      	pop	{r7, pc}
 8003ac0:	20000381 	.word	0x20000381

08003ac4 <LCD_SetCursor>:

void LCD_SetCursor(uint8_t row, uint8_t col)
{
 8003ac4:	b480      	push	{r7}
 8003ac6:	b083      	sub	sp, #12
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	4603      	mov	r3, r0
 8003acc:	460a      	mov	r2, r1
 8003ace:	71fb      	strb	r3, [r7, #7]
 8003ad0:	4613      	mov	r3, r2
 8003ad2:	71bb      	strb	r3, [r7, #6]
    if (row * current_font->Height < ST7789_HEIGHT)	// For graphical LCDs like ST7789, a "cursor" is often managed by the drawing functions.
 8003ad4:	79fb      	ldrb	r3, [r7, #7]
 8003ad6:	4a08      	ldr	r2, [pc, #32]	@ (8003af8 <LCD_SetCursor+0x34>)
 8003ad8:	6812      	ldr	r2, [r2, #0]
 8003ada:	88d2      	ldrh	r2, [r2, #6]
 8003adc:	fb02 f303 	mul.w	r3, r2, r3
 8003ae0:	f5b3 7f8c 	cmp.w	r3, #280	@ 0x118
 8003ae4:	da02      	bge.n	8003aec <LCD_SetCursor+0x28>
    {												// We'll update our internal `current_lcd_row` for `LCD_PrintString`.
        current_lcd_row = row;
 8003ae6:	4a05      	ldr	r2, [pc, #20]	@ (8003afc <LCD_SetCursor+0x38>)
 8003ae8:	79fb      	ldrb	r3, [r7, #7]
 8003aea:	7013      	strb	r3, [r2, #0]
    }
    (void)col;										// Suppress unused parameter warning
}
 8003aec:	bf00      	nop
 8003aee:	370c      	adds	r7, #12
 8003af0:	46bd      	mov	sp, r7
 8003af2:	bc80      	pop	{r7}
 8003af4:	4770      	bx	lr
 8003af6:	bf00      	nop
 8003af8:	20000008 	.word	0x20000008
 8003afc:	20000381 	.word	0x20000381

08003b00 <LCD_PrintString>:

void LCD_PrintString(const char *str)
{
 8003b00:	b580      	push	{r7, lr}
 8003b02:	b086      	sub	sp, #24
 8003b04:	af02      	add	r7, sp, #8
 8003b06:	6078      	str	r0, [r7, #4]
    uint16_t y_pos = current_lcd_row * current_font->Height;	// Calculate the Y position for the current line based on font height
 8003b08:	4b18      	ldr	r3, [pc, #96]	@ (8003b6c <LCD_PrintString+0x6c>)
 8003b0a:	781b      	ldrb	r3, [r3, #0]
 8003b0c:	461a      	mov	r2, r3
 8003b0e:	4b18      	ldr	r3, [pc, #96]	@ (8003b70 <LCD_PrintString+0x70>)
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	88db      	ldrh	r3, [r3, #6]
 8003b14:	fb12 f303 	smulbb	r3, r2, r3
 8003b18:	81fb      	strh	r3, [r7, #14]
    uint16_t x_pos = 0;											// Start printing from the left edge
 8003b1a:	2300      	movs	r3, #0
 8003b1c:	81bb      	strh	r3, [r7, #12]

    if (y_pos >= ST7789_HEIGHT)									// Ensure we don't write outside the screen height
 8003b1e:	89fb      	ldrh	r3, [r7, #14]
 8003b20:	f5b3 7f8c 	cmp.w	r3, #280	@ 0x118
 8003b24:	d306      	bcc.n	8003b34 <LCD_PrintString+0x34>
    {
        current_lcd_row = 0;									// If we exceed screen height, wrap around to the top and clear
 8003b26:	4b11      	ldr	r3, [pc, #68]	@ (8003b6c <LCD_PrintString+0x6c>)
 8003b28:	2200      	movs	r2, #0
 8003b2a:	701a      	strb	r2, [r3, #0]
        y_pos = 0;
 8003b2c:	2300      	movs	r3, #0
 8003b2e:	81fb      	strh	r3, [r7, #14]
        LCD_Clear();
 8003b30:	f7ff ffbc 	bl	8003aac <LCD_Clear>
    }

    ST7789_WriteString(x_pos, y_pos, (char*)str, current_font, ST7789_WHITE, ST7789_BLUE);		// Text colour WHITE, background BLACK
 8003b34:	f9b7 000c 	ldrsh.w	r0, [r7, #12]
 8003b38:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 8003b3c:	4b0c      	ldr	r3, [pc, #48]	@ (8003b70 <LCD_PrintString+0x70>)
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	221f      	movs	r2, #31
 8003b42:	9201      	str	r2, [sp, #4]
 8003b44:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003b48:	9200      	str	r2, [sp, #0]
 8003b4a:	687a      	ldr	r2, [r7, #4]
 8003b4c:	f000 fe1a 	bl	8004784 <ST7789_WriteString>

    current_lcd_row++;																			// Move to the next line for the next print
 8003b50:	4b06      	ldr	r3, [pc, #24]	@ (8003b6c <LCD_PrintString+0x6c>)
 8003b52:	781b      	ldrb	r3, [r3, #0]
 8003b54:	3301      	adds	r3, #1
 8003b56:	b2da      	uxtb	r2, r3
 8003b58:	4b04      	ldr	r3, [pc, #16]	@ (8003b6c <LCD_PrintString+0x6c>)
 8003b5a:	701a      	strb	r2, [r3, #0]

    printf("LCD_PrintString: %s\r\n", str);														// For serial debugging
 8003b5c:	6879      	ldr	r1, [r7, #4]
 8003b5e:	4805      	ldr	r0, [pc, #20]	@ (8003b74 <LCD_PrintString+0x74>)
 8003b60:	f00a fd88 	bl	800e674 <iprintf>
}
 8003b64:	bf00      	nop
 8003b66:	3710      	adds	r7, #16
 8003b68:	46bd      	mov	sp, r7
 8003b6a:	bd80      	pop	{r7, pc}
 8003b6c:	20000381 	.word	0x20000381
 8003b70:	20000008 	.word	0x20000008
 8003b74:	080109e4 	.word	0x080109e4

08003b78 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	b086      	sub	sp, #24
 8003b7c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003b7e:	f001 fbbf 	bl	8005300 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the System Power */
  SystemPower_Config();
 8003b82:	f000 fa75 	bl	8004070 <SystemPower_Config>

  /* Configure the system clock */
  SystemClock_Config();
 8003b86:	f000 fa19 	bl	8003fbc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003b8a:	f7ff fd27 	bl	80035dc <MX_GPIO_Init>
  MX_ICACHE_Init();
 8003b8e:	f7ff ff61 	bl	8003a54 <MX_ICACHE_Init>
  MX_SPI1_Init();
 8003b92:	f000 fa95 	bl	80040c0 <MX_SPI1_Init>
  MX_TIM2_Init();
 8003b96:	f001 f85f 	bl	8004c58 <MX_TIM2_Init>
  MX_I2C1_Init();
 8003b9a:	f7ff fe11 	bl	80037c0 <MX_I2C1_Init>
  MX_I2C3_Init();
 8003b9e:	f7ff fe4f 	bl	8003840 <MX_I2C3_Init>
  MX_USART2_UART_Init();
 8003ba2:	f001 f8c7 	bl	8004d34 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  LCD_Init();													// This will call ST7789_Init() internally
 8003ba6:	f7ff ff69 	bl	8003a7c <LCD_Init>

  bme69x_i2c_user_handle.hi2c = &hi2c3;							// Initialize user-defined I2C handle for BME690
 8003baa:	4b8f      	ldr	r3, [pc, #572]	@ (8003de8 <main+0x270>)
 8003bac:	4a8f      	ldr	r2, [pc, #572]	@ (8003dec <main+0x274>)
 8003bae:	601a      	str	r2, [r3, #0]
  bme69x_i2c_user_handle.i2c_addr = BME69X_I2C_ADDR_PRIM;
 8003bb0:	4b8d      	ldr	r3, [pc, #564]	@ (8003de8 <main+0x270>)
 8003bb2:	2276      	movs	r2, #118	@ 0x76
 8003bb4:	711a      	strb	r2, [r3, #4]

  bme69x_sensor.intf_ptr = &bme69x_i2c_user_handle;				// Assign BME69x sensor structure parameters (using the functions from bme69x_user.c)
 8003bb6:	4b8e      	ldr	r3, [pc, #568]	@ (8003df0 <main+0x278>)
 8003bb8:	4a8b      	ldr	r2, [pc, #556]	@ (8003de8 <main+0x270>)
 8003bba:	605a      	str	r2, [r3, #4]
  bme69x_sensor.read = bme69x_i2c_read;
 8003bbc:	4b8c      	ldr	r3, [pc, #560]	@ (8003df0 <main+0x278>)
 8003bbe:	4a8d      	ldr	r2, [pc, #564]	@ (8003df4 <main+0x27c>)
 8003bc0:	63da      	str	r2, [r3, #60]	@ 0x3c
  bme69x_sensor.write = bme69x_i2c_write;
 8003bc2:	4b8b      	ldr	r3, [pc, #556]	@ (8003df0 <main+0x278>)
 8003bc4:	4a8c      	ldr	r2, [pc, #560]	@ (8003df8 <main+0x280>)
 8003bc6:	641a      	str	r2, [r3, #64]	@ 0x40
  bme69x_sensor.delay_us = bme69x_delay_us;
 8003bc8:	4b89      	ldr	r3, [pc, #548]	@ (8003df0 <main+0x278>)
 8003bca:	4a8c      	ldr	r2, [pc, #560]	@ (8003dfc <main+0x284>)
 8003bcc:	645a      	str	r2, [r3, #68]	@ 0x44
  bme69x_sensor.intf = BME69X_I2C_INTF;
 8003bce:	4b88      	ldr	r3, [pc, #544]	@ (8003df0 <main+0x278>)
 8003bd0:	2201      	movs	r2, #1
 8003bd2:	731a      	strb	r2, [r3, #12]

  /*   Initialize BME69x sensor   */
  rslt = bme69x_init(&bme69x_sensor);
 8003bd4:	4886      	ldr	r0, [pc, #536]	@ (8003df0 <main+0x278>)
 8003bd6:	f7fd fc77 	bl	80014c8 <bme69x_init>
 8003bda:	4603      	mov	r3, r0
 8003bdc:	73fb      	strb	r3, [r7, #15]
  if (rslt != BME69X_OK)
 8003bde:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d016      	beq.n	8003c14 <main+0x9c>
  {
      printf("BME69X Init Failed: %d\r\n", rslt);
 8003be6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003bea:	4619      	mov	r1, r3
 8003bec:	4884      	ldr	r0, [pc, #528]	@ (8003e00 <main+0x288>)
 8003bee:	f00a fd41 	bl	800e674 <iprintf>
      snprintf(lcd_buffer, LCD_LINE_MAX_LEN + 1, "BME69X Init Fail: %d", rslt);		// Display error on LCD
 8003bf2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003bf6:	4a83      	ldr	r2, [pc, #524]	@ (8003e04 <main+0x28c>)
 8003bf8:	2129      	movs	r1, #41	@ 0x29
 8003bfa:	4883      	ldr	r0, [pc, #524]	@ (8003e08 <main+0x290>)
 8003bfc:	f00a fc42 	bl	800e484 <sniprintf>
      LCD_SetCursor(0, 0);
 8003c00:	2100      	movs	r1, #0
 8003c02:	2000      	movs	r0, #0
 8003c04:	f7ff ff5e 	bl	8003ac4 <LCD_SetCursor>
      LCD_PrintString(lcd_buffer);
 8003c08:	487f      	ldr	r0, [pc, #508]	@ (8003e08 <main+0x290>)
 8003c0a:	f7ff ff79 	bl	8003b00 <LCD_PrintString>
      Error_Handler();
 8003c0e:	f000 fa51 	bl	80040b4 <Error_Handler>
 8003c12:	e012      	b.n	8003c3a <main+0xc2>
  }
  else
  {
      printf("BME69X Init Success!\r\n");
 8003c14:	487d      	ldr	r0, [pc, #500]	@ (8003e0c <main+0x294>)
 8003c16:	f00a fd95 	bl	800e744 <puts>
      snprintf(lcd_buffer, LCD_LINE_MAX_LEN + 1, "BME69X Init OK");					// Display success on LCD
 8003c1a:	4a7d      	ldr	r2, [pc, #500]	@ (8003e10 <main+0x298>)
 8003c1c:	2129      	movs	r1, #41	@ 0x29
 8003c1e:	487a      	ldr	r0, [pc, #488]	@ (8003e08 <main+0x290>)
 8003c20:	f00a fc30 	bl	800e484 <sniprintf>
      LCD_SetCursor(3, 1);
 8003c24:	2101      	movs	r1, #1
 8003c26:	2003      	movs	r0, #3
 8003c28:	f7ff ff4c 	bl	8003ac4 <LCD_SetCursor>
      LCD_PrintString(lcd_buffer);
 8003c2c:	4876      	ldr	r0, [pc, #472]	@ (8003e08 <main+0x290>)
 8003c2e:	f7ff ff67 	bl	8003b00 <LCD_PrintString>
      HAL_Delay(500);																// Small delay to show init message
 8003c32:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8003c36:	f001 fbaf 	bl	8005398 <HAL_Delay>
  }

  /*   TPH Sensor configuration for bme69x_conf (separate struct)   */
  bme69x_conf.os_hum = BME69X_OS_2X;
 8003c3a:	4b76      	ldr	r3, [pc, #472]	@ (8003e14 <main+0x29c>)
 8003c3c:	2202      	movs	r2, #2
 8003c3e:	701a      	strb	r2, [r3, #0]
  bme69x_conf.os_pres = BME69X_OS_16X;
 8003c40:	4b74      	ldr	r3, [pc, #464]	@ (8003e14 <main+0x29c>)
 8003c42:	2205      	movs	r2, #5
 8003c44:	709a      	strb	r2, [r3, #2]
  bme69x_conf.os_temp = BME69X_OS_4X;
 8003c46:	4b73      	ldr	r3, [pc, #460]	@ (8003e14 <main+0x29c>)
 8003c48:	2203      	movs	r2, #3
 8003c4a:	705a      	strb	r2, [r3, #1]
  bme69x_conf.filter = BME69X_FILTER_SIZE_3;
 8003c4c:	4b71      	ldr	r3, [pc, #452]	@ (8003e14 <main+0x29c>)
 8003c4e:	2202      	movs	r2, #2
 8003c50:	70da      	strb	r2, [r3, #3]
  bme69x_conf.odr = BME69X_ODR_500_MS;												// Output Data Rate
 8003c52:	4b70      	ldr	r3, [pc, #448]	@ (8003e14 <main+0x29c>)
 8003c54:	2204      	movs	r2, #4
 8003c56:	711a      	strb	r2, [r3, #4]

  /*   Set the TPH sensor configuration   */
  rslt = bme69x_set_conf(&bme69x_conf, &bme69x_sensor);
 8003c58:	4965      	ldr	r1, [pc, #404]	@ (8003df0 <main+0x278>)
 8003c5a:	486e      	ldr	r0, [pc, #440]	@ (8003e14 <main+0x29c>)
 8003c5c:	f7fd fd78 	bl	8001750 <bme69x_set_conf>
 8003c60:	4603      	mov	r3, r0
 8003c62:	73fb      	strb	r3, [r7, #15]
  if (rslt != BME69X_OK)
 8003c64:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d015      	beq.n	8003c98 <main+0x120>
  {
      printf("BME69X Set TPH Settings Failed: %d\r\n", rslt);
 8003c6c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003c70:	4619      	mov	r1, r3
 8003c72:	4869      	ldr	r0, [pc, #420]	@ (8003e18 <main+0x2a0>)
 8003c74:	f00a fcfe 	bl	800e674 <iprintf>
      snprintf(lcd_buffer, LCD_LINE_MAX_LEN + 1, "BME69X TPH Conf Fail: %d", rslt);	// Display error on LCD
 8003c78:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003c7c:	4a67      	ldr	r2, [pc, #412]	@ (8003e1c <main+0x2a4>)
 8003c7e:	2129      	movs	r1, #41	@ 0x29
 8003c80:	4861      	ldr	r0, [pc, #388]	@ (8003e08 <main+0x290>)
 8003c82:	f00a fbff 	bl	800e484 <sniprintf>
      LCD_SetCursor(1, 0);
 8003c86:	2100      	movs	r1, #0
 8003c88:	2001      	movs	r0, #1
 8003c8a:	f7ff ff1b 	bl	8003ac4 <LCD_SetCursor>
      LCD_PrintString(lcd_buffer);
 8003c8e:	485e      	ldr	r0, [pc, #376]	@ (8003e08 <main+0x290>)
 8003c90:	f7ff ff36 	bl	8003b00 <LCD_PrintString>
      Error_Handler();
 8003c94:	f000 fa0e 	bl	80040b4 <Error_Handler>
  }

  /*   Populate the bme69x_heatr_conf struct   */
  heatr_config.heatr_temp = 320;													// Degree Celsius
 8003c98:	4b61      	ldr	r3, [pc, #388]	@ (8003e20 <main+0x2a8>)
 8003c9a:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8003c9e:	805a      	strh	r2, [r3, #2]
  heatr_config.heatr_dur = 150;														// Millisecond
 8003ca0:	4b5f      	ldr	r3, [pc, #380]	@ (8003e20 <main+0x2a8>)
 8003ca2:	2296      	movs	r2, #150	@ 0x96
 8003ca4:	809a      	strh	r2, [r3, #4]
  heatr_config.enable = BME69X_ENABLE_GAS_MEAS;										// Assuming 'enable' is the field name for running gas
 8003ca6:	4b5e      	ldr	r3, [pc, #376]	@ (8003e20 <main+0x2a8>)
 8003ca8:	2201      	movs	r2, #1
 8003caa:	701a      	strb	r2, [r3, #0]

  /*   Call bme69x_set_heatr_conf with the correct arguments: op_mode, pointer to heatr_config, and device pointer   */
  rslt = bme69x_set_heatr_conf(BME69X_FORCED_MODE, &heatr_config, &bme69x_sensor);
 8003cac:	4a50      	ldr	r2, [pc, #320]	@ (8003df0 <main+0x278>)
 8003cae:	495c      	ldr	r1, [pc, #368]	@ (8003e20 <main+0x2a8>)
 8003cb0:	2001      	movs	r0, #1
 8003cb2:	f7fe f84b 	bl	8001d4c <bme69x_set_heatr_conf>
 8003cb6:	4603      	mov	r3, r0
 8003cb8:	73fb      	strb	r3, [r7, #15]
  if (rslt != BME69X_OK)
 8003cba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d015      	beq.n	8003cee <main+0x176>
  {
      printf("BME69X Set Heater Config Failed: %d\r\n", rslt);
 8003cc2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003cc6:	4619      	mov	r1, r3
 8003cc8:	4856      	ldr	r0, [pc, #344]	@ (8003e24 <main+0x2ac>)
 8003cca:	f00a fcd3 	bl	800e674 <iprintf>
      snprintf(lcd_buffer, LCD_LINE_MAX_LEN + 1, "BME69X Heater Fail: %d", rslt);	// Display error on LCD
 8003cce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003cd2:	4a55      	ldr	r2, [pc, #340]	@ (8003e28 <main+0x2b0>)
 8003cd4:	2129      	movs	r1, #41	@ 0x29
 8003cd6:	484c      	ldr	r0, [pc, #304]	@ (8003e08 <main+0x290>)
 8003cd8:	f00a fbd4 	bl	800e484 <sniprintf>
      LCD_SetCursor(2, 0);
 8003cdc:	2100      	movs	r1, #0
 8003cde:	2002      	movs	r0, #2
 8003ce0:	f7ff fef0 	bl	8003ac4 <LCD_SetCursor>
      LCD_PrintString(lcd_buffer);
 8003ce4:	4848      	ldr	r0, [pc, #288]	@ (8003e08 <main+0x290>)
 8003ce6:	f7ff ff0b 	bl	8003b00 <LCD_PrintString>
      Error_Handler();
 8003cea:	f000 f9e3 	bl	80040b4 <Error_Handler>
  }

  /*   Set the power mode to forced mode   */
  rslt = bme69x_set_op_mode(BME69X_FORCED_MODE, &bme69x_sensor);
 8003cee:	4940      	ldr	r1, [pc, #256]	@ (8003df0 <main+0x278>)
 8003cf0:	2001      	movs	r0, #1
 8003cf2:	f7fd fe37 	bl	8001964 <bme69x_set_op_mode>
 8003cf6:	4603      	mov	r3, r0
 8003cf8:	73fb      	strb	r3, [r7, #15]
  if (rslt != BME69X_OK)
 8003cfa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d015      	beq.n	8003d2e <main+0x1b6>
  {
      printf("BME69X Set Op Mode Failed: %d\r\n", rslt);
 8003d02:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003d06:	4619      	mov	r1, r3
 8003d08:	4848      	ldr	r0, [pc, #288]	@ (8003e2c <main+0x2b4>)
 8003d0a:	f00a fcb3 	bl	800e674 <iprintf>
      snprintf(lcd_buffer, LCD_LINE_MAX_LEN + 1, "BME69X Mode Fail: %d", rslt);		// Display error on LCD
 8003d0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003d12:	4a47      	ldr	r2, [pc, #284]	@ (8003e30 <main+0x2b8>)
 8003d14:	2129      	movs	r1, #41	@ 0x29
 8003d16:	483c      	ldr	r0, [pc, #240]	@ (8003e08 <main+0x290>)
 8003d18:	f00a fbb4 	bl	800e484 <sniprintf>
      LCD_SetCursor(3, 0);
 8003d1c:	2100      	movs	r1, #0
 8003d1e:	2003      	movs	r0, #3
 8003d20:	f7ff fed0 	bl	8003ac4 <LCD_SetCursor>
      LCD_PrintString(lcd_buffer);
 8003d24:	4838      	ldr	r0, [pc, #224]	@ (8003e08 <main+0x290>)
 8003d26:	f7ff feeb 	bl	8003b00 <LCD_PrintString>
      Error_Handler();
 8003d2a:	f000 f9c3 	bl	80040b4 <Error_Handler>
  }

  /*   Get the recommended measurement period for forced mode in microseconds   */
  meas_period_us = bme69x_get_meas_dur(BME69X_FORCED_MODE, &bme69x_conf, &bme69x_sensor) * 1000;
 8003d2e:	4a30      	ldr	r2, [pc, #192]	@ (8003df0 <main+0x278>)
 8003d30:	4938      	ldr	r1, [pc, #224]	@ (8003e14 <main+0x29c>)
 8003d32:	2001      	movs	r0, #1
 8003d34:	f7fd fe98 	bl	8001a68 <bme69x_get_meas_dur>
 8003d38:	4603      	mov	r3, r0
 8003d3a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8003d3e:	fb02 f303 	mul.w	r3, r2, r3
 8003d42:	60bb      	str	r3, [r7, #8]

  LCD_Clear(); 																		// Clear display before starting main loop measurements
 8003d44:	f7ff feb2 	bl	8003aac <LCD_Clear>

  /* USER CODE END 2 */

  /* Initialize leds */
  BSP_LED_Init(LED_GREEN);
 8003d48:	2000      	movs	r0, #0
 8003d4a:	f001 f8d1 	bl	8004ef0 <BSP_LED_Init>
  BSP_LED_Init(LED_BLUE);
 8003d4e:	2001      	movs	r0, #1
 8003d50:	f001 f8ce 	bl	8004ef0 <BSP_LED_Init>
  BSP_LED_Init(LED_RED);
 8003d54:	2002      	movs	r0, #2
 8003d56:	f001 f8cb 	bl	8004ef0 <BSP_LED_Init>

  /* Initialize USER push-button, will be used to trigger an interrupt each time it's pressed.*/
  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 8003d5a:	2101      	movs	r1, #1
 8003d5c:	2000      	movs	r0, #0
 8003d5e:	f001 f957 	bl	8005010 <BSP_PB_Init>

  /* Initialize COM1 port (115200, 8 bits (7-bit data + 1 stop bit), no parity */
  BspCOMInit.BaudRate   = 115200;
 8003d62:	4b34      	ldr	r3, [pc, #208]	@ (8003e34 <main+0x2bc>)
 8003d64:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8003d68:	601a      	str	r2, [r3, #0]
  BspCOMInit.WordLength = COM_WORDLENGTH_8B;
 8003d6a:	4b32      	ldr	r3, [pc, #200]	@ (8003e34 <main+0x2bc>)
 8003d6c:	2200      	movs	r2, #0
 8003d6e:	605a      	str	r2, [r3, #4]
  BspCOMInit.StopBits   = COM_STOPBITS_1;
 8003d70:	4b30      	ldr	r3, [pc, #192]	@ (8003e34 <main+0x2bc>)
 8003d72:	2200      	movs	r2, #0
 8003d74:	811a      	strh	r2, [r3, #8]
  BspCOMInit.Parity     = COM_PARITY_NONE;
 8003d76:	4b2f      	ldr	r3, [pc, #188]	@ (8003e34 <main+0x2bc>)
 8003d78:	2200      	movs	r2, #0
 8003d7a:	815a      	strh	r2, [r3, #10]
  BspCOMInit.HwFlowCtl  = COM_HWCONTROL_NONE;
 8003d7c:	4b2d      	ldr	r3, [pc, #180]	@ (8003e34 <main+0x2bc>)
 8003d7e:	2200      	movs	r2, #0
 8003d80:	819a      	strh	r2, [r3, #12]
  if (BSP_COM_Init(COM1, &BspCOMInit) != BSP_ERROR_NONE)
 8003d82:	492c      	ldr	r1, [pc, #176]	@ (8003e34 <main+0x2bc>)
 8003d84:	2000      	movs	r0, #0
 8003d86:	f001 f9db 	bl	8005140 <BSP_COM_Init>
 8003d8a:	4603      	mov	r3, r0
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d001      	beq.n	8003d94 <main+0x21c>
  {
    Error_Handler();
 8003d90:	f000 f990 	bl	80040b4 <Error_Handler>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    bme69x_delay_us(meas_period_us, bme69x_sensor.intf_ptr);								// Delay for the measurement to complete
 8003d94:	4b16      	ldr	r3, [pc, #88]	@ (8003df0 <main+0x278>)
 8003d96:	685b      	ldr	r3, [r3, #4]
 8003d98:	4619      	mov	r1, r3
 8003d9a:	68b8      	ldr	r0, [r7, #8]
 8003d9c:	f7ff fbfe 	bl	800359c <bme69x_delay_us>

    rslt = bme69x_set_op_mode(BME69X_FORCED_MODE, &bme69x_sensor);							// Set sensor to forced mode again before reading
 8003da0:	4913      	ldr	r1, [pc, #76]	@ (8003df0 <main+0x278>)
 8003da2:	2001      	movs	r0, #1
 8003da4:	f7fd fdde 	bl	8001964 <bme69x_set_op_mode>
 8003da8:	4603      	mov	r3, r0
 8003daa:	73fb      	strb	r3, [r7, #15]
    if (rslt != BME69X_OK)
 8003dac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d045      	beq.n	8003e40 <main+0x2c8>
    {
        printf("BME69X Set Op Mode Failed (loop start): %d\r\n", rslt);
 8003db4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003db8:	4619      	mov	r1, r3
 8003dba:	481f      	ldr	r0, [pc, #124]	@ (8003e38 <main+0x2c0>)
 8003dbc:	f00a fc5a 	bl	800e674 <iprintf>
        snprintf(lcd_buffer, LCD_LINE_MAX_LEN + 1, "Mode Err (loop): %d", rslt);
 8003dc0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003dc4:	4a1d      	ldr	r2, [pc, #116]	@ (8003e3c <main+0x2c4>)
 8003dc6:	2129      	movs	r1, #41	@ 0x29
 8003dc8:	480f      	ldr	r0, [pc, #60]	@ (8003e08 <main+0x290>)
 8003dca:	f00a fb5b 	bl	800e484 <sniprintf>
        LCD_SetCursor(0, 0);
 8003dce:	2100      	movs	r1, #0
 8003dd0:	2000      	movs	r0, #0
 8003dd2:	f7ff fe77 	bl	8003ac4 <LCD_SetCursor>
        LCD_PrintString(lcd_buffer);
 8003dd6:	480c      	ldr	r0, [pc, #48]	@ (8003e08 <main+0x290>)
 8003dd8:	f7ff fe92 	bl	8003b00 <LCD_PrintString>
        HAL_Delay(2000); // Wait before retrying
 8003ddc:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8003de0:	f001 fada 	bl	8005398 <HAL_Delay>
        continue; // Skip data read if mode setting failed
 8003de4:	e0d0      	b.n	8003f88 <main+0x410>
 8003de6:	bf00      	nop
 8003de8:	20000350 	.word	0x20000350
 8003dec:	2000026c 	.word	0x2000026c
 8003df0:	200002d0 	.word	0x200002d0
 8003df4:	080034f3 	.word	0x080034f3
 8003df8:	08003547 	.word	0x08003547
 8003dfc:	0800359d 	.word	0x0800359d
 8003e00:	080109fc 	.word	0x080109fc
 8003e04:	08010a18 	.word	0x08010a18
 8003e08:	20000358 	.word	0x20000358
 8003e0c:	08010a30 	.word	0x08010a30
 8003e10:	08010a48 	.word	0x08010a48
 8003e14:	20000334 	.word	0x20000334
 8003e18:	08010a58 	.word	0x08010a58
 8003e1c:	08010a80 	.word	0x08010a80
 8003e20:	2000033c 	.word	0x2000033c
 8003e24:	08010a9c 	.word	0x08010a9c
 8003e28:	08010ac4 	.word	0x08010ac4
 8003e2c:	08010adc 	.word	0x08010adc
 8003e30:	08010afc 	.word	0x08010afc
 8003e34:	200002c0 	.word	0x200002c0
 8003e38:	08010b14 	.word	0x08010b14
 8003e3c:	08010b44 	.word	0x08010b44
    }

    rslt = bme69x_get_data(BME69X_FORCED_MODE, &bme69x_data, &n_fields, &bme69x_sensor);	// Get sensor data. The 'n_fields' parameter is still required.
 8003e40:	1dfa      	adds	r2, r7, #7
 8003e42:	4b52      	ldr	r3, [pc, #328]	@ (8003f8c <main+0x414>)
 8003e44:	4952      	ldr	r1, [pc, #328]	@ (8003f90 <main+0x418>)
 8003e46:	2001      	movs	r0, #1
 8003e48:	f7fd fe82 	bl	8001b50 <bme69x_get_data>
 8003e4c:	4603      	mov	r3, r0
 8003e4e:	73fb      	strb	r3, [r7, #15]

    LCD_Clear(); // Clear LCD before printing new data in each loop iteration
 8003e50:	f7ff fe2c 	bl	8003aac <LCD_Clear>

    if (rslt == BME69X_OK)
 8003e54:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d17d      	bne.n	8003f58 <main+0x3e0>
        // Removed specific validity mask checks, as they are undeclared.
        // Data is displayed if the overall read was successful.
        // The BME69X_GASM_VALID_MSK check is retained as it appeared to be declared.

        // Print Temperature
        snprintf(lcd_buffer, LCD_LINE_MAX_LEN + 1, "Temp: %.2f C", bme69x_data.temperature);
 8003e5c:	4b4c      	ldr	r3, [pc, #304]	@ (8003f90 <main+0x418>)
 8003e5e:	689b      	ldr	r3, [r3, #8]
 8003e60:	4618      	mov	r0, r3
 8003e62:	f7fc fb75 	bl	8000550 <__aeabi_f2d>
 8003e66:	4602      	mov	r2, r0
 8003e68:	460b      	mov	r3, r1
 8003e6a:	e9cd 2300 	strd	r2, r3, [sp]
 8003e6e:	4a49      	ldr	r2, [pc, #292]	@ (8003f94 <main+0x41c>)
 8003e70:	2129      	movs	r1, #41	@ 0x29
 8003e72:	4849      	ldr	r0, [pc, #292]	@ (8003f98 <main+0x420>)
 8003e74:	f00a fb06 	bl	800e484 <sniprintf>
        LCD_SetCursor(3, 0); // Row 0, Col 0
 8003e78:	2100      	movs	r1, #0
 8003e7a:	2003      	movs	r0, #3
 8003e7c:	f7ff fe22 	bl	8003ac4 <LCD_SetCursor>
        LCD_PrintString(lcd_buffer);
 8003e80:	4845      	ldr	r0, [pc, #276]	@ (8003f98 <main+0x420>)
 8003e82:	f7ff fe3d 	bl	8003b00 <LCD_PrintString>
        printf("%s\r\n", lcd_buffer); // For serial debugging
 8003e86:	4944      	ldr	r1, [pc, #272]	@ (8003f98 <main+0x420>)
 8003e88:	4844      	ldr	r0, [pc, #272]	@ (8003f9c <main+0x424>)
 8003e8a:	f00a fbf3 	bl	800e674 <iprintf>

        // Print Humidity
        snprintf(lcd_buffer, LCD_LINE_MAX_LEN + 1, "Hum : %.2f %%RH", bme69x_data.humidity);
 8003e8e:	4b40      	ldr	r3, [pc, #256]	@ (8003f90 <main+0x418>)
 8003e90:	691b      	ldr	r3, [r3, #16]
 8003e92:	4618      	mov	r0, r3
 8003e94:	f7fc fb5c 	bl	8000550 <__aeabi_f2d>
 8003e98:	4602      	mov	r2, r0
 8003e9a:	460b      	mov	r3, r1
 8003e9c:	e9cd 2300 	strd	r2, r3, [sp]
 8003ea0:	4a3f      	ldr	r2, [pc, #252]	@ (8003fa0 <main+0x428>)
 8003ea2:	2129      	movs	r1, #41	@ 0x29
 8003ea4:	483c      	ldr	r0, [pc, #240]	@ (8003f98 <main+0x420>)
 8003ea6:	f00a faed 	bl	800e484 <sniprintf>
        LCD_SetCursor(4, 0); // Row 1, Col 0
 8003eaa:	2100      	movs	r1, #0
 8003eac:	2004      	movs	r0, #4
 8003eae:	f7ff fe09 	bl	8003ac4 <LCD_SetCursor>
        LCD_PrintString(lcd_buffer);
 8003eb2:	4839      	ldr	r0, [pc, #228]	@ (8003f98 <main+0x420>)
 8003eb4:	f7ff fe24 	bl	8003b00 <LCD_PrintString>
        printf("%s\r\n", lcd_buffer);
 8003eb8:	4937      	ldr	r1, [pc, #220]	@ (8003f98 <main+0x420>)
 8003eba:	4838      	ldr	r0, [pc, #224]	@ (8003f9c <main+0x424>)
 8003ebc:	f00a fbda 	bl	800e674 <iprintf>

        // Print Pressure
        snprintf(lcd_buffer, LCD_LINE_MAX_LEN + 1, "Pres: %.2f hPa", bme69x_data.pressure / 100);
 8003ec0:	4b33      	ldr	r3, [pc, #204]	@ (8003f90 <main+0x418>)
 8003ec2:	68db      	ldr	r3, [r3, #12]
 8003ec4:	4937      	ldr	r1, [pc, #220]	@ (8003fa4 <main+0x42c>)
 8003ec6:	4618      	mov	r0, r3
 8003ec8:	f7fd f884 	bl	8000fd4 <__aeabi_fdiv>
 8003ecc:	4603      	mov	r3, r0
 8003ece:	4618      	mov	r0, r3
 8003ed0:	f7fc fb3e 	bl	8000550 <__aeabi_f2d>
 8003ed4:	4602      	mov	r2, r0
 8003ed6:	460b      	mov	r3, r1
 8003ed8:	e9cd 2300 	strd	r2, r3, [sp]
 8003edc:	4a32      	ldr	r2, [pc, #200]	@ (8003fa8 <main+0x430>)
 8003ede:	2129      	movs	r1, #41	@ 0x29
 8003ee0:	482d      	ldr	r0, [pc, #180]	@ (8003f98 <main+0x420>)
 8003ee2:	f00a facf 	bl	800e484 <sniprintf>
        LCD_SetCursor(5, 0); // Row 2, Col 0
 8003ee6:	2100      	movs	r1, #0
 8003ee8:	2005      	movs	r0, #5
 8003eea:	f7ff fdeb 	bl	8003ac4 <LCD_SetCursor>
        LCD_PrintString(lcd_buffer);
 8003eee:	482a      	ldr	r0, [pc, #168]	@ (8003f98 <main+0x420>)
 8003ef0:	f7ff fe06 	bl	8003b00 <LCD_PrintString>
        printf("%s\r\n", lcd_buffer);
 8003ef4:	4928      	ldr	r1, [pc, #160]	@ (8003f98 <main+0x420>)
 8003ef6:	4829      	ldr	r0, [pc, #164]	@ (8003f9c <main+0x424>)
 8003ef8:	f00a fbbc 	bl	800e674 <iprintf>

        // Print Gas Resistance (keeping this check as BME69X_GASM_VALID_MSK seemed defined)
        if (bme69x_data.status & BME69X_GASM_VALID_MSK)
 8003efc:	4b24      	ldr	r3, [pc, #144]	@ (8003f90 <main+0x418>)
 8003efe:	781b      	ldrb	r3, [r3, #0]
 8003f00:	f003 0320 	and.w	r3, r3, #32
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d016      	beq.n	8003f36 <main+0x3be>
        {
            snprintf(lcd_buffer, LCD_LINE_MAX_LEN + 1, "Gas : %lu Ohm", (long unsigned int)bme69x_data.gas_resistance);
 8003f08:	4b21      	ldr	r3, [pc, #132]	@ (8003f90 <main+0x418>)
 8003f0a:	695b      	ldr	r3, [r3, #20]
 8003f0c:	4618      	mov	r0, r3
 8003f0e:	f7fd f8fd 	bl	800110c <__aeabi_f2uiz>
 8003f12:	4603      	mov	r3, r0
 8003f14:	4a25      	ldr	r2, [pc, #148]	@ (8003fac <main+0x434>)
 8003f16:	2129      	movs	r1, #41	@ 0x29
 8003f18:	481f      	ldr	r0, [pc, #124]	@ (8003f98 <main+0x420>)
 8003f1a:	f00a fab3 	bl	800e484 <sniprintf>
            LCD_SetCursor(6, 0); // Row 3, Col 0
 8003f1e:	2100      	movs	r1, #0
 8003f20:	2006      	movs	r0, #6
 8003f22:	f7ff fdcf 	bl	8003ac4 <LCD_SetCursor>
            LCD_PrintString(lcd_buffer);
 8003f26:	481c      	ldr	r0, [pc, #112]	@ (8003f98 <main+0x420>)
 8003f28:	f7ff fdea 	bl	8003b00 <LCD_PrintString>
            printf("%s\r\n", lcd_buffer);
 8003f2c:	491a      	ldr	r1, [pc, #104]	@ (8003f98 <main+0x420>)
 8003f2e:	481b      	ldr	r0, [pc, #108]	@ (8003f9c <main+0x424>)
 8003f30:	f00a fba0 	bl	800e674 <iprintf>
 8003f34:	e024      	b.n	8003f80 <main+0x408>
        } else {
             snprintf(lcd_buffer, LCD_LINE_MAX_LEN + 1, "Gas : N/A"); // No gas measurement or invalid
 8003f36:	4a1e      	ldr	r2, [pc, #120]	@ (8003fb0 <main+0x438>)
 8003f38:	2129      	movs	r1, #41	@ 0x29
 8003f3a:	4817      	ldr	r0, [pc, #92]	@ (8003f98 <main+0x420>)
 8003f3c:	f00a faa2 	bl	800e484 <sniprintf>
             LCD_SetCursor(6, 0);
 8003f40:	2100      	movs	r1, #0
 8003f42:	2006      	movs	r0, #6
 8003f44:	f7ff fdbe 	bl	8003ac4 <LCD_SetCursor>
             LCD_PrintString(lcd_buffer);
 8003f48:	4813      	ldr	r0, [pc, #76]	@ (8003f98 <main+0x420>)
 8003f4a:	f7ff fdd9 	bl	8003b00 <LCD_PrintString>
             printf("%s\r\n", lcd_buffer);
 8003f4e:	4912      	ldr	r1, [pc, #72]	@ (8003f98 <main+0x420>)
 8003f50:	4812      	ldr	r0, [pc, #72]	@ (8003f9c <main+0x424>)
 8003f52:	f00a fb8f 	bl	800e674 <iprintf>
 8003f56:	e013      	b.n	8003f80 <main+0x408>
        }
    }
    else
    {
        printf("BME69X Get Data Failed: %d\r\n", rslt);
 8003f58:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003f5c:	4619      	mov	r1, r3
 8003f5e:	4815      	ldr	r0, [pc, #84]	@ (8003fb4 <main+0x43c>)
 8003f60:	f00a fb88 	bl	800e674 <iprintf>
        snprintf(lcd_buffer, LCD_LINE_MAX_LEN + 1, "BME69X Data Error: %d", rslt);
 8003f64:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003f68:	4a13      	ldr	r2, [pc, #76]	@ (8003fb8 <main+0x440>)
 8003f6a:	2129      	movs	r1, #41	@ 0x29
 8003f6c:	480a      	ldr	r0, [pc, #40]	@ (8003f98 <main+0x420>)
 8003f6e:	f00a fa89 	bl	800e484 <sniprintf>
        LCD_SetCursor(0, 0);
 8003f72:	2100      	movs	r1, #0
 8003f74:	2000      	movs	r0, #0
 8003f76:	f7ff fda5 	bl	8003ac4 <LCD_SetCursor>
        LCD_PrintString(lcd_buffer);
 8003f7a:	4807      	ldr	r0, [pc, #28]	@ (8003f98 <main+0x420>)
 8003f7c:	f7ff fdc0 	bl	8003b00 <LCD_PrintString>
    }

    HAL_Delay(500); 												// Delay for 0.5 seconds before next measurement cycle
 8003f80:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8003f84:	f001 fa08 	bl	8005398 <HAL_Delay>
    bme69x_delay_us(meas_period_us, bme69x_sensor.intf_ptr);								// Delay for the measurement to complete
 8003f88:	e704      	b.n	8003d94 <main+0x21c>
 8003f8a:	bf00      	nop
 8003f8c:	200002d0 	.word	0x200002d0
 8003f90:	2000031c 	.word	0x2000031c
 8003f94:	08010b58 	.word	0x08010b58
 8003f98:	20000358 	.word	0x20000358
 8003f9c:	08010b68 	.word	0x08010b68
 8003fa0:	08010b70 	.word	0x08010b70
 8003fa4:	42c80000 	.word	0x42c80000
 8003fa8:	08010b80 	.word	0x08010b80
 8003fac:	08010b90 	.word	0x08010b90
 8003fb0:	08010ba0 	.word	0x08010ba0
 8003fb4:	08010bac 	.word	0x08010bac
 8003fb8:	08010bcc 	.word	0x08010bcc

08003fbc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003fbc:	b580      	push	{r7, lr}
 8003fbe:	b09e      	sub	sp, #120	@ 0x78
 8003fc0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003fc2:	f107 0318 	add.w	r3, r7, #24
 8003fc6:	2260      	movs	r2, #96	@ 0x60
 8003fc8:	2100      	movs	r1, #0
 8003fca:	4618      	mov	r0, r3
 8003fcc:	f00a fbc2 	bl	800e754 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003fd0:	463b      	mov	r3, r7
 8003fd2:	2200      	movs	r2, #0
 8003fd4:	601a      	str	r2, [r3, #0]
 8003fd6:	605a      	str	r2, [r3, #4]
 8003fd8:	609a      	str	r2, [r3, #8]
 8003fda:	60da      	str	r2, [r3, #12]
 8003fdc:	611a      	str	r2, [r3, #16]
 8003fde:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8003fe0:	f44f 3040 	mov.w	r0, #196608	@ 0x30000
 8003fe4:	f003 fa7a 	bl	80074dc <HAL_PWREx_ControlVoltageScaling>
 8003fe8:	4603      	mov	r3, r0
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d001      	beq.n	8003ff2 <SystemClock_Config+0x36>
  {
    Error_Handler();
 8003fee:	f000 f861 	bl	80040b4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003ff2:	2302      	movs	r3, #2
 8003ff4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003ff6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003ffa:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003ffc:	2310      	movs	r3, #16
 8003ffe:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004000:	2302      	movs	r3, #2
 8004002:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8004004:	2302      	movs	r3, #2
 8004006:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLMBOOST = RCC_PLLMBOOST_DIV1;
 8004008:	2300      	movs	r3, #0
 800400a:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLM = 1;
 800400c:	2301      	movs	r3, #1
 800400e:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLN = 10;
 8004010:	230a      	movs	r3, #10
 8004012:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLP = 2;
 8004014:	2302      	movs	r3, #2
 8004016:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8004018:	2302      	movs	r3, #2
 800401a:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLR = 1;
 800401c:	2301      	movs	r3, #1
 800401e:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLLVCIRANGE_1;
 8004020:	230c      	movs	r3, #12
 8004022:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8004024:	2300      	movs	r3, #0
 8004026:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004028:	f107 0318 	add.w	r3, r7, #24
 800402c:	4618      	mov	r0, r3
 800402e:	f003 fb47 	bl	80076c0 <HAL_RCC_OscConfig>
 8004032:	4603      	mov	r3, r0
 8004034:	2b00      	cmp	r3, #0
 8004036:	d001      	beq.n	800403c <SystemClock_Config+0x80>
  {
    Error_Handler();
 8004038:	f000 f83c 	bl	80040b4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800403c:	231f      	movs	r3, #31
 800403e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004040:	2303      	movs	r3, #3
 8004042:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004044:	2300      	movs	r3, #0
 8004046:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8004048:	2300      	movs	r3, #0
 800404a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800404c:	2300      	movs	r3, #0
 800404e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 8004050:	2300      	movs	r3, #0
 8004052:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8004054:	463b      	mov	r3, r7
 8004056:	2104      	movs	r1, #4
 8004058:	4618      	mov	r0, r3
 800405a:	f004 fa0d 	bl	8008478 <HAL_RCC_ClockConfig>
 800405e:	4603      	mov	r3, r0
 8004060:	2b00      	cmp	r3, #0
 8004062:	d001      	beq.n	8004068 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8004064:	f000 f826 	bl	80040b4 <Error_Handler>
  }
}
 8004068:	bf00      	nop
 800406a:	3778      	adds	r7, #120	@ 0x78
 800406c:	46bd      	mov	sp, r7
 800406e:	bd80      	pop	{r7, pc}

08004070 <SystemPower_Config>:
/**
  * @brief Power Configuration
  * @retval None
  */
static void SystemPower_Config(void)
{
 8004070:	b580      	push	{r7, lr}
 8004072:	af00      	add	r7, sp, #0
  HAL_PWREx_EnableVddIO2();
 8004074:	f003 fb08 	bl	8007688 <HAL_PWREx_EnableVddIO2>

  /*
   * Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
   */
  HAL_PWREx_DisableUCPDDeadBattery();
 8004078:	f003 fb14 	bl	80076a4 <HAL_PWREx_DisableUCPDDeadBattery>

  /*
   * Switch to SMPS regulator instead of LDO
   */
  if (HAL_PWREx_ConfigSupply(PWR_SMPS_SUPPLY) != HAL_OK)
 800407c:	2002      	movs	r0, #2
 800407e:	f003 fab5 	bl	80075ec <HAL_PWREx_ConfigSupply>
 8004082:	4603      	mov	r3, r0
 8004084:	2b00      	cmp	r3, #0
 8004086:	d001      	beq.n	800408c <SystemPower_Config+0x1c>
  {
    Error_Handler();
 8004088:	f000 f814 	bl	80040b4 <Error_Handler>
  }
/* USER CODE BEGIN PWR */
/* USER CODE END PWR */
}
 800408c:	bf00      	nop
 800408e:	bd80      	pop	{r7, pc}

08004090 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004090:	b580      	push	{r7, lr}
 8004092:	b082      	sub	sp, #8
 8004094:	af00      	add	r7, sp, #0
 8004096:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM17)
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	4a04      	ldr	r2, [pc, #16]	@ (80040b0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800409e:	4293      	cmp	r3, r2
 80040a0:	d101      	bne.n	80040a6 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 80040a2:	f001 f95d 	bl	8005360 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80040a6:	bf00      	nop
 80040a8:	3708      	adds	r7, #8
 80040aa:	46bd      	mov	sp, r7
 80040ac:	bd80      	pop	{r7, pc}
 80040ae:	bf00      	nop
 80040b0:	40014800 	.word	0x40014800

080040b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80040b4:	b480      	push	{r7}
 80040b6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80040b8:	b672      	cpsid	i
}
 80040ba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80040bc:	bf00      	nop
 80040be:	e7fd      	b.n	80040bc <Error_Handler+0x8>

080040c0 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80040c0:	b580      	push	{r7, lr}
 80040c2:	b084      	sub	sp, #16
 80040c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 0 */

  /* USER CODE END SPI1_Init 0 */

  SPI_AutonomousModeConfTypeDef HAL_SPI_AutonomousMode_Cfg_Struct = {0};
 80040c6:	1d3b      	adds	r3, r7, #4
 80040c8:	2200      	movs	r2, #0
 80040ca:	601a      	str	r2, [r3, #0]
 80040cc:	605a      	str	r2, [r3, #4]
 80040ce:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80040d0:	4b31      	ldr	r3, [pc, #196]	@ (8004198 <MX_SPI1_Init+0xd8>)
 80040d2:	4a32      	ldr	r2, [pc, #200]	@ (800419c <MX_SPI1_Init+0xdc>)
 80040d4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80040d6:	4b30      	ldr	r3, [pc, #192]	@ (8004198 <MX_SPI1_Init+0xd8>)
 80040d8:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80040dc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80040de:	4b2e      	ldr	r3, [pc, #184]	@ (8004198 <MX_SPI1_Init+0xd8>)
 80040e0:	2200      	movs	r2, #0
 80040e2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80040e4:	4b2c      	ldr	r3, [pc, #176]	@ (8004198 <MX_SPI1_Init+0xd8>)
 80040e6:	2207      	movs	r2, #7
 80040e8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80040ea:	4b2b      	ldr	r3, [pc, #172]	@ (8004198 <MX_SPI1_Init+0xd8>)
 80040ec:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80040f0:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 80040f2:	4b29      	ldr	r3, [pc, #164]	@ (8004198 <MX_SPI1_Init+0xd8>)
 80040f4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80040f8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80040fa:	4b27      	ldr	r3, [pc, #156]	@ (8004198 <MX_SPI1_Init+0xd8>)
 80040fc:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8004100:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8004102:	4b25      	ldr	r3, [pc, #148]	@ (8004198 <MX_SPI1_Init+0xd8>)
 8004104:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8004108:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800410a:	4b23      	ldr	r3, [pc, #140]	@ (8004198 <MX_SPI1_Init+0xd8>)
 800410c:	2200      	movs	r2, #0
 800410e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8004110:	4b21      	ldr	r3, [pc, #132]	@ (8004198 <MX_SPI1_Init+0xd8>)
 8004112:	2200      	movs	r2, #0
 8004114:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004116:	4b20      	ldr	r3, [pc, #128]	@ (8004198 <MX_SPI1_Init+0xd8>)
 8004118:	2200      	movs	r2, #0
 800411a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x7;
 800411c:	4b1e      	ldr	r3, [pc, #120]	@ (8004198 <MX_SPI1_Init+0xd8>)
 800411e:	2207      	movs	r2, #7
 8004120:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8004122:	4b1d      	ldr	r3, [pc, #116]	@ (8004198 <MX_SPI1_Init+0xd8>)
 8004124:	2200      	movs	r2, #0
 8004126:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8004128:	4b1b      	ldr	r3, [pc, #108]	@ (8004198 <MX_SPI1_Init+0xd8>)
 800412a:	2200      	movs	r2, #0
 800412c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800412e:	4b1a      	ldr	r3, [pc, #104]	@ (8004198 <MX_SPI1_Init+0xd8>)
 8004130:	2200      	movs	r2, #0
 8004132:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8004134:	4b18      	ldr	r3, [pc, #96]	@ (8004198 <MX_SPI1_Init+0xd8>)
 8004136:	2200      	movs	r2, #0
 8004138:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 800413a:	4b17      	ldr	r3, [pc, #92]	@ (8004198 <MX_SPI1_Init+0xd8>)
 800413c:	2200      	movs	r2, #0
 800413e:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8004140:	4b15      	ldr	r3, [pc, #84]	@ (8004198 <MX_SPI1_Init+0xd8>)
 8004142:	2200      	movs	r2, #0
 8004144:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8004146:	4b14      	ldr	r3, [pc, #80]	@ (8004198 <MX_SPI1_Init+0xd8>)
 8004148:	2200      	movs	r2, #0
 800414a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800414c:	4b12      	ldr	r3, [pc, #72]	@ (8004198 <MX_SPI1_Init+0xd8>)
 800414e:	2200      	movs	r2, #0
 8004150:	659a      	str	r2, [r3, #88]	@ 0x58
  hspi1.Init.ReadyMasterManagement = SPI_RDY_MASTER_MANAGEMENT_INTERNALLY;
 8004152:	4b11      	ldr	r3, [pc, #68]	@ (8004198 <MX_SPI1_Init+0xd8>)
 8004154:	2200      	movs	r2, #0
 8004156:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi1.Init.ReadyPolarity = SPI_RDY_POLARITY_HIGH;
 8004158:	4b0f      	ldr	r3, [pc, #60]	@ (8004198 <MX_SPI1_Init+0xd8>)
 800415a:	2200      	movs	r2, #0
 800415c:	661a      	str	r2, [r3, #96]	@ 0x60
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800415e:	480e      	ldr	r0, [pc, #56]	@ (8004198 <MX_SPI1_Init+0xd8>)
 8004160:	f007 fab6 	bl	800b6d0 <HAL_SPI_Init>
 8004164:	4603      	mov	r3, r0
 8004166:	2b00      	cmp	r3, #0
 8004168:	d001      	beq.n	800416e <MX_SPI1_Init+0xae>
  {
    Error_Handler();
 800416a:	f7ff ffa3 	bl	80040b4 <Error_Handler>
  }
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerState = SPI_AUTO_MODE_DISABLE;
 800416e:	2300      	movs	r3, #0
 8004170:	607b      	str	r3, [r7, #4]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerSelection = SPI_GRP1_GPDMA_CH0_TCF_TRG;
 8004172:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8004176:	60bb      	str	r3, [r7, #8]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerPolarity = SPI_TRIG_POLARITY_RISING;
 8004178:	2300      	movs	r3, #0
 800417a:	60fb      	str	r3, [r7, #12]
  if (HAL_SPIEx_SetConfigAutonomousMode(&hspi1, &HAL_SPI_AutonomousMode_Cfg_Struct) != HAL_OK)
 800417c:	1d3b      	adds	r3, r7, #4
 800417e:	4619      	mov	r1, r3
 8004180:	4805      	ldr	r0, [pc, #20]	@ (8004198 <MX_SPI1_Init+0xd8>)
 8004182:	f008 f8d1 	bl	800c328 <HAL_SPIEx_SetConfigAutonomousMode>
 8004186:	4603      	mov	r3, r0
 8004188:	2b00      	cmp	r3, #0
 800418a:	d001      	beq.n	8004190 <MX_SPI1_Init+0xd0>
  {
    Error_Handler();
 800418c:	f7ff ff92 	bl	80040b4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8004190:	bf00      	nop
 8004192:	3710      	adds	r7, #16
 8004194:	46bd      	mov	sp, r7
 8004196:	bd80      	pop	{r7, pc}
 8004198:	20000384 	.word	0x20000384
 800419c:	40013000 	.word	0x40013000

080041a0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80041a0:	b580      	push	{r7, lr}
 80041a2:	b0ba      	sub	sp, #232	@ 0xe8
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80041a8:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80041ac:	2200      	movs	r2, #0
 80041ae:	601a      	str	r2, [r3, #0]
 80041b0:	605a      	str	r2, [r3, #4]
 80041b2:	609a      	str	r2, [r3, #8]
 80041b4:	60da      	str	r2, [r3, #12]
 80041b6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80041b8:	f107 0310 	add.w	r3, r7, #16
 80041bc:	22c0      	movs	r2, #192	@ 0xc0
 80041be:	2100      	movs	r1, #0
 80041c0:	4618      	mov	r0, r3
 80041c2:	f00a fac7 	bl	800e754 <memset>
  if(spiHandle->Instance==SPI1)
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	4a2b      	ldr	r2, [pc, #172]	@ (8004278 <HAL_SPI_MspInit+0xd8>)
 80041cc:	4293      	cmp	r3, r2
 80041ce:	d14e      	bne.n	800426e <HAL_SPI_MspInit+0xce>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 80041d0:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80041d4:	f04f 0300 	mov.w	r3, #0
 80041d8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.Spi1ClockSelection = RCC_SPI1CLKSOURCE_SYSCLK;
 80041dc:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80041e0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80041e4:	f107 0310 	add.w	r3, r7, #16
 80041e8:	4618      	mov	r0, r3
 80041ea:	f004 fd5f 	bl	8008cac <HAL_RCCEx_PeriphCLKConfig>
 80041ee:	4603      	mov	r3, r0
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d001      	beq.n	80041f8 <HAL_SPI_MspInit+0x58>
    {
      Error_Handler();
 80041f4:	f7ff ff5e 	bl	80040b4 <Error_Handler>
    }

    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80041f8:	4b20      	ldr	r3, [pc, #128]	@ (800427c <HAL_SPI_MspInit+0xdc>)
 80041fa:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80041fe:	4a1f      	ldr	r2, [pc, #124]	@ (800427c <HAL_SPI_MspInit+0xdc>)
 8004200:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8004204:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8004208:	4b1c      	ldr	r3, [pc, #112]	@ (800427c <HAL_SPI_MspInit+0xdc>)
 800420a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800420e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004212:	60fb      	str	r3, [r7, #12]
 8004214:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004216:	4b19      	ldr	r3, [pc, #100]	@ (800427c <HAL_SPI_MspInit+0xdc>)
 8004218:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800421c:	4a17      	ldr	r2, [pc, #92]	@ (800427c <HAL_SPI_MspInit+0xdc>)
 800421e:	f043 0301 	orr.w	r3, r3, #1
 8004222:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8004226:	4b15      	ldr	r3, [pc, #84]	@ (800427c <HAL_SPI_MspInit+0xdc>)
 8004228:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800422c:	f003 0301 	and.w	r3, r3, #1
 8004230:	60bb      	str	r3, [r7, #8]
 8004232:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8004234:	23e0      	movs	r3, #224	@ 0xe0
 8004236:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800423a:	2302      	movs	r3, #2
 800423c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004240:	2300      	movs	r3, #0
 8004242:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004246:	2300      	movs	r3, #0
 8004248:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800424c:	2305      	movs	r3, #5
 800424e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004252:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8004256:	4619      	mov	r1, r3
 8004258:	4809      	ldr	r0, [pc, #36]	@ (8004280 <HAL_SPI_MspInit+0xe0>)
 800425a:	f001 fabf 	bl	80057dc <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 800425e:	2200      	movs	r2, #0
 8004260:	2100      	movs	r1, #0
 8004262:	203b      	movs	r0, #59	@ 0x3b
 8004264:	f001 f971 	bl	800554a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8004268:	203b      	movs	r0, #59	@ 0x3b
 800426a:	f001 f988 	bl	800557e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 800426e:	bf00      	nop
 8004270:	37e8      	adds	r7, #232	@ 0xe8
 8004272:	46bd      	mov	sp, r7
 8004274:	bd80      	pop	{r7, pc}
 8004276:	bf00      	nop
 8004278:	40013000 	.word	0x40013000
 800427c:	46020c00 	.word	0x46020c00
 8004280:	42020000 	.word	0x42020000

08004284 <ST7789_Select>:

// Global SPI handle pointer
SPI_HandleTypeDef *hspi_st7789;

// Internal functions
static void ST7789_Select() {
 8004284:	b580      	push	{r7, lr}
 8004286:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ST7789_CS_GPIO_Port, ST7789_CS_Pin, GPIO_PIN_RESET);
 8004288:	2200      	movs	r2, #0
 800428a:	2110      	movs	r1, #16
 800428c:	4802      	ldr	r0, [pc, #8]	@ (8004298 <ST7789_Select+0x14>)
 800428e:	f001 fc85 	bl	8005b9c <HAL_GPIO_WritePin>
}
 8004292:	bf00      	nop
 8004294:	bd80      	pop	{r7, pc}
 8004296:	bf00      	nop
 8004298:	42020000 	.word	0x42020000

0800429c <ST7789_Unselect>:

static void ST7789_Unselect() {
 800429c:	b580      	push	{r7, lr}
 800429e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ST7789_CS_GPIO_Port, ST7789_CS_Pin, GPIO_PIN_SET);
 80042a0:	2201      	movs	r2, #1
 80042a2:	2110      	movs	r1, #16
 80042a4:	4802      	ldr	r0, [pc, #8]	@ (80042b0 <ST7789_Unselect+0x14>)
 80042a6:	f001 fc79 	bl	8005b9c <HAL_GPIO_WritePin>
}
 80042aa:	bf00      	nop
 80042ac:	bd80      	pop	{r7, pc}
 80042ae:	bf00      	nop
 80042b0:	42020000 	.word	0x42020000

080042b4 <ST7789_WriteCommand>:

void ST7789_WriteCommand(uint8_t cmd) {
 80042b4:	b580      	push	{r7, lr}
 80042b6:	b082      	sub	sp, #8
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	4603      	mov	r3, r0
 80042bc:	71fb      	strb	r3, [r7, #7]
    ST7789_Select();
 80042be:	f7ff ffe1 	bl	8004284 <ST7789_Select>
    HAL_GPIO_WritePin(ST7789_DC_GPIO_Port, ST7789_DC_Pin, GPIO_PIN_RESET); // Command mode
 80042c2:	2200      	movs	r2, #0
 80042c4:	2101      	movs	r1, #1
 80042c6:	4808      	ldr	r0, [pc, #32]	@ (80042e8 <ST7789_WriteCommand+0x34>)
 80042c8:	f001 fc68 	bl	8005b9c <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(hspi_st7789, &cmd, 1, HAL_MAX_DELAY);
 80042cc:	4b07      	ldr	r3, [pc, #28]	@ (80042ec <ST7789_WriteCommand+0x38>)
 80042ce:	6818      	ldr	r0, [r3, #0]
 80042d0:	1df9      	adds	r1, r7, #7
 80042d2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80042d6:	2201      	movs	r2, #1
 80042d8:	f007 fb10 	bl	800b8fc <HAL_SPI_Transmit>
    ST7789_Unselect();
 80042dc:	f7ff ffde 	bl	800429c <ST7789_Unselect>
}
 80042e0:	bf00      	nop
 80042e2:	3708      	adds	r7, #8
 80042e4:	46bd      	mov	sp, r7
 80042e6:	bd80      	pop	{r7, pc}
 80042e8:	42020400 	.word	0x42020400
 80042ec:	20000414 	.word	0x20000414

080042f0 <ST7789_WriteData>:

void ST7789_WriteData(uint8_t *buff, size_t buff_size) {
 80042f0:	b580      	push	{r7, lr}
 80042f2:	b082      	sub	sp, #8
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	6078      	str	r0, [r7, #4]
 80042f8:	6039      	str	r1, [r7, #0]
    ST7789_Select();
 80042fa:	f7ff ffc3 	bl	8004284 <ST7789_Select>
    HAL_GPIO_WritePin(ST7789_DC_GPIO_Port, ST7789_DC_Pin, GPIO_PIN_SET); // Data mode
 80042fe:	2201      	movs	r2, #1
 8004300:	2101      	movs	r1, #1
 8004302:	4809      	ldr	r0, [pc, #36]	@ (8004328 <ST7789_WriteData+0x38>)
 8004304:	f001 fc4a 	bl	8005b9c <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(hspi_st7789, buff, buff_size, HAL_MAX_DELAY);
 8004308:	4b08      	ldr	r3, [pc, #32]	@ (800432c <ST7789_WriteData+0x3c>)
 800430a:	6818      	ldr	r0, [r3, #0]
 800430c:	683b      	ldr	r3, [r7, #0]
 800430e:	b29a      	uxth	r2, r3
 8004310:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004314:	6879      	ldr	r1, [r7, #4]
 8004316:	f007 faf1 	bl	800b8fc <HAL_SPI_Transmit>
    ST7789_Unselect();
 800431a:	f7ff ffbf 	bl	800429c <ST7789_Unselect>
}
 800431e:	bf00      	nop
 8004320:	3708      	adds	r7, #8
 8004322:	46bd      	mov	sp, r7
 8004324:	bd80      	pop	{r7, pc}
 8004326:	bf00      	nop
 8004328:	42020400 	.word	0x42020400
 800432c:	20000414 	.word	0x20000414

08004330 <ST7789_SetAddressWindow>:

void ST7789_SetAddressWindow(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1) {
 8004330:	b590      	push	{r4, r7, lr}
 8004332:	b085      	sub	sp, #20
 8004334:	af00      	add	r7, sp, #0
 8004336:	4604      	mov	r4, r0
 8004338:	4608      	mov	r0, r1
 800433a:	4611      	mov	r1, r2
 800433c:	461a      	mov	r2, r3
 800433e:	4623      	mov	r3, r4
 8004340:	80fb      	strh	r3, [r7, #6]
 8004342:	4603      	mov	r3, r0
 8004344:	80bb      	strh	r3, [r7, #4]
 8004346:	460b      	mov	r3, r1
 8004348:	807b      	strh	r3, [r7, #2]
 800434a:	4613      	mov	r3, r2
 800434c:	803b      	strh	r3, [r7, #0]
    // --- KEY MODIFICATION FOR 240x280 DISPLAY ---
    // For 240x280 ST7789V2, typically a Y-offset is needed.
    // The controller is 240x320, but the panel is 240x280.
    // This centers the 280 pixels vertically within the 320-pixel frame.
    uint16_t y_hardware_offset = 20; // 20 pixels for a 240x280 display
 800434e:	2314      	movs	r3, #20
 8004350:	81fb      	strh	r3, [r7, #14]
    // No X-offset for 240-width displays
    // uint16_t x_hardware_offset = 0; // Or remove this line if it was added for 170x320
    // x0 += x_hardware_offset;
    // x1 += x_hardware_offset;

    y0 += y_hardware_offset;
 8004352:	88ba      	ldrh	r2, [r7, #4]
 8004354:	89fb      	ldrh	r3, [r7, #14]
 8004356:	4413      	add	r3, r2
 8004358:	80bb      	strh	r3, [r7, #4]
    y1 += y_hardware_offset;
 800435a:	883a      	ldrh	r2, [r7, #0]
 800435c:	89fb      	ldrh	r3, [r7, #14]
 800435e:	4413      	add	r3, r2
 8004360:	803b      	strh	r3, [r7, #0]
    // --- END OF KEY MODIFICATION ---

    uint8_t data[4];

    // Column Address Set (CASET)
    ST7789_WriteCommand(ST7789_CASET);
 8004362:	202a      	movs	r0, #42	@ 0x2a
 8004364:	f7ff ffa6 	bl	80042b4 <ST7789_WriteCommand>
    data[0] = (x0 >> 8) & 0xFF;
 8004368:	88fb      	ldrh	r3, [r7, #6]
 800436a:	0a1b      	lsrs	r3, r3, #8
 800436c:	b29b      	uxth	r3, r3
 800436e:	b2db      	uxtb	r3, r3
 8004370:	723b      	strb	r3, [r7, #8]
    data[1] = x0 & 0xFF;
 8004372:	88fb      	ldrh	r3, [r7, #6]
 8004374:	b2db      	uxtb	r3, r3
 8004376:	727b      	strb	r3, [r7, #9]
    data[2] = (x1 >> 8) & 0xFF;
 8004378:	887b      	ldrh	r3, [r7, #2]
 800437a:	0a1b      	lsrs	r3, r3, #8
 800437c:	b29b      	uxth	r3, r3
 800437e:	b2db      	uxtb	r3, r3
 8004380:	72bb      	strb	r3, [r7, #10]
    data[3] = x1 & 0xFF;
 8004382:	887b      	ldrh	r3, [r7, #2]
 8004384:	b2db      	uxtb	r3, r3
 8004386:	72fb      	strb	r3, [r7, #11]
    ST7789_WriteData(data, 4);
 8004388:	f107 0308 	add.w	r3, r7, #8
 800438c:	2104      	movs	r1, #4
 800438e:	4618      	mov	r0, r3
 8004390:	f7ff ffae 	bl	80042f0 <ST7789_WriteData>

    // Row Address Set (RASET)
    ST7789_WriteCommand(ST7789_RASET);
 8004394:	202b      	movs	r0, #43	@ 0x2b
 8004396:	f7ff ff8d 	bl	80042b4 <ST7789_WriteCommand>
    data[0] = (y0 >> 8) & 0xFF;
 800439a:	88bb      	ldrh	r3, [r7, #4]
 800439c:	0a1b      	lsrs	r3, r3, #8
 800439e:	b29b      	uxth	r3, r3
 80043a0:	b2db      	uxtb	r3, r3
 80043a2:	723b      	strb	r3, [r7, #8]
    data[1] = y0 & 0xFF;
 80043a4:	88bb      	ldrh	r3, [r7, #4]
 80043a6:	b2db      	uxtb	r3, r3
 80043a8:	727b      	strb	r3, [r7, #9]
    data[2] = (y1 >> 8) & 0xFF;
 80043aa:	883b      	ldrh	r3, [r7, #0]
 80043ac:	0a1b      	lsrs	r3, r3, #8
 80043ae:	b29b      	uxth	r3, r3
 80043b0:	b2db      	uxtb	r3, r3
 80043b2:	72bb      	strb	r3, [r7, #10]
    data[3] = y1 & 0xFF;
 80043b4:	883b      	ldrh	r3, [r7, #0]
 80043b6:	b2db      	uxtb	r3, r3
 80043b8:	72fb      	strb	r3, [r7, #11]
    ST7789_WriteData(data, 4);
 80043ba:	f107 0308 	add.w	r3, r7, #8
 80043be:	2104      	movs	r1, #4
 80043c0:	4618      	mov	r0, r3
 80043c2:	f7ff ff95 	bl	80042f0 <ST7789_WriteData>

    ST7789_WriteCommand(ST7789_RAMWR); // Memory Write
 80043c6:	202c      	movs	r0, #44	@ 0x2c
 80043c8:	f7ff ff74 	bl	80042b4 <ST7789_WriteCommand>
}
 80043cc:	bf00      	nop
 80043ce:	3714      	adds	r7, #20
 80043d0:	46bd      	mov	sp, r7
 80043d2:	bd90      	pop	{r4, r7, pc}

080043d4 <ST7789_Init>:

void ST7789_Init(SPI_HandleTypeDef *hspi) {
 80043d4:	b580      	push	{r7, lr}
 80043d6:	b084      	sub	sp, #16
 80043d8:	af00      	add	r7, sp, #0
 80043da:	6078      	str	r0, [r7, #4]
    hspi_st7789 = hspi;
 80043dc:	4a30      	ldr	r2, [pc, #192]	@ (80044a0 <ST7789_Init+0xcc>)
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	6013      	str	r3, [r2, #0]

    // Hardware Reset
    HAL_GPIO_WritePin(ST7789_RST_GPIO_Port, ST7789_RST_Pin, GPIO_PIN_SET);
 80043e2:	2201      	movs	r2, #1
 80043e4:	2101      	movs	r1, #1
 80043e6:	482f      	ldr	r0, [pc, #188]	@ (80044a4 <ST7789_Init+0xd0>)
 80043e8:	f001 fbd8 	bl	8005b9c <HAL_GPIO_WritePin>
    HAL_Delay(10);
 80043ec:	200a      	movs	r0, #10
 80043ee:	f000 ffd3 	bl	8005398 <HAL_Delay>
    HAL_GPIO_WritePin(ST7789_RST_GPIO_Port, ST7789_RST_Pin, GPIO_PIN_RESET);
 80043f2:	2200      	movs	r2, #0
 80043f4:	2101      	movs	r1, #1
 80043f6:	482b      	ldr	r0, [pc, #172]	@ (80044a4 <ST7789_Init+0xd0>)
 80043f8:	f001 fbd0 	bl	8005b9c <HAL_GPIO_WritePin>
    HAL_Delay(10);
 80043fc:	200a      	movs	r0, #10
 80043fe:	f000 ffcb 	bl	8005398 <HAL_Delay>
    HAL_GPIO_WritePin(ST7789_RST_GPIO_Port, ST7789_RST_Pin, GPIO_PIN_SET);
 8004402:	2201      	movs	r2, #1
 8004404:	2101      	movs	r1, #1
 8004406:	4827      	ldr	r0, [pc, #156]	@ (80044a4 <ST7789_Init+0xd0>)
 8004408:	f001 fbc8 	bl	8005b9c <HAL_GPIO_WritePin>
    HAL_Delay(120); // Wait for reset to complete
 800440c:	2078      	movs	r0, #120	@ 0x78
 800440e:	f000 ffc3 	bl	8005398 <HAL_Delay>

    // Backlight ON
    ST7789_SetBacklight(1);
 8004412:	2001      	movs	r0, #1
 8004414:	f000 fa26 	bl	8004864 <ST7789_SetBacklight>
    HAL_Delay(10);
 8004418:	200a      	movs	r0, #10
 800441a:	f000 ffbd 	bl	8005398 <HAL_Delay>

    // Initial sequence for ST7789V2 (common for 1.69inch)
    ST7789_WriteCommand(ST7789_SWRESET); // Software reset
 800441e:	2001      	movs	r0, #1
 8004420:	f7ff ff48 	bl	80042b4 <ST7789_WriteCommand>
    HAL_Delay(150);
 8004424:	2096      	movs	r0, #150	@ 0x96
 8004426:	f000 ffb7 	bl	8005398 <HAL_Delay>

    ST7789_WriteCommand(ST7789_SLPOUT);  // Exit sleep
 800442a:	2011      	movs	r0, #17
 800442c:	f7ff ff42 	bl	80042b4 <ST7789_WriteCommand>
    HAL_Delay(10);
 8004430:	200a      	movs	r0, #10
 8004432:	f000 ffb1 	bl	8005398 <HAL_Delay>

    ST7789_WriteCommand(ST7789_COLMOD);  // Set color mode
 8004436:	203a      	movs	r0, #58	@ 0x3a
 8004438:	f7ff ff3c 	bl	80042b4 <ST7789_WriteCommand>
    uint8_t data_colmod[] = {0x05};      // 16-bit color (RGB565)
 800443c:	2305      	movs	r3, #5
 800443e:	733b      	strb	r3, [r7, #12]
    ST7789_WriteData(data_colmod, 1);
 8004440:	f107 030c 	add.w	r3, r7, #12
 8004444:	2101      	movs	r1, #1
 8004446:	4618      	mov	r0, r3
 8004448:	f7ff ff52 	bl	80042f0 <ST7789_WriteData>
    HAL_Delay(10);
 800444c:	200a      	movs	r0, #10
 800444e:	f000 ffa3 	bl	8005398 <HAL_Delay>

    ST7789_WriteCommand(ST7789_MADCTL);  // Memory Data Access Control
 8004452:	2036      	movs	r0, #54	@ 0x36
 8004454:	f7ff ff2e 	bl	80042b4 <ST7789_WriteCommand>
    uint8_t data_madctl[] = {0x00};      // Default: MX=0, MY=0, MV=0, ML=0, RGB=0 (Portrait, top-to-bottom, left-to-right)
 8004458:	2300      	movs	r3, #0
 800445a:	723b      	strb	r3, [r7, #8]
    // 0x60: MV + MX (90deg landscape)
    // 0xA0: MY + MV (270deg landscape)
    // 0xC0: MY + MX + MV + ML (Portrait, 180deg)
    // For 1.69" often 0x00 or 0x60 (landscape)
    // Let's use 0x00 for initial portrait and add rotation function.
    ST7789_WriteData(data_madctl, 1);
 800445c:	f107 0308 	add.w	r3, r7, #8
 8004460:	2101      	movs	r1, #1
 8004462:	4618      	mov	r0, r3
 8004464:	f7ff ff44 	bl	80042f0 <ST7789_WriteData>
    HAL_Delay(10);
 8004468:	200a      	movs	r0, #10
 800446a:	f000 ff95 	bl	8005398 <HAL_Delay>
    //
    // ST7789_WriteCommand(0xB7); // Gate Control
    // uint8_t data_gate[] = {0x35};
    // ST7789_WriteData(data_gate, 1);

    ST7789_WriteCommand(ST7789_INVON);   // Inversion ON
 800446e:	2021      	movs	r0, #33	@ 0x21
 8004470:	f7ff ff20 	bl	80042b4 <ST7789_WriteCommand>
    HAL_Delay(10);
 8004474:	200a      	movs	r0, #10
 8004476:	f000 ff8f 	bl	8005398 <HAL_Delay>

    ST7789_WriteCommand(ST7789_NORON);   // Normal display mode
 800447a:	2013      	movs	r0, #19
 800447c:	f7ff ff1a 	bl	80042b4 <ST7789_WriteCommand>
    HAL_Delay(10);
 8004480:	200a      	movs	r0, #10
 8004482:	f000 ff89 	bl	8005398 <HAL_Delay>

    ST7789_WriteCommand(ST7789_DISPON);  // Display ON
 8004486:	2029      	movs	r0, #41	@ 0x29
 8004488:	f7ff ff14 	bl	80042b4 <ST7789_WriteCommand>
    HAL_Delay(120);
 800448c:	2078      	movs	r0, #120	@ 0x78
 800448e:	f000 ff83 	bl	8005398 <HAL_Delay>

    // Initial fill to black
    ST7789_FillScreen(ST7789_BLACK);
 8004492:	2000      	movs	r0, #0
 8004494:	f000 f808 	bl	80044a8 <ST7789_FillScreen>
}
 8004498:	bf00      	nop
 800449a:	3710      	adds	r7, #16
 800449c:	46bd      	mov	sp, r7
 800449e:	bd80      	pop	{r7, pc}
 80044a0:	20000414 	.word	0x20000414
 80044a4:	42020800 	.word	0x42020800

080044a8 <ST7789_FillScreen>:

void ST7789_FillScreen(uint16_t color) {
 80044a8:	b580      	push	{r7, lr}
 80044aa:	b084      	sub	sp, #16
 80044ac:	af02      	add	r7, sp, #8
 80044ae:	4603      	mov	r3, r0
 80044b0:	80fb      	strh	r3, [r7, #6]
    ST7789_FillRectangle(0, 0, ST7789_WIDTH, ST7789_HEIGHT, color);
 80044b2:	88fb      	ldrh	r3, [r7, #6]
 80044b4:	9300      	str	r3, [sp, #0]
 80044b6:	f44f 738c 	mov.w	r3, #280	@ 0x118
 80044ba:	22f0      	movs	r2, #240	@ 0xf0
 80044bc:	2100      	movs	r1, #0
 80044be:	2000      	movs	r0, #0
 80044c0:	f000 f83c 	bl	800453c <ST7789_FillRectangle>
}
 80044c4:	bf00      	nop
 80044c6:	3708      	adds	r7, #8
 80044c8:	46bd      	mov	sp, r7
 80044ca:	bd80      	pop	{r7, pc}

080044cc <ST7789_DrawPixel>:

void ST7789_DrawPixel(int16_t x, int16_t y, uint16_t color) {
 80044cc:	b580      	push	{r7, lr}
 80044ce:	b084      	sub	sp, #16
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	4603      	mov	r3, r0
 80044d4:	80fb      	strh	r3, [r7, #6]
 80044d6:	460b      	mov	r3, r1
 80044d8:	80bb      	strh	r3, [r7, #4]
 80044da:	4613      	mov	r3, r2
 80044dc:	807b      	strh	r3, [r7, #2]
    if ((x < 0) || (x >= ST7789_WIDTH) || (y < 0) || (y >= ST7789_HEIGHT)) return;
 80044de:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	db25      	blt.n	8004532 <ST7789_DrawPixel+0x66>
 80044e6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80044ea:	2bef      	cmp	r3, #239	@ 0xef
 80044ec:	dc21      	bgt.n	8004532 <ST7789_DrawPixel+0x66>
 80044ee:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	db1d      	blt.n	8004532 <ST7789_DrawPixel+0x66>
 80044f6:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80044fa:	f5b3 7f8c 	cmp.w	r3, #280	@ 0x118
 80044fe:	da18      	bge.n	8004532 <ST7789_DrawPixel+0x66>
    ST7789_SetAddressWindow(x, y, x + 1, y + 1);
 8004500:	88f8      	ldrh	r0, [r7, #6]
 8004502:	88b9      	ldrh	r1, [r7, #4]
 8004504:	88fb      	ldrh	r3, [r7, #6]
 8004506:	3301      	adds	r3, #1
 8004508:	b29a      	uxth	r2, r3
 800450a:	88bb      	ldrh	r3, [r7, #4]
 800450c:	3301      	adds	r3, #1
 800450e:	b29b      	uxth	r3, r3
 8004510:	f7ff ff0e 	bl	8004330 <ST7789_SetAddressWindow>
    uint8_t data[2];
    data[0] = (uint8_t)(color >> 8);
 8004514:	887b      	ldrh	r3, [r7, #2]
 8004516:	0a1b      	lsrs	r3, r3, #8
 8004518:	b29b      	uxth	r3, r3
 800451a:	b2db      	uxtb	r3, r3
 800451c:	733b      	strb	r3, [r7, #12]
    data[1] = (uint8_t)(color & 0xFF);
 800451e:	887b      	ldrh	r3, [r7, #2]
 8004520:	b2db      	uxtb	r3, r3
 8004522:	737b      	strb	r3, [r7, #13]
    ST7789_WriteData(data, 2);
 8004524:	f107 030c 	add.w	r3, r7, #12
 8004528:	2102      	movs	r1, #2
 800452a:	4618      	mov	r0, r3
 800452c:	f7ff fee0 	bl	80042f0 <ST7789_WriteData>
 8004530:	e000      	b.n	8004534 <ST7789_DrawPixel+0x68>
    if ((x < 0) || (x >= ST7789_WIDTH) || (y < 0) || (y >= ST7789_HEIGHT)) return;
 8004532:	bf00      	nop
}
 8004534:	3710      	adds	r7, #16
 8004536:	46bd      	mov	sp, r7
 8004538:	bd80      	pop	{r7, pc}
	...

0800453c <ST7789_FillRectangle>:

void ST7789_FillRectangle(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color) {
 800453c:	b590      	push	{r4, r7, lr}
 800453e:	b085      	sub	sp, #20
 8004540:	af00      	add	r7, sp, #0
 8004542:	4604      	mov	r4, r0
 8004544:	4608      	mov	r0, r1
 8004546:	4611      	mov	r1, r2
 8004548:	461a      	mov	r2, r3
 800454a:	4623      	mov	r3, r4
 800454c:	80fb      	strh	r3, [r7, #6]
 800454e:	4603      	mov	r3, r0
 8004550:	80bb      	strh	r3, [r7, #4]
 8004552:	460b      	mov	r3, r1
 8004554:	807b      	strh	r3, [r7, #2]
 8004556:	4613      	mov	r3, r2
 8004558:	803b      	strh	r3, [r7, #0]
    if ((x >= ST7789_WIDTH) || (y >= ST7789_HEIGHT)) return;
 800455a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800455e:	2bef      	cmp	r3, #239	@ 0xef
 8004560:	dc5a      	bgt.n	8004618 <ST7789_FillRectangle+0xdc>
 8004562:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8004566:	f5b3 7f8c 	cmp.w	r3, #280	@ 0x118
 800456a:	da55      	bge.n	8004618 <ST7789_FillRectangle+0xdc>
    if ((x + w - 1) >= ST7789_WIDTH) w = ST7789_WIDTH - x;
 800456c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8004570:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004574:	4413      	add	r3, r2
 8004576:	2bf0      	cmp	r3, #240	@ 0xf0
 8004578:	dd04      	ble.n	8004584 <ST7789_FillRectangle+0x48>
 800457a:	88fb      	ldrh	r3, [r7, #6]
 800457c:	f1c3 03f0 	rsb	r3, r3, #240	@ 0xf0
 8004580:	b29b      	uxth	r3, r3
 8004582:	807b      	strh	r3, [r7, #2]
    if ((y + h - 1) >= ST7789_HEIGHT) h = ST7789_HEIGHT - y;
 8004584:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8004588:	f9b7 3000 	ldrsh.w	r3, [r7]
 800458c:	4413      	add	r3, r2
 800458e:	f5b3 7f8c 	cmp.w	r3, #280	@ 0x118
 8004592:	dd04      	ble.n	800459e <ST7789_FillRectangle+0x62>
 8004594:	88bb      	ldrh	r3, [r7, #4]
 8004596:	f5c3 738c 	rsb	r3, r3, #280	@ 0x118
 800459a:	b29b      	uxth	r3, r3
 800459c:	803b      	strh	r3, [r7, #0]

    ST7789_SetAddressWindow(x, y, x + w - 1, y + h - 1);
 800459e:	88f8      	ldrh	r0, [r7, #6]
 80045a0:	88b9      	ldrh	r1, [r7, #4]
 80045a2:	88fa      	ldrh	r2, [r7, #6]
 80045a4:	887b      	ldrh	r3, [r7, #2]
 80045a6:	4413      	add	r3, r2
 80045a8:	b29b      	uxth	r3, r3
 80045aa:	3b01      	subs	r3, #1
 80045ac:	b29c      	uxth	r4, r3
 80045ae:	88ba      	ldrh	r2, [r7, #4]
 80045b0:	883b      	ldrh	r3, [r7, #0]
 80045b2:	4413      	add	r3, r2
 80045b4:	b29b      	uxth	r3, r3
 80045b6:	3b01      	subs	r3, #1
 80045b8:	b29b      	uxth	r3, r3
 80045ba:	4622      	mov	r2, r4
 80045bc:	f7ff feb8 	bl	8004330 <ST7789_SetAddressWindow>

    uint8_t data[2];
    data[0] = (uint8_t)(color >> 8);
 80045c0:	8c3b      	ldrh	r3, [r7, #32]
 80045c2:	0a1b      	lsrs	r3, r3, #8
 80045c4:	b29b      	uxth	r3, r3
 80045c6:	b2db      	uxtb	r3, r3
 80045c8:	723b      	strb	r3, [r7, #8]
    data[1] = (uint8_t)(color & 0xFF);
 80045ca:	8c3b      	ldrh	r3, [r7, #32]
 80045cc:	b2db      	uxtb	r3, r3
 80045ce:	727b      	strb	r3, [r7, #9]

    uint32_t i = 0;
 80045d0:	2300      	movs	r3, #0
 80045d2:	60fb      	str	r3, [r7, #12]
    ST7789_Select();
 80045d4:	f7ff fe56 	bl	8004284 <ST7789_Select>
    HAL_GPIO_WritePin(ST7789_DC_GPIO_Port, ST7789_DC_Pin, GPIO_PIN_SET); // Data mode
 80045d8:	2201      	movs	r2, #1
 80045da:	2101      	movs	r1, #1
 80045dc:	4810      	ldr	r0, [pc, #64]	@ (8004620 <ST7789_FillRectangle+0xe4>)
 80045de:	f001 fadd 	bl	8005b9c <HAL_GPIO_WritePin>

    // Transmit in chunks if the buffer is large, or just directly
    for (i = 0; i < (uint32_t)w * h; i++) {
 80045e2:	2300      	movs	r3, #0
 80045e4:	60fb      	str	r3, [r7, #12]
 80045e6:	e00b      	b.n	8004600 <ST7789_FillRectangle+0xc4>
        HAL_SPI_Transmit(hspi_st7789, data, 2, HAL_MAX_DELAY);
 80045e8:	4b0e      	ldr	r3, [pc, #56]	@ (8004624 <ST7789_FillRectangle+0xe8>)
 80045ea:	6818      	ldr	r0, [r3, #0]
 80045ec:	f107 0108 	add.w	r1, r7, #8
 80045f0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80045f4:	2202      	movs	r2, #2
 80045f6:	f007 f981 	bl	800b8fc <HAL_SPI_Transmit>
    for (i = 0; i < (uint32_t)w * h; i++) {
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	3301      	adds	r3, #1
 80045fe:	60fb      	str	r3, [r7, #12]
 8004600:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004604:	f9b7 2000 	ldrsh.w	r2, [r7]
 8004608:	fb02 f303 	mul.w	r3, r2, r3
 800460c:	68fa      	ldr	r2, [r7, #12]
 800460e:	429a      	cmp	r2, r3
 8004610:	d3ea      	bcc.n	80045e8 <ST7789_FillRectangle+0xac>
    }
    ST7789_Unselect();
 8004612:	f7ff fe43 	bl	800429c <ST7789_Unselect>
 8004616:	e000      	b.n	800461a <ST7789_FillRectangle+0xde>
    if ((x >= ST7789_WIDTH) || (y >= ST7789_HEIGHT)) return;
 8004618:	bf00      	nop
}
 800461a:	3714      	adds	r7, #20
 800461c:	46bd      	mov	sp, r7
 800461e:	bd90      	pop	{r4, r7, pc}
 8004620:	42020400 	.word	0x42020400
 8004624:	20000414 	.word	0x20000414

08004628 <ST7789_DrawChar>:
        if (e2 < dy) { err += dx; y0 += sy; }
    }
}

// Corrected ST7789_DrawChar in st7789.c
void ST7789_DrawChar(int16_t x, int16_t y, char ch, const sFONT *font, uint16_t color, uint16_t background_color) {
 8004628:	b590      	push	{r4, r7, lr}
 800462a:	b08f      	sub	sp, #60	@ 0x3c
 800462c:	af02      	add	r7, sp, #8
 800462e:	607b      	str	r3, [r7, #4]
 8004630:	4603      	mov	r3, r0
 8004632:	81fb      	strh	r3, [r7, #14]
 8004634:	460b      	mov	r3, r1
 8004636:	81bb      	strh	r3, [r7, #12]
 8004638:	4613      	mov	r3, r2
 800463a:	72fb      	strb	r3, [r7, #11]

    // Calculate bytes per character
    uint16_t bytes_per_row = (font->Width + 7) / 8;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	889b      	ldrh	r3, [r3, #4]
 8004640:	3307      	adds	r3, #7
 8004642:	2b00      	cmp	r3, #0
 8004644:	da00      	bge.n	8004648 <ST7789_DrawChar+0x20>
 8004646:	3307      	adds	r3, #7
 8004648:	10db      	asrs	r3, r3, #3
 800464a:	847b      	strh	r3, [r7, #34]	@ 0x22
    uint16_t bytes_per_char = bytes_per_row * font->Height;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	88db      	ldrh	r3, [r3, #6]
 8004650:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8004652:	fb12 f303 	smulbb	r3, r2, r3
 8004656:	843b      	strh	r3, [r7, #32]

    // Check if ch is within the font's supported range
    if (ch < FONT_START_ASCII || ch > FONT_END_ASCII) {
 8004658:	7afb      	ldrb	r3, [r7, #11]
 800465a:	2b1f      	cmp	r3, #31
 800465c:	d902      	bls.n	8004664 <ST7789_DrawChar+0x3c>
 800465e:	7afb      	ldrb	r3, [r7, #11]
 8004660:	2b7e      	cmp	r3, #126	@ 0x7e
 8004662:	d910      	bls.n	8004686 <ST7789_DrawChar+0x5e>
        // You can choose to draw a blank space for unsupported characters
        // Or draw a specific placeholder character like '?'
        // For now, let's just draw a blank rectangle (using background_color)
        ST7789_FillRectangle(x, y, font->Width, font->Height, background_color);
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	889b      	ldrh	r3, [r3, #4]
 8004668:	b21a      	sxth	r2, r3
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	88db      	ldrh	r3, [r3, #6]
 800466e:	b21c      	sxth	r4, r3
 8004670:	f9b7 100c 	ldrsh.w	r1, [r7, #12]
 8004674:	f9b7 000e 	ldrsh.w	r0, [r7, #14]
 8004678:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800467c:	9300      	str	r3, [sp, #0]
 800467e:	4623      	mov	r3, r4
 8004680:	f7ff ff5c 	bl	800453c <ST7789_FillRectangle>
        return;
 8004684:	e07b      	b.n	800477e <ST7789_DrawChar+0x156>
    }

    uint16_t char_index = ch - FONT_START_ASCII;
 8004686:	7afb      	ldrb	r3, [r7, #11]
 8004688:	b29b      	uxth	r3, r3
 800468a:	3b20      	subs	r3, #32
 800468c:	83fb      	strh	r3, [r7, #30]

    // Get a pointer to the start of the character's data
    const uint8_t *char_data = font->table + (char_index * bytes_per_char);
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	8bfa      	ldrh	r2, [r7, #30]
 8004694:	8c39      	ldrh	r1, [r7, #32]
 8004696:	fb01 f202 	mul.w	r2, r1, r2
 800469a:	4413      	add	r3, r2
 800469c:	61bb      	str	r3, [r7, #24]

    // Draw the character
    for (int y_px = 0; y_px < font->Height; y_px++) {
 800469e:	2300      	movs	r3, #0
 80046a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80046a2:	e066      	b.n	8004772 <ST7789_DrawChar+0x14a>
		for (int x_byte = 0; x_byte < bytes_per_row; x_byte++) {
 80046a4:	2300      	movs	r3, #0
 80046a6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80046a8:	e05c      	b.n	8004764 <ST7789_DrawChar+0x13c>
			// Get the byte of data for the current row and 8-pixel segment
			uint8_t byte_data = char_data[y_px * bytes_per_row + x_byte];
 80046aa:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80046ac:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80046ae:	fb03 f202 	mul.w	r2, r3, r2
 80046b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046b4:	4413      	add	r3, r2
 80046b6:	461a      	mov	r2, r3
 80046b8:	69bb      	ldr	r3, [r7, #24]
 80046ba:	4413      	add	r3, r2
 80046bc:	781b      	ldrb	r3, [r3, #0]
 80046be:	75fb      	strb	r3, [r7, #23]

			// Iterate through the 8 bits of the current byte
			for (int x_bit = 0; x_bit < 8; x_bit++) {
 80046c0:	2300      	movs	r3, #0
 80046c2:	627b      	str	r3, [r7, #36]	@ 0x24
 80046c4:	e048      	b.n	8004758 <ST7789_DrawChar+0x130>
				// Calculate the absolute X coordinate on the display for the current pixel
				// x: starting X for the character
				// (x_byte * 8): offset for the current 8-bit segment
				// x_bit: offset for the current pixel within the 8-bit segment (0 for leftmost, 7 for rightmost)
				int16_t current_x = x + (x_byte * 8) + x_bit;
 80046c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046c8:	b29b      	uxth	r3, r3
 80046ca:	00db      	lsls	r3, r3, #3
 80046cc:	b29a      	uxth	r2, r3
 80046ce:	89fb      	ldrh	r3, [r7, #14]
 80046d0:	4413      	add	r3, r2
 80046d2:	b29a      	uxth	r2, r3
 80046d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046d6:	b29b      	uxth	r3, r3
 80046d8:	4413      	add	r3, r2
 80046da:	b29b      	uxth	r3, r3
 80046dc:	82bb      	strh	r3, [r7, #20]

				// Calculate the relative X coordinate within the character's full bitmap
				// This is used for boundary checking against font->Width
				int16_t char_pixel_offset_x = (x_byte * 8) + x_bit;
 80046de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046e0:	b29b      	uxth	r3, r3
 80046e2:	00db      	lsls	r3, r3, #3
 80046e4:	b29a      	uxth	r2, r3
 80046e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046e8:	b29b      	uxth	r3, r3
 80046ea:	4413      	add	r3, r2
 80046ec:	b29b      	uxth	r3, r3
 80046ee:	827b      	strh	r3, [r7, #18]

				// Only draw if this pixel is within the defined width of the character
				if (char_pixel_offset_x < font->Width) {
 80046f0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80046f4:	687a      	ldr	r2, [r7, #4]
 80046f6:	8892      	ldrh	r2, [r2, #4]
 80046f8:	4293      	cmp	r3, r2
 80046fa:	da2a      	bge.n	8004752 <ST7789_DrawChar+0x12a>
					// Example:
					// x_bit=0 (leftmost pixel) -> (byte_data >> 7) & 0x01 (reads MSB)
					// x_bit=1                  -> (byte_data >> 6) & 0x01
					// ...
					// x_bit=7 (rightmost pixel) -> (byte_data >> 0) & 0x01 (reads LSB)
					if ((byte_data >> (7 - x_bit)) & 0x01) { // This is the common MSB-first extraction
 80046fc:	7dfa      	ldrb	r2, [r7, #23]
 80046fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004700:	f1c3 0307 	rsb	r3, r3, #7
 8004704:	fa42 f303 	asr.w	r3, r2, r3
 8004708:	f003 0301 	and.w	r3, r3, #1
 800470c:	2b00      	cmp	r3, #0
 800470e:	d00d      	beq.n	800472c <ST7789_DrawChar+0x104>
						ST7789_DrawPixel(current_x, y + y_px, color);
 8004710:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004712:	b29a      	uxth	r2, r3
 8004714:	89bb      	ldrh	r3, [r7, #12]
 8004716:	4413      	add	r3, r2
 8004718:	b29b      	uxth	r3, r3
 800471a:	b219      	sxth	r1, r3
 800471c:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 8004720:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8004724:	4618      	mov	r0, r3
 8004726:	f7ff fed1 	bl	80044cc <ST7789_DrawPixel>
 800472a:	e012      	b.n	8004752 <ST7789_DrawChar+0x12a>
					} else {
						if (background_color != color) {
 800472c:	f8b7 2044 	ldrh.w	r2, [r7, #68]	@ 0x44
 8004730:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8004734:	429a      	cmp	r2, r3
 8004736:	d00c      	beq.n	8004752 <ST7789_DrawChar+0x12a>
							ST7789_DrawPixel(current_x, y + y_px, background_color);
 8004738:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800473a:	b29a      	uxth	r2, r3
 800473c:	89bb      	ldrh	r3, [r7, #12]
 800473e:	4413      	add	r3, r2
 8004740:	b29b      	uxth	r3, r3
 8004742:	b219      	sxth	r1, r3
 8004744:	f8b7 2044 	ldrh.w	r2, [r7, #68]	@ 0x44
 8004748:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800474c:	4618      	mov	r0, r3
 800474e:	f7ff febd 	bl	80044cc <ST7789_DrawPixel>
			for (int x_bit = 0; x_bit < 8; x_bit++) {
 8004752:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004754:	3301      	adds	r3, #1
 8004756:	627b      	str	r3, [r7, #36]	@ 0x24
 8004758:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800475a:	2b07      	cmp	r3, #7
 800475c:	ddb3      	ble.n	80046c6 <ST7789_DrawChar+0x9e>
		for (int x_byte = 0; x_byte < bytes_per_row; x_byte++) {
 800475e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004760:	3301      	adds	r3, #1
 8004762:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004764:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8004766:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004768:	429a      	cmp	r2, r3
 800476a:	db9e      	blt.n	80046aa <ST7789_DrawChar+0x82>
    for (int y_px = 0; y_px < font->Height; y_px++) {
 800476c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800476e:	3301      	adds	r3, #1
 8004770:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	88db      	ldrh	r3, [r3, #6]
 8004776:	461a      	mov	r2, r3
 8004778:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800477a:	4293      	cmp	r3, r2
 800477c:	db92      	blt.n	80046a4 <ST7789_DrawChar+0x7c>
					}
				}
			}
		}
	}
}
 800477e:	3734      	adds	r7, #52	@ 0x34
 8004780:	46bd      	mov	sp, r7
 8004782:	bd90      	pop	{r4, r7, pc}

08004784 <ST7789_WriteString>:
        // Move to the next character in the string
        str++;
    }
}

void ST7789_WriteString(int16_t x, int16_t y, const char* str, const sFONT *font, uint16_t color, uint16_t bgcolor) {
 8004784:	b580      	push	{r7, lr}
 8004786:	b086      	sub	sp, #24
 8004788:	af02      	add	r7, sp, #8
 800478a:	60ba      	str	r2, [r7, #8]
 800478c:	607b      	str	r3, [r7, #4]
 800478e:	4603      	mov	r3, r0
 8004790:	81fb      	strh	r3, [r7, #14]
 8004792:	460b      	mov	r3, r1
 8004794:	81bb      	strh	r3, [r7, #12]
    while (*str) {
 8004796:	e02b      	b.n	80047f0 <ST7789_WriteString+0x6c>
        if (x + font->Width >= ST7789_WIDTH) { // Wrap text if it exceeds screen width
 8004798:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800479c:	687a      	ldr	r2, [r7, #4]
 800479e:	8892      	ldrh	r2, [r2, #4]
 80047a0:	4413      	add	r3, r2
 80047a2:	2bef      	cmp	r3, #239	@ 0xef
 80047a4:	dd0f      	ble.n	80047c6 <ST7789_WriteString+0x42>
            x = 0;
 80047a6:	2300      	movs	r3, #0
 80047a8:	81fb      	strh	r3, [r7, #14]
            y += font->Height;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	88da      	ldrh	r2, [r3, #6]
 80047ae:	89bb      	ldrh	r3, [r7, #12]
 80047b0:	4413      	add	r3, r2
 80047b2:	b29b      	uxth	r3, r3
 80047b4:	81bb      	strh	r3, [r7, #12]
            if (y + font->Height >= ST7789_HEIGHT) break; // Don't draw if going off screen
 80047b6:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80047ba:	687a      	ldr	r2, [r7, #4]
 80047bc:	88d2      	ldrh	r2, [r2, #6]
 80047be:	4413      	add	r3, r2
 80047c0:	f5b3 7f8c 	cmp.w	r3, #280	@ 0x118
 80047c4:	da19      	bge.n	80047fa <ST7789_WriteString+0x76>
        }
        ST7789_DrawChar(x, y, *str++, font, color, bgcolor);
 80047c6:	68bb      	ldr	r3, [r7, #8]
 80047c8:	1c5a      	adds	r2, r3, #1
 80047ca:	60ba      	str	r2, [r7, #8]
 80047cc:	781a      	ldrb	r2, [r3, #0]
 80047ce:	f9b7 100c 	ldrsh.w	r1, [r7, #12]
 80047d2:	f9b7 000e 	ldrsh.w	r0, [r7, #14]
 80047d6:	8bbb      	ldrh	r3, [r7, #28]
 80047d8:	9301      	str	r3, [sp, #4]
 80047da:	8b3b      	ldrh	r3, [r7, #24]
 80047dc:	9300      	str	r3, [sp, #0]
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	f7ff ff22 	bl	8004628 <ST7789_DrawChar>
        x += font->Width;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	889a      	ldrh	r2, [r3, #4]
 80047e8:	89fb      	ldrh	r3, [r7, #14]
 80047ea:	4413      	add	r3, r2
 80047ec:	b29b      	uxth	r3, r3
 80047ee:	81fb      	strh	r3, [r7, #14]
    while (*str) {
 80047f0:	68bb      	ldr	r3, [r7, #8]
 80047f2:	781b      	ldrb	r3, [r3, #0]
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d1cf      	bne.n	8004798 <ST7789_WriteString+0x14>
    }
}
 80047f8:	e000      	b.n	80047fc <ST7789_WriteString+0x78>
            if (y + font->Height >= ST7789_HEIGHT) break; // Don't draw if going off screen
 80047fa:	bf00      	nop
}
 80047fc:	bf00      	nop
 80047fe:	3710      	adds	r7, #16
 8004800:	46bd      	mov	sp, r7
 8004802:	bd80      	pop	{r7, pc}

08004804 <ST7789_SetRotation>:

void ST7789_SetRotation(uint8_t m) {
 8004804:	b580      	push	{r7, lr}
 8004806:	b084      	sub	sp, #16
 8004808:	af00      	add	r7, sp, #0
 800480a:	4603      	mov	r3, r0
 800480c:	71fb      	strb	r3, [r7, #7]
    uint8_t madctl_reg;
    switch (m) {
 800480e:	79fb      	ldrb	r3, [r7, #7]
 8004810:	2b03      	cmp	r3, #3
 8004812:	d817      	bhi.n	8004844 <ST7789_SetRotation+0x40>
 8004814:	a201      	add	r2, pc, #4	@ (adr r2, 800481c <ST7789_SetRotation+0x18>)
 8004816:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800481a:	bf00      	nop
 800481c:	0800482d 	.word	0x0800482d
 8004820:	08004833 	.word	0x08004833
 8004824:	08004839 	.word	0x08004839
 8004828:	0800483f 	.word	0x0800483f
        case 0: // Portrait (0 degrees)
            madctl_reg = 0x00; // MY=0, MX=0, MV=0, ML=0, RGB=0
 800482c:	2300      	movs	r3, #0
 800482e:	73fb      	strb	r3, [r7, #15]
            break;
 8004830:	e00b      	b.n	800484a <ST7789_SetRotation+0x46>
        case 1: // Landscape (90 degrees)
            madctl_reg = 0x60; // MY=0, MX=1, MV=1, ML=0, RGB=0
 8004832:	2360      	movs	r3, #96	@ 0x60
 8004834:	73fb      	strb	r3, [r7, #15]
            break;
 8004836:	e008      	b.n	800484a <ST7789_SetRotation+0x46>
        case 2: // Portrait (180 degrees)
            madctl_reg = 0xC0; // MY=1, MX=1, MV=0, ML=0, RGB=0
 8004838:	23c0      	movs	r3, #192	@ 0xc0
 800483a:	73fb      	strb	r3, [r7, #15]
            break;
 800483c:	e005      	b.n	800484a <ST7789_SetRotation+0x46>
        case 3: // Landscape (270 degrees)
            madctl_reg = 0xA0; // MY=1, MX=0, MV=1, ML=0, RGB=0
 800483e:	23a0      	movs	r3, #160	@ 0xa0
 8004840:	73fb      	strb	r3, [r7, #15]
            break;
 8004842:	e002      	b.n	800484a <ST7789_SetRotation+0x46>
        default: // Default to 0 degrees
            madctl_reg = 0x00;
 8004844:	2300      	movs	r3, #0
 8004846:	73fb      	strb	r3, [r7, #15]
            break;
 8004848:	bf00      	nop
    }
    // Consider BGR if your colors are inverted
    // madctl_reg |= 0x08; // Set BGR bit if needed (0x08 for BGR, 0x00 for RGB)

    ST7789_WriteCommand(ST7789_MADCTL);
 800484a:	2036      	movs	r0, #54	@ 0x36
 800484c:	f7ff fd32 	bl	80042b4 <ST7789_WriteCommand>
    ST7789_WriteData(&madctl_reg, 1);
 8004850:	f107 030f 	add.w	r3, r7, #15
 8004854:	2101      	movs	r1, #1
 8004856:	4618      	mov	r0, r3
 8004858:	f7ff fd4a 	bl	80042f0 <ST7789_WriteData>
}
 800485c:	bf00      	nop
 800485e:	3710      	adds	r7, #16
 8004860:	46bd      	mov	sp, r7
 8004862:	bd80      	pop	{r7, pc}

08004864 <ST7789_SetBacklight>:

void ST7789_DisplayOff(void) {
    ST7789_WriteCommand(ST7789_DISPOFF);
}

void ST7789_SetBacklight(uint8_t state) {
 8004864:	b580      	push	{r7, lr}
 8004866:	b082      	sub	sp, #8
 8004868:	af00      	add	r7, sp, #0
 800486a:	4603      	mov	r3, r0
 800486c:	71fb      	strb	r3, [r7, #7]
    if (state) {
 800486e:	79fb      	ldrb	r3, [r7, #7]
 8004870:	2b00      	cmp	r3, #0
 8004872:	d005      	beq.n	8004880 <ST7789_SetBacklight+0x1c>
        HAL_GPIO_WritePin(ST7789_BL_GPIO_Port, ST7789_BL_Pin, GPIO_PIN_SET);
 8004874:	2201      	movs	r2, #1
 8004876:	2102      	movs	r1, #2
 8004878:	4806      	ldr	r0, [pc, #24]	@ (8004894 <ST7789_SetBacklight+0x30>)
 800487a:	f001 f98f 	bl	8005b9c <HAL_GPIO_WritePin>
    } else {
        HAL_GPIO_WritePin(ST7789_BL_GPIO_Port, ST7789_BL_Pin, GPIO_PIN_RESET);
    }
}
 800487e:	e004      	b.n	800488a <ST7789_SetBacklight+0x26>
        HAL_GPIO_WritePin(ST7789_BL_GPIO_Port, ST7789_BL_Pin, GPIO_PIN_RESET);
 8004880:	2200      	movs	r2, #0
 8004882:	2102      	movs	r1, #2
 8004884:	4803      	ldr	r0, [pc, #12]	@ (8004894 <ST7789_SetBacklight+0x30>)
 8004886:	f001 f989 	bl	8005b9c <HAL_GPIO_WritePin>
}
 800488a:	bf00      	nop
 800488c:	3708      	adds	r7, #8
 800488e:	46bd      	mov	sp, r7
 8004890:	bd80      	pop	{r7, pc}
 8004892:	bf00      	nop
 8004894:	42020400 	.word	0x42020400

08004898 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004898:	b580      	push	{r7, lr}
 800489a:	b082      	sub	sp, #8
 800489c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800489e:	4b0c      	ldr	r3, [pc, #48]	@ (80048d0 <HAL_MspInit+0x38>)
 80048a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80048a4:	4a0a      	ldr	r2, [pc, #40]	@ (80048d0 <HAL_MspInit+0x38>)
 80048a6:	f043 0304 	orr.w	r3, r3, #4
 80048aa:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80048ae:	4b08      	ldr	r3, [pc, #32]	@ (80048d0 <HAL_MspInit+0x38>)
 80048b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80048b4:	f003 0304 	and.w	r3, r3, #4
 80048b8:	607b      	str	r3, [r7, #4]
 80048ba:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddIO2();
 80048bc:	f002 fee4 	bl	8007688 <HAL_PWREx_EnableVddIO2>

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 80048c0:	2004      	movs	r0, #4
 80048c2:	f000 fe37 	bl	8005534 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80048c6:	bf00      	nop
 80048c8:	3708      	adds	r7, #8
 80048ca:	46bd      	mov	sp, r7
 80048cc:	bd80      	pop	{r7, pc}
 80048ce:	bf00      	nop
 80048d0:	46020c00 	.word	0x46020c00

080048d4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80048d4:	b580      	push	{r7, lr}
 80048d6:	b08e      	sub	sp, #56	@ 0x38
 80048d8:	af00      	add	r7, sp, #0
 80048da:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80048dc:	2300      	movs	r3, #0
 80048de:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t              uwPrescalerValue = 0;
 80048e0:	2300      	movs	r3, #0
 80048e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM17 clock */
  __HAL_RCC_TIM17_CLK_ENABLE();
 80048e4:	4b2e      	ldr	r3, [pc, #184]	@ (80049a0 <HAL_InitTick+0xcc>)
 80048e6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80048ea:	4a2d      	ldr	r2, [pc, #180]	@ (80049a0 <HAL_InitTick+0xcc>)
 80048ec:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80048f0:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 80048f4:	4b2a      	ldr	r3, [pc, #168]	@ (80049a0 <HAL_InitTick+0xcc>)
 80048f6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80048fa:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80048fe:	60fb      	str	r3, [r7, #12]
 8004900:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8004902:	f107 0210 	add.w	r2, r7, #16
 8004906:	f107 0314 	add.w	r3, r7, #20
 800490a:	4611      	mov	r1, r2
 800490c:	4618      	mov	r0, r3
 800490e:	f004 f911 	bl	8008b34 <HAL_RCC_GetClockConfig>

  /* Compute TIM17 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8004912:	f004 f8e7 	bl	8008ae4 <HAL_RCC_GetPCLK2Freq>
 8004916:	6338      	str	r0, [r7, #48]	@ 0x30

  /* Compute the prescaler value to have TIM17 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8004918:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800491a:	4a22      	ldr	r2, [pc, #136]	@ (80049a4 <HAL_InitTick+0xd0>)
 800491c:	fba2 2303 	umull	r2, r3, r2, r3
 8004920:	0c9b      	lsrs	r3, r3, #18
 8004922:	3b01      	subs	r3, #1
 8004924:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Initialize TIM17 */
  htim17.Instance = TIM17;
 8004926:	4b20      	ldr	r3, [pc, #128]	@ (80049a8 <HAL_InitTick+0xd4>)
 8004928:	4a20      	ldr	r2, [pc, #128]	@ (80049ac <HAL_InitTick+0xd8>)
 800492a:	601a      	str	r2, [r3, #0]
   * Period = [(TIM17CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim17.Init.Period = (1000000U / 1000U) - 1U;
 800492c:	4b1e      	ldr	r3, [pc, #120]	@ (80049a8 <HAL_InitTick+0xd4>)
 800492e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8004932:	60da      	str	r2, [r3, #12]
  htim17.Init.Prescaler = uwPrescalerValue;
 8004934:	4a1c      	ldr	r2, [pc, #112]	@ (80049a8 <HAL_InitTick+0xd4>)
 8004936:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004938:	6053      	str	r3, [r2, #4]
  htim17.Init.ClockDivision = 0;
 800493a:	4b1b      	ldr	r3, [pc, #108]	@ (80049a8 <HAL_InitTick+0xd4>)
 800493c:	2200      	movs	r2, #0
 800493e:	611a      	str	r2, [r3, #16]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004940:	4b19      	ldr	r3, [pc, #100]	@ (80049a8 <HAL_InitTick+0xd4>)
 8004942:	2200      	movs	r2, #0
 8004944:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim17);
 8004946:	4818      	ldr	r0, [pc, #96]	@ (80049a8 <HAL_InitTick+0xd4>)
 8004948:	f007 fd2e 	bl	800c3a8 <HAL_TIM_Base_Init>
 800494c:	4603      	mov	r3, r0
 800494e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  if (status == HAL_OK)
 8004952:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8004956:	2b00      	cmp	r3, #0
 8004958:	d118      	bne.n	800498c <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim17);
 800495a:	4813      	ldr	r0, [pc, #76]	@ (80049a8 <HAL_InitTick+0xd4>)
 800495c:	f007 fd7c 	bl	800c458 <HAL_TIM_Base_Start_IT>
 8004960:	4603      	mov	r3, r0
 8004962:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    if (status == HAL_OK)
 8004966:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800496a:	2b00      	cmp	r3, #0
 800496c:	d10e      	bne.n	800498c <HAL_InitTick+0xb8>
    {
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	2b0f      	cmp	r3, #15
 8004972:	d808      	bhi.n	8004986 <HAL_InitTick+0xb2>
      {
        /* Enable the TIM17 global Interrupt */
        HAL_NVIC_SetPriority(TIM17_IRQn, TickPriority, 0U);
 8004974:	2200      	movs	r2, #0
 8004976:	6879      	ldr	r1, [r7, #4]
 8004978:	2047      	movs	r0, #71	@ 0x47
 800497a:	f000 fde6 	bl	800554a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800497e:	4a0c      	ldr	r2, [pc, #48]	@ (80049b0 <HAL_InitTick+0xdc>)
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	6013      	str	r3, [r2, #0]
 8004984:	e002      	b.n	800498c <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 8004986:	2301      	movs	r3, #1
 8004988:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
      }
    }
  }

  /* Enable the TIM17 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM17_IRQn);
 800498c:	2047      	movs	r0, #71	@ 0x47
 800498e:	f000 fdf6 	bl	800557e <HAL_NVIC_EnableIRQ>

 /* Return function status */
  return status;
 8004992:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
}
 8004996:	4618      	mov	r0, r3
 8004998:	3738      	adds	r7, #56	@ 0x38
 800499a:	46bd      	mov	sp, r7
 800499c:	bd80      	pop	{r7, pc}
 800499e:	bf00      	nop
 80049a0:	46020c00 	.word	0x46020c00
 80049a4:	431bde83 	.word	0x431bde83
 80049a8:	20000418 	.word	0x20000418
 80049ac:	40014800 	.word	0x40014800
 80049b0:	2000002c 	.word	0x2000002c

080049b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80049b4:	b480      	push	{r7}
 80049b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80049b8:	bf00      	nop
 80049ba:	e7fd      	b.n	80049b8 <NMI_Handler+0x4>

080049bc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80049bc:	b480      	push	{r7}
 80049be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80049c0:	bf00      	nop
 80049c2:	e7fd      	b.n	80049c0 <HardFault_Handler+0x4>

080049c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80049c4:	b480      	push	{r7}
 80049c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80049c8:	bf00      	nop
 80049ca:	e7fd      	b.n	80049c8 <MemManage_Handler+0x4>

080049cc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80049cc:	b480      	push	{r7}
 80049ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80049d0:	bf00      	nop
 80049d2:	e7fd      	b.n	80049d0 <BusFault_Handler+0x4>

080049d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80049d4:	b480      	push	{r7}
 80049d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80049d8:	bf00      	nop
 80049da:	e7fd      	b.n	80049d8 <UsageFault_Handler+0x4>

080049dc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80049dc:	b480      	push	{r7}
 80049de:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80049e0:	bf00      	nop
 80049e2:	46bd      	mov	sp, r7
 80049e4:	bc80      	pop	{r7}
 80049e6:	4770      	bx	lr

080049e8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80049e8:	b480      	push	{r7}
 80049ea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80049ec:	bf00      	nop
 80049ee:	46bd      	mov	sp, r7
 80049f0:	bc80      	pop	{r7}
 80049f2:	4770      	bx	lr

080049f4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80049f4:	b480      	push	{r7}
 80049f6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80049f8:	bf00      	nop
 80049fa:	46bd      	mov	sp, r7
 80049fc:	bc80      	pop	{r7}
 80049fe:	4770      	bx	lr

08004a00 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004a00:	b480      	push	{r7}
 8004a02:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004a04:	bf00      	nop
 8004a06:	46bd      	mov	sp, r7
 8004a08:	bc80      	pop	{r7}
 8004a0a:	4770      	bx	lr

08004a0c <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI Line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8004a0c:	b580      	push	{r7, lr}
 8004a0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INT_Pin);
 8004a10:	2002      	movs	r0, #2
 8004a12:	f001 f8db 	bl	8005bcc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8004a16:	bf00      	nop
 8004a18:	bd80      	pop	{r7, pc}

08004a1a <EXTI13_IRQHandler>:

/**
  * @brief This function handles EXTI Line13 interrupt.
  */
void EXTI13_IRQHandler(void)
{
 8004a1a:	b580      	push	{r7, lr}
 8004a1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI13_IRQn 0 */

  /* USER CODE END EXTI13_IRQn 0 */
  BSP_PB_IRQHandler(BUTTON_USER);
 8004a1e:	2000      	movs	r0, #0
 8004a20:	f000 fb6e 	bl	8005100 <BSP_PB_IRQHandler>
  /* USER CODE BEGIN EXTI13_IRQn 1 */

  /* USER CODE END EXTI13_IRQn 1 */
}
 8004a24:	bf00      	nop
 8004a26:	bd80      	pop	{r7, pc}

08004a28 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 Event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8004a28:	b580      	push	{r7, lr}
 8004a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8004a2c:	4802      	ldr	r0, [pc, #8]	@ (8004a38 <I2C1_EV_IRQHandler+0x10>)
 8004a2e:	f001 fbd1 	bl	80061d4 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8004a32:	bf00      	nop
 8004a34:	bd80      	pop	{r7, pc}
 8004a36:	bf00      	nop
 8004a38:	20000218 	.word	0x20000218

08004a3c <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 Error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8004a3c:	b580      	push	{r7, lr}
 8004a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8004a40:	4802      	ldr	r0, [pc, #8]	@ (8004a4c <I2C1_ER_IRQHandler+0x10>)
 8004a42:	f001 fbe1 	bl	8006208 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8004a46:	bf00      	nop
 8004a48:	bd80      	pop	{r7, pc}
 8004a4a:	bf00      	nop
 8004a4c:	20000218 	.word	0x20000218

08004a50 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8004a50:	b580      	push	{r7, lr}
 8004a52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8004a54:	4802      	ldr	r0, [pc, #8]	@ (8004a60 <SPI1_IRQHandler+0x10>)
 8004a56:	f007 f965 	bl	800bd24 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8004a5a:	bf00      	nop
 8004a5c:	bd80      	pop	{r7, pc}
 8004a5e:	bf00      	nop
 8004a60:	20000384 	.word	0x20000384

08004a64 <TIM17_IRQHandler>:

/**
  * @brief This function handles TIM17 global interrupt.
  */
void TIM17_IRQHandler(void)
{
 8004a64:	b580      	push	{r7, lr}
 8004a66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM17_IRQn 0 */

  /* USER CODE END TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8004a68:	4802      	ldr	r0, [pc, #8]	@ (8004a74 <TIM17_IRQHandler+0x10>)
 8004a6a:	f007 fd93 	bl	800c594 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM17_IRQn 1 */

  /* USER CODE END TIM17_IRQn 1 */
}
 8004a6e:	bf00      	nop
 8004a70:	bd80      	pop	{r7, pc}
 8004a72:	bf00      	nop
 8004a74:	20000418 	.word	0x20000418

08004a78 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004a78:	b480      	push	{r7}
 8004a7a:	af00      	add	r7, sp, #0
  return 1;
 8004a7c:	2301      	movs	r3, #1
}
 8004a7e:	4618      	mov	r0, r3
 8004a80:	46bd      	mov	sp, r7
 8004a82:	bc80      	pop	{r7}
 8004a84:	4770      	bx	lr

08004a86 <_kill>:

int _kill(int pid, int sig)
{
 8004a86:	b580      	push	{r7, lr}
 8004a88:	b082      	sub	sp, #8
 8004a8a:	af00      	add	r7, sp, #0
 8004a8c:	6078      	str	r0, [r7, #4]
 8004a8e:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8004a90:	f009 fe68 	bl	800e764 <__errno>
 8004a94:	4603      	mov	r3, r0
 8004a96:	2216      	movs	r2, #22
 8004a98:	601a      	str	r2, [r3, #0]
  return -1;
 8004a9a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8004a9e:	4618      	mov	r0, r3
 8004aa0:	3708      	adds	r7, #8
 8004aa2:	46bd      	mov	sp, r7
 8004aa4:	bd80      	pop	{r7, pc}

08004aa6 <_exit>:

void _exit (int status)
{
 8004aa6:	b580      	push	{r7, lr}
 8004aa8:	b082      	sub	sp, #8
 8004aaa:	af00      	add	r7, sp, #0
 8004aac:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8004aae:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8004ab2:	6878      	ldr	r0, [r7, #4]
 8004ab4:	f7ff ffe7 	bl	8004a86 <_kill>
  while (1) {}    /* Make sure we hang here */
 8004ab8:	bf00      	nop
 8004aba:	e7fd      	b.n	8004ab8 <_exit+0x12>

08004abc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004abc:	b580      	push	{r7, lr}
 8004abe:	b086      	sub	sp, #24
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	60f8      	str	r0, [r7, #12]
 8004ac4:	60b9      	str	r1, [r7, #8]
 8004ac6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004ac8:	2300      	movs	r3, #0
 8004aca:	617b      	str	r3, [r7, #20]
 8004acc:	e00a      	b.n	8004ae4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8004ace:	f3af 8000 	nop.w
 8004ad2:	4601      	mov	r1, r0
 8004ad4:	68bb      	ldr	r3, [r7, #8]
 8004ad6:	1c5a      	adds	r2, r3, #1
 8004ad8:	60ba      	str	r2, [r7, #8]
 8004ada:	b2ca      	uxtb	r2, r1
 8004adc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004ade:	697b      	ldr	r3, [r7, #20]
 8004ae0:	3301      	adds	r3, #1
 8004ae2:	617b      	str	r3, [r7, #20]
 8004ae4:	697a      	ldr	r2, [r7, #20]
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	429a      	cmp	r2, r3
 8004aea:	dbf0      	blt.n	8004ace <_read+0x12>
  }

  return len;
 8004aec:	687b      	ldr	r3, [r7, #4]
}
 8004aee:	4618      	mov	r0, r3
 8004af0:	3718      	adds	r7, #24
 8004af2:	46bd      	mov	sp, r7
 8004af4:	bd80      	pop	{r7, pc}

08004af6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004af6:	b580      	push	{r7, lr}
 8004af8:	b086      	sub	sp, #24
 8004afa:	af00      	add	r7, sp, #0
 8004afc:	60f8      	str	r0, [r7, #12]
 8004afe:	60b9      	str	r1, [r7, #8]
 8004b00:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004b02:	2300      	movs	r3, #0
 8004b04:	617b      	str	r3, [r7, #20]
 8004b06:	e009      	b.n	8004b1c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8004b08:	68bb      	ldr	r3, [r7, #8]
 8004b0a:	1c5a      	adds	r2, r3, #1
 8004b0c:	60ba      	str	r2, [r7, #8]
 8004b0e:	781b      	ldrb	r3, [r3, #0]
 8004b10:	4618      	mov	r0, r3
 8004b12:	f000 fb79 	bl	8005208 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004b16:	697b      	ldr	r3, [r7, #20]
 8004b18:	3301      	adds	r3, #1
 8004b1a:	617b      	str	r3, [r7, #20]
 8004b1c:	697a      	ldr	r2, [r7, #20]
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	429a      	cmp	r2, r3
 8004b22:	dbf1      	blt.n	8004b08 <_write+0x12>
  }
  return len;
 8004b24:	687b      	ldr	r3, [r7, #4]
}
 8004b26:	4618      	mov	r0, r3
 8004b28:	3718      	adds	r7, #24
 8004b2a:	46bd      	mov	sp, r7
 8004b2c:	bd80      	pop	{r7, pc}

08004b2e <_close>:

int _close(int file)
{
 8004b2e:	b480      	push	{r7}
 8004b30:	b083      	sub	sp, #12
 8004b32:	af00      	add	r7, sp, #0
 8004b34:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8004b36:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8004b3a:	4618      	mov	r0, r3
 8004b3c:	370c      	adds	r7, #12
 8004b3e:	46bd      	mov	sp, r7
 8004b40:	bc80      	pop	{r7}
 8004b42:	4770      	bx	lr

08004b44 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004b44:	b480      	push	{r7}
 8004b46:	b083      	sub	sp, #12
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	6078      	str	r0, [r7, #4]
 8004b4c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8004b4e:	683b      	ldr	r3, [r7, #0]
 8004b50:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8004b54:	605a      	str	r2, [r3, #4]
  return 0;
 8004b56:	2300      	movs	r3, #0
}
 8004b58:	4618      	mov	r0, r3
 8004b5a:	370c      	adds	r7, #12
 8004b5c:	46bd      	mov	sp, r7
 8004b5e:	bc80      	pop	{r7}
 8004b60:	4770      	bx	lr

08004b62 <_isatty>:

int _isatty(int file)
{
 8004b62:	b480      	push	{r7}
 8004b64:	b083      	sub	sp, #12
 8004b66:	af00      	add	r7, sp, #0
 8004b68:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8004b6a:	2301      	movs	r3, #1
}
 8004b6c:	4618      	mov	r0, r3
 8004b6e:	370c      	adds	r7, #12
 8004b70:	46bd      	mov	sp, r7
 8004b72:	bc80      	pop	{r7}
 8004b74:	4770      	bx	lr

08004b76 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004b76:	b480      	push	{r7}
 8004b78:	b085      	sub	sp, #20
 8004b7a:	af00      	add	r7, sp, #0
 8004b7c:	60f8      	str	r0, [r7, #12]
 8004b7e:	60b9      	str	r1, [r7, #8]
 8004b80:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8004b82:	2300      	movs	r3, #0
}
 8004b84:	4618      	mov	r0, r3
 8004b86:	3714      	adds	r7, #20
 8004b88:	46bd      	mov	sp, r7
 8004b8a:	bc80      	pop	{r7}
 8004b8c:	4770      	bx	lr
	...

08004b90 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004b90:	b580      	push	{r7, lr}
 8004b92:	b086      	sub	sp, #24
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004b98:	4a14      	ldr	r2, [pc, #80]	@ (8004bec <_sbrk+0x5c>)
 8004b9a:	4b15      	ldr	r3, [pc, #84]	@ (8004bf0 <_sbrk+0x60>)
 8004b9c:	1ad3      	subs	r3, r2, r3
 8004b9e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004ba0:	697b      	ldr	r3, [r7, #20]
 8004ba2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004ba4:	4b13      	ldr	r3, [pc, #76]	@ (8004bf4 <_sbrk+0x64>)
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d102      	bne.n	8004bb2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004bac:	4b11      	ldr	r3, [pc, #68]	@ (8004bf4 <_sbrk+0x64>)
 8004bae:	4a12      	ldr	r2, [pc, #72]	@ (8004bf8 <_sbrk+0x68>)
 8004bb0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004bb2:	4b10      	ldr	r3, [pc, #64]	@ (8004bf4 <_sbrk+0x64>)
 8004bb4:	681a      	ldr	r2, [r3, #0]
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	4413      	add	r3, r2
 8004bba:	693a      	ldr	r2, [r7, #16]
 8004bbc:	429a      	cmp	r2, r3
 8004bbe:	d207      	bcs.n	8004bd0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004bc0:	f009 fdd0 	bl	800e764 <__errno>
 8004bc4:	4603      	mov	r3, r0
 8004bc6:	220c      	movs	r2, #12
 8004bc8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004bca:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004bce:	e009      	b.n	8004be4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004bd0:	4b08      	ldr	r3, [pc, #32]	@ (8004bf4 <_sbrk+0x64>)
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004bd6:	4b07      	ldr	r3, [pc, #28]	@ (8004bf4 <_sbrk+0x64>)
 8004bd8:	681a      	ldr	r2, [r3, #0]
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	4413      	add	r3, r2
 8004bde:	4a05      	ldr	r2, [pc, #20]	@ (8004bf4 <_sbrk+0x64>)
 8004be0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004be2:	68fb      	ldr	r3, [r7, #12]
}
 8004be4:	4618      	mov	r0, r3
 8004be6:	3718      	adds	r7, #24
 8004be8:	46bd      	mov	sp, r7
 8004bea:	bd80      	pop	{r7, pc}
 8004bec:	200c0000 	.word	0x200c0000
 8004bf0:	00000400 	.word	0x00000400
 8004bf4:	20000464 	.word	0x20000464
 8004bf8:	20000740 	.word	0x20000740

08004bfc <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8004bfc:	b480      	push	{r7}
 8004bfe:	af00      	add	r7, sp, #0
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR = RCC_CR_MSISON;
 8004c00:	4b13      	ldr	r3, [pc, #76]	@ (8004c50 <SystemInit+0x54>)
 8004c02:	2201      	movs	r2, #1
 8004c04:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 8004c06:	4b12      	ldr	r3, [pc, #72]	@ (8004c50 <SystemInit+0x54>)
 8004c08:	2200      	movs	r2, #0
 8004c0a:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 8004c0c:	4b10      	ldr	r3, [pc, #64]	@ (8004c50 <SystemInit+0x54>)
 8004c0e:	2200      	movs	r2, #0
 8004c10:	621a      	str	r2, [r3, #32]
  RCC->CFGR3 = 0U;
 8004c12:	4b0f      	ldr	r3, [pc, #60]	@ (8004c50 <SystemInit+0x54>)
 8004c14:	2200      	movs	r2, #0
 8004c16:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Reset HSEON, CSSON , HSION, PLLxON bits */
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
 8004c18:	4b0d      	ldr	r3, [pc, #52]	@ (8004c50 <SystemInit+0x54>)
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	4a0c      	ldr	r2, [pc, #48]	@ (8004c50 <SystemInit+0x54>)
 8004c1e:	f023 53a8 	bic.w	r3, r3, #352321536	@ 0x15000000
 8004c22:	f423 2310 	bic.w	r3, r3, #589824	@ 0x90000
 8004c26:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLL1CFGR = 0U;
 8004c28:	4b09      	ldr	r3, [pc, #36]	@ (8004c50 <SystemInit+0x54>)
 8004c2a:	2200      	movs	r2, #0
 8004c2c:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 8004c2e:	4b08      	ldr	r3, [pc, #32]	@ (8004c50 <SystemInit+0x54>)
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	4a07      	ldr	r2, [pc, #28]	@ (8004c50 <SystemInit+0x54>)
 8004c34:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004c38:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 8004c3a:	4b05      	ldr	r3, [pc, #20]	@ (8004c50 <SystemInit+0x54>)
 8004c3c:	2200      	movs	r2, #0
 8004c3e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8004c40:	4b04      	ldr	r3, [pc, #16]	@ (8004c54 <SystemInit+0x58>)
 8004c42:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8004c46:	609a      	str	r2, [r3, #8]
  #endif
}
 8004c48:	bf00      	nop
 8004c4a:	46bd      	mov	sp, r7
 8004c4c:	bc80      	pop	{r7}
 8004c4e:	4770      	bx	lr
 8004c50:	46020c00 	.word	0x46020c00
 8004c54:	e000ed00 	.word	0xe000ed00

08004c58 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8004c58:	b580      	push	{r7, lr}
 8004c5a:	b088      	sub	sp, #32
 8004c5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004c5e:	f107 0310 	add.w	r3, r7, #16
 8004c62:	2200      	movs	r2, #0
 8004c64:	601a      	str	r2, [r3, #0]
 8004c66:	605a      	str	r2, [r3, #4]
 8004c68:	609a      	str	r2, [r3, #8]
 8004c6a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004c6c:	1d3b      	adds	r3, r7, #4
 8004c6e:	2200      	movs	r2, #0
 8004c70:	601a      	str	r2, [r3, #0]
 8004c72:	605a      	str	r2, [r3, #4]
 8004c74:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8004c76:	4b1e      	ldr	r3, [pc, #120]	@ (8004cf0 <MX_TIM2_Init+0x98>)
 8004c78:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8004c7c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 159;
 8004c7e:	4b1c      	ldr	r3, [pc, #112]	@ (8004cf0 <MX_TIM2_Init+0x98>)
 8004c80:	229f      	movs	r2, #159	@ 0x9f
 8004c82:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004c84:	4b1a      	ldr	r3, [pc, #104]	@ (8004cf0 <MX_TIM2_Init+0x98>)
 8004c86:	2200      	movs	r2, #0
 8004c88:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8004c8a:	4b19      	ldr	r3, [pc, #100]	@ (8004cf0 <MX_TIM2_Init+0x98>)
 8004c8c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004c90:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004c92:	4b17      	ldr	r3, [pc, #92]	@ (8004cf0 <MX_TIM2_Init+0x98>)
 8004c94:	2200      	movs	r2, #0
 8004c96:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004c98:	4b15      	ldr	r3, [pc, #84]	@ (8004cf0 <MX_TIM2_Init+0x98>)
 8004c9a:	2200      	movs	r2, #0
 8004c9c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8004c9e:	4814      	ldr	r0, [pc, #80]	@ (8004cf0 <MX_TIM2_Init+0x98>)
 8004ca0:	f007 fb82 	bl	800c3a8 <HAL_TIM_Base_Init>
 8004ca4:	4603      	mov	r3, r0
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d001      	beq.n	8004cae <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8004caa:	f7ff fa03 	bl	80040b4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004cae:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004cb2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8004cb4:	f107 0310 	add.w	r3, r7, #16
 8004cb8:	4619      	mov	r1, r3
 8004cba:	480d      	ldr	r0, [pc, #52]	@ (8004cf0 <MX_TIM2_Init+0x98>)
 8004cbc:	f007 fdba 	bl	800c834 <HAL_TIM_ConfigClockSource>
 8004cc0:	4603      	mov	r3, r0
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d001      	beq.n	8004cca <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8004cc6:	f7ff f9f5 	bl	80040b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004cca:	2300      	movs	r3, #0
 8004ccc:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004cce:	2300      	movs	r3, #0
 8004cd0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8004cd2:	1d3b      	adds	r3, r7, #4
 8004cd4:	4619      	mov	r1, r3
 8004cd6:	4806      	ldr	r0, [pc, #24]	@ (8004cf0 <MX_TIM2_Init+0x98>)
 8004cd8:	f008 f8ca 	bl	800ce70 <HAL_TIMEx_MasterConfigSynchronization>
 8004cdc:	4603      	mov	r3, r0
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d001      	beq.n	8004ce6 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8004ce2:	f7ff f9e7 	bl	80040b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8004ce6:	bf00      	nop
 8004ce8:	3720      	adds	r7, #32
 8004cea:	46bd      	mov	sp, r7
 8004cec:	bd80      	pop	{r7, pc}
 8004cee:	bf00      	nop
 8004cf0:	20000468 	.word	0x20000468

08004cf4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8004cf4:	b480      	push	{r7}
 8004cf6:	b085      	sub	sp, #20
 8004cf8:	af00      	add	r7, sp, #0
 8004cfa:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004d04:	d10e      	bne.n	8004d24 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004d06:	4b0a      	ldr	r3, [pc, #40]	@ (8004d30 <HAL_TIM_Base_MspInit+0x3c>)
 8004d08:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004d0c:	4a08      	ldr	r2, [pc, #32]	@ (8004d30 <HAL_TIM_Base_MspInit+0x3c>)
 8004d0e:	f043 0301 	orr.w	r3, r3, #1
 8004d12:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8004d16:	4b06      	ldr	r3, [pc, #24]	@ (8004d30 <HAL_TIM_Base_MspInit+0x3c>)
 8004d18:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004d1c:	f003 0301 	and.w	r3, r3, #1
 8004d20:	60fb      	str	r3, [r7, #12]
 8004d22:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8004d24:	bf00      	nop
 8004d26:	3714      	adds	r7, #20
 8004d28:	46bd      	mov	sp, r7
 8004d2a:	bc80      	pop	{r7}
 8004d2c:	4770      	bx	lr
 8004d2e:	bf00      	nop
 8004d30:	46020c00 	.word	0x46020c00

08004d34 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8004d34:	b580      	push	{r7, lr}
 8004d36:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8004d38:	4b22      	ldr	r3, [pc, #136]	@ (8004dc4 <MX_USART2_UART_Init+0x90>)
 8004d3a:	4a23      	ldr	r2, [pc, #140]	@ (8004dc8 <MX_USART2_UART_Init+0x94>)
 8004d3c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 921600;
 8004d3e:	4b21      	ldr	r3, [pc, #132]	@ (8004dc4 <MX_USART2_UART_Init+0x90>)
 8004d40:	f44f 2261 	mov.w	r2, #921600	@ 0xe1000
 8004d44:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8004d46:	4b1f      	ldr	r3, [pc, #124]	@ (8004dc4 <MX_USART2_UART_Init+0x90>)
 8004d48:	2200      	movs	r2, #0
 8004d4a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8004d4c:	4b1d      	ldr	r3, [pc, #116]	@ (8004dc4 <MX_USART2_UART_Init+0x90>)
 8004d4e:	2200      	movs	r2, #0
 8004d50:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8004d52:	4b1c      	ldr	r3, [pc, #112]	@ (8004dc4 <MX_USART2_UART_Init+0x90>)
 8004d54:	2200      	movs	r2, #0
 8004d56:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8004d58:	4b1a      	ldr	r3, [pc, #104]	@ (8004dc4 <MX_USART2_UART_Init+0x90>)
 8004d5a:	220c      	movs	r2, #12
 8004d5c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004d5e:	4b19      	ldr	r3, [pc, #100]	@ (8004dc4 <MX_USART2_UART_Init+0x90>)
 8004d60:	2200      	movs	r2, #0
 8004d62:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8004d64:	4b17      	ldr	r3, [pc, #92]	@ (8004dc4 <MX_USART2_UART_Init+0x90>)
 8004d66:	2200      	movs	r2, #0
 8004d68:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004d6a:	4b16      	ldr	r3, [pc, #88]	@ (8004dc4 <MX_USART2_UART_Init+0x90>)
 8004d6c:	2200      	movs	r2, #0
 8004d6e:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8004d70:	4b14      	ldr	r3, [pc, #80]	@ (8004dc4 <MX_USART2_UART_Init+0x90>)
 8004d72:	2200      	movs	r2, #0
 8004d74:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004d76:	4b13      	ldr	r3, [pc, #76]	@ (8004dc4 <MX_USART2_UART_Init+0x90>)
 8004d78:	2200      	movs	r2, #0
 8004d7a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8004d7c:	4811      	ldr	r0, [pc, #68]	@ (8004dc4 <MX_USART2_UART_Init+0x90>)
 8004d7e:	f008 f978 	bl	800d072 <HAL_UART_Init>
 8004d82:	4603      	mov	r3, r0
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d001      	beq.n	8004d8c <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8004d88:	f7ff f994 	bl	80040b4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004d8c:	2100      	movs	r1, #0
 8004d8e:	480d      	ldr	r0, [pc, #52]	@ (8004dc4 <MX_USART2_UART_Init+0x90>)
 8004d90:	f008 fe55 	bl	800da3e <HAL_UARTEx_SetTxFifoThreshold>
 8004d94:	4603      	mov	r3, r0
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d001      	beq.n	8004d9e <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8004d9a:	f7ff f98b 	bl	80040b4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004d9e:	2100      	movs	r1, #0
 8004da0:	4808      	ldr	r0, [pc, #32]	@ (8004dc4 <MX_USART2_UART_Init+0x90>)
 8004da2:	f008 fe8a 	bl	800daba <HAL_UARTEx_SetRxFifoThreshold>
 8004da6:	4603      	mov	r3, r0
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d001      	beq.n	8004db0 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8004dac:	f7ff f982 	bl	80040b4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8004db0:	4804      	ldr	r0, [pc, #16]	@ (8004dc4 <MX_USART2_UART_Init+0x90>)
 8004db2:	f008 fe0c 	bl	800d9ce <HAL_UARTEx_DisableFifoMode>
 8004db6:	4603      	mov	r3, r0
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d001      	beq.n	8004dc0 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8004dbc:	f7ff f97a 	bl	80040b4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8004dc0:	bf00      	nop
 8004dc2:	bd80      	pop	{r7, pc}
 8004dc4:	200004b4 	.word	0x200004b4
 8004dc8:	40004400 	.word	0x40004400

08004dcc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8004dcc:	b580      	push	{r7, lr}
 8004dce:	b0ba      	sub	sp, #232	@ 0xe8
 8004dd0:	af00      	add	r7, sp, #0
 8004dd2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004dd4:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8004dd8:	2200      	movs	r2, #0
 8004dda:	601a      	str	r2, [r3, #0]
 8004ddc:	605a      	str	r2, [r3, #4]
 8004dde:	609a      	str	r2, [r3, #8]
 8004de0:	60da      	str	r2, [r3, #12]
 8004de2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004de4:	f107 0310 	add.w	r3, r7, #16
 8004de8:	22c0      	movs	r2, #192	@ 0xc0
 8004dea:	2100      	movs	r1, #0
 8004dec:	4618      	mov	r0, r3
 8004dee:	f009 fcb1 	bl	800e754 <memset>
  if(uartHandle->Instance==USART2)
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	4a26      	ldr	r2, [pc, #152]	@ (8004e90 <HAL_UART_MspInit+0xc4>)
 8004df8:	4293      	cmp	r3, r2
 8004dfa:	d144      	bne.n	8004e86 <HAL_UART_MspInit+0xba>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8004dfc:	f04f 0202 	mov.w	r2, #2
 8004e00:	f04f 0300 	mov.w	r3, #0
 8004e04:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8004e08:	2300      	movs	r3, #0
 8004e0a:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004e0c:	f107 0310 	add.w	r3, r7, #16
 8004e10:	4618      	mov	r0, r3
 8004e12:	f003 ff4b 	bl	8008cac <HAL_RCCEx_PeriphCLKConfig>
 8004e16:	4603      	mov	r3, r0
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d001      	beq.n	8004e20 <HAL_UART_MspInit+0x54>
    {
      Error_Handler();
 8004e1c:	f7ff f94a 	bl	80040b4 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8004e20:	4b1c      	ldr	r3, [pc, #112]	@ (8004e94 <HAL_UART_MspInit+0xc8>)
 8004e22:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004e26:	4a1b      	ldr	r2, [pc, #108]	@ (8004e94 <HAL_UART_MspInit+0xc8>)
 8004e28:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004e2c:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8004e30:	4b18      	ldr	r3, [pc, #96]	@ (8004e94 <HAL_UART_MspInit+0xc8>)
 8004e32:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004e36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004e3a:	60fb      	str	r3, [r7, #12]
 8004e3c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004e3e:	4b15      	ldr	r3, [pc, #84]	@ (8004e94 <HAL_UART_MspInit+0xc8>)
 8004e40:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004e44:	4a13      	ldr	r2, [pc, #76]	@ (8004e94 <HAL_UART_MspInit+0xc8>)
 8004e46:	f043 0301 	orr.w	r3, r3, #1
 8004e4a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8004e4e:	4b11      	ldr	r3, [pc, #68]	@ (8004e94 <HAL_UART_MspInit+0xc8>)
 8004e50:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004e54:	f003 0301 	and.w	r3, r3, #1
 8004e58:	60bb      	str	r3, [r7, #8]
 8004e5a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8004e5c:	230c      	movs	r3, #12
 8004e5e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004e62:	2302      	movs	r3, #2
 8004e64:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e68:	2300      	movs	r3, #0
 8004e6a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004e6e:	2300      	movs	r3, #0
 8004e70:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004e74:	2307      	movs	r3, #7
 8004e76:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004e7a:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8004e7e:	4619      	mov	r1, r3
 8004e80:	4805      	ldr	r0, [pc, #20]	@ (8004e98 <HAL_UART_MspInit+0xcc>)
 8004e82:	f000 fcab 	bl	80057dc <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8004e86:	bf00      	nop
 8004e88:	37e8      	adds	r7, #232	@ 0xe8
 8004e8a:	46bd      	mov	sp, r7
 8004e8c:	bd80      	pop	{r7, pc}
 8004e8e:	bf00      	nop
 8004e90:	40004400 	.word	0x40004400
 8004e94:	46020c00 	.word	0x46020c00
 8004e98:	42020000 	.word	0x42020000

08004e9c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8004e9c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8004ed4 <LoopForever+0x2>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8004ea0:	f7ff feac 	bl	8004bfc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8004ea4:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8004ea6:	e003      	b.n	8004eb0 <LoopCopyDataInit>

08004ea8 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8004ea8:	4b0b      	ldr	r3, [pc, #44]	@ (8004ed8 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8004eaa:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8004eac:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8004eae:	3104      	adds	r1, #4

08004eb0 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8004eb0:	480a      	ldr	r0, [pc, #40]	@ (8004edc <LoopForever+0xa>)
	ldr	r3, =_edata
 8004eb2:	4b0b      	ldr	r3, [pc, #44]	@ (8004ee0 <LoopForever+0xe>)
	adds	r2, r0, r1
 8004eb4:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8004eb6:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8004eb8:	d3f6      	bcc.n	8004ea8 <CopyDataInit>
	ldr	r2, =_sbss
 8004eba:	4a0a      	ldr	r2, [pc, #40]	@ (8004ee4 <LoopForever+0x12>)
	b	LoopFillZerobss
 8004ebc:	e002      	b.n	8004ec4 <LoopFillZerobss>

08004ebe <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8004ebe:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8004ec0:	f842 3b04 	str.w	r3, [r2], #4

08004ec4 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8004ec4:	4b08      	ldr	r3, [pc, #32]	@ (8004ee8 <LoopForever+0x16>)
	cmp	r2, r3
 8004ec6:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8004ec8:	d3f9      	bcc.n	8004ebe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8004eca:	f009 fc51 	bl	800e770 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8004ece:	f7fe fe53 	bl	8003b78 <main>

08004ed2 <LoopForever>:

LoopForever:
    b LoopForever
 8004ed2:	e7fe      	b.n	8004ed2 <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8004ed4:	200c0000 	.word	0x200c0000
	ldr	r3, =_sidata
 8004ed8:	08011f4c 	.word	0x08011f4c
	ldr	r0, =_sdata
 8004edc:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8004ee0:	200001fc 	.word	0x200001fc
	ldr	r2, =_sbss
 8004ee4:	200001fc 	.word	0x200001fc
	ldr	r3, = _ebss
 8004ee8:	2000073c 	.word	0x2000073c

08004eec <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8004eec:	e7fe      	b.n	8004eec <ADC1_IRQHandler>
	...

08004ef0 <BSP_LED_Init>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8004ef0:	b580      	push	{r7, lr}
 8004ef2:	b08e      	sub	sp, #56	@ 0x38
 8004ef4:	af00      	add	r7, sp, #0
 8004ef6:	4603      	mov	r3, r0
 8004ef8:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8004efa:	2300      	movs	r3, #0
 8004efc:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitTypeDef  gpio_init_structure;
#if defined (USE_NUCLEO_144)
  uint32_t pwrenabled = 0U;
 8004efe:	2300      	movs	r3, #0
 8004f00:	633b      	str	r3, [r7, #48]	@ 0x30
#endif /* USE_NUCLEO_144 */

  if ((Led != LED2)
 8004f02:	79fb      	ldrb	r3, [r7, #7]
 8004f04:	2b01      	cmp	r3, #1
 8004f06:	d009      	beq.n	8004f1c <BSP_LED_Init+0x2c>
#if defined (USE_NUCLEO_144)
      && (Led != LED1) && (Led != LED3)
 8004f08:	79fb      	ldrb	r3, [r7, #7]
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d006      	beq.n	8004f1c <BSP_LED_Init+0x2c>
 8004f0e:	79fb      	ldrb	r3, [r7, #7]
 8004f10:	2b02      	cmp	r3, #2
 8004f12:	d003      	beq.n	8004f1c <BSP_LED_Init+0x2c>
#endif /* defined (USE_NUCLEO_144) */
     )
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8004f14:	f06f 0301 	mvn.w	r3, #1
 8004f18:	637b      	str	r3, [r7, #52]	@ 0x34
 8004f1a:	e06e      	b.n	8004ffa <BSP_LED_Init+0x10a>
  }
  else
  {
    /* Enable the GPIO LED Clock */
    if (Led == LED2)
 8004f1c:	79fb      	ldrb	r3, [r7, #7]
 8004f1e:	2b01      	cmp	r3, #1
 8004f20:	d10f      	bne.n	8004f42 <BSP_LED_Init+0x52>
    {
      LED2_GPIO_CLK_ENABLE();
 8004f22:	4b38      	ldr	r3, [pc, #224]	@ (8005004 <BSP_LED_Init+0x114>)
 8004f24:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004f28:	4a36      	ldr	r2, [pc, #216]	@ (8005004 <BSP_LED_Init+0x114>)
 8004f2a:	f043 0302 	orr.w	r3, r3, #2
 8004f2e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8004f32:	4b34      	ldr	r3, [pc, #208]	@ (8005004 <BSP_LED_Init+0x114>)
 8004f34:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004f38:	f003 0302 	and.w	r3, r3, #2
 8004f3c:	61bb      	str	r3, [r7, #24]
 8004f3e:	69bb      	ldr	r3, [r7, #24]
 8004f40:	e046      	b.n	8004fd0 <BSP_LED_Init+0xe0>
    }
#if defined (USE_NUCLEO_144)
    else if (Led == LED1)
 8004f42:	79fb      	ldrb	r3, [r7, #7]
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d10f      	bne.n	8004f68 <BSP_LED_Init+0x78>
    {
      LED1_GPIO_CLK_ENABLE();
 8004f48:	4b2e      	ldr	r3, [pc, #184]	@ (8005004 <BSP_LED_Init+0x114>)
 8004f4a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004f4e:	4a2d      	ldr	r2, [pc, #180]	@ (8005004 <BSP_LED_Init+0x114>)
 8004f50:	f043 0304 	orr.w	r3, r3, #4
 8004f54:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8004f58:	4b2a      	ldr	r3, [pc, #168]	@ (8005004 <BSP_LED_Init+0x114>)
 8004f5a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004f5e:	f003 0304 	and.w	r3, r3, #4
 8004f62:	617b      	str	r3, [r7, #20]
 8004f64:	697b      	ldr	r3, [r7, #20]
 8004f66:	e033      	b.n	8004fd0 <BSP_LED_Init+0xe0>
    }
    else /* Led == Led3 */
    {
      /* Enable VddIO2 for Led3 */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004f68:	4b26      	ldr	r3, [pc, #152]	@ (8005004 <BSP_LED_Init+0x114>)
 8004f6a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004f6e:	f003 0304 	and.w	r3, r3, #4
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d110      	bne.n	8004f98 <BSP_LED_Init+0xa8>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8004f76:	4b23      	ldr	r3, [pc, #140]	@ (8005004 <BSP_LED_Init+0x114>)
 8004f78:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004f7c:	4a21      	ldr	r2, [pc, #132]	@ (8005004 <BSP_LED_Init+0x114>)
 8004f7e:	f043 0304 	orr.w	r3, r3, #4
 8004f82:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8004f86:	4b1f      	ldr	r3, [pc, #124]	@ (8005004 <BSP_LED_Init+0x114>)
 8004f88:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004f8c:	f003 0304 	and.w	r3, r3, #4
 8004f90:	613b      	str	r3, [r7, #16]
 8004f92:	693b      	ldr	r3, [r7, #16]
        pwrenabled = 1U;
 8004f94:	2301      	movs	r3, #1
 8004f96:	633b      	str	r3, [r7, #48]	@ 0x30
      }

      HAL_PWREx_EnableVddIO2();
 8004f98:	f002 fb76 	bl	8007688 <HAL_PWREx_EnableVddIO2>

      if (pwrenabled == 1U)
 8004f9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f9e:	2b01      	cmp	r3, #1
 8004fa0:	d107      	bne.n	8004fb2 <BSP_LED_Init+0xc2>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8004fa2:	4b18      	ldr	r3, [pc, #96]	@ (8005004 <BSP_LED_Init+0x114>)
 8004fa4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004fa8:	4a16      	ldr	r2, [pc, #88]	@ (8005004 <BSP_LED_Init+0x114>)
 8004faa:	f023 0304 	bic.w	r3, r3, #4
 8004fae:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
      }

      LED3_GPIO_CLK_ENABLE();
 8004fb2:	4b14      	ldr	r3, [pc, #80]	@ (8005004 <BSP_LED_Init+0x114>)
 8004fb4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004fb8:	4a12      	ldr	r2, [pc, #72]	@ (8005004 <BSP_LED_Init+0x114>)
 8004fba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004fbe:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8004fc2:	4b10      	ldr	r3, [pc, #64]	@ (8005004 <BSP_LED_Init+0x114>)
 8004fc4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004fc8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004fcc:	60fb      	str	r3, [r7, #12]
 8004fce:	68fb      	ldr	r3, [r7, #12]
    }
#endif /* defined (USE_NUCLEO_144) */
    /* Configure the GPIO_LED pin */
    gpio_init_structure.Pin   = LED_PIN[Led];
 8004fd0:	79fb      	ldrb	r3, [r7, #7]
 8004fd2:	4a0d      	ldr	r2, [pc, #52]	@ (8005008 <BSP_LED_Init+0x118>)
 8004fd4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004fd8:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8004fda:	2301      	movs	r3, #1
 8004fdc:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull  = GPIO_NOPULL;
 8004fde:	2300      	movs	r3, #0
 8004fe0:	627b      	str	r3, [r7, #36]	@ 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004fe2:	2303      	movs	r3, #3
 8004fe4:	62bb      	str	r3, [r7, #40]	@ 0x28

    HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 8004fe6:	79fb      	ldrb	r3, [r7, #7]
 8004fe8:	4a08      	ldr	r2, [pc, #32]	@ (800500c <BSP_LED_Init+0x11c>)
 8004fea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004fee:	f107 021c 	add.w	r2, r7, #28
 8004ff2:	4611      	mov	r1, r2
 8004ff4:	4618      	mov	r0, r3
 8004ff6:	f000 fbf1 	bl	80057dc <HAL_GPIO_Init>
  }

  return ret;
 8004ffa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8004ffc:	4618      	mov	r0, r3
 8004ffe:	3738      	adds	r7, #56	@ 0x38
 8005000:	46bd      	mov	sp, r7
 8005002:	bd80      	pop	{r7, pc}
 8005004:	46020c00 	.word	0x46020c00
 8005008:	08011b14 	.word	0x08011b14
 800500c:	20000014 	.word	0x20000014

08005010 <BSP_PB_Init>:
  *            @arg  BUTTON_MODE_GPIO: Button will be used as simple IO
  *            @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                    with interrupt generation capability
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8005010:	b580      	push	{r7, lr}
 8005012:	b088      	sub	sp, #32
 8005014:	af00      	add	r7, sp, #0
 8005016:	4603      	mov	r3, r0
 8005018:	460a      	mov	r2, r1
 800501a:	71fb      	strb	r3, [r7, #7]
 800501c:	4613      	mov	r3, r2
 800501e:	71bb      	strb	r3, [r7, #6]
  static BSP_EXTI_LineCallback ButtonCallback[BUTTONn] = {BUTTON_USER_EXTI_Callback};
  static uint32_t  BSP_BUTTON_PRIO [BUTTONn] = {BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] = {BUTTON_USER_EXTI_LINE};

  /* Enable the BUTTON clock */
  BUTTON_USER_GPIO_CLK_ENABLE();
 8005020:	4b30      	ldr	r3, [pc, #192]	@ (80050e4 <BSP_PB_Init+0xd4>)
 8005022:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005026:	4a2f      	ldr	r2, [pc, #188]	@ (80050e4 <BSP_PB_Init+0xd4>)
 8005028:	f043 0304 	orr.w	r3, r3, #4
 800502c:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8005030:	4b2c      	ldr	r3, [pc, #176]	@ (80050e4 <BSP_PB_Init+0xd4>)
 8005032:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005036:	f003 0304 	and.w	r3, r3, #4
 800503a:	60bb      	str	r3, [r7, #8]
 800503c:	68bb      	ldr	r3, [r7, #8]

  gpio_init_structure.Pin = BUTTON_PIN [Button];
 800503e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8005042:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Pull = GPIO_PULLDOWN;
 8005044:	2302      	movs	r3, #2
 8005046:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8005048:	2302      	movs	r3, #2
 800504a:	61bb      	str	r3, [r7, #24]

  if (ButtonMode == BUTTON_MODE_GPIO)
 800504c:	79bb      	ldrb	r3, [r7, #6]
 800504e:	2b00      	cmp	r3, #0
 8005050:	d10c      	bne.n	800506c <BSP_PB_Init+0x5c>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 8005052:	2300      	movs	r3, #0
 8005054:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT [Button], &gpio_init_structure);
 8005056:	79fb      	ldrb	r3, [r7, #7]
 8005058:	4a23      	ldr	r2, [pc, #140]	@ (80050e8 <BSP_PB_Init+0xd8>)
 800505a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800505e:	f107 020c 	add.w	r2, r7, #12
 8005062:	4611      	mov	r1, r2
 8005064:	4618      	mov	r0, r3
 8005066:	f000 fbb9 	bl	80057dc <HAL_GPIO_Init>
 800506a:	e036      	b.n	80050da <BSP_PB_Init+0xca>
  }
  else /* (ButtonMode == BUTTON_MODE_EXTI) */
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 800506c:	4b1f      	ldr	r3, [pc, #124]	@ (80050ec <BSP_PB_Init+0xdc>)
 800506e:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8005070:	79fb      	ldrb	r3, [r7, #7]
 8005072:	4a1d      	ldr	r2, [pc, #116]	@ (80050e8 <BSP_PB_Init+0xd8>)
 8005074:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005078:	f107 020c 	add.w	r2, r7, #12
 800507c:	4611      	mov	r1, r2
 800507e:	4618      	mov	r0, r3
 8005080:	f000 fbac 	bl	80057dc <HAL_GPIO_Init>

    (void)HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]);
 8005084:	79fa      	ldrb	r2, [r7, #7]
 8005086:	4613      	mov	r3, r2
 8005088:	005b      	lsls	r3, r3, #1
 800508a:	4413      	add	r3, r2
 800508c:	009b      	lsls	r3, r3, #2
 800508e:	4a18      	ldr	r2, [pc, #96]	@ (80050f0 <BSP_PB_Init+0xe0>)
 8005090:	441a      	add	r2, r3
 8005092:	79fb      	ldrb	r3, [r7, #7]
 8005094:	4917      	ldr	r1, [pc, #92]	@ (80050f4 <BSP_PB_Init+0xe4>)
 8005096:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800509a:	4619      	mov	r1, r3
 800509c:	4610      	mov	r0, r2
 800509e:	f000 fb41 	bl	8005724 <HAL_EXTI_GetHandle>
    (void)HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]);
 80050a2:	79fa      	ldrb	r2, [r7, #7]
 80050a4:	4613      	mov	r3, r2
 80050a6:	005b      	lsls	r3, r3, #1
 80050a8:	4413      	add	r3, r2
 80050aa:	009b      	lsls	r3, r3, #2
 80050ac:	4a10      	ldr	r2, [pc, #64]	@ (80050f0 <BSP_PB_Init+0xe0>)
 80050ae:	1898      	adds	r0, r3, r2
 80050b0:	79fb      	ldrb	r3, [r7, #7]
 80050b2:	4a11      	ldr	r2, [pc, #68]	@ (80050f8 <BSP_PB_Init+0xe8>)
 80050b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80050b8:	461a      	mov	r2, r3
 80050ba:	2100      	movs	r1, #0
 80050bc:	f000 fb07 	bl	80056ce <HAL_EXTI_RegisterCallback>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 80050c0:	2018      	movs	r0, #24
 80050c2:	79fb      	ldrb	r3, [r7, #7]
 80050c4:	4a0d      	ldr	r2, [pc, #52]	@ (80050fc <BSP_PB_Init+0xec>)
 80050c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80050ca:	2200      	movs	r2, #0
 80050cc:	4619      	mov	r1, r3
 80050ce:	f000 fa3c 	bl	800554a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 80050d2:	2318      	movs	r3, #24
 80050d4:	4618      	mov	r0, r3
 80050d6:	f000 fa52 	bl	800557e <HAL_NVIC_EnableIRQ>
  }

  return BSP_ERROR_NONE;
 80050da:	2300      	movs	r3, #0
}
 80050dc:	4618      	mov	r0, r3
 80050de:	3720      	adds	r7, #32
 80050e0:	46bd      	mov	sp, r7
 80050e2:	bd80      	pop	{r7, pc}
 80050e4:	46020c00 	.word	0x46020c00
 80050e8:	20000020 	.word	0x20000020
 80050ec:	10110000 	.word	0x10110000
 80050f0:	20000548 	.word	0x20000548
 80050f4:	08011b1c 	.word	0x08011b1c
 80050f8:	20000024 	.word	0x20000024
 80050fc:	20000028 	.word	0x20000028

08005100 <BSP_PB_IRQHandler>:
  * @brief  BSP Button IRQ handler
  * @param  Button Can only be BUTTON_USER
  * @retval None
  */
void BSP_PB_IRQHandler(Button_TypeDef Button)
{
 8005100:	b580      	push	{r7, lr}
 8005102:	b082      	sub	sp, #8
 8005104:	af00      	add	r7, sp, #0
 8005106:	4603      	mov	r3, r0
 8005108:	71fb      	strb	r3, [r7, #7]
  HAL_EXTI_IRQHandler(&hpb_exti[Button]);
 800510a:	79fa      	ldrb	r2, [r7, #7]
 800510c:	4613      	mov	r3, r2
 800510e:	005b      	lsls	r3, r3, #1
 8005110:	4413      	add	r3, r2
 8005112:	009b      	lsls	r3, r3, #2
 8005114:	4a04      	ldr	r2, [pc, #16]	@ (8005128 <BSP_PB_IRQHandler+0x28>)
 8005116:	4413      	add	r3, r2
 8005118:	4618      	mov	r0, r3
 800511a:	f000 fb17 	bl	800574c <HAL_EXTI_IRQHandler>
}
 800511e:	bf00      	nop
 8005120:	3708      	adds	r7, #8
 8005122:	46bd      	mov	sp, r7
 8005124:	bd80      	pop	{r7, pc}
 8005126:	bf00      	nop
 8005128:	20000548 	.word	0x20000548

0800512c <BSP_PB_Callback>:
  * @brief  BSP Push Button callback
  * @param  Button Specifies the pin connected EXTI line
  * @retval None
  */
__weak void BSP_PB_Callback(Button_TypeDef Button)
{
 800512c:	b480      	push	{r7}
 800512e:	b083      	sub	sp, #12
 8005130:	af00      	add	r7, sp, #0
 8005132:	4603      	mov	r3, r0
 8005134:	71fb      	strb	r3, [r7, #7]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Button);

  /* This function should be implemented by the user application.
     It is called into this driver when an event on Button is triggered. */
}
 8005136:	bf00      	nop
 8005138:	370c      	adds	r7, #12
 800513a:	46bd      	mov	sp, r7
 800513c:	bc80      	pop	{r7}
 800513e:	4770      	bx	lr

08005140 <BSP_COM_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval BSP error code
  */
int32_t BSP_COM_Init(COM_TypeDef COM, COM_InitTypeDef *COM_Init)
{
 8005140:	b580      	push	{r7, lr}
 8005142:	b084      	sub	sp, #16
 8005144:	af00      	add	r7, sp, #0
 8005146:	4603      	mov	r3, r0
 8005148:	6039      	str	r1, [r7, #0]
 800514a:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 800514c:	2300      	movs	r3, #0
 800514e:	60fb      	str	r3, [r7, #12]

  if (COM >= COMn)
 8005150:	79fb      	ldrb	r3, [r7, #7]
 8005152:	2b00      	cmp	r3, #0
 8005154:	d003      	beq.n	800515e <BSP_COM_Init+0x1e>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8005156:	f06f 0301 	mvn.w	r3, #1
 800515a:	60fb      	str	r3, [r7, #12]
 800515c:	e018      	b.n	8005190 <BSP_COM_Init+0x50>
  }
  else
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0)
    /* Init the UART Msp */
    COM1_MspInit(&hcom_uart[COM]);
 800515e:	79fb      	ldrb	r3, [r7, #7]
 8005160:	2294      	movs	r2, #148	@ 0x94
 8005162:	fb02 f303 	mul.w	r3, r2, r3
 8005166:	4a0d      	ldr	r2, [pc, #52]	@ (800519c <BSP_COM_Init+0x5c>)
 8005168:	4413      	add	r3, r2
 800516a:	4618      	mov	r0, r3
 800516c:	f000 f870 	bl	8005250 <COM1_MspInit>
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS == 0) */

    if (MX_USART1_Init(&hcom_uart[COM], COM_Init) != HAL_OK)
 8005170:	79fb      	ldrb	r3, [r7, #7]
 8005172:	2294      	movs	r2, #148	@ 0x94
 8005174:	fb02 f303 	mul.w	r3, r2, r3
 8005178:	4a08      	ldr	r2, [pc, #32]	@ (800519c <BSP_COM_Init+0x5c>)
 800517a:	4413      	add	r3, r2
 800517c:	6839      	ldr	r1, [r7, #0]
 800517e:	4618      	mov	r0, r3
 8005180:	f000 f80e 	bl	80051a0 <MX_USART1_Init>
 8005184:	4603      	mov	r3, r0
 8005186:	2b00      	cmp	r3, #0
 8005188:	d002      	beq.n	8005190 <BSP_COM_Init+0x50>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 800518a:	f06f 0303 	mvn.w	r3, #3
 800518e:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8005190:	68fb      	ldr	r3, [r7, #12]
}
 8005192:	4618      	mov	r0, r3
 8005194:	3710      	adds	r7, #16
 8005196:	46bd      	mov	sp, r7
 8005198:	bd80      	pop	{r7, pc}
 800519a:	bf00      	nop
 800519c:	20000554 	.word	0x20000554

080051a0 <MX_USART1_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval HAL error code
  */
__weak HAL_StatusTypeDef MX_USART1_Init(UART_HandleTypeDef *huart, MX_UART_InitTypeDef *COM_Init)
{
 80051a0:	b580      	push	{r7, lr}
 80051a2:	b082      	sub	sp, #8
 80051a4:	af00      	add	r7, sp, #0
 80051a6:	6078      	str	r0, [r7, #4]
 80051a8:	6039      	str	r1, [r7, #0]
  /* USART configuration */
  huart->Instance                = COM_USART[COM1];
 80051aa:	4b16      	ldr	r3, [pc, #88]	@ (8005204 <MX_USART1_Init+0x64>)
 80051ac:	681a      	ldr	r2, [r3, #0]
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	601a      	str	r2, [r3, #0]
  huart->Init.BaudRate           = COM_Init->BaudRate;
 80051b2:	683b      	ldr	r3, [r7, #0]
 80051b4:	681a      	ldr	r2, [r3, #0]
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	605a      	str	r2, [r3, #4]
  huart->Init.Mode               = UART_MODE_TX_RX;
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	220c      	movs	r2, #12
 80051be:	615a      	str	r2, [r3, #20]
  huart->Init.Parity             = (uint32_t)COM_Init->Parity;
 80051c0:	683b      	ldr	r3, [r7, #0]
 80051c2:	895b      	ldrh	r3, [r3, #10]
 80051c4:	461a      	mov	r2, r3
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	611a      	str	r2, [r3, #16]
  huart->Init.WordLength         = (uint32_t)COM_Init->WordLength;
 80051ca:	683b      	ldr	r3, [r7, #0]
 80051cc:	685a      	ldr	r2, [r3, #4]
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	609a      	str	r2, [r3, #8]
  huart->Init.StopBits           = (uint32_t)COM_Init->StopBits;
 80051d2:	683b      	ldr	r3, [r7, #0]
 80051d4:	891b      	ldrh	r3, [r3, #8]
 80051d6:	461a      	mov	r2, r3
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	60da      	str	r2, [r3, #12]
  huart->Init.HwFlowCtl          = (uint32_t)COM_Init->HwFlowCtl;
 80051dc:	683b      	ldr	r3, [r7, #0]
 80051de:	899b      	ldrh	r3, [r3, #12]
 80051e0:	461a      	mov	r2, r3
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	619a      	str	r2, [r3, #24]
  huart->Init.OverSampling       = UART_OVERSAMPLING_8;
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80051ec:	61da      	str	r2, [r3, #28]
  huart->Init.ClockPrescaler     = UART_PRESCALER_DIV1;
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	2200      	movs	r2, #0
 80051f2:	625a      	str	r2, [r3, #36]	@ 0x24
  return HAL_UART_Init(huart);
 80051f4:	6878      	ldr	r0, [r7, #4]
 80051f6:	f007 ff3c 	bl	800d072 <HAL_UART_Init>
 80051fa:	4603      	mov	r3, r0
}
 80051fc:	4618      	mov	r0, r3
 80051fe:	3708      	adds	r7, #8
 8005200:	46bd      	mov	sp, r7
 8005202:	bd80      	pop	{r7, pc}
 8005204:	20000010 	.word	0x20000010

08005208 <__io_putchar>:

/**
  * @brief  Redirect console output to COM
  */
PUTCHAR_PROTOTYPE
{
 8005208:	b580      	push	{r7, lr}
 800520a:	b082      	sub	sp, #8
 800520c:	af00      	add	r7, sp, #0
 800520e:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&hcom_uart [COM_ActiveLogPort], (uint8_t *) &ch, 1, COM_POLL_TIMEOUT);
 8005210:	4b09      	ldr	r3, [pc, #36]	@ (8005238 <__io_putchar+0x30>)
 8005212:	781b      	ldrb	r3, [r3, #0]
 8005214:	461a      	mov	r2, r3
 8005216:	2394      	movs	r3, #148	@ 0x94
 8005218:	fb02 f303 	mul.w	r3, r2, r3
 800521c:	4a07      	ldr	r2, [pc, #28]	@ (800523c <__io_putchar+0x34>)
 800521e:	1898      	adds	r0, r3, r2
 8005220:	1d39      	adds	r1, r7, #4
 8005222:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8005226:	2201      	movs	r2, #1
 8005228:	f007 ff73 	bl	800d112 <HAL_UART_Transmit>
  return ch;
 800522c:	687b      	ldr	r3, [r7, #4]
}
 800522e:	4618      	mov	r0, r3
 8005230:	3708      	adds	r7, #8
 8005232:	46bd      	mov	sp, r7
 8005234:	bd80      	pop	{r7, pc}
 8005236:	bf00      	nop
 8005238:	200005e8 	.word	0x200005e8
 800523c:	20000554 	.word	0x20000554

08005240 <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  Key EXTI line detection callbacks.
  * @retval BSP status
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 8005240:	b580      	push	{r7, lr}
 8005242:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 8005244:	2000      	movs	r0, #0
 8005246:	f7ff ff71 	bl	800512c <BSP_PB_Callback>
}
 800524a:	bf00      	nop
 800524c:	bd80      	pop	{r7, pc}
	...

08005250 <COM1_MspInit>:
  * @brief  Initializes UART MSP.
  * @param  huart UART handle
  * @retval BSP status
  */
static void COM1_MspInit(UART_HandleTypeDef *huart)
{
 8005250:	b580      	push	{r7, lr}
 8005252:	b08a      	sub	sp, #40	@ 0x28
 8005254:	af00      	add	r7, sp, #0
 8005256:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);

  /* Enable GPIO clock */
  COM1_TX_GPIO_CLK_ENABLE();
 8005258:	4b27      	ldr	r3, [pc, #156]	@ (80052f8 <COM1_MspInit+0xa8>)
 800525a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800525e:	4a26      	ldr	r2, [pc, #152]	@ (80052f8 <COM1_MspInit+0xa8>)
 8005260:	f043 0301 	orr.w	r3, r3, #1
 8005264:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8005268:	4b23      	ldr	r3, [pc, #140]	@ (80052f8 <COM1_MspInit+0xa8>)
 800526a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800526e:	f003 0301 	and.w	r3, r3, #1
 8005272:	613b      	str	r3, [r7, #16]
 8005274:	693b      	ldr	r3, [r7, #16]
  COM1_RX_GPIO_CLK_ENABLE();
 8005276:	4b20      	ldr	r3, [pc, #128]	@ (80052f8 <COM1_MspInit+0xa8>)
 8005278:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800527c:	4a1e      	ldr	r2, [pc, #120]	@ (80052f8 <COM1_MspInit+0xa8>)
 800527e:	f043 0301 	orr.w	r3, r3, #1
 8005282:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8005286:	4b1c      	ldr	r3, [pc, #112]	@ (80052f8 <COM1_MspInit+0xa8>)
 8005288:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800528c:	f003 0301 	and.w	r3, r3, #1
 8005290:	60fb      	str	r3, [r7, #12]
 8005292:	68fb      	ldr	r3, [r7, #12]

  /* Enable USART clock */
  COM1_CLK_ENABLE();
 8005294:	4b18      	ldr	r3, [pc, #96]	@ (80052f8 <COM1_MspInit+0xa8>)
 8005296:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800529a:	4a17      	ldr	r2, [pc, #92]	@ (80052f8 <COM1_MspInit+0xa8>)
 800529c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80052a0:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 80052a4:	4b14      	ldr	r3, [pc, #80]	@ (80052f8 <COM1_MspInit+0xa8>)
 80052a6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80052aa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80052ae:	60bb      	str	r3, [r7, #8]
 80052b0:	68bb      	ldr	r3, [r7, #8]

  /* Configure USART Tx as alternate function */
  gpio_init_structure.Pin       = COM1_TX_PIN;
 80052b2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80052b6:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80052b8:	2302      	movs	r3, #2
 80052ba:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 80052bc:	2302      	movs	r3, #2
 80052be:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull      = GPIO_PULLUP;
 80052c0:	2301      	movs	r3, #1
 80052c2:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Alternate = COM1_TX_AF;
 80052c4:	2307      	movs	r3, #7
 80052c6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_TX_GPIO_PORT, &gpio_init_structure);
 80052c8:	f107 0314 	add.w	r3, r7, #20
 80052cc:	4619      	mov	r1, r3
 80052ce:	480b      	ldr	r0, [pc, #44]	@ (80052fc <COM1_MspInit+0xac>)
 80052d0:	f000 fa84 	bl	80057dc <HAL_GPIO_Init>

  /* Configure USART Rx as alternate function */
  gpio_init_structure.Pin       = COM1_RX_PIN;
 80052d4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80052d8:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80052da:	2302      	movs	r3, #2
 80052dc:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Alternate = COM1_RX_AF;
 80052de:	2307      	movs	r3, #7
 80052e0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_RX_GPIO_PORT, &gpio_init_structure);
 80052e2:	f107 0314 	add.w	r3, r7, #20
 80052e6:	4619      	mov	r1, r3
 80052e8:	4804      	ldr	r0, [pc, #16]	@ (80052fc <COM1_MspInit+0xac>)
 80052ea:	f000 fa77 	bl	80057dc <HAL_GPIO_Init>
}
 80052ee:	bf00      	nop
 80052f0:	3728      	adds	r7, #40	@ 0x28
 80052f2:	46bd      	mov	sp, r7
 80052f4:	bd80      	pop	{r7, pc}
 80052f6:	bf00      	nop
 80052f8:	46020c00 	.word	0x46020c00
 80052fc:	42020000 	.word	0x42020000

08005300 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005300:	b580      	push	{r7, lr}
 8005302:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005304:	4b12      	ldr	r3, [pc, #72]	@ (8005350 <HAL_Init+0x50>)
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	4a11      	ldr	r2, [pc, #68]	@ (8005350 <HAL_Init+0x50>)
 800530a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800530e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005310:	2003      	movs	r0, #3
 8005312:	f000 f90f 	bl	8005534 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8005316:	f003 faa1 	bl	800885c <HAL_RCC_GetSysClockFreq>
 800531a:	4602      	mov	r2, r0
 800531c:	4b0d      	ldr	r3, [pc, #52]	@ (8005354 <HAL_Init+0x54>)
 800531e:	6a1b      	ldr	r3, [r3, #32]
 8005320:	f003 030f 	and.w	r3, r3, #15
 8005324:	490c      	ldr	r1, [pc, #48]	@ (8005358 <HAL_Init+0x58>)
 8005326:	5ccb      	ldrb	r3, [r1, r3]
 8005328:	fa22 f303 	lsr.w	r3, r2, r3
 800532c:	4a0b      	ldr	r2, [pc, #44]	@ (800535c <HAL_Init+0x5c>)
 800532e:	6013      	str	r3, [r2, #0]

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8005330:	2004      	movs	r0, #4
 8005332:	f000 f933 	bl	800559c <HAL_SYSTICK_CLKSourceConfig>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8005336:	2007      	movs	r0, #7
 8005338:	f7ff facc 	bl	80048d4 <HAL_InitTick>
 800533c:	4603      	mov	r3, r0
 800533e:	2b00      	cmp	r3, #0
 8005340:	d001      	beq.n	8005346 <HAL_Init+0x46>
  {
    return HAL_ERROR;
 8005342:	2301      	movs	r3, #1
 8005344:	e002      	b.n	800534c <HAL_Init+0x4c>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8005346:	f7ff faa7 	bl	8004898 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800534a:	2300      	movs	r3, #0
}
 800534c:	4618      	mov	r0, r3
 800534e:	bd80      	pop	{r7, pc}
 8005350:	40022000 	.word	0x40022000
 8005354:	46020c00 	.word	0x46020c00
 8005358:	08011abc 	.word	0x08011abc
 800535c:	2000000c 	.word	0x2000000c

08005360 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005360:	b480      	push	{r7}
 8005362:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8005364:	4b05      	ldr	r3, [pc, #20]	@ (800537c <HAL_IncTick+0x1c>)
 8005366:	781b      	ldrb	r3, [r3, #0]
 8005368:	461a      	mov	r2, r3
 800536a:	4b05      	ldr	r3, [pc, #20]	@ (8005380 <HAL_IncTick+0x20>)
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	4413      	add	r3, r2
 8005370:	4a03      	ldr	r2, [pc, #12]	@ (8005380 <HAL_IncTick+0x20>)
 8005372:	6013      	str	r3, [r2, #0]
}
 8005374:	bf00      	nop
 8005376:	46bd      	mov	sp, r7
 8005378:	bc80      	pop	{r7}
 800537a:	4770      	bx	lr
 800537c:	20000030 	.word	0x20000030
 8005380:	200005ec 	.word	0x200005ec

08005384 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005384:	b480      	push	{r7}
 8005386:	af00      	add	r7, sp, #0
  return uwTick;
 8005388:	4b02      	ldr	r3, [pc, #8]	@ (8005394 <HAL_GetTick+0x10>)
 800538a:	681b      	ldr	r3, [r3, #0]
}
 800538c:	4618      	mov	r0, r3
 800538e:	46bd      	mov	sp, r7
 8005390:	bc80      	pop	{r7}
 8005392:	4770      	bx	lr
 8005394:	200005ec 	.word	0x200005ec

08005398 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005398:	b580      	push	{r7, lr}
 800539a:	b084      	sub	sp, #16
 800539c:	af00      	add	r7, sp, #0
 800539e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80053a0:	f7ff fff0 	bl	8005384 <HAL_GetTick>
 80053a4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80053b0:	d005      	beq.n	80053be <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80053b2:	4b0a      	ldr	r3, [pc, #40]	@ (80053dc <HAL_Delay+0x44>)
 80053b4:	781b      	ldrb	r3, [r3, #0]
 80053b6:	461a      	mov	r2, r3
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	4413      	add	r3, r2
 80053bc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80053be:	bf00      	nop
 80053c0:	f7ff ffe0 	bl	8005384 <HAL_GetTick>
 80053c4:	4602      	mov	r2, r0
 80053c6:	68bb      	ldr	r3, [r7, #8]
 80053c8:	1ad3      	subs	r3, r2, r3
 80053ca:	68fa      	ldr	r2, [r7, #12]
 80053cc:	429a      	cmp	r2, r3
 80053ce:	d8f7      	bhi.n	80053c0 <HAL_Delay+0x28>
  {
  }
}
 80053d0:	bf00      	nop
 80053d2:	bf00      	nop
 80053d4:	3710      	adds	r7, #16
 80053d6:	46bd      	mov	sp, r7
 80053d8:	bd80      	pop	{r7, pc}
 80053da:	bf00      	nop
 80053dc:	20000030 	.word	0x20000030

080053e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80053e0:	b480      	push	{r7}
 80053e2:	b085      	sub	sp, #20
 80053e4:	af00      	add	r7, sp, #0
 80053e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	f003 0307 	and.w	r3, r3, #7
 80053ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80053f0:	4b0c      	ldr	r3, [pc, #48]	@ (8005424 <__NVIC_SetPriorityGrouping+0x44>)
 80053f2:	68db      	ldr	r3, [r3, #12]
 80053f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80053f6:	68ba      	ldr	r2, [r7, #8]
 80053f8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80053fc:	4013      	ands	r3, r2
 80053fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005404:	68bb      	ldr	r3, [r7, #8]
 8005406:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005408:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800540c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005410:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005412:	4a04      	ldr	r2, [pc, #16]	@ (8005424 <__NVIC_SetPriorityGrouping+0x44>)
 8005414:	68bb      	ldr	r3, [r7, #8]
 8005416:	60d3      	str	r3, [r2, #12]
}
 8005418:	bf00      	nop
 800541a:	3714      	adds	r7, #20
 800541c:	46bd      	mov	sp, r7
 800541e:	bc80      	pop	{r7}
 8005420:	4770      	bx	lr
 8005422:	bf00      	nop
 8005424:	e000ed00 	.word	0xe000ed00

08005428 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005428:	b480      	push	{r7}
 800542a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800542c:	4b04      	ldr	r3, [pc, #16]	@ (8005440 <__NVIC_GetPriorityGrouping+0x18>)
 800542e:	68db      	ldr	r3, [r3, #12]
 8005430:	0a1b      	lsrs	r3, r3, #8
 8005432:	f003 0307 	and.w	r3, r3, #7
}
 8005436:	4618      	mov	r0, r3
 8005438:	46bd      	mov	sp, r7
 800543a:	bc80      	pop	{r7}
 800543c:	4770      	bx	lr
 800543e:	bf00      	nop
 8005440:	e000ed00 	.word	0xe000ed00

08005444 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005444:	b480      	push	{r7}
 8005446:	b083      	sub	sp, #12
 8005448:	af00      	add	r7, sp, #0
 800544a:	4603      	mov	r3, r0
 800544c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800544e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005452:	2b00      	cmp	r3, #0
 8005454:	db0b      	blt.n	800546e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005456:	79fb      	ldrb	r3, [r7, #7]
 8005458:	f003 021f 	and.w	r2, r3, #31
 800545c:	4906      	ldr	r1, [pc, #24]	@ (8005478 <__NVIC_EnableIRQ+0x34>)
 800545e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005462:	095b      	lsrs	r3, r3, #5
 8005464:	2001      	movs	r0, #1
 8005466:	fa00 f202 	lsl.w	r2, r0, r2
 800546a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800546e:	bf00      	nop
 8005470:	370c      	adds	r7, #12
 8005472:	46bd      	mov	sp, r7
 8005474:	bc80      	pop	{r7}
 8005476:	4770      	bx	lr
 8005478:	e000e100 	.word	0xe000e100

0800547c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800547c:	b480      	push	{r7}
 800547e:	b083      	sub	sp, #12
 8005480:	af00      	add	r7, sp, #0
 8005482:	4603      	mov	r3, r0
 8005484:	6039      	str	r1, [r7, #0]
 8005486:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005488:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800548c:	2b00      	cmp	r3, #0
 800548e:	db0a      	blt.n	80054a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005490:	683b      	ldr	r3, [r7, #0]
 8005492:	b2da      	uxtb	r2, r3
 8005494:	490c      	ldr	r1, [pc, #48]	@ (80054c8 <__NVIC_SetPriority+0x4c>)
 8005496:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800549a:	0112      	lsls	r2, r2, #4
 800549c:	b2d2      	uxtb	r2, r2
 800549e:	440b      	add	r3, r1
 80054a0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80054a4:	e00a      	b.n	80054bc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80054a6:	683b      	ldr	r3, [r7, #0]
 80054a8:	b2da      	uxtb	r2, r3
 80054aa:	4908      	ldr	r1, [pc, #32]	@ (80054cc <__NVIC_SetPriority+0x50>)
 80054ac:	79fb      	ldrb	r3, [r7, #7]
 80054ae:	f003 030f 	and.w	r3, r3, #15
 80054b2:	3b04      	subs	r3, #4
 80054b4:	0112      	lsls	r2, r2, #4
 80054b6:	b2d2      	uxtb	r2, r2
 80054b8:	440b      	add	r3, r1
 80054ba:	761a      	strb	r2, [r3, #24]
}
 80054bc:	bf00      	nop
 80054be:	370c      	adds	r7, #12
 80054c0:	46bd      	mov	sp, r7
 80054c2:	bc80      	pop	{r7}
 80054c4:	4770      	bx	lr
 80054c6:	bf00      	nop
 80054c8:	e000e100 	.word	0xe000e100
 80054cc:	e000ed00 	.word	0xe000ed00

080054d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80054d0:	b480      	push	{r7}
 80054d2:	b089      	sub	sp, #36	@ 0x24
 80054d4:	af00      	add	r7, sp, #0
 80054d6:	60f8      	str	r0, [r7, #12]
 80054d8:	60b9      	str	r1, [r7, #8]
 80054da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	f003 0307 	and.w	r3, r3, #7
 80054e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80054e4:	69fb      	ldr	r3, [r7, #28]
 80054e6:	f1c3 0307 	rsb	r3, r3, #7
 80054ea:	2b04      	cmp	r3, #4
 80054ec:	bf28      	it	cs
 80054ee:	2304      	movcs	r3, #4
 80054f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80054f2:	69fb      	ldr	r3, [r7, #28]
 80054f4:	3304      	adds	r3, #4
 80054f6:	2b06      	cmp	r3, #6
 80054f8:	d902      	bls.n	8005500 <NVIC_EncodePriority+0x30>
 80054fa:	69fb      	ldr	r3, [r7, #28]
 80054fc:	3b03      	subs	r3, #3
 80054fe:	e000      	b.n	8005502 <NVIC_EncodePriority+0x32>
 8005500:	2300      	movs	r3, #0
 8005502:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005504:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005508:	69bb      	ldr	r3, [r7, #24]
 800550a:	fa02 f303 	lsl.w	r3, r2, r3
 800550e:	43da      	mvns	r2, r3
 8005510:	68bb      	ldr	r3, [r7, #8]
 8005512:	401a      	ands	r2, r3
 8005514:	697b      	ldr	r3, [r7, #20]
 8005516:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005518:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800551c:	697b      	ldr	r3, [r7, #20]
 800551e:	fa01 f303 	lsl.w	r3, r1, r3
 8005522:	43d9      	mvns	r1, r3
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005528:	4313      	orrs	r3, r2
         );
}
 800552a:	4618      	mov	r0, r3
 800552c:	3724      	adds	r7, #36	@ 0x24
 800552e:	46bd      	mov	sp, r7
 8005530:	bc80      	pop	{r7}
 8005532:	4770      	bx	lr

08005534 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005534:	b580      	push	{r7, lr}
 8005536:	b082      	sub	sp, #8
 8005538:	af00      	add	r7, sp, #0
 800553a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800553c:	6878      	ldr	r0, [r7, #4]
 800553e:	f7ff ff4f 	bl	80053e0 <__NVIC_SetPriorityGrouping>
}
 8005542:	bf00      	nop
 8005544:	3708      	adds	r7, #8
 8005546:	46bd      	mov	sp, r7
 8005548:	bd80      	pop	{r7, pc}

0800554a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800554a:	b580      	push	{r7, lr}
 800554c:	b086      	sub	sp, #24
 800554e:	af00      	add	r7, sp, #0
 8005550:	4603      	mov	r3, r0
 8005552:	60b9      	str	r1, [r7, #8]
 8005554:	607a      	str	r2, [r7, #4]
 8005556:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005558:	f7ff ff66 	bl	8005428 <__NVIC_GetPriorityGrouping>
 800555c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800555e:	687a      	ldr	r2, [r7, #4]
 8005560:	68b9      	ldr	r1, [r7, #8]
 8005562:	6978      	ldr	r0, [r7, #20]
 8005564:	f7ff ffb4 	bl	80054d0 <NVIC_EncodePriority>
 8005568:	4602      	mov	r2, r0
 800556a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800556e:	4611      	mov	r1, r2
 8005570:	4618      	mov	r0, r3
 8005572:	f7ff ff83 	bl	800547c <__NVIC_SetPriority>
}
 8005576:	bf00      	nop
 8005578:	3718      	adds	r7, #24
 800557a:	46bd      	mov	sp, r7
 800557c:	bd80      	pop	{r7, pc}

0800557e <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32u5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800557e:	b580      	push	{r7, lr}
 8005580:	b082      	sub	sp, #8
 8005582:	af00      	add	r7, sp, #0
 8005584:	4603      	mov	r3, r0
 8005586:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005588:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800558c:	4618      	mov	r0, r3
 800558e:	f7ff ff59 	bl	8005444 <__NVIC_EnableIRQ>
}
 8005592:	bf00      	nop
 8005594:	3708      	adds	r7, #8
 8005596:	46bd      	mov	sp, r7
 8005598:	bd80      	pop	{r7, pc}
	...

0800559c <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 800559c:	b480      	push	{r7}
 800559e:	b083      	sub	sp, #12
 80055a0:	af00      	add	r7, sp, #0
 80055a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	2b04      	cmp	r3, #4
 80055a8:	d844      	bhi.n	8005634 <HAL_SYSTICK_CLKSourceConfig+0x98>
 80055aa:	a201      	add	r2, pc, #4	@ (adr r2, 80055b0 <HAL_SYSTICK_CLKSourceConfig+0x14>)
 80055ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055b0:	080055d3 	.word	0x080055d3
 80055b4:	080055f1 	.word	0x080055f1
 80055b8:	08005613 	.word	0x08005613
 80055bc:	08005635 	.word	0x08005635
 80055c0:	080055c5 	.word	0x080055c5
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 80055c4:	4b1e      	ldr	r3, [pc, #120]	@ (8005640 <HAL_SYSTICK_CLKSourceConfig+0xa4>)
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	4a1d      	ldr	r2, [pc, #116]	@ (8005640 <HAL_SYSTICK_CLKSourceConfig+0xa4>)
 80055ca:	f043 0304 	orr.w	r3, r3, #4
 80055ce:	6013      	str	r3, [r2, #0]
      break;
 80055d0:	e031      	b.n	8005636 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 80055d2:	4b1b      	ldr	r3, [pc, #108]	@ (8005640 <HAL_SYSTICK_CLKSourceConfig+0xa4>)
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	4a1a      	ldr	r2, [pc, #104]	@ (8005640 <HAL_SYSTICK_CLKSourceConfig+0xa4>)
 80055d8:	f023 0304 	bic.w	r3, r3, #4
 80055dc:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, (0x00000000U));
 80055de:	4b19      	ldr	r3, [pc, #100]	@ (8005644 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80055e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80055e4:	4a17      	ldr	r2, [pc, #92]	@ (8005644 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80055e6:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 80055ea:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 80055ee:	e022      	b.n	8005636 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 80055f0:	4b13      	ldr	r3, [pc, #76]	@ (8005640 <HAL_SYSTICK_CLKSourceConfig+0xa4>)
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	4a12      	ldr	r2, [pc, #72]	@ (8005640 <HAL_SYSTICK_CLKSourceConfig+0xa4>)
 80055f6:	f023 0304 	bic.w	r3, r3, #4
 80055fa:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_0);
 80055fc:	4b11      	ldr	r3, [pc, #68]	@ (8005644 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80055fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005602:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8005606:	4a0f      	ldr	r2, [pc, #60]	@ (8005644 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8005608:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800560c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 8005610:	e011      	b.n	8005636 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8005612:	4b0b      	ldr	r3, [pc, #44]	@ (8005640 <HAL_SYSTICK_CLKSourceConfig+0xa4>)
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	4a0a      	ldr	r2, [pc, #40]	@ (8005640 <HAL_SYSTICK_CLKSourceConfig+0xa4>)
 8005618:	f023 0304 	bic.w	r3, r3, #4
 800561c:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_1);
 800561e:	4b09      	ldr	r3, [pc, #36]	@ (8005644 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8005620:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005624:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8005628:	4a06      	ldr	r2, [pc, #24]	@ (8005644 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800562a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800562e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 8005632:	e000      	b.n	8005636 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 8005634:	bf00      	nop
  }
}
 8005636:	bf00      	nop
 8005638:	370c      	adds	r7, #12
 800563a:	46bd      	mov	sp, r7
 800563c:	bc80      	pop	{r7}
 800563e:	4770      	bx	lr
 8005640:	e000e010 	.word	0xe000e010
 8005644:	46020c00 	.word	0x46020c00

08005648 <HAL_DMA_Abort_IT>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *const hdma)
{
 8005648:	b480      	push	{r7}
 800564a:	b083      	sub	sp, #12
 800564c:	af00      	add	r7, sp, #0
 800564e:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	2b00      	cmp	r3, #0
 8005654:	d101      	bne.n	800565a <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8005656:	2301      	movs	r3, #1
 8005658:	e019      	b.n	800568e <HAL_DMA_Abort_IT+0x46>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8005660:	b2db      	uxtb	r3, r3
 8005662:	2b02      	cmp	r3, #2
 8005664:	d004      	beq.n	8005670 <HAL_DMA_Abort_IT+0x28>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	2220      	movs	r2, #32
 800566a:	659a      	str	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 800566c:	2301      	movs	r3, #1
 800566e:	e00e      	b.n	800568e <HAL_DMA_Abort_IT+0x46>
  }
  else
  {
    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	2204      	movs	r2, #4
 8005674:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Suspend the channel and activate suspend interrupt */
    hdma->Instance->CCR |= (DMA_CCR_SUSP | DMA_CCR_SUSPIE);
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	695b      	ldr	r3, [r3, #20]
 800567e:	687a      	ldr	r2, [r7, #4]
 8005680:	6812      	ldr	r2, [r2, #0]
 8005682:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8005686:	f043 0304 	orr.w	r3, r3, #4
 800568a:	6153      	str	r3, [r2, #20]
  }

  return HAL_OK;
 800568c:	2300      	movs	r3, #0
}
 800568e:	4618      	mov	r0, r3
 8005690:	370c      	adds	r7, #12
 8005692:	46bd      	mov	sp, r7
 8005694:	bc80      	pop	{r7}
 8005696:	4770      	bx	lr

08005698 <HAL_DMA_GetState>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval DMA state.
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef const *const hdma)
{
 8005698:	b480      	push	{r7}
 800569a:	b083      	sub	sp, #12
 800569c:	af00      	add	r7, sp, #0
 800569e:	6078      	str	r0, [r7, #4]
  /* Return the DMA channel state */
  return hdma->State;
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80056a6:	b2db      	uxtb	r3, r3
}
 80056a8:	4618      	mov	r0, r3
 80056aa:	370c      	adds	r7, #12
 80056ac:	46bd      	mov	sp, r7
 80056ae:	bc80      	pop	{r7}
 80056b0:	4770      	bx	lr

080056b2 <HAL_DMAEx_GetFifoLevel>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval Returns the number of available beats in FIFO.
  */
uint32_t HAL_DMAEx_GetFifoLevel(DMA_HandleTypeDef const *const hdma)
{
 80056b2:	b480      	push	{r7}
 80056b4:	b083      	sub	sp, #12
 80056b6:	af00      	add	r7, sp, #0
 80056b8:	6078      	str	r0, [r7, #4]
  return ((hdma->Instance->CSR & DMA_CSR_FIFOL) >> DMA_CSR_FIFOL_Pos);
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	691b      	ldr	r3, [r3, #16]
 80056c0:	0c1b      	lsrs	r3, r3, #16
 80056c2:	b2db      	uxtb	r3, r3
}
 80056c4:	4618      	mov	r0, r3
 80056c6:	370c      	adds	r7, #12
 80056c8:	46bd      	mov	sp, r7
 80056ca:	bc80      	pop	{r7}
 80056cc:	4770      	bx	lr

080056ce <HAL_EXTI_RegisterCallback>:
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID,
                                            void (*pPendingCbfn)(void))
{
 80056ce:	b480      	push	{r7}
 80056d0:	b087      	sub	sp, #28
 80056d2:	af00      	add	r7, sp, #0
 80056d4:	60f8      	str	r0, [r7, #12]
 80056d6:	460b      	mov	r3, r1
 80056d8:	607a      	str	r2, [r7, #4]
 80056da:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 80056dc:	2300      	movs	r3, #0
 80056de:	75fb      	strb	r3, [r7, #23]

  switch (CallbackID)
 80056e0:	7afb      	ldrb	r3, [r7, #11]
 80056e2:	2b02      	cmp	r3, #2
 80056e4:	d011      	beq.n	800570a <HAL_EXTI_RegisterCallback+0x3c>
 80056e6:	2b02      	cmp	r3, #2
 80056e8:	dc13      	bgt.n	8005712 <HAL_EXTI_RegisterCallback+0x44>
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d002      	beq.n	80056f4 <HAL_EXTI_RegisterCallback+0x26>
 80056ee:	2b01      	cmp	r3, #1
 80056f0:	d007      	beq.n	8005702 <HAL_EXTI_RegisterCallback+0x34>
 80056f2:	e00e      	b.n	8005712 <HAL_EXTI_RegisterCallback+0x44>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->RisingCallback = pPendingCbfn;
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	687a      	ldr	r2, [r7, #4]
 80056f8:	605a      	str	r2, [r3, #4]
      hexti->FallingCallback = pPendingCbfn;
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	687a      	ldr	r2, [r7, #4]
 80056fe:	609a      	str	r2, [r3, #8]
      break;
 8005700:	e00a      	b.n	8005718 <HAL_EXTI_RegisterCallback+0x4a>

    case  HAL_EXTI_RISING_CB_ID:
      hexti->RisingCallback = pPendingCbfn;
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	687a      	ldr	r2, [r7, #4]
 8005706:	605a      	str	r2, [r3, #4]
      break;
 8005708:	e006      	b.n	8005718 <HAL_EXTI_RegisterCallback+0x4a>

    case  HAL_EXTI_FALLING_CB_ID:
      hexti->FallingCallback = pPendingCbfn;
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	687a      	ldr	r2, [r7, #4]
 800570e:	609a      	str	r2, [r3, #8]
      break;
 8005710:	e002      	b.n	8005718 <HAL_EXTI_RegisterCallback+0x4a>

    default:
      status = HAL_ERROR;
 8005712:	2301      	movs	r3, #1
 8005714:	75fb      	strb	r3, [r7, #23]
      break;
 8005716:	bf00      	nop
  }

  return status;
 8005718:	7dfb      	ldrb	r3, [r7, #23]
}
 800571a:	4618      	mov	r0, r3
 800571c:	371c      	adds	r7, #28
 800571e:	46bd      	mov	sp, r7
 8005720:	bc80      	pop	{r7}
 8005722:	4770      	bx	lr

08005724 <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 8005724:	b480      	push	{r7}
 8005726:	b083      	sub	sp, #12
 8005728:	af00      	add	r7, sp, #0
 800572a:	6078      	str	r0, [r7, #4]
 800572c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	2b00      	cmp	r3, #0
 8005732:	d101      	bne.n	8005738 <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 8005734:	2301      	movs	r3, #1
 8005736:	e003      	b.n	8005740 <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	683a      	ldr	r2, [r7, #0]
 800573c:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 800573e:	2300      	movs	r3, #0
  }
}
 8005740:	4618      	mov	r0, r3
 8005742:	370c      	adds	r7, #12
 8005744:	46bd      	mov	sp, r7
 8005746:	bc80      	pop	{r7}
 8005748:	4770      	bx	lr
	...

0800574c <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(const EXTI_HandleTypeDef *hexti)
{
 800574c:	b580      	push	{r7, lr}
 800574e:	b086      	sub	sp, #24
 8005750:	af00      	add	r7, sp, #0
 8005752:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	0c1b      	lsrs	r3, r3, #16
 800575a:	f003 0301 	and.w	r3, r3, #1
 800575e:	617b      	str	r3, [r7, #20]
  maskline = (1UL << (hexti->Line & EXTI_PIN_MASK));
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	f003 031f 	and.w	r3, r3, #31
 8005768:	2201      	movs	r2, #1
 800576a:	fa02 f303 	lsl.w	r3, r2, r3
 800576e:	613b      	str	r3, [r7, #16]

  /* Get rising edge pending bit  */
  regaddr = (__IO uint32_t *)(&EXTI->RPR1 + (EXTI_CONFIG_OFFSET * offset));
 8005770:	697b      	ldr	r3, [r7, #20]
 8005772:	015a      	lsls	r2, r3, #5
 8005774:	4b17      	ldr	r3, [pc, #92]	@ (80057d4 <HAL_EXTI_IRQHandler+0x88>)
 8005776:	4413      	add	r3, r2
 8005778:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	693a      	ldr	r2, [r7, #16]
 8005780:	4013      	ands	r3, r2
 8005782:	60bb      	str	r3, [r7, #8]

  if (regval != 0U)
 8005784:	68bb      	ldr	r3, [r7, #8]
 8005786:	2b00      	cmp	r3, #0
 8005788:	d009      	beq.n	800579e <HAL_EXTI_IRQHandler+0x52>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	693a      	ldr	r2, [r7, #16]
 800578e:	601a      	str	r2, [r3, #0]

    /* Call rising callback */
    if (hexti->RisingCallback != NULL)
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	685b      	ldr	r3, [r3, #4]
 8005794:	2b00      	cmp	r3, #0
 8005796:	d002      	beq.n	800579e <HAL_EXTI_IRQHandler+0x52>
    {
      hexti->RisingCallback();
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	685b      	ldr	r3, [r3, #4]
 800579c:	4798      	blx	r3
    }
  }

  /* Get falling edge pending bit  */
  regaddr = (__IO uint32_t *)(&EXTI->FPR1 + (EXTI_CONFIG_OFFSET * offset));
 800579e:	697b      	ldr	r3, [r7, #20]
 80057a0:	015a      	lsls	r2, r3, #5
 80057a2:	4b0d      	ldr	r3, [pc, #52]	@ (80057d8 <HAL_EXTI_IRQHandler+0x8c>)
 80057a4:	4413      	add	r3, r2
 80057a6:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	693a      	ldr	r2, [r7, #16]
 80057ae:	4013      	ands	r3, r2
 80057b0:	60bb      	str	r3, [r7, #8]

  if (regval != 0U)
 80057b2:	68bb      	ldr	r3, [r7, #8]
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d009      	beq.n	80057cc <HAL_EXTI_IRQHandler+0x80>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	693a      	ldr	r2, [r7, #16]
 80057bc:	601a      	str	r2, [r3, #0]

    /* Call rising callback */
    if (hexti->FallingCallback != NULL)
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	689b      	ldr	r3, [r3, #8]
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d002      	beq.n	80057cc <HAL_EXTI_IRQHandler+0x80>
    {
      hexti->FallingCallback();
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	689b      	ldr	r3, [r3, #8]
 80057ca:	4798      	blx	r3
    }
  }
}
 80057cc:	bf00      	nop
 80057ce:	3718      	adds	r7, #24
 80057d0:	46bd      	mov	sp, r7
 80057d2:	bd80      	pop	{r7, pc}
 80057d4:	4602200c 	.word	0x4602200c
 80057d8:	46022010 	.word	0x46022010

080057dc <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 80057dc:	b480      	push	{r7}
 80057de:	b089      	sub	sp, #36	@ 0x24
 80057e0:	af00      	add	r7, sp, #0
 80057e2:	6078      	str	r0, [r7, #4]
 80057e4:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 80057e6:	2300      	movs	r3, #0
 80057e8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	613b      	str	r3, [r7, #16]

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80057ee:	e1c2      	b.n	8005b76 <HAL_GPIO_Init+0x39a>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 80057f0:	683b      	ldr	r3, [r7, #0]
 80057f2:	681a      	ldr	r2, [r3, #0]
 80057f4:	2101      	movs	r1, #1
 80057f6:	697b      	ldr	r3, [r7, #20]
 80057f8:	fa01 f303 	lsl.w	r3, r1, r3
 80057fc:	4013      	ands	r3, r2
 80057fe:	60fb      	str	r3, [r7, #12]

    /* Save Pin Position */
    pin_position = position;
 8005800:	697b      	ldr	r3, [r7, #20]
 8005802:	61bb      	str	r3, [r7, #24]

    if (iocurrent != 0U)
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	2b00      	cmp	r3, #0
 8005808:	f000 81b2 	beq.w	8005b70 <HAL_GPIO_Init+0x394>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if (GPIOx == LPGPIO1)
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	4a55      	ldr	r2, [pc, #340]	@ (8005964 <HAL_GPIO_Init+0x188>)
 8005810:	4293      	cmp	r3, r2
 8005812:	d15d      	bne.n	80058d0 <HAL_GPIO_Init+0xf4>
      {
        /* MODER configuration */
        tmp = GPIOx->MODER;
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	61fb      	str	r3, [r7, #28]
        tmp &= ~(LPGPIO_MODER_MOD0 << position);
 800581a:	2201      	movs	r2, #1
 800581c:	697b      	ldr	r3, [r7, #20]
 800581e:	fa02 f303 	lsl.w	r3, r2, r3
 8005822:	43db      	mvns	r3, r3
 8005824:	69fa      	ldr	r2, [r7, #28]
 8005826:	4013      	ands	r3, r2
 8005828:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE_OUTPUT_PP) << position);
 800582a:	683b      	ldr	r3, [r7, #0]
 800582c:	685b      	ldr	r3, [r3, #4]
 800582e:	f003 0201 	and.w	r2, r3, #1
 8005832:	697b      	ldr	r3, [r7, #20]
 8005834:	fa02 f303 	lsl.w	r3, r2, r3
 8005838:	69fa      	ldr	r2, [r7, #28]
 800583a:	4313      	orrs	r3, r2
 800583c:	61fb      	str	r3, [r7, #28]
        GPIOx->MODER = tmp;
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	69fa      	ldr	r2, [r7, #28]
 8005842:	601a      	str	r2, [r3, #0]

        /* Save GPIO Port and pin index */
        p_gpio = LPGPIO_Map[position].GPIO_PORT;
 8005844:	4a48      	ldr	r2, [pc, #288]	@ (8005968 <HAL_GPIO_Init+0x18c>)
 8005846:	697b      	ldr	r3, [r7, #20]
 8005848:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800584c:	613b      	str	r3, [r7, #16]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 800584e:	4a46      	ldr	r2, [pc, #280]	@ (8005968 <HAL_GPIO_Init+0x18c>)
 8005850:	697b      	ldr	r3, [r7, #20]
 8005852:	00db      	lsls	r3, r3, #3
 8005854:	4413      	add	r3, r2
 8005856:	685b      	ldr	r3, [r3, #4]
 8005858:	61bb      	str	r3, [r7, #24]

        /* Configure Alternate function mapped with the current IO */
        tmp = p_gpio->AFR[(pin_position) >> 3U];
 800585a:	69bb      	ldr	r3, [r7, #24]
 800585c:	08da      	lsrs	r2, r3, #3
 800585e:	693b      	ldr	r3, [r7, #16]
 8005860:	3208      	adds	r2, #8
 8005862:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005866:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << (((pin_position) & 0x07U) * 4U));
 8005868:	69bb      	ldr	r3, [r7, #24]
 800586a:	f003 0307 	and.w	r3, r3, #7
 800586e:	009b      	lsls	r3, r3, #2
 8005870:	220f      	movs	r2, #15
 8005872:	fa02 f303 	lsl.w	r3, r2, r3
 8005876:	43db      	mvns	r3, r3
 8005878:	69fa      	ldr	r2, [r7, #28]
 800587a:	4013      	ands	r3, r2
 800587c:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_AF11_LPGPIO1 & 0x0FUL) << (((pin_position) & 0x07U) * 4U));
 800587e:	69bb      	ldr	r3, [r7, #24]
 8005880:	f003 0307 	and.w	r3, r3, #7
 8005884:	009b      	lsls	r3, r3, #2
 8005886:	220b      	movs	r2, #11
 8005888:	fa02 f303 	lsl.w	r3, r2, r3
 800588c:	69fa      	ldr	r2, [r7, #28]
 800588e:	4313      	orrs	r3, r2
 8005890:	61fb      	str	r3, [r7, #28]
        p_gpio->AFR[(pin_position) >> 3U] = tmp;
 8005892:	69bb      	ldr	r3, [r7, #24]
 8005894:	08da      	lsrs	r2, r3, #3
 8005896:	693b      	ldr	r3, [r7, #16]
 8005898:	3208      	adds	r2, #8
 800589a:	69f9      	ldr	r1, [r7, #28]
 800589c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 80058a0:	693b      	ldr	r3, [r7, #16]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 80058a6:	69bb      	ldr	r3, [r7, #24]
 80058a8:	005b      	lsls	r3, r3, #1
 80058aa:	2203      	movs	r2, #3
 80058ac:	fa02 f303 	lsl.w	r3, r2, r3
 80058b0:	43db      	mvns	r3, r3
 80058b2:	69fa      	ldr	r2, [r7, #28]
 80058b4:	4013      	ands	r3, r2
 80058b6:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_MODE_AF_PP & 0x0FUL) << (pin_position * GPIO_MODER_MODE1_Pos));
 80058b8:	69bb      	ldr	r3, [r7, #24]
 80058ba:	005b      	lsls	r3, r3, #1
 80058bc:	2202      	movs	r2, #2
 80058be:	fa02 f303 	lsl.w	r3, r2, r3
 80058c2:	69fa      	ldr	r2, [r7, #28]
 80058c4:	4313      	orrs	r3, r2
 80058c6:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 80058c8:	693b      	ldr	r3, [r7, #16]
 80058ca:	69fa      	ldr	r2, [r7, #28]
 80058cc:	601a      	str	r2, [r3, #0]
 80058ce:	e067      	b.n	80059a0 <HAL_GPIO_Init+0x1c4>
      }
      else if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80058d0:	683b      	ldr	r3, [r7, #0]
 80058d2:	685b      	ldr	r3, [r3, #4]
 80058d4:	2b02      	cmp	r3, #2
 80058d6:	d003      	beq.n	80058e0 <HAL_GPIO_Init+0x104>
 80058d8:	683b      	ldr	r3, [r7, #0]
 80058da:	685b      	ldr	r3, [r3, #4]
 80058dc:	2b12      	cmp	r3, #18
 80058de:	d145      	bne.n	800596c <HAL_GPIO_Init+0x190>
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 80058e0:	697b      	ldr	r3, [r7, #20]
 80058e2:	08da      	lsrs	r2, r3, #3
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	3208      	adds	r2, #8
 80058e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80058ec:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 80058ee:	697b      	ldr	r3, [r7, #20]
 80058f0:	f003 0307 	and.w	r3, r3, #7
 80058f4:	009b      	lsls	r3, r3, #2
 80058f6:	220f      	movs	r2, #15
 80058f8:	fa02 f303 	lsl.w	r3, r2, r3
 80058fc:	43db      	mvns	r3, r3
 80058fe:	69fa      	ldr	r2, [r7, #28]
 8005900:	4013      	ands	r3, r2
 8005902:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8005904:	683b      	ldr	r3, [r7, #0]
 8005906:	691b      	ldr	r3, [r3, #16]
 8005908:	f003 020f 	and.w	r2, r3, #15
 800590c:	697b      	ldr	r3, [r7, #20]
 800590e:	f003 0307 	and.w	r3, r3, #7
 8005912:	009b      	lsls	r3, r3, #2
 8005914:	fa02 f303 	lsl.w	r3, r2, r3
 8005918:	69fa      	ldr	r2, [r7, #28]
 800591a:	4313      	orrs	r3, r2
 800591c:	61fb      	str	r3, [r7, #28]
        GPIOx->AFR[position >> 3U] = tmp;
 800591e:	697b      	ldr	r3, [r7, #20]
 8005920:	08da      	lsrs	r2, r3, #3
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	3208      	adds	r2, #8
 8005926:	69f9      	ldr	r1, [r7, #28]
 8005928:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 800592c:	693b      	ldr	r3, [r7, #16]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 8005932:	69bb      	ldr	r3, [r7, #24]
 8005934:	005b      	lsls	r3, r3, #1
 8005936:	2203      	movs	r2, #3
 8005938:	fa02 f303 	lsl.w	r3, r2, r3
 800593c:	43db      	mvns	r3, r3
 800593e:	69fa      	ldr	r2, [r7, #28]
 8005940:	4013      	ands	r3, r2
 8005942:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 8005944:	683b      	ldr	r3, [r7, #0]
 8005946:	685b      	ldr	r3, [r3, #4]
 8005948:	f003 0203 	and.w	r2, r3, #3
 800594c:	69bb      	ldr	r3, [r7, #24]
 800594e:	005b      	lsls	r3, r3, #1
 8005950:	fa02 f303 	lsl.w	r3, r2, r3
 8005954:	69fa      	ldr	r2, [r7, #28]
 8005956:	4313      	orrs	r3, r2
 8005958:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 800595a:	693b      	ldr	r3, [r7, #16]
 800595c:	69fa      	ldr	r2, [r7, #28]
 800595e:	601a      	str	r2, [r3, #0]
 8005960:	e01e      	b.n	80059a0 <HAL_GPIO_Init+0x1c4>
 8005962:	bf00      	nop
 8005964:	46020000 	.word	0x46020000
 8005968:	08011b20 	.word	0x08011b20
      {
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
        tmp = p_gpio->MODER;
 800596c:	693b      	ldr	r3, [r7, #16]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 8005972:	69bb      	ldr	r3, [r7, #24]
 8005974:	005b      	lsls	r3, r3, #1
 8005976:	2203      	movs	r2, #3
 8005978:	fa02 f303 	lsl.w	r3, r2, r3
 800597c:	43db      	mvns	r3, r3
 800597e:	69fa      	ldr	r2, [r7, #28]
 8005980:	4013      	ands	r3, r2
 8005982:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 8005984:	683b      	ldr	r3, [r7, #0]
 8005986:	685b      	ldr	r3, [r3, #4]
 8005988:	f003 0203 	and.w	r2, r3, #3
 800598c:	69bb      	ldr	r3, [r7, #24]
 800598e:	005b      	lsls	r3, r3, #1
 8005990:	fa02 f303 	lsl.w	r3, r2, r3
 8005994:	69fa      	ldr	r2, [r7, #28]
 8005996:	4313      	orrs	r3, r2
 8005998:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 800599a:	693b      	ldr	r3, [r7, #16]
 800599c:	69fa      	ldr	r2, [r7, #28]
 800599e:	601a      	str	r2, [r3, #0]
      }

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80059a0:	683b      	ldr	r3, [r7, #0]
 80059a2:	685b      	ldr	r3, [r3, #4]
 80059a4:	2b01      	cmp	r3, #1
 80059a6:	d00b      	beq.n	80059c0 <HAL_GPIO_Init+0x1e4>
 80059a8:	683b      	ldr	r3, [r7, #0]
 80059aa:	685b      	ldr	r3, [r3, #4]
 80059ac:	2b02      	cmp	r3, #2
 80059ae:	d007      	beq.n	80059c0 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80059b0:	683b      	ldr	r3, [r7, #0]
 80059b2:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80059b4:	2b11      	cmp	r3, #17
 80059b6:	d003      	beq.n	80059c0 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80059b8:	683b      	ldr	r3, [r7, #0]
 80059ba:	685b      	ldr	r3, [r3, #4]
 80059bc:	2b12      	cmp	r3, #18
 80059be:	d130      	bne.n	8005a22 <HAL_GPIO_Init+0x246>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = p_gpio->OSPEEDR;
 80059c0:	693b      	ldr	r3, [r7, #16]
 80059c2:	689b      	ldr	r3, [r3, #8]
 80059c4:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 80059c6:	69bb      	ldr	r3, [r7, #24]
 80059c8:	005b      	lsls	r3, r3, #1
 80059ca:	2203      	movs	r2, #3
 80059cc:	fa02 f303 	lsl.w	r3, r2, r3
 80059d0:	43db      	mvns	r3, r3
 80059d2:	69fa      	ldr	r2, [r7, #28]
 80059d4:	4013      	ands	r3, r2
 80059d6:	61fb      	str	r3, [r7, #28]
        tmp |= (pGPIO_Init->Speed << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 80059d8:	683b      	ldr	r3, [r7, #0]
 80059da:	68da      	ldr	r2, [r3, #12]
 80059dc:	69bb      	ldr	r3, [r7, #24]
 80059de:	005b      	lsls	r3, r3, #1
 80059e0:	fa02 f303 	lsl.w	r3, r2, r3
 80059e4:	69fa      	ldr	r2, [r7, #28]
 80059e6:	4313      	orrs	r3, r2
 80059e8:	61fb      	str	r3, [r7, #28]
        p_gpio->OSPEEDR = tmp;
 80059ea:	693b      	ldr	r3, [r7, #16]
 80059ec:	69fa      	ldr	r2, [r7, #28]
 80059ee:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = p_gpio->OTYPER;
 80059f0:	693b      	ldr	r3, [r7, #16]
 80059f2:	685b      	ldr	r3, [r3, #4]
 80059f4:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OTYPER_OT0 << pin_position);
 80059f6:	2201      	movs	r2, #1
 80059f8:	69bb      	ldr	r3, [r7, #24]
 80059fa:	fa02 f303 	lsl.w	r3, r2, r3
 80059fe:	43db      	mvns	r3, r3
 8005a00:	69fa      	ldr	r2, [r7, #28]
 8005a02:	4013      	ands	r3, r2
 8005a04:	61fb      	str	r3, [r7, #28]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 8005a06:	683b      	ldr	r3, [r7, #0]
 8005a08:	685b      	ldr	r3, [r3, #4]
 8005a0a:	091b      	lsrs	r3, r3, #4
 8005a0c:	f003 0201 	and.w	r2, r3, #1
 8005a10:	69bb      	ldr	r3, [r7, #24]
 8005a12:	fa02 f303 	lsl.w	r3, r2, r3
 8005a16:	69fa      	ldr	r2, [r7, #28]
 8005a18:	4313      	orrs	r3, r2
 8005a1a:	61fb      	str	r3, [r7, #28]
        p_gpio->OTYPER = tmp;
 8005a1c:	693b      	ldr	r3, [r7, #16]
 8005a1e:	69fa      	ldr	r2, [r7, #28]
 8005a20:	605a      	str	r2, [r3, #4]
      }

      if ((pGPIO_Init->Mode != GPIO_MODE_ANALOG) || 
 8005a22:	683b      	ldr	r3, [r7, #0]
 8005a24:	685b      	ldr	r3, [r3, #4]
 8005a26:	2b03      	cmp	r3, #3
 8005a28:	d107      	bne.n	8005a3a <HAL_GPIO_Init+0x25e>
          ((pGPIO_Init->Mode == GPIO_MODE_ANALOG) && (pGPIO_Init->Pull != GPIO_PULLUP)))
 8005a2a:	683b      	ldr	r3, [r7, #0]
 8005a2c:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode != GPIO_MODE_ANALOG) || 
 8005a2e:	2b03      	cmp	r3, #3
 8005a30:	d11b      	bne.n	8005a6a <HAL_GPIO_Init+0x28e>
          ((pGPIO_Init->Mode == GPIO_MODE_ANALOG) && (pGPIO_Init->Pull != GPIO_PULLUP)))
 8005a32:	683b      	ldr	r3, [r7, #0]
 8005a34:	689b      	ldr	r3, [r3, #8]
 8005a36:	2b01      	cmp	r3, #1
 8005a38:	d017      	beq.n	8005a6a <HAL_GPIO_Init+0x28e>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = p_gpio->PUPDR;
 8005a3a:	693b      	ldr	r3, [r7, #16]
 8005a3c:	68db      	ldr	r3, [r3, #12]
 8005a3e:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 8005a40:	69bb      	ldr	r3, [r7, #24]
 8005a42:	005b      	lsls	r3, r3, #1
 8005a44:	2203      	movs	r2, #3
 8005a46:	fa02 f303 	lsl.w	r3, r2, r3
 8005a4a:	43db      	mvns	r3, r3
 8005a4c:	69fa      	ldr	r2, [r7, #28]
 8005a4e:	4013      	ands	r3, r2
 8005a50:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Pull) << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 8005a52:	683b      	ldr	r3, [r7, #0]
 8005a54:	689a      	ldr	r2, [r3, #8]
 8005a56:	69bb      	ldr	r3, [r7, #24]
 8005a58:	005b      	lsls	r3, r3, #1
 8005a5a:	fa02 f303 	lsl.w	r3, r2, r3
 8005a5e:	69fa      	ldr	r2, [r7, #28]
 8005a60:	4313      	orrs	r3, r2
 8005a62:	61fb      	str	r3, [r7, #28]
        p_gpio->PUPDR = tmp;
 8005a64:	693b      	ldr	r3, [r7, #16]
 8005a66:	69fa      	ldr	r2, [r7, #28]
 8005a68:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005a6a:	683b      	ldr	r3, [r7, #0]
 8005a6c:	685b      	ldr	r3, [r3, #4]
 8005a6e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d07c      	beq.n	8005b70 <HAL_GPIO_Init+0x394>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8005a76:	4a47      	ldr	r2, [pc, #284]	@ (8005b94 <HAL_GPIO_Init+0x3b8>)
 8005a78:	697b      	ldr	r3, [r7, #20]
 8005a7a:	089b      	lsrs	r3, r3, #2
 8005a7c:	3318      	adds	r3, #24
 8005a7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005a82:	61fb      	str	r3, [r7, #28]
        tmp &= ~((0x0FUL) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 8005a84:	697b      	ldr	r3, [r7, #20]
 8005a86:	f003 0303 	and.w	r3, r3, #3
 8005a8a:	00db      	lsls	r3, r3, #3
 8005a8c:	220f      	movs	r2, #15
 8005a8e:	fa02 f303 	lsl.w	r3, r2, r3
 8005a92:	43db      	mvns	r3, r3
 8005a94:	69fa      	ldr	r2, [r7, #28]
 8005a96:	4013      	ands	r3, r2
 8005a98:	61fb      	str	r3, [r7, #28]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	0a9a      	lsrs	r2, r3, #10
 8005a9e:	4b3e      	ldr	r3, [pc, #248]	@ (8005b98 <HAL_GPIO_Init+0x3bc>)
 8005aa0:	4013      	ands	r3, r2
 8005aa2:	697a      	ldr	r2, [r7, #20]
 8005aa4:	f002 0203 	and.w	r2, r2, #3
 8005aa8:	00d2      	lsls	r2, r2, #3
 8005aaa:	4093      	lsls	r3, r2
 8005aac:	69fa      	ldr	r2, [r7, #28]
 8005aae:	4313      	orrs	r3, r2
 8005ab0:	61fb      	str	r3, [r7, #28]
        EXTI->EXTICR[position >> 2U] = tmp;
 8005ab2:	4938      	ldr	r1, [pc, #224]	@ (8005b94 <HAL_GPIO_Init+0x3b8>)
 8005ab4:	697b      	ldr	r3, [r7, #20]
 8005ab6:	089b      	lsrs	r3, r3, #2
 8005ab8:	3318      	adds	r3, #24
 8005aba:	69fa      	ldr	r2, [r7, #28]
 8005abc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8005ac0:	4b34      	ldr	r3, [pc, #208]	@ (8005b94 <HAL_GPIO_Init+0x3b8>)
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	43db      	mvns	r3, r3
 8005aca:	69fa      	ldr	r2, [r7, #28]
 8005acc:	4013      	ands	r3, r2
 8005ace:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005ad0:	683b      	ldr	r3, [r7, #0]
 8005ad2:	685b      	ldr	r3, [r3, #4]
 8005ad4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d003      	beq.n	8005ae4 <HAL_GPIO_Init+0x308>
        {
          tmp |= iocurrent;
 8005adc:	69fa      	ldr	r2, [r7, #28]
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	4313      	orrs	r3, r2
 8005ae2:	61fb      	str	r3, [r7, #28]
        }
        EXTI->RTSR1 = tmp;
 8005ae4:	4a2b      	ldr	r2, [pc, #172]	@ (8005b94 <HAL_GPIO_Init+0x3b8>)
 8005ae6:	69fb      	ldr	r3, [r7, #28]
 8005ae8:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 8005aea:	4b2a      	ldr	r3, [pc, #168]	@ (8005b94 <HAL_GPIO_Init+0x3b8>)
 8005aec:	685b      	ldr	r3, [r3, #4]
 8005aee:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	43db      	mvns	r3, r3
 8005af4:	69fa      	ldr	r2, [r7, #28]
 8005af6:	4013      	ands	r3, r2
 8005af8:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005afa:	683b      	ldr	r3, [r7, #0]
 8005afc:	685b      	ldr	r3, [r3, #4]
 8005afe:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d003      	beq.n	8005b0e <HAL_GPIO_Init+0x332>
        {
          tmp |= iocurrent;
 8005b06:	69fa      	ldr	r2, [r7, #28]
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	4313      	orrs	r3, r2
 8005b0c:	61fb      	str	r3, [r7, #28]
        }
        EXTI->FTSR1 = tmp;
 8005b0e:	4a21      	ldr	r2, [pc, #132]	@ (8005b94 <HAL_GPIO_Init+0x3b8>)
 8005b10:	69fb      	ldr	r3, [r7, #28]
 8005b12:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 8005b14:	4b1f      	ldr	r3, [pc, #124]	@ (8005b94 <HAL_GPIO_Init+0x3b8>)
 8005b16:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005b1a:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	43db      	mvns	r3, r3
 8005b20:	69fa      	ldr	r2, [r7, #28]
 8005b22:	4013      	ands	r3, r2
 8005b24:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005b26:	683b      	ldr	r3, [r7, #0]
 8005b28:	685b      	ldr	r3, [r3, #4]
 8005b2a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d003      	beq.n	8005b3a <HAL_GPIO_Init+0x35e>
        {
          tmp |= iocurrent;
 8005b32:	69fa      	ldr	r2, [r7, #28]
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	4313      	orrs	r3, r2
 8005b38:	61fb      	str	r3, [r7, #28]
        }
        EXTI->EMR1 = tmp;
 8005b3a:	4a16      	ldr	r2, [pc, #88]	@ (8005b94 <HAL_GPIO_Init+0x3b8>)
 8005b3c:	69fb      	ldr	r3, [r7, #28]
 8005b3e:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        tmp = EXTI->IMR1;
 8005b42:	4b14      	ldr	r3, [pc, #80]	@ (8005b94 <HAL_GPIO_Init+0x3b8>)
 8005b44:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005b48:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	43db      	mvns	r3, r3
 8005b4e:	69fa      	ldr	r2, [r7, #28]
 8005b50:	4013      	ands	r3, r2
 8005b52:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005b54:	683b      	ldr	r3, [r7, #0]
 8005b56:	685b      	ldr	r3, [r3, #4]
 8005b58:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d003      	beq.n	8005b68 <HAL_GPIO_Init+0x38c>
        {
          tmp |= iocurrent;
 8005b60:	69fa      	ldr	r2, [r7, #28]
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	4313      	orrs	r3, r2
 8005b66:	61fb      	str	r3, [r7, #28]
        }
        EXTI->IMR1 = tmp;
 8005b68:	4a0a      	ldr	r2, [pc, #40]	@ (8005b94 <HAL_GPIO_Init+0x3b8>)
 8005b6a:	69fb      	ldr	r3, [r7, #28]
 8005b6c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }
    position++;
 8005b70:	697b      	ldr	r3, [r7, #20]
 8005b72:	3301      	adds	r3, #1
 8005b74:	617b      	str	r3, [r7, #20]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8005b76:	683b      	ldr	r3, [r7, #0]
 8005b78:	681a      	ldr	r2, [r3, #0]
 8005b7a:	697b      	ldr	r3, [r7, #20]
 8005b7c:	fa22 f303 	lsr.w	r3, r2, r3
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	f47f ae35 	bne.w	80057f0 <HAL_GPIO_Init+0x14>
  }
}
 8005b86:	bf00      	nop
 8005b88:	bf00      	nop
 8005b8a:	3724      	adds	r7, #36	@ 0x24
 8005b8c:	46bd      	mov	sp, r7
 8005b8e:	bc80      	pop	{r7}
 8005b90:	4770      	bx	lr
 8005b92:	bf00      	nop
 8005b94:	46022000 	.word	0x46022000
 8005b98:	002f7f7f 	.word	0x002f7f7f

08005b9c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005b9c:	b480      	push	{r7}
 8005b9e:	b083      	sub	sp, #12
 8005ba0:	af00      	add	r7, sp, #0
 8005ba2:	6078      	str	r0, [r7, #4]
 8005ba4:	460b      	mov	r3, r1
 8005ba6:	807b      	strh	r3, [r7, #2]
 8005ba8:	4613      	mov	r3, r2
 8005baa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005bac:	787b      	ldrb	r3, [r7, #1]
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d003      	beq.n	8005bba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005bb2:	887a      	ldrh	r2, [r7, #2]
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
  }
}
 8005bb8:	e002      	b.n	8005bc0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
 8005bba:	887a      	ldrh	r2, [r7, #2]
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8005bc0:	bf00      	nop
 8005bc2:	370c      	adds	r7, #12
 8005bc4:	46bd      	mov	sp, r7
 8005bc6:	bc80      	pop	{r7}
 8005bc8:	4770      	bx	lr
	...

08005bcc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005bcc:	b580      	push	{r7, lr}
 8005bce:	b082      	sub	sp, #8
 8005bd0:	af00      	add	r7, sp, #0
 8005bd2:	4603      	mov	r3, r0
 8005bd4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0U)
 8005bd6:	4b0f      	ldr	r3, [pc, #60]	@ (8005c14 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8005bd8:	68da      	ldr	r2, [r3, #12]
 8005bda:	88fb      	ldrh	r3, [r7, #6]
 8005bdc:	4013      	ands	r3, r2
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d006      	beq.n	8005bf0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 8005be2:	4a0c      	ldr	r2, [pc, #48]	@ (8005c14 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8005be4:	88fb      	ldrh	r3, [r7, #6]
 8005be6:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 8005be8:	88fb      	ldrh	r3, [r7, #6]
 8005bea:	4618      	mov	r0, r3
 8005bec:	f000 f814 	bl	8005c18 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0U)
 8005bf0:	4b08      	ldr	r3, [pc, #32]	@ (8005c14 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8005bf2:	691a      	ldr	r2, [r3, #16]
 8005bf4:	88fb      	ldrh	r3, [r7, #6]
 8005bf6:	4013      	ands	r3, r2
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d006      	beq.n	8005c0a <HAL_GPIO_EXTI_IRQHandler+0x3e>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 8005bfc:	4a05      	ldr	r2, [pc, #20]	@ (8005c14 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8005bfe:	88fb      	ldrh	r3, [r7, #6]
 8005c00:	6113      	str	r3, [r2, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 8005c02:	88fb      	ldrh	r3, [r7, #6]
 8005c04:	4618      	mov	r0, r3
 8005c06:	f000 f811 	bl	8005c2c <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 8005c0a:	bf00      	nop
 8005c0c:	3708      	adds	r7, #8
 8005c0e:	46bd      	mov	sp, r7
 8005c10:	bd80      	pop	{r7, pc}
 8005c12:	bf00      	nop
 8005c14:	46022000 	.word	0x46022000

08005c18 <HAL_GPIO_EXTI_Rising_Callback>:
  * @brief  EXTI line rising detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 8005c18:	b480      	push	{r7}
 8005c1a:	b083      	sub	sp, #12
 8005c1c:	af00      	add	r7, sp, #0
 8005c1e:	4603      	mov	r3, r0
 8005c20:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Rising_Callback could be implemented in the user file
   */
}
 8005c22:	bf00      	nop
 8005c24:	370c      	adds	r7, #12
 8005c26:	46bd      	mov	sp, r7
 8005c28:	bc80      	pop	{r7}
 8005c2a:	4770      	bx	lr

08005c2c <HAL_GPIO_EXTI_Falling_Callback>:
  * @brief  EXTI line falling detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 8005c2c:	b480      	push	{r7}
 8005c2e:	b083      	sub	sp, #12
 8005c30:	af00      	add	r7, sp, #0
 8005c32:	4603      	mov	r3, r0
 8005c34:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Falling_Callback could be implemented in the user file
   */
}
 8005c36:	bf00      	nop
 8005c38:	370c      	adds	r7, #12
 8005c3a:	46bd      	mov	sp, r7
 8005c3c:	bc80      	pop	{r7}
 8005c3e:	4770      	bx	lr

08005c40 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005c40:	b580      	push	{r7, lr}
 8005c42:	b082      	sub	sp, #8
 8005c44:	af00      	add	r7, sp, #0
 8005c46:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d101      	bne.n	8005c52 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005c4e:	2301      	movs	r3, #1
 8005c50:	e08d      	b.n	8005d6e <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005c58:	b2db      	uxtb	r3, r3
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d106      	bne.n	8005c6c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	2200      	movs	r2, #0
 8005c62:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8005c66:	6878      	ldr	r0, [r7, #4]
 8005c68:	f7fd fe2a 	bl	80038c0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	2224      	movs	r2, #36	@ 0x24
 8005c70:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	681a      	ldr	r2, [r3, #0]
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	f022 0201 	bic.w	r2, r2, #1
 8005c82:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	685a      	ldr	r2, [r3, #4]
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8005c90:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	689a      	ldr	r2, [r3, #8]
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005ca0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	68db      	ldr	r3, [r3, #12]
 8005ca6:	2b01      	cmp	r3, #1
 8005ca8:	d107      	bne.n	8005cba <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	689a      	ldr	r2, [r3, #8]
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005cb6:	609a      	str	r2, [r3, #8]
 8005cb8:	e006      	b.n	8005cc8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	689a      	ldr	r2, [r3, #8]
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8005cc6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	68db      	ldr	r3, [r3, #12]
 8005ccc:	2b02      	cmp	r3, #2
 8005cce:	d108      	bne.n	8005ce2 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	685a      	ldr	r2, [r3, #4]
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005cde:	605a      	str	r2, [r3, #4]
 8005ce0:	e007      	b.n	8005cf2 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	685a      	ldr	r2, [r3, #4]
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005cf0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	685b      	ldr	r3, [r3, #4]
 8005cf8:	687a      	ldr	r2, [r7, #4]
 8005cfa:	6812      	ldr	r2, [r2, #0]
 8005cfc:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8005d00:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005d04:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	68da      	ldr	r2, [r3, #12]
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005d14:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	691a      	ldr	r2, [r3, #16]
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	695b      	ldr	r3, [r3, #20]
 8005d1e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	699b      	ldr	r3, [r3, #24]
 8005d26:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	430a      	orrs	r2, r1
 8005d2e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	69d9      	ldr	r1, [r3, #28]
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	6a1a      	ldr	r2, [r3, #32]
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	430a      	orrs	r2, r1
 8005d3e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	681a      	ldr	r2, [r3, #0]
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	f042 0201 	orr.w	r2, r2, #1
 8005d4e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	2200      	movs	r2, #0
 8005d54:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	2220      	movs	r2, #32
 8005d5a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	2200      	movs	r2, #0
 8005d62:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	2200      	movs	r2, #0
 8005d68:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8005d6c:	2300      	movs	r3, #0
}
 8005d6e:	4618      	mov	r0, r3
 8005d70:	3708      	adds	r7, #8
 8005d72:	46bd      	mov	sp, r7
 8005d74:	bd80      	pop	{r7, pc}
	...

08005d78 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005d78:	b580      	push	{r7, lr}
 8005d7a:	b088      	sub	sp, #32
 8005d7c:	af02      	add	r7, sp, #8
 8005d7e:	60f8      	str	r0, [r7, #12]
 8005d80:	4608      	mov	r0, r1
 8005d82:	4611      	mov	r1, r2
 8005d84:	461a      	mov	r2, r3
 8005d86:	4603      	mov	r3, r0
 8005d88:	817b      	strh	r3, [r7, #10]
 8005d8a:	460b      	mov	r3, r1
 8005d8c:	813b      	strh	r3, [r7, #8]
 8005d8e:	4613      	mov	r3, r2
 8005d90:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005d98:	b2db      	uxtb	r3, r3
 8005d9a:	2b20      	cmp	r3, #32
 8005d9c:	f040 80f9 	bne.w	8005f92 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005da0:	6a3b      	ldr	r3, [r7, #32]
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d002      	beq.n	8005dac <HAL_I2C_Mem_Write+0x34>
 8005da6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d105      	bne.n	8005db8 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005db2:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8005db4:	2301      	movs	r3, #1
 8005db6:	e0ed      	b.n	8005f94 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005dbe:	2b01      	cmp	r3, #1
 8005dc0:	d101      	bne.n	8005dc6 <HAL_I2C_Mem_Write+0x4e>
 8005dc2:	2302      	movs	r3, #2
 8005dc4:	e0e6      	b.n	8005f94 <HAL_I2C_Mem_Write+0x21c>
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	2201      	movs	r2, #1
 8005dca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005dce:	f7ff fad9 	bl	8005384 <HAL_GetTick>
 8005dd2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005dd4:	697b      	ldr	r3, [r7, #20]
 8005dd6:	9300      	str	r3, [sp, #0]
 8005dd8:	2319      	movs	r3, #25
 8005dda:	2201      	movs	r2, #1
 8005ddc:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005de0:	68f8      	ldr	r0, [r7, #12]
 8005de2:	f001 f865 	bl	8006eb0 <I2C_WaitOnFlagUntilTimeout>
 8005de6:	4603      	mov	r3, r0
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d001      	beq.n	8005df0 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8005dec:	2301      	movs	r3, #1
 8005dee:	e0d1      	b.n	8005f94 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	2221      	movs	r2, #33	@ 0x21
 8005df4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	2240      	movs	r2, #64	@ 0x40
 8005dfc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	2200      	movs	r2, #0
 8005e04:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	6a3a      	ldr	r2, [r7, #32]
 8005e0a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8005e10:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	2200      	movs	r2, #0
 8005e16:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005e18:	88f8      	ldrh	r0, [r7, #6]
 8005e1a:	893a      	ldrh	r2, [r7, #8]
 8005e1c:	8979      	ldrh	r1, [r7, #10]
 8005e1e:	697b      	ldr	r3, [r7, #20]
 8005e20:	9301      	str	r3, [sp, #4]
 8005e22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e24:	9300      	str	r3, [sp, #0]
 8005e26:	4603      	mov	r3, r0
 8005e28:	68f8      	ldr	r0, [r7, #12]
 8005e2a:	f000 fb8d 	bl	8006548 <I2C_RequestMemoryWrite>
 8005e2e:	4603      	mov	r3, r0
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d005      	beq.n	8005e40 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	2200      	movs	r2, #0
 8005e38:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8005e3c:	2301      	movs	r3, #1
 8005e3e:	e0a9      	b.n	8005f94 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005e44:	b29b      	uxth	r3, r3
 8005e46:	2bff      	cmp	r3, #255	@ 0xff
 8005e48:	d90e      	bls.n	8005e68 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	22ff      	movs	r2, #255	@ 0xff
 8005e4e:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005e54:	b2da      	uxtb	r2, r3
 8005e56:	8979      	ldrh	r1, [r7, #10]
 8005e58:	2300      	movs	r3, #0
 8005e5a:	9300      	str	r3, [sp, #0]
 8005e5c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005e60:	68f8      	ldr	r0, [r7, #12]
 8005e62:	f001 f9e9 	bl	8007238 <I2C_TransferConfig>
 8005e66:	e00f      	b.n	8005e88 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005e6c:	b29a      	uxth	r2, r3
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005e76:	b2da      	uxtb	r2, r3
 8005e78:	8979      	ldrh	r1, [r7, #10]
 8005e7a:	2300      	movs	r3, #0
 8005e7c:	9300      	str	r3, [sp, #0]
 8005e7e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005e82:	68f8      	ldr	r0, [r7, #12]
 8005e84:	f001 f9d8 	bl	8007238 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005e88:	697a      	ldr	r2, [r7, #20]
 8005e8a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005e8c:	68f8      	ldr	r0, [r7, #12]
 8005e8e:	f001 f868 	bl	8006f62 <I2C_WaitOnTXISFlagUntilTimeout>
 8005e92:	4603      	mov	r3, r0
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d001      	beq.n	8005e9c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8005e98:	2301      	movs	r3, #1
 8005e9a:	e07b      	b.n	8005f94 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ea0:	781a      	ldrb	r2, [r3, #0]
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005eac:	1c5a      	adds	r2, r3, #1
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005eb6:	b29b      	uxth	r3, r3
 8005eb8:	3b01      	subs	r3, #1
 8005eba:	b29a      	uxth	r2, r3
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005ec4:	3b01      	subs	r3, #1
 8005ec6:	b29a      	uxth	r2, r3
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005ed0:	b29b      	uxth	r3, r3
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d034      	beq.n	8005f40 <HAL_I2C_Mem_Write+0x1c8>
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d130      	bne.n	8005f40 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005ede:	697b      	ldr	r3, [r7, #20]
 8005ee0:	9300      	str	r3, [sp, #0]
 8005ee2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ee4:	2200      	movs	r2, #0
 8005ee6:	2180      	movs	r1, #128	@ 0x80
 8005ee8:	68f8      	ldr	r0, [r7, #12]
 8005eea:	f000 ffe1 	bl	8006eb0 <I2C_WaitOnFlagUntilTimeout>
 8005eee:	4603      	mov	r3, r0
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d001      	beq.n	8005ef8 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8005ef4:	2301      	movs	r3, #1
 8005ef6:	e04d      	b.n	8005f94 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005efc:	b29b      	uxth	r3, r3
 8005efe:	2bff      	cmp	r3, #255	@ 0xff
 8005f00:	d90e      	bls.n	8005f20 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	22ff      	movs	r2, #255	@ 0xff
 8005f06:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005f0c:	b2da      	uxtb	r2, r3
 8005f0e:	8979      	ldrh	r1, [r7, #10]
 8005f10:	2300      	movs	r3, #0
 8005f12:	9300      	str	r3, [sp, #0]
 8005f14:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005f18:	68f8      	ldr	r0, [r7, #12]
 8005f1a:	f001 f98d 	bl	8007238 <I2C_TransferConfig>
 8005f1e:	e00f      	b.n	8005f40 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005f24:	b29a      	uxth	r2, r3
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005f2e:	b2da      	uxtb	r2, r3
 8005f30:	8979      	ldrh	r1, [r7, #10]
 8005f32:	2300      	movs	r3, #0
 8005f34:	9300      	str	r3, [sp, #0]
 8005f36:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005f3a:	68f8      	ldr	r0, [r7, #12]
 8005f3c:	f001 f97c 	bl	8007238 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005f44:	b29b      	uxth	r3, r3
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d19e      	bne.n	8005e88 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005f4a:	697a      	ldr	r2, [r7, #20]
 8005f4c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005f4e:	68f8      	ldr	r0, [r7, #12]
 8005f50:	f001 f84e 	bl	8006ff0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005f54:	4603      	mov	r3, r0
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d001      	beq.n	8005f5e <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8005f5a:	2301      	movs	r3, #1
 8005f5c:	e01a      	b.n	8005f94 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	2220      	movs	r2, #32
 8005f64:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	6859      	ldr	r1, [r3, #4]
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	681a      	ldr	r2, [r3, #0]
 8005f70:	4b0a      	ldr	r3, [pc, #40]	@ (8005f9c <HAL_I2C_Mem_Write+0x224>)
 8005f72:	400b      	ands	r3, r1
 8005f74:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	2220      	movs	r2, #32
 8005f7a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	2200      	movs	r2, #0
 8005f82:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	2200      	movs	r2, #0
 8005f8a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005f8e:	2300      	movs	r3, #0
 8005f90:	e000      	b.n	8005f94 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8005f92:	2302      	movs	r3, #2
  }
}
 8005f94:	4618      	mov	r0, r3
 8005f96:	3718      	adds	r7, #24
 8005f98:	46bd      	mov	sp, r7
 8005f9a:	bd80      	pop	{r7, pc}
 8005f9c:	fe00e800 	.word	0xfe00e800

08005fa0 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005fa0:	b580      	push	{r7, lr}
 8005fa2:	b088      	sub	sp, #32
 8005fa4:	af02      	add	r7, sp, #8
 8005fa6:	60f8      	str	r0, [r7, #12]
 8005fa8:	4608      	mov	r0, r1
 8005faa:	4611      	mov	r1, r2
 8005fac:	461a      	mov	r2, r3
 8005fae:	4603      	mov	r3, r0
 8005fb0:	817b      	strh	r3, [r7, #10]
 8005fb2:	460b      	mov	r3, r1
 8005fb4:	813b      	strh	r3, [r7, #8]
 8005fb6:	4613      	mov	r3, r2
 8005fb8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005fc0:	b2db      	uxtb	r3, r3
 8005fc2:	2b20      	cmp	r3, #32
 8005fc4:	f040 80fd 	bne.w	80061c2 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8005fc8:	6a3b      	ldr	r3, [r7, #32]
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d002      	beq.n	8005fd4 <HAL_I2C_Mem_Read+0x34>
 8005fce:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d105      	bne.n	8005fe0 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005fda:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8005fdc:	2301      	movs	r3, #1
 8005fde:	e0f1      	b.n	80061c4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005fe6:	2b01      	cmp	r3, #1
 8005fe8:	d101      	bne.n	8005fee <HAL_I2C_Mem_Read+0x4e>
 8005fea:	2302      	movs	r3, #2
 8005fec:	e0ea      	b.n	80061c4 <HAL_I2C_Mem_Read+0x224>
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	2201      	movs	r2, #1
 8005ff2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005ff6:	f7ff f9c5 	bl	8005384 <HAL_GetTick>
 8005ffa:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005ffc:	697b      	ldr	r3, [r7, #20]
 8005ffe:	9300      	str	r3, [sp, #0]
 8006000:	2319      	movs	r3, #25
 8006002:	2201      	movs	r2, #1
 8006004:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8006008:	68f8      	ldr	r0, [r7, #12]
 800600a:	f000 ff51 	bl	8006eb0 <I2C_WaitOnFlagUntilTimeout>
 800600e:	4603      	mov	r3, r0
 8006010:	2b00      	cmp	r3, #0
 8006012:	d001      	beq.n	8006018 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8006014:	2301      	movs	r3, #1
 8006016:	e0d5      	b.n	80061c4 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	2222      	movs	r2, #34	@ 0x22
 800601c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	2240      	movs	r2, #64	@ 0x40
 8006024:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	2200      	movs	r2, #0
 800602c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	6a3a      	ldr	r2, [r7, #32]
 8006032:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8006038:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	2200      	movs	r2, #0
 800603e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006040:	88f8      	ldrh	r0, [r7, #6]
 8006042:	893a      	ldrh	r2, [r7, #8]
 8006044:	8979      	ldrh	r1, [r7, #10]
 8006046:	697b      	ldr	r3, [r7, #20]
 8006048:	9301      	str	r3, [sp, #4]
 800604a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800604c:	9300      	str	r3, [sp, #0]
 800604e:	4603      	mov	r3, r0
 8006050:	68f8      	ldr	r0, [r7, #12]
 8006052:	f000 facd 	bl	80065f0 <I2C_RequestMemoryRead>
 8006056:	4603      	mov	r3, r0
 8006058:	2b00      	cmp	r3, #0
 800605a:	d005      	beq.n	8006068 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	2200      	movs	r2, #0
 8006060:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8006064:	2301      	movs	r3, #1
 8006066:	e0ad      	b.n	80061c4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800606c:	b29b      	uxth	r3, r3
 800606e:	2bff      	cmp	r3, #255	@ 0xff
 8006070:	d90e      	bls.n	8006090 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	22ff      	movs	r2, #255	@ 0xff
 8006076:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800607c:	b2da      	uxtb	r2, r3
 800607e:	8979      	ldrh	r1, [r7, #10]
 8006080:	4b52      	ldr	r3, [pc, #328]	@ (80061cc <HAL_I2C_Mem_Read+0x22c>)
 8006082:	9300      	str	r3, [sp, #0]
 8006084:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006088:	68f8      	ldr	r0, [r7, #12]
 800608a:	f001 f8d5 	bl	8007238 <I2C_TransferConfig>
 800608e:	e00f      	b.n	80060b0 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006094:	b29a      	uxth	r2, r3
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800609e:	b2da      	uxtb	r2, r3
 80060a0:	8979      	ldrh	r1, [r7, #10]
 80060a2:	4b4a      	ldr	r3, [pc, #296]	@ (80061cc <HAL_I2C_Mem_Read+0x22c>)
 80060a4:	9300      	str	r3, [sp, #0]
 80060a6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80060aa:	68f8      	ldr	r0, [r7, #12]
 80060ac:	f001 f8c4 	bl	8007238 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80060b0:	697b      	ldr	r3, [r7, #20]
 80060b2:	9300      	str	r3, [sp, #0]
 80060b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060b6:	2200      	movs	r2, #0
 80060b8:	2104      	movs	r1, #4
 80060ba:	68f8      	ldr	r0, [r7, #12]
 80060bc:	f000 fef8 	bl	8006eb0 <I2C_WaitOnFlagUntilTimeout>
 80060c0:	4603      	mov	r3, r0
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d001      	beq.n	80060ca <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80060c6:	2301      	movs	r3, #1
 80060c8:	e07c      	b.n	80061c4 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060d4:	b2d2      	uxtb	r2, r2
 80060d6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060dc:	1c5a      	adds	r2, r3, #1
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80060e6:	3b01      	subs	r3, #1
 80060e8:	b29a      	uxth	r2, r3
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80060f2:	b29b      	uxth	r3, r3
 80060f4:	3b01      	subs	r3, #1
 80060f6:	b29a      	uxth	r2, r3
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006100:	b29b      	uxth	r3, r3
 8006102:	2b00      	cmp	r3, #0
 8006104:	d034      	beq.n	8006170 <HAL_I2C_Mem_Read+0x1d0>
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800610a:	2b00      	cmp	r3, #0
 800610c:	d130      	bne.n	8006170 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800610e:	697b      	ldr	r3, [r7, #20]
 8006110:	9300      	str	r3, [sp, #0]
 8006112:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006114:	2200      	movs	r2, #0
 8006116:	2180      	movs	r1, #128	@ 0x80
 8006118:	68f8      	ldr	r0, [r7, #12]
 800611a:	f000 fec9 	bl	8006eb0 <I2C_WaitOnFlagUntilTimeout>
 800611e:	4603      	mov	r3, r0
 8006120:	2b00      	cmp	r3, #0
 8006122:	d001      	beq.n	8006128 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8006124:	2301      	movs	r3, #1
 8006126:	e04d      	b.n	80061c4 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800612c:	b29b      	uxth	r3, r3
 800612e:	2bff      	cmp	r3, #255	@ 0xff
 8006130:	d90e      	bls.n	8006150 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	22ff      	movs	r2, #255	@ 0xff
 8006136:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800613c:	b2da      	uxtb	r2, r3
 800613e:	8979      	ldrh	r1, [r7, #10]
 8006140:	2300      	movs	r3, #0
 8006142:	9300      	str	r3, [sp, #0]
 8006144:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006148:	68f8      	ldr	r0, [r7, #12]
 800614a:	f001 f875 	bl	8007238 <I2C_TransferConfig>
 800614e:	e00f      	b.n	8006170 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006154:	b29a      	uxth	r2, r3
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800615e:	b2da      	uxtb	r2, r3
 8006160:	8979      	ldrh	r1, [r7, #10]
 8006162:	2300      	movs	r3, #0
 8006164:	9300      	str	r3, [sp, #0]
 8006166:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800616a:	68f8      	ldr	r0, [r7, #12]
 800616c:	f001 f864 	bl	8007238 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006174:	b29b      	uxth	r3, r3
 8006176:	2b00      	cmp	r3, #0
 8006178:	d19a      	bne.n	80060b0 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800617a:	697a      	ldr	r2, [r7, #20]
 800617c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800617e:	68f8      	ldr	r0, [r7, #12]
 8006180:	f000 ff36 	bl	8006ff0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8006184:	4603      	mov	r3, r0
 8006186:	2b00      	cmp	r3, #0
 8006188:	d001      	beq.n	800618e <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800618a:	2301      	movs	r3, #1
 800618c:	e01a      	b.n	80061c4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	2220      	movs	r2, #32
 8006194:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	6859      	ldr	r1, [r3, #4]
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	681a      	ldr	r2, [r3, #0]
 80061a0:	4b0b      	ldr	r3, [pc, #44]	@ (80061d0 <HAL_I2C_Mem_Read+0x230>)
 80061a2:	400b      	ands	r3, r1
 80061a4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	2220      	movs	r2, #32
 80061aa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	2200      	movs	r2, #0
 80061b2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	2200      	movs	r2, #0
 80061ba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80061be:	2300      	movs	r3, #0
 80061c0:	e000      	b.n	80061c4 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80061c2:	2302      	movs	r3, #2
  }
}
 80061c4:	4618      	mov	r0, r3
 80061c6:	3718      	adds	r7, #24
 80061c8:	46bd      	mov	sp, r7
 80061ca:	bd80      	pop	{r7, pc}
 80061cc:	80002400 	.word	0x80002400
 80061d0:	fe00e800 	.word	0xfe00e800

080061d4 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 80061d4:	b580      	push	{r7, lr}
 80061d6:	b084      	sub	sp, #16
 80061d8:	af00      	add	r7, sp, #0
 80061da:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	699b      	ldr	r3, [r3, #24]
 80061e2:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d005      	beq.n	8006200 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80061f8:	68ba      	ldr	r2, [r7, #8]
 80061fa:	68f9      	ldr	r1, [r7, #12]
 80061fc:	6878      	ldr	r0, [r7, #4]
 80061fe:	4798      	blx	r3
  }
}
 8006200:	bf00      	nop
 8006202:	3710      	adds	r7, #16
 8006204:	46bd      	mov	sp, r7
 8006206:	bd80      	pop	{r7, pc}

08006208 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8006208:	b580      	push	{r7, lr}
 800620a:	b086      	sub	sp, #24
 800620c:	af00      	add	r7, sp, #0
 800620e:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	699b      	ldr	r3, [r3, #24]
 8006216:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8006220:	697b      	ldr	r3, [r7, #20]
 8006222:	0a1b      	lsrs	r3, r3, #8
 8006224:	f003 0301 	and.w	r3, r3, #1
 8006228:	2b00      	cmp	r3, #0
 800622a:	d010      	beq.n	800624e <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800622c:	693b      	ldr	r3, [r7, #16]
 800622e:	09db      	lsrs	r3, r3, #7
 8006230:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8006234:	2b00      	cmp	r3, #0
 8006236:	d00a      	beq.n	800624e <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800623c:	f043 0201 	orr.w	r2, r3, #1
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800624c:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800624e:	697b      	ldr	r3, [r7, #20]
 8006250:	0a9b      	lsrs	r3, r3, #10
 8006252:	f003 0301 	and.w	r3, r3, #1
 8006256:	2b00      	cmp	r3, #0
 8006258:	d010      	beq.n	800627c <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800625a:	693b      	ldr	r3, [r7, #16]
 800625c:	09db      	lsrs	r3, r3, #7
 800625e:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8006262:	2b00      	cmp	r3, #0
 8006264:	d00a      	beq.n	800627c <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800626a:	f043 0208 	orr.w	r2, r3, #8
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800627a:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 800627c:	697b      	ldr	r3, [r7, #20]
 800627e:	0a5b      	lsrs	r3, r3, #9
 8006280:	f003 0301 	and.w	r3, r3, #1
 8006284:	2b00      	cmp	r3, #0
 8006286:	d010      	beq.n	80062aa <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8006288:	693b      	ldr	r3, [r7, #16]
 800628a:	09db      	lsrs	r3, r3, #7
 800628c:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8006290:	2b00      	cmp	r3, #0
 8006292:	d00a      	beq.n	80062aa <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006298:	f043 0202 	orr.w	r2, r3, #2
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80062a8:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80062ae:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	f003 030b 	and.w	r3, r3, #11
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d003      	beq.n	80062c2 <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 80062ba:	68f9      	ldr	r1, [r7, #12]
 80062bc:	6878      	ldr	r0, [r7, #4]
 80062be:	f000 fc9f 	bl	8006c00 <I2C_ITError>
  }
}
 80062c2:	bf00      	nop
 80062c4:	3718      	adds	r7, #24
 80062c6:	46bd      	mov	sp, r7
 80062c8:	bd80      	pop	{r7, pc}

080062ca <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80062ca:	b480      	push	{r7}
 80062cc:	b083      	sub	sp, #12
 80062ce:	af00      	add	r7, sp, #0
 80062d0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80062d2:	bf00      	nop
 80062d4:	370c      	adds	r7, #12
 80062d6:	46bd      	mov	sp, r7
 80062d8:	bc80      	pop	{r7}
 80062da:	4770      	bx	lr

080062dc <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80062dc:	b480      	push	{r7}
 80062de:	b083      	sub	sp, #12
 80062e0:	af00      	add	r7, sp, #0
 80062e2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80062e4:	bf00      	nop
 80062e6:	370c      	adds	r7, #12
 80062e8:	46bd      	mov	sp, r7
 80062ea:	bc80      	pop	{r7}
 80062ec:	4770      	bx	lr

080062ee <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80062ee:	b480      	push	{r7}
 80062f0:	b083      	sub	sp, #12
 80062f2:	af00      	add	r7, sp, #0
 80062f4:	6078      	str	r0, [r7, #4]
 80062f6:	460b      	mov	r3, r1
 80062f8:	70fb      	strb	r3, [r7, #3]
 80062fa:	4613      	mov	r3, r2
 80062fc:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80062fe:	bf00      	nop
 8006300:	370c      	adds	r7, #12
 8006302:	46bd      	mov	sp, r7
 8006304:	bc80      	pop	{r7}
 8006306:	4770      	bx	lr

08006308 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006308:	b480      	push	{r7}
 800630a:	b083      	sub	sp, #12
 800630c:	af00      	add	r7, sp, #0
 800630e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8006310:	bf00      	nop
 8006312:	370c      	adds	r7, #12
 8006314:	46bd      	mov	sp, r7
 8006316:	bc80      	pop	{r7}
 8006318:	4770      	bx	lr

0800631a <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800631a:	b480      	push	{r7}
 800631c:	b083      	sub	sp, #12
 800631e:	af00      	add	r7, sp, #0
 8006320:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8006322:	bf00      	nop
 8006324:	370c      	adds	r7, #12
 8006326:	46bd      	mov	sp, r7
 8006328:	bc80      	pop	{r7}
 800632a:	4770      	bx	lr

0800632c <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800632c:	b480      	push	{r7}
 800632e:	b083      	sub	sp, #12
 8006330:	af00      	add	r7, sp, #0
 8006332:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8006334:	bf00      	nop
 8006336:	370c      	adds	r7, #12
 8006338:	46bd      	mov	sp, r7
 800633a:	bc80      	pop	{r7}
 800633c:	4770      	bx	lr

0800633e <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 800633e:	b580      	push	{r7, lr}
 8006340:	b086      	sub	sp, #24
 8006342:	af00      	add	r7, sp, #0
 8006344:	60f8      	str	r0, [r7, #12]
 8006346:	60b9      	str	r1, [r7, #8]
 8006348:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800634e:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8006350:	68bb      	ldr	r3, [r7, #8]
 8006352:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800635a:	2b01      	cmp	r3, #1
 800635c:	d101      	bne.n	8006362 <I2C_Slave_ISR_IT+0x24>
 800635e:	2302      	movs	r3, #2
 8006360:	e0ed      	b.n	800653e <I2C_Slave_ISR_IT+0x200>
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	2201      	movs	r2, #1
 8006366:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800636a:	693b      	ldr	r3, [r7, #16]
 800636c:	095b      	lsrs	r3, r3, #5
 800636e:	f003 0301 	and.w	r3, r3, #1
 8006372:	2b00      	cmp	r3, #0
 8006374:	d00a      	beq.n	800638c <I2C_Slave_ISR_IT+0x4e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	095b      	lsrs	r3, r3, #5
 800637a:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800637e:	2b00      	cmp	r3, #0
 8006380:	d004      	beq.n	800638c <I2C_Slave_ISR_IT+0x4e>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8006382:	6939      	ldr	r1, [r7, #16]
 8006384:	68f8      	ldr	r0, [r7, #12]
 8006386:	f000 fa69 	bl	800685c <I2C_ITSlaveCplt>
 800638a:	e0d3      	b.n	8006534 <I2C_Slave_ISR_IT+0x1f6>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800638c:	693b      	ldr	r3, [r7, #16]
 800638e:	091b      	lsrs	r3, r3, #4
 8006390:	f003 0301 	and.w	r3, r3, #1
 8006394:	2b00      	cmp	r3, #0
 8006396:	d04d      	beq.n	8006434 <I2C_Slave_ISR_IT+0xf6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	091b      	lsrs	r3, r3, #4
 800639c:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d047      	beq.n	8006434 <I2C_Slave_ISR_IT+0xf6>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80063a8:	b29b      	uxth	r3, r3
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d128      	bne.n	8006400 <I2C_Slave_ISR_IT+0xc2>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80063b4:	b2db      	uxtb	r3, r3
 80063b6:	2b28      	cmp	r3, #40	@ 0x28
 80063b8:	d108      	bne.n	80063cc <I2C_Slave_ISR_IT+0x8e>
 80063ba:	697b      	ldr	r3, [r7, #20]
 80063bc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80063c0:	d104      	bne.n	80063cc <I2C_Slave_ISR_IT+0x8e>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80063c2:	6939      	ldr	r1, [r7, #16]
 80063c4:	68f8      	ldr	r0, [r7, #12]
 80063c6:	f000 fbc5 	bl	8006b54 <I2C_ITListenCplt>
 80063ca:	e032      	b.n	8006432 <I2C_Slave_ISR_IT+0xf4>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80063d2:	b2db      	uxtb	r3, r3
 80063d4:	2b29      	cmp	r3, #41	@ 0x29
 80063d6:	d10e      	bne.n	80063f6 <I2C_Slave_ISR_IT+0xb8>
 80063d8:	697b      	ldr	r3, [r7, #20]
 80063da:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80063de:	d00a      	beq.n	80063f6 <I2C_Slave_ISR_IT+0xb8>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	2210      	movs	r2, #16
 80063e6:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 80063e8:	68f8      	ldr	r0, [r7, #12]
 80063ea:	f000 fd20 	bl	8006e2e <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80063ee:	68f8      	ldr	r0, [r7, #12]
 80063f0:	f000 f9d6 	bl	80067a0 <I2C_ITSlaveSeqCplt>
 80063f4:	e01d      	b.n	8006432 <I2C_Slave_ISR_IT+0xf4>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	2210      	movs	r2, #16
 80063fc:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 80063fe:	e096      	b.n	800652e <I2C_Slave_ISR_IT+0x1f0>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	2210      	movs	r2, #16
 8006406:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800640c:	f043 0204 	orr.w	r2, r3, #4
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8006414:	697b      	ldr	r3, [r7, #20]
 8006416:	2b00      	cmp	r3, #0
 8006418:	d004      	beq.n	8006424 <I2C_Slave_ISR_IT+0xe6>
 800641a:	697b      	ldr	r3, [r7, #20]
 800641c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006420:	f040 8085 	bne.w	800652e <I2C_Slave_ISR_IT+0x1f0>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006428:	4619      	mov	r1, r3
 800642a:	68f8      	ldr	r0, [r7, #12]
 800642c:	f000 fbe8 	bl	8006c00 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8006430:	e07d      	b.n	800652e <I2C_Slave_ISR_IT+0x1f0>
 8006432:	e07c      	b.n	800652e <I2C_Slave_ISR_IT+0x1f0>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8006434:	693b      	ldr	r3, [r7, #16]
 8006436:	089b      	lsrs	r3, r3, #2
 8006438:	f003 0301 	and.w	r3, r3, #1
 800643c:	2b00      	cmp	r3, #0
 800643e:	d030      	beq.n	80064a2 <I2C_Slave_ISR_IT+0x164>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	089b      	lsrs	r3, r3, #2
 8006444:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8006448:	2b00      	cmp	r3, #0
 800644a:	d02a      	beq.n	80064a2 <I2C_Slave_ISR_IT+0x164>
  {
    if (hi2c->XferCount > 0U)
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006450:	b29b      	uxth	r3, r3
 8006452:	2b00      	cmp	r3, #0
 8006454:	d018      	beq.n	8006488 <I2C_Slave_ISR_IT+0x14a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006460:	b2d2      	uxtb	r2, r2
 8006462:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006468:	1c5a      	adds	r2, r3, #1
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006472:	3b01      	subs	r3, #1
 8006474:	b29a      	uxth	r2, r3
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800647e:	b29b      	uxth	r3, r3
 8006480:	3b01      	subs	r3, #1
 8006482:	b29a      	uxth	r2, r3
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800648c:	b29b      	uxth	r3, r3
 800648e:	2b00      	cmp	r3, #0
 8006490:	d14f      	bne.n	8006532 <I2C_Slave_ISR_IT+0x1f4>
 8006492:	697b      	ldr	r3, [r7, #20]
 8006494:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006498:	d04b      	beq.n	8006532 <I2C_Slave_ISR_IT+0x1f4>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 800649a:	68f8      	ldr	r0, [r7, #12]
 800649c:	f000 f980 	bl	80067a0 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 80064a0:	e047      	b.n	8006532 <I2C_Slave_ISR_IT+0x1f4>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80064a2:	693b      	ldr	r3, [r7, #16]
 80064a4:	08db      	lsrs	r3, r3, #3
 80064a6:	f003 0301 	and.w	r3, r3, #1
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d00a      	beq.n	80064c4 <I2C_Slave_ISR_IT+0x186>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	08db      	lsrs	r3, r3, #3
 80064b2:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d004      	beq.n	80064c4 <I2C_Slave_ISR_IT+0x186>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 80064ba:	6939      	ldr	r1, [r7, #16]
 80064bc:	68f8      	ldr	r0, [r7, #12]
 80064be:	f000 f8eb 	bl	8006698 <I2C_ITAddrCplt>
 80064c2:	e037      	b.n	8006534 <I2C_Slave_ISR_IT+0x1f6>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80064c4:	693b      	ldr	r3, [r7, #16]
 80064c6:	085b      	lsrs	r3, r3, #1
 80064c8:	f003 0301 	and.w	r3, r3, #1
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d031      	beq.n	8006534 <I2C_Slave_ISR_IT+0x1f6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	085b      	lsrs	r3, r3, #1
 80064d4:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d02b      	beq.n	8006534 <I2C_Slave_ISR_IT+0x1f6>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80064e0:	b29b      	uxth	r3, r3
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d018      	beq.n	8006518 <I2C_Slave_ISR_IT+0x1da>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064ea:	781a      	ldrb	r2, [r3, #0]
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064f6:	1c5a      	adds	r2, r3, #1
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006500:	b29b      	uxth	r3, r3
 8006502:	3b01      	subs	r3, #1
 8006504:	b29a      	uxth	r2, r3
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800650e:	3b01      	subs	r3, #1
 8006510:	b29a      	uxth	r2, r3
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	851a      	strh	r2, [r3, #40]	@ 0x28
 8006516:	e00d      	b.n	8006534 <I2C_Slave_ISR_IT+0x1f6>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8006518:	697b      	ldr	r3, [r7, #20]
 800651a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800651e:	d002      	beq.n	8006526 <I2C_Slave_ISR_IT+0x1e8>
 8006520:	697b      	ldr	r3, [r7, #20]
 8006522:	2b00      	cmp	r3, #0
 8006524:	d106      	bne.n	8006534 <I2C_Slave_ISR_IT+0x1f6>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8006526:	68f8      	ldr	r0, [r7, #12]
 8006528:	f000 f93a 	bl	80067a0 <I2C_ITSlaveSeqCplt>
 800652c:	e002      	b.n	8006534 <I2C_Slave_ISR_IT+0x1f6>
    if (hi2c->XferCount == 0U)
 800652e:	bf00      	nop
 8006530:	e000      	b.n	8006534 <I2C_Slave_ISR_IT+0x1f6>
    if ((hi2c->XferCount == 0U) && \
 8006532:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	2200      	movs	r2, #0
 8006538:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800653c:	2300      	movs	r3, #0
}
 800653e:	4618      	mov	r0, r3
 8006540:	3718      	adds	r7, #24
 8006542:	46bd      	mov	sp, r7
 8006544:	bd80      	pop	{r7, pc}
	...

08006548 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8006548:	b580      	push	{r7, lr}
 800654a:	b086      	sub	sp, #24
 800654c:	af02      	add	r7, sp, #8
 800654e:	60f8      	str	r0, [r7, #12]
 8006550:	4608      	mov	r0, r1
 8006552:	4611      	mov	r1, r2
 8006554:	461a      	mov	r2, r3
 8006556:	4603      	mov	r3, r0
 8006558:	817b      	strh	r3, [r7, #10]
 800655a:	460b      	mov	r3, r1
 800655c:	813b      	strh	r3, [r7, #8]
 800655e:	4613      	mov	r3, r2
 8006560:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8006562:	88fb      	ldrh	r3, [r7, #6]
 8006564:	b2da      	uxtb	r2, r3
 8006566:	8979      	ldrh	r1, [r7, #10]
 8006568:	4b20      	ldr	r3, [pc, #128]	@ (80065ec <I2C_RequestMemoryWrite+0xa4>)
 800656a:	9300      	str	r3, [sp, #0]
 800656c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006570:	68f8      	ldr	r0, [r7, #12]
 8006572:	f000 fe61 	bl	8007238 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006576:	69fa      	ldr	r2, [r7, #28]
 8006578:	69b9      	ldr	r1, [r7, #24]
 800657a:	68f8      	ldr	r0, [r7, #12]
 800657c:	f000 fcf1 	bl	8006f62 <I2C_WaitOnTXISFlagUntilTimeout>
 8006580:	4603      	mov	r3, r0
 8006582:	2b00      	cmp	r3, #0
 8006584:	d001      	beq.n	800658a <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8006586:	2301      	movs	r3, #1
 8006588:	e02c      	b.n	80065e4 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800658a:	88fb      	ldrh	r3, [r7, #6]
 800658c:	2b01      	cmp	r3, #1
 800658e:	d105      	bne.n	800659c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006590:	893b      	ldrh	r3, [r7, #8]
 8006592:	b2da      	uxtb	r2, r3
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	629a      	str	r2, [r3, #40]	@ 0x28
 800659a:	e015      	b.n	80065c8 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800659c:	893b      	ldrh	r3, [r7, #8]
 800659e:	0a1b      	lsrs	r3, r3, #8
 80065a0:	b29b      	uxth	r3, r3
 80065a2:	b2da      	uxtb	r2, r3
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80065aa:	69fa      	ldr	r2, [r7, #28]
 80065ac:	69b9      	ldr	r1, [r7, #24]
 80065ae:	68f8      	ldr	r0, [r7, #12]
 80065b0:	f000 fcd7 	bl	8006f62 <I2C_WaitOnTXISFlagUntilTimeout>
 80065b4:	4603      	mov	r3, r0
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d001      	beq.n	80065be <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80065ba:	2301      	movs	r3, #1
 80065bc:	e012      	b.n	80065e4 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80065be:	893b      	ldrh	r3, [r7, #8]
 80065c0:	b2da      	uxtb	r2, r3
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80065c8:	69fb      	ldr	r3, [r7, #28]
 80065ca:	9300      	str	r3, [sp, #0]
 80065cc:	69bb      	ldr	r3, [r7, #24]
 80065ce:	2200      	movs	r2, #0
 80065d0:	2180      	movs	r1, #128	@ 0x80
 80065d2:	68f8      	ldr	r0, [r7, #12]
 80065d4:	f000 fc6c 	bl	8006eb0 <I2C_WaitOnFlagUntilTimeout>
 80065d8:	4603      	mov	r3, r0
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d001      	beq.n	80065e2 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80065de:	2301      	movs	r3, #1
 80065e0:	e000      	b.n	80065e4 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80065e2:	2300      	movs	r3, #0
}
 80065e4:	4618      	mov	r0, r3
 80065e6:	3710      	adds	r7, #16
 80065e8:	46bd      	mov	sp, r7
 80065ea:	bd80      	pop	{r7, pc}
 80065ec:	80002000 	.word	0x80002000

080065f0 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80065f0:	b580      	push	{r7, lr}
 80065f2:	b086      	sub	sp, #24
 80065f4:	af02      	add	r7, sp, #8
 80065f6:	60f8      	str	r0, [r7, #12]
 80065f8:	4608      	mov	r0, r1
 80065fa:	4611      	mov	r1, r2
 80065fc:	461a      	mov	r2, r3
 80065fe:	4603      	mov	r3, r0
 8006600:	817b      	strh	r3, [r7, #10]
 8006602:	460b      	mov	r3, r1
 8006604:	813b      	strh	r3, [r7, #8]
 8006606:	4613      	mov	r3, r2
 8006608:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800660a:	88fb      	ldrh	r3, [r7, #6]
 800660c:	b2da      	uxtb	r2, r3
 800660e:	8979      	ldrh	r1, [r7, #10]
 8006610:	4b20      	ldr	r3, [pc, #128]	@ (8006694 <I2C_RequestMemoryRead+0xa4>)
 8006612:	9300      	str	r3, [sp, #0]
 8006614:	2300      	movs	r3, #0
 8006616:	68f8      	ldr	r0, [r7, #12]
 8006618:	f000 fe0e 	bl	8007238 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800661c:	69fa      	ldr	r2, [r7, #28]
 800661e:	69b9      	ldr	r1, [r7, #24]
 8006620:	68f8      	ldr	r0, [r7, #12]
 8006622:	f000 fc9e 	bl	8006f62 <I2C_WaitOnTXISFlagUntilTimeout>
 8006626:	4603      	mov	r3, r0
 8006628:	2b00      	cmp	r3, #0
 800662a:	d001      	beq.n	8006630 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800662c:	2301      	movs	r3, #1
 800662e:	e02c      	b.n	800668a <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006630:	88fb      	ldrh	r3, [r7, #6]
 8006632:	2b01      	cmp	r3, #1
 8006634:	d105      	bne.n	8006642 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006636:	893b      	ldrh	r3, [r7, #8]
 8006638:	b2da      	uxtb	r2, r3
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	629a      	str	r2, [r3, #40]	@ 0x28
 8006640:	e015      	b.n	800666e <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8006642:	893b      	ldrh	r3, [r7, #8]
 8006644:	0a1b      	lsrs	r3, r3, #8
 8006646:	b29b      	uxth	r3, r3
 8006648:	b2da      	uxtb	r2, r3
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006650:	69fa      	ldr	r2, [r7, #28]
 8006652:	69b9      	ldr	r1, [r7, #24]
 8006654:	68f8      	ldr	r0, [r7, #12]
 8006656:	f000 fc84 	bl	8006f62 <I2C_WaitOnTXISFlagUntilTimeout>
 800665a:	4603      	mov	r3, r0
 800665c:	2b00      	cmp	r3, #0
 800665e:	d001      	beq.n	8006664 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8006660:	2301      	movs	r3, #1
 8006662:	e012      	b.n	800668a <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006664:	893b      	ldrh	r3, [r7, #8]
 8006666:	b2da      	uxtb	r2, r3
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800666e:	69fb      	ldr	r3, [r7, #28]
 8006670:	9300      	str	r3, [sp, #0]
 8006672:	69bb      	ldr	r3, [r7, #24]
 8006674:	2200      	movs	r2, #0
 8006676:	2140      	movs	r1, #64	@ 0x40
 8006678:	68f8      	ldr	r0, [r7, #12]
 800667a:	f000 fc19 	bl	8006eb0 <I2C_WaitOnFlagUntilTimeout>
 800667e:	4603      	mov	r3, r0
 8006680:	2b00      	cmp	r3, #0
 8006682:	d001      	beq.n	8006688 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8006684:	2301      	movs	r3, #1
 8006686:	e000      	b.n	800668a <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8006688:	2300      	movs	r3, #0
}
 800668a:	4618      	mov	r0, r3
 800668c:	3710      	adds	r7, #16
 800668e:	46bd      	mov	sp, r7
 8006690:	bd80      	pop	{r7, pc}
 8006692:	bf00      	nop
 8006694:	80002000 	.word	0x80002000

08006698 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8006698:	b580      	push	{r7, lr}
 800669a:	b084      	sub	sp, #16
 800669c:	af00      	add	r7, sp, #0
 800669e:	6078      	str	r0, [r7, #4]
 80066a0:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80066a8:	b2db      	uxtb	r3, r3
 80066aa:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80066ae:	2b28      	cmp	r3, #40	@ 0x28
 80066b0:	d16a      	bne.n	8006788 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	699b      	ldr	r3, [r3, #24]
 80066b8:	0c1b      	lsrs	r3, r3, #16
 80066ba:	b2db      	uxtb	r3, r3
 80066bc:	f003 0301 	and.w	r3, r3, #1
 80066c0:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	699b      	ldr	r3, [r3, #24]
 80066c8:	0c1b      	lsrs	r3, r3, #16
 80066ca:	b29b      	uxth	r3, r3
 80066cc:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 80066d0:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	689b      	ldr	r3, [r3, #8]
 80066d8:	b29b      	uxth	r3, r3
 80066da:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80066de:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	68db      	ldr	r3, [r3, #12]
 80066e6:	b29b      	uxth	r3, r3
 80066e8:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 80066ec:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	68db      	ldr	r3, [r3, #12]
 80066f2:	2b02      	cmp	r3, #2
 80066f4:	d138      	bne.n	8006768 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 80066f6:	897b      	ldrh	r3, [r7, #10]
 80066f8:	09db      	lsrs	r3, r3, #7
 80066fa:	b29a      	uxth	r2, r3
 80066fc:	89bb      	ldrh	r3, [r7, #12]
 80066fe:	4053      	eors	r3, r2
 8006700:	b29b      	uxth	r3, r3
 8006702:	f003 0306 	and.w	r3, r3, #6
 8006706:	2b00      	cmp	r3, #0
 8006708:	d11c      	bne.n	8006744 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 800670a:	897b      	ldrh	r3, [r7, #10]
 800670c:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006712:	1c5a      	adds	r2, r3, #1
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800671c:	2b02      	cmp	r3, #2
 800671e:	d13b      	bne.n	8006798 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	2200      	movs	r2, #0
 8006724:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	2208      	movs	r2, #8
 800672c:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	2200      	movs	r2, #0
 8006732:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8006736:	89ba      	ldrh	r2, [r7, #12]
 8006738:	7bfb      	ldrb	r3, [r7, #15]
 800673a:	4619      	mov	r1, r3
 800673c:	6878      	ldr	r0, [r7, #4]
 800673e:	f7ff fdd6 	bl	80062ee <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8006742:	e029      	b.n	8006798 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8006744:	893b      	ldrh	r3, [r7, #8]
 8006746:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8006748:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800674c:	6878      	ldr	r0, [r7, #4]
 800674e:	f000 fda3 	bl	8007298 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	2200      	movs	r2, #0
 8006756:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800675a:	89ba      	ldrh	r2, [r7, #12]
 800675c:	7bfb      	ldrb	r3, [r7, #15]
 800675e:	4619      	mov	r1, r3
 8006760:	6878      	ldr	r0, [r7, #4]
 8006762:	f7ff fdc4 	bl	80062ee <HAL_I2C_AddrCallback>
}
 8006766:	e017      	b.n	8006798 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8006768:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800676c:	6878      	ldr	r0, [r7, #4]
 800676e:	f000 fd93 	bl	8007298 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	2200      	movs	r2, #0
 8006776:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800677a:	89ba      	ldrh	r2, [r7, #12]
 800677c:	7bfb      	ldrb	r3, [r7, #15]
 800677e:	4619      	mov	r1, r3
 8006780:	6878      	ldr	r0, [r7, #4]
 8006782:	f7ff fdb4 	bl	80062ee <HAL_I2C_AddrCallback>
}
 8006786:	e007      	b.n	8006798 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	2208      	movs	r2, #8
 800678e:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	2200      	movs	r2, #0
 8006794:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 8006798:	bf00      	nop
 800679a:	3710      	adds	r7, #16
 800679c:	46bd      	mov	sp, r7
 800679e:	bd80      	pop	{r7, pc}

080067a0 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 80067a0:	b580      	push	{r7, lr}
 80067a2:	b084      	sub	sp, #16
 80067a4:	af00      	add	r7, sp, #0
 80067a6:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	2200      	movs	r2, #0
 80067b4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

#if defined(HAL_DMA_MODULE_ENABLED)
  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	0b9b      	lsrs	r3, r3, #14
 80067bc:	f003 0301 	and.w	r3, r3, #1
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d008      	beq.n	80067d6 <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	681a      	ldr	r2, [r3, #0]
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80067d2:	601a      	str	r2, [r3, #0]
 80067d4:	e00d      	b.n	80067f2 <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	0bdb      	lsrs	r3, r3, #15
 80067da:	f003 0301 	and.w	r3, r3, #1
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d007      	beq.n	80067f2 <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	681a      	ldr	r2, [r3, #0]
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80067f0:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80067f8:	b2db      	uxtb	r3, r3
 80067fa:	2b29      	cmp	r3, #41	@ 0x29
 80067fc:	d112      	bne.n	8006824 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	2228      	movs	r2, #40	@ 0x28
 8006802:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	2221      	movs	r2, #33	@ 0x21
 800680a:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800680c:	2101      	movs	r1, #1
 800680e:	6878      	ldr	r0, [r7, #4]
 8006810:	f000 fd42 	bl	8007298 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	2200      	movs	r2, #0
 8006818:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800681c:	6878      	ldr	r0, [r7, #4]
 800681e:	f7ff fd54 	bl	80062ca <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8006822:	e017      	b.n	8006854 <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800682a:	b2db      	uxtb	r3, r3
 800682c:	2b2a      	cmp	r3, #42	@ 0x2a
 800682e:	d111      	bne.n	8006854 <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	2228      	movs	r2, #40	@ 0x28
 8006834:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	2222      	movs	r2, #34	@ 0x22
 800683c:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800683e:	2102      	movs	r1, #2
 8006840:	6878      	ldr	r0, [r7, #4]
 8006842:	f000 fd29 	bl	8007298 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	2200      	movs	r2, #0
 800684a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800684e:	6878      	ldr	r0, [r7, #4]
 8006850:	f7ff fd44 	bl	80062dc <HAL_I2C_SlaveRxCpltCallback>
}
 8006854:	bf00      	nop
 8006856:	3710      	adds	r7, #16
 8006858:	46bd      	mov	sp, r7
 800685a:	bd80      	pop	{r7, pc}

0800685c <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800685c:	b590      	push	{r4, r7, lr}
 800685e:	b087      	sub	sp, #28
 8006860:	af00      	add	r7, sp, #0
 8006862:	6078      	str	r0, [r7, #4]
 8006864:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 800686e:	683b      	ldr	r3, [r7, #0]
 8006870:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006876:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800687e:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	2220      	movs	r2, #32
 8006886:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8006888:	7afb      	ldrb	r3, [r7, #11]
 800688a:	2b21      	cmp	r3, #33	@ 0x21
 800688c:	d002      	beq.n	8006894 <I2C_ITSlaveCplt+0x38>
 800688e:	7afb      	ldrb	r3, [r7, #11]
 8006890:	2b29      	cmp	r3, #41	@ 0x29
 8006892:	d108      	bne.n	80068a6 <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8006894:	f248 0101 	movw	r1, #32769	@ 0x8001
 8006898:	6878      	ldr	r0, [r7, #4]
 800689a:	f000 fcfd 	bl	8007298 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	2221      	movs	r2, #33	@ 0x21
 80068a2:	631a      	str	r2, [r3, #48]	@ 0x30
 80068a4:	e019      	b.n	80068da <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80068a6:	7afb      	ldrb	r3, [r7, #11]
 80068a8:	2b22      	cmp	r3, #34	@ 0x22
 80068aa:	d002      	beq.n	80068b2 <I2C_ITSlaveCplt+0x56>
 80068ac:	7afb      	ldrb	r3, [r7, #11]
 80068ae:	2b2a      	cmp	r3, #42	@ 0x2a
 80068b0:	d108      	bne.n	80068c4 <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 80068b2:	f248 0102 	movw	r1, #32770	@ 0x8002
 80068b6:	6878      	ldr	r0, [r7, #4]
 80068b8:	f000 fcee 	bl	8007298 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	2222      	movs	r2, #34	@ 0x22
 80068c0:	631a      	str	r2, [r3, #48]	@ 0x30
 80068c2:	e00a      	b.n	80068da <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 80068c4:	7afb      	ldrb	r3, [r7, #11]
 80068c6:	2b28      	cmp	r3, #40	@ 0x28
 80068c8:	d107      	bne.n	80068da <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 80068ca:	f248 0103 	movw	r1, #32771	@ 0x8003
 80068ce:	6878      	ldr	r0, [r7, #4]
 80068d0:	f000 fce2 	bl	8007298 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	2200      	movs	r2, #0
 80068d8:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	685a      	ldr	r2, [r3, #4]
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80068e8:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	6859      	ldr	r1, [r3, #4]
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681a      	ldr	r2, [r3, #0]
 80068f4:	4b95      	ldr	r3, [pc, #596]	@ (8006b4c <I2C_ITSlaveCplt+0x2f0>)
 80068f6:	400b      	ands	r3, r1
 80068f8:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 80068fa:	6878      	ldr	r0, [r7, #4]
 80068fc:	f000 fa97 	bl	8006e2e <I2C_Flush_TXDR>

#if defined(HAL_DMA_MODULE_ENABLED)
  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8006900:	693b      	ldr	r3, [r7, #16]
 8006902:	0b9b      	lsrs	r3, r3, #14
 8006904:	f003 0301 	and.w	r3, r3, #1
 8006908:	2b00      	cmp	r3, #0
 800690a:	d01c      	beq.n	8006946 <I2C_ITSlaveCplt+0xea>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	681a      	ldr	r2, [r3, #0]
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800691a:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006920:	2b00      	cmp	r3, #0
 8006922:	d032      	beq.n	800698a <I2C_ITSlaveCplt+0x12e>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800692c:	b29c      	uxth	r4, r3
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006932:	4618      	mov	r0, r3
 8006934:	f7fe febd 	bl	80056b2 <HAL_DMAEx_GetFifoLevel>
 8006938:	4603      	mov	r3, r0
 800693a:	b29b      	uxth	r3, r3
 800693c:	4423      	add	r3, r4
 800693e:	b29a      	uxth	r2, r3
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8006944:	e021      	b.n	800698a <I2C_ITSlaveCplt+0x12e>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8006946:	693b      	ldr	r3, [r7, #16]
 8006948:	0bdb      	lsrs	r3, r3, #15
 800694a:	f003 0301 	and.w	r3, r3, #1
 800694e:	2b00      	cmp	r3, #0
 8006950:	d01b      	beq.n	800698a <I2C_ITSlaveCplt+0x12e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	681a      	ldr	r2, [r3, #0]
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006960:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006966:	2b00      	cmp	r3, #0
 8006968:	d00f      	beq.n	800698a <I2C_ITSlaveCplt+0x12e>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006972:	b29c      	uxth	r4, r3
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006978:	4618      	mov	r0, r3
 800697a:	f7fe fe9a 	bl	80056b2 <HAL_DMAEx_GetFifoLevel>
 800697e:	4603      	mov	r3, r0
 8006980:	b29b      	uxth	r3, r3
 8006982:	4423      	add	r3, r4
 8006984:	b29a      	uxth	r2, r3
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	855a      	strh	r2, [r3, #42]	@ 0x2a
    /* Do nothing */
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 800698a:	697b      	ldr	r3, [r7, #20]
 800698c:	089b      	lsrs	r3, r3, #2
 800698e:	f003 0301 	and.w	r3, r3, #1
 8006992:	2b00      	cmp	r3, #0
 8006994:	d020      	beq.n	80069d8 <I2C_ITSlaveCplt+0x17c>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8006996:	697b      	ldr	r3, [r7, #20]
 8006998:	f023 0304 	bic.w	r3, r3, #4
 800699c:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069a8:	b2d2      	uxtb	r2, r2
 80069aa:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069b0:	1c5a      	adds	r2, r3, #1
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	625a      	str	r2, [r3, #36]	@ 0x24

    if (hi2c->XferSize > 0U)
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d00c      	beq.n	80069d8 <I2C_ITSlaveCplt+0x17c>
    {
      hi2c->XferSize--;
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80069c2:	3b01      	subs	r3, #1
 80069c4:	b29a      	uxth	r2, r3
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80069ce:	b29b      	uxth	r3, r3
 80069d0:	3b01      	subs	r3, #1
 80069d2:	b29a      	uxth	r2, r3
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80069dc:	b29b      	uxth	r3, r3
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d005      	beq.n	80069ee <I2C_ITSlaveCplt+0x192>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80069e6:	f043 0204 	orr.w	r2, r3, #4
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80069ee:	697b      	ldr	r3, [r7, #20]
 80069f0:	091b      	lsrs	r3, r3, #4
 80069f2:	f003 0301 	and.w	r3, r3, #1
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d04a      	beq.n	8006a90 <I2C_ITSlaveCplt+0x234>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 80069fa:	693b      	ldr	r3, [r7, #16]
 80069fc:	091b      	lsrs	r3, r3, #4
 80069fe:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d044      	beq.n	8006a90 <I2C_ITSlaveCplt+0x234>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006a0a:	b29b      	uxth	r3, r3
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d128      	bne.n	8006a62 <I2C_ITSlaveCplt+0x206>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006a16:	b2db      	uxtb	r3, r3
 8006a18:	2b28      	cmp	r3, #40	@ 0x28
 8006a1a:	d108      	bne.n	8006a2e <I2C_ITSlaveCplt+0x1d2>
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006a22:	d104      	bne.n	8006a2e <I2C_ITSlaveCplt+0x1d2>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8006a24:	6979      	ldr	r1, [r7, #20]
 8006a26:	6878      	ldr	r0, [r7, #4]
 8006a28:	f000 f894 	bl	8006b54 <I2C_ITListenCplt>
 8006a2c:	e030      	b.n	8006a90 <I2C_ITSlaveCplt+0x234>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006a34:	b2db      	uxtb	r3, r3
 8006a36:	2b29      	cmp	r3, #41	@ 0x29
 8006a38:	d10e      	bne.n	8006a58 <I2C_ITSlaveCplt+0x1fc>
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006a40:	d00a      	beq.n	8006a58 <I2C_ITSlaveCplt+0x1fc>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	2210      	movs	r2, #16
 8006a48:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8006a4a:	6878      	ldr	r0, [r7, #4]
 8006a4c:	f000 f9ef 	bl	8006e2e <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8006a50:	6878      	ldr	r0, [r7, #4]
 8006a52:	f7ff fea5 	bl	80067a0 <I2C_ITSlaveSeqCplt>
 8006a56:	e01b      	b.n	8006a90 <I2C_ITSlaveCplt+0x234>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	2210      	movs	r2, #16
 8006a5e:	61da      	str	r2, [r3, #28]
 8006a60:	e016      	b.n	8006a90 <I2C_ITSlaveCplt+0x234>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	2210      	movs	r2, #16
 8006a68:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006a6e:	f043 0204 	orr.w	r2, r3, #4
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d003      	beq.n	8006a84 <I2C_ITSlaveCplt+0x228>
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006a82:	d105      	bne.n	8006a90 <I2C_ITSlaveCplt+0x234>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006a88:	4619      	mov	r1, r3
 8006a8a:	6878      	ldr	r0, [r7, #4]
 8006a8c:	f000 f8b8 	bl	8006c00 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	2200      	movs	r2, #0
 8006a94:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	2200      	movs	r2, #0
 8006a9c:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d010      	beq.n	8006ac8 <I2C_ITSlaveCplt+0x26c>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006aaa:	4619      	mov	r1, r3
 8006aac:	6878      	ldr	r0, [r7, #4]
 8006aae:	f000 f8a7 	bl	8006c00 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006ab8:	b2db      	uxtb	r3, r3
 8006aba:	2b28      	cmp	r3, #40	@ 0x28
 8006abc:	d141      	bne.n	8006b42 <I2C_ITSlaveCplt+0x2e6>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8006abe:	6979      	ldr	r1, [r7, #20]
 8006ac0:	6878      	ldr	r0, [r7, #4]
 8006ac2:	f000 f847 	bl	8006b54 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006ac6:	e03c      	b.n	8006b42 <I2C_ITSlaveCplt+0x2e6>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006acc:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006ad0:	d014      	beq.n	8006afc <I2C_ITSlaveCplt+0x2a0>
    I2C_ITSlaveSeqCplt(hi2c);
 8006ad2:	6878      	ldr	r0, [r7, #4]
 8006ad4:	f7ff fe64 	bl	80067a0 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	4a1d      	ldr	r2, [pc, #116]	@ (8006b50 <I2C_ITSlaveCplt+0x2f4>)
 8006adc:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	2220      	movs	r2, #32
 8006ae2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	2200      	movs	r2, #0
 8006aea:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	2200      	movs	r2, #0
 8006af0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8006af4:	6878      	ldr	r0, [r7, #4]
 8006af6:	f7ff fc07 	bl	8006308 <HAL_I2C_ListenCpltCallback>
}
 8006afa:	e022      	b.n	8006b42 <I2C_ITSlaveCplt+0x2e6>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006b02:	b2db      	uxtb	r3, r3
 8006b04:	2b22      	cmp	r3, #34	@ 0x22
 8006b06:	d10e      	bne.n	8006b26 <I2C_ITSlaveCplt+0x2ca>
    hi2c->State = HAL_I2C_STATE_READY;
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	2220      	movs	r2, #32
 8006b0c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	2200      	movs	r2, #0
 8006b14:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	2200      	movs	r2, #0
 8006b1a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006b1e:	6878      	ldr	r0, [r7, #4]
 8006b20:	f7ff fbdc 	bl	80062dc <HAL_I2C_SlaveRxCpltCallback>
}
 8006b24:	e00d      	b.n	8006b42 <I2C_ITSlaveCplt+0x2e6>
    hi2c->State = HAL_I2C_STATE_READY;
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	2220      	movs	r2, #32
 8006b2a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	2200      	movs	r2, #0
 8006b32:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	2200      	movs	r2, #0
 8006b38:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8006b3c:	6878      	ldr	r0, [r7, #4]
 8006b3e:	f7ff fbc4 	bl	80062ca <HAL_I2C_SlaveTxCpltCallback>
}
 8006b42:	bf00      	nop
 8006b44:	371c      	adds	r7, #28
 8006b46:	46bd      	mov	sp, r7
 8006b48:	bd90      	pop	{r4, r7, pc}
 8006b4a:	bf00      	nop
 8006b4c:	fe00e800 	.word	0xfe00e800
 8006b50:	ffff0000 	.word	0xffff0000

08006b54 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8006b54:	b580      	push	{r7, lr}
 8006b56:	b082      	sub	sp, #8
 8006b58:	af00      	add	r7, sp, #0
 8006b5a:	6078      	str	r0, [r7, #4]
 8006b5c:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	4a26      	ldr	r2, [pc, #152]	@ (8006bfc <I2C_ITListenCplt+0xa8>)
 8006b62:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	2200      	movs	r2, #0
 8006b68:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	2220      	movs	r2, #32
 8006b6e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	2200      	movs	r2, #0
 8006b76:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	2200      	movs	r2, #0
 8006b7e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8006b80:	683b      	ldr	r3, [r7, #0]
 8006b82:	089b      	lsrs	r3, r3, #2
 8006b84:	f003 0301 	and.w	r3, r3, #1
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d022      	beq.n	8006bd2 <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b96:	b2d2      	uxtb	r2, r2
 8006b98:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b9e:	1c5a      	adds	r2, r3, #1
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	625a      	str	r2, [r3, #36]	@ 0x24

    if (hi2c->XferSize > 0U)
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d012      	beq.n	8006bd2 <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006bb0:	3b01      	subs	r3, #1
 8006bb2:	b29a      	uxth	r2, r3
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006bbc:	b29b      	uxth	r3, r3
 8006bbe:	3b01      	subs	r3, #1
 8006bc0:	b29a      	uxth	r2, r3
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006bca:	f043 0204 	orr.w	r2, r3, #4
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8006bd2:	f248 0103 	movw	r1, #32771	@ 0x8003
 8006bd6:	6878      	ldr	r0, [r7, #4]
 8006bd8:	f000 fb5e 	bl	8007298 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	2210      	movs	r2, #16
 8006be2:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	2200      	movs	r2, #0
 8006be8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8006bec:	6878      	ldr	r0, [r7, #4]
 8006bee:	f7ff fb8b 	bl	8006308 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8006bf2:	bf00      	nop
 8006bf4:	3708      	adds	r7, #8
 8006bf6:	46bd      	mov	sp, r7
 8006bf8:	bd80      	pop	{r7, pc}
 8006bfa:	bf00      	nop
 8006bfc:	ffff0000 	.word	0xffff0000

08006c00 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8006c00:	b580      	push	{r7, lr}
 8006c02:	b084      	sub	sp, #16
 8006c04:	af00      	add	r7, sp, #0
 8006c06:	6078      	str	r0, [r7, #4]
 8006c08:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006c10:	73fb      	strb	r3, [r7, #15]
#if defined(HAL_DMA_MODULE_ENABLED)
  uint32_t tmppreviousstate;
#endif /* HAL_DMA_MODULE_ENABLED */

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	2200      	movs	r2, #0
 8006c16:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	4a6d      	ldr	r2, [pc, #436]	@ (8006dd4 <I2C_ITError+0x1d4>)
 8006c1e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	2200      	movs	r2, #0
 8006c24:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006c2a:	683b      	ldr	r3, [r7, #0]
 8006c2c:	431a      	orrs	r2, r3
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8006c32:	7bfb      	ldrb	r3, [r7, #15]
 8006c34:	2b28      	cmp	r3, #40	@ 0x28
 8006c36:	d005      	beq.n	8006c44 <I2C_ITError+0x44>
 8006c38:	7bfb      	ldrb	r3, [r7, #15]
 8006c3a:	2b29      	cmp	r3, #41	@ 0x29
 8006c3c:	d002      	beq.n	8006c44 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8006c3e:	7bfb      	ldrb	r3, [r7, #15]
 8006c40:	2b2a      	cmp	r3, #42	@ 0x2a
 8006c42:	d10b      	bne.n	8006c5c <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8006c44:	2103      	movs	r1, #3
 8006c46:	6878      	ldr	r0, [r7, #4]
 8006c48:	f000 fb26 	bl	8007298 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	2228      	movs	r2, #40	@ 0x28
 8006c50:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	4a60      	ldr	r2, [pc, #384]	@ (8006dd8 <I2C_ITError+0x1d8>)
 8006c58:	635a      	str	r2, [r3, #52]	@ 0x34
 8006c5a:	e030      	b.n	8006cbe <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8006c5c:	f248 0103 	movw	r1, #32771	@ 0x8003
 8006c60:	6878      	ldr	r0, [r7, #4]
 8006c62:	f000 fb19 	bl	8007298 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8006c66:	6878      	ldr	r0, [r7, #4]
 8006c68:	f000 f8e1 	bl	8006e2e <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006c72:	b2db      	uxtb	r3, r3
 8006c74:	2b60      	cmp	r3, #96	@ 0x60
 8006c76:	d01f      	beq.n	8006cb8 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	2220      	movs	r2, #32
 8006c7c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	699b      	ldr	r3, [r3, #24]
 8006c86:	f003 0320 	and.w	r3, r3, #32
 8006c8a:	2b20      	cmp	r3, #32
 8006c8c:	d114      	bne.n	8006cb8 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	699b      	ldr	r3, [r3, #24]
 8006c94:	f003 0310 	and.w	r3, r3, #16
 8006c98:	2b10      	cmp	r3, #16
 8006c9a:	d109      	bne.n	8006cb0 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	2210      	movs	r2, #16
 8006ca2:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006ca8:	f043 0204 	orr.w	r2, r3, #4
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	2220      	movs	r2, #32
 8006cb6:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	2200      	movs	r2, #0
 8006cbc:	635a      	str	r2, [r3, #52]	@ 0x34
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006cc2:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d039      	beq.n	8006d40 <I2C_ITError+0x140>
 8006ccc:	68bb      	ldr	r3, [r7, #8]
 8006cce:	2b11      	cmp	r3, #17
 8006cd0:	d002      	beq.n	8006cd8 <I2C_ITError+0xd8>
 8006cd2:	68bb      	ldr	r3, [r7, #8]
 8006cd4:	2b21      	cmp	r3, #33	@ 0x21
 8006cd6:	d133      	bne.n	8006d40 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006ce2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006ce6:	d107      	bne.n	8006cf8 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	681a      	ldr	r2, [r3, #0]
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8006cf6:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006cfc:	4618      	mov	r0, r3
 8006cfe:	f7fe fccb 	bl	8005698 <HAL_DMA_GetState>
 8006d02:	4603      	mov	r3, r0
 8006d04:	2b01      	cmp	r3, #1
 8006d06:	d017      	beq.n	8006d38 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d0c:	4a33      	ldr	r2, [pc, #204]	@ (8006ddc <I2C_ITError+0x1dc>)
 8006d0e:	66da      	str	r2, [r3, #108]	@ 0x6c

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	2200      	movs	r2, #0
 8006d14:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d1c:	4618      	mov	r0, r3
 8006d1e:	f7fe fc93 	bl	8005648 <HAL_DMA_Abort_IT>
 8006d22:	4603      	mov	r3, r0
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d04d      	beq.n	8006dc4 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d2c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006d2e:	687a      	ldr	r2, [r7, #4]
 8006d30:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8006d32:	4610      	mov	r0, r2
 8006d34:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8006d36:	e045      	b.n	8006dc4 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8006d38:	6878      	ldr	r0, [r7, #4]
 8006d3a:	f000 f851 	bl	8006de0 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8006d3e:	e041      	b.n	8006dc4 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d039      	beq.n	8006dbc <I2C_ITError+0x1bc>
 8006d48:	68bb      	ldr	r3, [r7, #8]
 8006d4a:	2b12      	cmp	r3, #18
 8006d4c:	d002      	beq.n	8006d54 <I2C_ITError+0x154>
 8006d4e:	68bb      	ldr	r3, [r7, #8]
 8006d50:	2b22      	cmp	r3, #34	@ 0x22
 8006d52:	d133      	bne.n	8006dbc <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006d5e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006d62:	d107      	bne.n	8006d74 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	681a      	ldr	r2, [r3, #0]
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006d72:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006d78:	4618      	mov	r0, r3
 8006d7a:	f7fe fc8d 	bl	8005698 <HAL_DMA_GetState>
 8006d7e:	4603      	mov	r3, r0
 8006d80:	2b01      	cmp	r3, #1
 8006d82:	d017      	beq.n	8006db4 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006d88:	4a14      	ldr	r2, [pc, #80]	@ (8006ddc <I2C_ITError+0x1dc>)
 8006d8a:	66da      	str	r2, [r3, #108]	@ 0x6c

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	2200      	movs	r2, #0
 8006d90:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006d98:	4618      	mov	r0, r3
 8006d9a:	f7fe fc55 	bl	8005648 <HAL_DMA_Abort_IT>
 8006d9e:	4603      	mov	r3, r0
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d011      	beq.n	8006dc8 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006da8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006daa:	687a      	ldr	r2, [r7, #4]
 8006dac:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8006dae:	4610      	mov	r0, r2
 8006db0:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006db2:	e009      	b.n	8006dc8 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8006db4:	6878      	ldr	r0, [r7, #4]
 8006db6:	f000 f813 	bl	8006de0 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006dba:	e005      	b.n	8006dc8 <I2C_ITError+0x1c8>
    }
  }
  else
#endif /* HAL_DMA_MODULE_ENABLED */
  {
    I2C_TreatErrorCallback(hi2c);
 8006dbc:	6878      	ldr	r0, [r7, #4]
 8006dbe:	f000 f80f 	bl	8006de0 <I2C_TreatErrorCallback>
  }
}
 8006dc2:	e002      	b.n	8006dca <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8006dc4:	bf00      	nop
 8006dc6:	e000      	b.n	8006dca <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006dc8:	bf00      	nop
}
 8006dca:	bf00      	nop
 8006dcc:	3710      	adds	r7, #16
 8006dce:	46bd      	mov	sp, r7
 8006dd0:	bd80      	pop	{r7, pc}
 8006dd2:	bf00      	nop
 8006dd4:	ffff0000 	.word	0xffff0000
 8006dd8:	0800633f 	.word	0x0800633f
 8006ddc:	08006e75 	.word	0x08006e75

08006de0 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8006de0:	b580      	push	{r7, lr}
 8006de2:	b082      	sub	sp, #8
 8006de4:	af00      	add	r7, sp, #0
 8006de6:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006dee:	b2db      	uxtb	r3, r3
 8006df0:	2b60      	cmp	r3, #96	@ 0x60
 8006df2:	d10e      	bne.n	8006e12 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	2220      	movs	r2, #32
 8006df8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	2200      	movs	r2, #0
 8006e00:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	2200      	movs	r2, #0
 8006e06:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8006e0a:	6878      	ldr	r0, [r7, #4]
 8006e0c:	f7ff fa8e 	bl	800632c <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006e10:	e009      	b.n	8006e26 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	2200      	movs	r2, #0
 8006e16:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	2200      	movs	r2, #0
 8006e1c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8006e20:	6878      	ldr	r0, [r7, #4]
 8006e22:	f7ff fa7a 	bl	800631a <HAL_I2C_ErrorCallback>
}
 8006e26:	bf00      	nop
 8006e28:	3708      	adds	r7, #8
 8006e2a:	46bd      	mov	sp, r7
 8006e2c:	bd80      	pop	{r7, pc}

08006e2e <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8006e2e:	b480      	push	{r7}
 8006e30:	b083      	sub	sp, #12
 8006e32:	af00      	add	r7, sp, #0
 8006e34:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	699b      	ldr	r3, [r3, #24]
 8006e3c:	f003 0302 	and.w	r3, r3, #2
 8006e40:	2b02      	cmp	r3, #2
 8006e42:	d103      	bne.n	8006e4c <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	2200      	movs	r2, #0
 8006e4a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	699b      	ldr	r3, [r3, #24]
 8006e52:	f003 0301 	and.w	r3, r3, #1
 8006e56:	2b01      	cmp	r3, #1
 8006e58:	d007      	beq.n	8006e6a <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	699a      	ldr	r2, [r3, #24]
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	f042 0201 	orr.w	r2, r2, #1
 8006e68:	619a      	str	r2, [r3, #24]
  }
}
 8006e6a:	bf00      	nop
 8006e6c:	370c      	adds	r7, #12
 8006e6e:	46bd      	mov	sp, r7
 8006e70:	bc80      	pop	{r7}
 8006e72:	4770      	bx	lr

08006e74 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8006e74:	b580      	push	{r7, lr}
 8006e76:	b084      	sub	sp, #16
 8006e78:	af00      	add	r7, sp, #0
 8006e7a:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006e80:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d003      	beq.n	8006e92 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e8e:	2200      	movs	r2, #0
 8006e90:	66da      	str	r2, [r3, #108]	@ 0x6c
  }
  if (hi2c->hdmarx != NULL)
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d003      	beq.n	8006ea2 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006e9e:	2200      	movs	r2, #0
 8006ea0:	66da      	str	r2, [r3, #108]	@ 0x6c
  }

  I2C_TreatErrorCallback(hi2c);
 8006ea2:	68f8      	ldr	r0, [r7, #12]
 8006ea4:	f7ff ff9c 	bl	8006de0 <I2C_TreatErrorCallback>
}
 8006ea8:	bf00      	nop
 8006eaa:	3710      	adds	r7, #16
 8006eac:	46bd      	mov	sp, r7
 8006eae:	bd80      	pop	{r7, pc}

08006eb0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8006eb0:	b580      	push	{r7, lr}
 8006eb2:	b084      	sub	sp, #16
 8006eb4:	af00      	add	r7, sp, #0
 8006eb6:	60f8      	str	r0, [r7, #12]
 8006eb8:	60b9      	str	r1, [r7, #8]
 8006eba:	603b      	str	r3, [r7, #0]
 8006ebc:	4613      	mov	r3, r2
 8006ebe:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006ec0:	e03b      	b.n	8006f3a <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006ec2:	69ba      	ldr	r2, [r7, #24]
 8006ec4:	6839      	ldr	r1, [r7, #0]
 8006ec6:	68f8      	ldr	r0, [r7, #12]
 8006ec8:	f000 f8d6 	bl	8007078 <I2C_IsErrorOccurred>
 8006ecc:	4603      	mov	r3, r0
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d001      	beq.n	8006ed6 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8006ed2:	2301      	movs	r3, #1
 8006ed4:	e041      	b.n	8006f5a <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006ed6:	683b      	ldr	r3, [r7, #0]
 8006ed8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006edc:	d02d      	beq.n	8006f3a <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006ede:	f7fe fa51 	bl	8005384 <HAL_GetTick>
 8006ee2:	4602      	mov	r2, r0
 8006ee4:	69bb      	ldr	r3, [r7, #24]
 8006ee6:	1ad3      	subs	r3, r2, r3
 8006ee8:	683a      	ldr	r2, [r7, #0]
 8006eea:	429a      	cmp	r2, r3
 8006eec:	d302      	bcc.n	8006ef4 <I2C_WaitOnFlagUntilTimeout+0x44>
 8006eee:	683b      	ldr	r3, [r7, #0]
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d122      	bne.n	8006f3a <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	699a      	ldr	r2, [r3, #24]
 8006efa:	68bb      	ldr	r3, [r7, #8]
 8006efc:	4013      	ands	r3, r2
 8006efe:	68ba      	ldr	r2, [r7, #8]
 8006f00:	429a      	cmp	r2, r3
 8006f02:	bf0c      	ite	eq
 8006f04:	2301      	moveq	r3, #1
 8006f06:	2300      	movne	r3, #0
 8006f08:	b2db      	uxtb	r3, r3
 8006f0a:	461a      	mov	r2, r3
 8006f0c:	79fb      	ldrb	r3, [r7, #7]
 8006f0e:	429a      	cmp	r2, r3
 8006f10:	d113      	bne.n	8006f3a <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006f16:	f043 0220 	orr.w	r2, r3, #32
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	2220      	movs	r2, #32
 8006f22:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	2200      	movs	r2, #0
 8006f2a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	2200      	movs	r2, #0
 8006f32:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8006f36:	2301      	movs	r3, #1
 8006f38:	e00f      	b.n	8006f5a <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	699a      	ldr	r2, [r3, #24]
 8006f40:	68bb      	ldr	r3, [r7, #8]
 8006f42:	4013      	ands	r3, r2
 8006f44:	68ba      	ldr	r2, [r7, #8]
 8006f46:	429a      	cmp	r2, r3
 8006f48:	bf0c      	ite	eq
 8006f4a:	2301      	moveq	r3, #1
 8006f4c:	2300      	movne	r3, #0
 8006f4e:	b2db      	uxtb	r3, r3
 8006f50:	461a      	mov	r2, r3
 8006f52:	79fb      	ldrb	r3, [r7, #7]
 8006f54:	429a      	cmp	r2, r3
 8006f56:	d0b4      	beq.n	8006ec2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006f58:	2300      	movs	r3, #0
}
 8006f5a:	4618      	mov	r0, r3
 8006f5c:	3710      	adds	r7, #16
 8006f5e:	46bd      	mov	sp, r7
 8006f60:	bd80      	pop	{r7, pc}

08006f62 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006f62:	b580      	push	{r7, lr}
 8006f64:	b084      	sub	sp, #16
 8006f66:	af00      	add	r7, sp, #0
 8006f68:	60f8      	str	r0, [r7, #12]
 8006f6a:	60b9      	str	r1, [r7, #8]
 8006f6c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006f6e:	e033      	b.n	8006fd8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006f70:	687a      	ldr	r2, [r7, #4]
 8006f72:	68b9      	ldr	r1, [r7, #8]
 8006f74:	68f8      	ldr	r0, [r7, #12]
 8006f76:	f000 f87f 	bl	8007078 <I2C_IsErrorOccurred>
 8006f7a:	4603      	mov	r3, r0
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d001      	beq.n	8006f84 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006f80:	2301      	movs	r3, #1
 8006f82:	e031      	b.n	8006fe8 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006f84:	68bb      	ldr	r3, [r7, #8]
 8006f86:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006f8a:	d025      	beq.n	8006fd8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006f8c:	f7fe f9fa 	bl	8005384 <HAL_GetTick>
 8006f90:	4602      	mov	r2, r0
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	1ad3      	subs	r3, r2, r3
 8006f96:	68ba      	ldr	r2, [r7, #8]
 8006f98:	429a      	cmp	r2, r3
 8006f9a:	d302      	bcc.n	8006fa2 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8006f9c:	68bb      	ldr	r3, [r7, #8]
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d11a      	bne.n	8006fd8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	699b      	ldr	r3, [r3, #24]
 8006fa8:	f003 0302 	and.w	r3, r3, #2
 8006fac:	2b02      	cmp	r3, #2
 8006fae:	d013      	beq.n	8006fd8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006fb4:	f043 0220 	orr.w	r2, r3, #32
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	2220      	movs	r2, #32
 8006fc0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	2200      	movs	r2, #0
 8006fc8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	2200      	movs	r2, #0
 8006fd0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8006fd4:	2301      	movs	r3, #1
 8006fd6:	e007      	b.n	8006fe8 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	699b      	ldr	r3, [r3, #24]
 8006fde:	f003 0302 	and.w	r3, r3, #2
 8006fe2:	2b02      	cmp	r3, #2
 8006fe4:	d1c4      	bne.n	8006f70 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8006fe6:	2300      	movs	r3, #0
}
 8006fe8:	4618      	mov	r0, r3
 8006fea:	3710      	adds	r7, #16
 8006fec:	46bd      	mov	sp, r7
 8006fee:	bd80      	pop	{r7, pc}

08006ff0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006ff0:	b580      	push	{r7, lr}
 8006ff2:	b084      	sub	sp, #16
 8006ff4:	af00      	add	r7, sp, #0
 8006ff6:	60f8      	str	r0, [r7, #12]
 8006ff8:	60b9      	str	r1, [r7, #8]
 8006ffa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006ffc:	e02f      	b.n	800705e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006ffe:	687a      	ldr	r2, [r7, #4]
 8007000:	68b9      	ldr	r1, [r7, #8]
 8007002:	68f8      	ldr	r0, [r7, #12]
 8007004:	f000 f838 	bl	8007078 <I2C_IsErrorOccurred>
 8007008:	4603      	mov	r3, r0
 800700a:	2b00      	cmp	r3, #0
 800700c:	d001      	beq.n	8007012 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800700e:	2301      	movs	r3, #1
 8007010:	e02d      	b.n	800706e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007012:	f7fe f9b7 	bl	8005384 <HAL_GetTick>
 8007016:	4602      	mov	r2, r0
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	1ad3      	subs	r3, r2, r3
 800701c:	68ba      	ldr	r2, [r7, #8]
 800701e:	429a      	cmp	r2, r3
 8007020:	d302      	bcc.n	8007028 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8007022:	68bb      	ldr	r3, [r7, #8]
 8007024:	2b00      	cmp	r3, #0
 8007026:	d11a      	bne.n	800705e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	699b      	ldr	r3, [r3, #24]
 800702e:	f003 0320 	and.w	r3, r3, #32
 8007032:	2b20      	cmp	r3, #32
 8007034:	d013      	beq.n	800705e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800703a:	f043 0220 	orr.w	r2, r3, #32
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	2220      	movs	r2, #32
 8007046:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	2200      	movs	r2, #0
 800704e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	2200      	movs	r2, #0
 8007056:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 800705a:	2301      	movs	r3, #1
 800705c:	e007      	b.n	800706e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	699b      	ldr	r3, [r3, #24]
 8007064:	f003 0320 	and.w	r3, r3, #32
 8007068:	2b20      	cmp	r3, #32
 800706a:	d1c8      	bne.n	8006ffe <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800706c:	2300      	movs	r3, #0
}
 800706e:	4618      	mov	r0, r3
 8007070:	3710      	adds	r7, #16
 8007072:	46bd      	mov	sp, r7
 8007074:	bd80      	pop	{r7, pc}
	...

08007078 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007078:	b580      	push	{r7, lr}
 800707a:	b08a      	sub	sp, #40	@ 0x28
 800707c:	af00      	add	r7, sp, #0
 800707e:	60f8      	str	r0, [r7, #12]
 8007080:	60b9      	str	r1, [r7, #8]
 8007082:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007084:	2300      	movs	r3, #0
 8007086:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	699b      	ldr	r3, [r3, #24]
 8007090:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8007092:	2300      	movs	r3, #0
 8007094:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800709a:	69bb      	ldr	r3, [r7, #24]
 800709c:	f003 0310 	and.w	r3, r3, #16
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d068      	beq.n	8007176 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	2210      	movs	r2, #16
 80070aa:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80070ac:	e049      	b.n	8007142 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80070ae:	68bb      	ldr	r3, [r7, #8]
 80070b0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80070b4:	d045      	beq.n	8007142 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80070b6:	f7fe f965 	bl	8005384 <HAL_GetTick>
 80070ba:	4602      	mov	r2, r0
 80070bc:	69fb      	ldr	r3, [r7, #28]
 80070be:	1ad3      	subs	r3, r2, r3
 80070c0:	68ba      	ldr	r2, [r7, #8]
 80070c2:	429a      	cmp	r2, r3
 80070c4:	d302      	bcc.n	80070cc <I2C_IsErrorOccurred+0x54>
 80070c6:	68bb      	ldr	r3, [r7, #8]
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d13a      	bne.n	8007142 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	685b      	ldr	r3, [r3, #4]
 80070d2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80070d6:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80070de:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	699b      	ldr	r3, [r3, #24]
 80070e6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80070ea:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80070ee:	d121      	bne.n	8007134 <I2C_IsErrorOccurred+0xbc>
 80070f0:	697b      	ldr	r3, [r7, #20]
 80070f2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80070f6:	d01d      	beq.n	8007134 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80070f8:	7cfb      	ldrb	r3, [r7, #19]
 80070fa:	2b20      	cmp	r3, #32
 80070fc:	d01a      	beq.n	8007134 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	685a      	ldr	r2, [r3, #4]
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800710c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800710e:	f7fe f939 	bl	8005384 <HAL_GetTick>
 8007112:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007114:	e00e      	b.n	8007134 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8007116:	f7fe f935 	bl	8005384 <HAL_GetTick>
 800711a:	4602      	mov	r2, r0
 800711c:	69fb      	ldr	r3, [r7, #28]
 800711e:	1ad3      	subs	r3, r2, r3
 8007120:	2b19      	cmp	r3, #25
 8007122:	d907      	bls.n	8007134 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8007124:	6a3b      	ldr	r3, [r7, #32]
 8007126:	f043 0320 	orr.w	r3, r3, #32
 800712a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800712c:	2301      	movs	r3, #1
 800712e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8007132:	e006      	b.n	8007142 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	699b      	ldr	r3, [r3, #24]
 800713a:	f003 0320 	and.w	r3, r3, #32
 800713e:	2b20      	cmp	r3, #32
 8007140:	d1e9      	bne.n	8007116 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	699b      	ldr	r3, [r3, #24]
 8007148:	f003 0320 	and.w	r3, r3, #32
 800714c:	2b20      	cmp	r3, #32
 800714e:	d003      	beq.n	8007158 <I2C_IsErrorOccurred+0xe0>
 8007150:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007154:	2b00      	cmp	r3, #0
 8007156:	d0aa      	beq.n	80070ae <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8007158:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800715c:	2b00      	cmp	r3, #0
 800715e:	d103      	bne.n	8007168 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	2220      	movs	r2, #32
 8007166:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8007168:	6a3b      	ldr	r3, [r7, #32]
 800716a:	f043 0304 	orr.w	r3, r3, #4
 800716e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8007170:	2301      	movs	r3, #1
 8007172:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	699b      	ldr	r3, [r3, #24]
 800717c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800717e:	69bb      	ldr	r3, [r7, #24]
 8007180:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007184:	2b00      	cmp	r3, #0
 8007186:	d00b      	beq.n	80071a0 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8007188:	6a3b      	ldr	r3, [r7, #32]
 800718a:	f043 0301 	orr.w	r3, r3, #1
 800718e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007198:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800719a:	2301      	movs	r3, #1
 800719c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80071a0:	69bb      	ldr	r3, [r7, #24]
 80071a2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d00b      	beq.n	80071c2 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80071aa:	6a3b      	ldr	r3, [r7, #32]
 80071ac:	f043 0308 	orr.w	r3, r3, #8
 80071b0:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80071ba:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80071bc:	2301      	movs	r3, #1
 80071be:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80071c2:	69bb      	ldr	r3, [r7, #24]
 80071c4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d00b      	beq.n	80071e4 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80071cc:	6a3b      	ldr	r3, [r7, #32]
 80071ce:	f043 0302 	orr.w	r3, r3, #2
 80071d2:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80071dc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80071de:	2301      	movs	r3, #1
 80071e0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 80071e4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d01c      	beq.n	8007226 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80071ec:	68f8      	ldr	r0, [r7, #12]
 80071ee:	f7ff fe1e 	bl	8006e2e <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	6859      	ldr	r1, [r3, #4]
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	681a      	ldr	r2, [r3, #0]
 80071fc:	4b0d      	ldr	r3, [pc, #52]	@ (8007234 <I2C_IsErrorOccurred+0x1bc>)
 80071fe:	400b      	ands	r3, r1
 8007200:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007206:	6a3b      	ldr	r3, [r7, #32]
 8007208:	431a      	orrs	r2, r3
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	2220      	movs	r2, #32
 8007212:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	2200      	movs	r2, #0
 800721a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	2200      	movs	r2, #0
 8007222:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8007226:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800722a:	4618      	mov	r0, r3
 800722c:	3728      	adds	r7, #40	@ 0x28
 800722e:	46bd      	mov	sp, r7
 8007230:	bd80      	pop	{r7, pc}
 8007232:	bf00      	nop
 8007234:	fe00e800 	.word	0xfe00e800

08007238 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8007238:	b480      	push	{r7}
 800723a:	b087      	sub	sp, #28
 800723c:	af00      	add	r7, sp, #0
 800723e:	60f8      	str	r0, [r7, #12]
 8007240:	607b      	str	r3, [r7, #4]
 8007242:	460b      	mov	r3, r1
 8007244:	817b      	strh	r3, [r7, #10]
 8007246:	4613      	mov	r3, r2
 8007248:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800724a:	897b      	ldrh	r3, [r7, #10]
 800724c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8007250:	7a7b      	ldrb	r3, [r7, #9]
 8007252:	041b      	lsls	r3, r3, #16
 8007254:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007258:	431a      	orrs	r2, r3
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	431a      	orrs	r2, r3
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800725e:	6a3b      	ldr	r3, [r7, #32]
 8007260:	4313      	orrs	r3, r2
 8007262:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007266:	617b      	str	r3, [r7, #20]
                    (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	685a      	ldr	r2, [r3, #4]
 800726e:	6a3b      	ldr	r3, [r7, #32]
 8007270:	0d5b      	lsrs	r3, r3, #21
 8007272:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8007276:	4b07      	ldr	r3, [pc, #28]	@ (8007294 <I2C_TransferConfig+0x5c>)
 8007278:	430b      	orrs	r3, r1
 800727a:	43db      	mvns	r3, r3
 800727c:	ea02 0103 	and.w	r1, r2, r3
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	697a      	ldr	r2, [r7, #20]
 8007286:	430a      	orrs	r2, r1
 8007288:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800728a:	bf00      	nop
 800728c:	371c      	adds	r7, #28
 800728e:	46bd      	mov	sp, r7
 8007290:	bc80      	pop	{r7}
 8007292:	4770      	bx	lr
 8007294:	03ff63ff 	.word	0x03ff63ff

08007298 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8007298:	b480      	push	{r7}
 800729a:	b085      	sub	sp, #20
 800729c:	af00      	add	r7, sp, #0
 800729e:	6078      	str	r0, [r7, #4]
 80072a0:	460b      	mov	r3, r1
 80072a2:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 80072a4:	2300      	movs	r3, #0
 80072a6:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80072a8:	887b      	ldrh	r3, [r7, #2]
 80072aa:	f003 0301 	and.w	r3, r3, #1
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d00f      	beq.n	80072d2 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 80072b8:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80072c0:	b2db      	uxtb	r3, r3
 80072c2:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80072c6:	2b28      	cmp	r3, #40	@ 0x28
 80072c8:	d003      	beq.n	80072d2 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 80072d0:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80072d2:	887b      	ldrh	r3, [r7, #2]
 80072d4:	f003 0302 	and.w	r3, r3, #2
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d00f      	beq.n	80072fc <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 80072e2:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80072ea:	b2db      	uxtb	r3, r3
 80072ec:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80072f0:	2b28      	cmp	r3, #40	@ 0x28
 80072f2:	d003      	beq.n	80072fc <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 80072fa:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80072fc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8007300:	2b00      	cmp	r3, #0
 8007302:	da03      	bge.n	800730c <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 800730a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 800730c:	887b      	ldrh	r3, [r7, #2]
 800730e:	2b10      	cmp	r3, #16
 8007310:	d103      	bne.n	800731a <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8007318:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 800731a:	887b      	ldrh	r3, [r7, #2]
 800731c:	2b20      	cmp	r3, #32
 800731e:	d103      	bne.n	8007328 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	f043 0320 	orr.w	r3, r3, #32
 8007326:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8007328:	887b      	ldrh	r3, [r7, #2]
 800732a:	2b40      	cmp	r3, #64	@ 0x40
 800732c:	d103      	bne.n	8007336 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007334:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	6819      	ldr	r1, [r3, #0]
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	43da      	mvns	r2, r3
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	400a      	ands	r2, r1
 8007346:	601a      	str	r2, [r3, #0]
}
 8007348:	bf00      	nop
 800734a:	3714      	adds	r7, #20
 800734c:	46bd      	mov	sp, r7
 800734e:	bc80      	pop	{r7}
 8007350:	4770      	bx	lr

08007352 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8007352:	b480      	push	{r7}
 8007354:	b083      	sub	sp, #12
 8007356:	af00      	add	r7, sp, #0
 8007358:	6078      	str	r0, [r7, #4]
 800735a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007362:	b2db      	uxtb	r3, r3
 8007364:	2b20      	cmp	r3, #32
 8007366:	d138      	bne.n	80073da <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800736e:	2b01      	cmp	r3, #1
 8007370:	d101      	bne.n	8007376 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8007372:	2302      	movs	r3, #2
 8007374:	e032      	b.n	80073dc <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	2201      	movs	r2, #1
 800737a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	2224      	movs	r2, #36	@ 0x24
 8007382:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	681a      	ldr	r2, [r3, #0]
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	f022 0201 	bic.w	r2, r2, #1
 8007394:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	681a      	ldr	r2, [r3, #0]
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80073a4:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	6819      	ldr	r1, [r3, #0]
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	683a      	ldr	r2, [r7, #0]
 80073b2:	430a      	orrs	r2, r1
 80073b4:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	681a      	ldr	r2, [r3, #0]
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	f042 0201 	orr.w	r2, r2, #1
 80073c4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	2220      	movs	r2, #32
 80073ca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	2200      	movs	r2, #0
 80073d2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80073d6:	2300      	movs	r3, #0
 80073d8:	e000      	b.n	80073dc <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80073da:	2302      	movs	r3, #2
  }
}
 80073dc:	4618      	mov	r0, r3
 80073de:	370c      	adds	r7, #12
 80073e0:	46bd      	mov	sp, r7
 80073e2:	bc80      	pop	{r7}
 80073e4:	4770      	bx	lr

080073e6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80073e6:	b480      	push	{r7}
 80073e8:	b085      	sub	sp, #20
 80073ea:	af00      	add	r7, sp, #0
 80073ec:	6078      	str	r0, [r7, #4]
 80073ee:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80073f6:	b2db      	uxtb	r3, r3
 80073f8:	2b20      	cmp	r3, #32
 80073fa:	d139      	bne.n	8007470 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007402:	2b01      	cmp	r3, #1
 8007404:	d101      	bne.n	800740a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8007406:	2302      	movs	r3, #2
 8007408:	e033      	b.n	8007472 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	2201      	movs	r2, #1
 800740e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	2224      	movs	r2, #36	@ 0x24
 8007416:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	681a      	ldr	r2, [r3, #0]
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	f022 0201 	bic.w	r2, r2, #1
 8007428:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8007438:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800743a:	683b      	ldr	r3, [r7, #0]
 800743c:	021b      	lsls	r3, r3, #8
 800743e:	68fa      	ldr	r2, [r7, #12]
 8007440:	4313      	orrs	r3, r2
 8007442:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	68fa      	ldr	r2, [r7, #12]
 800744a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	681a      	ldr	r2, [r3, #0]
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	f042 0201 	orr.w	r2, r2, #1
 800745a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	2220      	movs	r2, #32
 8007460:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	2200      	movs	r2, #0
 8007468:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800746c:	2300      	movs	r3, #0
 800746e:	e000      	b.n	8007472 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8007470:	2302      	movs	r3, #2
  }
}
 8007472:	4618      	mov	r0, r3
 8007474:	3714      	adds	r7, #20
 8007476:	46bd      	mov	sp, r7
 8007478:	bc80      	pop	{r7}
 800747a:	4770      	bx	lr

0800747c <HAL_ICACHE_ConfigAssociativityMode>:
  *            @arg ICACHE_1WAY   1-way cache (direct mapped cache)
  *            @arg ICACHE_2WAYS  2-ways set associative cache (default)
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef HAL_ICACHE_ConfigAssociativityMode(uint32_t AssociativityMode)
{
 800747c:	b480      	push	{r7}
 800747e:	b085      	sub	sp, #20
 8007480:	af00      	add	r7, sp, #0
 8007482:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007484:	2300      	movs	r3, #0
 8007486:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 8007488:	4b0b      	ldr	r3, [pc, #44]	@ (80074b8 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	f003 0301 	and.w	r3, r3, #1
 8007490:	2b00      	cmp	r3, #0
 8007492:	d002      	beq.n	800749a <HAL_ICACHE_ConfigAssociativityMode+0x1e>
  {
    status = HAL_ERROR;
 8007494:	2301      	movs	r3, #1
 8007496:	73fb      	strb	r3, [r7, #15]
 8007498:	e007      	b.n	80074aa <HAL_ICACHE_ConfigAssociativityMode+0x2e>
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 800749a:	4b07      	ldr	r3, [pc, #28]	@ (80074b8 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	f023 0204 	bic.w	r2, r3, #4
 80074a2:	4905      	ldr	r1, [pc, #20]	@ (80074b8 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	4313      	orrs	r3, r2
 80074a8:	600b      	str	r3, [r1, #0]
  }

  return status;
 80074aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80074ac:	4618      	mov	r0, r3
 80074ae:	3714      	adds	r7, #20
 80074b0:	46bd      	mov	sp, r7
 80074b2:	bc80      	pop	{r7}
 80074b4:	4770      	bx	lr
 80074b6:	bf00      	nop
 80074b8:	40030400 	.word	0x40030400

080074bc <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 80074bc:	b480      	push	{r7}
 80074be:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 80074c0:	4b05      	ldr	r3, [pc, #20]	@ (80074d8 <HAL_ICACHE_Enable+0x1c>)
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	4a04      	ldr	r2, [pc, #16]	@ (80074d8 <HAL_ICACHE_Enable+0x1c>)
 80074c6:	f043 0301 	orr.w	r3, r3, #1
 80074ca:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 80074cc:	2300      	movs	r3, #0
}
 80074ce:	4618      	mov	r0, r3
 80074d0:	46bd      	mov	sp, r7
 80074d2:	bc80      	pop	{r7}
 80074d4:	4770      	bx	lr
 80074d6:	bf00      	nop
 80074d8:	40030400 	.word	0x40030400

080074dc <HAL_PWREx_ControlVoltageScaling>:
  * @note  Before moving to voltage scaling 4, it is mandatory to ensure that
  *        the system frequency is below 24 MHz.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80074dc:	b480      	push	{r7}
 80074de:	b085      	sub	sp, #20
 80074e0:	af00      	add	r7, sp, #0
 80074e2:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Get the current voltage scale applied */
  vos_old = READ_BIT(PWR->SVMSR, PWR_SVMSR_ACTVOS);
 80074e4:	4b38      	ldr	r3, [pc, #224]	@ (80075c8 <HAL_PWREx_ControlVoltageScaling+0xec>)
 80074e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80074e8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80074ec:	60bb      	str	r3, [r7, #8]

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 80074ee:	68ba      	ldr	r2, [r7, #8]
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	429a      	cmp	r2, r3
 80074f4:	d10b      	bne.n	800750e <HAL_PWREx_ControlVoltageScaling+0x32>
  {
    /* Enable USB BOOST after wake up from Stop mode */
    if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80074fc:	d905      	bls.n	800750a <HAL_PWREx_ControlVoltageScaling+0x2e>
    {
      /* Enable USB BOOST */
      SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 80074fe:	4b32      	ldr	r3, [pc, #200]	@ (80075c8 <HAL_PWREx_ControlVoltageScaling+0xec>)
 8007500:	68db      	ldr	r3, [r3, #12]
 8007502:	4a31      	ldr	r2, [pc, #196]	@ (80075c8 <HAL_PWREx_ControlVoltageScaling+0xec>)
 8007504:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007508:	60d3      	str	r3, [r2, #12]
    }

    return HAL_OK;
 800750a:	2300      	movs	r3, #0
 800750c:	e057      	b.n	80075be <HAL_PWREx_ControlVoltageScaling+0xe2>
  /* Check voltage scaling level */
  /*
   *  The Embedded power distribution (EPOD) must be enabled before switching to
   *  voltage scale 1 / 2 from voltage scale lower.
   */
  if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007514:	d90a      	bls.n	800752c <HAL_PWREx_ControlVoltageScaling+0x50>
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), (VoltageScaling | PWR_VOSR_BOOSTEN));
 8007516:	4b2c      	ldr	r3, [pc, #176]	@ (80075c8 <HAL_PWREx_ControlVoltageScaling+0xec>)
 8007518:	68db      	ldr	r3, [r3, #12]
 800751a:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	4313      	orrs	r3, r2
 8007522:	4a29      	ldr	r2, [pc, #164]	@ (80075c8 <HAL_PWREx_ControlVoltageScaling+0xec>)
 8007524:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007528:	60d3      	str	r3, [r2, #12]
 800752a:	e007      	b.n	800753c <HAL_PWREx_ControlVoltageScaling+0x60>
  }
  else
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), VoltageScaling);
 800752c:	4b26      	ldr	r3, [pc, #152]	@ (80075c8 <HAL_PWREx_ControlVoltageScaling+0xec>)
 800752e:	68db      	ldr	r3, [r3, #12]
 8007530:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 8007534:	4924      	ldr	r1, [pc, #144]	@ (80075c8 <HAL_PWREx_ControlVoltageScaling+0xec>)
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	4313      	orrs	r3, r2
 800753a:	60cb      	str	r3, [r1, #12]
  }

  /* Wait until VOSRDY is raised */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 800753c:	4b23      	ldr	r3, [pc, #140]	@ (80075cc <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	4a23      	ldr	r2, [pc, #140]	@ (80075d0 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 8007542:	fba2 2303 	umull	r2, r3, r2, r3
 8007546:	099b      	lsrs	r3, r3, #6
 8007548:	2232      	movs	r2, #50	@ 0x32
 800754a:	fb02 f303 	mul.w	r3, r2, r3
 800754e:	4a20      	ldr	r2, [pc, #128]	@ (80075d0 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 8007550:	fba2 2303 	umull	r2, r3, r2, r3
 8007554:	099b      	lsrs	r3, r3, #6
 8007556:	3301      	adds	r3, #1
 8007558:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 800755a:	e002      	b.n	8007562 <HAL_PWREx_ControlVoltageScaling+0x86>
  {
    timeout--;
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	3b01      	subs	r3, #1
 8007560:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8007562:	4b19      	ldr	r3, [pc, #100]	@ (80075c8 <HAL_PWREx_ControlVoltageScaling+0xec>)
 8007564:	68db      	ldr	r3, [r3, #12]
 8007566:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800756a:	2b00      	cmp	r3, #0
 800756c:	d102      	bne.n	8007574 <HAL_PWREx_ControlVoltageScaling+0x98>
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	2b00      	cmp	r3, #0
 8007572:	d1f3      	bne.n	800755c <HAL_PWREx_ControlVoltageScaling+0x80>
  }

  /* Check time out */
  if (timeout != 0U)
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	2b00      	cmp	r3, #0
 8007578:	d01b      	beq.n	80075b2 <HAL_PWREx_ControlVoltageScaling+0xd6>
  {
    /* Wait until ACTVOSRDY is raised */
    timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 800757a:	4b14      	ldr	r3, [pc, #80]	@ (80075cc <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	4a14      	ldr	r2, [pc, #80]	@ (80075d0 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 8007580:	fba2 2303 	umull	r2, r3, r2, r3
 8007584:	099b      	lsrs	r3, r3, #6
 8007586:	2232      	movs	r2, #50	@ 0x32
 8007588:	fb02 f303 	mul.w	r3, r2, r3
 800758c:	4a10      	ldr	r2, [pc, #64]	@ (80075d0 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 800758e:	fba2 2303 	umull	r2, r3, r2, r3
 8007592:	099b      	lsrs	r3, r3, #6
 8007594:	3301      	adds	r3, #1
 8007596:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8007598:	e002      	b.n	80075a0 <HAL_PWREx_ControlVoltageScaling+0xc4>
    {
      timeout--;
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	3b01      	subs	r3, #1
 800759e:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 80075a0:	4b09      	ldr	r3, [pc, #36]	@ (80075c8 <HAL_PWREx_ControlVoltageScaling+0xec>)
 80075a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80075a4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d102      	bne.n	80075b2 <HAL_PWREx_ControlVoltageScaling+0xd6>
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d1f3      	bne.n	800759a <HAL_PWREx_ControlVoltageScaling+0xbe>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d101      	bne.n	80075bc <HAL_PWREx_ControlVoltageScaling+0xe0>
  {
    return HAL_TIMEOUT;
 80075b8:	2303      	movs	r3, #3
 80075ba:	e000      	b.n	80075be <HAL_PWREx_ControlVoltageScaling+0xe2>
  }

  return HAL_OK;
 80075bc:	2300      	movs	r3, #0
}
 80075be:	4618      	mov	r0, r3
 80075c0:	3714      	adds	r7, #20
 80075c2:	46bd      	mov	sp, r7
 80075c4:	bc80      	pop	{r7}
 80075c6:	4770      	bx	lr
 80075c8:	46020800 	.word	0x46020800
 80075cc:	2000000c 	.word	0x2000000c
 80075d0:	10624dd3 	.word	0x10624dd3

080075d4 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief  Return Voltage Scaling Range.
  * @retval Applied voltage scaling value.
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80075d4:	b480      	push	{r7}
 80075d6:	af00      	add	r7, sp, #0
  return (PWR->SVMSR & PWR_SVMSR_ACTVOS);
 80075d8:	4b03      	ldr	r3, [pc, #12]	@ (80075e8 <HAL_PWREx_GetVoltageRange+0x14>)
 80075da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80075dc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
}
 80075e0:	4618      	mov	r0, r3
 80075e2:	46bd      	mov	sp, r7
 80075e4:	bc80      	pop	{r7}
 80075e6:	4770      	bx	lr
 80075e8:	46020800 	.word	0x46020800

080075ec <HAL_PWREx_ConfigSupply>:
  *                        @arg PWR_LDO_SUPPLY  : The LDO regulator supplies the Vcore Power Domains.
  *                        @arg PWR_SMPS_SUPPLY : The SMPS regulator supplies the Vcore Power Domains.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply(uint32_t SupplySource)
{
 80075ec:	b480      	push	{r7}
 80075ee:	b085      	sub	sp, #20
 80075f0:	af00      	add	r7, sp, #0
 80075f2:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_SUPPLY(SupplySource));

  /* Set maximum time out */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 80075f4:	4b21      	ldr	r3, [pc, #132]	@ (800767c <HAL_PWREx_ConfigSupply+0x90>)
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	4a21      	ldr	r2, [pc, #132]	@ (8007680 <HAL_PWREx_ConfigSupply+0x94>)
 80075fa:	fba2 2303 	umull	r2, r3, r2, r3
 80075fe:	099b      	lsrs	r3, r3, #6
 8007600:	2232      	movs	r2, #50	@ 0x32
 8007602:	fb02 f303 	mul.w	r3, r2, r3
 8007606:	4a1e      	ldr	r2, [pc, #120]	@ (8007680 <HAL_PWREx_ConfigSupply+0x94>)
 8007608:	fba2 2303 	umull	r2, r3, r2, r3
 800760c:	099b      	lsrs	r3, r3, #6
 800760e:	3301      	adds	r3, #1
 8007610:	60fb      	str	r3, [r7, #12]

  /* Configure the LDO as system regulator supply */
  if (SupplySource == PWR_LDO_SUPPLY)
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	2b00      	cmp	r3, #0
 8007616:	d113      	bne.n	8007640 <HAL_PWREx_ConfigSupply+0x54>
  {
    /* Set the power supply configuration */
    CLEAR_BIT(PWR->CR3, PWR_CR3_REGSEL);
 8007618:	4b1a      	ldr	r3, [pc, #104]	@ (8007684 <HAL_PWREx_ConfigSupply+0x98>)
 800761a:	689b      	ldr	r3, [r3, #8]
 800761c:	4a19      	ldr	r2, [pc, #100]	@ (8007684 <HAL_PWREx_ConfigSupply+0x98>)
 800761e:	f023 0302 	bic.w	r3, r3, #2
 8007622:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8007624:	e002      	b.n	800762c <HAL_PWREx_ConfigSupply+0x40>
    {
      timeout--;
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	3b01      	subs	r3, #1
 800762a:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 800762c:	4b15      	ldr	r3, [pc, #84]	@ (8007684 <HAL_PWREx_ConfigSupply+0x98>)
 800762e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007630:	f003 0302 	and.w	r3, r3, #2
 8007634:	2b02      	cmp	r3, #2
 8007636:	d116      	bne.n	8007666 <HAL_PWREx_ConfigSupply+0x7a>
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	2b00      	cmp	r3, #0
 800763c:	d1f3      	bne.n	8007626 <HAL_PWREx_ConfigSupply+0x3a>
 800763e:	e012      	b.n	8007666 <HAL_PWREx_ConfigSupply+0x7a>
  }
  /* Configure the SMPS as system regulator supply */
  else
  {
    /* Set the power supply configuration */
    SET_BIT(PWR->CR3, PWR_CR3_REGSEL);
 8007640:	4b10      	ldr	r3, [pc, #64]	@ (8007684 <HAL_PWREx_ConfigSupply+0x98>)
 8007642:	689b      	ldr	r3, [r3, #8]
 8007644:	4a0f      	ldr	r2, [pc, #60]	@ (8007684 <HAL_PWREx_ConfigSupply+0x98>)
 8007646:	f043 0302 	orr.w	r3, r3, #2
 800764a:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 800764c:	e002      	b.n	8007654 <HAL_PWREx_ConfigSupply+0x68>
    {
      timeout--;
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	3b01      	subs	r3, #1
 8007652:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8007654:	4b0b      	ldr	r3, [pc, #44]	@ (8007684 <HAL_PWREx_ConfigSupply+0x98>)
 8007656:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007658:	f003 0302 	and.w	r3, r3, #2
 800765c:	2b00      	cmp	r3, #0
 800765e:	d102      	bne.n	8007666 <HAL_PWREx_ConfigSupply+0x7a>
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	2b00      	cmp	r3, #0
 8007664:	d1f3      	bne.n	800764e <HAL_PWREx_ConfigSupply+0x62>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	2b00      	cmp	r3, #0
 800766a:	d101      	bne.n	8007670 <HAL_PWREx_ConfigSupply+0x84>
  {
    return HAL_TIMEOUT;
 800766c:	2303      	movs	r3, #3
 800766e:	e000      	b.n	8007672 <HAL_PWREx_ConfigSupply+0x86>
  }

  return HAL_OK;
 8007670:	2300      	movs	r3, #0
}
 8007672:	4618      	mov	r0, r3
 8007674:	3714      	adds	r7, #20
 8007676:	46bd      	mov	sp, r7
 8007678:	bc80      	pop	{r7}
 800767a:	4770      	bx	lr
 800767c:	2000000c 	.word	0x2000000c
 8007680:	10624dd3 	.word	0x10624dd3
 8007684:	46020800 	.word	0x46020800

08007688 <HAL_PWREx_EnableVddIO2>:
  * @note   Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8007688:	b480      	push	{r7}
 800768a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_IO2SV);
 800768c:	4b04      	ldr	r3, [pc, #16]	@ (80076a0 <HAL_PWREx_EnableVddIO2+0x18>)
 800768e:	691b      	ldr	r3, [r3, #16]
 8007690:	4a03      	ldr	r2, [pc, #12]	@ (80076a0 <HAL_PWREx_EnableVddIO2+0x18>)
 8007692:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8007696:	6113      	str	r3, [r2, #16]
}
 8007698:	bf00      	nop
 800769a:	46bd      	mov	sp, r7
 800769c:	bc80      	pop	{r7}
 800769e:	4770      	bx	lr
 80076a0:	46020800 	.word	0x46020800

080076a4 <HAL_PWREx_DisableUCPDDeadBattery>:
  *         pull-down or to handover control to the UCPD (the UCPD must be
  *         initialized before doing the disable).
  * @retval None.
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80076a4:	b480      	push	{r7}
 80076a6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->UCPDR, PWR_UCPDR_UCPD_DBDIS);
 80076a8:	4b04      	ldr	r3, [pc, #16]	@ (80076bc <HAL_PWREx_DisableUCPDDeadBattery+0x18>)
 80076aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076ac:	4a03      	ldr	r2, [pc, #12]	@ (80076bc <HAL_PWREx_DisableUCPDDeadBattery+0x18>)
 80076ae:	f043 0301 	orr.w	r3, r3, #1
 80076b2:	62d3      	str	r3, [r2, #44]	@ 0x2c
}
 80076b4:	bf00      	nop
 80076b6:	46bd      	mov	sp, r7
 80076b8:	bc80      	pop	{r7}
 80076ba:	4770      	bx	lr
 80076bc:	46020800 	.word	0x46020800

080076c0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pRCC_OscInitStruct)
{
 80076c0:	b580      	push	{r7, lr}
 80076c2:	b08e      	sub	sp, #56	@ 0x38
 80076c4:	af00      	add	r7, sp, #0
 80076c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source;
  uint32_t pll_config;
  FlagStatus pwrboosten = RESET;
 80076c8:	2300      	movs	r3, #0
 80076ca:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pRCC_OscInitStruct == NULL)
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d102      	bne.n	80076da <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 80076d4:	2301      	movs	r3, #1
 80076d6:	f000 bec8 	b.w	800846a <HAL_RCC_OscConfig+0xdaa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pRCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80076da:	4b99      	ldr	r3, [pc, #612]	@ (8007940 <HAL_RCC_OscConfig+0x280>)
 80076dc:	69db      	ldr	r3, [r3, #28]
 80076de:	f003 030c 	and.w	r3, r3, #12
 80076e2:	633b      	str	r3, [r7, #48]	@ 0x30
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80076e4:	4b96      	ldr	r3, [pc, #600]	@ (8007940 <HAL_RCC_OscConfig+0x280>)
 80076e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80076e8:	f003 0303 	and.w	r3, r3, #3
 80076ec:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /*----------------------------- MSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	f003 0310 	and.w	r3, r3, #16
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	f000 816c 	beq.w	80079d4 <HAL_RCC_OscConfig+0x314>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(pRCC_OscInitStruct->MSIClockRange));

    /*Check if MSI is used as system clock or as PLL source when PLL is selected as system clock*/

    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80076fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d007      	beq.n	8007712 <HAL_RCC_OscConfig+0x52>
 8007702:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007704:	2b0c      	cmp	r3, #12
 8007706:	f040 80de 	bne.w	80078c6 <HAL_RCC_OscConfig+0x206>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 800770a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800770c:	2b01      	cmp	r3, #1
 800770e:	f040 80da 	bne.w	80078c6 <HAL_RCC_OscConfig+0x206>
    {
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	69db      	ldr	r3, [r3, #28]
 8007716:	2b00      	cmp	r3, #0
 8007718:	d102      	bne.n	8007720 <HAL_RCC_OscConfig+0x60>
      {
        return HAL_ERROR;
 800771a:	2301      	movs	r3, #1
 800771c:	f000 bea5 	b.w	800846a <HAL_RCC_OscConfig+0xdaa>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device */
        if (pRCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007724:	4b86      	ldr	r3, [pc, #536]	@ (8007940 <HAL_RCC_OscConfig+0x280>)
 8007726:	689b      	ldr	r3, [r3, #8]
 8007728:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800772c:	2b00      	cmp	r3, #0
 800772e:	d004      	beq.n	800773a <HAL_RCC_OscConfig+0x7a>
 8007730:	4b83      	ldr	r3, [pc, #524]	@ (8007940 <HAL_RCC_OscConfig+0x280>)
 8007732:	689b      	ldr	r3, [r3, #8]
 8007734:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8007738:	e005      	b.n	8007746 <HAL_RCC_OscConfig+0x86>
 800773a:	4b81      	ldr	r3, [pc, #516]	@ (8007940 <HAL_RCC_OscConfig+0x280>)
 800773c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007740:	041b      	lsls	r3, r3, #16
 8007742:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8007746:	4293      	cmp	r3, r2
 8007748:	d255      	bcs.n	80077f6 <HAL_RCC_OscConfig+0x136>
        {
          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800774a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800774c:	2b00      	cmp	r3, #0
 800774e:	d10a      	bne.n	8007766 <HAL_RCC_OscConfig+0xa6>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007754:	4618      	mov	r0, r3
 8007756:	f001 fa23 	bl	8008ba0 <RCC_SetFlashLatencyFromMSIRange>
 800775a:	4603      	mov	r3, r0
 800775c:	2b00      	cmp	r3, #0
 800775e:	d002      	beq.n	8007766 <HAL_RCC_OscConfig+0xa6>
            {
              return HAL_ERROR;
 8007760:	2301      	movs	r3, #1
 8007762:	f000 be82 	b.w	800846a <HAL_RCC_OscConfig+0xdaa>
            }
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8007766:	4b76      	ldr	r3, [pc, #472]	@ (8007940 <HAL_RCC_OscConfig+0x280>)
 8007768:	689b      	ldr	r3, [r3, #8]
 800776a:	4a75      	ldr	r2, [pc, #468]	@ (8007940 <HAL_RCC_OscConfig+0x280>)
 800776c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8007770:	6093      	str	r3, [r2, #8]
 8007772:	4b73      	ldr	r3, [pc, #460]	@ (8007940 <HAL_RCC_OscConfig+0x280>)
 8007774:	689b      	ldr	r3, [r3, #8]
 8007776:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800777e:	4970      	ldr	r1, [pc, #448]	@ (8007940 <HAL_RCC_OscConfig+0x280>)
 8007780:	4313      	orrs	r3, r2
 8007782:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007788:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 800778c:	d309      	bcc.n	80077a2 <HAL_RCC_OscConfig+0xe2>
 800778e:	4b6c      	ldr	r3, [pc, #432]	@ (8007940 <HAL_RCC_OscConfig+0x280>)
 8007790:	68db      	ldr	r3, [r3, #12]
 8007792:	f023 021f 	bic.w	r2, r3, #31
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	6a1b      	ldr	r3, [r3, #32]
 800779a:	4969      	ldr	r1, [pc, #420]	@ (8007940 <HAL_RCC_OscConfig+0x280>)
 800779c:	4313      	orrs	r3, r2
 800779e:	60cb      	str	r3, [r1, #12]
 80077a0:	e07e      	b.n	80078a0 <HAL_RCC_OscConfig+0x1e0>
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	da0a      	bge.n	80077c0 <HAL_RCC_OscConfig+0x100>
 80077aa:	4b65      	ldr	r3, [pc, #404]	@ (8007940 <HAL_RCC_OscConfig+0x280>)
 80077ac:	68db      	ldr	r3, [r3, #12]
 80077ae:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	6a1b      	ldr	r3, [r3, #32]
 80077b6:	015b      	lsls	r3, r3, #5
 80077b8:	4961      	ldr	r1, [pc, #388]	@ (8007940 <HAL_RCC_OscConfig+0x280>)
 80077ba:	4313      	orrs	r3, r2
 80077bc:	60cb      	str	r3, [r1, #12]
 80077be:	e06f      	b.n	80078a0 <HAL_RCC_OscConfig+0x1e0>
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80077c4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80077c8:	d30a      	bcc.n	80077e0 <HAL_RCC_OscConfig+0x120>
 80077ca:	4b5d      	ldr	r3, [pc, #372]	@ (8007940 <HAL_RCC_OscConfig+0x280>)
 80077cc:	68db      	ldr	r3, [r3, #12]
 80077ce:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	6a1b      	ldr	r3, [r3, #32]
 80077d6:	029b      	lsls	r3, r3, #10
 80077d8:	4959      	ldr	r1, [pc, #356]	@ (8007940 <HAL_RCC_OscConfig+0x280>)
 80077da:	4313      	orrs	r3, r2
 80077dc:	60cb      	str	r3, [r1, #12]
 80077de:	e05f      	b.n	80078a0 <HAL_RCC_OscConfig+0x1e0>
 80077e0:	4b57      	ldr	r3, [pc, #348]	@ (8007940 <HAL_RCC_OscConfig+0x280>)
 80077e2:	68db      	ldr	r3, [r3, #12]
 80077e4:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	6a1b      	ldr	r3, [r3, #32]
 80077ec:	03db      	lsls	r3, r3, #15
 80077ee:	4954      	ldr	r1, [pc, #336]	@ (8007940 <HAL_RCC_OscConfig+0x280>)
 80077f0:	4313      	orrs	r3, r2
 80077f2:	60cb      	str	r3, [r1, #12]
 80077f4:	e054      	b.n	80078a0 <HAL_RCC_OscConfig+0x1e0>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 80077f6:	4b52      	ldr	r3, [pc, #328]	@ (8007940 <HAL_RCC_OscConfig+0x280>)
 80077f8:	689b      	ldr	r3, [r3, #8]
 80077fa:	4a51      	ldr	r2, [pc, #324]	@ (8007940 <HAL_RCC_OscConfig+0x280>)
 80077fc:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8007800:	6093      	str	r3, [r2, #8]
 8007802:	4b4f      	ldr	r3, [pc, #316]	@ (8007940 <HAL_RCC_OscConfig+0x280>)
 8007804:	689b      	ldr	r3, [r3, #8]
 8007806:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800780e:	494c      	ldr	r1, [pc, #304]	@ (8007940 <HAL_RCC_OscConfig+0x280>)
 8007810:	4313      	orrs	r3, r2
 8007812:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007818:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 800781c:	d309      	bcc.n	8007832 <HAL_RCC_OscConfig+0x172>
 800781e:	4b48      	ldr	r3, [pc, #288]	@ (8007940 <HAL_RCC_OscConfig+0x280>)
 8007820:	68db      	ldr	r3, [r3, #12]
 8007822:	f023 021f 	bic.w	r2, r3, #31
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	6a1b      	ldr	r3, [r3, #32]
 800782a:	4945      	ldr	r1, [pc, #276]	@ (8007940 <HAL_RCC_OscConfig+0x280>)
 800782c:	4313      	orrs	r3, r2
 800782e:	60cb      	str	r3, [r1, #12]
 8007830:	e028      	b.n	8007884 <HAL_RCC_OscConfig+0x1c4>
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007836:	2b00      	cmp	r3, #0
 8007838:	da0a      	bge.n	8007850 <HAL_RCC_OscConfig+0x190>
 800783a:	4b41      	ldr	r3, [pc, #260]	@ (8007940 <HAL_RCC_OscConfig+0x280>)
 800783c:	68db      	ldr	r3, [r3, #12]
 800783e:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	6a1b      	ldr	r3, [r3, #32]
 8007846:	015b      	lsls	r3, r3, #5
 8007848:	493d      	ldr	r1, [pc, #244]	@ (8007940 <HAL_RCC_OscConfig+0x280>)
 800784a:	4313      	orrs	r3, r2
 800784c:	60cb      	str	r3, [r1, #12]
 800784e:	e019      	b.n	8007884 <HAL_RCC_OscConfig+0x1c4>
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007854:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007858:	d30a      	bcc.n	8007870 <HAL_RCC_OscConfig+0x1b0>
 800785a:	4b39      	ldr	r3, [pc, #228]	@ (8007940 <HAL_RCC_OscConfig+0x280>)
 800785c:	68db      	ldr	r3, [r3, #12]
 800785e:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	6a1b      	ldr	r3, [r3, #32]
 8007866:	029b      	lsls	r3, r3, #10
 8007868:	4935      	ldr	r1, [pc, #212]	@ (8007940 <HAL_RCC_OscConfig+0x280>)
 800786a:	4313      	orrs	r3, r2
 800786c:	60cb      	str	r3, [r1, #12]
 800786e:	e009      	b.n	8007884 <HAL_RCC_OscConfig+0x1c4>
 8007870:	4b33      	ldr	r3, [pc, #204]	@ (8007940 <HAL_RCC_OscConfig+0x280>)
 8007872:	68db      	ldr	r3, [r3, #12]
 8007874:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	6a1b      	ldr	r3, [r3, #32]
 800787c:	03db      	lsls	r3, r3, #15
 800787e:	4930      	ldr	r1, [pc, #192]	@ (8007940 <HAL_RCC_OscConfig+0x280>)
 8007880:	4313      	orrs	r3, r2
 8007882:	60cb      	str	r3, [r1, #12]
                                                (pRCC_OscInitStruct->MSIClockRange));

          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8007884:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007886:	2b00      	cmp	r3, #0
 8007888:	d10a      	bne.n	80078a0 <HAL_RCC_OscConfig+0x1e0>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800788e:	4618      	mov	r0, r3
 8007890:	f001 f986 	bl	8008ba0 <RCC_SetFlashLatencyFromMSIRange>
 8007894:	4603      	mov	r3, r0
 8007896:	2b00      	cmp	r3, #0
 8007898:	d002      	beq.n	80078a0 <HAL_RCC_OscConfig+0x1e0>
            {
              return HAL_ERROR;
 800789a:	2301      	movs	r3, #1
 800789c:	f000 bde5 	b.w	800846a <HAL_RCC_OscConfig+0xdaa>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        (void) HAL_RCC_GetHCLKFreq();
 80078a0:	f001 f8f2 	bl	8008a88 <HAL_RCC_GetHCLKFreq>
        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80078a4:	4b27      	ldr	r3, [pc, #156]	@ (8007944 <HAL_RCC_OscConfig+0x284>)
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	4618      	mov	r0, r3
 80078aa:	f7fd f813 	bl	80048d4 <HAL_InitTick>
 80078ae:	4603      	mov	r3, r0
 80078b0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if (status != HAL_OK)
 80078b4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	f000 808a 	beq.w	80079d2 <HAL_RCC_OscConfig+0x312>
        {
          return status;
 80078be:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80078c2:	f000 bdd2 	b.w	800846a <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Check the MSI State */
      if (pRCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	69db      	ldr	r3, [r3, #28]
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d066      	beq.n	800799c <HAL_RCC_OscConfig+0x2dc>
      {
        /* Enable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_ENABLE();
 80078ce:	4b1c      	ldr	r3, [pc, #112]	@ (8007940 <HAL_RCC_OscConfig+0x280>)
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	4a1b      	ldr	r2, [pc, #108]	@ (8007940 <HAL_RCC_OscConfig+0x280>)
 80078d4:	f043 0301 	orr.w	r3, r3, #1
 80078d8:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80078da:	f7fd fd53 	bl	8005384 <HAL_GetTick>
 80078de:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 80078e0:	e009      	b.n	80078f6 <HAL_RCC_OscConfig+0x236>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80078e2:	f7fd fd4f 	bl	8005384 <HAL_GetTick>
 80078e6:	4602      	mov	r2, r0
 80078e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80078ea:	1ad3      	subs	r3, r2, r3
 80078ec:	2b02      	cmp	r3, #2
 80078ee:	d902      	bls.n	80078f6 <HAL_RCC_OscConfig+0x236>
          {
            return HAL_TIMEOUT;
 80078f0:	2303      	movs	r3, #3
 80078f2:	f000 bdba 	b.w	800846a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 80078f6:	4b12      	ldr	r3, [pc, #72]	@ (8007940 <HAL_RCC_OscConfig+0x280>)
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	f003 0304 	and.w	r3, r3, #4
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d0ef      	beq.n	80078e2 <HAL_RCC_OscConfig+0x222>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range */
        __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8007902:	4b0f      	ldr	r3, [pc, #60]	@ (8007940 <HAL_RCC_OscConfig+0x280>)
 8007904:	689b      	ldr	r3, [r3, #8]
 8007906:	4a0e      	ldr	r2, [pc, #56]	@ (8007940 <HAL_RCC_OscConfig+0x280>)
 8007908:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800790c:	6093      	str	r3, [r2, #8]
 800790e:	4b0c      	ldr	r3, [pc, #48]	@ (8007940 <HAL_RCC_OscConfig+0x280>)
 8007910:	689b      	ldr	r3, [r3, #8]
 8007912:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800791a:	4909      	ldr	r1, [pc, #36]	@ (8007940 <HAL_RCC_OscConfig+0x280>)
 800791c:	4313      	orrs	r3, r2
 800791e:	608b      	str	r3, [r1, #8]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007924:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8007928:	d30e      	bcc.n	8007948 <HAL_RCC_OscConfig+0x288>
 800792a:	4b05      	ldr	r3, [pc, #20]	@ (8007940 <HAL_RCC_OscConfig+0x280>)
 800792c:	68db      	ldr	r3, [r3, #12]
 800792e:	f023 021f 	bic.w	r2, r3, #31
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	6a1b      	ldr	r3, [r3, #32]
 8007936:	4902      	ldr	r1, [pc, #8]	@ (8007940 <HAL_RCC_OscConfig+0x280>)
 8007938:	4313      	orrs	r3, r2
 800793a:	60cb      	str	r3, [r1, #12]
 800793c:	e04a      	b.n	80079d4 <HAL_RCC_OscConfig+0x314>
 800793e:	bf00      	nop
 8007940:	46020c00 	.word	0x46020c00
 8007944:	2000002c 	.word	0x2000002c
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800794c:	2b00      	cmp	r3, #0
 800794e:	da0a      	bge.n	8007966 <HAL_RCC_OscConfig+0x2a6>
 8007950:	4b98      	ldr	r3, [pc, #608]	@ (8007bb4 <HAL_RCC_OscConfig+0x4f4>)
 8007952:	68db      	ldr	r3, [r3, #12]
 8007954:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	6a1b      	ldr	r3, [r3, #32]
 800795c:	015b      	lsls	r3, r3, #5
 800795e:	4995      	ldr	r1, [pc, #596]	@ (8007bb4 <HAL_RCC_OscConfig+0x4f4>)
 8007960:	4313      	orrs	r3, r2
 8007962:	60cb      	str	r3, [r1, #12]
 8007964:	e036      	b.n	80079d4 <HAL_RCC_OscConfig+0x314>
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800796a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800796e:	d30a      	bcc.n	8007986 <HAL_RCC_OscConfig+0x2c6>
 8007970:	4b90      	ldr	r3, [pc, #576]	@ (8007bb4 <HAL_RCC_OscConfig+0x4f4>)
 8007972:	68db      	ldr	r3, [r3, #12]
 8007974:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	6a1b      	ldr	r3, [r3, #32]
 800797c:	029b      	lsls	r3, r3, #10
 800797e:	498d      	ldr	r1, [pc, #564]	@ (8007bb4 <HAL_RCC_OscConfig+0x4f4>)
 8007980:	4313      	orrs	r3, r2
 8007982:	60cb      	str	r3, [r1, #12]
 8007984:	e026      	b.n	80079d4 <HAL_RCC_OscConfig+0x314>
 8007986:	4b8b      	ldr	r3, [pc, #556]	@ (8007bb4 <HAL_RCC_OscConfig+0x4f4>)
 8007988:	68db      	ldr	r3, [r3, #12]
 800798a:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	6a1b      	ldr	r3, [r3, #32]
 8007992:	03db      	lsls	r3, r3, #15
 8007994:	4987      	ldr	r1, [pc, #540]	@ (8007bb4 <HAL_RCC_OscConfig+0x4f4>)
 8007996:	4313      	orrs	r3, r2
 8007998:	60cb      	str	r3, [r1, #12]
 800799a:	e01b      	b.n	80079d4 <HAL_RCC_OscConfig+0x314>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_DISABLE();
 800799c:	4b85      	ldr	r3, [pc, #532]	@ (8007bb4 <HAL_RCC_OscConfig+0x4f4>)
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	4a84      	ldr	r2, [pc, #528]	@ (8007bb4 <HAL_RCC_OscConfig+0x4f4>)
 80079a2:	f023 0301 	bic.w	r3, r3, #1
 80079a6:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80079a8:	f7fd fcec 	bl	8005384 <HAL_GetTick>
 80079ac:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 80079ae:	e009      	b.n	80079c4 <HAL_RCC_OscConfig+0x304>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80079b0:	f7fd fce8 	bl	8005384 <HAL_GetTick>
 80079b4:	4602      	mov	r2, r0
 80079b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80079b8:	1ad3      	subs	r3, r2, r3
 80079ba:	2b02      	cmp	r3, #2
 80079bc:	d902      	bls.n	80079c4 <HAL_RCC_OscConfig+0x304>
          {
            return HAL_TIMEOUT;
 80079be:	2303      	movs	r3, #3
 80079c0:	f000 bd53 	b.w	800846a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 80079c4:	4b7b      	ldr	r3, [pc, #492]	@ (8007bb4 <HAL_RCC_OscConfig+0x4f4>)
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	f003 0304 	and.w	r3, r3, #4
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d1ef      	bne.n	80079b0 <HAL_RCC_OscConfig+0x2f0>
 80079d0:	e000      	b.n	80079d4 <HAL_RCC_OscConfig+0x314>
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80079d2:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	f003 0301 	and.w	r3, r3, #1
 80079dc:	2b00      	cmp	r3, #0
 80079de:	f000 808b 	beq.w	8007af8 <HAL_RCC_OscConfig+0x438>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pRCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80079e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079e4:	2b08      	cmp	r3, #8
 80079e6:	d005      	beq.n	80079f4 <HAL_RCC_OscConfig+0x334>
 80079e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079ea:	2b0c      	cmp	r3, #12
 80079ec:	d109      	bne.n	8007a02 <HAL_RCC_OscConfig+0x342>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80079ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80079f0:	2b03      	cmp	r3, #3
 80079f2:	d106      	bne.n	8007a02 <HAL_RCC_OscConfig+0x342>
    {
      if (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	685b      	ldr	r3, [r3, #4]
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d17d      	bne.n	8007af8 <HAL_RCC_OscConfig+0x438>
      {
        return HAL_ERROR;
 80079fc:	2301      	movs	r3, #1
 80079fe:	f000 bd34 	b.w	800846a <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	685b      	ldr	r3, [r3, #4]
 8007a06:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007a0a:	d106      	bne.n	8007a1a <HAL_RCC_OscConfig+0x35a>
 8007a0c:	4b69      	ldr	r3, [pc, #420]	@ (8007bb4 <HAL_RCC_OscConfig+0x4f4>)
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	4a68      	ldr	r2, [pc, #416]	@ (8007bb4 <HAL_RCC_OscConfig+0x4f4>)
 8007a12:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007a16:	6013      	str	r3, [r2, #0]
 8007a18:	e041      	b.n	8007a9e <HAL_RCC_OscConfig+0x3de>
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	685b      	ldr	r3, [r3, #4]
 8007a1e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007a22:	d112      	bne.n	8007a4a <HAL_RCC_OscConfig+0x38a>
 8007a24:	4b63      	ldr	r3, [pc, #396]	@ (8007bb4 <HAL_RCC_OscConfig+0x4f4>)
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	4a62      	ldr	r2, [pc, #392]	@ (8007bb4 <HAL_RCC_OscConfig+0x4f4>)
 8007a2a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007a2e:	6013      	str	r3, [r2, #0]
 8007a30:	4b60      	ldr	r3, [pc, #384]	@ (8007bb4 <HAL_RCC_OscConfig+0x4f4>)
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	4a5f      	ldr	r2, [pc, #380]	@ (8007bb4 <HAL_RCC_OscConfig+0x4f4>)
 8007a36:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8007a3a:	6013      	str	r3, [r2, #0]
 8007a3c:	4b5d      	ldr	r3, [pc, #372]	@ (8007bb4 <HAL_RCC_OscConfig+0x4f4>)
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	4a5c      	ldr	r2, [pc, #368]	@ (8007bb4 <HAL_RCC_OscConfig+0x4f4>)
 8007a42:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007a46:	6013      	str	r3, [r2, #0]
 8007a48:	e029      	b.n	8007a9e <HAL_RCC_OscConfig+0x3de>
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	685b      	ldr	r3, [r3, #4]
 8007a4e:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 8007a52:	d112      	bne.n	8007a7a <HAL_RCC_OscConfig+0x3ba>
 8007a54:	4b57      	ldr	r3, [pc, #348]	@ (8007bb4 <HAL_RCC_OscConfig+0x4f4>)
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	4a56      	ldr	r2, [pc, #344]	@ (8007bb4 <HAL_RCC_OscConfig+0x4f4>)
 8007a5a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007a5e:	6013      	str	r3, [r2, #0]
 8007a60:	4b54      	ldr	r3, [pc, #336]	@ (8007bb4 <HAL_RCC_OscConfig+0x4f4>)
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	4a53      	ldr	r2, [pc, #332]	@ (8007bb4 <HAL_RCC_OscConfig+0x4f4>)
 8007a66:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007a6a:	6013      	str	r3, [r2, #0]
 8007a6c:	4b51      	ldr	r3, [pc, #324]	@ (8007bb4 <HAL_RCC_OscConfig+0x4f4>)
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	4a50      	ldr	r2, [pc, #320]	@ (8007bb4 <HAL_RCC_OscConfig+0x4f4>)
 8007a72:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007a76:	6013      	str	r3, [r2, #0]
 8007a78:	e011      	b.n	8007a9e <HAL_RCC_OscConfig+0x3de>
 8007a7a:	4b4e      	ldr	r3, [pc, #312]	@ (8007bb4 <HAL_RCC_OscConfig+0x4f4>)
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	4a4d      	ldr	r2, [pc, #308]	@ (8007bb4 <HAL_RCC_OscConfig+0x4f4>)
 8007a80:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007a84:	6013      	str	r3, [r2, #0]
 8007a86:	4b4b      	ldr	r3, [pc, #300]	@ (8007bb4 <HAL_RCC_OscConfig+0x4f4>)
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	4a4a      	ldr	r2, [pc, #296]	@ (8007bb4 <HAL_RCC_OscConfig+0x4f4>)
 8007a8c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007a90:	6013      	str	r3, [r2, #0]
 8007a92:	4b48      	ldr	r3, [pc, #288]	@ (8007bb4 <HAL_RCC_OscConfig+0x4f4>)
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	4a47      	ldr	r2, [pc, #284]	@ (8007bb4 <HAL_RCC_OscConfig+0x4f4>)
 8007a98:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8007a9c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	685b      	ldr	r3, [r3, #4]
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d014      	beq.n	8007ad0 <HAL_RCC_OscConfig+0x410>
      {
        tickstart = HAL_GetTick();
 8007aa6:	f7fd fc6d 	bl	8005384 <HAL_GetTick>
 8007aaa:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007aac:	e009      	b.n	8007ac2 <HAL_RCC_OscConfig+0x402>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007aae:	f7fd fc69 	bl	8005384 <HAL_GetTick>
 8007ab2:	4602      	mov	r2, r0
 8007ab4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ab6:	1ad3      	subs	r3, r2, r3
 8007ab8:	2b64      	cmp	r3, #100	@ 0x64
 8007aba:	d902      	bls.n	8007ac2 <HAL_RCC_OscConfig+0x402>
          {
            return HAL_TIMEOUT;
 8007abc:	2303      	movs	r3, #3
 8007abe:	f000 bcd4 	b.w	800846a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007ac2:	4b3c      	ldr	r3, [pc, #240]	@ (8007bb4 <HAL_RCC_OscConfig+0x4f4>)
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d0ef      	beq.n	8007aae <HAL_RCC_OscConfig+0x3ee>
 8007ace:	e013      	b.n	8007af8 <HAL_RCC_OscConfig+0x438>
          }
        }
      }
      else
      {
        tickstart = HAL_GetTick();
 8007ad0:	f7fd fc58 	bl	8005384 <HAL_GetTick>
 8007ad4:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007ad6:	e009      	b.n	8007aec <HAL_RCC_OscConfig+0x42c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007ad8:	f7fd fc54 	bl	8005384 <HAL_GetTick>
 8007adc:	4602      	mov	r2, r0
 8007ade:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ae0:	1ad3      	subs	r3, r2, r3
 8007ae2:	2b64      	cmp	r3, #100	@ 0x64
 8007ae4:	d902      	bls.n	8007aec <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8007ae6:	2303      	movs	r3, #3
 8007ae8:	f000 bcbf 	b.w	800846a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007aec:	4b31      	ldr	r3, [pc, #196]	@ (8007bb4 <HAL_RCC_OscConfig+0x4f4>)
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d1ef      	bne.n	8007ad8 <HAL_RCC_OscConfig+0x418>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	f003 0302 	and.w	r3, r3, #2
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d05f      	beq.n	8007bc4 <HAL_RCC_OscConfig+0x504>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(pRCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8007b04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b06:	2b04      	cmp	r3, #4
 8007b08:	d005      	beq.n	8007b16 <HAL_RCC_OscConfig+0x456>
 8007b0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b0c:	2b0c      	cmp	r3, #12
 8007b0e:	d114      	bne.n	8007b3a <HAL_RCC_OscConfig+0x47a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8007b10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007b12:	2b02      	cmp	r3, #2
 8007b14:	d111      	bne.n	8007b3a <HAL_RCC_OscConfig+0x47a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	68db      	ldr	r3, [r3, #12]
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d102      	bne.n	8007b24 <HAL_RCC_OscConfig+0x464>
      {
        return HAL_ERROR;
 8007b1e:	2301      	movs	r3, #1
 8007b20:	f000 bca3 	b.w	800846a <HAL_RCC_OscConfig+0xdaa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8007b24:	4b23      	ldr	r3, [pc, #140]	@ (8007bb4 <HAL_RCC_OscConfig+0x4f4>)
 8007b26:	691b      	ldr	r3, [r3, #16]
 8007b28:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	691b      	ldr	r3, [r3, #16]
 8007b30:	041b      	lsls	r3, r3, #16
 8007b32:	4920      	ldr	r1, [pc, #128]	@ (8007bb4 <HAL_RCC_OscConfig+0x4f4>)
 8007b34:	4313      	orrs	r3, r2
 8007b36:	610b      	str	r3, [r1, #16]
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8007b38:	e044      	b.n	8007bc4 <HAL_RCC_OscConfig+0x504>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	68db      	ldr	r3, [r3, #12]
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d024      	beq.n	8007b8c <HAL_RCC_OscConfig+0x4cc>
      {
        /* Enable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_ENABLE();
 8007b42:	4b1c      	ldr	r3, [pc, #112]	@ (8007bb4 <HAL_RCC_OscConfig+0x4f4>)
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	4a1b      	ldr	r2, [pc, #108]	@ (8007bb4 <HAL_RCC_OscConfig+0x4f4>)
 8007b48:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007b4c:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8007b4e:	f7fd fc19 	bl	8005384 <HAL_GetTick>
 8007b52:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007b54:	e009      	b.n	8007b6a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007b56:	f7fd fc15 	bl	8005384 <HAL_GetTick>
 8007b5a:	4602      	mov	r2, r0
 8007b5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b5e:	1ad3      	subs	r3, r2, r3
 8007b60:	2b02      	cmp	r3, #2
 8007b62:	d902      	bls.n	8007b6a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8007b64:	2303      	movs	r3, #3
 8007b66:	f000 bc80 	b.w	800846a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007b6a:	4b12      	ldr	r3, [pc, #72]	@ (8007bb4 <HAL_RCC_OscConfig+0x4f4>)
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d0ef      	beq.n	8007b56 <HAL_RCC_OscConfig+0x496>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8007b76:	4b0f      	ldr	r3, [pc, #60]	@ (8007bb4 <HAL_RCC_OscConfig+0x4f4>)
 8007b78:	691b      	ldr	r3, [r3, #16]
 8007b7a:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	691b      	ldr	r3, [r3, #16]
 8007b82:	041b      	lsls	r3, r3, #16
 8007b84:	490b      	ldr	r1, [pc, #44]	@ (8007bb4 <HAL_RCC_OscConfig+0x4f4>)
 8007b86:	4313      	orrs	r3, r2
 8007b88:	610b      	str	r3, [r1, #16]
 8007b8a:	e01b      	b.n	8007bc4 <HAL_RCC_OscConfig+0x504>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_DISABLE();
 8007b8c:	4b09      	ldr	r3, [pc, #36]	@ (8007bb4 <HAL_RCC_OscConfig+0x4f4>)
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	4a08      	ldr	r2, [pc, #32]	@ (8007bb4 <HAL_RCC_OscConfig+0x4f4>)
 8007b92:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007b96:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8007b98:	f7fd fbf4 	bl	8005384 <HAL_GetTick>
 8007b9c:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007b9e:	e00b      	b.n	8007bb8 <HAL_RCC_OscConfig+0x4f8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007ba0:	f7fd fbf0 	bl	8005384 <HAL_GetTick>
 8007ba4:	4602      	mov	r2, r0
 8007ba6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ba8:	1ad3      	subs	r3, r2, r3
 8007baa:	2b02      	cmp	r3, #2
 8007bac:	d904      	bls.n	8007bb8 <HAL_RCC_OscConfig+0x4f8>
          {
            return HAL_TIMEOUT;
 8007bae:	2303      	movs	r3, #3
 8007bb0:	f000 bc5b 	b.w	800846a <HAL_RCC_OscConfig+0xdaa>
 8007bb4:	46020c00 	.word	0x46020c00
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007bb8:	4baf      	ldr	r3, [pc, #700]	@ (8007e78 <HAL_RCC_OscConfig+0x7b8>)
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d1ed      	bne.n	8007ba0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	f003 0308 	and.w	r3, r3, #8
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	f000 80c8 	beq.w	8007d62 <HAL_RCC_OscConfig+0x6a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(pRCC_OscInitStruct->LSIState));

    FlagStatus  pwrclkchanged = RESET;
 8007bd2:	2300      	movs	r3, #0
 8007bd4:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

    /* Update LSI configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007bd8:	4ba7      	ldr	r3, [pc, #668]	@ (8007e78 <HAL_RCC_OscConfig+0x7b8>)
 8007bda:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007bde:	f003 0304 	and.w	r3, r3, #4
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d111      	bne.n	8007c0a <HAL_RCC_OscConfig+0x54a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007be6:	4ba4      	ldr	r3, [pc, #656]	@ (8007e78 <HAL_RCC_OscConfig+0x7b8>)
 8007be8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007bec:	4aa2      	ldr	r2, [pc, #648]	@ (8007e78 <HAL_RCC_OscConfig+0x7b8>)
 8007bee:	f043 0304 	orr.w	r3, r3, #4
 8007bf2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8007bf6:	4ba0      	ldr	r3, [pc, #640]	@ (8007e78 <HAL_RCC_OscConfig+0x7b8>)
 8007bf8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007bfc:	f003 0304 	and.w	r3, r3, #4
 8007c00:	617b      	str	r3, [r7, #20]
 8007c02:	697b      	ldr	r3, [r7, #20]
      pwrclkchanged = SET;
 8007c04:	2301      	movs	r3, #1
 8007c06:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8007c0a:	4b9c      	ldr	r3, [pc, #624]	@ (8007e7c <HAL_RCC_OscConfig+0x7bc>)
 8007c0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c0e:	f003 0301 	and.w	r3, r3, #1
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d119      	bne.n	8007c4a <HAL_RCC_OscConfig+0x58a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8007c16:	4b99      	ldr	r3, [pc, #612]	@ (8007e7c <HAL_RCC_OscConfig+0x7bc>)
 8007c18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c1a:	4a98      	ldr	r2, [pc, #608]	@ (8007e7c <HAL_RCC_OscConfig+0x7bc>)
 8007c1c:	f043 0301 	orr.w	r3, r3, #1
 8007c20:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007c22:	f7fd fbaf 	bl	8005384 <HAL_GetTick>
 8007c26:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8007c28:	e009      	b.n	8007c3e <HAL_RCC_OscConfig+0x57e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007c2a:	f7fd fbab 	bl	8005384 <HAL_GetTick>
 8007c2e:	4602      	mov	r2, r0
 8007c30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c32:	1ad3      	subs	r3, r2, r3
 8007c34:	2b02      	cmp	r3, #2
 8007c36:	d902      	bls.n	8007c3e <HAL_RCC_OscConfig+0x57e>
        {
          return HAL_TIMEOUT;
 8007c38:	2303      	movs	r3, #3
 8007c3a:	f000 bc16 	b.w	800846a <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8007c3e:	4b8f      	ldr	r3, [pc, #572]	@ (8007e7c <HAL_RCC_OscConfig+0x7bc>)
 8007c40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c42:	f003 0301 	and.w	r3, r3, #1
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d0ef      	beq.n	8007c2a <HAL_RCC_OscConfig+0x56a>
        }
      }
    }
    /* Check the LSI State */
    if (pRCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	695b      	ldr	r3, [r3, #20]
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d05f      	beq.n	8007d12 <HAL_RCC_OscConfig+0x652>
    {
      uint32_t bdcr_temp = RCC->BDCR;
 8007c52:	4b89      	ldr	r3, [pc, #548]	@ (8007e78 <HAL_RCC_OscConfig+0x7b8>)
 8007c54:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007c58:	623b      	str	r3, [r7, #32]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(pRCC_OscInitStruct->LSIDiv));

      if (pRCC_OscInitStruct->LSIDiv != (bdcr_temp & RCC_BDCR_LSIPREDIV))
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	699a      	ldr	r2, [r3, #24]
 8007c5e:	6a3b      	ldr	r3, [r7, #32]
 8007c60:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007c64:	429a      	cmp	r2, r3
 8007c66:	d037      	beq.n	8007cd8 <HAL_RCC_OscConfig+0x618>
      {
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8007c68:	6a3b      	ldr	r3, [r7, #32]
 8007c6a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d006      	beq.n	8007c80 <HAL_RCC_OscConfig+0x5c0>
            ((bdcr_temp & RCC_BDCR_LSION) != RCC_BDCR_LSION))
 8007c72:	6a3b      	ldr	r3, [r7, #32]
 8007c74:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d101      	bne.n	8007c80 <HAL_RCC_OscConfig+0x5c0>
        {
          /* If LSIRDY is set while LSION is not enabled, LSIPREDIV can't be updated */
          /* The LSIPREDIV cannot be changed if the LSI is used by the IWDG or by the RTC */
          return HAL_ERROR;
 8007c7c:	2301      	movs	r3, #1
 8007c7e:	e3f4      	b.n	800846a <HAL_RCC_OscConfig+0xdaa>
        }

        /* Turn off LSI before changing RCC_BDCR_LSIPREDIV */
        if ((bdcr_temp & RCC_BDCR_LSION) == RCC_BDCR_LSION)
 8007c80:	6a3b      	ldr	r3, [r7, #32]
 8007c82:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d01b      	beq.n	8007cc2 <HAL_RCC_OscConfig+0x602>
        {
          __HAL_RCC_LSI_DISABLE();
 8007c8a:	4b7b      	ldr	r3, [pc, #492]	@ (8007e78 <HAL_RCC_OscConfig+0x7b8>)
 8007c8c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007c90:	4a79      	ldr	r2, [pc, #484]	@ (8007e78 <HAL_RCC_OscConfig+0x7b8>)
 8007c92:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 8007c96:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

          tickstart = HAL_GetTick();
 8007c9a:	f7fd fb73 	bl	8005384 <HAL_GetTick>
 8007c9e:	62b8      	str	r0, [r7, #40]	@ 0x28

          /* Wait till LSI is disabled */
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8007ca0:	e008      	b.n	8007cb4 <HAL_RCC_OscConfig+0x5f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007ca2:	f7fd fb6f 	bl	8005384 <HAL_GetTick>
 8007ca6:	4602      	mov	r2, r0
 8007ca8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007caa:	1ad3      	subs	r3, r2, r3
 8007cac:	2b05      	cmp	r3, #5
 8007cae:	d901      	bls.n	8007cb4 <HAL_RCC_OscConfig+0x5f4>
            {
              return HAL_TIMEOUT;
 8007cb0:	2303      	movs	r3, #3
 8007cb2:	e3da      	b.n	800846a <HAL_RCC_OscConfig+0xdaa>
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8007cb4:	4b70      	ldr	r3, [pc, #448]	@ (8007e78 <HAL_RCC_OscConfig+0x7b8>)
 8007cb6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007cba:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d1ef      	bne.n	8007ca2 <HAL_RCC_OscConfig+0x5e2>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->BDCR, RCC_BDCR_LSIPREDIV, pRCC_OscInitStruct->LSIDiv);
 8007cc2:	4b6d      	ldr	r3, [pc, #436]	@ (8007e78 <HAL_RCC_OscConfig+0x7b8>)
 8007cc4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007cc8:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	699b      	ldr	r3, [r3, #24]
 8007cd0:	4969      	ldr	r1, [pc, #420]	@ (8007e78 <HAL_RCC_OscConfig+0x7b8>)
 8007cd2:	4313      	orrs	r3, r2
 8007cd4:	f8c1 30f0 	str.w	r3, [r1, #240]	@ 0xf0
      }

      /* Enable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_ENABLE();
 8007cd8:	4b67      	ldr	r3, [pc, #412]	@ (8007e78 <HAL_RCC_OscConfig+0x7b8>)
 8007cda:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007cde:	4a66      	ldr	r2, [pc, #408]	@ (8007e78 <HAL_RCC_OscConfig+0x7b8>)
 8007ce0:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8007ce4:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 8007ce8:	f7fd fb4c 	bl	8005384 <HAL_GetTick>
 8007cec:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8007cee:	e008      	b.n	8007d02 <HAL_RCC_OscConfig+0x642>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007cf0:	f7fd fb48 	bl	8005384 <HAL_GetTick>
 8007cf4:	4602      	mov	r2, r0
 8007cf6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007cf8:	1ad3      	subs	r3, r2, r3
 8007cfa:	2b05      	cmp	r3, #5
 8007cfc:	d901      	bls.n	8007d02 <HAL_RCC_OscConfig+0x642>
        {
          return HAL_TIMEOUT;
 8007cfe:	2303      	movs	r3, #3
 8007d00:	e3b3      	b.n	800846a <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8007d02:	4b5d      	ldr	r3, [pc, #372]	@ (8007e78 <HAL_RCC_OscConfig+0x7b8>)
 8007d04:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007d08:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d0ef      	beq.n	8007cf0 <HAL_RCC_OscConfig+0x630>
 8007d10:	e01b      	b.n	8007d4a <HAL_RCC_OscConfig+0x68a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_DISABLE();
 8007d12:	4b59      	ldr	r3, [pc, #356]	@ (8007e78 <HAL_RCC_OscConfig+0x7b8>)
 8007d14:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007d18:	4a57      	ldr	r2, [pc, #348]	@ (8007e78 <HAL_RCC_OscConfig+0x7b8>)
 8007d1a:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 8007d1e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 8007d22:	f7fd fb2f 	bl	8005384 <HAL_GetTick>
 8007d26:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8007d28:	e008      	b.n	8007d3c <HAL_RCC_OscConfig+0x67c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007d2a:	f7fd fb2b 	bl	8005384 <HAL_GetTick>
 8007d2e:	4602      	mov	r2, r0
 8007d30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d32:	1ad3      	subs	r3, r2, r3
 8007d34:	2b05      	cmp	r3, #5
 8007d36:	d901      	bls.n	8007d3c <HAL_RCC_OscConfig+0x67c>
        {
          return HAL_TIMEOUT;
 8007d38:	2303      	movs	r3, #3
 8007d3a:	e396      	b.n	800846a <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8007d3c:	4b4e      	ldr	r3, [pc, #312]	@ (8007e78 <HAL_RCC_OscConfig+0x7b8>)
 8007d3e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007d42:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d1ef      	bne.n	8007d2a <HAL_RCC_OscConfig+0x66a>
        }
      }
    }
    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8007d4a:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8007d4e:	2b01      	cmp	r3, #1
 8007d50:	d107      	bne.n	8007d62 <HAL_RCC_OscConfig+0x6a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007d52:	4b49      	ldr	r3, [pc, #292]	@ (8007e78 <HAL_RCC_OscConfig+0x7b8>)
 8007d54:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007d58:	4a47      	ldr	r2, [pc, #284]	@ (8007e78 <HAL_RCC_OscConfig+0x7b8>)
 8007d5a:	f023 0304 	bic.w	r3, r3, #4
 8007d5e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	f003 0304 	and.w	r3, r3, #4
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	f000 8111 	beq.w	8007f92 <HAL_RCC_OscConfig+0x8d2>
  {
    FlagStatus pwrclkchanged = RESET;
 8007d70:	2300      	movs	r3, #0
 8007d72:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pRCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007d76:	4b40      	ldr	r3, [pc, #256]	@ (8007e78 <HAL_RCC_OscConfig+0x7b8>)
 8007d78:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007d7c:	f003 0304 	and.w	r3, r3, #4
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d111      	bne.n	8007da8 <HAL_RCC_OscConfig+0x6e8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007d84:	4b3c      	ldr	r3, [pc, #240]	@ (8007e78 <HAL_RCC_OscConfig+0x7b8>)
 8007d86:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007d8a:	4a3b      	ldr	r2, [pc, #236]	@ (8007e78 <HAL_RCC_OscConfig+0x7b8>)
 8007d8c:	f043 0304 	orr.w	r3, r3, #4
 8007d90:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8007d94:	4b38      	ldr	r3, [pc, #224]	@ (8007e78 <HAL_RCC_OscConfig+0x7b8>)
 8007d96:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007d9a:	f003 0304 	and.w	r3, r3, #4
 8007d9e:	613b      	str	r3, [r7, #16]
 8007da0:	693b      	ldr	r3, [r7, #16]
      pwrclkchanged = SET;
 8007da2:	2301      	movs	r3, #1
 8007da4:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8007da8:	4b34      	ldr	r3, [pc, #208]	@ (8007e7c <HAL_RCC_OscConfig+0x7bc>)
 8007daa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007dac:	f003 0301 	and.w	r3, r3, #1
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d118      	bne.n	8007de6 <HAL_RCC_OscConfig+0x726>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8007db4:	4b31      	ldr	r3, [pc, #196]	@ (8007e7c <HAL_RCC_OscConfig+0x7bc>)
 8007db6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007db8:	4a30      	ldr	r2, [pc, #192]	@ (8007e7c <HAL_RCC_OscConfig+0x7bc>)
 8007dba:	f043 0301 	orr.w	r3, r3, #1
 8007dbe:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007dc0:	f7fd fae0 	bl	8005384 <HAL_GetTick>
 8007dc4:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8007dc6:	e008      	b.n	8007dda <HAL_RCC_OscConfig+0x71a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007dc8:	f7fd fadc 	bl	8005384 <HAL_GetTick>
 8007dcc:	4602      	mov	r2, r0
 8007dce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007dd0:	1ad3      	subs	r3, r2, r3
 8007dd2:	2b02      	cmp	r3, #2
 8007dd4:	d901      	bls.n	8007dda <HAL_RCC_OscConfig+0x71a>
        {
          return HAL_TIMEOUT;
 8007dd6:	2303      	movs	r3, #3
 8007dd8:	e347      	b.n	800846a <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8007dda:	4b28      	ldr	r3, [pc, #160]	@ (8007e7c <HAL_RCC_OscConfig+0x7bc>)
 8007ddc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007dde:	f003 0301 	and.w	r3, r3, #1
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d0f0      	beq.n	8007dc8 <HAL_RCC_OscConfig+0x708>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	689b      	ldr	r3, [r3, #8]
 8007dea:	f003 0301 	and.w	r3, r3, #1
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d01f      	beq.n	8007e32 <HAL_RCC_OscConfig+0x772>
    {
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	689b      	ldr	r3, [r3, #8]
 8007df6:	f003 0304 	and.w	r3, r3, #4
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d010      	beq.n	8007e20 <HAL_RCC_OscConfig+0x760>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8007dfe:	4b1e      	ldr	r3, [pc, #120]	@ (8007e78 <HAL_RCC_OscConfig+0x7b8>)
 8007e00:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007e04:	4a1c      	ldr	r2, [pc, #112]	@ (8007e78 <HAL_RCC_OscConfig+0x7b8>)
 8007e06:	f043 0304 	orr.w	r3, r3, #4
 8007e0a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8007e0e:	4b1a      	ldr	r3, [pc, #104]	@ (8007e78 <HAL_RCC_OscConfig+0x7b8>)
 8007e10:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007e14:	4a18      	ldr	r2, [pc, #96]	@ (8007e78 <HAL_RCC_OscConfig+0x7b8>)
 8007e16:	f043 0301 	orr.w	r3, r3, #1
 8007e1a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8007e1e:	e018      	b.n	8007e52 <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8007e20:	4b15      	ldr	r3, [pc, #84]	@ (8007e78 <HAL_RCC_OscConfig+0x7b8>)
 8007e22:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007e26:	4a14      	ldr	r2, [pc, #80]	@ (8007e78 <HAL_RCC_OscConfig+0x7b8>)
 8007e28:	f043 0301 	orr.w	r3, r3, #1
 8007e2c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8007e30:	e00f      	b.n	8007e52 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8007e32:	4b11      	ldr	r3, [pc, #68]	@ (8007e78 <HAL_RCC_OscConfig+0x7b8>)
 8007e34:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007e38:	4a0f      	ldr	r2, [pc, #60]	@ (8007e78 <HAL_RCC_OscConfig+0x7b8>)
 8007e3a:	f023 0301 	bic.w	r3, r3, #1
 8007e3e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8007e42:	4b0d      	ldr	r3, [pc, #52]	@ (8007e78 <HAL_RCC_OscConfig+0x7b8>)
 8007e44:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007e48:	4a0b      	ldr	r2, [pc, #44]	@ (8007e78 <HAL_RCC_OscConfig+0x7b8>)
 8007e4a:	f023 0304 	bic.w	r3, r3, #4
 8007e4e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
    }

    /* Check the LSE State */
    if (pRCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	689b      	ldr	r3, [r3, #8]
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d057      	beq.n	8007f0a <HAL_RCC_OscConfig+0x84a>
    {
      tickstart = HAL_GetTick();
 8007e5a:	f7fd fa93 	bl	8005384 <HAL_GetTick>
 8007e5e:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007e60:	e00e      	b.n	8007e80 <HAL_RCC_OscConfig+0x7c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007e62:	f7fd fa8f 	bl	8005384 <HAL_GetTick>
 8007e66:	4602      	mov	r2, r0
 8007e68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e6a:	1ad3      	subs	r3, r2, r3
 8007e6c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007e70:	4293      	cmp	r3, r2
 8007e72:	d905      	bls.n	8007e80 <HAL_RCC_OscConfig+0x7c0>
        {
          return HAL_TIMEOUT;
 8007e74:	2303      	movs	r3, #3
 8007e76:	e2f8      	b.n	800846a <HAL_RCC_OscConfig+0xdaa>
 8007e78:	46020c00 	.word	0x46020c00
 8007e7c:	46020800 	.word	0x46020800
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007e80:	4b9c      	ldr	r3, [pc, #624]	@ (80080f4 <HAL_RCC_OscConfig+0xa34>)
 8007e82:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007e86:	f003 0302 	and.w	r3, r3, #2
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d0e9      	beq.n	8007e62 <HAL_RCC_OscConfig+0x7a2>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	689b      	ldr	r3, [r3, #8]
 8007e92:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d01b      	beq.n	8007ed2 <HAL_RCC_OscConfig+0x812>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8007e9a:	4b96      	ldr	r3, [pc, #600]	@ (80080f4 <HAL_RCC_OscConfig+0xa34>)
 8007e9c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007ea0:	4a94      	ldr	r2, [pc, #592]	@ (80080f4 <HAL_RCC_OscConfig+0xa34>)
 8007ea2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007ea6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8007eaa:	e00a      	b.n	8007ec2 <HAL_RCC_OscConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007eac:	f7fd fa6a 	bl	8005384 <HAL_GetTick>
 8007eb0:	4602      	mov	r2, r0
 8007eb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007eb4:	1ad3      	subs	r3, r2, r3
 8007eb6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007eba:	4293      	cmp	r3, r2
 8007ebc:	d901      	bls.n	8007ec2 <HAL_RCC_OscConfig+0x802>
          {
            return HAL_TIMEOUT;
 8007ebe:	2303      	movs	r3, #3
 8007ec0:	e2d3      	b.n	800846a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8007ec2:	4b8c      	ldr	r3, [pc, #560]	@ (80080f4 <HAL_RCC_OscConfig+0xa34>)
 8007ec4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007ec8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	d0ed      	beq.n	8007eac <HAL_RCC_OscConfig+0x7ec>
 8007ed0:	e053      	b.n	8007f7a <HAL_RCC_OscConfig+0x8ba>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8007ed2:	4b88      	ldr	r3, [pc, #544]	@ (80080f4 <HAL_RCC_OscConfig+0xa34>)
 8007ed4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007ed8:	4a86      	ldr	r2, [pc, #536]	@ (80080f4 <HAL_RCC_OscConfig+0xa34>)
 8007eda:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007ede:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8007ee2:	e00a      	b.n	8007efa <HAL_RCC_OscConfig+0x83a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007ee4:	f7fd fa4e 	bl	8005384 <HAL_GetTick>
 8007ee8:	4602      	mov	r2, r0
 8007eea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007eec:	1ad3      	subs	r3, r2, r3
 8007eee:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007ef2:	4293      	cmp	r3, r2
 8007ef4:	d901      	bls.n	8007efa <HAL_RCC_OscConfig+0x83a>
          {
            return HAL_TIMEOUT;
 8007ef6:	2303      	movs	r3, #3
 8007ef8:	e2b7      	b.n	800846a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8007efa:	4b7e      	ldr	r3, [pc, #504]	@ (80080f4 <HAL_RCC_OscConfig+0xa34>)
 8007efc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007f00:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d1ed      	bne.n	8007ee4 <HAL_RCC_OscConfig+0x824>
 8007f08:	e037      	b.n	8007f7a <HAL_RCC_OscConfig+0x8ba>
        }
      }
    }
    else
    {
      tickstart = HAL_GetTick();
 8007f0a:	f7fd fa3b 	bl	8005384 <HAL_GetTick>
 8007f0e:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007f10:	e00a      	b.n	8007f28 <HAL_RCC_OscConfig+0x868>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007f12:	f7fd fa37 	bl	8005384 <HAL_GetTick>
 8007f16:	4602      	mov	r2, r0
 8007f18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f1a:	1ad3      	subs	r3, r2, r3
 8007f1c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007f20:	4293      	cmp	r3, r2
 8007f22:	d901      	bls.n	8007f28 <HAL_RCC_OscConfig+0x868>
        {
          return HAL_TIMEOUT;
 8007f24:	2303      	movs	r3, #3
 8007f26:	e2a0      	b.n	800846a <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007f28:	4b72      	ldr	r3, [pc, #456]	@ (80080f4 <HAL_RCC_OscConfig+0xa34>)
 8007f2a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007f2e:	f003 0302 	and.w	r3, r3, #2
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d1ed      	bne.n	8007f12 <HAL_RCC_OscConfig+0x852>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 8007f36:	4b6f      	ldr	r3, [pc, #444]	@ (80080f4 <HAL_RCC_OscConfig+0xa34>)
 8007f38:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007f3c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	d01a      	beq.n	8007f7a <HAL_RCC_OscConfig+0x8ba>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8007f44:	4b6b      	ldr	r3, [pc, #428]	@ (80080f4 <HAL_RCC_OscConfig+0xa34>)
 8007f46:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007f4a:	4a6a      	ldr	r2, [pc, #424]	@ (80080f4 <HAL_RCC_OscConfig+0xa34>)
 8007f4c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007f50:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8007f54:	e00a      	b.n	8007f6c <HAL_RCC_OscConfig+0x8ac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007f56:	f7fd fa15 	bl	8005384 <HAL_GetTick>
 8007f5a:	4602      	mov	r2, r0
 8007f5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f5e:	1ad3      	subs	r3, r2, r3
 8007f60:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007f64:	4293      	cmp	r3, r2
 8007f66:	d901      	bls.n	8007f6c <HAL_RCC_OscConfig+0x8ac>
          {
            return HAL_TIMEOUT;
 8007f68:	2303      	movs	r3, #3
 8007f6a:	e27e      	b.n	800846a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8007f6c:	4b61      	ldr	r3, [pc, #388]	@ (80080f4 <HAL_RCC_OscConfig+0xa34>)
 8007f6e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007f72:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d1ed      	bne.n	8007f56 <HAL_RCC_OscConfig+0x896>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8007f7a:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8007f7e:	2b01      	cmp	r3, #1
 8007f80:	d107      	bne.n	8007f92 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007f82:	4b5c      	ldr	r3, [pc, #368]	@ (80080f4 <HAL_RCC_OscConfig+0xa34>)
 8007f84:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007f88:	4a5a      	ldr	r2, [pc, #360]	@ (80080f4 <HAL_RCC_OscConfig+0xa34>)
 8007f8a:	f023 0304 	bic.w	r3, r3, #4
 8007f8e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	f003 0320 	and.w	r3, r3, #32
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d036      	beq.n	800800c <HAL_RCC_OscConfig+0x94c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pRCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pRCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d019      	beq.n	8007fda <HAL_RCC_OscConfig+0x91a>
    {
      /* Enable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_ENABLE();
 8007fa6:	4b53      	ldr	r3, [pc, #332]	@ (80080f4 <HAL_RCC_OscConfig+0xa34>)
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	4a52      	ldr	r2, [pc, #328]	@ (80080f4 <HAL_RCC_OscConfig+0xa34>)
 8007fac:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8007fb0:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8007fb2:	f7fd f9e7 	bl	8005384 <HAL_GetTick>
 8007fb6:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8007fb8:	e008      	b.n	8007fcc <HAL_RCC_OscConfig+0x90c>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007fba:	f7fd f9e3 	bl	8005384 <HAL_GetTick>
 8007fbe:	4602      	mov	r2, r0
 8007fc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007fc2:	1ad3      	subs	r3, r2, r3
 8007fc4:	2b02      	cmp	r3, #2
 8007fc6:	d901      	bls.n	8007fcc <HAL_RCC_OscConfig+0x90c>
        {
          return HAL_TIMEOUT;
 8007fc8:	2303      	movs	r3, #3
 8007fca:	e24e      	b.n	800846a <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8007fcc:	4b49      	ldr	r3, [pc, #292]	@ (80080f4 <HAL_RCC_OscConfig+0xa34>)
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d0f0      	beq.n	8007fba <HAL_RCC_OscConfig+0x8fa>
 8007fd8:	e018      	b.n	800800c <HAL_RCC_OscConfig+0x94c>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_DISABLE();
 8007fda:	4b46      	ldr	r3, [pc, #280]	@ (80080f4 <HAL_RCC_OscConfig+0xa34>)
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	4a45      	ldr	r2, [pc, #276]	@ (80080f4 <HAL_RCC_OscConfig+0xa34>)
 8007fe0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007fe4:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8007fe6:	f7fd f9cd 	bl	8005384 <HAL_GetTick>
 8007fea:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8007fec:	e008      	b.n	8008000 <HAL_RCC_OscConfig+0x940>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007fee:	f7fd f9c9 	bl	8005384 <HAL_GetTick>
 8007ff2:	4602      	mov	r2, r0
 8007ff4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ff6:	1ad3      	subs	r3, r2, r3
 8007ff8:	2b02      	cmp	r3, #2
 8007ffa:	d901      	bls.n	8008000 <HAL_RCC_OscConfig+0x940>
        {
          return HAL_TIMEOUT;
 8007ffc:	2303      	movs	r3, #3
 8007ffe:	e234      	b.n	800846a <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8008000:	4b3c      	ldr	r3, [pc, #240]	@ (80080f4 <HAL_RCC_OscConfig+0xa34>)
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008008:	2b00      	cmp	r3, #0
 800800a:	d1f0      	bne.n	8007fee <HAL_RCC_OscConfig+0x92e>
      }
    }
  }

  /*------------------------------ SHSI Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_SHSI) == RCC_OSCILLATORTYPE_SHSI)
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008014:	2b00      	cmp	r3, #0
 8008016:	d036      	beq.n	8008086 <HAL_RCC_OscConfig+0x9c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SHSI(pRCC_OscInitStruct->SHSIState));

    /* Check the SHSI State */
    if (pRCC_OscInitStruct->SHSIState != RCC_SHSI_OFF)
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800801c:	2b00      	cmp	r3, #0
 800801e:	d019      	beq.n	8008054 <HAL_RCC_OscConfig+0x994>
    {
      /* Enable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_ENABLE();
 8008020:	4b34      	ldr	r3, [pc, #208]	@ (80080f4 <HAL_RCC_OscConfig+0xa34>)
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	4a33      	ldr	r2, [pc, #204]	@ (80080f4 <HAL_RCC_OscConfig+0xa34>)
 8008026:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800802a:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800802c:	f7fd f9aa 	bl	8005384 <HAL_GetTick>
 8008030:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is ready */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 8008032:	e008      	b.n	8008046 <HAL_RCC_OscConfig+0x986>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8008034:	f7fd f9a6 	bl	8005384 <HAL_GetTick>
 8008038:	4602      	mov	r2, r0
 800803a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800803c:	1ad3      	subs	r3, r2, r3
 800803e:	2b02      	cmp	r3, #2
 8008040:	d901      	bls.n	8008046 <HAL_RCC_OscConfig+0x986>
        {
          return HAL_TIMEOUT;
 8008042:	2303      	movs	r3, #3
 8008044:	e211      	b.n	800846a <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 8008046:	4b2b      	ldr	r3, [pc, #172]	@ (80080f4 <HAL_RCC_OscConfig+0xa34>)
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800804e:	2b00      	cmp	r3, #0
 8008050:	d0f0      	beq.n	8008034 <HAL_RCC_OscConfig+0x974>
 8008052:	e018      	b.n	8008086 <HAL_RCC_OscConfig+0x9c6>
      }
    }
    else
    {
      /* Disable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_DISABLE();
 8008054:	4b27      	ldr	r3, [pc, #156]	@ (80080f4 <HAL_RCC_OscConfig+0xa34>)
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	4a26      	ldr	r2, [pc, #152]	@ (80080f4 <HAL_RCC_OscConfig+0xa34>)
 800805a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800805e:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8008060:	f7fd f990 	bl	8005384 <HAL_GetTick>
 8008064:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8008066:	e008      	b.n	800807a <HAL_RCC_OscConfig+0x9ba>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8008068:	f7fd f98c 	bl	8005384 <HAL_GetTick>
 800806c:	4602      	mov	r2, r0
 800806e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008070:	1ad3      	subs	r3, r2, r3
 8008072:	2b02      	cmp	r3, #2
 8008074:	d901      	bls.n	800807a <HAL_RCC_OscConfig+0x9ba>
        {
          return HAL_TIMEOUT;
 8008076:	2303      	movs	r3, #3
 8008078:	e1f7      	b.n	800846a <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 800807a:	4b1e      	ldr	r3, [pc, #120]	@ (80080f4 <HAL_RCC_OscConfig+0xa34>)
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008082:	2b00      	cmp	r3, #0
 8008084:	d1f0      	bne.n	8008068 <HAL_RCC_OscConfig+0x9a8>
        }
      }
    }
  }
  /*------------------------------ MSIK Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIK) == RCC_OSCILLATORTYPE_MSIK)
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800808e:	2b00      	cmp	r3, #0
 8008090:	d07f      	beq.n	8008192 <HAL_RCC_OscConfig+0xad2>
    assert_param(IS_RCC_MSIK(pRCC_OscInitStruct->MSIKState));
    assert_param(IS_RCC_MSIK_CLOCK_RANGE(pRCC_OscInitStruct->MSIKClockRange));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));

    /* Check the MSIK State */
    if (pRCC_OscInitStruct->MSIKState != RCC_MSIK_OFF)
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008096:	2b00      	cmp	r3, #0
 8008098:	d062      	beq.n	8008160 <HAL_RCC_OscConfig+0xaa0>
    {

      /* Selects the Multiple Speed of kernel high speed oscillator (MSIK) clock range .*/
      __HAL_RCC_MSIK_RANGE_CONFIG(pRCC_OscInitStruct->MSIKClockRange);
 800809a:	4b16      	ldr	r3, [pc, #88]	@ (80080f4 <HAL_RCC_OscConfig+0xa34>)
 800809c:	689b      	ldr	r3, [r3, #8]
 800809e:	4a15      	ldr	r2, [pc, #84]	@ (80080f4 <HAL_RCC_OscConfig+0xa34>)
 80080a0:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80080a4:	6093      	str	r3, [r2, #8]
 80080a6:	4b13      	ldr	r3, [pc, #76]	@ (80080f4 <HAL_RCC_OscConfig+0xa34>)
 80080a8:	689b      	ldr	r3, [r3, #8]
 80080aa:	f023 6270 	bic.w	r2, r3, #251658240	@ 0xf000000
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80080b2:	4910      	ldr	r1, [pc, #64]	@ (80080f4 <HAL_RCC_OscConfig+0xa34>)
 80080b4:	4313      	orrs	r3, r2
 80080b6:	608b      	str	r3, [r1, #8]
      /* Adjusts the Multiple Speed of kernel high speed oscillator (MSIK) calibration value.*/
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80080bc:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 80080c0:	d309      	bcc.n	80080d6 <HAL_RCC_OscConfig+0xa16>
 80080c2:	4b0c      	ldr	r3, [pc, #48]	@ (80080f4 <HAL_RCC_OscConfig+0xa34>)
 80080c4:	68db      	ldr	r3, [r3, #12]
 80080c6:	f023 021f 	bic.w	r2, r3, #31
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	6a1b      	ldr	r3, [r3, #32]
 80080ce:	4909      	ldr	r1, [pc, #36]	@ (80080f4 <HAL_RCC_OscConfig+0xa34>)
 80080d0:	4313      	orrs	r3, r2
 80080d2:	60cb      	str	r3, [r1, #12]
 80080d4:	e02a      	b.n	800812c <HAL_RCC_OscConfig+0xa6c>
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80080da:	2b00      	cmp	r3, #0
 80080dc:	da0c      	bge.n	80080f8 <HAL_RCC_OscConfig+0xa38>
 80080de:	4b05      	ldr	r3, [pc, #20]	@ (80080f4 <HAL_RCC_OscConfig+0xa34>)
 80080e0:	68db      	ldr	r3, [r3, #12]
 80080e2:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	6a1b      	ldr	r3, [r3, #32]
 80080ea:	015b      	lsls	r3, r3, #5
 80080ec:	4901      	ldr	r1, [pc, #4]	@ (80080f4 <HAL_RCC_OscConfig+0xa34>)
 80080ee:	4313      	orrs	r3, r2
 80080f0:	60cb      	str	r3, [r1, #12]
 80080f2:	e01b      	b.n	800812c <HAL_RCC_OscConfig+0xa6c>
 80080f4:	46020c00 	.word	0x46020c00
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80080fc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008100:	d30a      	bcc.n	8008118 <HAL_RCC_OscConfig+0xa58>
 8008102:	4ba1      	ldr	r3, [pc, #644]	@ (8008388 <HAL_RCC_OscConfig+0xcc8>)
 8008104:	68db      	ldr	r3, [r3, #12]
 8008106:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	6a1b      	ldr	r3, [r3, #32]
 800810e:	029b      	lsls	r3, r3, #10
 8008110:	499d      	ldr	r1, [pc, #628]	@ (8008388 <HAL_RCC_OscConfig+0xcc8>)
 8008112:	4313      	orrs	r3, r2
 8008114:	60cb      	str	r3, [r1, #12]
 8008116:	e009      	b.n	800812c <HAL_RCC_OscConfig+0xa6c>
 8008118:	4b9b      	ldr	r3, [pc, #620]	@ (8008388 <HAL_RCC_OscConfig+0xcc8>)
 800811a:	68db      	ldr	r3, [r3, #12]
 800811c:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	6a1b      	ldr	r3, [r3, #32]
 8008124:	03db      	lsls	r3, r3, #15
 8008126:	4998      	ldr	r1, [pc, #608]	@ (8008388 <HAL_RCC_OscConfig+0xcc8>)
 8008128:	4313      	orrs	r3, r2
 800812a:	60cb      	str	r3, [r1, #12]
                                            (pRCC_OscInitStruct->MSIClockRange));

      /* Enable the Internal kernel High Speed oscillator (MSIK) */
      __HAL_RCC_MSIK_ENABLE();
 800812c:	4b96      	ldr	r3, [pc, #600]	@ (8008388 <HAL_RCC_OscConfig+0xcc8>)
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	4a95      	ldr	r2, [pc, #596]	@ (8008388 <HAL_RCC_OscConfig+0xcc8>)
 8008132:	f043 0310 	orr.w	r3, r3, #16
 8008136:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8008138:	f7fd f924 	bl	8005384 <HAL_GetTick>
 800813c:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is ready */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 800813e:	e008      	b.n	8008152 <HAL_RCC_OscConfig+0xa92>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8008140:	f7fd f920 	bl	8005384 <HAL_GetTick>
 8008144:	4602      	mov	r2, r0
 8008146:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008148:	1ad3      	subs	r3, r2, r3
 800814a:	2b02      	cmp	r3, #2
 800814c:	d901      	bls.n	8008152 <HAL_RCC_OscConfig+0xa92>
        {
          return HAL_TIMEOUT;
 800814e:	2303      	movs	r3, #3
 8008150:	e18b      	b.n	800846a <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 8008152:	4b8d      	ldr	r3, [pc, #564]	@ (8008388 <HAL_RCC_OscConfig+0xcc8>)
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	f003 0320 	and.w	r3, r3, #32
 800815a:	2b00      	cmp	r3, #0
 800815c:	d0f0      	beq.n	8008140 <HAL_RCC_OscConfig+0xa80>
 800815e:	e018      	b.n	8008192 <HAL_RCC_OscConfig+0xad2>
      }
    }
    else
    {
      /* Disable the Internal High Speed Kernel oscillator (MSIK) */
      __HAL_RCC_MSIK_DISABLE();
 8008160:	4b89      	ldr	r3, [pc, #548]	@ (8008388 <HAL_RCC_OscConfig+0xcc8>)
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	4a88      	ldr	r2, [pc, #544]	@ (8008388 <HAL_RCC_OscConfig+0xcc8>)
 8008166:	f023 0310 	bic.w	r3, r3, #16
 800816a:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800816c:	f7fd f90a 	bl	8005384 <HAL_GetTick>
 8008170:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 8008172:	e008      	b.n	8008186 <HAL_RCC_OscConfig+0xac6>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8008174:	f7fd f906 	bl	8005384 <HAL_GetTick>
 8008178:	4602      	mov	r2, r0
 800817a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800817c:	1ad3      	subs	r3, r2, r3
 800817e:	2b02      	cmp	r3, #2
 8008180:	d901      	bls.n	8008186 <HAL_RCC_OscConfig+0xac6>
        {
          return HAL_TIMEOUT;
 8008182:	2303      	movs	r3, #3
 8008184:	e171      	b.n	800846a <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 8008186:	4b80      	ldr	r3, [pc, #512]	@ (8008388 <HAL_RCC_OscConfig+0xcc8>)
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	f003 0320 	and.w	r3, r3, #32
 800818e:	2b00      	cmp	r3, #0
 8008190:	d1f0      	bne.n	8008174 <HAL_RCC_OscConfig+0xab4>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL.PLLState));

  if ((pRCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008196:	2b00      	cmp	r3, #0
 8008198:	f000 8166 	beq.w	8008468 <HAL_RCC_OscConfig+0xda8>
  {
    FlagStatus  pwrclkchanged = RESET;
 800819c:	2300      	movs	r3, #0
 800819e:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34

    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80081a2:	4b79      	ldr	r3, [pc, #484]	@ (8008388 <HAL_RCC_OscConfig+0xcc8>)
 80081a4:	69db      	ldr	r3, [r3, #28]
 80081a6:	f003 030c 	and.w	r3, r3, #12
 80081aa:	2b0c      	cmp	r3, #12
 80081ac:	f000 80f2 	beq.w	8008394 <HAL_RCC_OscConfig+0xcd4>
    {
      if ((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80081b4:	2b02      	cmp	r3, #2
 80081b6:	f040 80c5 	bne.w	8008344 <HAL_RCC_OscConfig+0xc84>
        assert_param(IS_RCC_PLLP_VALUE(pRCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(pRCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(pRCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 80081ba:	4b73      	ldr	r3, [pc, #460]	@ (8008388 <HAL_RCC_OscConfig+0xcc8>)
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	4a72      	ldr	r2, [pc, #456]	@ (8008388 <HAL_RCC_OscConfig+0xcc8>)
 80081c0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80081c4:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80081c6:	f7fd f8dd 	bl	8005384 <HAL_GetTick>
 80081ca:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80081cc:	e008      	b.n	80081e0 <HAL_RCC_OscConfig+0xb20>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80081ce:	f7fd f8d9 	bl	8005384 <HAL_GetTick>
 80081d2:	4602      	mov	r2, r0
 80081d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80081d6:	1ad3      	subs	r3, r2, r3
 80081d8:	2b02      	cmp	r3, #2
 80081da:	d901      	bls.n	80081e0 <HAL_RCC_OscConfig+0xb20>
          {
            return HAL_TIMEOUT;
 80081dc:	2303      	movs	r3, #3
 80081de:	e144      	b.n	800846a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80081e0:	4b69      	ldr	r3, [pc, #420]	@ (8008388 <HAL_RCC_OscConfig+0xcc8>)
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	d1f0      	bne.n	80081ce <HAL_RCC_OscConfig+0xb0e>
          }
        }

        /* Requires to enable write access to Backup Domain of necessary */
        if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80081ec:	4b66      	ldr	r3, [pc, #408]	@ (8008388 <HAL_RCC_OscConfig+0xcc8>)
 80081ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80081f2:	f003 0304 	and.w	r3, r3, #4
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d111      	bne.n	800821e <HAL_RCC_OscConfig+0xb5e>
        {
          __HAL_RCC_PWR_CLK_ENABLE();
 80081fa:	4b63      	ldr	r3, [pc, #396]	@ (8008388 <HAL_RCC_OscConfig+0xcc8>)
 80081fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008200:	4a61      	ldr	r2, [pc, #388]	@ (8008388 <HAL_RCC_OscConfig+0xcc8>)
 8008202:	f043 0304 	orr.w	r3, r3, #4
 8008206:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800820a:	4b5f      	ldr	r3, [pc, #380]	@ (8008388 <HAL_RCC_OscConfig+0xcc8>)
 800820c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008210:	f003 0304 	and.w	r3, r3, #4
 8008214:	60fb      	str	r3, [r7, #12]
 8008216:	68fb      	ldr	r3, [r7, #12]
          pwrclkchanged = SET;
 8008218:	2301      	movs	r3, #1
 800821a:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
        }

        /*Disable EPOD to configure PLL1MBOOST*/
        if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) == PWR_VOSR_BOOSTEN)
 800821e:	4b5b      	ldr	r3, [pc, #364]	@ (800838c <HAL_RCC_OscConfig+0xccc>)
 8008220:	68db      	ldr	r3, [r3, #12]
 8008222:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8008226:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800822a:	d102      	bne.n	8008232 <HAL_RCC_OscConfig+0xb72>
        {
          pwrboosten = SET;
 800822c:	2301      	movs	r3, #1
 800822e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
        }
        CLEAR_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8008232:	4b56      	ldr	r3, [pc, #344]	@ (800838c <HAL_RCC_OscConfig+0xccc>)
 8008234:	68db      	ldr	r3, [r3, #12]
 8008236:	4a55      	ldr	r2, [pc, #340]	@ (800838c <HAL_RCC_OscConfig+0xccc>)
 8008238:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800823c:	60d3      	str	r3, [r2, #12]

        /* Configure the main PLL clock source, multiplication and division factors */
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 800823e:	4b52      	ldr	r3, [pc, #328]	@ (8008388 <HAL_RCC_OscConfig+0xcc8>)
 8008240:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008242:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008246:	f023 0303 	bic.w	r3, r3, #3
 800824a:	687a      	ldr	r2, [r7, #4]
 800824c:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 800824e:	687a      	ldr	r2, [r7, #4]
 8008250:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8008252:	3a01      	subs	r2, #1
 8008254:	0212      	lsls	r2, r2, #8
 8008256:	4311      	orrs	r1, r2
 8008258:	687a      	ldr	r2, [r7, #4]
 800825a:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 800825c:	430a      	orrs	r2, r1
 800825e:	494a      	ldr	r1, [pc, #296]	@ (8008388 <HAL_RCC_OscConfig+0xcc8>)
 8008260:	4313      	orrs	r3, r2
 8008262:	628b      	str	r3, [r1, #40]	@ 0x28
 8008264:	4b48      	ldr	r3, [pc, #288]	@ (8008388 <HAL_RCC_OscConfig+0xcc8>)
 8008266:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008268:	4b49      	ldr	r3, [pc, #292]	@ (8008390 <HAL_RCC_OscConfig+0xcd0>)
 800826a:	4013      	ands	r3, r2
 800826c:	687a      	ldr	r2, [r7, #4]
 800826e:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8008270:	3a01      	subs	r2, #1
 8008272:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8008276:	687a      	ldr	r2, [r7, #4]
 8008278:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800827a:	3a01      	subs	r2, #1
 800827c:	0252      	lsls	r2, r2, #9
 800827e:	b292      	uxth	r2, r2
 8008280:	4311      	orrs	r1, r2
 8008282:	687a      	ldr	r2, [r7, #4]
 8008284:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8008286:	3a01      	subs	r2, #1
 8008288:	0412      	lsls	r2, r2, #16
 800828a:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 800828e:	4311      	orrs	r1, r2
 8008290:	687a      	ldr	r2, [r7, #4]
 8008292:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8008294:	3a01      	subs	r2, #1
 8008296:	0612      	lsls	r2, r2, #24
 8008298:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 800829c:	430a      	orrs	r2, r1
 800829e:	493a      	ldr	r1, [pc, #232]	@ (8008388 <HAL_RCC_OscConfig+0xcc8>)
 80082a0:	4313      	orrs	r3, r2
 80082a2:	634b      	str	r3, [r1, #52]	@ 0x34
                             pRCC_OscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_DISABLE();
 80082a4:	4b38      	ldr	r3, [pc, #224]	@ (8008388 <HAL_RCC_OscConfig+0xcc8>)
 80082a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80082a8:	4a37      	ldr	r2, [pc, #220]	@ (8008388 <HAL_RCC_OscConfig+0xcc8>)
 80082aa:	f023 0310 	bic.w	r3, r3, #16
 80082ae:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80082b4:	4a34      	ldr	r2, [pc, #208]	@ (8008388 <HAL_RCC_OscConfig+0xcc8>)
 80082b6:	00db      	lsls	r3, r3, #3
 80082b8:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_ENABLE();
 80082ba:	4b33      	ldr	r3, [pc, #204]	@ (8008388 <HAL_RCC_OscConfig+0xcc8>)
 80082bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80082be:	4a32      	ldr	r2, [pc, #200]	@ (8008388 <HAL_RCC_OscConfig+0xcc8>)
 80082c0:	f043 0310 	orr.w	r3, r3, #16
 80082c4:	6293      	str	r3, [r2, #40]	@ 0x28

        assert_param(IS_RCC_PLLRGE_VALUE(pRCC_OscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(pRCC_OscInitStruct->PLL.PLLRGE);
 80082c6:	4b30      	ldr	r3, [pc, #192]	@ (8008388 <HAL_RCC_OscConfig+0xcc8>)
 80082c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80082ca:	f023 020c 	bic.w	r2, r3, #12
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80082d2:	492d      	ldr	r1, [pc, #180]	@ (8008388 <HAL_RCC_OscConfig+0xcc8>)
 80082d4:	4313      	orrs	r3, r2
 80082d6:	628b      	str	r3, [r1, #40]	@ 0x28

        if (pwrboosten == SET)
 80082d8:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80082dc:	2b01      	cmp	r3, #1
 80082de:	d105      	bne.n	80082ec <HAL_RCC_OscConfig+0xc2c>
        {
          /* Enable the EPOD to reach max frequency */
          SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 80082e0:	4b2a      	ldr	r3, [pc, #168]	@ (800838c <HAL_RCC_OscConfig+0xccc>)
 80082e2:	68db      	ldr	r3, [r3, #12]
 80082e4:	4a29      	ldr	r2, [pc, #164]	@ (800838c <HAL_RCC_OscConfig+0xccc>)
 80082e6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80082ea:	60d3      	str	r3, [r2, #12]
        }

        /* Restore clock configuration if changed */
        if (pwrclkchanged == SET)
 80082ec:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 80082f0:	2b01      	cmp	r3, #1
 80082f2:	d107      	bne.n	8008304 <HAL_RCC_OscConfig+0xc44>
        {
          __HAL_RCC_PWR_CLK_DISABLE();
 80082f4:	4b24      	ldr	r3, [pc, #144]	@ (8008388 <HAL_RCC_OscConfig+0xcc8>)
 80082f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80082fa:	4a23      	ldr	r2, [pc, #140]	@ (8008388 <HAL_RCC_OscConfig+0xcc8>)
 80082fc:	f023 0304 	bic.w	r3, r3, #4
 8008300:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
        }

        /* Enable the main PLL */
        __HAL_RCC_PLL_ENABLE();
 8008304:	4b20      	ldr	r3, [pc, #128]	@ (8008388 <HAL_RCC_OscConfig+0xcc8>)
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	4a1f      	ldr	r2, [pc, #124]	@ (8008388 <HAL_RCC_OscConfig+0xcc8>)
 800830a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800830e:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8008310:	f7fd f838 	bl	8005384 <HAL_GetTick>
 8008314:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8008316:	e008      	b.n	800832a <HAL_RCC_OscConfig+0xc6a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008318:	f7fd f834 	bl	8005384 <HAL_GetTick>
 800831c:	4602      	mov	r2, r0
 800831e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008320:	1ad3      	subs	r3, r2, r3
 8008322:	2b02      	cmp	r3, #2
 8008324:	d901      	bls.n	800832a <HAL_RCC_OscConfig+0xc6a>
          {
            return HAL_TIMEOUT;
 8008326:	2303      	movs	r3, #3
 8008328:	e09f      	b.n	800846a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800832a:	4b17      	ldr	r3, [pc, #92]	@ (8008388 <HAL_RCC_OscConfig+0xcc8>)
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008332:	2b00      	cmp	r3, #0
 8008334:	d0f0      	beq.n	8008318 <HAL_RCC_OscConfig+0xc58>
          }
        }

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8008336:	4b14      	ldr	r3, [pc, #80]	@ (8008388 <HAL_RCC_OscConfig+0xcc8>)
 8008338:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800833a:	4a13      	ldr	r2, [pc, #76]	@ (8008388 <HAL_RCC_OscConfig+0xcc8>)
 800833c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8008340:	6293      	str	r3, [r2, #40]	@ 0x28
 8008342:	e091      	b.n	8008468 <HAL_RCC_OscConfig+0xda8>

      }
      else
      {
        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8008344:	4b10      	ldr	r3, [pc, #64]	@ (8008388 <HAL_RCC_OscConfig+0xcc8>)
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	4a0f      	ldr	r2, [pc, #60]	@ (8008388 <HAL_RCC_OscConfig+0xcc8>)
 800834a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800834e:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8008350:	f7fd f818 	bl	8005384 <HAL_GetTick>
 8008354:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8008356:	e008      	b.n	800836a <HAL_RCC_OscConfig+0xcaa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008358:	f7fd f814 	bl	8005384 <HAL_GetTick>
 800835c:	4602      	mov	r2, r0
 800835e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008360:	1ad3      	subs	r3, r2, r3
 8008362:	2b02      	cmp	r3, #2
 8008364:	d901      	bls.n	800836a <HAL_RCC_OscConfig+0xcaa>
          {
            return HAL_TIMEOUT;
 8008366:	2303      	movs	r3, #3
 8008368:	e07f      	b.n	800846a <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800836a:	4b07      	ldr	r3, [pc, #28]	@ (8008388 <HAL_RCC_OscConfig+0xcc8>)
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008372:	2b00      	cmp	r3, #0
 8008374:	d1f0      	bne.n	8008358 <HAL_RCC_OscConfig+0xc98>
          }
        }

        /* Unselect main PLL clock source and disable main PLL outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 8008376:	4b04      	ldr	r3, [pc, #16]	@ (8008388 <HAL_RCC_OscConfig+0xcc8>)
 8008378:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800837a:	4a03      	ldr	r2, [pc, #12]	@ (8008388 <HAL_RCC_OscConfig+0xcc8>)
 800837c:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 8008380:	f023 0303 	bic.w	r3, r3, #3
 8008384:	6293      	str	r3, [r2, #40]	@ 0x28
 8008386:	e06f      	b.n	8008468 <HAL_RCC_OscConfig+0xda8>
 8008388:	46020c00 	.word	0x46020c00
 800838c:	46020800 	.word	0x46020800
 8008390:	80800000 	.word	0x80800000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 8008394:	4b37      	ldr	r3, [pc, #220]	@ (8008474 <HAL_RCC_OscConfig+0xdb4>)
 8008396:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008398:	61fb      	str	r3, [r7, #28]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800839a:	4b36      	ldr	r3, [pc, #216]	@ (8008474 <HAL_RCC_OscConfig+0xdb4>)
 800839c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800839e:	61bb      	str	r3, [r7, #24]
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80083a4:	2b01      	cmp	r3, #1
 80083a6:	d039      	beq.n	800841c <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 80083a8:	69fb      	ldr	r3, [r7, #28]
 80083aa:	f003 0203 	and.w	r2, r3, #3
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80083b2:	429a      	cmp	r2, r3
 80083b4:	d132      	bne.n	800841c <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 80083b6:	69fb      	ldr	r3, [r7, #28]
 80083b8:	0a1b      	lsrs	r3, r3, #8
 80083ba:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80083c2:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 80083c4:	429a      	cmp	r2, r3
 80083c6:	d129      	bne.n	800841c <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 80083c8:	69fb      	ldr	r3, [r7, #28]
 80083ca:	f403 4270 	and.w	r2, r3, #61440	@ 0xf000
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 80083d2:	429a      	cmp	r2, r3
 80083d4:	d122      	bne.n	800841c <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80083d6:	69bb      	ldr	r3, [r7, #24]
 80083d8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80083e0:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 80083e2:	429a      	cmp	r2, r3
 80083e4:	d11a      	bne.n	800841c <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 80083e6:	69bb      	ldr	r3, [r7, #24]
 80083e8:	0a5b      	lsrs	r3, r3, #9
 80083ea:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80083f2:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80083f4:	429a      	cmp	r2, r3
 80083f6:	d111      	bne.n	800841c <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 80083f8:	69bb      	ldr	r3, [r7, #24]
 80083fa:	0c1b      	lsrs	r3, r3, #16
 80083fc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008404:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8008406:	429a      	cmp	r2, r3
 8008408:	d108      	bne.n	800841c <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 800840a:	69bb      	ldr	r3, [r7, #24]
 800840c:	0e1b      	lsrs	r3, r3, #24
 800840e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pRCC_OscInitStruct->PLL.PLLR - 1U)))
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008416:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008418:	429a      	cmp	r2, r3
 800841a:	d001      	beq.n	8008420 <HAL_RCC_OscConfig+0xd60>
      {
        return HAL_ERROR;
 800841c:	2301      	movs	r3, #1
 800841e:	e024      	b.n	800846a <HAL_RCC_OscConfig+0xdaa>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8008420:	4b14      	ldr	r3, [pc, #80]	@ (8008474 <HAL_RCC_OscConfig+0xdb4>)
 8008422:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008424:	08db      	lsrs	r3, r3, #3
 8008426:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pRCC_OscInitStruct->PLL.PLLFRACN))
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 800842e:	429a      	cmp	r2, r3
 8008430:	d01a      	beq.n	8008468 <HAL_RCC_OscConfig+0xda8>
      {
        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN. */
        __HAL_RCC_PLL_FRACN_DISABLE();
 8008432:	4b10      	ldr	r3, [pc, #64]	@ (8008474 <HAL_RCC_OscConfig+0xdb4>)
 8008434:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008436:	4a0f      	ldr	r2, [pc, #60]	@ (8008474 <HAL_RCC_OscConfig+0xdb4>)
 8008438:	f023 0310 	bic.w	r3, r3, #16
 800843c:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800843e:	f7fc ffa1 	bl	8005384 <HAL_GetTick>
 8008442:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait at least 2 CK_REF (PLL1 input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < PLL_FRAC_WAIT_VALUE)
 8008444:	bf00      	nop
 8008446:	f7fc ff9d 	bl	8005384 <HAL_GetTick>
 800844a:	4602      	mov	r2, r0
 800844c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800844e:	4293      	cmp	r3, r2
 8008450:	d0f9      	beq.n	8008446 <HAL_RCC_OscConfig+0xd86>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008456:	4a07      	ldr	r2, [pc, #28]	@ (8008474 <HAL_RCC_OscConfig+0xdb4>)
 8008458:	00db      	lsls	r3, r3, #3
 800845a:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL_FRACN_ENABLE();
 800845c:	4b05      	ldr	r3, [pc, #20]	@ (8008474 <HAL_RCC_OscConfig+0xdb4>)
 800845e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008460:	4a04      	ldr	r2, [pc, #16]	@ (8008474 <HAL_RCC_OscConfig+0xdb4>)
 8008462:	f043 0310 	orr.w	r3, r3, #16
 8008466:	6293      	str	r3, [r2, #40]	@ 0x28
      }
    }
  }
  return HAL_OK;
 8008468:	2300      	movs	r3, #0
}
 800846a:	4618      	mov	r0, r3
 800846c:	3738      	adds	r7, #56	@ 0x38
 800846e:	46bd      	mov	sp, r7
 8008470:	bd80      	pop	{r7, pc}
 8008472:	bf00      	nop
 8008474:	46020c00 	.word	0x46020c00

08008478 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef   *const pRCC_ClkInitStruct, uint32_t FLatency)
{
 8008478:	b580      	push	{r7, lr}
 800847a:	b086      	sub	sp, #24
 800847c:	af00      	add	r7, sp, #0
 800847e:	6078      	str	r0, [r7, #4]
 8008480:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pRCC_ClkInitStruct == NULL)
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	2b00      	cmp	r3, #0
 8008486:	d101      	bne.n	800848c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008488:	2301      	movs	r3, #1
 800848a:	e1d9      	b.n	8008840 <HAL_RCC_ClockConfig+0x3c8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
   must be correctly programmed according to the frequency of the CPU clock
   (HCLK) and the supply voltage of the device */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800848c:	4b9b      	ldr	r3, [pc, #620]	@ (80086fc <HAL_RCC_ClockConfig+0x284>)
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	f003 030f 	and.w	r3, r3, #15
 8008494:	683a      	ldr	r2, [r7, #0]
 8008496:	429a      	cmp	r2, r3
 8008498:	d910      	bls.n	80084bc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800849a:	4b98      	ldr	r3, [pc, #608]	@ (80086fc <HAL_RCC_ClockConfig+0x284>)
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	f023 020f 	bic.w	r2, r3, #15
 80084a2:	4996      	ldr	r1, [pc, #600]	@ (80086fc <HAL_RCC_ClockConfig+0x284>)
 80084a4:	683b      	ldr	r3, [r7, #0]
 80084a6:	4313      	orrs	r3, r2
 80084a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80084aa:	4b94      	ldr	r3, [pc, #592]	@ (80086fc <HAL_RCC_ClockConfig+0x284>)
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	f003 030f 	and.w	r3, r3, #15
 80084b2:	683a      	ldr	r2, [r7, #0]
 80084b4:	429a      	cmp	r2, r3
 80084b6:	d001      	beq.n	80084bc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80084b8:	2301      	movs	r3, #1
 80084ba:	e1c1      	b.n	8008840 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	f003 0310 	and.w	r3, r3, #16
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	d010      	beq.n	80084ea <HAL_RCC_ClockConfig+0x72>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) > (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	695a      	ldr	r2, [r3, #20]
 80084cc:	4b8c      	ldr	r3, [pc, #560]	@ (8008700 <HAL_RCC_ClockConfig+0x288>)
 80084ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80084d0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80084d4:	429a      	cmp	r2, r3
 80084d6:	d908      	bls.n	80084ea <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, pRCC_ClkInitStruct->APB3CLKDivider);
 80084d8:	4b89      	ldr	r3, [pc, #548]	@ (8008700 <HAL_RCC_ClockConfig+0x288>)
 80084da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80084dc:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	695b      	ldr	r3, [r3, #20]
 80084e4:	4986      	ldr	r1, [pc, #536]	@ (8008700 <HAL_RCC_ClockConfig+0x288>)
 80084e6:	4313      	orrs	r3, r2
 80084e8:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	f003 0308 	and.w	r3, r3, #8
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	d012      	beq.n	800851c <HAL_RCC_ClockConfig+0xa4>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	691a      	ldr	r2, [r3, #16]
 80084fa:	4b81      	ldr	r3, [pc, #516]	@ (8008700 <HAL_RCC_ClockConfig+0x288>)
 80084fc:	6a1b      	ldr	r3, [r3, #32]
 80084fe:	091b      	lsrs	r3, r3, #4
 8008500:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8008504:	429a      	cmp	r2, r3
 8008506:	d909      	bls.n	800851c <HAL_RCC_ClockConfig+0xa4>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8008508:	4b7d      	ldr	r3, [pc, #500]	@ (8008700 <HAL_RCC_ClockConfig+0x288>)
 800850a:	6a1b      	ldr	r3, [r3, #32]
 800850c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	691b      	ldr	r3, [r3, #16]
 8008514:	011b      	lsls	r3, r3, #4
 8008516:	497a      	ldr	r1, [pc, #488]	@ (8008700 <HAL_RCC_ClockConfig+0x288>)
 8008518:	4313      	orrs	r3, r2
 800851a:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	f003 0304 	and.w	r3, r3, #4
 8008524:	2b00      	cmp	r3, #0
 8008526:	d010      	beq.n	800854a <HAL_RCC_ClockConfig+0xd2>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	68da      	ldr	r2, [r3, #12]
 800852c:	4b74      	ldr	r3, [pc, #464]	@ (8008700 <HAL_RCC_ClockConfig+0x288>)
 800852e:	6a1b      	ldr	r3, [r3, #32]
 8008530:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8008534:	429a      	cmp	r2, r3
 8008536:	d908      	bls.n	800854a <HAL_RCC_ClockConfig+0xd2>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8008538:	4b71      	ldr	r3, [pc, #452]	@ (8008700 <HAL_RCC_ClockConfig+0x288>)
 800853a:	6a1b      	ldr	r3, [r3, #32]
 800853c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	68db      	ldr	r3, [r3, #12]
 8008544:	496e      	ldr	r1, [pc, #440]	@ (8008700 <HAL_RCC_ClockConfig+0x288>)
 8008546:	4313      	orrs	r3, r2
 8008548:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	f003 0302 	and.w	r3, r3, #2
 8008552:	2b00      	cmp	r3, #0
 8008554:	d010      	beq.n	8008578 <HAL_RCC_ClockConfig+0x100>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	689a      	ldr	r2, [r3, #8]
 800855a:	4b69      	ldr	r3, [pc, #420]	@ (8008700 <HAL_RCC_ClockConfig+0x288>)
 800855c:	6a1b      	ldr	r3, [r3, #32]
 800855e:	f003 030f 	and.w	r3, r3, #15
 8008562:	429a      	cmp	r2, r3
 8008564:	d908      	bls.n	8008578 <HAL_RCC_ClockConfig+0x100>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 8008566:	4b66      	ldr	r3, [pc, #408]	@ (8008700 <HAL_RCC_ClockConfig+0x288>)
 8008568:	6a1b      	ldr	r3, [r3, #32]
 800856a:	f023 020f 	bic.w	r2, r3, #15
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	689b      	ldr	r3, [r3, #8]
 8008572:	4963      	ldr	r1, [pc, #396]	@ (8008700 <HAL_RCC_ClockConfig+0x288>)
 8008574:	4313      	orrs	r3, r2
 8008576:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	f003 0301 	and.w	r3, r3, #1
 8008580:	2b00      	cmp	r3, #0
 8008582:	f000 80d2 	beq.w	800872a <HAL_RCC_ClockConfig+0x2b2>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pRCC_ClkInitStruct->SYSCLKSource));
    FlagStatus  pwrclkchanged = RESET;
 8008586:	2300      	movs	r3, #0
 8008588:	75fb      	strb	r3, [r7, #23]

    /* PLL is selected as System Clock Source */
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	685b      	ldr	r3, [r3, #4]
 800858e:	2b03      	cmp	r3, #3
 8008590:	d143      	bne.n	800861a <HAL_RCC_ClockConfig+0x1a2>
    {
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008592:	4b5b      	ldr	r3, [pc, #364]	@ (8008700 <HAL_RCC_ClockConfig+0x288>)
 8008594:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008598:	f003 0304 	and.w	r3, r3, #4
 800859c:	2b00      	cmp	r3, #0
 800859e:	d110      	bne.n	80085c2 <HAL_RCC_ClockConfig+0x14a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80085a0:	4b57      	ldr	r3, [pc, #348]	@ (8008700 <HAL_RCC_ClockConfig+0x288>)
 80085a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80085a6:	4a56      	ldr	r2, [pc, #344]	@ (8008700 <HAL_RCC_ClockConfig+0x288>)
 80085a8:	f043 0304 	orr.w	r3, r3, #4
 80085ac:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80085b0:	4b53      	ldr	r3, [pc, #332]	@ (8008700 <HAL_RCC_ClockConfig+0x288>)
 80085b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80085b6:	f003 0304 	and.w	r3, r3, #4
 80085ba:	60bb      	str	r3, [r7, #8]
 80085bc:	68bb      	ldr	r3, [r7, #8]
        pwrclkchanged = SET;
 80085be:	2301      	movs	r3, #1
 80085c0:	75fb      	strb	r3, [r7, #23]
      }
      tickstart = HAL_GetTick();
 80085c2:	f7fc fedf 	bl	8005384 <HAL_GetTick>
 80085c6:	6138      	str	r0, [r7, #16]
      /* Check if EPOD is enabled */
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 80085c8:	4b4e      	ldr	r3, [pc, #312]	@ (8008704 <HAL_RCC_ClockConfig+0x28c>)
 80085ca:	68db      	ldr	r3, [r3, #12]
 80085cc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	d00f      	beq.n	80085f4 <HAL_RCC_ClockConfig+0x17c>
      {
        /* Wait till BOOST is ready */
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 80085d4:	e008      	b.n	80085e8 <HAL_RCC_ClockConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > EPOD_TIMEOUT_VALUE)
 80085d6:	f7fc fed5 	bl	8005384 <HAL_GetTick>
 80085da:	4602      	mov	r2, r0
 80085dc:	693b      	ldr	r3, [r7, #16]
 80085de:	1ad3      	subs	r3, r2, r3
 80085e0:	2b02      	cmp	r3, #2
 80085e2:	d901      	bls.n	80085e8 <HAL_RCC_ClockConfig+0x170>
          {
            return HAL_TIMEOUT;
 80085e4:	2303      	movs	r3, #3
 80085e6:	e12b      	b.n	8008840 <HAL_RCC_ClockConfig+0x3c8>
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 80085e8:	4b46      	ldr	r3, [pc, #280]	@ (8008704 <HAL_RCC_ClockConfig+0x28c>)
 80085ea:	68db      	ldr	r3, [r3, #12]
 80085ec:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d0f0      	beq.n	80085d6 <HAL_RCC_ClockConfig+0x15e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80085f4:	7dfb      	ldrb	r3, [r7, #23]
 80085f6:	2b01      	cmp	r3, #1
 80085f8:	d107      	bne.n	800860a <HAL_RCC_ClockConfig+0x192>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80085fa:	4b41      	ldr	r3, [pc, #260]	@ (8008700 <HAL_RCC_ClockConfig+0x288>)
 80085fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008600:	4a3f      	ldr	r2, [pc, #252]	@ (8008700 <HAL_RCC_ClockConfig+0x288>)
 8008602:	f023 0304 	bic.w	r3, r3, #4
 8008606:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
      }

      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800860a:	4b3d      	ldr	r3, [pc, #244]	@ (8008700 <HAL_RCC_ClockConfig+0x288>)
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008612:	2b00      	cmp	r3, #0
 8008614:	d121      	bne.n	800865a <HAL_RCC_ClockConfig+0x1e2>
      {
        return HAL_ERROR;
 8008616:	2301      	movs	r3, #1
 8008618:	e112      	b.n	8008840 <HAL_RCC_ClockConfig+0x3c8>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	685b      	ldr	r3, [r3, #4]
 800861e:	2b02      	cmp	r3, #2
 8008620:	d107      	bne.n	8008632 <HAL_RCC_ClockConfig+0x1ba>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008622:	4b37      	ldr	r3, [pc, #220]	@ (8008700 <HAL_RCC_ClockConfig+0x288>)
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800862a:	2b00      	cmp	r3, #0
 800862c:	d115      	bne.n	800865a <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 800862e:	2301      	movs	r3, #1
 8008630:	e106      	b.n	8008840 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	685b      	ldr	r3, [r3, #4]
 8008636:	2b00      	cmp	r3, #0
 8008638:	d107      	bne.n	800864a <HAL_RCC_ClockConfig+0x1d2>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 800863a:	4b31      	ldr	r3, [pc, #196]	@ (8008700 <HAL_RCC_ClockConfig+0x288>)
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	f003 0304 	and.w	r3, r3, #4
 8008642:	2b00      	cmp	r3, #0
 8008644:	d109      	bne.n	800865a <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8008646:	2301      	movs	r3, #1
 8008648:	e0fa      	b.n	8008840 <HAL_RCC_ClockConfig+0x3c8>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800864a:	4b2d      	ldr	r3, [pc, #180]	@ (8008700 <HAL_RCC_ClockConfig+0x288>)
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008652:	2b00      	cmp	r3, #0
 8008654:	d101      	bne.n	800865a <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8008656:	2301      	movs	r3, #1
 8008658:	e0f2      	b.n	8008840 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 800865a:	4b29      	ldr	r3, [pc, #164]	@ (8008700 <HAL_RCC_ClockConfig+0x288>)
 800865c:	69db      	ldr	r3, [r3, #28]
 800865e:	f023 0203 	bic.w	r2, r3, #3
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	685b      	ldr	r3, [r3, #4]
 8008666:	4926      	ldr	r1, [pc, #152]	@ (8008700 <HAL_RCC_ClockConfig+0x288>)
 8008668:	4313      	orrs	r3, r2
 800866a:	61cb      	str	r3, [r1, #28]

    tickstart = HAL_GetTick();
 800866c:	f7fc fe8a 	bl	8005384 <HAL_GetTick>
 8008670:	6138      	str	r0, [r7, #16]

    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	685b      	ldr	r3, [r3, #4]
 8008676:	2b03      	cmp	r3, #3
 8008678:	d112      	bne.n	80086a0 <HAL_RCC_ClockConfig+0x228>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800867a:	e00a      	b.n	8008692 <HAL_RCC_ClockConfig+0x21a>
      {
        if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800867c:	f7fc fe82 	bl	8005384 <HAL_GetTick>
 8008680:	4602      	mov	r2, r0
 8008682:	693b      	ldr	r3, [r7, #16]
 8008684:	1ad3      	subs	r3, r2, r3
 8008686:	f241 3288 	movw	r2, #5000	@ 0x1388
 800868a:	4293      	cmp	r3, r2
 800868c:	d901      	bls.n	8008692 <HAL_RCC_ClockConfig+0x21a>
        {
          return HAL_TIMEOUT;
 800868e:	2303      	movs	r3, #3
 8008690:	e0d6      	b.n	8008840 <HAL_RCC_ClockConfig+0x3c8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008692:	4b1b      	ldr	r3, [pc, #108]	@ (8008700 <HAL_RCC_ClockConfig+0x288>)
 8008694:	69db      	ldr	r3, [r3, #28]
 8008696:	f003 030c 	and.w	r3, r3, #12
 800869a:	2b0c      	cmp	r3, #12
 800869c:	d1ee      	bne.n	800867c <HAL_RCC_ClockConfig+0x204>
 800869e:	e044      	b.n	800872a <HAL_RCC_ClockConfig+0x2b2>
        }
      }
    }
    else
    {
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	685b      	ldr	r3, [r3, #4]
 80086a4:	2b02      	cmp	r3, #2
 80086a6:	d112      	bne.n	80086ce <HAL_RCC_ClockConfig+0x256>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80086a8:	e00a      	b.n	80086c0 <HAL_RCC_ClockConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80086aa:	f7fc fe6b 	bl	8005384 <HAL_GetTick>
 80086ae:	4602      	mov	r2, r0
 80086b0:	693b      	ldr	r3, [r7, #16]
 80086b2:	1ad3      	subs	r3, r2, r3
 80086b4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80086b8:	4293      	cmp	r3, r2
 80086ba:	d901      	bls.n	80086c0 <HAL_RCC_ClockConfig+0x248>
          {
            return HAL_TIMEOUT;
 80086bc:	2303      	movs	r3, #3
 80086be:	e0bf      	b.n	8008840 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80086c0:	4b0f      	ldr	r3, [pc, #60]	@ (8008700 <HAL_RCC_ClockConfig+0x288>)
 80086c2:	69db      	ldr	r3, [r3, #28]
 80086c4:	f003 030c 	and.w	r3, r3, #12
 80086c8:	2b08      	cmp	r3, #8
 80086ca:	d1ee      	bne.n	80086aa <HAL_RCC_ClockConfig+0x232>
 80086cc:	e02d      	b.n	800872a <HAL_RCC_ClockConfig+0x2b2>
          }
        }
      }
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	685b      	ldr	r3, [r3, #4]
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d123      	bne.n	800871e <HAL_RCC_ClockConfig+0x2a6>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80086d6:	e00a      	b.n	80086ee <HAL_RCC_ClockConfig+0x276>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80086d8:	f7fc fe54 	bl	8005384 <HAL_GetTick>
 80086dc:	4602      	mov	r2, r0
 80086de:	693b      	ldr	r3, [r7, #16]
 80086e0:	1ad3      	subs	r3, r2, r3
 80086e2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80086e6:	4293      	cmp	r3, r2
 80086e8:	d901      	bls.n	80086ee <HAL_RCC_ClockConfig+0x276>
          {
            return HAL_TIMEOUT;
 80086ea:	2303      	movs	r3, #3
 80086ec:	e0a8      	b.n	8008840 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80086ee:	4b04      	ldr	r3, [pc, #16]	@ (8008700 <HAL_RCC_ClockConfig+0x288>)
 80086f0:	69db      	ldr	r3, [r3, #28]
 80086f2:	f003 030c 	and.w	r3, r3, #12
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d1ee      	bne.n	80086d8 <HAL_RCC_ClockConfig+0x260>
 80086fa:	e016      	b.n	800872a <HAL_RCC_ClockConfig+0x2b2>
 80086fc:	40022000 	.word	0x40022000
 8008700:	46020c00 	.word	0x46020c00
 8008704:	46020800 	.word	0x46020800
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008708:	f7fc fe3c 	bl	8005384 <HAL_GetTick>
 800870c:	4602      	mov	r2, r0
 800870e:	693b      	ldr	r3, [r7, #16]
 8008710:	1ad3      	subs	r3, r2, r3
 8008712:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008716:	4293      	cmp	r3, r2
 8008718:	d901      	bls.n	800871e <HAL_RCC_ClockConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 800871a:	2303      	movs	r3, #3
 800871c:	e090      	b.n	8008840 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800871e:	4b4a      	ldr	r3, [pc, #296]	@ (8008848 <HAL_RCC_ClockConfig+0x3d0>)
 8008720:	69db      	ldr	r3, [r3, #28]
 8008722:	f003 030c 	and.w	r3, r3, #12
 8008726:	2b04      	cmp	r3, #4
 8008728:	d1ee      	bne.n	8008708 <HAL_RCC_ClockConfig+0x290>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	f003 0302 	and.w	r3, r3, #2
 8008732:	2b00      	cmp	r3, #0
 8008734:	d010      	beq.n	8008758 <HAL_RCC_ClockConfig+0x2e0>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	689a      	ldr	r2, [r3, #8]
 800873a:	4b43      	ldr	r3, [pc, #268]	@ (8008848 <HAL_RCC_ClockConfig+0x3d0>)
 800873c:	6a1b      	ldr	r3, [r3, #32]
 800873e:	f003 030f 	and.w	r3, r3, #15
 8008742:	429a      	cmp	r2, r3
 8008744:	d208      	bcs.n	8008758 <HAL_RCC_ClockConfig+0x2e0>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 8008746:	4b40      	ldr	r3, [pc, #256]	@ (8008848 <HAL_RCC_ClockConfig+0x3d0>)
 8008748:	6a1b      	ldr	r3, [r3, #32]
 800874a:	f023 020f 	bic.w	r2, r3, #15
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	689b      	ldr	r3, [r3, #8]
 8008752:	493d      	ldr	r1, [pc, #244]	@ (8008848 <HAL_RCC_ClockConfig+0x3d0>)
 8008754:	4313      	orrs	r3, r2
 8008756:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008758:	4b3c      	ldr	r3, [pc, #240]	@ (800884c <HAL_RCC_ClockConfig+0x3d4>)
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	f003 030f 	and.w	r3, r3, #15
 8008760:	683a      	ldr	r2, [r7, #0]
 8008762:	429a      	cmp	r2, r3
 8008764:	d210      	bcs.n	8008788 <HAL_RCC_ClockConfig+0x310>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008766:	4b39      	ldr	r3, [pc, #228]	@ (800884c <HAL_RCC_ClockConfig+0x3d4>)
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	f023 020f 	bic.w	r2, r3, #15
 800876e:	4937      	ldr	r1, [pc, #220]	@ (800884c <HAL_RCC_ClockConfig+0x3d4>)
 8008770:	683b      	ldr	r3, [r7, #0]
 8008772:	4313      	orrs	r3, r2
 8008774:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008776:	4b35      	ldr	r3, [pc, #212]	@ (800884c <HAL_RCC_ClockConfig+0x3d4>)
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	f003 030f 	and.w	r3, r3, #15
 800877e:	683a      	ldr	r2, [r7, #0]
 8008780:	429a      	cmp	r2, r3
 8008782:	d001      	beq.n	8008788 <HAL_RCC_ClockConfig+0x310>
    {
      return HAL_ERROR;
 8008784:	2301      	movs	r3, #1
 8008786:	e05b      	b.n	8008840 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	f003 0304 	and.w	r3, r3, #4
 8008790:	2b00      	cmp	r3, #0
 8008792:	d010      	beq.n	80087b6 <HAL_RCC_ClockConfig+0x33e>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	68da      	ldr	r2, [r3, #12]
 8008798:	4b2b      	ldr	r3, [pc, #172]	@ (8008848 <HAL_RCC_ClockConfig+0x3d0>)
 800879a:	6a1b      	ldr	r3, [r3, #32]
 800879c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80087a0:	429a      	cmp	r2, r3
 80087a2:	d208      	bcs.n	80087b6 <HAL_RCC_ClockConfig+0x33e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 80087a4:	4b28      	ldr	r3, [pc, #160]	@ (8008848 <HAL_RCC_ClockConfig+0x3d0>)
 80087a6:	6a1b      	ldr	r3, [r3, #32]
 80087a8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	68db      	ldr	r3, [r3, #12]
 80087b0:	4925      	ldr	r1, [pc, #148]	@ (8008848 <HAL_RCC_ClockConfig+0x3d0>)
 80087b2:	4313      	orrs	r3, r2
 80087b4:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	f003 0308 	and.w	r3, r3, #8
 80087be:	2b00      	cmp	r3, #0
 80087c0:	d012      	beq.n	80087e8 <HAL_RCC_ClockConfig+0x370>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	691a      	ldr	r2, [r3, #16]
 80087c6:	4b20      	ldr	r3, [pc, #128]	@ (8008848 <HAL_RCC_ClockConfig+0x3d0>)
 80087c8:	6a1b      	ldr	r3, [r3, #32]
 80087ca:	091b      	lsrs	r3, r3, #4
 80087cc:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80087d0:	429a      	cmp	r2, r3
 80087d2:	d209      	bcs.n	80087e8 <HAL_RCC_ClockConfig+0x370>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 80087d4:	4b1c      	ldr	r3, [pc, #112]	@ (8008848 <HAL_RCC_ClockConfig+0x3d0>)
 80087d6:	6a1b      	ldr	r3, [r3, #32]
 80087d8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	691b      	ldr	r3, [r3, #16]
 80087e0:	011b      	lsls	r3, r3, #4
 80087e2:	4919      	ldr	r1, [pc, #100]	@ (8008848 <HAL_RCC_ClockConfig+0x3d0>)
 80087e4:	4313      	orrs	r3, r2
 80087e6:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	f003 0310 	and.w	r3, r3, #16
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	d010      	beq.n	8008816 <HAL_RCC_ClockConfig+0x39e>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) < (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	695a      	ldr	r2, [r3, #20]
 80087f8:	4b13      	ldr	r3, [pc, #76]	@ (8008848 <HAL_RCC_ClockConfig+0x3d0>)
 80087fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80087fc:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8008800:	429a      	cmp	r2, r3
 8008802:	d208      	bcs.n	8008816 <HAL_RCC_ClockConfig+0x39e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, (pRCC_ClkInitStruct->APB3CLKDivider));
 8008804:	4b10      	ldr	r3, [pc, #64]	@ (8008848 <HAL_RCC_ClockConfig+0x3d0>)
 8008806:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008808:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	695b      	ldr	r3, [r3, #20]
 8008810:	490d      	ldr	r1, [pc, #52]	@ (8008848 <HAL_RCC_ClockConfig+0x3d0>)
 8008812:	4313      	orrs	r3, r2
 8008814:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8008816:	f000 f821 	bl	800885c <HAL_RCC_GetSysClockFreq>
 800881a:	4602      	mov	r2, r0
 800881c:	4b0a      	ldr	r3, [pc, #40]	@ (8008848 <HAL_RCC_ClockConfig+0x3d0>)
 800881e:	6a1b      	ldr	r3, [r3, #32]
 8008820:	f003 030f 	and.w	r3, r3, #15
 8008824:	490a      	ldr	r1, [pc, #40]	@ (8008850 <HAL_RCC_ClockConfig+0x3d8>)
 8008826:	5ccb      	ldrb	r3, [r1, r3]
 8008828:	fa22 f303 	lsr.w	r3, r2, r3
 800882c:	4a09      	ldr	r2, [pc, #36]	@ (8008854 <HAL_RCC_ClockConfig+0x3dc>)
 800882e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8008830:	4b09      	ldr	r3, [pc, #36]	@ (8008858 <HAL_RCC_ClockConfig+0x3e0>)
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	4618      	mov	r0, r3
 8008836:	f7fc f84d 	bl	80048d4 <HAL_InitTick>
 800883a:	4603      	mov	r3, r0
 800883c:	73fb      	strb	r3, [r7, #15]

  return status;
 800883e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008840:	4618      	mov	r0, r3
 8008842:	3718      	adds	r7, #24
 8008844:	46bd      	mov	sp, r7
 8008846:	bd80      	pop	{r7, pc}
 8008848:	46020c00 	.word	0x46020c00
 800884c:	40022000 	.word	0x40022000
 8008850:	08011abc 	.word	0x08011abc
 8008854:	2000000c 	.word	0x2000000c
 8008858:	2000002c 	.word	0x2000002c

0800885c <HAL_RCC_GetSysClockFreq>:
  * @note   Each time SYSCLK changes, this function must be called to update the
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800885c:	b5b0      	push	{r4, r5, r7, lr}
 800885e:	b08a      	sub	sp, #40	@ 0x28
 8008860:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 8008862:	2300      	movs	r3, #0
 8008864:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pllsource;
  uint32_t pllr;
  uint32_t pllm;
  uint32_t pllfracen;
  uint32_t sysclockfreq = 0U;
 8008866:	2300      	movs	r3, #0
 8008868:	623b      	str	r3, [r7, #32]
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  float_t fracn1;
  float_t pllvco;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800886a:	4b83      	ldr	r3, [pc, #524]	@ (8008a78 <HAL_RCC_GetSysClockFreq+0x21c>)
 800886c:	69db      	ldr	r3, [r3, #28]
 800886e:	f003 030c 	and.w	r3, r3, #12
 8008872:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8008874:	4b80      	ldr	r3, [pc, #512]	@ (8008a78 <HAL_RCC_GetSysClockFreq+0x21c>)
 8008876:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008878:	f003 0303 	and.w	r3, r3, #3
 800887c:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800887e:	69bb      	ldr	r3, [r7, #24]
 8008880:	2b00      	cmp	r3, #0
 8008882:	d005      	beq.n	8008890 <HAL_RCC_GetSysClockFreq+0x34>
 8008884:	69bb      	ldr	r3, [r7, #24]
 8008886:	2b0c      	cmp	r3, #12
 8008888:	d121      	bne.n	80088ce <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800888a:	697b      	ldr	r3, [r7, #20]
 800888c:	2b01      	cmp	r3, #1
 800888e:	d11e      	bne.n	80088ce <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 8008890:	4b79      	ldr	r3, [pc, #484]	@ (8008a78 <HAL_RCC_GetSysClockFreq+0x21c>)
 8008892:	689b      	ldr	r3, [r3, #8]
 8008894:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008898:	2b00      	cmp	r3, #0
 800889a:	d107      	bne.n	80088ac <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 800889c:	4b76      	ldr	r3, [pc, #472]	@ (8008a78 <HAL_RCC_GetSysClockFreq+0x21c>)
 800889e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80088a2:	0b1b      	lsrs	r3, r3, #12
 80088a4:	f003 030f 	and.w	r3, r3, #15
 80088a8:	627b      	str	r3, [r7, #36]	@ 0x24
 80088aa:	e005      	b.n	80088b8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 80088ac:	4b72      	ldr	r3, [pc, #456]	@ (8008a78 <HAL_RCC_GetSysClockFreq+0x21c>)
 80088ae:	689b      	ldr	r3, [r3, #8]
 80088b0:	0f1b      	lsrs	r3, r3, #28
 80088b2:	f003 030f 	and.w	r3, r3, #15
 80088b6:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80088b8:	4a70      	ldr	r2, [pc, #448]	@ (8008a7c <HAL_RCC_GetSysClockFreq+0x220>)
 80088ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80088c0:	627b      	str	r3, [r7, #36]	@ 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80088c2:	69bb      	ldr	r3, [r7, #24]
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	d110      	bne.n	80088ea <HAL_RCC_GetSysClockFreq+0x8e>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80088c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088ca:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80088cc:	e00d      	b.n	80088ea <HAL_RCC_GetSysClockFreq+0x8e>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80088ce:	4b6a      	ldr	r3, [pc, #424]	@ (8008a78 <HAL_RCC_GetSysClockFreq+0x21c>)
 80088d0:	69db      	ldr	r3, [r3, #28]
 80088d2:	f003 030c 	and.w	r3, r3, #12
 80088d6:	2b04      	cmp	r3, #4
 80088d8:	d102      	bne.n	80088e0 <HAL_RCC_GetSysClockFreq+0x84>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80088da:	4b69      	ldr	r3, [pc, #420]	@ (8008a80 <HAL_RCC_GetSysClockFreq+0x224>)
 80088dc:	623b      	str	r3, [r7, #32]
 80088de:	e004      	b.n	80088ea <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80088e0:	69bb      	ldr	r3, [r7, #24]
 80088e2:	2b08      	cmp	r3, #8
 80088e4:	d101      	bne.n	80088ea <HAL_RCC_GetSysClockFreq+0x8e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80088e6:	4b66      	ldr	r3, [pc, #408]	@ (8008a80 <HAL_RCC_GetSysClockFreq+0x224>)
 80088e8:	623b      	str	r3, [r7, #32]
  else
  {
    /* Nothing to do */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80088ea:	69bb      	ldr	r3, [r7, #24]
 80088ec:	2b0c      	cmp	r3, #12
 80088ee:	f040 80bd 	bne.w	8008a6c <HAL_RCC_GetSysClockFreq+0x210>
  {
    /* PLL used as system clock  source
       PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
       SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 80088f2:	4b61      	ldr	r3, [pc, #388]	@ (8008a78 <HAL_RCC_GetSysClockFreq+0x21c>)
 80088f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80088f6:	f003 0303 	and.w	r3, r3, #3
 80088fa:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 80088fc:	4b5e      	ldr	r3, [pc, #376]	@ (8008a78 <HAL_RCC_GetSysClockFreq+0x21c>)
 80088fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008900:	0a1b      	lsrs	r3, r3, #8
 8008902:	f003 030f 	and.w	r3, r3, #15
 8008906:	3301      	adds	r3, #1
 8008908:	60fb      	str	r3, [r7, #12]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 800890a:	4b5b      	ldr	r3, [pc, #364]	@ (8008a78 <HAL_RCC_GetSysClockFreq+0x21c>)
 800890c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800890e:	091b      	lsrs	r3, r3, #4
 8008910:	f003 0301 	and.w	r3, r3, #1
 8008914:	60bb      	str	r3, [r7, #8]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8008916:	4b58      	ldr	r3, [pc, #352]	@ (8008a78 <HAL_RCC_GetSysClockFreq+0x21c>)
 8008918:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800891a:	08db      	lsrs	r3, r3, #3
 800891c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008920:	68ba      	ldr	r2, [r7, #8]
 8008922:	fb02 f303 	mul.w	r3, r2, r3
 8008926:	4618      	mov	r0, r3
 8008928:	f7f8 fa48 	bl	8000dbc <__aeabi_ui2f>
 800892c:	4603      	mov	r3, r0
 800892e:	607b      	str	r3, [r7, #4]
                                              RCC_PLL1FRACR_PLL1FRACN_Pos));

    switch (pllsource)
 8008930:	693b      	ldr	r3, [r7, #16]
 8008932:	2b02      	cmp	r3, #2
 8008934:	d003      	beq.n	800893e <HAL_RCC_GetSysClockFreq+0xe2>
 8008936:	693b      	ldr	r3, [r7, #16]
 8008938:	2b03      	cmp	r3, #3
 800893a:	d02a      	beq.n	8008992 <HAL_RCC_GetSysClockFreq+0x136>
 800893c:	e053      	b.n	80089e6 <HAL_RCC_GetSysClockFreq+0x18a>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800893e:	68f8      	ldr	r0, [r7, #12]
 8008940:	f7f8 fa3c 	bl	8000dbc <__aeabi_ui2f>
 8008944:	4603      	mov	r3, r0
 8008946:	4619      	mov	r1, r3
 8008948:	484e      	ldr	r0, [pc, #312]	@ (8008a84 <HAL_RCC_GetSysClockFreq+0x228>)
 800894a:	f7f8 fb43 	bl	8000fd4 <__aeabi_fdiv>
 800894e:	4603      	mov	r3, r0
 8008950:	461d      	mov	r5, r3
 8008952:	4b49      	ldr	r3, [pc, #292]	@ (8008a78 <HAL_RCC_GetSysClockFreq+0x21c>)
 8008954:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008956:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800895a:	4618      	mov	r0, r3
 800895c:	f7f8 fa2e 	bl	8000dbc <__aeabi_ui2f>
 8008960:	4604      	mov	r4, r0
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8008962:	f04f 418c 	mov.w	r1, #1174405120	@ 0x46000000
 8008966:	6878      	ldr	r0, [r7, #4]
 8008968:	f7f8 fb34 	bl	8000fd4 <__aeabi_fdiv>
 800896c:	4603      	mov	r3, r0
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800896e:	4619      	mov	r1, r3
 8008970:	4620      	mov	r0, r4
 8008972:	f7f8 f973 	bl	8000c5c <__addsf3>
 8008976:	4603      	mov	r3, r0
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8008978:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 800897c:	4618      	mov	r0, r3
 800897e:	f7f8 f96d 	bl	8000c5c <__addsf3>
 8008982:	4603      	mov	r3, r0
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8008984:	4619      	mov	r1, r3
 8008986:	4628      	mov	r0, r5
 8008988:	f7f8 fa70 	bl	8000e6c <__aeabi_fmul>
 800898c:	4603      	mov	r3, r0
 800898e:	61fb      	str	r3, [r7, #28]
        break;
 8008990:	e057      	b.n	8008a42 <HAL_RCC_GetSysClockFreq+0x1e6>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8008992:	68f8      	ldr	r0, [r7, #12]
 8008994:	f7f8 fa12 	bl	8000dbc <__aeabi_ui2f>
 8008998:	4603      	mov	r3, r0
 800899a:	4619      	mov	r1, r3
 800899c:	4839      	ldr	r0, [pc, #228]	@ (8008a84 <HAL_RCC_GetSysClockFreq+0x228>)
 800899e:	f7f8 fb19 	bl	8000fd4 <__aeabi_fdiv>
 80089a2:	4603      	mov	r3, r0
 80089a4:	461d      	mov	r5, r3
 80089a6:	4b34      	ldr	r3, [pc, #208]	@ (8008a78 <HAL_RCC_GetSysClockFreq+0x21c>)
 80089a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80089aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80089ae:	4618      	mov	r0, r3
 80089b0:	f7f8 fa04 	bl	8000dbc <__aeabi_ui2f>
 80089b4:	4604      	mov	r4, r0
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 80089b6:	f04f 418c 	mov.w	r1, #1174405120	@ 0x46000000
 80089ba:	6878      	ldr	r0, [r7, #4]
 80089bc:	f7f8 fb0a 	bl	8000fd4 <__aeabi_fdiv>
 80089c0:	4603      	mov	r3, r0
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80089c2:	4619      	mov	r1, r3
 80089c4:	4620      	mov	r0, r4
 80089c6:	f7f8 f949 	bl	8000c5c <__addsf3>
 80089ca:	4603      	mov	r3, r0
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 80089cc:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 80089d0:	4618      	mov	r0, r3
 80089d2:	f7f8 f943 	bl	8000c5c <__addsf3>
 80089d6:	4603      	mov	r3, r0
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80089d8:	4619      	mov	r1, r3
 80089da:	4628      	mov	r0, r5
 80089dc:	f7f8 fa46 	bl	8000e6c <__aeabi_fmul>
 80089e0:	4603      	mov	r3, r0
 80089e2:	61fb      	str	r3, [r7, #28]
        break;
 80089e4:	e02d      	b.n	8008a42 <HAL_RCC_GetSysClockFreq+0x1e6>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80089e6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80089e8:	f7f8 f9e8 	bl	8000dbc <__aeabi_ui2f>
 80089ec:	4604      	mov	r4, r0
 80089ee:	68f8      	ldr	r0, [r7, #12]
 80089f0:	f7f8 f9e4 	bl	8000dbc <__aeabi_ui2f>
 80089f4:	4603      	mov	r3, r0
 80089f6:	4619      	mov	r1, r3
 80089f8:	4620      	mov	r0, r4
 80089fa:	f7f8 faeb 	bl	8000fd4 <__aeabi_fdiv>
 80089fe:	4603      	mov	r3, r0
 8008a00:	461d      	mov	r5, r3
 8008a02:	4b1d      	ldr	r3, [pc, #116]	@ (8008a78 <HAL_RCC_GetSysClockFreq+0x21c>)
 8008a04:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008a06:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008a0a:	4618      	mov	r0, r3
 8008a0c:	f7f8 f9d6 	bl	8000dbc <__aeabi_ui2f>
 8008a10:	4604      	mov	r4, r0
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8008a12:	f04f 418c 	mov.w	r1, #1174405120	@ 0x46000000
 8008a16:	6878      	ldr	r0, [r7, #4]
 8008a18:	f7f8 fadc 	bl	8000fd4 <__aeabi_fdiv>
 8008a1c:	4603      	mov	r3, r0
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8008a1e:	4619      	mov	r1, r3
 8008a20:	4620      	mov	r0, r4
 8008a22:	f7f8 f91b 	bl	8000c5c <__addsf3>
 8008a26:	4603      	mov	r3, r0
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8008a28:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8008a2c:	4618      	mov	r0, r3
 8008a2e:	f7f8 f915 	bl	8000c5c <__addsf3>
 8008a32:	4603      	mov	r3, r0
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8008a34:	4619      	mov	r1, r3
 8008a36:	4628      	mov	r0, r5
 8008a38:	f7f8 fa18 	bl	8000e6c <__aeabi_fmul>
 8008a3c:	4603      	mov	r3, r0
 8008a3e:	61fb      	str	r3, [r7, #28]
        break;
 8008a40:	bf00      	nop
    }

    pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 8008a42:	4b0d      	ldr	r3, [pc, #52]	@ (8008a78 <HAL_RCC_GetSysClockFreq+0x21c>)
 8008a44:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008a46:	0e1b      	lsrs	r3, r3, #24
 8008a48:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008a4c:	3301      	adds	r3, #1
 8008a4e:	603b      	str	r3, [r7, #0]
    sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 8008a50:	6838      	ldr	r0, [r7, #0]
 8008a52:	f7f8 f9b3 	bl	8000dbc <__aeabi_ui2f>
 8008a56:	4603      	mov	r3, r0
 8008a58:	4619      	mov	r1, r3
 8008a5a:	69f8      	ldr	r0, [r7, #28]
 8008a5c:	f7f8 faba 	bl	8000fd4 <__aeabi_fdiv>
 8008a60:	4603      	mov	r3, r0
 8008a62:	4618      	mov	r0, r3
 8008a64:	f7f8 fb52 	bl	800110c <__aeabi_f2uiz>
 8008a68:	4603      	mov	r3, r0
 8008a6a:	623b      	str	r3, [r7, #32]
  }

  return sysclockfreq;
 8008a6c:	6a3b      	ldr	r3, [r7, #32]
}
 8008a6e:	4618      	mov	r0, r3
 8008a70:	3728      	adds	r7, #40	@ 0x28
 8008a72:	46bd      	mov	sp, r7
 8008a74:	bdb0      	pop	{r4, r5, r7, pc}
 8008a76:	bf00      	nop
 8008a78:	46020c00 	.word	0x46020c00
 8008a7c:	08011ad4 	.word	0x08011ad4
 8008a80:	00f42400 	.word	0x00f42400
 8008a84:	4b742400 	.word	0x4b742400

08008a88 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008a88:	b580      	push	{r7, lr}
 8008a8a:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8008a8c:	f7ff fee6 	bl	800885c <HAL_RCC_GetSysClockFreq>
 8008a90:	4602      	mov	r2, r0
 8008a92:	4b07      	ldr	r3, [pc, #28]	@ (8008ab0 <HAL_RCC_GetHCLKFreq+0x28>)
 8008a94:	6a1b      	ldr	r3, [r3, #32]
 8008a96:	f003 030f 	and.w	r3, r3, #15
 8008a9a:	4906      	ldr	r1, [pc, #24]	@ (8008ab4 <HAL_RCC_GetHCLKFreq+0x2c>)
 8008a9c:	5ccb      	ldrb	r3, [r1, r3]
 8008a9e:	fa22 f303 	lsr.w	r3, r2, r3
 8008aa2:	4a05      	ldr	r2, [pc, #20]	@ (8008ab8 <HAL_RCC_GetHCLKFreq+0x30>)
 8008aa4:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 8008aa6:	4b04      	ldr	r3, [pc, #16]	@ (8008ab8 <HAL_RCC_GetHCLKFreq+0x30>)
 8008aa8:	681b      	ldr	r3, [r3, #0]
}
 8008aaa:	4618      	mov	r0, r3
 8008aac:	bd80      	pop	{r7, pc}
 8008aae:	bf00      	nop
 8008ab0:	46020c00 	.word	0x46020c00
 8008ab4:	08011abc 	.word	0x08011abc
 8008ab8:	2000000c 	.word	0x2000000c

08008abc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008abc:	b580      	push	{r7, lr}
 8008abe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]);
 8008ac0:	f7ff ffe2 	bl	8008a88 <HAL_RCC_GetHCLKFreq>
 8008ac4:	4602      	mov	r2, r0
 8008ac6:	4b05      	ldr	r3, [pc, #20]	@ (8008adc <HAL_RCC_GetPCLK1Freq+0x20>)
 8008ac8:	6a1b      	ldr	r3, [r3, #32]
 8008aca:	091b      	lsrs	r3, r3, #4
 8008acc:	f003 0307 	and.w	r3, r3, #7
 8008ad0:	4903      	ldr	r1, [pc, #12]	@ (8008ae0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008ad2:	5ccb      	ldrb	r3, [r1, r3]
 8008ad4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008ad8:	4618      	mov	r0, r3
 8008ada:	bd80      	pop	{r7, pc}
 8008adc:	46020c00 	.word	0x46020c00
 8008ae0:	08011acc 	.word	0x08011acc

08008ae4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008ae4:	b580      	push	{r7, lr}
 8008ae6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]);
 8008ae8:	f7ff ffce 	bl	8008a88 <HAL_RCC_GetHCLKFreq>
 8008aec:	4602      	mov	r2, r0
 8008aee:	4b05      	ldr	r3, [pc, #20]	@ (8008b04 <HAL_RCC_GetPCLK2Freq+0x20>)
 8008af0:	6a1b      	ldr	r3, [r3, #32]
 8008af2:	0a1b      	lsrs	r3, r3, #8
 8008af4:	f003 0307 	and.w	r3, r3, #7
 8008af8:	4903      	ldr	r1, [pc, #12]	@ (8008b08 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008afa:	5ccb      	ldrb	r3, [r1, r3]
 8008afc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008b00:	4618      	mov	r0, r3
 8008b02:	bd80      	pop	{r7, pc}
 8008b04:	46020c00 	.word	0x46020c00
 8008b08:	08011acc 	.word	0x08011acc

08008b0c <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 8008b0c:	b580      	push	{r7, lr}
 8008b0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR3 & RCC_CFGR3_PPRE3) >> RCC_CFGR3_PPRE3_Pos]);
 8008b10:	f7ff ffba 	bl	8008a88 <HAL_RCC_GetHCLKFreq>
 8008b14:	4602      	mov	r2, r0
 8008b16:	4b05      	ldr	r3, [pc, #20]	@ (8008b2c <HAL_RCC_GetPCLK3Freq+0x20>)
 8008b18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b1a:	091b      	lsrs	r3, r3, #4
 8008b1c:	f003 0307 	and.w	r3, r3, #7
 8008b20:	4903      	ldr	r1, [pc, #12]	@ (8008b30 <HAL_RCC_GetPCLK3Freq+0x24>)
 8008b22:	5ccb      	ldrb	r3, [r1, r3]
 8008b24:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008b28:	4618      	mov	r0, r3
 8008b2a:	bd80      	pop	{r7, pc}
 8008b2c:	46020c00 	.word	0x46020c00
 8008b30:	08011acc 	.word	0x08011acc

08008b34 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *pRCC_ClkInitStruct, uint32_t *pFLatency)
{
 8008b34:	b480      	push	{r7}
 8008b36:	b083      	sub	sp, #12
 8008b38:	af00      	add	r7, sp, #0
 8008b3a:	6078      	str	r0, [r7, #4]
 8008b3c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(pRCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  pRCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | \
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	221f      	movs	r2, #31
 8008b42:	601a      	str	r2, [r3, #0]
                                  RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_PCLK3;

  /* Get the SYSCLK configuration --------------------------------------------*/
  pRCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR1 & RCC_CFGR1_SW);
 8008b44:	4b14      	ldr	r3, [pc, #80]	@ (8008b98 <HAL_RCC_GetClockConfig+0x64>)
 8008b46:	69db      	ldr	r3, [r3, #28]
 8008b48:	f003 0203 	and.w	r2, r3, #3
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR2 & RCC_CFGR2_HPRE);
 8008b50:	4b11      	ldr	r3, [pc, #68]	@ (8008b98 <HAL_RCC_GetClockConfig+0x64>)
 8008b52:	6a1b      	ldr	r3, [r3, #32]
 8008b54:	f003 020f 	and.w	r2, r3, #15
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR2 & RCC_CFGR2_PPRE1);
 8008b5c:	4b0e      	ldr	r3, [pc, #56]	@ (8008b98 <HAL_RCC_GetClockConfig+0x64>)
 8008b5e:	6a1b      	ldr	r3, [r3, #32]
 8008b60:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4);
 8008b68:	4b0b      	ldr	r3, [pc, #44]	@ (8008b98 <HAL_RCC_GetClockConfig+0x64>)
 8008b6a:	6a1b      	ldr	r3, [r3, #32]
 8008b6c:	091b      	lsrs	r3, r3, #4
 8008b6e:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	611a      	str	r2, [r3, #16]

  /* Get the APB3 configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->CFGR3 & RCC_CFGR3_PPRE3);
 8008b76:	4b08      	ldr	r3, [pc, #32]	@ (8008b98 <HAL_RCC_GetClockConfig+0x64>)
 8008b78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b7a:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	615a      	str	r2, [r3, #20]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8008b82:	4b06      	ldr	r3, [pc, #24]	@ (8008b9c <HAL_RCC_GetClockConfig+0x68>)
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	f003 020f 	and.w	r2, r3, #15
 8008b8a:	683b      	ldr	r3, [r7, #0]
 8008b8c:	601a      	str	r2, [r3, #0]
}
 8008b8e:	bf00      	nop
 8008b90:	370c      	adds	r7, #12
 8008b92:	46bd      	mov	sp, r7
 8008b94:	bc80      	pop	{r7}
 8008b96:	4770      	bx	lr
 8008b98:	46020c00 	.word	0x46020c00
 8008b9c:	40022000 	.word	0x40022000

08008ba0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8008ba0:	b580      	push	{r7, lr}
 8008ba2:	b086      	sub	sp, #24
 8008ba4:	af00      	add	r7, sp, #0
 8008ba6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency;  /* default value 0WS */

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 8008ba8:	4b3e      	ldr	r3, [pc, #248]	@ (8008ca4 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8008baa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008bae:	f003 0304 	and.w	r3, r3, #4
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	d003      	beq.n	8008bbe <RCC_SetFlashLatencyFromMSIRange+0x1e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8008bb6:	f7fe fd0d 	bl	80075d4 <HAL_PWREx_GetVoltageRange>
 8008bba:	6178      	str	r0, [r7, #20]
 8008bbc:	e019      	b.n	8008bf2 <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8008bbe:	4b39      	ldr	r3, [pc, #228]	@ (8008ca4 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8008bc0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008bc4:	4a37      	ldr	r2, [pc, #220]	@ (8008ca4 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8008bc6:	f043 0304 	orr.w	r3, r3, #4
 8008bca:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8008bce:	4b35      	ldr	r3, [pc, #212]	@ (8008ca4 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8008bd0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008bd4:	f003 0304 	and.w	r3, r3, #4
 8008bd8:	60fb      	str	r3, [r7, #12]
 8008bda:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8008bdc:	f7fe fcfa 	bl	80075d4 <HAL_PWREx_GetVoltageRange>
 8008be0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8008be2:	4b30      	ldr	r3, [pc, #192]	@ (8008ca4 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8008be4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008be8:	4a2e      	ldr	r2, [pc, #184]	@ (8008ca4 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8008bea:	f023 0304 	bic.w	r3, r3, #4
 8008bee:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 8008bf2:	697b      	ldr	r3, [r7, #20]
 8008bf4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8008bf8:	d003      	beq.n	8008c02 <RCC_SetFlashLatencyFromMSIRange+0x62>
 8008bfa:	697b      	ldr	r3, [r7, #20]
 8008bfc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008c00:	d109      	bne.n	8008c16 <RCC_SetFlashLatencyFromMSIRange+0x76>
  {

    if (msirange < RCC_MSIRANGE_1)
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008c08:	d202      	bcs.n	8008c10 <RCC_SetFlashLatencyFromMSIRange+0x70>
    {
      /* MSI = 48Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 8008c0a:	2301      	movs	r3, #1
 8008c0c:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 8008c0e:	e033      	b.n	8008c78 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
    else
    {
      /*  MSI < 48Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 8008c10:	2300      	movs	r3, #0
 8008c12:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 8008c14:	e030      	b.n	8008c78 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
  }
  else
  {
    if (msirange < RCC_MSIRANGE_1)
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008c1c:	d208      	bcs.n	8008c30 <RCC_SetFlashLatencyFromMSIRange+0x90>
    {
      /* MSI = 48Mhz */
      if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8008c1e:	697b      	ldr	r3, [r7, #20]
 8008c20:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008c24:	d102      	bne.n	8008c2c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        latency = FLASH_LATENCY_3; /* 3WS */
 8008c26:	2303      	movs	r3, #3
 8008c28:	613b      	str	r3, [r7, #16]
 8008c2a:	e025      	b.n	8008c78 <RCC_SetFlashLatencyFromMSIRange+0xd8>
      }
      else
      {
        return HAL_ERROR;
 8008c2c:	2301      	movs	r3, #1
 8008c2e:	e035      	b.n	8008c9c <RCC_SetFlashLatencyFromMSIRange+0xfc>
      }
    }
    else
    {
      if (msirange > RCC_MSIRANGE_2)
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008c36:	d90f      	bls.n	8008c58 <RCC_SetFlashLatencyFromMSIRange+0xb8>
      {
        if (vos == PWR_REGULATOR_VOLTAGE_SCALE4)
 8008c38:	697b      	ldr	r3, [r7, #20]
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	d109      	bne.n	8008c52 <RCC_SetFlashLatencyFromMSIRange+0xb2>
        {
          if (msirange > RCC_MSIRANGE_3)
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8008c44:	d902      	bls.n	8008c4c <RCC_SetFlashLatencyFromMSIRange+0xac>
          {
            latency = FLASH_LATENCY_0; /* 1WS */
 8008c46:	2300      	movs	r3, #0
 8008c48:	613b      	str	r3, [r7, #16]
 8008c4a:	e015      	b.n	8008c78 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_1; /* 0WS */
 8008c4c:	2301      	movs	r3, #1
 8008c4e:	613b      	str	r3, [r7, #16]
 8008c50:	e012      	b.n	8008c78 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_0; /* 0WS */
 8008c52:	2300      	movs	r3, #0
 8008c54:	613b      	str	r3, [r7, #16]
 8008c56:	e00f      	b.n	8008c78 <RCC_SetFlashLatencyFromMSIRange+0xd8>
        }
      }
      else
      {
        if (msirange == RCC_MSIRANGE_1)
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008c5e:	d109      	bne.n	8008c74 <RCC_SetFlashLatencyFromMSIRange+0xd4>
        {
          if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8008c60:	697b      	ldr	r3, [r7, #20]
 8008c62:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008c66:	d102      	bne.n	8008c6e <RCC_SetFlashLatencyFromMSIRange+0xce>
          {
            latency = FLASH_LATENCY_1; /* 1WS */
 8008c68:	2301      	movs	r3, #1
 8008c6a:	613b      	str	r3, [r7, #16]
 8008c6c:	e004      	b.n	8008c78 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_2; /* 2WS */
 8008c6e:	2302      	movs	r3, #2
 8008c70:	613b      	str	r3, [r7, #16]
 8008c72:	e001      	b.n	8008c78 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_1; /* 1WS */
 8008c74:	2301      	movs	r3, #1
 8008c76:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8008c78:	4b0b      	ldr	r3, [pc, #44]	@ (8008ca8 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	f023 020f 	bic.w	r2, r3, #15
 8008c80:	4909      	ldr	r1, [pc, #36]	@ (8008ca8 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8008c82:	693b      	ldr	r3, [r7, #16]
 8008c84:	4313      	orrs	r3, r2
 8008c86:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
  memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 8008c88:	4b07      	ldr	r3, [pc, #28]	@ (8008ca8 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	f003 030f 	and.w	r3, r3, #15
 8008c90:	693a      	ldr	r2, [r7, #16]
 8008c92:	429a      	cmp	r2, r3
 8008c94:	d001      	beq.n	8008c9a <RCC_SetFlashLatencyFromMSIRange+0xfa>
  {
    return HAL_ERROR;
 8008c96:	2301      	movs	r3, #1
 8008c98:	e000      	b.n	8008c9c <RCC_SetFlashLatencyFromMSIRange+0xfc>
  }

  return HAL_OK;
 8008c9a:	2300      	movs	r3, #0
}
 8008c9c:	4618      	mov	r0, r3
 8008c9e:	3718      	adds	r7, #24
 8008ca0:	46bd      	mov	sp, r7
 8008ca2:	bd80      	pop	{r7, pc}
 8008ca4:	46020c00 	.word	0x46020c00
 8008ca8:	40022000 	.word	0x40022000

08008cac <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  *
  *         (*) value not defined in all devices.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 8008cac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008cb0:	b0b8      	sub	sp, #224	@ 0xe0
 8008cb2:	af00      	add	r7, sp, #0
 8008cb4:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8008cb8:	2300      	movs	r3, #0
 8008cba:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8008cbe:	2300      	movs	r3, #0
 8008cc0:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8008cc4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8008cc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ccc:	f002 0401 	and.w	r4, r2, #1
 8008cd0:	2500      	movs	r5, #0
 8008cd2:	ea54 0305 	orrs.w	r3, r4, r5
 8008cd6:	d00b      	beq.n	8008cf0 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 8008cd8:	4bb9      	ldr	r3, [pc, #740]	@ (8008fc0 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8008cda:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008cde:	f023 0103 	bic.w	r1, r3, #3
 8008ce2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8008ce6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008ce8:	4ab5      	ldr	r2, [pc, #724]	@ (8008fc0 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8008cea:	430b      	orrs	r3, r1
 8008cec:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

#if defined(USART2)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8008cf0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8008cf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cf8:	f002 0802 	and.w	r8, r2, #2
 8008cfc:	f04f 0900 	mov.w	r9, #0
 8008d00:	ea58 0309 	orrs.w	r3, r8, r9
 8008d04:	d00b      	beq.n	8008d1e <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 8008d06:	4bae      	ldr	r3, [pc, #696]	@ (8008fc0 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8008d08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008d0c:	f023 010c 	bic.w	r1, r3, #12
 8008d10:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8008d14:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008d16:	4aaa      	ldr	r2, [pc, #680]	@ (8008fc0 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8008d18:	430b      	orrs	r3, r1
 8008d1a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }
#endif /* USART2 */

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8008d1e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8008d22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d26:	f002 0a04 	and.w	sl, r2, #4
 8008d2a:	f04f 0b00 	mov.w	fp, #0
 8008d2e:	ea5a 030b 	orrs.w	r3, sl, fp
 8008d32:	d00b      	beq.n	8008d4c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 8008d34:	4ba2      	ldr	r3, [pc, #648]	@ (8008fc0 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8008d36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008d3a:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8008d3e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8008d42:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008d44:	4a9e      	ldr	r2, [pc, #632]	@ (8008fc0 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8008d46:	430b      	orrs	r3, r1
 8008d48:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8008d4c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8008d50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d54:	f002 0308 	and.w	r3, r2, #8
 8008d58:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008d5c:	2300      	movs	r3, #0
 8008d5e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8008d62:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8008d66:	460b      	mov	r3, r1
 8008d68:	4313      	orrs	r3, r2
 8008d6a:	d00b      	beq.n	8008d84 <HAL_RCCEx_PeriphCLKConfig+0xd8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 8008d6c:	4b94      	ldr	r3, [pc, #592]	@ (8008fc0 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8008d6e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008d72:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8008d76:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8008d7a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008d7c:	4a90      	ldr	r2, [pc, #576]	@ (8008fc0 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8008d7e:	430b      	orrs	r3, r1
 8008d80:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8008d84:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8008d88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d8c:	f002 0310 	and.w	r3, r2, #16
 8008d90:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008d94:	2300      	movs	r3, #0
 8008d96:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8008d9a:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8008d9e:	460b      	mov	r3, r1
 8008da0:	4313      	orrs	r3, r2
 8008da2:	d00b      	beq.n	8008dbc <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 8008da4:	4b86      	ldr	r3, [pc, #536]	@ (8008fc0 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8008da6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008daa:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8008dae:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8008db2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008db4:	4a82      	ldr	r2, [pc, #520]	@ (8008fc0 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8008db6:	430b      	orrs	r3, r1
 8008db8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
    __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
  }
#endif /* USART6 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008dbc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8008dc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008dc4:	f002 0320 	and.w	r3, r2, #32
 8008dc8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008dcc:	2300      	movs	r3, #0
 8008dce:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008dd2:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8008dd6:	460b      	mov	r3, r1
 8008dd8:	4313      	orrs	r3, r2
 8008dda:	d00b      	beq.n	8008df4 <HAL_RCCEx_PeriphCLKConfig+0x148>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 8008ddc:	4b78      	ldr	r3, [pc, #480]	@ (8008fc0 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8008dde:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008de2:	f023 0107 	bic.w	r1, r3, #7
 8008de6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8008dea:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008dec:	4a74      	ldr	r2, [pc, #464]	@ (8008fc0 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8008dee:	430b      	orrs	r3, r1
 8008df0:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8008df4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8008df8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008dfc:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8008e00:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8008e04:	2300      	movs	r3, #0
 8008e06:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8008e0a:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8008e0e:	460b      	mov	r3, r1
 8008e10:	4313      	orrs	r3, r2
 8008e12:	d00b      	beq.n	8008e2c <HAL_RCCEx_PeriphCLKConfig+0x180>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 8008e14:	4b6a      	ldr	r3, [pc, #424]	@ (8008fc0 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8008e16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008e1a:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 8008e1e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8008e22:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008e24:	4a66      	ldr	r2, [pc, #408]	@ (8008fc0 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8008e26:	430b      	orrs	r3, r1
 8008e28:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8008e2c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8008e30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e34:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8008e38:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8008e3c:	2300      	movs	r3, #0
 8008e3e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8008e42:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8008e46:	460b      	mov	r3, r1
 8008e48:	4313      	orrs	r3, r2
 8008e4a:	d00b      	beq.n	8008e64 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 8008e4c:	4b5c      	ldr	r3, [pc, #368]	@ (8008fc0 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8008e4e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008e52:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8008e56:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8008e5a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008e5c:	4a58      	ldr	r2, [pc, #352]	@ (8008fc0 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8008e5e:	430b      	orrs	r3, r1
 8008e60:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8008e64:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8008e68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e6c:	f402 7380 	and.w	r3, r2, #256	@ 0x100
 8008e70:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8008e74:	2300      	movs	r3, #0
 8008e76:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8008e7a:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8008e7e:	460b      	mov	r3, r1
 8008e80:	4313      	orrs	r3, r2
 8008e82:	d00b      	beq.n	8008e9c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 8008e84:	4b4e      	ldr	r3, [pc, #312]	@ (8008fc0 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8008e86:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008e8a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8008e8e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8008e92:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008e94:	4a4a      	ldr	r2, [pc, #296]	@ (8008fc0 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8008e96:	430b      	orrs	r3, r1
 8008e98:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8008e9c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8008ea0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ea4:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8008ea8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8008eac:	2300      	movs	r3, #0
 8008eae:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8008eb2:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8008eb6:	460b      	mov	r3, r1
 8008eb8:	4313      	orrs	r3, r2
 8008eba:	d00b      	beq.n	8008ed4 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 8008ebc:	4b40      	ldr	r3, [pc, #256]	@ (8008fc0 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8008ebe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008ec2:	f423 4140 	bic.w	r1, r3, #49152	@ 0xc000
 8008ec6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8008eca:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008ecc:	4a3c      	ldr	r2, [pc, #240]	@ (8008fc0 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8008ece:	430b      	orrs	r3, r1
 8008ed0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
    __HAL_RCC_I2C6_CONFIG(pPeriphClkInit->I2c6ClockSelection);
  }
#endif /* I2C6 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8008ed4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8008ed8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008edc:	f402 7300 	and.w	r3, r2, #512	@ 0x200
 8008ee0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8008ee4:	2300      	movs	r3, #0
 8008ee6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8008eea:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8008eee:	460b      	mov	r3, r1
 8008ef0:	4313      	orrs	r3, r2
 8008ef2:	d00b      	beq.n	8008f0c <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 8008ef4:	4b32      	ldr	r3, [pc, #200]	@ (8008fc0 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8008ef6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008efa:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 8008efe:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8008f02:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008f04:	4a2e      	ldr	r2, [pc, #184]	@ (8008fc0 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8008f06:	430b      	orrs	r3, r1
 8008f08:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8008f0c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8008f10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f14:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8008f18:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8008f1c:	2300      	movs	r3, #0
 8008f1e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008f22:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8008f26:	460b      	mov	r3, r1
 8008f28:	4313      	orrs	r3, r2
 8008f2a:	d00b      	beq.n	8008f44 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 8008f2c:	4b24      	ldr	r3, [pc, #144]	@ (8008fc0 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8008f2e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008f32:	f423 2140 	bic.w	r1, r3, #786432	@ 0xc0000
 8008f36:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8008f3a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008f3c:	4a20      	ldr	r2, [pc, #128]	@ (8008fc0 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8008f3e:	430b      	orrs	r3, r1
 8008f40:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- LPTIM34 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM34) == (RCC_PERIPHCLK_LPTIM34))
 8008f44:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8008f48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f4c:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8008f50:	67bb      	str	r3, [r7, #120]	@ 0x78
 8008f52:	2300      	movs	r3, #0
 8008f54:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8008f56:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8008f5a:	460b      	mov	r3, r1
 8008f5c:	4313      	orrs	r3, r2
 8008f5e:	d00c      	beq.n	8008f7a <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    assert_param(IS_RCC_LPTIM34CLK(pPeriphClkInit->Lptim34ClockSelection));
    __HAL_RCC_LPTIM34_CONFIG(pPeriphClkInit->Lptim34ClockSelection);
 8008f60:	4b17      	ldr	r3, [pc, #92]	@ (8008fc0 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8008f62:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008f66:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8008f6a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8008f6e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008f72:	4a13      	ldr	r2, [pc, #76]	@ (8008fc0 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8008f74:	430b      	orrs	r3, r1
 8008f76:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8008f7a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8008f7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f82:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8008f86:	673b      	str	r3, [r7, #112]	@ 0x70
 8008f88:	2300      	movs	r3, #0
 8008f8a:	677b      	str	r3, [r7, #116]	@ 0x74
 8008f8c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8008f90:	460b      	mov	r3, r1
 8008f92:	4313      	orrs	r3, r2
 8008f94:	d04e      	beq.n	8009034 <HAL_RCCEx_PeriphCLKConfig+0x388>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 8008f96:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8008f9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008f9e:	2b80      	cmp	r3, #128	@ 0x80
 8008fa0:	d02f      	beq.n	8009002 <HAL_RCCEx_PeriphCLKConfig+0x356>
 8008fa2:	2b80      	cmp	r3, #128	@ 0x80
 8008fa4:	d829      	bhi.n	8008ffa <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8008fa6:	2b60      	cmp	r3, #96	@ 0x60
 8008fa8:	d02d      	beq.n	8009006 <HAL_RCCEx_PeriphCLKConfig+0x35a>
 8008faa:	2b60      	cmp	r3, #96	@ 0x60
 8008fac:	d825      	bhi.n	8008ffa <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8008fae:	2b40      	cmp	r3, #64	@ 0x40
 8008fb0:	d008      	beq.n	8008fc4 <HAL_RCCEx_PeriphCLKConfig+0x318>
 8008fb2:	2b40      	cmp	r3, #64	@ 0x40
 8008fb4:	d821      	bhi.n	8008ffa <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8008fb6:	2b00      	cmp	r3, #0
 8008fb8:	d00b      	beq.n	8008fd2 <HAL_RCCEx_PeriphCLKConfig+0x326>
 8008fba:	2b20      	cmp	r3, #32
 8008fbc:	d013      	beq.n	8008fe6 <HAL_RCCEx_PeriphCLKConfig+0x33a>
 8008fbe:	e01c      	b.n	8008ffa <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8008fc0:	46020c00 	.word	0x46020c00
    {
      case RCC_SAI1CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8008fc4:	4bb5      	ldr	r3, [pc, #724]	@ (800929c <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8008fc6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008fc8:	4ab4      	ldr	r2, [pc, #720]	@ (800929c <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8008fca:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008fce:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 8008fd0:	e01a      	b.n	8009008 <HAL_RCCEx_PeriphCLKConfig+0x35c>

      case RCC_SAI1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8008fd2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8008fd6:	3308      	adds	r3, #8
 8008fd8:	4618      	mov	r0, r3
 8008fda:	f002 fa49 	bl	800b470 <RCCEx_PLL2_Config>
 8008fde:	4603      	mov	r3, r0
 8008fe0:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        /* SAI1 clock source config set later after clock selection check */
        break;
 8008fe4:	e010      	b.n	8009008 <HAL_RCCEx_PeriphCLKConfig+0x35c>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8008fe6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8008fea:	332c      	adds	r3, #44	@ 0x2c
 8008fec:	4618      	mov	r0, r3
 8008fee:	f002 fad7 	bl	800b5a0 <RCCEx_PLL3_Config>
 8008ff2:	4603      	mov	r3, r0
 8008ff4:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        /* SAI1 clock source config set later after clock selection check */
        break;
 8008ff8:	e006      	b.n	8009008 <HAL_RCCEx_PeriphCLKConfig+0x35c>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008ffa:	2301      	movs	r3, #1
 8008ffc:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8009000:	e002      	b.n	8009008 <HAL_RCCEx_PeriphCLKConfig+0x35c>
        break;
 8009002:	bf00      	nop
 8009004:	e000      	b.n	8009008 <HAL_RCCEx_PeriphCLKConfig+0x35c>
        break;
 8009006:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009008:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 800900c:	2b00      	cmp	r3, #0
 800900e:	d10d      	bne.n	800902c <HAL_RCCEx_PeriphCLKConfig+0x380>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 8009010:	4ba2      	ldr	r3, [pc, #648]	@ (800929c <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8009012:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8009016:	f023 01e0 	bic.w	r1, r3, #224	@ 0xe0
 800901a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800901e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009022:	4a9e      	ldr	r2, [pc, #632]	@ (800929c <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8009024:	430b      	orrs	r3, r1
 8009026:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800902a:	e003      	b.n	8009034 <HAL_RCCEx_PeriphCLKConfig+0x388>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800902c:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8009030:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }

#if defined(SAI2)
  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8009034:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8009038:	e9d3 2300 	ldrd	r2, r3, [r3]
 800903c:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8009040:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009042:	2300      	movs	r3, #0
 8009044:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8009046:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800904a:	460b      	mov	r3, r1
 800904c:	4313      	orrs	r3, r2
 800904e:	d053      	beq.n	80090f8 <HAL_RCCEx_PeriphCLKConfig+0x44c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 8009050:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8009054:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009058:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800905c:	d033      	beq.n	80090c6 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800905e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009062:	d82c      	bhi.n	80090be <HAL_RCCEx_PeriphCLKConfig+0x412>
 8009064:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009068:	d02f      	beq.n	80090ca <HAL_RCCEx_PeriphCLKConfig+0x41e>
 800906a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800906e:	d826      	bhi.n	80090be <HAL_RCCEx_PeriphCLKConfig+0x412>
 8009070:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009074:	d008      	beq.n	8009088 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
 8009076:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800907a:	d820      	bhi.n	80090be <HAL_RCCEx_PeriphCLKConfig+0x412>
 800907c:	2b00      	cmp	r3, #0
 800907e:	d00a      	beq.n	8009096 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 8009080:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009084:	d011      	beq.n	80090aa <HAL_RCCEx_PeriphCLKConfig+0x3fe>
 8009086:	e01a      	b.n	80090be <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      case RCC_SAI2CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8009088:	4b84      	ldr	r3, [pc, #528]	@ (800929c <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800908a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800908c:	4a83      	ldr	r2, [pc, #524]	@ (800929c <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800908e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009092:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 8009094:	e01a      	b.n	80090cc <HAL_RCCEx_PeriphCLKConfig+0x420>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8009096:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800909a:	3308      	adds	r3, #8
 800909c:	4618      	mov	r0, r3
 800909e:	f002 f9e7 	bl	800b470 <RCCEx_PLL2_Config>
 80090a2:	4603      	mov	r3, r0
 80090a4:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        /* SAI2 clock source config set later after clock selection check */
        break;
 80090a8:	e010      	b.n	80090cc <HAL_RCCEx_PeriphCLKConfig+0x420>

      case RCC_SAI2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80090aa:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80090ae:	332c      	adds	r3, #44	@ 0x2c
 80090b0:	4618      	mov	r0, r3
 80090b2:	f002 fa75 	bl	800b5a0 <RCCEx_PLL3_Config>
 80090b6:	4603      	mov	r3, r0
 80090b8:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        /* SAI2 clock source config set later after clock selection check */
        break;
 80090bc:	e006      	b.n	80090cc <HAL_RCCEx_PeriphCLKConfig+0x420>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80090be:	2301      	movs	r3, #1
 80090c0:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 80090c4:	e002      	b.n	80090cc <HAL_RCCEx_PeriphCLKConfig+0x420>
        break;
 80090c6:	bf00      	nop
 80090c8:	e000      	b.n	80090cc <HAL_RCCEx_PeriphCLKConfig+0x420>
        break;
 80090ca:	bf00      	nop
    }

    if (ret == HAL_OK)
 80090cc:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 80090d0:	2b00      	cmp	r3, #0
 80090d2:	d10d      	bne.n	80090f0 <HAL_RCCEx_PeriphCLKConfig+0x444>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 80090d4:	4b71      	ldr	r3, [pc, #452]	@ (800929c <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80090d6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80090da:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 80090de:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80090e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80090e6:	4a6d      	ldr	r2, [pc, #436]	@ (800929c <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80090e8:	430b      	orrs	r3, r1
 80090ea:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 80090ee:	e003      	b.n	80090f8 <HAL_RCCEx_PeriphCLKConfig+0x44c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80090f0:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 80090f4:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }
#endif /* SAI2 */

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 80090f8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80090fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009100:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8009104:	663b      	str	r3, [r7, #96]	@ 0x60
 8009106:	2300      	movs	r3, #0
 8009108:	667b      	str	r3, [r7, #100]	@ 0x64
 800910a:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800910e:	460b      	mov	r3, r1
 8009110:	4313      	orrs	r3, r2
 8009112:	d046      	beq.n	80091a2 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 8009114:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8009118:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800911c:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8009120:	d028      	beq.n	8009174 <HAL_RCCEx_PeriphCLKConfig+0x4c8>
 8009122:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8009126:	d821      	bhi.n	800916c <HAL_RCCEx_PeriphCLKConfig+0x4c0>
 8009128:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800912c:	d022      	beq.n	8009174 <HAL_RCCEx_PeriphCLKConfig+0x4c8>
 800912e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009132:	d81b      	bhi.n	800916c <HAL_RCCEx_PeriphCLKConfig+0x4c0>
 8009134:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8009138:	d01c      	beq.n	8009174 <HAL_RCCEx_PeriphCLKConfig+0x4c8>
 800913a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800913e:	d815      	bhi.n	800916c <HAL_RCCEx_PeriphCLKConfig+0x4c0>
 8009140:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009144:	d008      	beq.n	8009158 <HAL_RCCEx_PeriphCLKConfig+0x4ac>
 8009146:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800914a:	d80f      	bhi.n	800916c <HAL_RCCEx_PeriphCLKConfig+0x4c0>
 800914c:	2b00      	cmp	r3, #0
 800914e:	d011      	beq.n	8009174 <HAL_RCCEx_PeriphCLKConfig+0x4c8>
 8009150:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009154:	d00e      	beq.n	8009174 <HAL_RCCEx_PeriphCLKConfig+0x4c8>
 8009156:	e009      	b.n	800916c <HAL_RCCEx_PeriphCLKConfig+0x4c0>
    {
      case RCC_ADCDACCLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P, & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8009158:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800915c:	3308      	adds	r3, #8
 800915e:	4618      	mov	r0, r3
 8009160:	f002 f986 	bl	800b470 <RCCEx_PLL2_Config>
 8009164:	4603      	mov	r3, r0
 8009166:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 800916a:	e004      	b.n	8009176 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
      case RCC_ADCDACCLKSOURCE_HSE:
      case RCC_ADCDACCLKSOURCE_HSI:
      case RCC_ADCDACCLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 800916c:	2301      	movs	r3, #1
 800916e:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8009172:	e000      	b.n	8009176 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
        break;
 8009174:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009176:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 800917a:	2b00      	cmp	r3, #0
 800917c:	d10d      	bne.n	800919a <HAL_RCCEx_PeriphCLKConfig+0x4ee>
    {
      /* Configure the ADC1 interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 800917e:	4b47      	ldr	r3, [pc, #284]	@ (800929c <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8009180:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009184:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8009188:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800918c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8009190:	4a42      	ldr	r2, [pc, #264]	@ (800929c <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8009192:	430b      	orrs	r3, r1
 8009194:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8009198:	e003      	b.n	80091a2 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800919a:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 800919e:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }

  /*-------------------------- MDF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_MDF1) == RCC_PERIPHCLK_MDF1)
 80091a2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80091a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091aa:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 80091ae:	65bb      	str	r3, [r7, #88]	@ 0x58
 80091b0:	2300      	movs	r3, #0
 80091b2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80091b4:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 80091b8:	460b      	mov	r3, r1
 80091ba:	4313      	orrs	r3, r2
 80091bc:	d03e      	beq.n	800923c <HAL_RCCEx_PeriphCLKConfig+0x590>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MDF1CLKSOURCE(pPeriphClkInit->Mdf1ClockSelection));

    switch (pPeriphClkInit->Mdf1ClockSelection)
 80091be:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80091c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80091c6:	2b04      	cmp	r3, #4
 80091c8:	d81d      	bhi.n	8009206 <HAL_RCCEx_PeriphCLKConfig+0x55a>
 80091ca:	a201      	add	r2, pc, #4	@ (adr r2, 80091d0 <HAL_RCCEx_PeriphCLKConfig+0x524>)
 80091cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091d0:	0800920f 	.word	0x0800920f
 80091d4:	080091e5 	.word	0x080091e5
 80091d8:	080091f3 	.word	0x080091f3
 80091dc:	0800920f 	.word	0x0800920f
 80091e0:	0800920f 	.word	0x0800920f
    {
      case RCC_MDF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80091e4:	4b2d      	ldr	r3, [pc, #180]	@ (800929c <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80091e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80091e8:	4a2c      	ldr	r2, [pc, #176]	@ (800929c <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80091ea:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80091ee:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 80091f0:	e00e      	b.n	8009210 <HAL_RCCEx_PeriphCLKConfig+0x564>
      case RCC_MDF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80091f2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80091f6:	332c      	adds	r3, #44	@ 0x2c
 80091f8:	4618      	mov	r0, r3
 80091fa:	f002 f9d1 	bl	800b5a0 <RCCEx_PLL3_Config>
 80091fe:	4603      	mov	r3, r0
 8009200:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8009204:	e004      	b.n	8009210 <HAL_RCCEx_PeriphCLKConfig+0x564>
      case RCC_MDF1CLKSOURCE_PIN:
        break;
      case RCC_MDF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8009206:	2301      	movs	r3, #1
 8009208:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 800920c:	e000      	b.n	8009210 <HAL_RCCEx_PeriphCLKConfig+0x564>
        break;
 800920e:	bf00      	nop
    }
    if (ret == HAL_OK)
 8009210:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8009214:	2b00      	cmp	r3, #0
 8009216:	d10d      	bne.n	8009234 <HAL_RCCEx_PeriphCLKConfig+0x588>
    {
      /* Configure the MDF1 interface clock source */
      __HAL_RCC_MDF1_CONFIG(pPeriphClkInit->Mdf1ClockSelection);
 8009218:	4b20      	ldr	r3, [pc, #128]	@ (800929c <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800921a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800921e:	f023 0107 	bic.w	r1, r3, #7
 8009222:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8009226:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800922a:	4a1c      	ldr	r2, [pc, #112]	@ (800929c <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800922c:	430b      	orrs	r3, r1
 800922e:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8009232:	e003      	b.n	800923c <HAL_RCCEx_PeriphCLKConfig+0x590>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009234:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8009238:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }

  /*-------------------------- ADF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
 800923c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8009240:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009244:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8009248:	653b      	str	r3, [r7, #80]	@ 0x50
 800924a:	2300      	movs	r3, #0
 800924c:	657b      	str	r3, [r7, #84]	@ 0x54
 800924e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8009252:	460b      	mov	r3, r1
 8009254:	4313      	orrs	r3, r2
 8009256:	d04c      	beq.n	80092f2 <HAL_RCCEx_PeriphCLKConfig+0x646>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADF1CLKSOURCE(pPeriphClkInit->Adf1ClockSelection));
    switch (pPeriphClkInit->Adf1ClockSelection)
 8009258:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800925c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009260:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8009264:	d02a      	beq.n	80092bc <HAL_RCCEx_PeriphCLKConfig+0x610>
 8009266:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800926a:	d823      	bhi.n	80092b4 <HAL_RCCEx_PeriphCLKConfig+0x608>
 800926c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8009270:	d026      	beq.n	80092c0 <HAL_RCCEx_PeriphCLKConfig+0x614>
 8009272:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8009276:	d81d      	bhi.n	80092b4 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8009278:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800927c:	d010      	beq.n	80092a0 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
 800927e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009282:	d817      	bhi.n	80092b4 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8009284:	2b00      	cmp	r3, #0
 8009286:	d01d      	beq.n	80092c4 <HAL_RCCEx_PeriphCLKConfig+0x618>
 8009288:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800928c:	d112      	bne.n	80092b4 <HAL_RCCEx_PeriphCLKConfig+0x608>
    {
      case RCC_ADF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800928e:	4b03      	ldr	r3, [pc, #12]	@ (800929c <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8009290:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009292:	4a02      	ldr	r2, [pc, #8]	@ (800929c <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8009294:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009298:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 800929a:	e014      	b.n	80092c6 <HAL_RCCEx_PeriphCLKConfig+0x61a>
 800929c:	46020c00 	.word	0x46020c00
      case RCC_ADF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80092a0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80092a4:	332c      	adds	r3, #44	@ 0x2c
 80092a6:	4618      	mov	r0, r3
 80092a8:	f002 f97a 	bl	800b5a0 <RCCEx_PLL3_Config>
 80092ac:	4603      	mov	r3, r0
 80092ae:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 80092b2:	e008      	b.n	80092c6 <HAL_RCCEx_PeriphCLKConfig+0x61a>
      case RCC_ADF1CLKSOURCE_PIN:
        break;
      case RCC_ADF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 80092b4:	2301      	movs	r3, #1
 80092b6:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 80092ba:	e004      	b.n	80092c6 <HAL_RCCEx_PeriphCLKConfig+0x61a>
        break;
 80092bc:	bf00      	nop
 80092be:	e002      	b.n	80092c6 <HAL_RCCEx_PeriphCLKConfig+0x61a>
        break;
 80092c0:	bf00      	nop
 80092c2:	e000      	b.n	80092c6 <HAL_RCCEx_PeriphCLKConfig+0x61a>
        break;
 80092c4:	bf00      	nop
    }
    if (ret == HAL_OK)
 80092c6:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 80092ca:	2b00      	cmp	r3, #0
 80092cc:	d10d      	bne.n	80092ea <HAL_RCCEx_PeriphCLKConfig+0x63e>
    {
      /* Configure the ADF1 interface clock source */
      __HAL_RCC_ADF1_CONFIG(pPeriphClkInit->Adf1ClockSelection);
 80092ce:	4baf      	ldr	r3, [pc, #700]	@ (800958c <HAL_RCCEx_PeriphCLKConfig+0x8e0>)
 80092d0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80092d4:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 80092d8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80092dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80092e0:	4aaa      	ldr	r2, [pc, #680]	@ (800958c <HAL_RCCEx_PeriphCLKConfig+0x8e0>)
 80092e2:	430b      	orrs	r3, r1
 80092e4:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80092e8:	e003      	b.n	80092f2 <HAL_RCCEx_PeriphCLKConfig+0x646>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80092ea:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 80092ee:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((pPeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80092f2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80092f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092fa:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 80092fe:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009300:	2300      	movs	r3, #0
 8009302:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009304:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8009308:	460b      	mov	r3, r1
 800930a:	4313      	orrs	r3, r2
 800930c:	f000 80b5 	beq.w	800947a <HAL_RCCEx_PeriphCLKConfig+0x7ce>
  {
    FlagStatus       pwrclkchanged = RESET;
 8009310:	2300      	movs	r3, #0
 8009312:	f887 30d9 	strb.w	r3, [r7, #217]	@ 0xd9
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));
    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009316:	4b9d      	ldr	r3, [pc, #628]	@ (800958c <HAL_RCCEx_PeriphCLKConfig+0x8e0>)
 8009318:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800931c:	f003 0304 	and.w	r3, r3, #4
 8009320:	2b00      	cmp	r3, #0
 8009322:	d113      	bne.n	800934c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009324:	4b99      	ldr	r3, [pc, #612]	@ (800958c <HAL_RCCEx_PeriphCLKConfig+0x8e0>)
 8009326:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800932a:	4a98      	ldr	r2, [pc, #608]	@ (800958c <HAL_RCCEx_PeriphCLKConfig+0x8e0>)
 800932c:	f043 0304 	orr.w	r3, r3, #4
 8009330:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8009334:	4b95      	ldr	r3, [pc, #596]	@ (800958c <HAL_RCCEx_PeriphCLKConfig+0x8e0>)
 8009336:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800933a:	f003 0304 	and.w	r3, r3, #4
 800933e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8009342:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
      pwrclkchanged = SET;
 8009346:	2301      	movs	r3, #1
 8009348:	f887 30d9 	strb.w	r3, [r7, #217]	@ 0xd9
    }
    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 800934c:	4b90      	ldr	r3, [pc, #576]	@ (8009590 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800934e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009350:	4a8f      	ldr	r2, [pc, #572]	@ (8009590 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8009352:	f043 0301 	orr.w	r3, r3, #1
 8009356:	6293      	str	r3, [r2, #40]	@ 0x28

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009358:	f7fc f814 	bl	8005384 <HAL_GetTick>
 800935c:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4

    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8009360:	e00b      	b.n	800937a <HAL_RCCEx_PeriphCLKConfig+0x6ce>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009362:	f7fc f80f 	bl	8005384 <HAL_GetTick>
 8009366:	4602      	mov	r2, r0
 8009368:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800936c:	1ad3      	subs	r3, r2, r3
 800936e:	2b02      	cmp	r3, #2
 8009370:	d903      	bls.n	800937a <HAL_RCCEx_PeriphCLKConfig+0x6ce>
      {
        ret = HAL_TIMEOUT;
 8009372:	2303      	movs	r3, #3
 8009374:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8009378:	e005      	b.n	8009386 <HAL_RCCEx_PeriphCLKConfig+0x6da>
    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800937a:	4b85      	ldr	r3, [pc, #532]	@ (8009590 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800937c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800937e:	f003 0301 	and.w	r3, r3, #1
 8009382:	2b00      	cmp	r3, #0
 8009384:	d0ed      	beq.n	8009362 <HAL_RCCEx_PeriphCLKConfig+0x6b6>
      }
    }

    if (ret == HAL_OK)
 8009386:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 800938a:	2b00      	cmp	r3, #0
 800938c:	d165      	bne.n	800945a <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800938e:	4b7f      	ldr	r3, [pc, #508]	@ (800958c <HAL_RCCEx_PeriphCLKConfig+0x8e0>)
 8009390:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009394:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009398:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 800939c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80093a0:	2b00      	cmp	r3, #0
 80093a2:	d023      	beq.n	80093ec <HAL_RCCEx_PeriphCLKConfig+0x740>
 80093a4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80093a8:	f8d3 20bc 	ldr.w	r2, [r3, #188]	@ 0xbc
 80093ac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80093b0:	4293      	cmp	r3, r2
 80093b2:	d01b      	beq.n	80093ec <HAL_RCCEx_PeriphCLKConfig+0x740>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80093b4:	4b75      	ldr	r3, [pc, #468]	@ (800958c <HAL_RCCEx_PeriphCLKConfig+0x8e0>)
 80093b6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80093ba:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80093be:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80093c2:	4b72      	ldr	r3, [pc, #456]	@ (800958c <HAL_RCCEx_PeriphCLKConfig+0x8e0>)
 80093c4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80093c8:	4a70      	ldr	r2, [pc, #448]	@ (800958c <HAL_RCCEx_PeriphCLKConfig+0x8e0>)
 80093ca:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80093ce:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 80093d2:	4b6e      	ldr	r3, [pc, #440]	@ (800958c <HAL_RCCEx_PeriphCLKConfig+0x8e0>)
 80093d4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80093d8:	4a6c      	ldr	r2, [pc, #432]	@ (800958c <HAL_RCCEx_PeriphCLKConfig+0x8e0>)
 80093da:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80093de:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80093e2:	4a6a      	ldr	r2, [pc, #424]	@ (800958c <HAL_RCCEx_PeriphCLKConfig+0x8e0>)
 80093e4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80093e8:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80093ec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80093f0:	f003 0301 	and.w	r3, r3, #1
 80093f4:	2b00      	cmp	r3, #0
 80093f6:	d019      	beq.n	800942c <HAL_RCCEx_PeriphCLKConfig+0x780>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80093f8:	f7fb ffc4 	bl	8005384 <HAL_GetTick>
 80093fc:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009400:	e00d      	b.n	800941e <HAL_RCCEx_PeriphCLKConfig+0x772>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009402:	f7fb ffbf 	bl	8005384 <HAL_GetTick>
 8009406:	4602      	mov	r2, r0
 8009408:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800940c:	1ad2      	subs	r2, r2, r3
 800940e:	f241 3388 	movw	r3, #5000	@ 0x1388
 8009412:	429a      	cmp	r2, r3
 8009414:	d903      	bls.n	800941e <HAL_RCCEx_PeriphCLKConfig+0x772>
          {
            ret = HAL_TIMEOUT;
 8009416:	2303      	movs	r3, #3
 8009418:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
            break;
 800941c:	e006      	b.n	800942c <HAL_RCCEx_PeriphCLKConfig+0x780>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800941e:	4b5b      	ldr	r3, [pc, #364]	@ (800958c <HAL_RCCEx_PeriphCLKConfig+0x8e0>)
 8009420:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009424:	f003 0302 	and.w	r3, r3, #2
 8009428:	2b00      	cmp	r3, #0
 800942a:	d0ea      	beq.n	8009402 <HAL_RCCEx_PeriphCLKConfig+0x756>
          }
        }
      }

      if (ret == HAL_OK)
 800942c:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8009430:	2b00      	cmp	r3, #0
 8009432:	d10d      	bne.n	8009450 <HAL_RCCEx_PeriphCLKConfig+0x7a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 8009434:	4b55      	ldr	r3, [pc, #340]	@ (800958c <HAL_RCCEx_PeriphCLKConfig+0x8e0>)
 8009436:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800943a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800943e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8009442:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8009446:	4a51      	ldr	r2, [pc, #324]	@ (800958c <HAL_RCCEx_PeriphCLKConfig+0x8e0>)
 8009448:	430b      	orrs	r3, r1
 800944a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800944e:	e008      	b.n	8009462 <HAL_RCCEx_PeriphCLKConfig+0x7b6>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8009450:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8009454:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
 8009458:	e003      	b.n	8009462 <HAL_RCCEx_PeriphCLKConfig+0x7b6>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800945a:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 800945e:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8009462:	f897 30d9 	ldrb.w	r3, [r7, #217]	@ 0xd9
 8009466:	2b01      	cmp	r3, #1
 8009468:	d107      	bne.n	800947a <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800946a:	4b48      	ldr	r3, [pc, #288]	@ (800958c <HAL_RCCEx_PeriphCLKConfig+0x8e0>)
 800946c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009470:	4a46      	ldr	r2, [pc, #280]	@ (800958c <HAL_RCCEx_PeriphCLKConfig+0x8e0>)
 8009472:	f023 0304 	bic.w	r3, r3, #4
 8009476:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }

  /*-------------------------------------- ICLK Configuration -----------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ICLK) == RCC_PERIPHCLK_ICLK)
 800947a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800947e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009482:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8009486:	643b      	str	r3, [r7, #64]	@ 0x40
 8009488:	2300      	movs	r3, #0
 800948a:	647b      	str	r3, [r7, #68]	@ 0x44
 800948c:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8009490:	460b      	mov	r3, r1
 8009492:	4313      	orrs	r3, r2
 8009494:	d042      	beq.n	800951c <HAL_RCCEx_PeriphCLKConfig+0x870>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ICLKCLKSOURCE(pPeriphClkInit->IclkClockSelection));

    switch (pPeriphClkInit->IclkClockSelection)
 8009496:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800949a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800949e:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 80094a2:	d022      	beq.n	80094ea <HAL_RCCEx_PeriphCLKConfig+0x83e>
 80094a4:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 80094a8:	d81b      	bhi.n	80094e2 <HAL_RCCEx_PeriphCLKConfig+0x836>
 80094aa:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80094ae:	d011      	beq.n	80094d4 <HAL_RCCEx_PeriphCLKConfig+0x828>
 80094b0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80094b4:	d815      	bhi.n	80094e2 <HAL_RCCEx_PeriphCLKConfig+0x836>
 80094b6:	2b00      	cmp	r3, #0
 80094b8:	d019      	beq.n	80094ee <HAL_RCCEx_PeriphCLKConfig+0x842>
 80094ba:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80094be:	d110      	bne.n	80094e2 <HAL_RCCEx_PeriphCLKConfig+0x836>
    {
      case RCC_ICLK_CLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P,Q & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80094c0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80094c4:	3308      	adds	r3, #8
 80094c6:	4618      	mov	r0, r3
 80094c8:	f001 ffd2 	bl	800b470 <RCCEx_PLL2_Config>
 80094cc:	4603      	mov	r3, r0
 80094ce:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 80094d2:	e00d      	b.n	80094f0 <HAL_RCCEx_PeriphCLKConfig+0x844>
      case RCC_ICLK_CLKSOURCE_PLL1:
        /* Enable ICLK Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80094d4:	4b2d      	ldr	r3, [pc, #180]	@ (800958c <HAL_RCCEx_PeriphCLKConfig+0x8e0>)
 80094d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80094d8:	4a2c      	ldr	r2, [pc, #176]	@ (800958c <HAL_RCCEx_PeriphCLKConfig+0x8e0>)
 80094da:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80094de:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 80094e0:	e006      	b.n	80094f0 <HAL_RCCEx_PeriphCLKConfig+0x844>
      case RCC_ICLK_CLKSOURCE_HSI48:
        break;
      case RCC_ICLK_CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 80094e2:	2301      	movs	r3, #1
 80094e4:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 80094e8:	e002      	b.n	80094f0 <HAL_RCCEx_PeriphCLKConfig+0x844>
        break;
 80094ea:	bf00      	nop
 80094ec:	e000      	b.n	80094f0 <HAL_RCCEx_PeriphCLKConfig+0x844>
        break;
 80094ee:	bf00      	nop
    }
    if (ret == HAL_OK)
 80094f0:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 80094f4:	2b00      	cmp	r3, #0
 80094f6:	d10d      	bne.n	8009514 <HAL_RCCEx_PeriphCLKConfig+0x868>
    {
      /* Configure the CLK48 source */
      __HAL_RCC_CLK48_CONFIG(pPeriphClkInit->IclkClockSelection);
 80094f8:	4b24      	ldr	r3, [pc, #144]	@ (800958c <HAL_RCCEx_PeriphCLKConfig+0x8e0>)
 80094fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80094fe:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8009502:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8009506:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800950a:	4a20      	ldr	r2, [pc, #128]	@ (800958c <HAL_RCCEx_PeriphCLKConfig+0x8e0>)
 800950c:	430b      	orrs	r3, r1
 800950e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8009512:	e003      	b.n	800951c <HAL_RCCEx_PeriphCLKConfig+0x870>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009514:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8009518:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800951c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8009520:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009524:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8009528:	63bb      	str	r3, [r7, #56]	@ 0x38
 800952a:	2300      	movs	r3, #0
 800952c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800952e:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8009532:	460b      	mov	r3, r1
 8009534:	4313      	orrs	r3, r2
 8009536:	d031      	beq.n	800959c <HAL_RCCEx_PeriphCLKConfig+0x8f0>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 8009538:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800953c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8009540:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009544:	d00b      	beq.n	800955e <HAL_RCCEx_PeriphCLKConfig+0x8b2>
 8009546:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800954a:	d804      	bhi.n	8009556 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
 800954c:	2b00      	cmp	r3, #0
 800954e:	d008      	beq.n	8009562 <HAL_RCCEx_PeriphCLKConfig+0x8b6>
 8009550:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009554:	d007      	beq.n	8009566 <HAL_RCCEx_PeriphCLKConfig+0x8ba>
      case RCC_RNGCLKSOURCE_HSI48:
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;
      default:
        ret = HAL_ERROR;
 8009556:	2301      	movs	r3, #1
 8009558:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 800955c:	e004      	b.n	8009568 <HAL_RCCEx_PeriphCLKConfig+0x8bc>
        break;
 800955e:	bf00      	nop
 8009560:	e002      	b.n	8009568 <HAL_RCCEx_PeriphCLKConfig+0x8bc>
        break;
 8009562:	bf00      	nop
 8009564:	e000      	b.n	8009568 <HAL_RCCEx_PeriphCLKConfig+0x8bc>
        break;
 8009566:	bf00      	nop
    }
    if (ret == HAL_OK)
 8009568:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 800956c:	2b00      	cmp	r3, #0
 800956e:	d111      	bne.n	8009594 <HAL_RCCEx_PeriphCLKConfig+0x8e8>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 8009570:	4b06      	ldr	r3, [pc, #24]	@ (800958c <HAL_RCCEx_PeriphCLKConfig+0x8e0>)
 8009572:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8009576:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800957a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800957e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8009582:	4a02      	ldr	r2, [pc, #8]	@ (800958c <HAL_RCCEx_PeriphCLKConfig+0x8e0>)
 8009584:	430b      	orrs	r3, r1
 8009586:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800958a:	e007      	b.n	800959c <HAL_RCCEx_PeriphCLKConfig+0x8f0>
 800958c:	46020c00 	.word	0x46020c00
 8009590:	46020800 	.word	0x46020800
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009594:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8009598:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    __HAL_RCC_SAES_CONFIG(pPeriphClkInit->SaesClockSelection);
  }
#endif /* SAES */

  /*-------------------------- SDMMC1/2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == (RCC_PERIPHCLK_SDMMC))
 800959c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80095a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095a4:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 80095a8:	633b      	str	r3, [r7, #48]	@ 0x30
 80095aa:	2300      	movs	r3, #0
 80095ac:	637b      	str	r3, [r7, #52]	@ 0x34
 80095ae:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 80095b2:	460b      	mov	r3, r1
 80095b4:	4313      	orrs	r3, r2
 80095b6:	d019      	beq.n	80095ec <HAL_RCCEx_PeriphCLKConfig+0x940>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMCCLKSOURCE(pPeriphClkInit->SdmmcClockSelection));

    if (pPeriphClkInit->SdmmcClockSelection == RCC_SDMMCCLKSOURCE_PLL1)
 80095b8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80095bc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80095c0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80095c4:	d105      	bne.n	80095d2 <HAL_RCCEx_PeriphCLKConfig+0x926>
    {
      /* Enable PLL1 P CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80095c6:	4b88      	ldr	r3, [pc, #544]	@ (80097e8 <HAL_RCCEx_PeriphCLKConfig+0xb3c>)
 80095c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80095ca:	4a87      	ldr	r2, [pc, #540]	@ (80097e8 <HAL_RCCEx_PeriphCLKConfig+0xb3c>)
 80095cc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80095d0:	6293      	str	r3, [r2, #40]	@ 0x28
    }

    /* Configure the SDMMC1/2 clock source */
    __HAL_RCC_SDMMC_CONFIG(pPeriphClkInit->SdmmcClockSelection);
 80095d2:	4b85      	ldr	r3, [pc, #532]	@ (80097e8 <HAL_RCCEx_PeriphCLKConfig+0xb3c>)
 80095d4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80095d8:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 80095dc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80095e0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80095e4:	4a80      	ldr	r2, [pc, #512]	@ (80097e8 <HAL_RCCEx_PeriphCLKConfig+0xb3c>)
 80095e6:	430b      	orrs	r3, r1
 80095e8:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 80095ec:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80095f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095f4:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 80095f8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80095fa:	2300      	movs	r3, #0
 80095fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80095fe:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8009602:	460b      	mov	r3, r1
 8009604:	4313      	orrs	r3, r2
 8009606:	d00c      	beq.n	8009622 <HAL_RCCEx_PeriphCLKConfig+0x976>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    /* Configure the SPI1 clock source */
    __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 8009608:	4b77      	ldr	r3, [pc, #476]	@ (80097e8 <HAL_RCCEx_PeriphCLKConfig+0xb3c>)
 800960a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800960e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8009612:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8009616:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800961a:	4973      	ldr	r1, [pc, #460]	@ (80097e8 <HAL_RCCEx_PeriphCLKConfig+0xb3c>)
 800961c:	4313      	orrs	r3, r2
 800961e:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 8009622:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8009626:	e9d3 2300 	ldrd	r2, r3, [r3]
 800962a:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 800962e:	623b      	str	r3, [r7, #32]
 8009630:	2300      	movs	r3, #0
 8009632:	627b      	str	r3, [r7, #36]	@ 0x24
 8009634:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8009638:	460b      	mov	r3, r1
 800963a:	4313      	orrs	r3, r2
 800963c:	d00c      	beq.n	8009658 <HAL_RCCEx_PeriphCLKConfig+0x9ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    /* Configure the SPI2 clock source */
    __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 800963e:	4b6a      	ldr	r3, [pc, #424]	@ (80097e8 <HAL_RCCEx_PeriphCLKConfig+0xb3c>)
 8009640:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009644:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8009648:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800964c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8009650:	4965      	ldr	r1, [pc, #404]	@ (80097e8 <HAL_RCCEx_PeriphCLKConfig+0xb3c>)
 8009652:	4313      	orrs	r3, r2
 8009654:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 8009658:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800965c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009660:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8009664:	61bb      	str	r3, [r7, #24]
 8009666:	2300      	movs	r3, #0
 8009668:	61fb      	str	r3, [r7, #28]
 800966a:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800966e:	460b      	mov	r3, r1
 8009670:	4313      	orrs	r3, r2
 8009672:	d00c      	beq.n	800968e <HAL_RCCEx_PeriphCLKConfig+0x9e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    /* Configure the SPI3 clock source */
    __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 8009674:	4b5c      	ldr	r3, [pc, #368]	@ (80097e8 <HAL_RCCEx_PeriphCLKConfig+0xb3c>)
 8009676:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800967a:	f023 0218 	bic.w	r2, r3, #24
 800967e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8009682:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8009686:	4958      	ldr	r1, [pc, #352]	@ (80097e8 <HAL_RCCEx_PeriphCLKConfig+0xb3c>)
 8009688:	4313      	orrs	r3, r2
 800968a:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800968e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8009692:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009696:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 800969a:	613b      	str	r3, [r7, #16]
 800969c:	2300      	movs	r3, #0
 800969e:	617b      	str	r3, [r7, #20]
 80096a0:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80096a4:	460b      	mov	r3, r1
 80096a6:	4313      	orrs	r3, r2
 80096a8:	d032      	beq.n	8009710 <HAL_RCCEx_PeriphCLKConfig+0xa64>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL1)
 80096aa:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80096ae:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80096b2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80096b6:	d105      	bne.n	80096c4 <HAL_RCCEx_PeriphCLKConfig+0xa18>
    {
      /* Enable PLL1 Q CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80096b8:	4b4b      	ldr	r3, [pc, #300]	@ (80097e8 <HAL_RCCEx_PeriphCLKConfig+0xb3c>)
 80096ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80096bc:	4a4a      	ldr	r2, [pc, #296]	@ (80097e8 <HAL_RCCEx_PeriphCLKConfig+0xb3c>)
 80096be:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80096c2:	6293      	str	r3, [r2, #40]	@ 0x28
    }
    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL2)
 80096c4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80096c8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80096cc:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80096d0:	d108      	bne.n	80096e4 <HAL_RCCEx_PeriphCLKConfig+0xa38>
    {
      /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
      ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80096d2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80096d6:	3308      	adds	r3, #8
 80096d8:	4618      	mov	r0, r3
 80096da:	f001 fec9 	bl	800b470 <RCCEx_PLL2_Config>
 80096de:	4603      	mov	r3, r0
 80096e0:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
    }
    if (ret == HAL_OK)
 80096e4:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 80096e8:	2b00      	cmp	r3, #0
 80096ea:	d10d      	bne.n	8009708 <HAL_RCCEx_PeriphCLKConfig+0xa5c>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 80096ec:	4b3e      	ldr	r3, [pc, #248]	@ (80097e8 <HAL_RCCEx_PeriphCLKConfig+0xb3c>)
 80096ee:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80096f2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80096f6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80096fa:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80096fe:	493a      	ldr	r1, [pc, #232]	@ (80097e8 <HAL_RCCEx_PeriphCLKConfig+0xb3c>)
 8009700:	4313      	orrs	r3, r2
 8009702:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 8009706:	e003      	b.n	8009710 <HAL_RCCEx_PeriphCLKConfig+0xa64>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009708:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 800970c:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }
#endif /* defined(HSPI1) */

  /*-------------------------- FDCAN1 kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN1) == (RCC_PERIPHCLK_FDCAN1))
 8009710:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8009714:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009718:	f002 6300 	and.w	r3, r2, #134217728	@ 0x8000000
 800971c:	60bb      	str	r3, [r7, #8]
 800971e:	2300      	movs	r3, #0
 8009720:	60fb      	str	r3, [r7, #12]
 8009722:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8009726:	460b      	mov	r3, r1
 8009728:	4313      	orrs	r3, r2
 800972a:	d03a      	beq.n	80097a2 <HAL_RCCEx_PeriphCLKConfig+0xaf6>
  {
    assert_param(IS_RCC_FDCAN1CLK(pPeriphClkInit->Fdcan1ClockSelection));

    switch (pPeriphClkInit->Fdcan1ClockSelection)
 800972c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8009730:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009734:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009738:	d00e      	beq.n	8009758 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 800973a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800973e:	d815      	bhi.n	800976c <HAL_RCCEx_PeriphCLKConfig+0xac0>
 8009740:	2b00      	cmp	r3, #0
 8009742:	d017      	beq.n	8009774 <HAL_RCCEx_PeriphCLKConfig+0xac8>
 8009744:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009748:	d110      	bne.n	800976c <HAL_RCCEx_PeriphCLKConfig+0xac0>
      case RCC_FDCAN1CLKSOURCE_HSE:      /* HSE is used as source of FDCAN1 kernel clock*/
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
      case RCC_FDCAN1CLKSOURCE_PLL1:      /* PLL1 is used as clock source for FDCAN1 kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800974a:	4b27      	ldr	r3, [pc, #156]	@ (80097e8 <HAL_RCCEx_PeriphCLKConfig+0xb3c>)
 800974c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800974e:	4a26      	ldr	r2, [pc, #152]	@ (80097e8 <HAL_RCCEx_PeriphCLKConfig+0xb3c>)
 8009750:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009754:	6293      	str	r3, [r2, #40]	@ 0x28
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 8009756:	e00e      	b.n	8009776 <HAL_RCCEx_PeriphCLKConfig+0xaca>
      case RCC_FDCAN1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for FDCAN1 kernel clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8009758:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800975c:	3308      	adds	r3, #8
 800975e:	4618      	mov	r0, r3
 8009760:	f001 fe86 	bl	800b470 <RCCEx_PLL2_Config>
 8009764:	4603      	mov	r3, r0
 8009766:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 800976a:	e004      	b.n	8009776 <HAL_RCCEx_PeriphCLKConfig+0xaca>
      default:
        ret = HAL_ERROR;
 800976c:	2301      	movs	r3, #1
 800976e:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8009772:	e000      	b.n	8009776 <HAL_RCCEx_PeriphCLKConfig+0xaca>
        break;
 8009774:	bf00      	nop
    }
    if (ret == HAL_OK)
 8009776:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 800977a:	2b00      	cmp	r3, #0
 800977c:	d10d      	bne.n	800979a <HAL_RCCEx_PeriphCLKConfig+0xaee>
    {
      /* Set the source of FDCAN1 kernel clock*/
      __HAL_RCC_FDCAN1_CONFIG(pPeriphClkInit->Fdcan1ClockSelection);
 800977e:	4b1a      	ldr	r3, [pc, #104]	@ (80097e8 <HAL_RCCEx_PeriphCLKConfig+0xb3c>)
 8009780:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009784:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8009788:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800978c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009790:	4915      	ldr	r1, [pc, #84]	@ (80097e8 <HAL_RCCEx_PeriphCLKConfig+0xb3c>)
 8009792:	4313      	orrs	r3, r2
 8009794:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 8009798:	e003      	b.n	80097a2 <HAL_RCCEx_PeriphCLKConfig+0xaf6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800979a:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 800979e:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }

  /*-------------------------- DAC1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC1) == RCC_PERIPHCLK_DAC1)
 80097a2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80097a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097aa:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 80097ae:	603b      	str	r3, [r7, #0]
 80097b0:	2300      	movs	r3, #0
 80097b2:	607b      	str	r3, [r7, #4]
 80097b4:	e9d7 1200 	ldrd	r1, r2, [r7]
 80097b8:	460b      	mov	r3, r1
 80097ba:	4313      	orrs	r3, r2
 80097bc:	d00c      	beq.n	80097d8 <HAL_RCCEx_PeriphCLKConfig+0xb2c>

    /* Check the parameters */
    assert_param(IS_RCC_DAC1CLKSOURCE(pPeriphClkInit->Dac1ClockSelection));

    /* Configure the DAC1 clock source */
    __HAL_RCC_DAC1_CONFIG(pPeriphClkInit->Dac1ClockSelection);
 80097be:	4b0a      	ldr	r3, [pc, #40]	@ (80097e8 <HAL_RCCEx_PeriphCLKConfig+0xb3c>)
 80097c0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80097c4:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 80097c8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80097cc:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80097d0:	4905      	ldr	r1, [pc, #20]	@ (80097e8 <HAL_RCCEx_PeriphCLKConfig+0xb3c>)
 80097d2:	4313      	orrs	r3, r2
 80097d4:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
    }
  }

#endif /* defined(USB_OTG_HS) */

  return status;
 80097d8:	f897 30da 	ldrb.w	r3, [r7, #218]	@ 0xda
}
 80097dc:	4618      	mov	r0, r3
 80097de:	37e0      	adds	r7, #224	@ 0xe0
 80097e0:	46bd      	mov	sp, r7
 80097e2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80097e6:	bf00      	nop
 80097e8:	46020c00 	.word	0x46020c00

080097ec <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 80097ec:	b5b0      	push	{r4, r5, r7, lr}
 80097ee:	b088      	sub	sp, #32
 80097f0:	af00      	add	r7, sp, #0
 80097f2:	6078      	str	r0, [r7, #4]
  uint32_t pll1n;
  uint32_t pll1fracen;
  float_t fracn1;
  float_t pll1vco;

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 80097f4:	4ba5      	ldr	r3, [pc, #660]	@ (8009a8c <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>)
 80097f6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80097f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80097fc:	61bb      	str	r3, [r7, #24]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 80097fe:	4ba3      	ldr	r3, [pc, #652]	@ (8009a8c <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>)
 8009800:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009802:	f003 0303 	and.w	r3, r3, #3
 8009806:	617b      	str	r3, [r7, #20]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8009808:	4ba0      	ldr	r3, [pc, #640]	@ (8009a8c <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>)
 800980a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800980c:	0a1b      	lsrs	r3, r3, #8
 800980e:	f003 030f 	and.w	r3, r3, #15
 8009812:	3301      	adds	r3, #1
 8009814:	613b      	str	r3, [r7, #16]
  pll1fracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8009816:	4b9d      	ldr	r3, [pc, #628]	@ (8009a8c <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>)
 8009818:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800981a:	091b      	lsrs	r3, r3, #4
 800981c:	f003 0301 	and.w	r3, r3, #1
 8009820:	60fb      	str	r3, [r7, #12]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8009822:	4b9a      	ldr	r3, [pc, #616]	@ (8009a8c <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>)
 8009824:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009826:	08db      	lsrs	r3, r3, #3
 8009828:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800982c:	68fa      	ldr	r2, [r7, #12]
 800982e:	fb02 f303 	mul.w	r3, r2, r3
 8009832:	4618      	mov	r0, r3
 8009834:	f7f7 fac2 	bl	8000dbc <__aeabi_ui2f>
 8009838:	4603      	mov	r3, r0
 800983a:	60bb      	str	r3, [r7, #8]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  switch (pll1source)
 800983c:	697b      	ldr	r3, [r7, #20]
 800983e:	2b03      	cmp	r3, #3
 8009840:	d074      	beq.n	800992c <HAL_RCCEx_GetPLL1ClockFreq+0x140>
 8009842:	697b      	ldr	r3, [r7, #20]
 8009844:	2b03      	cmp	r3, #3
 8009846:	f200 809b 	bhi.w	8009980 <HAL_RCCEx_GetPLL1ClockFreq+0x194>
 800984a:	697b      	ldr	r3, [r7, #20]
 800984c:	2b01      	cmp	r3, #1
 800984e:	d02d      	beq.n	80098ac <HAL_RCCEx_GetPLL1ClockFreq+0xc0>
 8009850:	697b      	ldr	r3, [r7, #20]
 8009852:	2b02      	cmp	r3, #2
 8009854:	f040 8094 	bne.w	8009980 <HAL_RCCEx_GetPLL1ClockFreq+0x194>
  {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8009858:	6938      	ldr	r0, [r7, #16]
 800985a:	f7f7 faaf 	bl	8000dbc <__aeabi_ui2f>
 800985e:	4603      	mov	r3, r0
 8009860:	4619      	mov	r1, r3
 8009862:	488b      	ldr	r0, [pc, #556]	@ (8009a90 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8009864:	f7f7 fbb6 	bl	8000fd4 <__aeabi_fdiv>
 8009868:	4603      	mov	r3, r0
 800986a:	461d      	mov	r5, r3
 800986c:	4b87      	ldr	r3, [pc, #540]	@ (8009a8c <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>)
 800986e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009870:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009874:	4618      	mov	r0, r3
 8009876:	f7f7 faa1 	bl	8000dbc <__aeabi_ui2f>
 800987a:	4604      	mov	r4, r0
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 800987c:	f04f 418c 	mov.w	r1, #1174405120	@ 0x46000000
 8009880:	68b8      	ldr	r0, [r7, #8]
 8009882:	f7f7 fba7 	bl	8000fd4 <__aeabi_fdiv>
 8009886:	4603      	mov	r3, r0
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8009888:	4619      	mov	r1, r3
 800988a:	4620      	mov	r0, r4
 800988c:	f7f7 f9e6 	bl	8000c5c <__addsf3>
 8009890:	4603      	mov	r3, r0
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 8009892:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8009896:	4618      	mov	r0, r3
 8009898:	f7f7 f9e0 	bl	8000c5c <__addsf3>
 800989c:	4603      	mov	r3, r0
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800989e:	4619      	mov	r1, r3
 80098a0:	4628      	mov	r0, r5
 80098a2:	f7f7 fae3 	bl	8000e6c <__aeabi_fmul>
 80098a6:	4603      	mov	r3, r0
 80098a8:	61fb      	str	r3, [r7, #28]
      break;
 80098aa:	e0a9      	b.n	8009a00 <HAL_RCCEx_GetPLL1ClockFreq+0x214>
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 80098ac:	4b77      	ldr	r3, [pc, #476]	@ (8009a8c <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>)
 80098ae:	689b      	ldr	r3, [r3, #8]
 80098b0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80098b4:	2b00      	cmp	r3, #0
 80098b6:	d005      	beq.n	80098c4 <HAL_RCCEx_GetPLL1ClockFreq+0xd8>
 80098b8:	4b74      	ldr	r3, [pc, #464]	@ (8009a8c <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>)
 80098ba:	689b      	ldr	r3, [r3, #8]
 80098bc:	0f1b      	lsrs	r3, r3, #28
 80098be:	f003 030f 	and.w	r3, r3, #15
 80098c2:	e006      	b.n	80098d2 <HAL_RCCEx_GetPLL1ClockFreq+0xe6>
 80098c4:	4b71      	ldr	r3, [pc, #452]	@ (8009a8c <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>)
 80098c6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80098ca:	041b      	lsls	r3, r3, #16
 80098cc:	0f1b      	lsrs	r3, r3, #28
 80098ce:	f003 030f 	and.w	r3, r3, #15
 80098d2:	4a70      	ldr	r2, [pc, #448]	@ (8009a94 <HAL_RCCEx_GetPLL1ClockFreq+0x2a8>)
 80098d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80098d8:	4618      	mov	r0, r3
 80098da:	f7f7 fa6f 	bl	8000dbc <__aeabi_ui2f>
 80098de:	4604      	mov	r4, r0
 80098e0:	6938      	ldr	r0, [r7, #16]
 80098e2:	f7f7 fa6b 	bl	8000dbc <__aeabi_ui2f>
 80098e6:	4603      	mov	r3, r0
 80098e8:	4619      	mov	r1, r3
 80098ea:	4620      	mov	r0, r4
 80098ec:	f7f7 fb72 	bl	8000fd4 <__aeabi_fdiv>
 80098f0:	4603      	mov	r3, r0
 80098f2:	461d      	mov	r5, r3
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 80098f4:	69b8      	ldr	r0, [r7, #24]
 80098f6:	f7f7 fa61 	bl	8000dbc <__aeabi_ui2f>
 80098fa:	4604      	mov	r4, r0
 80098fc:	f04f 418c 	mov.w	r1, #1174405120	@ 0x46000000
 8009900:	68b8      	ldr	r0, [r7, #8]
 8009902:	f7f7 fb67 	bl	8000fd4 <__aeabi_fdiv>
 8009906:	4603      	mov	r3, r0
 8009908:	4619      	mov	r1, r3
 800990a:	4620      	mov	r0, r4
 800990c:	f7f7 f9a6 	bl	8000c5c <__addsf3>
 8009910:	4603      	mov	r3, r0
 8009912:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8009916:	4618      	mov	r0, r3
 8009918:	f7f7 f9a0 	bl	8000c5c <__addsf3>
 800991c:	4603      	mov	r3, r0
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 800991e:	4619      	mov	r1, r3
 8009920:	4628      	mov	r0, r5
 8009922:	f7f7 faa3 	bl	8000e6c <__aeabi_fmul>
 8009926:	4603      	mov	r3, r0
 8009928:	61fb      	str	r3, [r7, #28]
      break;
 800992a:	e069      	b.n	8009a00 <HAL_RCCEx_GetPLL1ClockFreq+0x214>
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800992c:	6938      	ldr	r0, [r7, #16]
 800992e:	f7f7 fa45 	bl	8000dbc <__aeabi_ui2f>
 8009932:	4603      	mov	r3, r0
 8009934:	4619      	mov	r1, r3
 8009936:	4856      	ldr	r0, [pc, #344]	@ (8009a90 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8009938:	f7f7 fb4c 	bl	8000fd4 <__aeabi_fdiv>
 800993c:	4603      	mov	r3, r0
 800993e:	461d      	mov	r5, r3
 8009940:	4b52      	ldr	r3, [pc, #328]	@ (8009a8c <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>)
 8009942:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009944:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009948:	4618      	mov	r0, r3
 800994a:	f7f7 fa37 	bl	8000dbc <__aeabi_ui2f>
 800994e:	4604      	mov	r4, r0
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 8009950:	f04f 418c 	mov.w	r1, #1174405120	@ 0x46000000
 8009954:	68b8      	ldr	r0, [r7, #8]
 8009956:	f7f7 fb3d 	bl	8000fd4 <__aeabi_fdiv>
 800995a:	4603      	mov	r3, r0
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800995c:	4619      	mov	r1, r3
 800995e:	4620      	mov	r0, r4
 8009960:	f7f7 f97c 	bl	8000c5c <__addsf3>
 8009964:	4603      	mov	r3, r0
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 8009966:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 800996a:	4618      	mov	r0, r3
 800996c:	f7f7 f976 	bl	8000c5c <__addsf3>
 8009970:	4603      	mov	r3, r0
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8009972:	4619      	mov	r1, r3
 8009974:	4628      	mov	r0, r5
 8009976:	f7f7 fa79 	bl	8000e6c <__aeabi_fmul>
 800997a:	4603      	mov	r3, r0
 800997c:	61fb      	str	r3, [r7, #28]
      break;
 800997e:	e03f      	b.n	8009a00 <HAL_RCCEx_GetPLL1ClockFreq+0x214>
    default:
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8009980:	4b42      	ldr	r3, [pc, #264]	@ (8009a8c <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>)
 8009982:	689b      	ldr	r3, [r3, #8]
 8009984:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009988:	2b00      	cmp	r3, #0
 800998a:	d005      	beq.n	8009998 <HAL_RCCEx_GetPLL1ClockFreq+0x1ac>
 800998c:	4b3f      	ldr	r3, [pc, #252]	@ (8009a8c <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>)
 800998e:	689b      	ldr	r3, [r3, #8]
 8009990:	0f1b      	lsrs	r3, r3, #28
 8009992:	f003 030f 	and.w	r3, r3, #15
 8009996:	e006      	b.n	80099a6 <HAL_RCCEx_GetPLL1ClockFreq+0x1ba>
 8009998:	4b3c      	ldr	r3, [pc, #240]	@ (8009a8c <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>)
 800999a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800999e:	041b      	lsls	r3, r3, #16
 80099a0:	0f1b      	lsrs	r3, r3, #28
 80099a2:	f003 030f 	and.w	r3, r3, #15
 80099a6:	4a3b      	ldr	r2, [pc, #236]	@ (8009a94 <HAL_RCCEx_GetPLL1ClockFreq+0x2a8>)
 80099a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80099ac:	4618      	mov	r0, r3
 80099ae:	f7f7 fa05 	bl	8000dbc <__aeabi_ui2f>
 80099b2:	4604      	mov	r4, r0
 80099b4:	6938      	ldr	r0, [r7, #16]
 80099b6:	f7f7 fa01 	bl	8000dbc <__aeabi_ui2f>
 80099ba:	4603      	mov	r3, r0
 80099bc:	4619      	mov	r1, r3
 80099be:	4620      	mov	r0, r4
 80099c0:	f7f7 fb08 	bl	8000fd4 <__aeabi_fdiv>
 80099c4:	4603      	mov	r3, r0
 80099c6:	461d      	mov	r5, r3
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 80099c8:	69b8      	ldr	r0, [r7, #24]
 80099ca:	f7f7 f9f7 	bl	8000dbc <__aeabi_ui2f>
 80099ce:	4604      	mov	r4, r0
 80099d0:	f04f 418c 	mov.w	r1, #1174405120	@ 0x46000000
 80099d4:	68b8      	ldr	r0, [r7, #8]
 80099d6:	f7f7 fafd 	bl	8000fd4 <__aeabi_fdiv>
 80099da:	4603      	mov	r3, r0
 80099dc:	4619      	mov	r1, r3
 80099de:	4620      	mov	r0, r4
 80099e0:	f7f7 f93c 	bl	8000c5c <__addsf3>
 80099e4:	4603      	mov	r3, r0
 80099e6:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 80099ea:	4618      	mov	r0, r3
 80099ec:	f7f7 f936 	bl	8000c5c <__addsf3>
 80099f0:	4603      	mov	r3, r0
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 80099f2:	4619      	mov	r1, r3
 80099f4:	4628      	mov	r0, r5
 80099f6:	f7f7 fa39 	bl	8000e6c <__aeabi_fmul>
 80099fa:	4603      	mov	r3, r0
 80099fc:	61fb      	str	r3, [r7, #28]
      break;
 80099fe:	bf00      	nop
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 8009a00:	4b22      	ldr	r3, [pc, #136]	@ (8009a8c <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>)
 8009a02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009a04:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8009a08:	2b00      	cmp	r3, #0
 8009a0a:	d01a      	beq.n	8009a42 <HAL_RCCEx_GetPLL1ClockFreq+0x256>
  {
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8009a0c:	4b1f      	ldr	r3, [pc, #124]	@ (8009a8c <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>)
 8009a0e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009a10:	0a5b      	lsrs	r3, r3, #9
 8009a12:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009a16:	4618      	mov	r0, r3
 8009a18:	f7f7 f9d0 	bl	8000dbc <__aeabi_ui2f>
 8009a1c:	4603      	mov	r3, r0
                                                                   RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + \
 8009a1e:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8009a22:	4618      	mov	r0, r3
 8009a24:	f7f7 f91a 	bl	8000c5c <__addsf3>
 8009a28:	4603      	mov	r3, r0
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8009a2a:	4619      	mov	r1, r3
 8009a2c:	69f8      	ldr	r0, [r7, #28]
 8009a2e:	f7f7 fad1 	bl	8000fd4 <__aeabi_fdiv>
 8009a32:	4603      	mov	r3, r0
 8009a34:	4618      	mov	r0, r3
 8009a36:	f7f7 fb69 	bl	800110c <__aeabi_f2uiz>
 8009a3a:	4602      	mov	r2, r0
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	601a      	str	r2, [r3, #0]
 8009a40:	e002      	b.n	8009a48 <HAL_RCCEx_GetPLL1ClockFreq+0x25c>
                                                                   (float_t)1));
  }
  else
  {
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	2200      	movs	r2, #0
 8009a46:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 8009a48:	4b10      	ldr	r3, [pc, #64]	@ (8009a8c <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>)
 8009a4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009a4c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009a50:	2b00      	cmp	r3, #0
 8009a52:	d021      	beq.n	8009a98 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
  {
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8009a54:	4b0d      	ldr	r3, [pc, #52]	@ (8009a8c <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>)
 8009a56:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009a58:	0c1b      	lsrs	r3, r3, #16
 8009a5a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009a5e:	4618      	mov	r0, r3
 8009a60:	f7f7 f9ac 	bl	8000dbc <__aeabi_ui2f>
 8009a64:	4603      	mov	r3, r0
                                                                   RCC_PLL1DIVR_PLL1Q) >> RCC_PLL1DIVR_PLL1Q_Pos) + \
 8009a66:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8009a6a:	4618      	mov	r0, r3
 8009a6c:	f7f7 f8f6 	bl	8000c5c <__addsf3>
 8009a70:	4603      	mov	r3, r0
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8009a72:	4619      	mov	r1, r3
 8009a74:	69f8      	ldr	r0, [r7, #28]
 8009a76:	f7f7 faad 	bl	8000fd4 <__aeabi_fdiv>
 8009a7a:	4603      	mov	r3, r0
 8009a7c:	4618      	mov	r0, r3
 8009a7e:	f7f7 fb45 	bl	800110c <__aeabi_f2uiz>
 8009a82:	4602      	mov	r2, r0
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	605a      	str	r2, [r3, #4]
 8009a88:	e009      	b.n	8009a9e <HAL_RCCEx_GetPLL1ClockFreq+0x2b2>
 8009a8a:	bf00      	nop
 8009a8c:	46020c00 	.word	0x46020c00
 8009a90:	4b742400 	.word	0x4b742400
 8009a94:	08011ad4 	.word	0x08011ad4
                                                                   (float_t)1));
  }
  else
  {
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	2200      	movs	r2, #0
 8009a9c:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 8009a9e:	4b14      	ldr	r3, [pc, #80]	@ (8009af0 <HAL_RCCEx_GetPLL1ClockFreq+0x304>)
 8009aa0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009aa2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8009aa6:	2b00      	cmp	r3, #0
 8009aa8:	d01a      	beq.n	8009ae0 <HAL_RCCEx_GetPLL1ClockFreq+0x2f4>
  {
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8009aaa:	4b11      	ldr	r3, [pc, #68]	@ (8009af0 <HAL_RCCEx_GetPLL1ClockFreq+0x304>)
 8009aac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009aae:	0e1b      	lsrs	r3, r3, #24
 8009ab0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009ab4:	4618      	mov	r0, r3
 8009ab6:	f7f7 f981 	bl	8000dbc <__aeabi_ui2f>
 8009aba:	4603      	mov	r3, r0
                                                                   RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + \
 8009abc:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8009ac0:	4618      	mov	r0, r3
 8009ac2:	f7f7 f8cb 	bl	8000c5c <__addsf3>
 8009ac6:	4603      	mov	r3, r0
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8009ac8:	4619      	mov	r1, r3
 8009aca:	69f8      	ldr	r0, [r7, #28]
 8009acc:	f7f7 fa82 	bl	8000fd4 <__aeabi_fdiv>
 8009ad0:	4603      	mov	r3, r0
 8009ad2:	4618      	mov	r0, r3
 8009ad4:	f7f7 fb1a 	bl	800110c <__aeabi_f2uiz>
 8009ad8:	4602      	mov	r2, r0
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	609a      	str	r2, [r3, #8]
  else
  {
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8009ade:	e002      	b.n	8009ae6 <HAL_RCCEx_GetPLL1ClockFreq+0x2fa>
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	2200      	movs	r2, #0
 8009ae4:	609a      	str	r2, [r3, #8]
}
 8009ae6:	bf00      	nop
 8009ae8:	3720      	adds	r7, #32
 8009aea:	46bd      	mov	sp, r7
 8009aec:	bdb0      	pop	{r4, r5, r7, pc}
 8009aee:	bf00      	nop
 8009af0:	46020c00 	.word	0x46020c00

08009af4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8009af4:	b5b0      	push	{r4, r5, r7, lr}
 8009af6:	b088      	sub	sp, #32
 8009af8:	af00      	add	r7, sp, #0
 8009afa:	6078      	str	r0, [r7, #4]
  float_t fracn2;
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 8009afc:	4ba5      	ldr	r3, [pc, #660]	@ (8009d94 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>)
 8009afe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009b00:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009b04:	61bb      	str	r3, [r7, #24]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 8009b06:	4ba3      	ldr	r3, [pc, #652]	@ (8009d94 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>)
 8009b08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009b0a:	f003 0303 	and.w	r3, r3, #3
 8009b0e:	617b      	str	r3, [r7, #20]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos) + 1U;
 8009b10:	4ba0      	ldr	r3, [pc, #640]	@ (8009d94 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>)
 8009b12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009b14:	0a1b      	lsrs	r3, r3, #8
 8009b16:	f003 030f 	and.w	r3, r3, #15
 8009b1a:	3301      	adds	r3, #1
 8009b1c:	613b      	str	r3, [r7, #16]
  pll2fracen = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN) >> RCC_PLL2CFGR_PLL2FRACEN_Pos);
 8009b1e:	4b9d      	ldr	r3, [pc, #628]	@ (8009d94 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>)
 8009b20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009b22:	091b      	lsrs	r3, r3, #4
 8009b24:	f003 0301 	and.w	r3, r3, #1
 8009b28:	60fb      	str	r3, [r7, #12]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 8009b2a:	4b9a      	ldr	r3, [pc, #616]	@ (8009d94 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>)
 8009b2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009b2e:	08db      	lsrs	r3, r3, #3
 8009b30:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009b34:	68fa      	ldr	r2, [r7, #12]
 8009b36:	fb02 f303 	mul.w	r3, r2, r3
 8009b3a:	4618      	mov	r0, r3
 8009b3c:	f7f7 f93e 	bl	8000dbc <__aeabi_ui2f>
 8009b40:	4603      	mov	r3, r0
 8009b42:	60bb      	str	r3, [r7, #8]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  switch (pll2source)
 8009b44:	697b      	ldr	r3, [r7, #20]
 8009b46:	2b03      	cmp	r3, #3
 8009b48:	d074      	beq.n	8009c34 <HAL_RCCEx_GetPLL2ClockFreq+0x140>
 8009b4a:	697b      	ldr	r3, [r7, #20]
 8009b4c:	2b03      	cmp	r3, #3
 8009b4e:	f200 809b 	bhi.w	8009c88 <HAL_RCCEx_GetPLL2ClockFreq+0x194>
 8009b52:	697b      	ldr	r3, [r7, #20]
 8009b54:	2b01      	cmp	r3, #1
 8009b56:	d02d      	beq.n	8009bb4 <HAL_RCCEx_GetPLL2ClockFreq+0xc0>
 8009b58:	697b      	ldr	r3, [r7, #20]
 8009b5a:	2b02      	cmp	r3, #2
 8009b5c:	f040 8094 	bne.w	8009c88 <HAL_RCCEx_GetPLL2ClockFreq+0x194>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8009b60:	6938      	ldr	r0, [r7, #16]
 8009b62:	f7f7 f92b 	bl	8000dbc <__aeabi_ui2f>
 8009b66:	4603      	mov	r3, r0
 8009b68:	4619      	mov	r1, r3
 8009b6a:	488b      	ldr	r0, [pc, #556]	@ (8009d98 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8009b6c:	f7f7 fa32 	bl	8000fd4 <__aeabi_fdiv>
 8009b70:	4603      	mov	r3, r0
 8009b72:	461d      	mov	r5, r3
 8009b74:	4b87      	ldr	r3, [pc, #540]	@ (8009d94 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>)
 8009b76:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009b78:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009b7c:	4618      	mov	r0, r3
 8009b7e:	f7f7 f91d 	bl	8000dbc <__aeabi_ui2f>
 8009b82:	4604      	mov	r4, r0
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 8009b84:	f04f 418c 	mov.w	r1, #1174405120	@ 0x46000000
 8009b88:	68b8      	ldr	r0, [r7, #8]
 8009b8a:	f7f7 fa23 	bl	8000fd4 <__aeabi_fdiv>
 8009b8e:	4603      	mov	r3, r0
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8009b90:	4619      	mov	r1, r3
 8009b92:	4620      	mov	r0, r4
 8009b94:	f7f7 f862 	bl	8000c5c <__addsf3>
 8009b98:	4603      	mov	r3, r0
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 8009b9a:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8009b9e:	4618      	mov	r0, r3
 8009ba0:	f7f7 f85c 	bl	8000c5c <__addsf3>
 8009ba4:	4603      	mov	r3, r0
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8009ba6:	4619      	mov	r1, r3
 8009ba8:	4628      	mov	r0, r5
 8009baa:	f7f7 f95f 	bl	8000e6c <__aeabi_fmul>
 8009bae:	4603      	mov	r3, r0
 8009bb0:	61fb      	str	r3, [r7, #28]
      break;
 8009bb2:	e0a9      	b.n	8009d08 <HAL_RCCEx_GetPLL2ClockFreq+0x214>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 8009bb4:	4b77      	ldr	r3, [pc, #476]	@ (8009d94 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>)
 8009bb6:	689b      	ldr	r3, [r3, #8]
 8009bb8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009bbc:	2b00      	cmp	r3, #0
 8009bbe:	d005      	beq.n	8009bcc <HAL_RCCEx_GetPLL2ClockFreq+0xd8>
 8009bc0:	4b74      	ldr	r3, [pc, #464]	@ (8009d94 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>)
 8009bc2:	689b      	ldr	r3, [r3, #8]
 8009bc4:	0f1b      	lsrs	r3, r3, #28
 8009bc6:	f003 030f 	and.w	r3, r3, #15
 8009bca:	e006      	b.n	8009bda <HAL_RCCEx_GetPLL2ClockFreq+0xe6>
 8009bcc:	4b71      	ldr	r3, [pc, #452]	@ (8009d94 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>)
 8009bce:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8009bd2:	041b      	lsls	r3, r3, #16
 8009bd4:	0f1b      	lsrs	r3, r3, #28
 8009bd6:	f003 030f 	and.w	r3, r3, #15
 8009bda:	4a70      	ldr	r2, [pc, #448]	@ (8009d9c <HAL_RCCEx_GetPLL2ClockFreq+0x2a8>)
 8009bdc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009be0:	4618      	mov	r0, r3
 8009be2:	f7f7 f8eb 	bl	8000dbc <__aeabi_ui2f>
 8009be6:	4604      	mov	r4, r0
 8009be8:	6938      	ldr	r0, [r7, #16]
 8009bea:	f7f7 f8e7 	bl	8000dbc <__aeabi_ui2f>
 8009bee:	4603      	mov	r3, r0
 8009bf0:	4619      	mov	r1, r3
 8009bf2:	4620      	mov	r0, r4
 8009bf4:	f7f7 f9ee 	bl	8000fd4 <__aeabi_fdiv>
 8009bf8:	4603      	mov	r3, r0
 8009bfa:	461d      	mov	r5, r3
                ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009bfc:	69b8      	ldr	r0, [r7, #24]
 8009bfe:	f7f7 f8dd 	bl	8000dbc <__aeabi_ui2f>
 8009c02:	4604      	mov	r4, r0
 8009c04:	f04f 418c 	mov.w	r1, #1174405120	@ 0x46000000
 8009c08:	68b8      	ldr	r0, [r7, #8]
 8009c0a:	f7f7 f9e3 	bl	8000fd4 <__aeabi_fdiv>
 8009c0e:	4603      	mov	r3, r0
 8009c10:	4619      	mov	r1, r3
 8009c12:	4620      	mov	r0, r4
 8009c14:	f7f7 f822 	bl	8000c5c <__addsf3>
 8009c18:	4603      	mov	r3, r0
 8009c1a:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8009c1e:	4618      	mov	r0, r3
 8009c20:	f7f7 f81c 	bl	8000c5c <__addsf3>
 8009c24:	4603      	mov	r3, r0
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 8009c26:	4619      	mov	r1, r3
 8009c28:	4628      	mov	r0, r5
 8009c2a:	f7f7 f91f 	bl	8000e6c <__aeabi_fmul>
 8009c2e:	4603      	mov	r3, r0
 8009c30:	61fb      	str	r3, [r7, #28]
      break;
 8009c32:	e069      	b.n	8009d08 <HAL_RCCEx_GetPLL2ClockFreq+0x214>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8009c34:	6938      	ldr	r0, [r7, #16]
 8009c36:	f7f7 f8c1 	bl	8000dbc <__aeabi_ui2f>
 8009c3a:	4603      	mov	r3, r0
 8009c3c:	4619      	mov	r1, r3
 8009c3e:	4856      	ldr	r0, [pc, #344]	@ (8009d98 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8009c40:	f7f7 f9c8 	bl	8000fd4 <__aeabi_fdiv>
 8009c44:	4603      	mov	r3, r0
 8009c46:	461d      	mov	r5, r3
 8009c48:	4b52      	ldr	r3, [pc, #328]	@ (8009d94 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>)
 8009c4a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009c4c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009c50:	4618      	mov	r0, r3
 8009c52:	f7f7 f8b3 	bl	8000dbc <__aeabi_ui2f>
 8009c56:	4604      	mov	r4, r0
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 8009c58:	f04f 418c 	mov.w	r1, #1174405120	@ 0x46000000
 8009c5c:	68b8      	ldr	r0, [r7, #8]
 8009c5e:	f7f7 f9b9 	bl	8000fd4 <__aeabi_fdiv>
 8009c62:	4603      	mov	r3, r0
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8009c64:	4619      	mov	r1, r3
 8009c66:	4620      	mov	r0, r4
 8009c68:	f7f6 fff8 	bl	8000c5c <__addsf3>
 8009c6c:	4603      	mov	r3, r0
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 8009c6e:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8009c72:	4618      	mov	r0, r3
 8009c74:	f7f6 fff2 	bl	8000c5c <__addsf3>
 8009c78:	4603      	mov	r3, r0
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8009c7a:	4619      	mov	r1, r3
 8009c7c:	4628      	mov	r0, r5
 8009c7e:	f7f7 f8f5 	bl	8000e6c <__aeabi_fmul>
 8009c82:	4603      	mov	r3, r0
 8009c84:	61fb      	str	r3, [r7, #28]
      break;
 8009c86:	e03f      	b.n	8009d08 <HAL_RCCEx_GetPLL2ClockFreq+0x214>

    default:
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 8009c88:	4b42      	ldr	r3, [pc, #264]	@ (8009d94 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>)
 8009c8a:	689b      	ldr	r3, [r3, #8]
 8009c8c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009c90:	2b00      	cmp	r3, #0
 8009c92:	d005      	beq.n	8009ca0 <HAL_RCCEx_GetPLL2ClockFreq+0x1ac>
 8009c94:	4b3f      	ldr	r3, [pc, #252]	@ (8009d94 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>)
 8009c96:	689b      	ldr	r3, [r3, #8]
 8009c98:	0f1b      	lsrs	r3, r3, #28
 8009c9a:	f003 030f 	and.w	r3, r3, #15
 8009c9e:	e006      	b.n	8009cae <HAL_RCCEx_GetPLL2ClockFreq+0x1ba>
 8009ca0:	4b3c      	ldr	r3, [pc, #240]	@ (8009d94 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>)
 8009ca2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8009ca6:	041b      	lsls	r3, r3, #16
 8009ca8:	0f1b      	lsrs	r3, r3, #28
 8009caa:	f003 030f 	and.w	r3, r3, #15
 8009cae:	4a3b      	ldr	r2, [pc, #236]	@ (8009d9c <HAL_RCCEx_GetPLL2ClockFreq+0x2a8>)
 8009cb0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009cb4:	4618      	mov	r0, r3
 8009cb6:	f7f7 f881 	bl	8000dbc <__aeabi_ui2f>
 8009cba:	4604      	mov	r4, r0
 8009cbc:	6938      	ldr	r0, [r7, #16]
 8009cbe:	f7f7 f87d 	bl	8000dbc <__aeabi_ui2f>
 8009cc2:	4603      	mov	r3, r0
 8009cc4:	4619      	mov	r1, r3
 8009cc6:	4620      	mov	r0, r4
 8009cc8:	f7f7 f984 	bl	8000fd4 <__aeabi_fdiv>
 8009ccc:	4603      	mov	r3, r0
 8009cce:	461d      	mov	r5, r3
                * ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009cd0:	69b8      	ldr	r0, [r7, #24]
 8009cd2:	f7f7 f873 	bl	8000dbc <__aeabi_ui2f>
 8009cd6:	4604      	mov	r4, r0
 8009cd8:	f04f 418c 	mov.w	r1, #1174405120	@ 0x46000000
 8009cdc:	68b8      	ldr	r0, [r7, #8]
 8009cde:	f7f7 f979 	bl	8000fd4 <__aeabi_fdiv>
 8009ce2:	4603      	mov	r3, r0
 8009ce4:	4619      	mov	r1, r3
 8009ce6:	4620      	mov	r0, r4
 8009ce8:	f7f6 ffb8 	bl	8000c5c <__addsf3>
 8009cec:	4603      	mov	r3, r0
 8009cee:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8009cf2:	4618      	mov	r0, r3
 8009cf4:	f7f6 ffb2 	bl	8000c5c <__addsf3>
 8009cf8:	4603      	mov	r3, r0
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 8009cfa:	4619      	mov	r1, r3
 8009cfc:	4628      	mov	r0, r5
 8009cfe:	f7f7 f8b5 	bl	8000e6c <__aeabi_fmul>
 8009d02:	4603      	mov	r3, r0
 8009d04:	61fb      	str	r3, [r7, #28]
      break;
 8009d06:	bf00      	nop
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 8009d08:	4b22      	ldr	r3, [pc, #136]	@ (8009d94 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>)
 8009d0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009d0c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8009d10:	2b00      	cmp	r3, #0
 8009d12:	d01a      	beq.n	8009d4a <HAL_RCCEx_GetPLL2ClockFreq+0x256>
  {
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8009d14:	4b1f      	ldr	r3, [pc, #124]	@ (8009d94 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>)
 8009d16:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009d18:	0a5b      	lsrs	r3, r3, #9
 8009d1a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009d1e:	4618      	mov	r0, r3
 8009d20:	f7f7 f84c 	bl	8000dbc <__aeabi_ui2f>
 8009d24:	4603      	mov	r3, r0
                                                                   RCC_PLL2DIVR_PLL2P) >> RCC_PLL2DIVR_PLL2P_Pos) + \
 8009d26:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8009d2a:	4618      	mov	r0, r3
 8009d2c:	f7f6 ff96 	bl	8000c5c <__addsf3>
 8009d30:	4603      	mov	r3, r0
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8009d32:	4619      	mov	r1, r3
 8009d34:	69f8      	ldr	r0, [r7, #28]
 8009d36:	f7f7 f94d 	bl	8000fd4 <__aeabi_fdiv>
 8009d3a:	4603      	mov	r3, r0
 8009d3c:	4618      	mov	r0, r3
 8009d3e:	f7f7 f9e5 	bl	800110c <__aeabi_f2uiz>
 8009d42:	4602      	mov	r2, r0
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	601a      	str	r2, [r3, #0]
 8009d48:	e002      	b.n	8009d50 <HAL_RCCEx_GetPLL2ClockFreq+0x25c>
                                                                   (float_t)1));
  }
  else
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	2200      	movs	r2, #0
 8009d4e:	601a      	str	r2, [r3, #0]
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 8009d50:	4b10      	ldr	r3, [pc, #64]	@ (8009d94 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>)
 8009d52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009d54:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009d58:	2b00      	cmp	r3, #0
 8009d5a:	d021      	beq.n	8009da0 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
  {
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8009d5c:	4b0d      	ldr	r3, [pc, #52]	@ (8009d94 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>)
 8009d5e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009d60:	0c1b      	lsrs	r3, r3, #16
 8009d62:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009d66:	4618      	mov	r0, r3
 8009d68:	f7f7 f828 	bl	8000dbc <__aeabi_ui2f>
 8009d6c:	4603      	mov	r3, r0
                                                                   RCC_PLL2DIVR_PLL2Q) >> RCC_PLL2DIVR_PLL2Q_Pos) + \
 8009d6e:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8009d72:	4618      	mov	r0, r3
 8009d74:	f7f6 ff72 	bl	8000c5c <__addsf3>
 8009d78:	4603      	mov	r3, r0
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8009d7a:	4619      	mov	r1, r3
 8009d7c:	69f8      	ldr	r0, [r7, #28]
 8009d7e:	f7f7 f929 	bl	8000fd4 <__aeabi_fdiv>
 8009d82:	4603      	mov	r3, r0
 8009d84:	4618      	mov	r0, r3
 8009d86:	f7f7 f9c1 	bl	800110c <__aeabi_f2uiz>
 8009d8a:	4602      	mov	r2, r0
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	605a      	str	r2, [r3, #4]
 8009d90:	e009      	b.n	8009da6 <HAL_RCCEx_GetPLL2ClockFreq+0x2b2>
 8009d92:	bf00      	nop
 8009d94:	46020c00 	.word	0x46020c00
 8009d98:	4b742400 	.word	0x4b742400
 8009d9c:	08011ad4 	.word	0x08011ad4
                                                                   (float_t)1));
  }
  else
  {
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	2200      	movs	r2, #0
 8009da4:	605a      	str	r2, [r3, #4]
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 8009da6:	4b14      	ldr	r3, [pc, #80]	@ (8009df8 <HAL_RCCEx_GetPLL2ClockFreq+0x304>)
 8009da8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009daa:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8009dae:	2b00      	cmp	r3, #0
 8009db0:	d01a      	beq.n	8009de8 <HAL_RCCEx_GetPLL2ClockFreq+0x2f4>
  {
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8009db2:	4b11      	ldr	r3, [pc, #68]	@ (8009df8 <HAL_RCCEx_GetPLL2ClockFreq+0x304>)
 8009db4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009db6:	0e1b      	lsrs	r3, r3, #24
 8009db8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009dbc:	4618      	mov	r0, r3
 8009dbe:	f7f6 fffd 	bl	8000dbc <__aeabi_ui2f>
 8009dc2:	4603      	mov	r3, r0
                                                                   RCC_PLL2DIVR_PLL2R) >> RCC_PLL2DIVR_PLL2R_Pos) + \
 8009dc4:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8009dc8:	4618      	mov	r0, r3
 8009dca:	f7f6 ff47 	bl	8000c5c <__addsf3>
 8009dce:	4603      	mov	r3, r0
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8009dd0:	4619      	mov	r1, r3
 8009dd2:	69f8      	ldr	r0, [r7, #28]
 8009dd4:	f7f7 f8fe 	bl	8000fd4 <__aeabi_fdiv>
 8009dd8:	4603      	mov	r3, r0
 8009dda:	4618      	mov	r0, r3
 8009ddc:	f7f7 f996 	bl	800110c <__aeabi_f2uiz>
 8009de0:	4602      	mov	r2, r0
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	609a      	str	r2, [r3, #8]
  }
  else
  {
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8009de6:	e002      	b.n	8009dee <HAL_RCCEx_GetPLL2ClockFreq+0x2fa>
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	2200      	movs	r2, #0
 8009dec:	609a      	str	r2, [r3, #8]
}
 8009dee:	bf00      	nop
 8009df0:	3720      	adds	r7, #32
 8009df2:	46bd      	mov	sp, r7
 8009df4:	bdb0      	pop	{r4, r5, r7, pc}
 8009df6:	bf00      	nop
 8009df8:	46020c00 	.word	0x46020c00

08009dfc <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8009dfc:	b5b0      	push	{r4, r5, r7, lr}
 8009dfe:	b088      	sub	sp, #32
 8009e00:	af00      	add	r7, sp, #0
 8009e02:	6078      	str	r0, [r7, #4]

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLLxR
  */

  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 8009e04:	4ba5      	ldr	r3, [pc, #660]	@ (800a09c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>)
 8009e06:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009e08:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009e0c:	61bb      	str	r3, [r7, #24]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 8009e0e:	4ba3      	ldr	r3, [pc, #652]	@ (800a09c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>)
 8009e10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009e12:	f003 0303 	and.w	r3, r3, #3
 8009e16:	617b      	str	r3, [r7, #20]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos) + 1U;
 8009e18:	4ba0      	ldr	r3, [pc, #640]	@ (800a09c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>)
 8009e1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009e1c:	0a1b      	lsrs	r3, r3, #8
 8009e1e:	f003 030f 	and.w	r3, r3, #15
 8009e22:	3301      	adds	r3, #1
 8009e24:	613b      	str	r3, [r7, #16]
  pll3fracen = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN) >> RCC_PLL3CFGR_PLL3FRACEN_Pos);
 8009e26:	4b9d      	ldr	r3, [pc, #628]	@ (800a09c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>)
 8009e28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009e2a:	091b      	lsrs	r3, r3, #4
 8009e2c:	f003 0301 	and.w	r3, r3, #1
 8009e30:	60fb      	str	r3, [r7, #12]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 8009e32:	4b9a      	ldr	r3, [pc, #616]	@ (800a09c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>)
 8009e34:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009e36:	08db      	lsrs	r3, r3, #3
 8009e38:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009e3c:	68fa      	ldr	r2, [r7, #12]
 8009e3e:	fb02 f303 	mul.w	r3, r2, r3
 8009e42:	4618      	mov	r0, r3
 8009e44:	f7f6 ffba 	bl	8000dbc <__aeabi_ui2f>
 8009e48:	4603      	mov	r3, r0
 8009e4a:	60bb      	str	r3, [r7, #8]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  switch (pll3source)
 8009e4c:	697b      	ldr	r3, [r7, #20]
 8009e4e:	2b03      	cmp	r3, #3
 8009e50:	d074      	beq.n	8009f3c <HAL_RCCEx_GetPLL3ClockFreq+0x140>
 8009e52:	697b      	ldr	r3, [r7, #20]
 8009e54:	2b03      	cmp	r3, #3
 8009e56:	f200 809b 	bhi.w	8009f90 <HAL_RCCEx_GetPLL3ClockFreq+0x194>
 8009e5a:	697b      	ldr	r3, [r7, #20]
 8009e5c:	2b01      	cmp	r3, #1
 8009e5e:	d02d      	beq.n	8009ebc <HAL_RCCEx_GetPLL3ClockFreq+0xc0>
 8009e60:	697b      	ldr	r3, [r7, #20]
 8009e62:	2b02      	cmp	r3, #2
 8009e64:	f040 8094 	bne.w	8009f90 <HAL_RCCEx_GetPLL3ClockFreq+0x194>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8009e68:	6938      	ldr	r0, [r7, #16]
 8009e6a:	f7f6 ffa7 	bl	8000dbc <__aeabi_ui2f>
 8009e6e:	4603      	mov	r3, r0
 8009e70:	4619      	mov	r1, r3
 8009e72:	488b      	ldr	r0, [pc, #556]	@ (800a0a0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8009e74:	f7f7 f8ae 	bl	8000fd4 <__aeabi_fdiv>
 8009e78:	4603      	mov	r3, r0
 8009e7a:	461d      	mov	r5, r3
 8009e7c:	4b87      	ldr	r3, [pc, #540]	@ (800a09c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>)
 8009e7e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009e80:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009e84:	4618      	mov	r0, r3
 8009e86:	f7f6 ff99 	bl	8000dbc <__aeabi_ui2f>
 8009e8a:	4604      	mov	r4, r0
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 8009e8c:	f04f 418c 	mov.w	r1, #1174405120	@ 0x46000000
 8009e90:	68b8      	ldr	r0, [r7, #8]
 8009e92:	f7f7 f89f 	bl	8000fd4 <__aeabi_fdiv>
 8009e96:	4603      	mov	r3, r0
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8009e98:	4619      	mov	r1, r3
 8009e9a:	4620      	mov	r0, r4
 8009e9c:	f7f6 fede 	bl	8000c5c <__addsf3>
 8009ea0:	4603      	mov	r3, r0
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 8009ea2:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8009ea6:	4618      	mov	r0, r3
 8009ea8:	f7f6 fed8 	bl	8000c5c <__addsf3>
 8009eac:	4603      	mov	r3, r0
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8009eae:	4619      	mov	r1, r3
 8009eb0:	4628      	mov	r0, r5
 8009eb2:	f7f6 ffdb 	bl	8000e6c <__aeabi_fmul>
 8009eb6:	4603      	mov	r3, r0
 8009eb8:	61fb      	str	r3, [r7, #28]

      break;
 8009eba:	e0a9      	b.n	800a010 <HAL_RCCEx_GetPLL3ClockFreq+0x214>
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8009ebc:	4b77      	ldr	r3, [pc, #476]	@ (800a09c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>)
 8009ebe:	689b      	ldr	r3, [r3, #8]
 8009ec0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009ec4:	2b00      	cmp	r3, #0
 8009ec6:	d005      	beq.n	8009ed4 <HAL_RCCEx_GetPLL3ClockFreq+0xd8>
 8009ec8:	4b74      	ldr	r3, [pc, #464]	@ (800a09c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>)
 8009eca:	689b      	ldr	r3, [r3, #8]
 8009ecc:	0f1b      	lsrs	r3, r3, #28
 8009ece:	f003 030f 	and.w	r3, r3, #15
 8009ed2:	e006      	b.n	8009ee2 <HAL_RCCEx_GetPLL3ClockFreq+0xe6>
 8009ed4:	4b71      	ldr	r3, [pc, #452]	@ (800a09c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>)
 8009ed6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8009eda:	041b      	lsls	r3, r3, #16
 8009edc:	0f1b      	lsrs	r3, r3, #28
 8009ede:	f003 030f 	and.w	r3, r3, #15
 8009ee2:	4a70      	ldr	r2, [pc, #448]	@ (800a0a4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a8>)
 8009ee4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009ee8:	4618      	mov	r0, r3
 8009eea:	f7f6 ff67 	bl	8000dbc <__aeabi_ui2f>
 8009eee:	4604      	mov	r4, r0
 8009ef0:	6938      	ldr	r0, [r7, #16]
 8009ef2:	f7f6 ff63 	bl	8000dbc <__aeabi_ui2f>
 8009ef6:	4603      	mov	r3, r0
 8009ef8:	4619      	mov	r1, r3
 8009efa:	4620      	mov	r0, r4
 8009efc:	f7f7 f86a 	bl	8000fd4 <__aeabi_fdiv>
 8009f00:	4603      	mov	r3, r0
 8009f02:	461d      	mov	r5, r3
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009f04:	69b8      	ldr	r0, [r7, #24]
 8009f06:	f7f6 ff59 	bl	8000dbc <__aeabi_ui2f>
 8009f0a:	4604      	mov	r4, r0
 8009f0c:	f04f 418c 	mov.w	r1, #1174405120	@ 0x46000000
 8009f10:	68b8      	ldr	r0, [r7, #8]
 8009f12:	f7f7 f85f 	bl	8000fd4 <__aeabi_fdiv>
 8009f16:	4603      	mov	r3, r0
 8009f18:	4619      	mov	r1, r3
 8009f1a:	4620      	mov	r0, r4
 8009f1c:	f7f6 fe9e 	bl	8000c5c <__addsf3>
 8009f20:	4603      	mov	r3, r0
 8009f22:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8009f26:	4618      	mov	r0, r3
 8009f28:	f7f6 fe98 	bl	8000c5c <__addsf3>
 8009f2c:	4603      	mov	r3, r0
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8009f2e:	4619      	mov	r1, r3
 8009f30:	4628      	mov	r0, r5
 8009f32:	f7f6 ff9b 	bl	8000e6c <__aeabi_fmul>
 8009f36:	4603      	mov	r3, r0
 8009f38:	61fb      	str	r3, [r7, #28]
      break;
 8009f3a:	e069      	b.n	800a010 <HAL_RCCEx_GetPLL3ClockFreq+0x214>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8009f3c:	6938      	ldr	r0, [r7, #16]
 8009f3e:	f7f6 ff3d 	bl	8000dbc <__aeabi_ui2f>
 8009f42:	4603      	mov	r3, r0
 8009f44:	4619      	mov	r1, r3
 8009f46:	4856      	ldr	r0, [pc, #344]	@ (800a0a0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8009f48:	f7f7 f844 	bl	8000fd4 <__aeabi_fdiv>
 8009f4c:	4603      	mov	r3, r0
 8009f4e:	461d      	mov	r5, r3
 8009f50:	4b52      	ldr	r3, [pc, #328]	@ (800a09c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>)
 8009f52:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009f54:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009f58:	4618      	mov	r0, r3
 8009f5a:	f7f6 ff2f 	bl	8000dbc <__aeabi_ui2f>
 8009f5e:	4604      	mov	r4, r0
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 8009f60:	f04f 418c 	mov.w	r1, #1174405120	@ 0x46000000
 8009f64:	68b8      	ldr	r0, [r7, #8]
 8009f66:	f7f7 f835 	bl	8000fd4 <__aeabi_fdiv>
 8009f6a:	4603      	mov	r3, r0
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8009f6c:	4619      	mov	r1, r3
 8009f6e:	4620      	mov	r0, r4
 8009f70:	f7f6 fe74 	bl	8000c5c <__addsf3>
 8009f74:	4603      	mov	r3, r0
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 8009f76:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8009f7a:	4618      	mov	r0, r3
 8009f7c:	f7f6 fe6e 	bl	8000c5c <__addsf3>
 8009f80:	4603      	mov	r3, r0
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8009f82:	4619      	mov	r1, r3
 8009f84:	4628      	mov	r0, r5
 8009f86:	f7f6 ff71 	bl	8000e6c <__aeabi_fmul>
 8009f8a:	4603      	mov	r3, r0
 8009f8c:	61fb      	str	r3, [r7, #28]
      break;
 8009f8e:	e03f      	b.n	800a010 <HAL_RCCEx_GetPLL3ClockFreq+0x214>

    default:
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8009f90:	4b42      	ldr	r3, [pc, #264]	@ (800a09c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>)
 8009f92:	689b      	ldr	r3, [r3, #8]
 8009f94:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009f98:	2b00      	cmp	r3, #0
 8009f9a:	d005      	beq.n	8009fa8 <HAL_RCCEx_GetPLL3ClockFreq+0x1ac>
 8009f9c:	4b3f      	ldr	r3, [pc, #252]	@ (800a09c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>)
 8009f9e:	689b      	ldr	r3, [r3, #8]
 8009fa0:	0f1b      	lsrs	r3, r3, #28
 8009fa2:	f003 030f 	and.w	r3, r3, #15
 8009fa6:	e006      	b.n	8009fb6 <HAL_RCCEx_GetPLL3ClockFreq+0x1ba>
 8009fa8:	4b3c      	ldr	r3, [pc, #240]	@ (800a09c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>)
 8009faa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8009fae:	041b      	lsls	r3, r3, #16
 8009fb0:	0f1b      	lsrs	r3, r3, #28
 8009fb2:	f003 030f 	and.w	r3, r3, #15
 8009fb6:	4a3b      	ldr	r2, [pc, #236]	@ (800a0a4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a8>)
 8009fb8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009fbc:	4618      	mov	r0, r3
 8009fbe:	f7f6 fefd 	bl	8000dbc <__aeabi_ui2f>
 8009fc2:	4604      	mov	r4, r0
 8009fc4:	6938      	ldr	r0, [r7, #16]
 8009fc6:	f7f6 fef9 	bl	8000dbc <__aeabi_ui2f>
 8009fca:	4603      	mov	r3, r0
 8009fcc:	4619      	mov	r1, r3
 8009fce:	4620      	mov	r0, r4
 8009fd0:	f7f7 f800 	bl	8000fd4 <__aeabi_fdiv>
 8009fd4:	4603      	mov	r3, r0
 8009fd6:	461d      	mov	r5, r3
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009fd8:	69b8      	ldr	r0, [r7, #24]
 8009fda:	f7f6 feef 	bl	8000dbc <__aeabi_ui2f>
 8009fde:	4604      	mov	r4, r0
 8009fe0:	f04f 418c 	mov.w	r1, #1174405120	@ 0x46000000
 8009fe4:	68b8      	ldr	r0, [r7, #8]
 8009fe6:	f7f6 fff5 	bl	8000fd4 <__aeabi_fdiv>
 8009fea:	4603      	mov	r3, r0
 8009fec:	4619      	mov	r1, r3
 8009fee:	4620      	mov	r0, r4
 8009ff0:	f7f6 fe34 	bl	8000c5c <__addsf3>
 8009ff4:	4603      	mov	r3, r0
 8009ff6:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8009ffa:	4618      	mov	r0, r3
 8009ffc:	f7f6 fe2e 	bl	8000c5c <__addsf3>
 800a000:	4603      	mov	r3, r0
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800a002:	4619      	mov	r1, r3
 800a004:	4628      	mov	r0, r5
 800a006:	f7f6 ff31 	bl	8000e6c <__aeabi_fmul>
 800a00a:	4603      	mov	r3, r0
 800a00c:	61fb      	str	r3, [r7, #28]
      break;
 800a00e:	bf00      	nop
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 800a010:	4b22      	ldr	r3, [pc, #136]	@ (800a09c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>)
 800a012:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a014:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800a018:	2b00      	cmp	r3, #0
 800a01a:	d01a      	beq.n	800a052 <HAL_RCCEx_GetPLL3ClockFreq+0x256>
  {
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800a01c:	4b1f      	ldr	r3, [pc, #124]	@ (800a09c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>)
 800a01e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a020:	0a5b      	lsrs	r3, r3, #9
 800a022:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a026:	4618      	mov	r0, r3
 800a028:	f7f6 fec8 	bl	8000dbc <__aeabi_ui2f>
 800a02c:	4603      	mov	r3, r0
                                                                   RCC_PLL3DIVR_PLL3P) >> RCC_PLL3DIVR_PLL3P_Pos) + \
 800a02e:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 800a032:	4618      	mov	r0, r3
 800a034:	f7f6 fe12 	bl	8000c5c <__addsf3>
 800a038:	4603      	mov	r3, r0
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800a03a:	4619      	mov	r1, r3
 800a03c:	69f8      	ldr	r0, [r7, #28]
 800a03e:	f7f6 ffc9 	bl	8000fd4 <__aeabi_fdiv>
 800a042:	4603      	mov	r3, r0
 800a044:	4618      	mov	r0, r3
 800a046:	f7f7 f861 	bl	800110c <__aeabi_f2uiz>
 800a04a:	4602      	mov	r2, r0
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	601a      	str	r2, [r3, #0]
 800a050:	e002      	b.n	800a058 <HAL_RCCEx_GetPLL3ClockFreq+0x25c>
                                                                   (float_t)1));
  }
  else
  {
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	2200      	movs	r2, #0
 800a056:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 800a058:	4b10      	ldr	r3, [pc, #64]	@ (800a09c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>)
 800a05a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a05c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a060:	2b00      	cmp	r3, #0
 800a062:	d021      	beq.n	800a0a8 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
  {
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800a064:	4b0d      	ldr	r3, [pc, #52]	@ (800a09c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>)
 800a066:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a068:	0c1b      	lsrs	r3, r3, #16
 800a06a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a06e:	4618      	mov	r0, r3
 800a070:	f7f6 fea4 	bl	8000dbc <__aeabi_ui2f>
 800a074:	4603      	mov	r3, r0
                                                                   RCC_PLL3DIVR_PLL3Q) >> RCC_PLL3DIVR_PLL3Q_Pos) + \
 800a076:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 800a07a:	4618      	mov	r0, r3
 800a07c:	f7f6 fdee 	bl	8000c5c <__addsf3>
 800a080:	4603      	mov	r3, r0
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800a082:	4619      	mov	r1, r3
 800a084:	69f8      	ldr	r0, [r7, #28]
 800a086:	f7f6 ffa5 	bl	8000fd4 <__aeabi_fdiv>
 800a08a:	4603      	mov	r3, r0
 800a08c:	4618      	mov	r0, r3
 800a08e:	f7f7 f83d 	bl	800110c <__aeabi_f2uiz>
 800a092:	4602      	mov	r2, r0
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	605a      	str	r2, [r3, #4]
 800a098:	e009      	b.n	800a0ae <HAL_RCCEx_GetPLL3ClockFreq+0x2b2>
 800a09a:	bf00      	nop
 800a09c:	46020c00 	.word	0x46020c00
 800a0a0:	4b742400 	.word	0x4b742400
 800a0a4:	08011ad4 	.word	0x08011ad4
                                                                   (float_t)1));
  }
  else
  {
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	2200      	movs	r2, #0
 800a0ac:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 800a0ae:	4b14      	ldr	r3, [pc, #80]	@ (800a100 <HAL_RCCEx_GetPLL3ClockFreq+0x304>)
 800a0b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a0b2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800a0b6:	2b00      	cmp	r3, #0
 800a0b8:	d01a      	beq.n	800a0f0 <HAL_RCCEx_GetPLL3ClockFreq+0x2f4>
  {
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800a0ba:	4b11      	ldr	r3, [pc, #68]	@ (800a100 <HAL_RCCEx_GetPLL3ClockFreq+0x304>)
 800a0bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a0be:	0e1b      	lsrs	r3, r3, #24
 800a0c0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a0c4:	4618      	mov	r0, r3
 800a0c6:	f7f6 fe79 	bl	8000dbc <__aeabi_ui2f>
 800a0ca:	4603      	mov	r3, r0
                                                                   RCC_PLL3DIVR_PLL3R) >> RCC_PLL3DIVR_PLL3R_Pos) + \
 800a0cc:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 800a0d0:	4618      	mov	r0, r3
 800a0d2:	f7f6 fdc3 	bl	8000c5c <__addsf3>
 800a0d6:	4603      	mov	r3, r0
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800a0d8:	4619      	mov	r1, r3
 800a0da:	69f8      	ldr	r0, [r7, #28]
 800a0dc:	f7f6 ff7a 	bl	8000fd4 <__aeabi_fdiv>
 800a0e0:	4603      	mov	r3, r0
 800a0e2:	4618      	mov	r0, r3
 800a0e4:	f7f7 f812 	bl	800110c <__aeabi_f2uiz>
 800a0e8:	4602      	mov	r2, r0
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	609a      	str	r2, [r3, #8]
  else
  {
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800a0ee:	e002      	b.n	800a0f6 <HAL_RCCEx_GetPLL3ClockFreq+0x2fa>
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	2200      	movs	r2, #0
 800a0f4:	609a      	str	r2, [r3, #8]
}
 800a0f6:	bf00      	nop
 800a0f8:	3720      	adds	r7, #32
 800a0fa:	46bd      	mov	sp, r7
 800a0fc:	bdb0      	pop	{r4, r5, r7, pc}
 800a0fe:	bf00      	nop
 800a100:	46020c00 	.word	0x46020c00

0800a104 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in Hz
  *
  *        (*) value not defined in all devices.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800a104:	b580      	push	{r7, lr}
 800a106:	b08e      	sub	sp, #56	@ 0x38
 800a108:	af00      	add	r7, sp, #0
 800a10a:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 800a10e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a112:	f5a2 2180 	sub.w	r1, r2, #262144	@ 0x40000
 800a116:	430b      	orrs	r3, r1
 800a118:	d145      	bne.n	800a1a6 <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 800a11a:	4ba1      	ldr	r3, [pc, #644]	@ (800a3a0 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800a11c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a120:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a124:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 800a126:	4b9e      	ldr	r3, [pc, #632]	@ (800a3a0 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800a128:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a12c:	f003 0302 	and.w	r3, r3, #2
 800a130:	2b02      	cmp	r3, #2
 800a132:	d108      	bne.n	800a146 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 800a134:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a136:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a13a:	d104      	bne.n	800a146 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 800a13c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a140:	637b      	str	r3, [r7, #52]	@ 0x34
 800a142:	f001 b987 	b.w	800b454 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 800a146:	4b96      	ldr	r3, [pc, #600]	@ (800a3a0 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800a148:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a14c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a150:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a154:	d114      	bne.n	800a180 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
 800a156:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a158:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a15c:	d110      	bne.n	800a180 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800a15e:	4b90      	ldr	r3, [pc, #576]	@ (800a3a0 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800a160:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a164:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a168:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a16c:	d103      	bne.n	800a176 <HAL_RCCEx_GetPeriphCLKFreq+0x72>
      {
        frequency = LSI_VALUE / 128U;
 800a16e:	23fa      	movs	r3, #250	@ 0xfa
 800a170:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800a172:	f001 b96f 	b.w	800b454 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = LSI_VALUE;
 800a176:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800a17a:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800a17c:	f001 b96a 	b.w	800b454 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    /* Check if HSE is ready  and if RTC clock selection is HSI_DIV32*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIV32))
 800a180:	4b87      	ldr	r3, [pc, #540]	@ (800a3a0 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800a182:	681b      	ldr	r3, [r3, #0]
 800a184:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a188:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a18c:	d107      	bne.n	800a19e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
 800a18e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a190:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a194:	d103      	bne.n	800a19e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
    {
      frequency = HSE_VALUE / 32U;
 800a196:	4b83      	ldr	r3, [pc, #524]	@ (800a3a4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800a198:	637b      	str	r3, [r7, #52]	@ 0x34
 800a19a:	f001 b95b 	b.w	800b454 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 800a19e:	2300      	movs	r3, #0
 800a1a0:	637b      	str	r3, [r7, #52]	@ 0x34
 800a1a2:	f001 b957 	b.w	800b454 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800a1a6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a1aa:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 800a1ae:	430b      	orrs	r3, r1
 800a1b0:	d151      	bne.n	800a256 <HAL_RCCEx_GetPeriphCLKFreq+0x152>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 800a1b2:	4b7b      	ldr	r3, [pc, #492]	@ (800a3a0 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800a1b4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800a1b8:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 800a1bc:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800a1be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a1c0:	2b80      	cmp	r3, #128	@ 0x80
 800a1c2:	d035      	beq.n	800a230 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
 800a1c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a1c6:	2b80      	cmp	r3, #128	@ 0x80
 800a1c8:	d841      	bhi.n	800a24e <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 800a1ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a1cc:	2b60      	cmp	r3, #96	@ 0x60
 800a1ce:	d02a      	beq.n	800a226 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
 800a1d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a1d2:	2b60      	cmp	r3, #96	@ 0x60
 800a1d4:	d83b      	bhi.n	800a24e <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 800a1d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a1d8:	2b40      	cmp	r3, #64	@ 0x40
 800a1da:	d009      	beq.n	800a1f0 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800a1dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a1de:	2b40      	cmp	r3, #64	@ 0x40
 800a1e0:	d835      	bhi.n	800a24e <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 800a1e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a1e4:	2b00      	cmp	r3, #0
 800a1e6:	d00c      	beq.n	800a202 <HAL_RCCEx_GetPeriphCLKFreq+0xfe>
 800a1e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a1ea:	2b20      	cmp	r3, #32
 800a1ec:	d012      	beq.n	800a214 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 800a1ee:	e02e      	b.n	800a24e <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
    {
      case RCC_SAI1CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a1f0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a1f4:	4618      	mov	r0, r3
 800a1f6:	f7ff faf9 	bl	80097ec <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800a1fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a1fc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a1fe:	f001 b929 	b.w	800b454 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a202:	f107 0318 	add.w	r3, r7, #24
 800a206:	4618      	mov	r0, r3
 800a208:	f7ff fc74 	bl	8009af4 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 800a20c:	69bb      	ldr	r3, [r7, #24]
 800a20e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a210:	f001 b920 	b.w	800b454 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI1CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a214:	f107 030c 	add.w	r3, r7, #12
 800a218:	4618      	mov	r0, r3
 800a21a:	f7ff fdef 	bl	8009dfc <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 800a21e:	68fb      	ldr	r3, [r7, #12]
 800a220:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a222:	f001 b917 	b.w	800b454 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800a226:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 800a22a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a22c:	f001 b912 	b.w	800b454 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI1CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800a230:	4b5b      	ldr	r3, [pc, #364]	@ (800a3a0 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800a232:	681b      	ldr	r3, [r3, #0]
 800a234:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a238:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a23c:	d103      	bne.n	800a246 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        {
          frequency = HSI_VALUE;
 800a23e:	4b5a      	ldr	r3, [pc, #360]	@ (800a3a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800a240:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800a242:	f001 b907 	b.w	800b454 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 800a246:	2300      	movs	r3, #0
 800a248:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a24a:	f001 b903 	b.w	800b454 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default :
      {
        frequency = 0U;
 800a24e:	2300      	movs	r3, #0
 800a250:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a252:	f001 b8ff 	b.w	800b454 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
  }
#if defined(SAI2)
  else if (PeriphClk == RCC_PERIPHCLK_SAI2)
 800a256:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a25a:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 800a25e:	430b      	orrs	r3, r1
 800a260:	d158      	bne.n	800a314 <HAL_RCCEx_GetPeriphCLKFreq+0x210>
  {
    srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 800a262:	4b4f      	ldr	r3, [pc, #316]	@ (800a3a0 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800a264:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800a268:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800a26c:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800a26e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a270:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a274:	d03b      	beq.n	800a2ee <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 800a276:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a278:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a27c:	d846      	bhi.n	800a30c <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 800a27e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a280:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a284:	d02e      	beq.n	800a2e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
 800a286:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a288:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a28c:	d83e      	bhi.n	800a30c <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 800a28e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a290:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a294:	d00b      	beq.n	800a2ae <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
 800a296:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a298:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a29c:	d836      	bhi.n	800a30c <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 800a29e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a2a0:	2b00      	cmp	r3, #0
 800a2a2:	d00d      	beq.n	800a2c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 800a2a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a2a6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a2aa:	d012      	beq.n	800a2d2 <HAL_RCCEx_GetPeriphCLKFreq+0x1ce>
 800a2ac:	e02e      	b.n	800a30c <HAL_RCCEx_GetPeriphCLKFreq+0x208>
    {
      case RCC_SAI2CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a2ae:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a2b2:	4618      	mov	r0, r3
 800a2b4:	f7ff fa9a 	bl	80097ec <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800a2b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a2ba:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a2bc:	f001 b8ca 	b.w	800b454 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a2c0:	f107 0318 	add.w	r3, r7, #24
 800a2c4:	4618      	mov	r0, r3
 800a2c6:	f7ff fc15 	bl	8009af4 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 800a2ca:	69bb      	ldr	r3, [r7, #24]
 800a2cc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a2ce:	f001 b8c1 	b.w	800b454 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI2CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a2d2:	f107 030c 	add.w	r3, r7, #12
 800a2d6:	4618      	mov	r0, r3
 800a2d8:	f7ff fd90 	bl	8009dfc <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 800a2dc:	68fb      	ldr	r3, [r7, #12]
 800a2de:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a2e0:	f001 b8b8 	b.w	800b454 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI2CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800a2e4:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 800a2e8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a2ea:	f001 b8b3 	b.w	800b454 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SAI2CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800a2ee:	4b2c      	ldr	r3, [pc, #176]	@ (800a3a0 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800a2f0:	681b      	ldr	r3, [r3, #0]
 800a2f2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a2f6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a2fa:	d103      	bne.n	800a304 <HAL_RCCEx_GetPeriphCLKFreq+0x200>
        {
          frequency = HSI_VALUE;
 800a2fc:	4b2a      	ldr	r3, [pc, #168]	@ (800a3a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800a2fe:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800a300:	f001 b8a8 	b.w	800b454 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 800a304:	2300      	movs	r3, #0
 800a306:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a308:	f001 b8a4 	b.w	800b454 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default :

        frequency = 0U;
 800a30c:	2300      	movs	r3, #0
 800a30e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a310:	f001 b8a0 	b.w	800b454 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    {
      frequency = 0U;
    }
  }
#endif /* SAES */
  else if (PeriphClk == RCC_PERIPHCLK_ICLK)
 800a314:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a318:	f5a2 1180 	sub.w	r1, r2, #1048576	@ 0x100000
 800a31c:	430b      	orrs	r3, r1
 800a31e:	d16e      	bne.n	800a3fe <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
  {
    srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 800a320:	4b1f      	ldr	r3, [pc, #124]	@ (800a3a0 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800a322:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800a326:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 800a32a:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800a32c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a32e:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800a332:	d03d      	beq.n	800a3b0 <HAL_RCCEx_GetPeriphCLKFreq+0x2ac>
 800a334:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a336:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800a33a:	d85c      	bhi.n	800a3f6 <HAL_RCCEx_GetPeriphCLKFreq+0x2f2>
 800a33c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a33e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a342:	d00b      	beq.n	800a35c <HAL_RCCEx_GetPeriphCLKFreq+0x258>
 800a344:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a346:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a34a:	d854      	bhi.n	800a3f6 <HAL_RCCEx_GetPeriphCLKFreq+0x2f2>
 800a34c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a34e:	2b00      	cmp	r3, #0
 800a350:	d016      	beq.n	800a380 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>
 800a352:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a354:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800a358:	d009      	beq.n	800a36e <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 800a35a:	e04c      	b.n	800a3f6 <HAL_RCCEx_GetPeriphCLKFreq+0x2f2>
    {
      case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a35c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a360:	4618      	mov	r0, r3
 800a362:	f7ff fa43 	bl	80097ec <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 800a366:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a368:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a36a:	f001 b873 	b.w	800b454 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a36e:	f107 0318 	add.w	r3, r7, #24
 800a372:	4618      	mov	r0, r3
 800a374:	f7ff fbbe 	bl	8009af4 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 800a378:	69fb      	ldr	r3, [r7, #28]
 800a37a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a37c:	f001 b86a 	b.w	800b454 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 800a380:	4b07      	ldr	r3, [pc, #28]	@ (800a3a0 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800a382:	681b      	ldr	r3, [r3, #0]
 800a384:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800a388:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a38c:	d103      	bne.n	800a396 <HAL_RCCEx_GetPeriphCLKFreq+0x292>
        {
          frequency = HSI48_VALUE;
 800a38e:	4b07      	ldr	r3, [pc, #28]	@ (800a3ac <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 800a390:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800a392:	f001 b85f 	b.w	800b454 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 800a396:	2300      	movs	r3, #0
 800a398:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a39a:	f001 b85b 	b.w	800b454 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
 800a39e:	bf00      	nop
 800a3a0:	46020c00 	.word	0x46020c00
 800a3a4:	0007a120 	.word	0x0007a120
 800a3a8:	00f42400 	.word	0x00f42400
 800a3ac:	02dc6c00 	.word	0x02dc6c00

      case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800a3b0:	4ba6      	ldr	r3, [pc, #664]	@ (800a64c <HAL_RCCEx_GetPeriphCLKFreq+0x548>)
 800a3b2:	681b      	ldr	r3, [r3, #0]
 800a3b4:	f003 0320 	and.w	r3, r3, #32
 800a3b8:	2b20      	cmp	r3, #32
 800a3ba:	d118      	bne.n	800a3ee <HAL_RCCEx_GetPeriphCLKFreq+0x2ea>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800a3bc:	4ba3      	ldr	r3, [pc, #652]	@ (800a64c <HAL_RCCEx_GetPeriphCLKFreq+0x548>)
 800a3be:	689b      	ldr	r3, [r3, #8]
 800a3c0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a3c4:	2b00      	cmp	r3, #0
 800a3c6:	d005      	beq.n	800a3d4 <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>
 800a3c8:	4ba0      	ldr	r3, [pc, #640]	@ (800a64c <HAL_RCCEx_GetPeriphCLKFreq+0x548>)
 800a3ca:	689b      	ldr	r3, [r3, #8]
 800a3cc:	0e1b      	lsrs	r3, r3, #24
 800a3ce:	f003 030f 	and.w	r3, r3, #15
 800a3d2:	e006      	b.n	800a3e2 <HAL_RCCEx_GetPeriphCLKFreq+0x2de>
 800a3d4:	4b9d      	ldr	r3, [pc, #628]	@ (800a64c <HAL_RCCEx_GetPeriphCLKFreq+0x548>)
 800a3d6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800a3da:	041b      	lsls	r3, r3, #16
 800a3dc:	0e1b      	lsrs	r3, r3, #24
 800a3de:	f003 030f 	and.w	r3, r3, #15
 800a3e2:	4a9b      	ldr	r2, [pc, #620]	@ (800a650 <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 800a3e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a3e8:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800a3ea:	f001 b833 	b.w	800b454 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 800a3ee:	2300      	movs	r3, #0
 800a3f0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a3f2:	f001 b82f 	b.w	800b454 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default :

        frequency = 0U;
 800a3f6:	2300      	movs	r3, #0
 800a3f8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a3fa:	f001 b82b 	b.w	800b454 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800a3fe:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a402:	f5a2 1100 	sub.w	r1, r2, #2097152	@ 0x200000
 800a406:	430b      	orrs	r3, r1
 800a408:	d17f      	bne.n	800a50a <HAL_RCCEx_GetPeriphCLKFreq+0x406>
  {
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800a40a:	4b90      	ldr	r3, [pc, #576]	@ (800a64c <HAL_RCCEx_GetPeriphCLKFreq+0x548>)
 800a40c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800a410:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a414:	633b      	str	r3, [r7, #48]	@ 0x30
    if (srcclk == RCC_SDMMCCLKSOURCE_CLK48)
 800a416:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a418:	2b00      	cmp	r3, #0
 800a41a:	d165      	bne.n	800a4e8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e4>
    {
      srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 800a41c:	4b8b      	ldr	r3, [pc, #556]	@ (800a64c <HAL_RCCEx_GetPeriphCLKFreq+0x548>)
 800a41e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800a422:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 800a426:	633b      	str	r3, [r7, #48]	@ 0x30

      switch (srcclk)
 800a428:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a42a:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800a42e:	d034      	beq.n	800a49a <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 800a430:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a432:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800a436:	d853      	bhi.n	800a4e0 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800a438:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a43a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a43e:	d00b      	beq.n	800a458 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
 800a440:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a442:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a446:	d84b      	bhi.n	800a4e0 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800a448:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a44a:	2b00      	cmp	r3, #0
 800a44c:	d016      	beq.n	800a47c <HAL_RCCEx_GetPeriphCLKFreq+0x378>
 800a44e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a450:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800a454:	d009      	beq.n	800a46a <HAL_RCCEx_GetPeriphCLKFreq+0x366>
 800a456:	e043      	b.n	800a4e0 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
      {
        case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a458:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a45c:	4618      	mov	r0, r3
 800a45e:	f7ff f9c5 	bl	80097ec <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a462:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a464:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 800a466:	f000 bff5 	b.w	800b454 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
        }
        case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a46a:	f107 0318 	add.w	r3, r7, #24
 800a46e:	4618      	mov	r0, r3
 800a470:	f7ff fb40 	bl	8009af4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800a474:	69fb      	ldr	r3, [r7, #28]
 800a476:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 800a478:	f000 bfec 	b.w	800b454 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
        }
        case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 800a47c:	4b73      	ldr	r3, [pc, #460]	@ (800a64c <HAL_RCCEx_GetPeriphCLKFreq+0x548>)
 800a47e:	681b      	ldr	r3, [r3, #0]
 800a480:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800a484:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a488:	d103      	bne.n	800a492 <HAL_RCCEx_GetPeriphCLKFreq+0x38e>
          {
            frequency = HSI48_VALUE;
 800a48a:	4b72      	ldr	r3, [pc, #456]	@ (800a654 <HAL_RCCEx_GetPeriphCLKFreq+0x550>)
 800a48c:	637b      	str	r3, [r7, #52]	@ 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 800a48e:	f000 bfe1 	b.w	800b454 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
            frequency = 0U;
 800a492:	2300      	movs	r3, #0
 800a494:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 800a496:	f000 bfdd 	b.w	800b454 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
        }
        case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800a49a:	4b6c      	ldr	r3, [pc, #432]	@ (800a64c <HAL_RCCEx_GetPeriphCLKFreq+0x548>)
 800a49c:	681b      	ldr	r3, [r3, #0]
 800a49e:	f003 0320 	and.w	r3, r3, #32
 800a4a2:	2b20      	cmp	r3, #32
 800a4a4:	d118      	bne.n	800a4d8 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
          {
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800a4a6:	4b69      	ldr	r3, [pc, #420]	@ (800a64c <HAL_RCCEx_GetPeriphCLKFreq+0x548>)
 800a4a8:	689b      	ldr	r3, [r3, #8]
 800a4aa:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a4ae:	2b00      	cmp	r3, #0
 800a4b0:	d005      	beq.n	800a4be <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
 800a4b2:	4b66      	ldr	r3, [pc, #408]	@ (800a64c <HAL_RCCEx_GetPeriphCLKFreq+0x548>)
 800a4b4:	689b      	ldr	r3, [r3, #8]
 800a4b6:	0e1b      	lsrs	r3, r3, #24
 800a4b8:	f003 030f 	and.w	r3, r3, #15
 800a4bc:	e006      	b.n	800a4cc <HAL_RCCEx_GetPeriphCLKFreq+0x3c8>
 800a4be:	4b63      	ldr	r3, [pc, #396]	@ (800a64c <HAL_RCCEx_GetPeriphCLKFreq+0x548>)
 800a4c0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800a4c4:	041b      	lsls	r3, r3, #16
 800a4c6:	0e1b      	lsrs	r3, r3, #24
 800a4c8:	f003 030f 	and.w	r3, r3, #15
 800a4cc:	4a60      	ldr	r2, [pc, #384]	@ (800a650 <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 800a4ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a4d2:	637b      	str	r3, [r7, #52]	@ 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 800a4d4:	f000 bfbe 	b.w	800b454 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
            frequency = 0U;
 800a4d8:	2300      	movs	r3, #0
 800a4da:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 800a4dc:	f000 bfba 	b.w	800b454 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
        }
        default :
        {
          frequency = 0U;
 800a4e0:	2300      	movs	r3, #0
 800a4e2:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 800a4e4:	f000 bfb6 	b.w	800b454 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
        }
      }
    }
    else if (srcclk == RCC_SDMMCCLKSOURCE_PLL1)
 800a4e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a4ea:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a4ee:	d108      	bne.n	800a502 <HAL_RCCEx_GetPeriphCLKFreq+0x3fe>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a4f0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a4f4:	4618      	mov	r0, r3
 800a4f6:	f7ff f979 	bl	80097ec <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_P_Frequency;
 800a4fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a4fc:	637b      	str	r3, [r7, #52]	@ 0x34
 800a4fe:	f000 bfa9 	b.w	800b454 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else
    {
      frequency = 0U;
 800a502:	2300      	movs	r3, #0
 800a504:	637b      	str	r3, [r7, #52]	@ 0x34
 800a506:	f000 bfa5 	b.w	800b454 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_USART1)
 800a50a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a50e:	1e51      	subs	r1, r2, #1
 800a510:	430b      	orrs	r3, r1
 800a512:	d136      	bne.n	800a582 <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
  {
    /* Get the current USART1 source */
    srcclk = __HAL_RCC_GET_USART1_SOURCE();
 800a514:	4b4d      	ldr	r3, [pc, #308]	@ (800a64c <HAL_RCCEx_GetPeriphCLKFreq+0x548>)
 800a516:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800a51a:	f003 0303 	and.w	r3, r3, #3
 800a51e:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 800a520:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a522:	2b00      	cmp	r3, #0
 800a524:	d104      	bne.n	800a530 <HAL_RCCEx_GetPeriphCLKFreq+0x42c>
    {
      frequency = HAL_RCC_GetPCLK2Freq();
 800a526:	f7fe fadd 	bl	8008ae4 <HAL_RCC_GetPCLK2Freq>
 800a52a:	6378      	str	r0, [r7, #52]	@ 0x34
 800a52c:	f000 bf92 	b.w	800b454 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_USART1CLKSOURCE_SYSCLK)
 800a530:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a532:	2b01      	cmp	r3, #1
 800a534:	d104      	bne.n	800a540 <HAL_RCCEx_GetPeriphCLKFreq+0x43c>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800a536:	f7fe f991 	bl	800885c <HAL_RCC_GetSysClockFreq>
 800a53a:	6378      	str	r0, [r7, #52]	@ 0x34
 800a53c:	f000 bf8a 	b.w	800b454 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 800a540:	4b42      	ldr	r3, [pc, #264]	@ (800a64c <HAL_RCCEx_GetPeriphCLKFreq+0x548>)
 800a542:	681b      	ldr	r3, [r3, #0]
 800a544:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a548:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a54c:	d106      	bne.n	800a55c <HAL_RCCEx_GetPeriphCLKFreq+0x458>
 800a54e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a550:	2b02      	cmp	r3, #2
 800a552:	d103      	bne.n	800a55c <HAL_RCCEx_GetPeriphCLKFreq+0x458>
    {
      frequency = HSI_VALUE;
 800a554:	4b40      	ldr	r3, [pc, #256]	@ (800a658 <HAL_RCCEx_GetPeriphCLKFreq+0x554>)
 800a556:	637b      	str	r3, [r7, #52]	@ 0x34
 800a558:	f000 bf7c 	b.w	800b454 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 800a55c:	4b3b      	ldr	r3, [pc, #236]	@ (800a64c <HAL_RCCEx_GetPeriphCLKFreq+0x548>)
 800a55e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a562:	f003 0302 	and.w	r3, r3, #2
 800a566:	2b02      	cmp	r3, #2
 800a568:	d107      	bne.n	800a57a <HAL_RCCEx_GetPeriphCLKFreq+0x476>
 800a56a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a56c:	2b03      	cmp	r3, #3
 800a56e:	d104      	bne.n	800a57a <HAL_RCCEx_GetPeriphCLKFreq+0x476>
    {
      frequency = LSE_VALUE;
 800a570:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a574:	637b      	str	r3, [r7, #52]	@ 0x34
 800a576:	f000 bf6d 	b.w	800b454 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for USART1 */
    else
    {
      frequency = 0U;
 800a57a:	2300      	movs	r3, #0
 800a57c:	637b      	str	r3, [r7, #52]	@ 0x34
 800a57e:	f000 bf69 	b.w	800b454 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
#if defined(USART2)
  else if (PeriphClk == RCC_PERIPHCLK_USART2)
 800a582:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a586:	1e91      	subs	r1, r2, #2
 800a588:	430b      	orrs	r3, r1
 800a58a:	d136      	bne.n	800a5fa <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
  {
    /* Get the current USART2 source */
    srcclk = __HAL_RCC_GET_USART2_SOURCE();
 800a58c:	4b2f      	ldr	r3, [pc, #188]	@ (800a64c <HAL_RCCEx_GetPeriphCLKFreq+0x548>)
 800a58e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800a592:	f003 030c 	and.w	r3, r3, #12
 800a596:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 800a598:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a59a:	2b00      	cmp	r3, #0
 800a59c:	d104      	bne.n	800a5a8 <HAL_RCCEx_GetPeriphCLKFreq+0x4a4>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800a59e:	f7fe fa8d 	bl	8008abc <HAL_RCC_GetPCLK1Freq>
 800a5a2:	6378      	str	r0, [r7, #52]	@ 0x34
 800a5a4:	f000 bf56 	b.w	800b454 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_USART2CLKSOURCE_SYSCLK)
 800a5a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a5aa:	2b04      	cmp	r3, #4
 800a5ac:	d104      	bne.n	800a5b8 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800a5ae:	f7fe f955 	bl	800885c <HAL_RCC_GetSysClockFreq>
 800a5b2:	6378      	str	r0, [r7, #52]	@ 0x34
 800a5b4:	f000 bf4e 	b.w	800b454 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 800a5b8:	4b24      	ldr	r3, [pc, #144]	@ (800a64c <HAL_RCCEx_GetPeriphCLKFreq+0x548>)
 800a5ba:	681b      	ldr	r3, [r3, #0]
 800a5bc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a5c0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a5c4:	d106      	bne.n	800a5d4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 800a5c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a5c8:	2b08      	cmp	r3, #8
 800a5ca:	d103      	bne.n	800a5d4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
    {
      frequency = HSI_VALUE;
 800a5cc:	4b22      	ldr	r3, [pc, #136]	@ (800a658 <HAL_RCCEx_GetPeriphCLKFreq+0x554>)
 800a5ce:	637b      	str	r3, [r7, #52]	@ 0x34
 800a5d0:	f000 bf40 	b.w	800b454 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 800a5d4:	4b1d      	ldr	r3, [pc, #116]	@ (800a64c <HAL_RCCEx_GetPeriphCLKFreq+0x548>)
 800a5d6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a5da:	f003 0302 	and.w	r3, r3, #2
 800a5de:	2b02      	cmp	r3, #2
 800a5e0:	d107      	bne.n	800a5f2 <HAL_RCCEx_GetPeriphCLKFreq+0x4ee>
 800a5e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a5e4:	2b0c      	cmp	r3, #12
 800a5e6:	d104      	bne.n	800a5f2 <HAL_RCCEx_GetPeriphCLKFreq+0x4ee>
    {
      frequency = LSE_VALUE;
 800a5e8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a5ec:	637b      	str	r3, [r7, #52]	@ 0x34
 800a5ee:	f000 bf31 	b.w	800b454 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for USART2 */
    else
    {
      frequency = 0U;
 800a5f2:	2300      	movs	r3, #0
 800a5f4:	637b      	str	r3, [r7, #52]	@ 0x34
 800a5f6:	f000 bf2d 	b.w	800b454 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
#endif /* USART2 */
  else if (PeriphClk == RCC_PERIPHCLK_USART3)
 800a5fa:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a5fe:	1f11      	subs	r1, r2, #4
 800a600:	430b      	orrs	r3, r1
 800a602:	d13e      	bne.n	800a682 <HAL_RCCEx_GetPeriphCLKFreq+0x57e>
  {
    /* Get the current USART3 source */
    srcclk = __HAL_RCC_GET_USART3_SOURCE();
 800a604:	4b11      	ldr	r3, [pc, #68]	@ (800a64c <HAL_RCCEx_GetPeriphCLKFreq+0x548>)
 800a606:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800a60a:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800a60e:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 800a610:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a612:	2b00      	cmp	r3, #0
 800a614:	d104      	bne.n	800a620 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800a616:	f7fe fa51 	bl	8008abc <HAL_RCC_GetPCLK1Freq>
 800a61a:	6378      	str	r0, [r7, #52]	@ 0x34
 800a61c:	f000 bf1a 	b.w	800b454 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_USART3CLKSOURCE_SYSCLK)
 800a620:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a622:	2b10      	cmp	r3, #16
 800a624:	d104      	bne.n	800a630 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800a626:	f7fe f919 	bl	800885c <HAL_RCC_GetSysClockFreq>
 800a62a:	6378      	str	r0, [r7, #52]	@ 0x34
 800a62c:	f000 bf12 	b.w	800b454 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 800a630:	4b06      	ldr	r3, [pc, #24]	@ (800a64c <HAL_RCCEx_GetPeriphCLKFreq+0x548>)
 800a632:	681b      	ldr	r3, [r3, #0]
 800a634:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a638:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a63c:	d10e      	bne.n	800a65c <HAL_RCCEx_GetPeriphCLKFreq+0x558>
 800a63e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a640:	2b20      	cmp	r3, #32
 800a642:	d10b      	bne.n	800a65c <HAL_RCCEx_GetPeriphCLKFreq+0x558>
    {
      frequency = HSI_VALUE;
 800a644:	4b04      	ldr	r3, [pc, #16]	@ (800a658 <HAL_RCCEx_GetPeriphCLKFreq+0x554>)
 800a646:	637b      	str	r3, [r7, #52]	@ 0x34
 800a648:	f000 bf04 	b.w	800b454 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
 800a64c:	46020c00 	.word	0x46020c00
 800a650:	08011ad4 	.word	0x08011ad4
 800a654:	02dc6c00 	.word	0x02dc6c00
 800a658:	00f42400 	.word	0x00f42400
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 800a65c:	4ba7      	ldr	r3, [pc, #668]	@ (800a8fc <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 800a65e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a662:	f003 0302 	and.w	r3, r3, #2
 800a666:	2b02      	cmp	r3, #2
 800a668:	d107      	bne.n	800a67a <HAL_RCCEx_GetPeriphCLKFreq+0x576>
 800a66a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a66c:	2b30      	cmp	r3, #48	@ 0x30
 800a66e:	d104      	bne.n	800a67a <HAL_RCCEx_GetPeriphCLKFreq+0x576>
    {
      frequency = LSE_VALUE;
 800a670:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a674:	637b      	str	r3, [r7, #52]	@ 0x34
 800a676:	f000 beed 	b.w	800b454 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for USART3 */
    else
    {
      frequency = 0U;
 800a67a:	2300      	movs	r3, #0
 800a67c:	637b      	str	r3, [r7, #52]	@ 0x34
 800a67e:	f000 bee9 	b.w	800b454 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART4)
 800a682:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a686:	f1a2 0108 	sub.w	r1, r2, #8
 800a68a:	430b      	orrs	r3, r1
 800a68c:	d136      	bne.n	800a6fc <HAL_RCCEx_GetPeriphCLKFreq+0x5f8>
  {
    /* Get the current UART4 source */
    srcclk = __HAL_RCC_GET_UART4_SOURCE();
 800a68e:	4b9b      	ldr	r3, [pc, #620]	@ (800a8fc <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 800a690:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800a694:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800a698:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 800a69a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a69c:	2b00      	cmp	r3, #0
 800a69e:	d104      	bne.n	800a6aa <HAL_RCCEx_GetPeriphCLKFreq+0x5a6>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800a6a0:	f7fe fa0c 	bl	8008abc <HAL_RCC_GetPCLK1Freq>
 800a6a4:	6378      	str	r0, [r7, #52]	@ 0x34
 800a6a6:	f000 bed5 	b.w	800b454 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_UART4CLKSOURCE_SYSCLK)
 800a6aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a6ac:	2b40      	cmp	r3, #64	@ 0x40
 800a6ae:	d104      	bne.n	800a6ba <HAL_RCCEx_GetPeriphCLKFreq+0x5b6>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800a6b0:	f7fe f8d4 	bl	800885c <HAL_RCC_GetSysClockFreq>
 800a6b4:	6378      	str	r0, [r7, #52]	@ 0x34
 800a6b6:	f000 becd 	b.w	800b454 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 800a6ba:	4b90      	ldr	r3, [pc, #576]	@ (800a8fc <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 800a6bc:	681b      	ldr	r3, [r3, #0]
 800a6be:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a6c2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a6c6:	d106      	bne.n	800a6d6 <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 800a6c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a6ca:	2b80      	cmp	r3, #128	@ 0x80
 800a6cc:	d103      	bne.n	800a6d6 <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
    {
      frequency = HSI_VALUE;
 800a6ce:	4b8c      	ldr	r3, [pc, #560]	@ (800a900 <HAL_RCCEx_GetPeriphCLKFreq+0x7fc>)
 800a6d0:	637b      	str	r3, [r7, #52]	@ 0x34
 800a6d2:	f000 bebf 	b.w	800b454 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 800a6d6:	4b89      	ldr	r3, [pc, #548]	@ (800a8fc <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 800a6d8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a6dc:	f003 0302 	and.w	r3, r3, #2
 800a6e0:	2b02      	cmp	r3, #2
 800a6e2:	d107      	bne.n	800a6f4 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 800a6e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a6e6:	2bc0      	cmp	r3, #192	@ 0xc0
 800a6e8:	d104      	bne.n	800a6f4 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
    {
      frequency = LSE_VALUE;
 800a6ea:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a6ee:	637b      	str	r3, [r7, #52]	@ 0x34
 800a6f0:	f000 beb0 	b.w	800b454 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for UART4 */
    else
    {
      frequency = 0U;
 800a6f4:	2300      	movs	r3, #0
 800a6f6:	637b      	str	r3, [r7, #52]	@ 0x34
 800a6f8:	f000 beac 	b.w	800b454 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART5)
 800a6fc:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a700:	f1a2 0110 	sub.w	r1, r2, #16
 800a704:	430b      	orrs	r3, r1
 800a706:	d139      	bne.n	800a77c <HAL_RCCEx_GetPeriphCLKFreq+0x678>
  {
    /* Get the current UART5 source */
    srcclk = __HAL_RCC_GET_UART5_SOURCE();
 800a708:	4b7c      	ldr	r3, [pc, #496]	@ (800a8fc <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 800a70a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800a70e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a712:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 800a714:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a716:	2b00      	cmp	r3, #0
 800a718:	d104      	bne.n	800a724 <HAL_RCCEx_GetPeriphCLKFreq+0x620>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800a71a:	f7fe f9cf 	bl	8008abc <HAL_RCC_GetPCLK1Freq>
 800a71e:	6378      	str	r0, [r7, #52]	@ 0x34
 800a720:	f000 be98 	b.w	800b454 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_UART5CLKSOURCE_SYSCLK)
 800a724:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a726:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a72a:	d104      	bne.n	800a736 <HAL_RCCEx_GetPeriphCLKFreq+0x632>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800a72c:	f7fe f896 	bl	800885c <HAL_RCC_GetSysClockFreq>
 800a730:	6378      	str	r0, [r7, #52]	@ 0x34
 800a732:	f000 be8f 	b.w	800b454 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 800a736:	4b71      	ldr	r3, [pc, #452]	@ (800a8fc <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 800a738:	681b      	ldr	r3, [r3, #0]
 800a73a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a73e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a742:	d107      	bne.n	800a754 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800a744:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a746:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a74a:	d103      	bne.n	800a754 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
    {
      frequency = HSI_VALUE;
 800a74c:	4b6c      	ldr	r3, [pc, #432]	@ (800a900 <HAL_RCCEx_GetPeriphCLKFreq+0x7fc>)
 800a74e:	637b      	str	r3, [r7, #52]	@ 0x34
 800a750:	f000 be80 	b.w	800b454 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 800a754:	4b69      	ldr	r3, [pc, #420]	@ (800a8fc <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 800a756:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a75a:	f003 0302 	and.w	r3, r3, #2
 800a75e:	2b02      	cmp	r3, #2
 800a760:	d108      	bne.n	800a774 <HAL_RCCEx_GetPeriphCLKFreq+0x670>
 800a762:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a764:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a768:	d104      	bne.n	800a774 <HAL_RCCEx_GetPeriphCLKFreq+0x670>
    {
      frequency = LSE_VALUE;
 800a76a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a76e:	637b      	str	r3, [r7, #52]	@ 0x34
 800a770:	f000 be70 	b.w	800b454 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for UART5 */
    else
    {
      frequency = 0U;
 800a774:	2300      	movs	r3, #0
 800a776:	637b      	str	r3, [r7, #52]	@ 0x34
 800a778:	f000 be6c 	b.w	800b454 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    {
      frequency = 0U;
    }
  }
#endif /* USART6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPUART1)
 800a77c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a780:	f1a2 0120 	sub.w	r1, r2, #32
 800a784:	430b      	orrs	r3, r1
 800a786:	d158      	bne.n	800a83a <HAL_RCCEx_GetPeriphCLKFreq+0x736>
  {
    /* Get the current LPUART1 source */
    srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 800a788:	4b5c      	ldr	r3, [pc, #368]	@ (800a8fc <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 800a78a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800a78e:	f003 0307 	and.w	r3, r3, #7
 800a792:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 800a794:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a796:	2b00      	cmp	r3, #0
 800a798:	d104      	bne.n	800a7a4 <HAL_RCCEx_GetPeriphCLKFreq+0x6a0>
    {
      frequency = HAL_RCC_GetPCLK3Freq();
 800a79a:	f7fe f9b7 	bl	8008b0c <HAL_RCC_GetPCLK3Freq>
 800a79e:	6378      	str	r0, [r7, #52]	@ 0x34
 800a7a0:	f000 be58 	b.w	800b454 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 800a7a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a7a6:	2b01      	cmp	r3, #1
 800a7a8:	d104      	bne.n	800a7b4 <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800a7aa:	f7fe f857 	bl	800885c <HAL_RCC_GetSysClockFreq>
 800a7ae:	6378      	str	r0, [r7, #52]	@ 0x34
 800a7b0:	f000 be50 	b.w	800b454 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 800a7b4:	4b51      	ldr	r3, [pc, #324]	@ (800a8fc <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 800a7b6:	681b      	ldr	r3, [r3, #0]
 800a7b8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a7bc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a7c0:	d106      	bne.n	800a7d0 <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>
 800a7c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a7c4:	2b02      	cmp	r3, #2
 800a7c6:	d103      	bne.n	800a7d0 <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>
    {
      frequency = HSI_VALUE;
 800a7c8:	4b4d      	ldr	r3, [pc, #308]	@ (800a900 <HAL_RCCEx_GetPeriphCLKFreq+0x7fc>)
 800a7ca:	637b      	str	r3, [r7, #52]	@ 0x34
 800a7cc:	f000 be42 	b.w	800b454 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 800a7d0:	4b4a      	ldr	r3, [pc, #296]	@ (800a8fc <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 800a7d2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a7d6:	f003 0302 	and.w	r3, r3, #2
 800a7da:	2b02      	cmp	r3, #2
 800a7dc:	d107      	bne.n	800a7ee <HAL_RCCEx_GetPeriphCLKFreq+0x6ea>
 800a7de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a7e0:	2b03      	cmp	r3, #3
 800a7e2:	d104      	bne.n	800a7ee <HAL_RCCEx_GetPeriphCLKFreq+0x6ea>
    {
      frequency = LSE_VALUE;
 800a7e4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a7e8:	637b      	str	r3, [r7, #52]	@ 0x34
 800a7ea:	f000 be33 	b.w	800b454 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_MSIK))
 800a7ee:	4b43      	ldr	r3, [pc, #268]	@ (800a8fc <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 800a7f0:	681b      	ldr	r3, [r3, #0]
 800a7f2:	f003 0320 	and.w	r3, r3, #32
 800a7f6:	2b20      	cmp	r3, #32
 800a7f8:	d11b      	bne.n	800a832 <HAL_RCCEx_GetPeriphCLKFreq+0x72e>
 800a7fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a7fc:	2b04      	cmp	r3, #4
 800a7fe:	d118      	bne.n	800a832 <HAL_RCCEx_GetPeriphCLKFreq+0x72e>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800a800:	4b3e      	ldr	r3, [pc, #248]	@ (800a8fc <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 800a802:	689b      	ldr	r3, [r3, #8]
 800a804:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a808:	2b00      	cmp	r3, #0
 800a80a:	d005      	beq.n	800a818 <HAL_RCCEx_GetPeriphCLKFreq+0x714>
 800a80c:	4b3b      	ldr	r3, [pc, #236]	@ (800a8fc <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 800a80e:	689b      	ldr	r3, [r3, #8]
 800a810:	0e1b      	lsrs	r3, r3, #24
 800a812:	f003 030f 	and.w	r3, r3, #15
 800a816:	e006      	b.n	800a826 <HAL_RCCEx_GetPeriphCLKFreq+0x722>
 800a818:	4b38      	ldr	r3, [pc, #224]	@ (800a8fc <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 800a81a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800a81e:	041b      	lsls	r3, r3, #16
 800a820:	0e1b      	lsrs	r3, r3, #24
 800a822:	f003 030f 	and.w	r3, r3, #15
 800a826:	4a37      	ldr	r2, [pc, #220]	@ (800a904 <HAL_RCCEx_GetPeriphCLKFreq+0x800>)
 800a828:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a82c:	637b      	str	r3, [r7, #52]	@ 0x34
 800a82e:	f000 be11 	b.w	800b454 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for LPUART1 */
    else
    {
      frequency = 0U;
 800a832:	2300      	movs	r3, #0
 800a834:	637b      	str	r3, [r7, #52]	@ 0x34
 800a836:	f000 be0d 	b.w	800b454 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADCDAC)
 800a83a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a83e:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 800a842:	430b      	orrs	r3, r1
 800a844:	d173      	bne.n	800a92e <HAL_RCCEx_GetPeriphCLKFreq+0x82a>
  {
    srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 800a846:	4b2d      	ldr	r3, [pc, #180]	@ (800a8fc <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 800a848:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800a84c:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800a850:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 800a852:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a854:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a858:	d104      	bne.n	800a864 <HAL_RCCEx_GetPeriphCLKFreq+0x760>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800a85a:	f7fd ffff 	bl	800885c <HAL_RCC_GetSysClockFreq>
 800a85e:	6378      	str	r0, [r7, #52]	@ 0x34
 800a860:	f000 bdf8 	b.w	800b454 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2)
 800a864:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a866:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a86a:	d108      	bne.n	800a87e <HAL_RCCEx_GetPeriphCLKFreq+0x77a>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a86c:	f107 0318 	add.w	r3, r7, #24
 800a870:	4618      	mov	r0, r3
 800a872:	f7ff f93f 	bl	8009af4 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_R_Frequency;
 800a876:	6a3b      	ldr	r3, [r7, #32]
 800a878:	637b      	str	r3, [r7, #52]	@ 0x34
 800a87a:	f000 bdeb 	b.w	800b454 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 800a87e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a880:	2b00      	cmp	r3, #0
 800a882:	d104      	bne.n	800a88e <HAL_RCCEx_GetPeriphCLKFreq+0x78a>
    {
      frequency = HAL_RCC_GetHCLKFreq();
 800a884:	f7fe f900 	bl	8008a88 <HAL_RCC_GetHCLKFreq>
 800a888:	6378      	str	r0, [r7, #52]	@ 0x34
 800a88a:	f000 bde3 	b.w	800b454 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_MSIK)
 800a88e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a890:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800a894:	d122      	bne.n	800a8dc <HAL_RCCEx_GetPeriphCLKFreq+0x7d8>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800a896:	4b19      	ldr	r3, [pc, #100]	@ (800a8fc <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 800a898:	681b      	ldr	r3, [r3, #0]
 800a89a:	f003 0320 	and.w	r3, r3, #32
 800a89e:	2b20      	cmp	r3, #32
 800a8a0:	d118      	bne.n	800a8d4 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800a8a2:	4b16      	ldr	r3, [pc, #88]	@ (800a8fc <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 800a8a4:	689b      	ldr	r3, [r3, #8]
 800a8a6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a8aa:	2b00      	cmp	r3, #0
 800a8ac:	d005      	beq.n	800a8ba <HAL_RCCEx_GetPeriphCLKFreq+0x7b6>
 800a8ae:	4b13      	ldr	r3, [pc, #76]	@ (800a8fc <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 800a8b0:	689b      	ldr	r3, [r3, #8]
 800a8b2:	0e1b      	lsrs	r3, r3, #24
 800a8b4:	f003 030f 	and.w	r3, r3, #15
 800a8b8:	e006      	b.n	800a8c8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>
 800a8ba:	4b10      	ldr	r3, [pc, #64]	@ (800a8fc <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 800a8bc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800a8c0:	041b      	lsls	r3, r3, #16
 800a8c2:	0e1b      	lsrs	r3, r3, #24
 800a8c4:	f003 030f 	and.w	r3, r3, #15
 800a8c8:	4a0e      	ldr	r2, [pc, #56]	@ (800a904 <HAL_RCCEx_GetPeriphCLKFreq+0x800>)
 800a8ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a8ce:	637b      	str	r3, [r7, #52]	@ 0x34
 800a8d0:	f000 bdc0 	b.w	800b454 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = 0U;
 800a8d4:	2300      	movs	r3, #0
 800a8d6:	637b      	str	r3, [r7, #52]	@ 0x34
 800a8d8:	f000 bdbc 	b.w	800b454 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 800a8dc:	4b07      	ldr	r3, [pc, #28]	@ (800a8fc <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 800a8de:	681b      	ldr	r3, [r3, #0]
 800a8e0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a8e4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a8e8:	d10e      	bne.n	800a908 <HAL_RCCEx_GetPeriphCLKFreq+0x804>
 800a8ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a8ec:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800a8f0:	d10a      	bne.n	800a908 <HAL_RCCEx_GetPeriphCLKFreq+0x804>
    {
      frequency = HSE_VALUE;
 800a8f2:	4b03      	ldr	r3, [pc, #12]	@ (800a900 <HAL_RCCEx_GetPeriphCLKFreq+0x7fc>)
 800a8f4:	637b      	str	r3, [r7, #52]	@ 0x34
 800a8f6:	f000 bdad 	b.w	800b454 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
 800a8fa:	bf00      	nop
 800a8fc:	46020c00 	.word	0x46020c00
 800a900:	00f42400 	.word	0x00f42400
 800a904:	08011ad4 	.word	0x08011ad4
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 800a908:	4ba8      	ldr	r3, [pc, #672]	@ (800abac <HAL_RCCEx_GetPeriphCLKFreq+0xaa8>)
 800a90a:	681b      	ldr	r3, [r3, #0]
 800a90c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a910:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a914:	d107      	bne.n	800a926 <HAL_RCCEx_GetPeriphCLKFreq+0x822>
 800a916:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a918:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a91c:	d103      	bne.n	800a926 <HAL_RCCEx_GetPeriphCLKFreq+0x822>
    {
      frequency = HSI_VALUE;
 800a91e:	4ba4      	ldr	r3, [pc, #656]	@ (800abb0 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 800a920:	637b      	str	r3, [r7, #52]	@ 0x34
 800a922:	f000 bd97 	b.w	800b454 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for ADC */
    else
    {
      frequency = 0U;
 800a926:	2300      	movs	r3, #0
 800a928:	637b      	str	r3, [r7, #52]	@ 0x34
 800a92a:	f000 bd93 	b.w	800b454 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_MDF1)
 800a92e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a932:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 800a936:	430b      	orrs	r3, r1
 800a938:	d159      	bne.n	800a9ee <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
  {
    /* Get the current MDF1 source */
    srcclk = __HAL_RCC_GET_MDF1_SOURCE();
 800a93a:	4b9c      	ldr	r3, [pc, #624]	@ (800abac <HAL_RCCEx_GetPeriphCLKFreq+0xaa8>)
 800a93c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800a940:	f003 0307 	and.w	r3, r3, #7
 800a944:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800a946:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a948:	2b04      	cmp	r3, #4
 800a94a:	d84c      	bhi.n	800a9e6 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800a94c:	a201      	add	r2, pc, #4	@ (adr r2, 800a954 <HAL_RCCEx_GetPeriphCLKFreq+0x850>)
 800a94e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a952:	bf00      	nop
 800a954:	0800a98d 	.word	0x0800a98d
 800a958:	0800a969 	.word	0x0800a969
 800a95c:	0800a97b 	.word	0x0800a97b
 800a960:	0800a997 	.word	0x0800a997
 800a964:	0800a9a1 	.word	0x0800a9a1
    {
      case RCC_MDF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a968:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a96c:	4618      	mov	r0, r3
 800a96e:	f7fe ff3d 	bl	80097ec <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800a972:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a974:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a976:	f000 bd6d 	b.w	800b454 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_MDF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a97a:	f107 030c 	add.w	r3, r7, #12
 800a97e:	4618      	mov	r0, r3
 800a980:	f7ff fa3c 	bl	8009dfc <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 800a984:	693b      	ldr	r3, [r7, #16]
 800a986:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a988:	f000 bd64 	b.w	800b454 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_MDF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 800a98c:	f7fe f87c 	bl	8008a88 <HAL_RCC_GetHCLKFreq>
 800a990:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800a992:	f000 bd5f 	b.w	800b454 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_MDF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800a996:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 800a99a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a99c:	f000 bd5a 	b.w	800b454 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_MDF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800a9a0:	4b82      	ldr	r3, [pc, #520]	@ (800abac <HAL_RCCEx_GetPeriphCLKFreq+0xaa8>)
 800a9a2:	681b      	ldr	r3, [r3, #0]
 800a9a4:	f003 0320 	and.w	r3, r3, #32
 800a9a8:	2b20      	cmp	r3, #32
 800a9aa:	d118      	bne.n	800a9de <HAL_RCCEx_GetPeriphCLKFreq+0x8da>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800a9ac:	4b7f      	ldr	r3, [pc, #508]	@ (800abac <HAL_RCCEx_GetPeriphCLKFreq+0xaa8>)
 800a9ae:	689b      	ldr	r3, [r3, #8]
 800a9b0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a9b4:	2b00      	cmp	r3, #0
 800a9b6:	d005      	beq.n	800a9c4 <HAL_RCCEx_GetPeriphCLKFreq+0x8c0>
 800a9b8:	4b7c      	ldr	r3, [pc, #496]	@ (800abac <HAL_RCCEx_GetPeriphCLKFreq+0xaa8>)
 800a9ba:	689b      	ldr	r3, [r3, #8]
 800a9bc:	0e1b      	lsrs	r3, r3, #24
 800a9be:	f003 030f 	and.w	r3, r3, #15
 800a9c2:	e006      	b.n	800a9d2 <HAL_RCCEx_GetPeriphCLKFreq+0x8ce>
 800a9c4:	4b79      	ldr	r3, [pc, #484]	@ (800abac <HAL_RCCEx_GetPeriphCLKFreq+0xaa8>)
 800a9c6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800a9ca:	041b      	lsls	r3, r3, #16
 800a9cc:	0e1b      	lsrs	r3, r3, #24
 800a9ce:	f003 030f 	and.w	r3, r3, #15
 800a9d2:	4a78      	ldr	r2, [pc, #480]	@ (800abb4 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800a9d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a9d8:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800a9da:	f000 bd3b 	b.w	800b454 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 800a9de:	2300      	movs	r3, #0
 800a9e0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a9e2:	f000 bd37 	b.w	800b454 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default:

        frequency = 0U;
 800a9e6:	2300      	movs	r3, #0
 800a9e8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a9ea:	f000 bd33 	b.w	800b454 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADF1)
 800a9ee:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a9f2:	f5a2 3100 	sub.w	r1, r2, #131072	@ 0x20000
 800a9f6:	430b      	orrs	r3, r1
 800a9f8:	d167      	bne.n	800aaca <HAL_RCCEx_GetPeriphCLKFreq+0x9c6>
  {
    /* Get the current ADF1 source */
    srcclk = __HAL_RCC_GET_ADF1_SOURCE();
 800a9fa:	4b6c      	ldr	r3, [pc, #432]	@ (800abac <HAL_RCCEx_GetPeriphCLKFreq+0xaa8>)
 800a9fc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800aa00:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 800aa04:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800aa06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa08:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800aa0c:	d036      	beq.n	800aa7c <HAL_RCCEx_GetPeriphCLKFreq+0x978>
 800aa0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa10:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800aa14:	d855      	bhi.n	800aac2 <HAL_RCCEx_GetPeriphCLKFreq+0x9be>
 800aa16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa18:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800aa1c:	d029      	beq.n	800aa72 <HAL_RCCEx_GetPeriphCLKFreq+0x96e>
 800aa1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa20:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800aa24:	d84d      	bhi.n	800aac2 <HAL_RCCEx_GetPeriphCLKFreq+0x9be>
 800aa26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa28:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800aa2c:	d013      	beq.n	800aa56 <HAL_RCCEx_GetPeriphCLKFreq+0x952>
 800aa2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa30:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800aa34:	d845      	bhi.n	800aac2 <HAL_RCCEx_GetPeriphCLKFreq+0x9be>
 800aa36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa38:	2b00      	cmp	r3, #0
 800aa3a:	d015      	beq.n	800aa68 <HAL_RCCEx_GetPeriphCLKFreq+0x964>
 800aa3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa3e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800aa42:	d13e      	bne.n	800aac2 <HAL_RCCEx_GetPeriphCLKFreq+0x9be>
    {
      case RCC_ADF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800aa44:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800aa48:	4618      	mov	r0, r3
 800aa4a:	f7fe fecf 	bl	80097ec <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800aa4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa50:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800aa52:	f000 bcff 	b.w	800b454 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_ADF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800aa56:	f107 030c 	add.w	r3, r7, #12
 800aa5a:	4618      	mov	r0, r3
 800aa5c:	f7ff f9ce 	bl	8009dfc <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 800aa60:	693b      	ldr	r3, [r7, #16]
 800aa62:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800aa64:	f000 bcf6 	b.w	800b454 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_ADF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 800aa68:	f7fe f80e 	bl	8008a88 <HAL_RCC_GetHCLKFreq>
 800aa6c:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800aa6e:	f000 bcf1 	b.w	800b454 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_ADF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800aa72:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 800aa76:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800aa78:	f000 bcec 	b.w	800b454 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_ADF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800aa7c:	4b4b      	ldr	r3, [pc, #300]	@ (800abac <HAL_RCCEx_GetPeriphCLKFreq+0xaa8>)
 800aa7e:	681b      	ldr	r3, [r3, #0]
 800aa80:	f003 0320 	and.w	r3, r3, #32
 800aa84:	2b20      	cmp	r3, #32
 800aa86:	d118      	bne.n	800aaba <HAL_RCCEx_GetPeriphCLKFreq+0x9b6>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800aa88:	4b48      	ldr	r3, [pc, #288]	@ (800abac <HAL_RCCEx_GetPeriphCLKFreq+0xaa8>)
 800aa8a:	689b      	ldr	r3, [r3, #8]
 800aa8c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800aa90:	2b00      	cmp	r3, #0
 800aa92:	d005      	beq.n	800aaa0 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>
 800aa94:	4b45      	ldr	r3, [pc, #276]	@ (800abac <HAL_RCCEx_GetPeriphCLKFreq+0xaa8>)
 800aa96:	689b      	ldr	r3, [r3, #8]
 800aa98:	0e1b      	lsrs	r3, r3, #24
 800aa9a:	f003 030f 	and.w	r3, r3, #15
 800aa9e:	e006      	b.n	800aaae <HAL_RCCEx_GetPeriphCLKFreq+0x9aa>
 800aaa0:	4b42      	ldr	r3, [pc, #264]	@ (800abac <HAL_RCCEx_GetPeriphCLKFreq+0xaa8>)
 800aaa2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800aaa6:	041b      	lsls	r3, r3, #16
 800aaa8:	0e1b      	lsrs	r3, r3, #24
 800aaaa:	f003 030f 	and.w	r3, r3, #15
 800aaae:	4a41      	ldr	r2, [pc, #260]	@ (800abb4 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800aab0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800aab4:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800aab6:	f000 bccd 	b.w	800b454 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 800aaba:	2300      	movs	r3, #0
 800aabc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800aabe:	f000 bcc9 	b.w	800b454 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default:

        frequency = 0U;
 800aac2:	2300      	movs	r3, #0
 800aac4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800aac6:	f000 bcc5 	b.w	800b454 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C1)
 800aaca:	e9d7 2300 	ldrd	r2, r3, [r7]
 800aace:	f1a2 0140 	sub.w	r1, r2, #64	@ 0x40
 800aad2:	430b      	orrs	r3, r1
 800aad4:	d14c      	bne.n	800ab70 <HAL_RCCEx_GetPeriphCLKFreq+0xa6c>
  {
    /* Get the current I2C1 source */
    srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 800aad6:	4b35      	ldr	r3, [pc, #212]	@ (800abac <HAL_RCCEx_GetPeriphCLKFreq+0xaa8>)
 800aad8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800aadc:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800aae0:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 800aae2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aae4:	2b00      	cmp	r3, #0
 800aae6:	d104      	bne.n	800aaf2 <HAL_RCCEx_GetPeriphCLKFreq+0x9ee>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800aae8:	f7fd ffe8 	bl	8008abc <HAL_RCC_GetPCLK1Freq>
 800aaec:	6378      	str	r0, [r7, #52]	@ 0x34
 800aaee:	f000 bcb1 	b.w	800b454 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 800aaf2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aaf4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800aaf8:	d104      	bne.n	800ab04 <HAL_RCCEx_GetPeriphCLKFreq+0xa00>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800aafa:	f7fd feaf 	bl	800885c <HAL_RCC_GetSysClockFreq>
 800aafe:	6378      	str	r0, [r7, #52]	@ 0x34
 800ab00:	f000 bca8 	b.w	800b454 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 800ab04:	4b29      	ldr	r3, [pc, #164]	@ (800abac <HAL_RCCEx_GetPeriphCLKFreq+0xaa8>)
 800ab06:	681b      	ldr	r3, [r3, #0]
 800ab08:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800ab0c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ab10:	d107      	bne.n	800ab22 <HAL_RCCEx_GetPeriphCLKFreq+0xa1e>
 800ab12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab14:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800ab18:	d103      	bne.n	800ab22 <HAL_RCCEx_GetPeriphCLKFreq+0xa1e>
    {
      frequency = HSI_VALUE;
 800ab1a:	4b25      	ldr	r3, [pc, #148]	@ (800abb0 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 800ab1c:	637b      	str	r3, [r7, #52]	@ 0x34
 800ab1e:	f000 bc99 	b.w	800b454 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C1CLKSOURCE_MSIK))
 800ab22:	4b22      	ldr	r3, [pc, #136]	@ (800abac <HAL_RCCEx_GetPeriphCLKFreq+0xaa8>)
 800ab24:	681b      	ldr	r3, [r3, #0]
 800ab26:	f003 0320 	and.w	r3, r3, #32
 800ab2a:	2b20      	cmp	r3, #32
 800ab2c:	d11c      	bne.n	800ab68 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
 800ab2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab30:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800ab34:	d118      	bne.n	800ab68 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800ab36:	4b1d      	ldr	r3, [pc, #116]	@ (800abac <HAL_RCCEx_GetPeriphCLKFreq+0xaa8>)
 800ab38:	689b      	ldr	r3, [r3, #8]
 800ab3a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ab3e:	2b00      	cmp	r3, #0
 800ab40:	d005      	beq.n	800ab4e <HAL_RCCEx_GetPeriphCLKFreq+0xa4a>
 800ab42:	4b1a      	ldr	r3, [pc, #104]	@ (800abac <HAL_RCCEx_GetPeriphCLKFreq+0xaa8>)
 800ab44:	689b      	ldr	r3, [r3, #8]
 800ab46:	0e1b      	lsrs	r3, r3, #24
 800ab48:	f003 030f 	and.w	r3, r3, #15
 800ab4c:	e006      	b.n	800ab5c <HAL_RCCEx_GetPeriphCLKFreq+0xa58>
 800ab4e:	4b17      	ldr	r3, [pc, #92]	@ (800abac <HAL_RCCEx_GetPeriphCLKFreq+0xaa8>)
 800ab50:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800ab54:	041b      	lsls	r3, r3, #16
 800ab56:	0e1b      	lsrs	r3, r3, #24
 800ab58:	f003 030f 	and.w	r3, r3, #15
 800ab5c:	4a15      	ldr	r2, [pc, #84]	@ (800abb4 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>)
 800ab5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ab62:	637b      	str	r3, [r7, #52]	@ 0x34
 800ab64:	f000 bc76 	b.w	800b454 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for I2C1 */
    else
    {
      frequency = 0U;
 800ab68:	2300      	movs	r3, #0
 800ab6a:	637b      	str	r3, [r7, #52]	@ 0x34
 800ab6c:	f000 bc72 	b.w	800b454 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C2)
 800ab70:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ab74:	f1a2 0180 	sub.w	r1, r2, #128	@ 0x80
 800ab78:	430b      	orrs	r3, r1
 800ab7a:	d153      	bne.n	800ac24 <HAL_RCCEx_GetPeriphCLKFreq+0xb20>
  {
    /* Get the current I2C2 source */
    srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 800ab7c:	4b0b      	ldr	r3, [pc, #44]	@ (800abac <HAL_RCCEx_GetPeriphCLKFreq+0xaa8>)
 800ab7e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800ab82:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800ab86:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 800ab88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab8a:	2b00      	cmp	r3, #0
 800ab8c:	d104      	bne.n	800ab98 <HAL_RCCEx_GetPeriphCLKFreq+0xa94>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800ab8e:	f7fd ff95 	bl	8008abc <HAL_RCC_GetPCLK1Freq>
 800ab92:	6378      	str	r0, [r7, #52]	@ 0x34
 800ab94:	f000 bc5e 	b.w	800b454 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_I2C2CLKSOURCE_SYSCLK)
 800ab98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab9a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ab9e:	d10b      	bne.n	800abb8 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800aba0:	f7fd fe5c 	bl	800885c <HAL_RCC_GetSysClockFreq>
 800aba4:	6378      	str	r0, [r7, #52]	@ 0x34
 800aba6:	f000 bc55 	b.w	800b454 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
 800abaa:	bf00      	nop
 800abac:	46020c00 	.word	0x46020c00
 800abb0:	00f42400 	.word	0x00f42400
 800abb4:	08011ad4 	.word	0x08011ad4
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 800abb8:	4b9a      	ldr	r3, [pc, #616]	@ (800ae24 <HAL_RCCEx_GetPeriphCLKFreq+0xd20>)
 800abba:	681b      	ldr	r3, [r3, #0]
 800abbc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800abc0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800abc4:	d107      	bne.n	800abd6 <HAL_RCCEx_GetPeriphCLKFreq+0xad2>
 800abc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800abc8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800abcc:	d103      	bne.n	800abd6 <HAL_RCCEx_GetPeriphCLKFreq+0xad2>
    {
      frequency = HSI_VALUE;
 800abce:	4b96      	ldr	r3, [pc, #600]	@ (800ae28 <HAL_RCCEx_GetPeriphCLKFreq+0xd24>)
 800abd0:	637b      	str	r3, [r7, #52]	@ 0x34
 800abd2:	f000 bc3f 	b.w	800b454 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C2CLKSOURCE_MSIK))
 800abd6:	4b93      	ldr	r3, [pc, #588]	@ (800ae24 <HAL_RCCEx_GetPeriphCLKFreq+0xd20>)
 800abd8:	681b      	ldr	r3, [r3, #0]
 800abda:	f003 0320 	and.w	r3, r3, #32
 800abde:	2b20      	cmp	r3, #32
 800abe0:	d11c      	bne.n	800ac1c <HAL_RCCEx_GetPeriphCLKFreq+0xb18>
 800abe2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800abe4:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800abe8:	d118      	bne.n	800ac1c <HAL_RCCEx_GetPeriphCLKFreq+0xb18>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800abea:	4b8e      	ldr	r3, [pc, #568]	@ (800ae24 <HAL_RCCEx_GetPeriphCLKFreq+0xd20>)
 800abec:	689b      	ldr	r3, [r3, #8]
 800abee:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800abf2:	2b00      	cmp	r3, #0
 800abf4:	d005      	beq.n	800ac02 <HAL_RCCEx_GetPeriphCLKFreq+0xafe>
 800abf6:	4b8b      	ldr	r3, [pc, #556]	@ (800ae24 <HAL_RCCEx_GetPeriphCLKFreq+0xd20>)
 800abf8:	689b      	ldr	r3, [r3, #8]
 800abfa:	0e1b      	lsrs	r3, r3, #24
 800abfc:	f003 030f 	and.w	r3, r3, #15
 800ac00:	e006      	b.n	800ac10 <HAL_RCCEx_GetPeriphCLKFreq+0xb0c>
 800ac02:	4b88      	ldr	r3, [pc, #544]	@ (800ae24 <HAL_RCCEx_GetPeriphCLKFreq+0xd20>)
 800ac04:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800ac08:	041b      	lsls	r3, r3, #16
 800ac0a:	0e1b      	lsrs	r3, r3, #24
 800ac0c:	f003 030f 	and.w	r3, r3, #15
 800ac10:	4a86      	ldr	r2, [pc, #536]	@ (800ae2c <HAL_RCCEx_GetPeriphCLKFreq+0xd28>)
 800ac12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ac16:	637b      	str	r3, [r7, #52]	@ 0x34
 800ac18:	f000 bc1c 	b.w	800b454 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for I2C2 */
    else
    {
      frequency = 0U;
 800ac1c:	2300      	movs	r3, #0
 800ac1e:	637b      	str	r3, [r7, #52]	@ 0x34
 800ac20:	f000 bc18 	b.w	800b454 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C3)
 800ac24:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ac28:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 800ac2c:	430b      	orrs	r3, r1
 800ac2e:	d151      	bne.n	800acd4 <HAL_RCCEx_GetPeriphCLKFreq+0xbd0>
  {
    /* Get the current I2C3 source */
    srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 800ac30:	4b7c      	ldr	r3, [pc, #496]	@ (800ae24 <HAL_RCCEx_GetPeriphCLKFreq+0xd20>)
 800ac32:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800ac36:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800ac3a:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800ac3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac3e:	2bc0      	cmp	r3, #192	@ 0xc0
 800ac40:	d024      	beq.n	800ac8c <HAL_RCCEx_GetPeriphCLKFreq+0xb88>
 800ac42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac44:	2bc0      	cmp	r3, #192	@ 0xc0
 800ac46:	d842      	bhi.n	800acce <HAL_RCCEx_GetPeriphCLKFreq+0xbca>
 800ac48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac4a:	2b80      	cmp	r3, #128	@ 0x80
 800ac4c:	d00d      	beq.n	800ac6a <HAL_RCCEx_GetPeriphCLKFreq+0xb66>
 800ac4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac50:	2b80      	cmp	r3, #128	@ 0x80
 800ac52:	d83c      	bhi.n	800acce <HAL_RCCEx_GetPeriphCLKFreq+0xbca>
 800ac54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac56:	2b00      	cmp	r3, #0
 800ac58:	d003      	beq.n	800ac62 <HAL_RCCEx_GetPeriphCLKFreq+0xb5e>
 800ac5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac5c:	2b40      	cmp	r3, #64	@ 0x40
 800ac5e:	d011      	beq.n	800ac84 <HAL_RCCEx_GetPeriphCLKFreq+0xb80>
 800ac60:	e035      	b.n	800acce <HAL_RCCEx_GetPeriphCLKFreq+0xbca>
    {
      case RCC_I2C3CLKSOURCE_PCLK3:
      {
        frequency = HAL_RCC_GetPCLK3Freq();
 800ac62:	f7fd ff53 	bl	8008b0c <HAL_RCC_GetPCLK3Freq>
 800ac66:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800ac68:	e3f4      	b.n	800b454 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      case RCC_I2C3CLKSOURCE_HSI:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800ac6a:	4b6e      	ldr	r3, [pc, #440]	@ (800ae24 <HAL_RCCEx_GetPeriphCLKFreq+0xd20>)
 800ac6c:	681b      	ldr	r3, [r3, #0]
 800ac6e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800ac72:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ac76:	d102      	bne.n	800ac7e <HAL_RCCEx_GetPeriphCLKFreq+0xb7a>
        {
          frequency = HSI_VALUE;
 800ac78:	4b6b      	ldr	r3, [pc, #428]	@ (800ae28 <HAL_RCCEx_GetPeriphCLKFreq+0xd24>)
 800ac7a:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800ac7c:	e3ea      	b.n	800b454 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 800ac7e:	2300      	movs	r3, #0
 800ac80:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800ac82:	e3e7      	b.n	800b454 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      case RCC_I2C3CLKSOURCE_SYSCLK:
      {
        frequency = HAL_RCC_GetSysClockFreq();
 800ac84:	f7fd fdea 	bl	800885c <HAL_RCC_GetSysClockFreq>
 800ac88:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800ac8a:	e3e3      	b.n	800b454 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      case RCC_I2C3CLKSOURCE_MSIK:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800ac8c:	4b65      	ldr	r3, [pc, #404]	@ (800ae24 <HAL_RCCEx_GetPeriphCLKFreq+0xd20>)
 800ac8e:	681b      	ldr	r3, [r3, #0]
 800ac90:	f003 0320 	and.w	r3, r3, #32
 800ac94:	2b20      	cmp	r3, #32
 800ac96:	d117      	bne.n	800acc8 <HAL_RCCEx_GetPeriphCLKFreq+0xbc4>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800ac98:	4b62      	ldr	r3, [pc, #392]	@ (800ae24 <HAL_RCCEx_GetPeriphCLKFreq+0xd20>)
 800ac9a:	689b      	ldr	r3, [r3, #8]
 800ac9c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800aca0:	2b00      	cmp	r3, #0
 800aca2:	d005      	beq.n	800acb0 <HAL_RCCEx_GetPeriphCLKFreq+0xbac>
 800aca4:	4b5f      	ldr	r3, [pc, #380]	@ (800ae24 <HAL_RCCEx_GetPeriphCLKFreq+0xd20>)
 800aca6:	689b      	ldr	r3, [r3, #8]
 800aca8:	0e1b      	lsrs	r3, r3, #24
 800acaa:	f003 030f 	and.w	r3, r3, #15
 800acae:	e006      	b.n	800acbe <HAL_RCCEx_GetPeriphCLKFreq+0xbba>
 800acb0:	4b5c      	ldr	r3, [pc, #368]	@ (800ae24 <HAL_RCCEx_GetPeriphCLKFreq+0xd20>)
 800acb2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800acb6:	041b      	lsls	r3, r3, #16
 800acb8:	0e1b      	lsrs	r3, r3, #24
 800acba:	f003 030f 	and.w	r3, r3, #15
 800acbe:	4a5b      	ldr	r2, [pc, #364]	@ (800ae2c <HAL_RCCEx_GetPeriphCLKFreq+0xd28>)
 800acc0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800acc4:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800acc6:	e3c5      	b.n	800b454 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 800acc8:	2300      	movs	r3, #0
 800acca:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800accc:	e3c2      	b.n	800b454 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      default:
      {
        frequency = 0U;
 800acce:	2300      	movs	r3, #0
 800acd0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800acd2:	e3bf      	b.n	800b454 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C4)
 800acd4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800acd8:	f5a2 0180 	sub.w	r1, r2, #4194304	@ 0x400000
 800acdc:	430b      	orrs	r3, r1
 800acde:	d147      	bne.n	800ad70 <HAL_RCCEx_GetPeriphCLKFreq+0xc6c>
  {
    /* Get the current I2C4 source */
    srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 800ace0:	4b50      	ldr	r3, [pc, #320]	@ (800ae24 <HAL_RCCEx_GetPeriphCLKFreq+0xd20>)
 800ace2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800ace6:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800acea:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C4CLKSOURCE_PCLK1)
 800acec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800acee:	2b00      	cmp	r3, #0
 800acf0:	d103      	bne.n	800acfa <HAL_RCCEx_GetPeriphCLKFreq+0xbf6>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800acf2:	f7fd fee3 	bl	8008abc <HAL_RCC_GetPCLK1Freq>
 800acf6:	6378      	str	r0, [r7, #52]	@ 0x34
 800acf8:	e3ac      	b.n	800b454 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_I2C4CLKSOURCE_SYSCLK)
 800acfa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800acfc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800ad00:	d103      	bne.n	800ad0a <HAL_RCCEx_GetPeriphCLKFreq+0xc06>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800ad02:	f7fd fdab 	bl	800885c <HAL_RCC_GetSysClockFreq>
 800ad06:	6378      	str	r0, [r7, #52]	@ 0x34
 800ad08:	e3a4      	b.n	800b454 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 800ad0a:	4b46      	ldr	r3, [pc, #280]	@ (800ae24 <HAL_RCCEx_GetPeriphCLKFreq+0xd20>)
 800ad0c:	681b      	ldr	r3, [r3, #0]
 800ad0e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800ad12:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ad16:	d106      	bne.n	800ad26 <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
 800ad18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad1a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800ad1e:	d102      	bne.n	800ad26 <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
    {
      frequency = HSI_VALUE;
 800ad20:	4b41      	ldr	r3, [pc, #260]	@ (800ae28 <HAL_RCCEx_GetPeriphCLKFreq+0xd24>)
 800ad22:	637b      	str	r3, [r7, #52]	@ 0x34
 800ad24:	e396      	b.n	800b454 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C4CLKSOURCE_MSIK))
 800ad26:	4b3f      	ldr	r3, [pc, #252]	@ (800ae24 <HAL_RCCEx_GetPeriphCLKFreq+0xd20>)
 800ad28:	681b      	ldr	r3, [r3, #0]
 800ad2a:	f003 0320 	and.w	r3, r3, #32
 800ad2e:	2b20      	cmp	r3, #32
 800ad30:	d11b      	bne.n	800ad6a <HAL_RCCEx_GetPeriphCLKFreq+0xc66>
 800ad32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad34:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800ad38:	d117      	bne.n	800ad6a <HAL_RCCEx_GetPeriphCLKFreq+0xc66>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800ad3a:	4b3a      	ldr	r3, [pc, #232]	@ (800ae24 <HAL_RCCEx_GetPeriphCLKFreq+0xd20>)
 800ad3c:	689b      	ldr	r3, [r3, #8]
 800ad3e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ad42:	2b00      	cmp	r3, #0
 800ad44:	d005      	beq.n	800ad52 <HAL_RCCEx_GetPeriphCLKFreq+0xc4e>
 800ad46:	4b37      	ldr	r3, [pc, #220]	@ (800ae24 <HAL_RCCEx_GetPeriphCLKFreq+0xd20>)
 800ad48:	689b      	ldr	r3, [r3, #8]
 800ad4a:	0e1b      	lsrs	r3, r3, #24
 800ad4c:	f003 030f 	and.w	r3, r3, #15
 800ad50:	e006      	b.n	800ad60 <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>
 800ad52:	4b34      	ldr	r3, [pc, #208]	@ (800ae24 <HAL_RCCEx_GetPeriphCLKFreq+0xd20>)
 800ad54:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800ad58:	041b      	lsls	r3, r3, #16
 800ad5a:	0e1b      	lsrs	r3, r3, #24
 800ad5c:	f003 030f 	and.w	r3, r3, #15
 800ad60:	4a32      	ldr	r2, [pc, #200]	@ (800ae2c <HAL_RCCEx_GetPeriphCLKFreq+0xd28>)
 800ad62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ad66:	637b      	str	r3, [r7, #52]	@ 0x34
 800ad68:	e374      	b.n	800b454 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for I2C4 */
    else
    {
      frequency = 0U;
 800ad6a:	2300      	movs	r3, #0
 800ad6c:	637b      	str	r3, [r7, #52]	@ 0x34
 800ad6e:	e371      	b.n	800b454 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    {
      frequency = 0U;
    }
  }
#endif /* I2C6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM34)
 800ad70:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ad74:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 800ad78:	430b      	orrs	r3, r1
 800ad7a:	d16b      	bne.n	800ae54 <HAL_RCCEx_GetPeriphCLKFreq+0xd50>
  {
    /* Get the current LPTIM34 source */
    srcclk = __HAL_RCC_GET_LPTIM34_SOURCE();
 800ad7c:	4b29      	ldr	r3, [pc, #164]	@ (800ae24 <HAL_RCCEx_GetPeriphCLKFreq+0xd20>)
 800ad7e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800ad82:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800ad86:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM34CLKSOURCE_MSIK)
 800ad88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad8a:	2b00      	cmp	r3, #0
 800ad8c:	d120      	bne.n	800add0 <HAL_RCCEx_GetPeriphCLKFreq+0xccc>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800ad8e:	4b25      	ldr	r3, [pc, #148]	@ (800ae24 <HAL_RCCEx_GetPeriphCLKFreq+0xd20>)
 800ad90:	681b      	ldr	r3, [r3, #0]
 800ad92:	f003 0320 	and.w	r3, r3, #32
 800ad96:	2b20      	cmp	r3, #32
 800ad98:	d117      	bne.n	800adca <HAL_RCCEx_GetPeriphCLKFreq+0xcc6>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800ad9a:	4b22      	ldr	r3, [pc, #136]	@ (800ae24 <HAL_RCCEx_GetPeriphCLKFreq+0xd20>)
 800ad9c:	689b      	ldr	r3, [r3, #8]
 800ad9e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ada2:	2b00      	cmp	r3, #0
 800ada4:	d005      	beq.n	800adb2 <HAL_RCCEx_GetPeriphCLKFreq+0xcae>
 800ada6:	4b1f      	ldr	r3, [pc, #124]	@ (800ae24 <HAL_RCCEx_GetPeriphCLKFreq+0xd20>)
 800ada8:	689b      	ldr	r3, [r3, #8]
 800adaa:	0e1b      	lsrs	r3, r3, #24
 800adac:	f003 030f 	and.w	r3, r3, #15
 800adb0:	e006      	b.n	800adc0 <HAL_RCCEx_GetPeriphCLKFreq+0xcbc>
 800adb2:	4b1c      	ldr	r3, [pc, #112]	@ (800ae24 <HAL_RCCEx_GetPeriphCLKFreq+0xd20>)
 800adb4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800adb8:	041b      	lsls	r3, r3, #16
 800adba:	0e1b      	lsrs	r3, r3, #24
 800adbc:	f003 030f 	and.w	r3, r3, #15
 800adc0:	4a1a      	ldr	r2, [pc, #104]	@ (800ae2c <HAL_RCCEx_GetPeriphCLKFreq+0xd28>)
 800adc2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800adc6:	637b      	str	r3, [r7, #52]	@ 0x34
 800adc8:	e344      	b.n	800b454 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = 0U;
 800adca:	2300      	movs	r3, #0
 800adcc:	637b      	str	r3, [r7, #52]	@ 0x34
 800adce:	e341      	b.n	800b454 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSI))
 800add0:	4b14      	ldr	r3, [pc, #80]	@ (800ae24 <HAL_RCCEx_GetPeriphCLKFreq+0xd20>)
 800add2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800add6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800adda:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800adde:	d112      	bne.n	800ae06 <HAL_RCCEx_GetPeriphCLKFreq+0xd02>
 800ade0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ade2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ade6:	d10e      	bne.n	800ae06 <HAL_RCCEx_GetPeriphCLKFreq+0xd02>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800ade8:	4b0e      	ldr	r3, [pc, #56]	@ (800ae24 <HAL_RCCEx_GetPeriphCLKFreq+0xd20>)
 800adea:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800adee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800adf2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800adf6:	d102      	bne.n	800adfe <HAL_RCCEx_GetPeriphCLKFreq+0xcfa>
      {
        frequency = LSI_VALUE / 128U;
 800adf8:	23fa      	movs	r3, #250	@ 0xfa
 800adfa:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800adfc:	e32a      	b.n	800b454 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = LSI_VALUE;
 800adfe:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800ae02:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800ae04:	e326      	b.n	800b454 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_HSI))
 800ae06:	4b07      	ldr	r3, [pc, #28]	@ (800ae24 <HAL_RCCEx_GetPeriphCLKFreq+0xd20>)
 800ae08:	681b      	ldr	r3, [r3, #0]
 800ae0a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800ae0e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ae12:	d10d      	bne.n	800ae30 <HAL_RCCEx_GetPeriphCLKFreq+0xd2c>
 800ae14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae16:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ae1a:	d109      	bne.n	800ae30 <HAL_RCCEx_GetPeriphCLKFreq+0xd2c>
    {
      frequency = HSI_VALUE;
 800ae1c:	4b02      	ldr	r3, [pc, #8]	@ (800ae28 <HAL_RCCEx_GetPeriphCLKFreq+0xd24>)
 800ae1e:	637b      	str	r3, [r7, #52]	@ 0x34
 800ae20:	e318      	b.n	800b454 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
 800ae22:	bf00      	nop
 800ae24:	46020c00 	.word	0x46020c00
 800ae28:	00f42400 	.word	0x00f42400
 800ae2c:	08011ad4 	.word	0x08011ad4
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSE))
 800ae30:	4b9b      	ldr	r3, [pc, #620]	@ (800b0a0 <HAL_RCCEx_GetPeriphCLKFreq+0xf9c>)
 800ae32:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800ae36:	f003 0302 	and.w	r3, r3, #2
 800ae3a:	2b02      	cmp	r3, #2
 800ae3c:	d107      	bne.n	800ae4e <HAL_RCCEx_GetPeriphCLKFreq+0xd4a>
 800ae3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae40:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800ae44:	d103      	bne.n	800ae4e <HAL_RCCEx_GetPeriphCLKFreq+0xd4a>
    {
      frequency = LSE_VALUE;
 800ae46:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800ae4a:	637b      	str	r3, [r7, #52]	@ 0x34
 800ae4c:	e302      	b.n	800b454 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for LPTIM34 */
    else
    {
      frequency = 0U;
 800ae4e:	2300      	movs	r3, #0
 800ae50:	637b      	str	r3, [r7, #52]	@ 0x34
 800ae52:	e2ff      	b.n	800b454 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM1)
 800ae54:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ae58:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 800ae5c:	430b      	orrs	r3, r1
 800ae5e:	d164      	bne.n	800af2a <HAL_RCCEx_GetPeriphCLKFreq+0xe26>
  {
    /* Get the current LPTIM1 source */
    srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 800ae60:	4b8f      	ldr	r3, [pc, #572]	@ (800b0a0 <HAL_RCCEx_GetPeriphCLKFreq+0xf9c>)
 800ae62:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800ae66:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800ae6a:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM1CLKSOURCE_MSIK)
 800ae6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae6e:	2b00      	cmp	r3, #0
 800ae70:	d120      	bne.n	800aeb4 <HAL_RCCEx_GetPeriphCLKFreq+0xdb0>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800ae72:	4b8b      	ldr	r3, [pc, #556]	@ (800b0a0 <HAL_RCCEx_GetPeriphCLKFreq+0xf9c>)
 800ae74:	681b      	ldr	r3, [r3, #0]
 800ae76:	f003 0320 	and.w	r3, r3, #32
 800ae7a:	2b20      	cmp	r3, #32
 800ae7c:	d117      	bne.n	800aeae <HAL_RCCEx_GetPeriphCLKFreq+0xdaa>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800ae7e:	4b88      	ldr	r3, [pc, #544]	@ (800b0a0 <HAL_RCCEx_GetPeriphCLKFreq+0xf9c>)
 800ae80:	689b      	ldr	r3, [r3, #8]
 800ae82:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ae86:	2b00      	cmp	r3, #0
 800ae88:	d005      	beq.n	800ae96 <HAL_RCCEx_GetPeriphCLKFreq+0xd92>
 800ae8a:	4b85      	ldr	r3, [pc, #532]	@ (800b0a0 <HAL_RCCEx_GetPeriphCLKFreq+0xf9c>)
 800ae8c:	689b      	ldr	r3, [r3, #8]
 800ae8e:	0e1b      	lsrs	r3, r3, #24
 800ae90:	f003 030f 	and.w	r3, r3, #15
 800ae94:	e006      	b.n	800aea4 <HAL_RCCEx_GetPeriphCLKFreq+0xda0>
 800ae96:	4b82      	ldr	r3, [pc, #520]	@ (800b0a0 <HAL_RCCEx_GetPeriphCLKFreq+0xf9c>)
 800ae98:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800ae9c:	041b      	lsls	r3, r3, #16
 800ae9e:	0e1b      	lsrs	r3, r3, #24
 800aea0:	f003 030f 	and.w	r3, r3, #15
 800aea4:	4a7f      	ldr	r2, [pc, #508]	@ (800b0a4 <HAL_RCCEx_GetPeriphCLKFreq+0xfa0>)
 800aea6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800aeaa:	637b      	str	r3, [r7, #52]	@ 0x34
 800aeac:	e2d2      	b.n	800b454 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = 0U;
 800aeae:	2300      	movs	r3, #0
 800aeb0:	637b      	str	r3, [r7, #52]	@ 0x34
 800aeb2:	e2cf      	b.n	800b454 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSI))
 800aeb4:	4b7a      	ldr	r3, [pc, #488]	@ (800b0a0 <HAL_RCCEx_GetPeriphCLKFreq+0xf9c>)
 800aeb6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800aeba:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800aebe:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800aec2:	d112      	bne.n	800aeea <HAL_RCCEx_GetPeriphCLKFreq+0xde6>
 800aec4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aec6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800aeca:	d10e      	bne.n	800aeea <HAL_RCCEx_GetPeriphCLKFreq+0xde6>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800aecc:	4b74      	ldr	r3, [pc, #464]	@ (800b0a0 <HAL_RCCEx_GetPeriphCLKFreq+0xf9c>)
 800aece:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800aed2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800aed6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800aeda:	d102      	bne.n	800aee2 <HAL_RCCEx_GetPeriphCLKFreq+0xdde>
      {
        frequency = LSI_VALUE / 128U;
 800aedc:	23fa      	movs	r3, #250	@ 0xfa
 800aede:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800aee0:	e2b8      	b.n	800b454 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = LSI_VALUE;
 800aee2:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800aee6:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800aee8:	e2b4      	b.n	800b454 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_HSI))
 800aeea:	4b6d      	ldr	r3, [pc, #436]	@ (800b0a0 <HAL_RCCEx_GetPeriphCLKFreq+0xf9c>)
 800aeec:	681b      	ldr	r3, [r3, #0]
 800aeee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800aef2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800aef6:	d106      	bne.n	800af06 <HAL_RCCEx_GetPeriphCLKFreq+0xe02>
 800aef8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aefa:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800aefe:	d102      	bne.n	800af06 <HAL_RCCEx_GetPeriphCLKFreq+0xe02>
    {
      frequency = HSI_VALUE;
 800af00:	4b69      	ldr	r3, [pc, #420]	@ (800b0a8 <HAL_RCCEx_GetPeriphCLKFreq+0xfa4>)
 800af02:	637b      	str	r3, [r7, #52]	@ 0x34
 800af04:	e2a6      	b.n	800b454 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSE))
 800af06:	4b66      	ldr	r3, [pc, #408]	@ (800b0a0 <HAL_RCCEx_GetPeriphCLKFreq+0xf9c>)
 800af08:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800af0c:	f003 0302 	and.w	r3, r3, #2
 800af10:	2b02      	cmp	r3, #2
 800af12:	d107      	bne.n	800af24 <HAL_RCCEx_GetPeriphCLKFreq+0xe20>
 800af14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af16:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800af1a:	d103      	bne.n	800af24 <HAL_RCCEx_GetPeriphCLKFreq+0xe20>
    {
      frequency = LSE_VALUE;
 800af1c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800af20:	637b      	str	r3, [r7, #52]	@ 0x34
 800af22:	e297      	b.n	800b454 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for LPTIM1 */
    else
    {
      frequency = 0U;
 800af24:	2300      	movs	r3, #0
 800af26:	637b      	str	r3, [r7, #52]	@ 0x34
 800af28:	e294      	b.n	800b454 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM2)
 800af2a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800af2e:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 800af32:	430b      	orrs	r3, r1
 800af34:	d147      	bne.n	800afc6 <HAL_RCCEx_GetPeriphCLKFreq+0xec2>
  {
    /* Get the current LPTIM2 source */
    srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 800af36:	4b5a      	ldr	r3, [pc, #360]	@ (800b0a0 <HAL_RCCEx_GetPeriphCLKFreq+0xf9c>)
 800af38:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800af3c:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 800af40:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM2CLKSOURCE_PCLK1)
 800af42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af44:	2b00      	cmp	r3, #0
 800af46:	d103      	bne.n	800af50 <HAL_RCCEx_GetPeriphCLKFreq+0xe4c>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800af48:	f7fd fdb8 	bl	8008abc <HAL_RCC_GetPCLK1Freq>
 800af4c:	6378      	str	r0, [r7, #52]	@ 0x34
 800af4e:	e281      	b.n	800b454 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSI))
 800af50:	4b53      	ldr	r3, [pc, #332]	@ (800b0a0 <HAL_RCCEx_GetPeriphCLKFreq+0xf9c>)
 800af52:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800af56:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800af5a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800af5e:	d112      	bne.n	800af86 <HAL_RCCEx_GetPeriphCLKFreq+0xe82>
 800af60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af62:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800af66:	d10e      	bne.n	800af86 <HAL_RCCEx_GetPeriphCLKFreq+0xe82>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800af68:	4b4d      	ldr	r3, [pc, #308]	@ (800b0a0 <HAL_RCCEx_GetPeriphCLKFreq+0xf9c>)
 800af6a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800af6e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800af72:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800af76:	d102      	bne.n	800af7e <HAL_RCCEx_GetPeriphCLKFreq+0xe7a>
      {
        frequency = LSI_VALUE / 128U;
 800af78:	23fa      	movs	r3, #250	@ 0xfa
 800af7a:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800af7c:	e26a      	b.n	800b454 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = LSI_VALUE;
 800af7e:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800af82:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800af84:	e266      	b.n	800b454 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_HSI))
 800af86:	4b46      	ldr	r3, [pc, #280]	@ (800b0a0 <HAL_RCCEx_GetPeriphCLKFreq+0xf9c>)
 800af88:	681b      	ldr	r3, [r3, #0]
 800af8a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800af8e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800af92:	d106      	bne.n	800afa2 <HAL_RCCEx_GetPeriphCLKFreq+0xe9e>
 800af94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af96:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800af9a:	d102      	bne.n	800afa2 <HAL_RCCEx_GetPeriphCLKFreq+0xe9e>
    {
      frequency = HSI_VALUE;
 800af9c:	4b42      	ldr	r3, [pc, #264]	@ (800b0a8 <HAL_RCCEx_GetPeriphCLKFreq+0xfa4>)
 800af9e:	637b      	str	r3, [r7, #52]	@ 0x34
 800afa0:	e258      	b.n	800b454 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSE))
 800afa2:	4b3f      	ldr	r3, [pc, #252]	@ (800b0a0 <HAL_RCCEx_GetPeriphCLKFreq+0xf9c>)
 800afa4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800afa8:	f003 0302 	and.w	r3, r3, #2
 800afac:	2b02      	cmp	r3, #2
 800afae:	d107      	bne.n	800afc0 <HAL_RCCEx_GetPeriphCLKFreq+0xebc>
 800afb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800afb2:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800afb6:	d103      	bne.n	800afc0 <HAL_RCCEx_GetPeriphCLKFreq+0xebc>
    {
      frequency = LSE_VALUE;
 800afb8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800afbc:	637b      	str	r3, [r7, #52]	@ 0x34
 800afbe:	e249      	b.n	800b454 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for LPTIM2 */
    else
    {
      frequency = 0U;
 800afc0:	2300      	movs	r3, #0
 800afc2:	637b      	str	r3, [r7, #52]	@ 0x34
 800afc4:	e246      	b.n	800b454 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN1)
 800afc6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800afca:	f102 4178 	add.w	r1, r2, #4160749568	@ 0xf8000000
 800afce:	430b      	orrs	r3, r1
 800afd0:	d12d      	bne.n	800b02e <HAL_RCCEx_GetPeriphCLKFreq+0xf2a>
  {
    /* Get the current FDCAN1 kernel source */
    srcclk = __HAL_RCC_GET_FDCAN1_SOURCE();
 800afd2:	4b33      	ldr	r3, [pc, #204]	@ (800b0a0 <HAL_RCCEx_GetPeriphCLKFreq+0xf9c>)
 800afd4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800afd8:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 800afdc:	633b      	str	r3, [r7, #48]	@ 0x30

    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCAN1CLKSOURCE_HSE))
 800afde:	4b30      	ldr	r3, [pc, #192]	@ (800b0a0 <HAL_RCCEx_GetPeriphCLKFreq+0xf9c>)
 800afe0:	681b      	ldr	r3, [r3, #0]
 800afe2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800afe6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800afea:	d105      	bne.n	800aff8 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
 800afec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800afee:	2b00      	cmp	r3, #0
 800aff0:	d102      	bne.n	800aff8 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
    {
      frequency = HSE_VALUE;
 800aff2:	4b2d      	ldr	r3, [pc, #180]	@ (800b0a8 <HAL_RCCEx_GetPeriphCLKFreq+0xfa4>)
 800aff4:	637b      	str	r3, [r7, #52]	@ 0x34
 800aff6:	e22d      	b.n	800b454 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL1) /* PLL1 ? */
 800aff8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800affa:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800affe:	d107      	bne.n	800b010 <HAL_RCCEx_GetPeriphCLKFreq+0xf0c>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b000:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b004:	4618      	mov	r0, r3
 800b006:	f7fe fbf1 	bl	80097ec <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_Q_Frequency;
 800b00a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b00c:	637b      	str	r3, [r7, #52]	@ 0x34
 800b00e:	e221      	b.n	800b454 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL2) /* PLL2 ? */
 800b010:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b012:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800b016:	d107      	bne.n	800b028 <HAL_RCCEx_GetPeriphCLKFreq+0xf24>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b018:	f107 0318 	add.w	r3, r7, #24
 800b01c:	4618      	mov	r0, r3
 800b01e:	f7fe fd69 	bl	8009af4 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_P_Frequency;
 800b022:	69bb      	ldr	r3, [r7, #24]
 800b024:	637b      	str	r3, [r7, #52]	@ 0x34
 800b026:	e215      	b.n	800b454 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for FDCAN1 */
    else
    {
      frequency = 0U;
 800b028:	2300      	movs	r3, #0
 800b02a:	637b      	str	r3, [r7, #52]	@ 0x34
 800b02c:	e212      	b.n	800b454 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI1)
 800b02e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b032:	f5a2 0100 	sub.w	r1, r2, #8388608	@ 0x800000
 800b036:	430b      	orrs	r3, r1
 800b038:	d15c      	bne.n	800b0f4 <HAL_RCCEx_GetPeriphCLKFreq+0xff0>
  {
    /* Get the current SPI1 kernel source */
    srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 800b03a:	4b19      	ldr	r3, [pc, #100]	@ (800b0a0 <HAL_RCCEx_GetPeriphCLKFreq+0xf9c>)
 800b03c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800b040:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 800b044:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 800b046:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b048:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800b04c:	d02e      	beq.n	800b0ac <HAL_RCCEx_GetPeriphCLKFreq+0xfa8>
 800b04e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b050:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800b054:	d84b      	bhi.n	800b0ee <HAL_RCCEx_GetPeriphCLKFreq+0xfea>
 800b056:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b058:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800b05c:	d013      	beq.n	800b086 <HAL_RCCEx_GetPeriphCLKFreq+0xf82>
 800b05e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b060:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800b064:	d843      	bhi.n	800b0ee <HAL_RCCEx_GetPeriphCLKFreq+0xfea>
 800b066:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b068:	2b00      	cmp	r3, #0
 800b06a:	d004      	beq.n	800b076 <HAL_RCCEx_GetPeriphCLKFreq+0xf72>
 800b06c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b06e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b072:	d004      	beq.n	800b07e <HAL_RCCEx_GetPeriphCLKFreq+0xf7a>
 800b074:	e03b      	b.n	800b0ee <HAL_RCCEx_GetPeriphCLKFreq+0xfea>
    {
      case RCC_SPI1CLKSOURCE_PCLK2:

        frequency = HAL_RCC_GetPCLK2Freq();
 800b076:	f7fd fd35 	bl	8008ae4 <HAL_RCC_GetPCLK2Freq>
 800b07a:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800b07c:	e1ea      	b.n	800b454 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI1CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800b07e:	f7fd fbed 	bl	800885c <HAL_RCC_GetSysClockFreq>
 800b082:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800b084:	e1e6      	b.n	800b454 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI1CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800b086:	4b06      	ldr	r3, [pc, #24]	@ (800b0a0 <HAL_RCCEx_GetPeriphCLKFreq+0xf9c>)
 800b088:	681b      	ldr	r3, [r3, #0]
 800b08a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800b08e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b092:	d102      	bne.n	800b09a <HAL_RCCEx_GetPeriphCLKFreq+0xf96>
        {
          frequency = HSI_VALUE;
 800b094:	4b04      	ldr	r3, [pc, #16]	@ (800b0a8 <HAL_RCCEx_GetPeriphCLKFreq+0xfa4>)
 800b096:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800b098:	e1dc      	b.n	800b454 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 800b09a:	2300      	movs	r3, #0
 800b09c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800b09e:	e1d9      	b.n	800b454 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
 800b0a0:	46020c00 	.word	0x46020c00
 800b0a4:	08011ad4 	.word	0x08011ad4
 800b0a8:	00f42400 	.word	0x00f42400

      case RCC_SPI1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800b0ac:	4baa      	ldr	r3, [pc, #680]	@ (800b358 <HAL_RCCEx_GetPeriphCLKFreq+0x1254>)
 800b0ae:	681b      	ldr	r3, [r3, #0]
 800b0b0:	f003 0320 	and.w	r3, r3, #32
 800b0b4:	2b20      	cmp	r3, #32
 800b0b6:	d117      	bne.n	800b0e8 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800b0b8:	4ba7      	ldr	r3, [pc, #668]	@ (800b358 <HAL_RCCEx_GetPeriphCLKFreq+0x1254>)
 800b0ba:	689b      	ldr	r3, [r3, #8]
 800b0bc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b0c0:	2b00      	cmp	r3, #0
 800b0c2:	d005      	beq.n	800b0d0 <HAL_RCCEx_GetPeriphCLKFreq+0xfcc>
 800b0c4:	4ba4      	ldr	r3, [pc, #656]	@ (800b358 <HAL_RCCEx_GetPeriphCLKFreq+0x1254>)
 800b0c6:	689b      	ldr	r3, [r3, #8]
 800b0c8:	0e1b      	lsrs	r3, r3, #24
 800b0ca:	f003 030f 	and.w	r3, r3, #15
 800b0ce:	e006      	b.n	800b0de <HAL_RCCEx_GetPeriphCLKFreq+0xfda>
 800b0d0:	4ba1      	ldr	r3, [pc, #644]	@ (800b358 <HAL_RCCEx_GetPeriphCLKFreq+0x1254>)
 800b0d2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800b0d6:	041b      	lsls	r3, r3, #16
 800b0d8:	0e1b      	lsrs	r3, r3, #24
 800b0da:	f003 030f 	and.w	r3, r3, #15
 800b0de:	4a9f      	ldr	r2, [pc, #636]	@ (800b35c <HAL_RCCEx_GetPeriphCLKFreq+0x1258>)
 800b0e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b0e4:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800b0e6:	e1b5      	b.n	800b454 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 800b0e8:	2300      	movs	r3, #0
 800b0ea:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800b0ec:	e1b2      	b.n	800b454 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default:

        frequency = 0U;
 800b0ee:	2300      	movs	r3, #0
 800b0f0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800b0f2:	e1af      	b.n	800b454 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI2)
 800b0f4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b0f8:	f102 417f 	add.w	r1, r2, #4278190080	@ 0xff000000
 800b0fc:	430b      	orrs	r3, r1
 800b0fe:	d156      	bne.n	800b1ae <HAL_RCCEx_GetPeriphCLKFreq+0x10aa>
  {
    /* Get the current SPI2 kernel source */
    srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 800b100:	4b95      	ldr	r3, [pc, #596]	@ (800b358 <HAL_RCCEx_GetPeriphCLKFreq+0x1254>)
 800b102:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800b106:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800b10a:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 800b10c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b10e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800b112:	d028      	beq.n	800b166 <HAL_RCCEx_GetPeriphCLKFreq+0x1062>
 800b114:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b116:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800b11a:	d845      	bhi.n	800b1a8 <HAL_RCCEx_GetPeriphCLKFreq+0x10a4>
 800b11c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b11e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b122:	d013      	beq.n	800b14c <HAL_RCCEx_GetPeriphCLKFreq+0x1048>
 800b124:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b126:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b12a:	d83d      	bhi.n	800b1a8 <HAL_RCCEx_GetPeriphCLKFreq+0x10a4>
 800b12c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b12e:	2b00      	cmp	r3, #0
 800b130:	d004      	beq.n	800b13c <HAL_RCCEx_GetPeriphCLKFreq+0x1038>
 800b132:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b134:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b138:	d004      	beq.n	800b144 <HAL_RCCEx_GetPeriphCLKFreq+0x1040>
 800b13a:	e035      	b.n	800b1a8 <HAL_RCCEx_GetPeriphCLKFreq+0x10a4>
    {
      case RCC_SPI2CLKSOURCE_PCLK1:

        frequency = HAL_RCC_GetPCLK1Freq();
 800b13c:	f7fd fcbe 	bl	8008abc <HAL_RCC_GetPCLK1Freq>
 800b140:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800b142:	e187      	b.n	800b454 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI2CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800b144:	f7fd fb8a 	bl	800885c <HAL_RCC_GetSysClockFreq>
 800b148:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800b14a:	e183      	b.n	800b454 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI2CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800b14c:	4b82      	ldr	r3, [pc, #520]	@ (800b358 <HAL_RCCEx_GetPeriphCLKFreq+0x1254>)
 800b14e:	681b      	ldr	r3, [r3, #0]
 800b150:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800b154:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b158:	d102      	bne.n	800b160 <HAL_RCCEx_GetPeriphCLKFreq+0x105c>
        {
          frequency = HSI_VALUE;
 800b15a:	4b81      	ldr	r3, [pc, #516]	@ (800b360 <HAL_RCCEx_GetPeriphCLKFreq+0x125c>)
 800b15c:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800b15e:	e179      	b.n	800b454 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 800b160:	2300      	movs	r3, #0
 800b162:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800b164:	e176      	b.n	800b454 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI2CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800b166:	4b7c      	ldr	r3, [pc, #496]	@ (800b358 <HAL_RCCEx_GetPeriphCLKFreq+0x1254>)
 800b168:	681b      	ldr	r3, [r3, #0]
 800b16a:	f003 0320 	and.w	r3, r3, #32
 800b16e:	2b20      	cmp	r3, #32
 800b170:	d117      	bne.n	800b1a2 <HAL_RCCEx_GetPeriphCLKFreq+0x109e>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800b172:	4b79      	ldr	r3, [pc, #484]	@ (800b358 <HAL_RCCEx_GetPeriphCLKFreq+0x1254>)
 800b174:	689b      	ldr	r3, [r3, #8]
 800b176:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b17a:	2b00      	cmp	r3, #0
 800b17c:	d005      	beq.n	800b18a <HAL_RCCEx_GetPeriphCLKFreq+0x1086>
 800b17e:	4b76      	ldr	r3, [pc, #472]	@ (800b358 <HAL_RCCEx_GetPeriphCLKFreq+0x1254>)
 800b180:	689b      	ldr	r3, [r3, #8]
 800b182:	0e1b      	lsrs	r3, r3, #24
 800b184:	f003 030f 	and.w	r3, r3, #15
 800b188:	e006      	b.n	800b198 <HAL_RCCEx_GetPeriphCLKFreq+0x1094>
 800b18a:	4b73      	ldr	r3, [pc, #460]	@ (800b358 <HAL_RCCEx_GetPeriphCLKFreq+0x1254>)
 800b18c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800b190:	041b      	lsls	r3, r3, #16
 800b192:	0e1b      	lsrs	r3, r3, #24
 800b194:	f003 030f 	and.w	r3, r3, #15
 800b198:	4a70      	ldr	r2, [pc, #448]	@ (800b35c <HAL_RCCEx_GetPeriphCLKFreq+0x1258>)
 800b19a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b19e:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800b1a0:	e158      	b.n	800b454 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 800b1a2:	2300      	movs	r3, #0
 800b1a4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800b1a6:	e155      	b.n	800b454 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default:

        frequency = 0U;
 800b1a8:	2300      	movs	r3, #0
 800b1aa:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800b1ac:	e152      	b.n	800b454 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI3)
 800b1ae:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b1b2:	f102 417e 	add.w	r1, r2, #4261412864	@ 0xfe000000
 800b1b6:	430b      	orrs	r3, r1
 800b1b8:	d177      	bne.n	800b2aa <HAL_RCCEx_GetPeriphCLKFreq+0x11a6>
  {
    /* Get the current SPI3 kernel source */
    srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 800b1ba:	4b67      	ldr	r3, [pc, #412]	@ (800b358 <HAL_RCCEx_GetPeriphCLKFreq+0x1254>)
 800b1bc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800b1c0:	f003 0318 	and.w	r3, r3, #24
 800b1c4:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 800b1c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b1c8:	2b18      	cmp	r3, #24
 800b1ca:	d86b      	bhi.n	800b2a4 <HAL_RCCEx_GetPeriphCLKFreq+0x11a0>
 800b1cc:	a201      	add	r2, pc, #4	@ (adr r2, 800b1d4 <HAL_RCCEx_GetPeriphCLKFreq+0x10d0>)
 800b1ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b1d2:	bf00      	nop
 800b1d4:	0800b239 	.word	0x0800b239
 800b1d8:	0800b2a5 	.word	0x0800b2a5
 800b1dc:	0800b2a5 	.word	0x0800b2a5
 800b1e0:	0800b2a5 	.word	0x0800b2a5
 800b1e4:	0800b2a5 	.word	0x0800b2a5
 800b1e8:	0800b2a5 	.word	0x0800b2a5
 800b1ec:	0800b2a5 	.word	0x0800b2a5
 800b1f0:	0800b2a5 	.word	0x0800b2a5
 800b1f4:	0800b241 	.word	0x0800b241
 800b1f8:	0800b2a5 	.word	0x0800b2a5
 800b1fc:	0800b2a5 	.word	0x0800b2a5
 800b200:	0800b2a5 	.word	0x0800b2a5
 800b204:	0800b2a5 	.word	0x0800b2a5
 800b208:	0800b2a5 	.word	0x0800b2a5
 800b20c:	0800b2a5 	.word	0x0800b2a5
 800b210:	0800b2a5 	.word	0x0800b2a5
 800b214:	0800b249 	.word	0x0800b249
 800b218:	0800b2a5 	.word	0x0800b2a5
 800b21c:	0800b2a5 	.word	0x0800b2a5
 800b220:	0800b2a5 	.word	0x0800b2a5
 800b224:	0800b2a5 	.word	0x0800b2a5
 800b228:	0800b2a5 	.word	0x0800b2a5
 800b22c:	0800b2a5 	.word	0x0800b2a5
 800b230:	0800b2a5 	.word	0x0800b2a5
 800b234:	0800b263 	.word	0x0800b263
    {
      case RCC_SPI3CLKSOURCE_PCLK3:

        frequency = HAL_RCC_GetPCLK3Freq();
 800b238:	f7fd fc68 	bl	8008b0c <HAL_RCC_GetPCLK3Freq>
 800b23c:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800b23e:	e109      	b.n	800b454 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI3CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800b240:	f7fd fb0c 	bl	800885c <HAL_RCC_GetSysClockFreq>
 800b244:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800b246:	e105      	b.n	800b454 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI3CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800b248:	4b43      	ldr	r3, [pc, #268]	@ (800b358 <HAL_RCCEx_GetPeriphCLKFreq+0x1254>)
 800b24a:	681b      	ldr	r3, [r3, #0]
 800b24c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800b250:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b254:	d102      	bne.n	800b25c <HAL_RCCEx_GetPeriphCLKFreq+0x1158>
        {
          frequency = HSI_VALUE;
 800b256:	4b42      	ldr	r3, [pc, #264]	@ (800b360 <HAL_RCCEx_GetPeriphCLKFreq+0x125c>)
 800b258:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800b25a:	e0fb      	b.n	800b454 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 800b25c:	2300      	movs	r3, #0
 800b25e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800b260:	e0f8      	b.n	800b454 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_SPI3CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800b262:	4b3d      	ldr	r3, [pc, #244]	@ (800b358 <HAL_RCCEx_GetPeriphCLKFreq+0x1254>)
 800b264:	681b      	ldr	r3, [r3, #0]
 800b266:	f003 0320 	and.w	r3, r3, #32
 800b26a:	2b20      	cmp	r3, #32
 800b26c:	d117      	bne.n	800b29e <HAL_RCCEx_GetPeriphCLKFreq+0x119a>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800b26e:	4b3a      	ldr	r3, [pc, #232]	@ (800b358 <HAL_RCCEx_GetPeriphCLKFreq+0x1254>)
 800b270:	689b      	ldr	r3, [r3, #8]
 800b272:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b276:	2b00      	cmp	r3, #0
 800b278:	d005      	beq.n	800b286 <HAL_RCCEx_GetPeriphCLKFreq+0x1182>
 800b27a:	4b37      	ldr	r3, [pc, #220]	@ (800b358 <HAL_RCCEx_GetPeriphCLKFreq+0x1254>)
 800b27c:	689b      	ldr	r3, [r3, #8]
 800b27e:	0e1b      	lsrs	r3, r3, #24
 800b280:	f003 030f 	and.w	r3, r3, #15
 800b284:	e006      	b.n	800b294 <HAL_RCCEx_GetPeriphCLKFreq+0x1190>
 800b286:	4b34      	ldr	r3, [pc, #208]	@ (800b358 <HAL_RCCEx_GetPeriphCLKFreq+0x1254>)
 800b288:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800b28c:	041b      	lsls	r3, r3, #16
 800b28e:	0e1b      	lsrs	r3, r3, #24
 800b290:	f003 030f 	and.w	r3, r3, #15
 800b294:	4a31      	ldr	r2, [pc, #196]	@ (800b35c <HAL_RCCEx_GetPeriphCLKFreq+0x1258>)
 800b296:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b29a:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800b29c:	e0da      	b.n	800b454 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
          frequency = 0U;
 800b29e:	2300      	movs	r3, #0
 800b2a0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800b2a2:	e0d7      	b.n	800b454 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default:

        frequency = 0U;
 800b2a4:	2300      	movs	r3, #0
 800b2a6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800b2a8:	e0d4      	b.n	800b454 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_OSPI)
 800b2aa:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b2ae:	f102 417c 	add.w	r1, r2, #4227858432	@ 0xfc000000
 800b2b2:	430b      	orrs	r3, r1
 800b2b4:	d15c      	bne.n	800b370 <HAL_RCCEx_GetPeriphCLKFreq+0x126c>
  {
    /* Get the current OSPI kernel source */
    srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 800b2b6:	4b28      	ldr	r3, [pc, #160]	@ (800b358 <HAL_RCCEx_GetPeriphCLKFreq+0x1254>)
 800b2b8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800b2bc:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 800b2c0:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800b2c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b2c4:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800b2c8:	d013      	beq.n	800b2f2 <HAL_RCCEx_GetPeriphCLKFreq+0x11ee>
 800b2ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b2cc:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800b2d0:	d84b      	bhi.n	800b36a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
 800b2d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b2d4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800b2d8:	d013      	beq.n	800b302 <HAL_RCCEx_GetPeriphCLKFreq+0x11fe>
 800b2da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b2dc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800b2e0:	d843      	bhi.n	800b36a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
 800b2e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b2e4:	2b00      	cmp	r3, #0
 800b2e6:	d014      	beq.n	800b312 <HAL_RCCEx_GetPeriphCLKFreq+0x120e>
 800b2e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b2ea:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b2ee:	d014      	beq.n	800b31a <HAL_RCCEx_GetPeriphCLKFreq+0x1216>
 800b2f0:	e03b      	b.n	800b36a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    {
      case RCC_OSPICLKSOURCE_PLL2:

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b2f2:	f107 0318 	add.w	r3, r7, #24
 800b2f6:	4618      	mov	r0, r3
 800b2f8:	f7fe fbfc 	bl	8009af4 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 800b2fc:	69fb      	ldr	r3, [r7, #28]
 800b2fe:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800b300:	e0a8      	b.n	800b454 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_OSPICLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b302:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b306:	4618      	mov	r0, r3
 800b308:	f7fe fa70 	bl	80097ec <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 800b30c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b30e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800b310:	e0a0      	b.n	800b454 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_OSPICLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800b312:	f7fd faa3 	bl	800885c <HAL_RCC_GetSysClockFreq>
 800b316:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800b318:	e09c      	b.n	800b454 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      case RCC_OSPICLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800b31a:	4b0f      	ldr	r3, [pc, #60]	@ (800b358 <HAL_RCCEx_GetPeriphCLKFreq+0x1254>)
 800b31c:	681b      	ldr	r3, [r3, #0]
 800b31e:	f003 0320 	and.w	r3, r3, #32
 800b322:	2b20      	cmp	r3, #32
 800b324:	d11e      	bne.n	800b364 <HAL_RCCEx_GetPeriphCLKFreq+0x1260>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800b326:	4b0c      	ldr	r3, [pc, #48]	@ (800b358 <HAL_RCCEx_GetPeriphCLKFreq+0x1254>)
 800b328:	689b      	ldr	r3, [r3, #8]
 800b32a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b32e:	2b00      	cmp	r3, #0
 800b330:	d005      	beq.n	800b33e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
 800b332:	4b09      	ldr	r3, [pc, #36]	@ (800b358 <HAL_RCCEx_GetPeriphCLKFreq+0x1254>)
 800b334:	689b      	ldr	r3, [r3, #8]
 800b336:	0e1b      	lsrs	r3, r3, #24
 800b338:	f003 030f 	and.w	r3, r3, #15
 800b33c:	e006      	b.n	800b34c <HAL_RCCEx_GetPeriphCLKFreq+0x1248>
 800b33e:	4b06      	ldr	r3, [pc, #24]	@ (800b358 <HAL_RCCEx_GetPeriphCLKFreq+0x1254>)
 800b340:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800b344:	041b      	lsls	r3, r3, #16
 800b346:	0e1b      	lsrs	r3, r3, #24
 800b348:	f003 030f 	and.w	r3, r3, #15
 800b34c:	4a03      	ldr	r2, [pc, #12]	@ (800b35c <HAL_RCCEx_GetPeriphCLKFreq+0x1258>)
 800b34e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b352:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800b354:	e07e      	b.n	800b454 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
 800b356:	bf00      	nop
 800b358:	46020c00 	.word	0x46020c00
 800b35c:	08011ad4 	.word	0x08011ad4
 800b360:	00f42400 	.word	0x00f42400
          frequency = 0U;
 800b364:	2300      	movs	r3, #0
 800b366:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800b368:	e074      	b.n	800b454 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>

      default:

        frequency = 0U;
 800b36a:	2300      	movs	r3, #0
 800b36c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800b36e:	e071      	b.n	800b454 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
        frequency = 0U;
        break;
    }
  }
#endif /* defined(HSPI1) */
  else if (PeriphClk == RCC_PERIPHCLK_DAC1)
 800b370:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b374:	f102 4170 	add.w	r1, r2, #4026531840	@ 0xf0000000
 800b378:	430b      	orrs	r3, r1
 800b37a:	d131      	bne.n	800b3e0 <HAL_RCCEx_GetPeriphCLKFreq+0x12dc>
  {
    /* Get the current DAC1 kernel source */
    srcclk = __HAL_RCC_GET_DAC1_SOURCE();
 800b37c:	4b38      	ldr	r3, [pc, #224]	@ (800b460 <HAL_RCCEx_GetPeriphCLKFreq+0x135c>)
 800b37e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800b382:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800b386:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if DAC1 clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSE))
 800b388:	4b35      	ldr	r3, [pc, #212]	@ (800b460 <HAL_RCCEx_GetPeriphCLKFreq+0x135c>)
 800b38a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800b38e:	f003 0302 	and.w	r3, r3, #2
 800b392:	2b02      	cmp	r3, #2
 800b394:	d106      	bne.n	800b3a4 <HAL_RCCEx_GetPeriphCLKFreq+0x12a0>
 800b396:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b398:	2b00      	cmp	r3, #0
 800b39a:	d103      	bne.n	800b3a4 <HAL_RCCEx_GetPeriphCLKFreq+0x12a0>
    {
      frequency = LSE_VALUE;
 800b39c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b3a0:	637b      	str	r3, [r7, #52]	@ 0x34
 800b3a2:	e057      	b.n	800b454 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Check if LSI is ready and if DAC1 clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSI))
 800b3a4:	4b2e      	ldr	r3, [pc, #184]	@ (800b460 <HAL_RCCEx_GetPeriphCLKFreq+0x135c>)
 800b3a6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800b3aa:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b3ae:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b3b2:	d112      	bne.n	800b3da <HAL_RCCEx_GetPeriphCLKFreq+0x12d6>
 800b3b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b3b6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b3ba:	d10e      	bne.n	800b3da <HAL_RCCEx_GetPeriphCLKFreq+0x12d6>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800b3bc:	4b28      	ldr	r3, [pc, #160]	@ (800b460 <HAL_RCCEx_GetPeriphCLKFreq+0x135c>)
 800b3be:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800b3c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800b3c6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b3ca:	d102      	bne.n	800b3d2 <HAL_RCCEx_GetPeriphCLKFreq+0x12ce>
      {
        frequency = LSI_VALUE / 128U;
 800b3cc:	23fa      	movs	r3, #250	@ 0xfa
 800b3ce:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800b3d0:	e040      	b.n	800b454 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
      else
      {
        frequency = LSI_VALUE;
 800b3d2:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800b3d6:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800b3d8:	e03c      	b.n	800b454 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
      }
    }
    /* Clock not enabled for DAC1*/
    else
    {
      frequency = 0U;
 800b3da:	2300      	movs	r3, #0
 800b3dc:	637b      	str	r3, [r7, #52]	@ 0x34
 800b3de:	e039      	b.n	800b454 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }

  }
  else if (PeriphClk == RCC_PERIPHCLK_RNG)
 800b3e0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b3e4:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 800b3e8:	430b      	orrs	r3, r1
 800b3ea:	d131      	bne.n	800b450 <HAL_RCCEx_GetPeriphCLKFreq+0x134c>
  {
    /* Get the current RNG kernel source */
    srcclk = __HAL_RCC_GET_RNG_SOURCE();
 800b3ec:	4b1c      	ldr	r3, [pc, #112]	@ (800b460 <HAL_RCCEx_GetPeriphCLKFreq+0x135c>)
 800b3ee:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800b3f2:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800b3f6:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if HSI48 is ready and if RNG clock selection is HSI48 */
    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 800b3f8:	4b19      	ldr	r3, [pc, #100]	@ (800b460 <HAL_RCCEx_GetPeriphCLKFreq+0x135c>)
 800b3fa:	681b      	ldr	r3, [r3, #0]
 800b3fc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800b400:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b404:	d105      	bne.n	800b412 <HAL_RCCEx_GetPeriphCLKFreq+0x130e>
 800b406:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b408:	2b00      	cmp	r3, #0
 800b40a:	d102      	bne.n	800b412 <HAL_RCCEx_GetPeriphCLKFreq+0x130e>
    {
      frequency = HSI48_VALUE;
 800b40c:	4b15      	ldr	r3, [pc, #84]	@ (800b464 <HAL_RCCEx_GetPeriphCLKFreq+0x1360>)
 800b40e:	637b      	str	r3, [r7, #52]	@ 0x34
 800b410:	e020      	b.n	800b454 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }

    /* Check if HSI48 is ready and if RNG clock selection is HSI48_DIV2 */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48_DIV2))
 800b412:	4b13      	ldr	r3, [pc, #76]	@ (800b460 <HAL_RCCEx_GetPeriphCLKFreq+0x135c>)
 800b414:	681b      	ldr	r3, [r3, #0]
 800b416:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800b41a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b41e:	d106      	bne.n	800b42e <HAL_RCCEx_GetPeriphCLKFreq+0x132a>
 800b420:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b422:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b426:	d102      	bne.n	800b42e <HAL_RCCEx_GetPeriphCLKFreq+0x132a>
    {
      frequency = HSI48_VALUE >> 1U ;
 800b428:	4b0f      	ldr	r3, [pc, #60]	@ (800b468 <HAL_RCCEx_GetPeriphCLKFreq+0x1364>)
 800b42a:	637b      	str	r3, [r7, #52]	@ 0x34
 800b42c:	e012      	b.n	800b454 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }

    /* Check if HSI is ready and if RNG clock selection is HSI */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI))
 800b42e:	4b0c      	ldr	r3, [pc, #48]	@ (800b460 <HAL_RCCEx_GetPeriphCLKFreq+0x135c>)
 800b430:	681b      	ldr	r3, [r3, #0]
 800b432:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800b436:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b43a:	d106      	bne.n	800b44a <HAL_RCCEx_GetPeriphCLKFreq+0x1346>
 800b43c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b43e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b442:	d102      	bne.n	800b44a <HAL_RCCEx_GetPeriphCLKFreq+0x1346>
    {
      frequency = HSI_VALUE;
 800b444:	4b09      	ldr	r3, [pc, #36]	@ (800b46c <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 800b446:	637b      	str	r3, [r7, #52]	@ 0x34
 800b448:	e004      	b.n	800b454 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
    }
    /* Clock not enabled for RNG */
    else
    {
      frequency = 0U;
 800b44a:	2300      	movs	r3, #0
 800b44c:	637b      	str	r3, [r7, #52]	@ 0x34
 800b44e:	e001      	b.n	800b454 <HAL_RCCEx_GetPeriphCLKFreq+0x1350>
  }
#endif /* defined(USB_OTG_HS) */

  else
  {
    frequency = 0;
 800b450:	2300      	movs	r3, #0
 800b452:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  return (frequency);
 800b454:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800b456:	4618      	mov	r0, r3
 800b458:	3738      	adds	r7, #56	@ 0x38
 800b45a:	46bd      	mov	sp, r7
 800b45c:	bd80      	pop	{r7, pc}
 800b45e:	bf00      	nop
 800b460:	46020c00 	.word	0x46020c00
 800b464:	02dc6c00 	.word	0x02dc6c00
 800b468:	016e3600 	.word	0x016e3600
 800b46c:	00f42400 	.word	0x00f42400

0800b470 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 800b470:	b580      	push	{r7, lr}
 800b472:	b084      	sub	sp, #16
 800b474:	af00      	add	r7, sp, #0
 800b476:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll2->PLL2P));
  assert_param(IS_RCC_PLLQ_VALUE(pll2->PLL2Q));
  assert_param(IS_RCC_PLLR_VALUE(pll2->PLL2R));

  /* Disable  PLL2 */
  __HAL_RCC_PLL2_DISABLE();
 800b478:	4b47      	ldr	r3, [pc, #284]	@ (800b598 <RCCEx_PLL2_Config+0x128>)
 800b47a:	681b      	ldr	r3, [r3, #0]
 800b47c:	4a46      	ldr	r2, [pc, #280]	@ (800b598 <RCCEx_PLL2_Config+0x128>)
 800b47e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800b482:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800b484:	f7f9 ff7e 	bl	8005384 <HAL_GetTick>
 800b488:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800b48a:	e008      	b.n	800b49e <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800b48c:	f7f9 ff7a 	bl	8005384 <HAL_GetTick>
 800b490:	4602      	mov	r2, r0
 800b492:	68fb      	ldr	r3, [r7, #12]
 800b494:	1ad3      	subs	r3, r2, r3
 800b496:	2b02      	cmp	r3, #2
 800b498:	d901      	bls.n	800b49e <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 800b49a:	2303      	movs	r3, #3
 800b49c:	e077      	b.n	800b58e <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800b49e:	4b3e      	ldr	r3, [pc, #248]	@ (800b598 <RCCEx_PLL2_Config+0x128>)
 800b4a0:	681b      	ldr	r3, [r3, #0]
 800b4a2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b4a6:	2b00      	cmp	r3, #0
 800b4a8:	d1f0      	bne.n	800b48c <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 800b4aa:	4b3b      	ldr	r3, [pc, #236]	@ (800b598 <RCCEx_PLL2_Config+0x128>)
 800b4ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b4ae:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800b4b2:	f023 0303 	bic.w	r3, r3, #3
 800b4b6:	687a      	ldr	r2, [r7, #4]
 800b4b8:	6811      	ldr	r1, [r2, #0]
 800b4ba:	687a      	ldr	r2, [r7, #4]
 800b4bc:	6852      	ldr	r2, [r2, #4]
 800b4be:	3a01      	subs	r2, #1
 800b4c0:	0212      	lsls	r2, r2, #8
 800b4c2:	430a      	orrs	r2, r1
 800b4c4:	4934      	ldr	r1, [pc, #208]	@ (800b598 <RCCEx_PLL2_Config+0x128>)
 800b4c6:	4313      	orrs	r3, r2
 800b4c8:	62cb      	str	r3, [r1, #44]	@ 0x2c
 800b4ca:	4b33      	ldr	r3, [pc, #204]	@ (800b598 <RCCEx_PLL2_Config+0x128>)
 800b4cc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800b4ce:	4b33      	ldr	r3, [pc, #204]	@ (800b59c <RCCEx_PLL2_Config+0x12c>)
 800b4d0:	4013      	ands	r3, r2
 800b4d2:	687a      	ldr	r2, [r7, #4]
 800b4d4:	6892      	ldr	r2, [r2, #8]
 800b4d6:	3a01      	subs	r2, #1
 800b4d8:	f3c2 0108 	ubfx	r1, r2, #0, #9
 800b4dc:	687a      	ldr	r2, [r7, #4]
 800b4de:	68d2      	ldr	r2, [r2, #12]
 800b4e0:	3a01      	subs	r2, #1
 800b4e2:	0252      	lsls	r2, r2, #9
 800b4e4:	b292      	uxth	r2, r2
 800b4e6:	4311      	orrs	r1, r2
 800b4e8:	687a      	ldr	r2, [r7, #4]
 800b4ea:	6912      	ldr	r2, [r2, #16]
 800b4ec:	3a01      	subs	r2, #1
 800b4ee:	0412      	lsls	r2, r2, #16
 800b4f0:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 800b4f4:	4311      	orrs	r1, r2
 800b4f6:	687a      	ldr	r2, [r7, #4]
 800b4f8:	6952      	ldr	r2, [r2, #20]
 800b4fa:	3a01      	subs	r2, #1
 800b4fc:	0612      	lsls	r2, r2, #24
 800b4fe:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 800b502:	430a      	orrs	r2, r1
 800b504:	4924      	ldr	r1, [pc, #144]	@ (800b598 <RCCEx_PLL2_Config+0x128>)
 800b506:	4313      	orrs	r3, r2
 800b508:	63cb      	str	r3, [r1, #60]	@ 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 800b50a:	4b23      	ldr	r3, [pc, #140]	@ (800b598 <RCCEx_PLL2_Config+0x128>)
 800b50c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b50e:	f023 020c 	bic.w	r2, r3, #12
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	699b      	ldr	r3, [r3, #24]
 800b516:	4920      	ldr	r1, [pc, #128]	@ (800b598 <RCCEx_PLL2_Config+0x128>)
 800b518:	4313      	orrs	r3, r2
 800b51a:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2CLKOUT_ENABLE(pll2->PLL2ClockOut);
 800b51c:	4b1e      	ldr	r3, [pc, #120]	@ (800b598 <RCCEx_PLL2_Config+0x128>)
 800b51e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	6a1b      	ldr	r3, [r3, #32]
 800b524:	491c      	ldr	r1, [pc, #112]	@ (800b598 <RCCEx_PLL2_Config+0x128>)
 800b526:	4313      	orrs	r3, r2
 800b528:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Disable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_DISABLE();
 800b52a:	4b1b      	ldr	r3, [pc, #108]	@ (800b598 <RCCEx_PLL2_Config+0x128>)
 800b52c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b52e:	4a1a      	ldr	r2, [pc, #104]	@ (800b598 <RCCEx_PLL2_Config+0x128>)
 800b530:	f023 0310 	bic.w	r3, r3, #16
 800b534:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800b536:	4b18      	ldr	r3, [pc, #96]	@ (800b598 <RCCEx_PLL2_Config+0x128>)
 800b538:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b53a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800b53e:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800b542:	687a      	ldr	r2, [r7, #4]
 800b544:	69d2      	ldr	r2, [r2, #28]
 800b546:	00d2      	lsls	r2, r2, #3
 800b548:	4913      	ldr	r1, [pc, #76]	@ (800b598 <RCCEx_PLL2_Config+0x128>)
 800b54a:	4313      	orrs	r3, r2
 800b54c:	640b      	str	r3, [r1, #64]	@ 0x40

  /* Enable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_ENABLE();
 800b54e:	4b12      	ldr	r3, [pc, #72]	@ (800b598 <RCCEx_PLL2_Config+0x128>)
 800b550:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b552:	4a11      	ldr	r2, [pc, #68]	@ (800b598 <RCCEx_PLL2_Config+0x128>)
 800b554:	f043 0310 	orr.w	r3, r3, #16
 800b558:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Enable  PLL2 */
  __HAL_RCC_PLL2_ENABLE();
 800b55a:	4b0f      	ldr	r3, [pc, #60]	@ (800b598 <RCCEx_PLL2_Config+0x128>)
 800b55c:	681b      	ldr	r3, [r3, #0]
 800b55e:	4a0e      	ldr	r2, [pc, #56]	@ (800b598 <RCCEx_PLL2_Config+0x128>)
 800b560:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800b564:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800b566:	f7f9 ff0d 	bl	8005384 <HAL_GetTick>
 800b56a:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800b56c:	e008      	b.n	800b580 <RCCEx_PLL2_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800b56e:	f7f9 ff09 	bl	8005384 <HAL_GetTick>
 800b572:	4602      	mov	r2, r0
 800b574:	68fb      	ldr	r3, [r7, #12]
 800b576:	1ad3      	subs	r3, r2, r3
 800b578:	2b02      	cmp	r3, #2
 800b57a:	d901      	bls.n	800b580 <RCCEx_PLL2_Config+0x110>
    {
      return HAL_TIMEOUT;
 800b57c:	2303      	movs	r3, #3
 800b57e:	e006      	b.n	800b58e <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800b580:	4b05      	ldr	r3, [pc, #20]	@ (800b598 <RCCEx_PLL2_Config+0x128>)
 800b582:	681b      	ldr	r3, [r3, #0]
 800b584:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b588:	2b00      	cmp	r3, #0
 800b58a:	d0f0      	beq.n	800b56e <RCCEx_PLL2_Config+0xfe>
    }
  }
  return HAL_OK;
 800b58c:	2300      	movs	r3, #0

}
 800b58e:	4618      	mov	r0, r3
 800b590:	3710      	adds	r7, #16
 800b592:	46bd      	mov	sp, r7
 800b594:	bd80      	pop	{r7, pc}
 800b596:	bf00      	nop
 800b598:	46020c00 	.word	0x46020c00
 800b59c:	80800000 	.word	0x80800000

0800b5a0 <RCCEx_PLL3_Config>:
  *         contains the configuration parameters as well as VCI clock ranges.
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 800b5a0:	b580      	push	{r7, lr}
 800b5a2:	b084      	sub	sp, #16
 800b5a4:	af00      	add	r7, sp, #0
 800b5a6:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll3->PLL3P));
  assert_param(IS_RCC_PLLQ_VALUE(pll3->PLL3Q));
  assert_param(IS_RCC_PLLR_VALUE(pll3->PLL3R));

  /* Disable  PLL3 */
  __HAL_RCC_PLL3_DISABLE();
 800b5a8:	4b47      	ldr	r3, [pc, #284]	@ (800b6c8 <RCCEx_PLL3_Config+0x128>)
 800b5aa:	681b      	ldr	r3, [r3, #0]
 800b5ac:	4a46      	ldr	r2, [pc, #280]	@ (800b6c8 <RCCEx_PLL3_Config+0x128>)
 800b5ae:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b5b2:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800b5b4:	f7f9 fee6 	bl	8005384 <HAL_GetTick>
 800b5b8:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800b5ba:	e008      	b.n	800b5ce <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800b5bc:	f7f9 fee2 	bl	8005384 <HAL_GetTick>
 800b5c0:	4602      	mov	r2, r0
 800b5c2:	68fb      	ldr	r3, [r7, #12]
 800b5c4:	1ad3      	subs	r3, r2, r3
 800b5c6:	2b02      	cmp	r3, #2
 800b5c8:	d901      	bls.n	800b5ce <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 800b5ca:	2303      	movs	r3, #3
 800b5cc:	e077      	b.n	800b6be <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800b5ce:	4b3e      	ldr	r3, [pc, #248]	@ (800b6c8 <RCCEx_PLL3_Config+0x128>)
 800b5d0:	681b      	ldr	r3, [r3, #0]
 800b5d2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b5d6:	2b00      	cmp	r3, #0
 800b5d8:	d1f0      	bne.n	800b5bc <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 800b5da:	4b3b      	ldr	r3, [pc, #236]	@ (800b6c8 <RCCEx_PLL3_Config+0x128>)
 800b5dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b5de:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800b5e2:	f023 0303 	bic.w	r3, r3, #3
 800b5e6:	687a      	ldr	r2, [r7, #4]
 800b5e8:	6811      	ldr	r1, [r2, #0]
 800b5ea:	687a      	ldr	r2, [r7, #4]
 800b5ec:	6852      	ldr	r2, [r2, #4]
 800b5ee:	3a01      	subs	r2, #1
 800b5f0:	0212      	lsls	r2, r2, #8
 800b5f2:	430a      	orrs	r2, r1
 800b5f4:	4934      	ldr	r1, [pc, #208]	@ (800b6c8 <RCCEx_PLL3_Config+0x128>)
 800b5f6:	4313      	orrs	r3, r2
 800b5f8:	630b      	str	r3, [r1, #48]	@ 0x30
 800b5fa:	4b33      	ldr	r3, [pc, #204]	@ (800b6c8 <RCCEx_PLL3_Config+0x128>)
 800b5fc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b5fe:	4b33      	ldr	r3, [pc, #204]	@ (800b6cc <RCCEx_PLL3_Config+0x12c>)
 800b600:	4013      	ands	r3, r2
 800b602:	687a      	ldr	r2, [r7, #4]
 800b604:	6892      	ldr	r2, [r2, #8]
 800b606:	3a01      	subs	r2, #1
 800b608:	f3c2 0108 	ubfx	r1, r2, #0, #9
 800b60c:	687a      	ldr	r2, [r7, #4]
 800b60e:	68d2      	ldr	r2, [r2, #12]
 800b610:	3a01      	subs	r2, #1
 800b612:	0252      	lsls	r2, r2, #9
 800b614:	b292      	uxth	r2, r2
 800b616:	4311      	orrs	r1, r2
 800b618:	687a      	ldr	r2, [r7, #4]
 800b61a:	6912      	ldr	r2, [r2, #16]
 800b61c:	3a01      	subs	r2, #1
 800b61e:	0412      	lsls	r2, r2, #16
 800b620:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 800b624:	4311      	orrs	r1, r2
 800b626:	687a      	ldr	r2, [r7, #4]
 800b628:	6952      	ldr	r2, [r2, #20]
 800b62a:	3a01      	subs	r2, #1
 800b62c:	0612      	lsls	r2, r2, #24
 800b62e:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 800b632:	430a      	orrs	r2, r1
 800b634:	4924      	ldr	r1, [pc, #144]	@ (800b6c8 <RCCEx_PLL3_Config+0x128>)
 800b636:	4313      	orrs	r3, r2
 800b638:	644b      	str	r3, [r1, #68]	@ 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE);
 800b63a:	4b23      	ldr	r3, [pc, #140]	@ (800b6c8 <RCCEx_PLL3_Config+0x128>)
 800b63c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b63e:	f023 020c 	bic.w	r2, r3, #12
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	699b      	ldr	r3, [r3, #24]
 800b646:	4920      	ldr	r1, [pc, #128]	@ (800b6c8 <RCCEx_PLL3_Config+0x128>)
 800b648:	4313      	orrs	r3, r2
 800b64a:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3CLKOUT_ENABLE(pll3->PLL3ClockOut);
 800b64c:	4b1e      	ldr	r3, [pc, #120]	@ (800b6c8 <RCCEx_PLL3_Config+0x128>)
 800b64e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	6a1b      	ldr	r3, [r3, #32]
 800b654:	491c      	ldr	r1, [pc, #112]	@ (800b6c8 <RCCEx_PLL3_Config+0x128>)
 800b656:	4313      	orrs	r3, r2
 800b658:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Disable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_DISABLE();
 800b65a:	4b1b      	ldr	r3, [pc, #108]	@ (800b6c8 <RCCEx_PLL3_Config+0x128>)
 800b65c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b65e:	4a1a      	ldr	r2, [pc, #104]	@ (800b6c8 <RCCEx_PLL3_Config+0x128>)
 800b660:	f023 0310 	bic.w	r3, r3, #16
 800b664:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800b666:	4b18      	ldr	r3, [pc, #96]	@ (800b6c8 <RCCEx_PLL3_Config+0x128>)
 800b668:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b66a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800b66e:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800b672:	687a      	ldr	r2, [r7, #4]
 800b674:	69d2      	ldr	r2, [r2, #28]
 800b676:	00d2      	lsls	r2, r2, #3
 800b678:	4913      	ldr	r1, [pc, #76]	@ (800b6c8 <RCCEx_PLL3_Config+0x128>)
 800b67a:	4313      	orrs	r3, r2
 800b67c:	648b      	str	r3, [r1, #72]	@ 0x48

  /* Enable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_ENABLE();
 800b67e:	4b12      	ldr	r3, [pc, #72]	@ (800b6c8 <RCCEx_PLL3_Config+0x128>)
 800b680:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b682:	4a11      	ldr	r2, [pc, #68]	@ (800b6c8 <RCCEx_PLL3_Config+0x128>)
 800b684:	f043 0310 	orr.w	r3, r3, #16
 800b688:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable  PLL3 */
  __HAL_RCC_PLL3_ENABLE();
 800b68a:	4b0f      	ldr	r3, [pc, #60]	@ (800b6c8 <RCCEx_PLL3_Config+0x128>)
 800b68c:	681b      	ldr	r3, [r3, #0]
 800b68e:	4a0e      	ldr	r2, [pc, #56]	@ (800b6c8 <RCCEx_PLL3_Config+0x128>)
 800b690:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b694:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800b696:	f7f9 fe75 	bl	8005384 <HAL_GetTick>
 800b69a:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800b69c:	e008      	b.n	800b6b0 <RCCEx_PLL3_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800b69e:	f7f9 fe71 	bl	8005384 <HAL_GetTick>
 800b6a2:	4602      	mov	r2, r0
 800b6a4:	68fb      	ldr	r3, [r7, #12]
 800b6a6:	1ad3      	subs	r3, r2, r3
 800b6a8:	2b02      	cmp	r3, #2
 800b6aa:	d901      	bls.n	800b6b0 <RCCEx_PLL3_Config+0x110>
    {
      return HAL_TIMEOUT;
 800b6ac:	2303      	movs	r3, #3
 800b6ae:	e006      	b.n	800b6be <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800b6b0:	4b05      	ldr	r3, [pc, #20]	@ (800b6c8 <RCCEx_PLL3_Config+0x128>)
 800b6b2:	681b      	ldr	r3, [r3, #0]
 800b6b4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b6b8:	2b00      	cmp	r3, #0
 800b6ba:	d0f0      	beq.n	800b69e <RCCEx_PLL3_Config+0xfe>
    }
  }
  return HAL_OK;
 800b6bc:	2300      	movs	r3, #0
}
 800b6be:	4618      	mov	r0, r3
 800b6c0:	3710      	adds	r7, #16
 800b6c2:	46bd      	mov	sp, r7
 800b6c4:	bd80      	pop	{r7, pc}
 800b6c6:	bf00      	nop
 800b6c8:	46020c00 	.word	0x46020c00
 800b6cc:	80800000 	.word	0x80800000

0800b6d0 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800b6d0:	b580      	push	{r7, lr}
 800b6d2:	b084      	sub	sp, #16
 800b6d4:	af00      	add	r7, sp, #0
 800b6d6:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	2b00      	cmp	r3, #0
 800b6dc:	d101      	bne.n	800b6e2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800b6de:	2301      	movs	r3, #1
 800b6e0:	e0fb      	b.n	800b8da <HAL_SPI_Init+0x20a>

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
  if (IS_SPI_LIMITED_INSTANCE(hspi->Instance))
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	681b      	ldr	r3, [r3, #0]
 800b6e6:	4a7f      	ldr	r2, [pc, #508]	@ (800b8e4 <HAL_SPI_Init+0x214>)
 800b6e8:	4293      	cmp	r3, r2
 800b6ea:	d004      	beq.n	800b6f6 <HAL_SPI_Init+0x26>
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	681b      	ldr	r3, [r3, #0]
 800b6f0:	4a7d      	ldr	r2, [pc, #500]	@ (800b8e8 <HAL_SPI_Init+0x218>)
 800b6f2:	4293      	cmp	r3, r2
 800b6f4:	e000      	b.n	800b6f8 <HAL_SPI_Init+0x28>
  {
    assert_param(IS_SPI_LIMITED_DATASIZE(hspi->Init.DataSize));
    assert_param(IS_SPI_LIMITED_FIFOTHRESHOLD(hspi->Init.FifoThreshold));
 800b6f6:	bf00      	nop
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	2200      	movs	r2, #0
 800b6fc:	629a      	str	r2, [r3, #40]	@ 0x28
  assert_param(IS_SPI_RDY_MASTER_MANAGEMENT(hspi->Init.ReadyMasterManagement));
  assert_param(IS_SPI_RDY_POLARITY(hspi->Init.ReadyPolarity));
  assert_param(IS_SPI_MASTER_RX_AUTOSUSP(hspi->Init.MasterReceiverAutoSusp));

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	681b      	ldr	r3, [r3, #0]
 800b702:	4a78      	ldr	r2, [pc, #480]	@ (800b8e4 <HAL_SPI_Init+0x214>)
 800b704:	4293      	cmp	r3, r2
 800b706:	d004      	beq.n	800b712 <HAL_SPI_Init+0x42>
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	681b      	ldr	r3, [r3, #0]
 800b70c:	4a76      	ldr	r2, [pc, #472]	@ (800b8e8 <HAL_SPI_Init+0x218>)
 800b70e:	4293      	cmp	r3, r2
 800b710:	d105      	bne.n	800b71e <HAL_SPI_Init+0x4e>
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	68db      	ldr	r3, [r3, #12]
 800b716:	2b0f      	cmp	r3, #15
 800b718:	d901      	bls.n	800b71e <HAL_SPI_Init+0x4e>
  {
    return HAL_ERROR;
 800b71a:	2301      	movs	r3, #1
 800b71c:	e0dd      	b.n	800b8da <HAL_SPI_Init+0x20a>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800b71e:	6878      	ldr	r0, [r7, #4]
 800b720:	f000 fde8 	bl	800c2f4 <SPI_GetPacketSize>
 800b724:	60f8      	str	r0, [r7, #12]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	681b      	ldr	r3, [r3, #0]
 800b72a:	4a6e      	ldr	r2, [pc, #440]	@ (800b8e4 <HAL_SPI_Init+0x214>)
 800b72c:	4293      	cmp	r3, r2
 800b72e:	d004      	beq.n	800b73a <HAL_SPI_Init+0x6a>
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	681b      	ldr	r3, [r3, #0]
 800b734:	4a6c      	ldr	r2, [pc, #432]	@ (800b8e8 <HAL_SPI_Init+0x218>)
 800b736:	4293      	cmp	r3, r2
 800b738:	d102      	bne.n	800b740 <HAL_SPI_Init+0x70>
 800b73a:	68fb      	ldr	r3, [r7, #12]
 800b73c:	2b08      	cmp	r3, #8
 800b73e:	d816      	bhi.n	800b76e <HAL_SPI_Init+0x9e>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	681b      	ldr	r3, [r3, #0]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800b744:	4a69      	ldr	r2, [pc, #420]	@ (800b8ec <HAL_SPI_Init+0x21c>)
 800b746:	4293      	cmp	r3, r2
 800b748:	d00e      	beq.n	800b768 <HAL_SPI_Init+0x98>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	681b      	ldr	r3, [r3, #0]
 800b74e:	4a68      	ldr	r2, [pc, #416]	@ (800b8f0 <HAL_SPI_Init+0x220>)
 800b750:	4293      	cmp	r3, r2
 800b752:	d009      	beq.n	800b768 <HAL_SPI_Init+0x98>
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	681b      	ldr	r3, [r3, #0]
 800b758:	4a66      	ldr	r2, [pc, #408]	@ (800b8f4 <HAL_SPI_Init+0x224>)
 800b75a:	4293      	cmp	r3, r2
 800b75c:	d004      	beq.n	800b768 <HAL_SPI_Init+0x98>
 800b75e:	687b      	ldr	r3, [r7, #4]
 800b760:	681b      	ldr	r3, [r3, #0]
 800b762:	4a65      	ldr	r2, [pc, #404]	@ (800b8f8 <HAL_SPI_Init+0x228>)
 800b764:	4293      	cmp	r3, r2
 800b766:	d104      	bne.n	800b772 <HAL_SPI_Init+0xa2>
 800b768:	68fb      	ldr	r3, [r7, #12]
 800b76a:	2b10      	cmp	r3, #16
 800b76c:	d901      	bls.n	800b772 <HAL_SPI_Init+0xa2>
  {
    return HAL_ERROR;
 800b76e:	2301      	movs	r3, #1
 800b770:	e0b3      	b.n	800b8da <HAL_SPI_Init+0x20a>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 800b778:	b2db      	uxtb	r3, r3
 800b77a:	2b00      	cmp	r3, #0
 800b77c:	d106      	bne.n	800b78c <HAL_SPI_Init+0xbc>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	2200      	movs	r2, #0
 800b782:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800b786:	6878      	ldr	r0, [r7, #4]
 800b788:	f7f8 fd0a 	bl	80041a0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	2202      	movs	r2, #2
 800b790:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	681b      	ldr	r3, [r3, #0]
 800b798:	681a      	ldr	r2, [r3, #0]
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	681b      	ldr	r3, [r3, #0]
 800b79e:	f022 0201 	bic.w	r2, r2, #1
 800b7a2:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	681b      	ldr	r3, [r3, #0]
 800b7a8:	689b      	ldr	r3, [r3, #8]
 800b7aa:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 800b7ae:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	699b      	ldr	r3, [r3, #24]
 800b7b4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800b7b8:	d119      	bne.n	800b7ee <HAL_SPI_Init+0x11e>
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	685b      	ldr	r3, [r3, #4]
 800b7be:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800b7c2:	d103      	bne.n	800b7cc <HAL_SPI_Init+0xfc>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800b7c8:	2b00      	cmp	r3, #0
 800b7ca:	d008      	beq.n	800b7de <HAL_SPI_Init+0x10e>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800b7d0:	2b00      	cmp	r3, #0
 800b7d2:	d10c      	bne.n	800b7ee <HAL_SPI_Init+0x11e>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800b7d8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b7dc:	d107      	bne.n	800b7ee <HAL_SPI_Init+0x11e>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	681b      	ldr	r3, [r3, #0]
 800b7e2:	681a      	ldr	r2, [r3, #0]
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	681b      	ldr	r3, [r3, #0]
 800b7e8:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800b7ec:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	685b      	ldr	r3, [r3, #4]
 800b7f2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800b7f6:	2b00      	cmp	r3, #0
 800b7f8:	d00f      	beq.n	800b81a <HAL_SPI_Init+0x14a>
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	68db      	ldr	r3, [r3, #12]
 800b7fe:	2b06      	cmp	r3, #6
 800b800:	d90b      	bls.n	800b81a <HAL_SPI_Init+0x14a>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800b802:	687b      	ldr	r3, [r7, #4]
 800b804:	681b      	ldr	r3, [r3, #0]
 800b806:	681b      	ldr	r3, [r3, #0]
 800b808:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	681b      	ldr	r3, [r3, #0]
 800b814:	430a      	orrs	r2, r1
 800b816:	601a      	str	r2, [r3, #0]
 800b818:	e007      	b.n	800b82a <HAL_SPI_Init+0x15a>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	681b      	ldr	r3, [r3, #0]
 800b81e:	681a      	ldr	r2, [r3, #0]
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	681b      	ldr	r3, [r3, #0]
 800b824:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800b828:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	69da      	ldr	r2, [r3, #28]
 800b82e:	687b      	ldr	r3, [r7, #4]
 800b830:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b832:	431a      	orrs	r2, r3
 800b834:	68bb      	ldr	r3, [r7, #8]
 800b836:	431a      	orrs	r2, r3
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b83c:	ea42 0103 	orr.w	r1, r2, r3
 800b840:	687b      	ldr	r3, [r7, #4]
 800b842:	68da      	ldr	r2, [r3, #12]
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	681b      	ldr	r3, [r3, #0]
 800b848:	430a      	orrs	r2, r1
 800b84a:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b854:	431a      	orrs	r2, r3
 800b856:	687b      	ldr	r3, [r7, #4]
 800b858:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b85a:	431a      	orrs	r2, r3
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	699b      	ldr	r3, [r3, #24]
 800b860:	431a      	orrs	r2, r3
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	691b      	ldr	r3, [r3, #16]
 800b866:	431a      	orrs	r2, r3
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	695b      	ldr	r3, [r3, #20]
 800b86c:	431a      	orrs	r2, r3
 800b86e:	687b      	ldr	r3, [r7, #4]
 800b870:	6a1b      	ldr	r3, [r3, #32]
 800b872:	431a      	orrs	r2, r3
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	685b      	ldr	r3, [r3, #4]
 800b878:	431a      	orrs	r2, r3
 800b87a:	687b      	ldr	r3, [r7, #4]
 800b87c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b87e:	431a      	orrs	r2, r3
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	689b      	ldr	r3, [r3, #8]
 800b884:	431a      	orrs	r2, r3
 800b886:	687b      	ldr	r3, [r7, #4]
 800b888:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b88a:	431a      	orrs	r2, r3
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b890:	431a      	orrs	r2, r3
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b896:	ea42 0103 	orr.w	r1, r2, r3
 800b89a:	687b      	ldr	r3, [r7, #4]
 800b89c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	681b      	ldr	r3, [r3, #0]
 800b8a2:	430a      	orrs	r2, r1
 800b8a4:	60da      	str	r2, [r3, #12]
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800b8a6:	687b      	ldr	r3, [r7, #4]
 800b8a8:	685b      	ldr	r3, [r3, #4]
 800b8aa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800b8ae:	2b00      	cmp	r3, #0
 800b8b0:	d00a      	beq.n	800b8c8 <HAL_SPI_Init+0x1f8>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800b8b2:	687b      	ldr	r3, [r7, #4]
 800b8b4:	681b      	ldr	r3, [r3, #0]
 800b8b6:	68db      	ldr	r3, [r3, #12]
 800b8b8:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	681b      	ldr	r3, [r3, #0]
 800b8c4:	430a      	orrs	r2, r1
 800b8c6:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	2200      	movs	r2, #0
 800b8cc:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  hspi->State     = HAL_SPI_STATE_READY;
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	2201      	movs	r2, #1
 800b8d4:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  return HAL_OK;
 800b8d8:	2300      	movs	r3, #0
}
 800b8da:	4618      	mov	r0, r3
 800b8dc:	3710      	adds	r7, #16
 800b8de:	46bd      	mov	sp, r7
 800b8e0:	bd80      	pop	{r7, pc}
 800b8e2:	bf00      	nop
 800b8e4:	46002000 	.word	0x46002000
 800b8e8:	56002000 	.word	0x56002000
 800b8ec:	40013000 	.word	0x40013000
 800b8f0:	50013000 	.word	0x50013000
 800b8f4:	40003800 	.word	0x40003800
 800b8f8:	50003800 	.word	0x50003800

0800b8fc <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b8fc:	b580      	push	{r7, lr}
 800b8fe:	b088      	sub	sp, #32
 800b900:	af02      	add	r7, sp, #8
 800b902:	60f8      	str	r0, [r7, #12]
 800b904:	60b9      	str	r1, [r7, #8]
 800b906:	603b      	str	r3, [r7, #0]
 800b908:	4613      	mov	r3, r2
 800b90a:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800b90c:	68fb      	ldr	r3, [r7, #12]
 800b90e:	681b      	ldr	r3, [r3, #0]
 800b910:	3320      	adds	r3, #32
 800b912:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Check transfer size parameter */
  if (IS_SPI_LIMITED_INSTANCE(hspi->Instance))
 800b914:	68fb      	ldr	r3, [r7, #12]
 800b916:	681b      	ldr	r3, [r3, #0]
 800b918:	4a90      	ldr	r2, [pc, #576]	@ (800bb5c <HAL_SPI_Transmit+0x260>)
 800b91a:	4293      	cmp	r3, r2
  {
    assert_param(IS_SPI_TRANSFER_SIZE(Size));
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800b91c:	f7f9 fd32 	bl	8005384 <HAL_GetTick>
 800b920:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800b922:	68fb      	ldr	r3, [r7, #12]
 800b924:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 800b928:	b2db      	uxtb	r3, r3
 800b92a:	2b01      	cmp	r3, #1
 800b92c:	d001      	beq.n	800b932 <HAL_SPI_Transmit+0x36>
  {
    return HAL_BUSY;
 800b92e:	2302      	movs	r3, #2
 800b930:	e1f4      	b.n	800bd1c <HAL_SPI_Transmit+0x420>
  }

  if ((pData == NULL) || (Size == 0UL))
 800b932:	68bb      	ldr	r3, [r7, #8]
 800b934:	2b00      	cmp	r3, #0
 800b936:	d002      	beq.n	800b93e <HAL_SPI_Transmit+0x42>
 800b938:	88fb      	ldrh	r3, [r7, #6]
 800b93a:	2b00      	cmp	r3, #0
 800b93c:	d101      	bne.n	800b942 <HAL_SPI_Transmit+0x46>
  {
    return HAL_ERROR;
 800b93e:	2301      	movs	r3, #1
 800b940:	e1ec      	b.n	800bd1c <HAL_SPI_Transmit+0x420>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800b942:	68fb      	ldr	r3, [r7, #12]
 800b944:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 800b948:	2b01      	cmp	r3, #1
 800b94a:	d101      	bne.n	800b950 <HAL_SPI_Transmit+0x54>
 800b94c:	2302      	movs	r3, #2
 800b94e:	e1e5      	b.n	800bd1c <HAL_SPI_Transmit+0x420>
 800b950:	68fb      	ldr	r3, [r7, #12]
 800b952:	2201      	movs	r2, #1
 800b954:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800b958:	68fb      	ldr	r3, [r7, #12]
 800b95a:	2203      	movs	r2, #3
 800b95c:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b960:	68fb      	ldr	r3, [r7, #12]
 800b962:	2200      	movs	r2, #0
 800b964:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800b968:	68fb      	ldr	r3, [r7, #12]
 800b96a:	68ba      	ldr	r2, [r7, #8]
 800b96c:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->TxXferSize  = Size;
 800b96e:	68fb      	ldr	r3, [r7, #12]
 800b970:	88fa      	ldrh	r2, [r7, #6]
 800b972:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->TxXferCount = Size;
 800b976:	68fb      	ldr	r3, [r7, #12]
 800b978:	88fa      	ldrh	r2, [r7, #6]
 800b97a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 800b97e:	68fb      	ldr	r3, [r7, #12]
 800b980:	2200      	movs	r2, #0
 800b982:	66da      	str	r2, [r3, #108]	@ 0x6c
  hspi->RxXferSize  = (uint16_t) 0UL;
 800b984:	68fb      	ldr	r3, [r7, #12]
 800b986:	2200      	movs	r2, #0
 800b988:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70
  hspi->RxXferCount = (uint16_t) 0UL;
 800b98c:	68fb      	ldr	r3, [r7, #12]
 800b98e:	2200      	movs	r2, #0
 800b990:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
  hspi->TxISR       = NULL;
 800b994:	68fb      	ldr	r3, [r7, #12]
 800b996:	2200      	movs	r2, #0
 800b998:	67da      	str	r2, [r3, #124]	@ 0x7c
  hspi->RxISR       = NULL;
 800b99a:	68fb      	ldr	r3, [r7, #12]
 800b99c:	2200      	movs	r2, #0
 800b99e:	679a      	str	r2, [r3, #120]	@ 0x78

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b9a0:	68fb      	ldr	r3, [r7, #12]
 800b9a2:	689b      	ldr	r3, [r3, #8]
 800b9a4:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 800b9a8:	d108      	bne.n	800b9bc <HAL_SPI_Transmit+0xc0>
  {
    SPI_1LINE_TX(hspi);
 800b9aa:	68fb      	ldr	r3, [r7, #12]
 800b9ac:	681b      	ldr	r3, [r3, #0]
 800b9ae:	681a      	ldr	r2, [r3, #0]
 800b9b0:	68fb      	ldr	r3, [r7, #12]
 800b9b2:	681b      	ldr	r3, [r3, #0]
 800b9b4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800b9b8:	601a      	str	r2, [r3, #0]
 800b9ba:	e009      	b.n	800b9d0 <HAL_SPI_Transmit+0xd4>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 800b9bc:	68fb      	ldr	r3, [r7, #12]
 800b9be:	681b      	ldr	r3, [r3, #0]
 800b9c0:	68db      	ldr	r3, [r3, #12]
 800b9c2:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 800b9c6:	68fb      	ldr	r3, [r7, #12]
 800b9c8:	681b      	ldr	r3, [r3, #0]
 800b9ca:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800b9ce:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800b9d0:	68fb      	ldr	r3, [r7, #12]
 800b9d2:	681b      	ldr	r3, [r3, #0]
 800b9d4:	685b      	ldr	r3, [r3, #4]
 800b9d6:	0c1b      	lsrs	r3, r3, #16
 800b9d8:	041b      	lsls	r3, r3, #16
 800b9da:	88f9      	ldrh	r1, [r7, #6]
 800b9dc:	68fa      	ldr	r2, [r7, #12]
 800b9de:	6812      	ldr	r2, [r2, #0]
 800b9e0:	430b      	orrs	r3, r1
 800b9e2:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800b9e4:	68fb      	ldr	r3, [r7, #12]
 800b9e6:	681b      	ldr	r3, [r3, #0]
 800b9e8:	681a      	ldr	r2, [r3, #0]
 800b9ea:	68fb      	ldr	r3, [r7, #12]
 800b9ec:	681b      	ldr	r3, [r3, #0]
 800b9ee:	f042 0201 	orr.w	r2, r2, #1
 800b9f2:	601a      	str	r2, [r3, #0]

  if (((hspi->Instance->AUTOCR & SPI_AUTOCR_TRIGEN) == 0U) && (hspi->Init.Mode == SPI_MODE_MASTER))
 800b9f4:	68fb      	ldr	r3, [r7, #12]
 800b9f6:	681b      	ldr	r3, [r3, #0]
 800b9f8:	69db      	ldr	r3, [r3, #28]
 800b9fa:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800b9fe:	2b00      	cmp	r3, #0
 800ba00:	d10c      	bne.n	800ba1c <HAL_SPI_Transmit+0x120>
 800ba02:	68fb      	ldr	r3, [r7, #12]
 800ba04:	685b      	ldr	r3, [r3, #4]
 800ba06:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800ba0a:	d107      	bne.n	800ba1c <HAL_SPI_Transmit+0x120>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800ba0c:	68fb      	ldr	r3, [r7, #12]
 800ba0e:	681b      	ldr	r3, [r3, #0]
 800ba10:	681a      	ldr	r2, [r3, #0]
 800ba12:	68fb      	ldr	r3, [r7, #12]
 800ba14:	681b      	ldr	r3, [r3, #0]
 800ba16:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800ba1a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 800ba1c:	68fb      	ldr	r3, [r7, #12]
 800ba1e:	68db      	ldr	r3, [r3, #12]
 800ba20:	2b0f      	cmp	r3, #15
 800ba22:	d95b      	bls.n	800badc <HAL_SPI_Transmit+0x1e0>
 800ba24:	68fb      	ldr	r3, [r7, #12]
 800ba26:	681b      	ldr	r3, [r3, #0]
 800ba28:	4a4d      	ldr	r2, [pc, #308]	@ (800bb60 <HAL_SPI_Transmit+0x264>)
 800ba2a:	4293      	cmp	r3, r2
 800ba2c:	d04f      	beq.n	800bace <HAL_SPI_Transmit+0x1d2>
 800ba2e:	68fb      	ldr	r3, [r7, #12]
 800ba30:	681b      	ldr	r3, [r3, #0]
 800ba32:	4a4c      	ldr	r2, [pc, #304]	@ (800bb64 <HAL_SPI_Transmit+0x268>)
 800ba34:	4293      	cmp	r3, r2
 800ba36:	d04a      	beq.n	800bace <HAL_SPI_Transmit+0x1d2>
 800ba38:	68fb      	ldr	r3, [r7, #12]
 800ba3a:	681b      	ldr	r3, [r3, #0]
 800ba3c:	4a4a      	ldr	r2, [pc, #296]	@ (800bb68 <HAL_SPI_Transmit+0x26c>)
 800ba3e:	4293      	cmp	r3, r2
 800ba40:	d045      	beq.n	800bace <HAL_SPI_Transmit+0x1d2>
 800ba42:	68fb      	ldr	r3, [r7, #12]
 800ba44:	681b      	ldr	r3, [r3, #0]
 800ba46:	4a49      	ldr	r2, [pc, #292]	@ (800bb6c <HAL_SPI_Transmit+0x270>)
 800ba48:	4293      	cmp	r3, r2
 800ba4a:	d147      	bne.n	800badc <HAL_SPI_Transmit+0x1e0>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800ba4c:	e03f      	b.n	800bace <HAL_SPI_Transmit+0x1d2>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800ba4e:	68fb      	ldr	r3, [r7, #12]
 800ba50:	681b      	ldr	r3, [r3, #0]
 800ba52:	695b      	ldr	r3, [r3, #20]
 800ba54:	f003 0302 	and.w	r3, r3, #2
 800ba58:	2b02      	cmp	r3, #2
 800ba5a:	d114      	bne.n	800ba86 <HAL_SPI_Transmit+0x18a>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800ba5c:	68fb      	ldr	r3, [r7, #12]
 800ba5e:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800ba60:	68fb      	ldr	r3, [r7, #12]
 800ba62:	681b      	ldr	r3, [r3, #0]
 800ba64:	6812      	ldr	r2, [r2, #0]
 800ba66:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800ba68:	68fb      	ldr	r3, [r7, #12]
 800ba6a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ba6c:	1d1a      	adds	r2, r3, #4
 800ba6e:	68fb      	ldr	r3, [r7, #12]
 800ba70:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->TxXferCount--;
 800ba72:	68fb      	ldr	r3, [r7, #12]
 800ba74:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800ba78:	b29b      	uxth	r3, r3
 800ba7a:	3b01      	subs	r3, #1
 800ba7c:	b29a      	uxth	r2, r3
 800ba7e:	68fb      	ldr	r3, [r7, #12]
 800ba80:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800ba84:	e023      	b.n	800bace <HAL_SPI_Transmit+0x1d2>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ba86:	f7f9 fc7d 	bl	8005384 <HAL_GetTick>
 800ba8a:	4602      	mov	r2, r0
 800ba8c:	693b      	ldr	r3, [r7, #16]
 800ba8e:	1ad3      	subs	r3, r2, r3
 800ba90:	683a      	ldr	r2, [r7, #0]
 800ba92:	429a      	cmp	r2, r3
 800ba94:	d803      	bhi.n	800ba9e <HAL_SPI_Transmit+0x1a2>
 800ba96:	683b      	ldr	r3, [r7, #0]
 800ba98:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800ba9c:	d102      	bne.n	800baa4 <HAL_SPI_Transmit+0x1a8>
 800ba9e:	683b      	ldr	r3, [r7, #0]
 800baa0:	2b00      	cmp	r3, #0
 800baa2:	d114      	bne.n	800bace <HAL_SPI_Transmit+0x1d2>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800baa4:	68f8      	ldr	r0, [r7, #12]
 800baa6:	f000 fb58 	bl	800c15a <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800baaa:	68fb      	ldr	r3, [r7, #12]
 800baac:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800bab0:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800bab4:	68fb      	ldr	r3, [r7, #12]
 800bab6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 800baba:	68fb      	ldr	r3, [r7, #12]
 800babc:	2201      	movs	r2, #1
 800babe:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800bac2:	68fb      	ldr	r3, [r7, #12]
 800bac4:	2200      	movs	r2, #0
 800bac6:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

          return HAL_TIMEOUT;
 800baca:	2303      	movs	r3, #3
 800bacc:	e126      	b.n	800bd1c <HAL_SPI_Transmit+0x420>
    while (hspi->TxXferCount > 0UL)
 800bace:	68fb      	ldr	r3, [r7, #12]
 800bad0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800bad4:	b29b      	uxth	r3, r3
 800bad6:	2b00      	cmp	r3, #0
 800bad8:	d1b9      	bne.n	800ba4e <HAL_SPI_Transmit+0x152>
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 800bada:	e0f9      	b.n	800bcd0 <HAL_SPI_Transmit+0x3d4>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800badc:	68fb      	ldr	r3, [r7, #12]
 800bade:	68db      	ldr	r3, [r3, #12]
 800bae0:	2b07      	cmp	r3, #7
 800bae2:	f240 80ee 	bls.w	800bcc2 <HAL_SPI_Transmit+0x3c6>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800bae6:	e067      	b.n	800bbb8 <HAL_SPI_Transmit+0x2bc>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800bae8:	68fb      	ldr	r3, [r7, #12]
 800baea:	681b      	ldr	r3, [r3, #0]
 800baec:	695b      	ldr	r3, [r3, #20]
 800baee:	f003 0302 	and.w	r3, r3, #2
 800baf2:	2b02      	cmp	r3, #2
 800baf4:	d13c      	bne.n	800bb70 <HAL_SPI_Transmit+0x274>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800baf6:	68fb      	ldr	r3, [r7, #12]
 800baf8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800bafc:	b29b      	uxth	r3, r3
 800bafe:	2b01      	cmp	r3, #1
 800bb00:	d918      	bls.n	800bb34 <HAL_SPI_Transmit+0x238>
 800bb02:	68fb      	ldr	r3, [r7, #12]
 800bb04:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bb06:	2b00      	cmp	r3, #0
 800bb08:	d014      	beq.n	800bb34 <HAL_SPI_Transmit+0x238>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800bb0a:	68fb      	ldr	r3, [r7, #12]
 800bb0c:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800bb0e:	68fb      	ldr	r3, [r7, #12]
 800bb10:	681b      	ldr	r3, [r3, #0]
 800bb12:	6812      	ldr	r2, [r2, #0]
 800bb14:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800bb16:	68fb      	ldr	r3, [r7, #12]
 800bb18:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bb1a:	1d1a      	adds	r2, r3, #4
 800bb1c:	68fb      	ldr	r3, [r7, #12]
 800bb1e:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount -= (uint16_t)2UL;
 800bb20:	68fb      	ldr	r3, [r7, #12]
 800bb22:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800bb26:	b29b      	uxth	r3, r3
 800bb28:	3b02      	subs	r3, #2
 800bb2a:	b29a      	uxth	r2, r3
 800bb2c:	68fb      	ldr	r3, [r7, #12]
 800bb2e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800bb32:	e041      	b.n	800bbb8 <HAL_SPI_Transmit+0x2bc>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800bb34:	68fb      	ldr	r3, [r7, #12]
 800bb36:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bb38:	881a      	ldrh	r2, [r3, #0]
 800bb3a:	697b      	ldr	r3, [r7, #20]
 800bb3c:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800bb3e:	68fb      	ldr	r3, [r7, #12]
 800bb40:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bb42:	1c9a      	adds	r2, r3, #2
 800bb44:	68fb      	ldr	r3, [r7, #12]
 800bb46:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount--;
 800bb48:	68fb      	ldr	r3, [r7, #12]
 800bb4a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800bb4e:	b29b      	uxth	r3, r3
 800bb50:	3b01      	subs	r3, #1
 800bb52:	b29a      	uxth	r2, r3
 800bb54:	68fb      	ldr	r3, [r7, #12]
 800bb56:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800bb5a:	e02d      	b.n	800bbb8 <HAL_SPI_Transmit+0x2bc>
 800bb5c:	46002000 	.word	0x46002000
 800bb60:	40013000 	.word	0x40013000
 800bb64:	50013000 	.word	0x50013000
 800bb68:	40003800 	.word	0x40003800
 800bb6c:	50003800 	.word	0x50003800
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800bb70:	f7f9 fc08 	bl	8005384 <HAL_GetTick>
 800bb74:	4602      	mov	r2, r0
 800bb76:	693b      	ldr	r3, [r7, #16]
 800bb78:	1ad3      	subs	r3, r2, r3
 800bb7a:	683a      	ldr	r2, [r7, #0]
 800bb7c:	429a      	cmp	r2, r3
 800bb7e:	d803      	bhi.n	800bb88 <HAL_SPI_Transmit+0x28c>
 800bb80:	683b      	ldr	r3, [r7, #0]
 800bb82:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800bb86:	d102      	bne.n	800bb8e <HAL_SPI_Transmit+0x292>
 800bb88:	683b      	ldr	r3, [r7, #0]
 800bb8a:	2b00      	cmp	r3, #0
 800bb8c:	d114      	bne.n	800bbb8 <HAL_SPI_Transmit+0x2bc>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800bb8e:	68f8      	ldr	r0, [r7, #12]
 800bb90:	f000 fae3 	bl	800c15a <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800bb94:	68fb      	ldr	r3, [r7, #12]
 800bb96:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800bb9a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800bb9e:	68fb      	ldr	r3, [r7, #12]
 800bba0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 800bba4:	68fb      	ldr	r3, [r7, #12]
 800bba6:	2201      	movs	r2, #1
 800bba8:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800bbac:	68fb      	ldr	r3, [r7, #12]
 800bbae:	2200      	movs	r2, #0
 800bbb0:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

          return HAL_TIMEOUT;
 800bbb4:	2303      	movs	r3, #3
 800bbb6:	e0b1      	b.n	800bd1c <HAL_SPI_Transmit+0x420>
    while (hspi->TxXferCount > 0UL)
 800bbb8:	68fb      	ldr	r3, [r7, #12]
 800bbba:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800bbbe:	b29b      	uxth	r3, r3
 800bbc0:	2b00      	cmp	r3, #0
 800bbc2:	d191      	bne.n	800bae8 <HAL_SPI_Transmit+0x1ec>
 800bbc4:	e084      	b.n	800bcd0 <HAL_SPI_Transmit+0x3d4>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800bbc6:	68fb      	ldr	r3, [r7, #12]
 800bbc8:	681b      	ldr	r3, [r3, #0]
 800bbca:	695b      	ldr	r3, [r3, #20]
 800bbcc:	f003 0302 	and.w	r3, r3, #2
 800bbd0:	2b02      	cmp	r3, #2
 800bbd2:	d152      	bne.n	800bc7a <HAL_SPI_Transmit+0x37e>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800bbd4:	68fb      	ldr	r3, [r7, #12]
 800bbd6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800bbda:	b29b      	uxth	r3, r3
 800bbdc:	2b03      	cmp	r3, #3
 800bbde:	d918      	bls.n	800bc12 <HAL_SPI_Transmit+0x316>
 800bbe0:	68fb      	ldr	r3, [r7, #12]
 800bbe2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bbe4:	2b40      	cmp	r3, #64	@ 0x40
 800bbe6:	d914      	bls.n	800bc12 <HAL_SPI_Transmit+0x316>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800bbe8:	68fb      	ldr	r3, [r7, #12]
 800bbea:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800bbec:	68fb      	ldr	r3, [r7, #12]
 800bbee:	681b      	ldr	r3, [r3, #0]
 800bbf0:	6812      	ldr	r2, [r2, #0]
 800bbf2:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800bbf4:	68fb      	ldr	r3, [r7, #12]
 800bbf6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bbf8:	1d1a      	adds	r2, r3, #4
 800bbfa:	68fb      	ldr	r3, [r7, #12]
 800bbfc:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount -= (uint16_t)4UL;
 800bbfe:	68fb      	ldr	r3, [r7, #12]
 800bc00:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800bc04:	b29b      	uxth	r3, r3
 800bc06:	3b04      	subs	r3, #4
 800bc08:	b29a      	uxth	r2, r3
 800bc0a:	68fb      	ldr	r3, [r7, #12]
 800bc0c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800bc10:	e057      	b.n	800bcc2 <HAL_SPI_Transmit+0x3c6>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800bc12:	68fb      	ldr	r3, [r7, #12]
 800bc14:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800bc18:	b29b      	uxth	r3, r3
 800bc1a:	2b01      	cmp	r3, #1
 800bc1c:	d917      	bls.n	800bc4e <HAL_SPI_Transmit+0x352>
 800bc1e:	68fb      	ldr	r3, [r7, #12]
 800bc20:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bc22:	2b00      	cmp	r3, #0
 800bc24:	d013      	beq.n	800bc4e <HAL_SPI_Transmit+0x352>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800bc26:	68fb      	ldr	r3, [r7, #12]
 800bc28:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bc2a:	881a      	ldrh	r2, [r3, #0]
 800bc2c:	697b      	ldr	r3, [r7, #20]
 800bc2e:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800bc30:	68fb      	ldr	r3, [r7, #12]
 800bc32:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bc34:	1c9a      	adds	r2, r3, #2
 800bc36:	68fb      	ldr	r3, [r7, #12]
 800bc38:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount -= (uint16_t)2UL;
 800bc3a:	68fb      	ldr	r3, [r7, #12]
 800bc3c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800bc40:	b29b      	uxth	r3, r3
 800bc42:	3b02      	subs	r3, #2
 800bc44:	b29a      	uxth	r2, r3
 800bc46:	68fb      	ldr	r3, [r7, #12]
 800bc48:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800bc4c:	e039      	b.n	800bcc2 <HAL_SPI_Transmit+0x3c6>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800bc4e:	68fb      	ldr	r3, [r7, #12]
 800bc50:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800bc52:	68fb      	ldr	r3, [r7, #12]
 800bc54:	681b      	ldr	r3, [r3, #0]
 800bc56:	3320      	adds	r3, #32
 800bc58:	7812      	ldrb	r2, [r2, #0]
 800bc5a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800bc5c:	68fb      	ldr	r3, [r7, #12]
 800bc5e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bc60:	1c5a      	adds	r2, r3, #1
 800bc62:	68fb      	ldr	r3, [r7, #12]
 800bc64:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount--;
 800bc66:	68fb      	ldr	r3, [r7, #12]
 800bc68:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800bc6c:	b29b      	uxth	r3, r3
 800bc6e:	3b01      	subs	r3, #1
 800bc70:	b29a      	uxth	r2, r3
 800bc72:	68fb      	ldr	r3, [r7, #12]
 800bc74:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800bc78:	e023      	b.n	800bcc2 <HAL_SPI_Transmit+0x3c6>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800bc7a:	f7f9 fb83 	bl	8005384 <HAL_GetTick>
 800bc7e:	4602      	mov	r2, r0
 800bc80:	693b      	ldr	r3, [r7, #16]
 800bc82:	1ad3      	subs	r3, r2, r3
 800bc84:	683a      	ldr	r2, [r7, #0]
 800bc86:	429a      	cmp	r2, r3
 800bc88:	d803      	bhi.n	800bc92 <HAL_SPI_Transmit+0x396>
 800bc8a:	683b      	ldr	r3, [r7, #0]
 800bc8c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800bc90:	d102      	bne.n	800bc98 <HAL_SPI_Transmit+0x39c>
 800bc92:	683b      	ldr	r3, [r7, #0]
 800bc94:	2b00      	cmp	r3, #0
 800bc96:	d114      	bne.n	800bcc2 <HAL_SPI_Transmit+0x3c6>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800bc98:	68f8      	ldr	r0, [r7, #12]
 800bc9a:	f000 fa5e 	bl	800c15a <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800bc9e:	68fb      	ldr	r3, [r7, #12]
 800bca0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800bca4:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800bca8:	68fb      	ldr	r3, [r7, #12]
 800bcaa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 800bcae:	68fb      	ldr	r3, [r7, #12]
 800bcb0:	2201      	movs	r2, #1
 800bcb2:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800bcb6:	68fb      	ldr	r3, [r7, #12]
 800bcb8:	2200      	movs	r2, #0
 800bcba:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

          return HAL_TIMEOUT;
 800bcbe:	2303      	movs	r3, #3
 800bcc0:	e02c      	b.n	800bd1c <HAL_SPI_Transmit+0x420>
    while (hspi->TxXferCount > 0UL)
 800bcc2:	68fb      	ldr	r3, [r7, #12]
 800bcc4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800bcc8:	b29b      	uxth	r3, r3
 800bcca:	2b00      	cmp	r3, #0
 800bccc:	f47f af7b 	bne.w	800bbc6 <HAL_SPI_Transmit+0x2ca>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 800bcd0:	693b      	ldr	r3, [r7, #16]
 800bcd2:	9300      	str	r3, [sp, #0]
 800bcd4:	683b      	ldr	r3, [r7, #0]
 800bcd6:	2200      	movs	r2, #0
 800bcd8:	2108      	movs	r1, #8
 800bcda:	68f8      	ldr	r0, [r7, #12]
 800bcdc:	f000 fadc 	bl	800c298 <SPI_WaitOnFlagUntilTimeout>
 800bce0:	4603      	mov	r3, r0
 800bce2:	2b00      	cmp	r3, #0
 800bce4:	d007      	beq.n	800bcf6 <HAL_SPI_Transmit+0x3fa>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800bce6:	68fb      	ldr	r3, [r7, #12]
 800bce8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800bcec:	f043 0220 	orr.w	r2, r3, #32
 800bcf0:	68fb      	ldr	r3, [r7, #12]
 800bcf2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800bcf6:	68f8      	ldr	r0, [r7, #12]
 800bcf8:	f000 fa2f 	bl	800c15a <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 800bcfc:	68fb      	ldr	r3, [r7, #12]
 800bcfe:	2201      	movs	r2, #1
 800bd00:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800bd04:	68fb      	ldr	r3, [r7, #12]
 800bd06:	2200      	movs	r2, #0
 800bd08:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800bd0c:	68fb      	ldr	r3, [r7, #12]
 800bd0e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800bd12:	2b00      	cmp	r3, #0
 800bd14:	d001      	beq.n	800bd1a <HAL_SPI_Transmit+0x41e>
  {
    return HAL_ERROR;
 800bd16:	2301      	movs	r3, #1
 800bd18:	e000      	b.n	800bd1c <HAL_SPI_Transmit+0x420>
  }
  else
  {
    return HAL_OK;
 800bd1a:	2300      	movs	r3, #0
  }
}
 800bd1c:	4618      	mov	r0, r3
 800bd1e:	3718      	adds	r7, #24
 800bd20:	46bd      	mov	sp, r7
 800bd22:	bd80      	pop	{r7, pc}

0800bd24 <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800bd24:	b580      	push	{r7, lr}
 800bd26:	b08a      	sub	sp, #40	@ 0x28
 800bd28:	af00      	add	r7, sp, #0
 800bd2a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	681b      	ldr	r3, [r3, #0]
 800bd30:	691b      	ldr	r3, [r3, #16]
 800bd32:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 800bd34:	687b      	ldr	r3, [r7, #4]
 800bd36:	681b      	ldr	r3, [r3, #0]
 800bd38:	695b      	ldr	r3, [r3, #20]
 800bd3a:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 800bd3c:	6a3a      	ldr	r2, [r7, #32]
 800bd3e:	69fb      	ldr	r3, [r7, #28]
 800bd40:	4013      	ands	r3, r2
 800bd42:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	681b      	ldr	r3, [r3, #0]
 800bd48:	689b      	ldr	r3, [r3, #8]
 800bd4a:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 800bd4c:	2300      	movs	r3, #0
 800bd4e:	627b      	str	r3, [r7, #36]	@ 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 800bd50:	687b      	ldr	r3, [r7, #4]
 800bd52:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 800bd56:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800bd58:	687b      	ldr	r3, [r7, #4]
 800bd5a:	681b      	ldr	r3, [r3, #0]
 800bd5c:	3330      	adds	r3, #48	@ 0x30
 800bd5e:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */

  /* SPI in SUSPEND mode  ----------------------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 800bd60:	69fb      	ldr	r3, [r7, #28]
 800bd62:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800bd66:	2b00      	cmp	r3, #0
 800bd68:	d010      	beq.n	800bd8c <HAL_SPI_IRQHandler+0x68>
 800bd6a:	6a3b      	ldr	r3, [r7, #32]
 800bd6c:	f003 0308 	and.w	r3, r3, #8
 800bd70:	2b00      	cmp	r3, #0
 800bd72:	d00b      	beq.n	800bd8c <HAL_SPI_IRQHandler+0x68>
  {
    /* Clear the Suspend flag */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	681b      	ldr	r3, [r3, #0]
 800bd78:	699a      	ldr	r2, [r3, #24]
 800bd7a:	687b      	ldr	r3, [r7, #4]
 800bd7c:	681b      	ldr	r3, [r3, #0]
 800bd7e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800bd82:	619a      	str	r2, [r3, #24]

    /* Suspend on going, Call the Suspend callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->SuspendCallback(hspi);
#else
    HAL_SPI_SuspendCallback(hspi);
 800bd84:	6878      	ldr	r0, [r7, #4]
 800bd86:	f000 f9c5 	bl	800c114 <HAL_SPI_SuspendCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    return;
 800bd8a:	e19a      	b.n	800c0c2 <HAL_SPI_IRQHandler+0x39e>
  }

  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 800bd8c:	69bb      	ldr	r3, [r7, #24]
 800bd8e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bd92:	2b00      	cmp	r3, #0
 800bd94:	d113      	bne.n	800bdbe <HAL_SPI_IRQHandler+0x9a>
 800bd96:	69bb      	ldr	r3, [r7, #24]
 800bd98:	f003 0320 	and.w	r3, r3, #32
 800bd9c:	2b00      	cmp	r3, #0
 800bd9e:	d10e      	bne.n	800bdbe <HAL_SPI_IRQHandler+0x9a>
      HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 800bda0:	69bb      	ldr	r3, [r7, #24]
 800bda2:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 800bda6:	2b00      	cmp	r3, #0
 800bda8:	d009      	beq.n	800bdbe <HAL_SPI_IRQHandler+0x9a>
  {
    hspi->TxISR(hspi);
 800bdaa:	687b      	ldr	r3, [r7, #4]
 800bdac:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800bdae:	6878      	ldr	r0, [r7, #4]
 800bdb0:	4798      	blx	r3
    hspi->RxISR(hspi);
 800bdb2:	687b      	ldr	r3, [r7, #4]
 800bdb4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800bdb6:	6878      	ldr	r0, [r7, #4]
 800bdb8:	4798      	blx	r3
    handled = 1UL;
 800bdba:	2301      	movs	r3, #1
 800bdbc:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 800bdbe:	69bb      	ldr	r3, [r7, #24]
 800bdc0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bdc4:	2b00      	cmp	r3, #0
 800bdc6:	d10f      	bne.n	800bde8 <HAL_SPI_IRQHandler+0xc4>
 800bdc8:	69bb      	ldr	r3, [r7, #24]
 800bdca:	f003 0301 	and.w	r3, r3, #1
 800bdce:	2b00      	cmp	r3, #0
 800bdd0:	d00a      	beq.n	800bde8 <HAL_SPI_IRQHandler+0xc4>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 800bdd2:	69bb      	ldr	r3, [r7, #24]
 800bdd4:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 800bdd8:	2b00      	cmp	r3, #0
 800bdda:	d105      	bne.n	800bde8 <HAL_SPI_IRQHandler+0xc4>
  {
    hspi->RxISR(hspi);
 800bddc:	687b      	ldr	r3, [r7, #4]
 800bdde:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800bde0:	6878      	ldr	r0, [r7, #4]
 800bde2:	4798      	blx	r3
    handled = 1UL;
 800bde4:	2301      	movs	r3, #1
 800bde6:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 800bde8:	69bb      	ldr	r3, [r7, #24]
 800bdea:	f003 0320 	and.w	r3, r3, #32
 800bdee:	2b00      	cmp	r3, #0
 800bdf0:	d10f      	bne.n	800be12 <HAL_SPI_IRQHandler+0xee>
 800bdf2:	69bb      	ldr	r3, [r7, #24]
 800bdf4:	f003 0302 	and.w	r3, r3, #2
 800bdf8:	2b00      	cmp	r3, #0
 800bdfa:	d00a      	beq.n	800be12 <HAL_SPI_IRQHandler+0xee>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 800bdfc:	69bb      	ldr	r3, [r7, #24]
 800bdfe:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 800be02:	2b00      	cmp	r3, #0
 800be04:	d105      	bne.n	800be12 <HAL_SPI_IRQHandler+0xee>
  {
    hspi->TxISR(hspi);
 800be06:	687b      	ldr	r3, [r7, #4]
 800be08:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800be0a:	6878      	ldr	r0, [r7, #4]
 800be0c:	4798      	blx	r3
    handled = 1UL;
 800be0e:	2301      	movs	r3, #1
 800be10:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  if (handled != 0UL)
 800be12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800be14:	2b00      	cmp	r3, #0
 800be16:	f040 814f 	bne.w	800c0b8 <HAL_SPI_IRQHandler+0x394>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 800be1a:	69bb      	ldr	r3, [r7, #24]
 800be1c:	f003 0308 	and.w	r3, r3, #8
 800be20:	2b00      	cmp	r3, #0
 800be22:	f000 808b 	beq.w	800bf3c <HAL_SPI_IRQHandler+0x218>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800be26:	687b      	ldr	r3, [r7, #4]
 800be28:	681b      	ldr	r3, [r3, #0]
 800be2a:	699a      	ldr	r2, [r3, #24]
 800be2c:	687b      	ldr	r3, [r7, #4]
 800be2e:	681b      	ldr	r3, [r3, #0]
 800be30:	f042 0208 	orr.w	r2, r2, #8
 800be34:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	681b      	ldr	r3, [r3, #0]
 800be3a:	699a      	ldr	r2, [r3, #24]
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	681b      	ldr	r3, [r3, #0]
 800be40:	f042 0210 	orr.w	r2, r2, #16
 800be44:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800be46:	687b      	ldr	r3, [r7, #4]
 800be48:	681b      	ldr	r3, [r3, #0]
 800be4a:	699a      	ldr	r2, [r3, #24]
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	681b      	ldr	r3, [r3, #0]
 800be50:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800be54:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	681b      	ldr	r3, [r3, #0]
 800be5a:	691a      	ldr	r2, [r3, #16]
 800be5c:	687b      	ldr	r3, [r7, #4]
 800be5e:	681b      	ldr	r3, [r3, #0]
 800be60:	f022 0208 	bic.w	r2, r2, #8
 800be64:	611a      	str	r2, [r3, #16]

    /* For the IT based receive extra polling maybe required for last packet */
    if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800be66:	687b      	ldr	r3, [r7, #4]
 800be68:	681b      	ldr	r3, [r3, #0]
 800be6a:	689b      	ldr	r3, [r3, #8]
 800be6c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800be70:	2b00      	cmp	r3, #0
 800be72:	d13d      	bne.n	800bef0 <HAL_SPI_IRQHandler+0x1cc>
    {
      /* Pooling remaining data */
      while (hspi->RxXferCount != 0UL)
 800be74:	e036      	b.n	800bee4 <HAL_SPI_IRQHandler+0x1c0>
      {
        /* Receive data in 32 Bit mode */
        if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800be76:	687b      	ldr	r3, [r7, #4]
 800be78:	68db      	ldr	r3, [r3, #12]
 800be7a:	2b0f      	cmp	r3, #15
 800be7c:	d90b      	bls.n	800be96 <HAL_SPI_IRQHandler+0x172>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800be7e:	687b      	ldr	r3, [r7, #4]
 800be80:	681a      	ldr	r2, [r3, #0]
 800be82:	687b      	ldr	r3, [r7, #4]
 800be84:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800be86:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800be88:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800be8a:	687b      	ldr	r3, [r7, #4]
 800be8c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800be8e:	1d1a      	adds	r2, r3, #4
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	66da      	str	r2, [r3, #108]	@ 0x6c
 800be94:	e01d      	b.n	800bed2 <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 16 Bit mode */
        else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800be96:	687b      	ldr	r3, [r7, #4]
 800be98:	68db      	ldr	r3, [r3, #12]
 800be9a:	2b07      	cmp	r3, #7
 800be9c:	d90b      	bls.n	800beb6 <HAL_SPI_IRQHandler+0x192>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800be9e:	687b      	ldr	r3, [r7, #4]
 800bea0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800bea2:	68fa      	ldr	r2, [r7, #12]
 800bea4:	8812      	ldrh	r2, [r2, #0]
 800bea6:	b292      	uxth	r2, r2
 800bea8:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800beae:	1c9a      	adds	r2, r3, #2
 800beb0:	687b      	ldr	r3, [r7, #4]
 800beb2:	66da      	str	r2, [r3, #108]	@ 0x6c
 800beb4:	e00d      	b.n	800bed2 <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 8 Bit mode */
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800beb6:	687b      	ldr	r3, [r7, #4]
 800beb8:	681b      	ldr	r3, [r3, #0]
 800beba:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800bebe:	687b      	ldr	r3, [r7, #4]
 800bec0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800bec2:	7812      	ldrb	r2, [r2, #0]
 800bec4:	b2d2      	uxtb	r2, r2
 800bec6:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800bec8:	687b      	ldr	r3, [r7, #4]
 800beca:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800becc:	1c5a      	adds	r2, r3, #1
 800bece:	687b      	ldr	r3, [r7, #4]
 800bed0:	66da      	str	r2, [r3, #108]	@ 0x6c
        }

        hspi->RxXferCount--;
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 800bed8:	b29b      	uxth	r3, r3
 800beda:	3b01      	subs	r3, #1
 800bedc:	b29a      	uxth	r2, r3
 800bede:	687b      	ldr	r3, [r7, #4]
 800bee0:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
      while (hspi->RxXferCount != 0UL)
 800bee4:	687b      	ldr	r3, [r7, #4]
 800bee6:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 800beea:	b29b      	uxth	r3, r3
 800beec:	2b00      	cmp	r3, #0
 800beee:	d1c2      	bne.n	800be76 <HAL_SPI_IRQHandler+0x152>
      }
    }

    /* Call SPI Standard close procedure */
    SPI_CloseTransfer(hspi);
 800bef0:	6878      	ldr	r0, [r7, #4]
 800bef2:	f000 f932 	bl	800c15a <SPI_CloseTransfer>

    hspi->State = HAL_SPI_STATE_READY;
 800bef6:	687b      	ldr	r3, [r7, #4]
 800bef8:	2201      	movs	r2, #1
 800befa:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800befe:	687b      	ldr	r3, [r7, #4]
 800bf00:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800bf04:	2b00      	cmp	r3, #0
 800bf06:	d003      	beq.n	800bf10 <HAL_SPI_IRQHandler+0x1ec>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800bf08:	6878      	ldr	r0, [r7, #4]
 800bf0a:	f000 f8fa 	bl	800c102 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800bf0e:	e0d8      	b.n	800c0c2 <HAL_SPI_IRQHandler+0x39e>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 800bf10:	7cfb      	ldrb	r3, [r7, #19]
 800bf12:	2b05      	cmp	r3, #5
 800bf14:	d103      	bne.n	800bf1e <HAL_SPI_IRQHandler+0x1fa>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 800bf16:	6878      	ldr	r0, [r7, #4]
 800bf18:	f000 f8ea 	bl	800c0f0 <HAL_SPI_TxRxCpltCallback>
    else
    {
      /* End of the appropriate call */
    }

    return;
 800bf1c:	e0ce      	b.n	800c0bc <HAL_SPI_IRQHandler+0x398>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 800bf1e:	7cfb      	ldrb	r3, [r7, #19]
 800bf20:	2b04      	cmp	r3, #4
 800bf22:	d103      	bne.n	800bf2c <HAL_SPI_IRQHandler+0x208>
      HAL_SPI_RxCpltCallback(hspi);
 800bf24:	6878      	ldr	r0, [r7, #4]
 800bf26:	f000 f8da 	bl	800c0de <HAL_SPI_RxCpltCallback>
    return;
 800bf2a:	e0c7      	b.n	800c0bc <HAL_SPI_IRQHandler+0x398>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 800bf2c:	7cfb      	ldrb	r3, [r7, #19]
 800bf2e:	2b03      	cmp	r3, #3
 800bf30:	f040 80c4 	bne.w	800c0bc <HAL_SPI_IRQHandler+0x398>
      HAL_SPI_TxCpltCallback(hspi);
 800bf34:	6878      	ldr	r0, [r7, #4]
 800bf36:	f000 f8c9 	bl	800c0cc <HAL_SPI_TxCpltCallback>
    return;
 800bf3a:	e0bf      	b.n	800c0bc <HAL_SPI_IRQHandler+0x398>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 800bf3c:	69bb      	ldr	r3, [r7, #24]
 800bf3e:	f403 7358 	and.w	r3, r3, #864	@ 0x360
 800bf42:	2b00      	cmp	r3, #0
 800bf44:	f000 80bd 	beq.w	800c0c2 <HAL_SPI_IRQHandler+0x39e>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 800bf48:	69bb      	ldr	r3, [r7, #24]
 800bf4a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bf4e:	2b00      	cmp	r3, #0
 800bf50:	d00f      	beq.n	800bf72 <HAL_SPI_IRQHandler+0x24e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800bf58:	f043 0204 	orr.w	r2, r3, #4
 800bf5c:	687b      	ldr	r3, [r7, #4]
 800bf5e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800bf62:	687b      	ldr	r3, [r7, #4]
 800bf64:	681b      	ldr	r3, [r3, #0]
 800bf66:	699a      	ldr	r2, [r3, #24]
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	681b      	ldr	r3, [r3, #0]
 800bf6c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800bf70:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 800bf72:	69bb      	ldr	r3, [r7, #24]
 800bf74:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800bf78:	2b00      	cmp	r3, #0
 800bf7a:	d00f      	beq.n	800bf9c <HAL_SPI_IRQHandler+0x278>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800bf82:	f043 0201 	orr.w	r2, r3, #1
 800bf86:	687b      	ldr	r3, [r7, #4]
 800bf88:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	681b      	ldr	r3, [r3, #0]
 800bf90:	699a      	ldr	r2, [r3, #24]
 800bf92:	687b      	ldr	r3, [r7, #4]
 800bf94:	681b      	ldr	r3, [r3, #0]
 800bf96:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800bf9a:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 800bf9c:	69bb      	ldr	r3, [r7, #24]
 800bf9e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800bfa2:	2b00      	cmp	r3, #0
 800bfa4:	d00f      	beq.n	800bfc6 <HAL_SPI_IRQHandler+0x2a2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800bfa6:	687b      	ldr	r3, [r7, #4]
 800bfa8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800bfac:	f043 0208 	orr.w	r2, r3, #8
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800bfb6:	687b      	ldr	r3, [r7, #4]
 800bfb8:	681b      	ldr	r3, [r3, #0]
 800bfba:	699a      	ldr	r2, [r3, #24]
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	681b      	ldr	r3, [r3, #0]
 800bfc0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800bfc4:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 800bfc6:	69bb      	ldr	r3, [r7, #24]
 800bfc8:	f003 0320 	and.w	r3, r3, #32
 800bfcc:	2b00      	cmp	r3, #0
 800bfce:	d00f      	beq.n	800bff0 <HAL_SPI_IRQHandler+0x2cc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800bfd0:	687b      	ldr	r3, [r7, #4]
 800bfd2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800bfd6:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800bfda:	687b      	ldr	r3, [r7, #4]
 800bfdc:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	681b      	ldr	r3, [r3, #0]
 800bfe4:	699a      	ldr	r2, [r3, #24]
 800bfe6:	687b      	ldr	r3, [r7, #4]
 800bfe8:	681b      	ldr	r3, [r3, #0]
 800bfea:	f042 0220 	orr.w	r2, r2, #32
 800bfee:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800bff0:	687b      	ldr	r3, [r7, #4]
 800bff2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800bff6:	2b00      	cmp	r3, #0
 800bff8:	d062      	beq.n	800c0c0 <HAL_SPI_IRQHandler+0x39c>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 800bffa:	687b      	ldr	r3, [r7, #4]
 800bffc:	681b      	ldr	r3, [r3, #0]
 800bffe:	681a      	ldr	r2, [r3, #0]
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	681b      	ldr	r3, [r3, #0]
 800c004:	f022 0201 	bic.w	r2, r2, #1
 800c008:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 800c00a:	687b      	ldr	r3, [r7, #4]
 800c00c:	681b      	ldr	r3, [r3, #0]
 800c00e:	691b      	ldr	r3, [r3, #16]
 800c010:	687a      	ldr	r2, [r7, #4]
 800c012:	6812      	ldr	r2, [r2, #0]
 800c014:	f423 735a 	bic.w	r3, r3, #872	@ 0x368
 800c018:	f023 0303 	bic.w	r3, r3, #3
 800c01c:	6113      	str	r3, [r2, #16]
                                  SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR));

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800c01e:	697b      	ldr	r3, [r7, #20]
 800c020:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800c024:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800c028:	d13e      	bne.n	800c0a8 <HAL_SPI_IRQHandler+0x384>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800c02a:	687b      	ldr	r3, [r7, #4]
 800c02c:	681b      	ldr	r3, [r3, #0]
 800c02e:	689a      	ldr	r2, [r3, #8]
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	681b      	ldr	r3, [r3, #0]
 800c034:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 800c038:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800c03a:	687b      	ldr	r3, [r7, #4]
 800c03c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c040:	2b00      	cmp	r3, #0
 800c042:	d015      	beq.n	800c070 <HAL_SPI_IRQHandler+0x34c>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c04a:	4a1f      	ldr	r2, [pc, #124]	@ (800c0c8 <HAL_SPI_IRQHandler+0x3a4>)
 800c04c:	66da      	str	r2, [r3, #108]	@ 0x6c
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800c04e:	687b      	ldr	r3, [r7, #4]
 800c050:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c054:	4618      	mov	r0, r3
 800c056:	f7f9 faf7 	bl	8005648 <HAL_DMA_Abort_IT>
 800c05a:	4603      	mov	r3, r0
 800c05c:	2b00      	cmp	r3, #0
 800c05e:	d007      	beq.n	800c070 <HAL_SPI_IRQHandler+0x34c>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c066:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800c06a:	687b      	ldr	r3, [r7, #4]
 800c06c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800c070:	687b      	ldr	r3, [r7, #4]
 800c072:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c076:	2b00      	cmp	r3, #0
 800c078:	d022      	beq.n	800c0c0 <HAL_SPI_IRQHandler+0x39c>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800c07a:	687b      	ldr	r3, [r7, #4]
 800c07c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c080:	4a11      	ldr	r2, [pc, #68]	@ (800c0c8 <HAL_SPI_IRQHandler+0x3a4>)
 800c082:	66da      	str	r2, [r3, #108]	@ 0x6c
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800c084:	687b      	ldr	r3, [r7, #4]
 800c086:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c08a:	4618      	mov	r0, r3
 800c08c:	f7f9 fadc 	bl	8005648 <HAL_DMA_Abort_IT>
 800c090:	4603      	mov	r3, r0
 800c092:	2b00      	cmp	r3, #0
 800c094:	d014      	beq.n	800c0c0 <HAL_SPI_IRQHandler+0x39c>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800c096:	687b      	ldr	r3, [r7, #4]
 800c098:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c09c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800c0a0:	687b      	ldr	r3, [r7, #4]
 800c0a2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800c0a6:	e00b      	b.n	800c0c0 <HAL_SPI_IRQHandler+0x39c>
        hspi->State = HAL_SPI_STATE_READY;
 800c0a8:	687b      	ldr	r3, [r7, #4]
 800c0aa:	2201      	movs	r2, #1
 800c0ac:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
        HAL_SPI_ErrorCallback(hspi);
 800c0b0:	6878      	ldr	r0, [r7, #4]
 800c0b2:	f000 f826 	bl	800c102 <HAL_SPI_ErrorCallback>
    return;
 800c0b6:	e003      	b.n	800c0c0 <HAL_SPI_IRQHandler+0x39c>
    return;
 800c0b8:	bf00      	nop
 800c0ba:	e002      	b.n	800c0c2 <HAL_SPI_IRQHandler+0x39e>
    return;
 800c0bc:	bf00      	nop
 800c0be:	e000      	b.n	800c0c2 <HAL_SPI_IRQHandler+0x39e>
    return;
 800c0c0:	bf00      	nop
  }
}
 800c0c2:	3728      	adds	r7, #40	@ 0x28
 800c0c4:	46bd      	mov	sp, r7
 800c0c6:	bd80      	pop	{r7, pc}
 800c0c8:	0800c127 	.word	0x0800c127

0800c0cc <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 800c0cc:	b480      	push	{r7}
 800c0ce:	b083      	sub	sp, #12
 800c0d0:	af00      	add	r7, sp, #0
 800c0d2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 800c0d4:	bf00      	nop
 800c0d6:	370c      	adds	r7, #12
 800c0d8:	46bd      	mov	sp, r7
 800c0da:	bc80      	pop	{r7}
 800c0dc:	4770      	bx	lr

0800c0de <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 800c0de:	b480      	push	{r7}
 800c0e0:	b083      	sub	sp, #12
 800c0e2:	af00      	add	r7, sp, #0
 800c0e4:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 800c0e6:	bf00      	nop
 800c0e8:	370c      	adds	r7, #12
 800c0ea:	46bd      	mov	sp, r7
 800c0ec:	bc80      	pop	{r7}
 800c0ee:	4770      	bx	lr

0800c0f0 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 800c0f0:	b480      	push	{r7}
 800c0f2:	b083      	sub	sp, #12
 800c0f4:	af00      	add	r7, sp, #0
 800c0f6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 800c0f8:	bf00      	nop
 800c0fa:	370c      	adds	r7, #12
 800c0fc:	46bd      	mov	sp, r7
 800c0fe:	bc80      	pop	{r7}
 800c100:	4770      	bx	lr

0800c102 <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 800c102:	b480      	push	{r7}
 800c104:	b083      	sub	sp, #12
 800c106:	af00      	add	r7, sp, #0
 800c108:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800c10a:	bf00      	nop
 800c10c:	370c      	adds	r7, #12
 800c10e:	46bd      	mov	sp, r7
 800c110:	bc80      	pop	{r7}
 800c112:	4770      	bx	lr

0800c114 <HAL_SPI_SuspendCallback>:
  * @brief  SPI Suspend callback.
  * @param  hspi SPI handle.
  * @retval None
  */
__weak void HAL_SPI_SuspendCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 800c114:	b480      	push	{r7}
 800c116:	b083      	sub	sp, #12
 800c118:	af00      	add	r7, sp, #0
 800c11a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_SuspendCallback can be implemented in the user file.
   */
}
 800c11c:	bf00      	nop
 800c11e:	370c      	adds	r7, #12
 800c120:	46bd      	mov	sp, r7
 800c122:	bc80      	pop	{r7}
 800c124:	4770      	bx	lr

0800c126 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800c126:	b580      	push	{r7, lr}
 800c128:	b084      	sub	sp, #16
 800c12a:	af00      	add	r7, sp, #0
 800c12c:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c12e:	687b      	ldr	r3, [r7, #4]
 800c130:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c132:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 800c134:	68fb      	ldr	r3, [r7, #12]
 800c136:	2200      	movs	r2, #0
 800c138:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
  hspi->TxXferCount = (uint16_t) 0UL;
 800c13c:	68fb      	ldr	r3, [r7, #12]
 800c13e:	2200      	movs	r2, #0
 800c140:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 800c144:	68fb      	ldr	r3, [r7, #12]
 800c146:	2201      	movs	r2, #1
 800c148:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800c14c:	68f8      	ldr	r0, [r7, #12]
 800c14e:	f7ff ffd8 	bl	800c102 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800c152:	bf00      	nop
 800c154:	3710      	adds	r7, #16
 800c156:	46bd      	mov	sp, r7
 800c158:	bd80      	pop	{r7, pc}

0800c15a <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800c15a:	b480      	push	{r7}
 800c15c:	b085      	sub	sp, #20
 800c15e:	af00      	add	r7, sp, #0
 800c160:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800c162:	687b      	ldr	r3, [r7, #4]
 800c164:	681b      	ldr	r3, [r3, #0]
 800c166:	695b      	ldr	r3, [r3, #20]
 800c168:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800c16a:	687b      	ldr	r3, [r7, #4]
 800c16c:	681b      	ldr	r3, [r3, #0]
 800c16e:	699a      	ldr	r2, [r3, #24]
 800c170:	687b      	ldr	r3, [r7, #4]
 800c172:	681b      	ldr	r3, [r3, #0]
 800c174:	f042 0208 	orr.w	r2, r2, #8
 800c178:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800c17a:	687b      	ldr	r3, [r7, #4]
 800c17c:	681b      	ldr	r3, [r3, #0]
 800c17e:	699a      	ldr	r2, [r3, #24]
 800c180:	687b      	ldr	r3, [r7, #4]
 800c182:	681b      	ldr	r3, [r3, #0]
 800c184:	f042 0210 	orr.w	r2, r2, #16
 800c188:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800c18a:	687b      	ldr	r3, [r7, #4]
 800c18c:	681b      	ldr	r3, [r3, #0]
 800c18e:	681a      	ldr	r2, [r3, #0]
 800c190:	687b      	ldr	r3, [r7, #4]
 800c192:	681b      	ldr	r3, [r3, #0]
 800c194:	f022 0201 	bic.w	r2, r2, #1
 800c198:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	681b      	ldr	r3, [r3, #0]
 800c19e:	691b      	ldr	r3, [r3, #16]
 800c1a0:	687a      	ldr	r2, [r7, #4]
 800c1a2:	6812      	ldr	r2, [r2, #0]
 800c1a4:	f423 735b 	bic.w	r3, r3, #876	@ 0x36c
 800c1a8:	f023 0303 	bic.w	r3, r3, #3
 800c1ac:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800c1ae:	687b      	ldr	r3, [r7, #4]
 800c1b0:	681b      	ldr	r3, [r3, #0]
 800c1b2:	689a      	ldr	r2, [r3, #8]
 800c1b4:	687b      	ldr	r3, [r7, #4]
 800c1b6:	681b      	ldr	r3, [r3, #0]
 800c1b8:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 800c1bc:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800c1be:	687b      	ldr	r3, [r7, #4]
 800c1c0:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 800c1c4:	b2db      	uxtb	r3, r3
 800c1c6:	2b04      	cmp	r3, #4
 800c1c8:	d014      	beq.n	800c1f4 <SPI_CloseTransfer+0x9a>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800c1ca:	68fb      	ldr	r3, [r7, #12]
 800c1cc:	f003 0320 	and.w	r3, r3, #32
 800c1d0:	2b00      	cmp	r3, #0
 800c1d2:	d00f      	beq.n	800c1f4 <SPI_CloseTransfer+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c1da:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800c1de:	687b      	ldr	r3, [r7, #4]
 800c1e0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800c1e4:	687b      	ldr	r3, [r7, #4]
 800c1e6:	681b      	ldr	r3, [r3, #0]
 800c1e8:	699a      	ldr	r2, [r3, #24]
 800c1ea:	687b      	ldr	r3, [r7, #4]
 800c1ec:	681b      	ldr	r3, [r3, #0]
 800c1ee:	f042 0220 	orr.w	r2, r2, #32
 800c1f2:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800c1f4:	687b      	ldr	r3, [r7, #4]
 800c1f6:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 800c1fa:	b2db      	uxtb	r3, r3
 800c1fc:	2b03      	cmp	r3, #3
 800c1fe:	d014      	beq.n	800c22a <SPI_CloseTransfer+0xd0>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800c200:	68fb      	ldr	r3, [r7, #12]
 800c202:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c206:	2b00      	cmp	r3, #0
 800c208:	d00f      	beq.n	800c22a <SPI_CloseTransfer+0xd0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800c20a:	687b      	ldr	r3, [r7, #4]
 800c20c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c210:	f043 0204 	orr.w	r2, r3, #4
 800c214:	687b      	ldr	r3, [r7, #4]
 800c216:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800c21a:	687b      	ldr	r3, [r7, #4]
 800c21c:	681b      	ldr	r3, [r3, #0]
 800c21e:	699a      	ldr	r2, [r3, #24]
 800c220:	687b      	ldr	r3, [r7, #4]
 800c222:	681b      	ldr	r3, [r3, #0]
 800c224:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800c228:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800c22a:	68fb      	ldr	r3, [r7, #12]
 800c22c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800c230:	2b00      	cmp	r3, #0
 800c232:	d00f      	beq.n	800c254 <SPI_CloseTransfer+0xfa>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800c234:	687b      	ldr	r3, [r7, #4]
 800c236:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c23a:	f043 0201 	orr.w	r2, r3, #1
 800c23e:	687b      	ldr	r3, [r7, #4]
 800c240:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800c244:	687b      	ldr	r3, [r7, #4]
 800c246:	681b      	ldr	r3, [r3, #0]
 800c248:	699a      	ldr	r2, [r3, #24]
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	681b      	ldr	r3, [r3, #0]
 800c24e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800c252:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800c254:	68fb      	ldr	r3, [r7, #12]
 800c256:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c25a:	2b00      	cmp	r3, #0
 800c25c:	d00f      	beq.n	800c27e <SPI_CloseTransfer+0x124>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800c25e:	687b      	ldr	r3, [r7, #4]
 800c260:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c264:	f043 0208 	orr.w	r2, r3, #8
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800c26e:	687b      	ldr	r3, [r7, #4]
 800c270:	681b      	ldr	r3, [r3, #0]
 800c272:	699a      	ldr	r2, [r3, #24]
 800c274:	687b      	ldr	r3, [r7, #4]
 800c276:	681b      	ldr	r3, [r3, #0]
 800c278:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800c27c:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800c27e:	687b      	ldr	r3, [r7, #4]
 800c280:	2200      	movs	r2, #0
 800c282:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->RxXferCount = (uint16_t)0UL;
 800c286:	687b      	ldr	r3, [r7, #4]
 800c288:	2200      	movs	r2, #0
 800c28a:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
}
 800c28e:	bf00      	nop
 800c290:	3714      	adds	r7, #20
 800c292:	46bd      	mov	sp, r7
 800c294:	bc80      	pop	{r7}
 800c296:	4770      	bx	lr

0800c298 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800c298:	b580      	push	{r7, lr}
 800c29a:	b084      	sub	sp, #16
 800c29c:	af00      	add	r7, sp, #0
 800c29e:	60f8      	str	r0, [r7, #12]
 800c2a0:	60b9      	str	r1, [r7, #8]
 800c2a2:	603b      	str	r3, [r7, #0]
 800c2a4:	4613      	mov	r3, r2
 800c2a6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800c2a8:	e010      	b.n	800c2cc <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c2aa:	f7f9 f86b 	bl	8005384 <HAL_GetTick>
 800c2ae:	4602      	mov	r2, r0
 800c2b0:	69bb      	ldr	r3, [r7, #24]
 800c2b2:	1ad3      	subs	r3, r2, r3
 800c2b4:	683a      	ldr	r2, [r7, #0]
 800c2b6:	429a      	cmp	r2, r3
 800c2b8:	d803      	bhi.n	800c2c2 <SPI_WaitOnFlagUntilTimeout+0x2a>
 800c2ba:	683b      	ldr	r3, [r7, #0]
 800c2bc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c2c0:	d102      	bne.n	800c2c8 <SPI_WaitOnFlagUntilTimeout+0x30>
 800c2c2:	683b      	ldr	r3, [r7, #0]
 800c2c4:	2b00      	cmp	r3, #0
 800c2c6:	d101      	bne.n	800c2cc <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 800c2c8:	2303      	movs	r3, #3
 800c2ca:	e00f      	b.n	800c2ec <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800c2cc:	68fb      	ldr	r3, [r7, #12]
 800c2ce:	681b      	ldr	r3, [r3, #0]
 800c2d0:	695a      	ldr	r2, [r3, #20]
 800c2d2:	68bb      	ldr	r3, [r7, #8]
 800c2d4:	4013      	ands	r3, r2
 800c2d6:	68ba      	ldr	r2, [r7, #8]
 800c2d8:	429a      	cmp	r2, r3
 800c2da:	bf0c      	ite	eq
 800c2dc:	2301      	moveq	r3, #1
 800c2de:	2300      	movne	r3, #0
 800c2e0:	b2db      	uxtb	r3, r3
 800c2e2:	461a      	mov	r2, r3
 800c2e4:	79fb      	ldrb	r3, [r7, #7]
 800c2e6:	429a      	cmp	r2, r3
 800c2e8:	d0df      	beq.n	800c2aa <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800c2ea:	2300      	movs	r3, #0
}
 800c2ec:	4618      	mov	r0, r3
 800c2ee:	3710      	adds	r7, #16
 800c2f0:	46bd      	mov	sp, r7
 800c2f2:	bd80      	pop	{r7, pc}

0800c2f4 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 800c2f4:	b480      	push	{r7}
 800c2f6:	b085      	sub	sp, #20
 800c2f8:	af00      	add	r7, sp, #0
 800c2fa:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800c2fc:	687b      	ldr	r3, [r7, #4]
 800c2fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c300:	095b      	lsrs	r3, r3, #5
 800c302:	3301      	adds	r3, #1
 800c304:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800c306:	687b      	ldr	r3, [r7, #4]
 800c308:	68db      	ldr	r3, [r3, #12]
 800c30a:	3301      	adds	r3, #1
 800c30c:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800c30e:	68bb      	ldr	r3, [r7, #8]
 800c310:	3307      	adds	r3, #7
 800c312:	08db      	lsrs	r3, r3, #3
 800c314:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800c316:	68bb      	ldr	r3, [r7, #8]
 800c318:	68fa      	ldr	r2, [r7, #12]
 800c31a:	fb02 f303 	mul.w	r3, r2, r3
}
 800c31e:	4618      	mov	r0, r3
 800c320:	3714      	adds	r7, #20
 800c322:	46bd      	mov	sp, r7
 800c324:	bc80      	pop	{r7}
 800c326:	4770      	bx	lr

0800c328 <HAL_SPIEx_SetConfigAutonomousMode>:
  *                the configuration information of the autonomous mode for the specified SPIx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPIEx_SetConfigAutonomousMode(SPI_HandleTypeDef *hspi,
                                                    const SPI_AutonomousModeConfTypeDef *sConfig)
{
 800c328:	b480      	push	{r7}
 800c32a:	b083      	sub	sp, #12
 800c32c:	af00      	add	r7, sp, #0
 800c32e:	6078      	str	r0, [r7, #4]
 800c330:	6039      	str	r1, [r7, #0]
  if (hspi->State == HAL_SPI_STATE_READY)
 800c332:	687b      	ldr	r3, [r7, #4]
 800c334:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 800c338:	b2db      	uxtb	r3, r3
 800c33a:	2b01      	cmp	r3, #1
 800c33c:	d12e      	bne.n	800c39c <HAL_SPIEx_SetConfigAutonomousMode+0x74>
  {
    /* Process Locked */
    __HAL_LOCK(hspi);
 800c33e:	687b      	ldr	r3, [r7, #4]
 800c340:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 800c344:	2b01      	cmp	r3, #1
 800c346:	d101      	bne.n	800c34c <HAL_SPIEx_SetConfigAutonomousMode+0x24>
 800c348:	2302      	movs	r3, #2
 800c34a:	e028      	b.n	800c39e <HAL_SPIEx_SetConfigAutonomousMode+0x76>
 800c34c:	687b      	ldr	r3, [r7, #4]
 800c34e:	2201      	movs	r2, #1
 800c350:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

    hspi->State = HAL_SPI_STATE_BUSY;
 800c354:	687b      	ldr	r3, [r7, #4]
 800c356:	2202      	movs	r2, #2
 800c358:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
    assert_param(IS_SPI_AUTONOMOUS_INSTANCE(hspi->Instance));
    assert_param(IS_SPI_TRIG_SOURCE(hspi->Instance, sConfig->TriggerSelection));
    assert_param(IS_SPI_AUTO_MODE_TRG_POL(sConfig->TriggerPolarity));

    /* Disable the selected SPI peripheral to be able to configure AUTOCR */
    __HAL_SPI_DISABLE(hspi);
 800c35c:	687b      	ldr	r3, [r7, #4]
 800c35e:	681b      	ldr	r3, [r3, #0]
 800c360:	681a      	ldr	r2, [r3, #0]
 800c362:	687b      	ldr	r3, [r7, #4]
 800c364:	681b      	ldr	r3, [r3, #0]
 800c366:	f022 0201 	bic.w	r2, r2, #1
 800c36a:	601a      	str	r2, [r3, #0]

    /* SPIx AUTOCR Configuration */
    WRITE_REG(hspi->Instance->AUTOCR, (sConfig->TriggerState | ((sConfig->TriggerSelection) & SPI_AUTOCR_TRIGSEL_Msk) |
 800c36c:	683b      	ldr	r3, [r7, #0]
 800c36e:	681a      	ldr	r2, [r3, #0]
 800c370:	683b      	ldr	r3, [r7, #0]
 800c372:	685b      	ldr	r3, [r3, #4]
 800c374:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 800c378:	ea42 0103 	orr.w	r1, r2, r3
 800c37c:	683b      	ldr	r3, [r7, #0]
 800c37e:	689a      	ldr	r2, [r3, #8]
 800c380:	687b      	ldr	r3, [r7, #4]
 800c382:	681b      	ldr	r3, [r3, #0]
 800c384:	430a      	orrs	r2, r1
 800c386:	61da      	str	r2, [r3, #28]
                                       sConfig->TriggerPolarity));

    hspi->State = HAL_SPI_STATE_READY;
 800c388:	687b      	ldr	r3, [r7, #4]
 800c38a:	2201      	movs	r2, #1
 800c38c:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 800c390:	687b      	ldr	r3, [r7, #4]
 800c392:	2200      	movs	r2, #0
 800c394:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800c398:	2300      	movs	r3, #0
 800c39a:	e000      	b.n	800c39e <HAL_SPIEx_SetConfigAutonomousMode+0x76>
  }
  else
  {
    return HAL_ERROR;
 800c39c:	2301      	movs	r3, #1
  }
}
 800c39e:	4618      	mov	r0, r3
 800c3a0:	370c      	adds	r7, #12
 800c3a2:	46bd      	mov	sp, r7
 800c3a4:	bc80      	pop	{r7}
 800c3a6:	4770      	bx	lr

0800c3a8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800c3a8:	b580      	push	{r7, lr}
 800c3aa:	b082      	sub	sp, #8
 800c3ac:	af00      	add	r7, sp, #0
 800c3ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c3b0:	687b      	ldr	r3, [r7, #4]
 800c3b2:	2b00      	cmp	r3, #0
 800c3b4:	d101      	bne.n	800c3ba <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800c3b6:	2301      	movs	r3, #1
 800c3b8:	e049      	b.n	800c44e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c3ba:	687b      	ldr	r3, [r7, #4]
 800c3bc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800c3c0:	b2db      	uxtb	r3, r3
 800c3c2:	2b00      	cmp	r3, #0
 800c3c4:	d106      	bne.n	800c3d4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c3c6:	687b      	ldr	r3, [r7, #4]
 800c3c8:	2200      	movs	r2, #0
 800c3ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800c3ce:	6878      	ldr	r0, [r7, #4]
 800c3d0:	f7f8 fc90 	bl	8004cf4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c3d4:	687b      	ldr	r3, [r7, #4]
 800c3d6:	2202      	movs	r2, #2
 800c3d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c3dc:	687b      	ldr	r3, [r7, #4]
 800c3de:	681a      	ldr	r2, [r3, #0]
 800c3e0:	687b      	ldr	r3, [r7, #4]
 800c3e2:	3304      	adds	r3, #4
 800c3e4:	4619      	mov	r1, r3
 800c3e6:	4610      	mov	r0, r2
 800c3e8:	f000 fb4a 	bl	800ca80 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c3ec:	687b      	ldr	r3, [r7, #4]
 800c3ee:	2201      	movs	r2, #1
 800c3f0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c3f4:	687b      	ldr	r3, [r7, #4]
 800c3f6:	2201      	movs	r2, #1
 800c3f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800c3fc:	687b      	ldr	r3, [r7, #4]
 800c3fe:	2201      	movs	r2, #1
 800c400:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800c404:	687b      	ldr	r3, [r7, #4]
 800c406:	2201      	movs	r2, #1
 800c408:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800c40c:	687b      	ldr	r3, [r7, #4]
 800c40e:	2201      	movs	r2, #1
 800c410:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800c414:	687b      	ldr	r3, [r7, #4]
 800c416:	2201      	movs	r2, #1
 800c418:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800c41c:	687b      	ldr	r3, [r7, #4]
 800c41e:	2201      	movs	r2, #1
 800c420:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c424:	687b      	ldr	r3, [r7, #4]
 800c426:	2201      	movs	r2, #1
 800c428:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800c42c:	687b      	ldr	r3, [r7, #4]
 800c42e:	2201      	movs	r2, #1
 800c430:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800c434:	687b      	ldr	r3, [r7, #4]
 800c436:	2201      	movs	r2, #1
 800c438:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800c43c:	687b      	ldr	r3, [r7, #4]
 800c43e:	2201      	movs	r2, #1
 800c440:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c444:	687b      	ldr	r3, [r7, #4]
 800c446:	2201      	movs	r2, #1
 800c448:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800c44c:	2300      	movs	r3, #0
}
 800c44e:	4618      	mov	r0, r3
 800c450:	3708      	adds	r7, #8
 800c452:	46bd      	mov	sp, r7
 800c454:	bd80      	pop	{r7, pc}
	...

0800c458 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800c458:	b480      	push	{r7}
 800c45a:	b085      	sub	sp, #20
 800c45c:	af00      	add	r7, sp, #0
 800c45e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800c460:	687b      	ldr	r3, [r7, #4]
 800c462:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800c466:	b2db      	uxtb	r3, r3
 800c468:	2b01      	cmp	r3, #1
 800c46a:	d001      	beq.n	800c470 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800c46c:	2301      	movs	r3, #1
 800c46e:	e072      	b.n	800c556 <HAL_TIM_Base_Start_IT+0xfe>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c470:	687b      	ldr	r3, [r7, #4]
 800c472:	2202      	movs	r2, #2
 800c474:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800c478:	687b      	ldr	r3, [r7, #4]
 800c47a:	681b      	ldr	r3, [r3, #0]
 800c47c:	68da      	ldr	r2, [r3, #12]
 800c47e:	687b      	ldr	r3, [r7, #4]
 800c480:	681b      	ldr	r3, [r3, #0]
 800c482:	f042 0201 	orr.w	r2, r2, #1
 800c486:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c488:	687b      	ldr	r3, [r7, #4]
 800c48a:	681b      	ldr	r3, [r3, #0]
 800c48c:	4a34      	ldr	r2, [pc, #208]	@ (800c560 <HAL_TIM_Base_Start_IT+0x108>)
 800c48e:	4293      	cmp	r3, r2
 800c490:	d040      	beq.n	800c514 <HAL_TIM_Base_Start_IT+0xbc>
 800c492:	687b      	ldr	r3, [r7, #4]
 800c494:	681b      	ldr	r3, [r3, #0]
 800c496:	4a33      	ldr	r2, [pc, #204]	@ (800c564 <HAL_TIM_Base_Start_IT+0x10c>)
 800c498:	4293      	cmp	r3, r2
 800c49a:	d03b      	beq.n	800c514 <HAL_TIM_Base_Start_IT+0xbc>
 800c49c:	687b      	ldr	r3, [r7, #4]
 800c49e:	681b      	ldr	r3, [r3, #0]
 800c4a0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c4a4:	d036      	beq.n	800c514 <HAL_TIM_Base_Start_IT+0xbc>
 800c4a6:	687b      	ldr	r3, [r7, #4]
 800c4a8:	681b      	ldr	r3, [r3, #0]
 800c4aa:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800c4ae:	d031      	beq.n	800c514 <HAL_TIM_Base_Start_IT+0xbc>
 800c4b0:	687b      	ldr	r3, [r7, #4]
 800c4b2:	681b      	ldr	r3, [r3, #0]
 800c4b4:	4a2c      	ldr	r2, [pc, #176]	@ (800c568 <HAL_TIM_Base_Start_IT+0x110>)
 800c4b6:	4293      	cmp	r3, r2
 800c4b8:	d02c      	beq.n	800c514 <HAL_TIM_Base_Start_IT+0xbc>
 800c4ba:	687b      	ldr	r3, [r7, #4]
 800c4bc:	681b      	ldr	r3, [r3, #0]
 800c4be:	4a2b      	ldr	r2, [pc, #172]	@ (800c56c <HAL_TIM_Base_Start_IT+0x114>)
 800c4c0:	4293      	cmp	r3, r2
 800c4c2:	d027      	beq.n	800c514 <HAL_TIM_Base_Start_IT+0xbc>
 800c4c4:	687b      	ldr	r3, [r7, #4]
 800c4c6:	681b      	ldr	r3, [r3, #0]
 800c4c8:	4a29      	ldr	r2, [pc, #164]	@ (800c570 <HAL_TIM_Base_Start_IT+0x118>)
 800c4ca:	4293      	cmp	r3, r2
 800c4cc:	d022      	beq.n	800c514 <HAL_TIM_Base_Start_IT+0xbc>
 800c4ce:	687b      	ldr	r3, [r7, #4]
 800c4d0:	681b      	ldr	r3, [r3, #0]
 800c4d2:	4a28      	ldr	r2, [pc, #160]	@ (800c574 <HAL_TIM_Base_Start_IT+0x11c>)
 800c4d4:	4293      	cmp	r3, r2
 800c4d6:	d01d      	beq.n	800c514 <HAL_TIM_Base_Start_IT+0xbc>
 800c4d8:	687b      	ldr	r3, [r7, #4]
 800c4da:	681b      	ldr	r3, [r3, #0]
 800c4dc:	4a26      	ldr	r2, [pc, #152]	@ (800c578 <HAL_TIM_Base_Start_IT+0x120>)
 800c4de:	4293      	cmp	r3, r2
 800c4e0:	d018      	beq.n	800c514 <HAL_TIM_Base_Start_IT+0xbc>
 800c4e2:	687b      	ldr	r3, [r7, #4]
 800c4e4:	681b      	ldr	r3, [r3, #0]
 800c4e6:	4a25      	ldr	r2, [pc, #148]	@ (800c57c <HAL_TIM_Base_Start_IT+0x124>)
 800c4e8:	4293      	cmp	r3, r2
 800c4ea:	d013      	beq.n	800c514 <HAL_TIM_Base_Start_IT+0xbc>
 800c4ec:	687b      	ldr	r3, [r7, #4]
 800c4ee:	681b      	ldr	r3, [r3, #0]
 800c4f0:	4a23      	ldr	r2, [pc, #140]	@ (800c580 <HAL_TIM_Base_Start_IT+0x128>)
 800c4f2:	4293      	cmp	r3, r2
 800c4f4:	d00e      	beq.n	800c514 <HAL_TIM_Base_Start_IT+0xbc>
 800c4f6:	687b      	ldr	r3, [r7, #4]
 800c4f8:	681b      	ldr	r3, [r3, #0]
 800c4fa:	4a22      	ldr	r2, [pc, #136]	@ (800c584 <HAL_TIM_Base_Start_IT+0x12c>)
 800c4fc:	4293      	cmp	r3, r2
 800c4fe:	d009      	beq.n	800c514 <HAL_TIM_Base_Start_IT+0xbc>
 800c500:	687b      	ldr	r3, [r7, #4]
 800c502:	681b      	ldr	r3, [r3, #0]
 800c504:	4a20      	ldr	r2, [pc, #128]	@ (800c588 <HAL_TIM_Base_Start_IT+0x130>)
 800c506:	4293      	cmp	r3, r2
 800c508:	d004      	beq.n	800c514 <HAL_TIM_Base_Start_IT+0xbc>
 800c50a:	687b      	ldr	r3, [r7, #4]
 800c50c:	681b      	ldr	r3, [r3, #0]
 800c50e:	4a1f      	ldr	r2, [pc, #124]	@ (800c58c <HAL_TIM_Base_Start_IT+0x134>)
 800c510:	4293      	cmp	r3, r2
 800c512:	d115      	bne.n	800c540 <HAL_TIM_Base_Start_IT+0xe8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c514:	687b      	ldr	r3, [r7, #4]
 800c516:	681b      	ldr	r3, [r3, #0]
 800c518:	689a      	ldr	r2, [r3, #8]
 800c51a:	4b1d      	ldr	r3, [pc, #116]	@ (800c590 <HAL_TIM_Base_Start_IT+0x138>)
 800c51c:	4013      	ands	r3, r2
 800c51e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c520:	68fb      	ldr	r3, [r7, #12]
 800c522:	2b06      	cmp	r3, #6
 800c524:	d015      	beq.n	800c552 <HAL_TIM_Base_Start_IT+0xfa>
 800c526:	68fb      	ldr	r3, [r7, #12]
 800c528:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c52c:	d011      	beq.n	800c552 <HAL_TIM_Base_Start_IT+0xfa>
    {
      __HAL_TIM_ENABLE(htim);
 800c52e:	687b      	ldr	r3, [r7, #4]
 800c530:	681b      	ldr	r3, [r3, #0]
 800c532:	681a      	ldr	r2, [r3, #0]
 800c534:	687b      	ldr	r3, [r7, #4]
 800c536:	681b      	ldr	r3, [r3, #0]
 800c538:	f042 0201 	orr.w	r2, r2, #1
 800c53c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c53e:	e008      	b.n	800c552 <HAL_TIM_Base_Start_IT+0xfa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800c540:	687b      	ldr	r3, [r7, #4]
 800c542:	681b      	ldr	r3, [r3, #0]
 800c544:	681a      	ldr	r2, [r3, #0]
 800c546:	687b      	ldr	r3, [r7, #4]
 800c548:	681b      	ldr	r3, [r3, #0]
 800c54a:	f042 0201 	orr.w	r2, r2, #1
 800c54e:	601a      	str	r2, [r3, #0]
 800c550:	e000      	b.n	800c554 <HAL_TIM_Base_Start_IT+0xfc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c552:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800c554:	2300      	movs	r3, #0
}
 800c556:	4618      	mov	r0, r3
 800c558:	3714      	adds	r7, #20
 800c55a:	46bd      	mov	sp, r7
 800c55c:	bc80      	pop	{r7}
 800c55e:	4770      	bx	lr
 800c560:	40012c00 	.word	0x40012c00
 800c564:	50012c00 	.word	0x50012c00
 800c568:	40000400 	.word	0x40000400
 800c56c:	50000400 	.word	0x50000400
 800c570:	40000800 	.word	0x40000800
 800c574:	50000800 	.word	0x50000800
 800c578:	40000c00 	.word	0x40000c00
 800c57c:	50000c00 	.word	0x50000c00
 800c580:	40013400 	.word	0x40013400
 800c584:	50013400 	.word	0x50013400
 800c588:	40014000 	.word	0x40014000
 800c58c:	50014000 	.word	0x50014000
 800c590:	00010007 	.word	0x00010007

0800c594 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800c594:	b580      	push	{r7, lr}
 800c596:	b084      	sub	sp, #16
 800c598:	af00      	add	r7, sp, #0
 800c59a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800c59c:	687b      	ldr	r3, [r7, #4]
 800c59e:	681b      	ldr	r3, [r3, #0]
 800c5a0:	68db      	ldr	r3, [r3, #12]
 800c5a2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800c5a4:	687b      	ldr	r3, [r7, #4]
 800c5a6:	681b      	ldr	r3, [r3, #0]
 800c5a8:	691b      	ldr	r3, [r3, #16]
 800c5aa:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800c5ac:	68bb      	ldr	r3, [r7, #8]
 800c5ae:	f003 0302 	and.w	r3, r3, #2
 800c5b2:	2b00      	cmp	r3, #0
 800c5b4:	d020      	beq.n	800c5f8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800c5b6:	68fb      	ldr	r3, [r7, #12]
 800c5b8:	f003 0302 	and.w	r3, r3, #2
 800c5bc:	2b00      	cmp	r3, #0
 800c5be:	d01b      	beq.n	800c5f8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800c5c0:	687b      	ldr	r3, [r7, #4]
 800c5c2:	681b      	ldr	r3, [r3, #0]
 800c5c4:	f06f 0202 	mvn.w	r2, #2
 800c5c8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800c5ca:	687b      	ldr	r3, [r7, #4]
 800c5cc:	2201      	movs	r2, #1
 800c5ce:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800c5d0:	687b      	ldr	r3, [r7, #4]
 800c5d2:	681b      	ldr	r3, [r3, #0]
 800c5d4:	699b      	ldr	r3, [r3, #24]
 800c5d6:	f003 0303 	and.w	r3, r3, #3
 800c5da:	2b00      	cmp	r3, #0
 800c5dc:	d003      	beq.n	800c5e6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800c5de:	6878      	ldr	r0, [r7, #4]
 800c5e0:	f000 fa33 	bl	800ca4a <HAL_TIM_IC_CaptureCallback>
 800c5e4:	e005      	b.n	800c5f2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800c5e6:	6878      	ldr	r0, [r7, #4]
 800c5e8:	f000 fa26 	bl	800ca38 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c5ec:	6878      	ldr	r0, [r7, #4]
 800c5ee:	f000 fa35 	bl	800ca5c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c5f2:	687b      	ldr	r3, [r7, #4]
 800c5f4:	2200      	movs	r2, #0
 800c5f6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800c5f8:	68bb      	ldr	r3, [r7, #8]
 800c5fa:	f003 0304 	and.w	r3, r3, #4
 800c5fe:	2b00      	cmp	r3, #0
 800c600:	d020      	beq.n	800c644 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800c602:	68fb      	ldr	r3, [r7, #12]
 800c604:	f003 0304 	and.w	r3, r3, #4
 800c608:	2b00      	cmp	r3, #0
 800c60a:	d01b      	beq.n	800c644 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800c60c:	687b      	ldr	r3, [r7, #4]
 800c60e:	681b      	ldr	r3, [r3, #0]
 800c610:	f06f 0204 	mvn.w	r2, #4
 800c614:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800c616:	687b      	ldr	r3, [r7, #4]
 800c618:	2202      	movs	r2, #2
 800c61a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800c61c:	687b      	ldr	r3, [r7, #4]
 800c61e:	681b      	ldr	r3, [r3, #0]
 800c620:	699b      	ldr	r3, [r3, #24]
 800c622:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800c626:	2b00      	cmp	r3, #0
 800c628:	d003      	beq.n	800c632 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c62a:	6878      	ldr	r0, [r7, #4]
 800c62c:	f000 fa0d 	bl	800ca4a <HAL_TIM_IC_CaptureCallback>
 800c630:	e005      	b.n	800c63e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c632:	6878      	ldr	r0, [r7, #4]
 800c634:	f000 fa00 	bl	800ca38 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c638:	6878      	ldr	r0, [r7, #4]
 800c63a:	f000 fa0f 	bl	800ca5c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c63e:	687b      	ldr	r3, [r7, #4]
 800c640:	2200      	movs	r2, #0
 800c642:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800c644:	68bb      	ldr	r3, [r7, #8]
 800c646:	f003 0308 	and.w	r3, r3, #8
 800c64a:	2b00      	cmp	r3, #0
 800c64c:	d020      	beq.n	800c690 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800c64e:	68fb      	ldr	r3, [r7, #12]
 800c650:	f003 0308 	and.w	r3, r3, #8
 800c654:	2b00      	cmp	r3, #0
 800c656:	d01b      	beq.n	800c690 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800c658:	687b      	ldr	r3, [r7, #4]
 800c65a:	681b      	ldr	r3, [r3, #0]
 800c65c:	f06f 0208 	mvn.w	r2, #8
 800c660:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800c662:	687b      	ldr	r3, [r7, #4]
 800c664:	2204      	movs	r2, #4
 800c666:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800c668:	687b      	ldr	r3, [r7, #4]
 800c66a:	681b      	ldr	r3, [r3, #0]
 800c66c:	69db      	ldr	r3, [r3, #28]
 800c66e:	f003 0303 	and.w	r3, r3, #3
 800c672:	2b00      	cmp	r3, #0
 800c674:	d003      	beq.n	800c67e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c676:	6878      	ldr	r0, [r7, #4]
 800c678:	f000 f9e7 	bl	800ca4a <HAL_TIM_IC_CaptureCallback>
 800c67c:	e005      	b.n	800c68a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c67e:	6878      	ldr	r0, [r7, #4]
 800c680:	f000 f9da 	bl	800ca38 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c684:	6878      	ldr	r0, [r7, #4]
 800c686:	f000 f9e9 	bl	800ca5c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c68a:	687b      	ldr	r3, [r7, #4]
 800c68c:	2200      	movs	r2, #0
 800c68e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800c690:	68bb      	ldr	r3, [r7, #8]
 800c692:	f003 0310 	and.w	r3, r3, #16
 800c696:	2b00      	cmp	r3, #0
 800c698:	d020      	beq.n	800c6dc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800c69a:	68fb      	ldr	r3, [r7, #12]
 800c69c:	f003 0310 	and.w	r3, r3, #16
 800c6a0:	2b00      	cmp	r3, #0
 800c6a2:	d01b      	beq.n	800c6dc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800c6a4:	687b      	ldr	r3, [r7, #4]
 800c6a6:	681b      	ldr	r3, [r3, #0]
 800c6a8:	f06f 0210 	mvn.w	r2, #16
 800c6ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800c6ae:	687b      	ldr	r3, [r7, #4]
 800c6b0:	2208      	movs	r2, #8
 800c6b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	681b      	ldr	r3, [r3, #0]
 800c6b8:	69db      	ldr	r3, [r3, #28]
 800c6ba:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800c6be:	2b00      	cmp	r3, #0
 800c6c0:	d003      	beq.n	800c6ca <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c6c2:	6878      	ldr	r0, [r7, #4]
 800c6c4:	f000 f9c1 	bl	800ca4a <HAL_TIM_IC_CaptureCallback>
 800c6c8:	e005      	b.n	800c6d6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c6ca:	6878      	ldr	r0, [r7, #4]
 800c6cc:	f000 f9b4 	bl	800ca38 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c6d0:	6878      	ldr	r0, [r7, #4]
 800c6d2:	f000 f9c3 	bl	800ca5c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c6d6:	687b      	ldr	r3, [r7, #4]
 800c6d8:	2200      	movs	r2, #0
 800c6da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800c6dc:	68bb      	ldr	r3, [r7, #8]
 800c6de:	f003 0301 	and.w	r3, r3, #1
 800c6e2:	2b00      	cmp	r3, #0
 800c6e4:	d00c      	beq.n	800c700 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800c6e6:	68fb      	ldr	r3, [r7, #12]
 800c6e8:	f003 0301 	and.w	r3, r3, #1
 800c6ec:	2b00      	cmp	r3, #0
 800c6ee:	d007      	beq.n	800c700 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800c6f0:	687b      	ldr	r3, [r7, #4]
 800c6f2:	681b      	ldr	r3, [r3, #0]
 800c6f4:	f06f 0201 	mvn.w	r2, #1
 800c6f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800c6fa:	6878      	ldr	r0, [r7, #4]
 800c6fc:	f7f7 fcc8 	bl	8004090 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800c700:	68bb      	ldr	r3, [r7, #8]
 800c702:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c706:	2b00      	cmp	r3, #0
 800c708:	d104      	bne.n	800c714 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800c70a:	68bb      	ldr	r3, [r7, #8]
 800c70c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800c710:	2b00      	cmp	r3, #0
 800c712:	d00c      	beq.n	800c72e <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800c714:	68fb      	ldr	r3, [r7, #12]
 800c716:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c71a:	2b00      	cmp	r3, #0
 800c71c:	d007      	beq.n	800c72e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800c71e:	687b      	ldr	r3, [r7, #4]
 800c720:	681b      	ldr	r3, [r3, #0]
 800c722:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800c726:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800c728:	6878      	ldr	r0, [r7, #4]
 800c72a:	f000 fc6c 	bl	800d006 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800c72e:	68bb      	ldr	r3, [r7, #8]
 800c730:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c734:	2b00      	cmp	r3, #0
 800c736:	d00c      	beq.n	800c752 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800c738:	68fb      	ldr	r3, [r7, #12]
 800c73a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c73e:	2b00      	cmp	r3, #0
 800c740:	d007      	beq.n	800c752 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800c742:	687b      	ldr	r3, [r7, #4]
 800c744:	681b      	ldr	r3, [r3, #0]
 800c746:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800c74a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800c74c:	6878      	ldr	r0, [r7, #4]
 800c74e:	f000 fc63 	bl	800d018 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800c752:	68bb      	ldr	r3, [r7, #8]
 800c754:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c758:	2b00      	cmp	r3, #0
 800c75a:	d00c      	beq.n	800c776 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800c75c:	68fb      	ldr	r3, [r7, #12]
 800c75e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c762:	2b00      	cmp	r3, #0
 800c764:	d007      	beq.n	800c776 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800c766:	687b      	ldr	r3, [r7, #4]
 800c768:	681b      	ldr	r3, [r3, #0]
 800c76a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800c76e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800c770:	6878      	ldr	r0, [r7, #4]
 800c772:	f000 f97c 	bl	800ca6e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800c776:	68bb      	ldr	r3, [r7, #8]
 800c778:	f003 0320 	and.w	r3, r3, #32
 800c77c:	2b00      	cmp	r3, #0
 800c77e:	d00c      	beq.n	800c79a <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800c780:	68fb      	ldr	r3, [r7, #12]
 800c782:	f003 0320 	and.w	r3, r3, #32
 800c786:	2b00      	cmp	r3, #0
 800c788:	d007      	beq.n	800c79a <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800c78a:	687b      	ldr	r3, [r7, #4]
 800c78c:	681b      	ldr	r3, [r3, #0]
 800c78e:	f06f 0220 	mvn.w	r2, #32
 800c792:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800c794:	6878      	ldr	r0, [r7, #4]
 800c796:	f000 fc2d 	bl	800cff4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 800c79a:	68bb      	ldr	r3, [r7, #8]
 800c79c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800c7a0:	2b00      	cmp	r3, #0
 800c7a2:	d00c      	beq.n	800c7be <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 800c7a4:	68fb      	ldr	r3, [r7, #12]
 800c7a6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800c7aa:	2b00      	cmp	r3, #0
 800c7ac:	d007      	beq.n	800c7be <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 800c7ae:	687b      	ldr	r3, [r7, #4]
 800c7b0:	681b      	ldr	r3, [r3, #0]
 800c7b2:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 800c7b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 800c7b8:	6878      	ldr	r0, [r7, #4]
 800c7ba:	f000 fc36 	bl	800d02a <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 800c7be:	68bb      	ldr	r3, [r7, #8]
 800c7c0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800c7c4:	2b00      	cmp	r3, #0
 800c7c6:	d00c      	beq.n	800c7e2 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 800c7c8:	68fb      	ldr	r3, [r7, #12]
 800c7ca:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800c7ce:	2b00      	cmp	r3, #0
 800c7d0:	d007      	beq.n	800c7e2 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 800c7d2:	687b      	ldr	r3, [r7, #4]
 800c7d4:	681b      	ldr	r3, [r3, #0]
 800c7d6:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 800c7da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 800c7dc:	6878      	ldr	r0, [r7, #4]
 800c7de:	f000 fc2d 	bl	800d03c <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 800c7e2:	68bb      	ldr	r3, [r7, #8]
 800c7e4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800c7e8:	2b00      	cmp	r3, #0
 800c7ea:	d00c      	beq.n	800c806 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 800c7ec:	68fb      	ldr	r3, [r7, #12]
 800c7ee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800c7f2:	2b00      	cmp	r3, #0
 800c7f4:	d007      	beq.n	800c806 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 800c7f6:	687b      	ldr	r3, [r7, #4]
 800c7f8:	681b      	ldr	r3, [r3, #0]
 800c7fa:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 800c7fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800c800:	6878      	ldr	r0, [r7, #4]
 800c802:	f000 fc24 	bl	800d04e <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 800c806:	68bb      	ldr	r3, [r7, #8]
 800c808:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c80c:	2b00      	cmp	r3, #0
 800c80e:	d00c      	beq.n	800c82a <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 800c810:	68fb      	ldr	r3, [r7, #12]
 800c812:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c816:	2b00      	cmp	r3, #0
 800c818:	d007      	beq.n	800c82a <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 800c81a:	687b      	ldr	r3, [r7, #4]
 800c81c:	681b      	ldr	r3, [r3, #0]
 800c81e:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 800c822:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800c824:	6878      	ldr	r0, [r7, #4]
 800c826:	f000 fc1b 	bl	800d060 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800c82a:	bf00      	nop
 800c82c:	3710      	adds	r7, #16
 800c82e:	46bd      	mov	sp, r7
 800c830:	bd80      	pop	{r7, pc}
	...

0800c834 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800c834:	b580      	push	{r7, lr}
 800c836:	b084      	sub	sp, #16
 800c838:	af00      	add	r7, sp, #0
 800c83a:	6078      	str	r0, [r7, #4]
 800c83c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800c83e:	2300      	movs	r3, #0
 800c840:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800c842:	687b      	ldr	r3, [r7, #4]
 800c844:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800c848:	2b01      	cmp	r3, #1
 800c84a:	d101      	bne.n	800c850 <HAL_TIM_ConfigClockSource+0x1c>
 800c84c:	2302      	movs	r3, #2
 800c84e:	e0e6      	b.n	800ca1e <HAL_TIM_ConfigClockSource+0x1ea>
 800c850:	687b      	ldr	r3, [r7, #4]
 800c852:	2201      	movs	r2, #1
 800c854:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800c858:	687b      	ldr	r3, [r7, #4]
 800c85a:	2202      	movs	r2, #2
 800c85c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800c860:	687b      	ldr	r3, [r7, #4]
 800c862:	681b      	ldr	r3, [r3, #0]
 800c864:	689b      	ldr	r3, [r3, #8]
 800c866:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800c868:	68bb      	ldr	r3, [r7, #8]
 800c86a:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 800c86e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800c872:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c874:	68bb      	ldr	r3, [r7, #8]
 800c876:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800c87a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800c87c:	687b      	ldr	r3, [r7, #4]
 800c87e:	681b      	ldr	r3, [r3, #0]
 800c880:	68ba      	ldr	r2, [r7, #8]
 800c882:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800c884:	683b      	ldr	r3, [r7, #0]
 800c886:	681b      	ldr	r3, [r3, #0]
 800c888:	4a67      	ldr	r2, [pc, #412]	@ (800ca28 <HAL_TIM_ConfigClockSource+0x1f4>)
 800c88a:	4293      	cmp	r3, r2
 800c88c:	f000 80b1 	beq.w	800c9f2 <HAL_TIM_ConfigClockSource+0x1be>
 800c890:	4a65      	ldr	r2, [pc, #404]	@ (800ca28 <HAL_TIM_ConfigClockSource+0x1f4>)
 800c892:	4293      	cmp	r3, r2
 800c894:	f200 80b6 	bhi.w	800ca04 <HAL_TIM_ConfigClockSource+0x1d0>
 800c898:	4a64      	ldr	r2, [pc, #400]	@ (800ca2c <HAL_TIM_ConfigClockSource+0x1f8>)
 800c89a:	4293      	cmp	r3, r2
 800c89c:	f000 80a9 	beq.w	800c9f2 <HAL_TIM_ConfigClockSource+0x1be>
 800c8a0:	4a62      	ldr	r2, [pc, #392]	@ (800ca2c <HAL_TIM_ConfigClockSource+0x1f8>)
 800c8a2:	4293      	cmp	r3, r2
 800c8a4:	f200 80ae 	bhi.w	800ca04 <HAL_TIM_ConfigClockSource+0x1d0>
 800c8a8:	4a61      	ldr	r2, [pc, #388]	@ (800ca30 <HAL_TIM_ConfigClockSource+0x1fc>)
 800c8aa:	4293      	cmp	r3, r2
 800c8ac:	f000 80a1 	beq.w	800c9f2 <HAL_TIM_ConfigClockSource+0x1be>
 800c8b0:	4a5f      	ldr	r2, [pc, #380]	@ (800ca30 <HAL_TIM_ConfigClockSource+0x1fc>)
 800c8b2:	4293      	cmp	r3, r2
 800c8b4:	f200 80a6 	bhi.w	800ca04 <HAL_TIM_ConfigClockSource+0x1d0>
 800c8b8:	4a5e      	ldr	r2, [pc, #376]	@ (800ca34 <HAL_TIM_ConfigClockSource+0x200>)
 800c8ba:	4293      	cmp	r3, r2
 800c8bc:	f000 8099 	beq.w	800c9f2 <HAL_TIM_ConfigClockSource+0x1be>
 800c8c0:	4a5c      	ldr	r2, [pc, #368]	@ (800ca34 <HAL_TIM_ConfigClockSource+0x200>)
 800c8c2:	4293      	cmp	r3, r2
 800c8c4:	f200 809e 	bhi.w	800ca04 <HAL_TIM_ConfigClockSource+0x1d0>
 800c8c8:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800c8cc:	f000 8091 	beq.w	800c9f2 <HAL_TIM_ConfigClockSource+0x1be>
 800c8d0:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800c8d4:	f200 8096 	bhi.w	800ca04 <HAL_TIM_ConfigClockSource+0x1d0>
 800c8d8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800c8dc:	f000 8089 	beq.w	800c9f2 <HAL_TIM_ConfigClockSource+0x1be>
 800c8e0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800c8e4:	f200 808e 	bhi.w	800ca04 <HAL_TIM_ConfigClockSource+0x1d0>
 800c8e8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c8ec:	d03e      	beq.n	800c96c <HAL_TIM_ConfigClockSource+0x138>
 800c8ee:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c8f2:	f200 8087 	bhi.w	800ca04 <HAL_TIM_ConfigClockSource+0x1d0>
 800c8f6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c8fa:	f000 8086 	beq.w	800ca0a <HAL_TIM_ConfigClockSource+0x1d6>
 800c8fe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c902:	d87f      	bhi.n	800ca04 <HAL_TIM_ConfigClockSource+0x1d0>
 800c904:	2b70      	cmp	r3, #112	@ 0x70
 800c906:	d01a      	beq.n	800c93e <HAL_TIM_ConfigClockSource+0x10a>
 800c908:	2b70      	cmp	r3, #112	@ 0x70
 800c90a:	d87b      	bhi.n	800ca04 <HAL_TIM_ConfigClockSource+0x1d0>
 800c90c:	2b60      	cmp	r3, #96	@ 0x60
 800c90e:	d050      	beq.n	800c9b2 <HAL_TIM_ConfigClockSource+0x17e>
 800c910:	2b60      	cmp	r3, #96	@ 0x60
 800c912:	d877      	bhi.n	800ca04 <HAL_TIM_ConfigClockSource+0x1d0>
 800c914:	2b50      	cmp	r3, #80	@ 0x50
 800c916:	d03c      	beq.n	800c992 <HAL_TIM_ConfigClockSource+0x15e>
 800c918:	2b50      	cmp	r3, #80	@ 0x50
 800c91a:	d873      	bhi.n	800ca04 <HAL_TIM_ConfigClockSource+0x1d0>
 800c91c:	2b40      	cmp	r3, #64	@ 0x40
 800c91e:	d058      	beq.n	800c9d2 <HAL_TIM_ConfigClockSource+0x19e>
 800c920:	2b40      	cmp	r3, #64	@ 0x40
 800c922:	d86f      	bhi.n	800ca04 <HAL_TIM_ConfigClockSource+0x1d0>
 800c924:	2b30      	cmp	r3, #48	@ 0x30
 800c926:	d064      	beq.n	800c9f2 <HAL_TIM_ConfigClockSource+0x1be>
 800c928:	2b30      	cmp	r3, #48	@ 0x30
 800c92a:	d86b      	bhi.n	800ca04 <HAL_TIM_ConfigClockSource+0x1d0>
 800c92c:	2b20      	cmp	r3, #32
 800c92e:	d060      	beq.n	800c9f2 <HAL_TIM_ConfigClockSource+0x1be>
 800c930:	2b20      	cmp	r3, #32
 800c932:	d867      	bhi.n	800ca04 <HAL_TIM_ConfigClockSource+0x1d0>
 800c934:	2b00      	cmp	r3, #0
 800c936:	d05c      	beq.n	800c9f2 <HAL_TIM_ConfigClockSource+0x1be>
 800c938:	2b10      	cmp	r3, #16
 800c93a:	d05a      	beq.n	800c9f2 <HAL_TIM_ConfigClockSource+0x1be>
 800c93c:	e062      	b.n	800ca04 <HAL_TIM_ConfigClockSource+0x1d0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800c93e:	687b      	ldr	r3, [r7, #4]
 800c940:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800c942:	683b      	ldr	r3, [r7, #0]
 800c944:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800c946:	683b      	ldr	r3, [r7, #0]
 800c948:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800c94a:	683b      	ldr	r3, [r7, #0]
 800c94c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800c94e:	f000 fa6f 	bl	800ce30 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800c952:	687b      	ldr	r3, [r7, #4]
 800c954:	681b      	ldr	r3, [r3, #0]
 800c956:	689b      	ldr	r3, [r3, #8]
 800c958:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800c95a:	68bb      	ldr	r3, [r7, #8]
 800c95c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800c960:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800c962:	687b      	ldr	r3, [r7, #4]
 800c964:	681b      	ldr	r3, [r3, #0]
 800c966:	68ba      	ldr	r2, [r7, #8]
 800c968:	609a      	str	r2, [r3, #8]
      break;
 800c96a:	e04f      	b.n	800ca0c <HAL_TIM_ConfigClockSource+0x1d8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800c96c:	687b      	ldr	r3, [r7, #4]
 800c96e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800c970:	683b      	ldr	r3, [r7, #0]
 800c972:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800c974:	683b      	ldr	r3, [r7, #0]
 800c976:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800c978:	683b      	ldr	r3, [r7, #0]
 800c97a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800c97c:	f000 fa58 	bl	800ce30 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800c980:	687b      	ldr	r3, [r7, #4]
 800c982:	681b      	ldr	r3, [r3, #0]
 800c984:	689a      	ldr	r2, [r3, #8]
 800c986:	687b      	ldr	r3, [r7, #4]
 800c988:	681b      	ldr	r3, [r3, #0]
 800c98a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800c98e:	609a      	str	r2, [r3, #8]
      break;
 800c990:	e03c      	b.n	800ca0c <HAL_TIM_ConfigClockSource+0x1d8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800c992:	687b      	ldr	r3, [r7, #4]
 800c994:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800c996:	683b      	ldr	r3, [r7, #0]
 800c998:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800c99a:	683b      	ldr	r3, [r7, #0]
 800c99c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800c99e:	461a      	mov	r2, r3
 800c9a0:	f000 f96c 	bl	800cc7c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800c9a4:	687b      	ldr	r3, [r7, #4]
 800c9a6:	681b      	ldr	r3, [r3, #0]
 800c9a8:	2150      	movs	r1, #80	@ 0x50
 800c9aa:	4618      	mov	r0, r3
 800c9ac:	f000 fa24 	bl	800cdf8 <TIM_ITRx_SetConfig>
      break;
 800c9b0:	e02c      	b.n	800ca0c <HAL_TIM_ConfigClockSource+0x1d8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800c9b2:	687b      	ldr	r3, [r7, #4]
 800c9b4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800c9b6:	683b      	ldr	r3, [r7, #0]
 800c9b8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800c9ba:	683b      	ldr	r3, [r7, #0]
 800c9bc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800c9be:	461a      	mov	r2, r3
 800c9c0:	f000 f9cc 	bl	800cd5c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800c9c4:	687b      	ldr	r3, [r7, #4]
 800c9c6:	681b      	ldr	r3, [r3, #0]
 800c9c8:	2160      	movs	r1, #96	@ 0x60
 800c9ca:	4618      	mov	r0, r3
 800c9cc:	f000 fa14 	bl	800cdf8 <TIM_ITRx_SetConfig>
      break;
 800c9d0:	e01c      	b.n	800ca0c <HAL_TIM_ConfigClockSource+0x1d8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800c9d2:	687b      	ldr	r3, [r7, #4]
 800c9d4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800c9d6:	683b      	ldr	r3, [r7, #0]
 800c9d8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800c9da:	683b      	ldr	r3, [r7, #0]
 800c9dc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800c9de:	461a      	mov	r2, r3
 800c9e0:	f000 f94c 	bl	800cc7c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800c9e4:	687b      	ldr	r3, [r7, #4]
 800c9e6:	681b      	ldr	r3, [r3, #0]
 800c9e8:	2140      	movs	r1, #64	@ 0x40
 800c9ea:	4618      	mov	r0, r3
 800c9ec:	f000 fa04 	bl	800cdf8 <TIM_ITRx_SetConfig>
      break;
 800c9f0:	e00c      	b.n	800ca0c <HAL_TIM_ConfigClockSource+0x1d8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800c9f2:	687b      	ldr	r3, [r7, #4]
 800c9f4:	681a      	ldr	r2, [r3, #0]
 800c9f6:	683b      	ldr	r3, [r7, #0]
 800c9f8:	681b      	ldr	r3, [r3, #0]
 800c9fa:	4619      	mov	r1, r3
 800c9fc:	4610      	mov	r0, r2
 800c9fe:	f000 f9fb 	bl	800cdf8 <TIM_ITRx_SetConfig>
      break;
 800ca02:	e003      	b.n	800ca0c <HAL_TIM_ConfigClockSource+0x1d8>
    }

    default:
      status = HAL_ERROR;
 800ca04:	2301      	movs	r3, #1
 800ca06:	73fb      	strb	r3, [r7, #15]
      break;
 800ca08:	e000      	b.n	800ca0c <HAL_TIM_ConfigClockSource+0x1d8>
      break;
 800ca0a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800ca0c:	687b      	ldr	r3, [r7, #4]
 800ca0e:	2201      	movs	r2, #1
 800ca10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800ca14:	687b      	ldr	r3, [r7, #4]
 800ca16:	2200      	movs	r2, #0
 800ca18:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800ca1c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ca1e:	4618      	mov	r0, r3
 800ca20:	3710      	adds	r7, #16
 800ca22:	46bd      	mov	sp, r7
 800ca24:	bd80      	pop	{r7, pc}
 800ca26:	bf00      	nop
 800ca28:	00100070 	.word	0x00100070
 800ca2c:	00100040 	.word	0x00100040
 800ca30:	00100030 	.word	0x00100030
 800ca34:	00100020 	.word	0x00100020

0800ca38 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800ca38:	b480      	push	{r7}
 800ca3a:	b083      	sub	sp, #12
 800ca3c:	af00      	add	r7, sp, #0
 800ca3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800ca40:	bf00      	nop
 800ca42:	370c      	adds	r7, #12
 800ca44:	46bd      	mov	sp, r7
 800ca46:	bc80      	pop	{r7}
 800ca48:	4770      	bx	lr

0800ca4a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800ca4a:	b480      	push	{r7}
 800ca4c:	b083      	sub	sp, #12
 800ca4e:	af00      	add	r7, sp, #0
 800ca50:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800ca52:	bf00      	nop
 800ca54:	370c      	adds	r7, #12
 800ca56:	46bd      	mov	sp, r7
 800ca58:	bc80      	pop	{r7}
 800ca5a:	4770      	bx	lr

0800ca5c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800ca5c:	b480      	push	{r7}
 800ca5e:	b083      	sub	sp, #12
 800ca60:	af00      	add	r7, sp, #0
 800ca62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800ca64:	bf00      	nop
 800ca66:	370c      	adds	r7, #12
 800ca68:	46bd      	mov	sp, r7
 800ca6a:	bc80      	pop	{r7}
 800ca6c:	4770      	bx	lr

0800ca6e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800ca6e:	b480      	push	{r7}
 800ca70:	b083      	sub	sp, #12
 800ca72:	af00      	add	r7, sp, #0
 800ca74:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800ca76:	bf00      	nop
 800ca78:	370c      	adds	r7, #12
 800ca7a:	46bd      	mov	sp, r7
 800ca7c:	bc80      	pop	{r7}
 800ca7e:	4770      	bx	lr

0800ca80 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800ca80:	b480      	push	{r7}
 800ca82:	b085      	sub	sp, #20
 800ca84:	af00      	add	r7, sp, #0
 800ca86:	6078      	str	r0, [r7, #4]
 800ca88:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800ca8a:	687b      	ldr	r3, [r7, #4]
 800ca8c:	681b      	ldr	r3, [r3, #0]
 800ca8e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800ca90:	687b      	ldr	r3, [r7, #4]
 800ca92:	4a6a      	ldr	r2, [pc, #424]	@ (800cc3c <TIM_Base_SetConfig+0x1bc>)
 800ca94:	4293      	cmp	r3, r2
 800ca96:	d02b      	beq.n	800caf0 <TIM_Base_SetConfig+0x70>
 800ca98:	687b      	ldr	r3, [r7, #4]
 800ca9a:	4a69      	ldr	r2, [pc, #420]	@ (800cc40 <TIM_Base_SetConfig+0x1c0>)
 800ca9c:	4293      	cmp	r3, r2
 800ca9e:	d027      	beq.n	800caf0 <TIM_Base_SetConfig+0x70>
 800caa0:	687b      	ldr	r3, [r7, #4]
 800caa2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800caa6:	d023      	beq.n	800caf0 <TIM_Base_SetConfig+0x70>
 800caa8:	687b      	ldr	r3, [r7, #4]
 800caaa:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800caae:	d01f      	beq.n	800caf0 <TIM_Base_SetConfig+0x70>
 800cab0:	687b      	ldr	r3, [r7, #4]
 800cab2:	4a64      	ldr	r2, [pc, #400]	@ (800cc44 <TIM_Base_SetConfig+0x1c4>)
 800cab4:	4293      	cmp	r3, r2
 800cab6:	d01b      	beq.n	800caf0 <TIM_Base_SetConfig+0x70>
 800cab8:	687b      	ldr	r3, [r7, #4]
 800caba:	4a63      	ldr	r2, [pc, #396]	@ (800cc48 <TIM_Base_SetConfig+0x1c8>)
 800cabc:	4293      	cmp	r3, r2
 800cabe:	d017      	beq.n	800caf0 <TIM_Base_SetConfig+0x70>
 800cac0:	687b      	ldr	r3, [r7, #4]
 800cac2:	4a62      	ldr	r2, [pc, #392]	@ (800cc4c <TIM_Base_SetConfig+0x1cc>)
 800cac4:	4293      	cmp	r3, r2
 800cac6:	d013      	beq.n	800caf0 <TIM_Base_SetConfig+0x70>
 800cac8:	687b      	ldr	r3, [r7, #4]
 800caca:	4a61      	ldr	r2, [pc, #388]	@ (800cc50 <TIM_Base_SetConfig+0x1d0>)
 800cacc:	4293      	cmp	r3, r2
 800cace:	d00f      	beq.n	800caf0 <TIM_Base_SetConfig+0x70>
 800cad0:	687b      	ldr	r3, [r7, #4]
 800cad2:	4a60      	ldr	r2, [pc, #384]	@ (800cc54 <TIM_Base_SetConfig+0x1d4>)
 800cad4:	4293      	cmp	r3, r2
 800cad6:	d00b      	beq.n	800caf0 <TIM_Base_SetConfig+0x70>
 800cad8:	687b      	ldr	r3, [r7, #4]
 800cada:	4a5f      	ldr	r2, [pc, #380]	@ (800cc58 <TIM_Base_SetConfig+0x1d8>)
 800cadc:	4293      	cmp	r3, r2
 800cade:	d007      	beq.n	800caf0 <TIM_Base_SetConfig+0x70>
 800cae0:	687b      	ldr	r3, [r7, #4]
 800cae2:	4a5e      	ldr	r2, [pc, #376]	@ (800cc5c <TIM_Base_SetConfig+0x1dc>)
 800cae4:	4293      	cmp	r3, r2
 800cae6:	d003      	beq.n	800caf0 <TIM_Base_SetConfig+0x70>
 800cae8:	687b      	ldr	r3, [r7, #4]
 800caea:	4a5d      	ldr	r2, [pc, #372]	@ (800cc60 <TIM_Base_SetConfig+0x1e0>)
 800caec:	4293      	cmp	r3, r2
 800caee:	d108      	bne.n	800cb02 <TIM_Base_SetConfig+0x82>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800caf0:	68fb      	ldr	r3, [r7, #12]
 800caf2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800caf6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800caf8:	683b      	ldr	r3, [r7, #0]
 800cafa:	685b      	ldr	r3, [r3, #4]
 800cafc:	68fa      	ldr	r2, [r7, #12]
 800cafe:	4313      	orrs	r3, r2
 800cb00:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800cb02:	687b      	ldr	r3, [r7, #4]
 800cb04:	4a4d      	ldr	r2, [pc, #308]	@ (800cc3c <TIM_Base_SetConfig+0x1bc>)
 800cb06:	4293      	cmp	r3, r2
 800cb08:	d043      	beq.n	800cb92 <TIM_Base_SetConfig+0x112>
 800cb0a:	687b      	ldr	r3, [r7, #4]
 800cb0c:	4a4c      	ldr	r2, [pc, #304]	@ (800cc40 <TIM_Base_SetConfig+0x1c0>)
 800cb0e:	4293      	cmp	r3, r2
 800cb10:	d03f      	beq.n	800cb92 <TIM_Base_SetConfig+0x112>
 800cb12:	687b      	ldr	r3, [r7, #4]
 800cb14:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800cb18:	d03b      	beq.n	800cb92 <TIM_Base_SetConfig+0x112>
 800cb1a:	687b      	ldr	r3, [r7, #4]
 800cb1c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800cb20:	d037      	beq.n	800cb92 <TIM_Base_SetConfig+0x112>
 800cb22:	687b      	ldr	r3, [r7, #4]
 800cb24:	4a47      	ldr	r2, [pc, #284]	@ (800cc44 <TIM_Base_SetConfig+0x1c4>)
 800cb26:	4293      	cmp	r3, r2
 800cb28:	d033      	beq.n	800cb92 <TIM_Base_SetConfig+0x112>
 800cb2a:	687b      	ldr	r3, [r7, #4]
 800cb2c:	4a46      	ldr	r2, [pc, #280]	@ (800cc48 <TIM_Base_SetConfig+0x1c8>)
 800cb2e:	4293      	cmp	r3, r2
 800cb30:	d02f      	beq.n	800cb92 <TIM_Base_SetConfig+0x112>
 800cb32:	687b      	ldr	r3, [r7, #4]
 800cb34:	4a45      	ldr	r2, [pc, #276]	@ (800cc4c <TIM_Base_SetConfig+0x1cc>)
 800cb36:	4293      	cmp	r3, r2
 800cb38:	d02b      	beq.n	800cb92 <TIM_Base_SetConfig+0x112>
 800cb3a:	687b      	ldr	r3, [r7, #4]
 800cb3c:	4a44      	ldr	r2, [pc, #272]	@ (800cc50 <TIM_Base_SetConfig+0x1d0>)
 800cb3e:	4293      	cmp	r3, r2
 800cb40:	d027      	beq.n	800cb92 <TIM_Base_SetConfig+0x112>
 800cb42:	687b      	ldr	r3, [r7, #4]
 800cb44:	4a43      	ldr	r2, [pc, #268]	@ (800cc54 <TIM_Base_SetConfig+0x1d4>)
 800cb46:	4293      	cmp	r3, r2
 800cb48:	d023      	beq.n	800cb92 <TIM_Base_SetConfig+0x112>
 800cb4a:	687b      	ldr	r3, [r7, #4]
 800cb4c:	4a42      	ldr	r2, [pc, #264]	@ (800cc58 <TIM_Base_SetConfig+0x1d8>)
 800cb4e:	4293      	cmp	r3, r2
 800cb50:	d01f      	beq.n	800cb92 <TIM_Base_SetConfig+0x112>
 800cb52:	687b      	ldr	r3, [r7, #4]
 800cb54:	4a41      	ldr	r2, [pc, #260]	@ (800cc5c <TIM_Base_SetConfig+0x1dc>)
 800cb56:	4293      	cmp	r3, r2
 800cb58:	d01b      	beq.n	800cb92 <TIM_Base_SetConfig+0x112>
 800cb5a:	687b      	ldr	r3, [r7, #4]
 800cb5c:	4a40      	ldr	r2, [pc, #256]	@ (800cc60 <TIM_Base_SetConfig+0x1e0>)
 800cb5e:	4293      	cmp	r3, r2
 800cb60:	d017      	beq.n	800cb92 <TIM_Base_SetConfig+0x112>
 800cb62:	687b      	ldr	r3, [r7, #4]
 800cb64:	4a3f      	ldr	r2, [pc, #252]	@ (800cc64 <TIM_Base_SetConfig+0x1e4>)
 800cb66:	4293      	cmp	r3, r2
 800cb68:	d013      	beq.n	800cb92 <TIM_Base_SetConfig+0x112>
 800cb6a:	687b      	ldr	r3, [r7, #4]
 800cb6c:	4a3e      	ldr	r2, [pc, #248]	@ (800cc68 <TIM_Base_SetConfig+0x1e8>)
 800cb6e:	4293      	cmp	r3, r2
 800cb70:	d00f      	beq.n	800cb92 <TIM_Base_SetConfig+0x112>
 800cb72:	687b      	ldr	r3, [r7, #4]
 800cb74:	4a3d      	ldr	r2, [pc, #244]	@ (800cc6c <TIM_Base_SetConfig+0x1ec>)
 800cb76:	4293      	cmp	r3, r2
 800cb78:	d00b      	beq.n	800cb92 <TIM_Base_SetConfig+0x112>
 800cb7a:	687b      	ldr	r3, [r7, #4]
 800cb7c:	4a3c      	ldr	r2, [pc, #240]	@ (800cc70 <TIM_Base_SetConfig+0x1f0>)
 800cb7e:	4293      	cmp	r3, r2
 800cb80:	d007      	beq.n	800cb92 <TIM_Base_SetConfig+0x112>
 800cb82:	687b      	ldr	r3, [r7, #4]
 800cb84:	4a3b      	ldr	r2, [pc, #236]	@ (800cc74 <TIM_Base_SetConfig+0x1f4>)
 800cb86:	4293      	cmp	r3, r2
 800cb88:	d003      	beq.n	800cb92 <TIM_Base_SetConfig+0x112>
 800cb8a:	687b      	ldr	r3, [r7, #4]
 800cb8c:	4a3a      	ldr	r2, [pc, #232]	@ (800cc78 <TIM_Base_SetConfig+0x1f8>)
 800cb8e:	4293      	cmp	r3, r2
 800cb90:	d108      	bne.n	800cba4 <TIM_Base_SetConfig+0x124>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800cb92:	68fb      	ldr	r3, [r7, #12]
 800cb94:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800cb98:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800cb9a:	683b      	ldr	r3, [r7, #0]
 800cb9c:	68db      	ldr	r3, [r3, #12]
 800cb9e:	68fa      	ldr	r2, [r7, #12]
 800cba0:	4313      	orrs	r3, r2
 800cba2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800cba4:	68fb      	ldr	r3, [r7, #12]
 800cba6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800cbaa:	683b      	ldr	r3, [r7, #0]
 800cbac:	695b      	ldr	r3, [r3, #20]
 800cbae:	4313      	orrs	r3, r2
 800cbb0:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800cbb2:	683b      	ldr	r3, [r7, #0]
 800cbb4:	689a      	ldr	r2, [r3, #8]
 800cbb6:	687b      	ldr	r3, [r7, #4]
 800cbb8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800cbba:	683b      	ldr	r3, [r7, #0]
 800cbbc:	681a      	ldr	r2, [r3, #0]
 800cbbe:	687b      	ldr	r3, [r7, #4]
 800cbc0:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800cbc2:	687b      	ldr	r3, [r7, #4]
 800cbc4:	4a1d      	ldr	r2, [pc, #116]	@ (800cc3c <TIM_Base_SetConfig+0x1bc>)
 800cbc6:	4293      	cmp	r3, r2
 800cbc8:	d023      	beq.n	800cc12 <TIM_Base_SetConfig+0x192>
 800cbca:	687b      	ldr	r3, [r7, #4]
 800cbcc:	4a1c      	ldr	r2, [pc, #112]	@ (800cc40 <TIM_Base_SetConfig+0x1c0>)
 800cbce:	4293      	cmp	r3, r2
 800cbd0:	d01f      	beq.n	800cc12 <TIM_Base_SetConfig+0x192>
 800cbd2:	687b      	ldr	r3, [r7, #4]
 800cbd4:	4a21      	ldr	r2, [pc, #132]	@ (800cc5c <TIM_Base_SetConfig+0x1dc>)
 800cbd6:	4293      	cmp	r3, r2
 800cbd8:	d01b      	beq.n	800cc12 <TIM_Base_SetConfig+0x192>
 800cbda:	687b      	ldr	r3, [r7, #4]
 800cbdc:	4a20      	ldr	r2, [pc, #128]	@ (800cc60 <TIM_Base_SetConfig+0x1e0>)
 800cbde:	4293      	cmp	r3, r2
 800cbe0:	d017      	beq.n	800cc12 <TIM_Base_SetConfig+0x192>
 800cbe2:	687b      	ldr	r3, [r7, #4]
 800cbe4:	4a1f      	ldr	r2, [pc, #124]	@ (800cc64 <TIM_Base_SetConfig+0x1e4>)
 800cbe6:	4293      	cmp	r3, r2
 800cbe8:	d013      	beq.n	800cc12 <TIM_Base_SetConfig+0x192>
 800cbea:	687b      	ldr	r3, [r7, #4]
 800cbec:	4a1e      	ldr	r2, [pc, #120]	@ (800cc68 <TIM_Base_SetConfig+0x1e8>)
 800cbee:	4293      	cmp	r3, r2
 800cbf0:	d00f      	beq.n	800cc12 <TIM_Base_SetConfig+0x192>
 800cbf2:	687b      	ldr	r3, [r7, #4]
 800cbf4:	4a1d      	ldr	r2, [pc, #116]	@ (800cc6c <TIM_Base_SetConfig+0x1ec>)
 800cbf6:	4293      	cmp	r3, r2
 800cbf8:	d00b      	beq.n	800cc12 <TIM_Base_SetConfig+0x192>
 800cbfa:	687b      	ldr	r3, [r7, #4]
 800cbfc:	4a1c      	ldr	r2, [pc, #112]	@ (800cc70 <TIM_Base_SetConfig+0x1f0>)
 800cbfe:	4293      	cmp	r3, r2
 800cc00:	d007      	beq.n	800cc12 <TIM_Base_SetConfig+0x192>
 800cc02:	687b      	ldr	r3, [r7, #4]
 800cc04:	4a1b      	ldr	r2, [pc, #108]	@ (800cc74 <TIM_Base_SetConfig+0x1f4>)
 800cc06:	4293      	cmp	r3, r2
 800cc08:	d003      	beq.n	800cc12 <TIM_Base_SetConfig+0x192>
 800cc0a:	687b      	ldr	r3, [r7, #4]
 800cc0c:	4a1a      	ldr	r2, [pc, #104]	@ (800cc78 <TIM_Base_SetConfig+0x1f8>)
 800cc0e:	4293      	cmp	r3, r2
 800cc10:	d103      	bne.n	800cc1a <TIM_Base_SetConfig+0x19a>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800cc12:	683b      	ldr	r3, [r7, #0]
 800cc14:	691a      	ldr	r2, [r3, #16]
 800cc16:	687b      	ldr	r3, [r7, #4]
 800cc18:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800cc1a:	687b      	ldr	r3, [r7, #4]
 800cc1c:	681b      	ldr	r3, [r3, #0]
 800cc1e:	f043 0204 	orr.w	r2, r3, #4
 800cc22:	687b      	ldr	r3, [r7, #4]
 800cc24:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800cc26:	687b      	ldr	r3, [r7, #4]
 800cc28:	2201      	movs	r2, #1
 800cc2a:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 800cc2c:	687b      	ldr	r3, [r7, #4]
 800cc2e:	68fa      	ldr	r2, [r7, #12]
 800cc30:	601a      	str	r2, [r3, #0]
}
 800cc32:	bf00      	nop
 800cc34:	3714      	adds	r7, #20
 800cc36:	46bd      	mov	sp, r7
 800cc38:	bc80      	pop	{r7}
 800cc3a:	4770      	bx	lr
 800cc3c:	40012c00 	.word	0x40012c00
 800cc40:	50012c00 	.word	0x50012c00
 800cc44:	40000400 	.word	0x40000400
 800cc48:	50000400 	.word	0x50000400
 800cc4c:	40000800 	.word	0x40000800
 800cc50:	50000800 	.word	0x50000800
 800cc54:	40000c00 	.word	0x40000c00
 800cc58:	50000c00 	.word	0x50000c00
 800cc5c:	40013400 	.word	0x40013400
 800cc60:	50013400 	.word	0x50013400
 800cc64:	40014000 	.word	0x40014000
 800cc68:	50014000 	.word	0x50014000
 800cc6c:	40014400 	.word	0x40014400
 800cc70:	50014400 	.word	0x50014400
 800cc74:	40014800 	.word	0x40014800
 800cc78:	50014800 	.word	0x50014800

0800cc7c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800cc7c:	b480      	push	{r7}
 800cc7e:	b087      	sub	sp, #28
 800cc80:	af00      	add	r7, sp, #0
 800cc82:	60f8      	str	r0, [r7, #12]
 800cc84:	60b9      	str	r1, [r7, #8]
 800cc86:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800cc88:	68fb      	ldr	r3, [r7, #12]
 800cc8a:	6a1b      	ldr	r3, [r3, #32]
 800cc8c:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800cc8e:	68fb      	ldr	r3, [r7, #12]
 800cc90:	6a1b      	ldr	r3, [r3, #32]
 800cc92:	f023 0201 	bic.w	r2, r3, #1
 800cc96:	68fb      	ldr	r3, [r7, #12]
 800cc98:	621a      	str	r2, [r3, #32]
  /* Disable the Channel 1N: Reset the CC1NE Bit */
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800cc9a:	68fb      	ldr	r3, [r7, #12]
 800cc9c:	4a25      	ldr	r2, [pc, #148]	@ (800cd34 <TIM_TI1_ConfigInputStage+0xb8>)
 800cc9e:	4293      	cmp	r3, r2
 800cca0:	d023      	beq.n	800ccea <TIM_TI1_ConfigInputStage+0x6e>
 800cca2:	68fb      	ldr	r3, [r7, #12]
 800cca4:	4a24      	ldr	r2, [pc, #144]	@ (800cd38 <TIM_TI1_ConfigInputStage+0xbc>)
 800cca6:	4293      	cmp	r3, r2
 800cca8:	d01f      	beq.n	800ccea <TIM_TI1_ConfigInputStage+0x6e>
 800ccaa:	68fb      	ldr	r3, [r7, #12]
 800ccac:	4a23      	ldr	r2, [pc, #140]	@ (800cd3c <TIM_TI1_ConfigInputStage+0xc0>)
 800ccae:	4293      	cmp	r3, r2
 800ccb0:	d01b      	beq.n	800ccea <TIM_TI1_ConfigInputStage+0x6e>
 800ccb2:	68fb      	ldr	r3, [r7, #12]
 800ccb4:	4a22      	ldr	r2, [pc, #136]	@ (800cd40 <TIM_TI1_ConfigInputStage+0xc4>)
 800ccb6:	4293      	cmp	r3, r2
 800ccb8:	d017      	beq.n	800ccea <TIM_TI1_ConfigInputStage+0x6e>
 800ccba:	68fb      	ldr	r3, [r7, #12]
 800ccbc:	4a21      	ldr	r2, [pc, #132]	@ (800cd44 <TIM_TI1_ConfigInputStage+0xc8>)
 800ccbe:	4293      	cmp	r3, r2
 800ccc0:	d013      	beq.n	800ccea <TIM_TI1_ConfigInputStage+0x6e>
 800ccc2:	68fb      	ldr	r3, [r7, #12]
 800ccc4:	4a20      	ldr	r2, [pc, #128]	@ (800cd48 <TIM_TI1_ConfigInputStage+0xcc>)
 800ccc6:	4293      	cmp	r3, r2
 800ccc8:	d00f      	beq.n	800ccea <TIM_TI1_ConfigInputStage+0x6e>
 800ccca:	68fb      	ldr	r3, [r7, #12]
 800cccc:	4a1f      	ldr	r2, [pc, #124]	@ (800cd4c <TIM_TI1_ConfigInputStage+0xd0>)
 800ccce:	4293      	cmp	r3, r2
 800ccd0:	d00b      	beq.n	800ccea <TIM_TI1_ConfigInputStage+0x6e>
 800ccd2:	68fb      	ldr	r3, [r7, #12]
 800ccd4:	4a1e      	ldr	r2, [pc, #120]	@ (800cd50 <TIM_TI1_ConfigInputStage+0xd4>)
 800ccd6:	4293      	cmp	r3, r2
 800ccd8:	d007      	beq.n	800ccea <TIM_TI1_ConfigInputStage+0x6e>
 800ccda:	68fb      	ldr	r3, [r7, #12]
 800ccdc:	4a1d      	ldr	r2, [pc, #116]	@ (800cd54 <TIM_TI1_ConfigInputStage+0xd8>)
 800ccde:	4293      	cmp	r3, r2
 800cce0:	d003      	beq.n	800ccea <TIM_TI1_ConfigInputStage+0x6e>
 800cce2:	68fb      	ldr	r3, [r7, #12]
 800cce4:	4a1c      	ldr	r2, [pc, #112]	@ (800cd58 <TIM_TI1_ConfigInputStage+0xdc>)
 800cce6:	4293      	cmp	r3, r2
 800cce8:	d105      	bne.n	800ccf6 <TIM_TI1_ConfigInputStage+0x7a>
  {
    TIMx->CCER &= ~TIM_CCER_CC1NE;
 800ccea:	68fb      	ldr	r3, [r7, #12]
 800ccec:	6a1b      	ldr	r3, [r3, #32]
 800ccee:	f023 0204 	bic.w	r2, r3, #4
 800ccf2:	68fb      	ldr	r3, [r7, #12]
 800ccf4:	621a      	str	r2, [r3, #32]
  }

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = TIMx->CCMR1;
 800ccf6:	68fb      	ldr	r3, [r7, #12]
 800ccf8:	699b      	ldr	r3, [r3, #24]
 800ccfa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800ccfc:	693b      	ldr	r3, [r7, #16]
 800ccfe:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800cd02:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800cd04:	687b      	ldr	r3, [r7, #4]
 800cd06:	011b      	lsls	r3, r3, #4
 800cd08:	693a      	ldr	r2, [r7, #16]
 800cd0a:	4313      	orrs	r3, r2
 800cd0c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800cd0e:	697b      	ldr	r3, [r7, #20]
 800cd10:	f023 030a 	bic.w	r3, r3, #10
 800cd14:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800cd16:	697a      	ldr	r2, [r7, #20]
 800cd18:	68bb      	ldr	r3, [r7, #8]
 800cd1a:	4313      	orrs	r3, r2
 800cd1c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800cd1e:	68fb      	ldr	r3, [r7, #12]
 800cd20:	693a      	ldr	r2, [r7, #16]
 800cd22:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800cd24:	68fb      	ldr	r3, [r7, #12]
 800cd26:	697a      	ldr	r2, [r7, #20]
 800cd28:	621a      	str	r2, [r3, #32]
}
 800cd2a:	bf00      	nop
 800cd2c:	371c      	adds	r7, #28
 800cd2e:	46bd      	mov	sp, r7
 800cd30:	bc80      	pop	{r7}
 800cd32:	4770      	bx	lr
 800cd34:	40012c00 	.word	0x40012c00
 800cd38:	50012c00 	.word	0x50012c00
 800cd3c:	40013400 	.word	0x40013400
 800cd40:	50013400 	.word	0x50013400
 800cd44:	40014000 	.word	0x40014000
 800cd48:	50014000 	.word	0x50014000
 800cd4c:	40014400 	.word	0x40014400
 800cd50:	50014400 	.word	0x50014400
 800cd54:	40014800 	.word	0x40014800
 800cd58:	50014800 	.word	0x50014800

0800cd5c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800cd5c:	b480      	push	{r7}
 800cd5e:	b087      	sub	sp, #28
 800cd60:	af00      	add	r7, sp, #0
 800cd62:	60f8      	str	r0, [r7, #12]
 800cd64:	60b9      	str	r1, [r7, #8]
 800cd66:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800cd68:	68fb      	ldr	r3, [r7, #12]
 800cd6a:	6a1b      	ldr	r3, [r3, #32]
 800cd6c:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800cd6e:	68fb      	ldr	r3, [r7, #12]
 800cd70:	6a1b      	ldr	r3, [r3, #32]
 800cd72:	f023 0210 	bic.w	r2, r3, #16
 800cd76:	68fb      	ldr	r3, [r7, #12]
 800cd78:	621a      	str	r2, [r3, #32]
  /* Disable the Channel 2N: Reset the CC2NE Bit */
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800cd7a:	68fb      	ldr	r3, [r7, #12]
 800cd7c:	4a1a      	ldr	r2, [pc, #104]	@ (800cde8 <TIM_TI2_ConfigInputStage+0x8c>)
 800cd7e:	4293      	cmp	r3, r2
 800cd80:	d00b      	beq.n	800cd9a <TIM_TI2_ConfigInputStage+0x3e>
 800cd82:	68fb      	ldr	r3, [r7, #12]
 800cd84:	4a19      	ldr	r2, [pc, #100]	@ (800cdec <TIM_TI2_ConfigInputStage+0x90>)
 800cd86:	4293      	cmp	r3, r2
 800cd88:	d007      	beq.n	800cd9a <TIM_TI2_ConfigInputStage+0x3e>
 800cd8a:	68fb      	ldr	r3, [r7, #12]
 800cd8c:	4a18      	ldr	r2, [pc, #96]	@ (800cdf0 <TIM_TI2_ConfigInputStage+0x94>)
 800cd8e:	4293      	cmp	r3, r2
 800cd90:	d003      	beq.n	800cd9a <TIM_TI2_ConfigInputStage+0x3e>
 800cd92:	68fb      	ldr	r3, [r7, #12]
 800cd94:	4a17      	ldr	r2, [pc, #92]	@ (800cdf4 <TIM_TI2_ConfigInputStage+0x98>)
 800cd96:	4293      	cmp	r3, r2
 800cd98:	d105      	bne.n	800cda6 <TIM_TI2_ConfigInputStage+0x4a>
  {
    TIMx->CCER &= ~TIM_CCER_CC2NE;
 800cd9a:	68fb      	ldr	r3, [r7, #12]
 800cd9c:	6a1b      	ldr	r3, [r3, #32]
 800cd9e:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 800cda2:	68fb      	ldr	r3, [r7, #12]
 800cda4:	621a      	str	r2, [r3, #32]
  }

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = TIMx->CCMR1;
 800cda6:	68fb      	ldr	r3, [r7, #12]
 800cda8:	699b      	ldr	r3, [r3, #24]
 800cdaa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800cdac:	693b      	ldr	r3, [r7, #16]
 800cdae:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800cdb2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800cdb4:	687b      	ldr	r3, [r7, #4]
 800cdb6:	031b      	lsls	r3, r3, #12
 800cdb8:	693a      	ldr	r2, [r7, #16]
 800cdba:	4313      	orrs	r3, r2
 800cdbc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800cdbe:	697b      	ldr	r3, [r7, #20]
 800cdc0:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800cdc4:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800cdc6:	68bb      	ldr	r3, [r7, #8]
 800cdc8:	011b      	lsls	r3, r3, #4
 800cdca:	697a      	ldr	r2, [r7, #20]
 800cdcc:	4313      	orrs	r3, r2
 800cdce:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800cdd0:	68fb      	ldr	r3, [r7, #12]
 800cdd2:	693a      	ldr	r2, [r7, #16]
 800cdd4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800cdd6:	68fb      	ldr	r3, [r7, #12]
 800cdd8:	697a      	ldr	r2, [r7, #20]
 800cdda:	621a      	str	r2, [r3, #32]
}
 800cddc:	bf00      	nop
 800cdde:	371c      	adds	r7, #28
 800cde0:	46bd      	mov	sp, r7
 800cde2:	bc80      	pop	{r7}
 800cde4:	4770      	bx	lr
 800cde6:	bf00      	nop
 800cde8:	40012c00 	.word	0x40012c00
 800cdec:	50012c00 	.word	0x50012c00
 800cdf0:	40013400 	.word	0x40013400
 800cdf4:	50013400 	.word	0x50013400

0800cdf8 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800cdf8:	b480      	push	{r7}
 800cdfa:	b085      	sub	sp, #20
 800cdfc:	af00      	add	r7, sp, #0
 800cdfe:	6078      	str	r0, [r7, #4]
 800ce00:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800ce02:	687b      	ldr	r3, [r7, #4]
 800ce04:	689b      	ldr	r3, [r3, #8]
 800ce06:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800ce08:	68fb      	ldr	r3, [r7, #12]
 800ce0a:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800ce0e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ce12:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800ce14:	683a      	ldr	r2, [r7, #0]
 800ce16:	68fb      	ldr	r3, [r7, #12]
 800ce18:	4313      	orrs	r3, r2
 800ce1a:	f043 0307 	orr.w	r3, r3, #7
 800ce1e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ce20:	687b      	ldr	r3, [r7, #4]
 800ce22:	68fa      	ldr	r2, [r7, #12]
 800ce24:	609a      	str	r2, [r3, #8]
}
 800ce26:	bf00      	nop
 800ce28:	3714      	adds	r7, #20
 800ce2a:	46bd      	mov	sp, r7
 800ce2c:	bc80      	pop	{r7}
 800ce2e:	4770      	bx	lr

0800ce30 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800ce30:	b480      	push	{r7}
 800ce32:	b087      	sub	sp, #28
 800ce34:	af00      	add	r7, sp, #0
 800ce36:	60f8      	str	r0, [r7, #12]
 800ce38:	60b9      	str	r1, [r7, #8]
 800ce3a:	607a      	str	r2, [r7, #4]
 800ce3c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800ce3e:	68fb      	ldr	r3, [r7, #12]
 800ce40:	689b      	ldr	r3, [r3, #8]
 800ce42:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ce44:	697b      	ldr	r3, [r7, #20]
 800ce46:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800ce4a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800ce4c:	683b      	ldr	r3, [r7, #0]
 800ce4e:	021a      	lsls	r2, r3, #8
 800ce50:	687b      	ldr	r3, [r7, #4]
 800ce52:	431a      	orrs	r2, r3
 800ce54:	68bb      	ldr	r3, [r7, #8]
 800ce56:	4313      	orrs	r3, r2
 800ce58:	697a      	ldr	r2, [r7, #20]
 800ce5a:	4313      	orrs	r3, r2
 800ce5c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ce5e:	68fb      	ldr	r3, [r7, #12]
 800ce60:	697a      	ldr	r2, [r7, #20]
 800ce62:	609a      	str	r2, [r3, #8]
}
 800ce64:	bf00      	nop
 800ce66:	371c      	adds	r7, #28
 800ce68:	46bd      	mov	sp, r7
 800ce6a:	bc80      	pop	{r7}
 800ce6c:	4770      	bx	lr
	...

0800ce70 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800ce70:	b480      	push	{r7}
 800ce72:	b085      	sub	sp, #20
 800ce74:	af00      	add	r7, sp, #0
 800ce76:	6078      	str	r0, [r7, #4]
 800ce78:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800ce7a:	687b      	ldr	r3, [r7, #4]
 800ce7c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800ce80:	2b01      	cmp	r3, #1
 800ce82:	d101      	bne.n	800ce88 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800ce84:	2302      	movs	r3, #2
 800ce86:	e097      	b.n	800cfb8 <HAL_TIMEx_MasterConfigSynchronization+0x148>
 800ce88:	687b      	ldr	r3, [r7, #4]
 800ce8a:	2201      	movs	r2, #1
 800ce8c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ce90:	687b      	ldr	r3, [r7, #4]
 800ce92:	2202      	movs	r2, #2
 800ce94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800ce98:	687b      	ldr	r3, [r7, #4]
 800ce9a:	681b      	ldr	r3, [r3, #0]
 800ce9c:	685b      	ldr	r3, [r3, #4]
 800ce9e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800cea0:	687b      	ldr	r3, [r7, #4]
 800cea2:	681b      	ldr	r3, [r3, #0]
 800cea4:	689b      	ldr	r3, [r3, #8]
 800cea6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800cea8:	687b      	ldr	r3, [r7, #4]
 800ceaa:	681b      	ldr	r3, [r3, #0]
 800ceac:	4a45      	ldr	r2, [pc, #276]	@ (800cfc4 <HAL_TIMEx_MasterConfigSynchronization+0x154>)
 800ceae:	4293      	cmp	r3, r2
 800ceb0:	d00e      	beq.n	800ced0 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 800ceb2:	687b      	ldr	r3, [r7, #4]
 800ceb4:	681b      	ldr	r3, [r3, #0]
 800ceb6:	4a44      	ldr	r2, [pc, #272]	@ (800cfc8 <HAL_TIMEx_MasterConfigSynchronization+0x158>)
 800ceb8:	4293      	cmp	r3, r2
 800ceba:	d009      	beq.n	800ced0 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 800cebc:	687b      	ldr	r3, [r7, #4]
 800cebe:	681b      	ldr	r3, [r3, #0]
 800cec0:	4a42      	ldr	r2, [pc, #264]	@ (800cfcc <HAL_TIMEx_MasterConfigSynchronization+0x15c>)
 800cec2:	4293      	cmp	r3, r2
 800cec4:	d004      	beq.n	800ced0 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 800cec6:	687b      	ldr	r3, [r7, #4]
 800cec8:	681b      	ldr	r3, [r3, #0]
 800ceca:	4a41      	ldr	r2, [pc, #260]	@ (800cfd0 <HAL_TIMEx_MasterConfigSynchronization+0x160>)
 800cecc:	4293      	cmp	r3, r2
 800cece:	d108      	bne.n	800cee2 <HAL_TIMEx_MasterConfigSynchronization+0x72>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800ced0:	68fb      	ldr	r3, [r7, #12]
 800ced2:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800ced6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800ced8:	683b      	ldr	r3, [r7, #0]
 800ceda:	685b      	ldr	r3, [r3, #4]
 800cedc:	68fa      	ldr	r2, [r7, #12]
 800cede:	4313      	orrs	r3, r2
 800cee0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800cee2:	68fb      	ldr	r3, [r7, #12]
 800cee4:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800cee8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ceec:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800ceee:	683b      	ldr	r3, [r7, #0]
 800cef0:	681b      	ldr	r3, [r3, #0]
 800cef2:	68fa      	ldr	r2, [r7, #12]
 800cef4:	4313      	orrs	r3, r2
 800cef6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800cef8:	687b      	ldr	r3, [r7, #4]
 800cefa:	681b      	ldr	r3, [r3, #0]
 800cefc:	68fa      	ldr	r2, [r7, #12]
 800cefe:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800cf00:	687b      	ldr	r3, [r7, #4]
 800cf02:	681b      	ldr	r3, [r3, #0]
 800cf04:	4a2f      	ldr	r2, [pc, #188]	@ (800cfc4 <HAL_TIMEx_MasterConfigSynchronization+0x154>)
 800cf06:	4293      	cmp	r3, r2
 800cf08:	d040      	beq.n	800cf8c <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800cf0a:	687b      	ldr	r3, [r7, #4]
 800cf0c:	681b      	ldr	r3, [r3, #0]
 800cf0e:	4a2e      	ldr	r2, [pc, #184]	@ (800cfc8 <HAL_TIMEx_MasterConfigSynchronization+0x158>)
 800cf10:	4293      	cmp	r3, r2
 800cf12:	d03b      	beq.n	800cf8c <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800cf14:	687b      	ldr	r3, [r7, #4]
 800cf16:	681b      	ldr	r3, [r3, #0]
 800cf18:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800cf1c:	d036      	beq.n	800cf8c <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800cf1e:	687b      	ldr	r3, [r7, #4]
 800cf20:	681b      	ldr	r3, [r3, #0]
 800cf22:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800cf26:	d031      	beq.n	800cf8c <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800cf28:	687b      	ldr	r3, [r7, #4]
 800cf2a:	681b      	ldr	r3, [r3, #0]
 800cf2c:	4a29      	ldr	r2, [pc, #164]	@ (800cfd4 <HAL_TIMEx_MasterConfigSynchronization+0x164>)
 800cf2e:	4293      	cmp	r3, r2
 800cf30:	d02c      	beq.n	800cf8c <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800cf32:	687b      	ldr	r3, [r7, #4]
 800cf34:	681b      	ldr	r3, [r3, #0]
 800cf36:	4a28      	ldr	r2, [pc, #160]	@ (800cfd8 <HAL_TIMEx_MasterConfigSynchronization+0x168>)
 800cf38:	4293      	cmp	r3, r2
 800cf3a:	d027      	beq.n	800cf8c <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800cf3c:	687b      	ldr	r3, [r7, #4]
 800cf3e:	681b      	ldr	r3, [r3, #0]
 800cf40:	4a26      	ldr	r2, [pc, #152]	@ (800cfdc <HAL_TIMEx_MasterConfigSynchronization+0x16c>)
 800cf42:	4293      	cmp	r3, r2
 800cf44:	d022      	beq.n	800cf8c <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800cf46:	687b      	ldr	r3, [r7, #4]
 800cf48:	681b      	ldr	r3, [r3, #0]
 800cf4a:	4a25      	ldr	r2, [pc, #148]	@ (800cfe0 <HAL_TIMEx_MasterConfigSynchronization+0x170>)
 800cf4c:	4293      	cmp	r3, r2
 800cf4e:	d01d      	beq.n	800cf8c <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800cf50:	687b      	ldr	r3, [r7, #4]
 800cf52:	681b      	ldr	r3, [r3, #0]
 800cf54:	4a23      	ldr	r2, [pc, #140]	@ (800cfe4 <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 800cf56:	4293      	cmp	r3, r2
 800cf58:	d018      	beq.n	800cf8c <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800cf5a:	687b      	ldr	r3, [r7, #4]
 800cf5c:	681b      	ldr	r3, [r3, #0]
 800cf5e:	4a22      	ldr	r2, [pc, #136]	@ (800cfe8 <HAL_TIMEx_MasterConfigSynchronization+0x178>)
 800cf60:	4293      	cmp	r3, r2
 800cf62:	d013      	beq.n	800cf8c <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800cf64:	687b      	ldr	r3, [r7, #4]
 800cf66:	681b      	ldr	r3, [r3, #0]
 800cf68:	4a18      	ldr	r2, [pc, #96]	@ (800cfcc <HAL_TIMEx_MasterConfigSynchronization+0x15c>)
 800cf6a:	4293      	cmp	r3, r2
 800cf6c:	d00e      	beq.n	800cf8c <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800cf6e:	687b      	ldr	r3, [r7, #4]
 800cf70:	681b      	ldr	r3, [r3, #0]
 800cf72:	4a17      	ldr	r2, [pc, #92]	@ (800cfd0 <HAL_TIMEx_MasterConfigSynchronization+0x160>)
 800cf74:	4293      	cmp	r3, r2
 800cf76:	d009      	beq.n	800cf8c <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800cf78:	687b      	ldr	r3, [r7, #4]
 800cf7a:	681b      	ldr	r3, [r3, #0]
 800cf7c:	4a1b      	ldr	r2, [pc, #108]	@ (800cfec <HAL_TIMEx_MasterConfigSynchronization+0x17c>)
 800cf7e:	4293      	cmp	r3, r2
 800cf80:	d004      	beq.n	800cf8c <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800cf82:	687b      	ldr	r3, [r7, #4]
 800cf84:	681b      	ldr	r3, [r3, #0]
 800cf86:	4a1a      	ldr	r2, [pc, #104]	@ (800cff0 <HAL_TIMEx_MasterConfigSynchronization+0x180>)
 800cf88:	4293      	cmp	r3, r2
 800cf8a:	d10c      	bne.n	800cfa6 <HAL_TIMEx_MasterConfigSynchronization+0x136>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800cf8c:	68bb      	ldr	r3, [r7, #8]
 800cf8e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800cf92:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800cf94:	683b      	ldr	r3, [r7, #0]
 800cf96:	689b      	ldr	r3, [r3, #8]
 800cf98:	68ba      	ldr	r2, [r7, #8]
 800cf9a:	4313      	orrs	r3, r2
 800cf9c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800cf9e:	687b      	ldr	r3, [r7, #4]
 800cfa0:	681b      	ldr	r3, [r3, #0]
 800cfa2:	68ba      	ldr	r2, [r7, #8]
 800cfa4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800cfa6:	687b      	ldr	r3, [r7, #4]
 800cfa8:	2201      	movs	r2, #1
 800cfaa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800cfae:	687b      	ldr	r3, [r7, #4]
 800cfb0:	2200      	movs	r2, #0
 800cfb2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800cfb6:	2300      	movs	r3, #0
}
 800cfb8:	4618      	mov	r0, r3
 800cfba:	3714      	adds	r7, #20
 800cfbc:	46bd      	mov	sp, r7
 800cfbe:	bc80      	pop	{r7}
 800cfc0:	4770      	bx	lr
 800cfc2:	bf00      	nop
 800cfc4:	40012c00 	.word	0x40012c00
 800cfc8:	50012c00 	.word	0x50012c00
 800cfcc:	40013400 	.word	0x40013400
 800cfd0:	50013400 	.word	0x50013400
 800cfd4:	40000400 	.word	0x40000400
 800cfd8:	50000400 	.word	0x50000400
 800cfdc:	40000800 	.word	0x40000800
 800cfe0:	50000800 	.word	0x50000800
 800cfe4:	40000c00 	.word	0x40000c00
 800cfe8:	50000c00 	.word	0x50000c00
 800cfec:	40014000 	.word	0x40014000
 800cff0:	50014000 	.word	0x50014000

0800cff4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800cff4:	b480      	push	{r7}
 800cff6:	b083      	sub	sp, #12
 800cff8:	af00      	add	r7, sp, #0
 800cffa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800cffc:	bf00      	nop
 800cffe:	370c      	adds	r7, #12
 800d000:	46bd      	mov	sp, r7
 800d002:	bc80      	pop	{r7}
 800d004:	4770      	bx	lr

0800d006 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800d006:	b480      	push	{r7}
 800d008:	b083      	sub	sp, #12
 800d00a:	af00      	add	r7, sp, #0
 800d00c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800d00e:	bf00      	nop
 800d010:	370c      	adds	r7, #12
 800d012:	46bd      	mov	sp, r7
 800d014:	bc80      	pop	{r7}
 800d016:	4770      	bx	lr

0800d018 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800d018:	b480      	push	{r7}
 800d01a:	b083      	sub	sp, #12
 800d01c:	af00      	add	r7, sp, #0
 800d01e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800d020:	bf00      	nop
 800d022:	370c      	adds	r7, #12
 800d024:	46bd      	mov	sp, r7
 800d026:	bc80      	pop	{r7}
 800d028:	4770      	bx	lr

0800d02a <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800d02a:	b480      	push	{r7}
 800d02c:	b083      	sub	sp, #12
 800d02e:	af00      	add	r7, sp, #0
 800d030:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800d032:	bf00      	nop
 800d034:	370c      	adds	r7, #12
 800d036:	46bd      	mov	sp, r7
 800d038:	bc80      	pop	{r7}
 800d03a:	4770      	bx	lr

0800d03c <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800d03c:	b480      	push	{r7}
 800d03e:	b083      	sub	sp, #12
 800d040:	af00      	add	r7, sp, #0
 800d042:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800d044:	bf00      	nop
 800d046:	370c      	adds	r7, #12
 800d048:	46bd      	mov	sp, r7
 800d04a:	bc80      	pop	{r7}
 800d04c:	4770      	bx	lr

0800d04e <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800d04e:	b480      	push	{r7}
 800d050:	b083      	sub	sp, #12
 800d052:	af00      	add	r7, sp, #0
 800d054:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800d056:	bf00      	nop
 800d058:	370c      	adds	r7, #12
 800d05a:	46bd      	mov	sp, r7
 800d05c:	bc80      	pop	{r7}
 800d05e:	4770      	bx	lr

0800d060 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800d060:	b480      	push	{r7}
 800d062:	b083      	sub	sp, #12
 800d064:	af00      	add	r7, sp, #0
 800d066:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800d068:	bf00      	nop
 800d06a:	370c      	adds	r7, #12
 800d06c:	46bd      	mov	sp, r7
 800d06e:	bc80      	pop	{r7}
 800d070:	4770      	bx	lr

0800d072 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800d072:	b580      	push	{r7, lr}
 800d074:	b082      	sub	sp, #8
 800d076:	af00      	add	r7, sp, #0
 800d078:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800d07a:	687b      	ldr	r3, [r7, #4]
 800d07c:	2b00      	cmp	r3, #0
 800d07e:	d101      	bne.n	800d084 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800d080:	2301      	movs	r3, #1
 800d082:	e042      	b.n	800d10a <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800d084:	687b      	ldr	r3, [r7, #4]
 800d086:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d08a:	2b00      	cmp	r3, #0
 800d08c:	d106      	bne.n	800d09c <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800d08e:	687b      	ldr	r3, [r7, #4]
 800d090:	2200      	movs	r2, #0
 800d092:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800d096:	6878      	ldr	r0, [r7, #4]
 800d098:	f7f7 fe98 	bl	8004dcc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800d09c:	687b      	ldr	r3, [r7, #4]
 800d09e:	2224      	movs	r2, #36	@ 0x24
 800d0a0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800d0a4:	687b      	ldr	r3, [r7, #4]
 800d0a6:	681b      	ldr	r3, [r3, #0]
 800d0a8:	681a      	ldr	r2, [r3, #0]
 800d0aa:	687b      	ldr	r3, [r7, #4]
 800d0ac:	681b      	ldr	r3, [r3, #0]
 800d0ae:	f022 0201 	bic.w	r2, r2, #1
 800d0b2:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800d0b4:	687b      	ldr	r3, [r7, #4]
 800d0b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d0b8:	2b00      	cmp	r3, #0
 800d0ba:	d002      	beq.n	800d0c2 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800d0bc:	6878      	ldr	r0, [r7, #4]
 800d0be:	f000 fa69 	bl	800d594 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800d0c2:	6878      	ldr	r0, [r7, #4]
 800d0c4:	f000 f8c4 	bl	800d250 <UART_SetConfig>
 800d0c8:	4603      	mov	r3, r0
 800d0ca:	2b01      	cmp	r3, #1
 800d0cc:	d101      	bne.n	800d0d2 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800d0ce:	2301      	movs	r3, #1
 800d0d0:	e01b      	b.n	800d10a <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800d0d2:	687b      	ldr	r3, [r7, #4]
 800d0d4:	681b      	ldr	r3, [r3, #0]
 800d0d6:	685a      	ldr	r2, [r3, #4]
 800d0d8:	687b      	ldr	r3, [r7, #4]
 800d0da:	681b      	ldr	r3, [r3, #0]
 800d0dc:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800d0e0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800d0e2:	687b      	ldr	r3, [r7, #4]
 800d0e4:	681b      	ldr	r3, [r3, #0]
 800d0e6:	689a      	ldr	r2, [r3, #8]
 800d0e8:	687b      	ldr	r3, [r7, #4]
 800d0ea:	681b      	ldr	r3, [r3, #0]
 800d0ec:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800d0f0:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800d0f2:	687b      	ldr	r3, [r7, #4]
 800d0f4:	681b      	ldr	r3, [r3, #0]
 800d0f6:	681a      	ldr	r2, [r3, #0]
 800d0f8:	687b      	ldr	r3, [r7, #4]
 800d0fa:	681b      	ldr	r3, [r3, #0]
 800d0fc:	f042 0201 	orr.w	r2, r2, #1
 800d100:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800d102:	6878      	ldr	r0, [r7, #4]
 800d104:	f000 fae7 	bl	800d6d6 <UART_CheckIdleState>
 800d108:	4603      	mov	r3, r0
}
 800d10a:	4618      	mov	r0, r3
 800d10c:	3708      	adds	r7, #8
 800d10e:	46bd      	mov	sp, r7
 800d110:	bd80      	pop	{r7, pc}

0800d112 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800d112:	b580      	push	{r7, lr}
 800d114:	b08a      	sub	sp, #40	@ 0x28
 800d116:	af02      	add	r7, sp, #8
 800d118:	60f8      	str	r0, [r7, #12]
 800d11a:	60b9      	str	r1, [r7, #8]
 800d11c:	603b      	str	r3, [r7, #0]
 800d11e:	4613      	mov	r3, r2
 800d120:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800d122:	68fb      	ldr	r3, [r7, #12]
 800d124:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d128:	2b20      	cmp	r3, #32
 800d12a:	f040 808b 	bne.w	800d244 <HAL_UART_Transmit+0x132>
  {
    if ((pData == NULL) || (Size == 0U))
 800d12e:	68bb      	ldr	r3, [r7, #8]
 800d130:	2b00      	cmp	r3, #0
 800d132:	d002      	beq.n	800d13a <HAL_UART_Transmit+0x28>
 800d134:	88fb      	ldrh	r3, [r7, #6]
 800d136:	2b00      	cmp	r3, #0
 800d138:	d101      	bne.n	800d13e <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800d13a:	2301      	movs	r3, #1
 800d13c:	e083      	b.n	800d246 <HAL_UART_Transmit+0x134>
    }

#if defined(USART_DMAREQUESTS_SW_WA)
    /* Disable the UART DMA Tx request if enabled */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 800d13e:	68fb      	ldr	r3, [r7, #12]
 800d140:	681b      	ldr	r3, [r3, #0]
 800d142:	689b      	ldr	r3, [r3, #8]
 800d144:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d148:	2b80      	cmp	r3, #128	@ 0x80
 800d14a:	d107      	bne.n	800d15c <HAL_UART_Transmit+0x4a>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800d14c:	68fb      	ldr	r3, [r7, #12]
 800d14e:	681b      	ldr	r3, [r3, #0]
 800d150:	689a      	ldr	r2, [r3, #8]
 800d152:	68fb      	ldr	r3, [r7, #12]
 800d154:	681b      	ldr	r3, [r3, #0]
 800d156:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800d15a:	609a      	str	r2, [r3, #8]
    }

#endif /* USART_DMAREQUESTS_SW_WA */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d15c:	68fb      	ldr	r3, [r7, #12]
 800d15e:	2200      	movs	r2, #0
 800d160:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800d164:	68fb      	ldr	r3, [r7, #12]
 800d166:	2221      	movs	r2, #33	@ 0x21
 800d168:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800d16c:	f7f8 f90a 	bl	8005384 <HAL_GetTick>
 800d170:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800d172:	68fb      	ldr	r3, [r7, #12]
 800d174:	88fa      	ldrh	r2, [r7, #6]
 800d176:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800d17a:	68fb      	ldr	r3, [r7, #12]
 800d17c:	88fa      	ldrh	r2, [r7, #6]
 800d17e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d182:	68fb      	ldr	r3, [r7, #12]
 800d184:	689b      	ldr	r3, [r3, #8]
 800d186:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d18a:	d108      	bne.n	800d19e <HAL_UART_Transmit+0x8c>
 800d18c:	68fb      	ldr	r3, [r7, #12]
 800d18e:	691b      	ldr	r3, [r3, #16]
 800d190:	2b00      	cmp	r3, #0
 800d192:	d104      	bne.n	800d19e <HAL_UART_Transmit+0x8c>
    {
      pdata8bits  = NULL;
 800d194:	2300      	movs	r3, #0
 800d196:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800d198:	68bb      	ldr	r3, [r7, #8]
 800d19a:	61bb      	str	r3, [r7, #24]
 800d19c:	e003      	b.n	800d1a6 <HAL_UART_Transmit+0x94>
    }
    else
    {
      pdata8bits  = pData;
 800d19e:	68bb      	ldr	r3, [r7, #8]
 800d1a0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800d1a2:	2300      	movs	r3, #0
 800d1a4:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800d1a6:	e030      	b.n	800d20a <HAL_UART_Transmit+0xf8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800d1a8:	683b      	ldr	r3, [r7, #0]
 800d1aa:	9300      	str	r3, [sp, #0]
 800d1ac:	697b      	ldr	r3, [r7, #20]
 800d1ae:	2200      	movs	r2, #0
 800d1b0:	2180      	movs	r1, #128	@ 0x80
 800d1b2:	68f8      	ldr	r0, [r7, #12]
 800d1b4:	f000 fb39 	bl	800d82a <UART_WaitOnFlagUntilTimeout>
 800d1b8:	4603      	mov	r3, r0
 800d1ba:	2b00      	cmp	r3, #0
 800d1bc:	d005      	beq.n	800d1ca <HAL_UART_Transmit+0xb8>
      {

        huart->gState = HAL_UART_STATE_READY;
 800d1be:	68fb      	ldr	r3, [r7, #12]
 800d1c0:	2220      	movs	r2, #32
 800d1c2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800d1c6:	2303      	movs	r3, #3
 800d1c8:	e03d      	b.n	800d246 <HAL_UART_Transmit+0x134>
      }
      if (pdata8bits == NULL)
 800d1ca:	69fb      	ldr	r3, [r7, #28]
 800d1cc:	2b00      	cmp	r3, #0
 800d1ce:	d10b      	bne.n	800d1e8 <HAL_UART_Transmit+0xd6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800d1d0:	69bb      	ldr	r3, [r7, #24]
 800d1d2:	881b      	ldrh	r3, [r3, #0]
 800d1d4:	461a      	mov	r2, r3
 800d1d6:	68fb      	ldr	r3, [r7, #12]
 800d1d8:	681b      	ldr	r3, [r3, #0]
 800d1da:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800d1de:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800d1e0:	69bb      	ldr	r3, [r7, #24]
 800d1e2:	3302      	adds	r3, #2
 800d1e4:	61bb      	str	r3, [r7, #24]
 800d1e6:	e007      	b.n	800d1f8 <HAL_UART_Transmit+0xe6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800d1e8:	69fb      	ldr	r3, [r7, #28]
 800d1ea:	781a      	ldrb	r2, [r3, #0]
 800d1ec:	68fb      	ldr	r3, [r7, #12]
 800d1ee:	681b      	ldr	r3, [r3, #0]
 800d1f0:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800d1f2:	69fb      	ldr	r3, [r7, #28]
 800d1f4:	3301      	adds	r3, #1
 800d1f6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800d1f8:	68fb      	ldr	r3, [r7, #12]
 800d1fa:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800d1fe:	b29b      	uxth	r3, r3
 800d200:	3b01      	subs	r3, #1
 800d202:	b29a      	uxth	r2, r3
 800d204:	68fb      	ldr	r3, [r7, #12]
 800d206:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800d20a:	68fb      	ldr	r3, [r7, #12]
 800d20c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800d210:	b29b      	uxth	r3, r3
 800d212:	2b00      	cmp	r3, #0
 800d214:	d1c8      	bne.n	800d1a8 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800d216:	683b      	ldr	r3, [r7, #0]
 800d218:	9300      	str	r3, [sp, #0]
 800d21a:	697b      	ldr	r3, [r7, #20]
 800d21c:	2200      	movs	r2, #0
 800d21e:	2140      	movs	r1, #64	@ 0x40
 800d220:	68f8      	ldr	r0, [r7, #12]
 800d222:	f000 fb02 	bl	800d82a <UART_WaitOnFlagUntilTimeout>
 800d226:	4603      	mov	r3, r0
 800d228:	2b00      	cmp	r3, #0
 800d22a:	d005      	beq.n	800d238 <HAL_UART_Transmit+0x126>
    {
      huart->gState = HAL_UART_STATE_READY;
 800d22c:	68fb      	ldr	r3, [r7, #12]
 800d22e:	2220      	movs	r2, #32
 800d230:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800d234:	2303      	movs	r3, #3
 800d236:	e006      	b.n	800d246 <HAL_UART_Transmit+0x134>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800d238:	68fb      	ldr	r3, [r7, #12]
 800d23a:	2220      	movs	r2, #32
 800d23c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800d240:	2300      	movs	r3, #0
 800d242:	e000      	b.n	800d246 <HAL_UART_Transmit+0x134>
  }
  else
  {
    return HAL_BUSY;
 800d244:	2302      	movs	r3, #2
  }
}
 800d246:	4618      	mov	r0, r3
 800d248:	3720      	adds	r7, #32
 800d24a:	46bd      	mov	sp, r7
 800d24c:	bd80      	pop	{r7, pc}
	...

0800d250 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800d250:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800d254:	b094      	sub	sp, #80	@ 0x50
 800d256:	af00      	add	r7, sp, #0
 800d258:	62f8      	str	r0, [r7, #44]	@ 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800d25a:	2300      	movs	r3, #0
 800d25c:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 800d260:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d262:	681a      	ldr	r2, [r3, #0]
 800d264:	4b7e      	ldr	r3, [pc, #504]	@ (800d460 <UART_SetConfig+0x210>)
 800d266:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800d268:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d26a:	689a      	ldr	r2, [r3, #8]
 800d26c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d26e:	691b      	ldr	r3, [r3, #16]
 800d270:	431a      	orrs	r2, r3
 800d272:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d274:	695b      	ldr	r3, [r3, #20]
 800d276:	431a      	orrs	r2, r3
 800d278:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d27a:	69db      	ldr	r3, [r3, #28]
 800d27c:	4313      	orrs	r3, r2
 800d27e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800d280:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d282:	681b      	ldr	r3, [r3, #0]
 800d284:	681b      	ldr	r3, [r3, #0]
 800d286:	4977      	ldr	r1, [pc, #476]	@ (800d464 <UART_SetConfig+0x214>)
 800d288:	4019      	ands	r1, r3
 800d28a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d28c:	681a      	ldr	r2, [r3, #0]
 800d28e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d290:	430b      	orrs	r3, r1
 800d292:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800d294:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d296:	681b      	ldr	r3, [r3, #0]
 800d298:	685b      	ldr	r3, [r3, #4]
 800d29a:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800d29e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d2a0:	68d9      	ldr	r1, [r3, #12]
 800d2a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d2a4:	681a      	ldr	r2, [r3, #0]
 800d2a6:	ea40 0301 	orr.w	r3, r0, r1
 800d2aa:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800d2ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d2ae:	699b      	ldr	r3, [r3, #24]
 800d2b0:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800d2b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d2b4:	681a      	ldr	r2, [r3, #0]
 800d2b6:	4b6a      	ldr	r3, [pc, #424]	@ (800d460 <UART_SetConfig+0x210>)
 800d2b8:	429a      	cmp	r2, r3
 800d2ba:	d009      	beq.n	800d2d0 <UART_SetConfig+0x80>
 800d2bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d2be:	681a      	ldr	r2, [r3, #0]
 800d2c0:	4b69      	ldr	r3, [pc, #420]	@ (800d468 <UART_SetConfig+0x218>)
 800d2c2:	429a      	cmp	r2, r3
 800d2c4:	d004      	beq.n	800d2d0 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800d2c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d2c8:	6a1a      	ldr	r2, [r3, #32]
 800d2ca:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d2cc:	4313      	orrs	r3, r2
 800d2ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800d2d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d2d2:	681b      	ldr	r3, [r3, #0]
 800d2d4:	689b      	ldr	r3, [r3, #8]
 800d2d6:	f023 416e 	bic.w	r1, r3, #3992977408	@ 0xee000000
 800d2da:	f421 6130 	bic.w	r1, r1, #2816	@ 0xb00
 800d2de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d2e0:	681a      	ldr	r2, [r3, #0]
 800d2e2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d2e4:	430b      	orrs	r3, r1
 800d2e6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800d2e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d2ea:	681b      	ldr	r3, [r3, #0]
 800d2ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d2ee:	f023 000f 	bic.w	r0, r3, #15
 800d2f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d2f4:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800d2f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d2f8:	681a      	ldr	r2, [r3, #0]
 800d2fa:	ea40 0301 	orr.w	r3, r0, r1
 800d2fe:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800d300:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d302:	681a      	ldr	r2, [r3, #0]
 800d304:	4b59      	ldr	r3, [pc, #356]	@ (800d46c <UART_SetConfig+0x21c>)
 800d306:	429a      	cmp	r2, r3
 800d308:	d102      	bne.n	800d310 <UART_SetConfig+0xc0>
 800d30a:	2301      	movs	r3, #1
 800d30c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d30e:	e029      	b.n	800d364 <UART_SetConfig+0x114>
 800d310:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d312:	681a      	ldr	r2, [r3, #0]
 800d314:	4b56      	ldr	r3, [pc, #344]	@ (800d470 <UART_SetConfig+0x220>)
 800d316:	429a      	cmp	r2, r3
 800d318:	d102      	bne.n	800d320 <UART_SetConfig+0xd0>
 800d31a:	2302      	movs	r3, #2
 800d31c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d31e:	e021      	b.n	800d364 <UART_SetConfig+0x114>
 800d320:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d322:	681a      	ldr	r2, [r3, #0]
 800d324:	4b53      	ldr	r3, [pc, #332]	@ (800d474 <UART_SetConfig+0x224>)
 800d326:	429a      	cmp	r2, r3
 800d328:	d102      	bne.n	800d330 <UART_SetConfig+0xe0>
 800d32a:	2304      	movs	r3, #4
 800d32c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d32e:	e019      	b.n	800d364 <UART_SetConfig+0x114>
 800d330:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d332:	681a      	ldr	r2, [r3, #0]
 800d334:	4b50      	ldr	r3, [pc, #320]	@ (800d478 <UART_SetConfig+0x228>)
 800d336:	429a      	cmp	r2, r3
 800d338:	d102      	bne.n	800d340 <UART_SetConfig+0xf0>
 800d33a:	2308      	movs	r3, #8
 800d33c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d33e:	e011      	b.n	800d364 <UART_SetConfig+0x114>
 800d340:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d342:	681a      	ldr	r2, [r3, #0]
 800d344:	4b4d      	ldr	r3, [pc, #308]	@ (800d47c <UART_SetConfig+0x22c>)
 800d346:	429a      	cmp	r2, r3
 800d348:	d102      	bne.n	800d350 <UART_SetConfig+0x100>
 800d34a:	2310      	movs	r3, #16
 800d34c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d34e:	e009      	b.n	800d364 <UART_SetConfig+0x114>
 800d350:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d352:	681a      	ldr	r2, [r3, #0]
 800d354:	4b42      	ldr	r3, [pc, #264]	@ (800d460 <UART_SetConfig+0x210>)
 800d356:	429a      	cmp	r2, r3
 800d358:	d102      	bne.n	800d360 <UART_SetConfig+0x110>
 800d35a:	2320      	movs	r3, #32
 800d35c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d35e:	e001      	b.n	800d364 <UART_SetConfig+0x114>
 800d360:	2300      	movs	r3, #0
 800d362:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800d364:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d366:	681a      	ldr	r2, [r3, #0]
 800d368:	4b3d      	ldr	r3, [pc, #244]	@ (800d460 <UART_SetConfig+0x210>)
 800d36a:	429a      	cmp	r2, r3
 800d36c:	d005      	beq.n	800d37a <UART_SetConfig+0x12a>
 800d36e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d370:	681a      	ldr	r2, [r3, #0]
 800d372:	4b3d      	ldr	r3, [pc, #244]	@ (800d468 <UART_SetConfig+0x218>)
 800d374:	429a      	cmp	r2, r3
 800d376:	f040 8085 	bne.w	800d484 <UART_SetConfig+0x234>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800d37a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d37c:	2200      	movs	r2, #0
 800d37e:	623b      	str	r3, [r7, #32]
 800d380:	627a      	str	r2, [r7, #36]	@ 0x24
 800d382:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800d386:	f7fc febd 	bl	800a104 <HAL_RCCEx_GetPeriphCLKFreq>
 800d38a:	6438      	str	r0, [r7, #64]	@ 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 800d38c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d38e:	2b00      	cmp	r3, #0
 800d390:	f000 80e8 	beq.w	800d564 <UART_SetConfig+0x314>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800d394:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d396:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d398:	4a39      	ldr	r2, [pc, #228]	@ (800d480 <UART_SetConfig+0x230>)
 800d39a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d39e:	461a      	mov	r2, r3
 800d3a0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d3a2:	fbb3 f3f2 	udiv	r3, r3, r2
 800d3a6:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800d3a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d3aa:	685a      	ldr	r2, [r3, #4]
 800d3ac:	4613      	mov	r3, r2
 800d3ae:	005b      	lsls	r3, r3, #1
 800d3b0:	4413      	add	r3, r2
 800d3b2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d3b4:	429a      	cmp	r2, r3
 800d3b6:	d305      	bcc.n	800d3c4 <UART_SetConfig+0x174>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800d3b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d3ba:	685b      	ldr	r3, [r3, #4]
 800d3bc:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800d3be:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d3c0:	429a      	cmp	r2, r3
 800d3c2:	d903      	bls.n	800d3cc <UART_SetConfig+0x17c>
      {
        ret = HAL_ERROR;
 800d3c4:	2301      	movs	r3, #1
 800d3c6:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800d3ca:	e048      	b.n	800d45e <UART_SetConfig+0x20e>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d3cc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d3ce:	2200      	movs	r2, #0
 800d3d0:	61bb      	str	r3, [r7, #24]
 800d3d2:	61fa      	str	r2, [r7, #28]
 800d3d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d3d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d3d8:	4a29      	ldr	r2, [pc, #164]	@ (800d480 <UART_SetConfig+0x230>)
 800d3da:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d3de:	b29b      	uxth	r3, r3
 800d3e0:	2200      	movs	r2, #0
 800d3e2:	613b      	str	r3, [r7, #16]
 800d3e4:	617a      	str	r2, [r7, #20]
 800d3e6:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800d3ea:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800d3ee:	f7f3 fead 	bl	800114c <__aeabi_uldivmod>
 800d3f2:	4602      	mov	r2, r0
 800d3f4:	460b      	mov	r3, r1
 800d3f6:	4610      	mov	r0, r2
 800d3f8:	4619      	mov	r1, r3
 800d3fa:	f04f 0200 	mov.w	r2, #0
 800d3fe:	f04f 0300 	mov.w	r3, #0
 800d402:	020b      	lsls	r3, r1, #8
 800d404:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800d408:	0202      	lsls	r2, r0, #8
 800d40a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800d40c:	6849      	ldr	r1, [r1, #4]
 800d40e:	0849      	lsrs	r1, r1, #1
 800d410:	2000      	movs	r0, #0
 800d412:	460c      	mov	r4, r1
 800d414:	4605      	mov	r5, r0
 800d416:	eb12 0804 	adds.w	r8, r2, r4
 800d41a:	eb43 0905 	adc.w	r9, r3, r5
 800d41e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d420:	685b      	ldr	r3, [r3, #4]
 800d422:	2200      	movs	r2, #0
 800d424:	60bb      	str	r3, [r7, #8]
 800d426:	60fa      	str	r2, [r7, #12]
 800d428:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800d42c:	4640      	mov	r0, r8
 800d42e:	4649      	mov	r1, r9
 800d430:	f7f3 fe8c 	bl	800114c <__aeabi_uldivmod>
 800d434:	4602      	mov	r2, r0
 800d436:	460b      	mov	r3, r1
 800d438:	4613      	mov	r3, r2
 800d43a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800d43c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d43e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800d442:	d308      	bcc.n	800d456 <UART_SetConfig+0x206>
 800d444:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d446:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800d44a:	d204      	bcs.n	800d456 <UART_SetConfig+0x206>
        {
          huart->Instance->BRR = usartdiv;
 800d44c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d44e:	681b      	ldr	r3, [r3, #0]
 800d450:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800d452:	60da      	str	r2, [r3, #12]
 800d454:	e003      	b.n	800d45e <UART_SetConfig+0x20e>
        }
        else
        {
          ret = HAL_ERROR;
 800d456:	2301      	movs	r3, #1
 800d458:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    if (pclk != 0U)
 800d45c:	e082      	b.n	800d564 <UART_SetConfig+0x314>
 800d45e:	e081      	b.n	800d564 <UART_SetConfig+0x314>
 800d460:	46002400 	.word	0x46002400
 800d464:	cfff69f3 	.word	0xcfff69f3
 800d468:	56002400 	.word	0x56002400
 800d46c:	40013800 	.word	0x40013800
 800d470:	40004400 	.word	0x40004400
 800d474:	40004800 	.word	0x40004800
 800d478:	40004c00 	.word	0x40004c00
 800d47c:	40005000 	.word	0x40005000
 800d480:	08011ba0 	.word	0x08011ba0
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800d484:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d486:	69db      	ldr	r3, [r3, #28]
 800d488:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800d48c:	d13c      	bne.n	800d508 <UART_SetConfig+0x2b8>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800d48e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d490:	2200      	movs	r2, #0
 800d492:	603b      	str	r3, [r7, #0]
 800d494:	607a      	str	r2, [r7, #4]
 800d496:	e9d7 0100 	ldrd	r0, r1, [r7]
 800d49a:	f7fc fe33 	bl	800a104 <HAL_RCCEx_GetPeriphCLKFreq>
 800d49e:	6438      	str	r0, [r7, #64]	@ 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800d4a0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d4a2:	2b00      	cmp	r3, #0
 800d4a4:	d05e      	beq.n	800d564 <UART_SetConfig+0x314>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d4a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d4a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d4aa:	4a39      	ldr	r2, [pc, #228]	@ (800d590 <UART_SetConfig+0x340>)
 800d4ac:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d4b0:	461a      	mov	r2, r3
 800d4b2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d4b4:	fbb3 f3f2 	udiv	r3, r3, r2
 800d4b8:	005a      	lsls	r2, r3, #1
 800d4ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d4bc:	685b      	ldr	r3, [r3, #4]
 800d4be:	085b      	lsrs	r3, r3, #1
 800d4c0:	441a      	add	r2, r3
 800d4c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d4c4:	685b      	ldr	r3, [r3, #4]
 800d4c6:	fbb2 f3f3 	udiv	r3, r2, r3
 800d4ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d4cc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d4ce:	2b0f      	cmp	r3, #15
 800d4d0:	d916      	bls.n	800d500 <UART_SetConfig+0x2b0>
 800d4d2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d4d4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d4d8:	d212      	bcs.n	800d500 <UART_SetConfig+0x2b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800d4da:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d4dc:	b29b      	uxth	r3, r3
 800d4de:	f023 030f 	bic.w	r3, r3, #15
 800d4e2:	877b      	strh	r3, [r7, #58]	@ 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800d4e4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d4e6:	085b      	lsrs	r3, r3, #1
 800d4e8:	b29b      	uxth	r3, r3
 800d4ea:	f003 0307 	and.w	r3, r3, #7
 800d4ee:	b29a      	uxth	r2, r3
 800d4f0:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800d4f2:	4313      	orrs	r3, r2
 800d4f4:	877b      	strh	r3, [r7, #58]	@ 0x3a
        huart->Instance->BRR = brrtemp;
 800d4f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d4f8:	681b      	ldr	r3, [r3, #0]
 800d4fa:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 800d4fc:	60da      	str	r2, [r3, #12]
 800d4fe:	e031      	b.n	800d564 <UART_SetConfig+0x314>
      }
      else
      {
        ret = HAL_ERROR;
 800d500:	2301      	movs	r3, #1
 800d502:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800d506:	e02d      	b.n	800d564 <UART_SetConfig+0x314>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800d508:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d50a:	2200      	movs	r2, #0
 800d50c:	469a      	mov	sl, r3
 800d50e:	4693      	mov	fp, r2
 800d510:	4650      	mov	r0, sl
 800d512:	4659      	mov	r1, fp
 800d514:	f7fc fdf6 	bl	800a104 <HAL_RCCEx_GetPeriphCLKFreq>
 800d518:	6438      	str	r0, [r7, #64]	@ 0x40

    if (pclk != 0U)
 800d51a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d51c:	2b00      	cmp	r3, #0
 800d51e:	d021      	beq.n	800d564 <UART_SetConfig+0x314>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d520:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d522:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d524:	4a1a      	ldr	r2, [pc, #104]	@ (800d590 <UART_SetConfig+0x340>)
 800d526:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d52a:	461a      	mov	r2, r3
 800d52c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d52e:	fbb3 f2f2 	udiv	r2, r3, r2
 800d532:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d534:	685b      	ldr	r3, [r3, #4]
 800d536:	085b      	lsrs	r3, r3, #1
 800d538:	441a      	add	r2, r3
 800d53a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d53c:	685b      	ldr	r3, [r3, #4]
 800d53e:	fbb2 f3f3 	udiv	r3, r2, r3
 800d542:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d544:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d546:	2b0f      	cmp	r3, #15
 800d548:	d909      	bls.n	800d55e <UART_SetConfig+0x30e>
 800d54a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d54c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d550:	d205      	bcs.n	800d55e <UART_SetConfig+0x30e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800d552:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d554:	b29a      	uxth	r2, r3
 800d556:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d558:	681b      	ldr	r3, [r3, #0]
 800d55a:	60da      	str	r2, [r3, #12]
 800d55c:	e002      	b.n	800d564 <UART_SetConfig+0x314>
      }
      else
      {
        ret = HAL_ERROR;
 800d55e:	2301      	movs	r3, #1
 800d560:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800d564:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d566:	2201      	movs	r2, #1
 800d568:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800d56c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d56e:	2201      	movs	r2, #1
 800d570:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800d574:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d576:	2200      	movs	r2, #0
 800d578:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800d57a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d57c:	2200      	movs	r2, #0
 800d57e:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800d580:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 800d584:	4618      	mov	r0, r3
 800d586:	3750      	adds	r7, #80	@ 0x50
 800d588:	46bd      	mov	sp, r7
 800d58a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800d58e:	bf00      	nop
 800d590:	08011ba0 	.word	0x08011ba0

0800d594 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800d594:	b480      	push	{r7}
 800d596:	b083      	sub	sp, #12
 800d598:	af00      	add	r7, sp, #0
 800d59a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800d59c:	687b      	ldr	r3, [r7, #4]
 800d59e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d5a0:	f003 0308 	and.w	r3, r3, #8
 800d5a4:	2b00      	cmp	r3, #0
 800d5a6:	d00a      	beq.n	800d5be <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800d5a8:	687b      	ldr	r3, [r7, #4]
 800d5aa:	681b      	ldr	r3, [r3, #0]
 800d5ac:	685b      	ldr	r3, [r3, #4]
 800d5ae:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800d5b2:	687b      	ldr	r3, [r7, #4]
 800d5b4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d5b6:	687b      	ldr	r3, [r7, #4]
 800d5b8:	681b      	ldr	r3, [r3, #0]
 800d5ba:	430a      	orrs	r2, r1
 800d5bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800d5be:	687b      	ldr	r3, [r7, #4]
 800d5c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d5c2:	f003 0301 	and.w	r3, r3, #1
 800d5c6:	2b00      	cmp	r3, #0
 800d5c8:	d00a      	beq.n	800d5e0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800d5ca:	687b      	ldr	r3, [r7, #4]
 800d5cc:	681b      	ldr	r3, [r3, #0]
 800d5ce:	685b      	ldr	r3, [r3, #4]
 800d5d0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800d5d4:	687b      	ldr	r3, [r7, #4]
 800d5d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d5d8:	687b      	ldr	r3, [r7, #4]
 800d5da:	681b      	ldr	r3, [r3, #0]
 800d5dc:	430a      	orrs	r2, r1
 800d5de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800d5e0:	687b      	ldr	r3, [r7, #4]
 800d5e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d5e4:	f003 0302 	and.w	r3, r3, #2
 800d5e8:	2b00      	cmp	r3, #0
 800d5ea:	d00a      	beq.n	800d602 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800d5ec:	687b      	ldr	r3, [r7, #4]
 800d5ee:	681b      	ldr	r3, [r3, #0]
 800d5f0:	685b      	ldr	r3, [r3, #4]
 800d5f2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800d5f6:	687b      	ldr	r3, [r7, #4]
 800d5f8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800d5fa:	687b      	ldr	r3, [r7, #4]
 800d5fc:	681b      	ldr	r3, [r3, #0]
 800d5fe:	430a      	orrs	r2, r1
 800d600:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800d602:	687b      	ldr	r3, [r7, #4]
 800d604:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d606:	f003 0304 	and.w	r3, r3, #4
 800d60a:	2b00      	cmp	r3, #0
 800d60c:	d00a      	beq.n	800d624 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800d60e:	687b      	ldr	r3, [r7, #4]
 800d610:	681b      	ldr	r3, [r3, #0]
 800d612:	685b      	ldr	r3, [r3, #4]
 800d614:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800d618:	687b      	ldr	r3, [r7, #4]
 800d61a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d61c:	687b      	ldr	r3, [r7, #4]
 800d61e:	681b      	ldr	r3, [r3, #0]
 800d620:	430a      	orrs	r2, r1
 800d622:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800d624:	687b      	ldr	r3, [r7, #4]
 800d626:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d628:	f003 0310 	and.w	r3, r3, #16
 800d62c:	2b00      	cmp	r3, #0
 800d62e:	d00a      	beq.n	800d646 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800d630:	687b      	ldr	r3, [r7, #4]
 800d632:	681b      	ldr	r3, [r3, #0]
 800d634:	689b      	ldr	r3, [r3, #8]
 800d636:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800d63a:	687b      	ldr	r3, [r7, #4]
 800d63c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800d63e:	687b      	ldr	r3, [r7, #4]
 800d640:	681b      	ldr	r3, [r3, #0]
 800d642:	430a      	orrs	r2, r1
 800d644:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800d646:	687b      	ldr	r3, [r7, #4]
 800d648:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d64a:	f003 0320 	and.w	r3, r3, #32
 800d64e:	2b00      	cmp	r3, #0
 800d650:	d00a      	beq.n	800d668 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800d652:	687b      	ldr	r3, [r7, #4]
 800d654:	681b      	ldr	r3, [r3, #0]
 800d656:	689b      	ldr	r3, [r3, #8]
 800d658:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800d65c:	687b      	ldr	r3, [r7, #4]
 800d65e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800d660:	687b      	ldr	r3, [r7, #4]
 800d662:	681b      	ldr	r3, [r3, #0]
 800d664:	430a      	orrs	r2, r1
 800d666:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800d668:	687b      	ldr	r3, [r7, #4]
 800d66a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d66c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d670:	2b00      	cmp	r3, #0
 800d672:	d01a      	beq.n	800d6aa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800d674:	687b      	ldr	r3, [r7, #4]
 800d676:	681b      	ldr	r3, [r3, #0]
 800d678:	685b      	ldr	r3, [r3, #4]
 800d67a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800d67e:	687b      	ldr	r3, [r7, #4]
 800d680:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800d682:	687b      	ldr	r3, [r7, #4]
 800d684:	681b      	ldr	r3, [r3, #0]
 800d686:	430a      	orrs	r2, r1
 800d688:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800d68a:	687b      	ldr	r3, [r7, #4]
 800d68c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d68e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800d692:	d10a      	bne.n	800d6aa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800d694:	687b      	ldr	r3, [r7, #4]
 800d696:	681b      	ldr	r3, [r3, #0]
 800d698:	685b      	ldr	r3, [r3, #4]
 800d69a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800d69e:	687b      	ldr	r3, [r7, #4]
 800d6a0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800d6a2:	687b      	ldr	r3, [r7, #4]
 800d6a4:	681b      	ldr	r3, [r3, #0]
 800d6a6:	430a      	orrs	r2, r1
 800d6a8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800d6aa:	687b      	ldr	r3, [r7, #4]
 800d6ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d6ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d6b2:	2b00      	cmp	r3, #0
 800d6b4:	d00a      	beq.n	800d6cc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800d6b6:	687b      	ldr	r3, [r7, #4]
 800d6b8:	681b      	ldr	r3, [r3, #0]
 800d6ba:	685b      	ldr	r3, [r3, #4]
 800d6bc:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800d6c0:	687b      	ldr	r3, [r7, #4]
 800d6c2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800d6c4:	687b      	ldr	r3, [r7, #4]
 800d6c6:	681b      	ldr	r3, [r3, #0]
 800d6c8:	430a      	orrs	r2, r1
 800d6ca:	605a      	str	r2, [r3, #4]
  }
}
 800d6cc:	bf00      	nop
 800d6ce:	370c      	adds	r7, #12
 800d6d0:	46bd      	mov	sp, r7
 800d6d2:	bc80      	pop	{r7}
 800d6d4:	4770      	bx	lr

0800d6d6 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800d6d6:	b580      	push	{r7, lr}
 800d6d8:	b098      	sub	sp, #96	@ 0x60
 800d6da:	af02      	add	r7, sp, #8
 800d6dc:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d6de:	687b      	ldr	r3, [r7, #4]
 800d6e0:	2200      	movs	r2, #0
 800d6e2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800d6e6:	f7f7 fe4d 	bl	8005384 <HAL_GetTick>
 800d6ea:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800d6ec:	687b      	ldr	r3, [r7, #4]
 800d6ee:	681b      	ldr	r3, [r3, #0]
 800d6f0:	681b      	ldr	r3, [r3, #0]
 800d6f2:	f003 0308 	and.w	r3, r3, #8
 800d6f6:	2b08      	cmp	r3, #8
 800d6f8:	d12f      	bne.n	800d75a <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d6fa:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800d6fe:	9300      	str	r3, [sp, #0]
 800d700:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d702:	2200      	movs	r2, #0
 800d704:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800d708:	6878      	ldr	r0, [r7, #4]
 800d70a:	f000 f88e 	bl	800d82a <UART_WaitOnFlagUntilTimeout>
 800d70e:	4603      	mov	r3, r0
 800d710:	2b00      	cmp	r3, #0
 800d712:	d022      	beq.n	800d75a <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800d714:	687b      	ldr	r3, [r7, #4]
 800d716:	681b      	ldr	r3, [r3, #0]
 800d718:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d71a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d71c:	e853 3f00 	ldrex	r3, [r3]
 800d720:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800d722:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d724:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800d728:	653b      	str	r3, [r7, #80]	@ 0x50
 800d72a:	687b      	ldr	r3, [r7, #4]
 800d72c:	681b      	ldr	r3, [r3, #0]
 800d72e:	461a      	mov	r2, r3
 800d730:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d732:	647b      	str	r3, [r7, #68]	@ 0x44
 800d734:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d736:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800d738:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800d73a:	e841 2300 	strex	r3, r2, [r1]
 800d73e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800d740:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d742:	2b00      	cmp	r3, #0
 800d744:	d1e6      	bne.n	800d714 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800d746:	687b      	ldr	r3, [r7, #4]
 800d748:	2220      	movs	r2, #32
 800d74a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800d74e:	687b      	ldr	r3, [r7, #4]
 800d750:	2200      	movs	r2, #0
 800d752:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d756:	2303      	movs	r3, #3
 800d758:	e063      	b.n	800d822 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800d75a:	687b      	ldr	r3, [r7, #4]
 800d75c:	681b      	ldr	r3, [r3, #0]
 800d75e:	681b      	ldr	r3, [r3, #0]
 800d760:	f003 0304 	and.w	r3, r3, #4
 800d764:	2b04      	cmp	r3, #4
 800d766:	d149      	bne.n	800d7fc <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d768:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800d76c:	9300      	str	r3, [sp, #0]
 800d76e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d770:	2200      	movs	r2, #0
 800d772:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800d776:	6878      	ldr	r0, [r7, #4]
 800d778:	f000 f857 	bl	800d82a <UART_WaitOnFlagUntilTimeout>
 800d77c:	4603      	mov	r3, r0
 800d77e:	2b00      	cmp	r3, #0
 800d780:	d03c      	beq.n	800d7fc <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d782:	687b      	ldr	r3, [r7, #4]
 800d784:	681b      	ldr	r3, [r3, #0]
 800d786:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d788:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d78a:	e853 3f00 	ldrex	r3, [r3]
 800d78e:	623b      	str	r3, [r7, #32]
   return(result);
 800d790:	6a3b      	ldr	r3, [r7, #32]
 800d792:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800d796:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800d798:	687b      	ldr	r3, [r7, #4]
 800d79a:	681b      	ldr	r3, [r3, #0]
 800d79c:	461a      	mov	r2, r3
 800d79e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d7a0:	633b      	str	r3, [r7, #48]	@ 0x30
 800d7a2:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d7a4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800d7a6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d7a8:	e841 2300 	strex	r3, r2, [r1]
 800d7ac:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800d7ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d7b0:	2b00      	cmp	r3, #0
 800d7b2:	d1e6      	bne.n	800d782 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d7b4:	687b      	ldr	r3, [r7, #4]
 800d7b6:	681b      	ldr	r3, [r3, #0]
 800d7b8:	3308      	adds	r3, #8
 800d7ba:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d7bc:	693b      	ldr	r3, [r7, #16]
 800d7be:	e853 3f00 	ldrex	r3, [r3]
 800d7c2:	60fb      	str	r3, [r7, #12]
   return(result);
 800d7c4:	68fb      	ldr	r3, [r7, #12]
 800d7c6:	f023 0301 	bic.w	r3, r3, #1
 800d7ca:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d7cc:	687b      	ldr	r3, [r7, #4]
 800d7ce:	681b      	ldr	r3, [r3, #0]
 800d7d0:	3308      	adds	r3, #8
 800d7d2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800d7d4:	61fa      	str	r2, [r7, #28]
 800d7d6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d7d8:	69b9      	ldr	r1, [r7, #24]
 800d7da:	69fa      	ldr	r2, [r7, #28]
 800d7dc:	e841 2300 	strex	r3, r2, [r1]
 800d7e0:	617b      	str	r3, [r7, #20]
   return(result);
 800d7e2:	697b      	ldr	r3, [r7, #20]
 800d7e4:	2b00      	cmp	r3, #0
 800d7e6:	d1e5      	bne.n	800d7b4 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800d7e8:	687b      	ldr	r3, [r7, #4]
 800d7ea:	2220      	movs	r2, #32
 800d7ec:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800d7f0:	687b      	ldr	r3, [r7, #4]
 800d7f2:	2200      	movs	r2, #0
 800d7f4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d7f8:	2303      	movs	r3, #3
 800d7fa:	e012      	b.n	800d822 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800d7fc:	687b      	ldr	r3, [r7, #4]
 800d7fe:	2220      	movs	r2, #32
 800d800:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800d804:	687b      	ldr	r3, [r7, #4]
 800d806:	2220      	movs	r2, #32
 800d808:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d80c:	687b      	ldr	r3, [r7, #4]
 800d80e:	2200      	movs	r2, #0
 800d810:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800d812:	687b      	ldr	r3, [r7, #4]
 800d814:	2200      	movs	r2, #0
 800d816:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800d818:	687b      	ldr	r3, [r7, #4]
 800d81a:	2200      	movs	r2, #0
 800d81c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800d820:	2300      	movs	r3, #0
}
 800d822:	4618      	mov	r0, r3
 800d824:	3758      	adds	r7, #88	@ 0x58
 800d826:	46bd      	mov	sp, r7
 800d828:	bd80      	pop	{r7, pc}

0800d82a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800d82a:	b580      	push	{r7, lr}
 800d82c:	b084      	sub	sp, #16
 800d82e:	af00      	add	r7, sp, #0
 800d830:	60f8      	str	r0, [r7, #12]
 800d832:	60b9      	str	r1, [r7, #8]
 800d834:	603b      	str	r3, [r7, #0]
 800d836:	4613      	mov	r3, r2
 800d838:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d83a:	e04f      	b.n	800d8dc <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800d83c:	69bb      	ldr	r3, [r7, #24]
 800d83e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800d842:	d04b      	beq.n	800d8dc <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d844:	f7f7 fd9e 	bl	8005384 <HAL_GetTick>
 800d848:	4602      	mov	r2, r0
 800d84a:	683b      	ldr	r3, [r7, #0]
 800d84c:	1ad3      	subs	r3, r2, r3
 800d84e:	69ba      	ldr	r2, [r7, #24]
 800d850:	429a      	cmp	r2, r3
 800d852:	d302      	bcc.n	800d85a <UART_WaitOnFlagUntilTimeout+0x30>
 800d854:	69bb      	ldr	r3, [r7, #24]
 800d856:	2b00      	cmp	r3, #0
 800d858:	d101      	bne.n	800d85e <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800d85a:	2303      	movs	r3, #3
 800d85c:	e04e      	b.n	800d8fc <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800d85e:	68fb      	ldr	r3, [r7, #12]
 800d860:	681b      	ldr	r3, [r3, #0]
 800d862:	681b      	ldr	r3, [r3, #0]
 800d864:	f003 0304 	and.w	r3, r3, #4
 800d868:	2b00      	cmp	r3, #0
 800d86a:	d037      	beq.n	800d8dc <UART_WaitOnFlagUntilTimeout+0xb2>
 800d86c:	68bb      	ldr	r3, [r7, #8]
 800d86e:	2b80      	cmp	r3, #128	@ 0x80
 800d870:	d034      	beq.n	800d8dc <UART_WaitOnFlagUntilTimeout+0xb2>
 800d872:	68bb      	ldr	r3, [r7, #8]
 800d874:	2b40      	cmp	r3, #64	@ 0x40
 800d876:	d031      	beq.n	800d8dc <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800d878:	68fb      	ldr	r3, [r7, #12]
 800d87a:	681b      	ldr	r3, [r3, #0]
 800d87c:	69db      	ldr	r3, [r3, #28]
 800d87e:	f003 0308 	and.w	r3, r3, #8
 800d882:	2b08      	cmp	r3, #8
 800d884:	d110      	bne.n	800d8a8 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800d886:	68fb      	ldr	r3, [r7, #12]
 800d888:	681b      	ldr	r3, [r3, #0]
 800d88a:	2208      	movs	r2, #8
 800d88c:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800d88e:	68f8      	ldr	r0, [r7, #12]
 800d890:	f000 f838 	bl	800d904 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800d894:	68fb      	ldr	r3, [r7, #12]
 800d896:	2208      	movs	r2, #8
 800d898:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800d89c:	68fb      	ldr	r3, [r7, #12]
 800d89e:	2200      	movs	r2, #0
 800d8a0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800d8a4:	2301      	movs	r3, #1
 800d8a6:	e029      	b.n	800d8fc <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800d8a8:	68fb      	ldr	r3, [r7, #12]
 800d8aa:	681b      	ldr	r3, [r3, #0]
 800d8ac:	69db      	ldr	r3, [r3, #28]
 800d8ae:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800d8b2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800d8b6:	d111      	bne.n	800d8dc <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800d8b8:	68fb      	ldr	r3, [r7, #12]
 800d8ba:	681b      	ldr	r3, [r3, #0]
 800d8bc:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800d8c0:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800d8c2:	68f8      	ldr	r0, [r7, #12]
 800d8c4:	f000 f81e 	bl	800d904 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800d8c8:	68fb      	ldr	r3, [r7, #12]
 800d8ca:	2220      	movs	r2, #32
 800d8cc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800d8d0:	68fb      	ldr	r3, [r7, #12]
 800d8d2:	2200      	movs	r2, #0
 800d8d4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800d8d8:	2303      	movs	r3, #3
 800d8da:	e00f      	b.n	800d8fc <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d8dc:	68fb      	ldr	r3, [r7, #12]
 800d8de:	681b      	ldr	r3, [r3, #0]
 800d8e0:	69da      	ldr	r2, [r3, #28]
 800d8e2:	68bb      	ldr	r3, [r7, #8]
 800d8e4:	4013      	ands	r3, r2
 800d8e6:	68ba      	ldr	r2, [r7, #8]
 800d8e8:	429a      	cmp	r2, r3
 800d8ea:	bf0c      	ite	eq
 800d8ec:	2301      	moveq	r3, #1
 800d8ee:	2300      	movne	r3, #0
 800d8f0:	b2db      	uxtb	r3, r3
 800d8f2:	461a      	mov	r2, r3
 800d8f4:	79fb      	ldrb	r3, [r7, #7]
 800d8f6:	429a      	cmp	r2, r3
 800d8f8:	d0a0      	beq.n	800d83c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800d8fa:	2300      	movs	r3, #0
}
 800d8fc:	4618      	mov	r0, r3
 800d8fe:	3710      	adds	r7, #16
 800d900:	46bd      	mov	sp, r7
 800d902:	bd80      	pop	{r7, pc}

0800d904 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800d904:	b480      	push	{r7}
 800d906:	b095      	sub	sp, #84	@ 0x54
 800d908:	af00      	add	r7, sp, #0
 800d90a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d90c:	687b      	ldr	r3, [r7, #4]
 800d90e:	681b      	ldr	r3, [r3, #0]
 800d910:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d912:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d914:	e853 3f00 	ldrex	r3, [r3]
 800d918:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800d91a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d91c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800d920:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800d922:	687b      	ldr	r3, [r7, #4]
 800d924:	681b      	ldr	r3, [r3, #0]
 800d926:	461a      	mov	r2, r3
 800d928:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d92a:	643b      	str	r3, [r7, #64]	@ 0x40
 800d92c:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d92e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800d930:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800d932:	e841 2300 	strex	r3, r2, [r1]
 800d936:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800d938:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d93a:	2b00      	cmp	r3, #0
 800d93c:	d1e6      	bne.n	800d90c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800d93e:	687b      	ldr	r3, [r7, #4]
 800d940:	681b      	ldr	r3, [r3, #0]
 800d942:	3308      	adds	r3, #8
 800d944:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d946:	6a3b      	ldr	r3, [r7, #32]
 800d948:	e853 3f00 	ldrex	r3, [r3]
 800d94c:	61fb      	str	r3, [r7, #28]
   return(result);
 800d94e:	69fb      	ldr	r3, [r7, #28]
 800d950:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800d954:	f023 0301 	bic.w	r3, r3, #1
 800d958:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d95a:	687b      	ldr	r3, [r7, #4]
 800d95c:	681b      	ldr	r3, [r3, #0]
 800d95e:	3308      	adds	r3, #8
 800d960:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800d962:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800d964:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d966:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800d968:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d96a:	e841 2300 	strex	r3, r2, [r1]
 800d96e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800d970:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d972:	2b00      	cmp	r3, #0
 800d974:	d1e3      	bne.n	800d93e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d976:	687b      	ldr	r3, [r7, #4]
 800d978:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d97a:	2b01      	cmp	r3, #1
 800d97c:	d118      	bne.n	800d9b0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d97e:	687b      	ldr	r3, [r7, #4]
 800d980:	681b      	ldr	r3, [r3, #0]
 800d982:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d984:	68fb      	ldr	r3, [r7, #12]
 800d986:	e853 3f00 	ldrex	r3, [r3]
 800d98a:	60bb      	str	r3, [r7, #8]
   return(result);
 800d98c:	68bb      	ldr	r3, [r7, #8]
 800d98e:	f023 0310 	bic.w	r3, r3, #16
 800d992:	647b      	str	r3, [r7, #68]	@ 0x44
 800d994:	687b      	ldr	r3, [r7, #4]
 800d996:	681b      	ldr	r3, [r3, #0]
 800d998:	461a      	mov	r2, r3
 800d99a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d99c:	61bb      	str	r3, [r7, #24]
 800d99e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d9a0:	6979      	ldr	r1, [r7, #20]
 800d9a2:	69ba      	ldr	r2, [r7, #24]
 800d9a4:	e841 2300 	strex	r3, r2, [r1]
 800d9a8:	613b      	str	r3, [r7, #16]
   return(result);
 800d9aa:	693b      	ldr	r3, [r7, #16]
 800d9ac:	2b00      	cmp	r3, #0
 800d9ae:	d1e6      	bne.n	800d97e <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800d9b0:	687b      	ldr	r3, [r7, #4]
 800d9b2:	2220      	movs	r2, #32
 800d9b4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d9b8:	687b      	ldr	r3, [r7, #4]
 800d9ba:	2200      	movs	r2, #0
 800d9bc:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800d9be:	687b      	ldr	r3, [r7, #4]
 800d9c0:	2200      	movs	r2, #0
 800d9c2:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800d9c4:	bf00      	nop
 800d9c6:	3754      	adds	r7, #84	@ 0x54
 800d9c8:	46bd      	mov	sp, r7
 800d9ca:	bc80      	pop	{r7}
 800d9cc:	4770      	bx	lr

0800d9ce <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800d9ce:	b480      	push	{r7}
 800d9d0:	b085      	sub	sp, #20
 800d9d2:	af00      	add	r7, sp, #0
 800d9d4:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d9d6:	687b      	ldr	r3, [r7, #4]
 800d9d8:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800d9dc:	2b01      	cmp	r3, #1
 800d9de:	d101      	bne.n	800d9e4 <HAL_UARTEx_DisableFifoMode+0x16>
 800d9e0:	2302      	movs	r3, #2
 800d9e2:	e027      	b.n	800da34 <HAL_UARTEx_DisableFifoMode+0x66>
 800d9e4:	687b      	ldr	r3, [r7, #4]
 800d9e6:	2201      	movs	r2, #1
 800d9e8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800d9ec:	687b      	ldr	r3, [r7, #4]
 800d9ee:	2224      	movs	r2, #36	@ 0x24
 800d9f0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d9f4:	687b      	ldr	r3, [r7, #4]
 800d9f6:	681b      	ldr	r3, [r3, #0]
 800d9f8:	681b      	ldr	r3, [r3, #0]
 800d9fa:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d9fc:	687b      	ldr	r3, [r7, #4]
 800d9fe:	681b      	ldr	r3, [r3, #0]
 800da00:	681a      	ldr	r2, [r3, #0]
 800da02:	687b      	ldr	r3, [r7, #4]
 800da04:	681b      	ldr	r3, [r3, #0]
 800da06:	f022 0201 	bic.w	r2, r2, #1
 800da0a:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800da0c:	68fb      	ldr	r3, [r7, #12]
 800da0e:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800da12:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800da14:	687b      	ldr	r3, [r7, #4]
 800da16:	2200      	movs	r2, #0
 800da18:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800da1a:	687b      	ldr	r3, [r7, #4]
 800da1c:	681b      	ldr	r3, [r3, #0]
 800da1e:	68fa      	ldr	r2, [r7, #12]
 800da20:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800da22:	687b      	ldr	r3, [r7, #4]
 800da24:	2220      	movs	r2, #32
 800da26:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800da2a:	687b      	ldr	r3, [r7, #4]
 800da2c:	2200      	movs	r2, #0
 800da2e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800da32:	2300      	movs	r3, #0
}
 800da34:	4618      	mov	r0, r3
 800da36:	3714      	adds	r7, #20
 800da38:	46bd      	mov	sp, r7
 800da3a:	bc80      	pop	{r7}
 800da3c:	4770      	bx	lr

0800da3e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800da3e:	b580      	push	{r7, lr}
 800da40:	b084      	sub	sp, #16
 800da42:	af00      	add	r7, sp, #0
 800da44:	6078      	str	r0, [r7, #4]
 800da46:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800da48:	687b      	ldr	r3, [r7, #4]
 800da4a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800da4e:	2b01      	cmp	r3, #1
 800da50:	d101      	bne.n	800da56 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800da52:	2302      	movs	r3, #2
 800da54:	e02d      	b.n	800dab2 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800da56:	687b      	ldr	r3, [r7, #4]
 800da58:	2201      	movs	r2, #1
 800da5a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800da5e:	687b      	ldr	r3, [r7, #4]
 800da60:	2224      	movs	r2, #36	@ 0x24
 800da62:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800da66:	687b      	ldr	r3, [r7, #4]
 800da68:	681b      	ldr	r3, [r3, #0]
 800da6a:	681b      	ldr	r3, [r3, #0]
 800da6c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800da6e:	687b      	ldr	r3, [r7, #4]
 800da70:	681b      	ldr	r3, [r3, #0]
 800da72:	681a      	ldr	r2, [r3, #0]
 800da74:	687b      	ldr	r3, [r7, #4]
 800da76:	681b      	ldr	r3, [r3, #0]
 800da78:	f022 0201 	bic.w	r2, r2, #1
 800da7c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800da7e:	687b      	ldr	r3, [r7, #4]
 800da80:	681b      	ldr	r3, [r3, #0]
 800da82:	689b      	ldr	r3, [r3, #8]
 800da84:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800da88:	687b      	ldr	r3, [r7, #4]
 800da8a:	681b      	ldr	r3, [r3, #0]
 800da8c:	683a      	ldr	r2, [r7, #0]
 800da8e:	430a      	orrs	r2, r1
 800da90:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800da92:	6878      	ldr	r0, [r7, #4]
 800da94:	f000 f850 	bl	800db38 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800da98:	687b      	ldr	r3, [r7, #4]
 800da9a:	681b      	ldr	r3, [r3, #0]
 800da9c:	68fa      	ldr	r2, [r7, #12]
 800da9e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800daa0:	687b      	ldr	r3, [r7, #4]
 800daa2:	2220      	movs	r2, #32
 800daa4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800daa8:	687b      	ldr	r3, [r7, #4]
 800daaa:	2200      	movs	r2, #0
 800daac:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800dab0:	2300      	movs	r3, #0
}
 800dab2:	4618      	mov	r0, r3
 800dab4:	3710      	adds	r7, #16
 800dab6:	46bd      	mov	sp, r7
 800dab8:	bd80      	pop	{r7, pc}

0800daba <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800daba:	b580      	push	{r7, lr}
 800dabc:	b084      	sub	sp, #16
 800dabe:	af00      	add	r7, sp, #0
 800dac0:	6078      	str	r0, [r7, #4]
 800dac2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800dac4:	687b      	ldr	r3, [r7, #4]
 800dac6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800daca:	2b01      	cmp	r3, #1
 800dacc:	d101      	bne.n	800dad2 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800dace:	2302      	movs	r3, #2
 800dad0:	e02d      	b.n	800db2e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800dad2:	687b      	ldr	r3, [r7, #4]
 800dad4:	2201      	movs	r2, #1
 800dad6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800dada:	687b      	ldr	r3, [r7, #4]
 800dadc:	2224      	movs	r2, #36	@ 0x24
 800dade:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800dae2:	687b      	ldr	r3, [r7, #4]
 800dae4:	681b      	ldr	r3, [r3, #0]
 800dae6:	681b      	ldr	r3, [r3, #0]
 800dae8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800daea:	687b      	ldr	r3, [r7, #4]
 800daec:	681b      	ldr	r3, [r3, #0]
 800daee:	681a      	ldr	r2, [r3, #0]
 800daf0:	687b      	ldr	r3, [r7, #4]
 800daf2:	681b      	ldr	r3, [r3, #0]
 800daf4:	f022 0201 	bic.w	r2, r2, #1
 800daf8:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800dafa:	687b      	ldr	r3, [r7, #4]
 800dafc:	681b      	ldr	r3, [r3, #0]
 800dafe:	689b      	ldr	r3, [r3, #8]
 800db00:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800db04:	687b      	ldr	r3, [r7, #4]
 800db06:	681b      	ldr	r3, [r3, #0]
 800db08:	683a      	ldr	r2, [r7, #0]
 800db0a:	430a      	orrs	r2, r1
 800db0c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800db0e:	6878      	ldr	r0, [r7, #4]
 800db10:	f000 f812 	bl	800db38 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800db14:	687b      	ldr	r3, [r7, #4]
 800db16:	681b      	ldr	r3, [r3, #0]
 800db18:	68fa      	ldr	r2, [r7, #12]
 800db1a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800db1c:	687b      	ldr	r3, [r7, #4]
 800db1e:	2220      	movs	r2, #32
 800db20:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800db24:	687b      	ldr	r3, [r7, #4]
 800db26:	2200      	movs	r2, #0
 800db28:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800db2c:	2300      	movs	r3, #0
}
 800db2e:	4618      	mov	r0, r3
 800db30:	3710      	adds	r7, #16
 800db32:	46bd      	mov	sp, r7
 800db34:	bd80      	pop	{r7, pc}
	...

0800db38 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800db38:	b480      	push	{r7}
 800db3a:	b085      	sub	sp, #20
 800db3c:	af00      	add	r7, sp, #0
 800db3e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800db40:	687b      	ldr	r3, [r7, #4]
 800db42:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800db44:	2b00      	cmp	r3, #0
 800db46:	d108      	bne.n	800db5a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800db48:	687b      	ldr	r3, [r7, #4]
 800db4a:	2201      	movs	r2, #1
 800db4c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800db50:	687b      	ldr	r3, [r7, #4]
 800db52:	2201      	movs	r2, #1
 800db54:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800db58:	e031      	b.n	800dbbe <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800db5a:	2308      	movs	r3, #8
 800db5c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800db5e:	2308      	movs	r3, #8
 800db60:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800db62:	687b      	ldr	r3, [r7, #4]
 800db64:	681b      	ldr	r3, [r3, #0]
 800db66:	689b      	ldr	r3, [r3, #8]
 800db68:	0e5b      	lsrs	r3, r3, #25
 800db6a:	b2db      	uxtb	r3, r3
 800db6c:	f003 0307 	and.w	r3, r3, #7
 800db70:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800db72:	687b      	ldr	r3, [r7, #4]
 800db74:	681b      	ldr	r3, [r3, #0]
 800db76:	689b      	ldr	r3, [r3, #8]
 800db78:	0f5b      	lsrs	r3, r3, #29
 800db7a:	b2db      	uxtb	r3, r3
 800db7c:	f003 0307 	and.w	r3, r3, #7
 800db80:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800db82:	7bbb      	ldrb	r3, [r7, #14]
 800db84:	7b3a      	ldrb	r2, [r7, #12]
 800db86:	4910      	ldr	r1, [pc, #64]	@ (800dbc8 <UARTEx_SetNbDataToProcess+0x90>)
 800db88:	5c8a      	ldrb	r2, [r1, r2]
 800db8a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800db8e:	7b3a      	ldrb	r2, [r7, #12]
 800db90:	490e      	ldr	r1, [pc, #56]	@ (800dbcc <UARTEx_SetNbDataToProcess+0x94>)
 800db92:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800db94:	fb93 f3f2 	sdiv	r3, r3, r2
 800db98:	b29a      	uxth	r2, r3
 800db9a:	687b      	ldr	r3, [r7, #4]
 800db9c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800dba0:	7bfb      	ldrb	r3, [r7, #15]
 800dba2:	7b7a      	ldrb	r2, [r7, #13]
 800dba4:	4908      	ldr	r1, [pc, #32]	@ (800dbc8 <UARTEx_SetNbDataToProcess+0x90>)
 800dba6:	5c8a      	ldrb	r2, [r1, r2]
 800dba8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800dbac:	7b7a      	ldrb	r2, [r7, #13]
 800dbae:	4907      	ldr	r1, [pc, #28]	@ (800dbcc <UARTEx_SetNbDataToProcess+0x94>)
 800dbb0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800dbb2:	fb93 f3f2 	sdiv	r3, r3, r2
 800dbb6:	b29a      	uxth	r2, r3
 800dbb8:	687b      	ldr	r3, [r7, #4]
 800dbba:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800dbbe:	bf00      	nop
 800dbc0:	3714      	adds	r7, #20
 800dbc2:	46bd      	mov	sp, r7
 800dbc4:	bc80      	pop	{r7}
 800dbc6:	4770      	bx	lr
 800dbc8:	08011bb8 	.word	0x08011bb8
 800dbcc:	08011bc0 	.word	0x08011bc0

0800dbd0 <__cvt>:
 800dbd0:	2b00      	cmp	r3, #0
 800dbd2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dbd6:	461d      	mov	r5, r3
 800dbd8:	b088      	sub	sp, #32
 800dbda:	bfb4      	ite	lt
 800dbdc:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 800dbe0:	2300      	movge	r3, #0
 800dbe2:	4614      	mov	r4, r2
 800dbe4:	bfbc      	itt	lt
 800dbe6:	4614      	movlt	r4, r2
 800dbe8:	461d      	movlt	r5, r3
 800dbea:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800dbec:	bfb8      	it	lt
 800dbee:	232d      	movlt	r3, #45	@ 0x2d
 800dbf0:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 800dbf2:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 800dbf6:	7013      	strb	r3, [r2, #0]
 800dbf8:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800dbfa:	f023 0820 	bic.w	r8, r3, #32
 800dbfe:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800dc02:	d005      	beq.n	800dc10 <__cvt+0x40>
 800dc04:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800dc08:	d100      	bne.n	800dc0c <__cvt+0x3c>
 800dc0a:	3601      	adds	r6, #1
 800dc0c:	2302      	movs	r3, #2
 800dc0e:	e000      	b.n	800dc12 <__cvt+0x42>
 800dc10:	2303      	movs	r3, #3
 800dc12:	aa07      	add	r2, sp, #28
 800dc14:	9204      	str	r2, [sp, #16]
 800dc16:	aa06      	add	r2, sp, #24
 800dc18:	e9cd 3600 	strd	r3, r6, [sp]
 800dc1c:	e9cd a202 	strd	sl, r2, [sp, #8]
 800dc20:	462b      	mov	r3, r5
 800dc22:	4622      	mov	r2, r4
 800dc24:	f000 fe6c 	bl	800e900 <_dtoa_r>
 800dc28:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800dc2c:	4607      	mov	r7, r0
 800dc2e:	d119      	bne.n	800dc64 <__cvt+0x94>
 800dc30:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800dc32:	07db      	lsls	r3, r3, #31
 800dc34:	d50e      	bpl.n	800dc54 <__cvt+0x84>
 800dc36:	eb00 0906 	add.w	r9, r0, r6
 800dc3a:	2200      	movs	r2, #0
 800dc3c:	2300      	movs	r3, #0
 800dc3e:	4620      	mov	r0, r4
 800dc40:	4629      	mov	r1, r5
 800dc42:	f7f2 ff45 	bl	8000ad0 <__aeabi_dcmpeq>
 800dc46:	b108      	cbz	r0, 800dc4c <__cvt+0x7c>
 800dc48:	f8cd 901c 	str.w	r9, [sp, #28]
 800dc4c:	2230      	movs	r2, #48	@ 0x30
 800dc4e:	9b07      	ldr	r3, [sp, #28]
 800dc50:	454b      	cmp	r3, r9
 800dc52:	d31e      	bcc.n	800dc92 <__cvt+0xc2>
 800dc54:	9b07      	ldr	r3, [sp, #28]
 800dc56:	4638      	mov	r0, r7
 800dc58:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800dc5a:	1bdb      	subs	r3, r3, r7
 800dc5c:	6013      	str	r3, [r2, #0]
 800dc5e:	b008      	add	sp, #32
 800dc60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dc64:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800dc68:	eb00 0906 	add.w	r9, r0, r6
 800dc6c:	d1e5      	bne.n	800dc3a <__cvt+0x6a>
 800dc6e:	7803      	ldrb	r3, [r0, #0]
 800dc70:	2b30      	cmp	r3, #48	@ 0x30
 800dc72:	d10a      	bne.n	800dc8a <__cvt+0xba>
 800dc74:	2200      	movs	r2, #0
 800dc76:	2300      	movs	r3, #0
 800dc78:	4620      	mov	r0, r4
 800dc7a:	4629      	mov	r1, r5
 800dc7c:	f7f2 ff28 	bl	8000ad0 <__aeabi_dcmpeq>
 800dc80:	b918      	cbnz	r0, 800dc8a <__cvt+0xba>
 800dc82:	f1c6 0601 	rsb	r6, r6, #1
 800dc86:	f8ca 6000 	str.w	r6, [sl]
 800dc8a:	f8da 3000 	ldr.w	r3, [sl]
 800dc8e:	4499      	add	r9, r3
 800dc90:	e7d3      	b.n	800dc3a <__cvt+0x6a>
 800dc92:	1c59      	adds	r1, r3, #1
 800dc94:	9107      	str	r1, [sp, #28]
 800dc96:	701a      	strb	r2, [r3, #0]
 800dc98:	e7d9      	b.n	800dc4e <__cvt+0x7e>

0800dc9a <__exponent>:
 800dc9a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800dc9c:	2900      	cmp	r1, #0
 800dc9e:	7002      	strb	r2, [r0, #0]
 800dca0:	bfba      	itte	lt
 800dca2:	4249      	neglt	r1, r1
 800dca4:	232d      	movlt	r3, #45	@ 0x2d
 800dca6:	232b      	movge	r3, #43	@ 0x2b
 800dca8:	2909      	cmp	r1, #9
 800dcaa:	7043      	strb	r3, [r0, #1]
 800dcac:	dd28      	ble.n	800dd00 <__exponent+0x66>
 800dcae:	f10d 0307 	add.w	r3, sp, #7
 800dcb2:	270a      	movs	r7, #10
 800dcb4:	461d      	mov	r5, r3
 800dcb6:	461a      	mov	r2, r3
 800dcb8:	3b01      	subs	r3, #1
 800dcba:	fbb1 f6f7 	udiv	r6, r1, r7
 800dcbe:	fb07 1416 	mls	r4, r7, r6, r1
 800dcc2:	3430      	adds	r4, #48	@ 0x30
 800dcc4:	f802 4c01 	strb.w	r4, [r2, #-1]
 800dcc8:	460c      	mov	r4, r1
 800dcca:	4631      	mov	r1, r6
 800dccc:	2c63      	cmp	r4, #99	@ 0x63
 800dcce:	dcf2      	bgt.n	800dcb6 <__exponent+0x1c>
 800dcd0:	3130      	adds	r1, #48	@ 0x30
 800dcd2:	1e94      	subs	r4, r2, #2
 800dcd4:	f803 1c01 	strb.w	r1, [r3, #-1]
 800dcd8:	1c41      	adds	r1, r0, #1
 800dcda:	4623      	mov	r3, r4
 800dcdc:	42ab      	cmp	r3, r5
 800dcde:	d30a      	bcc.n	800dcf6 <__exponent+0x5c>
 800dce0:	f10d 0309 	add.w	r3, sp, #9
 800dce4:	1a9b      	subs	r3, r3, r2
 800dce6:	42ac      	cmp	r4, r5
 800dce8:	bf88      	it	hi
 800dcea:	2300      	movhi	r3, #0
 800dcec:	3302      	adds	r3, #2
 800dcee:	4403      	add	r3, r0
 800dcf0:	1a18      	subs	r0, r3, r0
 800dcf2:	b003      	add	sp, #12
 800dcf4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dcf6:	f813 6b01 	ldrb.w	r6, [r3], #1
 800dcfa:	f801 6f01 	strb.w	r6, [r1, #1]!
 800dcfe:	e7ed      	b.n	800dcdc <__exponent+0x42>
 800dd00:	2330      	movs	r3, #48	@ 0x30
 800dd02:	3130      	adds	r1, #48	@ 0x30
 800dd04:	7083      	strb	r3, [r0, #2]
 800dd06:	1d03      	adds	r3, r0, #4
 800dd08:	70c1      	strb	r1, [r0, #3]
 800dd0a:	e7f1      	b.n	800dcf0 <__exponent+0x56>

0800dd0c <_printf_float>:
 800dd0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dd10:	b091      	sub	sp, #68	@ 0x44
 800dd12:	460c      	mov	r4, r1
 800dd14:	4616      	mov	r6, r2
 800dd16:	461f      	mov	r7, r3
 800dd18:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 800dd1c:	4605      	mov	r5, r0
 800dd1e:	f000 fd4f 	bl	800e7c0 <_localeconv_r>
 800dd22:	6803      	ldr	r3, [r0, #0]
 800dd24:	4618      	mov	r0, r3
 800dd26:	9308      	str	r3, [sp, #32]
 800dd28:	f7f2 faa6 	bl	8000278 <strlen>
 800dd2c:	2300      	movs	r3, #0
 800dd2e:	9009      	str	r0, [sp, #36]	@ 0x24
 800dd30:	930e      	str	r3, [sp, #56]	@ 0x38
 800dd32:	f8d8 3000 	ldr.w	r3, [r8]
 800dd36:	f894 a018 	ldrb.w	sl, [r4, #24]
 800dd3a:	3307      	adds	r3, #7
 800dd3c:	f8d4 b000 	ldr.w	fp, [r4]
 800dd40:	f023 0307 	bic.w	r3, r3, #7
 800dd44:	f103 0208 	add.w	r2, r3, #8
 800dd48:	f8c8 2000 	str.w	r2, [r8]
 800dd4c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800dd50:	e9d3 8900 	ldrd	r8, r9, [r3]
 800dd54:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800dd58:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 800dd5c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800dd5e:	4b9e      	ldr	r3, [pc, #632]	@ (800dfd8 <_printf_float+0x2cc>)
 800dd60:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800dd64:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800dd68:	f7f2 fee4 	bl	8000b34 <__aeabi_dcmpun>
 800dd6c:	bb70      	cbnz	r0, 800ddcc <_printf_float+0xc0>
 800dd6e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800dd72:	4b99      	ldr	r3, [pc, #612]	@ (800dfd8 <_printf_float+0x2cc>)
 800dd74:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800dd78:	f7f2 febe 	bl	8000af8 <__aeabi_dcmple>
 800dd7c:	bb30      	cbnz	r0, 800ddcc <_printf_float+0xc0>
 800dd7e:	2200      	movs	r2, #0
 800dd80:	2300      	movs	r3, #0
 800dd82:	4640      	mov	r0, r8
 800dd84:	4649      	mov	r1, r9
 800dd86:	f7f2 fead 	bl	8000ae4 <__aeabi_dcmplt>
 800dd8a:	b110      	cbz	r0, 800dd92 <_printf_float+0x86>
 800dd8c:	232d      	movs	r3, #45	@ 0x2d
 800dd8e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800dd92:	4a92      	ldr	r2, [pc, #584]	@ (800dfdc <_printf_float+0x2d0>)
 800dd94:	4b92      	ldr	r3, [pc, #584]	@ (800dfe0 <_printf_float+0x2d4>)
 800dd96:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800dd9a:	bf8c      	ite	hi
 800dd9c:	4690      	movhi	r8, r2
 800dd9e:	4698      	movls	r8, r3
 800dda0:	2303      	movs	r3, #3
 800dda2:	f04f 0900 	mov.w	r9, #0
 800dda6:	6123      	str	r3, [r4, #16]
 800dda8:	f02b 0304 	bic.w	r3, fp, #4
 800ddac:	6023      	str	r3, [r4, #0]
 800ddae:	4633      	mov	r3, r6
 800ddb0:	aa0f      	add	r2, sp, #60	@ 0x3c
 800ddb2:	4621      	mov	r1, r4
 800ddb4:	4628      	mov	r0, r5
 800ddb6:	9700      	str	r7, [sp, #0]
 800ddb8:	f000 f9d4 	bl	800e164 <_printf_common>
 800ddbc:	3001      	adds	r0, #1
 800ddbe:	f040 808f 	bne.w	800dee0 <_printf_float+0x1d4>
 800ddc2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800ddc6:	b011      	add	sp, #68	@ 0x44
 800ddc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ddcc:	4642      	mov	r2, r8
 800ddce:	464b      	mov	r3, r9
 800ddd0:	4640      	mov	r0, r8
 800ddd2:	4649      	mov	r1, r9
 800ddd4:	f7f2 feae 	bl	8000b34 <__aeabi_dcmpun>
 800ddd8:	b140      	cbz	r0, 800ddec <_printf_float+0xe0>
 800ddda:	464b      	mov	r3, r9
 800dddc:	4a81      	ldr	r2, [pc, #516]	@ (800dfe4 <_printf_float+0x2d8>)
 800ddde:	2b00      	cmp	r3, #0
 800dde0:	bfbc      	itt	lt
 800dde2:	232d      	movlt	r3, #45	@ 0x2d
 800dde4:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800dde8:	4b7f      	ldr	r3, [pc, #508]	@ (800dfe8 <_printf_float+0x2dc>)
 800ddea:	e7d4      	b.n	800dd96 <_printf_float+0x8a>
 800ddec:	6863      	ldr	r3, [r4, #4]
 800ddee:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 800ddf2:	1c5a      	adds	r2, r3, #1
 800ddf4:	d13f      	bne.n	800de76 <_printf_float+0x16a>
 800ddf6:	2306      	movs	r3, #6
 800ddf8:	6063      	str	r3, [r4, #4]
 800ddfa:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 800ddfe:	2200      	movs	r2, #0
 800de00:	4628      	mov	r0, r5
 800de02:	910a      	str	r1, [sp, #40]	@ 0x28
 800de04:	6023      	str	r3, [r4, #0]
 800de06:	9206      	str	r2, [sp, #24]
 800de08:	aa0e      	add	r2, sp, #56	@ 0x38
 800de0a:	e9cd a204 	strd	sl, r2, [sp, #16]
 800de0e:	aa0d      	add	r2, sp, #52	@ 0x34
 800de10:	9203      	str	r2, [sp, #12]
 800de12:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 800de16:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800de1a:	6863      	ldr	r3, [r4, #4]
 800de1c:	4642      	mov	r2, r8
 800de1e:	9300      	str	r3, [sp, #0]
 800de20:	464b      	mov	r3, r9
 800de22:	f7ff fed5 	bl	800dbd0 <__cvt>
 800de26:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800de28:	4680      	mov	r8, r0
 800de2a:	2947      	cmp	r1, #71	@ 0x47
 800de2c:	990d      	ldr	r1, [sp, #52]	@ 0x34
 800de2e:	d128      	bne.n	800de82 <_printf_float+0x176>
 800de30:	1cc8      	adds	r0, r1, #3
 800de32:	db02      	blt.n	800de3a <_printf_float+0x12e>
 800de34:	6863      	ldr	r3, [r4, #4]
 800de36:	4299      	cmp	r1, r3
 800de38:	dd40      	ble.n	800debc <_printf_float+0x1b0>
 800de3a:	f1aa 0a02 	sub.w	sl, sl, #2
 800de3e:	fa5f fa8a 	uxtb.w	sl, sl
 800de42:	3901      	subs	r1, #1
 800de44:	4652      	mov	r2, sl
 800de46:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800de4a:	910d      	str	r1, [sp, #52]	@ 0x34
 800de4c:	f7ff ff25 	bl	800dc9a <__exponent>
 800de50:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800de52:	4681      	mov	r9, r0
 800de54:	1813      	adds	r3, r2, r0
 800de56:	2a01      	cmp	r2, #1
 800de58:	6123      	str	r3, [r4, #16]
 800de5a:	dc02      	bgt.n	800de62 <_printf_float+0x156>
 800de5c:	6822      	ldr	r2, [r4, #0]
 800de5e:	07d2      	lsls	r2, r2, #31
 800de60:	d501      	bpl.n	800de66 <_printf_float+0x15a>
 800de62:	3301      	adds	r3, #1
 800de64:	6123      	str	r3, [r4, #16]
 800de66:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 800de6a:	2b00      	cmp	r3, #0
 800de6c:	d09f      	beq.n	800ddae <_printf_float+0xa2>
 800de6e:	232d      	movs	r3, #45	@ 0x2d
 800de70:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800de74:	e79b      	b.n	800ddae <_printf_float+0xa2>
 800de76:	2947      	cmp	r1, #71	@ 0x47
 800de78:	d1bf      	bne.n	800ddfa <_printf_float+0xee>
 800de7a:	2b00      	cmp	r3, #0
 800de7c:	d1bd      	bne.n	800ddfa <_printf_float+0xee>
 800de7e:	2301      	movs	r3, #1
 800de80:	e7ba      	b.n	800ddf8 <_printf_float+0xec>
 800de82:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800de86:	d9dc      	bls.n	800de42 <_printf_float+0x136>
 800de88:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800de8c:	d118      	bne.n	800dec0 <_printf_float+0x1b4>
 800de8e:	2900      	cmp	r1, #0
 800de90:	6863      	ldr	r3, [r4, #4]
 800de92:	dd0b      	ble.n	800deac <_printf_float+0x1a0>
 800de94:	6121      	str	r1, [r4, #16]
 800de96:	b913      	cbnz	r3, 800de9e <_printf_float+0x192>
 800de98:	6822      	ldr	r2, [r4, #0]
 800de9a:	07d0      	lsls	r0, r2, #31
 800de9c:	d502      	bpl.n	800dea4 <_printf_float+0x198>
 800de9e:	3301      	adds	r3, #1
 800dea0:	440b      	add	r3, r1
 800dea2:	6123      	str	r3, [r4, #16]
 800dea4:	f04f 0900 	mov.w	r9, #0
 800dea8:	65a1      	str	r1, [r4, #88]	@ 0x58
 800deaa:	e7dc      	b.n	800de66 <_printf_float+0x15a>
 800deac:	b913      	cbnz	r3, 800deb4 <_printf_float+0x1a8>
 800deae:	6822      	ldr	r2, [r4, #0]
 800deb0:	07d2      	lsls	r2, r2, #31
 800deb2:	d501      	bpl.n	800deb8 <_printf_float+0x1ac>
 800deb4:	3302      	adds	r3, #2
 800deb6:	e7f4      	b.n	800dea2 <_printf_float+0x196>
 800deb8:	2301      	movs	r3, #1
 800deba:	e7f2      	b.n	800dea2 <_printf_float+0x196>
 800debc:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800dec0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800dec2:	4299      	cmp	r1, r3
 800dec4:	db05      	blt.n	800ded2 <_printf_float+0x1c6>
 800dec6:	6823      	ldr	r3, [r4, #0]
 800dec8:	6121      	str	r1, [r4, #16]
 800deca:	07d8      	lsls	r0, r3, #31
 800decc:	d5ea      	bpl.n	800dea4 <_printf_float+0x198>
 800dece:	1c4b      	adds	r3, r1, #1
 800ded0:	e7e7      	b.n	800dea2 <_printf_float+0x196>
 800ded2:	2900      	cmp	r1, #0
 800ded4:	bfd4      	ite	le
 800ded6:	f1c1 0202 	rsble	r2, r1, #2
 800deda:	2201      	movgt	r2, #1
 800dedc:	4413      	add	r3, r2
 800dede:	e7e0      	b.n	800dea2 <_printf_float+0x196>
 800dee0:	6823      	ldr	r3, [r4, #0]
 800dee2:	055a      	lsls	r2, r3, #21
 800dee4:	d407      	bmi.n	800def6 <_printf_float+0x1ea>
 800dee6:	6923      	ldr	r3, [r4, #16]
 800dee8:	4642      	mov	r2, r8
 800deea:	4631      	mov	r1, r6
 800deec:	4628      	mov	r0, r5
 800deee:	47b8      	blx	r7
 800def0:	3001      	adds	r0, #1
 800def2:	d12b      	bne.n	800df4c <_printf_float+0x240>
 800def4:	e765      	b.n	800ddc2 <_printf_float+0xb6>
 800def6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800defa:	f240 80dd 	bls.w	800e0b8 <_printf_float+0x3ac>
 800defe:	2200      	movs	r2, #0
 800df00:	2300      	movs	r3, #0
 800df02:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800df06:	f7f2 fde3 	bl	8000ad0 <__aeabi_dcmpeq>
 800df0a:	2800      	cmp	r0, #0
 800df0c:	d033      	beq.n	800df76 <_printf_float+0x26a>
 800df0e:	2301      	movs	r3, #1
 800df10:	4a36      	ldr	r2, [pc, #216]	@ (800dfec <_printf_float+0x2e0>)
 800df12:	4631      	mov	r1, r6
 800df14:	4628      	mov	r0, r5
 800df16:	47b8      	blx	r7
 800df18:	3001      	adds	r0, #1
 800df1a:	f43f af52 	beq.w	800ddc2 <_printf_float+0xb6>
 800df1e:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 800df22:	4543      	cmp	r3, r8
 800df24:	db02      	blt.n	800df2c <_printf_float+0x220>
 800df26:	6823      	ldr	r3, [r4, #0]
 800df28:	07d8      	lsls	r0, r3, #31
 800df2a:	d50f      	bpl.n	800df4c <_printf_float+0x240>
 800df2c:	4631      	mov	r1, r6
 800df2e:	4628      	mov	r0, r5
 800df30:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800df34:	47b8      	blx	r7
 800df36:	3001      	adds	r0, #1
 800df38:	f43f af43 	beq.w	800ddc2 <_printf_float+0xb6>
 800df3c:	f04f 0900 	mov.w	r9, #0
 800df40:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 800df44:	f104 0a1a 	add.w	sl, r4, #26
 800df48:	45c8      	cmp	r8, r9
 800df4a:	dc09      	bgt.n	800df60 <_printf_float+0x254>
 800df4c:	6823      	ldr	r3, [r4, #0]
 800df4e:	079b      	lsls	r3, r3, #30
 800df50:	f100 8103 	bmi.w	800e15a <_printf_float+0x44e>
 800df54:	68e0      	ldr	r0, [r4, #12]
 800df56:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800df58:	4298      	cmp	r0, r3
 800df5a:	bfb8      	it	lt
 800df5c:	4618      	movlt	r0, r3
 800df5e:	e732      	b.n	800ddc6 <_printf_float+0xba>
 800df60:	2301      	movs	r3, #1
 800df62:	4652      	mov	r2, sl
 800df64:	4631      	mov	r1, r6
 800df66:	4628      	mov	r0, r5
 800df68:	47b8      	blx	r7
 800df6a:	3001      	adds	r0, #1
 800df6c:	f43f af29 	beq.w	800ddc2 <_printf_float+0xb6>
 800df70:	f109 0901 	add.w	r9, r9, #1
 800df74:	e7e8      	b.n	800df48 <_printf_float+0x23c>
 800df76:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800df78:	2b00      	cmp	r3, #0
 800df7a:	dc39      	bgt.n	800dff0 <_printf_float+0x2e4>
 800df7c:	2301      	movs	r3, #1
 800df7e:	4a1b      	ldr	r2, [pc, #108]	@ (800dfec <_printf_float+0x2e0>)
 800df80:	4631      	mov	r1, r6
 800df82:	4628      	mov	r0, r5
 800df84:	47b8      	blx	r7
 800df86:	3001      	adds	r0, #1
 800df88:	f43f af1b 	beq.w	800ddc2 <_printf_float+0xb6>
 800df8c:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 800df90:	ea59 0303 	orrs.w	r3, r9, r3
 800df94:	d102      	bne.n	800df9c <_printf_float+0x290>
 800df96:	6823      	ldr	r3, [r4, #0]
 800df98:	07d9      	lsls	r1, r3, #31
 800df9a:	d5d7      	bpl.n	800df4c <_printf_float+0x240>
 800df9c:	4631      	mov	r1, r6
 800df9e:	4628      	mov	r0, r5
 800dfa0:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800dfa4:	47b8      	blx	r7
 800dfa6:	3001      	adds	r0, #1
 800dfa8:	f43f af0b 	beq.w	800ddc2 <_printf_float+0xb6>
 800dfac:	f04f 0a00 	mov.w	sl, #0
 800dfb0:	f104 0b1a 	add.w	fp, r4, #26
 800dfb4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800dfb6:	425b      	negs	r3, r3
 800dfb8:	4553      	cmp	r3, sl
 800dfba:	dc01      	bgt.n	800dfc0 <_printf_float+0x2b4>
 800dfbc:	464b      	mov	r3, r9
 800dfbe:	e793      	b.n	800dee8 <_printf_float+0x1dc>
 800dfc0:	2301      	movs	r3, #1
 800dfc2:	465a      	mov	r2, fp
 800dfc4:	4631      	mov	r1, r6
 800dfc6:	4628      	mov	r0, r5
 800dfc8:	47b8      	blx	r7
 800dfca:	3001      	adds	r0, #1
 800dfcc:	f43f aef9 	beq.w	800ddc2 <_printf_float+0xb6>
 800dfd0:	f10a 0a01 	add.w	sl, sl, #1
 800dfd4:	e7ee      	b.n	800dfb4 <_printf_float+0x2a8>
 800dfd6:	bf00      	nop
 800dfd8:	7fefffff 	.word	0x7fefffff
 800dfdc:	08011bcc 	.word	0x08011bcc
 800dfe0:	08011bc8 	.word	0x08011bc8
 800dfe4:	08011bd4 	.word	0x08011bd4
 800dfe8:	08011bd0 	.word	0x08011bd0
 800dfec:	08011bd8 	.word	0x08011bd8
 800dff0:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800dff2:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 800dff6:	4553      	cmp	r3, sl
 800dff8:	bfa8      	it	ge
 800dffa:	4653      	movge	r3, sl
 800dffc:	2b00      	cmp	r3, #0
 800dffe:	4699      	mov	r9, r3
 800e000:	dc36      	bgt.n	800e070 <_printf_float+0x364>
 800e002:	f04f 0b00 	mov.w	fp, #0
 800e006:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800e00a:	f104 021a 	add.w	r2, r4, #26
 800e00e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800e010:	930a      	str	r3, [sp, #40]	@ 0x28
 800e012:	eba3 0309 	sub.w	r3, r3, r9
 800e016:	455b      	cmp	r3, fp
 800e018:	dc31      	bgt.n	800e07e <_printf_float+0x372>
 800e01a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800e01c:	459a      	cmp	sl, r3
 800e01e:	dc3a      	bgt.n	800e096 <_printf_float+0x38a>
 800e020:	6823      	ldr	r3, [r4, #0]
 800e022:	07da      	lsls	r2, r3, #31
 800e024:	d437      	bmi.n	800e096 <_printf_float+0x38a>
 800e026:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800e028:	ebaa 0903 	sub.w	r9, sl, r3
 800e02c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e02e:	ebaa 0303 	sub.w	r3, sl, r3
 800e032:	4599      	cmp	r9, r3
 800e034:	bfa8      	it	ge
 800e036:	4699      	movge	r9, r3
 800e038:	f1b9 0f00 	cmp.w	r9, #0
 800e03c:	dc33      	bgt.n	800e0a6 <_printf_float+0x39a>
 800e03e:	f04f 0800 	mov.w	r8, #0
 800e042:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800e046:	f104 0b1a 	add.w	fp, r4, #26
 800e04a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800e04c:	ebaa 0303 	sub.w	r3, sl, r3
 800e050:	eba3 0309 	sub.w	r3, r3, r9
 800e054:	4543      	cmp	r3, r8
 800e056:	f77f af79 	ble.w	800df4c <_printf_float+0x240>
 800e05a:	2301      	movs	r3, #1
 800e05c:	465a      	mov	r2, fp
 800e05e:	4631      	mov	r1, r6
 800e060:	4628      	mov	r0, r5
 800e062:	47b8      	blx	r7
 800e064:	3001      	adds	r0, #1
 800e066:	f43f aeac 	beq.w	800ddc2 <_printf_float+0xb6>
 800e06a:	f108 0801 	add.w	r8, r8, #1
 800e06e:	e7ec      	b.n	800e04a <_printf_float+0x33e>
 800e070:	4642      	mov	r2, r8
 800e072:	4631      	mov	r1, r6
 800e074:	4628      	mov	r0, r5
 800e076:	47b8      	blx	r7
 800e078:	3001      	adds	r0, #1
 800e07a:	d1c2      	bne.n	800e002 <_printf_float+0x2f6>
 800e07c:	e6a1      	b.n	800ddc2 <_printf_float+0xb6>
 800e07e:	2301      	movs	r3, #1
 800e080:	4631      	mov	r1, r6
 800e082:	4628      	mov	r0, r5
 800e084:	920a      	str	r2, [sp, #40]	@ 0x28
 800e086:	47b8      	blx	r7
 800e088:	3001      	adds	r0, #1
 800e08a:	f43f ae9a 	beq.w	800ddc2 <_printf_float+0xb6>
 800e08e:	f10b 0b01 	add.w	fp, fp, #1
 800e092:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800e094:	e7bb      	b.n	800e00e <_printf_float+0x302>
 800e096:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800e09a:	4631      	mov	r1, r6
 800e09c:	4628      	mov	r0, r5
 800e09e:	47b8      	blx	r7
 800e0a0:	3001      	adds	r0, #1
 800e0a2:	d1c0      	bne.n	800e026 <_printf_float+0x31a>
 800e0a4:	e68d      	b.n	800ddc2 <_printf_float+0xb6>
 800e0a6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800e0a8:	464b      	mov	r3, r9
 800e0aa:	4631      	mov	r1, r6
 800e0ac:	4628      	mov	r0, r5
 800e0ae:	4442      	add	r2, r8
 800e0b0:	47b8      	blx	r7
 800e0b2:	3001      	adds	r0, #1
 800e0b4:	d1c3      	bne.n	800e03e <_printf_float+0x332>
 800e0b6:	e684      	b.n	800ddc2 <_printf_float+0xb6>
 800e0b8:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 800e0bc:	f1ba 0f01 	cmp.w	sl, #1
 800e0c0:	dc01      	bgt.n	800e0c6 <_printf_float+0x3ba>
 800e0c2:	07db      	lsls	r3, r3, #31
 800e0c4:	d536      	bpl.n	800e134 <_printf_float+0x428>
 800e0c6:	2301      	movs	r3, #1
 800e0c8:	4642      	mov	r2, r8
 800e0ca:	4631      	mov	r1, r6
 800e0cc:	4628      	mov	r0, r5
 800e0ce:	47b8      	blx	r7
 800e0d0:	3001      	adds	r0, #1
 800e0d2:	f43f ae76 	beq.w	800ddc2 <_printf_float+0xb6>
 800e0d6:	4631      	mov	r1, r6
 800e0d8:	4628      	mov	r0, r5
 800e0da:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800e0de:	47b8      	blx	r7
 800e0e0:	3001      	adds	r0, #1
 800e0e2:	f43f ae6e 	beq.w	800ddc2 <_printf_float+0xb6>
 800e0e6:	2200      	movs	r2, #0
 800e0e8:	2300      	movs	r3, #0
 800e0ea:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800e0ee:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800e0f2:	f7f2 fced 	bl	8000ad0 <__aeabi_dcmpeq>
 800e0f6:	b9c0      	cbnz	r0, 800e12a <_printf_float+0x41e>
 800e0f8:	4653      	mov	r3, sl
 800e0fa:	f108 0201 	add.w	r2, r8, #1
 800e0fe:	4631      	mov	r1, r6
 800e100:	4628      	mov	r0, r5
 800e102:	47b8      	blx	r7
 800e104:	3001      	adds	r0, #1
 800e106:	d10c      	bne.n	800e122 <_printf_float+0x416>
 800e108:	e65b      	b.n	800ddc2 <_printf_float+0xb6>
 800e10a:	2301      	movs	r3, #1
 800e10c:	465a      	mov	r2, fp
 800e10e:	4631      	mov	r1, r6
 800e110:	4628      	mov	r0, r5
 800e112:	47b8      	blx	r7
 800e114:	3001      	adds	r0, #1
 800e116:	f43f ae54 	beq.w	800ddc2 <_printf_float+0xb6>
 800e11a:	f108 0801 	add.w	r8, r8, #1
 800e11e:	45d0      	cmp	r8, sl
 800e120:	dbf3      	blt.n	800e10a <_printf_float+0x3fe>
 800e122:	464b      	mov	r3, r9
 800e124:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800e128:	e6df      	b.n	800deea <_printf_float+0x1de>
 800e12a:	f04f 0800 	mov.w	r8, #0
 800e12e:	f104 0b1a 	add.w	fp, r4, #26
 800e132:	e7f4      	b.n	800e11e <_printf_float+0x412>
 800e134:	2301      	movs	r3, #1
 800e136:	4642      	mov	r2, r8
 800e138:	e7e1      	b.n	800e0fe <_printf_float+0x3f2>
 800e13a:	2301      	movs	r3, #1
 800e13c:	464a      	mov	r2, r9
 800e13e:	4631      	mov	r1, r6
 800e140:	4628      	mov	r0, r5
 800e142:	47b8      	blx	r7
 800e144:	3001      	adds	r0, #1
 800e146:	f43f ae3c 	beq.w	800ddc2 <_printf_float+0xb6>
 800e14a:	f108 0801 	add.w	r8, r8, #1
 800e14e:	68e3      	ldr	r3, [r4, #12]
 800e150:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800e152:	1a5b      	subs	r3, r3, r1
 800e154:	4543      	cmp	r3, r8
 800e156:	dcf0      	bgt.n	800e13a <_printf_float+0x42e>
 800e158:	e6fc      	b.n	800df54 <_printf_float+0x248>
 800e15a:	f04f 0800 	mov.w	r8, #0
 800e15e:	f104 0919 	add.w	r9, r4, #25
 800e162:	e7f4      	b.n	800e14e <_printf_float+0x442>

0800e164 <_printf_common>:
 800e164:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e168:	4616      	mov	r6, r2
 800e16a:	4698      	mov	r8, r3
 800e16c:	688a      	ldr	r2, [r1, #8]
 800e16e:	4607      	mov	r7, r0
 800e170:	690b      	ldr	r3, [r1, #16]
 800e172:	460c      	mov	r4, r1
 800e174:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800e178:	4293      	cmp	r3, r2
 800e17a:	bfb8      	it	lt
 800e17c:	4613      	movlt	r3, r2
 800e17e:	6033      	str	r3, [r6, #0]
 800e180:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800e184:	b10a      	cbz	r2, 800e18a <_printf_common+0x26>
 800e186:	3301      	adds	r3, #1
 800e188:	6033      	str	r3, [r6, #0]
 800e18a:	6823      	ldr	r3, [r4, #0]
 800e18c:	0699      	lsls	r1, r3, #26
 800e18e:	bf42      	ittt	mi
 800e190:	6833      	ldrmi	r3, [r6, #0]
 800e192:	3302      	addmi	r3, #2
 800e194:	6033      	strmi	r3, [r6, #0]
 800e196:	6825      	ldr	r5, [r4, #0]
 800e198:	f015 0506 	ands.w	r5, r5, #6
 800e19c:	d106      	bne.n	800e1ac <_printf_common+0x48>
 800e19e:	f104 0a19 	add.w	sl, r4, #25
 800e1a2:	68e3      	ldr	r3, [r4, #12]
 800e1a4:	6832      	ldr	r2, [r6, #0]
 800e1a6:	1a9b      	subs	r3, r3, r2
 800e1a8:	42ab      	cmp	r3, r5
 800e1aa:	dc2b      	bgt.n	800e204 <_printf_common+0xa0>
 800e1ac:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800e1b0:	6822      	ldr	r2, [r4, #0]
 800e1b2:	3b00      	subs	r3, #0
 800e1b4:	bf18      	it	ne
 800e1b6:	2301      	movne	r3, #1
 800e1b8:	0692      	lsls	r2, r2, #26
 800e1ba:	d430      	bmi.n	800e21e <_printf_common+0xba>
 800e1bc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800e1c0:	4641      	mov	r1, r8
 800e1c2:	4638      	mov	r0, r7
 800e1c4:	47c8      	blx	r9
 800e1c6:	3001      	adds	r0, #1
 800e1c8:	d023      	beq.n	800e212 <_printf_common+0xae>
 800e1ca:	6823      	ldr	r3, [r4, #0]
 800e1cc:	341a      	adds	r4, #26
 800e1ce:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 800e1d2:	f003 0306 	and.w	r3, r3, #6
 800e1d6:	2b04      	cmp	r3, #4
 800e1d8:	bf0a      	itet	eq
 800e1da:	f854 5c0e 	ldreq.w	r5, [r4, #-14]
 800e1de:	2500      	movne	r5, #0
 800e1e0:	6833      	ldreq	r3, [r6, #0]
 800e1e2:	f04f 0600 	mov.w	r6, #0
 800e1e6:	bf08      	it	eq
 800e1e8:	1aed      	subeq	r5, r5, r3
 800e1ea:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800e1ee:	bf08      	it	eq
 800e1f0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e1f4:	4293      	cmp	r3, r2
 800e1f6:	bfc4      	itt	gt
 800e1f8:	1a9b      	subgt	r3, r3, r2
 800e1fa:	18ed      	addgt	r5, r5, r3
 800e1fc:	42b5      	cmp	r5, r6
 800e1fe:	d11a      	bne.n	800e236 <_printf_common+0xd2>
 800e200:	2000      	movs	r0, #0
 800e202:	e008      	b.n	800e216 <_printf_common+0xb2>
 800e204:	2301      	movs	r3, #1
 800e206:	4652      	mov	r2, sl
 800e208:	4641      	mov	r1, r8
 800e20a:	4638      	mov	r0, r7
 800e20c:	47c8      	blx	r9
 800e20e:	3001      	adds	r0, #1
 800e210:	d103      	bne.n	800e21a <_printf_common+0xb6>
 800e212:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800e216:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e21a:	3501      	adds	r5, #1
 800e21c:	e7c1      	b.n	800e1a2 <_printf_common+0x3e>
 800e21e:	18e1      	adds	r1, r4, r3
 800e220:	1c5a      	adds	r2, r3, #1
 800e222:	2030      	movs	r0, #48	@ 0x30
 800e224:	3302      	adds	r3, #2
 800e226:	4422      	add	r2, r4
 800e228:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800e22c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800e230:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800e234:	e7c2      	b.n	800e1bc <_printf_common+0x58>
 800e236:	2301      	movs	r3, #1
 800e238:	4622      	mov	r2, r4
 800e23a:	4641      	mov	r1, r8
 800e23c:	4638      	mov	r0, r7
 800e23e:	47c8      	blx	r9
 800e240:	3001      	adds	r0, #1
 800e242:	d0e6      	beq.n	800e212 <_printf_common+0xae>
 800e244:	3601      	adds	r6, #1
 800e246:	e7d9      	b.n	800e1fc <_printf_common+0x98>

0800e248 <_printf_i>:
 800e248:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e24c:	7e0f      	ldrb	r7, [r1, #24]
 800e24e:	4691      	mov	r9, r2
 800e250:	4680      	mov	r8, r0
 800e252:	460c      	mov	r4, r1
 800e254:	2f78      	cmp	r7, #120	@ 0x78
 800e256:	469a      	mov	sl, r3
 800e258:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800e25a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800e25e:	d807      	bhi.n	800e270 <_printf_i+0x28>
 800e260:	2f62      	cmp	r7, #98	@ 0x62
 800e262:	d80a      	bhi.n	800e27a <_printf_i+0x32>
 800e264:	2f00      	cmp	r7, #0
 800e266:	f000 80d1 	beq.w	800e40c <_printf_i+0x1c4>
 800e26a:	2f58      	cmp	r7, #88	@ 0x58
 800e26c:	f000 80b8 	beq.w	800e3e0 <_printf_i+0x198>
 800e270:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800e274:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800e278:	e03a      	b.n	800e2f0 <_printf_i+0xa8>
 800e27a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800e27e:	2b15      	cmp	r3, #21
 800e280:	d8f6      	bhi.n	800e270 <_printf_i+0x28>
 800e282:	a101      	add	r1, pc, #4	@ (adr r1, 800e288 <_printf_i+0x40>)
 800e284:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800e288:	0800e2e1 	.word	0x0800e2e1
 800e28c:	0800e2f5 	.word	0x0800e2f5
 800e290:	0800e271 	.word	0x0800e271
 800e294:	0800e271 	.word	0x0800e271
 800e298:	0800e271 	.word	0x0800e271
 800e29c:	0800e271 	.word	0x0800e271
 800e2a0:	0800e2f5 	.word	0x0800e2f5
 800e2a4:	0800e271 	.word	0x0800e271
 800e2a8:	0800e271 	.word	0x0800e271
 800e2ac:	0800e271 	.word	0x0800e271
 800e2b0:	0800e271 	.word	0x0800e271
 800e2b4:	0800e3f3 	.word	0x0800e3f3
 800e2b8:	0800e31f 	.word	0x0800e31f
 800e2bc:	0800e3ad 	.word	0x0800e3ad
 800e2c0:	0800e271 	.word	0x0800e271
 800e2c4:	0800e271 	.word	0x0800e271
 800e2c8:	0800e415 	.word	0x0800e415
 800e2cc:	0800e271 	.word	0x0800e271
 800e2d0:	0800e31f 	.word	0x0800e31f
 800e2d4:	0800e271 	.word	0x0800e271
 800e2d8:	0800e271 	.word	0x0800e271
 800e2dc:	0800e3b5 	.word	0x0800e3b5
 800e2e0:	6833      	ldr	r3, [r6, #0]
 800e2e2:	1d1a      	adds	r2, r3, #4
 800e2e4:	681b      	ldr	r3, [r3, #0]
 800e2e6:	6032      	str	r2, [r6, #0]
 800e2e8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800e2ec:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800e2f0:	2301      	movs	r3, #1
 800e2f2:	e09c      	b.n	800e42e <_printf_i+0x1e6>
 800e2f4:	6833      	ldr	r3, [r6, #0]
 800e2f6:	6820      	ldr	r0, [r4, #0]
 800e2f8:	1d19      	adds	r1, r3, #4
 800e2fa:	6031      	str	r1, [r6, #0]
 800e2fc:	0606      	lsls	r6, r0, #24
 800e2fe:	d501      	bpl.n	800e304 <_printf_i+0xbc>
 800e300:	681d      	ldr	r5, [r3, #0]
 800e302:	e003      	b.n	800e30c <_printf_i+0xc4>
 800e304:	0645      	lsls	r5, r0, #25
 800e306:	d5fb      	bpl.n	800e300 <_printf_i+0xb8>
 800e308:	f9b3 5000 	ldrsh.w	r5, [r3]
 800e30c:	2d00      	cmp	r5, #0
 800e30e:	da03      	bge.n	800e318 <_printf_i+0xd0>
 800e310:	232d      	movs	r3, #45	@ 0x2d
 800e312:	426d      	negs	r5, r5
 800e314:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e318:	4858      	ldr	r0, [pc, #352]	@ (800e47c <_printf_i+0x234>)
 800e31a:	230a      	movs	r3, #10
 800e31c:	e011      	b.n	800e342 <_printf_i+0xfa>
 800e31e:	6821      	ldr	r1, [r4, #0]
 800e320:	6833      	ldr	r3, [r6, #0]
 800e322:	0608      	lsls	r0, r1, #24
 800e324:	f853 5b04 	ldr.w	r5, [r3], #4
 800e328:	d402      	bmi.n	800e330 <_printf_i+0xe8>
 800e32a:	0649      	lsls	r1, r1, #25
 800e32c:	bf48      	it	mi
 800e32e:	b2ad      	uxthmi	r5, r5
 800e330:	2f6f      	cmp	r7, #111	@ 0x6f
 800e332:	6033      	str	r3, [r6, #0]
 800e334:	4851      	ldr	r0, [pc, #324]	@ (800e47c <_printf_i+0x234>)
 800e336:	bf14      	ite	ne
 800e338:	230a      	movne	r3, #10
 800e33a:	2308      	moveq	r3, #8
 800e33c:	2100      	movs	r1, #0
 800e33e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800e342:	6866      	ldr	r6, [r4, #4]
 800e344:	2e00      	cmp	r6, #0
 800e346:	60a6      	str	r6, [r4, #8]
 800e348:	db05      	blt.n	800e356 <_printf_i+0x10e>
 800e34a:	6821      	ldr	r1, [r4, #0]
 800e34c:	432e      	orrs	r6, r5
 800e34e:	f021 0104 	bic.w	r1, r1, #4
 800e352:	6021      	str	r1, [r4, #0]
 800e354:	d04b      	beq.n	800e3ee <_printf_i+0x1a6>
 800e356:	4616      	mov	r6, r2
 800e358:	fbb5 f1f3 	udiv	r1, r5, r3
 800e35c:	fb03 5711 	mls	r7, r3, r1, r5
 800e360:	5dc7      	ldrb	r7, [r0, r7]
 800e362:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800e366:	462f      	mov	r7, r5
 800e368:	460d      	mov	r5, r1
 800e36a:	42bb      	cmp	r3, r7
 800e36c:	d9f4      	bls.n	800e358 <_printf_i+0x110>
 800e36e:	2b08      	cmp	r3, #8
 800e370:	d10b      	bne.n	800e38a <_printf_i+0x142>
 800e372:	6823      	ldr	r3, [r4, #0]
 800e374:	07df      	lsls	r7, r3, #31
 800e376:	d508      	bpl.n	800e38a <_printf_i+0x142>
 800e378:	6923      	ldr	r3, [r4, #16]
 800e37a:	6861      	ldr	r1, [r4, #4]
 800e37c:	4299      	cmp	r1, r3
 800e37e:	bfde      	ittt	le
 800e380:	2330      	movle	r3, #48	@ 0x30
 800e382:	f806 3c01 	strble.w	r3, [r6, #-1]
 800e386:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800e38a:	1b92      	subs	r2, r2, r6
 800e38c:	6122      	str	r2, [r4, #16]
 800e38e:	464b      	mov	r3, r9
 800e390:	aa03      	add	r2, sp, #12
 800e392:	4621      	mov	r1, r4
 800e394:	4640      	mov	r0, r8
 800e396:	f8cd a000 	str.w	sl, [sp]
 800e39a:	f7ff fee3 	bl	800e164 <_printf_common>
 800e39e:	3001      	adds	r0, #1
 800e3a0:	d14a      	bne.n	800e438 <_printf_i+0x1f0>
 800e3a2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800e3a6:	b004      	add	sp, #16
 800e3a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e3ac:	6823      	ldr	r3, [r4, #0]
 800e3ae:	f043 0320 	orr.w	r3, r3, #32
 800e3b2:	6023      	str	r3, [r4, #0]
 800e3b4:	2778      	movs	r7, #120	@ 0x78
 800e3b6:	4832      	ldr	r0, [pc, #200]	@ (800e480 <_printf_i+0x238>)
 800e3b8:	6823      	ldr	r3, [r4, #0]
 800e3ba:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800e3be:	061f      	lsls	r7, r3, #24
 800e3c0:	6831      	ldr	r1, [r6, #0]
 800e3c2:	f851 5b04 	ldr.w	r5, [r1], #4
 800e3c6:	d402      	bmi.n	800e3ce <_printf_i+0x186>
 800e3c8:	065f      	lsls	r7, r3, #25
 800e3ca:	bf48      	it	mi
 800e3cc:	b2ad      	uxthmi	r5, r5
 800e3ce:	6031      	str	r1, [r6, #0]
 800e3d0:	07d9      	lsls	r1, r3, #31
 800e3d2:	bf44      	itt	mi
 800e3d4:	f043 0320 	orrmi.w	r3, r3, #32
 800e3d8:	6023      	strmi	r3, [r4, #0]
 800e3da:	b11d      	cbz	r5, 800e3e4 <_printf_i+0x19c>
 800e3dc:	2310      	movs	r3, #16
 800e3de:	e7ad      	b.n	800e33c <_printf_i+0xf4>
 800e3e0:	4826      	ldr	r0, [pc, #152]	@ (800e47c <_printf_i+0x234>)
 800e3e2:	e7e9      	b.n	800e3b8 <_printf_i+0x170>
 800e3e4:	6823      	ldr	r3, [r4, #0]
 800e3e6:	f023 0320 	bic.w	r3, r3, #32
 800e3ea:	6023      	str	r3, [r4, #0]
 800e3ec:	e7f6      	b.n	800e3dc <_printf_i+0x194>
 800e3ee:	4616      	mov	r6, r2
 800e3f0:	e7bd      	b.n	800e36e <_printf_i+0x126>
 800e3f2:	6833      	ldr	r3, [r6, #0]
 800e3f4:	6825      	ldr	r5, [r4, #0]
 800e3f6:	1d18      	adds	r0, r3, #4
 800e3f8:	6961      	ldr	r1, [r4, #20]
 800e3fa:	6030      	str	r0, [r6, #0]
 800e3fc:	062e      	lsls	r6, r5, #24
 800e3fe:	681b      	ldr	r3, [r3, #0]
 800e400:	d501      	bpl.n	800e406 <_printf_i+0x1be>
 800e402:	6019      	str	r1, [r3, #0]
 800e404:	e002      	b.n	800e40c <_printf_i+0x1c4>
 800e406:	0668      	lsls	r0, r5, #25
 800e408:	d5fb      	bpl.n	800e402 <_printf_i+0x1ba>
 800e40a:	8019      	strh	r1, [r3, #0]
 800e40c:	2300      	movs	r3, #0
 800e40e:	4616      	mov	r6, r2
 800e410:	6123      	str	r3, [r4, #16]
 800e412:	e7bc      	b.n	800e38e <_printf_i+0x146>
 800e414:	6833      	ldr	r3, [r6, #0]
 800e416:	2100      	movs	r1, #0
 800e418:	1d1a      	adds	r2, r3, #4
 800e41a:	6032      	str	r2, [r6, #0]
 800e41c:	681e      	ldr	r6, [r3, #0]
 800e41e:	6862      	ldr	r2, [r4, #4]
 800e420:	4630      	mov	r0, r6
 800e422:	f000 f9d1 	bl	800e7c8 <memchr>
 800e426:	b108      	cbz	r0, 800e42c <_printf_i+0x1e4>
 800e428:	1b80      	subs	r0, r0, r6
 800e42a:	6060      	str	r0, [r4, #4]
 800e42c:	6863      	ldr	r3, [r4, #4]
 800e42e:	6123      	str	r3, [r4, #16]
 800e430:	2300      	movs	r3, #0
 800e432:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e436:	e7aa      	b.n	800e38e <_printf_i+0x146>
 800e438:	6923      	ldr	r3, [r4, #16]
 800e43a:	4632      	mov	r2, r6
 800e43c:	4649      	mov	r1, r9
 800e43e:	4640      	mov	r0, r8
 800e440:	47d0      	blx	sl
 800e442:	3001      	adds	r0, #1
 800e444:	d0ad      	beq.n	800e3a2 <_printf_i+0x15a>
 800e446:	6823      	ldr	r3, [r4, #0]
 800e448:	079b      	lsls	r3, r3, #30
 800e44a:	d413      	bmi.n	800e474 <_printf_i+0x22c>
 800e44c:	68e0      	ldr	r0, [r4, #12]
 800e44e:	9b03      	ldr	r3, [sp, #12]
 800e450:	4298      	cmp	r0, r3
 800e452:	bfb8      	it	lt
 800e454:	4618      	movlt	r0, r3
 800e456:	e7a6      	b.n	800e3a6 <_printf_i+0x15e>
 800e458:	2301      	movs	r3, #1
 800e45a:	4632      	mov	r2, r6
 800e45c:	4649      	mov	r1, r9
 800e45e:	4640      	mov	r0, r8
 800e460:	47d0      	blx	sl
 800e462:	3001      	adds	r0, #1
 800e464:	d09d      	beq.n	800e3a2 <_printf_i+0x15a>
 800e466:	3501      	adds	r5, #1
 800e468:	68e3      	ldr	r3, [r4, #12]
 800e46a:	9903      	ldr	r1, [sp, #12]
 800e46c:	1a5b      	subs	r3, r3, r1
 800e46e:	42ab      	cmp	r3, r5
 800e470:	dcf2      	bgt.n	800e458 <_printf_i+0x210>
 800e472:	e7eb      	b.n	800e44c <_printf_i+0x204>
 800e474:	2500      	movs	r5, #0
 800e476:	f104 0619 	add.w	r6, r4, #25
 800e47a:	e7f5      	b.n	800e468 <_printf_i+0x220>
 800e47c:	08011bda 	.word	0x08011bda
 800e480:	08011beb 	.word	0x08011beb

0800e484 <sniprintf>:
 800e484:	b40c      	push	{r2, r3}
 800e486:	4b19      	ldr	r3, [pc, #100]	@ (800e4ec <sniprintf+0x68>)
 800e488:	b530      	push	{r4, r5, lr}
 800e48a:	1e0c      	subs	r4, r1, #0
 800e48c:	b09d      	sub	sp, #116	@ 0x74
 800e48e:	681d      	ldr	r5, [r3, #0]
 800e490:	da08      	bge.n	800e4a4 <sniprintf+0x20>
 800e492:	238b      	movs	r3, #139	@ 0x8b
 800e494:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800e498:	602b      	str	r3, [r5, #0]
 800e49a:	b01d      	add	sp, #116	@ 0x74
 800e49c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e4a0:	b002      	add	sp, #8
 800e4a2:	4770      	bx	lr
 800e4a4:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800e4a8:	9002      	str	r0, [sp, #8]
 800e4aa:	9006      	str	r0, [sp, #24]
 800e4ac:	a902      	add	r1, sp, #8
 800e4ae:	f8ad 3014 	strh.w	r3, [sp, #20]
 800e4b2:	f04f 0300 	mov.w	r3, #0
 800e4b6:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800e4b8:	4628      	mov	r0, r5
 800e4ba:	931b      	str	r3, [sp, #108]	@ 0x6c
 800e4bc:	bf14      	ite	ne
 800e4be:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 800e4c2:	4623      	moveq	r3, r4
 800e4c4:	9304      	str	r3, [sp, #16]
 800e4c6:	9307      	str	r3, [sp, #28]
 800e4c8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800e4cc:	f8ad 3016 	strh.w	r3, [sp, #22]
 800e4d0:	ab21      	add	r3, sp, #132	@ 0x84
 800e4d2:	9301      	str	r3, [sp, #4]
 800e4d4:	f001 f842 	bl	800f55c <_svfiprintf_r>
 800e4d8:	1c43      	adds	r3, r0, #1
 800e4da:	bfbc      	itt	lt
 800e4dc:	238b      	movlt	r3, #139	@ 0x8b
 800e4de:	602b      	strlt	r3, [r5, #0]
 800e4e0:	2c00      	cmp	r4, #0
 800e4e2:	d0da      	beq.n	800e49a <sniprintf+0x16>
 800e4e4:	9b02      	ldr	r3, [sp, #8]
 800e4e6:	2200      	movs	r2, #0
 800e4e8:	701a      	strb	r2, [r3, #0]
 800e4ea:	e7d6      	b.n	800e49a <sniprintf+0x16>
 800e4ec:	20000040 	.word	0x20000040

0800e4f0 <std>:
 800e4f0:	2300      	movs	r3, #0
 800e4f2:	b510      	push	{r4, lr}
 800e4f4:	4604      	mov	r4, r0
 800e4f6:	6083      	str	r3, [r0, #8]
 800e4f8:	8181      	strh	r1, [r0, #12]
 800e4fa:	4619      	mov	r1, r3
 800e4fc:	6643      	str	r3, [r0, #100]	@ 0x64
 800e4fe:	81c2      	strh	r2, [r0, #14]
 800e500:	2208      	movs	r2, #8
 800e502:	6183      	str	r3, [r0, #24]
 800e504:	e9c0 3300 	strd	r3, r3, [r0]
 800e508:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e50c:	305c      	adds	r0, #92	@ 0x5c
 800e50e:	f000 f921 	bl	800e754 <memset>
 800e512:	4b0d      	ldr	r3, [pc, #52]	@ (800e548 <std+0x58>)
 800e514:	6224      	str	r4, [r4, #32]
 800e516:	6263      	str	r3, [r4, #36]	@ 0x24
 800e518:	4b0c      	ldr	r3, [pc, #48]	@ (800e54c <std+0x5c>)
 800e51a:	62a3      	str	r3, [r4, #40]	@ 0x28
 800e51c:	4b0c      	ldr	r3, [pc, #48]	@ (800e550 <std+0x60>)
 800e51e:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800e520:	4b0c      	ldr	r3, [pc, #48]	@ (800e554 <std+0x64>)
 800e522:	6323      	str	r3, [r4, #48]	@ 0x30
 800e524:	4b0c      	ldr	r3, [pc, #48]	@ (800e558 <std+0x68>)
 800e526:	429c      	cmp	r4, r3
 800e528:	d006      	beq.n	800e538 <std+0x48>
 800e52a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800e52e:	4294      	cmp	r4, r2
 800e530:	d002      	beq.n	800e538 <std+0x48>
 800e532:	33d0      	adds	r3, #208	@ 0xd0
 800e534:	429c      	cmp	r4, r3
 800e536:	d105      	bne.n	800e544 <std+0x54>
 800e538:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800e53c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e540:	f000 b93a 	b.w	800e7b8 <__retarget_lock_init_recursive>
 800e544:	bd10      	pop	{r4, pc}
 800e546:	bf00      	nop
 800e548:	08010391 	.word	0x08010391
 800e54c:	080103b3 	.word	0x080103b3
 800e550:	080103eb 	.word	0x080103eb
 800e554:	0801040f 	.word	0x0801040f
 800e558:	200005f0 	.word	0x200005f0

0800e55c <stdio_exit_handler>:
 800e55c:	4a02      	ldr	r2, [pc, #8]	@ (800e568 <stdio_exit_handler+0xc>)
 800e55e:	4903      	ldr	r1, [pc, #12]	@ (800e56c <stdio_exit_handler+0x10>)
 800e560:	4803      	ldr	r0, [pc, #12]	@ (800e570 <stdio_exit_handler+0x14>)
 800e562:	f000 b869 	b.w	800e638 <_fwalk_sglue>
 800e566:	bf00      	nop
 800e568:	20000034 	.word	0x20000034
 800e56c:	0800fc29 	.word	0x0800fc29
 800e570:	20000044 	.word	0x20000044

0800e574 <cleanup_stdio>:
 800e574:	6841      	ldr	r1, [r0, #4]
 800e576:	4b0c      	ldr	r3, [pc, #48]	@ (800e5a8 <cleanup_stdio+0x34>)
 800e578:	4299      	cmp	r1, r3
 800e57a:	b510      	push	{r4, lr}
 800e57c:	4604      	mov	r4, r0
 800e57e:	d001      	beq.n	800e584 <cleanup_stdio+0x10>
 800e580:	f001 fb52 	bl	800fc28 <_fflush_r>
 800e584:	68a1      	ldr	r1, [r4, #8]
 800e586:	4b09      	ldr	r3, [pc, #36]	@ (800e5ac <cleanup_stdio+0x38>)
 800e588:	4299      	cmp	r1, r3
 800e58a:	d002      	beq.n	800e592 <cleanup_stdio+0x1e>
 800e58c:	4620      	mov	r0, r4
 800e58e:	f001 fb4b 	bl	800fc28 <_fflush_r>
 800e592:	68e1      	ldr	r1, [r4, #12]
 800e594:	4b06      	ldr	r3, [pc, #24]	@ (800e5b0 <cleanup_stdio+0x3c>)
 800e596:	4299      	cmp	r1, r3
 800e598:	d004      	beq.n	800e5a4 <cleanup_stdio+0x30>
 800e59a:	4620      	mov	r0, r4
 800e59c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e5a0:	f001 bb42 	b.w	800fc28 <_fflush_r>
 800e5a4:	bd10      	pop	{r4, pc}
 800e5a6:	bf00      	nop
 800e5a8:	200005f0 	.word	0x200005f0
 800e5ac:	20000658 	.word	0x20000658
 800e5b0:	200006c0 	.word	0x200006c0

0800e5b4 <global_stdio_init.part.0>:
 800e5b4:	b510      	push	{r4, lr}
 800e5b6:	4b0b      	ldr	r3, [pc, #44]	@ (800e5e4 <global_stdio_init.part.0+0x30>)
 800e5b8:	2104      	movs	r1, #4
 800e5ba:	4c0b      	ldr	r4, [pc, #44]	@ (800e5e8 <global_stdio_init.part.0+0x34>)
 800e5bc:	4a0b      	ldr	r2, [pc, #44]	@ (800e5ec <global_stdio_init.part.0+0x38>)
 800e5be:	4620      	mov	r0, r4
 800e5c0:	601a      	str	r2, [r3, #0]
 800e5c2:	2200      	movs	r2, #0
 800e5c4:	f7ff ff94 	bl	800e4f0 <std>
 800e5c8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800e5cc:	2201      	movs	r2, #1
 800e5ce:	2109      	movs	r1, #9
 800e5d0:	f7ff ff8e 	bl	800e4f0 <std>
 800e5d4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800e5d8:	2202      	movs	r2, #2
 800e5da:	2112      	movs	r1, #18
 800e5dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e5e0:	f7ff bf86 	b.w	800e4f0 <std>
 800e5e4:	20000728 	.word	0x20000728
 800e5e8:	200005f0 	.word	0x200005f0
 800e5ec:	0800e55d 	.word	0x0800e55d

0800e5f0 <__sfp_lock_acquire>:
 800e5f0:	4801      	ldr	r0, [pc, #4]	@ (800e5f8 <__sfp_lock_acquire+0x8>)
 800e5f2:	f000 b8e2 	b.w	800e7ba <__retarget_lock_acquire_recursive>
 800e5f6:	bf00      	nop
 800e5f8:	2000072d 	.word	0x2000072d

0800e5fc <__sfp_lock_release>:
 800e5fc:	4801      	ldr	r0, [pc, #4]	@ (800e604 <__sfp_lock_release+0x8>)
 800e5fe:	f000 b8dd 	b.w	800e7bc <__retarget_lock_release_recursive>
 800e602:	bf00      	nop
 800e604:	2000072d 	.word	0x2000072d

0800e608 <__sinit>:
 800e608:	b510      	push	{r4, lr}
 800e60a:	4604      	mov	r4, r0
 800e60c:	f7ff fff0 	bl	800e5f0 <__sfp_lock_acquire>
 800e610:	6a23      	ldr	r3, [r4, #32]
 800e612:	b11b      	cbz	r3, 800e61c <__sinit+0x14>
 800e614:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e618:	f7ff bff0 	b.w	800e5fc <__sfp_lock_release>
 800e61c:	4b04      	ldr	r3, [pc, #16]	@ (800e630 <__sinit+0x28>)
 800e61e:	6223      	str	r3, [r4, #32]
 800e620:	4b04      	ldr	r3, [pc, #16]	@ (800e634 <__sinit+0x2c>)
 800e622:	681b      	ldr	r3, [r3, #0]
 800e624:	2b00      	cmp	r3, #0
 800e626:	d1f5      	bne.n	800e614 <__sinit+0xc>
 800e628:	f7ff ffc4 	bl	800e5b4 <global_stdio_init.part.0>
 800e62c:	e7f2      	b.n	800e614 <__sinit+0xc>
 800e62e:	bf00      	nop
 800e630:	0800e575 	.word	0x0800e575
 800e634:	20000728 	.word	0x20000728

0800e638 <_fwalk_sglue>:
 800e638:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e63c:	4607      	mov	r7, r0
 800e63e:	4688      	mov	r8, r1
 800e640:	4614      	mov	r4, r2
 800e642:	2600      	movs	r6, #0
 800e644:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800e648:	f1b9 0901 	subs.w	r9, r9, #1
 800e64c:	d505      	bpl.n	800e65a <_fwalk_sglue+0x22>
 800e64e:	6824      	ldr	r4, [r4, #0]
 800e650:	2c00      	cmp	r4, #0
 800e652:	d1f7      	bne.n	800e644 <_fwalk_sglue+0xc>
 800e654:	4630      	mov	r0, r6
 800e656:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e65a:	89ab      	ldrh	r3, [r5, #12]
 800e65c:	2b01      	cmp	r3, #1
 800e65e:	d907      	bls.n	800e670 <_fwalk_sglue+0x38>
 800e660:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800e664:	3301      	adds	r3, #1
 800e666:	d003      	beq.n	800e670 <_fwalk_sglue+0x38>
 800e668:	4629      	mov	r1, r5
 800e66a:	4638      	mov	r0, r7
 800e66c:	47c0      	blx	r8
 800e66e:	4306      	orrs	r6, r0
 800e670:	3568      	adds	r5, #104	@ 0x68
 800e672:	e7e9      	b.n	800e648 <_fwalk_sglue+0x10>

0800e674 <iprintf>:
 800e674:	b40f      	push	{r0, r1, r2, r3}
 800e676:	b507      	push	{r0, r1, r2, lr}
 800e678:	4906      	ldr	r1, [pc, #24]	@ (800e694 <iprintf+0x20>)
 800e67a:	ab04      	add	r3, sp, #16
 800e67c:	6808      	ldr	r0, [r1, #0]
 800e67e:	f853 2b04 	ldr.w	r2, [r3], #4
 800e682:	6881      	ldr	r1, [r0, #8]
 800e684:	9301      	str	r3, [sp, #4]
 800e686:	f001 f88d 	bl	800f7a4 <_vfiprintf_r>
 800e68a:	b003      	add	sp, #12
 800e68c:	f85d eb04 	ldr.w	lr, [sp], #4
 800e690:	b004      	add	sp, #16
 800e692:	4770      	bx	lr
 800e694:	20000040 	.word	0x20000040

0800e698 <_puts_r>:
 800e698:	6a03      	ldr	r3, [r0, #32]
 800e69a:	b570      	push	{r4, r5, r6, lr}
 800e69c:	4605      	mov	r5, r0
 800e69e:	460e      	mov	r6, r1
 800e6a0:	6884      	ldr	r4, [r0, #8]
 800e6a2:	b90b      	cbnz	r3, 800e6a8 <_puts_r+0x10>
 800e6a4:	f7ff ffb0 	bl	800e608 <__sinit>
 800e6a8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800e6aa:	07db      	lsls	r3, r3, #31
 800e6ac:	d405      	bmi.n	800e6ba <_puts_r+0x22>
 800e6ae:	89a3      	ldrh	r3, [r4, #12]
 800e6b0:	0598      	lsls	r0, r3, #22
 800e6b2:	d402      	bmi.n	800e6ba <_puts_r+0x22>
 800e6b4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e6b6:	f000 f880 	bl	800e7ba <__retarget_lock_acquire_recursive>
 800e6ba:	89a3      	ldrh	r3, [r4, #12]
 800e6bc:	0719      	lsls	r1, r3, #28
 800e6be:	d502      	bpl.n	800e6c6 <_puts_r+0x2e>
 800e6c0:	6923      	ldr	r3, [r4, #16]
 800e6c2:	2b00      	cmp	r3, #0
 800e6c4:	d135      	bne.n	800e732 <_puts_r+0x9a>
 800e6c6:	4621      	mov	r1, r4
 800e6c8:	4628      	mov	r0, r5
 800e6ca:	f001 ff11 	bl	80104f0 <__swsetup_r>
 800e6ce:	b380      	cbz	r0, 800e732 <_puts_r+0x9a>
 800e6d0:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 800e6d4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800e6d6:	07da      	lsls	r2, r3, #31
 800e6d8:	d405      	bmi.n	800e6e6 <_puts_r+0x4e>
 800e6da:	89a3      	ldrh	r3, [r4, #12]
 800e6dc:	059b      	lsls	r3, r3, #22
 800e6de:	d402      	bmi.n	800e6e6 <_puts_r+0x4e>
 800e6e0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e6e2:	f000 f86b 	bl	800e7bc <__retarget_lock_release_recursive>
 800e6e6:	4628      	mov	r0, r5
 800e6e8:	bd70      	pop	{r4, r5, r6, pc}
 800e6ea:	2b00      	cmp	r3, #0
 800e6ec:	da04      	bge.n	800e6f8 <_puts_r+0x60>
 800e6ee:	69a2      	ldr	r2, [r4, #24]
 800e6f0:	429a      	cmp	r2, r3
 800e6f2:	dc17      	bgt.n	800e724 <_puts_r+0x8c>
 800e6f4:	290a      	cmp	r1, #10
 800e6f6:	d015      	beq.n	800e724 <_puts_r+0x8c>
 800e6f8:	6823      	ldr	r3, [r4, #0]
 800e6fa:	1c5a      	adds	r2, r3, #1
 800e6fc:	6022      	str	r2, [r4, #0]
 800e6fe:	7019      	strb	r1, [r3, #0]
 800e700:	68a3      	ldr	r3, [r4, #8]
 800e702:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800e706:	3b01      	subs	r3, #1
 800e708:	60a3      	str	r3, [r4, #8]
 800e70a:	2900      	cmp	r1, #0
 800e70c:	d1ed      	bne.n	800e6ea <_puts_r+0x52>
 800e70e:	2b00      	cmp	r3, #0
 800e710:	da11      	bge.n	800e736 <_puts_r+0x9e>
 800e712:	4622      	mov	r2, r4
 800e714:	210a      	movs	r1, #10
 800e716:	4628      	mov	r0, r5
 800e718:	f001 feab 	bl	8010472 <__swbuf_r>
 800e71c:	3001      	adds	r0, #1
 800e71e:	d0d7      	beq.n	800e6d0 <_puts_r+0x38>
 800e720:	250a      	movs	r5, #10
 800e722:	e7d7      	b.n	800e6d4 <_puts_r+0x3c>
 800e724:	4622      	mov	r2, r4
 800e726:	4628      	mov	r0, r5
 800e728:	f001 fea3 	bl	8010472 <__swbuf_r>
 800e72c:	3001      	adds	r0, #1
 800e72e:	d1e7      	bne.n	800e700 <_puts_r+0x68>
 800e730:	e7ce      	b.n	800e6d0 <_puts_r+0x38>
 800e732:	3e01      	subs	r6, #1
 800e734:	e7e4      	b.n	800e700 <_puts_r+0x68>
 800e736:	6823      	ldr	r3, [r4, #0]
 800e738:	1c5a      	adds	r2, r3, #1
 800e73a:	6022      	str	r2, [r4, #0]
 800e73c:	220a      	movs	r2, #10
 800e73e:	701a      	strb	r2, [r3, #0]
 800e740:	e7ee      	b.n	800e720 <_puts_r+0x88>
	...

0800e744 <puts>:
 800e744:	4b02      	ldr	r3, [pc, #8]	@ (800e750 <puts+0xc>)
 800e746:	4601      	mov	r1, r0
 800e748:	6818      	ldr	r0, [r3, #0]
 800e74a:	f7ff bfa5 	b.w	800e698 <_puts_r>
 800e74e:	bf00      	nop
 800e750:	20000040 	.word	0x20000040

0800e754 <memset>:
 800e754:	4402      	add	r2, r0
 800e756:	4603      	mov	r3, r0
 800e758:	4293      	cmp	r3, r2
 800e75a:	d100      	bne.n	800e75e <memset+0xa>
 800e75c:	4770      	bx	lr
 800e75e:	f803 1b01 	strb.w	r1, [r3], #1
 800e762:	e7f9      	b.n	800e758 <memset+0x4>

0800e764 <__errno>:
 800e764:	4b01      	ldr	r3, [pc, #4]	@ (800e76c <__errno+0x8>)
 800e766:	6818      	ldr	r0, [r3, #0]
 800e768:	4770      	bx	lr
 800e76a:	bf00      	nop
 800e76c:	20000040 	.word	0x20000040

0800e770 <__libc_init_array>:
 800e770:	b570      	push	{r4, r5, r6, lr}
 800e772:	4d0d      	ldr	r5, [pc, #52]	@ (800e7a8 <__libc_init_array+0x38>)
 800e774:	2600      	movs	r6, #0
 800e776:	4c0d      	ldr	r4, [pc, #52]	@ (800e7ac <__libc_init_array+0x3c>)
 800e778:	1b64      	subs	r4, r4, r5
 800e77a:	10a4      	asrs	r4, r4, #2
 800e77c:	42a6      	cmp	r6, r4
 800e77e:	d109      	bne.n	800e794 <__libc_init_array+0x24>
 800e780:	4d0b      	ldr	r5, [pc, #44]	@ (800e7b0 <__libc_init_array+0x40>)
 800e782:	2600      	movs	r6, #0
 800e784:	4c0b      	ldr	r4, [pc, #44]	@ (800e7b4 <__libc_init_array+0x44>)
 800e786:	f002 f90b 	bl	80109a0 <_init>
 800e78a:	1b64      	subs	r4, r4, r5
 800e78c:	10a4      	asrs	r4, r4, #2
 800e78e:	42a6      	cmp	r6, r4
 800e790:	d105      	bne.n	800e79e <__libc_init_array+0x2e>
 800e792:	bd70      	pop	{r4, r5, r6, pc}
 800e794:	f855 3b04 	ldr.w	r3, [r5], #4
 800e798:	3601      	adds	r6, #1
 800e79a:	4798      	blx	r3
 800e79c:	e7ee      	b.n	800e77c <__libc_init_array+0xc>
 800e79e:	f855 3b04 	ldr.w	r3, [r5], #4
 800e7a2:	3601      	adds	r6, #1
 800e7a4:	4798      	blx	r3
 800e7a6:	e7f2      	b.n	800e78e <__libc_init_array+0x1e>
 800e7a8:	08011f44 	.word	0x08011f44
 800e7ac:	08011f44 	.word	0x08011f44
 800e7b0:	08011f44 	.word	0x08011f44
 800e7b4:	08011f48 	.word	0x08011f48

0800e7b8 <__retarget_lock_init_recursive>:
 800e7b8:	4770      	bx	lr

0800e7ba <__retarget_lock_acquire_recursive>:
 800e7ba:	4770      	bx	lr

0800e7bc <__retarget_lock_release_recursive>:
 800e7bc:	4770      	bx	lr
	...

0800e7c0 <_localeconv_r>:
 800e7c0:	4800      	ldr	r0, [pc, #0]	@ (800e7c4 <_localeconv_r+0x4>)
 800e7c2:	4770      	bx	lr
 800e7c4:	20000180 	.word	0x20000180

0800e7c8 <memchr>:
 800e7c8:	b2c9      	uxtb	r1, r1
 800e7ca:	4603      	mov	r3, r0
 800e7cc:	4402      	add	r2, r0
 800e7ce:	b510      	push	{r4, lr}
 800e7d0:	4293      	cmp	r3, r2
 800e7d2:	4618      	mov	r0, r3
 800e7d4:	d101      	bne.n	800e7da <memchr+0x12>
 800e7d6:	2000      	movs	r0, #0
 800e7d8:	e003      	b.n	800e7e2 <memchr+0x1a>
 800e7da:	7804      	ldrb	r4, [r0, #0]
 800e7dc:	3301      	adds	r3, #1
 800e7de:	428c      	cmp	r4, r1
 800e7e0:	d1f6      	bne.n	800e7d0 <memchr+0x8>
 800e7e2:	bd10      	pop	{r4, pc}

0800e7e4 <quorem>:
 800e7e4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e7e8:	6903      	ldr	r3, [r0, #16]
 800e7ea:	4607      	mov	r7, r0
 800e7ec:	690c      	ldr	r4, [r1, #16]
 800e7ee:	42a3      	cmp	r3, r4
 800e7f0:	f2c0 8083 	blt.w	800e8fa <quorem+0x116>
 800e7f4:	3c01      	subs	r4, #1
 800e7f6:	f100 0514 	add.w	r5, r0, #20
 800e7fa:	f101 0814 	add.w	r8, r1, #20
 800e7fe:	00a3      	lsls	r3, r4, #2
 800e800:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e804:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800e808:	9300      	str	r3, [sp, #0]
 800e80a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e80e:	9301      	str	r3, [sp, #4]
 800e810:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800e814:	3301      	adds	r3, #1
 800e816:	429a      	cmp	r2, r3
 800e818:	fbb2 f6f3 	udiv	r6, r2, r3
 800e81c:	d331      	bcc.n	800e882 <quorem+0x9e>
 800e81e:	f04f 0a00 	mov.w	sl, #0
 800e822:	46c4      	mov	ip, r8
 800e824:	46ae      	mov	lr, r5
 800e826:	46d3      	mov	fp, sl
 800e828:	f85c 3b04 	ldr.w	r3, [ip], #4
 800e82c:	b298      	uxth	r0, r3
 800e82e:	45e1      	cmp	r9, ip
 800e830:	ea4f 4313 	mov.w	r3, r3, lsr #16
 800e834:	fb06 a000 	mla	r0, r6, r0, sl
 800e838:	ea4f 4210 	mov.w	r2, r0, lsr #16
 800e83c:	b280      	uxth	r0, r0
 800e83e:	fb06 2303 	mla	r3, r6, r3, r2
 800e842:	f8de 2000 	ldr.w	r2, [lr]
 800e846:	b292      	uxth	r2, r2
 800e848:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800e84c:	eba2 0200 	sub.w	r2, r2, r0
 800e850:	b29b      	uxth	r3, r3
 800e852:	f8de 0000 	ldr.w	r0, [lr]
 800e856:	445a      	add	r2, fp
 800e858:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800e85c:	b292      	uxth	r2, r2
 800e85e:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800e862:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800e866:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800e86a:	f84e 2b04 	str.w	r2, [lr], #4
 800e86e:	d2db      	bcs.n	800e828 <quorem+0x44>
 800e870:	9b00      	ldr	r3, [sp, #0]
 800e872:	58eb      	ldr	r3, [r5, r3]
 800e874:	b92b      	cbnz	r3, 800e882 <quorem+0x9e>
 800e876:	9b01      	ldr	r3, [sp, #4]
 800e878:	3b04      	subs	r3, #4
 800e87a:	429d      	cmp	r5, r3
 800e87c:	461a      	mov	r2, r3
 800e87e:	d330      	bcc.n	800e8e2 <quorem+0xfe>
 800e880:	613c      	str	r4, [r7, #16]
 800e882:	4638      	mov	r0, r7
 800e884:	f001 fc7a 	bl	801017c <__mcmp>
 800e888:	2800      	cmp	r0, #0
 800e88a:	db26      	blt.n	800e8da <quorem+0xf6>
 800e88c:	4629      	mov	r1, r5
 800e88e:	2000      	movs	r0, #0
 800e890:	f858 2b04 	ldr.w	r2, [r8], #4
 800e894:	f8d1 c000 	ldr.w	ip, [r1]
 800e898:	fa1f fe82 	uxth.w	lr, r2
 800e89c:	45c1      	cmp	r9, r8
 800e89e:	fa1f f38c 	uxth.w	r3, ip
 800e8a2:	ea4f 4212 	mov.w	r2, r2, lsr #16
 800e8a6:	eba3 030e 	sub.w	r3, r3, lr
 800e8aa:	4403      	add	r3, r0
 800e8ac:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800e8b0:	b29b      	uxth	r3, r3
 800e8b2:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800e8b6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e8ba:	ea4f 4022 	mov.w	r0, r2, asr #16
 800e8be:	f841 3b04 	str.w	r3, [r1], #4
 800e8c2:	d2e5      	bcs.n	800e890 <quorem+0xac>
 800e8c4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e8c8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e8cc:	b922      	cbnz	r2, 800e8d8 <quorem+0xf4>
 800e8ce:	3b04      	subs	r3, #4
 800e8d0:	429d      	cmp	r5, r3
 800e8d2:	461a      	mov	r2, r3
 800e8d4:	d30b      	bcc.n	800e8ee <quorem+0x10a>
 800e8d6:	613c      	str	r4, [r7, #16]
 800e8d8:	3601      	adds	r6, #1
 800e8da:	4630      	mov	r0, r6
 800e8dc:	b003      	add	sp, #12
 800e8de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e8e2:	6812      	ldr	r2, [r2, #0]
 800e8e4:	3b04      	subs	r3, #4
 800e8e6:	2a00      	cmp	r2, #0
 800e8e8:	d1ca      	bne.n	800e880 <quorem+0x9c>
 800e8ea:	3c01      	subs	r4, #1
 800e8ec:	e7c5      	b.n	800e87a <quorem+0x96>
 800e8ee:	6812      	ldr	r2, [r2, #0]
 800e8f0:	3b04      	subs	r3, #4
 800e8f2:	2a00      	cmp	r2, #0
 800e8f4:	d1ef      	bne.n	800e8d6 <quorem+0xf2>
 800e8f6:	3c01      	subs	r4, #1
 800e8f8:	e7ea      	b.n	800e8d0 <quorem+0xec>
 800e8fa:	2000      	movs	r0, #0
 800e8fc:	e7ee      	b.n	800e8dc <quorem+0xf8>
	...

0800e900 <_dtoa_r>:
 800e900:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e904:	4614      	mov	r4, r2
 800e906:	b097      	sub	sp, #92	@ 0x5c
 800e908:	461d      	mov	r5, r3
 800e90a:	69c7      	ldr	r7, [r0, #28]
 800e90c:	4681      	mov	r9, r0
 800e90e:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 800e910:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800e914:	b97f      	cbnz	r7, 800e936 <_dtoa_r+0x36>
 800e916:	2010      	movs	r0, #16
 800e918:	f001 f85c 	bl	800f9d4 <malloc>
 800e91c:	4602      	mov	r2, r0
 800e91e:	f8c9 001c 	str.w	r0, [r9, #28]
 800e922:	b920      	cbnz	r0, 800e92e <_dtoa_r+0x2e>
 800e924:	4baa      	ldr	r3, [pc, #680]	@ (800ebd0 <_dtoa_r+0x2d0>)
 800e926:	21ef      	movs	r1, #239	@ 0xef
 800e928:	48aa      	ldr	r0, [pc, #680]	@ (800ebd4 <_dtoa_r+0x2d4>)
 800e92a:	f001 ff39 	bl	80107a0 <__assert_func>
 800e92e:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800e932:	6007      	str	r7, [r0, #0]
 800e934:	60c7      	str	r7, [r0, #12]
 800e936:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800e93a:	6819      	ldr	r1, [r3, #0]
 800e93c:	b159      	cbz	r1, 800e956 <_dtoa_r+0x56>
 800e93e:	685a      	ldr	r2, [r3, #4]
 800e940:	2301      	movs	r3, #1
 800e942:	4648      	mov	r0, r9
 800e944:	4093      	lsls	r3, r2
 800e946:	604a      	str	r2, [r1, #4]
 800e948:	608b      	str	r3, [r1, #8]
 800e94a:	f001 f9e1 	bl	800fd10 <_Bfree>
 800e94e:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800e952:	2200      	movs	r2, #0
 800e954:	601a      	str	r2, [r3, #0]
 800e956:	1e2b      	subs	r3, r5, #0
 800e958:	bfb7      	itett	lt
 800e95a:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800e95e:	2300      	movge	r3, #0
 800e960:	2201      	movlt	r2, #1
 800e962:	9307      	strlt	r3, [sp, #28]
 800e964:	bfa8      	it	ge
 800e966:	6033      	strge	r3, [r6, #0]
 800e968:	f8dd 801c 	ldr.w	r8, [sp, #28]
 800e96c:	4b9a      	ldr	r3, [pc, #616]	@ (800ebd8 <_dtoa_r+0x2d8>)
 800e96e:	bfb8      	it	lt
 800e970:	6032      	strlt	r2, [r6, #0]
 800e972:	ea33 0308 	bics.w	r3, r3, r8
 800e976:	d112      	bne.n	800e99e <_dtoa_r+0x9e>
 800e978:	f242 730f 	movw	r3, #9999	@ 0x270f
 800e97c:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800e97e:	6013      	str	r3, [r2, #0]
 800e980:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800e984:	4323      	orrs	r3, r4
 800e986:	f000 855b 	beq.w	800f440 <_dtoa_r+0xb40>
 800e98a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800e98c:	f8df a24c 	ldr.w	sl, [pc, #588]	@ 800ebdc <_dtoa_r+0x2dc>
 800e990:	2b00      	cmp	r3, #0
 800e992:	f000 855d 	beq.w	800f450 <_dtoa_r+0xb50>
 800e996:	f10a 0303 	add.w	r3, sl, #3
 800e99a:	f000 bd57 	b.w	800f44c <_dtoa_r+0xb4c>
 800e99e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800e9a2:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800e9a6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e9aa:	2200      	movs	r2, #0
 800e9ac:	2300      	movs	r3, #0
 800e9ae:	f7f2 f88f 	bl	8000ad0 <__aeabi_dcmpeq>
 800e9b2:	4607      	mov	r7, r0
 800e9b4:	b158      	cbz	r0, 800e9ce <_dtoa_r+0xce>
 800e9b6:	2301      	movs	r3, #1
 800e9b8:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800e9ba:	6013      	str	r3, [r2, #0]
 800e9bc:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800e9be:	b113      	cbz	r3, 800e9c6 <_dtoa_r+0xc6>
 800e9c0:	4b87      	ldr	r3, [pc, #540]	@ (800ebe0 <_dtoa_r+0x2e0>)
 800e9c2:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800e9c4:	6013      	str	r3, [r2, #0]
 800e9c6:	f8df a21c 	ldr.w	sl, [pc, #540]	@ 800ebe4 <_dtoa_r+0x2e4>
 800e9ca:	f000 bd41 	b.w	800f450 <_dtoa_r+0xb50>
 800e9ce:	ab14      	add	r3, sp, #80	@ 0x50
 800e9d0:	f3c8 560a 	ubfx	r6, r8, #20, #11
 800e9d4:	4648      	mov	r0, r9
 800e9d6:	9301      	str	r3, [sp, #4]
 800e9d8:	ab15      	add	r3, sp, #84	@ 0x54
 800e9da:	9300      	str	r3, [sp, #0]
 800e9dc:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800e9e0:	f001 fc7e 	bl	80102e0 <__d2b>
 800e9e4:	9003      	str	r0, [sp, #12]
 800e9e6:	2e00      	cmp	r6, #0
 800e9e8:	d075      	beq.n	800ead6 <_dtoa_r+0x1d6>
 800e9ea:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800e9ec:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800e9f0:	9712      	str	r7, [sp, #72]	@ 0x48
 800e9f2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e9f6:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800e9fa:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e9fe:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800ea02:	4619      	mov	r1, r3
 800ea04:	2200      	movs	r2, #0
 800ea06:	4b78      	ldr	r3, [pc, #480]	@ (800ebe8 <_dtoa_r+0x2e8>)
 800ea08:	f7f1 fc42 	bl	8000290 <__aeabi_dsub>
 800ea0c:	a36a      	add	r3, pc, #424	@ (adr r3, 800ebb8 <_dtoa_r+0x2b8>)
 800ea0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea12:	f7f1 fdf5 	bl	8000600 <__aeabi_dmul>
 800ea16:	a36a      	add	r3, pc, #424	@ (adr r3, 800ebc0 <_dtoa_r+0x2c0>)
 800ea18:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea1c:	f7f1 fc3a 	bl	8000294 <__adddf3>
 800ea20:	4604      	mov	r4, r0
 800ea22:	460d      	mov	r5, r1
 800ea24:	4630      	mov	r0, r6
 800ea26:	f7f1 fd81 	bl	800052c <__aeabi_i2d>
 800ea2a:	a367      	add	r3, pc, #412	@ (adr r3, 800ebc8 <_dtoa_r+0x2c8>)
 800ea2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea30:	f7f1 fde6 	bl	8000600 <__aeabi_dmul>
 800ea34:	4602      	mov	r2, r0
 800ea36:	460b      	mov	r3, r1
 800ea38:	4620      	mov	r0, r4
 800ea3a:	4629      	mov	r1, r5
 800ea3c:	f7f1 fc2a 	bl	8000294 <__adddf3>
 800ea40:	4604      	mov	r4, r0
 800ea42:	460d      	mov	r5, r1
 800ea44:	f7f2 f88c 	bl	8000b60 <__aeabi_d2iz>
 800ea48:	2200      	movs	r2, #0
 800ea4a:	4607      	mov	r7, r0
 800ea4c:	2300      	movs	r3, #0
 800ea4e:	4620      	mov	r0, r4
 800ea50:	4629      	mov	r1, r5
 800ea52:	f7f2 f847 	bl	8000ae4 <__aeabi_dcmplt>
 800ea56:	b140      	cbz	r0, 800ea6a <_dtoa_r+0x16a>
 800ea58:	4638      	mov	r0, r7
 800ea5a:	f7f1 fd67 	bl	800052c <__aeabi_i2d>
 800ea5e:	4622      	mov	r2, r4
 800ea60:	462b      	mov	r3, r5
 800ea62:	f7f2 f835 	bl	8000ad0 <__aeabi_dcmpeq>
 800ea66:	b900      	cbnz	r0, 800ea6a <_dtoa_r+0x16a>
 800ea68:	3f01      	subs	r7, #1
 800ea6a:	2f16      	cmp	r7, #22
 800ea6c:	d853      	bhi.n	800eb16 <_dtoa_r+0x216>
 800ea6e:	4b5f      	ldr	r3, [pc, #380]	@ (800ebec <_dtoa_r+0x2ec>)
 800ea70:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800ea74:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ea78:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea7c:	f7f2 f832 	bl	8000ae4 <__aeabi_dcmplt>
 800ea80:	2800      	cmp	r0, #0
 800ea82:	d04a      	beq.n	800eb1a <_dtoa_r+0x21a>
 800ea84:	3f01      	subs	r7, #1
 800ea86:	2300      	movs	r3, #0
 800ea88:	930f      	str	r3, [sp, #60]	@ 0x3c
 800ea8a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800ea8c:	1b9b      	subs	r3, r3, r6
 800ea8e:	1e5a      	subs	r2, r3, #1
 800ea90:	bf4c      	ite	mi
 800ea92:	f1c3 0301 	rsbmi	r3, r3, #1
 800ea96:	2300      	movpl	r3, #0
 800ea98:	9209      	str	r2, [sp, #36]	@ 0x24
 800ea9a:	bf45      	ittet	mi
 800ea9c:	9304      	strmi	r3, [sp, #16]
 800ea9e:	2300      	movmi	r3, #0
 800eaa0:	9304      	strpl	r3, [sp, #16]
 800eaa2:	9309      	strmi	r3, [sp, #36]	@ 0x24
 800eaa4:	2f00      	cmp	r7, #0
 800eaa6:	db3a      	blt.n	800eb1e <_dtoa_r+0x21e>
 800eaa8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800eaaa:	970e      	str	r7, [sp, #56]	@ 0x38
 800eaac:	443b      	add	r3, r7
 800eaae:	9309      	str	r3, [sp, #36]	@ 0x24
 800eab0:	2300      	movs	r3, #0
 800eab2:	930a      	str	r3, [sp, #40]	@ 0x28
 800eab4:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800eab6:	2b09      	cmp	r3, #9
 800eab8:	d864      	bhi.n	800eb84 <_dtoa_r+0x284>
 800eaba:	2b05      	cmp	r3, #5
 800eabc:	bfc5      	ittet	gt
 800eabe:	3b04      	subgt	r3, #4
 800eac0:	2400      	movgt	r4, #0
 800eac2:	2401      	movle	r4, #1
 800eac4:	9320      	strgt	r3, [sp, #128]	@ 0x80
 800eac6:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800eac8:	3b02      	subs	r3, #2
 800eaca:	2b03      	cmp	r3, #3
 800eacc:	d866      	bhi.n	800eb9c <_dtoa_r+0x29c>
 800eace:	e8df f003 	tbb	[pc, r3]
 800ead2:	5755      	.short	0x5755
 800ead4:	2e3a      	.short	0x2e3a
 800ead6:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800eada:	441e      	add	r6, r3
 800eadc:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800eae0:	2b20      	cmp	r3, #32
 800eae2:	bfc9      	itett	gt
 800eae4:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800eae8:	f1c3 0320 	rsble	r3, r3, #32
 800eaec:	fa08 f803 	lslgt.w	r8, r8, r3
 800eaf0:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800eaf4:	bfd8      	it	le
 800eaf6:	fa04 f003 	lslle.w	r0, r4, r3
 800eafa:	f106 36ff 	add.w	r6, r6, #4294967295	@ 0xffffffff
 800eafe:	bfc4      	itt	gt
 800eb00:	fa24 f303 	lsrgt.w	r3, r4, r3
 800eb04:	ea48 0003 	orrgt.w	r0, r8, r3
 800eb08:	f7f1 fd00 	bl	800050c <__aeabi_ui2d>
 800eb0c:	2201      	movs	r2, #1
 800eb0e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800eb12:	9212      	str	r2, [sp, #72]	@ 0x48
 800eb14:	e775      	b.n	800ea02 <_dtoa_r+0x102>
 800eb16:	2301      	movs	r3, #1
 800eb18:	e7b6      	b.n	800ea88 <_dtoa_r+0x188>
 800eb1a:	900f      	str	r0, [sp, #60]	@ 0x3c
 800eb1c:	e7b5      	b.n	800ea8a <_dtoa_r+0x18a>
 800eb1e:	9b04      	ldr	r3, [sp, #16]
 800eb20:	1bdb      	subs	r3, r3, r7
 800eb22:	9304      	str	r3, [sp, #16]
 800eb24:	427b      	negs	r3, r7
 800eb26:	930a      	str	r3, [sp, #40]	@ 0x28
 800eb28:	2300      	movs	r3, #0
 800eb2a:	930e      	str	r3, [sp, #56]	@ 0x38
 800eb2c:	e7c2      	b.n	800eab4 <_dtoa_r+0x1b4>
 800eb2e:	2301      	movs	r3, #1
 800eb30:	930b      	str	r3, [sp, #44]	@ 0x2c
 800eb32:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800eb34:	eb07 0b03 	add.w	fp, r7, r3
 800eb38:	f10b 0301 	add.w	r3, fp, #1
 800eb3c:	2b01      	cmp	r3, #1
 800eb3e:	9308      	str	r3, [sp, #32]
 800eb40:	bfb8      	it	lt
 800eb42:	2301      	movlt	r3, #1
 800eb44:	e006      	b.n	800eb54 <_dtoa_r+0x254>
 800eb46:	2301      	movs	r3, #1
 800eb48:	930b      	str	r3, [sp, #44]	@ 0x2c
 800eb4a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800eb4c:	2b00      	cmp	r3, #0
 800eb4e:	dd28      	ble.n	800eba2 <_dtoa_r+0x2a2>
 800eb50:	469b      	mov	fp, r3
 800eb52:	9308      	str	r3, [sp, #32]
 800eb54:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800eb58:	2100      	movs	r1, #0
 800eb5a:	2204      	movs	r2, #4
 800eb5c:	f102 0514 	add.w	r5, r2, #20
 800eb60:	429d      	cmp	r5, r3
 800eb62:	d926      	bls.n	800ebb2 <_dtoa_r+0x2b2>
 800eb64:	6041      	str	r1, [r0, #4]
 800eb66:	4648      	mov	r0, r9
 800eb68:	f001 f892 	bl	800fc90 <_Balloc>
 800eb6c:	4682      	mov	sl, r0
 800eb6e:	2800      	cmp	r0, #0
 800eb70:	d140      	bne.n	800ebf4 <_dtoa_r+0x2f4>
 800eb72:	4b1f      	ldr	r3, [pc, #124]	@ (800ebf0 <_dtoa_r+0x2f0>)
 800eb74:	4602      	mov	r2, r0
 800eb76:	f240 11af 	movw	r1, #431	@ 0x1af
 800eb7a:	e6d5      	b.n	800e928 <_dtoa_r+0x28>
 800eb7c:	2300      	movs	r3, #0
 800eb7e:	e7e3      	b.n	800eb48 <_dtoa_r+0x248>
 800eb80:	2300      	movs	r3, #0
 800eb82:	e7d5      	b.n	800eb30 <_dtoa_r+0x230>
 800eb84:	2401      	movs	r4, #1
 800eb86:	2300      	movs	r3, #0
 800eb88:	940b      	str	r4, [sp, #44]	@ 0x2c
 800eb8a:	9320      	str	r3, [sp, #128]	@ 0x80
 800eb8c:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
 800eb90:	2200      	movs	r2, #0
 800eb92:	2312      	movs	r3, #18
 800eb94:	f8cd b020 	str.w	fp, [sp, #32]
 800eb98:	9221      	str	r2, [sp, #132]	@ 0x84
 800eb9a:	e7db      	b.n	800eb54 <_dtoa_r+0x254>
 800eb9c:	2301      	movs	r3, #1
 800eb9e:	930b      	str	r3, [sp, #44]	@ 0x2c
 800eba0:	e7f4      	b.n	800eb8c <_dtoa_r+0x28c>
 800eba2:	f04f 0b01 	mov.w	fp, #1
 800eba6:	465b      	mov	r3, fp
 800eba8:	f8cd b020 	str.w	fp, [sp, #32]
 800ebac:	f8cd b084 	str.w	fp, [sp, #132]	@ 0x84
 800ebb0:	e7d0      	b.n	800eb54 <_dtoa_r+0x254>
 800ebb2:	3101      	adds	r1, #1
 800ebb4:	0052      	lsls	r2, r2, #1
 800ebb6:	e7d1      	b.n	800eb5c <_dtoa_r+0x25c>
 800ebb8:	636f4361 	.word	0x636f4361
 800ebbc:	3fd287a7 	.word	0x3fd287a7
 800ebc0:	8b60c8b3 	.word	0x8b60c8b3
 800ebc4:	3fc68a28 	.word	0x3fc68a28
 800ebc8:	509f79fb 	.word	0x509f79fb
 800ebcc:	3fd34413 	.word	0x3fd34413
 800ebd0:	08011c09 	.word	0x08011c09
 800ebd4:	08011c20 	.word	0x08011c20
 800ebd8:	7ff00000 	.word	0x7ff00000
 800ebdc:	08011c05 	.word	0x08011c05
 800ebe0:	08011bd9 	.word	0x08011bd9
 800ebe4:	08011bd8 	.word	0x08011bd8
 800ebe8:	3ff80000 	.word	0x3ff80000
 800ebec:	08011d70 	.word	0x08011d70
 800ebf0:	08011c78 	.word	0x08011c78
 800ebf4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800ebf8:	6018      	str	r0, [r3, #0]
 800ebfa:	9b08      	ldr	r3, [sp, #32]
 800ebfc:	2b0e      	cmp	r3, #14
 800ebfe:	f200 80a1 	bhi.w	800ed44 <_dtoa_r+0x444>
 800ec02:	2c00      	cmp	r4, #0
 800ec04:	f000 809e 	beq.w	800ed44 <_dtoa_r+0x444>
 800ec08:	2f00      	cmp	r7, #0
 800ec0a:	dd33      	ble.n	800ec74 <_dtoa_r+0x374>
 800ec0c:	f007 020f 	and.w	r2, r7, #15
 800ec10:	4b9b      	ldr	r3, [pc, #620]	@ (800ee80 <_dtoa_r+0x580>)
 800ec12:	05f8      	lsls	r0, r7, #23
 800ec14:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ec18:	e9d3 3400 	ldrd	r3, r4, [r3]
 800ec1c:	e9cd 3410 	strd	r3, r4, [sp, #64]	@ 0x40
 800ec20:	ea4f 1427 	mov.w	r4, r7, asr #4
 800ec24:	d516      	bpl.n	800ec54 <_dtoa_r+0x354>
 800ec26:	4b97      	ldr	r3, [pc, #604]	@ (800ee84 <_dtoa_r+0x584>)
 800ec28:	f004 040f 	and.w	r4, r4, #15
 800ec2c:	2603      	movs	r6, #3
 800ec2e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800ec32:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ec36:	f7f1 fe0d 	bl	8000854 <__aeabi_ddiv>
 800ec3a:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800ec3e:	4d91      	ldr	r5, [pc, #580]	@ (800ee84 <_dtoa_r+0x584>)
 800ec40:	b954      	cbnz	r4, 800ec58 <_dtoa_r+0x358>
 800ec42:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800ec46:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ec4a:	f7f1 fe03 	bl	8000854 <__aeabi_ddiv>
 800ec4e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800ec52:	e028      	b.n	800eca6 <_dtoa_r+0x3a6>
 800ec54:	2602      	movs	r6, #2
 800ec56:	e7f2      	b.n	800ec3e <_dtoa_r+0x33e>
 800ec58:	07e1      	lsls	r1, r4, #31
 800ec5a:	d508      	bpl.n	800ec6e <_dtoa_r+0x36e>
 800ec5c:	3601      	adds	r6, #1
 800ec5e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800ec62:	e9d5 2300 	ldrd	r2, r3, [r5]
 800ec66:	f7f1 fccb 	bl	8000600 <__aeabi_dmul>
 800ec6a:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800ec6e:	1064      	asrs	r4, r4, #1
 800ec70:	3508      	adds	r5, #8
 800ec72:	e7e5      	b.n	800ec40 <_dtoa_r+0x340>
 800ec74:	f000 80af 	beq.w	800edd6 <_dtoa_r+0x4d6>
 800ec78:	427c      	negs	r4, r7
 800ec7a:	4b81      	ldr	r3, [pc, #516]	@ (800ee80 <_dtoa_r+0x580>)
 800ec7c:	4d81      	ldr	r5, [pc, #516]	@ (800ee84 <_dtoa_r+0x584>)
 800ec7e:	2602      	movs	r6, #2
 800ec80:	f004 020f 	and.w	r2, r4, #15
 800ec84:	1124      	asrs	r4, r4, #4
 800ec86:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ec8a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ec8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec92:	f7f1 fcb5 	bl	8000600 <__aeabi_dmul>
 800ec96:	2300      	movs	r3, #0
 800ec98:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800ec9c:	2c00      	cmp	r4, #0
 800ec9e:	f040 808f 	bne.w	800edc0 <_dtoa_r+0x4c0>
 800eca2:	2b00      	cmp	r3, #0
 800eca4:	d1d3      	bne.n	800ec4e <_dtoa_r+0x34e>
 800eca6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800eca8:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 800ecac:	2b00      	cmp	r3, #0
 800ecae:	f000 8094 	beq.w	800edda <_dtoa_r+0x4da>
 800ecb2:	2200      	movs	r2, #0
 800ecb4:	4b74      	ldr	r3, [pc, #464]	@ (800ee88 <_dtoa_r+0x588>)
 800ecb6:	4620      	mov	r0, r4
 800ecb8:	4629      	mov	r1, r5
 800ecba:	f7f1 ff13 	bl	8000ae4 <__aeabi_dcmplt>
 800ecbe:	2800      	cmp	r0, #0
 800ecc0:	f000 808b 	beq.w	800edda <_dtoa_r+0x4da>
 800ecc4:	9b08      	ldr	r3, [sp, #32]
 800ecc6:	2b00      	cmp	r3, #0
 800ecc8:	f000 8087 	beq.w	800edda <_dtoa_r+0x4da>
 800eccc:	f1bb 0f00 	cmp.w	fp, #0
 800ecd0:	dd34      	ble.n	800ed3c <_dtoa_r+0x43c>
 800ecd2:	4620      	mov	r0, r4
 800ecd4:	f107 38ff 	add.w	r8, r7, #4294967295	@ 0xffffffff
 800ecd8:	3601      	adds	r6, #1
 800ecda:	465c      	mov	r4, fp
 800ecdc:	2200      	movs	r2, #0
 800ecde:	4b6b      	ldr	r3, [pc, #428]	@ (800ee8c <_dtoa_r+0x58c>)
 800ece0:	4629      	mov	r1, r5
 800ece2:	f7f1 fc8d 	bl	8000600 <__aeabi_dmul>
 800ece6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800ecea:	4630      	mov	r0, r6
 800ecec:	f7f1 fc1e 	bl	800052c <__aeabi_i2d>
 800ecf0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800ecf4:	f7f1 fc84 	bl	8000600 <__aeabi_dmul>
 800ecf8:	2200      	movs	r2, #0
 800ecfa:	4b65      	ldr	r3, [pc, #404]	@ (800ee90 <_dtoa_r+0x590>)
 800ecfc:	f7f1 faca 	bl	8000294 <__adddf3>
 800ed00:	4605      	mov	r5, r0
 800ed02:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800ed06:	2c00      	cmp	r4, #0
 800ed08:	d16a      	bne.n	800ede0 <_dtoa_r+0x4e0>
 800ed0a:	2200      	movs	r2, #0
 800ed0c:	4b61      	ldr	r3, [pc, #388]	@ (800ee94 <_dtoa_r+0x594>)
 800ed0e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ed12:	f7f1 fabd 	bl	8000290 <__aeabi_dsub>
 800ed16:	4602      	mov	r2, r0
 800ed18:	460b      	mov	r3, r1
 800ed1a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800ed1e:	462a      	mov	r2, r5
 800ed20:	4633      	mov	r3, r6
 800ed22:	f7f1 fefd 	bl	8000b20 <__aeabi_dcmpgt>
 800ed26:	2800      	cmp	r0, #0
 800ed28:	f040 8298 	bne.w	800f25c <_dtoa_r+0x95c>
 800ed2c:	462a      	mov	r2, r5
 800ed2e:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800ed32:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ed36:	f7f1 fed5 	bl	8000ae4 <__aeabi_dcmplt>
 800ed3a:	bb38      	cbnz	r0, 800ed8c <_dtoa_r+0x48c>
 800ed3c:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800ed40:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800ed44:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800ed46:	2b00      	cmp	r3, #0
 800ed48:	f2c0 8157 	blt.w	800effa <_dtoa_r+0x6fa>
 800ed4c:	2f0e      	cmp	r7, #14
 800ed4e:	f300 8154 	bgt.w	800effa <_dtoa_r+0x6fa>
 800ed52:	4b4b      	ldr	r3, [pc, #300]	@ (800ee80 <_dtoa_r+0x580>)
 800ed54:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800ed58:	e9d3 3400 	ldrd	r3, r4, [r3]
 800ed5c:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800ed60:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800ed62:	2b00      	cmp	r3, #0
 800ed64:	f280 80e5 	bge.w	800ef32 <_dtoa_r+0x632>
 800ed68:	9b08      	ldr	r3, [sp, #32]
 800ed6a:	2b00      	cmp	r3, #0
 800ed6c:	f300 80e1 	bgt.w	800ef32 <_dtoa_r+0x632>
 800ed70:	d10c      	bne.n	800ed8c <_dtoa_r+0x48c>
 800ed72:	2200      	movs	r2, #0
 800ed74:	4b47      	ldr	r3, [pc, #284]	@ (800ee94 <_dtoa_r+0x594>)
 800ed76:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ed7a:	f7f1 fc41 	bl	8000600 <__aeabi_dmul>
 800ed7e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800ed82:	f7f1 fec3 	bl	8000b0c <__aeabi_dcmpge>
 800ed86:	2800      	cmp	r0, #0
 800ed88:	f000 8266 	beq.w	800f258 <_dtoa_r+0x958>
 800ed8c:	2400      	movs	r4, #0
 800ed8e:	4625      	mov	r5, r4
 800ed90:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800ed92:	4656      	mov	r6, sl
 800ed94:	ea6f 0803 	mvn.w	r8, r3
 800ed98:	2700      	movs	r7, #0
 800ed9a:	4621      	mov	r1, r4
 800ed9c:	4648      	mov	r0, r9
 800ed9e:	f000 ffb7 	bl	800fd10 <_Bfree>
 800eda2:	2d00      	cmp	r5, #0
 800eda4:	f000 80bd 	beq.w	800ef22 <_dtoa_r+0x622>
 800eda8:	b12f      	cbz	r7, 800edb6 <_dtoa_r+0x4b6>
 800edaa:	42af      	cmp	r7, r5
 800edac:	d003      	beq.n	800edb6 <_dtoa_r+0x4b6>
 800edae:	4639      	mov	r1, r7
 800edb0:	4648      	mov	r0, r9
 800edb2:	f000 ffad 	bl	800fd10 <_Bfree>
 800edb6:	4629      	mov	r1, r5
 800edb8:	4648      	mov	r0, r9
 800edba:	f000 ffa9 	bl	800fd10 <_Bfree>
 800edbe:	e0b0      	b.n	800ef22 <_dtoa_r+0x622>
 800edc0:	07e2      	lsls	r2, r4, #31
 800edc2:	d505      	bpl.n	800edd0 <_dtoa_r+0x4d0>
 800edc4:	3601      	adds	r6, #1
 800edc6:	e9d5 2300 	ldrd	r2, r3, [r5]
 800edca:	f7f1 fc19 	bl	8000600 <__aeabi_dmul>
 800edce:	2301      	movs	r3, #1
 800edd0:	1064      	asrs	r4, r4, #1
 800edd2:	3508      	adds	r5, #8
 800edd4:	e762      	b.n	800ec9c <_dtoa_r+0x39c>
 800edd6:	2602      	movs	r6, #2
 800edd8:	e765      	b.n	800eca6 <_dtoa_r+0x3a6>
 800edda:	46b8      	mov	r8, r7
 800eddc:	9c08      	ldr	r4, [sp, #32]
 800edde:	e784      	b.n	800ecea <_dtoa_r+0x3ea>
 800ede0:	4b27      	ldr	r3, [pc, #156]	@ (800ee80 <_dtoa_r+0x580>)
 800ede2:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800ede4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800ede8:	4454      	add	r4, sl
 800edea:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800edee:	2900      	cmp	r1, #0
 800edf0:	d054      	beq.n	800ee9c <_dtoa_r+0x59c>
 800edf2:	2000      	movs	r0, #0
 800edf4:	4928      	ldr	r1, [pc, #160]	@ (800ee98 <_dtoa_r+0x598>)
 800edf6:	f7f1 fd2d 	bl	8000854 <__aeabi_ddiv>
 800edfa:	4633      	mov	r3, r6
 800edfc:	4656      	mov	r6, sl
 800edfe:	462a      	mov	r2, r5
 800ee00:	f7f1 fa46 	bl	8000290 <__aeabi_dsub>
 800ee04:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800ee08:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ee0c:	f7f1 fea8 	bl	8000b60 <__aeabi_d2iz>
 800ee10:	4605      	mov	r5, r0
 800ee12:	f7f1 fb8b 	bl	800052c <__aeabi_i2d>
 800ee16:	4602      	mov	r2, r0
 800ee18:	460b      	mov	r3, r1
 800ee1a:	3530      	adds	r5, #48	@ 0x30
 800ee1c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ee20:	f7f1 fa36 	bl	8000290 <__aeabi_dsub>
 800ee24:	4602      	mov	r2, r0
 800ee26:	460b      	mov	r3, r1
 800ee28:	f806 5b01 	strb.w	r5, [r6], #1
 800ee2c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800ee30:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800ee34:	f7f1 fe56 	bl	8000ae4 <__aeabi_dcmplt>
 800ee38:	2800      	cmp	r0, #0
 800ee3a:	d172      	bne.n	800ef22 <_dtoa_r+0x622>
 800ee3c:	2000      	movs	r0, #0
 800ee3e:	4912      	ldr	r1, [pc, #72]	@ (800ee88 <_dtoa_r+0x588>)
 800ee40:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800ee44:	f7f1 fa24 	bl	8000290 <__aeabi_dsub>
 800ee48:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800ee4c:	f7f1 fe4a 	bl	8000ae4 <__aeabi_dcmplt>
 800ee50:	2800      	cmp	r0, #0
 800ee52:	f040 80b4 	bne.w	800efbe <_dtoa_r+0x6be>
 800ee56:	42a6      	cmp	r6, r4
 800ee58:	f43f af70 	beq.w	800ed3c <_dtoa_r+0x43c>
 800ee5c:	2200      	movs	r2, #0
 800ee5e:	4b0b      	ldr	r3, [pc, #44]	@ (800ee8c <_dtoa_r+0x58c>)
 800ee60:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800ee64:	f7f1 fbcc 	bl	8000600 <__aeabi_dmul>
 800ee68:	2200      	movs	r2, #0
 800ee6a:	4b08      	ldr	r3, [pc, #32]	@ (800ee8c <_dtoa_r+0x58c>)
 800ee6c:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800ee70:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ee74:	f7f1 fbc4 	bl	8000600 <__aeabi_dmul>
 800ee78:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800ee7c:	e7c4      	b.n	800ee08 <_dtoa_r+0x508>
 800ee7e:	bf00      	nop
 800ee80:	08011d70 	.word	0x08011d70
 800ee84:	08011d48 	.word	0x08011d48
 800ee88:	3ff00000 	.word	0x3ff00000
 800ee8c:	40240000 	.word	0x40240000
 800ee90:	401c0000 	.word	0x401c0000
 800ee94:	40140000 	.word	0x40140000
 800ee98:	3fe00000 	.word	0x3fe00000
 800ee9c:	4631      	mov	r1, r6
 800ee9e:	4656      	mov	r6, sl
 800eea0:	4628      	mov	r0, r5
 800eea2:	f7f1 fbad 	bl	8000600 <__aeabi_dmul>
 800eea6:	9413      	str	r4, [sp, #76]	@ 0x4c
 800eea8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800eeac:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800eeb0:	f7f1 fe56 	bl	8000b60 <__aeabi_d2iz>
 800eeb4:	4605      	mov	r5, r0
 800eeb6:	f7f1 fb39 	bl	800052c <__aeabi_i2d>
 800eeba:	4602      	mov	r2, r0
 800eebc:	3530      	adds	r5, #48	@ 0x30
 800eebe:	460b      	mov	r3, r1
 800eec0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800eec4:	f7f1 f9e4 	bl	8000290 <__aeabi_dsub>
 800eec8:	f806 5b01 	strb.w	r5, [r6], #1
 800eecc:	4602      	mov	r2, r0
 800eece:	460b      	mov	r3, r1
 800eed0:	42a6      	cmp	r6, r4
 800eed2:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800eed6:	f04f 0200 	mov.w	r2, #0
 800eeda:	d124      	bne.n	800ef26 <_dtoa_r+0x626>
 800eedc:	4baf      	ldr	r3, [pc, #700]	@ (800f19c <_dtoa_r+0x89c>)
 800eede:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800eee2:	f7f1 f9d7 	bl	8000294 <__adddf3>
 800eee6:	4602      	mov	r2, r0
 800eee8:	460b      	mov	r3, r1
 800eeea:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800eeee:	f7f1 fe17 	bl	8000b20 <__aeabi_dcmpgt>
 800eef2:	2800      	cmp	r0, #0
 800eef4:	d163      	bne.n	800efbe <_dtoa_r+0x6be>
 800eef6:	2000      	movs	r0, #0
 800eef8:	49a8      	ldr	r1, [pc, #672]	@ (800f19c <_dtoa_r+0x89c>)
 800eefa:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800eefe:	f7f1 f9c7 	bl	8000290 <__aeabi_dsub>
 800ef02:	4602      	mov	r2, r0
 800ef04:	460b      	mov	r3, r1
 800ef06:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ef0a:	f7f1 fdeb 	bl	8000ae4 <__aeabi_dcmplt>
 800ef0e:	2800      	cmp	r0, #0
 800ef10:	f43f af14 	beq.w	800ed3c <_dtoa_r+0x43c>
 800ef14:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800ef16:	1e73      	subs	r3, r6, #1
 800ef18:	9313      	str	r3, [sp, #76]	@ 0x4c
 800ef1a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800ef1e:	2b30      	cmp	r3, #48	@ 0x30
 800ef20:	d0f8      	beq.n	800ef14 <_dtoa_r+0x614>
 800ef22:	4647      	mov	r7, r8
 800ef24:	e03b      	b.n	800ef9e <_dtoa_r+0x69e>
 800ef26:	4b9e      	ldr	r3, [pc, #632]	@ (800f1a0 <_dtoa_r+0x8a0>)
 800ef28:	f7f1 fb6a 	bl	8000600 <__aeabi_dmul>
 800ef2c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800ef30:	e7bc      	b.n	800eeac <_dtoa_r+0x5ac>
 800ef32:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 800ef36:	4656      	mov	r6, sl
 800ef38:	4620      	mov	r0, r4
 800ef3a:	4629      	mov	r1, r5
 800ef3c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ef40:	f7f1 fc88 	bl	8000854 <__aeabi_ddiv>
 800ef44:	f7f1 fe0c 	bl	8000b60 <__aeabi_d2iz>
 800ef48:	4680      	mov	r8, r0
 800ef4a:	f7f1 faef 	bl	800052c <__aeabi_i2d>
 800ef4e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ef52:	f7f1 fb55 	bl	8000600 <__aeabi_dmul>
 800ef56:	4602      	mov	r2, r0
 800ef58:	4620      	mov	r0, r4
 800ef5a:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800ef5e:	460b      	mov	r3, r1
 800ef60:	4629      	mov	r1, r5
 800ef62:	f7f1 f995 	bl	8000290 <__aeabi_dsub>
 800ef66:	9d08      	ldr	r5, [sp, #32]
 800ef68:	f806 4b01 	strb.w	r4, [r6], #1
 800ef6c:	eba6 040a 	sub.w	r4, r6, sl
 800ef70:	4602      	mov	r2, r0
 800ef72:	460b      	mov	r3, r1
 800ef74:	42a5      	cmp	r5, r4
 800ef76:	d133      	bne.n	800efe0 <_dtoa_r+0x6e0>
 800ef78:	f7f1 f98c 	bl	8000294 <__adddf3>
 800ef7c:	4604      	mov	r4, r0
 800ef7e:	460d      	mov	r5, r1
 800ef80:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ef84:	f7f1 fdcc 	bl	8000b20 <__aeabi_dcmpgt>
 800ef88:	b9c0      	cbnz	r0, 800efbc <_dtoa_r+0x6bc>
 800ef8a:	4620      	mov	r0, r4
 800ef8c:	4629      	mov	r1, r5
 800ef8e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ef92:	f7f1 fd9d 	bl	8000ad0 <__aeabi_dcmpeq>
 800ef96:	b110      	cbz	r0, 800ef9e <_dtoa_r+0x69e>
 800ef98:	f018 0f01 	tst.w	r8, #1
 800ef9c:	d10e      	bne.n	800efbc <_dtoa_r+0x6bc>
 800ef9e:	9903      	ldr	r1, [sp, #12]
 800efa0:	4648      	mov	r0, r9
 800efa2:	f000 feb5 	bl	800fd10 <_Bfree>
 800efa6:	2300      	movs	r3, #0
 800efa8:	3701      	adds	r7, #1
 800efaa:	7033      	strb	r3, [r6, #0]
 800efac:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800efae:	601f      	str	r7, [r3, #0]
 800efb0:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800efb2:	2b00      	cmp	r3, #0
 800efb4:	f000 824c 	beq.w	800f450 <_dtoa_r+0xb50>
 800efb8:	601e      	str	r6, [r3, #0]
 800efba:	e249      	b.n	800f450 <_dtoa_r+0xb50>
 800efbc:	46b8      	mov	r8, r7
 800efbe:	4633      	mov	r3, r6
 800efc0:	461e      	mov	r6, r3
 800efc2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800efc6:	2a39      	cmp	r2, #57	@ 0x39
 800efc8:	d106      	bne.n	800efd8 <_dtoa_r+0x6d8>
 800efca:	459a      	cmp	sl, r3
 800efcc:	d1f8      	bne.n	800efc0 <_dtoa_r+0x6c0>
 800efce:	2230      	movs	r2, #48	@ 0x30
 800efd0:	f108 0801 	add.w	r8, r8, #1
 800efd4:	f88a 2000 	strb.w	r2, [sl]
 800efd8:	781a      	ldrb	r2, [r3, #0]
 800efda:	3201      	adds	r2, #1
 800efdc:	701a      	strb	r2, [r3, #0]
 800efde:	e7a0      	b.n	800ef22 <_dtoa_r+0x622>
 800efe0:	2200      	movs	r2, #0
 800efe2:	4b6f      	ldr	r3, [pc, #444]	@ (800f1a0 <_dtoa_r+0x8a0>)
 800efe4:	f7f1 fb0c 	bl	8000600 <__aeabi_dmul>
 800efe8:	2200      	movs	r2, #0
 800efea:	2300      	movs	r3, #0
 800efec:	4604      	mov	r4, r0
 800efee:	460d      	mov	r5, r1
 800eff0:	f7f1 fd6e 	bl	8000ad0 <__aeabi_dcmpeq>
 800eff4:	2800      	cmp	r0, #0
 800eff6:	d09f      	beq.n	800ef38 <_dtoa_r+0x638>
 800eff8:	e7d1      	b.n	800ef9e <_dtoa_r+0x69e>
 800effa:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800effc:	2a00      	cmp	r2, #0
 800effe:	f000 80ea 	beq.w	800f1d6 <_dtoa_r+0x8d6>
 800f002:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800f004:	2a01      	cmp	r2, #1
 800f006:	f300 80cd 	bgt.w	800f1a4 <_dtoa_r+0x8a4>
 800f00a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800f00c:	2a00      	cmp	r2, #0
 800f00e:	f000 80c1 	beq.w	800f194 <_dtoa_r+0x894>
 800f012:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800f016:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800f018:	9e04      	ldr	r6, [sp, #16]
 800f01a:	9a04      	ldr	r2, [sp, #16]
 800f01c:	2101      	movs	r1, #1
 800f01e:	4648      	mov	r0, r9
 800f020:	441a      	add	r2, r3
 800f022:	9204      	str	r2, [sp, #16]
 800f024:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f026:	441a      	add	r2, r3
 800f028:	9209      	str	r2, [sp, #36]	@ 0x24
 800f02a:	f000 ff27 	bl	800fe7c <__i2b>
 800f02e:	4605      	mov	r5, r0
 800f030:	b166      	cbz	r6, 800f04c <_dtoa_r+0x74c>
 800f032:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f034:	2b00      	cmp	r3, #0
 800f036:	dd09      	ble.n	800f04c <_dtoa_r+0x74c>
 800f038:	42b3      	cmp	r3, r6
 800f03a:	9a04      	ldr	r2, [sp, #16]
 800f03c:	bfa8      	it	ge
 800f03e:	4633      	movge	r3, r6
 800f040:	1ad2      	subs	r2, r2, r3
 800f042:	1af6      	subs	r6, r6, r3
 800f044:	9204      	str	r2, [sp, #16]
 800f046:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f048:	1ad3      	subs	r3, r2, r3
 800f04a:	9309      	str	r3, [sp, #36]	@ 0x24
 800f04c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f04e:	b30b      	cbz	r3, 800f094 <_dtoa_r+0x794>
 800f050:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f052:	2b00      	cmp	r3, #0
 800f054:	f000 80c6 	beq.w	800f1e4 <_dtoa_r+0x8e4>
 800f058:	2c00      	cmp	r4, #0
 800f05a:	f000 80c0 	beq.w	800f1de <_dtoa_r+0x8de>
 800f05e:	4629      	mov	r1, r5
 800f060:	4622      	mov	r2, r4
 800f062:	4648      	mov	r0, r9
 800f064:	f000 ffc4 	bl	800fff0 <__pow5mult>
 800f068:	9a03      	ldr	r2, [sp, #12]
 800f06a:	4601      	mov	r1, r0
 800f06c:	4605      	mov	r5, r0
 800f06e:	4648      	mov	r0, r9
 800f070:	f000 ff1a 	bl	800fea8 <__multiply>
 800f074:	9903      	ldr	r1, [sp, #12]
 800f076:	4680      	mov	r8, r0
 800f078:	4648      	mov	r0, r9
 800f07a:	f000 fe49 	bl	800fd10 <_Bfree>
 800f07e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f080:	1b1b      	subs	r3, r3, r4
 800f082:	930a      	str	r3, [sp, #40]	@ 0x28
 800f084:	f000 80b1 	beq.w	800f1ea <_dtoa_r+0x8ea>
 800f088:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800f08a:	4641      	mov	r1, r8
 800f08c:	4648      	mov	r0, r9
 800f08e:	f000 ffaf 	bl	800fff0 <__pow5mult>
 800f092:	9003      	str	r0, [sp, #12]
 800f094:	2101      	movs	r1, #1
 800f096:	4648      	mov	r0, r9
 800f098:	f000 fef0 	bl	800fe7c <__i2b>
 800f09c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f09e:	4604      	mov	r4, r0
 800f0a0:	2b00      	cmp	r3, #0
 800f0a2:	f000 81d9 	beq.w	800f458 <_dtoa_r+0xb58>
 800f0a6:	461a      	mov	r2, r3
 800f0a8:	4601      	mov	r1, r0
 800f0aa:	4648      	mov	r0, r9
 800f0ac:	f000 ffa0 	bl	800fff0 <__pow5mult>
 800f0b0:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800f0b2:	4604      	mov	r4, r0
 800f0b4:	2b01      	cmp	r3, #1
 800f0b6:	f300 809f 	bgt.w	800f1f8 <_dtoa_r+0x8f8>
 800f0ba:	9b06      	ldr	r3, [sp, #24]
 800f0bc:	2b00      	cmp	r3, #0
 800f0be:	f040 8097 	bne.w	800f1f0 <_dtoa_r+0x8f0>
 800f0c2:	9b07      	ldr	r3, [sp, #28]
 800f0c4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f0c8:	2b00      	cmp	r3, #0
 800f0ca:	f040 8093 	bne.w	800f1f4 <_dtoa_r+0x8f4>
 800f0ce:	9b07      	ldr	r3, [sp, #28]
 800f0d0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800f0d4:	0d1b      	lsrs	r3, r3, #20
 800f0d6:	051b      	lsls	r3, r3, #20
 800f0d8:	b133      	cbz	r3, 800f0e8 <_dtoa_r+0x7e8>
 800f0da:	9b04      	ldr	r3, [sp, #16]
 800f0dc:	3301      	adds	r3, #1
 800f0de:	9304      	str	r3, [sp, #16]
 800f0e0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f0e2:	3301      	adds	r3, #1
 800f0e4:	9309      	str	r3, [sp, #36]	@ 0x24
 800f0e6:	2301      	movs	r3, #1
 800f0e8:	930a      	str	r3, [sp, #40]	@ 0x28
 800f0ea:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f0ec:	2b00      	cmp	r3, #0
 800f0ee:	f000 81b9 	beq.w	800f464 <_dtoa_r+0xb64>
 800f0f2:	6923      	ldr	r3, [r4, #16]
 800f0f4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800f0f8:	6918      	ldr	r0, [r3, #16]
 800f0fa:	f000 fe73 	bl	800fde4 <__hi0bits>
 800f0fe:	f1c0 0020 	rsb	r0, r0, #32
 800f102:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f104:	4418      	add	r0, r3
 800f106:	f010 001f 	ands.w	r0, r0, #31
 800f10a:	f000 8082 	beq.w	800f212 <_dtoa_r+0x912>
 800f10e:	f1c0 0320 	rsb	r3, r0, #32
 800f112:	2b04      	cmp	r3, #4
 800f114:	dd73      	ble.n	800f1fe <_dtoa_r+0x8fe>
 800f116:	f1c0 001c 	rsb	r0, r0, #28
 800f11a:	9b04      	ldr	r3, [sp, #16]
 800f11c:	4403      	add	r3, r0
 800f11e:	4406      	add	r6, r0
 800f120:	9304      	str	r3, [sp, #16]
 800f122:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f124:	4403      	add	r3, r0
 800f126:	9309      	str	r3, [sp, #36]	@ 0x24
 800f128:	9b04      	ldr	r3, [sp, #16]
 800f12a:	2b00      	cmp	r3, #0
 800f12c:	dd05      	ble.n	800f13a <_dtoa_r+0x83a>
 800f12e:	461a      	mov	r2, r3
 800f130:	9903      	ldr	r1, [sp, #12]
 800f132:	4648      	mov	r0, r9
 800f134:	f000 ffb6 	bl	80100a4 <__lshift>
 800f138:	9003      	str	r0, [sp, #12]
 800f13a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f13c:	2b00      	cmp	r3, #0
 800f13e:	dd05      	ble.n	800f14c <_dtoa_r+0x84c>
 800f140:	4621      	mov	r1, r4
 800f142:	461a      	mov	r2, r3
 800f144:	4648      	mov	r0, r9
 800f146:	f000 ffad 	bl	80100a4 <__lshift>
 800f14a:	4604      	mov	r4, r0
 800f14c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f14e:	2b00      	cmp	r3, #0
 800f150:	d061      	beq.n	800f216 <_dtoa_r+0x916>
 800f152:	4621      	mov	r1, r4
 800f154:	9803      	ldr	r0, [sp, #12]
 800f156:	f001 f811 	bl	801017c <__mcmp>
 800f15a:	2800      	cmp	r0, #0
 800f15c:	da5b      	bge.n	800f216 <_dtoa_r+0x916>
 800f15e:	2300      	movs	r3, #0
 800f160:	220a      	movs	r2, #10
 800f162:	9903      	ldr	r1, [sp, #12]
 800f164:	4648      	mov	r0, r9
 800f166:	f000 fdf5 	bl	800fd54 <__multadd>
 800f16a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f16c:	f107 38ff 	add.w	r8, r7, #4294967295	@ 0xffffffff
 800f170:	9003      	str	r0, [sp, #12]
 800f172:	2b00      	cmp	r3, #0
 800f174:	f000 8178 	beq.w	800f468 <_dtoa_r+0xb68>
 800f178:	4629      	mov	r1, r5
 800f17a:	2300      	movs	r3, #0
 800f17c:	220a      	movs	r2, #10
 800f17e:	4648      	mov	r0, r9
 800f180:	f000 fde8 	bl	800fd54 <__multadd>
 800f184:	f1bb 0f00 	cmp.w	fp, #0
 800f188:	4605      	mov	r5, r0
 800f18a:	dc6f      	bgt.n	800f26c <_dtoa_r+0x96c>
 800f18c:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800f18e:	2b02      	cmp	r3, #2
 800f190:	dc49      	bgt.n	800f226 <_dtoa_r+0x926>
 800f192:	e06b      	b.n	800f26c <_dtoa_r+0x96c>
 800f194:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800f196:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800f19a:	e73c      	b.n	800f016 <_dtoa_r+0x716>
 800f19c:	3fe00000 	.word	0x3fe00000
 800f1a0:	40240000 	.word	0x40240000
 800f1a4:	9b08      	ldr	r3, [sp, #32]
 800f1a6:	1e5c      	subs	r4, r3, #1
 800f1a8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f1aa:	42a3      	cmp	r3, r4
 800f1ac:	db09      	blt.n	800f1c2 <_dtoa_r+0x8c2>
 800f1ae:	1b1c      	subs	r4, r3, r4
 800f1b0:	9b08      	ldr	r3, [sp, #32]
 800f1b2:	2b00      	cmp	r3, #0
 800f1b4:	f6bf af30 	bge.w	800f018 <_dtoa_r+0x718>
 800f1b8:	9b04      	ldr	r3, [sp, #16]
 800f1ba:	9a08      	ldr	r2, [sp, #32]
 800f1bc:	1a9e      	subs	r6, r3, r2
 800f1be:	2300      	movs	r3, #0
 800f1c0:	e72b      	b.n	800f01a <_dtoa_r+0x71a>
 800f1c2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f1c4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800f1c6:	1ae3      	subs	r3, r4, r3
 800f1c8:	940a      	str	r4, [sp, #40]	@ 0x28
 800f1ca:	9e04      	ldr	r6, [sp, #16]
 800f1cc:	2400      	movs	r4, #0
 800f1ce:	441a      	add	r2, r3
 800f1d0:	9b08      	ldr	r3, [sp, #32]
 800f1d2:	920e      	str	r2, [sp, #56]	@ 0x38
 800f1d4:	e721      	b.n	800f01a <_dtoa_r+0x71a>
 800f1d6:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800f1d8:	9e04      	ldr	r6, [sp, #16]
 800f1da:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800f1dc:	e728      	b.n	800f030 <_dtoa_r+0x730>
 800f1de:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800f1e2:	e751      	b.n	800f088 <_dtoa_r+0x788>
 800f1e4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800f1e6:	9903      	ldr	r1, [sp, #12]
 800f1e8:	e750      	b.n	800f08c <_dtoa_r+0x78c>
 800f1ea:	f8cd 800c 	str.w	r8, [sp, #12]
 800f1ee:	e751      	b.n	800f094 <_dtoa_r+0x794>
 800f1f0:	2300      	movs	r3, #0
 800f1f2:	e779      	b.n	800f0e8 <_dtoa_r+0x7e8>
 800f1f4:	9b06      	ldr	r3, [sp, #24]
 800f1f6:	e777      	b.n	800f0e8 <_dtoa_r+0x7e8>
 800f1f8:	2300      	movs	r3, #0
 800f1fa:	930a      	str	r3, [sp, #40]	@ 0x28
 800f1fc:	e779      	b.n	800f0f2 <_dtoa_r+0x7f2>
 800f1fe:	d093      	beq.n	800f128 <_dtoa_r+0x828>
 800f200:	331c      	adds	r3, #28
 800f202:	9a04      	ldr	r2, [sp, #16]
 800f204:	441a      	add	r2, r3
 800f206:	441e      	add	r6, r3
 800f208:	9204      	str	r2, [sp, #16]
 800f20a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f20c:	441a      	add	r2, r3
 800f20e:	9209      	str	r2, [sp, #36]	@ 0x24
 800f210:	e78a      	b.n	800f128 <_dtoa_r+0x828>
 800f212:	4603      	mov	r3, r0
 800f214:	e7f4      	b.n	800f200 <_dtoa_r+0x900>
 800f216:	9b08      	ldr	r3, [sp, #32]
 800f218:	46b8      	mov	r8, r7
 800f21a:	2b00      	cmp	r3, #0
 800f21c:	dc20      	bgt.n	800f260 <_dtoa_r+0x960>
 800f21e:	469b      	mov	fp, r3
 800f220:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800f222:	2b02      	cmp	r3, #2
 800f224:	dd1e      	ble.n	800f264 <_dtoa_r+0x964>
 800f226:	f1bb 0f00 	cmp.w	fp, #0
 800f22a:	f47f adb1 	bne.w	800ed90 <_dtoa_r+0x490>
 800f22e:	4621      	mov	r1, r4
 800f230:	465b      	mov	r3, fp
 800f232:	2205      	movs	r2, #5
 800f234:	4648      	mov	r0, r9
 800f236:	f000 fd8d 	bl	800fd54 <__multadd>
 800f23a:	4601      	mov	r1, r0
 800f23c:	4604      	mov	r4, r0
 800f23e:	9803      	ldr	r0, [sp, #12]
 800f240:	f000 ff9c 	bl	801017c <__mcmp>
 800f244:	2800      	cmp	r0, #0
 800f246:	f77f ada3 	ble.w	800ed90 <_dtoa_r+0x490>
 800f24a:	4656      	mov	r6, sl
 800f24c:	2331      	movs	r3, #49	@ 0x31
 800f24e:	f108 0801 	add.w	r8, r8, #1
 800f252:	f806 3b01 	strb.w	r3, [r6], #1
 800f256:	e59f      	b.n	800ed98 <_dtoa_r+0x498>
 800f258:	46b8      	mov	r8, r7
 800f25a:	9c08      	ldr	r4, [sp, #32]
 800f25c:	4625      	mov	r5, r4
 800f25e:	e7f4      	b.n	800f24a <_dtoa_r+0x94a>
 800f260:	f8dd b020 	ldr.w	fp, [sp, #32]
 800f264:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f266:	2b00      	cmp	r3, #0
 800f268:	f000 8102 	beq.w	800f470 <_dtoa_r+0xb70>
 800f26c:	2e00      	cmp	r6, #0
 800f26e:	dd05      	ble.n	800f27c <_dtoa_r+0x97c>
 800f270:	4629      	mov	r1, r5
 800f272:	4632      	mov	r2, r6
 800f274:	4648      	mov	r0, r9
 800f276:	f000 ff15 	bl	80100a4 <__lshift>
 800f27a:	4605      	mov	r5, r0
 800f27c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f27e:	2b00      	cmp	r3, #0
 800f280:	d05c      	beq.n	800f33c <_dtoa_r+0xa3c>
 800f282:	6869      	ldr	r1, [r5, #4]
 800f284:	4648      	mov	r0, r9
 800f286:	f000 fd03 	bl	800fc90 <_Balloc>
 800f28a:	4606      	mov	r6, r0
 800f28c:	b928      	cbnz	r0, 800f29a <_dtoa_r+0x99a>
 800f28e:	4b83      	ldr	r3, [pc, #524]	@ (800f49c <_dtoa_r+0xb9c>)
 800f290:	4602      	mov	r2, r0
 800f292:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800f296:	f7ff bb47 	b.w	800e928 <_dtoa_r+0x28>
 800f29a:	692a      	ldr	r2, [r5, #16]
 800f29c:	f105 010c 	add.w	r1, r5, #12
 800f2a0:	300c      	adds	r0, #12
 800f2a2:	3202      	adds	r2, #2
 800f2a4:	0092      	lsls	r2, r2, #2
 800f2a6:	f001 fa6d 	bl	8010784 <memcpy>
 800f2aa:	2201      	movs	r2, #1
 800f2ac:	4631      	mov	r1, r6
 800f2ae:	4648      	mov	r0, r9
 800f2b0:	f000 fef8 	bl	80100a4 <__lshift>
 800f2b4:	f10a 0301 	add.w	r3, sl, #1
 800f2b8:	462f      	mov	r7, r5
 800f2ba:	4605      	mov	r5, r0
 800f2bc:	9304      	str	r3, [sp, #16]
 800f2be:	eb0a 030b 	add.w	r3, sl, fp
 800f2c2:	930a      	str	r3, [sp, #40]	@ 0x28
 800f2c4:	9b06      	ldr	r3, [sp, #24]
 800f2c6:	f003 0301 	and.w	r3, r3, #1
 800f2ca:	9309      	str	r3, [sp, #36]	@ 0x24
 800f2cc:	9b04      	ldr	r3, [sp, #16]
 800f2ce:	4621      	mov	r1, r4
 800f2d0:	9803      	ldr	r0, [sp, #12]
 800f2d2:	f103 3bff 	add.w	fp, r3, #4294967295	@ 0xffffffff
 800f2d6:	f7ff fa85 	bl	800e7e4 <quorem>
 800f2da:	4603      	mov	r3, r0
 800f2dc:	4639      	mov	r1, r7
 800f2de:	9006      	str	r0, [sp, #24]
 800f2e0:	3330      	adds	r3, #48	@ 0x30
 800f2e2:	9803      	ldr	r0, [sp, #12]
 800f2e4:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f2e6:	f000 ff49 	bl	801017c <__mcmp>
 800f2ea:	462a      	mov	r2, r5
 800f2ec:	9008      	str	r0, [sp, #32]
 800f2ee:	4621      	mov	r1, r4
 800f2f0:	4648      	mov	r0, r9
 800f2f2:	f000 ff5f 	bl	80101b4 <__mdiff>
 800f2f6:	68c2      	ldr	r2, [r0, #12]
 800f2f8:	4606      	mov	r6, r0
 800f2fa:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f2fc:	bb02      	cbnz	r2, 800f340 <_dtoa_r+0xa40>
 800f2fe:	4601      	mov	r1, r0
 800f300:	9803      	ldr	r0, [sp, #12]
 800f302:	f000 ff3b 	bl	801017c <__mcmp>
 800f306:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f308:	4602      	mov	r2, r0
 800f30a:	4631      	mov	r1, r6
 800f30c:	4648      	mov	r0, r9
 800f30e:	e9cd 320b 	strd	r3, r2, [sp, #44]	@ 0x2c
 800f312:	f000 fcfd 	bl	800fd10 <_Bfree>
 800f316:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800f318:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800f31a:	9e04      	ldr	r6, [sp, #16]
 800f31c:	ea42 0103 	orr.w	r1, r2, r3
 800f320:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f322:	4319      	orrs	r1, r3
 800f324:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f326:	d10d      	bne.n	800f344 <_dtoa_r+0xa44>
 800f328:	2b39      	cmp	r3, #57	@ 0x39
 800f32a:	d027      	beq.n	800f37c <_dtoa_r+0xa7c>
 800f32c:	9a08      	ldr	r2, [sp, #32]
 800f32e:	2a00      	cmp	r2, #0
 800f330:	dd01      	ble.n	800f336 <_dtoa_r+0xa36>
 800f332:	9b06      	ldr	r3, [sp, #24]
 800f334:	3331      	adds	r3, #49	@ 0x31
 800f336:	f88b 3000 	strb.w	r3, [fp]
 800f33a:	e52e      	b.n	800ed9a <_dtoa_r+0x49a>
 800f33c:	4628      	mov	r0, r5
 800f33e:	e7b9      	b.n	800f2b4 <_dtoa_r+0x9b4>
 800f340:	2201      	movs	r2, #1
 800f342:	e7e2      	b.n	800f30a <_dtoa_r+0xa0a>
 800f344:	9908      	ldr	r1, [sp, #32]
 800f346:	2900      	cmp	r1, #0
 800f348:	db04      	blt.n	800f354 <_dtoa_r+0xa54>
 800f34a:	9820      	ldr	r0, [sp, #128]	@ 0x80
 800f34c:	4301      	orrs	r1, r0
 800f34e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f350:	4301      	orrs	r1, r0
 800f352:	d120      	bne.n	800f396 <_dtoa_r+0xa96>
 800f354:	2a00      	cmp	r2, #0
 800f356:	ddee      	ble.n	800f336 <_dtoa_r+0xa36>
 800f358:	2201      	movs	r2, #1
 800f35a:	9903      	ldr	r1, [sp, #12]
 800f35c:	4648      	mov	r0, r9
 800f35e:	9304      	str	r3, [sp, #16]
 800f360:	f000 fea0 	bl	80100a4 <__lshift>
 800f364:	4621      	mov	r1, r4
 800f366:	9003      	str	r0, [sp, #12]
 800f368:	f000 ff08 	bl	801017c <__mcmp>
 800f36c:	2800      	cmp	r0, #0
 800f36e:	9b04      	ldr	r3, [sp, #16]
 800f370:	dc02      	bgt.n	800f378 <_dtoa_r+0xa78>
 800f372:	d1e0      	bne.n	800f336 <_dtoa_r+0xa36>
 800f374:	07da      	lsls	r2, r3, #31
 800f376:	d5de      	bpl.n	800f336 <_dtoa_r+0xa36>
 800f378:	2b39      	cmp	r3, #57	@ 0x39
 800f37a:	d1da      	bne.n	800f332 <_dtoa_r+0xa32>
 800f37c:	2339      	movs	r3, #57	@ 0x39
 800f37e:	f88b 3000 	strb.w	r3, [fp]
 800f382:	4633      	mov	r3, r6
 800f384:	461e      	mov	r6, r3
 800f386:	3b01      	subs	r3, #1
 800f388:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800f38c:	2a39      	cmp	r2, #57	@ 0x39
 800f38e:	d04f      	beq.n	800f430 <_dtoa_r+0xb30>
 800f390:	3201      	adds	r2, #1
 800f392:	701a      	strb	r2, [r3, #0]
 800f394:	e501      	b.n	800ed9a <_dtoa_r+0x49a>
 800f396:	2a00      	cmp	r2, #0
 800f398:	dd03      	ble.n	800f3a2 <_dtoa_r+0xaa2>
 800f39a:	2b39      	cmp	r3, #57	@ 0x39
 800f39c:	d0ee      	beq.n	800f37c <_dtoa_r+0xa7c>
 800f39e:	3301      	adds	r3, #1
 800f3a0:	e7c9      	b.n	800f336 <_dtoa_r+0xa36>
 800f3a2:	9a04      	ldr	r2, [sp, #16]
 800f3a4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800f3a6:	f802 3c01 	strb.w	r3, [r2, #-1]
 800f3aa:	428a      	cmp	r2, r1
 800f3ac:	d029      	beq.n	800f402 <_dtoa_r+0xb02>
 800f3ae:	2300      	movs	r3, #0
 800f3b0:	220a      	movs	r2, #10
 800f3b2:	9903      	ldr	r1, [sp, #12]
 800f3b4:	4648      	mov	r0, r9
 800f3b6:	f000 fccd 	bl	800fd54 <__multadd>
 800f3ba:	42af      	cmp	r7, r5
 800f3bc:	9003      	str	r0, [sp, #12]
 800f3be:	f04f 0300 	mov.w	r3, #0
 800f3c2:	f04f 020a 	mov.w	r2, #10
 800f3c6:	4639      	mov	r1, r7
 800f3c8:	4648      	mov	r0, r9
 800f3ca:	d107      	bne.n	800f3dc <_dtoa_r+0xadc>
 800f3cc:	f000 fcc2 	bl	800fd54 <__multadd>
 800f3d0:	4607      	mov	r7, r0
 800f3d2:	4605      	mov	r5, r0
 800f3d4:	9b04      	ldr	r3, [sp, #16]
 800f3d6:	3301      	adds	r3, #1
 800f3d8:	9304      	str	r3, [sp, #16]
 800f3da:	e777      	b.n	800f2cc <_dtoa_r+0x9cc>
 800f3dc:	f000 fcba 	bl	800fd54 <__multadd>
 800f3e0:	4629      	mov	r1, r5
 800f3e2:	4607      	mov	r7, r0
 800f3e4:	2300      	movs	r3, #0
 800f3e6:	220a      	movs	r2, #10
 800f3e8:	4648      	mov	r0, r9
 800f3ea:	f000 fcb3 	bl	800fd54 <__multadd>
 800f3ee:	4605      	mov	r5, r0
 800f3f0:	e7f0      	b.n	800f3d4 <_dtoa_r+0xad4>
 800f3f2:	f1bb 0f00 	cmp.w	fp, #0
 800f3f6:	f04f 0700 	mov.w	r7, #0
 800f3fa:	bfcc      	ite	gt
 800f3fc:	465e      	movgt	r6, fp
 800f3fe:	2601      	movle	r6, #1
 800f400:	4456      	add	r6, sl
 800f402:	2201      	movs	r2, #1
 800f404:	9903      	ldr	r1, [sp, #12]
 800f406:	4648      	mov	r0, r9
 800f408:	9304      	str	r3, [sp, #16]
 800f40a:	f000 fe4b 	bl	80100a4 <__lshift>
 800f40e:	4621      	mov	r1, r4
 800f410:	9003      	str	r0, [sp, #12]
 800f412:	f000 feb3 	bl	801017c <__mcmp>
 800f416:	2800      	cmp	r0, #0
 800f418:	dcb3      	bgt.n	800f382 <_dtoa_r+0xa82>
 800f41a:	d102      	bne.n	800f422 <_dtoa_r+0xb22>
 800f41c:	9b04      	ldr	r3, [sp, #16]
 800f41e:	07db      	lsls	r3, r3, #31
 800f420:	d4af      	bmi.n	800f382 <_dtoa_r+0xa82>
 800f422:	4633      	mov	r3, r6
 800f424:	461e      	mov	r6, r3
 800f426:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800f42a:	2a30      	cmp	r2, #48	@ 0x30
 800f42c:	d0fa      	beq.n	800f424 <_dtoa_r+0xb24>
 800f42e:	e4b4      	b.n	800ed9a <_dtoa_r+0x49a>
 800f430:	459a      	cmp	sl, r3
 800f432:	d1a7      	bne.n	800f384 <_dtoa_r+0xa84>
 800f434:	2331      	movs	r3, #49	@ 0x31
 800f436:	f108 0801 	add.w	r8, r8, #1
 800f43a:	f88a 3000 	strb.w	r3, [sl]
 800f43e:	e4ac      	b.n	800ed9a <_dtoa_r+0x49a>
 800f440:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800f442:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800f4a0 <_dtoa_r+0xba0>
 800f446:	b11b      	cbz	r3, 800f450 <_dtoa_r+0xb50>
 800f448:	f10a 0308 	add.w	r3, sl, #8
 800f44c:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800f44e:	6013      	str	r3, [r2, #0]
 800f450:	4650      	mov	r0, sl
 800f452:	b017      	add	sp, #92	@ 0x5c
 800f454:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f458:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800f45a:	2b01      	cmp	r3, #1
 800f45c:	f77f ae2d 	ble.w	800f0ba <_dtoa_r+0x7ba>
 800f460:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f462:	930a      	str	r3, [sp, #40]	@ 0x28
 800f464:	2001      	movs	r0, #1
 800f466:	e64c      	b.n	800f102 <_dtoa_r+0x802>
 800f468:	f1bb 0f00 	cmp.w	fp, #0
 800f46c:	f77f aed8 	ble.w	800f220 <_dtoa_r+0x920>
 800f470:	4656      	mov	r6, sl
 800f472:	4621      	mov	r1, r4
 800f474:	9803      	ldr	r0, [sp, #12]
 800f476:	f7ff f9b5 	bl	800e7e4 <quorem>
 800f47a:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800f47e:	f806 3b01 	strb.w	r3, [r6], #1
 800f482:	eba6 020a 	sub.w	r2, r6, sl
 800f486:	4593      	cmp	fp, r2
 800f488:	ddb3      	ble.n	800f3f2 <_dtoa_r+0xaf2>
 800f48a:	2300      	movs	r3, #0
 800f48c:	220a      	movs	r2, #10
 800f48e:	9903      	ldr	r1, [sp, #12]
 800f490:	4648      	mov	r0, r9
 800f492:	f000 fc5f 	bl	800fd54 <__multadd>
 800f496:	9003      	str	r0, [sp, #12]
 800f498:	e7eb      	b.n	800f472 <_dtoa_r+0xb72>
 800f49a:	bf00      	nop
 800f49c:	08011c78 	.word	0x08011c78
 800f4a0:	08011bfc 	.word	0x08011bfc

0800f4a4 <__ssputs_r>:
 800f4a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f4a8:	461f      	mov	r7, r3
 800f4aa:	688e      	ldr	r6, [r1, #8]
 800f4ac:	4682      	mov	sl, r0
 800f4ae:	460c      	mov	r4, r1
 800f4b0:	42be      	cmp	r6, r7
 800f4b2:	4690      	mov	r8, r2
 800f4b4:	680b      	ldr	r3, [r1, #0]
 800f4b6:	d82d      	bhi.n	800f514 <__ssputs_r+0x70>
 800f4b8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800f4bc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800f4c0:	d026      	beq.n	800f510 <__ssputs_r+0x6c>
 800f4c2:	6965      	ldr	r5, [r4, #20]
 800f4c4:	6909      	ldr	r1, [r1, #16]
 800f4c6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800f4ca:	eba3 0901 	sub.w	r9, r3, r1
 800f4ce:	1c7b      	adds	r3, r7, #1
 800f4d0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800f4d4:	444b      	add	r3, r9
 800f4d6:	106d      	asrs	r5, r5, #1
 800f4d8:	429d      	cmp	r5, r3
 800f4da:	bf38      	it	cc
 800f4dc:	461d      	movcc	r5, r3
 800f4de:	0553      	lsls	r3, r2, #21
 800f4e0:	d527      	bpl.n	800f532 <__ssputs_r+0x8e>
 800f4e2:	4629      	mov	r1, r5
 800f4e4:	f000 faa0 	bl	800fa28 <_malloc_r>
 800f4e8:	4606      	mov	r6, r0
 800f4ea:	b360      	cbz	r0, 800f546 <__ssputs_r+0xa2>
 800f4ec:	464a      	mov	r2, r9
 800f4ee:	6921      	ldr	r1, [r4, #16]
 800f4f0:	f001 f948 	bl	8010784 <memcpy>
 800f4f4:	89a3      	ldrh	r3, [r4, #12]
 800f4f6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800f4fa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f4fe:	81a3      	strh	r3, [r4, #12]
 800f500:	6126      	str	r6, [r4, #16]
 800f502:	444e      	add	r6, r9
 800f504:	6165      	str	r5, [r4, #20]
 800f506:	eba5 0509 	sub.w	r5, r5, r9
 800f50a:	6026      	str	r6, [r4, #0]
 800f50c:	463e      	mov	r6, r7
 800f50e:	60a5      	str	r5, [r4, #8]
 800f510:	42be      	cmp	r6, r7
 800f512:	d900      	bls.n	800f516 <__ssputs_r+0x72>
 800f514:	463e      	mov	r6, r7
 800f516:	4632      	mov	r2, r6
 800f518:	4641      	mov	r1, r8
 800f51a:	6820      	ldr	r0, [r4, #0]
 800f51c:	f001 f89f 	bl	801065e <memmove>
 800f520:	68a3      	ldr	r3, [r4, #8]
 800f522:	2000      	movs	r0, #0
 800f524:	1b9b      	subs	r3, r3, r6
 800f526:	60a3      	str	r3, [r4, #8]
 800f528:	6823      	ldr	r3, [r4, #0]
 800f52a:	4433      	add	r3, r6
 800f52c:	6023      	str	r3, [r4, #0]
 800f52e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f532:	462a      	mov	r2, r5
 800f534:	f000 ff6f 	bl	8010416 <_realloc_r>
 800f538:	4606      	mov	r6, r0
 800f53a:	2800      	cmp	r0, #0
 800f53c:	d1e0      	bne.n	800f500 <__ssputs_r+0x5c>
 800f53e:	6921      	ldr	r1, [r4, #16]
 800f540:	4650      	mov	r0, sl
 800f542:	f001 f95f 	bl	8010804 <_free_r>
 800f546:	230c      	movs	r3, #12
 800f548:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800f54c:	f8ca 3000 	str.w	r3, [sl]
 800f550:	89a3      	ldrh	r3, [r4, #12]
 800f552:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f556:	81a3      	strh	r3, [r4, #12]
 800f558:	e7e9      	b.n	800f52e <__ssputs_r+0x8a>
	...

0800f55c <_svfiprintf_r>:
 800f55c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f560:	4698      	mov	r8, r3
 800f562:	898b      	ldrh	r3, [r1, #12]
 800f564:	b09d      	sub	sp, #116	@ 0x74
 800f566:	4607      	mov	r7, r0
 800f568:	061b      	lsls	r3, r3, #24
 800f56a:	460d      	mov	r5, r1
 800f56c:	4614      	mov	r4, r2
 800f56e:	d510      	bpl.n	800f592 <_svfiprintf_r+0x36>
 800f570:	690b      	ldr	r3, [r1, #16]
 800f572:	b973      	cbnz	r3, 800f592 <_svfiprintf_r+0x36>
 800f574:	2140      	movs	r1, #64	@ 0x40
 800f576:	f000 fa57 	bl	800fa28 <_malloc_r>
 800f57a:	6028      	str	r0, [r5, #0]
 800f57c:	6128      	str	r0, [r5, #16]
 800f57e:	b930      	cbnz	r0, 800f58e <_svfiprintf_r+0x32>
 800f580:	230c      	movs	r3, #12
 800f582:	603b      	str	r3, [r7, #0]
 800f584:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800f588:	b01d      	add	sp, #116	@ 0x74
 800f58a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f58e:	2340      	movs	r3, #64	@ 0x40
 800f590:	616b      	str	r3, [r5, #20]
 800f592:	2300      	movs	r3, #0
 800f594:	f8cd 800c 	str.w	r8, [sp, #12]
 800f598:	f04f 0901 	mov.w	r9, #1
 800f59c:	f8df 81a0 	ldr.w	r8, [pc, #416]	@ 800f740 <_svfiprintf_r+0x1e4>
 800f5a0:	9309      	str	r3, [sp, #36]	@ 0x24
 800f5a2:	2320      	movs	r3, #32
 800f5a4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800f5a8:	2330      	movs	r3, #48	@ 0x30
 800f5aa:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800f5ae:	4623      	mov	r3, r4
 800f5b0:	469a      	mov	sl, r3
 800f5b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f5b6:	b10a      	cbz	r2, 800f5bc <_svfiprintf_r+0x60>
 800f5b8:	2a25      	cmp	r2, #37	@ 0x25
 800f5ba:	d1f9      	bne.n	800f5b0 <_svfiprintf_r+0x54>
 800f5bc:	ebba 0b04 	subs.w	fp, sl, r4
 800f5c0:	d00b      	beq.n	800f5da <_svfiprintf_r+0x7e>
 800f5c2:	465b      	mov	r3, fp
 800f5c4:	4622      	mov	r2, r4
 800f5c6:	4629      	mov	r1, r5
 800f5c8:	4638      	mov	r0, r7
 800f5ca:	f7ff ff6b 	bl	800f4a4 <__ssputs_r>
 800f5ce:	3001      	adds	r0, #1
 800f5d0:	f000 80a7 	beq.w	800f722 <_svfiprintf_r+0x1c6>
 800f5d4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f5d6:	445a      	add	r2, fp
 800f5d8:	9209      	str	r2, [sp, #36]	@ 0x24
 800f5da:	f89a 3000 	ldrb.w	r3, [sl]
 800f5de:	2b00      	cmp	r3, #0
 800f5e0:	f000 809f 	beq.w	800f722 <_svfiprintf_r+0x1c6>
 800f5e4:	2300      	movs	r3, #0
 800f5e6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800f5ea:	f10a 0a01 	add.w	sl, sl, #1
 800f5ee:	9304      	str	r3, [sp, #16]
 800f5f0:	9307      	str	r3, [sp, #28]
 800f5f2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800f5f6:	931a      	str	r3, [sp, #104]	@ 0x68
 800f5f8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f5fc:	4654      	mov	r4, sl
 800f5fe:	2205      	movs	r2, #5
 800f600:	484f      	ldr	r0, [pc, #316]	@ (800f740 <_svfiprintf_r+0x1e4>)
 800f602:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f606:	f7ff f8df 	bl	800e7c8 <memchr>
 800f60a:	9a04      	ldr	r2, [sp, #16]
 800f60c:	b9d8      	cbnz	r0, 800f646 <_svfiprintf_r+0xea>
 800f60e:	06d0      	lsls	r0, r2, #27
 800f610:	bf44      	itt	mi
 800f612:	2320      	movmi	r3, #32
 800f614:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f618:	0711      	lsls	r1, r2, #28
 800f61a:	bf44      	itt	mi
 800f61c:	232b      	movmi	r3, #43	@ 0x2b
 800f61e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f622:	f89a 3000 	ldrb.w	r3, [sl]
 800f626:	2b2a      	cmp	r3, #42	@ 0x2a
 800f628:	d015      	beq.n	800f656 <_svfiprintf_r+0xfa>
 800f62a:	9a07      	ldr	r2, [sp, #28]
 800f62c:	4654      	mov	r4, sl
 800f62e:	2000      	movs	r0, #0
 800f630:	f04f 0c0a 	mov.w	ip, #10
 800f634:	4621      	mov	r1, r4
 800f636:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f63a:	3b30      	subs	r3, #48	@ 0x30
 800f63c:	2b09      	cmp	r3, #9
 800f63e:	d94b      	bls.n	800f6d8 <_svfiprintf_r+0x17c>
 800f640:	b1b0      	cbz	r0, 800f670 <_svfiprintf_r+0x114>
 800f642:	9207      	str	r2, [sp, #28]
 800f644:	e014      	b.n	800f670 <_svfiprintf_r+0x114>
 800f646:	eba0 0308 	sub.w	r3, r0, r8
 800f64a:	46a2      	mov	sl, r4
 800f64c:	fa09 f303 	lsl.w	r3, r9, r3
 800f650:	4313      	orrs	r3, r2
 800f652:	9304      	str	r3, [sp, #16]
 800f654:	e7d2      	b.n	800f5fc <_svfiprintf_r+0xa0>
 800f656:	9b03      	ldr	r3, [sp, #12]
 800f658:	1d19      	adds	r1, r3, #4
 800f65a:	681b      	ldr	r3, [r3, #0]
 800f65c:	2b00      	cmp	r3, #0
 800f65e:	9103      	str	r1, [sp, #12]
 800f660:	bfbb      	ittet	lt
 800f662:	425b      	neglt	r3, r3
 800f664:	f042 0202 	orrlt.w	r2, r2, #2
 800f668:	9307      	strge	r3, [sp, #28]
 800f66a:	9307      	strlt	r3, [sp, #28]
 800f66c:	bfb8      	it	lt
 800f66e:	9204      	strlt	r2, [sp, #16]
 800f670:	7823      	ldrb	r3, [r4, #0]
 800f672:	2b2e      	cmp	r3, #46	@ 0x2e
 800f674:	d10a      	bne.n	800f68c <_svfiprintf_r+0x130>
 800f676:	7863      	ldrb	r3, [r4, #1]
 800f678:	2b2a      	cmp	r3, #42	@ 0x2a
 800f67a:	d132      	bne.n	800f6e2 <_svfiprintf_r+0x186>
 800f67c:	9b03      	ldr	r3, [sp, #12]
 800f67e:	3402      	adds	r4, #2
 800f680:	1d1a      	adds	r2, r3, #4
 800f682:	681b      	ldr	r3, [r3, #0]
 800f684:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800f688:	9203      	str	r2, [sp, #12]
 800f68a:	9305      	str	r3, [sp, #20]
 800f68c:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 800f744 <_svfiprintf_r+0x1e8>
 800f690:	2203      	movs	r2, #3
 800f692:	7821      	ldrb	r1, [r4, #0]
 800f694:	4650      	mov	r0, sl
 800f696:	f7ff f897 	bl	800e7c8 <memchr>
 800f69a:	b138      	cbz	r0, 800f6ac <_svfiprintf_r+0x150>
 800f69c:	eba0 000a 	sub.w	r0, r0, sl
 800f6a0:	2240      	movs	r2, #64	@ 0x40
 800f6a2:	9b04      	ldr	r3, [sp, #16]
 800f6a4:	3401      	adds	r4, #1
 800f6a6:	4082      	lsls	r2, r0
 800f6a8:	4313      	orrs	r3, r2
 800f6aa:	9304      	str	r3, [sp, #16]
 800f6ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f6b0:	2206      	movs	r2, #6
 800f6b2:	4825      	ldr	r0, [pc, #148]	@ (800f748 <_svfiprintf_r+0x1ec>)
 800f6b4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800f6b8:	f7ff f886 	bl	800e7c8 <memchr>
 800f6bc:	2800      	cmp	r0, #0
 800f6be:	d036      	beq.n	800f72e <_svfiprintf_r+0x1d2>
 800f6c0:	4b22      	ldr	r3, [pc, #136]	@ (800f74c <_svfiprintf_r+0x1f0>)
 800f6c2:	bb1b      	cbnz	r3, 800f70c <_svfiprintf_r+0x1b0>
 800f6c4:	9b03      	ldr	r3, [sp, #12]
 800f6c6:	3307      	adds	r3, #7
 800f6c8:	f023 0307 	bic.w	r3, r3, #7
 800f6cc:	3308      	adds	r3, #8
 800f6ce:	9303      	str	r3, [sp, #12]
 800f6d0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f6d2:	4433      	add	r3, r6
 800f6d4:	9309      	str	r3, [sp, #36]	@ 0x24
 800f6d6:	e76a      	b.n	800f5ae <_svfiprintf_r+0x52>
 800f6d8:	fb0c 3202 	mla	r2, ip, r2, r3
 800f6dc:	460c      	mov	r4, r1
 800f6de:	2001      	movs	r0, #1
 800f6e0:	e7a8      	b.n	800f634 <_svfiprintf_r+0xd8>
 800f6e2:	2300      	movs	r3, #0
 800f6e4:	3401      	adds	r4, #1
 800f6e6:	f04f 0c0a 	mov.w	ip, #10
 800f6ea:	4619      	mov	r1, r3
 800f6ec:	9305      	str	r3, [sp, #20]
 800f6ee:	4620      	mov	r0, r4
 800f6f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f6f4:	3a30      	subs	r2, #48	@ 0x30
 800f6f6:	2a09      	cmp	r2, #9
 800f6f8:	d903      	bls.n	800f702 <_svfiprintf_r+0x1a6>
 800f6fa:	2b00      	cmp	r3, #0
 800f6fc:	d0c6      	beq.n	800f68c <_svfiprintf_r+0x130>
 800f6fe:	9105      	str	r1, [sp, #20]
 800f700:	e7c4      	b.n	800f68c <_svfiprintf_r+0x130>
 800f702:	fb0c 2101 	mla	r1, ip, r1, r2
 800f706:	4604      	mov	r4, r0
 800f708:	2301      	movs	r3, #1
 800f70a:	e7f0      	b.n	800f6ee <_svfiprintf_r+0x192>
 800f70c:	ab03      	add	r3, sp, #12
 800f70e:	462a      	mov	r2, r5
 800f710:	a904      	add	r1, sp, #16
 800f712:	4638      	mov	r0, r7
 800f714:	9300      	str	r3, [sp, #0]
 800f716:	4b0e      	ldr	r3, [pc, #56]	@ (800f750 <_svfiprintf_r+0x1f4>)
 800f718:	f7fe faf8 	bl	800dd0c <_printf_float>
 800f71c:	1c42      	adds	r2, r0, #1
 800f71e:	4606      	mov	r6, r0
 800f720:	d1d6      	bne.n	800f6d0 <_svfiprintf_r+0x174>
 800f722:	89ab      	ldrh	r3, [r5, #12]
 800f724:	065b      	lsls	r3, r3, #25
 800f726:	f53f af2d 	bmi.w	800f584 <_svfiprintf_r+0x28>
 800f72a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f72c:	e72c      	b.n	800f588 <_svfiprintf_r+0x2c>
 800f72e:	ab03      	add	r3, sp, #12
 800f730:	462a      	mov	r2, r5
 800f732:	a904      	add	r1, sp, #16
 800f734:	4638      	mov	r0, r7
 800f736:	9300      	str	r3, [sp, #0]
 800f738:	4b05      	ldr	r3, [pc, #20]	@ (800f750 <_svfiprintf_r+0x1f4>)
 800f73a:	f7fe fd85 	bl	800e248 <_printf_i>
 800f73e:	e7ed      	b.n	800f71c <_svfiprintf_r+0x1c0>
 800f740:	08011c89 	.word	0x08011c89
 800f744:	08011c8f 	.word	0x08011c8f
 800f748:	08011c93 	.word	0x08011c93
 800f74c:	0800dd0d 	.word	0x0800dd0d
 800f750:	0800f4a5 	.word	0x0800f4a5

0800f754 <__sfputc_r>:
 800f754:	6893      	ldr	r3, [r2, #8]
 800f756:	3b01      	subs	r3, #1
 800f758:	2b00      	cmp	r3, #0
 800f75a:	b410      	push	{r4}
 800f75c:	6093      	str	r3, [r2, #8]
 800f75e:	da07      	bge.n	800f770 <__sfputc_r+0x1c>
 800f760:	6994      	ldr	r4, [r2, #24]
 800f762:	42a3      	cmp	r3, r4
 800f764:	db01      	blt.n	800f76a <__sfputc_r+0x16>
 800f766:	290a      	cmp	r1, #10
 800f768:	d102      	bne.n	800f770 <__sfputc_r+0x1c>
 800f76a:	bc10      	pop	{r4}
 800f76c:	f000 be81 	b.w	8010472 <__swbuf_r>
 800f770:	6813      	ldr	r3, [r2, #0]
 800f772:	1c58      	adds	r0, r3, #1
 800f774:	6010      	str	r0, [r2, #0]
 800f776:	4608      	mov	r0, r1
 800f778:	7019      	strb	r1, [r3, #0]
 800f77a:	bc10      	pop	{r4}
 800f77c:	4770      	bx	lr

0800f77e <__sfputs_r>:
 800f77e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f780:	4606      	mov	r6, r0
 800f782:	460f      	mov	r7, r1
 800f784:	4614      	mov	r4, r2
 800f786:	18d5      	adds	r5, r2, r3
 800f788:	42ac      	cmp	r4, r5
 800f78a:	d101      	bne.n	800f790 <__sfputs_r+0x12>
 800f78c:	2000      	movs	r0, #0
 800f78e:	e007      	b.n	800f7a0 <__sfputs_r+0x22>
 800f790:	463a      	mov	r2, r7
 800f792:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f796:	4630      	mov	r0, r6
 800f798:	f7ff ffdc 	bl	800f754 <__sfputc_r>
 800f79c:	1c43      	adds	r3, r0, #1
 800f79e:	d1f3      	bne.n	800f788 <__sfputs_r+0xa>
 800f7a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800f7a4 <_vfiprintf_r>:
 800f7a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f7a8:	460d      	mov	r5, r1
 800f7aa:	b09d      	sub	sp, #116	@ 0x74
 800f7ac:	4614      	mov	r4, r2
 800f7ae:	4698      	mov	r8, r3
 800f7b0:	4606      	mov	r6, r0
 800f7b2:	b118      	cbz	r0, 800f7bc <_vfiprintf_r+0x18>
 800f7b4:	6a03      	ldr	r3, [r0, #32]
 800f7b6:	b90b      	cbnz	r3, 800f7bc <_vfiprintf_r+0x18>
 800f7b8:	f7fe ff26 	bl	800e608 <__sinit>
 800f7bc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f7be:	07d9      	lsls	r1, r3, #31
 800f7c0:	d405      	bmi.n	800f7ce <_vfiprintf_r+0x2a>
 800f7c2:	89ab      	ldrh	r3, [r5, #12]
 800f7c4:	059a      	lsls	r2, r3, #22
 800f7c6:	d402      	bmi.n	800f7ce <_vfiprintf_r+0x2a>
 800f7c8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f7ca:	f7fe fff6 	bl	800e7ba <__retarget_lock_acquire_recursive>
 800f7ce:	89ab      	ldrh	r3, [r5, #12]
 800f7d0:	071b      	lsls	r3, r3, #28
 800f7d2:	d501      	bpl.n	800f7d8 <_vfiprintf_r+0x34>
 800f7d4:	692b      	ldr	r3, [r5, #16]
 800f7d6:	b99b      	cbnz	r3, 800f800 <_vfiprintf_r+0x5c>
 800f7d8:	4629      	mov	r1, r5
 800f7da:	4630      	mov	r0, r6
 800f7dc:	f000 fe88 	bl	80104f0 <__swsetup_r>
 800f7e0:	b170      	cbz	r0, 800f800 <_vfiprintf_r+0x5c>
 800f7e2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f7e4:	07dc      	lsls	r4, r3, #31
 800f7e6:	d504      	bpl.n	800f7f2 <_vfiprintf_r+0x4e>
 800f7e8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800f7ec:	b01d      	add	sp, #116	@ 0x74
 800f7ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f7f2:	89ab      	ldrh	r3, [r5, #12]
 800f7f4:	0598      	lsls	r0, r3, #22
 800f7f6:	d4f7      	bmi.n	800f7e8 <_vfiprintf_r+0x44>
 800f7f8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f7fa:	f7fe ffdf 	bl	800e7bc <__retarget_lock_release_recursive>
 800f7fe:	e7f3      	b.n	800f7e8 <_vfiprintf_r+0x44>
 800f800:	2300      	movs	r3, #0
 800f802:	f8cd 800c 	str.w	r8, [sp, #12]
 800f806:	f04f 0901 	mov.w	r9, #1
 800f80a:	f8df 81b4 	ldr.w	r8, [pc, #436]	@ 800f9c0 <_vfiprintf_r+0x21c>
 800f80e:	9309      	str	r3, [sp, #36]	@ 0x24
 800f810:	2320      	movs	r3, #32
 800f812:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800f816:	2330      	movs	r3, #48	@ 0x30
 800f818:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800f81c:	4623      	mov	r3, r4
 800f81e:	469a      	mov	sl, r3
 800f820:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f824:	b10a      	cbz	r2, 800f82a <_vfiprintf_r+0x86>
 800f826:	2a25      	cmp	r2, #37	@ 0x25
 800f828:	d1f9      	bne.n	800f81e <_vfiprintf_r+0x7a>
 800f82a:	ebba 0b04 	subs.w	fp, sl, r4
 800f82e:	d00b      	beq.n	800f848 <_vfiprintf_r+0xa4>
 800f830:	465b      	mov	r3, fp
 800f832:	4622      	mov	r2, r4
 800f834:	4629      	mov	r1, r5
 800f836:	4630      	mov	r0, r6
 800f838:	f7ff ffa1 	bl	800f77e <__sfputs_r>
 800f83c:	3001      	adds	r0, #1
 800f83e:	f000 80a7 	beq.w	800f990 <_vfiprintf_r+0x1ec>
 800f842:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f844:	445a      	add	r2, fp
 800f846:	9209      	str	r2, [sp, #36]	@ 0x24
 800f848:	f89a 3000 	ldrb.w	r3, [sl]
 800f84c:	2b00      	cmp	r3, #0
 800f84e:	f000 809f 	beq.w	800f990 <_vfiprintf_r+0x1ec>
 800f852:	2300      	movs	r3, #0
 800f854:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800f858:	f10a 0a01 	add.w	sl, sl, #1
 800f85c:	9304      	str	r3, [sp, #16]
 800f85e:	9307      	str	r3, [sp, #28]
 800f860:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800f864:	931a      	str	r3, [sp, #104]	@ 0x68
 800f866:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f86a:	4654      	mov	r4, sl
 800f86c:	2205      	movs	r2, #5
 800f86e:	4854      	ldr	r0, [pc, #336]	@ (800f9c0 <_vfiprintf_r+0x21c>)
 800f870:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f874:	f7fe ffa8 	bl	800e7c8 <memchr>
 800f878:	9a04      	ldr	r2, [sp, #16]
 800f87a:	b9d8      	cbnz	r0, 800f8b4 <_vfiprintf_r+0x110>
 800f87c:	06d1      	lsls	r1, r2, #27
 800f87e:	bf44      	itt	mi
 800f880:	2320      	movmi	r3, #32
 800f882:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f886:	0713      	lsls	r3, r2, #28
 800f888:	bf44      	itt	mi
 800f88a:	232b      	movmi	r3, #43	@ 0x2b
 800f88c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f890:	f89a 3000 	ldrb.w	r3, [sl]
 800f894:	2b2a      	cmp	r3, #42	@ 0x2a
 800f896:	d015      	beq.n	800f8c4 <_vfiprintf_r+0x120>
 800f898:	9a07      	ldr	r2, [sp, #28]
 800f89a:	4654      	mov	r4, sl
 800f89c:	2000      	movs	r0, #0
 800f89e:	f04f 0c0a 	mov.w	ip, #10
 800f8a2:	4621      	mov	r1, r4
 800f8a4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f8a8:	3b30      	subs	r3, #48	@ 0x30
 800f8aa:	2b09      	cmp	r3, #9
 800f8ac:	d94b      	bls.n	800f946 <_vfiprintf_r+0x1a2>
 800f8ae:	b1b0      	cbz	r0, 800f8de <_vfiprintf_r+0x13a>
 800f8b0:	9207      	str	r2, [sp, #28]
 800f8b2:	e014      	b.n	800f8de <_vfiprintf_r+0x13a>
 800f8b4:	eba0 0308 	sub.w	r3, r0, r8
 800f8b8:	46a2      	mov	sl, r4
 800f8ba:	fa09 f303 	lsl.w	r3, r9, r3
 800f8be:	4313      	orrs	r3, r2
 800f8c0:	9304      	str	r3, [sp, #16]
 800f8c2:	e7d2      	b.n	800f86a <_vfiprintf_r+0xc6>
 800f8c4:	9b03      	ldr	r3, [sp, #12]
 800f8c6:	1d19      	adds	r1, r3, #4
 800f8c8:	681b      	ldr	r3, [r3, #0]
 800f8ca:	2b00      	cmp	r3, #0
 800f8cc:	9103      	str	r1, [sp, #12]
 800f8ce:	bfbb      	ittet	lt
 800f8d0:	425b      	neglt	r3, r3
 800f8d2:	f042 0202 	orrlt.w	r2, r2, #2
 800f8d6:	9307      	strge	r3, [sp, #28]
 800f8d8:	9307      	strlt	r3, [sp, #28]
 800f8da:	bfb8      	it	lt
 800f8dc:	9204      	strlt	r2, [sp, #16]
 800f8de:	7823      	ldrb	r3, [r4, #0]
 800f8e0:	2b2e      	cmp	r3, #46	@ 0x2e
 800f8e2:	d10a      	bne.n	800f8fa <_vfiprintf_r+0x156>
 800f8e4:	7863      	ldrb	r3, [r4, #1]
 800f8e6:	2b2a      	cmp	r3, #42	@ 0x2a
 800f8e8:	d132      	bne.n	800f950 <_vfiprintf_r+0x1ac>
 800f8ea:	9b03      	ldr	r3, [sp, #12]
 800f8ec:	3402      	adds	r4, #2
 800f8ee:	1d1a      	adds	r2, r3, #4
 800f8f0:	681b      	ldr	r3, [r3, #0]
 800f8f2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800f8f6:	9203      	str	r2, [sp, #12]
 800f8f8:	9305      	str	r3, [sp, #20]
 800f8fa:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 800f9c4 <_vfiprintf_r+0x220>
 800f8fe:	2203      	movs	r2, #3
 800f900:	7821      	ldrb	r1, [r4, #0]
 800f902:	4650      	mov	r0, sl
 800f904:	f7fe ff60 	bl	800e7c8 <memchr>
 800f908:	b138      	cbz	r0, 800f91a <_vfiprintf_r+0x176>
 800f90a:	eba0 000a 	sub.w	r0, r0, sl
 800f90e:	2240      	movs	r2, #64	@ 0x40
 800f910:	9b04      	ldr	r3, [sp, #16]
 800f912:	3401      	adds	r4, #1
 800f914:	4082      	lsls	r2, r0
 800f916:	4313      	orrs	r3, r2
 800f918:	9304      	str	r3, [sp, #16]
 800f91a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f91e:	2206      	movs	r2, #6
 800f920:	4829      	ldr	r0, [pc, #164]	@ (800f9c8 <_vfiprintf_r+0x224>)
 800f922:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800f926:	f7fe ff4f 	bl	800e7c8 <memchr>
 800f92a:	2800      	cmp	r0, #0
 800f92c:	d03f      	beq.n	800f9ae <_vfiprintf_r+0x20a>
 800f92e:	4b27      	ldr	r3, [pc, #156]	@ (800f9cc <_vfiprintf_r+0x228>)
 800f930:	bb1b      	cbnz	r3, 800f97a <_vfiprintf_r+0x1d6>
 800f932:	9b03      	ldr	r3, [sp, #12]
 800f934:	3307      	adds	r3, #7
 800f936:	f023 0307 	bic.w	r3, r3, #7
 800f93a:	3308      	adds	r3, #8
 800f93c:	9303      	str	r3, [sp, #12]
 800f93e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f940:	443b      	add	r3, r7
 800f942:	9309      	str	r3, [sp, #36]	@ 0x24
 800f944:	e76a      	b.n	800f81c <_vfiprintf_r+0x78>
 800f946:	fb0c 3202 	mla	r2, ip, r2, r3
 800f94a:	460c      	mov	r4, r1
 800f94c:	2001      	movs	r0, #1
 800f94e:	e7a8      	b.n	800f8a2 <_vfiprintf_r+0xfe>
 800f950:	2300      	movs	r3, #0
 800f952:	3401      	adds	r4, #1
 800f954:	f04f 0c0a 	mov.w	ip, #10
 800f958:	4619      	mov	r1, r3
 800f95a:	9305      	str	r3, [sp, #20]
 800f95c:	4620      	mov	r0, r4
 800f95e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f962:	3a30      	subs	r2, #48	@ 0x30
 800f964:	2a09      	cmp	r2, #9
 800f966:	d903      	bls.n	800f970 <_vfiprintf_r+0x1cc>
 800f968:	2b00      	cmp	r3, #0
 800f96a:	d0c6      	beq.n	800f8fa <_vfiprintf_r+0x156>
 800f96c:	9105      	str	r1, [sp, #20]
 800f96e:	e7c4      	b.n	800f8fa <_vfiprintf_r+0x156>
 800f970:	fb0c 2101 	mla	r1, ip, r1, r2
 800f974:	4604      	mov	r4, r0
 800f976:	2301      	movs	r3, #1
 800f978:	e7f0      	b.n	800f95c <_vfiprintf_r+0x1b8>
 800f97a:	ab03      	add	r3, sp, #12
 800f97c:	462a      	mov	r2, r5
 800f97e:	a904      	add	r1, sp, #16
 800f980:	4630      	mov	r0, r6
 800f982:	9300      	str	r3, [sp, #0]
 800f984:	4b12      	ldr	r3, [pc, #72]	@ (800f9d0 <_vfiprintf_r+0x22c>)
 800f986:	f7fe f9c1 	bl	800dd0c <_printf_float>
 800f98a:	4607      	mov	r7, r0
 800f98c:	1c78      	adds	r0, r7, #1
 800f98e:	d1d6      	bne.n	800f93e <_vfiprintf_r+0x19a>
 800f990:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f992:	07d9      	lsls	r1, r3, #31
 800f994:	d405      	bmi.n	800f9a2 <_vfiprintf_r+0x1fe>
 800f996:	89ab      	ldrh	r3, [r5, #12]
 800f998:	059a      	lsls	r2, r3, #22
 800f99a:	d402      	bmi.n	800f9a2 <_vfiprintf_r+0x1fe>
 800f99c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f99e:	f7fe ff0d 	bl	800e7bc <__retarget_lock_release_recursive>
 800f9a2:	89ab      	ldrh	r3, [r5, #12]
 800f9a4:	065b      	lsls	r3, r3, #25
 800f9a6:	f53f af1f 	bmi.w	800f7e8 <_vfiprintf_r+0x44>
 800f9aa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f9ac:	e71e      	b.n	800f7ec <_vfiprintf_r+0x48>
 800f9ae:	ab03      	add	r3, sp, #12
 800f9b0:	462a      	mov	r2, r5
 800f9b2:	a904      	add	r1, sp, #16
 800f9b4:	4630      	mov	r0, r6
 800f9b6:	9300      	str	r3, [sp, #0]
 800f9b8:	4b05      	ldr	r3, [pc, #20]	@ (800f9d0 <_vfiprintf_r+0x22c>)
 800f9ba:	f7fe fc45 	bl	800e248 <_printf_i>
 800f9be:	e7e4      	b.n	800f98a <_vfiprintf_r+0x1e6>
 800f9c0:	08011c89 	.word	0x08011c89
 800f9c4:	08011c8f 	.word	0x08011c8f
 800f9c8:	08011c93 	.word	0x08011c93
 800f9cc:	0800dd0d 	.word	0x0800dd0d
 800f9d0:	0800f77f 	.word	0x0800f77f

0800f9d4 <malloc>:
 800f9d4:	4b02      	ldr	r3, [pc, #8]	@ (800f9e0 <malloc+0xc>)
 800f9d6:	4601      	mov	r1, r0
 800f9d8:	6818      	ldr	r0, [r3, #0]
 800f9da:	f000 b825 	b.w	800fa28 <_malloc_r>
 800f9de:	bf00      	nop
 800f9e0:	20000040 	.word	0x20000040

0800f9e4 <sbrk_aligned>:
 800f9e4:	b570      	push	{r4, r5, r6, lr}
 800f9e6:	4e0f      	ldr	r6, [pc, #60]	@ (800fa24 <sbrk_aligned+0x40>)
 800f9e8:	460c      	mov	r4, r1
 800f9ea:	4605      	mov	r5, r0
 800f9ec:	6831      	ldr	r1, [r6, #0]
 800f9ee:	b911      	cbnz	r1, 800f9f6 <sbrk_aligned+0x12>
 800f9f0:	f000 fe84 	bl	80106fc <_sbrk_r>
 800f9f4:	6030      	str	r0, [r6, #0]
 800f9f6:	4621      	mov	r1, r4
 800f9f8:	4628      	mov	r0, r5
 800f9fa:	f000 fe7f 	bl	80106fc <_sbrk_r>
 800f9fe:	1c43      	adds	r3, r0, #1
 800fa00:	d103      	bne.n	800fa0a <sbrk_aligned+0x26>
 800fa02:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800fa06:	4620      	mov	r0, r4
 800fa08:	bd70      	pop	{r4, r5, r6, pc}
 800fa0a:	1cc4      	adds	r4, r0, #3
 800fa0c:	f024 0403 	bic.w	r4, r4, #3
 800fa10:	42a0      	cmp	r0, r4
 800fa12:	d0f8      	beq.n	800fa06 <sbrk_aligned+0x22>
 800fa14:	1a21      	subs	r1, r4, r0
 800fa16:	4628      	mov	r0, r5
 800fa18:	f000 fe70 	bl	80106fc <_sbrk_r>
 800fa1c:	3001      	adds	r0, #1
 800fa1e:	d1f2      	bne.n	800fa06 <sbrk_aligned+0x22>
 800fa20:	e7ef      	b.n	800fa02 <sbrk_aligned+0x1e>
 800fa22:	bf00      	nop
 800fa24:	20000730 	.word	0x20000730

0800fa28 <_malloc_r>:
 800fa28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fa2c:	1ccd      	adds	r5, r1, #3
 800fa2e:	4606      	mov	r6, r0
 800fa30:	f025 0503 	bic.w	r5, r5, #3
 800fa34:	3508      	adds	r5, #8
 800fa36:	2d0c      	cmp	r5, #12
 800fa38:	bf38      	it	cc
 800fa3a:	250c      	movcc	r5, #12
 800fa3c:	2d00      	cmp	r5, #0
 800fa3e:	db01      	blt.n	800fa44 <_malloc_r+0x1c>
 800fa40:	42a9      	cmp	r1, r5
 800fa42:	d904      	bls.n	800fa4e <_malloc_r+0x26>
 800fa44:	230c      	movs	r3, #12
 800fa46:	6033      	str	r3, [r6, #0]
 800fa48:	2000      	movs	r0, #0
 800fa4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fa4e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800fb24 <_malloc_r+0xfc>
 800fa52:	f000 f911 	bl	800fc78 <__malloc_lock>
 800fa56:	f8d8 3000 	ldr.w	r3, [r8]
 800fa5a:	461c      	mov	r4, r3
 800fa5c:	bb44      	cbnz	r4, 800fab0 <_malloc_r+0x88>
 800fa5e:	4629      	mov	r1, r5
 800fa60:	4630      	mov	r0, r6
 800fa62:	f7ff ffbf 	bl	800f9e4 <sbrk_aligned>
 800fa66:	1c43      	adds	r3, r0, #1
 800fa68:	4604      	mov	r4, r0
 800fa6a:	d158      	bne.n	800fb1e <_malloc_r+0xf6>
 800fa6c:	f8d8 4000 	ldr.w	r4, [r8]
 800fa70:	4627      	mov	r7, r4
 800fa72:	2f00      	cmp	r7, #0
 800fa74:	d143      	bne.n	800fafe <_malloc_r+0xd6>
 800fa76:	2c00      	cmp	r4, #0
 800fa78:	d04b      	beq.n	800fb12 <_malloc_r+0xea>
 800fa7a:	6823      	ldr	r3, [r4, #0]
 800fa7c:	4639      	mov	r1, r7
 800fa7e:	4630      	mov	r0, r6
 800fa80:	eb04 0903 	add.w	r9, r4, r3
 800fa84:	f000 fe3a 	bl	80106fc <_sbrk_r>
 800fa88:	4581      	cmp	r9, r0
 800fa8a:	d142      	bne.n	800fb12 <_malloc_r+0xea>
 800fa8c:	6821      	ldr	r1, [r4, #0]
 800fa8e:	4630      	mov	r0, r6
 800fa90:	1a6d      	subs	r5, r5, r1
 800fa92:	4629      	mov	r1, r5
 800fa94:	f7ff ffa6 	bl	800f9e4 <sbrk_aligned>
 800fa98:	3001      	adds	r0, #1
 800fa9a:	d03a      	beq.n	800fb12 <_malloc_r+0xea>
 800fa9c:	6823      	ldr	r3, [r4, #0]
 800fa9e:	442b      	add	r3, r5
 800faa0:	6023      	str	r3, [r4, #0]
 800faa2:	f8d8 3000 	ldr.w	r3, [r8]
 800faa6:	685a      	ldr	r2, [r3, #4]
 800faa8:	bb62      	cbnz	r2, 800fb04 <_malloc_r+0xdc>
 800faaa:	f8c8 7000 	str.w	r7, [r8]
 800faae:	e00f      	b.n	800fad0 <_malloc_r+0xa8>
 800fab0:	6822      	ldr	r2, [r4, #0]
 800fab2:	1b52      	subs	r2, r2, r5
 800fab4:	d420      	bmi.n	800faf8 <_malloc_r+0xd0>
 800fab6:	2a0b      	cmp	r2, #11
 800fab8:	d917      	bls.n	800faea <_malloc_r+0xc2>
 800faba:	1961      	adds	r1, r4, r5
 800fabc:	42a3      	cmp	r3, r4
 800fabe:	6025      	str	r5, [r4, #0]
 800fac0:	bf18      	it	ne
 800fac2:	6059      	strne	r1, [r3, #4]
 800fac4:	6863      	ldr	r3, [r4, #4]
 800fac6:	bf08      	it	eq
 800fac8:	f8c8 1000 	streq.w	r1, [r8]
 800facc:	5162      	str	r2, [r4, r5]
 800face:	604b      	str	r3, [r1, #4]
 800fad0:	4630      	mov	r0, r6
 800fad2:	f000 f8d7 	bl	800fc84 <__malloc_unlock>
 800fad6:	f104 000b 	add.w	r0, r4, #11
 800fada:	1d23      	adds	r3, r4, #4
 800fadc:	f020 0007 	bic.w	r0, r0, #7
 800fae0:	1ac2      	subs	r2, r0, r3
 800fae2:	bf1c      	itt	ne
 800fae4:	1a1b      	subne	r3, r3, r0
 800fae6:	50a3      	strne	r3, [r4, r2]
 800fae8:	e7af      	b.n	800fa4a <_malloc_r+0x22>
 800faea:	6862      	ldr	r2, [r4, #4]
 800faec:	42a3      	cmp	r3, r4
 800faee:	bf0c      	ite	eq
 800faf0:	f8c8 2000 	streq.w	r2, [r8]
 800faf4:	605a      	strne	r2, [r3, #4]
 800faf6:	e7eb      	b.n	800fad0 <_malloc_r+0xa8>
 800faf8:	4623      	mov	r3, r4
 800fafa:	6864      	ldr	r4, [r4, #4]
 800fafc:	e7ae      	b.n	800fa5c <_malloc_r+0x34>
 800fafe:	463c      	mov	r4, r7
 800fb00:	687f      	ldr	r7, [r7, #4]
 800fb02:	e7b6      	b.n	800fa72 <_malloc_r+0x4a>
 800fb04:	461a      	mov	r2, r3
 800fb06:	685b      	ldr	r3, [r3, #4]
 800fb08:	42a3      	cmp	r3, r4
 800fb0a:	d1fb      	bne.n	800fb04 <_malloc_r+0xdc>
 800fb0c:	2300      	movs	r3, #0
 800fb0e:	6053      	str	r3, [r2, #4]
 800fb10:	e7de      	b.n	800fad0 <_malloc_r+0xa8>
 800fb12:	230c      	movs	r3, #12
 800fb14:	4630      	mov	r0, r6
 800fb16:	6033      	str	r3, [r6, #0]
 800fb18:	f000 f8b4 	bl	800fc84 <__malloc_unlock>
 800fb1c:	e794      	b.n	800fa48 <_malloc_r+0x20>
 800fb1e:	6005      	str	r5, [r0, #0]
 800fb20:	e7d6      	b.n	800fad0 <_malloc_r+0xa8>
 800fb22:	bf00      	nop
 800fb24:	20000734 	.word	0x20000734

0800fb28 <__sflush_r>:
 800fb28:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800fb2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fb2e:	0716      	lsls	r6, r2, #28
 800fb30:	4605      	mov	r5, r0
 800fb32:	460c      	mov	r4, r1
 800fb34:	d454      	bmi.n	800fbe0 <__sflush_r+0xb8>
 800fb36:	684b      	ldr	r3, [r1, #4]
 800fb38:	2b00      	cmp	r3, #0
 800fb3a:	dc02      	bgt.n	800fb42 <__sflush_r+0x1a>
 800fb3c:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800fb3e:	2b00      	cmp	r3, #0
 800fb40:	dd48      	ble.n	800fbd4 <__sflush_r+0xac>
 800fb42:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800fb44:	2e00      	cmp	r6, #0
 800fb46:	d045      	beq.n	800fbd4 <__sflush_r+0xac>
 800fb48:	2300      	movs	r3, #0
 800fb4a:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800fb4e:	682f      	ldr	r7, [r5, #0]
 800fb50:	6a21      	ldr	r1, [r4, #32]
 800fb52:	602b      	str	r3, [r5, #0]
 800fb54:	d030      	beq.n	800fbb8 <__sflush_r+0x90>
 800fb56:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800fb58:	89a3      	ldrh	r3, [r4, #12]
 800fb5a:	0759      	lsls	r1, r3, #29
 800fb5c:	d505      	bpl.n	800fb6a <__sflush_r+0x42>
 800fb5e:	6863      	ldr	r3, [r4, #4]
 800fb60:	1ad2      	subs	r2, r2, r3
 800fb62:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800fb64:	b10b      	cbz	r3, 800fb6a <__sflush_r+0x42>
 800fb66:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800fb68:	1ad2      	subs	r2, r2, r3
 800fb6a:	2300      	movs	r3, #0
 800fb6c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800fb6e:	6a21      	ldr	r1, [r4, #32]
 800fb70:	4628      	mov	r0, r5
 800fb72:	47b0      	blx	r6
 800fb74:	1c43      	adds	r3, r0, #1
 800fb76:	89a3      	ldrh	r3, [r4, #12]
 800fb78:	d106      	bne.n	800fb88 <__sflush_r+0x60>
 800fb7a:	6829      	ldr	r1, [r5, #0]
 800fb7c:	291d      	cmp	r1, #29
 800fb7e:	d82b      	bhi.n	800fbd8 <__sflush_r+0xb0>
 800fb80:	4a28      	ldr	r2, [pc, #160]	@ (800fc24 <__sflush_r+0xfc>)
 800fb82:	40ca      	lsrs	r2, r1
 800fb84:	07d6      	lsls	r6, r2, #31
 800fb86:	d527      	bpl.n	800fbd8 <__sflush_r+0xb0>
 800fb88:	2200      	movs	r2, #0
 800fb8a:	04d9      	lsls	r1, r3, #19
 800fb8c:	6062      	str	r2, [r4, #4]
 800fb8e:	6922      	ldr	r2, [r4, #16]
 800fb90:	6022      	str	r2, [r4, #0]
 800fb92:	d504      	bpl.n	800fb9e <__sflush_r+0x76>
 800fb94:	1c42      	adds	r2, r0, #1
 800fb96:	d101      	bne.n	800fb9c <__sflush_r+0x74>
 800fb98:	682b      	ldr	r3, [r5, #0]
 800fb9a:	b903      	cbnz	r3, 800fb9e <__sflush_r+0x76>
 800fb9c:	6560      	str	r0, [r4, #84]	@ 0x54
 800fb9e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800fba0:	602f      	str	r7, [r5, #0]
 800fba2:	b1b9      	cbz	r1, 800fbd4 <__sflush_r+0xac>
 800fba4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800fba8:	4299      	cmp	r1, r3
 800fbaa:	d002      	beq.n	800fbb2 <__sflush_r+0x8a>
 800fbac:	4628      	mov	r0, r5
 800fbae:	f000 fe29 	bl	8010804 <_free_r>
 800fbb2:	2300      	movs	r3, #0
 800fbb4:	6363      	str	r3, [r4, #52]	@ 0x34
 800fbb6:	e00d      	b.n	800fbd4 <__sflush_r+0xac>
 800fbb8:	2301      	movs	r3, #1
 800fbba:	4628      	mov	r0, r5
 800fbbc:	47b0      	blx	r6
 800fbbe:	4602      	mov	r2, r0
 800fbc0:	1c50      	adds	r0, r2, #1
 800fbc2:	d1c9      	bne.n	800fb58 <__sflush_r+0x30>
 800fbc4:	682b      	ldr	r3, [r5, #0]
 800fbc6:	2b00      	cmp	r3, #0
 800fbc8:	d0c6      	beq.n	800fb58 <__sflush_r+0x30>
 800fbca:	2b1d      	cmp	r3, #29
 800fbcc:	d001      	beq.n	800fbd2 <__sflush_r+0xaa>
 800fbce:	2b16      	cmp	r3, #22
 800fbd0:	d11c      	bne.n	800fc0c <__sflush_r+0xe4>
 800fbd2:	602f      	str	r7, [r5, #0]
 800fbd4:	2000      	movs	r0, #0
 800fbd6:	e020      	b.n	800fc1a <__sflush_r+0xf2>
 800fbd8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800fbdc:	b21b      	sxth	r3, r3
 800fbde:	e019      	b.n	800fc14 <__sflush_r+0xec>
 800fbe0:	690f      	ldr	r7, [r1, #16]
 800fbe2:	2f00      	cmp	r7, #0
 800fbe4:	d0f6      	beq.n	800fbd4 <__sflush_r+0xac>
 800fbe6:	0793      	lsls	r3, r2, #30
 800fbe8:	680e      	ldr	r6, [r1, #0]
 800fbea:	600f      	str	r7, [r1, #0]
 800fbec:	bf0c      	ite	eq
 800fbee:	694b      	ldreq	r3, [r1, #20]
 800fbf0:	2300      	movne	r3, #0
 800fbf2:	1bf6      	subs	r6, r6, r7
 800fbf4:	608b      	str	r3, [r1, #8]
 800fbf6:	2e00      	cmp	r6, #0
 800fbf8:	ddec      	ble.n	800fbd4 <__sflush_r+0xac>
 800fbfa:	4633      	mov	r3, r6
 800fbfc:	463a      	mov	r2, r7
 800fbfe:	6a21      	ldr	r1, [r4, #32]
 800fc00:	4628      	mov	r0, r5
 800fc02:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 800fc06:	47e0      	blx	ip
 800fc08:	2800      	cmp	r0, #0
 800fc0a:	dc07      	bgt.n	800fc1c <__sflush_r+0xf4>
 800fc0c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fc10:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800fc14:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800fc18:	81a3      	strh	r3, [r4, #12]
 800fc1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fc1c:	4407      	add	r7, r0
 800fc1e:	1a36      	subs	r6, r6, r0
 800fc20:	e7e9      	b.n	800fbf6 <__sflush_r+0xce>
 800fc22:	bf00      	nop
 800fc24:	20400001 	.word	0x20400001

0800fc28 <_fflush_r>:
 800fc28:	b538      	push	{r3, r4, r5, lr}
 800fc2a:	690b      	ldr	r3, [r1, #16]
 800fc2c:	4605      	mov	r5, r0
 800fc2e:	460c      	mov	r4, r1
 800fc30:	b913      	cbnz	r3, 800fc38 <_fflush_r+0x10>
 800fc32:	2500      	movs	r5, #0
 800fc34:	4628      	mov	r0, r5
 800fc36:	bd38      	pop	{r3, r4, r5, pc}
 800fc38:	b118      	cbz	r0, 800fc42 <_fflush_r+0x1a>
 800fc3a:	6a03      	ldr	r3, [r0, #32]
 800fc3c:	b90b      	cbnz	r3, 800fc42 <_fflush_r+0x1a>
 800fc3e:	f7fe fce3 	bl	800e608 <__sinit>
 800fc42:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fc46:	2b00      	cmp	r3, #0
 800fc48:	d0f3      	beq.n	800fc32 <_fflush_r+0xa>
 800fc4a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800fc4c:	07d0      	lsls	r0, r2, #31
 800fc4e:	d404      	bmi.n	800fc5a <_fflush_r+0x32>
 800fc50:	0599      	lsls	r1, r3, #22
 800fc52:	d402      	bmi.n	800fc5a <_fflush_r+0x32>
 800fc54:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800fc56:	f7fe fdb0 	bl	800e7ba <__retarget_lock_acquire_recursive>
 800fc5a:	4628      	mov	r0, r5
 800fc5c:	4621      	mov	r1, r4
 800fc5e:	f7ff ff63 	bl	800fb28 <__sflush_r>
 800fc62:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800fc64:	4605      	mov	r5, r0
 800fc66:	07da      	lsls	r2, r3, #31
 800fc68:	d4e4      	bmi.n	800fc34 <_fflush_r+0xc>
 800fc6a:	89a3      	ldrh	r3, [r4, #12]
 800fc6c:	059b      	lsls	r3, r3, #22
 800fc6e:	d4e1      	bmi.n	800fc34 <_fflush_r+0xc>
 800fc70:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800fc72:	f7fe fda3 	bl	800e7bc <__retarget_lock_release_recursive>
 800fc76:	e7dd      	b.n	800fc34 <_fflush_r+0xc>

0800fc78 <__malloc_lock>:
 800fc78:	4801      	ldr	r0, [pc, #4]	@ (800fc80 <__malloc_lock+0x8>)
 800fc7a:	f7fe bd9e 	b.w	800e7ba <__retarget_lock_acquire_recursive>
 800fc7e:	bf00      	nop
 800fc80:	2000072c 	.word	0x2000072c

0800fc84 <__malloc_unlock>:
 800fc84:	4801      	ldr	r0, [pc, #4]	@ (800fc8c <__malloc_unlock+0x8>)
 800fc86:	f7fe bd99 	b.w	800e7bc <__retarget_lock_release_recursive>
 800fc8a:	bf00      	nop
 800fc8c:	2000072c 	.word	0x2000072c

0800fc90 <_Balloc>:
 800fc90:	b570      	push	{r4, r5, r6, lr}
 800fc92:	69c6      	ldr	r6, [r0, #28]
 800fc94:	4604      	mov	r4, r0
 800fc96:	460d      	mov	r5, r1
 800fc98:	b976      	cbnz	r6, 800fcb8 <_Balloc+0x28>
 800fc9a:	2010      	movs	r0, #16
 800fc9c:	f7ff fe9a 	bl	800f9d4 <malloc>
 800fca0:	4602      	mov	r2, r0
 800fca2:	61e0      	str	r0, [r4, #28]
 800fca4:	b920      	cbnz	r0, 800fcb0 <_Balloc+0x20>
 800fca6:	4b18      	ldr	r3, [pc, #96]	@ (800fd08 <_Balloc+0x78>)
 800fca8:	216b      	movs	r1, #107	@ 0x6b
 800fcaa:	4818      	ldr	r0, [pc, #96]	@ (800fd0c <_Balloc+0x7c>)
 800fcac:	f000 fd78 	bl	80107a0 <__assert_func>
 800fcb0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800fcb4:	6006      	str	r6, [r0, #0]
 800fcb6:	60c6      	str	r6, [r0, #12]
 800fcb8:	69e6      	ldr	r6, [r4, #28]
 800fcba:	68f3      	ldr	r3, [r6, #12]
 800fcbc:	b183      	cbz	r3, 800fce0 <_Balloc+0x50>
 800fcbe:	69e3      	ldr	r3, [r4, #28]
 800fcc0:	68db      	ldr	r3, [r3, #12]
 800fcc2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800fcc6:	b9b8      	cbnz	r0, 800fcf8 <_Balloc+0x68>
 800fcc8:	2101      	movs	r1, #1
 800fcca:	4620      	mov	r0, r4
 800fccc:	fa01 f605 	lsl.w	r6, r1, r5
 800fcd0:	1d72      	adds	r2, r6, #5
 800fcd2:	0092      	lsls	r2, r2, #2
 800fcd4:	f000 fd82 	bl	80107dc <_calloc_r>
 800fcd8:	b160      	cbz	r0, 800fcf4 <_Balloc+0x64>
 800fcda:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800fcde:	e00e      	b.n	800fcfe <_Balloc+0x6e>
 800fce0:	2221      	movs	r2, #33	@ 0x21
 800fce2:	2104      	movs	r1, #4
 800fce4:	4620      	mov	r0, r4
 800fce6:	f000 fd79 	bl	80107dc <_calloc_r>
 800fcea:	69e3      	ldr	r3, [r4, #28]
 800fcec:	60f0      	str	r0, [r6, #12]
 800fcee:	68db      	ldr	r3, [r3, #12]
 800fcf0:	2b00      	cmp	r3, #0
 800fcf2:	d1e4      	bne.n	800fcbe <_Balloc+0x2e>
 800fcf4:	2000      	movs	r0, #0
 800fcf6:	bd70      	pop	{r4, r5, r6, pc}
 800fcf8:	6802      	ldr	r2, [r0, #0]
 800fcfa:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800fcfe:	2300      	movs	r3, #0
 800fd00:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800fd04:	e7f7      	b.n	800fcf6 <_Balloc+0x66>
 800fd06:	bf00      	nop
 800fd08:	08011c09 	.word	0x08011c09
 800fd0c:	08011c9a 	.word	0x08011c9a

0800fd10 <_Bfree>:
 800fd10:	b570      	push	{r4, r5, r6, lr}
 800fd12:	69c6      	ldr	r6, [r0, #28]
 800fd14:	4605      	mov	r5, r0
 800fd16:	460c      	mov	r4, r1
 800fd18:	b976      	cbnz	r6, 800fd38 <_Bfree+0x28>
 800fd1a:	2010      	movs	r0, #16
 800fd1c:	f7ff fe5a 	bl	800f9d4 <malloc>
 800fd20:	4602      	mov	r2, r0
 800fd22:	61e8      	str	r0, [r5, #28]
 800fd24:	b920      	cbnz	r0, 800fd30 <_Bfree+0x20>
 800fd26:	4b09      	ldr	r3, [pc, #36]	@ (800fd4c <_Bfree+0x3c>)
 800fd28:	218f      	movs	r1, #143	@ 0x8f
 800fd2a:	4809      	ldr	r0, [pc, #36]	@ (800fd50 <_Bfree+0x40>)
 800fd2c:	f000 fd38 	bl	80107a0 <__assert_func>
 800fd30:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800fd34:	6006      	str	r6, [r0, #0]
 800fd36:	60c6      	str	r6, [r0, #12]
 800fd38:	b13c      	cbz	r4, 800fd4a <_Bfree+0x3a>
 800fd3a:	69eb      	ldr	r3, [r5, #28]
 800fd3c:	6862      	ldr	r2, [r4, #4]
 800fd3e:	68db      	ldr	r3, [r3, #12]
 800fd40:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800fd44:	6021      	str	r1, [r4, #0]
 800fd46:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800fd4a:	bd70      	pop	{r4, r5, r6, pc}
 800fd4c:	08011c09 	.word	0x08011c09
 800fd50:	08011c9a 	.word	0x08011c9a

0800fd54 <__multadd>:
 800fd54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fd58:	f101 0c14 	add.w	ip, r1, #20
 800fd5c:	4607      	mov	r7, r0
 800fd5e:	460c      	mov	r4, r1
 800fd60:	461e      	mov	r6, r3
 800fd62:	690d      	ldr	r5, [r1, #16]
 800fd64:	2000      	movs	r0, #0
 800fd66:	f8dc 3000 	ldr.w	r3, [ip]
 800fd6a:	3001      	adds	r0, #1
 800fd6c:	b299      	uxth	r1, r3
 800fd6e:	4285      	cmp	r5, r0
 800fd70:	fb02 6101 	mla	r1, r2, r1, r6
 800fd74:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800fd78:	ea4f 4311 	mov.w	r3, r1, lsr #16
 800fd7c:	b289      	uxth	r1, r1
 800fd7e:	fb02 3306 	mla	r3, r2, r6, r3
 800fd82:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800fd86:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800fd8a:	f84c 1b04 	str.w	r1, [ip], #4
 800fd8e:	dcea      	bgt.n	800fd66 <__multadd+0x12>
 800fd90:	b30e      	cbz	r6, 800fdd6 <__multadd+0x82>
 800fd92:	68a3      	ldr	r3, [r4, #8]
 800fd94:	42ab      	cmp	r3, r5
 800fd96:	dc19      	bgt.n	800fdcc <__multadd+0x78>
 800fd98:	6861      	ldr	r1, [r4, #4]
 800fd9a:	4638      	mov	r0, r7
 800fd9c:	3101      	adds	r1, #1
 800fd9e:	f7ff ff77 	bl	800fc90 <_Balloc>
 800fda2:	4680      	mov	r8, r0
 800fda4:	b928      	cbnz	r0, 800fdb2 <__multadd+0x5e>
 800fda6:	4602      	mov	r2, r0
 800fda8:	4b0c      	ldr	r3, [pc, #48]	@ (800fddc <__multadd+0x88>)
 800fdaa:	21ba      	movs	r1, #186	@ 0xba
 800fdac:	480c      	ldr	r0, [pc, #48]	@ (800fde0 <__multadd+0x8c>)
 800fdae:	f000 fcf7 	bl	80107a0 <__assert_func>
 800fdb2:	6922      	ldr	r2, [r4, #16]
 800fdb4:	f104 010c 	add.w	r1, r4, #12
 800fdb8:	300c      	adds	r0, #12
 800fdba:	3202      	adds	r2, #2
 800fdbc:	0092      	lsls	r2, r2, #2
 800fdbe:	f000 fce1 	bl	8010784 <memcpy>
 800fdc2:	4621      	mov	r1, r4
 800fdc4:	4644      	mov	r4, r8
 800fdc6:	4638      	mov	r0, r7
 800fdc8:	f7ff ffa2 	bl	800fd10 <_Bfree>
 800fdcc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800fdd0:	3501      	adds	r5, #1
 800fdd2:	615e      	str	r6, [r3, #20]
 800fdd4:	6125      	str	r5, [r4, #16]
 800fdd6:	4620      	mov	r0, r4
 800fdd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fddc:	08011c78 	.word	0x08011c78
 800fde0:	08011c9a 	.word	0x08011c9a

0800fde4 <__hi0bits>:
 800fde4:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800fde8:	4603      	mov	r3, r0
 800fdea:	bf36      	itet	cc
 800fdec:	0403      	lslcc	r3, r0, #16
 800fdee:	2000      	movcs	r0, #0
 800fdf0:	2010      	movcc	r0, #16
 800fdf2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800fdf6:	bf3c      	itt	cc
 800fdf8:	021b      	lslcc	r3, r3, #8
 800fdfa:	3008      	addcc	r0, #8
 800fdfc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800fe00:	bf3c      	itt	cc
 800fe02:	011b      	lslcc	r3, r3, #4
 800fe04:	3004      	addcc	r0, #4
 800fe06:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800fe0a:	bf3c      	itt	cc
 800fe0c:	009b      	lslcc	r3, r3, #2
 800fe0e:	3002      	addcc	r0, #2
 800fe10:	2b00      	cmp	r3, #0
 800fe12:	db05      	blt.n	800fe20 <__hi0bits+0x3c>
 800fe14:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800fe18:	f100 0001 	add.w	r0, r0, #1
 800fe1c:	bf08      	it	eq
 800fe1e:	2020      	moveq	r0, #32
 800fe20:	4770      	bx	lr

0800fe22 <__lo0bits>:
 800fe22:	6803      	ldr	r3, [r0, #0]
 800fe24:	4602      	mov	r2, r0
 800fe26:	f013 0007 	ands.w	r0, r3, #7
 800fe2a:	d00b      	beq.n	800fe44 <__lo0bits+0x22>
 800fe2c:	07d9      	lsls	r1, r3, #31
 800fe2e:	d421      	bmi.n	800fe74 <__lo0bits+0x52>
 800fe30:	0798      	lsls	r0, r3, #30
 800fe32:	bf47      	ittee	mi
 800fe34:	085b      	lsrmi	r3, r3, #1
 800fe36:	2001      	movmi	r0, #1
 800fe38:	089b      	lsrpl	r3, r3, #2
 800fe3a:	2002      	movpl	r0, #2
 800fe3c:	bf4c      	ite	mi
 800fe3e:	6013      	strmi	r3, [r2, #0]
 800fe40:	6013      	strpl	r3, [r2, #0]
 800fe42:	4770      	bx	lr
 800fe44:	b299      	uxth	r1, r3
 800fe46:	b909      	cbnz	r1, 800fe4c <__lo0bits+0x2a>
 800fe48:	0c1b      	lsrs	r3, r3, #16
 800fe4a:	2010      	movs	r0, #16
 800fe4c:	b2d9      	uxtb	r1, r3
 800fe4e:	b909      	cbnz	r1, 800fe54 <__lo0bits+0x32>
 800fe50:	3008      	adds	r0, #8
 800fe52:	0a1b      	lsrs	r3, r3, #8
 800fe54:	0719      	lsls	r1, r3, #28
 800fe56:	bf04      	itt	eq
 800fe58:	091b      	lsreq	r3, r3, #4
 800fe5a:	3004      	addeq	r0, #4
 800fe5c:	0799      	lsls	r1, r3, #30
 800fe5e:	bf04      	itt	eq
 800fe60:	089b      	lsreq	r3, r3, #2
 800fe62:	3002      	addeq	r0, #2
 800fe64:	07d9      	lsls	r1, r3, #31
 800fe66:	d403      	bmi.n	800fe70 <__lo0bits+0x4e>
 800fe68:	085b      	lsrs	r3, r3, #1
 800fe6a:	f100 0001 	add.w	r0, r0, #1
 800fe6e:	d003      	beq.n	800fe78 <__lo0bits+0x56>
 800fe70:	6013      	str	r3, [r2, #0]
 800fe72:	4770      	bx	lr
 800fe74:	2000      	movs	r0, #0
 800fe76:	4770      	bx	lr
 800fe78:	2020      	movs	r0, #32
 800fe7a:	4770      	bx	lr

0800fe7c <__i2b>:
 800fe7c:	b510      	push	{r4, lr}
 800fe7e:	460c      	mov	r4, r1
 800fe80:	2101      	movs	r1, #1
 800fe82:	f7ff ff05 	bl	800fc90 <_Balloc>
 800fe86:	4602      	mov	r2, r0
 800fe88:	b928      	cbnz	r0, 800fe96 <__i2b+0x1a>
 800fe8a:	4b05      	ldr	r3, [pc, #20]	@ (800fea0 <__i2b+0x24>)
 800fe8c:	f240 1145 	movw	r1, #325	@ 0x145
 800fe90:	4804      	ldr	r0, [pc, #16]	@ (800fea4 <__i2b+0x28>)
 800fe92:	f000 fc85 	bl	80107a0 <__assert_func>
 800fe96:	2301      	movs	r3, #1
 800fe98:	6144      	str	r4, [r0, #20]
 800fe9a:	6103      	str	r3, [r0, #16]
 800fe9c:	bd10      	pop	{r4, pc}
 800fe9e:	bf00      	nop
 800fea0:	08011c78 	.word	0x08011c78
 800fea4:	08011c9a 	.word	0x08011c9a

0800fea8 <__multiply>:
 800fea8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800feac:	4617      	mov	r7, r2
 800feae:	690a      	ldr	r2, [r1, #16]
 800feb0:	4689      	mov	r9, r1
 800feb2:	b085      	sub	sp, #20
 800feb4:	693b      	ldr	r3, [r7, #16]
 800feb6:	429a      	cmp	r2, r3
 800feb8:	bfa2      	ittt	ge
 800feba:	463b      	movge	r3, r7
 800febc:	460f      	movge	r7, r1
 800febe:	4699      	movge	r9, r3
 800fec0:	693d      	ldr	r5, [r7, #16]
 800fec2:	68bb      	ldr	r3, [r7, #8]
 800fec4:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800fec8:	6879      	ldr	r1, [r7, #4]
 800feca:	eb05 060a 	add.w	r6, r5, sl
 800fece:	42b3      	cmp	r3, r6
 800fed0:	bfb8      	it	lt
 800fed2:	3101      	addlt	r1, #1
 800fed4:	f7ff fedc 	bl	800fc90 <_Balloc>
 800fed8:	b930      	cbnz	r0, 800fee8 <__multiply+0x40>
 800feda:	4602      	mov	r2, r0
 800fedc:	4b42      	ldr	r3, [pc, #264]	@ (800ffe8 <__multiply+0x140>)
 800fede:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800fee2:	4842      	ldr	r0, [pc, #264]	@ (800ffec <__multiply+0x144>)
 800fee4:	f000 fc5c 	bl	80107a0 <__assert_func>
 800fee8:	f100 0414 	add.w	r4, r0, #20
 800feec:	2200      	movs	r2, #0
 800feee:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800fef2:	4623      	mov	r3, r4
 800fef4:	4573      	cmp	r3, lr
 800fef6:	d320      	bcc.n	800ff3a <__multiply+0x92>
 800fef8:	f107 0814 	add.w	r8, r7, #20
 800fefc:	f109 0114 	add.w	r1, r9, #20
 800ff00:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800ff04:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800ff08:	9302      	str	r3, [sp, #8]
 800ff0a:	1beb      	subs	r3, r5, r7
 800ff0c:	3715      	adds	r7, #21
 800ff0e:	3b15      	subs	r3, #21
 800ff10:	f023 0303 	bic.w	r3, r3, #3
 800ff14:	3304      	adds	r3, #4
 800ff16:	42bd      	cmp	r5, r7
 800ff18:	bf38      	it	cc
 800ff1a:	2304      	movcc	r3, #4
 800ff1c:	9301      	str	r3, [sp, #4]
 800ff1e:	9b02      	ldr	r3, [sp, #8]
 800ff20:	9103      	str	r1, [sp, #12]
 800ff22:	428b      	cmp	r3, r1
 800ff24:	d80c      	bhi.n	800ff40 <__multiply+0x98>
 800ff26:	2e00      	cmp	r6, #0
 800ff28:	dd03      	ble.n	800ff32 <__multiply+0x8a>
 800ff2a:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800ff2e:	2b00      	cmp	r3, #0
 800ff30:	d057      	beq.n	800ffe2 <__multiply+0x13a>
 800ff32:	6106      	str	r6, [r0, #16]
 800ff34:	b005      	add	sp, #20
 800ff36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ff3a:	f843 2b04 	str.w	r2, [r3], #4
 800ff3e:	e7d9      	b.n	800fef4 <__multiply+0x4c>
 800ff40:	f8b1 a000 	ldrh.w	sl, [r1]
 800ff44:	f1ba 0f00 	cmp.w	sl, #0
 800ff48:	d021      	beq.n	800ff8e <__multiply+0xe6>
 800ff4a:	46c4      	mov	ip, r8
 800ff4c:	46a1      	mov	r9, r4
 800ff4e:	2700      	movs	r7, #0
 800ff50:	f85c 2b04 	ldr.w	r2, [ip], #4
 800ff54:	f8d9 3000 	ldr.w	r3, [r9]
 800ff58:	fa1f fb82 	uxth.w	fp, r2
 800ff5c:	4565      	cmp	r5, ip
 800ff5e:	b29b      	uxth	r3, r3
 800ff60:	ea4f 4212 	mov.w	r2, r2, lsr #16
 800ff64:	fb0a 330b 	mla	r3, sl, fp, r3
 800ff68:	443b      	add	r3, r7
 800ff6a:	f8d9 7000 	ldr.w	r7, [r9]
 800ff6e:	ea4f 4717 	mov.w	r7, r7, lsr #16
 800ff72:	fb0a 7202 	mla	r2, sl, r2, r7
 800ff76:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800ff7a:	b29b      	uxth	r3, r3
 800ff7c:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800ff80:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ff84:	f849 3b04 	str.w	r3, [r9], #4
 800ff88:	d8e2      	bhi.n	800ff50 <__multiply+0xa8>
 800ff8a:	9b01      	ldr	r3, [sp, #4]
 800ff8c:	50e7      	str	r7, [r4, r3]
 800ff8e:	9b03      	ldr	r3, [sp, #12]
 800ff90:	3104      	adds	r1, #4
 800ff92:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800ff96:	f1b9 0f00 	cmp.w	r9, #0
 800ff9a:	d020      	beq.n	800ffde <__multiply+0x136>
 800ff9c:	6823      	ldr	r3, [r4, #0]
 800ff9e:	4647      	mov	r7, r8
 800ffa0:	46a4      	mov	ip, r4
 800ffa2:	f04f 0a00 	mov.w	sl, #0
 800ffa6:	f8b7 b000 	ldrh.w	fp, [r7]
 800ffaa:	b29b      	uxth	r3, r3
 800ffac:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800ffb0:	fb09 220b 	mla	r2, r9, fp, r2
 800ffb4:	4452      	add	r2, sl
 800ffb6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ffba:	f84c 3b04 	str.w	r3, [ip], #4
 800ffbe:	f857 3b04 	ldr.w	r3, [r7], #4
 800ffc2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ffc6:	f8bc 3000 	ldrh.w	r3, [ip]
 800ffca:	42bd      	cmp	r5, r7
 800ffcc:	fb09 330a 	mla	r3, r9, sl, r3
 800ffd0:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800ffd4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ffd8:	d8e5      	bhi.n	800ffa6 <__multiply+0xfe>
 800ffda:	9a01      	ldr	r2, [sp, #4]
 800ffdc:	50a3      	str	r3, [r4, r2]
 800ffde:	3404      	adds	r4, #4
 800ffe0:	e79d      	b.n	800ff1e <__multiply+0x76>
 800ffe2:	3e01      	subs	r6, #1
 800ffe4:	e79f      	b.n	800ff26 <__multiply+0x7e>
 800ffe6:	bf00      	nop
 800ffe8:	08011c78 	.word	0x08011c78
 800ffec:	08011c9a 	.word	0x08011c9a

0800fff0 <__pow5mult>:
 800fff0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fff4:	4615      	mov	r5, r2
 800fff6:	f012 0203 	ands.w	r2, r2, #3
 800fffa:	4607      	mov	r7, r0
 800fffc:	460e      	mov	r6, r1
 800fffe:	d007      	beq.n	8010010 <__pow5mult+0x20>
 8010000:	3a01      	subs	r2, #1
 8010002:	4c25      	ldr	r4, [pc, #148]	@ (8010098 <__pow5mult+0xa8>)
 8010004:	2300      	movs	r3, #0
 8010006:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801000a:	f7ff fea3 	bl	800fd54 <__multadd>
 801000e:	4606      	mov	r6, r0
 8010010:	10ad      	asrs	r5, r5, #2
 8010012:	d03d      	beq.n	8010090 <__pow5mult+0xa0>
 8010014:	69fc      	ldr	r4, [r7, #28]
 8010016:	b97c      	cbnz	r4, 8010038 <__pow5mult+0x48>
 8010018:	2010      	movs	r0, #16
 801001a:	f7ff fcdb 	bl	800f9d4 <malloc>
 801001e:	4602      	mov	r2, r0
 8010020:	61f8      	str	r0, [r7, #28]
 8010022:	b928      	cbnz	r0, 8010030 <__pow5mult+0x40>
 8010024:	4b1d      	ldr	r3, [pc, #116]	@ (801009c <__pow5mult+0xac>)
 8010026:	f240 11b3 	movw	r1, #435	@ 0x1b3
 801002a:	481d      	ldr	r0, [pc, #116]	@ (80100a0 <__pow5mult+0xb0>)
 801002c:	f000 fbb8 	bl	80107a0 <__assert_func>
 8010030:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8010034:	6004      	str	r4, [r0, #0]
 8010036:	60c4      	str	r4, [r0, #12]
 8010038:	f8d7 801c 	ldr.w	r8, [r7, #28]
 801003c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8010040:	b94c      	cbnz	r4, 8010056 <__pow5mult+0x66>
 8010042:	f240 2171 	movw	r1, #625	@ 0x271
 8010046:	4638      	mov	r0, r7
 8010048:	f7ff ff18 	bl	800fe7c <__i2b>
 801004c:	2300      	movs	r3, #0
 801004e:	4604      	mov	r4, r0
 8010050:	f8c8 0008 	str.w	r0, [r8, #8]
 8010054:	6003      	str	r3, [r0, #0]
 8010056:	f04f 0900 	mov.w	r9, #0
 801005a:	07eb      	lsls	r3, r5, #31
 801005c:	d50a      	bpl.n	8010074 <__pow5mult+0x84>
 801005e:	4631      	mov	r1, r6
 8010060:	4622      	mov	r2, r4
 8010062:	4638      	mov	r0, r7
 8010064:	f7ff ff20 	bl	800fea8 <__multiply>
 8010068:	4680      	mov	r8, r0
 801006a:	4631      	mov	r1, r6
 801006c:	4638      	mov	r0, r7
 801006e:	4646      	mov	r6, r8
 8010070:	f7ff fe4e 	bl	800fd10 <_Bfree>
 8010074:	106d      	asrs	r5, r5, #1
 8010076:	d00b      	beq.n	8010090 <__pow5mult+0xa0>
 8010078:	6820      	ldr	r0, [r4, #0]
 801007a:	b938      	cbnz	r0, 801008c <__pow5mult+0x9c>
 801007c:	4622      	mov	r2, r4
 801007e:	4621      	mov	r1, r4
 8010080:	4638      	mov	r0, r7
 8010082:	f7ff ff11 	bl	800fea8 <__multiply>
 8010086:	6020      	str	r0, [r4, #0]
 8010088:	f8c0 9000 	str.w	r9, [r0]
 801008c:	4604      	mov	r4, r0
 801008e:	e7e4      	b.n	801005a <__pow5mult+0x6a>
 8010090:	4630      	mov	r0, r6
 8010092:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010096:	bf00      	nop
 8010098:	08011d3c 	.word	0x08011d3c
 801009c:	08011c09 	.word	0x08011c09
 80100a0:	08011c9a 	.word	0x08011c9a

080100a4 <__lshift>:
 80100a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80100a8:	460c      	mov	r4, r1
 80100aa:	4607      	mov	r7, r0
 80100ac:	4691      	mov	r9, r2
 80100ae:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80100b2:	6923      	ldr	r3, [r4, #16]
 80100b4:	6849      	ldr	r1, [r1, #4]
 80100b6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80100ba:	68a3      	ldr	r3, [r4, #8]
 80100bc:	f108 0601 	add.w	r6, r8, #1
 80100c0:	42b3      	cmp	r3, r6
 80100c2:	db0b      	blt.n	80100dc <__lshift+0x38>
 80100c4:	4638      	mov	r0, r7
 80100c6:	f7ff fde3 	bl	800fc90 <_Balloc>
 80100ca:	4605      	mov	r5, r0
 80100cc:	b948      	cbnz	r0, 80100e2 <__lshift+0x3e>
 80100ce:	4602      	mov	r2, r0
 80100d0:	4b28      	ldr	r3, [pc, #160]	@ (8010174 <__lshift+0xd0>)
 80100d2:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80100d6:	4828      	ldr	r0, [pc, #160]	@ (8010178 <__lshift+0xd4>)
 80100d8:	f000 fb62 	bl	80107a0 <__assert_func>
 80100dc:	3101      	adds	r1, #1
 80100de:	005b      	lsls	r3, r3, #1
 80100e0:	e7ee      	b.n	80100c0 <__lshift+0x1c>
 80100e2:	2300      	movs	r3, #0
 80100e4:	f100 0114 	add.w	r1, r0, #20
 80100e8:	f100 0210 	add.w	r2, r0, #16
 80100ec:	4618      	mov	r0, r3
 80100ee:	4553      	cmp	r3, sl
 80100f0:	db33      	blt.n	801015a <__lshift+0xb6>
 80100f2:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80100f6:	f104 0314 	add.w	r3, r4, #20
 80100fa:	6920      	ldr	r0, [r4, #16]
 80100fc:	f019 091f 	ands.w	r9, r9, #31
 8010100:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8010104:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8010108:	d02b      	beq.n	8010162 <__lshift+0xbe>
 801010a:	f1c9 0e20 	rsb	lr, r9, #32
 801010e:	468a      	mov	sl, r1
 8010110:	2200      	movs	r2, #0
 8010112:	6818      	ldr	r0, [r3, #0]
 8010114:	fa00 f009 	lsl.w	r0, r0, r9
 8010118:	4310      	orrs	r0, r2
 801011a:	f84a 0b04 	str.w	r0, [sl], #4
 801011e:	f853 2b04 	ldr.w	r2, [r3], #4
 8010122:	459c      	cmp	ip, r3
 8010124:	fa22 f20e 	lsr.w	r2, r2, lr
 8010128:	d8f3      	bhi.n	8010112 <__lshift+0x6e>
 801012a:	ebac 0304 	sub.w	r3, ip, r4
 801012e:	f104 0015 	add.w	r0, r4, #21
 8010132:	3b15      	subs	r3, #21
 8010134:	f023 0303 	bic.w	r3, r3, #3
 8010138:	3304      	adds	r3, #4
 801013a:	4560      	cmp	r0, ip
 801013c:	bf88      	it	hi
 801013e:	2304      	movhi	r3, #4
 8010140:	50ca      	str	r2, [r1, r3]
 8010142:	b10a      	cbz	r2, 8010148 <__lshift+0xa4>
 8010144:	f108 0602 	add.w	r6, r8, #2
 8010148:	3e01      	subs	r6, #1
 801014a:	4638      	mov	r0, r7
 801014c:	4621      	mov	r1, r4
 801014e:	612e      	str	r6, [r5, #16]
 8010150:	f7ff fdde 	bl	800fd10 <_Bfree>
 8010154:	4628      	mov	r0, r5
 8010156:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801015a:	3301      	adds	r3, #1
 801015c:	f842 0f04 	str.w	r0, [r2, #4]!
 8010160:	e7c5      	b.n	80100ee <__lshift+0x4a>
 8010162:	3904      	subs	r1, #4
 8010164:	f853 2b04 	ldr.w	r2, [r3], #4
 8010168:	459c      	cmp	ip, r3
 801016a:	f841 2f04 	str.w	r2, [r1, #4]!
 801016e:	d8f9      	bhi.n	8010164 <__lshift+0xc0>
 8010170:	e7ea      	b.n	8010148 <__lshift+0xa4>
 8010172:	bf00      	nop
 8010174:	08011c78 	.word	0x08011c78
 8010178:	08011c9a 	.word	0x08011c9a

0801017c <__mcmp>:
 801017c:	4603      	mov	r3, r0
 801017e:	690a      	ldr	r2, [r1, #16]
 8010180:	6900      	ldr	r0, [r0, #16]
 8010182:	1a80      	subs	r0, r0, r2
 8010184:	b530      	push	{r4, r5, lr}
 8010186:	d10e      	bne.n	80101a6 <__mcmp+0x2a>
 8010188:	3314      	adds	r3, #20
 801018a:	3114      	adds	r1, #20
 801018c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8010190:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8010194:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8010198:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 801019c:	4295      	cmp	r5, r2
 801019e:	d003      	beq.n	80101a8 <__mcmp+0x2c>
 80101a0:	d205      	bcs.n	80101ae <__mcmp+0x32>
 80101a2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80101a6:	bd30      	pop	{r4, r5, pc}
 80101a8:	42a3      	cmp	r3, r4
 80101aa:	d3f3      	bcc.n	8010194 <__mcmp+0x18>
 80101ac:	e7fb      	b.n	80101a6 <__mcmp+0x2a>
 80101ae:	2001      	movs	r0, #1
 80101b0:	e7f9      	b.n	80101a6 <__mcmp+0x2a>
	...

080101b4 <__mdiff>:
 80101b4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80101b8:	4689      	mov	r9, r1
 80101ba:	4606      	mov	r6, r0
 80101bc:	4611      	mov	r1, r2
 80101be:	4614      	mov	r4, r2
 80101c0:	4648      	mov	r0, r9
 80101c2:	f7ff ffdb 	bl	801017c <__mcmp>
 80101c6:	1e05      	subs	r5, r0, #0
 80101c8:	d112      	bne.n	80101f0 <__mdiff+0x3c>
 80101ca:	4629      	mov	r1, r5
 80101cc:	4630      	mov	r0, r6
 80101ce:	f7ff fd5f 	bl	800fc90 <_Balloc>
 80101d2:	4602      	mov	r2, r0
 80101d4:	b928      	cbnz	r0, 80101e2 <__mdiff+0x2e>
 80101d6:	4b40      	ldr	r3, [pc, #256]	@ (80102d8 <__mdiff+0x124>)
 80101d8:	f240 2137 	movw	r1, #567	@ 0x237
 80101dc:	483f      	ldr	r0, [pc, #252]	@ (80102dc <__mdiff+0x128>)
 80101de:	f000 fadf 	bl	80107a0 <__assert_func>
 80101e2:	2301      	movs	r3, #1
 80101e4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80101e8:	4610      	mov	r0, r2
 80101ea:	b003      	add	sp, #12
 80101ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80101f0:	bfbc      	itt	lt
 80101f2:	464b      	movlt	r3, r9
 80101f4:	46a1      	movlt	r9, r4
 80101f6:	4630      	mov	r0, r6
 80101f8:	bfb8      	it	lt
 80101fa:	2501      	movlt	r5, #1
 80101fc:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8010200:	bfb4      	ite	lt
 8010202:	461c      	movlt	r4, r3
 8010204:	2500      	movge	r5, #0
 8010206:	f7ff fd43 	bl	800fc90 <_Balloc>
 801020a:	4602      	mov	r2, r0
 801020c:	b918      	cbnz	r0, 8010216 <__mdiff+0x62>
 801020e:	4b32      	ldr	r3, [pc, #200]	@ (80102d8 <__mdiff+0x124>)
 8010210:	f240 2145 	movw	r1, #581	@ 0x245
 8010214:	e7e2      	b.n	80101dc <__mdiff+0x28>
 8010216:	f8d9 7010 	ldr.w	r7, [r9, #16]
 801021a:	f104 0e14 	add.w	lr, r4, #20
 801021e:	6926      	ldr	r6, [r4, #16]
 8010220:	f100 0b14 	add.w	fp, r0, #20
 8010224:	60c5      	str	r5, [r0, #12]
 8010226:	f109 0514 	add.w	r5, r9, #20
 801022a:	f109 0310 	add.w	r3, r9, #16
 801022e:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8010232:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8010236:	46d9      	mov	r9, fp
 8010238:	f04f 0c00 	mov.w	ip, #0
 801023c:	9301      	str	r3, [sp, #4]
 801023e:	9b01      	ldr	r3, [sp, #4]
 8010240:	f85e 0b04 	ldr.w	r0, [lr], #4
 8010244:	f853 af04 	ldr.w	sl, [r3, #4]!
 8010248:	b281      	uxth	r1, r0
 801024a:	4576      	cmp	r6, lr
 801024c:	9301      	str	r3, [sp, #4]
 801024e:	fa1f f38a 	uxth.w	r3, sl
 8010252:	ea4f 4010 	mov.w	r0, r0, lsr #16
 8010256:	eba3 0301 	sub.w	r3, r3, r1
 801025a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 801025e:	4463      	add	r3, ip
 8010260:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8010264:	b29b      	uxth	r3, r3
 8010266:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801026a:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 801026e:	f849 3b04 	str.w	r3, [r9], #4
 8010272:	d8e4      	bhi.n	801023e <__mdiff+0x8a>
 8010274:	1b33      	subs	r3, r6, r4
 8010276:	3415      	adds	r4, #21
 8010278:	3b15      	subs	r3, #21
 801027a:	f023 0303 	bic.w	r3, r3, #3
 801027e:	3304      	adds	r3, #4
 8010280:	42a6      	cmp	r6, r4
 8010282:	bf38      	it	cc
 8010284:	2304      	movcc	r3, #4
 8010286:	441d      	add	r5, r3
 8010288:	445b      	add	r3, fp
 801028a:	462c      	mov	r4, r5
 801028c:	461e      	mov	r6, r3
 801028e:	4544      	cmp	r4, r8
 8010290:	d30e      	bcc.n	80102b0 <__mdiff+0xfc>
 8010292:	f108 0103 	add.w	r1, r8, #3
 8010296:	1b49      	subs	r1, r1, r5
 8010298:	3d03      	subs	r5, #3
 801029a:	f021 0103 	bic.w	r1, r1, #3
 801029e:	45a8      	cmp	r8, r5
 80102a0:	bf38      	it	cc
 80102a2:	2100      	movcc	r1, #0
 80102a4:	440b      	add	r3, r1
 80102a6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80102aa:	b199      	cbz	r1, 80102d4 <__mdiff+0x120>
 80102ac:	6117      	str	r7, [r2, #16]
 80102ae:	e79b      	b.n	80101e8 <__mdiff+0x34>
 80102b0:	f854 1b04 	ldr.w	r1, [r4], #4
 80102b4:	46e6      	mov	lr, ip
 80102b6:	fa1f fc81 	uxth.w	ip, r1
 80102ba:	0c08      	lsrs	r0, r1, #16
 80102bc:	4471      	add	r1, lr
 80102be:	44f4      	add	ip, lr
 80102c0:	b289      	uxth	r1, r1
 80102c2:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80102c6:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80102ca:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80102ce:	f846 1b04 	str.w	r1, [r6], #4
 80102d2:	e7dc      	b.n	801028e <__mdiff+0xda>
 80102d4:	3f01      	subs	r7, #1
 80102d6:	e7e6      	b.n	80102a6 <__mdiff+0xf2>
 80102d8:	08011c78 	.word	0x08011c78
 80102dc:	08011c9a 	.word	0x08011c9a

080102e0 <__d2b>:
 80102e0:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 80102e4:	2101      	movs	r1, #1
 80102e6:	4690      	mov	r8, r2
 80102e8:	4699      	mov	r9, r3
 80102ea:	9e08      	ldr	r6, [sp, #32]
 80102ec:	f7ff fcd0 	bl	800fc90 <_Balloc>
 80102f0:	4604      	mov	r4, r0
 80102f2:	b930      	cbnz	r0, 8010302 <__d2b+0x22>
 80102f4:	4602      	mov	r2, r0
 80102f6:	4b24      	ldr	r3, [pc, #144]	@ (8010388 <__d2b+0xa8>)
 80102f8:	f240 310f 	movw	r1, #783	@ 0x30f
 80102fc:	4823      	ldr	r0, [pc, #140]	@ (801038c <__d2b+0xac>)
 80102fe:	f000 fa4f 	bl	80107a0 <__assert_func>
 8010302:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8010306:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801030a:	b10d      	cbz	r5, 8010310 <__d2b+0x30>
 801030c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8010310:	9301      	str	r3, [sp, #4]
 8010312:	f1b8 0300 	subs.w	r3, r8, #0
 8010316:	d024      	beq.n	8010362 <__d2b+0x82>
 8010318:	4668      	mov	r0, sp
 801031a:	9300      	str	r3, [sp, #0]
 801031c:	f7ff fd81 	bl	800fe22 <__lo0bits>
 8010320:	e9dd 1200 	ldrd	r1, r2, [sp]
 8010324:	b1d8      	cbz	r0, 801035e <__d2b+0x7e>
 8010326:	f1c0 0320 	rsb	r3, r0, #32
 801032a:	fa02 f303 	lsl.w	r3, r2, r3
 801032e:	40c2      	lsrs	r2, r0
 8010330:	430b      	orrs	r3, r1
 8010332:	9201      	str	r2, [sp, #4]
 8010334:	6163      	str	r3, [r4, #20]
 8010336:	9b01      	ldr	r3, [sp, #4]
 8010338:	2b00      	cmp	r3, #0
 801033a:	61a3      	str	r3, [r4, #24]
 801033c:	bf0c      	ite	eq
 801033e:	2201      	moveq	r2, #1
 8010340:	2202      	movne	r2, #2
 8010342:	6122      	str	r2, [r4, #16]
 8010344:	b1ad      	cbz	r5, 8010372 <__d2b+0x92>
 8010346:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 801034a:	4405      	add	r5, r0
 801034c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8010350:	6035      	str	r5, [r6, #0]
 8010352:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010354:	6018      	str	r0, [r3, #0]
 8010356:	4620      	mov	r0, r4
 8010358:	b002      	add	sp, #8
 801035a:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 801035e:	6161      	str	r1, [r4, #20]
 8010360:	e7e9      	b.n	8010336 <__d2b+0x56>
 8010362:	a801      	add	r0, sp, #4
 8010364:	f7ff fd5d 	bl	800fe22 <__lo0bits>
 8010368:	9b01      	ldr	r3, [sp, #4]
 801036a:	3020      	adds	r0, #32
 801036c:	2201      	movs	r2, #1
 801036e:	6163      	str	r3, [r4, #20]
 8010370:	e7e7      	b.n	8010342 <__d2b+0x62>
 8010372:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8010376:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801037a:	6030      	str	r0, [r6, #0]
 801037c:	6918      	ldr	r0, [r3, #16]
 801037e:	f7ff fd31 	bl	800fde4 <__hi0bits>
 8010382:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8010386:	e7e4      	b.n	8010352 <__d2b+0x72>
 8010388:	08011c78 	.word	0x08011c78
 801038c:	08011c9a 	.word	0x08011c9a

08010390 <__sread>:
 8010390:	b510      	push	{r4, lr}
 8010392:	460c      	mov	r4, r1
 8010394:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010398:	f000 f99e 	bl	80106d8 <_read_r>
 801039c:	2800      	cmp	r0, #0
 801039e:	bfab      	itete	ge
 80103a0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80103a2:	89a3      	ldrhlt	r3, [r4, #12]
 80103a4:	181b      	addge	r3, r3, r0
 80103a6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80103aa:	bfac      	ite	ge
 80103ac:	6563      	strge	r3, [r4, #84]	@ 0x54
 80103ae:	81a3      	strhlt	r3, [r4, #12]
 80103b0:	bd10      	pop	{r4, pc}

080103b2 <__swrite>:
 80103b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80103b6:	461f      	mov	r7, r3
 80103b8:	898b      	ldrh	r3, [r1, #12]
 80103ba:	4605      	mov	r5, r0
 80103bc:	460c      	mov	r4, r1
 80103be:	05db      	lsls	r3, r3, #23
 80103c0:	4616      	mov	r6, r2
 80103c2:	d505      	bpl.n	80103d0 <__swrite+0x1e>
 80103c4:	2302      	movs	r3, #2
 80103c6:	2200      	movs	r2, #0
 80103c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80103cc:	f000 f972 	bl	80106b4 <_lseek_r>
 80103d0:	89a3      	ldrh	r3, [r4, #12]
 80103d2:	4632      	mov	r2, r6
 80103d4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80103d8:	4628      	mov	r0, r5
 80103da:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80103de:	81a3      	strh	r3, [r4, #12]
 80103e0:	463b      	mov	r3, r7
 80103e2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80103e6:	f000 b999 	b.w	801071c <_write_r>

080103ea <__sseek>:
 80103ea:	b510      	push	{r4, lr}
 80103ec:	460c      	mov	r4, r1
 80103ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80103f2:	f000 f95f 	bl	80106b4 <_lseek_r>
 80103f6:	1c43      	adds	r3, r0, #1
 80103f8:	89a3      	ldrh	r3, [r4, #12]
 80103fa:	bf15      	itete	ne
 80103fc:	6560      	strne	r0, [r4, #84]	@ 0x54
 80103fe:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8010402:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8010406:	81a3      	strheq	r3, [r4, #12]
 8010408:	bf18      	it	ne
 801040a:	81a3      	strhne	r3, [r4, #12]
 801040c:	bd10      	pop	{r4, pc}

0801040e <__sclose>:
 801040e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010412:	f000 b995 	b.w	8010740 <_close_r>

08010416 <_realloc_r>:
 8010416:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801041a:	4607      	mov	r7, r0
 801041c:	4614      	mov	r4, r2
 801041e:	460d      	mov	r5, r1
 8010420:	b921      	cbnz	r1, 801042c <_realloc_r+0x16>
 8010422:	4611      	mov	r1, r2
 8010424:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010428:	f7ff bafe 	b.w	800fa28 <_malloc_r>
 801042c:	b92a      	cbnz	r2, 801043a <_realloc_r+0x24>
 801042e:	4625      	mov	r5, r4
 8010430:	f000 f9e8 	bl	8010804 <_free_r>
 8010434:	4628      	mov	r0, r5
 8010436:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801043a:	f000 fa3f 	bl	80108bc <_malloc_usable_size_r>
 801043e:	4284      	cmp	r4, r0
 8010440:	4606      	mov	r6, r0
 8010442:	d802      	bhi.n	801044a <_realloc_r+0x34>
 8010444:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8010448:	d8f4      	bhi.n	8010434 <_realloc_r+0x1e>
 801044a:	4621      	mov	r1, r4
 801044c:	4638      	mov	r0, r7
 801044e:	f7ff faeb 	bl	800fa28 <_malloc_r>
 8010452:	4680      	mov	r8, r0
 8010454:	b908      	cbnz	r0, 801045a <_realloc_r+0x44>
 8010456:	4645      	mov	r5, r8
 8010458:	e7ec      	b.n	8010434 <_realloc_r+0x1e>
 801045a:	42b4      	cmp	r4, r6
 801045c:	4622      	mov	r2, r4
 801045e:	4629      	mov	r1, r5
 8010460:	bf28      	it	cs
 8010462:	4632      	movcs	r2, r6
 8010464:	f000 f98e 	bl	8010784 <memcpy>
 8010468:	4629      	mov	r1, r5
 801046a:	4638      	mov	r0, r7
 801046c:	f000 f9ca 	bl	8010804 <_free_r>
 8010470:	e7f1      	b.n	8010456 <_realloc_r+0x40>

08010472 <__swbuf_r>:
 8010472:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010474:	460e      	mov	r6, r1
 8010476:	4614      	mov	r4, r2
 8010478:	4605      	mov	r5, r0
 801047a:	b118      	cbz	r0, 8010484 <__swbuf_r+0x12>
 801047c:	6a03      	ldr	r3, [r0, #32]
 801047e:	b90b      	cbnz	r3, 8010484 <__swbuf_r+0x12>
 8010480:	f7fe f8c2 	bl	800e608 <__sinit>
 8010484:	69a3      	ldr	r3, [r4, #24]
 8010486:	60a3      	str	r3, [r4, #8]
 8010488:	89a3      	ldrh	r3, [r4, #12]
 801048a:	071a      	lsls	r2, r3, #28
 801048c:	d501      	bpl.n	8010492 <__swbuf_r+0x20>
 801048e:	6923      	ldr	r3, [r4, #16]
 8010490:	b943      	cbnz	r3, 80104a4 <__swbuf_r+0x32>
 8010492:	4621      	mov	r1, r4
 8010494:	4628      	mov	r0, r5
 8010496:	f000 f82b 	bl	80104f0 <__swsetup_r>
 801049a:	b118      	cbz	r0, 80104a4 <__swbuf_r+0x32>
 801049c:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 80104a0:	4638      	mov	r0, r7
 80104a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80104a4:	6823      	ldr	r3, [r4, #0]
 80104a6:	b2f6      	uxtb	r6, r6
 80104a8:	6922      	ldr	r2, [r4, #16]
 80104aa:	4637      	mov	r7, r6
 80104ac:	1a98      	subs	r0, r3, r2
 80104ae:	6963      	ldr	r3, [r4, #20]
 80104b0:	4283      	cmp	r3, r0
 80104b2:	dc05      	bgt.n	80104c0 <__swbuf_r+0x4e>
 80104b4:	4621      	mov	r1, r4
 80104b6:	4628      	mov	r0, r5
 80104b8:	f7ff fbb6 	bl	800fc28 <_fflush_r>
 80104bc:	2800      	cmp	r0, #0
 80104be:	d1ed      	bne.n	801049c <__swbuf_r+0x2a>
 80104c0:	68a3      	ldr	r3, [r4, #8]
 80104c2:	3b01      	subs	r3, #1
 80104c4:	60a3      	str	r3, [r4, #8]
 80104c6:	6823      	ldr	r3, [r4, #0]
 80104c8:	1c5a      	adds	r2, r3, #1
 80104ca:	6022      	str	r2, [r4, #0]
 80104cc:	701e      	strb	r6, [r3, #0]
 80104ce:	1c43      	adds	r3, r0, #1
 80104d0:	6962      	ldr	r2, [r4, #20]
 80104d2:	429a      	cmp	r2, r3
 80104d4:	d004      	beq.n	80104e0 <__swbuf_r+0x6e>
 80104d6:	89a3      	ldrh	r3, [r4, #12]
 80104d8:	07db      	lsls	r3, r3, #31
 80104da:	d5e1      	bpl.n	80104a0 <__swbuf_r+0x2e>
 80104dc:	2e0a      	cmp	r6, #10
 80104de:	d1df      	bne.n	80104a0 <__swbuf_r+0x2e>
 80104e0:	4621      	mov	r1, r4
 80104e2:	4628      	mov	r0, r5
 80104e4:	f7ff fba0 	bl	800fc28 <_fflush_r>
 80104e8:	2800      	cmp	r0, #0
 80104ea:	d0d9      	beq.n	80104a0 <__swbuf_r+0x2e>
 80104ec:	e7d6      	b.n	801049c <__swbuf_r+0x2a>
	...

080104f0 <__swsetup_r>:
 80104f0:	b538      	push	{r3, r4, r5, lr}
 80104f2:	4b29      	ldr	r3, [pc, #164]	@ (8010598 <__swsetup_r+0xa8>)
 80104f4:	4605      	mov	r5, r0
 80104f6:	460c      	mov	r4, r1
 80104f8:	6818      	ldr	r0, [r3, #0]
 80104fa:	b118      	cbz	r0, 8010504 <__swsetup_r+0x14>
 80104fc:	6a03      	ldr	r3, [r0, #32]
 80104fe:	b90b      	cbnz	r3, 8010504 <__swsetup_r+0x14>
 8010500:	f7fe f882 	bl	800e608 <__sinit>
 8010504:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010508:	0719      	lsls	r1, r3, #28
 801050a:	d422      	bmi.n	8010552 <__swsetup_r+0x62>
 801050c:	06da      	lsls	r2, r3, #27
 801050e:	d407      	bmi.n	8010520 <__swsetup_r+0x30>
 8010510:	2209      	movs	r2, #9
 8010512:	602a      	str	r2, [r5, #0]
 8010514:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010518:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801051c:	81a3      	strh	r3, [r4, #12]
 801051e:	e033      	b.n	8010588 <__swsetup_r+0x98>
 8010520:	0758      	lsls	r0, r3, #29
 8010522:	d512      	bpl.n	801054a <__swsetup_r+0x5a>
 8010524:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8010526:	b141      	cbz	r1, 801053a <__swsetup_r+0x4a>
 8010528:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801052c:	4299      	cmp	r1, r3
 801052e:	d002      	beq.n	8010536 <__swsetup_r+0x46>
 8010530:	4628      	mov	r0, r5
 8010532:	f000 f967 	bl	8010804 <_free_r>
 8010536:	2300      	movs	r3, #0
 8010538:	6363      	str	r3, [r4, #52]	@ 0x34
 801053a:	89a3      	ldrh	r3, [r4, #12]
 801053c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8010540:	81a3      	strh	r3, [r4, #12]
 8010542:	2300      	movs	r3, #0
 8010544:	6063      	str	r3, [r4, #4]
 8010546:	6923      	ldr	r3, [r4, #16]
 8010548:	6023      	str	r3, [r4, #0]
 801054a:	89a3      	ldrh	r3, [r4, #12]
 801054c:	f043 0308 	orr.w	r3, r3, #8
 8010550:	81a3      	strh	r3, [r4, #12]
 8010552:	6923      	ldr	r3, [r4, #16]
 8010554:	b94b      	cbnz	r3, 801056a <__swsetup_r+0x7a>
 8010556:	89a3      	ldrh	r3, [r4, #12]
 8010558:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 801055c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8010560:	d003      	beq.n	801056a <__swsetup_r+0x7a>
 8010562:	4621      	mov	r1, r4
 8010564:	4628      	mov	r0, r5
 8010566:	f000 f83e 	bl	80105e6 <__smakebuf_r>
 801056a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801056e:	f013 0201 	ands.w	r2, r3, #1
 8010572:	d00a      	beq.n	801058a <__swsetup_r+0x9a>
 8010574:	2200      	movs	r2, #0
 8010576:	60a2      	str	r2, [r4, #8]
 8010578:	6962      	ldr	r2, [r4, #20]
 801057a:	4252      	negs	r2, r2
 801057c:	61a2      	str	r2, [r4, #24]
 801057e:	6922      	ldr	r2, [r4, #16]
 8010580:	b942      	cbnz	r2, 8010594 <__swsetup_r+0xa4>
 8010582:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8010586:	d1c5      	bne.n	8010514 <__swsetup_r+0x24>
 8010588:	bd38      	pop	{r3, r4, r5, pc}
 801058a:	0799      	lsls	r1, r3, #30
 801058c:	bf58      	it	pl
 801058e:	6962      	ldrpl	r2, [r4, #20]
 8010590:	60a2      	str	r2, [r4, #8]
 8010592:	e7f4      	b.n	801057e <__swsetup_r+0x8e>
 8010594:	2000      	movs	r0, #0
 8010596:	e7f7      	b.n	8010588 <__swsetup_r+0x98>
 8010598:	20000040 	.word	0x20000040

0801059c <__swhatbuf_r>:
 801059c:	b570      	push	{r4, r5, r6, lr}
 801059e:	460c      	mov	r4, r1
 80105a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80105a4:	b096      	sub	sp, #88	@ 0x58
 80105a6:	4615      	mov	r5, r2
 80105a8:	2900      	cmp	r1, #0
 80105aa:	461e      	mov	r6, r3
 80105ac:	da0c      	bge.n	80105c8 <__swhatbuf_r+0x2c>
 80105ae:	89a3      	ldrh	r3, [r4, #12]
 80105b0:	2100      	movs	r1, #0
 80105b2:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80105b6:	bf14      	ite	ne
 80105b8:	2340      	movne	r3, #64	@ 0x40
 80105ba:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80105be:	2000      	movs	r0, #0
 80105c0:	6031      	str	r1, [r6, #0]
 80105c2:	602b      	str	r3, [r5, #0]
 80105c4:	b016      	add	sp, #88	@ 0x58
 80105c6:	bd70      	pop	{r4, r5, r6, pc}
 80105c8:	466a      	mov	r2, sp
 80105ca:	f000 f8c9 	bl	8010760 <_fstat_r>
 80105ce:	2800      	cmp	r0, #0
 80105d0:	dbed      	blt.n	80105ae <__swhatbuf_r+0x12>
 80105d2:	9901      	ldr	r1, [sp, #4]
 80105d4:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80105d8:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80105dc:	4259      	negs	r1, r3
 80105de:	4159      	adcs	r1, r3
 80105e0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80105e4:	e7eb      	b.n	80105be <__swhatbuf_r+0x22>

080105e6 <__smakebuf_r>:
 80105e6:	898b      	ldrh	r3, [r1, #12]
 80105e8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80105ea:	079d      	lsls	r5, r3, #30
 80105ec:	4606      	mov	r6, r0
 80105ee:	460c      	mov	r4, r1
 80105f0:	d507      	bpl.n	8010602 <__smakebuf_r+0x1c>
 80105f2:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80105f6:	6023      	str	r3, [r4, #0]
 80105f8:	6123      	str	r3, [r4, #16]
 80105fa:	2301      	movs	r3, #1
 80105fc:	6163      	str	r3, [r4, #20]
 80105fe:	b003      	add	sp, #12
 8010600:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010602:	ab01      	add	r3, sp, #4
 8010604:	466a      	mov	r2, sp
 8010606:	f7ff ffc9 	bl	801059c <__swhatbuf_r>
 801060a:	9f00      	ldr	r7, [sp, #0]
 801060c:	4605      	mov	r5, r0
 801060e:	4630      	mov	r0, r6
 8010610:	4639      	mov	r1, r7
 8010612:	f7ff fa09 	bl	800fa28 <_malloc_r>
 8010616:	b948      	cbnz	r0, 801062c <__smakebuf_r+0x46>
 8010618:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801061c:	059a      	lsls	r2, r3, #22
 801061e:	d4ee      	bmi.n	80105fe <__smakebuf_r+0x18>
 8010620:	f023 0303 	bic.w	r3, r3, #3
 8010624:	f043 0302 	orr.w	r3, r3, #2
 8010628:	81a3      	strh	r3, [r4, #12]
 801062a:	e7e2      	b.n	80105f2 <__smakebuf_r+0xc>
 801062c:	89a3      	ldrh	r3, [r4, #12]
 801062e:	6020      	str	r0, [r4, #0]
 8010630:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010634:	81a3      	strh	r3, [r4, #12]
 8010636:	9b01      	ldr	r3, [sp, #4]
 8010638:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801063c:	b15b      	cbz	r3, 8010656 <__smakebuf_r+0x70>
 801063e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010642:	4630      	mov	r0, r6
 8010644:	f000 f826 	bl	8010694 <_isatty_r>
 8010648:	b128      	cbz	r0, 8010656 <__smakebuf_r+0x70>
 801064a:	89a3      	ldrh	r3, [r4, #12]
 801064c:	f023 0303 	bic.w	r3, r3, #3
 8010650:	f043 0301 	orr.w	r3, r3, #1
 8010654:	81a3      	strh	r3, [r4, #12]
 8010656:	89a3      	ldrh	r3, [r4, #12]
 8010658:	431d      	orrs	r5, r3
 801065a:	81a5      	strh	r5, [r4, #12]
 801065c:	e7cf      	b.n	80105fe <__smakebuf_r+0x18>

0801065e <memmove>:
 801065e:	4288      	cmp	r0, r1
 8010660:	b510      	push	{r4, lr}
 8010662:	eb01 0402 	add.w	r4, r1, r2
 8010666:	d902      	bls.n	801066e <memmove+0x10>
 8010668:	4284      	cmp	r4, r0
 801066a:	4623      	mov	r3, r4
 801066c:	d807      	bhi.n	801067e <memmove+0x20>
 801066e:	1e43      	subs	r3, r0, #1
 8010670:	42a1      	cmp	r1, r4
 8010672:	d008      	beq.n	8010686 <memmove+0x28>
 8010674:	f811 2b01 	ldrb.w	r2, [r1], #1
 8010678:	f803 2f01 	strb.w	r2, [r3, #1]!
 801067c:	e7f8      	b.n	8010670 <memmove+0x12>
 801067e:	4402      	add	r2, r0
 8010680:	4601      	mov	r1, r0
 8010682:	428a      	cmp	r2, r1
 8010684:	d100      	bne.n	8010688 <memmove+0x2a>
 8010686:	bd10      	pop	{r4, pc}
 8010688:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801068c:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8010690:	e7f7      	b.n	8010682 <memmove+0x24>
	...

08010694 <_isatty_r>:
 8010694:	b538      	push	{r3, r4, r5, lr}
 8010696:	2300      	movs	r3, #0
 8010698:	4d05      	ldr	r5, [pc, #20]	@ (80106b0 <_isatty_r+0x1c>)
 801069a:	4604      	mov	r4, r0
 801069c:	4608      	mov	r0, r1
 801069e:	602b      	str	r3, [r5, #0]
 80106a0:	f7f4 fa5f 	bl	8004b62 <_isatty>
 80106a4:	1c43      	adds	r3, r0, #1
 80106a6:	d102      	bne.n	80106ae <_isatty_r+0x1a>
 80106a8:	682b      	ldr	r3, [r5, #0]
 80106aa:	b103      	cbz	r3, 80106ae <_isatty_r+0x1a>
 80106ac:	6023      	str	r3, [r4, #0]
 80106ae:	bd38      	pop	{r3, r4, r5, pc}
 80106b0:	20000738 	.word	0x20000738

080106b4 <_lseek_r>:
 80106b4:	b538      	push	{r3, r4, r5, lr}
 80106b6:	4604      	mov	r4, r0
 80106b8:	4d06      	ldr	r5, [pc, #24]	@ (80106d4 <_lseek_r+0x20>)
 80106ba:	4608      	mov	r0, r1
 80106bc:	4611      	mov	r1, r2
 80106be:	2200      	movs	r2, #0
 80106c0:	602a      	str	r2, [r5, #0]
 80106c2:	461a      	mov	r2, r3
 80106c4:	f7f4 fa57 	bl	8004b76 <_lseek>
 80106c8:	1c43      	adds	r3, r0, #1
 80106ca:	d102      	bne.n	80106d2 <_lseek_r+0x1e>
 80106cc:	682b      	ldr	r3, [r5, #0]
 80106ce:	b103      	cbz	r3, 80106d2 <_lseek_r+0x1e>
 80106d0:	6023      	str	r3, [r4, #0]
 80106d2:	bd38      	pop	{r3, r4, r5, pc}
 80106d4:	20000738 	.word	0x20000738

080106d8 <_read_r>:
 80106d8:	b538      	push	{r3, r4, r5, lr}
 80106da:	4604      	mov	r4, r0
 80106dc:	4d06      	ldr	r5, [pc, #24]	@ (80106f8 <_read_r+0x20>)
 80106de:	4608      	mov	r0, r1
 80106e0:	4611      	mov	r1, r2
 80106e2:	2200      	movs	r2, #0
 80106e4:	602a      	str	r2, [r5, #0]
 80106e6:	461a      	mov	r2, r3
 80106e8:	f7f4 f9e8 	bl	8004abc <_read>
 80106ec:	1c43      	adds	r3, r0, #1
 80106ee:	d102      	bne.n	80106f6 <_read_r+0x1e>
 80106f0:	682b      	ldr	r3, [r5, #0]
 80106f2:	b103      	cbz	r3, 80106f6 <_read_r+0x1e>
 80106f4:	6023      	str	r3, [r4, #0]
 80106f6:	bd38      	pop	{r3, r4, r5, pc}
 80106f8:	20000738 	.word	0x20000738

080106fc <_sbrk_r>:
 80106fc:	b538      	push	{r3, r4, r5, lr}
 80106fe:	2300      	movs	r3, #0
 8010700:	4d05      	ldr	r5, [pc, #20]	@ (8010718 <_sbrk_r+0x1c>)
 8010702:	4604      	mov	r4, r0
 8010704:	4608      	mov	r0, r1
 8010706:	602b      	str	r3, [r5, #0]
 8010708:	f7f4 fa42 	bl	8004b90 <_sbrk>
 801070c:	1c43      	adds	r3, r0, #1
 801070e:	d102      	bne.n	8010716 <_sbrk_r+0x1a>
 8010710:	682b      	ldr	r3, [r5, #0]
 8010712:	b103      	cbz	r3, 8010716 <_sbrk_r+0x1a>
 8010714:	6023      	str	r3, [r4, #0]
 8010716:	bd38      	pop	{r3, r4, r5, pc}
 8010718:	20000738 	.word	0x20000738

0801071c <_write_r>:
 801071c:	b538      	push	{r3, r4, r5, lr}
 801071e:	4604      	mov	r4, r0
 8010720:	4d06      	ldr	r5, [pc, #24]	@ (801073c <_write_r+0x20>)
 8010722:	4608      	mov	r0, r1
 8010724:	4611      	mov	r1, r2
 8010726:	2200      	movs	r2, #0
 8010728:	602a      	str	r2, [r5, #0]
 801072a:	461a      	mov	r2, r3
 801072c:	f7f4 f9e3 	bl	8004af6 <_write>
 8010730:	1c43      	adds	r3, r0, #1
 8010732:	d102      	bne.n	801073a <_write_r+0x1e>
 8010734:	682b      	ldr	r3, [r5, #0]
 8010736:	b103      	cbz	r3, 801073a <_write_r+0x1e>
 8010738:	6023      	str	r3, [r4, #0]
 801073a:	bd38      	pop	{r3, r4, r5, pc}
 801073c:	20000738 	.word	0x20000738

08010740 <_close_r>:
 8010740:	b538      	push	{r3, r4, r5, lr}
 8010742:	2300      	movs	r3, #0
 8010744:	4d05      	ldr	r5, [pc, #20]	@ (801075c <_close_r+0x1c>)
 8010746:	4604      	mov	r4, r0
 8010748:	4608      	mov	r0, r1
 801074a:	602b      	str	r3, [r5, #0]
 801074c:	f7f4 f9ef 	bl	8004b2e <_close>
 8010750:	1c43      	adds	r3, r0, #1
 8010752:	d102      	bne.n	801075a <_close_r+0x1a>
 8010754:	682b      	ldr	r3, [r5, #0]
 8010756:	b103      	cbz	r3, 801075a <_close_r+0x1a>
 8010758:	6023      	str	r3, [r4, #0]
 801075a:	bd38      	pop	{r3, r4, r5, pc}
 801075c:	20000738 	.word	0x20000738

08010760 <_fstat_r>:
 8010760:	b538      	push	{r3, r4, r5, lr}
 8010762:	2300      	movs	r3, #0
 8010764:	4d06      	ldr	r5, [pc, #24]	@ (8010780 <_fstat_r+0x20>)
 8010766:	4604      	mov	r4, r0
 8010768:	4608      	mov	r0, r1
 801076a:	4611      	mov	r1, r2
 801076c:	602b      	str	r3, [r5, #0]
 801076e:	f7f4 f9e9 	bl	8004b44 <_fstat>
 8010772:	1c43      	adds	r3, r0, #1
 8010774:	d102      	bne.n	801077c <_fstat_r+0x1c>
 8010776:	682b      	ldr	r3, [r5, #0]
 8010778:	b103      	cbz	r3, 801077c <_fstat_r+0x1c>
 801077a:	6023      	str	r3, [r4, #0]
 801077c:	bd38      	pop	{r3, r4, r5, pc}
 801077e:	bf00      	nop
 8010780:	20000738 	.word	0x20000738

08010784 <memcpy>:
 8010784:	440a      	add	r2, r1
 8010786:	1e43      	subs	r3, r0, #1
 8010788:	4291      	cmp	r1, r2
 801078a:	d100      	bne.n	801078e <memcpy+0xa>
 801078c:	4770      	bx	lr
 801078e:	b510      	push	{r4, lr}
 8010790:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010794:	4291      	cmp	r1, r2
 8010796:	f803 4f01 	strb.w	r4, [r3, #1]!
 801079a:	d1f9      	bne.n	8010790 <memcpy+0xc>
 801079c:	bd10      	pop	{r4, pc}
	...

080107a0 <__assert_func>:
 80107a0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80107a2:	4614      	mov	r4, r2
 80107a4:	461a      	mov	r2, r3
 80107a6:	4b09      	ldr	r3, [pc, #36]	@ (80107cc <__assert_func+0x2c>)
 80107a8:	4605      	mov	r5, r0
 80107aa:	681b      	ldr	r3, [r3, #0]
 80107ac:	68d8      	ldr	r0, [r3, #12]
 80107ae:	b14c      	cbz	r4, 80107c4 <__assert_func+0x24>
 80107b0:	4b07      	ldr	r3, [pc, #28]	@ (80107d0 <__assert_func+0x30>)
 80107b2:	9100      	str	r1, [sp, #0]
 80107b4:	4907      	ldr	r1, [pc, #28]	@ (80107d4 <__assert_func+0x34>)
 80107b6:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80107ba:	462b      	mov	r3, r5
 80107bc:	f000 f886 	bl	80108cc <fiprintf>
 80107c0:	f000 f8a3 	bl	801090a <abort>
 80107c4:	4b04      	ldr	r3, [pc, #16]	@ (80107d8 <__assert_func+0x38>)
 80107c6:	461c      	mov	r4, r3
 80107c8:	e7f3      	b.n	80107b2 <__assert_func+0x12>
 80107ca:	bf00      	nop
 80107cc:	20000040 	.word	0x20000040
 80107d0:	08011cfd 	.word	0x08011cfd
 80107d4:	08011d0a 	.word	0x08011d0a
 80107d8:	08011d38 	.word	0x08011d38

080107dc <_calloc_r>:
 80107dc:	b570      	push	{r4, r5, r6, lr}
 80107de:	fba1 5402 	umull	r5, r4, r1, r2
 80107e2:	b934      	cbnz	r4, 80107f2 <_calloc_r+0x16>
 80107e4:	4629      	mov	r1, r5
 80107e6:	f7ff f91f 	bl	800fa28 <_malloc_r>
 80107ea:	4606      	mov	r6, r0
 80107ec:	b928      	cbnz	r0, 80107fa <_calloc_r+0x1e>
 80107ee:	4630      	mov	r0, r6
 80107f0:	bd70      	pop	{r4, r5, r6, pc}
 80107f2:	220c      	movs	r2, #12
 80107f4:	2600      	movs	r6, #0
 80107f6:	6002      	str	r2, [r0, #0]
 80107f8:	e7f9      	b.n	80107ee <_calloc_r+0x12>
 80107fa:	462a      	mov	r2, r5
 80107fc:	4621      	mov	r1, r4
 80107fe:	f7fd ffa9 	bl	800e754 <memset>
 8010802:	e7f4      	b.n	80107ee <_calloc_r+0x12>

08010804 <_free_r>:
 8010804:	b538      	push	{r3, r4, r5, lr}
 8010806:	4605      	mov	r5, r0
 8010808:	2900      	cmp	r1, #0
 801080a:	d041      	beq.n	8010890 <_free_r+0x8c>
 801080c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010810:	1f0c      	subs	r4, r1, #4
 8010812:	2b00      	cmp	r3, #0
 8010814:	bfb8      	it	lt
 8010816:	18e4      	addlt	r4, r4, r3
 8010818:	f7ff fa2e 	bl	800fc78 <__malloc_lock>
 801081c:	4a1d      	ldr	r2, [pc, #116]	@ (8010894 <_free_r+0x90>)
 801081e:	6813      	ldr	r3, [r2, #0]
 8010820:	b933      	cbnz	r3, 8010830 <_free_r+0x2c>
 8010822:	6063      	str	r3, [r4, #4]
 8010824:	6014      	str	r4, [r2, #0]
 8010826:	4628      	mov	r0, r5
 8010828:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801082c:	f7ff ba2a 	b.w	800fc84 <__malloc_unlock>
 8010830:	42a3      	cmp	r3, r4
 8010832:	d908      	bls.n	8010846 <_free_r+0x42>
 8010834:	6820      	ldr	r0, [r4, #0]
 8010836:	1821      	adds	r1, r4, r0
 8010838:	428b      	cmp	r3, r1
 801083a:	bf01      	itttt	eq
 801083c:	6819      	ldreq	r1, [r3, #0]
 801083e:	685b      	ldreq	r3, [r3, #4]
 8010840:	1809      	addeq	r1, r1, r0
 8010842:	6021      	streq	r1, [r4, #0]
 8010844:	e7ed      	b.n	8010822 <_free_r+0x1e>
 8010846:	461a      	mov	r2, r3
 8010848:	685b      	ldr	r3, [r3, #4]
 801084a:	b10b      	cbz	r3, 8010850 <_free_r+0x4c>
 801084c:	42a3      	cmp	r3, r4
 801084e:	d9fa      	bls.n	8010846 <_free_r+0x42>
 8010850:	6811      	ldr	r1, [r2, #0]
 8010852:	1850      	adds	r0, r2, r1
 8010854:	42a0      	cmp	r0, r4
 8010856:	d10b      	bne.n	8010870 <_free_r+0x6c>
 8010858:	6820      	ldr	r0, [r4, #0]
 801085a:	4401      	add	r1, r0
 801085c:	1850      	adds	r0, r2, r1
 801085e:	6011      	str	r1, [r2, #0]
 8010860:	4283      	cmp	r3, r0
 8010862:	d1e0      	bne.n	8010826 <_free_r+0x22>
 8010864:	6818      	ldr	r0, [r3, #0]
 8010866:	685b      	ldr	r3, [r3, #4]
 8010868:	4408      	add	r0, r1
 801086a:	6053      	str	r3, [r2, #4]
 801086c:	6010      	str	r0, [r2, #0]
 801086e:	e7da      	b.n	8010826 <_free_r+0x22>
 8010870:	d902      	bls.n	8010878 <_free_r+0x74>
 8010872:	230c      	movs	r3, #12
 8010874:	602b      	str	r3, [r5, #0]
 8010876:	e7d6      	b.n	8010826 <_free_r+0x22>
 8010878:	6820      	ldr	r0, [r4, #0]
 801087a:	1821      	adds	r1, r4, r0
 801087c:	428b      	cmp	r3, r1
 801087e:	bf02      	ittt	eq
 8010880:	6819      	ldreq	r1, [r3, #0]
 8010882:	685b      	ldreq	r3, [r3, #4]
 8010884:	1809      	addeq	r1, r1, r0
 8010886:	6063      	str	r3, [r4, #4]
 8010888:	bf08      	it	eq
 801088a:	6021      	streq	r1, [r4, #0]
 801088c:	6054      	str	r4, [r2, #4]
 801088e:	e7ca      	b.n	8010826 <_free_r+0x22>
 8010890:	bd38      	pop	{r3, r4, r5, pc}
 8010892:	bf00      	nop
 8010894:	20000734 	.word	0x20000734

08010898 <__ascii_mbtowc>:
 8010898:	b082      	sub	sp, #8
 801089a:	b901      	cbnz	r1, 801089e <__ascii_mbtowc+0x6>
 801089c:	a901      	add	r1, sp, #4
 801089e:	b142      	cbz	r2, 80108b2 <__ascii_mbtowc+0x1a>
 80108a0:	b14b      	cbz	r3, 80108b6 <__ascii_mbtowc+0x1e>
 80108a2:	7813      	ldrb	r3, [r2, #0]
 80108a4:	600b      	str	r3, [r1, #0]
 80108a6:	7812      	ldrb	r2, [r2, #0]
 80108a8:	1e10      	subs	r0, r2, #0
 80108aa:	bf18      	it	ne
 80108ac:	2001      	movne	r0, #1
 80108ae:	b002      	add	sp, #8
 80108b0:	4770      	bx	lr
 80108b2:	4610      	mov	r0, r2
 80108b4:	e7fb      	b.n	80108ae <__ascii_mbtowc+0x16>
 80108b6:	f06f 0001 	mvn.w	r0, #1
 80108ba:	e7f8      	b.n	80108ae <__ascii_mbtowc+0x16>

080108bc <_malloc_usable_size_r>:
 80108bc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80108c0:	1f18      	subs	r0, r3, #4
 80108c2:	2b00      	cmp	r3, #0
 80108c4:	bfbc      	itt	lt
 80108c6:	580b      	ldrlt	r3, [r1, r0]
 80108c8:	18c0      	addlt	r0, r0, r3
 80108ca:	4770      	bx	lr

080108cc <fiprintf>:
 80108cc:	b40e      	push	{r1, r2, r3}
 80108ce:	b503      	push	{r0, r1, lr}
 80108d0:	ab03      	add	r3, sp, #12
 80108d2:	4601      	mov	r1, r0
 80108d4:	4805      	ldr	r0, [pc, #20]	@ (80108ec <fiprintf+0x20>)
 80108d6:	f853 2b04 	ldr.w	r2, [r3], #4
 80108da:	6800      	ldr	r0, [r0, #0]
 80108dc:	9301      	str	r3, [sp, #4]
 80108de:	f7fe ff61 	bl	800f7a4 <_vfiprintf_r>
 80108e2:	b002      	add	sp, #8
 80108e4:	f85d eb04 	ldr.w	lr, [sp], #4
 80108e8:	b003      	add	sp, #12
 80108ea:	4770      	bx	lr
 80108ec:	20000040 	.word	0x20000040

080108f0 <__ascii_wctomb>:
 80108f0:	4603      	mov	r3, r0
 80108f2:	4608      	mov	r0, r1
 80108f4:	b141      	cbz	r1, 8010908 <__ascii_wctomb+0x18>
 80108f6:	2aff      	cmp	r2, #255	@ 0xff
 80108f8:	d904      	bls.n	8010904 <__ascii_wctomb+0x14>
 80108fa:	228a      	movs	r2, #138	@ 0x8a
 80108fc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8010900:	601a      	str	r2, [r3, #0]
 8010902:	4770      	bx	lr
 8010904:	2001      	movs	r0, #1
 8010906:	700a      	strb	r2, [r1, #0]
 8010908:	4770      	bx	lr

0801090a <abort>:
 801090a:	2006      	movs	r0, #6
 801090c:	b508      	push	{r3, lr}
 801090e:	f000 f82b 	bl	8010968 <raise>
 8010912:	2001      	movs	r0, #1
 8010914:	f7f4 f8c7 	bl	8004aa6 <_exit>

08010918 <_raise_r>:
 8010918:	291f      	cmp	r1, #31
 801091a:	b538      	push	{r3, r4, r5, lr}
 801091c:	4605      	mov	r5, r0
 801091e:	460c      	mov	r4, r1
 8010920:	d904      	bls.n	801092c <_raise_r+0x14>
 8010922:	2316      	movs	r3, #22
 8010924:	6003      	str	r3, [r0, #0]
 8010926:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801092a:	bd38      	pop	{r3, r4, r5, pc}
 801092c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 801092e:	b112      	cbz	r2, 8010936 <_raise_r+0x1e>
 8010930:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8010934:	b94b      	cbnz	r3, 801094a <_raise_r+0x32>
 8010936:	4628      	mov	r0, r5
 8010938:	f000 f830 	bl	801099c <_getpid_r>
 801093c:	4622      	mov	r2, r4
 801093e:	4601      	mov	r1, r0
 8010940:	4628      	mov	r0, r5
 8010942:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010946:	f000 b817 	b.w	8010978 <_kill_r>
 801094a:	2b01      	cmp	r3, #1
 801094c:	d00a      	beq.n	8010964 <_raise_r+0x4c>
 801094e:	1c59      	adds	r1, r3, #1
 8010950:	d103      	bne.n	801095a <_raise_r+0x42>
 8010952:	2316      	movs	r3, #22
 8010954:	6003      	str	r3, [r0, #0]
 8010956:	2001      	movs	r0, #1
 8010958:	e7e7      	b.n	801092a <_raise_r+0x12>
 801095a:	2100      	movs	r1, #0
 801095c:	4620      	mov	r0, r4
 801095e:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8010962:	4798      	blx	r3
 8010964:	2000      	movs	r0, #0
 8010966:	e7e0      	b.n	801092a <_raise_r+0x12>

08010968 <raise>:
 8010968:	4b02      	ldr	r3, [pc, #8]	@ (8010974 <raise+0xc>)
 801096a:	4601      	mov	r1, r0
 801096c:	6818      	ldr	r0, [r3, #0]
 801096e:	f7ff bfd3 	b.w	8010918 <_raise_r>
 8010972:	bf00      	nop
 8010974:	20000040 	.word	0x20000040

08010978 <_kill_r>:
 8010978:	b538      	push	{r3, r4, r5, lr}
 801097a:	2300      	movs	r3, #0
 801097c:	4d06      	ldr	r5, [pc, #24]	@ (8010998 <_kill_r+0x20>)
 801097e:	4604      	mov	r4, r0
 8010980:	4608      	mov	r0, r1
 8010982:	4611      	mov	r1, r2
 8010984:	602b      	str	r3, [r5, #0]
 8010986:	f7f4 f87e 	bl	8004a86 <_kill>
 801098a:	1c43      	adds	r3, r0, #1
 801098c:	d102      	bne.n	8010994 <_kill_r+0x1c>
 801098e:	682b      	ldr	r3, [r5, #0]
 8010990:	b103      	cbz	r3, 8010994 <_kill_r+0x1c>
 8010992:	6023      	str	r3, [r4, #0]
 8010994:	bd38      	pop	{r3, r4, r5, pc}
 8010996:	bf00      	nop
 8010998:	20000738 	.word	0x20000738

0801099c <_getpid_r>:
 801099c:	f7f4 b86c 	b.w	8004a78 <_getpid>

080109a0 <_init>:
 80109a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80109a2:	bf00      	nop
 80109a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80109a6:	bc08      	pop	{r3}
 80109a8:	469e      	mov	lr, r3
 80109aa:	4770      	bx	lr

080109ac <_fini>:
 80109ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80109ae:	bf00      	nop
 80109b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80109b2:	bc08      	pop	{r3}
 80109b4:	469e      	mov	lr, r3
 80109b6:	4770      	bx	lr
